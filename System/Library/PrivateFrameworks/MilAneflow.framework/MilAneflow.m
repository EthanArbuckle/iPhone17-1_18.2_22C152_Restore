void MIL::ANEMachineIR::Interpreter::PeMulCpu::Run(ANEMachineIR::Validators *a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v9;
  std::string *v10;
  std::string *v11;
  long long v12;
  std::string *v13;
  long long v14;
  uint64_t v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  long long v20;
  void *v21;
  uint64_t InterpretedTensorValue;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  MIL::IRValueType *OutputType;
  uint64_t v29;
  int v30;
  ANEMachineIR::Utils *v31;
  const MIL::IRTensorValueType *v32;
  ANEMachineIR::Utils *v33;
  const MIL::IRTensorValueType *v34;
  MIL::IRValueType *v35;
  ANEMachineIR::Utils *v36;
  const MIL::IRTensorValueType *v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  float v41;
  unsigned __int8 *v42;
  MIL::IRValueType *v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  float v48;
  unsigned __int8 *v49;
  MIL::IRValueType *v50;
  void **v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  float v55;
  unsigned __int8 *v56;
  MIL::IRValueType *v57;
  void **v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  float v62;
  float v63;
  unsigned __int8 *v64;
  MIL::IRValueType *v65;
  void **v66;
  uint64_t v67;
  uint64_t v68;
  float v69;
  float v70;
  unsigned __int8 *v71;
  MIL::IRValueType *v72;
  void **v73;
  uint64_t v74;
  uint64_t v75;
  float v76;
  float v77;
  unsigned __int8 *v78;
  MIL::IRValueType *v79;
  void **v80;
  uint64_t v81;
  uint64_t v82;
  float v83;
  float v84;
  unsigned __int8 *v85;
  MIL::IRValueType *v86;
  void **v87;
  uint64_t v88;
  uint64_t v89;
  float v90;
  float v91;
  unsigned __int8 *v92;
  MIL::IRValueType *v93;
  void **v94;
  uint64_t v95;
  uint64_t v96;
  float v97;
  float v98;
  unsigned __int8 *v99;
  MIL::IRValueType *v100;
  void **v101;
  uint64_t v102;
  uint64_t v103;
  float v104;
  float v105;
  unsigned __int8 *v106;
  MIL::IRValueType *v107;
  void **v108;
  uint64_t v109;
  uint64_t v110;
  float v111;
  float v112;
  unsigned __int8 *v113;
  MIL::IRValueType *v114;
  void **v115;
  uint64_t v116;
  uint64_t v117;
  float v118;
  float v119;
  unsigned __int8 *v120;
  MIL::IRValueType *v121;
  void **v122;
  uint64_t v123;
  uint64_t v124;
  float v125;
  float v126;
  unsigned __int8 *v127;
  MIL::IRValueType *v128;
  void **v129;
  uint64_t v130;
  uint64_t v131;
  float v132;
  float v133;
  unsigned __int8 *v134;
  MIL::IRValueType *v135;
  void **v136;
  uint64_t v137;
  uint64_t v138;
  float v139;
  float v140;
  unsigned __int8 *v141;
  MIL::IRValueType *v142;
  void **v143;
  uint64_t v144;
  uint64_t v145;
  float v146;
  float v147;
  unsigned __int8 *v148;
  MIL::IRValueType *v149;
  void **v150;
  uint64_t v151;
  uint64_t v152;
  float v153;
  float v154;
  unsigned __int8 *v155;
  MIL::IRValueType *v156;
  void **v157;
  uint64_t v158;
  uint64_t v159;
  float v160;
  float v161;
  unsigned __int8 *v162;
  MIL::IRValueType *v163;
  void **v164;
  uint64_t v165;
  uint64_t v166;
  float v167;
  float v168;
  unsigned __int8 *v169;
  MIL::IRValueType *v170;
  void **v171;
  uint64_t v172;
  uint64_t v173;
  float v174;
  float v175;
  unsigned __int8 *v176;
  MIL::IRValueType *v177;
  void **v178;
  uint64_t v179;
  uint64_t v180;
  float v181;
  float v182;
  unsigned __int8 *v183;
  MIL::IRValueType *v184;
  void **v185;
  uint64_t v186;
  uint64_t v187;
  float v188;
  float v189;
  unsigned __int8 *v190;
  MIL::IRValueType *v191;
  void **v192;
  uint64_t v193;
  uint64_t v194;
  float v195;
  float v196;
  unsigned __int8 *v197;
  MIL::IRValueType *v198;
  void **v199;
  uint64_t v200;
  uint64_t Data;
  float v202;
  float v203;
  unsigned __int8 *v204;
  MIL::IRValueType *v205;
  void **v206;
  uint64_t v207;
  uint64_t v208;
  float v209;
  float v210;
  unsigned __int8 *v211;
  MIL::IRValueType *v212;
  void **v213;
  uint64_t v214;
  uint64_t v215;
  float v216;
  float v217;
  unsigned __int8 *v218;
  MIL::IRValueType *v219;
  void **v220;
  uint64_t v221;
  uint64_t v222;
  float v223;
  float v224;
  unsigned __int8 *v225;
  MIL::IRValueType *v226;
  void **v227;
  unsigned __int8 *v228;
  unsigned __int8 *v229;
  uint64_t v230;
  void *v231[3];
  void *v232[3];
  void *v233[3];
  void *v234[3];
  std::string v235;
  uint64_t v236;
  std::string v237;
  void *v238;
  char v239;
  char v240;
  void *v241;
  void *v242;
  char v243;
  char v244;
  char v245;
  char v246;
  char v247;
  void *__p;
  char v249;
  char v250;
  void **v251;
  void v252[4];
  void v253[4];
  void v254[4];
  void v255[4];
  void v256[4];
  void v257[4];
  void v258[4];
  void v259[4];
  void v260[4];
  void v261[4];
  void v262[4];
  void v263[4];
  void v264[4];
  void v265[4];
  void v266[4];
  void v267[4];
  void v268[4];
  void v269[4];
  void v270[4];
  void v271[4];
  void v272[4];
  void v273[4];
  void v274[4];
  void v275[4];
  void v276[4];
  void v277[4];
  void v278[4];
  void v279[2];
  char v280;
  uint64_t v281;

  v281 = *MEMORY[0x263EF8340];
  v6 = (*(uint64_t (**)(ANEMachineIR::Validators *))(*(void *)a1 + 56))(a1);
  v7 = *(char *)(v6 + 23);
  if (v7 < 0)
  {
    if (*(void *)(v6 + 8) != 6) {
      goto LABEL_10;
    }
    v6 = *(void *)v6;
  }
  else if (v7 != 6)
  {
    goto LABEL_10;
  }
  if (*(_DWORD *)v6 != 1834968432 || *(_WORD *)(v6 + 4) != 27765)
  {
LABEL_10:
    *(_DWORD *)a3 = 1;
    v9 = a3 + 8;
    v10 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v279, "pe_mul");
    v11 = std::string::insert(v10, 0, "Expected ");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v235.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v235.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = std::string::append(&v235, " op. Got ");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v237.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = (*(uint64_t (**)(ANEMachineIR::Validators *))(*(void *)a1 + 56))(a1);
    v16 = *(char *)(v15 + 23);
    if (v16 >= 0) {
      v17 = (const std::string::value_type *)v15;
    }
    else {
      v17 = *(const std::string::value_type **)v15;
    }
    if (v16 >= 0) {
      v18 = *(unsigned __int8 *)(v15 + 23);
    }
    else {
      v18 = *(void *)(v15 + 8);
    }
    v19 = std::string::append(&v237, v17, v18);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    *(void *)(v9 + 16) = *((void *)&v19->__r_.__value_.__l + 2);
    *(_OWORD *)v9 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v237.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v235.__r_.__value_.__l.__data_);
    }
    if (v280 < 0)
    {
      v21 = (void *)v279[0];
LABEL_22:
      operator delete(v21);
      return;
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v237, "x");
  InterpretedTensorValue = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&v237);
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v237.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v237, "y");
  v23 = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&v237);
  if ((SHIBYTE(v237.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (InterpretedTensorValue) {
      goto LABEL_28;
    }
LABEL_33:
    *(_DWORD *)a3 = 2;
    std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), "No value for x");
    return;
  }
  operator delete(v237.__r_.__value_.__l.__data_);
  if (!InterpretedTensorValue) {
    goto LABEL_33;
  }
LABEL_28:
  if (!v23)
  {
    *(_DWORD *)a3 = 2;
    std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), "No value for y");
    return;
  }
  v237.__r_.__value_.__s.__data_[0] = 0;
  v237.__r_.__value_.__s.__data_[4] = 0;
  v237.__r_.__value_.__s.__data_[8] = 0;
  v237.__r_.__value_.__s.__data_[12] = 0;
  v237.__r_.__value_.__s.__data_[16] = 0;
  v237.__r_.__value_.__s.__data_[18] = 0;
  LOBYTE(v238) = 0;
  v240 = 0;
  LOBYTE(v241) = 0;
  v243 = 0;
  v244 = 0;
  v245 = 0;
  v246 = 0;
  v247 = 0;
  LOBYTE(__p) = 0;
  v250 = 0;
  ANEMachineIR::Validators::ParsePeElementWiseBinaryParamValues(a1, (const MIL::IROperation *)&v237, (MIL::ValidationResult *)&v235);
  if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v235) & 1) == 0)
  {
    *(_DWORD *)a3 = 3;
    MIL::MILResult::GetMessageWithLocation((MIL::MILResult *)&v235);
    MEMORY[0x21667B360](&v235);
    goto LABEL_36;
  }
  MEMORY[0x21667B360](&v235);
  if (v240)
  {
    *(_DWORD *)a3 = 5;
    std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), "Unimplemented 'reduction': rdar://86732114");
    goto LABEL_36;
  }
  *(_OWORD *)&v235.__r_.__value_.__r.__words[1] = 0uLL;
  v236 = 0;
  MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction((uint64_t)a1, (uint64_t)&v235, (uint64_t)v279);
  if (!LODWORD(v235.__r_.__value_.__l.__data_))
  {
    v24 = (*(uint64_t (**)(uint64_t))(*(void *)InterpretedTensorValue + 32))(InterpretedTensorValue);
    v25 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 88))(v24);
    v26 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 32))(v23);
    v27 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 88))(v26);
    OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
    v29 = MIL::IRValueType::AsTensorType(OutputType);
    v30 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 88))(v29);
    v31 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(void *)InterpretedTensorValue + 32))(InterpretedTensorValue);
    ANEMachineIR::Utils::GetStaticTensorShape(v31, v32, (uint64_t)v234);
    v33 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(void *)v23 + 32))(v23);
    ANEMachineIR::Utils::GetStaticTensorShape(v33, v34, (uint64_t)v233);
    v35 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
    v36 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v35);
    ANEMachineIR::Utils::GetStaticTensorShape(v36, v37, (uint64_t)v232);
    switch(v25)
    {
      case 4:
        switch(v27)
        {
          case 14:
            switch(v30)
            {
              case 14:
                v200 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                Data = MIL::IRTensorValue::GetDataView<unsigned char>();
                v228 = 0;
                v229 = 0;
                v230 = 0;
                v202 = *(float *)&v237.__r_.__value_.__l.__data_;
                v203 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v274, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v274);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v204 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v205 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v205);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v204, (uint64_t *)&v251);
                v206 = v251;
                v251 = 0;
                if (v206) {
                  (*((void (**)(void **))*v206 + 1))(v206);
                }
                goto LABEL_197;
              case 9:
                v158 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                v159 = MIL::IRTensorValue::GetDataView<unsigned char>();
                v228 = 0;
                v229 = 0;
                v230 = 0;
                v160 = *(float *)&v237.__r_.__value_.__l.__data_;
                v161 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v273, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v273);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v162 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v163 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v163);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v162, (uint64_t *)&v251);
                v164 = v251;
                v251 = 0;
                if (v164) {
                  (*((void (**)(void **))*v164 + 1))(v164);
                }
                goto LABEL_197;
              case 4:
                v88 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                v89 = MIL::IRTensorValue::GetDataView<unsigned char>();
                v228 = 0;
                v229 = 0;
                v230 = 0;
                v90 = *(float *)&v237.__r_.__value_.__l.__data_;
                v91 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v275, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v275);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v92 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v93 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v93);
                MIL::IRTensorValueType::MakeFloat16Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v92, (uint64_t *)&v251);
                v94 = v251;
                v251 = 0;
                if (v94) {
                  (*((void (**)(void **))*v94 + 1))(v94);
                }
                goto LABEL_197;
            }
            goto LABEL_124;
          case 9:
            switch(v30)
            {
              case 14:
                v151 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                v152 = MIL::IRTensorValue::GetDataView<signed char>();
                v228 = 0;
                v229 = 0;
                v230 = 0;
                v153 = *(float *)&v237.__r_.__value_.__l.__data_;
                v154 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v271, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v271);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v155 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v156 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v156);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v155, (uint64_t *)&v251);
                v157 = v251;
                v251 = 0;
                if (v157) {
                  (*((void (**)(void **))*v157 + 1))(v157);
                }
                goto LABEL_197;
              case 9:
                v123 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                v124 = MIL::IRTensorValue::GetDataView<signed char>();
                v228 = 0;
                v229 = 0;
                v230 = 0;
                v125 = *(float *)&v237.__r_.__value_.__l.__data_;
                v126 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v270, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v270);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v127 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v128 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v128);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v127, (uint64_t *)&v251);
                v129 = v251;
                v251 = 0;
                if (v129) {
                  (*((void (**)(void **))*v129 + 1))(v129);
                }
                goto LABEL_197;
              case 4:
                v74 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                v75 = MIL::IRTensorValue::GetDataView<signed char>();
                v228 = 0;
                v229 = 0;
                v230 = 0;
                v76 = *(float *)&v237.__r_.__value_.__l.__data_;
                v77 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v272, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v272);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v78 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v79 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v79);
                MIL::IRTensorValueType::MakeFloat16Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v78, (uint64_t *)&v251);
                v80 = v251;
                v251 = 0;
                if (v80) {
                  (*((void (**)(void **))*v80 + 1))(v80);
                }
                goto LABEL_197;
            }
            goto LABEL_124;
          case 4:
            switch(v30)
            {
              case 14:
                v207 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                v208 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                v228 = 0;
                v229 = 0;
                v230 = 0;
                v209 = *(float *)&v237.__r_.__value_.__l.__data_;
                v210 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v277, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v277);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v211 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v212 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v212);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v211, (uint64_t *)&v251);
                v213 = v251;
                v251 = 0;
                if (v213) {
                  (*((void (**)(void **))*v213 + 1))(v213);
                }
                goto LABEL_197;
              case 9:
                v172 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                v173 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                v228 = 0;
                v229 = 0;
                v230 = 0;
                v174 = *(float *)&v237.__r_.__value_.__l.__data_;
                v175 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v276, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v276);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v176 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v177 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v177);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v176, (uint64_t *)&v251);
                v178 = v251;
                v251 = 0;
                if (v178) {
                  (*((void (**)(void **))*v178 + 1))(v178);
                }
                goto LABEL_197;
              case 4:
                v52 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                v53 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                v228 = 0;
                v229 = 0;
                v230 = 0;
                v54 = *(float *)&v237.__r_.__value_.__l.__data_;
                v55 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v278, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v278);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v56 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v57 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v57);
                MIL::IRTensorValueType::MakeFloat16Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v56, (uint64_t *)&v251);
                v58 = v251;
                v251 = 0;
                if (v58) {
                  (*((void (**)(void **))*v58 + 1))(v58);
                }
                goto LABEL_197;
            }
            goto LABEL_124;
        }
        break;
      case 9:
        switch(v27)
        {
          case 14:
            switch(v30)
            {
              case 14:
                v144 = MIL::IRTensorValue::GetDataView<signed char>();
                v145 = MIL::IRTensorValue::GetDataView<unsigned char>();
                v228 = 0;
                v229 = 0;
                v230 = 0;
                v146 = *(float *)&v237.__r_.__value_.__l.__data_;
                v147 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v256, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v256);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v148 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v149 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v149);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v148, (uint64_t *)&v251);
                v150 = v251;
                v251 = 0;
                if (v150) {
                  (*((void (**)(void **))*v150 + 1))(v150);
                }
                goto LABEL_197;
              case 9:
                v116 = MIL::IRTensorValue::GetDataView<signed char>();
                v117 = MIL::IRTensorValue::GetDataView<unsigned char>();
                v228 = 0;
                v229 = 0;
                v230 = 0;
                v118 = *(float *)&v237.__r_.__value_.__l.__data_;
                v119 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v255, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v255);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v120 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v121 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v121);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v120, (uint64_t *)&v251);
                v122 = v251;
                v251 = 0;
                if (v122) {
                  (*((void (**)(void **))*v122 + 1))(v122);
                }
                goto LABEL_197;
              case 4:
                v67 = MIL::IRTensorValue::GetDataView<signed char>();
                v68 = MIL::IRTensorValue::GetDataView<unsigned char>();
                v228 = 0;
                v229 = 0;
                v230 = 0;
                v69 = *(float *)&v237.__r_.__value_.__l.__data_;
                v70 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v257, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v257);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v71 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v72 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v72);
                MIL::IRTensorValueType::MakeFloat16Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v71, (uint64_t *)&v251);
                v73 = v251;
                v251 = 0;
                if (v73) {
                  (*((void (**)(void **))*v73 + 1))(v73);
                }
                goto LABEL_197;
            }
            goto LABEL_124;
          case 9:
            switch(v30)
            {
              case 14:
                v109 = MIL::IRTensorValue::GetDataView<signed char>();
                v110 = MIL::IRTensorValue::GetDataView<signed char>();
                v228 = 0;
                v229 = 0;
                v230 = 0;
                v111 = *(float *)&v237.__r_.__value_.__l.__data_;
                v112 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v253, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v253);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v113 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v114 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v114);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v113, (uint64_t *)&v251);
                v115 = v251;
                v251 = 0;
                if (v115) {
                  (*((void (**)(void **))*v115 + 1))(v115);
                }
                goto LABEL_197;
              case 9:
                v102 = MIL::IRTensorValue::GetDataView<signed char>();
                v103 = MIL::IRTensorValue::GetDataView<signed char>();
                v228 = 0;
                v229 = 0;
                v230 = 0;
                v104 = *(float *)&v237.__r_.__value_.__l.__data_;
                v105 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v252, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v252);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v106 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v107 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v107);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v106, (uint64_t *)&v251);
                v108 = v251;
                v251 = 0;
                if (v108) {
                  (*((void (**)(void **))*v108 + 1))(v108);
                }
                goto LABEL_197;
              case 4:
                v60 = MIL::IRTensorValue::GetDataView<signed char>();
                v61 = MIL::IRTensorValue::GetDataView<signed char>();
                v228 = 0;
                v229 = 0;
                v230 = 0;
                v62 = *(float *)&v237.__r_.__value_.__l.__data_;
                v63 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v254, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v254);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v64 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v65 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v65);
                MIL::IRTensorValueType::MakeFloat16Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v64, (uint64_t *)&v251);
                v66 = v251;
                v251 = 0;
                if (v66) {
                  (*((void (**)(void **))*v66 + 1))(v66);
                }
                goto LABEL_197;
            }
            goto LABEL_124;
          case 4:
            switch(v30)
            {
              case 14:
                v165 = MIL::IRTensorValue::GetDataView<signed char>();
                v166 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                v228 = 0;
                v229 = 0;
                v230 = 0;
                v167 = *(float *)&v237.__r_.__value_.__l.__data_;
                v168 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v259, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v259);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v169 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v170 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v170);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v169, (uint64_t *)&v251);
                v171 = v251;
                v251 = 0;
                if (v171) {
                  (*((void (**)(void **))*v171 + 1))(v171);
                }
                goto LABEL_197;
              case 9:
                v130 = MIL::IRTensorValue::GetDataView<signed char>();
                v131 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                v228 = 0;
                v229 = 0;
                v230 = 0;
                v132 = *(float *)&v237.__r_.__value_.__l.__data_;
                v133 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v258, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v258);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v134 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v135 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v135);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v134, (uint64_t *)&v251);
                v136 = v251;
                v251 = 0;
                if (v136) {
                  (*((void (**)(void **))*v136 + 1))(v136);
                }
                goto LABEL_197;
              case 4:
                v45 = MIL::IRTensorValue::GetDataView<signed char>();
                v46 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                v228 = 0;
                v229 = 0;
                v230 = 0;
                v47 = *(float *)&v237.__r_.__value_.__l.__data_;
                v48 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v260, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v260);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v49 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v50 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v50);
                MIL::IRTensorValueType::MakeFloat16Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v49, (uint64_t *)&v251);
                v51 = v251;
                v251 = 0;
                if (v51) {
                  (*((void (**)(void **))*v51 + 1))(v51);
                }
                goto LABEL_197;
            }
            goto LABEL_124;
        }
        break;
      case 14:
        switch(v27)
        {
          case 14:
            switch(v30)
            {
              case 14:
                v214 = MIL::IRTensorValue::GetDataView<unsigned char>();
                v215 = MIL::IRTensorValue::GetDataView<unsigned char>();
                v228 = 0;
                v229 = 0;
                v230 = 0;
                v216 = *(float *)&v237.__r_.__value_.__l.__data_;
                v217 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v265, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v265);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v218 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v219 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v219);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v218, (uint64_t *)&v251);
                v220 = v251;
                v251 = 0;
                if (v220) {
                  (*((void (**)(void **))*v220 + 1))(v220);
                }
                goto LABEL_197;
              case 9:
                v186 = MIL::IRTensorValue::GetDataView<unsigned char>();
                v187 = MIL::IRTensorValue::GetDataView<unsigned char>();
                v228 = 0;
                v229 = 0;
                v230 = 0;
                v188 = *(float *)&v237.__r_.__value_.__l.__data_;
                v189 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v264, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v264);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v190 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v191 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v191);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v190, (uint64_t *)&v251);
                v192 = v251;
                v251 = 0;
                if (v192) {
                  (*((void (**)(void **))*v192 + 1))(v192);
                }
                goto LABEL_197;
              case 4:
                v95 = MIL::IRTensorValue::GetDataView<unsigned char>();
                v96 = MIL::IRTensorValue::GetDataView<unsigned char>();
                v228 = 0;
                v229 = 0;
                v230 = 0;
                v97 = *(float *)&v237.__r_.__value_.__l.__data_;
                v98 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v266, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v266);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v99 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v100 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v100);
                MIL::IRTensorValueType::MakeFloat16Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v99, (uint64_t *)&v251);
                v101 = v251;
                v251 = 0;
                if (v101) {
                  (*((void (**)(void **))*v101 + 1))(v101);
                }
                goto LABEL_197;
            }
            break;
          case 9:
            switch(v30)
            {
              case 14:
                v179 = MIL::IRTensorValue::GetDataView<unsigned char>();
                v180 = MIL::IRTensorValue::GetDataView<signed char>();
                v228 = 0;
                v229 = 0;
                v230 = 0;
                v181 = *(float *)&v237.__r_.__value_.__l.__data_;
                v182 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v262, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v262);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v183 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v184 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v184);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v183, (uint64_t *)&v251);
                v185 = v251;
                v251 = 0;
                if (v185) {
                  (*((void (**)(void **))*v185 + 1))(v185);
                }
                goto LABEL_197;
              case 9:
                v137 = MIL::IRTensorValue::GetDataView<unsigned char>();
                v138 = MIL::IRTensorValue::GetDataView<signed char>();
                v228 = 0;
                v229 = 0;
                v230 = 0;
                v139 = *(float *)&v237.__r_.__value_.__l.__data_;
                v140 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v261, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v261);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v141 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v142 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v142);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v141, (uint64_t *)&v251);
                v143 = v251;
                v251 = 0;
                if (v143) {
                  (*((void (**)(void **))*v143 + 1))(v143);
                }
                goto LABEL_197;
              case 4:
                v81 = MIL::IRTensorValue::GetDataView<unsigned char>();
                v82 = MIL::IRTensorValue::GetDataView<signed char>();
                v228 = 0;
                v229 = 0;
                v230 = 0;
                v83 = *(float *)&v237.__r_.__value_.__l.__data_;
                v84 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v263, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v263);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v85 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v86 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v86);
                MIL::IRTensorValueType::MakeFloat16Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v85, (uint64_t *)&v251);
                v87 = v251;
                v251 = 0;
                if (v87) {
                  (*((void (**)(void **))*v87 + 1))(v87);
                }
                goto LABEL_197;
            }
            break;
          case 4:
            switch(v30)
            {
              case 14:
                v221 = MIL::IRTensorValue::GetDataView<unsigned char>();
                v222 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                v228 = 0;
                v229 = 0;
                v230 = 0;
                v223 = *(float *)&v237.__r_.__value_.__l.__data_;
                v224 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v268, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v268);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v225 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v226 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v226);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v225, (uint64_t *)&v251);
                v227 = v251;
                v251 = 0;
                if (v227) {
                  (*((void (**)(void **))*v227 + 1))(v227);
                }
                goto LABEL_197;
              case 9:
                v193 = MIL::IRTensorValue::GetDataView<unsigned char>();
                v194 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                v228 = 0;
                v229 = 0;
                v230 = 0;
                v195 = *(float *)&v237.__r_.__value_.__l.__data_;
                v196 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v267, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v267);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v197 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v198 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v198);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v197, (uint64_t *)&v251);
                v199 = v251;
                v251 = 0;
                if (v199) {
                  (*((void (**)(void **))*v199 + 1))(v199);
                }
                goto LABEL_197;
              case 4:
                v38 = MIL::IRTensorValue::GetDataView<unsigned char>();
                v39 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                v228 = 0;
                v229 = 0;
                v230 = 0;
                v40 = *(float *)&v237.__r_.__value_.__l.__data_;
                v41 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v269, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v269);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v42 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v43 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v43);
                MIL::IRTensorValueType::MakeFloat16Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v42, (uint64_t *)&v251);
                v44 = v251;
                v251 = 0;
                if (v44) {
                  (*((void (**)(void **))*v44 + 1))(v44);
                }
LABEL_197:
                v251 = (void **)&v228;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v251);
                *(_DWORD *)a3 = 0;
                std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), (char *)&unk_210C6BFE7);
                if (v231[0])
                {
                  v231[1] = v231[0];
                  operator delete(v231[0]);
                }
                goto LABEL_199;
            }
            break;
          default:
            goto LABEL_81;
        }
LABEL_124:
        v59 = "Unimplemented output dtype";
        goto LABEL_125;
      default:
        v59 = "Unimplemented x dtype";
LABEL_125:
        *(_DWORD *)a3 = 3;
        std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), v59);
LABEL_199:
        if (v232[0])
        {
          v232[1] = v232[0];
          operator delete(v232[0]);
        }
        if (v233[0])
        {
          v233[1] = v233[0];
          operator delete(v233[0]);
        }
        if (v234[0])
        {
          v234[1] = v234[0];
          operator delete(v234[0]);
        }
        goto LABEL_205;
    }
LABEL_81:
    v59 = "Unimplemented y dtype";
    goto LABEL_125;
  }
  *(_DWORD *)a3 = v235.__r_.__value_.__l.__data_;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)&v235.__r_.__value_.__r.__words[1];
  *(void *)(a3 + 24) = v236;
  *(_OWORD *)&v235.__r_.__value_.__r.__words[1] = 0uLL;
  v236 = 0;
LABEL_205:
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v279);
  if (SHIBYTE(v236) < 0) {
    operator delete((void *)v235.__r_.__value_.__l.__size_);
  }
LABEL_36:
  if (v250 && v249 < 0) {
    operator delete(__p);
  }
  if (v243 && v241)
  {
    v242 = v241;
    operator delete(v241);
  }
  if (v240 && v239 < 0)
  {
    v21 = v238;
    goto LABEL_22;
  }
}

void sub_210B1A78C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  if (__p) {
    operator delete(__p);
  }
  if (a2 == 1)
  {
    v40 = __cxa_begin_catch(a1);
    *(_DWORD *)uint64_t v36 = 4;
    v41 = (char *)(*(uint64_t (**)(void *))(*(void *)v40 + 16))(v40);
    std::string::basic_string[abi:ne180100]<0>((void *)(v36 + 8), v41);
    __cxa_end_catch();
    JUMPOUT(0x210B1A5F8);
  }
  if (a16) {
    operator delete(a16);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a22) {
    operator delete(a22);
  }
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100]((void *)(v37 - 136));
  if (a31 < 0) {
    operator delete(a26);
  }
  ANEMachineIR::Validators::PeElementWiseBinaryParamValues::~PeElementWiseBinaryParamValues(&a36);
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<MIL::Fp16,MIL::Fp16,MIL::Fp16,MIL::Fp16,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  if (a11 != 1.0 && a11 != -1.0) {
  if (a2)
  }
  {
    uint64_t v18 = a5[1];
    if (*a5 != v18)
    {
      uint64_t v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5) {
    }
      }
  }
  if (a3)
  {
    uint64_t v20 = a6[1];
    if (*a6 != v20)
    {
      uint64_t v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6) {
    }
      }
  }
  uint64_t NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<MIL::Fp16>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  unint64_t v24 = v84 - (unsigned char *)__p;
  if (v84 == __p) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v25 = v90 - v89;
  if (v90 == v89) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v26 = v88 - v87;
  if (v88 == v87) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v27 = v86 - v85;
  if (v86 == v85) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  float v28 = 65536.0;
  if (a10 <= 65536.0) {
    float v28 = a10;
  }
  if (v28 >= -65536.0) {
    float v29 = v28;
  }
  else {
    float v29 = -65536.0;
  }
  uint64_t v59 = *(void *)__p;
  if (!*(void *)__p) {
    goto LABEL_83;
  }
  unint64_t v30 = 0;
  uint64_t v31 = *((void *)__p + 1);
  uint64_t v80 = *((void *)__p + 4);
  unint64_t v65 = *(void *)v89;
  uint64_t v66 = *((void *)__p + 3);
  unint64_t v63 = *((void *)v89 + 2);
  unint64_t v64 = *((void *)v89 + 1);
  unint64_t v32 = *((void *)v89 + 4);
  uint64_t v61 = *((void *)__p + 2);
  unint64_t v62 = *((void *)v89 + 3);
  unint64_t v76 = *(void *)v87;
  unint64_t v75 = *((void *)v87 + 1);
  unint64_t v74 = *((void *)v87 + 2);
  unint64_t v73 = *((void *)v87 + 3);
  unint64_t v72 = *((void *)v87 + 4);
  unint64_t v70 = *((void *)v85 + 1);
  unint64_t v71 = *(void *)v85;
  unint64_t v68 = *((void *)v85 + 3);
  unint64_t v69 = *((void *)v85 + 2);
  unint64_t v67 = *((void *)v85 + 4);
  uint64_t v60 = v31;
  do
  {
    if (v31)
    {
      unint64_t v33 = 0;
      do
      {
        if (v61)
        {
          for (unint64_t i = 0; i != v61; ++i)
          {
            if (v66)
            {
              for (unint64_t j = 0; j != v66; ++j)
              {
                if (v80)
                {
                  for (unint64_t k = 0; k != v80; ++k)
                  {
                    LOWORD(__e[0]) = *(_WORD *)(a1
                                              + 2
                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    float v38 = v37;
                    if (a2)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a2
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                      float v40 = v39;
                    }
                    else
                    {
                      float v40 = 0.0;
                    }
                    if (a3)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a3
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    }
                    else
                    {
                      float v41 = 1.0;
                    }
                    if (v38 <= 65536.0) {
                      float v42 = v38;
                    }
                    else {
                      float v42 = 65536.0;
                    }
                    if (v42 < -65536.0) {
                      float v42 = -65536.0;
                    }
                    if (v40 <= 65536.0) {
                      float v43 = v40;
                    }
                    else {
                      float v43 = 65536.0;
                    }
                    if (v43 >= -65536.0) {
                      float v44 = v43;
                    }
                    else {
                      float v44 = -65536.0;
                    }
                    if (v41 > 65536.0) {
                      float v41 = 65536.0;
                    }
                    if (v41 >= -65536.0) {
                      float v45 = v41;
                    }
                    else {
                      float v45 = -65536.0;
                    }
                    float v46 = 0.0;
                    float v47 = 0.0;
                    if ((float)(v29 * v42) != 0.0)
                    {
                      __e[0] = 0;
                      long double v48 = frexp((float)(v29 * v42), __e);
                      double v49 = ldexp(v48, 11);
                      float v47 = ldexp(round(v49), __e[0] - 11);
                    }
                    float v50 = (float)(v44 * a11) + v47;
                    if (v50 != 0.0)
                    {
                      __e[0] = 0;
                      long double v51 = frexp(v50, __e);
                      double v52 = ldexp(v51, 11);
                      float v46 = ldexp(round(v52), __e[0] - 11);
                    }
                    float v53 = 0.0;
                    if ((float)(v45 * v46) != 0.0)
                    {
                      __e[0] = 0;
                      long double v54 = frexp((float)(v45 * v46), __e);
                      double v55 = ldexp(v54, 11);
                      float v53 = ldexp(round(v55), __e[0] - 11);
                    }
                    v56 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(a8, v53);
                    __int16 v58 = MIL::Fp16::FromFloat(v56, v57);
                    *(_WORD *)(*a9
                             + 2
                  }
                }
              }
            }
          }
        }
        ++v33;
        uint64_t v31 = v60;
      }
      while (v33 != v60);
    }
    ++v30;
  }
  while (v30 != v59);
  v23 = __p;
  if (__p)
  {
LABEL_83:
    v84 = v23;
    operator delete(v23);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
}

void sub_210B1C6F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  float v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(void *)(v36 - 208) = v38;
    operator delete(v38);
  }
  float v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(void *)(v36 - 184) = v39;
    operator delete(v39);
  }
  float v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(void *)(v36 - 160) = v40;
    operator delete(v40);
  }
  float v41 = *(void **)a30;
  if (*(void *)a30)
  {
    *(void *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void __clang_call_terminate(void *a1)
{
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<MIL::Fp16,MIL::Fp16,MIL::Fp16,unsigned char,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  if (a11 != 1.0 && a11 != -1.0) {
  if (a2)
  }
  {
    uint64_t v18 = a5[1];
    if (*a5 != v18)
    {
      uint64_t v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5) {
    }
      }
  }
  if (a3)
  {
    uint64_t v20 = a6[1];
    if (*a6 != v20)
    {
      uint64_t v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6) {
    }
      }
  }
  size_t NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<unsigned char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  unint64_t v24 = v84 - (unsigned char *)__p;
  if (v84 == __p) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v25 = v90 - v89;
  if (v90 == v89) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v26 = v88 - v87;
  if (v88 == v87) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v27 = v86 - v85;
  if (v86 == v85) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  float v28 = 65536.0;
  if (a10 <= 65536.0) {
    float v28 = a10;
  }
  if (v28 >= -65536.0) {
    float v29 = v28;
  }
  else {
    float v29 = -65536.0;
  }
  uint64_t v59 = *(void *)__p;
  if (!*(void *)__p) {
    goto LABEL_90;
  }
  unint64_t v30 = 0;
  uint64_t v31 = *((void *)__p + 1);
  uint64_t v80 = *((void *)__p + 4);
  unint64_t v65 = *(void *)v89;
  uint64_t v66 = *((void *)__p + 3);
  unint64_t v63 = *((void *)v89 + 2);
  unint64_t v64 = *((void *)v89 + 1);
  unint64_t v32 = *((void *)v89 + 4);
  uint64_t v61 = *((void *)__p + 2);
  unint64_t v62 = *((void *)v89 + 3);
  unint64_t v76 = *(void *)v87;
  unint64_t v75 = *((void *)v87 + 1);
  unint64_t v74 = *((void *)v87 + 2);
  unint64_t v73 = *((void *)v87 + 3);
  unint64_t v72 = *((void *)v87 + 4);
  unint64_t v70 = *((void *)v85 + 1);
  unint64_t v71 = *(void *)v85;
  unint64_t v68 = *((void *)v85 + 3);
  unint64_t v69 = *((void *)v85 + 2);
  unint64_t v67 = *((void *)v85 + 4);
  uint64_t v60 = v31;
  do
  {
    if (v31)
    {
      unint64_t v33 = 0;
      do
      {
        if (v61)
        {
          for (unint64_t i = 0; i != v61; ++i)
          {
            if (v66)
            {
              for (unint64_t j = 0; j != v66; ++j)
              {
                if (v80)
                {
                  for (unint64_t k = 0; k != v80; ++k)
                  {
                    LOWORD(__e[0]) = *(_WORD *)(a1
                                              + 2
                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    float v38 = v37;
                    if (a2)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a2
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                      float v40 = v39;
                    }
                    else
                    {
                      float v40 = 0.0;
                    }
                    if (a3)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a3
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    }
                    else
                    {
                      float v41 = 1.0;
                    }
                    if (v38 <= 65536.0) {
                      float v42 = v38;
                    }
                    else {
                      float v42 = 65536.0;
                    }
                    if (v42 < -65536.0) {
                      float v42 = -65536.0;
                    }
                    if (v40 <= 65536.0) {
                      float v43 = v40;
                    }
                    else {
                      float v43 = 65536.0;
                    }
                    if (v43 >= -65536.0) {
                      float v44 = v43;
                    }
                    else {
                      float v44 = -65536.0;
                    }
                    if (v41 > 65536.0) {
                      float v41 = 65536.0;
                    }
                    if (v41 >= -65536.0) {
                      float v45 = v41;
                    }
                    else {
                      float v45 = -65536.0;
                    }
                    float v46 = 0.0;
                    float v47 = 0.0;
                    if ((float)(v29 * v42) != 0.0)
                    {
                      __e[0] = 0;
                      long double v48 = frexp((float)(v29 * v42), __e);
                      double v49 = ldexp(v48, 11);
                      float v47 = ldexp(round(v49), __e[0] - 11);
                    }
                    float v50 = (float)(v44 * a11) + v47;
                    if (v50 != 0.0)
                    {
                      __e[0] = 0;
                      long double v51 = frexp(v50, __e);
                      double v52 = ldexp(v51, 11);
                      float v46 = ldexp(round(v52), __e[0] - 11);
                    }
                    float v53 = 0.0;
                    if ((float)(v45 * v46) != 0.0)
                    {
                      __e[0] = 0;
                      long double v54 = frexp((float)(v45 * v46), __e);
                      double v55 = ldexp(v54, 11);
                      float v53 = ldexp(round(v55), __e[0] - 11);
                    }
                    std::function<float ()(float)>::operator()(a8, v53);
                    if (v56 == INFINITY)
                    {
                      LOBYTE(v57) = -1;
                    }
                    else if (v56 == -INFINITY)
                    {
                      LOBYTE(v57) = 0;
                    }
                    else
                    {
                      int v58 = llroundf(v56);
                      if (v58 >= 255) {
                        int v58 = 255;
                      }
                      int v57 = v58 & ~(v58 >> 31);
                    }
                    *(unsigned char *)(*a9
                  }
                }
              }
            }
          }
        }
        ++v33;
        uint64_t v31 = v60;
      }
      while (v33 != v60);
    }
    ++v30;
  }
  while (v30 != v59);
  v23 = __p;
  if (__p)
  {
LABEL_90:
    v84 = v23;
    operator delete(v23);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
}

void sub_210B1CEE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  float v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(void *)(v36 - 208) = v38;
    operator delete(v38);
  }
  float v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(void *)(v36 - 184) = v39;
    operator delete(v39);
  }
  float v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(void *)(v36 - 160) = v40;
    operator delete(v40);
  }
  float v41 = *(void **)a30;
  if (*(void *)a30)
  {
    *(void *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<MIL::Fp16,MIL::Fp16,MIL::Fp16,signed char,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  if (a11 != 1.0 && a11 != -1.0) {
  if (a2)
  }
  {
    uint64_t v18 = a5[1];
    if (*a5 != v18)
    {
      uint64_t v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5) {
    }
      }
  }
  if (a3)
  {
    uint64_t v20 = a6[1];
    if (*a6 != v20)
    {
      uint64_t v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6) {
    }
      }
  }
  size_t NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<signed char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  unint64_t v24 = v84 - (unsigned char *)__p;
  if (v84 == __p) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v25 = v90 - v89;
  if (v90 == v89) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v26 = v88 - v87;
  if (v88 == v87) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v27 = v86 - v85;
  if (v86 == v85) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  float v28 = 65536.0;
  if (a10 <= 65536.0) {
    float v28 = a10;
  }
  if (v28 >= -65536.0) {
    float v29 = v28;
  }
  else {
    float v29 = -65536.0;
  }
  uint64_t v59 = *(void *)__p;
  if (!*(void *)__p) {
    goto LABEL_92;
  }
  unint64_t v30 = 0;
  uint64_t v31 = *((void *)__p + 1);
  uint64_t v80 = *((void *)__p + 4);
  unint64_t v65 = *(void *)v89;
  uint64_t v66 = *((void *)__p + 3);
  unint64_t v63 = *((void *)v89 + 2);
  unint64_t v64 = *((void *)v89 + 1);
  unint64_t v32 = *((void *)v89 + 4);
  uint64_t v61 = *((void *)__p + 2);
  unint64_t v62 = *((void *)v89 + 3);
  unint64_t v76 = *(void *)v87;
  unint64_t v75 = *((void *)v87 + 1);
  unint64_t v74 = *((void *)v87 + 2);
  unint64_t v73 = *((void *)v87 + 3);
  unint64_t v72 = *((void *)v87 + 4);
  unint64_t v70 = *((void *)v85 + 1);
  unint64_t v71 = *(void *)v85;
  unint64_t v68 = *((void *)v85 + 3);
  unint64_t v69 = *((void *)v85 + 2);
  unint64_t v67 = *((void *)v85 + 4);
  uint64_t v60 = v31;
  do
  {
    if (v31)
    {
      unint64_t v33 = 0;
      do
      {
        if (v61)
        {
          for (unint64_t i = 0; i != v61; ++i)
          {
            if (v66)
            {
              for (unint64_t j = 0; j != v66; ++j)
              {
                if (v80)
                {
                  for (unint64_t k = 0; k != v80; ++k)
                  {
                    LOWORD(__e[0]) = *(_WORD *)(a1
                                              + 2
                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    float v38 = v37;
                    if (a2)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a2
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                      float v40 = v39;
                    }
                    else
                    {
                      float v40 = 0.0;
                    }
                    if (a3)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a3
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    }
                    else
                    {
                      float v41 = 1.0;
                    }
                    if (v38 <= 65536.0) {
                      float v42 = v38;
                    }
                    else {
                      float v42 = 65536.0;
                    }
                    if (v42 < -65536.0) {
                      float v42 = -65536.0;
                    }
                    if (v40 <= 65536.0) {
                      float v43 = v40;
                    }
                    else {
                      float v43 = 65536.0;
                    }
                    if (v43 >= -65536.0) {
                      float v44 = v43;
                    }
                    else {
                      float v44 = -65536.0;
                    }
                    if (v41 > 65536.0) {
                      float v41 = 65536.0;
                    }
                    if (v41 >= -65536.0) {
                      float v45 = v41;
                    }
                    else {
                      float v45 = -65536.0;
                    }
                    float v46 = 0.0;
                    float v47 = 0.0;
                    if ((float)(v29 * v42) != 0.0)
                    {
                      __e[0] = 0;
                      long double v48 = frexp((float)(v29 * v42), __e);
                      double v49 = ldexp(v48, 11);
                      float v47 = ldexp(round(v49), __e[0] - 11);
                    }
                    float v50 = (float)(v44 * a11) + v47;
                    if (v50 != 0.0)
                    {
                      __e[0] = 0;
                      long double v51 = frexp(v50, __e);
                      double v52 = ldexp(v51, 11);
                      float v46 = ldexp(round(v52), __e[0] - 11);
                    }
                    float v53 = 0.0;
                    if ((float)(v45 * v46) != 0.0)
                    {
                      __e[0] = 0;
                      long double v54 = frexp((float)(v45 * v46), __e);
                      double v55 = ldexp(v54, 11);
                      float v53 = ldexp(round(v55), __e[0] - 11);
                    }
                    std::function<float ()(float)>::operator()(a8, v53);
                    if (v56 == INFINITY)
                    {
                      char v57 = 127;
                    }
                    else if (v56 == -INFINITY)
                    {
                      char v57 = 0x80;
                    }
                    else
                    {
                      int v58 = llroundf(v56);
                      if (v58 >= 127) {
                        int v58 = 127;
                      }
                      if (v58 <= -128) {
                        char v57 = 0x80;
                      }
                      else {
                        char v57 = v58;
                      }
                    }
                    *(unsigned char *)(*a9
                  }
                }
              }
            }
          }
        }
        ++v33;
        uint64_t v31 = v60;
      }
      while (v33 != v60);
    }
    ++v30;
  }
  while (v30 != v59);
  v23 = __p;
  if (__p)
  {
LABEL_92:
    v84 = v23;
    operator delete(v23);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
}

void sub_210B1D6B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  float v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(void *)(v36 - 208) = v38;
    operator delete(v38);
  }
  float v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(void *)(v36 - 184) = v39;
    operator delete(v39);
  }
  float v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(void *)(v36 - 160) = v40;
    operator delete(v40);
  }
  float v41 = *(void **)a30;
  if (*(void *)a30)
  {
    *(void *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<MIL::Fp16,unsigned char,unsigned char,MIL::Fp16,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  if (a11 != 1.0 && a11 != -1.0) {
  if (a2)
  }
  {
    uint64_t v18 = a5[1];
    if (*a5 != v18)
    {
      uint64_t v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5) {
    }
      }
  }
  if (a3)
  {
    uint64_t v20 = a6[1];
    if (*a6 != v20)
    {
      uint64_t v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6) {
    }
      }
  }
  uint64_t NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<MIL::Fp16>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  unint64_t v24 = v84 - (unsigned char *)__p;
  if (v84 == __p) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v25 = v90 - v89;
  if (v90 == v89) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v26 = v88 - v87;
  if (v88 == v87) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v27 = v86 - v85;
  if (v86 == v85) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  float v28 = 65536.0;
  if (a10 <= 65536.0) {
    float v28 = a10;
  }
  if (v28 >= -65536.0) {
    float v29 = v28;
  }
  else {
    float v29 = -65536.0;
  }
  uint64_t v59 = *(void *)__p;
  if (!*(void *)__p) {
    goto LABEL_78;
  }
  unint64_t v30 = 0;
  uint64_t v31 = *((void *)__p + 1);
  uint64_t v80 = *((void *)__p + 4);
  unint64_t v65 = *(void *)v89;
  uint64_t v66 = *((void *)__p + 3);
  unint64_t v63 = *((void *)v89 + 2);
  unint64_t v64 = *((void *)v89 + 1);
  unint64_t v32 = *((void *)v89 + 4);
  uint64_t v61 = *((void *)__p + 2);
  unint64_t v62 = *((void *)v89 + 3);
  unint64_t v76 = *(void *)v87;
  unint64_t v75 = *((void *)v87 + 1);
  unint64_t v74 = *((void *)v87 + 2);
  unint64_t v73 = *((void *)v87 + 3);
  unint64_t v72 = *((void *)v87 + 4);
  unint64_t v70 = *((void *)v85 + 1);
  unint64_t v71 = *(void *)v85;
  unint64_t v68 = *((void *)v85 + 3);
  unint64_t v69 = *((void *)v85 + 2);
  unint64_t v67 = *((void *)v85 + 4);
  uint64_t v60 = v31;
  do
  {
    if (v31)
    {
      unint64_t v33 = 0;
      do
      {
        if (v61)
        {
          for (unint64_t i = 0; i != v61; ++i)
          {
            if (v66)
            {
              for (unint64_t j = 0; j != v66; ++j)
              {
                if (v80)
                {
                  for (unint64_t k = 0; k != v80; ++k)
                  {
                    LOWORD(__e[0]) = *(_WORD *)(a1
                                              + 2
                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    float v38 = v37;
                    if (a2)
                    {
                      LOBYTE(v39) = *(unsigned char *)(a2
                      float v40 = (float)v39;
                    }
                    else
                    {
                      float v40 = 0.0;
                    }
                    if (a3)
                    {
                      LOBYTE(v41) = *(unsigned char *)(a3
                      float v42 = (float)v41;
                    }
                    else
                    {
                      float v42 = 1.0;
                    }
                    if (v38 <= 65536.0) {
                      float v43 = v38;
                    }
                    else {
                      float v43 = 65536.0;
                    }
                    if (v43 < -65536.0) {
                      float v43 = -65536.0;
                    }
                    if (v40 <= 65536.0) {
                      float v44 = v40;
                    }
                    else {
                      float v44 = 65536.0;
                    }
                    if (v42 <= 65536.0) {
                      float v45 = v42;
                    }
                    else {
                      float v45 = 65536.0;
                    }
                    float v46 = 0.0;
                    float v47 = 0.0;
                    if ((float)(v29 * v43) != 0.0)
                    {
                      __e[0] = 0;
                      long double v48 = frexp((float)(v29 * v43), __e);
                      double v49 = ldexp(v48, 11);
                      float v47 = ldexp(round(v49), __e[0] - 11);
                    }
                    float v50 = (float)(v44 * a11) + v47;
                    if (v50 != 0.0)
                    {
                      __e[0] = 0;
                      long double v51 = frexp(v50, __e);
                      double v52 = ldexp(v51, 11);
                      float v46 = ldexp(round(v52), __e[0] - 11);
                    }
                    float v53 = 0.0;
                    if ((float)(v45 * v46) != 0.0)
                    {
                      __e[0] = 0;
                      long double v54 = frexp((float)(v45 * v46), __e);
                      double v55 = ldexp(v54, 11);
                      float v53 = ldexp(round(v55), __e[0] - 11);
                    }
                    float v56 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(a8, v53);
                    __int16 v58 = MIL::Fp16::FromFloat(v56, v57);
                    *(_WORD *)(*a9
                             + 2
                  }
                }
              }
            }
          }
        }
        ++v33;
        uint64_t v31 = v60;
      }
      while (v33 != v60);
    }
    ++v30;
  }
  while (v30 != v59);
  v23 = __p;
  if (__p)
  {
LABEL_78:
    v84 = v23;
    operator delete(v23);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
}

void sub_210B1DE28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  float v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(void *)(v36 - 208) = v38;
    operator delete(v38);
  }
  unsigned int v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(void *)(v36 - 184) = v39;
    operator delete(v39);
  }
  float v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(void *)(v36 - 160) = v40;
    operator delete(v40);
  }
  unsigned int v41 = *(void **)a30;
  if (*(void *)a30)
  {
    *(void *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<MIL::Fp16,unsigned char,unsigned char,unsigned char,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  if (a11 != 1.0 && a11 != -1.0) {
  if (a2)
  }
  {
    uint64_t v18 = a5[1];
    if (*a5 != v18)
    {
      uint64_t v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5) {
    }
      }
  }
  if (a3)
  {
    uint64_t v20 = a6[1];
    if (*a6 != v20)
    {
      uint64_t v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6) {
    }
      }
  }
  size_t NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<unsigned char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  unint64_t v24 = v84 - (unsigned char *)__p;
  if (v84 == __p) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v25 = v90 - v89;
  if (v90 == v89) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v26 = v88 - v87;
  if (v88 == v87) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v27 = v86 - v85;
  if (v86 == v85) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  float v28 = 65536.0;
  if (a10 <= 65536.0) {
    float v28 = a10;
  }
  if (v28 >= -65536.0) {
    float v29 = v28;
  }
  else {
    float v29 = -65536.0;
  }
  uint64_t v59 = *(void *)__p;
  if (!*(void *)__p) {
    goto LABEL_85;
  }
  unint64_t v30 = 0;
  uint64_t v31 = *((void *)__p + 1);
  uint64_t v80 = *((void *)__p + 4);
  unint64_t v65 = *(void *)v89;
  uint64_t v66 = *((void *)__p + 3);
  unint64_t v63 = *((void *)v89 + 2);
  unint64_t v64 = *((void *)v89 + 1);
  unint64_t v32 = *((void *)v89 + 4);
  uint64_t v61 = *((void *)__p + 2);
  unint64_t v62 = *((void *)v89 + 3);
  unint64_t v76 = *(void *)v87;
  unint64_t v75 = *((void *)v87 + 1);
  unint64_t v74 = *((void *)v87 + 2);
  unint64_t v73 = *((void *)v87 + 3);
  unint64_t v72 = *((void *)v87 + 4);
  unint64_t v70 = *((void *)v85 + 1);
  unint64_t v71 = *(void *)v85;
  unint64_t v68 = *((void *)v85 + 3);
  unint64_t v69 = *((void *)v85 + 2);
  unint64_t v67 = *((void *)v85 + 4);
  uint64_t v60 = v31;
  do
  {
    if (v31)
    {
      unint64_t v33 = 0;
      do
      {
        if (v61)
        {
          for (unint64_t i = 0; i != v61; ++i)
          {
            if (v66)
            {
              for (unint64_t j = 0; j != v66; ++j)
              {
                if (v80)
                {
                  for (unint64_t k = 0; k != v80; ++k)
                  {
                    LOWORD(__e[0]) = *(_WORD *)(a1
                                              + 2
                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    float v38 = v37;
                    if (a2)
                    {
                      LOBYTE(v39) = *(unsigned char *)(a2
                      float v40 = (float)v39;
                    }
                    else
                    {
                      float v40 = 0.0;
                    }
                    if (a3)
                    {
                      LOBYTE(v41) = *(unsigned char *)(a3
                      float v42 = (float)v41;
                    }
                    else
                    {
                      float v42 = 1.0;
                    }
                    if (v38 <= 65536.0) {
                      float v43 = v38;
                    }
                    else {
                      float v43 = 65536.0;
                    }
                    if (v43 < -65536.0) {
                      float v43 = -65536.0;
                    }
                    if (v40 <= 65536.0) {
                      float v44 = v40;
                    }
                    else {
                      float v44 = 65536.0;
                    }
                    if (v42 <= 65536.0) {
                      float v45 = v42;
                    }
                    else {
                      float v45 = 65536.0;
                    }
                    float v46 = 0.0;
                    float v47 = 0.0;
                    if ((float)(v29 * v43) != 0.0)
                    {
                      __e[0] = 0;
                      long double v48 = frexp((float)(v29 * v43), __e);
                      double v49 = ldexp(v48, 11);
                      float v47 = ldexp(round(v49), __e[0] - 11);
                    }
                    float v50 = (float)(v44 * a11) + v47;
                    if (v50 != 0.0)
                    {
                      __e[0] = 0;
                      long double v51 = frexp(v50, __e);
                      double v52 = ldexp(v51, 11);
                      float v46 = ldexp(round(v52), __e[0] - 11);
                    }
                    float v53 = 0.0;
                    if ((float)(v45 * v46) != 0.0)
                    {
                      __e[0] = 0;
                      long double v54 = frexp((float)(v45 * v46), __e);
                      double v55 = ldexp(v54, 11);
                      float v53 = ldexp(round(v55), __e[0] - 11);
                    }
                    std::function<float ()(float)>::operator()(a8, v53);
                    if (v56 == INFINITY)
                    {
                      LOBYTE(v57) = -1;
                    }
                    else if (v56 == -INFINITY)
                    {
                      LOBYTE(v57) = 0;
                    }
                    else
                    {
                      int v58 = llroundf(v56);
                      if (v58 >= 255) {
                        int v58 = 255;
                      }
                      int v57 = v58 & ~(v58 >> 31);
                    }
                    *(unsigned char *)(*a9
                  }
                }
              }
            }
          }
        }
        ++v33;
        uint64_t v31 = v60;
      }
      while (v33 != v60);
    }
    ++v30;
  }
  while (v30 != v59);
  v23 = __p;
  if (__p)
  {
LABEL_85:
    v84 = v23;
    operator delete(v23);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
}

void sub_210B1E5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  float v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(void *)(v36 - 208) = v38;
    operator delete(v38);
  }
  unsigned int v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(void *)(v36 - 184) = v39;
    operator delete(v39);
  }
  float v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(void *)(v36 - 160) = v40;
    operator delete(v40);
  }
  unsigned int v41 = *(void **)a30;
  if (*(void *)a30)
  {
    *(void *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<MIL::Fp16,unsigned char,unsigned char,signed char,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  if (a11 != 1.0 && a11 != -1.0) {
  if (a2)
  }
  {
    uint64_t v18 = a5[1];
    if (*a5 != v18)
    {
      uint64_t v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5) {
    }
      }
  }
  if (a3)
  {
    uint64_t v20 = a6[1];
    if (*a6 != v20)
    {
      uint64_t v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6) {
    }
      }
  }
  size_t NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<signed char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  unint64_t v24 = v84 - (unsigned char *)__p;
  if (v84 == __p) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v25 = v90 - v89;
  if (v90 == v89) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v26 = v88 - v87;
  if (v88 == v87) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v27 = v86 - v85;
  if (v86 == v85) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  float v28 = 65536.0;
  if (a10 <= 65536.0) {
    float v28 = a10;
  }
  if (v28 >= -65536.0) {
    float v29 = v28;
  }
  else {
    float v29 = -65536.0;
  }
  uint64_t v59 = *(void *)__p;
  if (!*(void *)__p) {
    goto LABEL_87;
  }
  unint64_t v30 = 0;
  uint64_t v31 = *((void *)__p + 1);
  uint64_t v80 = *((void *)__p + 4);
  unint64_t v65 = *(void *)v89;
  uint64_t v66 = *((void *)__p + 3);
  unint64_t v63 = *((void *)v89 + 2);
  unint64_t v64 = *((void *)v89 + 1);
  unint64_t v32 = *((void *)v89 + 4);
  uint64_t v61 = *((void *)__p + 2);
  unint64_t v62 = *((void *)v89 + 3);
  unint64_t v76 = *(void *)v87;
  unint64_t v75 = *((void *)v87 + 1);
  unint64_t v74 = *((void *)v87 + 2);
  unint64_t v73 = *((void *)v87 + 3);
  unint64_t v72 = *((void *)v87 + 4);
  unint64_t v70 = *((void *)v85 + 1);
  unint64_t v71 = *(void *)v85;
  unint64_t v68 = *((void *)v85 + 3);
  unint64_t v69 = *((void *)v85 + 2);
  unint64_t v67 = *((void *)v85 + 4);
  uint64_t v60 = v31;
  do
  {
    if (v31)
    {
      unint64_t v33 = 0;
      do
      {
        if (v61)
        {
          for (unint64_t i = 0; i != v61; ++i)
          {
            if (v66)
            {
              for (unint64_t j = 0; j != v66; ++j)
              {
                if (v80)
                {
                  for (unint64_t k = 0; k != v80; ++k)
                  {
                    LOWORD(__e[0]) = *(_WORD *)(a1
                                              + 2
                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    float v38 = v37;
                    if (a2)
                    {
                      LOBYTE(v39) = *(unsigned char *)(a2
                      float v40 = (float)v39;
                    }
                    else
                    {
                      float v40 = 0.0;
                    }
                    if (a3)
                    {
                      LOBYTE(v41) = *(unsigned char *)(a3
                      float v42 = (float)v41;
                    }
                    else
                    {
                      float v42 = 1.0;
                    }
                    if (v38 <= 65536.0) {
                      float v43 = v38;
                    }
                    else {
                      float v43 = 65536.0;
                    }
                    if (v43 < -65536.0) {
                      float v43 = -65536.0;
                    }
                    if (v40 <= 65536.0) {
                      float v44 = v40;
                    }
                    else {
                      float v44 = 65536.0;
                    }
                    if (v42 <= 65536.0) {
                      float v45 = v42;
                    }
                    else {
                      float v45 = 65536.0;
                    }
                    float v46 = 0.0;
                    float v47 = 0.0;
                    if ((float)(v29 * v43) != 0.0)
                    {
                      __e[0] = 0;
                      long double v48 = frexp((float)(v29 * v43), __e);
                      double v49 = ldexp(v48, 11);
                      float v47 = ldexp(round(v49), __e[0] - 11);
                    }
                    float v50 = (float)(v44 * a11) + v47;
                    if (v50 != 0.0)
                    {
                      __e[0] = 0;
                      long double v51 = frexp(v50, __e);
                      double v52 = ldexp(v51, 11);
                      float v46 = ldexp(round(v52), __e[0] - 11);
                    }
                    float v53 = 0.0;
                    if ((float)(v45 * v46) != 0.0)
                    {
                      __e[0] = 0;
                      long double v54 = frexp((float)(v45 * v46), __e);
                      double v55 = ldexp(v54, 11);
                      float v53 = ldexp(round(v55), __e[0] - 11);
                    }
                    std::function<float ()(float)>::operator()(a8, v53);
                    if (v56 == INFINITY)
                    {
                      char v57 = 127;
                    }
                    else if (v56 == -INFINITY)
                    {
                      char v57 = 0x80;
                    }
                    else
                    {
                      int v58 = llroundf(v56);
                      if (v58 >= 127) {
                        int v58 = 127;
                      }
                      if (v58 <= -128) {
                        char v57 = 0x80;
                      }
                      else {
                        char v57 = v58;
                      }
                    }
                    *(unsigned char *)(*a9
                  }
                }
              }
            }
          }
        }
        ++v33;
        uint64_t v31 = v60;
      }
      while (v33 != v60);
    }
    ++v30;
  }
  while (v30 != v59);
  v23 = __p;
  if (__p)
  {
LABEL_87:
    v84 = v23;
    operator delete(v23);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
}

void sub_210B1ED8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  float v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(void *)(v36 - 208) = v38;
    operator delete(v38);
  }
  unsigned int v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(void *)(v36 - 184) = v39;
    operator delete(v39);
  }
  float v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(void *)(v36 - 160) = v40;
    operator delete(v40);
  }
  unsigned int v41 = *(void **)a30;
  if (*(void *)a30)
  {
    *(void *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<MIL::Fp16,signed char,signed char,MIL::Fp16,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  if (a11 != 1.0 && a11 != -1.0) {
  if (a2)
  }
  {
    uint64_t v18 = a5[1];
    if (*a5 != v18)
    {
      uint64_t v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5) {
    }
      }
  }
  if (a3)
  {
    uint64_t v20 = a6[1];
    if (*a6 != v20)
    {
      uint64_t v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6) {
    }
      }
  }
  uint64_t NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<MIL::Fp16>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  unint64_t v24 = v83 - (unsigned char *)__p;
  if (v83 == __p) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v25 = v89 - v88;
  if (v89 == v88) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v26 = v87 - v86;
  if (v87 == v86) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v27 = v85 - v84;
  if (v85 == v84) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  float v28 = 65536.0;
  if (a10 <= 65536.0) {
    float v28 = a10;
  }
  if (v28 >= -65536.0) {
    float v29 = v28;
  }
  else {
    float v29 = -65536.0;
  }
  uint64_t v58 = *(void *)__p;
  if (!*(void *)__p) {
    goto LABEL_83;
  }
  unint64_t v30 = 0;
  uint64_t v31 = *((void *)__p + 1);
  uint64_t v79 = *((void *)__p + 4);
  unint64_t v64 = *(void *)v88;
  uint64_t v65 = *((void *)__p + 3);
  unint64_t v62 = *((void *)v88 + 2);
  unint64_t v63 = *((void *)v88 + 1);
  unint64_t v32 = *((void *)v88 + 4);
  uint64_t v60 = *((void *)__p + 2);
  unint64_t v61 = *((void *)v88 + 3);
  unint64_t v75 = *(void *)v86;
  unint64_t v74 = *((void *)v86 + 1);
  unint64_t v73 = *((void *)v86 + 2);
  unint64_t v72 = *((void *)v86 + 3);
  unint64_t v71 = *((void *)v86 + 4);
  unint64_t v69 = *((void *)v84 + 1);
  unint64_t v70 = *(void *)v84;
  unint64_t v67 = *((void *)v84 + 3);
  unint64_t v68 = *((void *)v84 + 2);
  unint64_t v66 = *((void *)v84 + 4);
  uint64_t v59 = v31;
  do
  {
    if (v31)
    {
      unint64_t v33 = 0;
      do
      {
        if (v60)
        {
          for (unint64_t i = 0; i != v60; ++i)
          {
            if (v65)
            {
              for (unint64_t j = 0; j != v65; ++j)
              {
                if (v79)
                {
                  for (unint64_t k = 0; k != v79; ++k)
                  {
                    LOWORD(__e[0]) = *(_WORD *)(a1
                                              + 2
                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    float v38 = v37;
                    if (a2) {
                      float v39 = (float)*(char *)(a2
                    }
                    else {
                      float v39 = 0.0;
                    }
                    if (a3) {
                      float v40 = (float)*(char *)(a3
                    }
                    else {
                      float v40 = 1.0;
                    }
                    if (v38 <= 65536.0) {
                      float v41 = v38;
                    }
                    else {
                      float v41 = 65536.0;
                    }
                    if (v41 < -65536.0) {
                      float v41 = -65536.0;
                    }
                    if (v39 <= 65536.0) {
                      float v42 = v39;
                    }
                    else {
                      float v42 = 65536.0;
                    }
                    if (v42 >= -65536.0) {
                      float v43 = v42;
                    }
                    else {
                      float v43 = -65536.0;
                    }
                    if (v40 > 65536.0) {
                      float v40 = 65536.0;
                    }
                    if (v40 >= -65536.0) {
                      float v44 = v40;
                    }
                    else {
                      float v44 = -65536.0;
                    }
                    float v45 = 0.0;
                    float v46 = 0.0;
                    if ((float)(v29 * v41) != 0.0)
                    {
                      __e[0] = 0;
                      long double v47 = frexp((float)(v29 * v41), __e);
                      double v48 = ldexp(v47, 11);
                      float v46 = ldexp(round(v48), __e[0] - 11);
                    }
                    float v49 = (float)(v43 * a11) + v46;
                    if (v49 != 0.0)
                    {
                      __e[0] = 0;
                      long double v50 = frexp(v49, __e);
                      double v51 = ldexp(v50, 11);
                      float v45 = ldexp(round(v51), __e[0] - 11);
                    }
                    float v52 = 0.0;
                    if ((float)(v44 * v45) != 0.0)
                    {
                      __e[0] = 0;
                      long double v53 = frexp((float)(v44 * v45), __e);
                      double v54 = ldexp(v53, 11);
                      float v52 = ldexp(round(v54), __e[0] - 11);
                    }
                    double v55 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(a8, v52);
                    __int16 v57 = MIL::Fp16::FromFloat(v55, v56);
                    *(_WORD *)(*a9
                             + 2
                  }
                }
              }
            }
          }
        }
        ++v33;
        uint64_t v31 = v59;
      }
      while (v33 != v59);
    }
    ++v30;
  }
  while (v30 != v58);
  v23 = __p;
  if (__p)
  {
LABEL_83:
    v83 = v23;
    operator delete(v23);
  }
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
}

void sub_210B1F50C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  float v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(void *)(v36 - 208) = v38;
    operator delete(v38);
  }
  float v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(void *)(v36 - 184) = v39;
    operator delete(v39);
  }
  float v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(void *)(v36 - 160) = v40;
    operator delete(v40);
  }
  float v41 = *(void **)a30;
  if (*(void *)a30)
  {
    *(void *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<MIL::Fp16,signed char,signed char,unsigned char,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  if (a11 != 1.0 && a11 != -1.0) {
  if (a2)
  }
  {
    uint64_t v18 = a5[1];
    if (*a5 != v18)
    {
      uint64_t v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5) {
    }
      }
  }
  if (a3)
  {
    uint64_t v20 = a6[1];
    if (*a6 != v20)
    {
      uint64_t v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6) {
    }
      }
  }
  size_t NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<unsigned char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  unint64_t v24 = v83 - (unsigned char *)__p;
  if (v83 == __p) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v25 = v89 - v88;
  if (v89 == v88) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v26 = v87 - v86;
  if (v87 == v86) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v27 = v85 - v84;
  if (v85 == v84) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  float v28 = 65536.0;
  if (a10 <= 65536.0) {
    float v28 = a10;
  }
  if (v28 >= -65536.0) {
    float v29 = v28;
  }
  else {
    float v29 = -65536.0;
  }
  uint64_t v58 = *(void *)__p;
  if (!*(void *)__p) {
    goto LABEL_90;
  }
  unint64_t v30 = 0;
  uint64_t v31 = *((void *)__p + 1);
  uint64_t v79 = *((void *)__p + 4);
  unint64_t v64 = *(void *)v88;
  uint64_t v65 = *((void *)__p + 3);
  unint64_t v62 = *((void *)v88 + 2);
  unint64_t v63 = *((void *)v88 + 1);
  unint64_t v32 = *((void *)v88 + 4);
  uint64_t v60 = *((void *)__p + 2);
  unint64_t v61 = *((void *)v88 + 3);
  unint64_t v75 = *(void *)v86;
  unint64_t v74 = *((void *)v86 + 1);
  unint64_t v73 = *((void *)v86 + 2);
  unint64_t v72 = *((void *)v86 + 3);
  unint64_t v71 = *((void *)v86 + 4);
  unint64_t v69 = *((void *)v84 + 1);
  unint64_t v70 = *(void *)v84;
  unint64_t v67 = *((void *)v84 + 3);
  unint64_t v68 = *((void *)v84 + 2);
  unint64_t v66 = *((void *)v84 + 4);
  uint64_t v59 = v31;
  do
  {
    if (v31)
    {
      unint64_t v33 = 0;
      do
      {
        if (v60)
        {
          for (unint64_t i = 0; i != v60; ++i)
          {
            if (v65)
            {
              for (unint64_t j = 0; j != v65; ++j)
              {
                if (v79)
                {
                  for (unint64_t k = 0; k != v79; ++k)
                  {
                    LOWORD(__e[0]) = *(_WORD *)(a1
                                              + 2
                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    float v38 = v37;
                    if (a2) {
                      float v39 = (float)*(char *)(a2
                    }
                    else {
                      float v39 = 0.0;
                    }
                    if (a3) {
                      float v40 = (float)*(char *)(a3
                    }
                    else {
                      float v40 = 1.0;
                    }
                    if (v38 <= 65536.0) {
                      float v41 = v38;
                    }
                    else {
                      float v41 = 65536.0;
                    }
                    if (v41 < -65536.0) {
                      float v41 = -65536.0;
                    }
                    if (v39 <= 65536.0) {
                      float v42 = v39;
                    }
                    else {
                      float v42 = 65536.0;
                    }
                    if (v42 >= -65536.0) {
                      float v43 = v42;
                    }
                    else {
                      float v43 = -65536.0;
                    }
                    if (v40 > 65536.0) {
                      float v40 = 65536.0;
                    }
                    if (v40 >= -65536.0) {
                      float v44 = v40;
                    }
                    else {
                      float v44 = -65536.0;
                    }
                    float v45 = 0.0;
                    float v46 = 0.0;
                    if ((float)(v29 * v41) != 0.0)
                    {
                      __e[0] = 0;
                      long double v47 = frexp((float)(v29 * v41), __e);
                      double v48 = ldexp(v47, 11);
                      float v46 = ldexp(round(v48), __e[0] - 11);
                    }
                    float v49 = (float)(v43 * a11) + v46;
                    if (v49 != 0.0)
                    {
                      __e[0] = 0;
                      long double v50 = frexp(v49, __e);
                      double v51 = ldexp(v50, 11);
                      float v45 = ldexp(round(v51), __e[0] - 11);
                    }
                    float v52 = 0.0;
                    if ((float)(v44 * v45) != 0.0)
                    {
                      __e[0] = 0;
                      long double v53 = frexp((float)(v44 * v45), __e);
                      double v54 = ldexp(v53, 11);
                      float v52 = ldexp(round(v54), __e[0] - 11);
                    }
                    std::function<float ()(float)>::operator()(a8, v52);
                    if (v55 == INFINITY)
                    {
                      LOBYTE(v56) = -1;
                    }
                    else if (v55 == -INFINITY)
                    {
                      LOBYTE(v56) = 0;
                    }
                    else
                    {
                      int v57 = llroundf(v55);
                      if (v57 >= 255) {
                        int v57 = 255;
                      }
                      int v56 = v57 & ~(v57 >> 31);
                    }
                    *(unsigned char *)(*a9
                  }
                }
              }
            }
          }
        }
        ++v33;
        uint64_t v31 = v59;
      }
      while (v33 != v59);
    }
    ++v30;
  }
  while (v30 != v58);
  v23 = __p;
  if (__p)
  {
LABEL_90:
    v83 = v23;
    operator delete(v23);
  }
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
}

void sub_210B1FCCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  float v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(void *)(v36 - 208) = v38;
    operator delete(v38);
  }
  float v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(void *)(v36 - 184) = v39;
    operator delete(v39);
  }
  float v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(void *)(v36 - 160) = v40;
    operator delete(v40);
  }
  float v41 = *(void **)a30;
  if (*(void *)a30)
  {
    *(void *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<MIL::Fp16,signed char,signed char,signed char,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  if (a11 != 1.0 && a11 != -1.0) {
  if (a2)
  }
  {
    uint64_t v18 = a5[1];
    if (*a5 != v18)
    {
      uint64_t v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5) {
    }
      }
  }
  if (a3)
  {
    uint64_t v20 = a6[1];
    if (*a6 != v20)
    {
      uint64_t v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6) {
    }
      }
  }
  size_t NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<signed char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  unint64_t v24 = v83 - (unsigned char *)__p;
  if (v83 == __p) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v25 = v89 - v88;
  if (v89 == v88) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v26 = v87 - v86;
  if (v87 == v86) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v27 = v85 - v84;
  if (v85 == v84) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  float v28 = 65536.0;
  if (a10 <= 65536.0) {
    float v28 = a10;
  }
  if (v28 >= -65536.0) {
    float v29 = v28;
  }
  else {
    float v29 = -65536.0;
  }
  uint64_t v58 = *(void *)__p;
  if (!*(void *)__p) {
    goto LABEL_92;
  }
  unint64_t v30 = 0;
  uint64_t v31 = *((void *)__p + 1);
  uint64_t v79 = *((void *)__p + 4);
  unint64_t v64 = *(void *)v88;
  uint64_t v65 = *((void *)__p + 3);
  unint64_t v62 = *((void *)v88 + 2);
  unint64_t v63 = *((void *)v88 + 1);
  unint64_t v32 = *((void *)v88 + 4);
  uint64_t v60 = *((void *)__p + 2);
  unint64_t v61 = *((void *)v88 + 3);
  unint64_t v75 = *(void *)v86;
  unint64_t v74 = *((void *)v86 + 1);
  unint64_t v73 = *((void *)v86 + 2);
  unint64_t v72 = *((void *)v86 + 3);
  unint64_t v71 = *((void *)v86 + 4);
  unint64_t v69 = *((void *)v84 + 1);
  unint64_t v70 = *(void *)v84;
  unint64_t v67 = *((void *)v84 + 3);
  unint64_t v68 = *((void *)v84 + 2);
  unint64_t v66 = *((void *)v84 + 4);
  uint64_t v59 = v31;
  do
  {
    if (v31)
    {
      unint64_t v33 = 0;
      do
      {
        if (v60)
        {
          for (unint64_t i = 0; i != v60; ++i)
          {
            if (v65)
            {
              for (unint64_t j = 0; j != v65; ++j)
              {
                if (v79)
                {
                  for (unint64_t k = 0; k != v79; ++k)
                  {
                    LOWORD(__e[0]) = *(_WORD *)(a1
                                              + 2
                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    float v38 = v37;
                    if (a2) {
                      float v39 = (float)*(char *)(a2
                    }
                    else {
                      float v39 = 0.0;
                    }
                    if (a3) {
                      float v40 = (float)*(char *)(a3
                    }
                    else {
                      float v40 = 1.0;
                    }
                    if (v38 <= 65536.0) {
                      float v41 = v38;
                    }
                    else {
                      float v41 = 65536.0;
                    }
                    if (v41 < -65536.0) {
                      float v41 = -65536.0;
                    }
                    if (v39 <= 65536.0) {
                      float v42 = v39;
                    }
                    else {
                      float v42 = 65536.0;
                    }
                    if (v42 >= -65536.0) {
                      float v43 = v42;
                    }
                    else {
                      float v43 = -65536.0;
                    }
                    if (v40 > 65536.0) {
                      float v40 = 65536.0;
                    }
                    if (v40 >= -65536.0) {
                      float v44 = v40;
                    }
                    else {
                      float v44 = -65536.0;
                    }
                    float v45 = 0.0;
                    float v46 = 0.0;
                    if ((float)(v29 * v41) != 0.0)
                    {
                      __e[0] = 0;
                      long double v47 = frexp((float)(v29 * v41), __e);
                      double v48 = ldexp(v47, 11);
                      float v46 = ldexp(round(v48), __e[0] - 11);
                    }
                    float v49 = (float)(v43 * a11) + v46;
                    if (v49 != 0.0)
                    {
                      __e[0] = 0;
                      long double v50 = frexp(v49, __e);
                      double v51 = ldexp(v50, 11);
                      float v45 = ldexp(round(v51), __e[0] - 11);
                    }
                    float v52 = 0.0;
                    if ((float)(v44 * v45) != 0.0)
                    {
                      __e[0] = 0;
                      long double v53 = frexp((float)(v44 * v45), __e);
                      double v54 = ldexp(v53, 11);
                      float v52 = ldexp(round(v54), __e[0] - 11);
                    }
                    std::function<float ()(float)>::operator()(a8, v52);
                    if (v55 == INFINITY)
                    {
                      char v56 = 127;
                    }
                    else if (v55 == -INFINITY)
                    {
                      char v56 = 0x80;
                    }
                    else
                    {
                      int v57 = llroundf(v55);
                      if (v57 >= 127) {
                        int v57 = 127;
                      }
                      if (v57 <= -128) {
                        char v56 = 0x80;
                      }
                      else {
                        char v56 = v57;
                      }
                    }
                    *(unsigned char *)(*a9
                  }
                }
              }
            }
          }
        }
        ++v33;
        uint64_t v31 = v59;
      }
      while (v33 != v59);
    }
    ++v30;
  }
  while (v30 != v58);
  v23 = __p;
  if (__p)
  {
LABEL_92:
    v83 = v23;
    operator delete(v23);
  }
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
}

void sub_210B20490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  float v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(void *)(v36 - 208) = v38;
    operator delete(v38);
  }
  float v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(void *)(v36 - 184) = v39;
    operator delete(v39);
  }
  float v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(void *)(v36 - 160) = v40;
    operator delete(v40);
  }
  float v41 = *(void **)a30;
  if (*(void *)a30)
  {
    *(void *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<unsigned char,MIL::Fp16,MIL::Fp16,MIL::Fp16,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  if (a11 != 1.0 && a11 != -1.0) {
  if (a2)
  }
  {
    uint64_t v19 = a5[1];
    if (*a5 != v19)
    {
      uint64_t v20 = a4[1];
      if (*a4 != v20 && v20 - *a4 != v19 - *a5) {
    }
      }
  }
  if (a3)
  {
    uint64_t v21 = a6[1];
    if (*a6 != v21)
    {
      uint64_t v22 = a4[1];
      if (*a4 != v22 && v22 - *a4 != v21 - *a6) {
    }
      }
  }
  uint64_t NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<MIL::Fp16>::vector(a9, NumberOfElementsFromStaticTensorShape);
  unint64_t v24 = __p;
  unint64_t v25 = v83 - (unsigned char *)__p;
  if (v83 == __p) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v26 = v89 - v88;
  if (v89 == v88) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v27 = v87 - v86;
  if (v87 == v86) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v28 = v85 - v84;
  if (v85 == v84) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  float v29 = 65536.0;
  if (a10 <= 65536.0) {
    float v29 = a10;
  }
  if (v29 >= -65536.0) {
    float v30 = v29;
  }
  else {
    float v30 = -65536.0;
  }
  uint64_t v58 = *(void *)__p;
  if (!*(void *)__p) {
    goto LABEL_80;
  }
  unint64_t v31 = 0;
  uint64_t v32 = *((void *)__p + 1);
  uint64_t v79 = *((void *)__p + 4);
  unint64_t v64 = *(void *)v88;
  uint64_t v65 = *((void *)__p + 3);
  unint64_t v62 = *((void *)v88 + 2);
  unint64_t v63 = *((void *)v88 + 1);
  unint64_t v33 = *((void *)v88 + 4);
  uint64_t v60 = *((void *)__p + 2);
  unint64_t v61 = *((void *)v88 + 3);
  unint64_t v75 = *(void *)v86;
  unint64_t v74 = *((void *)v86 + 1);
  unint64_t v73 = *((void *)v86 + 2);
  unint64_t v72 = *((void *)v86 + 3);
  unint64_t v71 = *((void *)v86 + 4);
  unint64_t v69 = *((void *)v84 + 1);
  unint64_t v70 = *(void *)v84;
  unint64_t v67 = *((void *)v84 + 3);
  unint64_t v68 = *((void *)v84 + 2);
  unint64_t v66 = *((void *)v84 + 4);
  uint64_t v59 = v32;
  do
  {
    if (v32)
    {
      unint64_t v34 = 0;
      do
      {
        if (v60)
        {
          for (unint64_t i = 0; i != v60; ++i)
          {
            if (v65)
            {
              for (unint64_t j = 0; j != v65; ++j)
              {
                if (v79)
                {
                  for (unint64_t k = 0; k != v79; ++k)
                  {
                    LOBYTE(v11) = *(unsigned char *)(a1
                    if (a2)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a2
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                      float v39 = v38;
                    }
                    else
                    {
                      float v39 = 0.0;
                    }
                    if (a3)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a3
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    }
                    else
                    {
                      float v40 = 1.0;
                    }
                    float v41 = (float)LODWORD(v11);
                    if ((float)LODWORD(v11) > 65536.0) {
                      float v41 = 65536.0;
                    }
                    if (v39 <= 65536.0) {
                      float v42 = v39;
                    }
                    else {
                      float v42 = 65536.0;
                    }
                    if (v42 >= -65536.0) {
                      float v43 = v42;
                    }
                    else {
                      float v43 = -65536.0;
                    }
                    if (v40 > 65536.0) {
                      float v40 = 65536.0;
                    }
                    if (v40 >= -65536.0) {
                      float v44 = v40;
                    }
                    else {
                      float v44 = -65536.0;
                    }
                    float v45 = v30 * v41;
                    float v11 = 0.0;
                    float v46 = 0.0;
                    if (v45 != 0.0)
                    {
                      __e[0] = 0;
                      long double v47 = frexp(v45, __e);
                      double v48 = ldexp(v47, 11);
                      float v46 = ldexp(round(v48), __e[0] - 11);
                    }
                    float v49 = (float)(v43 * a11) + v46;
                    if (v49 != 0.0)
                    {
                      __e[0] = 0;
                      long double v50 = frexp(v49, __e);
                      double v51 = ldexp(v50, 11);
                      float v11 = ldexp(round(v51), __e[0] - 11);
                    }
                    float v52 = 0.0;
                    if ((float)(v44 * v11) != 0.0)
                    {
                      __e[0] = 0;
                      long double v53 = frexp((float)(v44 * v11), __e);
                      double v54 = ldexp(v53, 11);
                      float v52 = ldexp(round(v54), __e[0] - 11);
                    }
                    float v55 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(a8, v52);
                    __int16 v57 = MIL::Fp16::FromFloat(v55, v56);
                    *(_WORD *)(*a9
                             + 2
                  }
                }
              }
            }
          }
        }
        ++v34;
        uint64_t v32 = v59;
      }
      while (v34 != v59);
    }
    ++v31;
  }
  while (v31 != v58);
  unint64_t v24 = __p;
  if (__p)
  {
LABEL_80:
    v83 = v24;
    operator delete(v24);
  }
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
}

void sub_210B20C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  float v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(void *)(v36 - 208) = v38;
    operator delete(v38);
  }
  float v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(void *)(v36 - 184) = v39;
    operator delete(v39);
  }
  float v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(void *)(v36 - 160) = v40;
    operator delete(v40);
  }
  float v41 = *(void **)a30;
  if (*(void *)a30)
  {
    *(void *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<unsigned char,MIL::Fp16,MIL::Fp16,unsigned char,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  if (a11 != 1.0 && a11 != -1.0) {
  if (a2)
  }
  {
    uint64_t v19 = a5[1];
    if (*a5 != v19)
    {
      uint64_t v20 = a4[1];
      if (*a4 != v20 && v20 - *a4 != v19 - *a5) {
    }
      }
  }
  if (a3)
  {
    uint64_t v21 = a6[1];
    if (*a6 != v21)
    {
      uint64_t v22 = a4[1];
      if (*a4 != v22 && v22 - *a4 != v21 - *a6) {
    }
      }
  }
  size_t NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<unsigned char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  unint64_t v24 = __p;
  unint64_t v25 = v83 - (unsigned char *)__p;
  if (v83 == __p) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v26 = v89 - v88;
  if (v89 == v88) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v27 = v87 - v86;
  if (v87 == v86) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v28 = v85 - v84;
  if (v85 == v84) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  float v29 = 65536.0;
  if (a10 <= 65536.0) {
    float v29 = a10;
  }
  if (v29 >= -65536.0) {
    float v30 = v29;
  }
  else {
    float v30 = -65536.0;
  }
  uint64_t v58 = *(void *)__p;
  if (!*(void *)__p) {
    goto LABEL_87;
  }
  unint64_t v31 = 0;
  uint64_t v32 = *((void *)__p + 1);
  uint64_t v79 = *((void *)__p + 4);
  unint64_t v64 = *(void *)v88;
  uint64_t v65 = *((void *)__p + 3);
  unint64_t v62 = *((void *)v88 + 2);
  unint64_t v63 = *((void *)v88 + 1);
  unint64_t v33 = *((void *)v88 + 4);
  uint64_t v60 = *((void *)__p + 2);
  unint64_t v61 = *((void *)v88 + 3);
  unint64_t v75 = *(void *)v86;
  unint64_t v74 = *((void *)v86 + 1);
  unint64_t v73 = *((void *)v86 + 2);
  unint64_t v72 = *((void *)v86 + 3);
  unint64_t v71 = *((void *)v86 + 4);
  unint64_t v69 = *((void *)v84 + 1);
  unint64_t v70 = *(void *)v84;
  unint64_t v67 = *((void *)v84 + 3);
  unint64_t v68 = *((void *)v84 + 2);
  unint64_t v66 = *((void *)v84 + 4);
  uint64_t v59 = v32;
  do
  {
    if (v32)
    {
      unint64_t v34 = 0;
      do
      {
        if (v60)
        {
          for (unint64_t i = 0; i != v60; ++i)
          {
            if (v65)
            {
              for (unint64_t j = 0; j != v65; ++j)
              {
                if (v79)
                {
                  for (unint64_t k = 0; k != v79; ++k)
                  {
                    LOBYTE(v11) = *(unsigned char *)(a1
                    if (a2)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a2
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                      float v39 = v38;
                    }
                    else
                    {
                      float v39 = 0.0;
                    }
                    if (a3)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a3
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    }
                    else
                    {
                      float v40 = 1.0;
                    }
                    float v41 = (float)LODWORD(v11);
                    if ((float)LODWORD(v11) > 65536.0) {
                      float v41 = 65536.0;
                    }
                    if (v39 <= 65536.0) {
                      float v42 = v39;
                    }
                    else {
                      float v42 = 65536.0;
                    }
                    if (v42 >= -65536.0) {
                      float v43 = v42;
                    }
                    else {
                      float v43 = -65536.0;
                    }
                    if (v40 > 65536.0) {
                      float v40 = 65536.0;
                    }
                    if (v40 >= -65536.0) {
                      float v44 = v40;
                    }
                    else {
                      float v44 = -65536.0;
                    }
                    float v45 = v30 * v41;
                    float v11 = 0.0;
                    float v46 = 0.0;
                    if (v45 != 0.0)
                    {
                      __e[0] = 0;
                      long double v47 = frexp(v45, __e);
                      double v48 = ldexp(v47, 11);
                      float v46 = ldexp(round(v48), __e[0] - 11);
                    }
                    float v49 = (float)(v43 * a11) + v46;
                    if (v49 != 0.0)
                    {
                      __e[0] = 0;
                      long double v50 = frexp(v49, __e);
                      double v51 = ldexp(v50, 11);
                      float v11 = ldexp(round(v51), __e[0] - 11);
                    }
                    float v52 = 0.0;
                    if ((float)(v44 * v11) != 0.0)
                    {
                      __e[0] = 0;
                      long double v53 = frexp((float)(v44 * v11), __e);
                      double v54 = ldexp(v53, 11);
                      float v52 = ldexp(round(v54), __e[0] - 11);
                    }
                    std::function<float ()(float)>::operator()(a8, v52);
                    if (v55 == INFINITY)
                    {
                      LOBYTE(v56) = -1;
                    }
                    else if (v55 == -INFINITY)
                    {
                      LOBYTE(v56) = 0;
                    }
                    else
                    {
                      int v57 = llroundf(v55);
                      if (v57 >= 255) {
                        int v57 = 255;
                      }
                      int v56 = v57 & ~(v57 >> 31);
                    }
                    *(unsigned char *)(*a9
                  }
                }
              }
            }
          }
        }
        ++v34;
        uint64_t v32 = v59;
      }
      while (v34 != v59);
    }
    ++v31;
  }
  while (v31 != v58);
  unint64_t v24 = __p;
  if (__p)
  {
LABEL_87:
    v83 = v24;
    operator delete(v24);
  }
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
}

void sub_210B213D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  float v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(void *)(v36 - 208) = v38;
    operator delete(v38);
  }
  float v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(void *)(v36 - 184) = v39;
    operator delete(v39);
  }
  float v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(void *)(v36 - 160) = v40;
    operator delete(v40);
  }
  float v41 = *(void **)a30;
  if (*(void *)a30)
  {
    *(void *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<unsigned char,MIL::Fp16,MIL::Fp16,signed char,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  if (a11 != 1.0 && a11 != -1.0) {
  if (a2)
  }
  {
    uint64_t v19 = a5[1];
    if (*a5 != v19)
    {
      uint64_t v20 = a4[1];
      if (*a4 != v20 && v20 - *a4 != v19 - *a5) {
    }
      }
  }
  if (a3)
  {
    uint64_t v21 = a6[1];
    if (*a6 != v21)
    {
      uint64_t v22 = a4[1];
      if (*a4 != v22 && v22 - *a4 != v21 - *a6) {
    }
      }
  }
  size_t NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<signed char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  unint64_t v24 = __p;
  unint64_t v25 = v83 - (unsigned char *)__p;
  if (v83 == __p) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v26 = v89 - v88;
  if (v89 == v88) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v27 = v87 - v86;
  if (v87 == v86) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v28 = v85 - v84;
  if (v85 == v84) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  float v29 = 65536.0;
  if (a10 <= 65536.0) {
    float v29 = a10;
  }
  if (v29 >= -65536.0) {
    float v30 = v29;
  }
  else {
    float v30 = -65536.0;
  }
  uint64_t v58 = *(void *)__p;
  if (!*(void *)__p) {
    goto LABEL_89;
  }
  unint64_t v31 = 0;
  uint64_t v32 = *((void *)__p + 1);
  uint64_t v79 = *((void *)__p + 4);
  unint64_t v64 = *(void *)v88;
  uint64_t v65 = *((void *)__p + 3);
  unint64_t v62 = *((void *)v88 + 2);
  unint64_t v63 = *((void *)v88 + 1);
  unint64_t v33 = *((void *)v88 + 4);
  uint64_t v60 = *((void *)__p + 2);
  unint64_t v61 = *((void *)v88 + 3);
  unint64_t v75 = *(void *)v86;
  unint64_t v74 = *((void *)v86 + 1);
  unint64_t v73 = *((void *)v86 + 2);
  unint64_t v72 = *((void *)v86 + 3);
  unint64_t v71 = *((void *)v86 + 4);
  unint64_t v69 = *((void *)v84 + 1);
  unint64_t v70 = *(void *)v84;
  unint64_t v67 = *((void *)v84 + 3);
  unint64_t v68 = *((void *)v84 + 2);
  unint64_t v66 = *((void *)v84 + 4);
  uint64_t v59 = v32;
  do
  {
    if (v32)
    {
      unint64_t v34 = 0;
      do
      {
        if (v60)
        {
          for (unint64_t i = 0; i != v60; ++i)
          {
            if (v65)
            {
              for (unint64_t j = 0; j != v65; ++j)
              {
                if (v79)
                {
                  for (unint64_t k = 0; k != v79; ++k)
                  {
                    LOBYTE(v11) = *(unsigned char *)(a1
                    if (a2)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a2
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                      float v39 = v38;
                    }
                    else
                    {
                      float v39 = 0.0;
                    }
                    if (a3)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a3
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    }
                    else
                    {
                      float v40 = 1.0;
                    }
                    float v41 = (float)LODWORD(v11);
                    if ((float)LODWORD(v11) > 65536.0) {
                      float v41 = 65536.0;
                    }
                    if (v39 <= 65536.0) {
                      float v42 = v39;
                    }
                    else {
                      float v42 = 65536.0;
                    }
                    if (v42 >= -65536.0) {
                      float v43 = v42;
                    }
                    else {
                      float v43 = -65536.0;
                    }
                    if (v40 > 65536.0) {
                      float v40 = 65536.0;
                    }
                    if (v40 >= -65536.0) {
                      float v44 = v40;
                    }
                    else {
                      float v44 = -65536.0;
                    }
                    float v45 = v30 * v41;
                    float v11 = 0.0;
                    float v46 = 0.0;
                    if (v45 != 0.0)
                    {
                      __e[0] = 0;
                      long double v47 = frexp(v45, __e);
                      double v48 = ldexp(v47, 11);
                      float v46 = ldexp(round(v48), __e[0] - 11);
                    }
                    float v49 = (float)(v43 * a11) + v46;
                    if (v49 != 0.0)
                    {
                      __e[0] = 0;
                      long double v50 = frexp(v49, __e);
                      double v51 = ldexp(v50, 11);
                      float v11 = ldexp(round(v51), __e[0] - 11);
                    }
                    float v52 = 0.0;
                    if ((float)(v44 * v11) != 0.0)
                    {
                      __e[0] = 0;
                      long double v53 = frexp((float)(v44 * v11), __e);
                      double v54 = ldexp(v53, 11);
                      float v52 = ldexp(round(v54), __e[0] - 11);
                    }
                    std::function<float ()(float)>::operator()(a8, v52);
                    if (v55 == INFINITY)
                    {
                      char v56 = 127;
                    }
                    else if (v55 == -INFINITY)
                    {
                      char v56 = 0x80;
                    }
                    else
                    {
                      int v57 = llroundf(v55);
                      if (v57 >= 127) {
                        int v57 = 127;
                      }
                      if (v57 <= -128) {
                        char v56 = 0x80;
                      }
                      else {
                        char v56 = v57;
                      }
                    }
                    *(unsigned char *)(*a9
                  }
                }
              }
            }
          }
        }
        ++v34;
        uint64_t v32 = v59;
      }
      while (v34 != v59);
    }
    ++v31;
  }
  while (v31 != v58);
  unint64_t v24 = __p;
  if (__p)
  {
LABEL_89:
    v83 = v24;
    operator delete(v24);
  }
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
}

void sub_210B21B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  float v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(void *)(v36 - 208) = v38;
    operator delete(v38);
  }
  float v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(void *)(v36 - 184) = v39;
    operator delete(v39);
  }
  float v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(void *)(v36 - 160) = v40;
    operator delete(v40);
  }
  float v41 = *(void **)a30;
  if (*(void *)a30)
  {
    *(void *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<unsigned char,unsigned char,unsigned char,MIL::Fp16,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  if (a11 != 1.0 && a11 != -1.0) {
  if (a2)
  }
  {
    uint64_t v19 = a5[1];
    if (*a5 != v19)
    {
      uint64_t v20 = a4[1];
      if (*a4 != v20 && v20 - *a4 != v19 - *a5) {
    }
      }
  }
  if (a3)
  {
    uint64_t v21 = a6[1];
    if (*a6 != v21)
    {
      uint64_t v22 = a4[1];
      if (*a4 != v22 && v22 - *a4 != v21 - *a6) {
    }
      }
  }
  uint64_t NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<MIL::Fp16>::vector(a9, NumberOfElementsFromStaticTensorShape);
  unint64_t v24 = __p;
  unint64_t v25 = v83 - (unsigned char *)__p;
  if (v83 == __p) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v26 = v89 - v88;
  if (v89 == v88) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v27 = v87 - v86;
  if (v87 == v86) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v28 = v85 - v84;
  if (v85 == v84) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  float v29 = 65536.0;
  if (a10 <= 65536.0) {
    float v29 = a10;
  }
  if (v29 >= -65536.0) {
    float v30 = v29;
  }
  else {
    float v30 = -65536.0;
  }
  uint64_t v58 = *(void *)__p;
  if (!*(void *)__p) {
    goto LABEL_75;
  }
  unint64_t v31 = 0;
  uint64_t v32 = *((void *)__p + 1);
  uint64_t v79 = *((void *)__p + 4);
  unint64_t v64 = *(void *)v88;
  uint64_t v65 = *((void *)__p + 3);
  unint64_t v62 = *((void *)v88 + 2);
  unint64_t v63 = *((void *)v88 + 1);
  unint64_t v33 = *((void *)v88 + 4);
  uint64_t v60 = *((void *)__p + 2);
  unint64_t v61 = *((void *)v88 + 3);
  unint64_t v75 = *(void *)v86;
  unint64_t v74 = *((void *)v86 + 1);
  unint64_t v73 = *((void *)v86 + 2);
  unint64_t v72 = *((void *)v86 + 3);
  unint64_t v71 = *((void *)v86 + 4);
  unint64_t v69 = *((void *)v84 + 1);
  unint64_t v70 = *(void *)v84;
  unint64_t v67 = *((void *)v84 + 3);
  unint64_t v68 = *((void *)v84 + 2);
  unint64_t v66 = *((void *)v84 + 4);
  uint64_t v59 = v32;
  do
  {
    if (v32)
    {
      unint64_t v34 = 0;
      do
      {
        if (v60)
        {
          for (unint64_t i = 0; i != v60; ++i)
          {
            if (v65)
            {
              for (unint64_t j = 0; j != v65; ++j)
              {
                if (v79)
                {
                  for (unint64_t k = 0; k != v79; ++k)
                  {
                    LOBYTE(v11) = *(unsigned char *)(a1
                    if (a2)
                    {
                      LOBYTE(v38) = *(unsigned char *)(a2
                      float v39 = (float)v38;
                    }
                    else
                    {
                      float v39 = 0.0;
                    }
                    if (a3)
                    {
                      LOBYTE(v40) = *(unsigned char *)(a3
                      float v41 = (float)v40;
                    }
                    else
                    {
                      float v41 = 1.0;
                    }
                    float v42 = (float)LODWORD(v11);
                    if ((float)LODWORD(v11) > 65536.0) {
                      float v42 = 65536.0;
                    }
                    if (v39 <= 65536.0) {
                      float v43 = v39;
                    }
                    else {
                      float v43 = 65536.0;
                    }
                    if (v41 <= 65536.0) {
                      float v11 = v41;
                    }
                    else {
                      float v11 = 65536.0;
                    }
                    float v44 = v30 * v42;
                    float v45 = 0.0;
                    float v46 = 0.0;
                    if (v44 != 0.0)
                    {
                      __e[0] = 0;
                      long double v47 = frexp(v44, __e);
                      double v48 = ldexp(v47, 11);
                      float v46 = ldexp(round(v48), __e[0] - 11);
                    }
                    float v49 = (float)(v43 * a11) + v46;
                    if (v49 != 0.0)
                    {
                      __e[0] = 0;
                      long double v50 = frexp(v49, __e);
                      double v51 = ldexp(v50, 11);
                      float v45 = ldexp(round(v51), __e[0] - 11);
                    }
                    float v52 = 0.0;
                    if ((float)(v11 * v45) != 0.0)
                    {
                      __e[0] = 0;
                      long double v53 = frexp((float)(v11 * v45), __e);
                      double v54 = ldexp(v53, 11);
                      float v52 = ldexp(round(v54), __e[0] - 11);
                    }
                    float v55 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(a8, v52);
                    __int16 v57 = MIL::Fp16::FromFloat(v55, v56);
                    *(_WORD *)(*a9
                             + 2
                  }
                }
              }
            }
          }
        }
        ++v34;
        uint64_t v32 = v59;
      }
      while (v34 != v59);
    }
    ++v31;
  }
  while (v31 != v58);
  unint64_t v24 = __p;
  if (__p)
  {
LABEL_75:
    v83 = v24;
    operator delete(v24);
  }
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
}

void sub_210B222E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  unsigned int v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(void *)(v36 - 208) = v38;
    operator delete(v38);
  }
  float v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(void *)(v36 - 184) = v39;
    operator delete(v39);
  }
  unsigned int v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(void *)(v36 - 160) = v40;
    operator delete(v40);
  }
  float v41 = *(void **)a30;
  if (*(void *)a30)
  {
    *(void *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<unsigned char,unsigned char,unsigned char,unsigned char,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  if (a11 != 1.0 && a11 != -1.0) {
  if (a2)
  }
  {
    uint64_t v19 = a5[1];
    if (*a5 != v19)
    {
      uint64_t v20 = a4[1];
      if (*a4 != v20 && v20 - *a4 != v19 - *a5) {
    }
      }
  }
  if (a3)
  {
    uint64_t v21 = a6[1];
    if (*a6 != v21)
    {
      uint64_t v22 = a4[1];
      if (*a4 != v22 && v22 - *a4 != v21 - *a6) {
    }
      }
  }
  size_t NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<unsigned char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  unint64_t v24 = __p;
  unint64_t v25 = v82 - (unsigned char *)__p;
  if (v82 == __p) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v26 = v88 - v87;
  if (v88 == v87) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v27 = v86 - v85;
  if (v86 == v85) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v28 = v84 - v83;
  if (v84 == v83) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  float v29 = 65536.0;
  if (a10 <= 65536.0) {
    float v29 = a10;
  }
  if (v29 >= -65536.0) {
    float v30 = v29;
  }
  else {
    float v30 = -65536.0;
  }
  uint64_t v57 = *(void *)__p;
  if (!*(void *)__p) {
    goto LABEL_82;
  }
  unint64_t v31 = 0;
  uint64_t v58 = *((void *)__p + 1);
  uint64_t v59 = *((void *)__p + 2);
  uint64_t v64 = *((void *)__p + 3);
  uint64_t v78 = *((void *)__p + 4);
  unint64_t v63 = *(void *)v87;
  unint64_t v62 = *((void *)v87 + 1);
  unint64_t v61 = *((void *)v87 + 2);
  unint64_t v32 = *((void *)v87 + 4);
  unint64_t v60 = *((void *)v87 + 3);
  unint64_t v73 = *((void *)v85 + 1);
  unint64_t v74 = *(void *)v85;
  unint64_t v71 = *((void *)v85 + 3);
  unint64_t v72 = *((void *)v85 + 2);
  unint64_t v69 = *(void *)v83;
  unint64_t v70 = *((void *)v85 + 4);
  unint64_t v67 = *((void *)v83 + 2);
  unint64_t v68 = *((void *)v83 + 1);
  unint64_t v65 = *((void *)v83 + 4);
  unint64_t v66 = *((void *)v83 + 3);
  do
  {
    if (v58)
    {
      for (unint64_t i = 0; i != v58; ++i)
      {
        if (v59)
        {
          for (unint64_t j = 0; j != v59; ++j)
          {
            if (v64)
            {
              for (unint64_t k = 0; k != v64; ++k)
              {
                if (v78)
                {
                  for (unint64_t m = 0; m != v78; ++m)
                  {
                    LOBYTE(v11) = *(unsigned char *)(a1
                    if (a2)
                    {
                      LOBYTE(v37) = *(unsigned char *)(a2
                      float v38 = (float)v37;
                    }
                    else
                    {
                      float v38 = 0.0;
                    }
                    if (a3)
                    {
                      LOBYTE(v39) = *(unsigned char *)(a3
                      float v40 = (float)v39;
                    }
                    else
                    {
                      float v40 = 1.0;
                    }
                    float v41 = (float)LODWORD(v11);
                    if ((float)LODWORD(v11) > 65536.0) {
                      float v41 = 65536.0;
                    }
                    if (v38 <= 65536.0) {
                      float v42 = v38;
                    }
                    else {
                      float v42 = 65536.0;
                    }
                    if (v40 <= 65536.0) {
                      float v11 = v40;
                    }
                    else {
                      float v11 = 65536.0;
                    }
                    float v43 = v30 * v41;
                    float v44 = 0.0;
                    float v45 = 0.0;
                    if (v43 != 0.0)
                    {
                      __e[0] = 0;
                      long double v46 = frexp(v43, __e);
                      double v47 = ldexp(v46, 11);
                      float v45 = ldexp(round(v47), __e[0] - 11);
                    }
                    float v48 = (float)(v42 * a11) + v45;
                    if (v48 != 0.0)
                    {
                      __e[0] = 0;
                      long double v49 = frexp(v48, __e);
                      double v50 = ldexp(v49, 11);
                      float v44 = ldexp(round(v50), __e[0] - 11);
                    }
                    float v51 = 0.0;
                    if ((float)(v11 * v44) != 0.0)
                    {
                      __e[0] = 0;
                      long double v52 = frexp((float)(v11 * v44), __e);
                      double v53 = ldexp(v52, 11);
                      float v51 = ldexp(round(v53), __e[0] - 11);
                    }
                    std::function<float ()(float)>::operator()(a8, v51);
                    if (v54 == INFINITY)
                    {
                      LOBYTE(v55) = -1;
                    }
                    else if (v54 == -INFINITY)
                    {
                      LOBYTE(v55) = 0;
                    }
                    else
                    {
                      int v56 = llroundf(v54);
                      if (v56 >= 255) {
                        int v56 = 255;
                      }
                      int v55 = v56 & ~(v56 >> 31);
                    }
                    *(unsigned char *)(*a9
                  }
                }
              }
            }
          }
        }
      }
    }
    ++v31;
  }
  while (v31 != v57);
  unint64_t v24 = __p;
  if (__p)
  {
LABEL_82:
    v82 = v24;
    operator delete(v24);
  }
  if (v83)
  {
    v84 = v83;
    operator delete(v83);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
}

void sub_210B22A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  float v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(void *)(v36 - 208) = v38;
    operator delete(v38);
  }
  unsigned int v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(void *)(v36 - 184) = v39;
    operator delete(v39);
  }
  float v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(void *)(v36 - 160) = v40;
    operator delete(v40);
  }
  float v41 = *(void **)a30;
  if (*(void *)a30)
  {
    *(void *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<unsigned char,unsigned char,unsigned char,signed char,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  if (a11 != 1.0 && a11 != -1.0) {
  if (a2)
  }
  {
    uint64_t v19 = a5[1];
    if (*a5 != v19)
    {
      uint64_t v20 = a4[1];
      if (*a4 != v20 && v20 - *a4 != v19 - *a5) {
    }
      }
  }
  if (a3)
  {
    uint64_t v21 = a6[1];
    if (*a6 != v21)
    {
      uint64_t v22 = a4[1];
      if (*a4 != v22 && v22 - *a4 != v21 - *a6) {
    }
      }
  }
  size_t NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<signed char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  unint64_t v24 = __p;
  unint64_t v25 = v82 - (unsigned char *)__p;
  if (v82 == __p) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v26 = v88 - v87;
  if (v88 == v87) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v27 = v86 - v85;
  if (v86 == v85) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v28 = v84 - v83;
  if (v84 == v83) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  float v29 = 65536.0;
  if (a10 <= 65536.0) {
    float v29 = a10;
  }
  if (v29 >= -65536.0) {
    float v30 = v29;
  }
  else {
    float v30 = -65536.0;
  }
  uint64_t v57 = *(void *)__p;
  if (!*(void *)__p) {
    goto LABEL_84;
  }
  unint64_t v31 = 0;
  uint64_t v58 = *((void *)__p + 1);
  uint64_t v59 = *((void *)__p + 2);
  uint64_t v64 = *((void *)__p + 3);
  uint64_t v78 = *((void *)__p + 4);
  unint64_t v63 = *(void *)v87;
  unint64_t v62 = *((void *)v87 + 1);
  unint64_t v61 = *((void *)v87 + 2);
  unint64_t v32 = *((void *)v87 + 4);
  unint64_t v60 = *((void *)v87 + 3);
  unint64_t v73 = *((void *)v85 + 1);
  unint64_t v74 = *(void *)v85;
  unint64_t v71 = *((void *)v85 + 3);
  unint64_t v72 = *((void *)v85 + 2);
  unint64_t v69 = *(void *)v83;
  unint64_t v70 = *((void *)v85 + 4);
  unint64_t v67 = *((void *)v83 + 2);
  unint64_t v68 = *((void *)v83 + 1);
  unint64_t v65 = *((void *)v83 + 4);
  unint64_t v66 = *((void *)v83 + 3);
  do
  {
    if (v58)
    {
      for (unint64_t i = 0; i != v58; ++i)
      {
        if (v59)
        {
          for (unint64_t j = 0; j != v59; ++j)
          {
            if (v64)
            {
              for (unint64_t k = 0; k != v64; ++k)
              {
                if (v78)
                {
                  for (unint64_t m = 0; m != v78; ++m)
                  {
                    LOBYTE(v11) = *(unsigned char *)(a1
                    if (a2)
                    {
                      LOBYTE(v37) = *(unsigned char *)(a2
                      float v38 = (float)v37;
                    }
                    else
                    {
                      float v38 = 0.0;
                    }
                    if (a3)
                    {
                      LOBYTE(v39) = *(unsigned char *)(a3
                      float v40 = (float)v39;
                    }
                    else
                    {
                      float v40 = 1.0;
                    }
                    float v41 = (float)LODWORD(v11);
                    if ((float)LODWORD(v11) > 65536.0) {
                      float v41 = 65536.0;
                    }
                    if (v38 <= 65536.0) {
                      float v42 = v38;
                    }
                    else {
                      float v42 = 65536.0;
                    }
                    if (v40 <= 65536.0) {
                      float v11 = v40;
                    }
                    else {
                      float v11 = 65536.0;
                    }
                    float v43 = v30 * v41;
                    float v44 = 0.0;
                    float v45 = 0.0;
                    if (v43 != 0.0)
                    {
                      __e[0] = 0;
                      long double v46 = frexp(v43, __e);
                      double v47 = ldexp(v46, 11);
                      float v45 = ldexp(round(v47), __e[0] - 11);
                    }
                    float v48 = (float)(v42 * a11) + v45;
                    if (v48 != 0.0)
                    {
                      __e[0] = 0;
                      long double v49 = frexp(v48, __e);
                      double v50 = ldexp(v49, 11);
                      float v44 = ldexp(round(v50), __e[0] - 11);
                    }
                    float v51 = 0.0;
                    if ((float)(v11 * v44) != 0.0)
                    {
                      __e[0] = 0;
                      long double v52 = frexp((float)(v11 * v44), __e);
                      double v53 = ldexp(v52, 11);
                      float v51 = ldexp(round(v53), __e[0] - 11);
                    }
                    std::function<float ()(float)>::operator()(a8, v51);
                    if (v54 == INFINITY)
                    {
                      char v55 = 127;
                    }
                    else if (v54 == -INFINITY)
                    {
                      char v55 = 0x80;
                    }
                    else
                    {
                      int v56 = llroundf(v54);
                      if (v56 >= 127) {
                        int v56 = 127;
                      }
                      if (v56 <= -128) {
                        char v55 = 0x80;
                      }
                      else {
                        char v55 = v56;
                      }
                    }
                    *(unsigned char *)(*a9
                  }
                }
              }
            }
          }
        }
      }
    }
    ++v31;
  }
  while (v31 != v57);
  unint64_t v24 = __p;
  if (__p)
  {
LABEL_84:
    v82 = v24;
    operator delete(v24);
  }
  if (v83)
  {
    v84 = v83;
    operator delete(v83);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
}

void sub_210B23224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  float v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(void *)(v36 - 208) = v38;
    operator delete(v38);
  }
  unsigned int v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(void *)(v36 - 184) = v39;
    operator delete(v39);
  }
  float v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(void *)(v36 - 160) = v40;
    operator delete(v40);
  }
  float v41 = *(void **)a30;
  if (*(void *)a30)
  {
    *(void *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<unsigned char,signed char,signed char,MIL::Fp16,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  if (a11 != 1.0 && a11 != -1.0) {
  if (a2)
  }
  {
    uint64_t v19 = a5[1];
    if (*a5 != v19)
    {
      uint64_t v20 = a4[1];
      if (*a4 != v20 && v20 - *a4 != v19 - *a5) {
    }
      }
  }
  if (a3)
  {
    uint64_t v21 = a6[1];
    if (*a6 != v21)
    {
      uint64_t v22 = a4[1];
      if (*a4 != v22 && v22 - *a4 != v21 - *a6) {
    }
      }
  }
  uint64_t NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<MIL::Fp16>::vector(a9, NumberOfElementsFromStaticTensorShape);
  unint64_t v24 = __p;
  unint64_t v25 = v82 - (unsigned char *)__p;
  if (v82 == __p) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v26 = v88 - v87;
  if (v88 == v87) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v27 = v86 - v85;
  if (v86 == v85) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v28 = v84 - v83;
  if (v84 == v83) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  float v29 = 65536.0;
  if (a10 <= 65536.0) {
    float v29 = a10;
  }
  if (v29 >= -65536.0) {
    float v30 = v29;
  }
  else {
    float v30 = -65536.0;
  }
  uint64_t v57 = *(void *)__p;
  if (!*(void *)__p) {
    goto LABEL_80;
  }
  unint64_t v31 = 0;
  uint64_t v32 = *((void *)__p + 1);
  uint64_t v78 = *((void *)__p + 4);
  unint64_t v63 = *(void *)v87;
  uint64_t v64 = *((void *)__p + 3);
  unint64_t v61 = *((void *)v87 + 2);
  unint64_t v62 = *((void *)v87 + 1);
  unint64_t v33 = *((void *)v87 + 4);
  uint64_t v59 = *((void *)__p + 2);
  unint64_t v60 = *((void *)v87 + 3);
  unint64_t v74 = *(void *)v85;
  unint64_t v73 = *((void *)v85 + 1);
  unint64_t v72 = *((void *)v85 + 2);
  unint64_t v71 = *((void *)v85 + 3);
  unint64_t v70 = *((void *)v85 + 4);
  unint64_t v68 = *((void *)v83 + 1);
  unint64_t v69 = *(void *)v83;
  unint64_t v66 = *((void *)v83 + 3);
  unint64_t v67 = *((void *)v83 + 2);
  unint64_t v65 = *((void *)v83 + 4);
  uint64_t v58 = v32;
  do
  {
    if (v32)
    {
      unint64_t v34 = 0;
      do
      {
        if (v59)
        {
          for (unint64_t i = 0; i != v59; ++i)
          {
            if (v64)
            {
              for (unint64_t j = 0; j != v64; ++j)
              {
                if (v78)
                {
                  for (unint64_t k = 0; k != v78; ++k)
                  {
                    LOBYTE(v11) = *(unsigned char *)(a1
                    if (a2) {
                      float v38 = (float)*(char *)(a2
                    }
                    else {
                      float v38 = 0.0;
                    }
                    if (a3) {
                      float v39 = (float)*(char *)(a3
                    }
                    else {
                      float v39 = 1.0;
                    }
                    float v40 = (float)LODWORD(v11);
                    if ((float)LODWORD(v11) > 65536.0) {
                      float v40 = 65536.0;
                    }
                    if (v38 <= 65536.0) {
                      float v41 = v38;
                    }
                    else {
                      float v41 = 65536.0;
                    }
                    if (v41 >= -65536.0) {
                      float v42 = v41;
                    }
                    else {
                      float v42 = -65536.0;
                    }
                    if (v39 > 65536.0) {
                      float v39 = 65536.0;
                    }
                    if (v39 >= -65536.0) {
                      float v11 = v39;
                    }
                    else {
                      float v11 = -65536.0;
                    }
                    float v43 = v30 * v40;
                    float v44 = 0.0;
                    float v45 = 0.0;
                    if (v43 != 0.0)
                    {
                      __e[0] = 0;
                      long double v46 = frexp(v43, __e);
                      double v47 = ldexp(v46, 11);
                      float v45 = ldexp(round(v47), __e[0] - 11);
                    }
                    float v48 = (float)(v42 * a11) + v45;
                    if (v48 != 0.0)
                    {
                      __e[0] = 0;
                      long double v49 = frexp(v48, __e);
                      double v50 = ldexp(v49, 11);
                      float v44 = ldexp(round(v50), __e[0] - 11);
                    }
                    float v51 = 0.0;
                    if ((float)(v11 * v44) != 0.0)
                    {
                      __e[0] = 0;
                      long double v52 = frexp((float)(v11 * v44), __e);
                      double v53 = ldexp(v52, 11);
                      float v51 = ldexp(round(v53), __e[0] - 11);
                    }
                    float v54 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(a8, v51);
                    __int16 v56 = MIL::Fp16::FromFloat(v54, v55);
                    *(_WORD *)(*a9
                             + 2
                  }
                }
              }
            }
          }
        }
        ++v34;
        uint64_t v32 = v58;
      }
      while (v34 != v58);
    }
    ++v31;
  }
  while (v31 != v57);
  unint64_t v24 = __p;
  if (__p)
  {
LABEL_80:
    v82 = v24;
    operator delete(v24);
  }
  if (v83)
  {
    v84 = v83;
    operator delete(v83);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
}

void sub_210B23990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  float v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(void *)(v36 - 208) = v38;
    operator delete(v38);
  }
  float v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(void *)(v36 - 184) = v39;
    operator delete(v39);
  }
  float v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(void *)(v36 - 160) = v40;
    operator delete(v40);
  }
  float v41 = *(void **)a30;
  if (*(void *)a30)
  {
    *(void *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<unsigned char,signed char,signed char,unsigned char,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  if (a11 != 1.0 && a11 != -1.0) {
  if (a2)
  }
  {
    uint64_t v19 = a5[1];
    if (*a5 != v19)
    {
      uint64_t v20 = a4[1];
      if (*a4 != v20 && v20 - *a4 != v19 - *a5) {
    }
      }
  }
  if (a3)
  {
    uint64_t v21 = a6[1];
    if (*a6 != v21)
    {
      uint64_t v22 = a4[1];
      if (*a4 != v22 && v22 - *a4 != v21 - *a6) {
    }
      }
  }
  size_t NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<unsigned char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  unint64_t v24 = __p;
  unint64_t v25 = v81 - (unsigned char *)__p;
  if (v81 == __p) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v26 = v87 - v86;
  if (v87 == v86) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v27 = v85 - v84;
  if (v85 == v84) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v28 = v83 - v82;
  if (v83 == v82) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  float v29 = 65536.0;
  if (a10 <= 65536.0) {
    float v29 = a10;
  }
  if (v29 >= -65536.0) {
    float v30 = v29;
  }
  else {
    float v30 = -65536.0;
  }
  uint64_t v56 = *(void *)__p;
  if (!*(void *)__p) {
    goto LABEL_87;
  }
  unint64_t v31 = 0;
  uint64_t v57 = *((void *)__p + 1);
  uint64_t v58 = *((void *)__p + 2);
  uint64_t v63 = *((void *)__p + 3);
  uint64_t v77 = *((void *)__p + 4);
  unint64_t v62 = *(void *)v86;
  unint64_t v61 = *((void *)v86 + 1);
  unint64_t v60 = *((void *)v86 + 2);
  unint64_t v32 = *((void *)v86 + 4);
  unint64_t v59 = *((void *)v86 + 3);
  unint64_t v72 = *((void *)v84 + 1);
  unint64_t v73 = *(void *)v84;
  unint64_t v70 = *((void *)v84 + 3);
  unint64_t v71 = *((void *)v84 + 2);
  unint64_t v68 = *(void *)v82;
  unint64_t v69 = *((void *)v84 + 4);
  unint64_t v66 = *((void *)v82 + 2);
  unint64_t v67 = *((void *)v82 + 1);
  unint64_t v64 = *((void *)v82 + 4);
  unint64_t v65 = *((void *)v82 + 3);
  do
  {
    if (v57)
    {
      for (unint64_t i = 0; i != v57; ++i)
      {
        if (v58)
        {
          for (unint64_t j = 0; j != v58; ++j)
          {
            if (v63)
            {
              for (unint64_t k = 0; k != v63; ++k)
              {
                if (v77)
                {
                  for (unint64_t m = 0; m != v77; ++m)
                  {
                    LOBYTE(v11) = *(unsigned char *)(a1
                    if (a2) {
                      float v37 = (float)*(char *)(a2
                    }
                    else {
                      float v37 = 0.0;
                    }
                    if (a3) {
                      float v38 = (float)*(char *)(a3
                    }
                    else {
                      float v38 = 1.0;
                    }
                    float v39 = (float)LODWORD(v11);
                    if ((float)LODWORD(v11) > 65536.0) {
                      float v39 = 65536.0;
                    }
                    if (v37 <= 65536.0) {
                      float v40 = v37;
                    }
                    else {
                      float v40 = 65536.0;
                    }
                    if (v40 >= -65536.0) {
                      float v41 = v40;
                    }
                    else {
                      float v41 = -65536.0;
                    }
                    if (v38 > 65536.0) {
                      float v38 = 65536.0;
                    }
                    if (v38 >= -65536.0) {
                      float v11 = v38;
                    }
                    else {
                      float v11 = -65536.0;
                    }
                    float v42 = v30 * v39;
                    float v43 = 0.0;
                    float v44 = 0.0;
                    if (v42 != 0.0)
                    {
                      __e[0] = 0;
                      long double v45 = frexp(v42, __e);
                      double v46 = ldexp(v45, 11);
                      float v44 = ldexp(round(v46), __e[0] - 11);
                    }
                    float v47 = (float)(v41 * a11) + v44;
                    if (v47 != 0.0)
                    {
                      __e[0] = 0;
                      long double v48 = frexp(v47, __e);
                      double v49 = ldexp(v48, 11);
                      float v43 = ldexp(round(v49), __e[0] - 11);
                    }
                    float v50 = 0.0;
                    if ((float)(v11 * v43) != 0.0)
                    {
                      __e[0] = 0;
                      long double v51 = frexp((float)(v11 * v43), __e);
                      double v52 = ldexp(v51, 11);
                      float v50 = ldexp(round(v52), __e[0] - 11);
                    }
                    std::function<float ()(float)>::operator()(a8, v50);
                    if (v53 == INFINITY)
                    {
                      LOBYTE(v54) = -1;
                    }
                    else if (v53 == -INFINITY)
                    {
                      LOBYTE(v54) = 0;
                    }
                    else
                    {
                      int v55 = llroundf(v53);
                      if (v55 >= 255) {
                        int v55 = 255;
                      }
                      int v54 = v55 & ~(v55 >> 31);
                    }
                    *(unsigned char *)(*a9
                  }
                }
              }
            }
          }
        }
      }
    }
    ++v31;
  }
  while (v31 != v56);
  unint64_t v24 = __p;
  if (__p)
  {
LABEL_87:
    v81 = v24;
    operator delete(v24);
  }
  if (v82)
  {
    v83 = v82;
    operator delete(v82);
  }
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
}

void sub_210B24144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  float v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(void *)(v36 - 208) = v38;
    operator delete(v38);
  }
  float v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(void *)(v36 - 184) = v39;
    operator delete(v39);
  }
  float v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(void *)(v36 - 160) = v40;
    operator delete(v40);
  }
  float v41 = *(void **)a30;
  if (*(void *)a30)
  {
    *(void *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<unsigned char,signed char,signed char,signed char,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  if (a11 != 1.0 && a11 != -1.0) {
  if (a2)
  }
  {
    uint64_t v19 = a5[1];
    if (*a5 != v19)
    {
      uint64_t v20 = a4[1];
      if (*a4 != v20 && v20 - *a4 != v19 - *a5) {
    }
      }
  }
  if (a3)
  {
    uint64_t v21 = a6[1];
    if (*a6 != v21)
    {
      uint64_t v22 = a4[1];
      if (*a4 != v22 && v22 - *a4 != v21 - *a6) {
    }
      }
  }
  size_t NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<signed char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  unint64_t v24 = __p;
  unint64_t v25 = v81 - (unsigned char *)__p;
  if (v81 == __p) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v26 = v87 - v86;
  if (v87 == v86) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v27 = v85 - v84;
  if (v85 == v84) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v28 = v83 - v82;
  if (v83 == v82) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v28 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  float v29 = 65536.0;
  if (a10 <= 65536.0) {
    float v29 = a10;
  }
  if (v29 >= -65536.0) {
    float v30 = v29;
  }
  else {
    float v30 = -65536.0;
  }
  uint64_t v56 = *(void *)__p;
  if (!*(void *)__p) {
    goto LABEL_89;
  }
  unint64_t v31 = 0;
  uint64_t v57 = *((void *)__p + 1);
  uint64_t v58 = *((void *)__p + 2);
  uint64_t v63 = *((void *)__p + 3);
  uint64_t v77 = *((void *)__p + 4);
  unint64_t v62 = *(void *)v86;
  unint64_t v61 = *((void *)v86 + 1);
  unint64_t v60 = *((void *)v86 + 2);
  unint64_t v32 = *((void *)v86 + 4);
  unint64_t v59 = *((void *)v86 + 3);
  unint64_t v72 = *((void *)v84 + 1);
  unint64_t v73 = *(void *)v84;
  unint64_t v70 = *((void *)v84 + 3);
  unint64_t v71 = *((void *)v84 + 2);
  unint64_t v68 = *(void *)v82;
  unint64_t v69 = *((void *)v84 + 4);
  unint64_t v66 = *((void *)v82 + 2);
  unint64_t v67 = *((void *)v82 + 1);
  unint64_t v64 = *((void *)v82 + 4);
  unint64_t v65 = *((void *)v82 + 3);
  do
  {
    if (v57)
    {
      for (unint64_t i = 0; i != v57; ++i)
      {
        if (v58)
        {
          for (unint64_t j = 0; j != v58; ++j)
          {
            if (v63)
            {
              for (unint64_t k = 0; k != v63; ++k)
              {
                if (v77)
                {
                  for (unint64_t m = 0; m != v77; ++m)
                  {
                    LOBYTE(v11) = *(unsigned char *)(a1
                    if (a2) {
                      float v37 = (float)*(char *)(a2
                    }
                    else {
                      float v37 = 0.0;
                    }
                    if (a3) {
                      float v38 = (float)*(char *)(a3
                    }
                    else {
                      float v38 = 1.0;
                    }
                    float v39 = (float)LODWORD(v11);
                    if ((float)LODWORD(v11) > 65536.0) {
                      float v39 = 65536.0;
                    }
                    if (v37 <= 65536.0) {
                      float v40 = v37;
                    }
                    else {
                      float v40 = 65536.0;
                    }
                    if (v40 >= -65536.0) {
                      float v41 = v40;
                    }
                    else {
                      float v41 = -65536.0;
                    }
                    if (v38 > 65536.0) {
                      float v38 = 65536.0;
                    }
                    if (v38 >= -65536.0) {
                      float v11 = v38;
                    }
                    else {
                      float v11 = -65536.0;
                    }
                    float v42 = v30 * v39;
                    float v43 = 0.0;
                    float v44 = 0.0;
                    if (v42 != 0.0)
                    {
                      __e[0] = 0;
                      long double v45 = frexp(v42, __e);
                      double v46 = ldexp(v45, 11);
                      float v44 = ldexp(round(v46), __e[0] - 11);
                    }
                    float v47 = (float)(v41 * a11) + v44;
                    if (v47 != 0.0)
                    {
                      __e[0] = 0;
                      long double v48 = frexp(v47, __e);
                      double v49 = ldexp(v48, 11);
                      float v43 = ldexp(round(v49), __e[0] - 11);
                    }
                    float v50 = 0.0;
                    if ((float)(v11 * v43) != 0.0)
                    {
                      __e[0] = 0;
                      long double v51 = frexp((float)(v11 * v43), __e);
                      double v52 = ldexp(v51, 11);
                      float v50 = ldexp(round(v52), __e[0] - 11);
                    }
                    std::function<float ()(float)>::operator()(a8, v50);
                    if (v53 == INFINITY)
                    {
                      char v54 = 127;
                    }
                    else if (v53 == -INFINITY)
                    {
                      char v54 = 0x80;
                    }
                    else
                    {
                      int v55 = llroundf(v53);
                      if (v55 >= 127) {
                        int v55 = 127;
                      }
                      if (v55 <= -128) {
                        char v54 = 0x80;
                      }
                      else {
                        char v54 = v55;
                      }
                    }
                    *(unsigned char *)(*a9
                  }
                }
              }
            }
          }
        }
      }
    }
    ++v31;
  }
  while (v31 != v56);
  unint64_t v24 = __p;
  if (__p)
  {
LABEL_89:
    v81 = v24;
    operator delete(v24);
  }
  if (v82)
  {
    v83 = v82;
    operator delete(v82);
  }
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
}

void sub_210B248FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  float v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(void *)(v36 - 208) = v38;
    operator delete(v38);
  }
  float v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(void *)(v36 - 184) = v39;
    operator delete(v39);
  }
  float v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(void *)(v36 - 160) = v40;
    operator delete(v40);
  }
  float v41 = *(void **)a30;
  if (*(void *)a30)
  {
    *(void *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<signed char,MIL::Fp16,MIL::Fp16,MIL::Fp16,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  if (a11 != 1.0 && a11 != -1.0) {
  if (a2)
  }
  {
    uint64_t v18 = a5[1];
    if (*a5 != v18)
    {
      uint64_t v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5) {
    }
      }
  }
  if (a3)
  {
    uint64_t v20 = a6[1];
    if (*a6 != v20)
    {
      uint64_t v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6) {
    }
      }
  }
  uint64_t NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<MIL::Fp16>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  unint64_t v24 = v84 - (unsigned char *)__p;
  if (v84 == __p) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v25 = v90 - v89;
  if (v90 == v89) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v26 = v88 - v87;
  if (v88 == v87) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v27 = v86 - v85;
  if (v86 == v85) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  float v28 = 65536.0;
  if (a10 <= 65536.0) {
    float v28 = a10;
  }
  if (v28 >= -65536.0) {
    float v29 = v28;
  }
  else {
    float v29 = -65536.0;
  }
  uint64_t v59 = *(void *)__p;
  if (!*(void *)__p) {
    goto LABEL_82;
  }
  unint64_t v30 = 0;
  uint64_t v31 = *((void *)__p + 1);
  uint64_t v80 = *((void *)__p + 4);
  unint64_t v65 = *(void *)v89;
  uint64_t v66 = *((void *)__p + 3);
  unint64_t v63 = *((void *)v89 + 2);
  unint64_t v64 = *((void *)v89 + 1);
  unint64_t v32 = *((void *)v89 + 4);
  uint64_t v61 = *((void *)__p + 2);
  unint64_t v62 = *((void *)v89 + 3);
  unint64_t v76 = *(void *)v87;
  unint64_t v75 = *((void *)v87 + 1);
  unint64_t v74 = *((void *)v87 + 2);
  unint64_t v73 = *((void *)v87 + 3);
  unint64_t v72 = *((void *)v87 + 4);
  unint64_t v70 = *((void *)v85 + 1);
  unint64_t v71 = *(void *)v85;
  unint64_t v68 = *((void *)v85 + 3);
  unint64_t v69 = *((void *)v85 + 2);
  unint64_t v67 = *((void *)v85 + 4);
  uint64_t v60 = v31;
  do
  {
    if (v31)
    {
      unint64_t v33 = 0;
      do
      {
        if (v61)
        {
          for (unint64_t i = 0; i != v61; ++i)
          {
            if (v66)
            {
              for (unint64_t j = 0; j != v66; ++j)
              {
                if (v80)
                {
                  for (unint64_t k = 0; k != v80; ++k)
                  {
                    int v37 = *(char *)(a1
                    if (a2)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a2
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                      float v39 = v38;
                    }
                    else
                    {
                      float v39 = 0.0;
                    }
                    if (a3)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a3
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    }
                    else
                    {
                      float v40 = 1.0;
                    }
                    float v41 = (float)v37;
                    if ((float)v37 > 65536.0) {
                      float v41 = 65536.0;
                    }
                    if (v41 < -65536.0) {
                      float v41 = -65536.0;
                    }
                    if (v39 <= 65536.0) {
                      float v42 = v39;
                    }
                    else {
                      float v42 = 65536.0;
                    }
                    if (v42 >= -65536.0) {
                      float v43 = v42;
                    }
                    else {
                      float v43 = -65536.0;
                    }
                    if (v40 > 65536.0) {
                      float v40 = 65536.0;
                    }
                    if (v40 >= -65536.0) {
                      float v44 = v40;
                    }
                    else {
                      float v44 = -65536.0;
                    }
                    float v45 = v29 * v41;
                    float v46 = 0.0;
                    float v47 = 0.0;
                    if (v45 != 0.0)
                    {
                      __e[0] = 0;
                      long double v48 = frexp(v45, __e);
                      double v49 = ldexp(v48, 11);
                      float v47 = ldexp(round(v49), __e[0] - 11);
                    }
                    float v50 = (float)(v43 * a11) + v47;
                    if (v50 != 0.0)
                    {
                      __e[0] = 0;
                      long double v51 = frexp(v50, __e);
                      double v52 = ldexp(v51, 11);
                      float v46 = ldexp(round(v52), __e[0] - 11);
                    }
                    float v53 = 0.0;
                    if ((float)(v44 * v46) != 0.0)
                    {
                      __e[0] = 0;
                      long double v54 = frexp((float)(v44 * v46), __e);
                      double v55 = ldexp(v54, 11);
                      float v53 = ldexp(round(v55), __e[0] - 11);
                    }
                    uint64_t v56 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(a8, v53);
                    __int16 v58 = MIL::Fp16::FromFloat(v56, v57);
                    *(_WORD *)(*a9
                             + 2
                  }
                }
              }
            }
          }
        }
        ++v33;
        uint64_t v31 = v60;
      }
      while (v33 != v60);
    }
    ++v30;
  }
  while (v30 != v59);
  v23 = __p;
  if (__p)
  {
LABEL_82:
    v84 = v23;
    operator delete(v23);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
}

void sub_210B25084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  float v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(void *)(v36 - 208) = v38;
    operator delete(v38);
  }
  float v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(void *)(v36 - 184) = v39;
    operator delete(v39);
  }
  float v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(void *)(v36 - 160) = v40;
    operator delete(v40);
  }
  float v41 = *(void **)a30;
  if (*(void *)a30)
  {
    *(void *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<signed char,MIL::Fp16,MIL::Fp16,unsigned char,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  if (a11 != 1.0 && a11 != -1.0) {
  if (a2)
  }
  {
    uint64_t v18 = a5[1];
    if (*a5 != v18)
    {
      uint64_t v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5) {
    }
      }
  }
  if (a3)
  {
    uint64_t v20 = a6[1];
    if (*a6 != v20)
    {
      uint64_t v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6) {
    }
      }
  }
  size_t NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<unsigned char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  unint64_t v24 = v84 - (unsigned char *)__p;
  if (v84 == __p) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v25 = v90 - v89;
  if (v90 == v89) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v26 = v88 - v87;
  if (v88 == v87) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v27 = v86 - v85;
  if (v86 == v85) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  float v28 = 65536.0;
  if (a10 <= 65536.0) {
    float v28 = a10;
  }
  if (v28 >= -65536.0) {
    float v29 = v28;
  }
  else {
    float v29 = -65536.0;
  }
  uint64_t v59 = *(void *)__p;
  if (!*(void *)__p) {
    goto LABEL_89;
  }
  unint64_t v30 = 0;
  uint64_t v31 = *((void *)__p + 1);
  uint64_t v80 = *((void *)__p + 4);
  unint64_t v65 = *(void *)v89;
  uint64_t v66 = *((void *)__p + 3);
  unint64_t v63 = *((void *)v89 + 2);
  unint64_t v64 = *((void *)v89 + 1);
  unint64_t v32 = *((void *)v89 + 4);
  uint64_t v61 = *((void *)__p + 2);
  unint64_t v62 = *((void *)v89 + 3);
  unint64_t v76 = *(void *)v87;
  unint64_t v75 = *((void *)v87 + 1);
  unint64_t v74 = *((void *)v87 + 2);
  unint64_t v73 = *((void *)v87 + 3);
  unint64_t v72 = *((void *)v87 + 4);
  unint64_t v70 = *((void *)v85 + 1);
  unint64_t v71 = *(void *)v85;
  unint64_t v68 = *((void *)v85 + 3);
  unint64_t v69 = *((void *)v85 + 2);
  unint64_t v67 = *((void *)v85 + 4);
  uint64_t v60 = v31;
  do
  {
    if (v31)
    {
      unint64_t v33 = 0;
      do
      {
        if (v61)
        {
          for (unint64_t i = 0; i != v61; ++i)
          {
            if (v66)
            {
              for (unint64_t j = 0; j != v66; ++j)
              {
                if (v80)
                {
                  for (unint64_t k = 0; k != v80; ++k)
                  {
                    int v37 = *(char *)(a1
                    if (a2)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a2
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                      float v39 = v38;
                    }
                    else
                    {
                      float v39 = 0.0;
                    }
                    if (a3)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a3
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    }
                    else
                    {
                      float v40 = 1.0;
                    }
                    float v41 = (float)v37;
                    if ((float)v37 > 65536.0) {
                      float v41 = 65536.0;
                    }
                    if (v41 < -65536.0) {
                      float v41 = -65536.0;
                    }
                    if (v39 <= 65536.0) {
                      float v42 = v39;
                    }
                    else {
                      float v42 = 65536.0;
                    }
                    if (v42 >= -65536.0) {
                      float v43 = v42;
                    }
                    else {
                      float v43 = -65536.0;
                    }
                    if (v40 > 65536.0) {
                      float v40 = 65536.0;
                    }
                    if (v40 >= -65536.0) {
                      float v44 = v40;
                    }
                    else {
                      float v44 = -65536.0;
                    }
                    float v45 = v29 * v41;
                    float v46 = 0.0;
                    float v47 = 0.0;
                    if (v45 != 0.0)
                    {
                      __e[0] = 0;
                      long double v48 = frexp(v45, __e);
                      double v49 = ldexp(v48, 11);
                      float v47 = ldexp(round(v49), __e[0] - 11);
                    }
                    float v50 = (float)(v43 * a11) + v47;
                    if (v50 != 0.0)
                    {
                      __e[0] = 0;
                      long double v51 = frexp(v50, __e);
                      double v52 = ldexp(v51, 11);
                      float v46 = ldexp(round(v52), __e[0] - 11);
                    }
                    float v53 = 0.0;
                    if ((float)(v44 * v46) != 0.0)
                    {
                      __e[0] = 0;
                      long double v54 = frexp((float)(v44 * v46), __e);
                      double v55 = ldexp(v54, 11);
                      float v53 = ldexp(round(v55), __e[0] - 11);
                    }
                    std::function<float ()(float)>::operator()(a8, v53);
                    if (v56 == INFINITY)
                    {
                      LOBYTE(v57) = -1;
                    }
                    else if (v56 == -INFINITY)
                    {
                      LOBYTE(v57) = 0;
                    }
                    else
                    {
                      int v58 = llroundf(v56);
                      if (v58 >= 255) {
                        int v58 = 255;
                      }
                      int v57 = v58 & ~(v58 >> 31);
                    }
                    *(unsigned char *)(*a9
                  }
                }
              }
            }
          }
        }
        ++v33;
        uint64_t v31 = v60;
      }
      while (v33 != v60);
    }
    ++v30;
  }
  while (v30 != v59);
  v23 = __p;
  if (__p)
  {
LABEL_89:
    v84 = v23;
    operator delete(v23);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
}

void sub_210B2584C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  float v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(void *)(v36 - 208) = v38;
    operator delete(v38);
  }
  float v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(void *)(v36 - 184) = v39;
    operator delete(v39);
  }
  float v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(void *)(v36 - 160) = v40;
    operator delete(v40);
  }
  float v41 = *(void **)a30;
  if (*(void *)a30)
  {
    *(void *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<signed char,MIL::Fp16,MIL::Fp16,signed char,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  if (a11 != 1.0 && a11 != -1.0) {
  if (a2)
  }
  {
    uint64_t v18 = a5[1];
    if (*a5 != v18)
    {
      uint64_t v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5) {
    }
      }
  }
  if (a3)
  {
    uint64_t v20 = a6[1];
    if (*a6 != v20)
    {
      uint64_t v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6) {
    }
      }
  }
  size_t NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<signed char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  unint64_t v24 = v84 - (unsigned char *)__p;
  if (v84 == __p) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v25 = v90 - v89;
  if (v90 == v89) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v26 = v88 - v87;
  if (v88 == v87) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v27 = v86 - v85;
  if (v86 == v85) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  float v28 = 65536.0;
  if (a10 <= 65536.0) {
    float v28 = a10;
  }
  if (v28 >= -65536.0) {
    float v29 = v28;
  }
  else {
    float v29 = -65536.0;
  }
  uint64_t v59 = *(void *)__p;
  if (!*(void *)__p) {
    goto LABEL_91;
  }
  unint64_t v30 = 0;
  uint64_t v31 = *((void *)__p + 1);
  uint64_t v80 = *((void *)__p + 4);
  unint64_t v65 = *(void *)v89;
  uint64_t v66 = *((void *)__p + 3);
  unint64_t v63 = *((void *)v89 + 2);
  unint64_t v64 = *((void *)v89 + 1);
  unint64_t v32 = *((void *)v89 + 4);
  uint64_t v61 = *((void *)__p + 2);
  unint64_t v62 = *((void *)v89 + 3);
  unint64_t v76 = *(void *)v87;
  unint64_t v75 = *((void *)v87 + 1);
  unint64_t v74 = *((void *)v87 + 2);
  unint64_t v73 = *((void *)v87 + 3);
  unint64_t v72 = *((void *)v87 + 4);
  unint64_t v70 = *((void *)v85 + 1);
  unint64_t v71 = *(void *)v85;
  unint64_t v68 = *((void *)v85 + 3);
  unint64_t v69 = *((void *)v85 + 2);
  unint64_t v67 = *((void *)v85 + 4);
  uint64_t v60 = v31;
  do
  {
    if (v31)
    {
      unint64_t v33 = 0;
      do
      {
        if (v61)
        {
          for (unint64_t i = 0; i != v61; ++i)
          {
            if (v66)
            {
              for (unint64_t j = 0; j != v66; ++j)
              {
                if (v80)
                {
                  for (unint64_t k = 0; k != v80; ++k)
                  {
                    int v37 = *(char *)(a1
                    if (a2)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a2
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                      float v39 = v38;
                    }
                    else
                    {
                      float v39 = 0.0;
                    }
                    if (a3)
                    {
                      LOWORD(__e[0]) = *(_WORD *)(a3
                                                + 2
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                    }
                    else
                    {
                      float v40 = 1.0;
                    }
                    float v41 = (float)v37;
                    if ((float)v37 > 65536.0) {
                      float v41 = 65536.0;
                    }
                    if (v41 < -65536.0) {
                      float v41 = -65536.0;
                    }
                    if (v39 <= 65536.0) {
                      float v42 = v39;
                    }
                    else {
                      float v42 = 65536.0;
                    }
                    if (v42 >= -65536.0) {
                      float v43 = v42;
                    }
                    else {
                      float v43 = -65536.0;
                    }
                    if (v40 > 65536.0) {
                      float v40 = 65536.0;
                    }
                    if (v40 >= -65536.0) {
                      float v44 = v40;
                    }
                    else {
                      float v44 = -65536.0;
                    }
                    float v45 = v29 * v41;
                    float v46 = 0.0;
                    float v47 = 0.0;
                    if (v45 != 0.0)
                    {
                      __e[0] = 0;
                      long double v48 = frexp(v45, __e);
                      double v49 = ldexp(v48, 11);
                      float v47 = ldexp(round(v49), __e[0] - 11);
                    }
                    float v50 = (float)(v43 * a11) + v47;
                    if (v50 != 0.0)
                    {
                      __e[0] = 0;
                      long double v51 = frexp(v50, __e);
                      double v52 = ldexp(v51, 11);
                      float v46 = ldexp(round(v52), __e[0] - 11);
                    }
                    float v53 = 0.0;
                    if ((float)(v44 * v46) != 0.0)
                    {
                      __e[0] = 0;
                      long double v54 = frexp((float)(v44 * v46), __e);
                      double v55 = ldexp(v54, 11);
                      float v53 = ldexp(round(v55), __e[0] - 11);
                    }
                    std::function<float ()(float)>::operator()(a8, v53);
                    if (v56 == INFINITY)
                    {
                      char v57 = 127;
                    }
                    else if (v56 == -INFINITY)
                    {
                      char v57 = 0x80;
                    }
                    else
                    {
                      int v58 = llroundf(v56);
                      if (v58 >= 127) {
                        int v58 = 127;
                      }
                      if (v58 <= -128) {
                        char v57 = 0x80;
                      }
                      else {
                        char v57 = v58;
                      }
                    }
                    *(unsigned char *)(*a9
                  }
                }
              }
            }
          }
        }
        ++v33;
        uint64_t v31 = v60;
      }
      while (v33 != v60);
    }
    ++v30;
  }
  while (v30 != v59);
  v23 = __p;
  if (__p)
  {
LABEL_91:
    v84 = v23;
    operator delete(v23);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
}

void sub_210B26018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  float v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(void *)(v36 - 208) = v38;
    operator delete(v38);
  }
  float v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(void *)(v36 - 184) = v39;
    operator delete(v39);
  }
  float v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(void *)(v36 - 160) = v40;
    operator delete(v40);
  }
  float v41 = *(void **)a30;
  if (*(void *)a30)
  {
    *(void *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<signed char,unsigned char,unsigned char,MIL::Fp16,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  if (a11 != 1.0 && a11 != -1.0) {
  if (a2)
  }
  {
    uint64_t v18 = a5[1];
    if (*a5 != v18)
    {
      uint64_t v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5) {
    }
      }
  }
  if (a3)
  {
    uint64_t v20 = a6[1];
    if (*a6 != v20)
    {
      uint64_t v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6) {
    }
      }
  }
  uint64_t NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<MIL::Fp16>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  unint64_t v24 = v84 - (unsigned char *)__p;
  if (v84 == __p) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v25 = v90 - v89;
  if (v90 == v89) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v26 = v88 - v87;
  if (v88 == v87) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v27 = v86 - v85;
  if (v86 == v85) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  float v28 = 65536.0;
  if (a10 <= 65536.0) {
    float v28 = a10;
  }
  if (v28 >= -65536.0) {
    float v29 = v28;
  }
  else {
    float v29 = -65536.0;
  }
  uint64_t v59 = *(void *)__p;
  if (!*(void *)__p) {
    goto LABEL_77;
  }
  unint64_t v30 = 0;
  uint64_t v31 = *((void *)__p + 1);
  uint64_t v80 = *((void *)__p + 4);
  unint64_t v65 = *(void *)v89;
  uint64_t v66 = *((void *)__p + 3);
  unint64_t v63 = *((void *)v89 + 2);
  unint64_t v64 = *((void *)v89 + 1);
  unint64_t v32 = *((void *)v89 + 4);
  uint64_t v61 = *((void *)__p + 2);
  unint64_t v62 = *((void *)v89 + 3);
  unint64_t v76 = *(void *)v87;
  unint64_t v75 = *((void *)v87 + 1);
  unint64_t v74 = *((void *)v87 + 2);
  unint64_t v73 = *((void *)v87 + 3);
  unint64_t v72 = *((void *)v87 + 4);
  unint64_t v70 = *((void *)v85 + 1);
  unint64_t v71 = *(void *)v85;
  unint64_t v68 = *((void *)v85 + 3);
  unint64_t v69 = *((void *)v85 + 2);
  unint64_t v67 = *((void *)v85 + 4);
  uint64_t v60 = v31;
  do
  {
    if (v31)
    {
      unint64_t v33 = 0;
      do
      {
        if (v61)
        {
          for (unint64_t i = 0; i != v61; ++i)
          {
            if (v66)
            {
              for (unint64_t j = 0; j != v66; ++j)
              {
                if (v80)
                {
                  for (unint64_t k = 0; k != v80; ++k)
                  {
                    int v37 = *(char *)(a1
                    if (a2)
                    {
                      LOBYTE(v38) = *(unsigned char *)(a2
                      float v39 = (float)v38;
                    }
                    else
                    {
                      float v39 = 0.0;
                    }
                    if (a3)
                    {
                      LOBYTE(v40) = *(unsigned char *)(a3
                      float v41 = (float)v40;
                    }
                    else
                    {
                      float v41 = 1.0;
                    }
                    float v42 = (float)v37;
                    if ((float)v37 > 65536.0) {
                      float v42 = 65536.0;
                    }
                    if (v42 < -65536.0) {
                      float v42 = -65536.0;
                    }
                    if (v39 <= 65536.0) {
                      float v43 = v39;
                    }
                    else {
                      float v43 = 65536.0;
                    }
                    if (v41 <= 65536.0) {
                      float v44 = v41;
                    }
                    else {
                      float v44 = 65536.0;
                    }
                    float v45 = v29 * v42;
                    float v46 = 0.0;
                    float v47 = 0.0;
                    if (v45 != 0.0)
                    {
                      __e[0] = 0;
                      long double v48 = frexp(v45, __e);
                      double v49 = ldexp(v48, 11);
                      float v47 = ldexp(round(v49), __e[0] - 11);
                    }
                    float v50 = (float)(v43 * a11) + v47;
                    if (v50 != 0.0)
                    {
                      __e[0] = 0;
                      long double v51 = frexp(v50, __e);
                      double v52 = ldexp(v51, 11);
                      float v46 = ldexp(round(v52), __e[0] - 11);
                    }
                    float v53 = 0.0;
                    if ((float)(v44 * v46) != 0.0)
                    {
                      __e[0] = 0;
                      long double v54 = frexp((float)(v44 * v46), __e);
                      double v55 = ldexp(v54, 11);
                      float v53 = ldexp(round(v55), __e[0] - 11);
                    }
                    float v56 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(a8, v53);
                    __int16 v58 = MIL::Fp16::FromFloat(v56, v57);
                    *(_WORD *)(*a9
                             + 2
                  }
                }
              }
            }
          }
        }
        ++v33;
        uint64_t v31 = v60;
      }
      while (v33 != v60);
    }
    ++v30;
  }
  while (v30 != v59);
  v23 = __p;
  if (__p)
  {
LABEL_77:
    v84 = v23;
    operator delete(v23);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (v89)
  {
    v90 = v89;
    operator delete(v89);
  }
}

void sub_210B2677C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  unsigned int v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(void *)(v36 - 208) = v38;
    operator delete(v38);
  }
  float v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(void *)(v36 - 184) = v39;
    operator delete(v39);
  }
  unsigned int v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(void *)(v36 - 160) = v40;
    operator delete(v40);
  }
  float v41 = *(void **)a30;
  if (*(void *)a30)
  {
    *(void *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<signed char,unsigned char,unsigned char,unsigned char,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  if (a11 != 1.0 && a11 != -1.0) {
  if (a2)
  }
  {
    uint64_t v18 = a5[1];
    if (*a5 != v18)
    {
      uint64_t v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5) {
    }
      }
  }
  if (a3)
  {
    uint64_t v20 = a6[1];
    if (*a6 != v20)
    {
      uint64_t v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6) {
    }
      }
  }
  size_t NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<unsigned char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  unint64_t v24 = v83 - (unsigned char *)__p;
  if (v83 == __p) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v25 = v89 - v88;
  if (v89 == v88) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v26 = v87 - v86;
  if (v87 == v86) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v27 = v85 - v84;
  if (v85 == v84) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  float v28 = 65536.0;
  if (a10 <= 65536.0) {
    float v28 = a10;
  }
  if (v28 >= -65536.0) {
    float v29 = v28;
  }
  else {
    float v29 = -65536.0;
  }
  uint64_t v58 = *(void *)__p;
  if (!*(void *)__p) {
    goto LABEL_84;
  }
  unint64_t v30 = 0;
  uint64_t v59 = *((void *)__p + 1);
  uint64_t v60 = *((void *)__p + 2);
  uint64_t v65 = *((void *)__p + 3);
  uint64_t v79 = *((void *)__p + 4);
  unint64_t v64 = *(void *)v88;
  unint64_t v63 = *((void *)v88 + 1);
  unint64_t v62 = *((void *)v88 + 2);
  unint64_t v31 = *((void *)v88 + 4);
  unint64_t v61 = *((void *)v88 + 3);
  unint64_t v74 = *((void *)v86 + 1);
  unint64_t v75 = *(void *)v86;
  unint64_t v72 = *((void *)v86 + 3);
  unint64_t v73 = *((void *)v86 + 2);
  unint64_t v70 = *(void *)v84;
  unint64_t v71 = *((void *)v86 + 4);
  unint64_t v68 = *((void *)v84 + 2);
  unint64_t v69 = *((void *)v84 + 1);
  unint64_t v66 = *((void *)v84 + 4);
  unint64_t v67 = *((void *)v84 + 3);
  do
  {
    if (v59)
    {
      for (unint64_t i = 0; i != v59; ++i)
      {
        if (v60)
        {
          for (unint64_t j = 0; j != v60; ++j)
          {
            if (v65)
            {
              for (unint64_t k = 0; k != v65; ++k)
              {
                if (v79)
                {
                  for (unint64_t m = 0; m != v79; ++m)
                  {
                    int v36 = *(char *)(a1
                    if (a2)
                    {
                      LOBYTE(v37) = *(unsigned char *)(a2
                      float v38 = (float)v37;
                    }
                    else
                    {
                      float v38 = 0.0;
                    }
                    if (a3)
                    {
                      LOBYTE(v39) = *(unsigned char *)(a3
                      float v40 = (float)v39;
                    }
                    else
                    {
                      float v40 = 1.0;
                    }
                    float v41 = (float)v36;
                    if ((float)v36 > 65536.0) {
                      float v41 = 65536.0;
                    }
                    if (v41 < -65536.0) {
                      float v41 = -65536.0;
                    }
                    if (v38 <= 65536.0) {
                      float v42 = v38;
                    }
                    else {
                      float v42 = 65536.0;
                    }
                    if (v40 <= 65536.0) {
                      float v43 = v40;
                    }
                    else {
                      float v43 = 65536.0;
                    }
                    float v44 = v29 * v41;
                    float v45 = 0.0;
                    float v46 = 0.0;
                    if (v44 != 0.0)
                    {
                      __e[0] = 0;
                      long double v47 = frexp(v44, __e);
                      double v48 = ldexp(v47, 11);
                      float v46 = ldexp(round(v48), __e[0] - 11);
                    }
                    float v49 = (float)(v42 * a11) + v46;
                    if (v49 != 0.0)
                    {
                      __e[0] = 0;
                      long double v50 = frexp(v49, __e);
                      double v51 = ldexp(v50, 11);
                      float v45 = ldexp(round(v51), __e[0] - 11);
                    }
                    float v52 = 0.0;
                    if ((float)(v43 * v45) != 0.0)
                    {
                      __e[0] = 0;
                      long double v53 = frexp((float)(v43 * v45), __e);
                      double v54 = ldexp(v53, 11);
                      float v52 = ldexp(round(v54), __e[0] - 11);
                    }
                    std::function<float ()(float)>::operator()(a8, v52);
                    if (v55 == INFINITY)
                    {
                      LOBYTE(v56) = -1;
                    }
                    else if (v55 == -INFINITY)
                    {
                      LOBYTE(v56) = 0;
                    }
                    else
                    {
                      int v57 = llroundf(v55);
                      if (v57 >= 255) {
                        int v57 = 255;
                      }
                      int v56 = v57 & ~(v57 >> 31);
                    }
                    *(unsigned char *)(*a9
                  }
                }
              }
            }
          }
        }
      }
    }
    ++v30;
  }
  while (v30 != v58);
  v23 = __p;
  if (__p)
  {
LABEL_84:
    v83 = v23;
    operator delete(v23);
  }
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
}

void sub_210B26F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  float v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(void *)(v36 - 208) = v38;
    operator delete(v38);
  }
  unsigned int v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(void *)(v36 - 184) = v39;
    operator delete(v39);
  }
  float v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(void *)(v36 - 160) = v40;
    operator delete(v40);
  }
  float v41 = *(void **)a30;
  if (*(void *)a30)
  {
    *(void *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<signed char,unsigned char,unsigned char,signed char,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  if (a11 != 1.0 && a11 != -1.0) {
  if (a2)
  }
  {
    uint64_t v18 = a5[1];
    if (*a5 != v18)
    {
      uint64_t v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5) {
    }
      }
  }
  if (a3)
  {
    uint64_t v20 = a6[1];
    if (*a6 != v20)
    {
      uint64_t v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6) {
    }
      }
  }
  size_t NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<signed char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  unint64_t v24 = v83 - (unsigned char *)__p;
  if (v83 == __p) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v25 = v89 - v88;
  if (v89 == v88) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v26 = v87 - v86;
  if (v87 == v86) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v27 = v85 - v84;
  if (v85 == v84) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  float v28 = 65536.0;
  if (a10 <= 65536.0) {
    float v28 = a10;
  }
  if (v28 >= -65536.0) {
    float v29 = v28;
  }
  else {
    float v29 = -65536.0;
  }
  uint64_t v58 = *(void *)__p;
  if (!*(void *)__p) {
    goto LABEL_86;
  }
  unint64_t v30 = 0;
  uint64_t v59 = *((void *)__p + 1);
  uint64_t v60 = *((void *)__p + 2);
  uint64_t v65 = *((void *)__p + 3);
  uint64_t v79 = *((void *)__p + 4);
  unint64_t v64 = *(void *)v88;
  unint64_t v63 = *((void *)v88 + 1);
  unint64_t v62 = *((void *)v88 + 2);
  unint64_t v31 = *((void *)v88 + 4);
  unint64_t v61 = *((void *)v88 + 3);
  unint64_t v74 = *((void *)v86 + 1);
  unint64_t v75 = *(void *)v86;
  unint64_t v72 = *((void *)v86 + 3);
  unint64_t v73 = *((void *)v86 + 2);
  unint64_t v70 = *(void *)v84;
  unint64_t v71 = *((void *)v86 + 4);
  unint64_t v68 = *((void *)v84 + 2);
  unint64_t v69 = *((void *)v84 + 1);
  unint64_t v66 = *((void *)v84 + 4);
  unint64_t v67 = *((void *)v84 + 3);
  do
  {
    if (v59)
    {
      for (unint64_t i = 0; i != v59; ++i)
      {
        if (v60)
        {
          for (unint64_t j = 0; j != v60; ++j)
          {
            if (v65)
            {
              for (unint64_t k = 0; k != v65; ++k)
              {
                if (v79)
                {
                  for (unint64_t m = 0; m != v79; ++m)
                  {
                    int v36 = *(char *)(a1
                    if (a2)
                    {
                      LOBYTE(v37) = *(unsigned char *)(a2
                      float v38 = (float)v37;
                    }
                    else
                    {
                      float v38 = 0.0;
                    }
                    if (a3)
                    {
                      LOBYTE(v39) = *(unsigned char *)(a3
                      float v40 = (float)v39;
                    }
                    else
                    {
                      float v40 = 1.0;
                    }
                    float v41 = (float)v36;
                    if ((float)v36 > 65536.0) {
                      float v41 = 65536.0;
                    }
                    if (v41 < -65536.0) {
                      float v41 = -65536.0;
                    }
                    if (v38 <= 65536.0) {
                      float v42 = v38;
                    }
                    else {
                      float v42 = 65536.0;
                    }
                    if (v40 <= 65536.0) {
                      float v43 = v40;
                    }
                    else {
                      float v43 = 65536.0;
                    }
                    float v44 = v29 * v41;
                    float v45 = 0.0;
                    float v46 = 0.0;
                    if (v44 != 0.0)
                    {
                      __e[0] = 0;
                      long double v47 = frexp(v44, __e);
                      double v48 = ldexp(v47, 11);
                      float v46 = ldexp(round(v48), __e[0] - 11);
                    }
                    float v49 = (float)(v42 * a11) + v46;
                    if (v49 != 0.0)
                    {
                      __e[0] = 0;
                      long double v50 = frexp(v49, __e);
                      double v51 = ldexp(v50, 11);
                      float v45 = ldexp(round(v51), __e[0] - 11);
                    }
                    float v52 = 0.0;
                    if ((float)(v43 * v45) != 0.0)
                    {
                      __e[0] = 0;
                      long double v53 = frexp((float)(v43 * v45), __e);
                      double v54 = ldexp(v53, 11);
                      float v52 = ldexp(round(v54), __e[0] - 11);
                    }
                    std::function<float ()(float)>::operator()(a8, v52);
                    if (v55 == INFINITY)
                    {
                      char v56 = 127;
                    }
                    else if (v55 == -INFINITY)
                    {
                      char v56 = 0x80;
                    }
                    else
                    {
                      int v57 = llroundf(v55);
                      if (v57 >= 127) {
                        int v57 = 127;
                      }
                      if (v57 <= -128) {
                        char v56 = 0x80;
                      }
                      else {
                        char v56 = v57;
                      }
                    }
                    *(unsigned char *)(*a9
                  }
                }
              }
            }
          }
        }
      }
    }
    ++v30;
  }
  while (v30 != v58);
  v23 = __p;
  if (__p)
  {
LABEL_86:
    v83 = v23;
    operator delete(v23);
  }
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
}

void sub_210B276D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  float v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(void *)(v36 - 208) = v38;
    operator delete(v38);
  }
  unsigned int v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(void *)(v36 - 184) = v39;
    operator delete(v39);
  }
  float v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(void *)(v36 - 160) = v40;
    operator delete(v40);
  }
  float v41 = *(void **)a30;
  if (*(void *)a30)
  {
    *(void *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<signed char,signed char,signed char,MIL::Fp16,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  if (a11 != 1.0 && a11 != -1.0) {
  if (a2)
  }
  {
    uint64_t v18 = a5[1];
    if (*a5 != v18)
    {
      uint64_t v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5) {
    }
      }
  }
  if (a3)
  {
    uint64_t v20 = a6[1];
    if (*a6 != v20)
    {
      uint64_t v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6) {
    }
      }
  }
  uint64_t NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<MIL::Fp16>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  unint64_t v24 = v83 - (unsigned char *)__p;
  if (v83 == __p) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v25 = v89 - v88;
  if (v89 == v88) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v26 = v87 - v86;
  if (v87 == v86) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v27 = v85 - v84;
  if (v85 == v84) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  float v28 = 65536.0;
  if (a10 <= 65536.0) {
    float v28 = a10;
  }
  if (v28 >= -65536.0) {
    float v29 = v28;
  }
  else {
    float v29 = -65536.0;
  }
  uint64_t v58 = *(void *)__p;
  if (!*(void *)__p) {
    goto LABEL_82;
  }
  unint64_t v30 = 0;
  uint64_t v31 = *((void *)__p + 1);
  uint64_t v79 = *((void *)__p + 4);
  unint64_t v64 = *(void *)v88;
  uint64_t v65 = *((void *)__p + 3);
  unint64_t v62 = *((void *)v88 + 2);
  unint64_t v63 = *((void *)v88 + 1);
  unint64_t v32 = *((void *)v88 + 4);
  uint64_t v60 = *((void *)__p + 2);
  unint64_t v61 = *((void *)v88 + 3);
  unint64_t v75 = *(void *)v86;
  unint64_t v74 = *((void *)v86 + 1);
  unint64_t v73 = *((void *)v86 + 2);
  unint64_t v72 = *((void *)v86 + 3);
  unint64_t v71 = *((void *)v86 + 4);
  unint64_t v69 = *((void *)v84 + 1);
  unint64_t v70 = *(void *)v84;
  unint64_t v67 = *((void *)v84 + 3);
  unint64_t v68 = *((void *)v84 + 2);
  unint64_t v66 = *((void *)v84 + 4);
  uint64_t v59 = v31;
  do
  {
    if (v31)
    {
      unint64_t v33 = 0;
      do
      {
        if (v60)
        {
          for (unint64_t i = 0; i != v60; ++i)
          {
            if (v65)
            {
              for (unint64_t j = 0; j != v65; ++j)
              {
                if (v79)
                {
                  for (unint64_t k = 0; k != v79; ++k)
                  {
                    int v37 = *(char *)(a1
                    if (a2) {
                      float v38 = (float)*(char *)(a2
                    }
                    else {
                      float v38 = 0.0;
                    }
                    if (a3) {
                      float v39 = (float)*(char *)(a3
                    }
                    else {
                      float v39 = 1.0;
                    }
                    float v40 = (float)v37;
                    if ((float)v37 > 65536.0) {
                      float v40 = 65536.0;
                    }
                    if (v40 < -65536.0) {
                      float v40 = -65536.0;
                    }
                    if (v38 <= 65536.0) {
                      float v41 = v38;
                    }
                    else {
                      float v41 = 65536.0;
                    }
                    if (v41 >= -65536.0) {
                      float v42 = v41;
                    }
                    else {
                      float v42 = -65536.0;
                    }
                    if (v39 > 65536.0) {
                      float v39 = 65536.0;
                    }
                    if (v39 >= -65536.0) {
                      float v43 = v39;
                    }
                    else {
                      float v43 = -65536.0;
                    }
                    float v44 = v29 * v40;
                    float v45 = 0.0;
                    float v46 = 0.0;
                    if (v44 != 0.0)
                    {
                      __e[0] = 0;
                      long double v47 = frexp(v44, __e);
                      double v48 = ldexp(v47, 11);
                      float v46 = ldexp(round(v48), __e[0] - 11);
                    }
                    float v49 = (float)(v42 * a11) + v46;
                    if (v49 != 0.0)
                    {
                      __e[0] = 0;
                      long double v50 = frexp(v49, __e);
                      double v51 = ldexp(v50, 11);
                      float v45 = ldexp(round(v51), __e[0] - 11);
                    }
                    float v52 = 0.0;
                    if ((float)(v43 * v45) != 0.0)
                    {
                      __e[0] = 0;
                      long double v53 = frexp((float)(v43 * v45), __e);
                      double v54 = ldexp(v53, 11);
                      float v52 = ldexp(round(v54), __e[0] - 11);
                    }
                    float v55 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(a8, v52);
                    __int16 v57 = MIL::Fp16::FromFloat(v55, v56);
                    *(_WORD *)(*a9
                             + 2
                  }
                }
              }
            }
          }
        }
        ++v33;
        uint64_t v31 = v59;
      }
      while (v33 != v59);
    }
    ++v30;
  }
  while (v30 != v58);
  v23 = __p;
  if (__p)
  {
LABEL_82:
    v83 = v23;
    operator delete(v23);
  }
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
}

void sub_210B27E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  float v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(void *)(v36 - 208) = v38;
    operator delete(v38);
  }
  float v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(void *)(v36 - 184) = v39;
    operator delete(v39);
  }
  float v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(void *)(v36 - 160) = v40;
    operator delete(v40);
  }
  float v41 = *(void **)a30;
  if (*(void *)a30)
  {
    *(void *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<signed char,signed char,signed char,unsigned char,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  if (a11 != 1.0 && a11 != -1.0) {
  if (a2)
  }
  {
    uint64_t v18 = a5[1];
    if (*a5 != v18)
    {
      uint64_t v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5) {
    }
      }
  }
  if (a3)
  {
    uint64_t v20 = a6[1];
    if (*a6 != v20)
    {
      uint64_t v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6) {
    }
      }
  }
  size_t NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<unsigned char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  unint64_t v24 = v82 - (unsigned char *)__p;
  if (v82 == __p) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v25 = v88 - v87;
  if (v88 == v87) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v26 = v86 - v85;
  if (v86 == v85) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v27 = v84 - v83;
  if (v84 == v83) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  float v28 = 65536.0;
  if (a10 <= 65536.0) {
    float v28 = a10;
  }
  if (v28 >= -65536.0) {
    float v29 = v28;
  }
  else {
    float v29 = -65536.0;
  }
  uint64_t v57 = *(void *)__p;
  if (!*(void *)__p) {
    goto LABEL_89;
  }
  unint64_t v30 = 0;
  uint64_t v58 = *((void *)__p + 1);
  uint64_t v59 = *((void *)__p + 2);
  uint64_t v64 = *((void *)__p + 3);
  uint64_t v78 = *((void *)__p + 4);
  unint64_t v63 = *(void *)v87;
  unint64_t v62 = *((void *)v87 + 1);
  unint64_t v61 = *((void *)v87 + 2);
  unint64_t v31 = *((void *)v87 + 4);
  unint64_t v60 = *((void *)v87 + 3);
  unint64_t v73 = *((void *)v85 + 1);
  unint64_t v74 = *(void *)v85;
  unint64_t v71 = *((void *)v85 + 3);
  unint64_t v72 = *((void *)v85 + 2);
  unint64_t v69 = *(void *)v83;
  unint64_t v70 = *((void *)v85 + 4);
  unint64_t v67 = *((void *)v83 + 2);
  unint64_t v68 = *((void *)v83 + 1);
  unint64_t v65 = *((void *)v83 + 4);
  unint64_t v66 = *((void *)v83 + 3);
  do
  {
    if (v58)
    {
      for (unint64_t i = 0; i != v58; ++i)
      {
        if (v59)
        {
          for (unint64_t j = 0; j != v59; ++j)
          {
            if (v64)
            {
              for (unint64_t k = 0; k != v64; ++k)
              {
                if (v78)
                {
                  for (unint64_t m = 0; m != v78; ++m)
                  {
                    int v36 = *(char *)(a1
                    if (a2) {
                      float v37 = (float)*(char *)(a2
                    }
                    else {
                      float v37 = 0.0;
                    }
                    if (a3) {
                      float v38 = (float)*(char *)(a3
                    }
                    else {
                      float v38 = 1.0;
                    }
                    float v39 = (float)v36;
                    if ((float)v36 > 65536.0) {
                      float v39 = 65536.0;
                    }
                    if (v39 < -65536.0) {
                      float v39 = -65536.0;
                    }
                    if (v37 <= 65536.0) {
                      float v40 = v37;
                    }
                    else {
                      float v40 = 65536.0;
                    }
                    if (v40 >= -65536.0) {
                      float v41 = v40;
                    }
                    else {
                      float v41 = -65536.0;
                    }
                    if (v38 > 65536.0) {
                      float v38 = 65536.0;
                    }
                    if (v38 >= -65536.0) {
                      float v42 = v38;
                    }
                    else {
                      float v42 = -65536.0;
                    }
                    float v43 = v29 * v39;
                    float v44 = 0.0;
                    float v45 = 0.0;
                    if (v43 != 0.0)
                    {
                      __e[0] = 0;
                      long double v46 = frexp(v43, __e);
                      double v47 = ldexp(v46, 11);
                      float v45 = ldexp(round(v47), __e[0] - 11);
                    }
                    float v48 = (float)(v41 * a11) + v45;
                    if (v48 != 0.0)
                    {
                      __e[0] = 0;
                      long double v49 = frexp(v48, __e);
                      double v50 = ldexp(v49, 11);
                      float v44 = ldexp(round(v50), __e[0] - 11);
                    }
                    float v51 = 0.0;
                    if ((float)(v42 * v44) != 0.0)
                    {
                      __e[0] = 0;
                      long double v52 = frexp((float)(v42 * v44), __e);
                      double v53 = ldexp(v52, 11);
                      float v51 = ldexp(round(v53), __e[0] - 11);
                    }
                    std::function<float ()(float)>::operator()(a8, v51);
                    if (v54 == INFINITY)
                    {
                      LOBYTE(v55) = -1;
                    }
                    else if (v54 == -INFINITY)
                    {
                      LOBYTE(v55) = 0;
                    }
                    else
                    {
                      int v56 = llroundf(v54);
                      if (v56 >= 255) {
                        int v56 = 255;
                      }
                      int v55 = v56 & ~(v56 >> 31);
                    }
                    *(unsigned char *)(*a9
                  }
                }
              }
            }
          }
        }
      }
    }
    ++v30;
  }
  while (v30 != v57);
  v23 = __p;
  if (__p)
  {
LABEL_89:
    v82 = v23;
    operator delete(v23);
  }
  if (v83)
  {
    v84 = v83;
    operator delete(v83);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
}

void sub_210B28608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  float v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(void *)(v36 - 208) = v38;
    operator delete(v38);
  }
  float v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(void *)(v36 - 184) = v39;
    operator delete(v39);
  }
  float v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(void *)(v36 - 160) = v40;
    operator delete(v40);
  }
  float v41 = *(void **)a30;
  if (*(void *)a30)
  {
    *(void *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<signed char,signed char,signed char,signed char,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::PeElementWiseFunc)0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t **a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, float a10@<S0>, float a11@<S1>)
{
  if (a11 != 1.0 && a11 != -1.0) {
  if (a2)
  }
  {
    uint64_t v18 = a5[1];
    if (*a5 != v18)
    {
      uint64_t v19 = a4[1];
      if (*a4 != v19 && v19 - *a4 != v18 - *a5) {
    }
      }
  }
  if (a3)
  {
    uint64_t v20 = a6[1];
    if (*a6 != v20)
    {
      uint64_t v21 = a4[1];
      if (*a4 != v21 && v21 - *a4 != v20 - *a6) {
    }
      }
  }
  size_t NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(a7);
  std::vector<signed char>::vector(a9, NumberOfElementsFromStaticTensorShape);
  v23 = __p;
  unint64_t v24 = v82 - (unsigned char *)__p;
  if (v82 == __p) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v25 = v88 - v87;
  if (v88 == v87) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v25 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v26 = v86 - v85;
  if (v86 == v85) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v26 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v27 = v84 - v83;
  if (v84 == v83) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x18) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 0x20) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  float v28 = 65536.0;
  if (a10 <= 65536.0) {
    float v28 = a10;
  }
  if (v28 >= -65536.0) {
    float v29 = v28;
  }
  else {
    float v29 = -65536.0;
  }
  uint64_t v57 = *(void *)__p;
  if (!*(void *)__p) {
    goto LABEL_91;
  }
  unint64_t v30 = 0;
  uint64_t v58 = *((void *)__p + 1);
  uint64_t v59 = *((void *)__p + 2);
  uint64_t v64 = *((void *)__p + 3);
  uint64_t v78 = *((void *)__p + 4);
  unint64_t v63 = *(void *)v87;
  unint64_t v62 = *((void *)v87 + 1);
  unint64_t v61 = *((void *)v87 + 2);
  unint64_t v31 = *((void *)v87 + 4);
  unint64_t v60 = *((void *)v87 + 3);
  unint64_t v73 = *((void *)v85 + 1);
  unint64_t v74 = *(void *)v85;
  unint64_t v71 = *((void *)v85 + 3);
  unint64_t v72 = *((void *)v85 + 2);
  unint64_t v69 = *(void *)v83;
  unint64_t v70 = *((void *)v85 + 4);
  unint64_t v67 = *((void *)v83 + 2);
  unint64_t v68 = *((void *)v83 + 1);
  unint64_t v65 = *((void *)v83 + 4);
  unint64_t v66 = *((void *)v83 + 3);
  do
  {
    if (v58)
    {
      for (unint64_t i = 0; i != v58; ++i)
      {
        if (v59)
        {
          for (unint64_t j = 0; j != v59; ++j)
          {
            if (v64)
            {
              for (unint64_t k = 0; k != v64; ++k)
              {
                if (v78)
                {
                  for (unint64_t m = 0; m != v78; ++m)
                  {
                    int v36 = *(char *)(a1
                    if (a2) {
                      float v37 = (float)*(char *)(a2
                    }
                    else {
                      float v37 = 0.0;
                    }
                    if (a3) {
                      float v38 = (float)*(char *)(a3
                    }
                    else {
                      float v38 = 1.0;
                    }
                    float v39 = (float)v36;
                    if ((float)v36 > 65536.0) {
                      float v39 = 65536.0;
                    }
                    if (v39 < -65536.0) {
                      float v39 = -65536.0;
                    }
                    if (v37 <= 65536.0) {
                      float v40 = v37;
                    }
                    else {
                      float v40 = 65536.0;
                    }
                    if (v40 >= -65536.0) {
                      float v41 = v40;
                    }
                    else {
                      float v41 = -65536.0;
                    }
                    if (v38 > 65536.0) {
                      float v38 = 65536.0;
                    }
                    if (v38 >= -65536.0) {
                      float v42 = v38;
                    }
                    else {
                      float v42 = -65536.0;
                    }
                    float v43 = v29 * v39;
                    float v44 = 0.0;
                    float v45 = 0.0;
                    if (v43 != 0.0)
                    {
                      __e[0] = 0;
                      long double v46 = frexp(v43, __e);
                      double v47 = ldexp(v46, 11);
                      float v45 = ldexp(round(v47), __e[0] - 11);
                    }
                    float v48 = (float)(v41 * a11) + v45;
                    if (v48 != 0.0)
                    {
                      __e[0] = 0;
                      long double v49 = frexp(v48, __e);
                      double v50 = ldexp(v49, 11);
                      float v44 = ldexp(round(v50), __e[0] - 11);
                    }
                    float v51 = 0.0;
                    if ((float)(v42 * v44) != 0.0)
                    {
                      __e[0] = 0;
                      long double v52 = frexp((float)(v42 * v44), __e);
                      double v53 = ldexp(v52, 11);
                      float v51 = ldexp(round(v53), __e[0] - 11);
                    }
                    std::function<float ()(float)>::operator()(a8, v51);
                    if (v54 == INFINITY)
                    {
                      char v55 = 127;
                    }
                    else if (v54 == -INFINITY)
                    {
                      char v55 = 0x80;
                    }
                    else
                    {
                      int v56 = llroundf(v54);
                      if (v56 >= 127) {
                        int v56 = 127;
                      }
                      if (v56 <= -128) {
                        char v55 = 0x80;
                      }
                      else {
                        char v55 = v56;
                      }
                    }
                    *(unsigned char *)(*a9
                  }
                }
              }
            }
          }
        }
      }
    }
    ++v30;
  }
  while (v30 != v57);
  v23 = __p;
  if (__p)
  {
LABEL_91:
    v82 = v23;
    operator delete(v23);
  }
  if (v83)
  {
    v84 = v83;
    operator delete(v83);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
}

void sub_210B28DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  float v38 = *(void **)(v36 - 216);
  if (v38)
  {
    *(void *)(v36 - 208) = v38;
    operator delete(v38);
  }
  float v39 = *(void **)(v36 - 192);
  if (v39)
  {
    *(void *)(v36 - 184) = v39;
    operator delete(v39);
  }
  float v40 = *(void **)(v36 - 168);
  if (v40)
  {
    *(void *)(v36 - 160) = v40;
    operator delete(v40);
  }
  float v41 = *(void **)a30;
  if (*(void *)a30)
  {
    *(void *)(a30 + 8) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(exception_object);
}

void ANEMachineIR::Validators::PeElementWiseBinaryParamValues::~PeElementWiseBinaryParamValues(void **this)
{
  if (*((unsigned char *)this + 128) && *((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  if (*((unsigned char *)this + 80))
  {
    v2 = this[7];
    if (v2)
    {
      this[8] = v2;
      operator delete(v2);
    }
  }
  if (*((unsigned char *)this + 48))
  {
    if (*((char *)this + 47) < 0) {
      operator delete(this[3]);
    }
  }
}

void MIL::ANEMachineIR::Interpreter::PeAddCpu::Run(ANEMachineIR::Validators *a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v281 = *MEMORY[0x263EF8340];
  uint64_t v6 = (*(uint64_t (**)(ANEMachineIR::Validators *))(*(void *)a1 + 56))(a1);
  int v7 = *(char *)(v6 + 23);
  if (v7 < 0)
  {
    if (*(void *)(v6 + 8) != 6) {
      goto LABEL_10;
    }
    uint64_t v6 = *(void *)v6;
  }
  else if (v7 != 6)
  {
    goto LABEL_10;
  }
  if (*(_DWORD *)v6 != 1633641840 || *(_WORD *)(v6 + 4) != 25700)
  {
LABEL_10:
    *(_DWORD *)a3 = 1;
    uint64_t v9 = a3 + 8;
    v10 = (std::string *)std::string::basic_string[abi:ne180100]<0>(v279, "pe_add");
    float v11 = std::string::insert(v10, 0, "Expected ");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v235.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v235.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = std::string::append(&v235, " op. Got ");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v237.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v237.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    uint64_t v15 = (*(uint64_t (**)(ANEMachineIR::Validators *))(*(void *)a1 + 56))(a1);
    int v16 = *(char *)(v15 + 23);
    if (v16 >= 0) {
      v17 = (const std::string::value_type *)v15;
    }
    else {
      v17 = *(const std::string::value_type **)v15;
    }
    if (v16 >= 0) {
      std::string::size_type v18 = *(unsigned __int8 *)(v15 + 23);
    }
    else {
      std::string::size_type v18 = *(void *)(v15 + 8);
    }
    uint64_t v19 = std::string::append(&v237, v17, v18);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    *(void *)(v9 + 16) = *((void *)&v19->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v9 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v237.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v235.__r_.__value_.__l.__data_);
    }
    if (v280 < 0)
    {
      uint64_t v21 = (void *)v279[0];
LABEL_22:
      operator delete(v21);
      return;
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v237, "x");
  uint64_t InterpretedTensorValue = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&v237);
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v237.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v237, "y");
  uint64_t v23 = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&v237);
  if ((SHIBYTE(v237.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (InterpretedTensorValue) {
      goto LABEL_28;
    }
LABEL_33:
    *(_DWORD *)a3 = 2;
    std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), "No value for x");
    return;
  }
  operator delete(v237.__r_.__value_.__l.__data_);
  if (!InterpretedTensorValue) {
    goto LABEL_33;
  }
LABEL_28:
  if (!v23)
  {
    *(_DWORD *)a3 = 2;
    std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), "No value for y");
    return;
  }
  v237.__r_.__value_.__s.__data_[0] = 0;
  v237.__r_.__value_.__s.__data_[4] = 0;
  v237.__r_.__value_.__s.__data_[8] = 0;
  v237.__r_.__value_.__s.__data_[12] = 0;
  v237.__r_.__value_.__s.__data_[16] = 0;
  v237.__r_.__value_.__s.__data_[18] = 0;
  LOBYTE(v238) = 0;
  char v240 = 0;
  LOBYTE(v241) = 0;
  char v243 = 0;
  char v244 = 0;
  char v245 = 0;
  char v246 = 0;
  char v247 = 0;
  LOBYTE(__p) = 0;
  char v250 = 0;
  ANEMachineIR::Validators::ParsePeElementWiseBinaryParamValues(a1, (const MIL::IROperation *)&v237, (MIL::ValidationResult *)&v235);
  if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v235) & 1) == 0)
  {
    *(_DWORD *)a3 = 3;
    MIL::MILResult::GetMessageWithLocation((MIL::MILResult *)&v235);
    MEMORY[0x21667B360](&v235);
    goto LABEL_36;
  }
  MEMORY[0x21667B360](&v235);
  if (v240)
  {
    *(_DWORD *)a3 = 5;
    std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), "Unimplemented 'reduction': rdar://86732114");
    goto LABEL_36;
  }
  *(_OWORD *)&v235.__r_.__value_.__r.__words[1] = 0uLL;
  uint64_t v236 = 0;
  MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction((uint64_t)a1, (uint64_t)&v235, (uint64_t)v279);
  if (!LODWORD(v235.__r_.__value_.__l.__data_))
  {
    uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)InterpretedTensorValue + 32))(InterpretedTensorValue);
    int v25 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 88))(v24);
    uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 32))(v23);
    int v27 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 88))(v26);
    OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
    uint64_t v29 = MIL::IRValueType::AsTensorType(OutputType);
    int v30 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 88))(v29);
    unint64_t v31 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(void *)InterpretedTensorValue + 32))(InterpretedTensorValue);
    ANEMachineIR::Utils::GetStaticTensorShape(v31, v32, (uint64_t)v234);
    unint64_t v33 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(void *)v23 + 32))(v23);
    ANEMachineIR::Utils::GetStaticTensorShape(v33, v34, (uint64_t)v233);
    v35 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
    uint64_t v36 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v35);
    ANEMachineIR::Utils::GetStaticTensorShape(v36, v37, (uint64_t)v232);
    switch(v25)
    {
      case 4:
        switch(v27)
        {
          case 14:
            switch(v30)
            {
              case 14:
                uint64_t v200 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                uint64_t Data = MIL::IRTensorValue::GetDataView<unsigned char>();
                v228 = 0;
                v229 = 0;
                uint64_t v230 = 0;
                float v202 = *(float *)&v237.__r_.__value_.__l.__data_;
                float v203 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v274, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v274);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v204 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v205 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v205);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v204, (uint64_t *)&v251);
                v206 = v251;
                v251 = 0;
                if (v206) {
                  (*((void (**)(void **))*v206 + 1))(v206);
                }
                goto LABEL_197;
              case 9:
                uint64_t v158 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                uint64_t v159 = MIL::IRTensorValue::GetDataView<unsigned char>();
                v228 = 0;
                v229 = 0;
                uint64_t v230 = 0;
                float v160 = *(float *)&v237.__r_.__value_.__l.__data_;
                float v161 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v273, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v273);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v162 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v163 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v163);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v162, (uint64_t *)&v251);
                v164 = v251;
                v251 = 0;
                if (v164) {
                  (*((void (**)(void **))*v164 + 1))(v164);
                }
                goto LABEL_197;
              case 4:
                uint64_t v88 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                uint64_t v89 = MIL::IRTensorValue::GetDataView<unsigned char>();
                v228 = 0;
                v229 = 0;
                uint64_t v230 = 0;
                float v90 = *(float *)&v237.__r_.__value_.__l.__data_;
                float v91 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v275, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v275);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v92 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v93 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v93);
                MIL::IRTensorValueType::MakeFloat16Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v92, (uint64_t *)&v251);
                v94 = v251;
                v251 = 0;
                if (v94) {
                  (*((void (**)(void **))*v94 + 1))(v94);
                }
                goto LABEL_197;
            }
            goto LABEL_124;
          case 9:
            switch(v30)
            {
              case 14:
                uint64_t v151 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                uint64_t v152 = MIL::IRTensorValue::GetDataView<signed char>();
                v228 = 0;
                v229 = 0;
                uint64_t v230 = 0;
                float v153 = *(float *)&v237.__r_.__value_.__l.__data_;
                float v154 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v271, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v271);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v155 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v156 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v156);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v155, (uint64_t *)&v251);
                v157 = v251;
                v251 = 0;
                if (v157) {
                  (*((void (**)(void **))*v157 + 1))(v157);
                }
                goto LABEL_197;
              case 9:
                uint64_t v123 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                uint64_t v124 = MIL::IRTensorValue::GetDataView<signed char>();
                v228 = 0;
                v229 = 0;
                uint64_t v230 = 0;
                float v125 = *(float *)&v237.__r_.__value_.__l.__data_;
                float v126 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v270, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v270);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v127 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v128 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v128);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v127, (uint64_t *)&v251);
                v129 = v251;
                v251 = 0;
                if (v129) {
                  (*((void (**)(void **))*v129 + 1))(v129);
                }
                goto LABEL_197;
              case 4:
                uint64_t v74 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                uint64_t v75 = MIL::IRTensorValue::GetDataView<signed char>();
                v228 = 0;
                v229 = 0;
                uint64_t v230 = 0;
                float v76 = *(float *)&v237.__r_.__value_.__l.__data_;
                float v77 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v272, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v272);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                uint64_t v78 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                uint64_t v79 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v79);
                MIL::IRTensorValueType::MakeFloat16Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v78, (uint64_t *)&v251);
                uint64_t v80 = v251;
                v251 = 0;
                if (v80) {
                  (*((void (**)(void **))*v80 + 1))(v80);
                }
                goto LABEL_197;
            }
            goto LABEL_124;
          case 4:
            switch(v30)
            {
              case 14:
                uint64_t v207 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                uint64_t v208 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                v228 = 0;
                v229 = 0;
                uint64_t v230 = 0;
                float v209 = *(float *)&v237.__r_.__value_.__l.__data_;
                float v210 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v277, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v277);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v211 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v212 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v212);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v211, (uint64_t *)&v251);
                v213 = v251;
                v251 = 0;
                if (v213) {
                  (*((void (**)(void **))*v213 + 1))(v213);
                }
                goto LABEL_197;
              case 9:
                uint64_t v172 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                uint64_t v173 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                v228 = 0;
                v229 = 0;
                uint64_t v230 = 0;
                float v174 = *(float *)&v237.__r_.__value_.__l.__data_;
                float v175 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v276, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v276);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v176 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v177 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v177);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v176, (uint64_t *)&v251);
                v178 = v251;
                v251 = 0;
                if (v178) {
                  (*((void (**)(void **))*v178 + 1))(v178);
                }
                goto LABEL_197;
              case 4:
                uint64_t v52 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                uint64_t v53 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                v228 = 0;
                v229 = 0;
                uint64_t v230 = 0;
                float v54 = *(float *)&v237.__r_.__value_.__l.__data_;
                float v55 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v278, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v278);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                int v56 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                uint64_t v57 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v57);
                MIL::IRTensorValueType::MakeFloat16Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v56, (uint64_t *)&v251);
                uint64_t v58 = v251;
                v251 = 0;
                if (v58) {
                  (*((void (**)(void **))*v58 + 1))(v58);
                }
                goto LABEL_197;
            }
            goto LABEL_124;
        }
        break;
      case 9:
        switch(v27)
        {
          case 14:
            switch(v30)
            {
              case 14:
                uint64_t v144 = MIL::IRTensorValue::GetDataView<signed char>();
                uint64_t v145 = MIL::IRTensorValue::GetDataView<unsigned char>();
                v228 = 0;
                v229 = 0;
                uint64_t v230 = 0;
                float v146 = *(float *)&v237.__r_.__value_.__l.__data_;
                float v147 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v256, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v256);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v148 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v149 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v149);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v148, (uint64_t *)&v251);
                v150 = v251;
                v251 = 0;
                if (v150) {
                  (*((void (**)(void **))*v150 + 1))(v150);
                }
                goto LABEL_197;
              case 9:
                uint64_t v116 = MIL::IRTensorValue::GetDataView<signed char>();
                uint64_t v117 = MIL::IRTensorValue::GetDataView<unsigned char>();
                v228 = 0;
                v229 = 0;
                uint64_t v230 = 0;
                float v118 = *(float *)&v237.__r_.__value_.__l.__data_;
                float v119 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v255, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v255);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v120 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v121 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v121);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v120, (uint64_t *)&v251);
                v122 = v251;
                v251 = 0;
                if (v122) {
                  (*((void (**)(void **))*v122 + 1))(v122);
                }
                goto LABEL_197;
              case 4:
                uint64_t v67 = MIL::IRTensorValue::GetDataView<signed char>();
                uint64_t v68 = MIL::IRTensorValue::GetDataView<unsigned char>();
                v228 = 0;
                v229 = 0;
                uint64_t v230 = 0;
                float v69 = *(float *)&v237.__r_.__value_.__l.__data_;
                float v70 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v257, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v257);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                unint64_t v71 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                unint64_t v72 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v72);
                MIL::IRTensorValueType::MakeFloat16Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v71, (uint64_t *)&v251);
                unint64_t v73 = v251;
                v251 = 0;
                if (v73) {
                  (*((void (**)(void **))*v73 + 1))(v73);
                }
                goto LABEL_197;
            }
            goto LABEL_124;
          case 9:
            switch(v30)
            {
              case 14:
                uint64_t v109 = MIL::IRTensorValue::GetDataView<signed char>();
                uint64_t v110 = MIL::IRTensorValue::GetDataView<signed char>();
                v228 = 0;
                v229 = 0;
                uint64_t v230 = 0;
                float v111 = *(float *)&v237.__r_.__value_.__l.__data_;
                float v112 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v253, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v253);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v113 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v114 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v114);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v113, (uint64_t *)&v251);
                v115 = v251;
                v251 = 0;
                if (v115) {
                  (*((void (**)(void **))*v115 + 1))(v115);
                }
                goto LABEL_197;
              case 9:
                uint64_t v102 = MIL::IRTensorValue::GetDataView<signed char>();
                uint64_t v103 = MIL::IRTensorValue::GetDataView<signed char>();
                v228 = 0;
                v229 = 0;
                uint64_t v230 = 0;
                float v104 = *(float *)&v237.__r_.__value_.__l.__data_;
                float v105 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v252, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v252);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v106 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v107 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v107);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v106, (uint64_t *)&v251);
                v108 = v251;
                v251 = 0;
                if (v108) {
                  (*((void (**)(void **))*v108 + 1))(v108);
                }
                goto LABEL_197;
              case 4:
                uint64_t v60 = MIL::IRTensorValue::GetDataView<signed char>();
                uint64_t v61 = MIL::IRTensorValue::GetDataView<signed char>();
                v228 = 0;
                v229 = 0;
                uint64_t v230 = 0;
                float v62 = *(float *)&v237.__r_.__value_.__l.__data_;
                float v63 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v254, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v254);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                uint64_t v64 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                unint64_t v65 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v65);
                MIL::IRTensorValueType::MakeFloat16Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v64, (uint64_t *)&v251);
                unint64_t v66 = v251;
                v251 = 0;
                if (v66) {
                  (*((void (**)(void **))*v66 + 1))(v66);
                }
                goto LABEL_197;
            }
            goto LABEL_124;
          case 4:
            switch(v30)
            {
              case 14:
                uint64_t v165 = MIL::IRTensorValue::GetDataView<signed char>();
                uint64_t v166 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                v228 = 0;
                v229 = 0;
                uint64_t v230 = 0;
                float v167 = *(float *)&v237.__r_.__value_.__l.__data_;
                float v168 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v259, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v259);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v169 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v170 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v170);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v169, (uint64_t *)&v251);
                v171 = v251;
                v251 = 0;
                if (v171) {
                  (*((void (**)(void **))*v171 + 1))(v171);
                }
                goto LABEL_197;
              case 9:
                uint64_t v130 = MIL::IRTensorValue::GetDataView<signed char>();
                uint64_t v131 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                v228 = 0;
                v229 = 0;
                uint64_t v230 = 0;
                float v132 = *(float *)&v237.__r_.__value_.__l.__data_;
                float v133 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v258, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v258);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v134 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v135 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v135);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v134, (uint64_t *)&v251);
                v136 = v251;
                v251 = 0;
                if (v136) {
                  (*((void (**)(void **))*v136 + 1))(v136);
                }
                goto LABEL_197;
              case 4:
                uint64_t v45 = MIL::IRTensorValue::GetDataView<signed char>();
                uint64_t v46 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                v228 = 0;
                v229 = 0;
                uint64_t v230 = 0;
                float v47 = *(float *)&v237.__r_.__value_.__l.__data_;
                float v48 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v260, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v260);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                long double v49 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                double v50 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v50);
                MIL::IRTensorValueType::MakeFloat16Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v49, (uint64_t *)&v251);
                float v51 = v251;
                v251 = 0;
                if (v51) {
                  (*((void (**)(void **))*v51 + 1))(v51);
                }
                goto LABEL_197;
            }
            goto LABEL_124;
        }
        break;
      case 14:
        switch(v27)
        {
          case 14:
            switch(v30)
            {
              case 14:
                uint64_t v214 = MIL::IRTensorValue::GetDataView<unsigned char>();
                uint64_t v215 = MIL::IRTensorValue::GetDataView<unsigned char>();
                v228 = 0;
                v229 = 0;
                uint64_t v230 = 0;
                float v216 = *(float *)&v237.__r_.__value_.__l.__data_;
                float v217 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v265, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v265);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v218 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v219 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v219);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v218, (uint64_t *)&v251);
                v220 = v251;
                v251 = 0;
                if (v220) {
                  (*((void (**)(void **))*v220 + 1))(v220);
                }
                goto LABEL_197;
              case 9:
                uint64_t v186 = MIL::IRTensorValue::GetDataView<unsigned char>();
                uint64_t v187 = MIL::IRTensorValue::GetDataView<unsigned char>();
                v228 = 0;
                v229 = 0;
                uint64_t v230 = 0;
                float v188 = *(float *)&v237.__r_.__value_.__l.__data_;
                float v189 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v264, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v264);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v190 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v191 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v191);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v190, (uint64_t *)&v251);
                v192 = v251;
                v251 = 0;
                if (v192) {
                  (*((void (**)(void **))*v192 + 1))(v192);
                }
                goto LABEL_197;
              case 4:
                uint64_t v95 = MIL::IRTensorValue::GetDataView<unsigned char>();
                uint64_t v96 = MIL::IRTensorValue::GetDataView<unsigned char>();
                v228 = 0;
                v229 = 0;
                uint64_t v230 = 0;
                float v97 = *(float *)&v237.__r_.__value_.__l.__data_;
                float v98 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v266, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v266);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v99 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v100 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v100);
                MIL::IRTensorValueType::MakeFloat16Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v99, (uint64_t *)&v251);
                v101 = v251;
                v251 = 0;
                if (v101) {
                  (*((void (**)(void **))*v101 + 1))(v101);
                }
                goto LABEL_197;
            }
            break;
          case 9:
            switch(v30)
            {
              case 14:
                uint64_t v179 = MIL::IRTensorValue::GetDataView<unsigned char>();
                uint64_t v180 = MIL::IRTensorValue::GetDataView<signed char>();
                v228 = 0;
                v229 = 0;
                uint64_t v230 = 0;
                float v181 = *(float *)&v237.__r_.__value_.__l.__data_;
                float v182 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v262, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v262);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v183 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v184 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v184);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v183, (uint64_t *)&v251);
                v185 = v251;
                v251 = 0;
                if (v185) {
                  (*((void (**)(void **))*v185 + 1))(v185);
                }
                goto LABEL_197;
              case 9:
                uint64_t v137 = MIL::IRTensorValue::GetDataView<unsigned char>();
                uint64_t v138 = MIL::IRTensorValue::GetDataView<signed char>();
                v228 = 0;
                v229 = 0;
                uint64_t v230 = 0;
                float v139 = *(float *)&v237.__r_.__value_.__l.__data_;
                float v140 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v261, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v261);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v141 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v142 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v142);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v141, (uint64_t *)&v251);
                v143 = v251;
                v251 = 0;
                if (v143) {
                  (*((void (**)(void **))*v143 + 1))(v143);
                }
                goto LABEL_197;
              case 4:
                uint64_t v81 = MIL::IRTensorValue::GetDataView<unsigned char>();
                uint64_t v82 = MIL::IRTensorValue::GetDataView<signed char>();
                v228 = 0;
                v229 = 0;
                uint64_t v230 = 0;
                float v83 = *(float *)&v237.__r_.__value_.__l.__data_;
                float v84 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v263, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v263);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v85 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v86 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v86);
                MIL::IRTensorValueType::MakeFloat16Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v85, (uint64_t *)&v251);
                v87 = v251;
                v251 = 0;
                if (v87) {
                  (*((void (**)(void **))*v87 + 1))(v87);
                }
                goto LABEL_197;
            }
            break;
          case 4:
            switch(v30)
            {
              case 14:
                uint64_t v221 = MIL::IRTensorValue::GetDataView<unsigned char>();
                uint64_t v222 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                v228 = 0;
                v229 = 0;
                uint64_t v230 = 0;
                float v223 = *(float *)&v237.__r_.__value_.__l.__data_;
                float v224 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v268, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v268);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v225 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v226 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v226);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v225, (uint64_t *)&v251);
                v227 = v251;
                v251 = 0;
                if (v227) {
                  (*((void (**)(void **))*v227 + 1))(v227);
                }
                goto LABEL_197;
              case 9:
                uint64_t v193 = MIL::IRTensorValue::GetDataView<unsigned char>();
                uint64_t v194 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                v228 = 0;
                v229 = 0;
                uint64_t v230 = 0;
                float v195 = *(float *)&v237.__r_.__value_.__l.__data_;
                float v196 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v267, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v267);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                v197 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                v198 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v198);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v197, (uint64_t *)&v251);
                v199 = v251;
                v251 = 0;
                if (v199) {
                  (*((void (**)(void **))*v199 + 1))(v199);
                }
                goto LABEL_197;
              case 4:
                uint64_t v38 = MIL::IRTensorValue::GetDataView<unsigned char>();
                uint64_t v39 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                v228 = 0;
                v229 = 0;
                uint64_t v230 = 0;
                float v40 = *(float *)&v237.__r_.__value_.__l.__data_;
                float v41 = *(float *)&v237.__r_.__value_.__r.__words[1];
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v269, (uint64_t)v279);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v269);
                (*(void (**)(unsigned __int8 **__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(&v228, a1);
                float v42 = v228;
                if (v229 == v228) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                float v43 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v43);
                MIL::IRTensorValueType::MakeFloat16Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v42, (uint64_t *)&v251);
                float v44 = v251;
                v251 = 0;
                if (v44) {
                  (*((void (**)(void **))*v44 + 1))(v44);
                }
LABEL_197:
                v251 = (void **)&v228;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v251);
                *(_DWORD *)a3 = 0;
                std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), (char *)&unk_210C6BFE7);
                if (v231[0])
                {
                  v231[1] = v231[0];
                  operator delete(v231[0]);
                }
                goto LABEL_199;
            }
            break;
          default:
            goto LABEL_81;
        }
LABEL_124:
        uint64_t v59 = "Unimplemented output dtype";
        goto LABEL_125;
      default:
        uint64_t v59 = "Unimplemented x dtype";
LABEL_125:
        *(_DWORD *)a3 = 3;
        std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), v59);
LABEL_199:
        if (v232[0])
        {
          v232[1] = v232[0];
          operator delete(v232[0]);
        }
        if (v233[0])
        {
          v233[1] = v233[0];
          operator delete(v233[0]);
        }
        if (v234[0])
        {
          v234[1] = v234[0];
          operator delete(v234[0]);
        }
        goto LABEL_205;
    }
LABEL_81:
    uint64_t v59 = "Unimplemented y dtype";
    goto LABEL_125;
  }
  *(_DWORD *)a3 = v235.__r_.__value_.__l.__data_;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)&v235.__r_.__value_.__r.__words[1];
  *(void *)(a3 + 24) = v236;
  *(_OWORD *)&v235.__r_.__value_.__r.__words[1] = 0uLL;
  uint64_t v236 = 0;
LABEL_205:
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v279);
  if (SHIBYTE(v236) < 0) {
    operator delete((void *)v235.__r_.__value_.__l.__size_);
  }
LABEL_36:
  if (v250 && v249 < 0) {
    operator delete(__p);
  }
  if (v243 && v241)
  {
    v242 = v241;
    operator delete(v241);
  }
  if (v240 && v239 < 0)
  {
    uint64_t v21 = v238;
    goto LABEL_22;
  }
}

void sub_210B2B668(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  if (__p) {
    operator delete(__p);
  }
  if (a2 == 1)
  {
    float v40 = __cxa_begin_catch(a1);
    *(_DWORD *)uint64_t v36 = 4;
    float v41 = (char *)(*(uint64_t (**)(void *))(*(void *)v40 + 16))(v40);
    std::string::basic_string[abi:ne180100]<0>((void *)(v36 + 8), v41);
    __cxa_end_catch();
    JUMPOUT(0x210B2B4D4);
  }
  if (a16) {
    operator delete(a16);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a22) {
    operator delete(a22);
  }
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100]((void *)(v37 - 136));
  if (a31 < 0) {
    operator delete(a26);
  }
  ANEMachineIR::Validators::PeElementWiseBinaryParamValues::~PeElementWiseBinaryParamValues(&a36);
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::PeAddCpu::~PeAddCpu(MIL::ANEMachineIR::Interpreter::PeAddCpu *this)
{
}

void MIL::ANEMachineIR::Interpreter::PeMulCpu::~PeMulCpu(MIL::ANEMachineIR::Interpreter::PeMulCpu *this)
{
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_26418A7C8, MEMORY[0x263F8C060]);
}

void sub_210B2D060(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_26418A7D0, MEMORY[0x263F8C068]);
}

void sub_210B2D124(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

void *std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](void *a1)
{
  v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *MIL::ANEMachineIR::Interpreter::anonymous namespace'::promote_shape_to_5d@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  v3 = *(const void **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = v4 - *(void *)a1;
  if (v5 >= 0x29) {
  *a2 = 0;
  }
  a2[1] = 0;
  a2[2] = 0;
  result = std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(a2, v3, v4, v5 >> 3);
  switch((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3)
  {
    case 0:
      uint64_t v8 = *a2;
      int64x2_t __src = (int64x2_t)xmmword_210C57A78;
      long long v14 = unk_210C57A88;
      uint64_t v15 = 1;
      result = std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a2, v8, __src.i8, (char *)&v16, 5);
      break;
    case 1:
      uint64_t v12 = *a2;
      int64x2_t __src = (int64x2_t)xmmword_210C57A58;
      long long v14 = unk_210C57A68;
      result = std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a2, v12, __src.i8, (char *)&v15, 4);
      break;
    case 2:
      uint64_t v10 = *a2;
      int64x2_t __src = (int64x2_t)xmmword_210C57A40;
      *(void *)&long long v14 = 1;
      result = std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a2, v10, __src.i8, (char *)&v14 + 8, 3);
      break;
    case 3:
      uint64_t v11 = *a2;
      int64x2_t __src = vdupq_n_s64(1uLL);
      result = std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a2, v11, __src.i8, (char *)&v14, 2);
      break;
    case 4:
      uint64_t v9 = *a2;
      __src.i64[0] = 1;
      result = std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a2, v9, __src.i8, &__src.i8[8], 1);
      break;
    default:
      return result;
  }
  return result;
}

void sub_210B2D398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  uint64_t v11 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::ANEMachineIR::Interpreter::anonymous namespace'::get_index(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1[1] - *a1 != 40) {
  return a6
  }
       + (a5
        + (a4 + *(void *)(*a1 + 16) * a3 + *(void *)(*a1 + 8) * a2 * *(void *)(*a1 + 16))
        * *(void *)(*a1 + 24))
       * *(void *)(*a1 + 32);
}

uint64_t std::function<float ()(float)>::operator()(uint64_t a1, float a2)
{
  float v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, float *))(*(void *)v2 + 48))(v2, &v4);
}

void *std::vector<MIL::Fp16>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<MIL::Fp16>::__vallocate[abi:ne180100](a1, a2);
    float v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_210B2D4D0(_Unwind_Exception *exception_object)
{
  v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<MIL::Fp16>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
  }
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a2);
}

void *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_210B2D5D8(_Unwind_Exception *exception_object)
{
  v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long long>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
  }
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

char *std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  unint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 >> 61) {
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 3;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v14) {
      unint64_t v14 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      std::string::size_type v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v9, v17);
    }
    else {
      std::string::size_type v18 = 0;
    }
    float v28 = &v18[8 * v15];
    __p = v18;
    unint64_t v34 = v28;
    uint64_t v36 = &v18[8 * v17];
    uint64_t v29 = 8 * a5;
    int v30 = &v28[8 * a5];
    do
    {
      uint64_t v31 = *(void *)v7;
      v7 += 8;
      *(void *)float v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v35 = v30;
    unint64_t v5 = std::vector<unsigned long long>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    uint64_t v21 = &__src[8 * a5];
    uint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    uint64_t v24 = &v5[8 * a5];
    int v25 = &v23[-8 * a5];
    uint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      uint64_t v26 = v23;
      do
      {
        uint64_t v27 = *(void *)v25;
        v25 += 8;
        *(void *)uint64_t v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  uint64_t v21 = &__src[8 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  }
  uint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_210B2D848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long long>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  unint64_t v5 = *(char **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    size_t v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x21667BBD0);
}

uint64_t std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void *std::vector<unsigned char>::vector(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    unint64_t v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_210B2DB7C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
  }
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void *std::vector<signed char>::vector(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    unint64_t v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_210B2DC34(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::ANEMachineIR::Interpreter::PeMulCpu::Run()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<MIL::Fp16,MIL::Fp16,MIL::Fp16,MIL::Fp16,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::Condition)0,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::PeElementWiseFunc)0>()
{
  __assert_rtn("ComputeValue", "PeElementWiseCpu.cpp", 109, "y_scale == 1.0 || y_scale == -1.0");
}

{
  __assert_rtn("ComputeValue", "PeElementWiseCpu.cpp", 116, "src_shape.size() == mul_shape.size()");
}

{
  __assert_rtn("ComputeValue", "PeElementWiseCpu.cpp", 113, "src_shape.size() == add_shape.size()");
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::promote_shape_to_5d()
{
  __assert_rtn("promote_shape_to_5d", "PeElementWiseCpu.cpp", 71, "shape.size() >= 0 && shape.size() <= 5");
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::get_index()
{
  __assert_rtn("get_index", "PeElementWiseCpu.cpp", 61, "shape5d.size() == 5");
}

void ANEMachineIR::H2020::Validators::ValidateConst(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::Validators::ValidateConvParameters(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X3>, int a4@<W4>, uint64_t *a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  if (*(unsigned char *)(a6 + 16) && (*(void *)(a6 + 96) <= 1uLL ? (BOOL v14 = *(void *)(a6 + 104) >= 2uLL) : (BOOL v14 = 1), v14))
  {
    uint64_t v15 = *(std::__shared_weak_count **)(a1 + 8);
    float v154 = *(void **)a1;
    v155 = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v152, "PyANE does not reuse bias or post-scale in group data, so channel vector configurations are not supported at the moment.");
    MEMORY[0x21667B340](a7, &v154, 319, v152);
    if (v153 < 0) {
      operator delete(v152[0]);
    }
    uint64_t v16 = v155;
    if (v155) {
      goto LABEL_25;
    }
  }
  else
  {
    if (((a3[1] - *a3) >> 3) - 3 == *(void *)a6)
    {
      uint64_t v17 = a2[1];
      if (v17 == *a2) {
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
      unint64_t v18 = *(void *)(a6 + 8);
      if (v18)
      {
        if (!(*(void *)(v17 - 8) % v18))
        {
          MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)v143);
          goto LABEL_34;
        }
        uint64_t v19 = *(void *)(a1 + 8);
        float v125 = *(void **)a1;
        *(void *)&long long v126 = v19;
        if (v19) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "num_groups must divide input_channel.");
        MEMORY[0x21667B340](v143, &v125, 315, &__p);
      }
      else
      {
        uint64_t v21 = *(void *)(a1 + 8);
        float v125 = *(void **)a1;
        *(void *)&long long v126 = v21;
        if (v21) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "num_groups must be greater than 0.");
        MEMORY[0x21667B340](v143, &v125, 315, &__p);
      }
      if (SHIBYTE(v131) < 0) {
        operator delete(__p);
      }
      if ((void)v126) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v126);
      }
LABEL_34:
      if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)v143))
      {
        int64_t v22 = (void *)*a3;
        uint64_t v23 = a3[1] - *a3;
        if ((unint64_t)v23 < 9 || (v25 = *a2, uint64_t v24 = a2[1], v26 = v24 - *a2, v24 == *a2)) {
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v27 = v23 >> 3;
        uint64_t v28 = v26 >> 3;
        unint64_t v29 = *(void *)(a6 + 8);
        if (v22[(v23 >> 3) - 2] != *(void *)(v25 + 8 * (v26 >> 3) - 8) / v29)
        {
          unint64_t v32 = *(std::__shared_weak_count **)(a1 + 8);
          v141 = *(void **)a1;
          v142 = v32;
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(v139, "Kernel must have input channels equivalent to x's input channels over num_groups");
          MEMORY[0x21667B340](a7, &v141, 315, v139);
          if (v140 < 0) {
            operator delete(v139[0]);
          }
          unint64_t v33 = v142;
          if (!v142) {
            goto LABEL_217;
          }
          goto LABEL_67;
        }
        if (*(unsigned char *)(a6 + 16)) {
          unint64_t v29 = 1;
        }
        if (*v22 == v29)
        {
          if (*(unsigned char *)(a6 + 18))
          {
            uint64_t v30 = *(void *)(a1 + 8);
            v120 = *(void **)a1;
            *(void *)&long long v121 = v30;
            if (v30) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(&v125, "Padding validation for conv transpose not implemented.");
            MEMORY[0x21667B340](&__p, &v120, 315, &v125);
            goto LABEL_45;
          }
          for (uint64_t i = *(_DWORD **)(a6 + 48); i != *(_DWORD **)(a6 + 56); ++i)
          {
            if (*i != 1)
            {
              uint64_t v53 = *(void *)(a1 + 8);
              v120 = *(void **)a1;
              *(void *)&long long v121 = v53;
              if (v53) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
              }
              std::string::basic_string[abi:ne180100]<0>(&v125, "Padding validation for dilated convs not yet implemented.");
              MEMORY[0x21667B340](&__p, &v120, 315, &v125);
              goto LABEL_45;
            }
          }
          unint64_t v36 = *(void *)a6;
          if (*(void *)a6 == 3)
          {
            if ((unint64_t)v23 <= 0x20) {
              goto LABEL_228;
            }
            uint64_t v38 = *(int **)(a6 + 72);
            uint64_t v37 = *(int **)(a6 + 80);
            uint64_t v39 = (char *)v37 - (char *)v38;
            if (v37 == v38 || (unint64_t)v39 < 5) {
              goto LABEL_227;
            }
            float v40 = &v22[v27];
            unint64_t v41 = *(v40 - 5);
            unint64_t v42 = *(v40 - 4);
            unint64_t v43 = *(v40 - 3);
            int v44 = v38[1];
            unint64_t v45 = *v38;
          }
          else
          {
            if (v36 < 2)
            {
              if ((unint64_t)v23 <= 0x10) {
                goto LABEL_228;
              }
              uint64_t v38 = *(int **)(a6 + 72);
              uint64_t v67 = *(void *)(a6 + 80) - (void)v38;
              if ((unint64_t)v67 < 5) {
                goto LABEL_227;
              }
              unint64_t v50 = 0;
              unint64_t v51 = 0;
              int v52 = 0;
              unint64_t v45 = 0;
              unint64_t v47 = 0;
              unint64_t v43 = v22[v27 - 3];
              uint64_t v48 = v67 >> 2;
              unint64_t v41 = 1;
              unint64_t v42 = 1;
LABEL_128:
              if (v41 <= v45 || v41 <= v47)
              {
                uint64_t v73 = *(void *)(a1 + 8);
                v120 = *(void **)a1;
                *(void *)&long long v121 = v73;
                if (v73) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v73 + 8), 1uLL, memory_order_relaxed);
                }
                std::string::basic_string[abi:ne180100]<0>(&v125, "Conv padding must be supported by kernel in depth dimension.");
                MEMORY[0x21667B340](&__p, &v120, 315, &v125);
                goto LABEL_45;
              }
              if (v42 <= v51 || v42 <= v50)
              {
                uint64_t v74 = *(void *)(a1 + 8);
                v120 = *(void **)a1;
                *(void *)&long long v121 = v74;
                if (v74) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v74 + 8), 1uLL, memory_order_relaxed);
                }
                std::string::basic_string[abi:ne180100]<0>(&v125, "Conv padding must be supported by kernel in height dimension.");
                MEMORY[0x21667B340](&__p, &v120, 315, &v125);
                goto LABEL_45;
              }
              uint64_t v68 = &v38[v48];
              unint64_t v69 = *(v68 - 2);
              unint64_t v70 = *(v68 - 1);
              if (v43 <= v69 || v43 <= v70)
              {
                uint64_t v72 = *(void *)(a1 + 8);
                v120 = *(void **)a1;
                *(void *)&long long v121 = v72;
                if (v72) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v72 + 8), 1uLL, memory_order_relaxed);
                }
                std::string::basic_string[abi:ne180100]<0>(&v125, "Conv padding must be supported by kernel in width dimension.");
                MEMORY[0x21667B340](&__p, &v120, 315, &v125);
                goto LABEL_45;
              }
              if (v36 == 3)
              {
                if ((unint64_t)v26 < 0x19) {
                  goto LABEL_228;
                }
                uint64_t v86 = *(void *)(v25 + 8 * v28 - 32);
              }
              else
              {
                uint64_t v86 = 1;
              }
              if (v52)
              {
                if ((unint64_t)v26 < 0x11) {
                  goto LABEL_228;
                }
                uint64_t v87 = *(void *)(v25 + 8 * v28 - 24);
              }
              else
              {
                if ((unint64_t)v26 < 9) {
                  goto LABEL_228;
                }
                uint64_t v87 = 1;
              }
              uint64_t v88 = *(void *)(v25 + 8 * v28 - 16);
              uint64_t v89 = *a5;
              uint64_t v90 = a5[1] - *a5;
              if (v36 == 3)
              {
                if ((unint64_t)v90 < 0x19) {
                  goto LABEL_228;
                }
                uint64_t v91 = *(void *)(v90 + v89 - 32);
              }
              else
              {
                uint64_t v91 = 1;
              }
              if (v52)
              {
                if ((unint64_t)v90 >= 0x11)
                {
                  uint64_t v92 = v90 >> 3;
                  uint64_t v93 = *(void *)(v90 + v89 - 24);
LABEL_187:
                  uint64_t v94 = *(void *)(v89 + 8 * v92 - 16);
                  if (v36 == 3)
                  {
                    uint64_t v95 = *(void *)(a6 + 24);
                    if (*(void *)(a6 + 32) == v95) {
                      goto LABEL_227;
                    }
                    LODWORD(v95) = *(_DWORD *)v95;
                    if ((int)v95 >= 0) {
                      uint64_t v95 = v95;
                    }
                    else {
                      uint64_t v95 = -(int)v95;
                    }
                  }
                  else
                  {
                    uint64_t v95 = 1;
                  }
                  if (v52)
                  {
                    uint64_t v96 = *(void *)(a6 + 24);
                    uint64_t v97 = *(void *)(a6 + 32);
                    if ((unint64_t)(v97 - v96) < 5) {
                      goto LABEL_227;
                    }
                    LODWORD(v98) = *(_DWORD *)(v97 - 8);
                    if ((int)v98 >= 0) {
                      uint64_t v98 = v98;
                    }
                    else {
                      uint64_t v98 = -(int)v98;
                    }
                  }
                  else
                  {
                    uint64_t v96 = *(void *)(a6 + 24);
                    uint64_t v97 = *(void *)(a6 + 32);
                    uint64_t v98 = 1;
                  }
                  if (v97 != v96)
                  {
                    LODWORD(v97) = *(_DWORD *)(v97 - 4);
                    if ((int)v97 >= 0) {
                      uint64_t v97 = v97;
                    }
                    else {
                      uint64_t v97 = -(int)v97;
                    }
                    if ((v94 - 1) * v97 >= v88 + v69)
                    {
                      uint64_t v99 = *(void *)(a1 + 8);
                      v120 = *(void **)a1;
                      *(void *)&long long v121 = v99;
                      if (v99) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v99 + 8), 1uLL, memory_order_relaxed);
                      }
                      std::string::basic_string[abi:ne180100]<0>(&v125, "Conv padding support constraints violated for Px.");
                      MEMORY[0x21667B340](&__p, &v120, 315, &v125);
                    }
                    else if (v98 * (v93 - 1) >= v87 + v51)
                    {
                      uint64_t v100 = *(void *)(a1 + 8);
                      v120 = *(void **)a1;
                      *(void *)&long long v121 = v100;
                      if (v100) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v100 + 8), 1uLL, memory_order_relaxed);
                      }
                      std::string::basic_string[abi:ne180100]<0>(&v125, "Conv padding support constraints violated for Py.");
                      MEMORY[0x21667B340](&__p, &v120, 315, &v125);
                    }
                    else
                    {
                      if (v95 * (v91 - 1) < v86 + v45)
                      {
                        MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)&__p);
LABEL_49:
                        if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&__p))
                        {
                          for (unint64_t j = *(int **)(a6 + 48); ; ++j)
                          {
                            if (j == *(int **)(a6 + 56))
                            {
                              MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)&v125);
                              goto LABEL_97;
                            }
                            if (*j <= 0) {
                              break;
                            }
                            if (*j != 1)
                            {
                              std::string::size_type v55 = *(void *)(a1 + 8);
                              v102.__r_.__value_.__r.__words[0] = *(void *)a1;
                              v102.__r_.__value_.__l.__size_ = v55;
                              if (v55) {
                                atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
                              }
                              std::string::basic_string[abi:ne180100]<0>(&v120, "MIL<aneflow> frontend has not yet implemented dilated conv.");
                              MEMORY[0x21667B340](&v125, &v102, 315, &v120);
                              goto LABEL_93;
                            }
                          }
                          std::string::size_type v54 = *(void *)(a1 + 8);
                          v102.__r_.__value_.__r.__words[0] = *(void *)a1;
                          v102.__r_.__value_.__l.__size_ = v54;
                          if (v54) {
                            atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
                          }
                          std::string::basic_string[abi:ne180100]<0>(&v120, "Dilation must be greater than zero.");
                          MEMORY[0x21667B340](&v125, &v102, 315, &v120);
LABEL_93:
                          if (SHIBYTE(v121) < 0) {
                            operator delete(v120);
                          }
                          if (v102.__r_.__value_.__l.__size_) {
                            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v102.__r_.__value_.__l.__size_);
                          }
LABEL_97:
                          if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v125))
                          {
                            if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v120))
                            {
                              ANEMachineIR::Validators::InferOutputShape((uint64_t)a2, a3, a6, &v118);
                              uint64_t v56 = a5[1] - *a5;
                              if (v119 - (unsigned char *)v118 == v56)
                              {
                                if (!memcmp(v118, (const void *)*a5, v119 - (unsigned char *)v118))
                                {
                                  if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v102))
                                  {
                                    MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a7);
                                  }
                                  else
                                  {
                                    *(_OWORD *)(a7 + 8) = *(_OWORD *)&v102.__r_.__value_.__r.__words[1];
                                    *(_OWORD *)&v102.__r_.__value_.__r.__words[1] = 0uLL;
                                    *(_OWORD *)(a7 + 24) = v103;
                                    *(void *)(a7 + 40) = v104;
                                    long long v103 = 0uLL;
                                    uint64_t v104 = 0;
                                    *(void *)a7 = MEMORY[0x263F52F88] + 16;
                                    *(_DWORD *)(a7 + 48) = v105;
                                  }
                                  MEMORY[0x21667B360](&v102);
                                }
                                else
                                {
                                  ANEMachineIR::Utils::ShapeString(a5);
                                  ANEMachineIR::Utils::ShapeString((uint64_t *)&v118);
                                  uint64_t v57 = *(std::__shared_weak_count **)(a1 + 8);
                                  v108 = *(void **)a1;
                                  uint64_t v109 = v57;
                                  if (v57) {
                                    atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
                                  }
                                  std::operator+<char>();
                                  uint64_t v58 = std::string::append(&v110, " does not match inferred shape ");
                                  long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
                                  v111.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
                                  *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v59;
                                  v58->__r_.__value_.__l.__size_ = 0;
                                  v58->__r_.__value_.__r.__words[2] = 0;
                                  v58->__r_.__value_.__r.__words[0] = 0;
                                  if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                    uint64_t v60 = &v113;
                                  }
                                  else {
                                    uint64_t v60 = (std::string *)v113.__r_.__value_.__r.__words[0];
                                  }
                                  if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                    std::string::size_type size = HIBYTE(v113.__r_.__value_.__r.__words[2]);
                                  }
                                  else {
                                    std::string::size_type size = v113.__r_.__value_.__l.__size_;
                                  }
                                  float v62 = std::string::append(&v111, (const std::string::value_type *)v60, size);
                                  long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
                                  v112.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
                                  *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v63;
                                  v62->__r_.__value_.__l.__size_ = 0;
                                  v62->__r_.__value_.__r.__words[2] = 0;
                                  v62->__r_.__value_.__r.__words[0] = 0;
                                  uint64_t v64 = std::string::append(&v112, ".");
                                  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
                                  std::string::size_type v107 = v64->__r_.__value_.__r.__words[2];
                                  *(_OWORD *)v106 = v65;
                                  v64->__r_.__value_.__l.__size_ = 0;
                                  v64->__r_.__value_.__r.__words[2] = 0;
                                  v64->__r_.__value_.__r.__words[0] = 0;
                                  MEMORY[0x21667B340](a7, &v108, 313, v106);
                                  if (SHIBYTE(v107) < 0) {
                                    operator delete(v106[0]);
                                  }
                                  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
                                    operator delete(v112.__r_.__value_.__l.__data_);
                                  }
                                  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
                                    operator delete(v111.__r_.__value_.__l.__data_);
                                  }
                                  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
                                    operator delete(v110.__r_.__value_.__l.__data_);
                                  }
                                  if (v109) {
                                    std::__shared_weak_count::__release_shared[abi:ne180100](v109);
                                  }
                                  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
                                    operator delete(v113.__r_.__value_.__l.__data_);
                                  }
                                  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
                                    operator delete(v102.__r_.__value_.__l.__data_);
                                  }
                                }
                              }
                              else
                              {
                                uint64_t v75 = *(std::__shared_weak_count **)(a1 + 8);
                                uint64_t v116 = *(void **)a1;
                                uint64_t v117 = v75;
                                if (v75)
                                {
                                  atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
                                  uint64_t v56 = a5[1] - *a5;
                                }
                                std::to_string(&v111, v56 >> 3);
                                float v76 = std::string::insert(&v111, 0, "Output rank ");
                                long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
                                v112.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
                                *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v77;
                                v76->__r_.__value_.__l.__size_ = 0;
                                v76->__r_.__value_.__r.__words[2] = 0;
                                v76->__r_.__value_.__r.__words[0] = 0;
                                uint64_t v78 = std::string::append(&v112, " does not match rank of inferred shape ");
                                long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
                                v113.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
                                *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v79;
                                v78->__r_.__value_.__l.__size_ = 0;
                                v78->__r_.__value_.__r.__words[2] = 0;
                                v78->__r_.__value_.__r.__words[0] = 0;
                                std::to_string(&v110, (v119 - (unsigned char *)v118) >> 3);
                                if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                  uint64_t v80 = &v110;
                                }
                                else {
                                  uint64_t v80 = (std::string *)v110.__r_.__value_.__r.__words[0];
                                }
                                if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                  std::string::size_type v81 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
                                }
                                else {
                                  std::string::size_type v81 = v110.__r_.__value_.__l.__size_;
                                }
                                uint64_t v82 = std::string::append(&v113, (const std::string::value_type *)v80, v81);
                                long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
                                v102.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
                                *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v83;
                                v82->__r_.__value_.__l.__size_ = 0;
                                v82->__r_.__value_.__r.__words[2] = 0;
                                v82->__r_.__value_.__r.__words[0] = 0;
                                float v84 = std::string::append(&v102, ".");
                                long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
                                std::string::size_type v115 = v84->__r_.__value_.__r.__words[2];
                                *(_OWORD *)v114 = v85;
                                v84->__r_.__value_.__l.__size_ = 0;
                                v84->__r_.__value_.__r.__words[2] = 0;
                                v84->__r_.__value_.__r.__words[0] = 0;
                                MEMORY[0x21667B340](a7, &v116, 313, v114);
                                if (SHIBYTE(v115) < 0) {
                                  operator delete(v114[0]);
                                }
                                if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
                                  operator delete(v102.__r_.__value_.__l.__data_);
                                }
                                if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
                                  operator delete(v110.__r_.__value_.__l.__data_);
                                }
                                if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
                                  operator delete(v113.__r_.__value_.__l.__data_);
                                }
                                if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
                                  operator delete(v112.__r_.__value_.__l.__data_);
                                }
                                if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
                                  operator delete(v111.__r_.__value_.__l.__data_);
                                }
                                if (v117) {
                                  std::__shared_weak_count::__release_shared[abi:ne180100](v117);
                                }
                              }
                              if (v118)
                              {
                                float v119 = v118;
                                operator delete(v118);
                              }
                            }
                            else
                            {
                              *(_OWORD *)(a7 + 8) = v121;
                              long long v121 = 0uLL;
                              *(_OWORD *)(a7 + 24) = v122;
                              *(void *)(a7 + 40) = v123;
                              long long v122 = 0uLL;
                              uint64_t v123 = 0;
                              *(void *)a7 = MEMORY[0x263F52F88] + 16;
                              *(_DWORD *)(a7 + 48) = v124;
                            }
                            MEMORY[0x21667B360](&v120);
                          }
                          else
                          {
                            long long v66 = v127;
                            *(_OWORD *)(a7 + 8) = v126;
                            long long v126 = 0uLL;
                            *(_OWORD *)(a7 + 24) = v66;
                            *(void *)(a7 + 40) = v128;
                            long long v127 = 0uLL;
                            uint64_t v128 = 0;
                            *(void *)a7 = MEMORY[0x263F52F88] + 16;
                            *(_DWORD *)(a7 + 48) = v129;
                          }
                          MEMORY[0x21667B360](&v125);
                        }
                        else
                        {
                          *(_OWORD *)(a7 + 8) = v131;
                          long long v131 = 0uLL;
                          *(_OWORD *)(a7 + 24) = v132;
                          *(void *)(a7 + 40) = v133;
                          long long v132 = 0uLL;
                          uint64_t v133 = 0;
                          *(void *)a7 = MEMORY[0x263F52F88] + 16;
                          *(_DWORD *)(a7 + 48) = v134;
                        }
                        MEMORY[0x21667B360](&__p);
                        goto LABEL_217;
                      }
                      uint64_t v101 = *(void *)(a1 + 8);
                      v120 = *(void **)a1;
                      *(void *)&long long v121 = v101;
                      if (v101) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v101 + 8), 1uLL, memory_order_relaxed);
                      }
                      std::string::basic_string[abi:ne180100]<0>(&v125, "Conv padding support constraints violated for Pz.");
                      MEMORY[0x21667B340](&__p, &v120, 315, &v125);
                    }
LABEL_45:
                    if (SHIBYTE(v126) < 0) {
                      operator delete(v125);
                    }
                    if ((void)v121) {
                      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v121);
                    }
                    goto LABEL_49;
                  }
LABEL_227:
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
              }
              else if ((unint64_t)v90 >= 9)
              {
                uint64_t v92 = v90 >> 3;
                uint64_t v93 = 1;
                goto LABEL_187;
              }
LABEL_228:
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            if ((unint64_t)v23 <= 0x18) {
              goto LABEL_228;
            }
            unint64_t v45 = 0;
            int v44 = 0;
            uint64_t v46 = &v22[v27];
            unint64_t v42 = *(v46 - 4);
            unint64_t v43 = *(v46 - 3);
            uint64_t v38 = *(int **)(a6 + 72);
            uint64_t v39 = *(void *)(a6 + 80) - (void)v38;
            unint64_t v41 = 1;
          }
          if ((unint64_t)v39 <= 0xC) {
            goto LABEL_227;
          }
          unint64_t v47 = v44;
          uint64_t v48 = v39 >> 2;
          long double v49 = (char *)v38 + v39;
          unint64_t v51 = *(int *)((char *)v38 + v39 - 16);
          unint64_t v50 = *((int *)v49 - 3);
          int v52 = 1;
          goto LABEL_128;
        }
        unint64_t v34 = *(std::__shared_weak_count **)(a1 + 8);
        uint64_t v137 = *(void **)a1;
        uint64_t v138 = v34;
        if (v34) {
          atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v135, "Kernel must have group dimension equal to 'num_groups' or 1 if 'group_kernel_reuse' is set.");
        MEMORY[0x21667B340](a7, &v137, 315, v135);
        if (v136 < 0) {
          operator delete(v135[0]);
        }
        unint64_t v33 = v138;
        if (v138) {
LABEL_67:
        }
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
      else
      {
        *(_OWORD *)(a7 + 8) = v144;
        long long v144 = 0uLL;
        *(_OWORD *)(a7 + 24) = v145;
        *(void *)(a7 + 40) = v146;
        long long v145 = 0uLL;
        uint64_t v146 = 0;
        *(void *)a7 = MEMORY[0x263F52F88] + 16;
        *(_DWORD *)(a7 + 48) = v147;
      }
LABEL_217:
      MEMORY[0x21667B360](v143);
      return;
    }
    uint64_t v20 = *(std::__shared_weak_count **)(a1 + 8);
    v150 = *(void **)a1;
    uint64_t v151 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v148, "kernel dimension must have spatial dims equal to number of spatial dimensions of input.");
    MEMORY[0x21667B340](a7, &v150, 319, v148);
    if (v149 < 0) {
      operator delete(v148[0]);
    }
    uint64_t v16 = v151;
    if (v151) {
LABEL_25:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
}

void sub_210B2EB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,std::__shared_weak_count *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a57 < 0) {
    operator delete(__p);
  }
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  MEMORY[0x21667B360](v57 - 216);
  _Unwind_Resume(a1);
}

void ANEMachineIR::Validators::anonymous namespace'::ValidateStrides(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, unint64_t *a5@<X4>, MIL::ValidationResult *a6@<X8>)
{
  unint64_t v7 = *a5;
  size_t v8 = (int *)a5[4];
  if (*a5 == 3)
  {
    uint64_t v9 = (int *)a5[3];
    if (v8 == v9) {
      goto LABEL_85;
    }
    int v10 = *v9;
  }
  else
  {
    uint64_t v9 = (int *)a5[3];
    int v10 = 1;
    if (v7 < 2)
    {
      int v12 = 0;
      int v11 = 1;
      goto LABEL_8;
    }
  }
  if ((unint64_t)((char *)v8 - (char *)v9) <= 4) {
    goto LABEL_84;
  }
  int v11 = *(v8 - 2);
  int v12 = 1;
LABEL_8:
  if (v8 == v9) {
LABEL_84:
  }
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  if (v10 >= 0) {
    uint64_t v13 = v10;
  }
  else {
    uint64_t v13 = -v10;
  }
  if ((v13 - 1) > 1
    || (v11 >= 0 ? (uint64_t v14 = v11) : (uint64_t v14 = -v11),
        (v14 - 1) > 1
     || ((int v15 = *(v8 - 1), v15 >= 0) ? (v16 = v15) : (v16 = -v15),
         (v16 - 1) >= 2)))
  {
    unint64_t v18 = (std::__shared_weak_count *)a1[1];
    uint64_t v52 = *a1;
    uint64_t v53 = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v50, "Strides on an individual conv must be positive 1 or 2. For larger strides, a decomposition must be used.");
    MEMORY[0x21667B340](a6, &v52, 315, v50);
    if (v51 < 0) {
      operator delete(v50[0]);
    }
    uint64_t v19 = v53;
    if (v53) {
      goto LABEL_32;
    }
    return;
  }
  if (v10 < 0 || v11 < 0 || v15 < 0)
  {
    uint64_t v20 = (std::__shared_weak_count *)a1[1];
    uint64_t v48 = *a1;
    long double v49 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Negative strides are not implemented.");
    MEMORY[0x21667B340](a6, &v48, 315, __p);
    if (v47 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v19 = v49;
    if (v49) {
      goto LABEL_32;
    }
    return;
  }
  if (v7 == 3)
  {
    if ((unint64_t)(a3[1] - *a3) <= 0x20) {
      goto LABEL_86;
    }
    uint64_t v17 = *(void *)(a3[1] - 40);
  }
  else
  {
    uint64_t v17 = 1;
  }
  uint64_t v21 = *a3;
  unint64_t v22 = a3[1] - *a3;
  if (v12)
  {
    if (v22 > 0x18)
    {
      uint64_t v23 = *(void *)(v22 + v21 - 32);
      goto LABEL_46;
    }
LABEL_86:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v22 <= 0x10) {
    goto LABEL_86;
  }
  uint64_t v23 = 1;
LABEL_46:
  uint64_t v24 = *(void *)(v22 + v21 - 24);
  if (v7 == 3)
  {
    if ((unint64_t)(a2[1] - *a2) <= 0x18) {
      goto LABEL_87;
    }
    unint64_t v25 = *(void *)(a2[1] - 32);
  }
  else
  {
    unint64_t v25 = 1;
  }
  uint64_t v26 = *a2;
  unint64_t v27 = a2[1] - *a2;
  if (v12)
  {
    if (v27 > 0x10)
    {
      unint64_t v28 = *(void *)(v27 + v26 - 24);
      goto LABEL_55;
    }
LABEL_87:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 <= 8) {
    goto LABEL_87;
  }
  unint64_t v28 = 1;
LABEL_55:
  unint64_t v29 = *(void *)(v27 + v26 - 16);
  if (v7 == 3)
  {
    if ((unint64_t)(a4[1] - *a4) <= 0x18) {
      goto LABEL_88;
    }
    uint64_t v30 = *(void *)(a4[1] - 32) - 1;
  }
  else
  {
    uint64_t v30 = 0;
  }
  uint64_t v31 = *a4;
  unint64_t v32 = a4[1] - *a4;
  if (v12)
  {
    if (v32 > 0x10)
    {
      uint64_t v33 = *(void *)(v32 + v31 - 24) - 1;
      goto LABEL_64;
    }
LABEL_88:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v32 <= 8) {
    goto LABEL_88;
  }
  uint64_t v33 = 0;
LABEL_64:
  uint64_t v34 = *(void *)(v32 + v31 - 16);
  if (v7 == 3)
  {
    v35 = (int *)a5[9];
    if ((int *)a5[10] != v35)
    {
      uint64_t v36 = *v35;
      if (!v12) {
        goto LABEL_67;
      }
      goto LABEL_70;
    }
LABEL_85:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v36 = 0;
  if (!v12)
  {
LABEL_67:
    unint64_t v37 = a5[9];
    unint64_t v38 = a5[10] - v37;
    if (v38 > 4)
    {
      uint64_t v39 = 0;
      goto LABEL_72;
    }
LABEL_89:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
LABEL_70:
  unint64_t v37 = a5[9];
  unint64_t v40 = a5[10];
  unint64_t v38 = v40 - v37;
  if (v40 - v37 <= 0xC) {
    goto LABEL_89;
  }
  uint64_t v39 = *(int *)(v40 - 16);
LABEL_72:
  if (v29 > ((v24 + v16 - 1) & (unint64_t)-(int)v16) + (v34 - 1) * v16 - *(int *)(v38 + v37 - 8)
    || v28 > ((v23 + v14 - 1) & (unint64_t)-(int)v14) + v33 * v14 - v39
    || v25 > ((v17 + v13 - 1) & (unint64_t)-(int)v13) + v30 * v13 - v36)
  {
    unint64_t v41 = (std::__shared_weak_count *)a1[1];
    uint64_t v44 = *a1;
    unint64_t v45 = v41;
    if (v41) {
      atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v42, "Stride programming constraint 6.1.6.1.1 violated.");
    MEMORY[0x21667B340](a6, &v44, 315, v42);
    if (v43 < 0) {
      operator delete(v42[0]);
    }
    uint64_t v19 = v45;
    if (!v45) {
      return;
    }
LABEL_32:
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    return;
  }
  MIL::ValidationResult::ValidationResult(a6);
}

void sub_210B2F2D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void ANEMachineIR::Validators::InferOutputShape(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *(uint64_t **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v7 = v5 - *(void *)a1;
  if (v5 == *(void *)a1) {
    goto LABEL_119;
  }
  uint64_t v9 = (uint64_t)v7 >> 3;
  uint64_t v10 = *v6;
  unint64_t v11 = *(void *)a3;
  if (*(void *)a3 == 3)
  {
    if (v7 > 0x18)
    {
      uint64_t v12 = *a2;
      unint64_t v13 = a2[1] - *a2;
      if (v13 > 0x20)
      {
        uint64_t v14 = v6[v9 - 4];
        uint64_t v15 = *(void *)(v13 + v12 - 40);
LABEL_10:
        uint64_t v16 = v6[v9 - 3];
        uint64_t v17 = *(void *)(v13 + v12 - 32);
        int v18 = 1;
        goto LABEL_14;
      }
      goto LABEL_121;
    }
    goto LABEL_119;
  }
  if (v11 >= 2)
  {
    if (v7 > 0x10)
    {
      uint64_t v12 = *a2;
      unint64_t v13 = a2[1] - *a2;
      if (v13 > 0x18)
      {
        uint64_t v15 = 1;
        uint64_t v14 = 1;
        goto LABEL_10;
      }
LABEL_121:
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
LABEL_119:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v7 <= 8) {
    goto LABEL_119;
  }
  uint64_t v12 = *a2;
  unint64_t v13 = a2[1] - *a2;
  if (v13 <= 0x10) {
    goto LABEL_121;
  }
  int v18 = 0;
  uint64_t v17 = 1;
  uint64_t v14 = 1;
  uint64_t v16 = 1;
  uint64_t v15 = 1;
LABEL_14:
  if (*(unsigned char *)(a3 + 18))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Not implemented. Shape inference for conv transpose.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v19 = v6[v9 - 2];
  uint64_t v20 = *(void *)(v13 + v12 - 24);
  uint64_t v21 = *(void *)(v13 + v12 - 8);
  if (v11 == 3)
  {
    unint64_t v22 = *(int **)(a3 + 24);
    if (*(int **)(a3 + 32) == v22) {
      goto LABEL_118;
    }
    int v23 = *v22;
    if (v23 >= 0) {
      unint64_t v24 = v23;
    }
    else {
      unint64_t v24 = -v23;
    }
    if ((v18 & 1) == 0) {
      goto LABEL_21;
    }
  }
  else
  {
    unint64_t v24 = 1;
    if ((v18 & 1) == 0)
    {
LABEL_21:
      uint64_t v26 = *(void *)(a3 + 24);
      uint64_t v25 = *(void *)(a3 + 32);
      uint64_t v27 = 1;
      goto LABEL_27;
    }
  }
  uint64_t v26 = *(void *)(a3 + 24);
  uint64_t v25 = *(void *)(a3 + 32);
  if ((unint64_t)(v25 - v26) <= 4) {
    goto LABEL_118;
  }
  LODWORD(v27) = *(_DWORD *)(v25 - 8);
  if ((int)v27 >= 0) {
    uint64_t v27 = v27;
  }
  else {
    uint64_t v27 = -(int)v27;
  }
LABEL_27:
  if (v25 == v26) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  int v28 = *(_DWORD *)(v25 - 4);
  if (v28 >= 0) {
    unint64_t v29 = v28;
  }
  else {
    unint64_t v29 = -v28;
  }
  if (v11 == 3)
  {
    uint64_t v30 = *(int **)(a3 + 72);
    if (*(void *)(a3 + 80) - (void)v30 <= 4uLL) {
      goto LABEL_118;
    }
    uint64_t v31 = v30[1] + (uint64_t)*v30;
  }
  else
  {
    uint64_t v31 = 0;
  }
  uint64_t v98 = v20;
  uint64_t v99 = v19;
  uint64_t v91 = v16;
  uint64_t v92 = v17;
  unint64_t v90 = v27;
  unint64_t v97 = v29;
  if (!v18)
  {
    uint64_t v32 = *(void *)(a3 + 72);
    unint64_t v33 = *(void *)(a3 + 80) - v32;
    if (v33 > 4)
    {
      uint64_t v89 = 0;
      goto LABEL_40;
    }
LABEL_118:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v32 = *(void *)(a3 + 72);
  unint64_t v33 = *(void *)(a3 + 80) - v32;
  if (v33 <= 0xC) {
    goto LABEL_118;
  }
  uint64_t v89 = *(int *)(*(void *)(a3 + 80) - 12) + (uint64_t)*(int *)(*(void *)(a3 + 80) - 16);
LABEL_40:
  uint64_t v34 = v33 + v32;
  uint64_t v96 = *(int *)(v34 - 8);
  uint64_t v94 = v21;
  uint64_t v95 = *(int *)(v34 - 4);
  uint64_t v93 = *(void *)(a3 + 8);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v35 = (char **)(a4 + 2);
  uint64_t v36 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a4 + 2), 1uLL);
  unint64_t v37 = (char *)*a4;
  unint64_t v38 = (char *)a4[1];
  unint64_t v40 = (char *)&v36[v39];
  *uint64_t v36 = v10;
  unint64_t v41 = (char *)(v36 + 1);
  unint64_t v42 = v36;
  while (v38 != v37)
  {
    uint64_t v43 = *((void *)v38 - 1);
    v38 -= 8;
    *--unint64_t v42 = v43;
  }
  *a4 = v42;
  a4[1] = v41;
  a4[2] = v40;
  if (v37)
  {
    operator delete(v37);
    unint64_t v40 = *v35;
  }
  a4[1] = v41;
  unint64_t v44 = *(void *)a3;
  if (*(void *)a3 == 3)
  {
    unint64_t v45 = (v14 - v15 + v24 + v31) / v24;
    if (v41 >= v40)
    {
      char v47 = (char *)*a4;
      uint64_t v48 = (uint64_t)&v41[-*a4] >> 3;
      unint64_t v49 = v48 + 1;
      if ((unint64_t)(v48 + 1) >> 61) {
        goto LABEL_120;
      }
      uint64_t v50 = v40 - v47;
      if (v50 >> 2 > v49) {
        unint64_t v49 = v50 >> 2;
      }
      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v51 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v51 = v49;
      }
      if (v51)
      {
        uint64_t v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a4 + 2), v51);
        char v47 = (char *)*a4;
        unint64_t v41 = (char *)a4[1];
      }
      else
      {
        uint64_t v52 = 0;
      }
      uint64_t v53 = (unint64_t *)&v52[8 * v48];
      unint64_t v40 = &v52[8 * v51];
      *uint64_t v53 = v45;
      uint64_t v46 = (char *)(v53 + 1);
      while (v41 != v47)
      {
        unint64_t v54 = *((void *)v41 - 1);
        v41 -= 8;
        *--uint64_t v53 = v54;
      }
      *a4 = v53;
      a4[1] = v46;
      a4[2] = v40;
      if (v47)
      {
        operator delete(v47);
        unint64_t v40 = *v35;
      }
    }
    else
    {
      v36[1] = v45;
      uint64_t v46 = (char *)(v36 + 2);
    }
    a4[1] = v46;
    unint64_t v44 = *(void *)a3;
    unint64_t v41 = v46;
  }
  if (v44 < 2)
  {
    uint64_t v58 = v95;
    uint64_t v57 = v96;
  }
  else
  {
    unint64_t v55 = (v91 - v92 + v90 + v89) / v90;
    if (v41 >= v40)
    {
      long long v59 = (char *)*a4;
      uint64_t v60 = (uint64_t)&v41[-*a4] >> 3;
      unint64_t v61 = v60 + 1;
      if ((unint64_t)(v60 + 1) >> 61) {
        goto LABEL_120;
      }
      uint64_t v62 = v40 - v59;
      if (v62 >> 2 > v61) {
        unint64_t v61 = v62 >> 2;
      }
      if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v63 = v61;
      }
      if (v63)
      {
        uint64_t v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a4 + 2), v63);
        long long v59 = (char *)*a4;
        unint64_t v41 = (char *)a4[1];
      }
      else
      {
        uint64_t v64 = 0;
      }
      long long v65 = (unint64_t *)&v64[8 * v60];
      unint64_t v40 = &v64[8 * v63];
      *long long v65 = v55;
      uint64_t v56 = (char *)(v65 + 1);
      if (v41 == v59)
      {
        uint64_t v58 = v95;
      }
      else
      {
        uint64_t v58 = v95;
        do
        {
          unint64_t v66 = *((void *)v41 - 1);
          v41 -= 8;
          *--long long v65 = v66;
        }
        while (v41 != v59);
      }
      *a4 = v65;
      a4[1] = v56;
      a4[2] = v40;
      if (v59)
      {
        operator delete(v59);
        unint64_t v40 = *v35;
      }
      uint64_t v57 = v96;
    }
    else
    {
      *(void *)unint64_t v41 = v55;
      uint64_t v56 = v41 + 8;
      uint64_t v58 = v95;
      uint64_t v57 = v96;
    }
    a4[1] = v56;
    unint64_t v41 = v56;
  }
  unint64_t v67 = (v99 - v98 + v97 + v58 + v57) / v97;
  if (v41 >= v40)
  {
    unint64_t v69 = (char *)*a4;
    uint64_t v70 = (uint64_t)&v41[-*a4] >> 3;
    unint64_t v71 = v70 + 1;
    if ((unint64_t)(v70 + 1) >> 61) {
      goto LABEL_120;
    }
    uint64_t v72 = v40 - v69;
    if (v72 >> 2 > v71) {
      unint64_t v71 = v72 >> 2;
    }
    if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v73 = v71;
    }
    if (v73)
    {
      uint64_t v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a4 + 2), v73);
      unint64_t v69 = (char *)*a4;
      unint64_t v41 = (char *)a4[1];
    }
    else
    {
      uint64_t v74 = 0;
    }
    uint64_t v75 = &v74[8 * v70];
    unint64_t v40 = &v74[8 * v73];
    *(void *)uint64_t v75 = v67;
    uint64_t v68 = v75 + 8;
    while (v41 != v69)
    {
      uint64_t v76 = *((void *)v41 - 1);
      v41 -= 8;
      *((void *)v75 - 1) = v76;
      v75 -= 8;
    }
    *a4 = v75;
    a4[1] = v68;
    a4[2] = v40;
    if (v69)
    {
      operator delete(v69);
      unint64_t v40 = *v35;
    }
  }
  else
  {
    *(void *)unint64_t v41 = v67;
    uint64_t v68 = v41 + 8;
  }
  uint64_t v77 = v93 * v94;
  a4[1] = v68;
  if (v68 < v40)
  {
    *(void *)uint64_t v68 = v77;
    uint64_t v78 = v68 + 8;
    goto LABEL_117;
  }
  long long v79 = (char *)*a4;
  uint64_t v80 = (uint64_t)&v68[-*a4] >> 3;
  unint64_t v81 = v80 + 1;
  if ((unint64_t)(v80 + 1) >> 61) {
LABEL_120:
  }
    std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
  uint64_t v82 = v40 - v79;
  if (v82 >> 2 > v81) {
    unint64_t v81 = v82 >> 2;
  }
  if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v83 = v81;
  }
  if (v83)
  {
    float v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a4 + 2), v83);
    long long v79 = (char *)*a4;
    uint64_t v68 = (char *)a4[1];
  }
  else
  {
    float v84 = 0;
  }
  long long v85 = &v84[8 * v80];
  uint64_t v86 = &v84[8 * v83];
  *(void *)long long v85 = v77;
  uint64_t v78 = v85 + 8;
  while (v68 != v79)
  {
    uint64_t v87 = *((void *)v68 - 1);
    v68 -= 8;
    *((void *)v85 - 1) = v87;
    v85 -= 8;
  }
  *a4 = v85;
  a4[1] = v78;
  a4[2] = v86;
  if (v79) {
    operator delete(v79);
  }
LABEL_117:
  a4[1] = v78;
}

void sub_210B2F954(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ANEMachineIR::Validators::anonymous namespace'::CheckKernelSizeLimits(uint64_t *a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, MIL::ValidationResult *a5@<X8>)
{
  if (*(void *)a4 == 3)
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1] - *a2;
    if (v8 > 0x20)
    {
      unint64_t v9 = *(void *)(v8 + v7 - 40);
LABEL_7:
      unint64_t v10 = *(void *)(v8 + v7 - 32);
      goto LABEL_10;
    }
    goto LABEL_56;
  }
  uint64_t v7 = *a2;
  unint64_t v8 = a2[1] - *a2;
  if (*(void *)a4 >= 2uLL)
  {
    if (v8 > 0x18)
    {
      unint64_t v9 = 1;
      goto LABEL_7;
    }
LABEL_56:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (v8 <= 0x10) {
    goto LABEL_56;
  }
  unint64_t v10 = 1;
  unint64_t v9 = 1;
LABEL_10:
  unint64_t v11 = *(void *)(v8 + v7 - 24);
  unint64_t v12 = 29;
  if (a3 == 4) {
    unint64_t v12 = 13;
  }
  if (v11 <= v12)
  {
    if (v10 < 0x1E)
    {
      if (v9 < 0x11)
      {
        uint64_t v17 = *(void *)(a4 + 96);
        uint64_t v18 = *(void *)(a4 + 104);
        if (v17 == 1) {
          int v19 = 1;
        }
        else {
          int v19 = 2;
        }
        if (v17) {
          int v20 = v19;
        }
        else {
          int v20 = 0;
        }
        if (v18 == 1) {
          int v21 = 1;
        }
        else {
          int v21 = 2;
        }
        if (v18) {
          int v22 = v21;
        }
        else {
          int v22 = 0;
        }
        if (ANEMachineIR::Validators::KernelDataBytesPerNE(a2, a3, 0, 0, 1, v20, v22, *(unsigned __int8 *)(a4 + 17)) <= 0x10000)
        {
          MIL::ValidationResult::ValidationResult(a5);
        }
        else
        {
          int v23 = (std::__shared_weak_count *)a1[1];
          uint64_t v26 = *a1;
          uint64_t v27 = v23;
          if (v23) {
            atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(v24, "KMEM limits exceeded by kernel data.");
          MEMORY[0x21667B340](a5, &v26, 318, v24);
          if (v25 < 0) {
            operator delete(v24[0]);
          }
          uint64_t v14 = v27;
          if (v27) {
            goto LABEL_18;
          }
        }
      }
      else
      {
        uint64_t v16 = (std::__shared_weak_count *)a1[1];
        uint64_t v30 = *a1;
        uint64_t v31 = v16;
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v28, "Maximum kernel depth exceeded.");
        MEMORY[0x21667B340](a5, &v30, 315, v28);
        if (v29 < 0) {
          operator delete(v28[0]);
        }
        uint64_t v14 = v31;
        if (v31) {
          goto LABEL_18;
        }
      }
    }
    else
    {
      uint64_t v15 = (std::__shared_weak_count *)a1[1];
      uint64_t v34 = *a1;
      v35 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Maximum kernel height exceeded.");
      MEMORY[0x21667B340](a5, &v34, 315, __p);
      if (v33 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v14 = v35;
      if (v35) {
        goto LABEL_18;
      }
    }
  }
  else
  {
    unint64_t v13 = (std::__shared_weak_count *)a1[1];
    uint64_t v38 = *a1;
    uint64_t v39 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v36, "Maximum kernel width exceeded.");
    MEMORY[0x21667B340](a5, &v38, 315, v36);
    if (v37 < 0) {
      operator delete(v36[0]);
    }
    uint64_t v14 = v39;
    if (v39) {
LABEL_18:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
}

void sub_210B2FC14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

void ANEMachineIR::Validators::ValidateChannelVectorShape(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, MIL::ValidationResult *a6@<X8>)
{
  unint64_t v11 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2);
  if (v11[1] - *v11 != 8)
  {
    uint64_t v14 = (std::__shared_weak_count *)a1[1];
    uint64_t v28 = *a1;
    char v29 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Expected a channel vector for parameter shape.");
    MEMORY[0x21667B340](a6, &v28, 315, __p);
    if (v27 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v15 = v29;
    if (!v29) {
      return;
    }
LABEL_15:
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    return;
  }
  uint64_t v12 = (*(uint64_t (**)(void))(**(void **)*v11 + 16))();
  if (!v12)
  {
    uint64_t v16 = (std::__shared_weak_count *)a1[1];
    uint64_t v24 = *a1;
    char v25 = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v22, "Channel vector shape must be static.");
    MEMORY[0x21667B340](a6, &v24, 315, v22);
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    uint64_t v15 = v25;
    if (!v25) {
      return;
    }
    goto LABEL_15;
  }
  if (a5) {
    unint64_t v13 = a3 / a4;
  }
  else {
    unint64_t v13 = a3;
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)v12 + 48))(v12) == v13)
  {
    MIL::ValidationResult::ValidationResult(a6);
    return;
  }
  uint64_t v17 = (std::__shared_weak_count *)a1[1];
  uint64_t v20 = *a1;
  int v21 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v18, "Channel does not match number of output filters.");
  MEMORY[0x21667B340](a6, &v20, 315, v18);
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  uint64_t v15 = v21;
  if (v21) {
    goto LABEL_15;
  }
}

void sub_210B2FED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

unint64_t ANEMachineIR::Validators::KernelDataBytesPerNE(uint64_t *a1, int a2, unsigned int a3, int a4, uint64_t a5, int a6, int a7, int a8)
{
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1] - *a1;
  uint64_t v10 = v9 >> 3;
  unint64_t v11 = (v9 >> 3) - 3;
  if (v9 >> 3 == 6)
  {
    uint64_t v12 = *(void *)(v8 + 8);
    goto LABEL_5;
  }
  if (v11 >= 2)
  {
    uint64_t v12 = 1;
LABEL_5:
    if ((unint64_t)v9 > 0x18)
    {
      uint64_t v13 = *(void *)(v8 + 8 * v10 - 32);
      goto LABEL_9;
    }
LABEL_48:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if ((unint64_t)v9 <= 0x10) {
    goto LABEL_48;
  }
  uint64_t v13 = 1;
  uint64_t v12 = 1;
LABEL_9:
  uint64_t v14 = *(void *)(v8 + 8 * v11);
  uint64_t v15 = *(void *)(v8 + 8 * v10 - 16);
  uint64_t v16 = 128;
  if (!a8) {
    uint64_t v16 = 0;
  }
  uint64_t v17 = v16 + vcvtd_n_u64_f64(ceil((double)(unint64_t)((uint64_t)(2 << (a3 - 1)) << (a2 == 4)) * 0.015625), 6uLL);
  if (a3) {
    uint64_t v16 = v17;
  }
  if (a6 == 1)
  {
    if (a4)
    {
      uint64_t v18 = v16 + 2;
      if (a7 != 2)
      {
        BOOL v19 = a7 == 1;
        v16 += 4;
LABEL_24:
        if (!v19) {
          uint64_t v16 = v18;
        }
        uint64_t v20 = 0;
        goto LABEL_43;
      }
      uint64_t v20 = 0;
      v16 += 2;
LABEL_40:
      v20 += 2 * a5;
      goto LABEL_43;
    }
    uint64_t v18 = v16 + 64;
    if (a7 != 2)
    {
      BOOL v19 = a7 == 1;
      v16 += 128;
      goto LABEL_24;
    }
    uint64_t v20 = 0;
    v16 += 64;
LABEL_42:
    v20 += vcvtd_n_u64_f64(ceil((double)(unint64_t)(2 * a5) * 0.015625), 6uLL);
    goto LABEL_43;
  }
  if (a7 != 1)
  {
    if (a6 == 2)
    {
      if (a4)
      {
        uint64_t v20 = 2 * a5;
        if (a7 != 2) {
          goto LABEL_43;
        }
        goto LABEL_40;
      }
      goto LABEL_33;
    }
    if (a7 == 2)
    {
      uint64_t v20 = 0;
      if (a4) {
        goto LABEL_40;
      }
      goto LABEL_42;
    }
LABEL_38:
    uint64_t v20 = 0;
    goto LABEL_43;
  }
  if ((a4 & 1) == 0)
  {
    v16 += 64;
    if (a6 == 2)
    {
LABEL_33:
      uint64_t v20 = vcvtd_n_u64_f64(ceil((double)(unint64_t)(2 * a5) * 0.015625), 6uLL);
      if (a7 != 2) {
        goto LABEL_43;
      }
      goto LABEL_42;
    }
    goto LABEL_38;
  }
  v16 += 2;
  uint64_t v20 = 2 * a5;
  if (a6 != 2) {
    uint64_t v20 = 0;
  }
LABEL_43:
  uint64_t v21 = 8;
  if (a2 == 4) {
    uint64_t v21 = 16;
  }
  if (a3) {
    uint64_t v21 = a3;
  }
  return v16 + v20 + vcvtpd_u64_f64((double)(unint64_t)(v21 * a5 * v12 * v13 * v14 * v15) * 0.125);
}

uint64_t ANEMachineIR::Validators::ParseConvParameterValues@<X0>(MIL::IRObject *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v160, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  unint64_t v11 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v161) < 0) {
    operator delete(v160);
  }
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
  uint64_t v13 = (std::__shared_weak_count *)LocationPtr[1];
  uint64_t v158 = *LocationPtr;
  uint64_t v159 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v149, "x");
  std::string::basic_string[abi:ne180100]<0>(&__p, "ne_conv");
  ANEMachineIR::Validators::ValidateLiveTensorSize(&v158, (uint64_t)v11, (uint64_t)&v149, (uint64_t)&__p, (MIL::ValidationResult *)&v160);
  if (SHIBYTE(v145) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v150) < 0) {
    operator delete(v149);
  }
  if (v159) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v159);
  }
  if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v160) & 1) == 0)
  {
    *(_OWORD *)(a5 + 8) = v161;
    long long v161 = 0uLL;
    *(_OWORD *)(a5 + 24) = v162;
    *(void *)(a5 + 40) = v163;
    long long v162 = 0uLL;
    uint64_t v163 = 0;
    *(void *)a5 = MEMORY[0x263F52F88] + 16;
    *(_DWORD *)(a5 + 48) = v164;
    return MEMORY[0x21667B360](&v160);
  }
  ANEMachineIR::Utils::GetStaticTensorShape(v11, v14, (uint64_t)&v149);
  uint64_t v15 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v15;
    operator delete(v15);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  uint64_t v16 = v149;
  *(void *)a2 = v149;
  uint64_t v137 = v150;
  *(_OWORD *)(a2 + 8) = v150;
  uint64_t v17 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a1 + 176))(a1);
  if (*(void *)(v17 + 8) == *(void *)v17) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v17);
  BOOL v19 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(Type);
  ANEMachineIR::Utils::GetStaticTensorShape(v19, v20, (uint64_t)&v149);
  uint64_t v21 = *(void **)a3;
  if (*(void *)a3)
  {
    *(void *)(a3 + 8) = v21;
    operator delete(v21);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  int v22 = v149;
  *(void *)a3 = v149;
  char v23 = (unsigned char *)v150;
  *(_OWORD *)(a3 + 8) = v150;
  uint64_t v24 = (v23 - (unsigned char *)v22) >> 3;
  if (v24 != (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3)
  {
    char v29 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    uint64_t v30 = (std::__shared_weak_count *)v29[1];
    uint64_t v156 = *v29;
    v157 = v30;
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v154, "Output should have the same rank as x parameter");
    MEMORY[0x21667B340](a5, &v156, 315, v154);
    if (v155 < 0) {
      operator delete(v154[0]);
    }
    if (v157) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v157);
    }
    return MEMORY[0x21667B360](&v160);
  }
  if (v23 == (unsigned char *)v22) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v25 = v22[v24 - 1];
  std::string::basic_string[abi:ne180100]<0>(&v149, "group_kernel_reuse");
  uint64_t ParameterValue = MIL::IROperation::TryGetParameterValue();
  int v28 = ParameterValue
     && (*(uint64_t (**)(uint64_t))(*(void *)ParameterValue + 40))(ParameterValue)
     && (char v27 = (unsigned char *)MEMORY[0x21667B850]()) != 0
     && *v27 != 0;
  if (SHIBYTE(v150) < 0) {
    operator delete(v149);
  }
  std::string::basic_string[abi:ne180100]<0>(&v149, "num_groups");
  uint64_t v31 = MIL::IROperation::TryGetParameterValue();
  if (v31
    && (*(uint64_t (**)(uint64_t))(*(void *)v31 + 40))(v31)
    && (uint64_t v32 = (int *)MEMORY[0x21667B880]()) != 0)
  {
    int v33 = *v32;
  }
  else
  {
    int v33 = 1;
  }
  if (SHIBYTE(v150) < 0) {
    operator delete(v149);
  }
  std::string::basic_string[abi:ne180100]<0>(&v149, "bias");
  uint64_t v34 = MIL::IROperation::TryGetParameterValue();
  uint64_t v35 = v34;
  if (SHIBYTE(v150) < 0)
  {
    operator delete(v149);
    if (!v35) {
      goto LABEL_49;
    }
  }
  else if (!v34)
  {
    goto LABEL_49;
  }
  uint64_t v36 = MIL::IRValue::AsTensor((MIL::IRValue *)v35);
  if (MEMORY[0x21667B820](v36))
  {
    uint64_t v35 = 1;
  }
  else
  {
    char v37 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    uint64_t v38 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(void *)v35 + 32))(v35);
    uint64_t v39 = MIL::IRValueType::AsTensorType(v38);
    ANEMachineIR::Validators::ValidateChannelVectorShape(v37, v39, v25, v33, v28, (MIL::ValidationResult *)a5);
    if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)a5) & 1) == 0) {
      return MEMORY[0x21667B360](&v160);
    }
    unint64_t v40 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(void *)v35 + 32))(v35);
    uint64_t v41 = MIL::IRValueType::AsTensorType(v40);
    uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 96))(v41);
    if (*(void *)(v42 + 8) == *(void *)v42) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v43 = MIL::IRDimension::AsConstant(**(MIL::IRDimension ***)v42);
    uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v43 + 48))(v43);
    MEMORY[0x21667B360](a5);
  }
LABEL_49:
  std::string::basic_string[abi:ne180100]<0>(&v149, "post_scale");
  uint64_t v44 = MIL::IROperation::TryGetParameterValue();
  unint64_t v45 = (MIL::IRValue *)v44;
  if (SHIBYTE(v150) < 0)
  {
    operator delete(v149);
    if (v45) {
      goto LABEL_51;
    }
LABEL_54:
    uint64_t v47 = 0;
    goto LABEL_58;
  }
  if (!v44) {
    goto LABEL_54;
  }
LABEL_51:
  uint64_t v46 = MIL::IRValue::AsTensor(v45);
  if (MEMORY[0x21667B820](v46))
  {
    uint64_t v47 = 1;
    goto LABEL_58;
  }
  uint64_t v48 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
  unint64_t v49 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::IRValue *))(*(void *)v45 + 32))(v45);
  uint64_t v50 = MIL::IRValueType::AsTensorType(v49);
  ANEMachineIR::Validators::ValidateChannelVectorShape(v48, v50, v25, v33, v28, (MIL::ValidationResult *)a5);
  if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)a5))
  {
    unint64_t v51 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::IRValue *))(*(void *)v45 + 32))(v45);
    uint64_t v52 = MIL::IRValueType::AsTensorType(v51);
    uint64_t v53 = (*(uint64_t (**)(uint64_t))(*(void *)v52 + 96))(v52);
    if (*(void *)(v53 + 8) == *(void *)v53) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v54 = MIL::IRDimension::AsConstant(**(MIL::IRDimension ***)v53);
    uint64_t v47 = (*(uint64_t (**)(uint64_t))(*(void *)v54 + 48))(v54);
    MEMORY[0x21667B360](a5);
LABEL_58:
    std::string::basic_string[abi:ne180100]<0>(&v149, "transposed");
    uint64_t v55 = MIL::IROperation::TryGetParameterValue();
    BOOL v57 = v55
       && (*(uint64_t (**)(uint64_t))(*(void *)v55 + 40))(v55)
       && (uint64_t v56 = (unsigned char *)MEMORY[0x21667B850]()) != 0
       && *v56 != 0;
    uint64_t v58 = ((v137 - (uint64_t)v16) >> 3) - 2;
    if (SHIBYTE(v150) < 0) {
      operator delete(v149);
    }
    uint64_t v138 = ((v137 - (uint64_t)v16) >> 3) - 2;
    *(void *)a4 = v58;
    *(void *)(a4 + 8) = v33;
    *(unsigned char *)(a4 + 16) = v28;
    *(unsigned char *)(a4 + 17) = 0;
    *(unsigned char *)(a4 + 18) = v57;
    *(void *)(a4 + 96) = v35;
    *(void *)(a4 + 104) = v47;
    std::string::basic_string[abi:ne180100]<0>(&__p, "strides");
    long long v59 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
    uint64_t v60 = MIL::IRValueType::AsTensorType(v59);
    if (SHIBYTE(v145) < 0) {
      operator delete(__p);
    }
    unint64_t v61 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v60 + 96))(v60);
    if (v61[1] == *v61) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v62 = (*(uint64_t (**)(void))(**(void **)*v61 + 16))();
    if (v62)
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)v62 + 48))(v62) == v58)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "strides");
        unint64_t v63 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
        MIL::IRValue::AsTensor(v63);
        uint64_t Data = (void *)MIL::IRTensorValue::GetDataView<int>();
        uint64_t v66 = v65;
        float v139 = Data;
        *(void *)&long long v140 = v65;
        if (SHIBYTE(v145) < 0) {
          operator delete(__p);
        }
        *(void *)(a4 + 32) = *(void *)(a4 + 24);
        if (v66)
        {
          unint64_t v67 = 0;
          uint64_t v68 = (void **)(a4 + 24);
          do
          {
            unint64_t v69 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](&v139, v67);
            uint64_t v70 = v69;
            uint64_t v72 = *(char **)(a4 + 32);
            unint64_t v71 = *(void *)(a4 + 40);
            if ((unint64_t)v72 >= v71)
            {
              uint64_t v74 = (char *)*v68;
              uint64_t v75 = (v72 - (unsigned char *)*v68) >> 2;
              unint64_t v76 = v75 + 1;
              if ((unint64_t)(v75 + 1) >> 62) {
                std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v77 = v71 - (void)v74;
              if (v77 >> 1 > v76) {
                unint64_t v76 = v77 >> 1;
              }
              if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v78 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v78 = v76;
              }
              if (v78)
              {
                long long v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 40, v78);
                uint64_t v74 = *(char **)(a4 + 24);
                uint64_t v72 = *(char **)(a4 + 32);
              }
              else
              {
                long long v79 = 0;
              }
              uint64_t v80 = &v79[4 * v75];
              *(_DWORD *)uint64_t v80 = *v70;
              unint64_t v73 = v80 + 4;
              while (v72 != v74)
              {
                int v81 = *((_DWORD *)v72 - 1);
                v72 -= 4;
                *((_DWORD *)v80 - 1) = v81;
                v80 -= 4;
              }
              *(void *)(a4 + 24) = v80;
              *(void *)(a4 + 32) = v73;
              *(void *)(a4 + 40) = &v79[4 * v78];
              if (v74) {
                operator delete(v74);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v72 = *v69;
              unint64_t v73 = v72 + 4;
            }
            *(void *)(a4 + 32) = v73;
            ++v67;
          }
          while ((unint64_t)v140 > v67);
        }
        MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)&v149);
        uint64_t v82 = v138;
        goto LABEL_102;
      }
      uint64_t v85 = MIL::IRObject::GetLocationPtr(a1);
      uint64_t v86 = *(void *)(v85 + 8);
      float v139 = *(void **)v85;
      *(void *)&long long v140 = v86;
      if (v86) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v86 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "'strides' vector must have equal length to the number of spatial dimensions.");
      uint64_t v82 = v58;
      MEMORY[0x21667B340](&v149, &v139, 315, &__p);
    }
    else
    {
      uint64_t v83 = MIL::IRObject::GetLocationPtr(a1);
      uint64_t v84 = *(void *)(v83 + 8);
      float v139 = *(void **)v83;
      *(void *)&long long v140 = v84;
      if (v84) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v84 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "'strides' parameter must have static shape.");
      uint64_t v82 = v58;
      MEMORY[0x21667B340](&v149, &v139, 302, &__p);
    }
    if (SHIBYTE(v145) < 0) {
      operator delete(__p);
    }
    if ((void)v140) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v140);
    }
LABEL_102:
    if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v149) & 1) == 0)
    {
      *(_OWORD *)(a5 + 8) = v150;
      long long v150 = 0uLL;
      *(_OWORD *)(a5 + 24) = v151;
      *(void *)(a5 + 40) = v152;
      long long v151 = 0uLL;
      uint64_t v152 = 0;
      *(void *)a5 = MEMORY[0x263F52F88] + 16;
      *(_DWORD *)(a5 + 48) = v153;
LABEL_195:
      MEMORY[0x21667B360](&v149);
      return MEMORY[0x21667B360](&v160);
    }
    uint64_t v88 = (void **)(a4 + 72);
    uint64_t v87 = *(char **)(a4 + 72);
    *(void *)(a4 + 80) = v87;
    uint64_t v89 = 2 * v82;
    if (v82)
    {
      uint64_t v90 = 0;
      uint64_t v91 = (void *)(a4 + 88);
      do
      {
        if ((unint64_t)v87 >= *v91)
        {
          uint64_t v93 = (char *)*v88;
          uint64_t v94 = (v87 - (unsigned char *)*v88) >> 2;
          unint64_t v95 = v94 + 1;
          if ((unint64_t)(v94 + 1) >> 62) {
            std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v96 = *v91 - (void)v93;
          if (v96 >> 1 > v95) {
            unint64_t v95 = v96 >> 1;
          }
          if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v97 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v97 = v95;
          }
          if (v97)
          {
            uint64_t v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 88, v97);
            uint64_t v93 = *(char **)(a4 + 72);
            uint64_t v87 = *(char **)(a4 + 80);
          }
          else
          {
            uint64_t v98 = 0;
          }
          uint64_t v99 = &v98[4 * v94];
          *(_DWORD *)uint64_t v99 = 0;
          uint64_t v92 = v99 + 4;
          while (v87 != v93)
          {
            int v100 = *((_DWORD *)v87 - 1);
            v87 -= 4;
            *((_DWORD *)v99 - 1) = v100;
            v99 -= 4;
          }
          *(void *)(a4 + 72) = v99;
          *(void *)(a4 + 80) = v92;
          *(void *)(a4 + 88) = &v98[4 * v97];
          if (v93) {
            operator delete(v93);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v87 = 0;
          uint64_t v92 = v87 + 4;
        }
        *(void *)(a4 + 80) = v92;
        ++v90;
        uint64_t v87 = v92;
      }
      while (v90 != v89);
    }
    std::string::basic_string[abi:ne180100]<0>(&v139, "pad");
    uint64_t v101 = (MIL::IRValueType *)MIL::IROperation::TryGetParameterType();
    if (SHIBYTE(v140) < 0) {
      operator delete(v139);
    }
    if (!v101) {
      goto LABEL_133;
    }
    uint64_t v102 = MIL::IRValueType::AsTensorType(v101);
    long long v103 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v102 + 96))(v102);
    if (v103[1] == *v103) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v104 = (*(uint64_t (**)(void))(**(void **)*v103 + 16))();
    if (v104)
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)v104 + 48))(v104) == v89)
      {
        std::string::basic_string[abi:ne180100]<0>(&v139, "pad");
        int v105 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
        MIL::IRValue::AsTensor(v105);
        float v167 = (void *)MIL::IRTensorValue::GetDataView<int>();
        float v168 = v106;
        if (SHIBYTE(v140) < 0) {
          operator delete(v139);
        }
        if (v138)
        {
          unint64_t v107 = 0;
          do
          {
            *((_DWORD *)*v88 + v107) = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](&v167, v107);
            ++v107;
          }
          while (v89 != v107);
        }
LABEL_133:
        MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)&__p);
        goto LABEL_146;
      }
      uint64_t v110 = MIL::IRObject::GetLocationPtr(a1);
      std::string v111 = *(std::__shared_weak_count **)(v110 + 8);
      float v167 = *(void **)v110;
      float v168 = v111;
      if (v111) {
        atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v139, "'pad' vector must have equal length to double the number of spatial dimensions.");
      MEMORY[0x21667B340](&__p, &v167, 315, &v139);
    }
    else
    {
      uint64_t v108 = MIL::IRObject::GetLocationPtr(a1);
      uint64_t v109 = *(std::__shared_weak_count **)(v108 + 8);
      float v167 = *(void **)v108;
      float v168 = v109;
      if (v109) {
        atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v139, "'pad' parameter must have static shape.");
      MEMORY[0x21667B340](&__p, &v167, 302, &v139);
    }
    if (SHIBYTE(v140) < 0) {
      operator delete(v139);
    }
    if (v168) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v168);
    }
LABEL_146:
    if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&__p) & 1) == 0)
    {
      *(_OWORD *)(a5 + 8) = v145;
      long long v145 = 0uLL;
      *(_OWORD *)(a5 + 24) = v146;
      *(void *)(a5 + 40) = v147;
      long long v146 = 0uLL;
      uint64_t v147 = 0;
      *(void *)a5 = MEMORY[0x263F52F88] + 16;
      *(_DWORD *)(a5 + 48) = v148;
LABEL_194:
      MEMORY[0x21667B360](&__p);
      goto LABEL_195;
    }
    std::string v113 = (void **)(a4 + 48);
    std::string v112 = *(char **)(a4 + 48);
    *(void *)(a4 + 56) = v112;
    if (v138)
    {
      uint64_t v114 = 0;
      std::string::size_type v115 = (void *)(a4 + 64);
      do
      {
        if ((unint64_t)v112 >= *v115)
        {
          uint64_t v117 = (char *)*v113;
          uint64_t v118 = (v112 - (unsigned char *)*v113) >> 2;
          unint64_t v119 = v118 + 1;
          if ((unint64_t)(v118 + 1) >> 62) {
            std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v120 = *v115 - (void)v117;
          if (v120 >> 1 > v119) {
            unint64_t v119 = v120 >> 1;
          }
          if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v121 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v121 = v119;
          }
          if (v121)
          {
            long long v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 64, v121);
            uint64_t v117 = *(char **)(a4 + 48);
            std::string v112 = *(char **)(a4 + 56);
          }
          else
          {
            long long v122 = 0;
          }
          uint64_t v123 = &v122[4 * v118];
          *(_DWORD *)uint64_t v123 = 1;
          uint64_t v116 = v123 + 4;
          while (v112 != v117)
          {
            int v124 = *((_DWORD *)v112 - 1);
            v112 -= 4;
            *((_DWORD *)v123 - 1) = v124;
            v123 -= 4;
          }
          *(void *)(a4 + 48) = v123;
          *(void *)(a4 + 56) = v116;
          *(void *)(a4 + 64) = &v122[4 * v121];
          if (v117) {
            operator delete(v117);
          }
        }
        else
        {
          *(_DWORD *)std::string v112 = 1;
          uint64_t v116 = v112 + 4;
        }
        *(void *)(a4 + 56) = v116;
        ++v114;
        std::string v112 = v116;
      }
      while (v114 != v138);
    }
    std::string::basic_string[abi:ne180100]<0>(&v167, "dilations");
    float v125 = (MIL::IRValueType *)MIL::IROperation::TryGetParameterType();
    if (v169 < 0) {
      operator delete(v167);
    }
    if (!v125) {
      goto LABEL_177;
    }
    uint64_t v126 = MIL::IRValueType::AsTensorType(v125);
    long long v127 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v126 + 96))(v126);
    if (v127[1] == *v127) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v128 = (*(uint64_t (**)(void))(**(void **)*v127 + 16))();
    if (v128)
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)v128 + 48))(v128) == v138)
      {
        std::string::basic_string[abi:ne180100]<0>(&v167, "dilations");
        int v129 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
        MIL::IRValue::AsTensor(v129);
        uint64_t v165 = MIL::IRTensorValue::GetDataView<int>();
        uint64_t v166 = v130;
        if (v169 < 0) {
          operator delete(v167);
        }
        if (v138)
        {
          for (unint64_t i = 0; i != v138; ++i)
            *((_DWORD *)*v113 + i) = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](&v165, i);
        }
LABEL_177:
        MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)&v139);
LABEL_190:
        if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v139))
        {
          MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a5);
        }
        else
        {
          *(_OWORD *)(a5 + 8) = v140;
          long long v140 = 0uLL;
          *(_OWORD *)(a5 + 24) = v141;
          *(void *)(a5 + 40) = v142;
          long long v141 = 0uLL;
          uint64_t v142 = 0;
          *(void *)a5 = MEMORY[0x263F52F88] + 16;
          *(_DWORD *)(a5 + 48) = v143;
        }
        MEMORY[0x21667B360](&v139);
        goto LABEL_194;
      }
      int v134 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
      v135 = (std::__shared_weak_count *)v134[1];
      uint64_t v165 = *v134;
      uint64_t v166 = v135;
      if (v135) {
        atomic_fetch_add_explicit(&v135->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v167, "'dilations' vector must have equal length to the number of spatial dimensions.");
      MEMORY[0x21667B340](&v139, &v165, 315, &v167);
    }
    else
    {
      long long v132 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
      uint64_t v133 = (std::__shared_weak_count *)v132[1];
      uint64_t v165 = *v132;
      uint64_t v166 = v133;
      if (v133) {
        atomic_fetch_add_explicit(&v133->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v167, "'dilations' parameter must have static shape.");
      MEMORY[0x21667B340](&v139, &v165, 302, &v167);
    }
    if (v169 < 0) {
      operator delete(v167);
    }
    if (v166) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v166);
    }
    goto LABEL_190;
  }
  return MEMORY[0x21667B360](&v160);
}

void sub_210B31214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49)
{
  if (*(char *)(v49 - 89) < 0) {
    operator delete(*(void **)(v49 - 112));
  }
  unint64_t v51 = *(std::__shared_weak_count **)(v49 - 120);
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  MEMORY[0x21667B360](&a22);
  MEMORY[0x21667B360](&a32);
  MEMORY[0x21667B360](v49 - 184);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::Validators::ValidateNeConv@<X0>(MIL::IRObject *a1@<X0>, uint64_t a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  uint64_t v5 = MIL::IRValueType::AsTensorType(ParameterType);
  if (v84 < 0) {
    operator delete(__p[0]);
  }
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
  uint64_t v7 = (std::__shared_weak_count *)LocationPtr[1];
  uint64_t v144 = *LocationPtr;
  long long v145 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  std::string::basic_string[abi:ne180100]<0>(&v139, "ne_conv");
  ANEMachineIR::Validators::ValidateLiveTensorSize(&v144, v5, (uint64_t)__p, (uint64_t)&v139, (MIL::ValidationResult *)v146);
  if (SHIBYTE(v140) < 0) {
    operator delete(v139);
  }
  if (v84 < 0) {
    operator delete(__p[0]);
  }
  if (v145) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v145);
  }
  if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)v146))
  {
    uint64_t v8 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a1 + 176))(a1);
    if (*(void *)(v8 + 8) == *(void *)v8) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v8);
    uint64_t v10 = MIL::IRValueType::AsTensorType(Type);
    unint64_t v11 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    uint64_t v12 = (std::__shared_weak_count *)v11[1];
    uint64_t v137 = *v11;
    uint64_t v138 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "output");
    std::string::basic_string[abi:ne180100]<0>(&v78, "ne_conv");
    ANEMachineIR::Validators::ValidateLiveTensorSize(&v137, v10, (uint64_t)__p, (uint64_t)&v78, (MIL::ValidationResult *)&v139);
    if (SHIBYTE(v79) < 0) {
      operator delete(v78);
    }
    if (v84 < 0) {
      operator delete(__p[0]);
    }
    if (v138) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v138);
    }
    if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v139) & 1) == 0)
    {
      *(_OWORD *)(a2 + 8) = v140;
      long long v140 = 0uLL;
      *(_OWORD *)(a2 + 24) = v141;
      *(void *)(a2 + 40) = v142;
      long long v141 = 0uLL;
      uint64_t v142 = 0;
      *(void *)a2 = MEMORY[0x263F52F88] + 16;
      *(_DWORD *)(a2 + 48) = v143;
LABEL_89:
      MEMORY[0x21667B360](&v139);
      return MEMORY[0x21667B360](v146);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "dense_kernel");
    uint64_t ParameterValue = MIL::IROperation::TryGetParameterValue();
    if (v84 < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "alternative_format_kernel_coefficients");
    uint64_t v14 = MIL::IROperation::TryGetParameterValue();
    if (v84 < 0) {
      operator delete(__p[0]);
    }
    if (!(ParameterValue | v14))
    {
      uint64_t v15 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
      uint64_t v16 = (std::__shared_weak_count *)v15[1];
      uint64_t v135 = *v15;
      char v136 = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v133, "Must specify one of 'dense_kernel' and 'alternative_format_kernel_coefficients'");
      MEMORY[0x21667B340](a2, &v135, 319, v133);
      if (v134 < 0) {
        operator delete(v133[0]);
      }
      uint64_t v17 = v136;
      if (!v136) {
        goto LABEL_89;
      }
      goto LABEL_42;
    }
    if (ParameterValue && v14)
    {
      BOOL v19 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
      uint64_t v20 = (std::__shared_weak_count *)v19[1];
      uint64_t v131 = *v19;
      long long v132 = v20;
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v129, "Cannot specify both of 'dense_kernel' and 'alternative_format_kernel_coefficients'");
      MEMORY[0x21667B340](a2, &v131, 319, v129);
      if (v130 < 0) {
        operator delete(v129[0]);
      }
      uint64_t v17 = v132;
      if (!v132) {
        goto LABEL_89;
      }
LABEL_42:
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      goto LABEL_89;
    }
    long long v127 = 0;
    uint64_t v126 = 0;
    uint64_t v128 = 0;
    if (ParameterValue)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "sparse_mask");
      uint64_t v21 = MIL::IROperation::TryGetParameterValue();
      if (v84 < 0) {
        operator delete(__p[0]);
      }
      if (v21)
      {
        int v22 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
        char v23 = (std::__shared_weak_count *)v22[1];
        uint64_t v124 = *v22;
        float v125 = v23;
        if (v23) {
          atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v122, "'sparse_mask' is incompatible with 'dense_kernel'");
        MEMORY[0x21667B340](a2, &v124, 319, v122);
        if (v123 < 0) {
          operator delete(v122[0]);
        }
        uint64_t v24 = v125;
        if (!v125) {
          goto LABEL_87;
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "sparse_num_nonzero");
        uint64_t v28 = MIL::IROperation::TryGetParameterValue();
        if (v84 < 0) {
          operator delete(__p[0]);
        }
        if (v28)
        {
          char v29 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
          uint64_t v30 = (std::__shared_weak_count *)v29[1];
          uint64_t v120 = *v29;
          unint64_t v121 = v30;
          if (v30) {
            atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(v118, "'sparse_num_nonzero' is incompatible with 'dense_kernel'");
          MEMORY[0x21667B340](a2, &v120, 319, v118);
          if (v119 < 0) {
            operator delete(v118[0]);
          }
          uint64_t v24 = v121;
          if (!v121) {
            goto LABEL_87;
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "sparse_num_nonzero_per_filter");
          uint64_t v31 = MIL::IROperation::TryGetParameterValue();
          if (v84 < 0) {
            operator delete(__p[0]);
          }
          if (v31)
          {
            uint64_t v32 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
            int v33 = (std::__shared_weak_count *)v32[1];
            uint64_t v116 = *v32;
            uint64_t v117 = v33;
            if (v33) {
              atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(v114, "'sparse_num_nonzero_per_filter' is incompatible with 'dense_kernel'");
            MEMORY[0x21667B340](a2, &v116, 319, v114);
            if (v115 < 0) {
              operator delete(v114[0]);
            }
            uint64_t v24 = v117;
            if (!v117) {
              goto LABEL_87;
            }
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "palette_table");
            uint64_t v34 = MIL::IROperation::TryGetParameterValue();
            if (v84 < 0) {
              operator delete(__p[0]);
            }
            if (!v34)
            {
              uint64_t v38 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(void *)ParameterValue + 32))(ParameterValue);
              uint64_t v39 = MIL::IRValueType::AsTensorType(v38);
              unint64_t v40 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v39 + 96))(v39);
              uint64_t v41 = *v40;
              uint64_t v42 = v40[1];
              while (1)
              {
                if (v41 == v42)
                {
                  uint64_t v44 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(void *)ParameterValue + 32))(ParameterValue);
                  uint64_t v45 = MIL::IRValueType::AsTensorType(v44);
                  int v25 = (*(uint64_t (**)(uint64_t))(*(void *)v45 + 88))(v45);
                  if (v14) {
                    goto LABEL_54;
                  }
                  goto LABEL_96;
                }
                uint64_t v43 = (*(uint64_t (**)(void))(**(void **)v41 + 16))();
                if (!v43) {
                  break;
                }
                __p[0] = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v43 + 48))(v43);
                std::vector<unsigned long long>::push_back[abi:ne180100]((uint64_t)&v126, __p);
                v41 += 8;
              }
              uint64_t v58 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
              long long v59 = (std::__shared_weak_count *)v58[1];
              uint64_t v108 = *v58;
              uint64_t v109 = v59;
              if (v59) {
                atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              std::string::basic_string[abi:ne180100]<0>(v106, "kernel shape must be static.");
              MEMORY[0x21667B340](a2, &v108, 319, v106);
              if (v107 < 0) {
                operator delete(v106[0]);
              }
              uint64_t v24 = v109;
              if (v109) {
                goto LABEL_86;
              }
              goto LABEL_87;
            }
            uint64_t v35 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
            uint64_t v36 = (std::__shared_weak_count *)v35[1];
            uint64_t v112 = *v35;
            std::string v113 = v36;
            if (v36) {
              atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(v110, "'palette_table' is incompatible with 'dense_kernel'");
            MEMORY[0x21667B340](a2, &v112, 319, v110);
            if (v111 < 0) {
              operator delete(v110[0]);
            }
            uint64_t v24 = v113;
            if (!v113)
            {
LABEL_87:
              if (v126)
              {
                long long v127 = v126;
                operator delete(v126);
              }
              goto LABEL_89;
            }
          }
        }
      }
    }
    else
    {
      int v25 = 4;
      if (!v14)
      {
LABEL_96:
        __int16 v101 = 0;
        std::string::basic_string[abi:ne180100]<0>(__p, "post_right_shift");
        MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<signed char>(a1, &v101, (unsigned char *)&v101 + 1, (MIL::ValidationResult *)a2);
        if (v84 < 0) {
          operator delete(__p[0]);
        }
        if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)a2)) {
          goto LABEL_87;
        }
        MEMORY[0x21667B360](a2);
        if ((_BYTE)v101)
        {
          uint64_t v46 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
          uint64_t v47 = (std::__shared_weak_count *)v46[1];
          uint64_t v99 = *v46;
          int v100 = v47;
          if (v47) {
            atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          ANEMachineIR::Validators::ValidatePostRightShiftRange((MIL::ValidationResult *)a2);
          if (v100) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v100);
          }
          if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)a2)) {
            goto LABEL_87;
          }
          MEMORY[0x21667B360](a2);
        }
        __int16 v98 = 0;
        std::string::basic_string[abi:ne180100]<0>(__p, "acc_left_shift");
        MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<signed char>(a1, &v98, (unsigned char *)&v98 + 1, (MIL::ValidationResult *)a2);
        if (v84 < 0) {
          operator delete(__p[0]);
        }
        if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)a2))
        {
          MEMORY[0x21667B360](a2);
          __int16 v97 = 0;
          std::string::basic_string[abi:ne180100]<0>(__p, "acc_bias_shift");
          MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<signed char>(a1, &v97, (unsigned char *)&v97 + 1, (MIL::ValidationResult *)a2);
          if (v84 < 0) {
            operator delete(__p[0]);
          }
          if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)a2))
          {
            MEMORY[0x21667B360](a2);
            uint64_t v94 = 0;
            unint64_t v95 = 0;
            uint64_t v96 = 0;
            uint64_t v91 = 0;
            uint64_t v92 = 0;
            uint64_t v93 = 0;
            uint64_t v89 = 0;
            long long v87 = 0u;
            long long v88 = 0u;
            long long v85 = 0u;
            long long v86 = 0u;
            ANEMachineIR::Validators::ParseConvParameterValues(a1, (uint64_t)&v91, (uint64_t)&v94, (uint64_t)__p, (uint64_t)&v78);
            if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v78))
            {
              BOOL v48 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 88))(v5) == 4;
              __int16 v49 = ANEMachineIR::Validators::BinaryPointFormatOffsets((ANEMachineIR::Validators *)(v25 == 4), v48);
              if (!v90) {
                goto LABEL_121;
              }
              __int16 v50 = v49;
              std::string::basic_string[abi:ne180100]<0>(&v65, "bias");
              unint64_t v51 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
              MIL::IRValue::AsTensor(v51);
              uint64_t v53 = (__int16 *)MIL::IRTensorValue::GetDataView<MIL::Fp16>();
              if (SHIBYTE(v66) < 0)
              {
                uint64_t v54 = v52;
                operator delete(v65);
                uint64_t v52 = v54;
              }
              if (v52)
              {
                uint64_t v55 = 2 * v52;
                while (1)
                {
                  unsigned int v56 = (unsigned __int16)*v53;
                  if (!ANEMachineIR::Validators::NeuralEngineAccumulatorInitLegal(*v53, SHIBYTE(v97), SHIBYTE(v98), v50))
                  {
                    uint64_t v60 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
                    unint64_t v61 = (std::__shared_weak_count *)v60[1];
                    uint64_t v76 = *v60;
                    uint64_t v77 = v61;
                    if (v61) {
                      atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    std::string::basic_string[abi:ne180100]<0>(v74, "Accumulator initialization out of range.");
                    MEMORY[0x21667B340](a2, &v76, 315, v74);
                    if (v75 < 0) {
                      operator delete(v74[0]);
                    }
                    uint64_t v62 = v77;
                    if (v77) {
                      goto LABEL_147;
                    }
                    goto LABEL_132;
                  }
                  if (!ANEMachineIR::Validators::NeuralEngineBiasShifterExponentLegal(v56, SHIBYTE(v97), SHIBYTE(v98), SHIBYTE(v50)))break; {
                  ++v53;
                  }
                  v55 -= 2;
                  if (!v55) {
                    goto LABEL_121;
                  }
                }
                unint64_t v63 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
                uint64_t v64 = (std::__shared_weak_count *)v63[1];
                uint64_t v72 = *v63;
                unint64_t v73 = v64;
                if (v64) {
                  atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                std::string::basic_string[abi:ne180100]<0>(v70, "Illegal bias shift exponent.");
                MEMORY[0x21667B340](a2, &v72, 315, v70);
                if (v71 < 0) {
                  operator delete(v70[0]);
                }
                uint64_t v62 = v73;
                if (v73) {
LABEL_147:
                }
                  std::__shared_weak_count::__release_shared[abi:ne180100](v62);
              }
              else
              {
LABEL_121:
                uint64_t v57 = MIL::IRObject::GetLocationPtr(a1);
                ANEMachineIR::Validators::ValidateConvParameters(v57, (uint64_t *)&v91, (uint64_t *)&v126, v25, (uint64_t *)&v94, (uint64_t)__p, (uint64_t)&v65);
                if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v65))
                {
                  MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a2);
                }
                else
                {
                  *(_OWORD *)(a2 + 8) = v66;
                  long long v66 = 0uLL;
                  *(_OWORD *)(a2 + 24) = v67;
                  *(void *)(a2 + 40) = v68;
                  long long v67 = 0uLL;
                  uint64_t v68 = 0;
                  *(void *)a2 = MEMORY[0x263F52F88] + 16;
                  *(_DWORD *)(a2 + 48) = v69;
                }
                MEMORY[0x21667B360](&v65);
              }
            }
            else
            {
              *(_OWORD *)(a2 + 8) = v79;
              long long v79 = 0uLL;
              *(_OWORD *)(a2 + 24) = v80;
              *(void *)(a2 + 40) = v81;
              long long v80 = 0uLL;
              uint64_t v81 = 0;
              *(void *)a2 = MEMORY[0x263F52F88] + 16;
              *(_DWORD *)(a2 + 48) = v82;
            }
LABEL_132:
            MEMORY[0x21667B360](&v78);
            ANEMachineIR::Validators::NeConvParameterValues::~NeConvParameterValues((ANEMachineIR::Validators::NeConvParameterValues *)__p);
            if (v91)
            {
              uint64_t v92 = v91;
              operator delete(v91);
            }
            if (v94)
            {
              unint64_t v95 = v94;
              operator delete(v94);
            }
          }
        }
        goto LABEL_87;
      }
LABEL_54:
      uint64_t v26 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
      char v27 = (std::__shared_weak_count *)v26[1];
      uint64_t v104 = *v26;
      int v105 = v27;
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v102, "Alternative kernel (to dense) representations not yet implemented in MIL<aneflow>.");
      MEMORY[0x21667B340](a2, &v104, 309, v102);
      if (v103 < 0) {
        operator delete(v102[0]);
      }
      uint64_t v24 = v105;
      if (!v105) {
        goto LABEL_87;
      }
    }
LABEL_86:
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    goto LABEL_87;
  }
  long long v18 = v148;
  *(_OWORD *)(a2 + 8) = v147;
  long long v147 = 0uLL;
  *(_OWORD *)(a2 + 24) = v18;
  *(void *)(a2 + 40) = v149;
  long long v148 = 0uLL;
  uint64_t v149 = 0;
  *(void *)a2 = MEMORY[0x263F52F88] + 16;
  *(_DWORD *)(a2 + 48) = v150;
  return MEMORY[0x21667B360](v146);
}

void sub_210B320E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,std::__shared_weak_count *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  MEMORY[0x21667B360](&a30);
  ANEMachineIR::Validators::NeConvParameterValues::~NeConvParameterValues((ANEMachineIR::Validators::NeConvParameterValues *)&a37);
  if (a51)
  {
    a52 = (uint64_t)a51;
    operator delete(a51);
  }
  if (a54)
  {
    a55 = (uint64_t)a54;
    operator delete(a54);
  }
  uint64_t v57 = (void *)STACK[0x278];
  if (STACK[0x278])
  {
    STACK[0x280] = (unint64_t)v57;
    operator delete(v57);
  }
  MEMORY[0x21667B360](v55 - 208);
  MEMORY[0x21667B360](v55 - 136);
  _Unwind_Resume(a1);
}

void sub_210B32478(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x210B32470);
}

void std::vector<unsigned long long>::push_back[abi:ne180100](uint64_t a1, void *a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(void **)a1;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a1) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v4, v12);
      uint64_t v8 = *(void **)a1;
      uint64_t v6 = *(void **)(a1 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = *a2;
    uint64_t v7 = v14 + 8;
    while (v6 != v8)
    {
      uint64_t v16 = *--v6;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *uint64_t v6 = *a2;
    uint64_t v7 = v6 + 1;
  }
  *(void *)(a1 + 8) = v7;
}

void MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<signed char>(MIL::IRObject *a1@<X0>, unsigned char *a2@<X2>, unsigned char *a3@<X3>, MIL::ValidationResult *a4@<X8>)
{
  uint64_t ParameterValue = MIL::IROperation::TryGetParameterValue();
  if (!ParameterValue)
  {
    *a2 = 0;
    goto LABEL_25;
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)ParameterValue + 40))(ParameterValue))
  {
    uint64_t v9 = (unsigned char *)MEMORY[0x21667B840]();
    if (v9)
    {
      *a3 = *v9;
      *a2 = 1;
LABEL_25:
      MIL::ValidationResult::ValidationResult(a4);
      return;
    }
  }
  *a2 = 0;
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
  uint64_t v11 = (std::__shared_weak_count *)LocationPtr[1];
  uint64_t v27 = *LocationPtr;
  uint64_t v28 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::operator+<char>();
  unint64_t v12 = std::string::append(&v22, "\" in operation \"");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  uint64_t v14 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a1 + 56))(a1);
  int v15 = *(char *)(v14 + 23);
  if (v15 >= 0) {
    uint64_t v16 = (const std::string::value_type *)v14;
  }
  else {
    uint64_t v16 = *(const std::string::value_type **)v14;
  }
  if (v15 >= 0) {
    std::string::size_type v17 = *(unsigned __int8 *)(v14 + 23);
  }
  else {
    std::string::size_type v17 = *(void *)(v14 + 8);
  }
  long long v18 = std::string::append(&v23, v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  uint64_t v20 = std::string::append(&v24, "\".");
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  std::string::size_type v26 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x21667B340](a4, &v27, 304, __p);
  if (SHIBYTE(v26) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
}

void sub_210B32788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  char v37 = *(std::__shared_weak_count **)(v35 - 56);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  _Unwind_Resume(exception_object);
}

void ANEMachineIR::Validators::NeConvParameterValues::~NeConvParameterValues(ANEMachineIR::Validators::NeConvParameterValues *this)
{
  uint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 6);
  if (v3)
  {
    *((void *)this + 7) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 4) = v4;
    operator delete(v4);
  }
}

uint64_t MIL::Util::Span<int const,18446744073709551615ul>::operator[](void *a1, unint64_t a2)
{
  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_26418A7C0, MEMORY[0x263F8C050]);
  }
  return *a1 + 4 * a2;
}

void sub_210B328BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

std::runtime_error *std::range_error::range_error[abi:ne180100](std::runtime_error *a1, const char *a2)
{
  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x263F8C370] + 16);
  return result;
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void ANEMachineIR::H2021::NeReduce::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210B33EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)&STACK[0x288]);
  if (a68) {
    (*(void (**)(uint64_t))(*(void *)a68 + 8))(a68);
  }
  if (a67) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a67);
  }
  if (__p) {
    operator delete(__p);
  }
  char v71 = (void *)STACK[0x258];
  if (STACK[0x258])
  {
    STACK[0x260] = (unint64_t)v71;
    operator delete(v71);
  }
  uint64_t v72 = *(void **)(v69 - 96);
  if (v72)
  {
    *(void *)(v69 - 88) = v72;
    operator delete(v72);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a69, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x280], 0);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<MIL::IRParameter>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 16 * v6;
    std::vector<std::shared_ptr<MIL::IRParameter>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer(v7);
  }
  return result;
}

void sub_210B34634(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeReduce::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210B35B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)&STACK[0x288]);
  if (a72) {
    (*(void (**)(uint64_t))(*(void *)a72 + 8))(a72);
  }
  if (a71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a71);
  }
  if (__p) {
    operator delete(__p);
  }
  uint64_t v74 = (void *)STACK[0x258];
  if (STACK[0x258])
  {
    STACK[0x260] = (unint64_t)v74;
    operator delete(v74);
  }
  char v75 = *(void **)(v72 - 96);
  if (v75)
  {
    *(void *)(v72 - 88) = v75;
    operator delete(v75);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x200], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x280], 0);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table(result);
    JUMPOUT(0x21667BBD0);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[2],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[2],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_210B3641C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[2],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[2],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_210B364B8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(void *a1, uint64_t a2)
{
  uint64_t v2 = (void *)a2;
  uint64_t v4 = (unsigned __int8 *)(a2 + 16);
  unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), a2 + 16);
  v2[1] = v5;
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v5, v4);
  if (v6) {
    return v6;
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique_perform[abi:ne180100](a1, v2);
  return (unsigned __int8 *)v2;
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[2],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  unint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_210B3657C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      std::string v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v7.i16[0] = vaddlv_u8(v7);
    unint64_t v8 = v7.u32[0];
    if (v7.u32[0] > 1uLL) {
      uint64_t v9 = v4 <= a2 ? a2 % v4 : a2;
    }
    else {
      uint64_t v9 = (v4 - 1) & a2;
    }
    uint64_t v10 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v9);
    if (v10)
    {
      for (unint64_t i = *v10; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v12 = *((void *)i + 1);
        if (v12 == a2)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a3)) {
            return i;
          }
        }
        else
        {
          if (v8 > 1)
          {
            if (v12 >= v4) {
              v12 %= v4;
            }
          }
          else
          {
            v12 &= v4 - 1;
          }
          if (v12 != v9) {
            break;
          }
        }
      }
    }
  }
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v4 || (float)(v14 * (float)v4) < v13)
  {
    BOOL v15 = 1;
    if (v4 >= 3) {
      BOOL v15 = (v4 & (v4 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v4);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__rehash<true>(a1, v18);
  }
  return 0;
}

void *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique_perform[abi:ne180100](void *result, void *a2)
{
  int8x8_t v2 = (int8x8_t)result[1];
  unint64_t v3 = a2[1];
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(void *)&v2) {
      v3 %= *(void *)&v2;
    }
  }
  else
  {
    v3 &= *(void *)&v2 - 1;
  }
  uint64_t v5 = *(void **)(*result + 8 * v3);
  if (v5)
  {
    *a2 = *v5;
LABEL_13:
    *uint64_t v5 = a2;
    goto LABEL_14;
  }
  *a2 = result[2];
  result[2] = a2;
  *(void *)(*result + 8 * v3) = result + 2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v2) {
        v6 %= *(void *)&v2;
      }
    }
    else
    {
      v6 &= *(void *)&v2 - 1;
    }
    uint64_t v5 = (void *)(*result + 8 * v6);
    goto LABEL_13;
  }
LABEL_14:
  ++result[3];
  return result;
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    unint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      int v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *int v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            int v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          int v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    int v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[10],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_210B37000(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[10],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  uint8x8_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *uint8x8_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[10],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_210B3709C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[10],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_210B370EC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[15],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_210B37168(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[15],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  uint8x8_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *uint8x8_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[15],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_210B37204(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[15],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_210B37254(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[5],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_210B372D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[5],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  uint8x8_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *uint8x8_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[5],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_210B3736C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[5],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_210B373BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[17],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_210B37438(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[17],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  uint8x8_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *uint8x8_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[17],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_210B374D4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[17],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_210B37524(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[11],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_210B375A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[11],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  uint8x8_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *uint8x8_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[11],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_210B3763C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[11],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_210B3768C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void ***std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](void ***result, void **a2)
{
  int8x8_t v2 = *result;
  std::runtime_error *result = a2;
  if (v2)
  {
    unint64_t v3 = v2;
    std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100](&v3);
    return (void ***)MEMORY[0x21667BBD0](v2, 0x20C40960023A9);
  }
  return result;
}

uint64_t std::default_delete<std::vector<std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100](uint64_t a1, void **a2)
{
  if (a2)
  {
    int8x8_t v4 = a2;
    std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100](&v4);
    return MEMORY[0x21667BBD0](a2, 0x20C40960023A9);
  }
  return result;
}

void std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int8x8_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<MIL::IRParameter>>::__clear[abi:ne180100]((uint64_t *)v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::shared_ptr<MIL::IRParameter>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    int8x8_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

uint64_t std::vector<std::shared_ptr<MIL::IRParameter>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>,std::reverse_iterator<std::shared_ptr<MIL::IRParameter>*>,std::reverse_iterator<std::shared_ptr<MIL::IRParameter>*>,std::reverse_iterator<std::shared_ptr<MIL::IRParameter>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>,std::reverse_iterator<std::shared_ptr<MIL::IRParameter>*>,std::reverse_iterator<std::shared_ptr<MIL::IRParameter>*>,std::reverse_iterator<std::shared_ptr<MIL::IRParameter>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRParameter>>,std::reverse_iterator<std::shared_ptr<MIL::IRParameter>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRParameter>>,std::reverse_iterator<std::shared_ptr<MIL::IRParameter>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRParameter>>,std::reverse_iterator<std::shared_ptr<MIL::IRParameter>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRParameter>>,std::reverse_iterator<std::shared_ptr<MIL::IRParameter>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    unint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 16;
  }
}

void **std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    int8x8_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

uint64_t *std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::runtime_error *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<MIL::IRParameter  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x21667BBD0);
}

uint64_t std::__shared_ptr_pointer<MIL::IRParameter  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRParameter  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void std::__shared_ptr_pointer<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x21667BBD0);
}

uint64_t std::__shared_ptr_pointer<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table(result);
    JUMPOUT(0x21667BBD0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<std::vector<std::shared_ptr<MIL::IRParameter>> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x21667BBD0);
}

uint64_t std::__shared_ptr_pointer<std::vector<std::shared_ptr<MIL::IRParameter>> *>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<std::vector<std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100](a1 + 24, *(void ***)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<std::vector<std::shared_ptr<MIL::IRParameter>> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::~__func()
{
}

void *std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C315638;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C315638;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ValidationResult (*)(MIL::IROperation const&),std::allocator<MIL::ValidationResult (*)(MIL::IROperation const&)>,MIL::ValidationResult ()(MIL::IROperation const&)>::target_type()
{
}

void *std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__shared_ptr_pointer<MIL::Validation::OpParameterConstraintTarget  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x21667BBD0);
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::OpParameterConstraintTarget  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::OpParameterConstraintTarget  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<MIL::Validation::OpOutputConstraintTarget  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x21667BBD0);
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::OpOutputConstraintTarget  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::OpOutputConstraintTarget  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<MIL::Validation::TensorDTypeConstraints  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x21667BBD0);
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::TensorDTypeConstraints  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::TensorDTypeConstraints  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<MIL::Validation::TensorSymbolicShapeConstraints  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x21667BBD0);
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::TensorSymbolicShapeConstraints  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::TensorSymbolicShapeConstraints  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 24 * a3;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, a2, (uint64_t)a2);
      a2 += 24;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_210B3821C(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    char v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  std::string v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *std::string v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_210B3848C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x28uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
  }
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_210B38538(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    unint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__shared_ptr_pointer<MIL::Validation::PossibleStringValuesConstraints  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x21667BBD0);
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::PossibleStringValuesConstraints  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::PossibleStringValuesConstraints  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[16],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_210B387EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[16],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[16],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_210B38888(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[16],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_210B388D8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[18],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[18],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_210B38954(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[18],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[18],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_210B389F0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[18],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_210B38A40(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[26],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[26],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_210B38ABC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[26],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[26],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_210B38B58(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[26],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_210B38BA8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ANEMachineIR::H2021::NeReduce::Make()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void MilTranslator::OpTranslator::TranslateAvgPool(MilTranslator::OpTranslator *this@<X0>, const MIL::IROperation *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  uint64_t v6 = (*(uint64_t (**)(const MIL::IROperation *, std::string *, void))(*(void *)a2 + 120))(a2, &__p, 0);
  uint64_t v7 = v6;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v6) {
      goto LABEL_3;
    }
LABEL_6:
    *(_DWORD *)a3 = 4;
    std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), "Immediate value inputs not handled.");
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v7) {
    goto LABEL_6;
  }
LABEL_3:
  if (*(char *)(v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v209, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
  }
  else
  {
    long long v8 = *(_OWORD *)v7;
    v209.__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
    *(_OWORD *)&v209.__r_.__value_.__l.__data_ = v8;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  unint64_t v9 = (MIL::IRValueType *)(*(uint64_t (**)(char *, std::string *, uint64_t))(*((void *)a2 + 8) + 16))((char *)a2 + 64, &__p, 1);
  uint8x8_t v11 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  ANEMachineIR::Utils::GetStaticTensorShape(v11, v10, (uint64_t)v208);
  std::string::basic_string[abi:ne180100]<0>(&__p, "kernel_sizes");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "strides");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "exclude_padding_from_average");
  MIL::IROperation::GetParameterValue();
  char v12 = MIL::IRValue::GetScalar<BOOL>();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "ceil_mode");
  MIL::IROperation::GetParameterValue();
  int v13 = MIL::IRValue::GetScalar<BOOL>();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!v13)
  {
    MilTranslator::OpTranslator::GetChannelLastTensorNameMayInsertTranspose((uint64_t)this, (uint64_t)&v209, v11, &v200);
    uint64_t v26 = (MIL::IRNamedValueType ***)(*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 176))(a2);
    uint64_t v27 = **v26;
    uint64_t v28 = (std::__shared_weak_count *)(*v26)[1];
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(v27);
    uint64_t v30 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(Type);
    v198 = 0;
    v197 = 0;
    unint64_t v199 = 0;
    ANEMachineIR::Utils::GetStaticTensorShape(v30, v31, (uint64_t)&v195);
    uint64_t v32 = (void *)(*(uint64_t (**)(ANEMachineIR::Utils *))(*(void *)v11 + 96))(v11);
    MilTranslator::OpTranslator::InferChannelLastTransposeInfo((uint64_t)this, (uint64_t)&v209, (uint64_t)(v32[1] - *v32) >> 3, (uint64_t)&__s);
    MilTranslator::OpTranslator::GetTransposeOpParamPerm((v196 - (unsigned char *)v195) >> 3, (uint64_t)&__s, &v191);
    if (MilTranslator::OpTranslator::IsTransposeRequired(&v191))
    {
      std::string v113 = v28;
      MilTranslator::OpTranslator::InferTransposedShape((uint64_t *)&v195, (unsigned int **)&v191, &v173);
      (*(void (**)(ANEMachineIR::Utils *))(*(void *)v30 + 88))(v30);
      MIL::IRTensorValueType::Make();
      uint64_t Name = MIL::IRNamedValueType::GetName(v27);
      uint64_t v34 = (char *)Name;
      if (*(char *)(Name + 23) >= 0) {
        size_t v35 = *(unsigned __int8 *)(Name + 23);
      }
      else {
        size_t v35 = *(void *)(Name + 8);
      }
      p_str = &__str;
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v35 + 13);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if (v35)
      {
        if (v34[23] >= 0) {
          uint64_t v37 = v34;
        }
        else {
          uint64_t v37 = *(char **)v34;
        }
        memmove(p_str, v37, v35);
      }
      strcpy((char *)p_str + v35, "_channel_last");
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v28 = v113;
        std::string::__init_copy_ctor_external(&v174, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      }
      else
      {
        std::string v174 = __s;
        uint64_t v28 = v113;
      }
      LODWORD(v175) = v193;
      BYTE4(v175) = v194;
      std::string::operator=(&v174, &__str);
      unint64_t v51 = (long long *)MIL::IRNamedValueType::GetName(v27);
      std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>::pair[abi:ne180100]<std::string const&,std::pair<std::string,std::array<unsigned char,5ul>>&,0>(&__p, v51, (long long *)&v174);
      std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>>((uint64_t)this + 296, (unsigned __int8 *)&__p, (long long *)&__p);
      if (SHIBYTE(v140) < 0) {
        operator delete(v138);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v190, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else {
        std::string v190 = __str;
      }
      MIL::IRNamedValueType::Make();
      if (v187) {
        operator new();
      }
      uint64_t v187 = 0;
      uint64_t v52 = v198;
      if ((unint64_t)v198 >= v199)
      {
        uint64_t v54 = (v198 - (char *)v197) >> 4;
        unint64_t v55 = v54 + 1;
        if ((unint64_t)(v54 + 1) >> 60) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v56 = v199 - (void)v197;
        if ((uint64_t)(v199 - (void)v197) >> 3 > v55) {
          unint64_t v55 = v56 >> 3;
        }
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v57 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v57 = v55;
        }
        float v139 = &v199;
        uint64_t v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)&v199, v57);
        long long v59 = &v58[16 * v54];
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v59;
        uint64_t v138 = &v58[16 * v60];
        *(void *)long long v59 = 0;
        *((void *)v59 + 1) = 0;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v59 + 16);
        std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__swap_out_circular_buffer((uint64_t *)&v197, &__p);
        uint64_t v53 = v198;
        std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)&__p.__r_.__value_.__l.__data_);
      }
      else
      {
        *(void *)v198 = 0;
        *((void *)v52 + 1) = 0;
        uint64_t v53 = v52 + 16;
      }
      v198 = v53;
      unint64_t v61 = v187;
      uint64_t v187 = 0;
      if (v61)
      {
        MIL::IRNamedValueType::~IRNamedValueType(v61);
        MEMORY[0x21667BBD0]();
      }
      if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v190.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v174.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      __int16 v50 = (void *)v173.__r_.__value_.__r.__words[0];
      if (!v173.__r_.__value_.__r.__words[0]) {
        goto LABEL_94;
      }
      v173.__r_.__value_.__l.__size_ = v173.__r_.__value_.__r.__words[0];
    }
    else
    {
      uint64_t v38 = MIL::IRNamedValueType::GetName(v27);
      if (*(char *)(v38 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v189, *(const std::string::value_type **)v38, *(void *)(v38 + 8));
      }
      else
      {
        long long v39 = *(_OWORD *)v38;
        v189.__r_.__value_.__r.__words[2] = *(void *)(v38 + 16);
        *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v39;
      }
      MIL::IRNamedValueType::Make();
      if (v174.__r_.__value_.__r.__words[0]) {
        operator new();
      }
      v174.__r_.__value_.__r.__words[0] = 0;
      unint64_t v40 = v198;
      if ((unint64_t)v198 >= v199)
      {
        uint64_t v42 = (v198 - (char *)v197) >> 4;
        unint64_t v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 60) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v44 = v199 - (void)v197;
        if ((uint64_t)(v199 - (void)v197) >> 3 > v43) {
          unint64_t v43 = v44 >> 3;
        }
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v45 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v45 = v43;
        }
        float v139 = &v199;
        uint64_t v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)&v199, v45);
        uint64_t v47 = &v46[16 * v42];
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v47;
        uint64_t v138 = &v46[16 * v48];
        *(void *)uint64_t v47 = 0;
        *((void *)v47 + 1) = 0;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v47 + 16);
        std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__swap_out_circular_buffer((uint64_t *)&v197, &__p);
        unint64_t v41 = v198;
        std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)&__p.__r_.__value_.__l.__data_);
      }
      else
      {
        *(void *)v198 = 0;
        *((void *)v40 + 1) = 0;
        unint64_t v41 = v40 + 16;
      }
      v198 = v41;
      __int16 v49 = (MIL::IRNamedValueType *)v174.__r_.__value_.__r.__words[0];
      v174.__r_.__value_.__r.__words[0] = 0;
      if (v49)
      {
        MIL::IRNamedValueType::~IRNamedValueType(v49);
        MEMORY[0x21667BBD0]();
      }
      if ((SHIBYTE(v189.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_94;
      }
      __int16 v50 = (void *)v189.__r_.__value_.__r.__words[0];
    }
    operator delete(v50);
LABEL_94:
    MilTranslator::OpTranslator::InferTransposedShape((uint64_t *)v208, (unsigned int **)&v191, &v187);
    (*(void (**)(ANEMachineIR::Utils *))(*(void *)v11 + 88))(v11);
    memset(&__p, 0, sizeof(__p));
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v187, (uint64_t)v188, (v188 - v187) >> 3);
    uint64_t v62 = (ANEMachineIR::Utils *)MIL::IRTensorValueType::Make();
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    memset(&v186, 0, sizeof(v186));
    memset(&v174, 0, sizeof(v174));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v174, v205, (uint64_t)v206, (v206 - v205) >> 2);
    v176 = 0;
    float v175 = 0;
    uint64_t v177 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v175, v202, (uint64_t)v203, (v203 - v202) >> 2);
    uint64_t v179 = 0;
    v178 = 0;
    uint64_t v180 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v178, v201.__begin_, (uint64_t)v201.__end_, v201.__end_ - v201.__begin_);
    char v181 = 0;
    char v182 = 0;
    char v63 = v12 ^ 1;
    char v183 = v12 ^ 1;
    __int16 v184 = 1;
    char v185 = 0;
    uint64_t LocationPtr = MIL::IRObject::GetLocationPtr(a2);
    uint64_t v65 = (*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 56))(a2);
    if (v198 == (char *)v197) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v66 = v65;
    long long v67 = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(*v197);
    uint64_t v68 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v67);
    ANEMachineIR::Validators::ValidatePePool(LocationPtr, v66, v62, v68, (uint64_t)&v174, (MIL::ValidationResult *)&v173);
    if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v173))
    {
      std::string::basic_string[abi:ne180100]<0>(&v171, "pe_avg_pool");
      MilTranslator::OpTranslator::AddOperation((uint64_t)this);
      if (v172 < 0) {
        operator delete(v171);
      }
      std::string::basic_string[abi:ne180100]<0>(&v168, "x");
      if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v167, v200.__r_.__value_.__l.__data_, v200.__r_.__value_.__l.__size_);
      }
      else {
        std::string v167 = v200;
      }
      MIL::Builder::OperationBuilder::AddInput();
      if (v170) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v170);
      }
      if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v167.__r_.__value_.__l.__data_);
      }
      if (v169 < 0) {
        operator delete(v168);
      }
      std::string::basic_string[abi:ne180100]<0>(&v164, "kernel_sizes");
      MIL::Builder::OperationBuilder::AddInputInt32();
      if (v166) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v166);
      }
      if (v165 < 0) {
        operator delete(v164);
      }
      std::string::basic_string[abi:ne180100]<0>(&v161, "strides");
      MIL::Builder::OperationBuilder::AddInputInt32();
      if (v163) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v163);
      }
      if (v162 < 0) {
        operator delete(v161);
      }
      std::string::basic_string[abi:ne180100]<0>(&v158, "custom_pads");
      memset(&__p, 0, sizeof(__p));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v201.__begin_, (uint64_t)v201.__end_, v201.__end_ - v201.__begin_);
      MIL::Builder::OperationBuilder::AddInputInt32();
      if (v160) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v160);
      }
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v159 < 0) {
        operator delete(v158);
      }
      std::string::basic_string[abi:ne180100]<0>(&v155, "include_pads");
      MIL::Builder::OperationBuilder::AddInputBool();
      if (v157) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v157);
      }
      if (v156 < 0) {
        operator delete(v155);
      }
      if (v198 == (char *)v197) {
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v81 = MIL::IRNamedValueType::GetName(*v197);
      if (*(char *)(v81 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v153, *(const std::string::value_type **)v81, *(void *)(v81 + 8));
      }
      else
      {
        long long v82 = *(_OWORD *)v81;
        v153.__r_.__value_.__r.__words[2] = *(void *)(v81 + 16);
        *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v82;
      }
      if (v198 == (char *)v197) {
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
      MIL::IRNamedValueType::GetType(*v197);
      MIL::Builder::OperationBuilder::AddOutput();
      if (v154) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v154);
      }
      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v153.__r_.__value_.__l.__data_);
      }
      *(_DWORD *)a3 = 0;
      std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), (char *)&unk_210C6BFE7);
      if (__str.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
      }
    }
    else
    {
      MIL::MILResult::GetMessage((MIL::MILResult *)&v173);
      std::operator+<char>();
      uint64_t v69 = std::string::append(&__str, "; ");
      long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v70;
      v69->__r_.__value_.__l.__size_ = 0;
      v69->__r_.__value_.__r.__words[2] = 0;
      v69->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(&v186, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      unint64_t v73 = v206;
      if ((unint64_t)v206 >= v207)
      {
        char v75 = v205;
        uint64_t v76 = (v206 - v205) >> 2;
        unint64_t v77 = v76 + 1;
        if ((unint64_t)(v76 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v78 = v207 - (void)v205;
        if ((uint64_t)(v207 - (void)v205) >> 1 > v77) {
          unint64_t v77 = v78 >> 1;
        }
        if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v79 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v79 = v77;
        }
        if (v79)
        {
          long long v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v207, v79);
          char v75 = v205;
          unint64_t v73 = v206;
        }
        else
        {
          long long v80 = 0;
        }
        uint64_t v83 = &v80[4 * v76];
        char v84 = &v80[4 * v79];
        *(_DWORD *)uint64_t v83 = 1;
        uint64_t v74 = v83 + 4;
        while (v73 != v75)
        {
          int v85 = *((_DWORD *)v73 - 1);
          v73 -= 4;
          *((_DWORD *)v83 - 1) = v85;
          v83 -= 4;
        }
        v205 = v83;
        v206 = v74;
        unint64_t v207 = (unint64_t)v84;
        if (v75) {
          operator delete(v75);
        }
      }
      else
      {
        *(_DWORD *)v206 = 1;
        uint64_t v74 = v73 + 4;
      }
      v206 = v74;
      long long v86 = v203;
      if ((unint64_t)v203 >= v204)
      {
        long long v88 = v202;
        uint64_t v89 = (v203 - v202) >> 2;
        unint64_t v90 = v89 + 1;
        if ((unint64_t)(v89 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v91 = v204 - (void)v202;
        if ((uint64_t)(v204 - (void)v202) >> 1 > v90) {
          unint64_t v90 = v91 >> 1;
        }
        if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v92 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v92 = v90;
        }
        if (v92)
        {
          uint64_t v93 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v204, v92);
          long long v88 = v202;
          long long v86 = v203;
        }
        else
        {
          uint64_t v93 = 0;
        }
        uint64_t v94 = &v93[4 * v89];
        unint64_t v95 = &v93[4 * v92];
        *(_DWORD *)uint64_t v94 = 1;
        long long v87 = v94 + 4;
        while (v86 != v88)
        {
          int v96 = *((_DWORD *)v86 - 1);
          v86 -= 4;
          *((_DWORD *)v94 - 1) = v96;
          v94 -= 4;
        }
        float v202 = v94;
        float v203 = v87;
        unint64_t v204 = (unint64_t)v95;
        if (v88) {
          operator delete(v88);
        }
      }
      else
      {
        *(_DWORD *)float v203 = 1;
        long long v87 = v86 + 4;
      }
      float v203 = v87;
      memset(&__p, 0, sizeof(__p));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v205, (uint64_t)v206, (v206 - v205) >> 2);
      uint64_t v138 = 0;
      float v139 = 0;
      uint64_t v140 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v138, v202, (uint64_t)v203, (v203 - v202) >> 2);
      long long v141 = 0;
      uint64_t v142 = 0;
      uint64_t v143 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v141, v201.__begin_, (uint64_t)v201.__end_, v201.__end_ - v201.__begin_);
      __int16 v144 = 0;
      char v145 = 0;
      char v146 = 0;
      char v147 = 0;
      char v148 = 0;
      int v149 = 0;
      char v150 = v63;
      __int16 v151 = 1;
      char v152 = 0;
      __int16 v97 = (uint64_t *)MIL::IRObject::GetLocationPtr(a2);
      uint64_t v98 = (*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 56))(a2);
      if (v198 == (char *)v197) {
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v99 = v98;
      int v100 = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(*v197);
      __int16 v101 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v100);
      ANEMachineIR::Validators::ValidateNePool(v97, v99, v62, v101, (uint64_t)&__p, (MIL::ValidationResult *)&__str);
      if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&__str))
      {
        std::string::basic_string[abi:ne180100]<0>(&v134, "ne_avg_pool");
        MilTranslator::OpTranslator::AddOperation((uint64_t)this);
        if (v135 < 0) {
          operator delete(v134);
        }
        std::string::basic_string[abi:ne180100]<0>(&v131, "x");
        if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v130, v200.__r_.__value_.__l.__data_, v200.__r_.__value_.__l.__size_);
        }
        else {
          std::string v130 = v200;
        }
        MIL::Builder::OperationBuilder::AddInput();
        if (v133) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v133);
        }
        if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v130.__r_.__value_.__l.__data_);
        }
        if (v132 < 0) {
          operator delete(v131);
        }
        std::string::basic_string[abi:ne180100]<0>(&v127, "kernel_sizes");
        MIL::Builder::OperationBuilder::AddInputInt32();
        if (v129) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v129);
        }
        if (v128 < 0) {
          operator delete(v127);
        }
        std::string::basic_string[abi:ne180100]<0>(&v124, "strides");
        MIL::Builder::OperationBuilder::AddInputInt32();
        if (v126) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v126);
        }
        if (v125 < 0) {
          operator delete(v124);
        }
        std::string::basic_string[abi:ne180100]<0>(&v121, "custom_pads");
        memset(&v120, 0, sizeof(v120));
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v120, v201.__begin_, (uint64_t)v201.__end_, v201.__end_ - v201.__begin_);
        MIL::Builder::OperationBuilder::AddInputInt32();
        if (v123) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v123);
        }
        if (v120.__r_.__value_.__r.__words[0])
        {
          v120.__r_.__value_.__l.__size_ = v120.__r_.__value_.__r.__words[0];
          operator delete(v120.__r_.__value_.__l.__data_);
        }
        if (v122 < 0) {
          operator delete(v121);
        }
        std::string::basic_string[abi:ne180100]<0>(&v117, "include_pads");
        MIL::Builder::OperationBuilder::AddInputBool();
        if (v119) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v119);
        }
        if (v118 < 0) {
          operator delete(v117);
        }
        if (v198 == (char *)v197) {
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v111 = MIL::IRNamedValueType::GetName(*v197);
        if (*(char *)(v111 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v115, *(const std::string::value_type **)v111, *(void *)(v111 + 8));
        }
        else
        {
          long long v112 = *(_OWORD *)v111;
          v115.__r_.__value_.__r.__words[2] = *(void *)(v111 + 16);
          *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v112;
        }
        if (v198 == (char *)v197) {
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        MIL::IRNamedValueType::GetType(*v197);
        MIL::Builder::OperationBuilder::AddOutput();
        if (v116) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v116);
        }
        if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v115.__r_.__value_.__l.__data_);
        }
        *(_DWORD *)a3 = 0;
        std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), (char *)&unk_210C6BFE7);
        if (v114.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v114.__r_.__value_.__l.__size_);
        }
      }
      else
      {
        MIL::MILResult::GetMessage((MIL::MILResult *)&__str);
        std::operator+<char>();
        if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v102 = &v120;
        }
        else {
          uint64_t v102 = (std::string *)v120.__r_.__value_.__r.__words[0];
        }
        if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v103 = HIBYTE(v120.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v103 = v120.__r_.__value_.__l.__size_;
        }
        std::string::append(&v186, (const std::string::value_type *)v102, v103);
        if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v120.__r_.__value_.__l.__data_);
        }
        *(_DWORD *)a3 = 6;
        uint64_t v104 = a3 + 8;
        (*(void (**)(const MIL::IROperation *))(*(void *)a2 + 56))(a2);
        std::operator+<char>();
        int v105 = std::string::append(&v114, "', violations: ");
        long long v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
        v120.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v106;
        v105->__r_.__value_.__l.__size_ = 0;
        v105->__r_.__value_.__r.__words[2] = 0;
        v105->__r_.__value_.__r.__words[0] = 0;
        if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v107 = &v186;
        }
        else {
          char v107 = (std::string *)v186.__r_.__value_.__r.__words[0];
        }
        if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v108 = HIBYTE(v186.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v108 = v186.__r_.__value_.__l.__size_;
        }
        uint64_t v109 = std::string::append(&v120, (const std::string::value_type *)v107, v108);
        long long v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
        *(void *)(v104 + 16) = *((void *)&v109->__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v104 = v110;
        v109->__r_.__value_.__l.__size_ = 0;
        v109->__r_.__value_.__r.__words[2] = 0;
        v109->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v120.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v114.__r_.__value_.__l.__data_);
        }
      }
      MEMORY[0x21667B360](&__str);
      if (v141)
      {
        uint64_t v142 = v141;
        operator delete(v141);
      }
      if (v138)
      {
        float v139 = v138;
        operator delete(v138);
      }
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    MEMORY[0x21667B360](&v173);
    if (v178)
    {
      uint64_t v179 = v178;
      operator delete(v178);
    }
    if (v175)
    {
      v176 = v175;
      operator delete(v175);
    }
    if (v174.__r_.__value_.__r.__words[0])
    {
      v174.__r_.__value_.__l.__size_ = v174.__r_.__value_.__r.__words[0];
      operator delete(v174.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v186.__r_.__value_.__l.__data_);
    }
    if (v187)
    {
      float v188 = v187;
      operator delete(v187);
    }
    if (v191.__begin_)
    {
      v191.__end_ = v191.__begin_;
      operator delete(v191.__begin_);
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    if (v195)
    {
      float v196 = v195;
      operator delete(v195);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v197;
    std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
    if ((SHIBYTE(v200.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_267;
    }
    uint64_t v25 = (void *)v200.__r_.__value_.__r.__words[0];
    goto LABEL_266;
  }
  *(_DWORD *)a3 = 6;
  uint64_t v14 = a3 + 8;
  std::string::basic_string[abi:ne180100]<0>(&v173, "ceil_mode");
  unint64_t v15 = std::string::insert(&v173, 0, "Input '");
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v174.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  float v17 = std::string::append(&v174, "' is not supported for ");
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  uint64_t v19 = (*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 56))(a2);
  int v20 = *(char *)(v19 + 23);
  if (v20 >= 0) {
    size_t v21 = (const std::string::value_type *)v19;
  }
  else {
    size_t v21 = *(const std::string::value_type **)v19;
  }
  if (v20 >= 0) {
    std::string::size_type v22 = *(unsigned __int8 *)(v19 + 23);
  }
  else {
    std::string::size_type v22 = *(void *)(v19 + 8);
  }
  unint64_t v23 = std::string::append(&__p, v21, v22);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  *(void *)(v14 + 16) = *((void *)&v23->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v14 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v174.__r_.__value_.__l.__data_);
  }
  if ((SHIBYTE(v173.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_267;
  }
  uint64_t v25 = (void *)v173.__r_.__value_.__r.__words[0];
LABEL_266:
  operator delete(v25);
LABEL_267:
  if (v201.__begin_)
  {
    v201.__end_ = v201.__begin_;
    operator delete(v201.__begin_);
  }
  if (v202)
  {
    float v203 = v202;
    operator delete(v202);
  }
  if (v205)
  {
    v206 = v205;
    operator delete(v205);
  }
  if (v208[0])
  {
    v208[1] = v208[0];
    operator delete(v208[0]);
  }
  if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v209.__r_.__value_.__l.__data_);
  }
}

void sub_210B3A114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62)
{
  if (a49 < 0) {
    operator delete(__p);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  MEMORY[0x21667B360](&a55);
  ANEMachineIR::Validators::NePoolParamValues::~NePoolParamValues((ANEMachineIR::Validators::NePoolParamValues *)&a62);
  MEMORY[0x21667B360](&STACK[0x318]);
  ANEMachineIR::Validators::NePoolParamValues::~NePoolParamValues((ANEMachineIR::Validators::NePoolParamValues *)&STACK[0x350]);
  if (SLOBYTE(STACK[0x3B7]) < 0) {
    operator delete((void *)STACK[0x3A0]);
  }
  uint64_t v65 = (void *)STACK[0x3B8];
  if (STACK[0x3B8])
  {
    STACK[0x3C0] = (unint64_t)v65;
    operator delete(v65);
  }
  uint64_t v66 = (void *)STACK[0x410];
  if (STACK[0x410])
  {
    STACK[0x418] = (unint64_t)v66;
    operator delete(v66);
  }
  if (SLOBYTE(STACK[0x43F]) < 0) {
    operator delete((void *)STACK[0x428]);
  }
  long long v67 = (void *)STACK[0x448];
  if (STACK[0x448])
  {
    STACK[0x450] = (unint64_t)v67;
    operator delete(v67);
  }
  STACK[0x350] = (unint64_t)&STACK[0x460];
  std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x350]);
  if (v62) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v62);
  }
  if (*(char *)(v63 - 225) < 0) {
    operator delete(*(void **)(v63 - 248));
  }
  uint64_t v68 = *(void **)(v63 - 224);
  if (v68)
  {
    *(void *)(v63 - 216) = v68;
    operator delete(v68);
  }
  uint64_t v69 = *(void **)(v63 - 200);
  if (v69)
  {
    *(void *)(v63 - 192) = v69;
    operator delete(v69);
  }
  long long v70 = *(void **)(v63 - 176);
  if (v70)
  {
    *(void *)(v63 - 168) = v70;
    operator delete(v70);
  }
  char v71 = *(void **)(v63 - 152);
  if (v71)
  {
    *(void *)(v63 - 144) = v71;
    operator delete(v71);
  }
  if (*(char *)(v63 - 105) < 0) {
    operator delete(*(void **)(v63 - 128));
  }
  _Unwind_Resume(a1);
}

void sub_210B3A7AC()
{
}

void MilTranslator::anonymous namespace'::GetParamValuesOfInt32Vector(char **a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
  MIL::IRValue::AsTensor(ParameterValue);
  uint64_t Data = MIL::IRTensorValue::GetDataView<int>();
  unint64_t v19 = v3;
  if (v3)
  {
    unint64_t v4 = 0;
    do
    {
      char v5 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](&Data, v4);
      uint64_t v6 = v5;
      long long v8 = a1[1];
      unint64_t v7 = (unint64_t)a1[2];
      if ((unint64_t)v8 >= v7)
      {
        unint64_t v10 = *a1;
        uint64_t v11 = (v8 - *a1) >> 2;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v7 - (void)v10;
        if (v13 >> 1 > v12) {
          unint64_t v12 = v13 >> 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), v14);
          unint64_t v10 = *a1;
          long long v8 = a1[1];
        }
        else
        {
          unint64_t v15 = 0;
        }
        long long v16 = &v15[4 * v11];
        *(_DWORD *)long long v16 = *v6;
        unint64_t v9 = v16 + 4;
        while (v8 != v10)
        {
          int v17 = *((_DWORD *)v8 - 1);
          v8 -= 4;
          *((_DWORD *)v16 - 1) = v17;
          v16 -= 4;
        }
        *a1 = v16;
        a1[1] = v9;
        a1[2] = &v15[4 * v14];
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        *(_DWORD *)long long v8 = *v5;
        unint64_t v9 = v8 + 4;
      }
      a1[1] = v9;
      ++v4;
    }
    while (v4 < v19);
  }
}

void sub_210B3A8F8(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MilTranslator::anonymous namespace'::GetCustomPadValues(std::vector<int> *a1@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v53, "pad_type");
  MIL::IROperation::GetParameterValue();
  MIL::IRValue::GetScalar<std::string>();
  if (SHIBYTE(v54) < 0) {
    operator delete((void *)v53);
  }
  std::string::basic_string[abi:ne180100]<0>(&v53, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  uint64_t v6 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v54) < 0) {
    operator delete((void *)v53);
  }
  ANEMachineIR::Utils::GetStaticTensorShape(v6, v5, (uint64_t)&__p);
  std::string::basic_string[abi:ne180100]<0>(&v53, "kernel_sizes");
  uint64_t ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
  MIL::IRValue::AsTensor(ParameterValue);
  v44[0] = MIL::IRTensorValue::GetDataView<int>();
  v44[1] = v8;
  if (SHIBYTE(v54) < 0) {
    operator delete((void *)v53);
  }
  std::string::basic_string[abi:ne180100]<0>(&v53, "strides");
  unint64_t v9 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
  MIL::IRValue::AsTensor(v9);
  v43[0] = MIL::IRTensorValue::GetDataView<int>();
  v43[1] = v10;
  if (SHIBYTE(v54) < 0) {
    operator delete((void *)v53);
  }
  std::string::basic_string[abi:ne180100]<0>(&v53, "pad");
  uint64_t v11 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
  MIL::IRValue::AsTensor(v11);
  uint64_t Data = MIL::IRTensorValue::GetDataView<int>();
  std::vector<int>::size_type __n = v12;
  if (SHIBYTE(v54) < 0)
  {
    operator delete((void *)v53);
    std::vector<int>::size_type v12 = __n;
  }
  std::vector<int>::vector(a1, v12);
  uint64_t v13 = __p;
  uint64_t v14 = (v46 - (unsigned char *)__p) >> 3;
  uint64_t v15 = v14 - 2;
  if (v14 != 2)
  {
    unint64_t v16 = 0;
    unint64_t v17 = 0;
    while (1)
    {
      uint64_t v18 = *((void *)__p + v17);
      int v19 = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::At(v44, v17);
      unint64_t v20 = *(int *)MIL::Util::Span<int const,18446744073709551615ul>::At(v43, v17);
      int v21 = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::At(&Data, v16);
      unsigned int v22 = *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::At(&Data, v16 + 1);
      if ((char)v49 < 0)
      {
        if (v48 == 4)
        {
          int v28 = *(_DWORD *)v47;
          goto LABEL_40;
        }
        if (v48 != 5)
        {
          if (v48 != 6) {
            goto LABEL_49;
          }
          unint64_t v23 = (unsigned __int16 *)v47;
LABEL_22:
          int v24 = *(_DWORD *)v23;
          int v25 = v23[2];
          if (v24 != 1953723747 || v25 != 28015) {
            goto LABEL_49;
          }
          goto LABEL_42;
        }
        if (*(_DWORD *)v47 != 1768710518 || *((unsigned char *)v47 + 4) != 100)
        {
LABEL_49:
          exception = __cxa_allocate_exception(0x10uLL);
          std::string::basic_string[abi:ne180100]<0>(&v50, "pad_type");
          uint64_t v33 = std::string::insert(&v50, 0, "Invalid ");
          long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
          v51.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v34;
          v33->__r_.__value_.__l.__size_ = 0;
          v33->__r_.__value_.__r.__words[2] = 0;
          v33->__r_.__value_.__r.__words[0] = 0;
          size_t v35 = std::string::append(&v51, ": ");
          long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
          v52.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v36;
          v35->__r_.__value_.__l.__size_ = 0;
          v35->__r_.__value_.__r.__words[2] = 0;
          v35->__r_.__value_.__r.__words[0] = 0;
          if ((v49 & 0x80u) == 0) {
            uint64_t v37 = (const std::string::value_type *)&v47;
          }
          else {
            uint64_t v37 = (const std::string::value_type *)v47;
          }
          if ((v49 & 0x80u) == 0) {
            std::string::size_type v38 = v49;
          }
          else {
            std::string::size_type v38 = v48;
          }
          long long v39 = std::string::append(&v52, v37, v38);
          long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
          std::string::size_type v54 = v39->__r_.__value_.__r.__words[2];
          long long v53 = v40;
          v39->__r_.__value_.__l.__size_ = 0;
          v39->__r_.__value_.__r.__words[2] = 0;
          v39->__r_.__value_.__r.__words[0] = 0;
          MEMORY[0x21667B9A0](exception, &v53);
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
      }
      else
      {
        if (v49 == 4)
        {
          int v28 = (int)v47;
LABEL_40:
          if (v28 != 1701667187) {
            goto LABEL_49;
          }
          unsigned int v30 = (v19 + ~v18 + v18 - (v18 + v20 - 1) % v20) & ~((int)(v19
                                                                           + ~v18
                                                                           + v18
                                                                           - (v18 + v20 - 1) % v20) >> 31);
          int v21 = v30 >> 1;
          unsigned int v22 = (v30 + 1) >> 1;
          goto LABEL_42;
        }
        if (v49 != 5)
        {
          if (v49 != 6) {
            goto LABEL_49;
          }
          unint64_t v23 = (unsigned __int16 *)&v47;
          goto LABEL_22;
        }
        if (v47 != 1768710518 || BYTE4(v47) != 100) {
          goto LABEL_49;
        }
      }
      int v21 = 0;
      unsigned int v22 = 0;
LABEL_42:
      uint64_t v31 = &a1->__begin_[v16];
      *uint64_t v31 = v21;
      v31[1] = v22;
      ++v17;
      v16 += 2;
      if (v15 == v17)
      {
        uint64_t v13 = __p;
        break;
      }
    }
  }
  if (v13)
  {
    uint64_t v46 = v13;
    operator delete(v13);
  }
  if ((char)v49 < 0) {
    operator delete(v47);
  }
}

void sub_210B3AD4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (__p) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void ANEMachineIR::Validators::NePoolParamValues::~NePoolParamValues(ANEMachineIR::Validators::NePoolParamValues *this)
{
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  unint64_t v4 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v4;
    operator delete(v4);
  }
}

void MilTranslator::OpTranslator::TranslateMaxPool(MilTranslator::OpTranslator *this@<X0>, const MIL::IROperation *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  uint64_t v6 = (*(uint64_t (**)(const MIL::IROperation *, std::string *, void))(*(void *)a2 + 120))(a2, &__p, 0);
  uint64_t v7 = v6;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v6) {
      goto LABEL_3;
    }
LABEL_6:
    *(_DWORD *)a3 = 4;
    std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), "Immediate value inputs not handled.");
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v7) {
    goto LABEL_6;
  }
LABEL_3:
  if (*(char *)(v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v196, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
  }
  else
  {
    long long v8 = *(_OWORD *)v7;
    v196.__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
    *(_OWORD *)&v196.__r_.__value_.__l.__data_ = v8;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  uint64_t v11 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  ANEMachineIR::Utils::GetStaticTensorShape(v11, v10, (uint64_t)v195);
  std::string::basic_string[abi:ne180100]<0>(&__p, "kernel_sizes");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "strides");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "ceil_mode");
  MIL::IROperation::GetParameterValue();
  int v12 = MIL::IRValue::GetScalar<BOOL>();
  int v13 = v12;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v13) {
      goto LABEL_16;
    }
LABEL_29:
    MilTranslator::OpTranslator::GetChannelLastTensorNameMayInsertTranspose((uint64_t)this, (uint64_t)&v196, v11, &v187);
    uint64_t v26 = (MIL::IRNamedValueType ***)(*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 176))(a2);
    int v28 = **v26;
    uint64_t v27 = (std::__shared_weak_count *)(*v26)[1];
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(v28);
    unsigned int v30 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(Type);
    char v185 = 0;
    __int16 v184 = 0;
    unint64_t v186 = 0;
    ANEMachineIR::Utils::GetStaticTensorShape(v30, v31, (uint64_t)&v182);
    uint64_t v32 = (void *)(*(uint64_t (**)(ANEMachineIR::Utils *))(*(void *)v11 + 96))(v11);
    MilTranslator::OpTranslator::InferChannelLastTransposeInfo((uint64_t)this, (uint64_t)&v196, (uint64_t)(v32[1] - *v32) >> 3, (uint64_t)&__s);
    MilTranslator::OpTranslator::GetTransposeOpParamPerm((v183 - (unsigned char *)v182) >> 3, (uint64_t)&__s, &v178);
    if (MilTranslator::OpTranslator::IsTransposeRequired(&v178))
    {
      MilTranslator::OpTranslator::InferTransposedShape((uint64_t *)&v182, (unsigned int **)&v178, &v162);
      (*(void (**)(ANEMachineIR::Utils *))(*(void *)v30 + 88))(v30);
      MIL::IRTensorValueType::Make();
      uint64_t Name = MIL::IRNamedValueType::GetName(v28);
      long long v34 = (char *)Name;
      if (*(char *)(Name + 23) >= 0) {
        size_t v35 = *(unsigned __int8 *)(Name + 23);
      }
      else {
        size_t v35 = *(void *)(Name + 8);
      }
      p_str = &__str;
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v35 + 13);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if (v35)
      {
        if (v34[23] >= 0) {
          uint64_t v37 = v34;
        }
        else {
          uint64_t v37 = *(char **)v34;
        }
        memmove(p_str, v37, v35);
      }
      strcpy((char *)p_str + v35, "_channel_last");
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v163, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      }
      else {
        std::string v163 = __s;
      }
      LODWORD(v164) = v180;
      BYTE4(v164) = v181;
      std::string::operator=(&v163, &__str);
      std::string v51 = (long long *)MIL::IRNamedValueType::GetName(v28);
      std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>::pair[abi:ne180100]<std::string const&,std::pair<std::string,std::array<unsigned char,5ul>>&,0>(&__p, v51, (long long *)&v163);
      std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>>((uint64_t)this + 296, (unsigned __int8 *)&__p, (long long *)&__p);
      if (SHIBYTE(v135) < 0) {
        operator delete(v133);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v177, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else {
        std::string v177 = __str;
      }
      MIL::IRNamedValueType::Make();
      if (v174) {
        operator new();
      }
      std::string v174 = 0;
      std::string v52 = v185;
      if ((unint64_t)v185 >= v186)
      {
        uint64_t v54 = (v185 - (char *)v184) >> 4;
        unint64_t v55 = v54 + 1;
        if ((unint64_t)(v54 + 1) >> 60) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v56 = v186 - (void)v184;
        if ((uint64_t)(v186 - (void)v184) >> 3 > v55) {
          unint64_t v55 = v56 >> 3;
        }
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v57 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v57 = v55;
        }
        char v134 = &v186;
        uint64_t v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)&v186, v57);
        long long v59 = &v58[16 * v54];
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v59;
        uint64_t v133 = &v58[16 * v60];
        *(void *)long long v59 = 0;
        *((void *)v59 + 1) = 0;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v59 + 16);
        std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__swap_out_circular_buffer((uint64_t *)&v184, &__p);
        long long v53 = v185;
        std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)&__p.__r_.__value_.__l.__data_);
      }
      else
      {
        *(void *)char v185 = 0;
        *((void *)v52 + 1) = 0;
        long long v53 = v52 + 16;
      }
      char v185 = v53;
      unint64_t v61 = v174;
      std::string v174 = 0;
      if (v61)
      {
        MIL::IRNamedValueType::~IRNamedValueType(v61);
        MEMORY[0x21667BBD0]();
      }
      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v177.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v163.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      std::string v50 = (void *)v162.__r_.__value_.__r.__words[0];
      if (!v162.__r_.__value_.__r.__words[0]) {
        goto LABEL_92;
      }
      v162.__r_.__value_.__l.__size_ = v162.__r_.__value_.__r.__words[0];
    }
    else
    {
      uint64_t v38 = MIL::IRNamedValueType::GetName(v28);
      if (*(char *)(v38 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v176, *(const std::string::value_type **)v38, *(void *)(v38 + 8));
      }
      else
      {
        long long v39 = *(_OWORD *)v38;
        v176.__r_.__value_.__r.__words[2] = *(void *)(v38 + 16);
        *(_OWORD *)&v176.__r_.__value_.__l.__data_ = v39;
      }
      MIL::IRNamedValueType::Make();
      if (v163.__r_.__value_.__r.__words[0]) {
        operator new();
      }
      v163.__r_.__value_.__r.__words[0] = 0;
      long long v40 = v185;
      if ((unint64_t)v185 >= v186)
      {
        uint64_t v42 = (v185 - (char *)v184) >> 4;
        unint64_t v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 60) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v44 = v186 - (void)v184;
        if ((uint64_t)(v186 - (void)v184) >> 3 > v43) {
          unint64_t v43 = v44 >> 3;
        }
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v45 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v45 = v43;
        }
        char v134 = &v186;
        uint64_t v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)&v186, v45);
        uint64_t v47 = &v46[16 * v42];
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v47;
        uint64_t v133 = &v46[16 * v48];
        *(void *)uint64_t v47 = 0;
        *((void *)v47 + 1) = 0;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v47 + 16);
        std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__swap_out_circular_buffer((uint64_t *)&v184, &__p);
        unint64_t v41 = v185;
        std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)&__p.__r_.__value_.__l.__data_);
      }
      else
      {
        *(void *)char v185 = 0;
        *((void *)v40 + 1) = 0;
        unint64_t v41 = v40 + 16;
      }
      char v185 = v41;
      unsigned __int8 v49 = (MIL::IRNamedValueType *)v163.__r_.__value_.__r.__words[0];
      v163.__r_.__value_.__r.__words[0] = 0;
      if (v49)
      {
        MIL::IRNamedValueType::~IRNamedValueType(v49);
        MEMORY[0x21667BBD0]();
      }
      if ((SHIBYTE(v176.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_92;
      }
      std::string v50 = (void *)v176.__r_.__value_.__r.__words[0];
    }
    operator delete(v50);
LABEL_92:
    MilTranslator::OpTranslator::InferTransposedShape((uint64_t *)v195, (unsigned int **)&v178, &v174);
    (*(void (**)(ANEMachineIR::Utils *))(*(void *)v11 + 88))(v11);
    memset(&__p, 0, sizeof(__p));
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v174, (uint64_t)v175, (v175 - v174) >> 3);
    uint64_t v62 = (ANEMachineIR::Utils *)MIL::IRTensorValueType::Make();
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    memset(&v173, 0, sizeof(v173));
    memset(&v163, 0, sizeof(v163));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v163, v192, (uint64_t)v193, (v193 - v192) >> 2);
    char v165 = 0;
    int v164 = 0;
    uint64_t v166 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v164, v189, (uint64_t)v190, (v190 - v189) >> 2);
    float v168 = 0;
    std::string v167 = 0;
    uint64_t v169 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v167, v188.__begin_, (uint64_t)v188.__end_, v188.__end_ - v188.__begin_);
    char v170 = 0;
    char v171 = 0;
    int v172 = 0;
    uint64_t LocationPtr = MIL::IRObject::GetLocationPtr(a2);
    uint64_t v64 = (*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 56))(a2);
    if (v185 == (char *)v184) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v65 = v64;
    uint64_t v66 = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(*v184);
    long long v67 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v66);
    ANEMachineIR::Validators::ValidatePePool(LocationPtr, v65, v62, v67, (uint64_t)&v163, (MIL::ValidationResult *)&v162);
    if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v162))
    {
      std::string::basic_string[abi:ne180100]<0>(&v160, "pe_max_pool");
      MilTranslator::OpTranslator::AddOperation((uint64_t)this);
      if (v161 < 0) {
        operator delete(v160);
      }
      std::string::basic_string[abi:ne180100]<0>(&v157, "x");
      if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v156, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
      }
      else {
        std::string v156 = v187;
      }
      MIL::Builder::OperationBuilder::AddInput();
      if (v159) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v159);
      }
      if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v156.__r_.__value_.__l.__data_);
      }
      if (v158 < 0) {
        operator delete(v157);
      }
      std::string::basic_string[abi:ne180100]<0>(&v153, "kernel_sizes");
      MIL::Builder::OperationBuilder::AddInputInt32();
      if (v155) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v155);
      }
      if (v154 < 0) {
        operator delete(v153);
      }
      std::string::basic_string[abi:ne180100]<0>(&v150, "strides");
      MIL::Builder::OperationBuilder::AddInputInt32();
      if (v152) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v152);
      }
      if (v151 < 0) {
        operator delete(v150);
      }
      std::string::basic_string[abi:ne180100]<0>(&v147, "custom_pads");
      memset(&__p, 0, sizeof(__p));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v188.__begin_, (uint64_t)v188.__end_, v188.__end_ - v188.__begin_);
      MIL::Builder::OperationBuilder::AddInputInt32();
      if (v149) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v149);
      }
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v148 < 0) {
        operator delete(v147);
      }
      if (v185 == (char *)v184) {
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v80 = MIL::IRNamedValueType::GetName(*v184);
      if (*(char *)(v80 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v145, *(const std::string::value_type **)v80, *(void *)(v80 + 8));
      }
      else
      {
        long long v81 = *(_OWORD *)v80;
        v145.__r_.__value_.__r.__words[2] = *(void *)(v80 + 16);
        *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v81;
      }
      if (v185 == (char *)v184) {
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
      MIL::IRNamedValueType::GetType(*v184);
      MIL::Builder::OperationBuilder::AddOutput();
      if (v146) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v146);
      }
      if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v145.__r_.__value_.__l.__data_);
      }
      *(_DWORD *)a3 = 0;
      std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), (char *)&unk_210C6BFE7);
      if (__str.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
      }
    }
    else
    {
      MIL::MILResult::GetMessage((MIL::MILResult *)&v162);
      std::operator+<char>();
      uint64_t v68 = std::string::append(&__str, "; ");
      long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v69;
      v68->__r_.__value_.__l.__size_ = 0;
      v68->__r_.__value_.__r.__words[2] = 0;
      v68->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(&v173, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      uint64_t v72 = v193;
      if ((unint64_t)v193 >= v194)
      {
        uint64_t v74 = v192;
        uint64_t v75 = (v193 - v192) >> 2;
        unint64_t v76 = v75 + 1;
        if ((unint64_t)(v75 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v77 = v194 - (void)v192;
        if ((uint64_t)(v194 - (void)v192) >> 1 > v76) {
          unint64_t v76 = v77 >> 1;
        }
        if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v78 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v78 = v76;
        }
        if (v78)
        {
          unint64_t v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v194, v78);
          uint64_t v74 = v192;
          uint64_t v72 = v193;
        }
        else
        {
          unint64_t v79 = 0;
        }
        long long v82 = &v79[4 * v75];
        uint64_t v83 = &v79[4 * v78];
        *(_DWORD *)long long v82 = 1;
        unint64_t v73 = v82 + 4;
        while (v72 != v74)
        {
          int v84 = *((_DWORD *)v72 - 1);
          v72 -= 4;
          *((_DWORD *)v82 - 1) = v84;
          v82 -= 4;
        }
        v192 = v82;
        int v193 = v73;
        unint64_t v194 = (unint64_t)v83;
        if (v74) {
          operator delete(v74);
        }
      }
      else
      {
        *(_DWORD *)int v193 = 1;
        unint64_t v73 = v72 + 4;
      }
      int v193 = v73;
      int v85 = v190;
      if ((unint64_t)v190 >= v191)
      {
        long long v87 = v189;
        uint64_t v88 = (v190 - v189) >> 2;
        unint64_t v89 = v88 + 1;
        if ((unint64_t)(v88 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v90 = v191 - (void)v189;
        if ((uint64_t)(v191 - (void)v189) >> 1 > v89) {
          unint64_t v89 = v90 >> 1;
        }
        if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v91 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v91 = v89;
        }
        if (v91)
        {
          unint64_t v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v191, v91);
          long long v87 = v189;
          int v85 = v190;
        }
        else
        {
          unint64_t v92 = 0;
        }
        uint64_t v93 = &v92[4 * v88];
        uint64_t v94 = &v92[4 * v91];
        *(_DWORD *)uint64_t v93 = 1;
        long long v86 = v93 + 4;
        while (v85 != v87)
        {
          int v95 = *((_DWORD *)v85 - 1);
          v85 -= 4;
          *((_DWORD *)v93 - 1) = v95;
          v93 -= 4;
        }
        std::string v189 = v93;
        std::string v190 = v86;
        unint64_t v191 = (unint64_t)v94;
        if (v87) {
          operator delete(v87);
        }
      }
      else
      {
        *(_DWORD *)std::string v190 = 1;
        long long v86 = v85 + 4;
      }
      std::string v190 = v86;
      memset(&__p, 0, sizeof(__p));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v192, (uint64_t)v193, (v193 - v192) >> 2);
      uint64_t v133 = 0;
      char v134 = 0;
      uint64_t v135 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v133, v189, (uint64_t)v190, (v190 - v189) >> 2);
      char v136 = 0;
      uint64_t v137 = 0;
      uint64_t v138 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v136, v188.__begin_, (uint64_t)v188.__end_, v188.__end_ - v188.__begin_);
      __int16 v139 = 0;
      char v140 = 0;
      char v141 = 0;
      char v142 = 0;
      char v143 = 0;
      uint64_t v144 = 0;
      int v96 = (uint64_t *)MIL::IRObject::GetLocationPtr(a2);
      uint64_t v97 = (*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 56))(a2);
      if (v185 == (char *)v184) {
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v98 = v97;
      uint64_t v99 = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(*v184);
      int v100 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v99);
      ANEMachineIR::Validators::ValidateNePool(v96, v98, v62, v100, (uint64_t)&__p, (MIL::ValidationResult *)&__str);
      if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&__str))
      {
        std::string::basic_string[abi:ne180100]<0>(&v129, "ne_max_pool");
        MilTranslator::OpTranslator::AddOperation((uint64_t)this);
        if (v130 < 0) {
          operator delete(v129);
        }
        std::string::basic_string[abi:ne180100]<0>(&v126, "x");
        if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v125, v187.__r_.__value_.__l.__data_, v187.__r_.__value_.__l.__size_);
        }
        else {
          std::string v125 = v187;
        }
        MIL::Builder::OperationBuilder::AddInput();
        if (v128) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v128);
        }
        if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v125.__r_.__value_.__l.__data_);
        }
        if (v127 < 0) {
          operator delete(v126);
        }
        std::string::basic_string[abi:ne180100]<0>(&v122, "kernel_sizes");
        MIL::Builder::OperationBuilder::AddInputInt32();
        if (v124) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v124);
        }
        if (v123 < 0) {
          operator delete(v122);
        }
        std::string::basic_string[abi:ne180100]<0>(&v119, "strides");
        MIL::Builder::OperationBuilder::AddInputInt32();
        if (v121) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v121);
        }
        if (v120 < 0) {
          operator delete(v119);
        }
        std::string::basic_string[abi:ne180100]<0>(&v116, "custom_pads");
        memset(&v115, 0, sizeof(v115));
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v115, v188.__begin_, (uint64_t)v188.__end_, v188.__end_ - v188.__begin_);
        MIL::Builder::OperationBuilder::AddInputInt32();
        if (v118) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v118);
        }
        if (v115.__r_.__value_.__r.__words[0])
        {
          v115.__r_.__value_.__l.__size_ = v115.__r_.__value_.__r.__words[0];
          operator delete(v115.__r_.__value_.__l.__data_);
        }
        if (v117 < 0) {
          operator delete(v116);
        }
        if (v185 == (char *)v184) {
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v110 = MIL::IRNamedValueType::GetName(*v184);
        if (*(char *)(v110 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)v110, *(void *)(v110 + 8));
        }
        else
        {
          long long v111 = *(_OWORD *)v110;
          v113.__r_.__value_.__r.__words[2] = *(void *)(v110 + 16);
          *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v111;
        }
        if (v185 == (char *)v184) {
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        MIL::IRNamedValueType::GetType(*v184);
        MIL::Builder::OperationBuilder::AddOutput();
        if (v114) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v114);
        }
        if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v113.__r_.__value_.__l.__data_);
        }
        *(_DWORD *)a3 = 0;
        std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), (char *)&unk_210C6BFE7);
        if (v112.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v112.__r_.__value_.__l.__size_);
        }
      }
      else
      {
        MIL::MILResult::GetMessage((MIL::MILResult *)&__str);
        std::operator+<char>();
        if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          __int16 v101 = &v115;
        }
        else {
          __int16 v101 = (std::string *)v115.__r_.__value_.__r.__words[0];
        }
        if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v102 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v102 = v115.__r_.__value_.__l.__size_;
        }
        std::string::append(&v173, (const std::string::value_type *)v101, v102);
        if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v115.__r_.__value_.__l.__data_);
        }
        *(_DWORD *)a3 = 6;
        uint64_t v103 = a3 + 8;
        (*(void (**)(const MIL::IROperation *))(*(void *)a2 + 56))(a2);
        std::operator+<char>();
        uint64_t v104 = std::string::append(&v112, "', violations: ");
        long long v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
        v115.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v105;
        v104->__r_.__value_.__l.__size_ = 0;
        v104->__r_.__value_.__r.__words[2] = 0;
        v104->__r_.__value_.__r.__words[0] = 0;
        if ((v173.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v106 = &v173;
        }
        else {
          long long v106 = (std::string *)v173.__r_.__value_.__r.__words[0];
        }
        if ((v173.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v107 = HIBYTE(v173.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v107 = v173.__r_.__value_.__l.__size_;
        }
        std::string::size_type v108 = std::string::append(&v115, (const std::string::value_type *)v106, v107);
        long long v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
        *(void *)(v103 + 16) = *((void *)&v108->__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v103 = v109;
        v108->__r_.__value_.__l.__size_ = 0;
        v108->__r_.__value_.__r.__words[2] = 0;
        v108->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v115.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v112.__r_.__value_.__l.__data_);
        }
      }
      MEMORY[0x21667B360](&__str);
      if (v136)
      {
        uint64_t v137 = v136;
        operator delete(v136);
      }
      if (v133)
      {
        char v134 = v133;
        operator delete(v133);
      }
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    MEMORY[0x21667B360](&v162);
    if (v167)
    {
      float v168 = v167;
      operator delete(v167);
    }
    if (v164)
    {
      char v165 = v164;
      operator delete(v164);
    }
    if (v163.__r_.__value_.__r.__words[0])
    {
      v163.__r_.__value_.__l.__size_ = v163.__r_.__value_.__r.__words[0];
      operator delete(v163.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v173.__r_.__value_.__l.__data_);
    }
    if (v174)
    {
      float v175 = v174;
      operator delete(v174);
    }
    if (v178.__begin_)
    {
      v178.__end_ = v178.__begin_;
      operator delete(v178.__begin_);
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    if (v182)
    {
      char v183 = v182;
      operator delete(v182);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v184;
    std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    if ((SHIBYTE(v187.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_257;
    }
    int v25 = (void *)v187.__r_.__value_.__r.__words[0];
    goto LABEL_256;
  }
  if (!v12) {
    goto LABEL_29;
  }
LABEL_16:
  *(_DWORD *)a3 = 6;
  uint64_t v14 = a3 + 8;
  std::string::basic_string[abi:ne180100]<0>(&v162, "ceil_mode");
  uint64_t v15 = std::string::insert(&v162, 0, "Input '");
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v163.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  unint64_t v17 = std::string::append(&v163, "' is not supported for ");
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  uint64_t v19 = (*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 56))(a2);
  int v20 = *(char *)(v19 + 23);
  if (v20 >= 0) {
    int v21 = (const std::string::value_type *)v19;
  }
  else {
    int v21 = *(const std::string::value_type **)v19;
  }
  if (v20 >= 0) {
    std::string::size_type v22 = *(unsigned __int8 *)(v19 + 23);
  }
  else {
    std::string::size_type v22 = *(void *)(v19 + 8);
  }
  unint64_t v23 = std::string::append(&__p, v21, v22);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  *(void *)(v14 + 16) = *((void *)&v23->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v14 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v163.__r_.__value_.__l.__data_);
  }
  if ((SHIBYTE(v162.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_257;
  }
  int v25 = (void *)v162.__r_.__value_.__r.__words[0];
LABEL_256:
  operator delete(v25);
LABEL_257:
  if (v188.__begin_)
  {
    v188.__end_ = v188.__begin_;
    operator delete(v188.__begin_);
  }
  if (v189)
  {
    std::string v190 = v189;
    operator delete(v189);
  }
  if (v192)
  {
    int v193 = v192;
    operator delete(v192);
  }
  if (v195[0])
  {
    v195[1] = v195[0];
    operator delete(v195[0]);
  }
  if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v196.__r_.__value_.__l.__data_);
  }
}

void sub_210B3C31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  if (a45 < 0) {
    operator delete(__p);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  MEMORY[0x21667B360](&a51);
  ANEMachineIR::Validators::NePoolParamValues::~NePoolParamValues((ANEMachineIR::Validators::NePoolParamValues *)&a58);
  MEMORY[0x21667B360](&STACK[0x2C8]);
  ANEMachineIR::Validators::NePoolParamValues::~NePoolParamValues((ANEMachineIR::Validators::NePoolParamValues *)&STACK[0x300]);
  if (SLOBYTE(STACK[0x367]) < 0) {
    operator delete((void *)STACK[0x350]);
  }
  unint64_t v61 = (void *)STACK[0x368];
  if (STACK[0x368])
  {
    STACK[0x370] = (unint64_t)v61;
    operator delete(v61);
  }
  uint64_t v62 = (void *)STACK[0x3C0];
  if (STACK[0x3C0])
  {
    STACK[0x3C8] = (unint64_t)v62;
    operator delete(v62);
  }
  if (SLOBYTE(STACK[0x3EF]) < 0) {
    operator delete((void *)STACK[0x3D8]);
  }
  uint64_t v63 = (void *)STACK[0x3F8];
  if (STACK[0x3F8])
  {
    STACK[0x400] = (unint64_t)v63;
    operator delete(v63);
  }
  STACK[0x300] = (unint64_t)&STACK[0x410];
  std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  if (*(char *)(v59 - 225) < 0) {
    operator delete(*(void **)(v59 - 248));
  }
  uint64_t v64 = *(void **)(v59 - 224);
  if (v64)
  {
    *(void *)(v59 - 216) = v64;
    operator delete(v64);
  }
  uint64_t v65 = *(void **)(v59 - 200);
  if (v65)
  {
    *(void *)(v59 - 192) = v65;
    operator delete(v65);
  }
  uint64_t v66 = *(void **)(v59 - 176);
  if (v66)
  {
    *(void *)(v59 - 168) = v66;
    operator delete(v66);
  }
  long long v67 = *(void **)(v59 - 152);
  if (v67)
  {
    *(void *)(v59 - 144) = v67;
    operator delete(v67);
  }
  if (*(char *)(v59 - 105) < 0) {
    operator delete(*(void **)(v59 - 128));
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::Util::Span<int const,18446744073709551615ul>::At(void *a1, unint64_t a2)
{
  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_26418A7C0, MEMORY[0x263F8C050]);
  }
  return *a1 + 4 * a2;
}

void sub_210B3C940(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    std::vector<int>::pointer end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_210B3C9B0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
  }
  unint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

std::string *std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>::pair[abi:ne180100]<std::string const&,std::pair<std::string,std::array<unsigned char,5ul>>&,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  int v8 = *((_DWORD *)a3 + 6);
  this[2].__r_.__value_.__s.__data_[4] = *((unsigned char *)a3 + 28);
  LODWORD(this[2].__r_.__value_.__l.__data_) = v8;
  return this;
}

void sub_210B3CA9C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  long long v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    int v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::__construct_node_hash<std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  std::string::size_type v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *std::string::size_type v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_210B3CDAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::__construct_node_hash<std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t result = std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_210B3CE24(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  long long v5 = *(long long *)((char *)a2 + 24);
  this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  int v6 = *((_DWORD *)a2 + 12);
  this[2].__r_.__value_.__s.__data_[4] = *((unsigned char *)a2 + 52);
  LODWORD(this[2].__r_.__value_.__l.__data_) = v6;
  return this;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

MIL::IRNamedValueType *std::unique_ptr<MIL::IRNamedValueType>::reset[abi:ne180100](MIL::IRNamedValueType **a1, MIL::IRNamedValueType *a2)
{
  unint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::IRNamedValueType::~IRNamedValueType(result);
    JUMPOUT(0x21667BBD0);
  }
  return result;
}

uint64_t std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRNamedValueType>>,std::reverse_iterator<std::shared_ptr<MIL::IRNamedValueType>*>,std::reverse_iterator<std::shared_ptr<MIL::IRNamedValueType>*>,std::reverse_iterator<std::shared_ptr<MIL::IRNamedValueType>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRNamedValueType>>,std::reverse_iterator<std::shared_ptr<MIL::IRNamedValueType>*>,std::reverse_iterator<std::shared_ptr<MIL::IRNamedValueType>*>,std::reverse_iterator<std::shared_ptr<MIL::IRNamedValueType>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRNamedValueType>>,std::reverse_iterator<std::shared_ptr<MIL::IRNamedValueType>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRNamedValueType>>,std::reverse_iterator<std::shared_ptr<MIL::IRNamedValueType>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRParameter>>,std::reverse_iterator<std::shared_ptr<MIL::IRParameter>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::__shared_ptr_pointer<MIL::IRNamedValueType  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x21667BBD0);
}

MIL::IRNamedValueType *std::__shared_ptr_pointer<MIL::IRNamedValueType  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(MIL::IRNamedValueType **)(a1 + 24);
  if (result)
  {
    MIL::IRNamedValueType::~IRNamedValueType(result);
    JUMPOUT(0x21667BBD0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRNamedValueType  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_210B3D220(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ANEMachineIR::H2022::NeReduce::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210B3E748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)&STACK[0x288]);
  if (a68) {
    (*(void (**)(uint64_t))(*(void *)a68 + 8))(a68);
  }
  if (a67) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a67);
  }
  if (__p) {
    operator delete(__p);
  }
  char v71 = (void *)STACK[0x258];
  if (STACK[0x258])
  {
    STACK[0x260] = (unint64_t)v71;
    operator delete(v71);
  }
  uint64_t v72 = *(void **)(v69 - 96);
  if (v72)
  {
    *(void *)(v69 - 88) = v72;
    operator delete(v72);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a69, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x280], 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeReduce::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210B4032C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)&STACK[0x288]);
  if (a72) {
    (*(void (**)(uint64_t))(*(void *)a72 + 8))(a72);
  }
  if (a71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a71);
  }
  if (__p) {
    operator delete(__p);
  }
  uint64_t v74 = (void *)STACK[0x258];
  if (STACK[0x258])
  {
    STACK[0x260] = (unint64_t)v74;
    operator delete(v74);
  }
  uint64_t v75 = *(void **)(v72 - 96);
  if (v75)
  {
    *(void *)(v72 - 88) = v75;
    operator delete(v75);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x200], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x280], 0);
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::NeAvgPoolCpu::Run(MIL::IROperation *a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v151 = *MEMORY[0x263EF8340];
  uint64_t v6 = (*(uint64_t (**)(MIL::IROperation *))(*(void *)a1 + 56))(a1);
  int v7 = *(char *)(v6 + 23);
  if (v7 < 0)
  {
    if (*(void *)(v6 + 8) != 11) {
      goto LABEL_10;
    }
    uint64_t v6 = *(void *)v6;
  }
  else if (v7 != 11)
  {
    goto LABEL_10;
  }
  if (*(void *)v6 != 0x705F6776615F656ELL || *(void *)(v6 + 3) != 0x6C6F6F705F677661)
  {
LABEL_10:
    *(_DWORD *)a3 = 1;
    uint64_t v9 = a3 + 8;
    std::string::basic_string[abi:ne180100]<0>(&v139, "ne_avg_pool");
    uint64_t v10 = std::string::insert(&v139, 0, "Expected '");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v150.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    unint64_t v12 = std::string::append(&v150, "' op. Got ");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v128.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (*(uint64_t (**)(MIL::IROperation *))(*(void *)a1 + 56))(a1);
    int v15 = *(char *)(v14 + 23);
    if (v15 >= 0) {
      float v16 = (const std::string::value_type *)v14;
    }
    else {
      float v16 = *(const std::string::value_type **)v14;
    }
    if (v15 >= 0) {
      std::string::size_type v17 = *(unsigned __int8 *)(v14 + 23);
    }
    else {
      std::string::size_type v17 = *(void *)(v14 + 8);
    }
    BOOL v18 = std::string::append(&v128, v16, v17);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    *(void *)(v9 + 16) = *((void *)&v18->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v9 = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v128.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v150.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
    {
      unint64_t v20 = (void *)v139.__r_.__value_.__r.__words[0];
LABEL_22:
      operator delete(v20);
      return;
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v128, "x");
  uint64_t InterpretedTensorValue = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&v128);
  uint64_t v22 = InterpretedTensorValue;
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v128.__r_.__value_.__l.__data_);
    if (v22)
    {
LABEL_26:
      std::string::basic_string[abi:ne180100]<0>(&v128, "kernel_sizes");
      uint64_t ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
      MIL::IRValue::AsTensor(ParameterValue);
      uint64_t Data = MIL::IRTensorValue::GetDataView<int>();
      std::vector<int>::size_type __n = v24;
      if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v128.__r_.__value_.__l.__data_);
        std::vector<int>::size_type v24 = __n;
      }
      std::vector<int>::vector((std::vector<int> *)&v139, v24);
      if (v139.__r_.__value_.__l.__size_ != v139.__r_.__value_.__r.__words[0])
      {
        unint64_t v25 = 0;
        do
        {
          uint64_t v26 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::At(&Data, v25);
          std::string::size_type v27 = v139.__r_.__value_.__r.__words[0];
          *(_DWORD *)(v139.__r_.__value_.__r.__words[0] + 4 * v25++) = *v26;
        }
        while (v25 < (uint64_t)(v139.__r_.__value_.__l.__size_ - v27) >> 2);
      }
      std::string::basic_string[abi:ne180100]<0>(&v128, "strides");
      int v28 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
      MIL::IRValue::AsTensor(v28);
      uint64_t v135 = MIL::IRTensorValue::GetDataView<int>();
      std::vector<int>::size_type v136 = v29;
      if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v128.__r_.__value_.__l.__data_);
        std::vector<int>::size_type v29 = v136;
      }
      std::vector<int>::vector(&v134, v29);
      if (v134.__end_ != v134.__begin_)
      {
        unint64_t v30 = 0;
        do
        {
          uint64_t v31 = (int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v135, v30);
          std::vector<int>::pointer begin = v134.__begin_;
          v134.__begin_[v30++] = *v31;
        }
        while (v30 < v134.__end_ - begin);
      }
      std::string::basic_string[abi:ne180100]<0>(&v128, "post_right_shift");
      uint64_t v33 = MIL::IROperation::TryGetParameterValue();
      if (v33
        && (*(uint64_t (**)(uint64_t))(*(void *)v33 + 40))(v33)
        && (long long v34 = (char *)MEMORY[0x21667B840]()) != 0)
      {
        char v120 = *v34;
      }
      else
      {
        char v120 = 0;
      }
      if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v128.__r_.__value_.__l.__data_);
      }
      size_t v35 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v128, "post_scale");
      unsigned __int16 v36 = MIL::Fp16::FromFloat(v35, 1.0);
      uint64_t v37 = MIL::IROperation::TryGetParameterValue();
      if (v37)
      {
        if ((*(uint64_t (**)(uint64_t))(*(void *)v37 + 40))(v37))
        {
          uint64_t v38 = (unsigned __int16 *)MEMORY[0x21667B820]();
          if (v38) {
            unsigned __int16 v36 = *v38;
          }
        }
      }
      if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v128.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v128, "custom_pads");
      uint64_t v39 = MIL::IROperation::TryGetParameterValue();
      if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v128.__r_.__value_.__l.__data_);
      }
      long long v40 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v128, "bias");
      unsigned __int16 v122 = MIL::Fp16::FromFloat(v40, 0.0);
      uint64_t v41 = MIL::IROperation::TryGetParameterValue();
      if (v41)
      {
        if ((*(uint64_t (**)(uint64_t))(*(void *)v41 + 40))(v41))
        {
          uint64_t v42 = (unsigned __int16 *)MEMORY[0x21667B820]();
          if (v42) {
            unsigned __int16 v122 = *v42;
          }
        }
      }
      if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v128.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v128, "acc_left_shift");
      uint64_t v43 = MIL::IROperation::TryGetParameterValue();
      if (v43
        && (*(uint64_t (**)(uint64_t))(*(void *)v43 + 40))(v43)
        && (uint64_t v44 = (char *)MEMORY[0x21667B840]()) != 0)
      {
        char v119 = *v44;
      }
      else
      {
        char v119 = 0;
      }
      if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v128.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v128, "acc_bias_shift");
      uint64_t v45 = MIL::IROperation::TryGetParameterValue();
      if (v45
        && (*(uint64_t (**)(uint64_t))(*(void *)v45 + 40))(v45)
        && (uint64_t v46 = (char *)MEMORY[0x21667B840]()) != 0)
      {
        char v118 = *v46;
      }
      else
      {
        char v118 = 0;
      }
      if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v128.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v128, "include_pads");
      uint64_t v47 = MIL::IROperation::TryGetParameterValue();
      char v117 = v47
          && (*(uint64_t (**)(uint64_t))(*(void *)v47 + 40))(v47)
          && (uint64_t v48 = (unsigned char *)MEMORY[0x21667B850]()) != 0
          && *v48 != 0;
      if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v128.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v128, "pre_relu");
      uint64_t v49 = MIL::IROperation::TryGetParameterValue();
      char v115 = v49
          && (*(uint64_t (**)(uint64_t))(*(void *)v49 + 40))(v49)
          && (std::string v50 = (unsigned char *)MEMORY[0x21667B850]()) != 0
          && *v50 != 0;
      if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v128.__r_.__value_.__l.__data_);
      }
      uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 32))(v22);
      int v52 = (*(uint64_t (**)(uint64_t))(*(void *)v51 + 88))(v51);
      OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
      uint64_t v54 = MIL::IRValueType::AsTensorType(OutputType);
      int v121 = (*(uint64_t (**)(uint64_t))(*(void *)v54 + 88))(v54);
      unint64_t v55 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
      uint64_t v56 = MIL::IRValueType::AsTensorType(v55);
      size_t v116 = (*(uint64_t (**)(uint64_t))(*(void *)v56 + 16))(v56);
      unint64_t v57 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(void *)v22 + 32))(v22);
      ANEMachineIR::Utils::GetStaticTensorShape(v57, v58, (uint64_t)&v132);
      uint64_t v59 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
      uint64_t v60 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v59);
      ANEMachineIR::Utils::GetStaticTensorShape(v60, v61, (uint64_t)v131);
      int v123 = v52;
      uint64_t v124 = (uint64_t)a2;
      if (!v39)
      {
        uint64_t v72 = 0;
        uint64_t v73 = 0;
        uint64_t v74 = 0;
        uint64_t v75 = 0;
        uint64_t v69 = 0;
LABEL_97:
        v130[0] = v39;
        v130[1] = v69;
        v130[2] = v75;
        v130[3] = v74;
        v130[4] = v73;
        v130[5] = v72;
        if (v39 || v69 || v75 || v74 || v73 || v72)
        {
          *(_DWORD *)a3 = 3;
          std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), "Unimplemented pad: rdar://84906152");
          goto LABEL_160;
        }
        *(_OWORD *)&v128.__r_.__value_.__r.__words[1] = 0uLL;
        uint64_t v129 = 0;
        MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction((uint64_t)a1, (uint64_t)&v128, (uint64_t)&v150);
        if (LODWORD(v128.__r_.__value_.__l.__data_))
        {
          *(_DWORD *)a3 = v128.__r_.__value_.__l.__data_;
          *(_OWORD *)(a3 + 8) = *(_OWORD *)&v128.__r_.__value_.__r.__words[1];
          *(void *)(a3 + 24) = v129;
          *(_OWORD *)&v128.__r_.__value_.__r.__words[1] = 0uLL;
          uint64_t v129 = 0;
          goto LABEL_158;
        }
        switch(v123)
        {
          case 14:
            switch(v121)
            {
              case 14:
                uint64_t v106 = MIL::IRTensorValue::GetDataView<unsigned char>();
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v145, (uint64_t)&v150);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v145);
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v125, a1);
                std::string::size_type v107 = v125;
                if (v126 == v125) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                std::string::size_type v108 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v108);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v124, v107, (uint64_t *)&v140);
                long long v109 = v140;
                char v140 = 0;
                if (v109) {
                  (*((void (**)(void **))*v109 + 1))(v109);
                }
                goto LABEL_156;
              case 9:
                uint64_t v98 = MIL::IRTensorValue::GetDataView<unsigned char>();
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v144, (uint64_t)&v150);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v144);
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v125, a1);
                uint64_t v99 = v125;
                if (v126 == v125) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                int v100 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v100);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v124, v99, (uint64_t *)&v140);
                __int16 v101 = v140;
                char v140 = 0;
                if (v101) {
                  (*((void (**)(void **))*v101 + 1))(v101);
                }
                goto LABEL_156;
              case 4:
                uint64_t v85 = MIL::IRTensorValue::GetDataView<unsigned char>();
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v146, (uint64_t)&v150);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v146);
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v125, a1);
                long long v86 = v125;
                if (v126 == v125) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                long long v87 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v87);
                MIL::IRTensorValueType::MakeFloat16Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v124, v86, (uint64_t *)&v140);
                uint64_t v88 = v140;
                char v140 = 0;
                if (v88) {
                  (*((void (**)(void **))*v88 + 1))(v88);
                }
                goto LABEL_156;
            }
            break;
          case 9:
            switch(v121)
            {
              case 14:
                uint64_t v94 = MIL::IRTensorValue::GetDataView<signed char>();
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v142, (uint64_t)&v150);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v142);
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v125, a1);
                int v95 = v125;
                if (v126 == v125) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                int v96 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v96);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v124, v95, (uint64_t *)&v140);
                uint64_t v97 = v140;
                char v140 = 0;
                if (v97) {
                  (*((void (**)(void **))*v97 + 1))(v97);
                }
                goto LABEL_156;
              case 9:
                uint64_t v90 = MIL::IRTensorValue::GetDataView<signed char>();
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v141, (uint64_t)&v150);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v141);
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v125, a1);
                unint64_t v91 = v125;
                if (v126 == v125) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                unint64_t v92 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v92);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v124, v91, (uint64_t *)&v140);
                uint64_t v93 = v140;
                char v140 = 0;
                if (v93) {
                  (*((void (**)(void **))*v93 + 1))(v93);
                }
                goto LABEL_156;
              case 4:
                uint64_t v81 = MIL::IRTensorValue::GetDataView<signed char>();
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v143, (uint64_t)&v150);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v143);
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v125, a1);
                long long v82 = v125;
                if (v126 == v125) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                uint64_t v83 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v83);
                MIL::IRTensorValueType::MakeFloat16Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v124, v82, (uint64_t *)&v140);
                int v84 = v140;
                char v140 = 0;
                if (v84) {
                  (*((void (**)(void **))*v84 + 1))(v84);
                }
                goto LABEL_156;
            }
            break;
          case 4:
            switch(v121)
            {
              case 14:
                uint64_t v110 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v148, (uint64_t)&v150);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v148);
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v125, a1);
                long long v111 = v125;
                if (v126 == v125) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                std::string v112 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v112);
                MIL::IRTensorValueType::MakeUInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v124, v111, (uint64_t *)&v140);
                std::string v113 = v140;
                char v140 = 0;
                if (v113) {
                  (*((void (**)(void **))*v113 + 1))(v113);
                }
                goto LABEL_156;
              case 9:
                uint64_t v102 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v147, (uint64_t)&v150);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v147);
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v125, a1);
                uint64_t v103 = v125;
                if (v126 == v125) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                uint64_t v104 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v104);
                MIL::IRTensorValueType::MakeInt8Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v124, v103, (uint64_t *)&v140);
                long long v105 = v140;
                char v140 = 0;
                if (v105) {
                  (*((void (**)(void **))*v105 + 1))(v105);
                }
                goto LABEL_156;
              case 4:
                uint64_t v77 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v149, (uint64_t)&v150);
                std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v149);
                (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v125, a1);
                unint64_t v78 = v125;
                if (v126 == v125) {
                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                }
                unint64_t v79 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
                MIL::IRValueType::AsTensorType(v79);
                MIL::IRTensorValueType::MakeFloat16Value();
                MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v124, v78, (uint64_t *)&v140);
                uint64_t v80 = v140;
                char v140 = 0;
                if (v80) {
                  (*((void (**)(void **))*v80 + 1))(v80);
                }
LABEL_156:
                char v140 = (void **)&v125;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v140);
                *(_DWORD *)a3 = 0;
                std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), (char *)&unk_210C6BFE7);
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
                goto LABEL_158;
            }
            break;
          default:
            unint64_t v89 = "Unimplemented input dtype";
LABEL_132:
            *(_DWORD *)a3 = 3;
            std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), v89);
LABEL_158:
            std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](&v150);
            if (SHIBYTE(v129) < 0) {
              operator delete((void *)v128.__r_.__value_.__l.__size_);
            }
LABEL_160:
            if (v131[0])
            {
              v131[1] = v131[0];
              operator delete(v131[0]);
            }
            if (v132)
            {
              uint64_t v133 = v132;
              operator delete(v132);
            }
            if (v134.__begin_)
            {
              v134.__end_ = v134.__begin_;
              operator delete(v134.__begin_);
            }
            unint64_t v20 = (void *)v139.__r_.__value_.__r.__words[0];
            if (v139.__r_.__value_.__r.__words[0])
            {
              v139.__r_.__value_.__l.__size_ = v139.__r_.__value_.__r.__words[0];
              goto LABEL_22;
            }
            return;
        }
        unint64_t v89 = "Unimplemented output dtype";
        goto LABEL_132;
      }
      unsigned __int16 v62 = v36;
      uint64_t v64 = v132;
      uint64_t v63 = v133;
      MIL::IRValue::AsTensor((MIL::IRValue *)v39);
      uint64_t v65 = MIL::IRTensorValue::GetDataView<int>();
      uint64_t v66 = (v63 - v64) >> 3;
      unint64_t v67 = v66 - 2;
      v128.__r_.__value_.__r.__words[0] = v65;
      v128.__r_.__value_.__l.__size_ = v68;
      if (v66 == 5)
      {
        uint64_t v39 = *(int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v128, 0);
        uint64_t v69 = *(int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v128, 1uLL);
      }
      else
      {
        if (v67 <= 1)
        {
          uint64_t v39 = 0;
          uint64_t v69 = 0;
          uint64_t v74 = 0;
          uint64_t v75 = 0;
          uint64_t v76 = 2 * v67;
          goto LABEL_96;
        }
        uint64_t v39 = 0;
        uint64_t v69 = 0;
      }
      uint64_t v76 = 2 * v67;
      uint64_t v75 = *(int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v128, 2 * v67 - 4);
      uint64_t v74 = *(int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v128, 2 * v67 - 3);
LABEL_96:
      uint64_t v73 = *(int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v128, v76 - 2);
      uint64_t v72 = *(int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v128, v76 - 1);
      unsigned __int16 v36 = v62;
      goto LABEL_97;
    }
  }
  else if (InterpretedTensorValue)
  {
    goto LABEL_26;
  }
  *(_DWORD *)a3 = 2;
  std::string::basic_string[abi:ne180100]<0>(&v128, "x");
  long long v70 = std::string::insert(&v128, 0, "No value for ");
  long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
  *(void *)(a3 + 24) = *((void *)&v70->__r_.__value_.__l + 2);
  *(_OWORD *)(a3 + 8) = v71;
  v70->__r_.__value_.__l.__size_ = 0;
  v70->__r_.__value_.__r.__words[2] = 0;
  v70->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
  {
    unint64_t v20 = (void *)v128.__r_.__value_.__r.__words[0];
    goto LABEL_22;
  }
}

void sub_210B420B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52)
{
  if (__p) {
    operator delete(__p);
  }
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100]((void *)(v52 - 128));
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a39) {
    operator delete(a39);
  }
  if (a42) {
    operator delete(a42);
  }
  if (a45) {
    operator delete(a45);
  }
  if (a52) {
    operator delete(a52);
  }
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int *a7@<X6>, int a8@<W7>, void *a9@<X8>, char a10, char a11, int a12, __int16 a13, int a14, __int16 a15, int a16, char a17, char a18, uint64_t a19)
{
  uint64_t v140 = *MEMORY[0x263EF8340];
  __int16 v135 = a13;
  __int16 v134 = a15;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a2);
  std::vector<int>::size_type v24 = *(const void **)a3;
  uint64_t v25 = *(void *)(a3 + 8);
  unint64_t v26 = (v25 - *(void *)a3) >> 3;
  if (v26 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    int v96 = "x_rank == o_shape.size()";
    int v97 = 68;
    goto LABEL_112;
  }
  uint64_t v27 = *a5;
  uint64_t v28 = a5[1];
  uint64_t v29 = (v28 - *a5) >> 2;
  if (v29 != v26 - 1)
  {
    int v96 = "kernel_sizes.size() == num_spatial_dims + 1";
    int v97 = 69;
    goto LABEL_112;
  }
  uint64_t v30 = *a6;
  uint64_t v31 = a6[1];
  if (v29 != (v31 - *a6) >> 2)
  {
    int v96 = "strides.size() == num_spatial_dims + 1";
    int v97 = 70;
    goto LABEL_112;
  }
  if (*(_DWORD *)(v28 - 4) != *(_DWORD *)(v31 - 4))
  {
    int v96 = "kernel_sizes.back() == strides.back()";
    int v97 = 71;
LABEL_112:
    __assert_rtn("ComputeValueAvgPool", "NePoolCpu.cpp", v97, v96);
  }
  unint64_t v32 = v26 - 2;
  uint64_t v33 = 4 * v26;
  if (v26 == 5)
  {
    unint64_t v113 = *(int *)(v27 + v33 - 20);
    uint64_t v99 = *(int *)(v30 + v33 - 20);
    uint64_t v34 = 2;
LABEL_9:
    uint64_t v35 = v33 - 16;
    unint64_t v118 = *(int *)(v27 + v35);
    int v36 = *(_DWORD *)(v30 + v35);
    int v37 = 1;
    goto LABEL_11;
  }
  uint64_t v34 = v26 - 3;
  uint64_t v99 = 1;
  if (v32 > 1)
  {
    unint64_t v113 = 1;
    goto LABEL_9;
  }
  int v37 = 0;
  unint64_t v113 = 1;
  unint64_t v118 = 1;
  int v36 = 1;
LABEL_11:
  unsigned int v124 = *(_DWORD *)(v27 + 4 * v32);
  unint64_t v117 = *(int *)(v27 + 4 * v34);
  uint64_t v100 = *(int *)(v30 + 4 * v34);
  uint64_t v105 = *(int *)(v30 + 4 * v32);
  uint64_t v131 = 0;
  char v132 = 0;
  uint64_t v133 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v131, v24, v25, v26);
  std::string v128 = 0;
  uint64_t v129 = 0;
  uint64_t v130 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v128, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v26 == 3)
  {
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v131, (uint64_t)(v131 + 8), (char *)__e, v138, 2);
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v128, (uint64_t)(v128 + 8), (char *)__e, v138, 2);
  }
  else if (v26 == 4)
  {
    *(void *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v131, v131 + 8, __e);
    *(void *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v128, v128 + 8, __e);
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v135);
  float v39 = v38;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v134);
  if (v26 == 5)
  {
    float v39 = v39 * (float)v113;
    if (a17) {
      float v40 = v40 / (float)v113;
    }
  }
  uint64_t v41 = a7;
  float v42 = v39 * (float)v118;
  if (v37)
  {
    float v43 = v40 / (float)v118;
  }
  else
  {
    float v42 = v39;
    float v43 = v40;
  }
  float v44 = v42 * (float)v117;
  uint64_t v101 = *(void *)v128;
  uint64_t v102 = *((void *)v128 + 1);
  uint64_t v103 = *((void *)v128 + 2);
  uint64_t v104 = *((void *)v128 + 3);
  uint64_t v110 = *((void *)v128 + 4);
  uint64_t v112 = *((void *)v131 + 1);
  uint64_t v116 = *((void *)v131 + 2);
  uint64_t v120 = *((void *)v131 + 3);
  v136[0] = &unk_26C3159E8;
  v136[3] = v136;
  if (a18)
  {
    *(void *)__e = &unk_26C315A78;
    std::string v139 = __e;
    std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::swap[abi:ne180100](__e, v136);
    std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::~__value_func[abi:ne180100](__e);
  }
  double v45 = ldexp(1.0, a8 + 20);
  float v46 = ldexp(1.0, a8 + 20 + a10);
  float v47 = v44 * v46;
  unsigned int v48 = llroundf(v47);
  if (fabsf(v47) < 1.0) {
    unsigned int v48 = 0;
  }
  unsigned int v106 = v48;
  double v49 = exp2(-(double)(a8 + 20 + a11));
  char v50 = a17;
  if (v101)
  {
    uint64_t v51 = 0;
    float v52 = v43 / (float)v117;
    uint64_t v98 = v36;
    float v53 = v45;
    double v54 = v49 * v52;
    int v55 = v124;
    if (v124 <= 1) {
      int v55 = 1;
    }
    uint64_t v121 = v55;
    uint64_t v56 = v117;
    if (v117 <= 1) {
      uint64_t v56 = 1;
    }
    uint64_t v125 = v56;
    float v57 = v54;
    while (!v102)
    {
LABEL_102:
      if (++v51 == v101) {
        goto LABEL_103;
      }
    }
    uint64_t v108 = 0;
    while (!v103)
    {
LABEL_101:
      if (++v108 == v102) {
        goto LABEL_102;
      }
    }
    uint64_t v109 = 0;
    while (!v104)
    {
LABEL_100:
      if (++v109 == v103) {
        goto LABEL_101;
      }
    }
    uint64_t v111 = 0;
    while (!v110)
    {
LABEL_99:
      if (++v111 == v104) {
        goto LABEL_100;
      }
    }
    uint64_t v122 = 0;
    uint64_t v58 = 0;
    while (1)
    {
      if (v113)
      {
        uint64_t v59 = 0;
        uint64_t v114 = 0;
        int v60 = 0;
        int v127 = v106;
        while (1)
        {
          uint64_t v115 = v59;
          unint64_t v61 = v59 + v108 * v99;
          if ((v50 & 1) == 0 && (v61 < *v41 || v61 >= v112 - v41[1])) {
            goto LABEL_82;
          }
          if (v118) {
            break;
          }
LABEL_79:
          ++v114;
          uint64_t v41 = a7;
LABEL_82:
          uint64_t v59 = v115 + 1;
          if (v115 + 1 == v113) {
            goto LABEL_85;
          }
        }
        uint64_t v62 = 0;
        while (2)
        {
          uint64_t v119 = v62;
          unint64_t v63 = v62 + v109 * v98;
          if (v50)
          {
            if (v117) {
              goto LABEL_52;
            }
LABEL_78:
            uint64_t v62 = v119 + 1;
            char v50 = a17;
            if (v119 + 1 == v118) {
              goto LABEL_79;
            }
            continue;
          }
          break;
        }
        if (v63 < a7[2]) {
          goto LABEL_78;
        }
        if (v63 >= v116 - a7[3] || v117 == 0) {
          goto LABEL_78;
        }
LABEL_52:
        uint64_t v65 = 0;
        while (2)
        {
          unint64_t v66 = v65 + v111 * v100;
          if (a17)
          {
            if (!v124) {
              goto LABEL_77;
            }
LABEL_61:
            uint64_t v69 = v121;
            uint64_t v68 = v122;
            do
            {
              __int16 v71 = std::function<MIL::Fp16 ()(MIL::Fp16)>::operator()((uint64_t)v136, *(_WORD *)(a1 + 2 * Index));
              if (!v60)
              {
                LOWORD(__e[0]) = v71;
                MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                float v73 = v72;
                int v74 = ilogbf(v72);
                if (v74 <= -14) {
                  int v75 = -14;
                }
                else {
                  int v75 = v74;
                }
                int v76 = ilogbf(1.0);
                if (v76 <= -14) {
                  int v77 = -14;
                }
                else {
                  int v77 = v76;
                }
                if (v75 + a8 + v77 >= -20)
                {
                  uint64_t v78 = (int)llroundf(v73 * v53) + (uint64_t)v127;
                  if (v78 <= 0x7FFFFFFF)
                  {
                    BOOL v79 = v78 < (uint64_t)0xFFFFFFFF80000000;
                    if (v78 < (uint64_t)0xFFFFFFFF80000000) {
                      LODWORD(v78) = -8388608;
                    }
                    int v127 = v78;
                    int v60 = 2 * v79;
                  }
                  else
                  {
                    int v60 = 1;
                    int v127 = 2139095040;
                  }
                }
                else
                {
                  int v60 = 0;
                }
              }
              ++v68;
              --v69;
            }
            while (v69);
          }
          else if (v66 >= a7[4] && v66 < v120 - a7[5] && v124 != 0)
          {
            goto LABEL_61;
          }
LABEL_77:
          if (++v65 == v125) {
            goto LABEL_78;
          }
          continue;
        }
      }
      int v60 = 0;
      uint64_t v114 = 0;
      int v127 = v106;
LABEL_85:
      LOWORD(__e[0]) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v114];
      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
      float v81 = v80 * v57;
      float v82 = 0.0;
      if (v81 == 0.0)
      {
        if (v60) {
          goto LABEL_87;
        }
      }
      else
      {
        __e[0] = 0;
        long double v84 = frexp(v81, __e);
        double v85 = ldexp(v84, 11);
        float v82 = ldexp(round(v85), __e[0] - 11);
        if (v60)
        {
LABEL_87:
          double v83 = INFINITY;
          if (v60 == 2) {
            double v83 = -INFINITY;
          }
          goto LABEL_93;
        }
      }
      if (!v127)
      {
        float v88 = 0.0;
        goto LABEL_94;
      }
      double v83 = (double)v127;
LABEL_93:
      __e[0] = 0;
      long double v86 = frexp(v83, __e);
      double v87 = ldexp(v86, 11);
      float v88 = ldexp(round(v87), __e[0] - 11);
LABEL_94:
      float v89 = v82 * v88;
      float v90 = 0.0;
      if (v89 != 0.0)
      {
        __e[0] = 0;
        long double v91 = frexp(v89, __e);
        double v92 = ldexp(v91, 11);
        float v90 = ldexp(round(v92), __e[0] - 11);
      }
      uint64_t v93 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(a19, v90);
      __int16 v95 = MIL::Fp16::FromFloat(v93, v94);
      *(_WORD *)(*a9
               + 2
      v122 += v105;
      if (v58 == v110) {
        goto LABEL_99;
      }
    }
  }
LABEL_103:
  std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::~__value_func[abi:ne180100](v136);
  if (v128)
  {
    uint64_t v129 = v128;
    operator delete(v128);
  }
  if (v131)
  {
    char v132 = v131;
    operator delete(v131);
  }
}

void sub_210B42D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  size_t v21 = *(void **)(v19 - 248);
  if (v21)
  {
    *(void *)(v19 - 240) = v21;
    operator delete(v21);
  }
  uint64_t v22 = *(void **)(v19 - 224);
  if (v22)
  {
    *(void *)(v19 - 216) = v22;
    operator delete(v22);
  }
  unint64_t v23 = *(void **)a19;
  if (*(void *)a19)
  {
    *(void *)(a19 + 8) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int *a7@<X6>, int a8@<W7>, unint64_t *a9@<X8>, char a10, char a11, uint64_t a12, uint64_t a13, char a14, char a15, uint64_t a16)
{
  uint64_t v137 = *MEMORY[0x263EF8340];
  __int16 v132 = a12;
  __int16 v131 = a13;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2) {
    std::vector<unsigned char>::__append(a9, a2);
  }
  size_t v21 = *(const void **)a3;
  uint64_t v22 = *(void *)(a3 + 8);
  unint64_t v23 = (v22 - *(void *)a3) >> 3;
  if (v23 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    uint64_t v93 = "x_rank == o_shape.size()";
    int v94 = 68;
    goto LABEL_121;
  }
  uint64_t v24 = *a5;
  uint64_t v25 = a5[1];
  uint64_t v26 = (v25 - *a5) >> 2;
  if (v26 != v23 - 1)
  {
    uint64_t v93 = "kernel_sizes.size() == num_spatial_dims + 1";
    int v94 = 69;
    goto LABEL_121;
  }
  uint64_t v27 = *a6;
  uint64_t v28 = a6[1];
  if (v26 != (v28 - *a6) >> 2)
  {
    uint64_t v93 = "strides.size() == num_spatial_dims + 1";
    int v94 = 70;
    goto LABEL_121;
  }
  if (*(_DWORD *)(v25 - 4) != *(_DWORD *)(v28 - 4))
  {
    uint64_t v93 = "kernel_sizes.back() == strides.back()";
    int v94 = 71;
LABEL_121:
    __assert_rtn("ComputeValueAvgPool", "NePoolCpu.cpp", v94, v93);
  }
  unint64_t v29 = v23 - 2;
  uint64_t v30 = 4 * v23;
  if (v23 == 5)
  {
    unint64_t v110 = *(int *)(v24 + v30 - 20);
    uint64_t v96 = *(int *)(v27 + v30 - 20);
    uint64_t v31 = 2;
LABEL_11:
    uint64_t v32 = v30 - 16;
    unint64_t v115 = *(int *)(v24 + v32);
    int v33 = *(_DWORD *)(v27 + v32);
    int v34 = 1;
    goto LABEL_13;
  }
  uint64_t v31 = v23 - 3;
  uint64_t v96 = 1;
  if (v29 > 1)
  {
    unint64_t v110 = 1;
    goto LABEL_11;
  }
  int v34 = 0;
  unint64_t v110 = 1;
  unint64_t v115 = 1;
  int v33 = 1;
LABEL_13:
  unsigned int v121 = *(_DWORD *)(v24 + 4 * v29);
  unint64_t v114 = *(int *)(v24 + 4 * v31);
  uint64_t v97 = *(int *)(v27 + 4 * v31);
  uint64_t v102 = *(int *)(v27 + 4 * v29);
  std::string v128 = 0;
  uint64_t v129 = 0;
  uint64_t v130 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v128, v21, v22, v23);
  uint64_t v125 = 0;
  uint64_t v126 = 0;
  uint64_t v127 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v125, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v23 == 3)
  {
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v128, (uint64_t)(v128 + 8), (char *)__e, v135, 2);
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v125, (uint64_t)(v125 + 8), (char *)__e, v135, 2);
  }
  else if (v23 == 4)
  {
    *(void *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v128, v128 + 8, __e);
    *(void *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v125, v125 + 8, __e);
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v132);
  float v36 = v35;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v131);
  if (v23 == 5)
  {
    float v36 = v36 * (float)v110;
    if (a14) {
      float v37 = v37 / (float)v110;
    }
  }
  float v38 = a7;
  float v39 = v36 * (float)v115;
  if (v34)
  {
    float v40 = v37 / (float)v115;
  }
  else
  {
    float v39 = v36;
    float v40 = v37;
  }
  float v41 = v39 * (float)v114;
  uint64_t v98 = *(void *)v125;
  uint64_t v99 = *((void *)v125 + 1);
  uint64_t v100 = *((void *)v125 + 2);
  uint64_t v101 = *((void *)v125 + 3);
  uint64_t v107 = *((void *)v125 + 4);
  uint64_t v109 = *((void *)v128 + 1);
  uint64_t v113 = *((void *)v128 + 2);
  uint64_t v117 = *((void *)v128 + 3);
  v133[0] = &unk_26C315AF8;
  v133[3] = v133;
  if (a15)
  {
    *(void *)__e = &unk_26C315B78;
    std::vector<int>::size_type v136 = __e;
    std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::swap[abi:ne180100](__e, v133);
    std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::~__value_func[abi:ne180100](__e);
  }
  double v42 = ldexp(1.0, a8 + 20);
  float v43 = ldexp(1.0, a8 + 20 + a10);
  float v44 = v41 * v43;
  unsigned int v45 = llroundf(v44);
  if (fabsf(v44) < 1.0) {
    unsigned int v45 = 0;
  }
  unsigned int v103 = v45;
  double v46 = exp2(-(double)(a8 + 20 + a11));
  char v47 = a14;
  if (v98)
  {
    uint64_t v48 = 0;
    float v49 = v40 / (float)v114;
    uint64_t v95 = v33;
    float v50 = v42;
    double v51 = v46 * v49;
    int v52 = v121;
    if (v121 <= 1) {
      int v52 = 1;
    }
    uint64_t v118 = v52;
    uint64_t v53 = v114;
    if (v114 <= 1) {
      uint64_t v53 = 1;
    }
    uint64_t v122 = v53;
    float v54 = v51;
    while (!v99)
    {
LABEL_111:
      if (++v48 == v98) {
        goto LABEL_112;
      }
    }
    uint64_t v105 = 0;
    while (!v100)
    {
LABEL_110:
      if (++v105 == v99) {
        goto LABEL_111;
      }
    }
    uint64_t v106 = 0;
    while (!v101)
    {
LABEL_109:
      if (++v106 == v100) {
        goto LABEL_110;
      }
    }
    uint64_t v108 = 0;
    while (!v107)
    {
LABEL_108:
      if (++v108 == v101) {
        goto LABEL_109;
      }
    }
    uint64_t v119 = 0;
    uint64_t v55 = 0;
    while (1)
    {
      if (v110)
      {
        uint64_t v56 = 0;
        uint64_t v111 = 0;
        int v57 = 0;
        int v124 = v103;
        while (1)
        {
          uint64_t v112 = v56;
          unint64_t v58 = v56 + v105 * v96;
          if ((v47 & 1) == 0 && (v58 < *v38 || v58 >= v109 - v38[1])) {
            goto LABEL_84;
          }
          if (v115) {
            break;
          }
LABEL_81:
          ++v111;
          float v38 = a7;
LABEL_84:
          uint64_t v56 = v112 + 1;
          if (v112 + 1 == v110) {
            goto LABEL_87;
          }
        }
        uint64_t v59 = 0;
        while (2)
        {
          uint64_t v116 = v59;
          unint64_t v60 = v59 + v106 * v95;
          if (v47)
          {
            if (v114) {
              goto LABEL_54;
            }
LABEL_80:
            uint64_t v59 = v116 + 1;
            char v47 = a14;
            if (v116 + 1 == v115) {
              goto LABEL_81;
            }
            continue;
          }
          break;
        }
        if (v60 < a7[2]) {
          goto LABEL_80;
        }
        if (v60 >= v113 - a7[3] || v114 == 0) {
          goto LABEL_80;
        }
LABEL_54:
        uint64_t v62 = 0;
        while (2)
        {
          unint64_t v63 = v62 + v108 * v97;
          if (a14)
          {
            if (!v121) {
              goto LABEL_79;
            }
LABEL_63:
            uint64_t v66 = v118;
            uint64_t v65 = v119;
            do
            {
              __int16 v68 = std::function<MIL::Fp16 ()(MIL::Fp16)>::operator()((uint64_t)v133, *(_WORD *)(a1 + 2 * Index));
              if (!v57)
              {
                LOWORD(__e[0]) = v68;
                MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                float v70 = v69;
                int v71 = ilogbf(v69);
                if (v71 <= -14) {
                  int v72 = -14;
                }
                else {
                  int v72 = v71;
                }
                int v73 = ilogbf(1.0);
                if (v73 <= -14) {
                  int v74 = -14;
                }
                else {
                  int v74 = v73;
                }
                if (v72 + a8 + v74 >= -20)
                {
                  uint64_t v75 = (int)llroundf(v70 * v50) + (uint64_t)v124;
                  if (v75 <= 0x7FFFFFFF)
                  {
                    BOOL v76 = v75 < (uint64_t)0xFFFFFFFF80000000;
                    if (v75 < (uint64_t)0xFFFFFFFF80000000) {
                      LODWORD(v75) = -8388608;
                    }
                    int v124 = v75;
                    int v57 = 2 * v76;
                  }
                  else
                  {
                    int v57 = 1;
                    int v124 = 2139095040;
                  }
                }
                else
                {
                  int v57 = 0;
                }
              }
              ++v65;
              --v66;
            }
            while (v66);
          }
          else if (v63 >= a7[4] && v63 < v117 - a7[5] && v121 != 0)
          {
            goto LABEL_63;
          }
LABEL_79:
          if (++v62 == v122) {
            goto LABEL_80;
          }
          continue;
        }
      }
      int v57 = 0;
      uint64_t v111 = 0;
      int v124 = v103;
LABEL_87:
      LOWORD(__e[0]) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v111];
      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
      float v78 = v77 * v54;
      float v79 = 0.0;
      if (v78 == 0.0)
      {
        if (v57) {
          goto LABEL_89;
        }
      }
      else
      {
        __e[0] = 0;
        long double v81 = frexp(v78, __e);
        double v82 = ldexp(v81, 11);
        float v79 = ldexp(round(v82), __e[0] - 11);
        if (v57)
        {
LABEL_89:
          double v80 = INFINITY;
          if (v57 == 2) {
            double v80 = -INFINITY;
          }
          goto LABEL_95;
        }
      }
      if (!v124)
      {
        float v85 = 0.0;
        goto LABEL_96;
      }
      double v80 = (double)v124;
LABEL_95:
      __e[0] = 0;
      long double v83 = frexp(v80, __e);
      double v84 = ldexp(v83, 11);
      float v85 = ldexp(round(v84), __e[0] - 11);
LABEL_96:
      float v86 = v79 * v85;
      float v87 = 0.0;
      if (v86 != 0.0)
      {
        __e[0] = 0;
        long double v88 = frexp(v86, __e);
        double v89 = ldexp(v88, 11);
        float v87 = ldexp(round(v89), __e[0] - 11);
      }
      std::function<float ()(float)>::operator()(a16, v87);
      if (v90 == INFINITY)
      {
        LOBYTE(v91) = -1;
      }
      else if (v90 == -INFINITY)
      {
        LOBYTE(v91) = 0;
      }
      else
      {
        int v92 = llroundf(v90);
        if (v92 >= 255) {
          int v92 = 255;
        }
        int v91 = v92 & ~(v92 >> 31);
      }
      *(unsigned char *)(*a9
      v119 += v102;
      if (v55 == v107) {
        goto LABEL_108;
      }
    }
  }
LABEL_112:
  std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::~__value_func[abi:ne180100](v133);
  if (v125)
  {
    uint64_t v126 = v125;
    operator delete(v125);
  }
  if (v128)
  {
    uint64_t v129 = v128;
    operator delete(v128);
  }
}

void sub_210B436F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  size_t v21 = *(void **)(v19 - 248);
  if (v21)
  {
    *(void *)(v19 - 240) = v21;
    operator delete(v21);
  }
  uint64_t v22 = *(void **)(v19 - 224);
  if (v22)
  {
    *(void *)(v19 - 216) = v22;
    operator delete(v22);
  }
  unint64_t v23 = *(void **)a19;
  if (*(void *)a19)
  {
    *(void *)(a19 + 8) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int *a7@<X6>, int a8@<W7>, unint64_t *a9@<X8>, char a10, char a11, uint64_t a12, uint64_t a13, char a14, char a15, uint64_t a16)
{
  uint64_t v137 = *MEMORY[0x263EF8340];
  __int16 v132 = a12;
  __int16 v131 = a13;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2) {
    std::vector<unsigned char>::__append(a9, a2);
  }
  size_t v21 = *(const void **)a3;
  uint64_t v22 = *(void *)(a3 + 8);
  unint64_t v23 = (v22 - *(void *)a3) >> 3;
  if (v23 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    uint64_t v93 = "x_rank == o_shape.size()";
    int v94 = 68;
    goto LABEL_123;
  }
  uint64_t v24 = *a5;
  uint64_t v25 = a5[1];
  uint64_t v26 = (v25 - *a5) >> 2;
  if (v26 != v23 - 1)
  {
    uint64_t v93 = "kernel_sizes.size() == num_spatial_dims + 1";
    int v94 = 69;
    goto LABEL_123;
  }
  uint64_t v27 = *a6;
  uint64_t v28 = a6[1];
  if (v26 != (v28 - *a6) >> 2)
  {
    uint64_t v93 = "strides.size() == num_spatial_dims + 1";
    int v94 = 70;
    goto LABEL_123;
  }
  if (*(_DWORD *)(v25 - 4) != *(_DWORD *)(v28 - 4))
  {
    uint64_t v93 = "kernel_sizes.back() == strides.back()";
    int v94 = 71;
LABEL_123:
    __assert_rtn("ComputeValueAvgPool", "NePoolCpu.cpp", v94, v93);
  }
  unint64_t v29 = v23 - 2;
  uint64_t v30 = 4 * v23;
  if (v23 == 5)
  {
    unint64_t v110 = *(int *)(v24 + v30 - 20);
    uint64_t v96 = *(int *)(v27 + v30 - 20);
    uint64_t v31 = 2;
LABEL_11:
    uint64_t v32 = v30 - 16;
    unint64_t v115 = *(int *)(v24 + v32);
    int v33 = *(_DWORD *)(v27 + v32);
    int v34 = 1;
    goto LABEL_13;
  }
  uint64_t v31 = v23 - 3;
  uint64_t v96 = 1;
  if (v29 > 1)
  {
    unint64_t v110 = 1;
    goto LABEL_11;
  }
  int v34 = 0;
  unint64_t v110 = 1;
  unint64_t v115 = 1;
  int v33 = 1;
LABEL_13:
  unsigned int v121 = *(_DWORD *)(v24 + 4 * v29);
  unint64_t v114 = *(int *)(v24 + 4 * v31);
  uint64_t v97 = *(int *)(v27 + 4 * v31);
  uint64_t v102 = *(int *)(v27 + 4 * v29);
  std::string v128 = 0;
  uint64_t v129 = 0;
  uint64_t v130 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v128, v21, v22, v23);
  uint64_t v125 = 0;
  uint64_t v126 = 0;
  uint64_t v127 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v125, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v23 == 3)
  {
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v128, (uint64_t)(v128 + 8), (char *)__e, v135, 2);
    *(int64x2_t *)__e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v125, (uint64_t)(v125 + 8), (char *)__e, v135, 2);
  }
  else if (v23 == 4)
  {
    *(void *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v128, v128 + 8, __e);
    *(void *)__e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v125, v125 + 8, __e);
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v132);
  float v36 = v35;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v131);
  if (v23 == 5)
  {
    float v36 = v36 * (float)v110;
    if (a14) {
      float v37 = v37 / (float)v110;
    }
  }
  float v38 = a7;
  float v39 = v36 * (float)v115;
  if (v34)
  {
    float v40 = v37 / (float)v115;
  }
  else
  {
    float v39 = v36;
    float v40 = v37;
  }
  float v41 = v39 * (float)v114;
  uint64_t v98 = *(void *)v125;
  uint64_t v99 = *((void *)v125 + 1);
  uint64_t v100 = *((void *)v125 + 2);
  uint64_t v101 = *((void *)v125 + 3);
  uint64_t v107 = *((void *)v125 + 4);
  uint64_t v109 = *((void *)v128 + 1);
  uint64_t v113 = *((void *)v128 + 2);
  uint64_t v117 = *((void *)v128 + 3);
  v133[0] = &unk_26C315BF8;
  v133[3] = v133;
  if (a15)
  {
    *(void *)__e = &unk_26C315C78;
    std::vector<int>::size_type v136 = __e;
    std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::swap[abi:ne180100](__e, v133);
    std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::~__value_func[abi:ne180100](__e);
  }
  double v42 = ldexp(1.0, a8 + 20);
  float v43 = ldexp(1.0, a8 + 20 + a10);
  float v44 = v41 * v43;
  unsigned int v45 = llroundf(v44);
  if (fabsf(v44) < 1.0) {
    unsigned int v45 = 0;
  }
  unsigned int v103 = v45;
  double v46 = exp2(-(double)(a8 + 20 + a11));
  char v47 = a14;
  if (v98)
  {
    uint64_t v48 = 0;
    float v49 = v40 / (float)v114;
    uint64_t v95 = v33;
    float v50 = v42;
    double v51 = v46 * v49;
    int v52 = v121;
    if (v121 <= 1) {
      int v52 = 1;
    }
    uint64_t v118 = v52;
    uint64_t v53 = v114;
    if (v114 <= 1) {
      uint64_t v53 = 1;
    }
    uint64_t v122 = v53;
    float v54 = v51;
    while (!v99)
    {
LABEL_113:
      if (++v48 == v98) {
        goto LABEL_114;
      }
    }
    uint64_t v105 = 0;
    while (!v100)
    {
LABEL_112:
      if (++v105 == v99) {
        goto LABEL_113;
      }
    }
    uint64_t v106 = 0;
    while (!v101)
    {
LABEL_111:
      if (++v106 == v100) {
        goto LABEL_112;
      }
    }
    uint64_t v108 = 0;
    while (!v107)
    {
LABEL_110:
      if (++v108 == v101) {
        goto LABEL_111;
      }
    }
    uint64_t v119 = 0;
    uint64_t v55 = 0;
    while (1)
    {
      if (v110)
      {
        uint64_t v56 = 0;
        uint64_t v111 = 0;
        int v57 = 0;
        int v124 = v103;
        while (1)
        {
          uint64_t v112 = v56;
          unint64_t v58 = v56 + v105 * v96;
          if ((v47 & 1) == 0 && (v58 < *v38 || v58 >= v109 - v38[1])) {
            goto LABEL_84;
          }
          if (v115) {
            break;
          }
LABEL_81:
          ++v111;
          float v38 = a7;
LABEL_84:
          uint64_t v56 = v112 + 1;
          if (v112 + 1 == v110) {
            goto LABEL_87;
          }
        }
        uint64_t v59 = 0;
        while (2)
        {
          uint64_t v116 = v59;
          unint64_t v60 = v59 + v106 * v95;
          if (v47)
          {
            if (v114) {
              goto LABEL_54;
            }
LABEL_80:
            uint64_t v59 = v116 + 1;
            char v47 = a14;
            if (v116 + 1 == v115) {
              goto LABEL_81;
            }
            continue;
          }
          break;
        }
        if (v60 < a7[2]) {
          goto LABEL_80;
        }
        if (v60 >= v113 - a7[3] || v114 == 0) {
          goto LABEL_80;
        }
LABEL_54:
        uint64_t v62 = 0;
        while (2)
        {
          unint64_t v63 = v62 + v108 * v97;
          if (a14)
          {
            if (!v121) {
              goto LABEL_79;
            }
LABEL_63:
            uint64_t v66 = v118;
            uint64_t v65 = v119;
            do
            {
              __int16 v68 = std::function<MIL::Fp16 ()(MIL::Fp16)>::operator()((uint64_t)v133, *(_WORD *)(a1 + 2 * Index));
              if (!v57)
              {
                LOWORD(__e[0]) = v68;
                MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                float v70 = v69;
                int v71 = ilogbf(v69);
                if (v71 <= -14) {
                  int v72 = -14;
                }
                else {
                  int v72 = v71;
                }
                int v73 = ilogbf(1.0);
                if (v73 <= -14) {
                  int v74 = -14;
                }
                else {
                  int v74 = v73;
                }
                if (v72 + a8 + v74 >= -20)
                {
                  uint64_t v75 = (int)llroundf(v70 * v50) + (uint64_t)v124;
                  if (v75 <= 0x7FFFFFFF)
                  {
                    BOOL v76 = v75 < (uint64_t)0xFFFFFFFF80000000;
                    if (v75 < (uint64_t)0xFFFFFFFF80000000) {
                      LODWORD(v75) = -8388608;
                    }
                    int v124 = v75;
                    int v57 = 2 * v76;
                  }
                  else
                  {
                    int v57 = 1;
                    int v124 = 2139095040;
                  }
                }
                else
                {
                  int v57 = 0;
                }
              }
              ++v65;
              --v66;
            }
            while (v66);
          }
          else if (v63 >= a7[4] && v63 < v117 - a7[5] && v121 != 0)
          {
            goto LABEL_63;
          }
LABEL_79:
          if (++v62 == v122) {
            goto LABEL_80;
          }
          continue;
        }
      }
      int v57 = 0;
      uint64_t v111 = 0;
      int v124 = v103;
LABEL_87:
      LOWORD(__e[0]) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v111];
      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
      float v78 = v77 * v54;
      float v79 = 0.0;
      if (v78 == 0.0)
      {
        if (v57) {
          goto LABEL_89;
        }
      }
      else
      {
        __e[0] = 0;
        long double v81 = frexp(v78, __e);
        double v82 = ldexp(v81, 11);
        float v79 = ldexp(round(v82), __e[0] - 11);
        if (v57)
        {
LABEL_89:
          double v80 = INFINITY;
          if (v57 == 2) {
            double v80 = -INFINITY;
          }
          goto LABEL_95;
        }
      }
      if (!v124)
      {
        float v85 = 0.0;
        goto LABEL_96;
      }
      double v80 = (double)v124;
LABEL_95:
      __e[0] = 0;
      long double v83 = frexp(v80, __e);
      double v84 = ldexp(v83, 11);
      float v85 = ldexp(round(v84), __e[0] - 11);
LABEL_96:
      float v86 = v79 * v85;
      float v87 = 0.0;
      if (v86 != 0.0)
      {
        __e[0] = 0;
        long double v88 = frexp(v86, __e);
        double v89 = ldexp(v88, 11);
        float v87 = ldexp(round(v89), __e[0] - 11);
      }
      std::function<float ()(float)>::operator()(a16, v87);
      if (v90 == INFINITY)
      {
        char v91 = 127;
      }
      else if (v90 == -INFINITY)
      {
        char v91 = 0x80;
      }
      else
      {
        int v92 = llroundf(v90);
        if (v92 >= 127) {
          int v92 = 127;
        }
        if (v92 <= -128) {
          char v91 = 0x80;
        }
        else {
          char v91 = v92;
        }
      }
      *(unsigned char *)(*a9
      v119 += v102;
      if (v55 == v107) {
        goto LABEL_110;
      }
    }
  }
LABEL_114:
  std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::~__value_func[abi:ne180100](v133);
  if (v125)
  {
    uint64_t v126 = v125;
    operator delete(v125);
  }
  if (v128)
  {
    uint64_t v129 = v128;
    operator delete(v128);
  }
}

void sub_210B440AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  size_t v21 = *(void **)(v19 - 248);
  if (v21)
  {
    *(void *)(v19 - 240) = v21;
    operator delete(v21);
  }
  uint64_t v22 = *(void **)(v19 - 224);
  if (v22)
  {
    *(void *)(v19 - 216) = v22;
    operator delete(v22);
  }
  unint64_t v23 = *(void **)a19;
  if (*(void *)a19)
  {
    *(void *)(a19 + 8) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int *a7@<X6>, int a8@<W7>, void *a9@<X8>, char a10, char a11, int a12, __int16 a13, int a14, __int16 a15, int a16, char a17, uint64_t a18)
{
  uint64_t v139 = *MEMORY[0x263EF8340];
  __int16 v134 = a13;
  __int16 v133 = a15;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a2);
  unint64_t v23 = *(const void **)a3;
  uint64_t v24 = *(void *)(a3 + 8);
  unint64_t v25 = (v24 - *(void *)a3) >> 3;
  if (v25 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    int v94 = "x_rank == o_shape.size()";
    int v95 = 68;
    goto LABEL_108;
  }
  uint64_t v26 = *a5;
  uint64_t v27 = a5[1];
  uint64_t v28 = (v27 - *a5) >> 2;
  if (v28 != v25 - 1)
  {
    int v94 = "kernel_sizes.size() == num_spatial_dims + 1";
    int v95 = 69;
    goto LABEL_108;
  }
  uint64_t v29 = *a6;
  uint64_t v30 = a6[1];
  if (v28 != (v30 - *a6) >> 2)
  {
    int v94 = "strides.size() == num_spatial_dims + 1";
    int v95 = 70;
    goto LABEL_108;
  }
  if (*(_DWORD *)(v27 - 4) != *(_DWORD *)(v30 - 4))
  {
    int v94 = "kernel_sizes.back() == strides.back()";
    int v95 = 71;
LABEL_108:
    __assert_rtn("ComputeValueAvgPool", "NePoolCpu.cpp", v95, v94);
  }
  unint64_t v31 = v25 - 2;
  uint64_t v32 = 4 * v25;
  if (v25 == 5)
  {
    unint64_t v111 = *(int *)(v26 + v32 - 20);
    uint64_t v98 = *(int *)(v29 + v32 - 20);
    uint64_t v33 = 2;
LABEL_9:
    uint64_t v34 = v32 - 16;
    unint64_t v116 = *(int *)(v26 + v34);
    int v35 = *(_DWORD *)(v29 + v34);
    int v36 = 1;
    goto LABEL_11;
  }
  uint64_t v33 = v25 - 3;
  uint64_t v98 = 1;
  if (v31 > 1)
  {
    unint64_t v111 = 1;
    goto LABEL_9;
  }
  int v36 = 0;
  unint64_t v111 = 1;
  unint64_t v116 = 1;
  int v35 = 1;
LABEL_11:
  unsigned int v122 = *(_DWORD *)(v26 + 4 * v31);
  unint64_t v115 = *(int *)(v26 + 4 * v33);
  uint64_t v99 = *(int *)(v29 + 4 * v33);
  uint64_t v103 = *(int *)(v29 + 4 * v31);
  uint64_t v130 = 0;
  __int16 v131 = 0;
  uint64_t v132 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v130, v23, v24, v25);
  uint64_t v127 = 0;
  std::string v128 = 0;
  uint64_t v129 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v127, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v25 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v130, (uint64_t)(v130 + 8), __src.i8, v137, 2);
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v127, (uint64_t)(v127 + 8), __src.i8, v137, 2);
  }
  else if (v25 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v130, v130 + 8, &__src);
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v127, v127 + 8, &__src);
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v134);
  float v38 = v37;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v133);
  if (v25 == 5)
  {
    float v38 = v38 * (float)v111;
    if (a17) {
      float v39 = v39 / (float)v111;
    }
  }
  char v40 = a17;
  float v41 = v38 * (float)v116;
  if (v36)
  {
    float v42 = v39 / (float)v116;
  }
  else
  {
    float v41 = v38;
    float v42 = v39;
  }
  uint64_t v43 = *(void *)v127;
  uint64_t v100 = *((void *)v127 + 1);
  uint64_t v101 = *((void *)v127 + 2);
  uint64_t v102 = *((void *)v127 + 3);
  uint64_t v107 = *((void *)v127 + 4);
  uint64_t v110 = *((void *)v130 + 1);
  uint64_t v114 = *((void *)v130 + 2);
  uint64_t v118 = *((void *)v130 + 3);
  __src.i64[0] = (uint64_t)&unk_26C315CF8;
  p_src = &__src;
  float v44 = v41 * (float)v115;
  double v45 = ldexp(1.0, a8);
  float v46 = ldexp(1.0, a10 + a8);
  float v47 = v44 * v46;
  unsigned int v48 = llroundf(v47);
  if (fabsf(v47) < 1.0) {
    unsigned int v48 = 0;
  }
  unsigned int v104 = v48;
  double v49 = exp2(-(double)(a11 + a8));
  float v50 = a9;
  double v51 = a7;
  uint64_t v97 = v43;
  if (v43)
  {
    uint64_t v52 = 0;
    uint64_t v96 = v35;
    float v53 = v45;
    double v54 = v49 * (float)(v42 / (float)v115);
    int v124 = -20 - a8;
    int v55 = v122;
    if (v122 <= 1) {
      int v55 = 1;
    }
    uint64_t v119 = v55;
    uint64_t v56 = v115;
    if (v115 <= 1) {
      uint64_t v56 = 1;
    }
    uint64_t v123 = v56;
    float v57 = v54;
    while (!v100)
    {
LABEL_98:
      if (++v52 == v97) {
        goto LABEL_99;
      }
    }
    uint64_t v105 = 0;
    while (!v101)
    {
LABEL_97:
      if (++v105 == v100) {
        goto LABEL_98;
      }
    }
    uint64_t v106 = 0;
    while (!v102)
    {
LABEL_96:
      if (++v106 == v101) {
        goto LABEL_97;
      }
    }
    uint64_t v108 = 0;
    while (!v107)
    {
LABEL_95:
      if (++v108 == v102) {
        goto LABEL_96;
      }
    }
    uint64_t v120 = 0;
    uint64_t v58 = 0;
    while (1)
    {
      uint64_t v109 = v58;
      if (v111)
      {
        uint64_t v59 = 0;
        uint64_t v60 = 0;
        int v61 = 0;
        int v62 = v104;
        while (1)
        {
          unint64_t v63 = v59 + v105 * v98;
          if ((v40 & 1) == 0 && (v63 < *v51 || v63 >= v110 - v51[1])) {
            goto LABEL_78;
          }
          uint64_t v112 = v59;
          uint64_t v113 = v60;
          if (v116) {
            break;
          }
LABEL_75:
          uint64_t v59 = v112;
          uint64_t v60 = v113 + 1;
          double v51 = a7;
LABEL_78:
          if (++v59 == v111) {
            goto LABEL_81;
          }
        }
        uint64_t v64 = 0;
        while (2)
        {
          unint64_t v65 = v64 + v106 * v96;
          uint64_t v117 = v64;
          if (v40)
          {
            if (v115) {
              goto LABEL_50;
            }
LABEL_74:
            uint64_t v64 = v117 + 1;
            char v40 = a17;
            if (v117 + 1 == v116) {
              goto LABEL_75;
            }
            continue;
          }
          break;
        }
        if (v65 < a7[2]) {
          goto LABEL_74;
        }
        if (v65 >= v114 - a7[3] || v115 == 0) {
          goto LABEL_74;
        }
LABEL_50:
        uint64_t v67 = 0;
        while (2)
        {
          unint64_t v68 = v67 + v108 * v99;
          if (a17)
          {
            if (!v122) {
              goto LABEL_73;
            }
LABEL_59:
            uint64_t v70 = v119;
            uint64_t v71 = v120;
            do
            {
              unsigned int v73 = std::function<unsigned char ()(unsigned char)>::operator()((uint64_t)&__src, *(unsigned char *)(a1 + Index));
              if (!v61)
              {
                unsigned int v74 = v73;
                int v75 = ilogbf(1.0);
                if (v75 <= -14) {
                  int v76 = -14;
                }
                else {
                  int v76 = v75;
                }
                if (v76 >= v124)
                {
                  uint64_t v77 = (int)llroundf(v53 * (float)v74) + (uint64_t)v62;
                  if (v77 <= 0x7FFFFFFF)
                  {
                    if (v77 >= (uint64_t)0xFFFFFFFF80000000) {
                      int v62 = v77;
                    }
                    else {
                      int v62 = -8388608;
                    }
                    int v61 = 2 * (v77 < (uint64_t)0xFFFFFFFF80000000);
                  }
                  else
                  {
                    int v61 = 1;
                    int v62 = 2139095040;
                  }
                }
                else
                {
                  int v61 = 0;
                }
              }
              float v50 = a9;
              ++v71;
              --v70;
            }
            while (v70);
          }
          else if (v68 >= a7[4] && v68 < v118 - a7[5] && v122 != 0)
          {
            goto LABEL_59;
          }
LABEL_73:
          if (++v67 == v123) {
            goto LABEL_74;
          }
          continue;
        }
      }
      int v61 = 0;
      uint64_t v60 = 0;
      int v62 = v104;
LABEL_81:
      LOWORD(__e) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v60];
      MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      float v79 = v78 * v57;
      float v80 = 0.0;
      if (v79 == 0.0)
      {
        if (v61) {
          goto LABEL_83;
        }
      }
      else
      {
        int __e = 0;
        long double v82 = frexp(v79, &__e);
        double v83 = ldexp(v82, 11);
        float v80 = ldexp(round(v83), __e - 11);
        if (v61)
        {
LABEL_83:
          double v81 = INFINITY;
          if (v61 == 2) {
            double v81 = -INFINITY;
          }
          goto LABEL_89;
        }
      }
      if (!v62)
      {
        float v86 = 0.0;
        goto LABEL_90;
      }
      double v81 = (double)v62;
LABEL_89:
      int __e = 0;
      long double v84 = frexp(v81, &__e);
      double v85 = ldexp(v84, 11);
      float v86 = ldexp(round(v85), __e - 11);
LABEL_90:
      float v87 = v80 * v86;
      float v88 = 0.0;
      if (v87 != 0.0)
      {
        int __e = 0;
        long double v89 = frexp(v87, &__e);
        double v90 = ldexp(v89, 11);
        float v88 = ldexp(round(v90), __e - 11);
      }
      char v91 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(a18, v88);
      __int16 v93 = MIL::Fp16::FromFloat(v91, v92);
      *(_WORD *)(*v50
      uint64_t v58 = v109 + 1;
      v120 += v103;
      double v51 = a7;
      if (v109 + 1 == v107) {
        goto LABEL_95;
      }
    }
  }
LABEL_99:
  std::__function::__value_func<unsigned char ()(unsigned char)>::~__value_func[abi:ne180100](&__src);
  if (v127)
  {
    std::string v128 = v127;
    operator delete(v127);
  }
  if (v130)
  {
    __int16 v131 = v130;
    operator delete(v130);
  }
}

void sub_210B449A4(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void *)(v1 - 224);
  unint64_t v3 = *(void **)(v1 - 216);
  if (v3)
  {
    *(void *)(v1 - 208) = v3;
    operator delete(v3);
  }
  uint64_t v5 = *(void **)(v1 - 192);
  if (v5)
  {
    *(void *)(v1 - 184) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)v4;
  if (*(void *)v4)
  {
    *(void *)(v4 + 8) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int *a7@<X6>, int a8@<W7>, unint64_t *a9@<X8>, char a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15)
{
  uint64_t v137 = *MEMORY[0x263EF8340];
  __int16 v132 = a12;
  __int16 v131 = a13;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2) {
    std::vector<unsigned char>::__append(a9, a2);
  }
  int v124 = a9;
  size_t v21 = *(const void **)a3;
  uint64_t v22 = *(void *)(a3 + 8);
  unint64_t v23 = (v22 - *(void *)a3) >> 3;
  if (v23 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    float v92 = "x_rank == o_shape.size()";
    int v93 = 68;
    goto LABEL_117;
  }
  uint64_t v24 = *a5;
  uint64_t v25 = a5[1];
  uint64_t v26 = (v25 - *a5) >> 2;
  if (v26 != v23 - 1)
  {
    float v92 = "kernel_sizes.size() == num_spatial_dims + 1";
    int v93 = 69;
    goto LABEL_117;
  }
  uint64_t v27 = *a6;
  uint64_t v28 = a6[1];
  if (v26 != (v28 - *a6) >> 2)
  {
    float v92 = "strides.size() == num_spatial_dims + 1";
    int v93 = 70;
    goto LABEL_117;
  }
  if (*(_DWORD *)(v25 - 4) != *(_DWORD *)(v28 - 4))
  {
    float v92 = "kernel_sizes.back() == strides.back()";
    int v93 = 71;
LABEL_117:
    __assert_rtn("ComputeValueAvgPool", "NePoolCpu.cpp", v93, v92);
  }
  unint64_t v29 = v23 - 2;
  uint64_t v30 = 4 * v23;
  if (v23 == 5)
  {
    unint64_t v109 = *(int *)(v24 + v30 - 20);
    uint64_t v96 = *(int *)(v27 + v30 - 20);
    uint64_t v31 = 2;
LABEL_11:
    uint64_t v32 = v30 - 16;
    unint64_t v114 = *(int *)(v24 + v32);
    int v33 = *(_DWORD *)(v27 + v32);
    int v34 = 1;
    goto LABEL_13;
  }
  uint64_t v31 = v23 - 3;
  uint64_t v96 = 1;
  if (v29 > 1)
  {
    unint64_t v109 = 1;
    goto LABEL_11;
  }
  int v34 = 0;
  unint64_t v109 = 1;
  unint64_t v114 = 1;
  int v33 = 1;
LABEL_13:
  unsigned int v120 = *(_DWORD *)(v24 + 4 * v29);
  unint64_t v113 = *(int *)(v24 + 4 * v31);
  uint64_t v97 = *(int *)(v27 + 4 * v31);
  uint64_t v101 = *(int *)(v27 + 4 * v29);
  std::string v128 = 0;
  uint64_t v129 = 0;
  uint64_t v130 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v128, v21, v22, v23);
  uint64_t v125 = 0;
  uint64_t v126 = 0;
  uint64_t v127 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v125, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v23 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v128, (uint64_t)(v128 + 8), __src.i8, v135, 2);
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v125, (uint64_t)(v125 + 8), __src.i8, v135, 2);
  }
  else if (v23 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v128, v128 + 8, &__src);
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v125, v125 + 8, &__src);
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v132);
  float v36 = v35;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v131);
  if (v23 == 5)
  {
    float v36 = v36 * (float)v109;
    if (a14) {
      float v37 = v37 / (float)v109;
    }
  }
  char v38 = a14;
  float v39 = v36 * (float)v114;
  if (v34)
  {
    float v40 = v37 / (float)v114;
  }
  else
  {
    float v39 = v36;
    float v40 = v37;
  }
  uint64_t v41 = *(void *)v125;
  uint64_t v98 = *((void *)v125 + 1);
  uint64_t v99 = *((void *)v125 + 2);
  uint64_t v100 = *((void *)v125 + 3);
  uint64_t v105 = *((void *)v125 + 4);
  uint64_t v108 = *((void *)v128 + 1);
  uint64_t v112 = *((void *)v128 + 2);
  uint64_t v116 = *((void *)v128 + 3);
  __src.i64[0] = (uint64_t)&unk_26C315D88;
  p_src = &__src;
  float v42 = v39 * (float)v113;
  double v43 = ldexp(1.0, a8);
  float v44 = ldexp(1.0, a10 + a8);
  float v45 = v42 * v44;
  unsigned int v46 = llroundf(v45);
  if (fabsf(v45) < 1.0) {
    unsigned int v46 = 0;
  }
  unsigned int v102 = v46;
  double v47 = exp2(-(double)(a11 + a8));
  unsigned int v48 = v124;
  double v49 = a7;
  uint64_t v95 = v41;
  if (v41)
  {
    uint64_t v50 = 0;
    uint64_t v94 = v33;
    float v51 = v43;
    double v52 = v47 * (float)(v40 / (float)v113);
    int v122 = -20 - a8;
    int v53 = v120;
    if (v120 <= 1) {
      int v53 = 1;
    }
    uint64_t v117 = v53;
    uint64_t v54 = v113;
    if (v113 <= 1) {
      uint64_t v54 = 1;
    }
    uint64_t v121 = v54;
    float v55 = v52;
    while (!v98)
    {
LABEL_107:
      if (++v50 == v95) {
        goto LABEL_108;
      }
    }
    uint64_t v103 = 0;
    while (!v99)
    {
LABEL_106:
      if (++v103 == v98) {
        goto LABEL_107;
      }
    }
    uint64_t v104 = 0;
    while (!v100)
    {
LABEL_105:
      if (++v104 == v99) {
        goto LABEL_106;
      }
    }
    uint64_t v106 = 0;
    while (!v105)
    {
LABEL_104:
      if (++v106 == v100) {
        goto LABEL_105;
      }
    }
    uint64_t v118 = 0;
    uint64_t v56 = 0;
    while (1)
    {
      uint64_t v107 = v56;
      if (v109)
      {
        uint64_t v57 = 0;
        uint64_t v58 = 0;
        int v59 = 0;
        int v60 = v102;
        while (1)
        {
          unint64_t v61 = v57 + v103 * v96;
          if ((v38 & 1) == 0 && (v61 < *v49 || v61 >= v108 - v49[1])) {
            goto LABEL_80;
          }
          uint64_t v110 = v57;
          uint64_t v111 = v58;
          if (v114) {
            break;
          }
LABEL_77:
          uint64_t v57 = v110;
          uint64_t v58 = v111 + 1;
          double v49 = a7;
LABEL_80:
          if (++v57 == v109) {
            goto LABEL_83;
          }
        }
        uint64_t v62 = 0;
        while (2)
        {
          unint64_t v63 = v62 + v104 * v94;
          uint64_t v115 = v62;
          if (v38)
          {
            if (v113) {
              goto LABEL_52;
            }
LABEL_76:
            uint64_t v62 = v115 + 1;
            char v38 = a14;
            if (v115 + 1 == v114) {
              goto LABEL_77;
            }
            continue;
          }
          break;
        }
        if (v63 < a7[2]) {
          goto LABEL_76;
        }
        if (v63 >= v112 - a7[3] || v113 == 0) {
          goto LABEL_76;
        }
LABEL_52:
        uint64_t v65 = 0;
        while (2)
        {
          unint64_t v66 = v65 + v106 * v97;
          if (a14)
          {
            if (!v120) {
              goto LABEL_75;
            }
LABEL_61:
            uint64_t v68 = v117;
            uint64_t v69 = v118;
            do
            {
              unsigned int v71 = std::function<unsigned char ()(unsigned char)>::operator()((uint64_t)&__src, *(unsigned char *)(a1 + Index));
              if (!v59)
              {
                unsigned int v72 = v71;
                int v73 = ilogbf(1.0);
                if (v73 <= -14) {
                  int v74 = -14;
                }
                else {
                  int v74 = v73;
                }
                if (v74 >= v122)
                {
                  uint64_t v75 = (int)llroundf(v51 * (float)v72) + (uint64_t)v60;
                  if (v75 <= 0x7FFFFFFF)
                  {
                    if (v75 >= (uint64_t)0xFFFFFFFF80000000) {
                      int v60 = v75;
                    }
                    else {
                      int v60 = -8388608;
                    }
                    int v59 = 2 * (v75 < (uint64_t)0xFFFFFFFF80000000);
                  }
                  else
                  {
                    int v59 = 1;
                    int v60 = 2139095040;
                  }
                }
                else
                {
                  int v59 = 0;
                }
              }
              unsigned int v48 = v124;
              ++v69;
              --v68;
            }
            while (v68);
          }
          else if (v66 >= a7[4] && v66 < v116 - a7[5] && v120 != 0)
          {
            goto LABEL_61;
          }
LABEL_75:
          if (++v65 == v121) {
            goto LABEL_76;
          }
          continue;
        }
      }
      int v59 = 0;
      uint64_t v58 = 0;
      int v60 = v102;
LABEL_83:
      LOWORD(__e) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v58];
      MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      float v77 = v76 * v55;
      float v78 = 0.0;
      if (v77 == 0.0)
      {
        if (v59) {
          goto LABEL_85;
        }
      }
      else
      {
        int __e = 0;
        long double v80 = frexp(v77, &__e);
        double v81 = ldexp(v80, 11);
        float v78 = ldexp(round(v81), __e - 11);
        if (v59)
        {
LABEL_85:
          double v79 = INFINITY;
          if (v59 == 2) {
            double v79 = -INFINITY;
          }
          goto LABEL_91;
        }
      }
      if (!v60)
      {
        float v84 = 0.0;
        goto LABEL_92;
      }
      double v79 = (double)v60;
LABEL_91:
      int __e = 0;
      long double v82 = frexp(v79, &__e);
      double v83 = ldexp(v82, 11);
      float v84 = ldexp(round(v83), __e - 11);
LABEL_92:
      float v85 = v78 * v84;
      float v86 = 0.0;
      if (v85 != 0.0)
      {
        int __e = 0;
        long double v87 = frexp(v85, &__e);
        double v88 = ldexp(v87, 11);
        float v86 = ldexp(round(v88), __e - 11);
      }
      std::function<float ()(float)>::operator()(a15, v86);
      if (v89 == INFINITY)
      {
        LOBYTE(v90) = -1;
      }
      else if (v89 == -INFINITY)
      {
        LOBYTE(v90) = 0;
      }
      else
      {
        int v91 = llroundf(v89);
        if (v91 >= 255) {
          int v91 = 255;
        }
        int v90 = v91 & ~(v91 >> 31);
      }
      *(unsigned char *)(*v48
      uint64_t v56 = v107 + 1;
      v118 += v101;
      double v49 = a7;
      if (v107 + 1 == v105) {
        goto LABEL_104;
      }
    }
  }
LABEL_108:
  std::__function::__value_func<unsigned char ()(unsigned char)>::~__value_func[abi:ne180100](&__src);
  if (v125)
  {
    uint64_t v126 = v125;
    operator delete(v125);
  }
  if (v128)
  {
    uint64_t v129 = v128;
    operator delete(v128);
  }
}

void sub_210B452E8(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void *)(v1 - 224);
  unint64_t v3 = *(void **)(v1 - 216);
  if (v3)
  {
    *(void *)(v1 - 208) = v3;
    operator delete(v3);
  }
  uint64_t v5 = *(void **)(v1 - 192);
  if (v5)
  {
    *(void *)(v1 - 184) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)v4;
  if (*(void *)v4)
  {
    *(void *)(v4 + 8) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int *a7@<X6>, int a8@<W7>, unint64_t *a9@<X8>, char a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15)
{
  uint64_t v137 = *MEMORY[0x263EF8340];
  __int16 v132 = a12;
  __int16 v131 = a13;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2) {
    std::vector<unsigned char>::__append(a9, a2);
  }
  int v124 = a9;
  size_t v21 = *(const void **)a3;
  uint64_t v22 = *(void *)(a3 + 8);
  unint64_t v23 = (v22 - *(void *)a3) >> 3;
  if (v23 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    float v92 = "x_rank == o_shape.size()";
    int v93 = 68;
    goto LABEL_119;
  }
  uint64_t v24 = *a5;
  uint64_t v25 = a5[1];
  uint64_t v26 = (v25 - *a5) >> 2;
  if (v26 != v23 - 1)
  {
    float v92 = "kernel_sizes.size() == num_spatial_dims + 1";
    int v93 = 69;
    goto LABEL_119;
  }
  uint64_t v27 = *a6;
  uint64_t v28 = a6[1];
  if (v26 != (v28 - *a6) >> 2)
  {
    float v92 = "strides.size() == num_spatial_dims + 1";
    int v93 = 70;
    goto LABEL_119;
  }
  if (*(_DWORD *)(v25 - 4) != *(_DWORD *)(v28 - 4))
  {
    float v92 = "kernel_sizes.back() == strides.back()";
    int v93 = 71;
LABEL_119:
    __assert_rtn("ComputeValueAvgPool", "NePoolCpu.cpp", v93, v92);
  }
  unint64_t v29 = v23 - 2;
  uint64_t v30 = 4 * v23;
  if (v23 == 5)
  {
    unint64_t v109 = *(int *)(v24 + v30 - 20);
    uint64_t v96 = *(int *)(v27 + v30 - 20);
    uint64_t v31 = 2;
LABEL_11:
    uint64_t v32 = v30 - 16;
    unint64_t v114 = *(int *)(v24 + v32);
    int v33 = *(_DWORD *)(v27 + v32);
    int v34 = 1;
    goto LABEL_13;
  }
  uint64_t v31 = v23 - 3;
  uint64_t v96 = 1;
  if (v29 > 1)
  {
    unint64_t v109 = 1;
    goto LABEL_11;
  }
  int v34 = 0;
  unint64_t v109 = 1;
  unint64_t v114 = 1;
  int v33 = 1;
LABEL_13:
  unsigned int v120 = *(_DWORD *)(v24 + 4 * v29);
  unint64_t v113 = *(int *)(v24 + 4 * v31);
  uint64_t v97 = *(int *)(v27 + 4 * v31);
  uint64_t v101 = *(int *)(v27 + 4 * v29);
  std::string v128 = 0;
  uint64_t v129 = 0;
  uint64_t v130 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v128, v21, v22, v23);
  uint64_t v125 = 0;
  uint64_t v126 = 0;
  uint64_t v127 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v125, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v23 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v128, (uint64_t)(v128 + 8), __src.i8, v135, 2);
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v125, (uint64_t)(v125 + 8), __src.i8, v135, 2);
  }
  else if (v23 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v128, v128 + 8, &__src);
    __src.i64[0] = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v125, v125 + 8, &__src);
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v132);
  float v36 = v35;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v131);
  if (v23 == 5)
  {
    float v36 = v36 * (float)v109;
    if (a14) {
      float v37 = v37 / (float)v109;
    }
  }
  char v38 = a14;
  float v39 = v36 * (float)v114;
  if (v34)
  {
    float v40 = v37 / (float)v114;
  }
  else
  {
    float v39 = v36;
    float v40 = v37;
  }
  uint64_t v41 = *(void *)v125;
  uint64_t v98 = *((void *)v125 + 1);
  uint64_t v99 = *((void *)v125 + 2);
  uint64_t v100 = *((void *)v125 + 3);
  uint64_t v105 = *((void *)v125 + 4);
  uint64_t v108 = *((void *)v128 + 1);
  uint64_t v112 = *((void *)v128 + 2);
  uint64_t v116 = *((void *)v128 + 3);
  __src.i64[0] = (uint64_t)&unk_26C315E08;
  p_src = &__src;
  float v42 = v39 * (float)v113;
  double v43 = ldexp(1.0, a8);
  float v44 = ldexp(1.0, a10 + a8);
  float v45 = v42 * v44;
  unsigned int v46 = llroundf(v45);
  if (fabsf(v45) < 1.0) {
    unsigned int v46 = 0;
  }
  unsigned int v102 = v46;
  double v47 = exp2(-(double)(a11 + a8));
  unsigned int v48 = v124;
  double v49 = a7;
  uint64_t v95 = v41;
  if (v41)
  {
    uint64_t v50 = 0;
    uint64_t v94 = v33;
    float v51 = v43;
    int v122 = -20 - a8;
    double v52 = v47 * (float)(v40 / (float)v113);
    int v53 = v120;
    if (v120 <= 1) {
      int v53 = 1;
    }
    uint64_t v117 = v53;
    uint64_t v54 = v113;
    if (v113 <= 1) {
      uint64_t v54 = 1;
    }
    uint64_t v121 = v54;
    float v55 = v52;
    while (!v98)
    {
LABEL_109:
      if (++v50 == v95) {
        goto LABEL_110;
      }
    }
    uint64_t v103 = 0;
    while (!v99)
    {
LABEL_108:
      if (++v103 == v98) {
        goto LABEL_109;
      }
    }
    uint64_t v104 = 0;
    while (!v100)
    {
LABEL_107:
      if (++v104 == v99) {
        goto LABEL_108;
      }
    }
    uint64_t v106 = 0;
    while (!v105)
    {
LABEL_106:
      if (++v106 == v100) {
        goto LABEL_107;
      }
    }
    uint64_t v118 = 0;
    uint64_t v56 = 0;
    while (1)
    {
      uint64_t v107 = v56;
      if (v109)
      {
        uint64_t v57 = 0;
        uint64_t v58 = 0;
        int v59 = 0;
        int v60 = v102;
        while (1)
        {
          unint64_t v61 = v57 + v103 * v96;
          if ((v38 & 1) == 0 && (v61 < *v49 || v61 >= v108 - v49[1])) {
            goto LABEL_80;
          }
          uint64_t v110 = v57;
          uint64_t v111 = v58;
          if (v114) {
            break;
          }
LABEL_77:
          uint64_t v57 = v110;
          uint64_t v58 = v111 + 1;
          double v49 = a7;
LABEL_80:
          if (++v57 == v109) {
            goto LABEL_83;
          }
        }
        uint64_t v62 = 0;
        while (2)
        {
          unint64_t v63 = v62 + v104 * v94;
          uint64_t v115 = v62;
          if (v38)
          {
            if (v113) {
              goto LABEL_52;
            }
LABEL_76:
            uint64_t v62 = v115 + 1;
            char v38 = a14;
            if (v115 + 1 == v114) {
              goto LABEL_77;
            }
            continue;
          }
          break;
        }
        if (v63 < a7[2]) {
          goto LABEL_76;
        }
        if (v63 >= v112 - a7[3] || v113 == 0) {
          goto LABEL_76;
        }
LABEL_52:
        uint64_t v65 = 0;
        while (2)
        {
          unint64_t v66 = v65 + v106 * v97;
          if (a14)
          {
            if (!v120) {
              goto LABEL_75;
            }
LABEL_61:
            uint64_t v68 = v117;
            uint64_t v69 = v118;
            do
            {
              unsigned int v71 = std::function<unsigned char ()(unsigned char)>::operator()((uint64_t)&__src, *(unsigned char *)(a1 + Index));
              if (!v59)
              {
                unsigned int v72 = v71;
                int v73 = ilogbf(1.0);
                if (v73 <= -14) {
                  int v74 = -14;
                }
                else {
                  int v74 = v73;
                }
                if (v74 >= v122)
                {
                  uint64_t v75 = (int)llroundf(v51 * (float)v72) + (uint64_t)v60;
                  if (v75 <= 0x7FFFFFFF)
                  {
                    if (v75 >= (uint64_t)0xFFFFFFFF80000000) {
                      int v60 = v75;
                    }
                    else {
                      int v60 = -8388608;
                    }
                    int v59 = 2 * (v75 < (uint64_t)0xFFFFFFFF80000000);
                  }
                  else
                  {
                    int v59 = 1;
                    int v60 = 2139095040;
                  }
                }
                else
                {
                  int v59 = 0;
                }
              }
              unsigned int v48 = v124;
              ++v69;
              --v68;
            }
            while (v68);
          }
          else if (v66 >= a7[4] && v66 < v116 - a7[5] && v120 != 0)
          {
            goto LABEL_61;
          }
LABEL_75:
          if (++v65 == v121) {
            goto LABEL_76;
          }
          continue;
        }
      }
      int v59 = 0;
      uint64_t v58 = 0;
      int v60 = v102;
LABEL_83:
      LOWORD(__e) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v58];
      MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      float v77 = v76 * v55;
      float v78 = 0.0;
      if (v77 == 0.0)
      {
        if (v59) {
          goto LABEL_85;
        }
      }
      else
      {
        int __e = 0;
        long double v80 = frexp(v77, &__e);
        double v81 = ldexp(v80, 11);
        float v78 = ldexp(round(v81), __e - 11);
        if (v59)
        {
LABEL_85:
          double v79 = INFINITY;
          if (v59 == 2) {
            double v79 = -INFINITY;
          }
          goto LABEL_91;
        }
      }
      if (!v60)
      {
        float v84 = 0.0;
        goto LABEL_92;
      }
      double v79 = (double)v60;
LABEL_91:
      int __e = 0;
      long double v82 = frexp(v79, &__e);
      double v83 = ldexp(v82, 11);
      float v84 = ldexp(round(v83), __e - 11);
LABEL_92:
      float v85 = v78 * v84;
      float v86 = 0.0;
      if (v85 != 0.0)
      {
        int __e = 0;
        long double v87 = frexp(v85, &__e);
        double v88 = ldexp(v87, 11);
        float v86 = ldexp(round(v88), __e - 11);
      }
      std::function<float ()(float)>::operator()(a15, v86);
      if (v89 == INFINITY)
      {
        char v90 = 127;
      }
      else if (v89 == -INFINITY)
      {
        char v90 = 0x80;
      }
      else
      {
        int v91 = llroundf(v89);
        if (v91 >= 127) {
          int v91 = 127;
        }
        if (v91 <= -128) {
          char v90 = 0x80;
        }
        else {
          char v90 = v91;
        }
      }
      *(unsigned char *)(*v48
      uint64_t v56 = v107 + 1;
      v118 += v101;
      double v49 = a7;
      if (v107 + 1 == v105) {
        goto LABEL_106;
      }
    }
  }
LABEL_110:
  std::__function::__value_func<unsigned char ()(unsigned char)>::~__value_func[abi:ne180100](&__src);
  if (v125)
  {
    uint64_t v126 = v125;
    operator delete(v125);
  }
  if (v128)
  {
    uint64_t v129 = v128;
    operator delete(v128);
  }
}

void sub_210B45C34(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void *)(v1 - 224);
  unint64_t v3 = *(void **)(v1 - 216);
  if (v3)
  {
    *(void *)(v1 - 208) = v3;
    operator delete(v3);
  }
  uint64_t v5 = *(void **)(v1 - 192);
  if (v5)
  {
    *(void *)(v1 - 184) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)v4;
  if (*(void *)v4)
  {
    *(void *)(v4 + 8) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int *a7@<X6>, int a8@<W7>, void *a9@<X8>, char a10, char a11, int a12, __int16 a13, int a14, __int16 a15, int a16, char a17, char a18, uint64_t a19)
{
  uint64_t v140 = *MEMORY[0x263EF8340];
  __int16 v135 = a13;
  __int16 v134 = a15;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a2);
  uint64_t v24 = *(const void **)a3;
  uint64_t v25 = *(void *)(a3 + 8);
  unint64_t v26 = (v25 - *(void *)a3) >> 3;
  if (v26 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    uint64_t v95 = "x_rank == o_shape.size()";
    int v96 = 68;
    goto LABEL_110;
  }
  uint64_t v27 = *a5;
  uint64_t v28 = a5[1];
  uint64_t v29 = (v28 - *a5) >> 2;
  if (v29 != v26 - 1)
  {
    uint64_t v95 = "kernel_sizes.size() == num_spatial_dims + 1";
    int v96 = 69;
    goto LABEL_110;
  }
  uint64_t v30 = *a6;
  uint64_t v31 = a6[1];
  if (v29 != (v31 - *a6) >> 2)
  {
    uint64_t v95 = "strides.size() == num_spatial_dims + 1";
    int v96 = 70;
    goto LABEL_110;
  }
  if (*(_DWORD *)(v28 - 4) != *(_DWORD *)(v31 - 4))
  {
    uint64_t v95 = "kernel_sizes.back() == strides.back()";
    int v96 = 71;
LABEL_110:
    __assert_rtn("ComputeValueAvgPool", "NePoolCpu.cpp", v96, v95);
  }
  unint64_t v32 = v26 - 2;
  uint64_t v33 = 4 * v26;
  if (v26 == 5)
  {
    unint64_t v112 = *(int *)(v27 + v33 - 20);
    uint64_t v99 = *(int *)(v30 + v33 - 20);
    uint64_t v34 = 2;
LABEL_9:
    uint64_t v35 = v33 - 16;
    unint64_t v117 = *(int *)(v27 + v35);
    int v36 = *(_DWORD *)(v30 + v35);
    int v37 = 1;
    goto LABEL_11;
  }
  uint64_t v34 = v26 - 3;
  uint64_t v99 = 1;
  if (v32 > 1)
  {
    unint64_t v112 = 1;
    goto LABEL_9;
  }
  int v37 = 0;
  unint64_t v112 = 1;
  unint64_t v117 = 1;
  int v36 = 1;
LABEL_11:
  unsigned int v123 = *(_DWORD *)(v27 + 4 * v32);
  unint64_t v116 = *(int *)(v27 + 4 * v34);
  uint64_t v100 = *(int *)(v30 + 4 * v34);
  uint64_t v104 = *(int *)(v30 + 4 * v32);
  __int16 v131 = 0;
  __int16 v132 = 0;
  uint64_t v133 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v131, v24, v25, v26);
  std::string v128 = 0;
  uint64_t v129 = 0;
  uint64_t v130 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v128, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v26 == 3)
  {
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v131, (uint64_t)(v131 + 8), (char *)__e, v138, 2);
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v128, (uint64_t)(v128 + 8), (char *)__e, v138, 2);
  }
  else if (v26 == 4)
  {
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v131, v131 + 8, __e);
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v128, v128 + 8, __e);
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v135);
  float v39 = v38;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v134);
  if (v26 == 5)
  {
    float v39 = v39 * (float)v112;
    if (a17) {
      float v40 = v40 / (float)v112;
    }
  }
  char v41 = a17;
  float v42 = v39 * (float)v117;
  if (v37)
  {
    float v43 = v40 / (float)v117;
  }
  else
  {
    float v42 = v39;
    float v43 = v40;
  }
  float v44 = v42 * (float)v116;
  uint64_t v45 = *(void *)v128;
  uint64_t v101 = *((void *)v128 + 1);
  uint64_t v102 = *((void *)v128 + 2);
  uint64_t v103 = *((void *)v128 + 3);
  uint64_t v108 = *((void *)v128 + 4);
  uint64_t v111 = *((void *)v131 + 1);
  uint64_t v115 = *((void *)v131 + 2);
  uint64_t v119 = *((void *)v131 + 3);
  v136[0] = &unk_26C315E88;
  v136[3] = v136;
  if (a18)
  {
    *(void *)int __e = &unk_26C315F18;
    uint64_t v139 = __e;
    std::__function::__value_func<signed char ()(signed char)>::swap[abi:ne180100](__e, v136);
    std::__function::__value_func<signed char ()(signed char)>::~__value_func[abi:ne180100](__e);
  }
  double v46 = ldexp(1.0, a8);
  float v47 = ldexp(1.0, a10 + a8);
  float v48 = v44 * v47;
  unsigned int v49 = llroundf(v48);
  if (fabsf(v48) < 1.0) {
    unsigned int v49 = 0;
  }
  unsigned int v105 = v49;
  double v50 = exp2(-(double)(a11 + a8));
  float v51 = a9;
  double v52 = a7;
  uint64_t v98 = v45;
  if (v45)
  {
    uint64_t v53 = 0;
    uint64_t v97 = v36;
    float v54 = v46;
    double v55 = v50 * (float)(v43 / (float)v116);
    int v125 = -20 - a8;
    int v56 = v123;
    if (v123 <= 1) {
      int v56 = 1;
    }
    uint64_t v120 = v56;
    uint64_t v57 = v116;
    if (v116 <= 1) {
      uint64_t v57 = 1;
    }
    uint64_t v124 = v57;
    float v58 = v55;
    while (!v101)
    {
LABEL_100:
      if (++v53 == v98) {
        goto LABEL_101;
      }
    }
    uint64_t v106 = 0;
    while (!v102)
    {
LABEL_99:
      if (++v106 == v101) {
        goto LABEL_100;
      }
    }
    uint64_t v107 = 0;
    while (!v103)
    {
LABEL_98:
      if (++v107 == v102) {
        goto LABEL_99;
      }
    }
    uint64_t v109 = 0;
    while (!v108)
    {
LABEL_97:
      if (++v109 == v103) {
        goto LABEL_98;
      }
    }
    uint64_t v121 = 0;
    uint64_t v59 = 0;
    while (1)
    {
      uint64_t v110 = v59;
      if (v112)
      {
        uint64_t v60 = 0;
        uint64_t v61 = 0;
        int v62 = 0;
        int v63 = v105;
        while (1)
        {
          unint64_t v64 = v60 + v106 * v99;
          if ((v41 & 1) == 0 && (v64 < *v52 || v64 >= v111 - v52[1])) {
            goto LABEL_80;
          }
          uint64_t v113 = v60;
          uint64_t v114 = v61;
          if (v117) {
            break;
          }
LABEL_77:
          uint64_t v60 = v113;
          uint64_t v61 = v114 + 1;
          double v52 = a7;
LABEL_80:
          if (++v60 == v112) {
            goto LABEL_83;
          }
        }
        uint64_t v65 = 0;
        while (2)
        {
          unint64_t v66 = v65 + v107 * v97;
          uint64_t v118 = v65;
          if (v41)
          {
            if (v116) {
              goto LABEL_52;
            }
LABEL_76:
            uint64_t v65 = v118 + 1;
            char v41 = a17;
            if (v118 + 1 == v117) {
              goto LABEL_77;
            }
            continue;
          }
          break;
        }
        if (v66 < a7[2]) {
          goto LABEL_76;
        }
        if (v66 >= v115 - a7[3] || v116 == 0) {
          goto LABEL_76;
        }
LABEL_52:
        uint64_t v68 = 0;
        while (2)
        {
          unint64_t v69 = v68 + v109 * v100;
          if (a17)
          {
            if (!v123) {
              goto LABEL_75;
            }
LABEL_61:
            uint64_t v71 = v120;
            uint64_t v72 = v121;
            do
            {
              int v74 = std::function<signed char ()(signed char)>::operator()((uint64_t)v136, *(unsigned char *)(a1 + Index));
              if (!v62)
              {
                int v75 = v74;
                int v76 = ilogbf(1.0);
                if (v76 <= -14) {
                  int v77 = -14;
                }
                else {
                  int v77 = v76;
                }
                if (v77 >= v125)
                {
                  uint64_t v78 = (int)llroundf(v54 * (float)v75) + (uint64_t)v63;
                  if (v78 <= 0x7FFFFFFF)
                  {
                    if (v78 >= (uint64_t)0xFFFFFFFF80000000) {
                      int v63 = v78;
                    }
                    else {
                      int v63 = -8388608;
                    }
                    int v62 = 2 * (v78 < (uint64_t)0xFFFFFFFF80000000);
                  }
                  else
                  {
                    int v62 = 1;
                    int v63 = 2139095040;
                  }
                }
                else
                {
                  int v62 = 0;
                }
              }
              float v51 = a9;
              ++v72;
              --v71;
            }
            while (v71);
          }
          else if (v69 >= a7[4] && v69 < v119 - a7[5] && v123 != 0)
          {
            goto LABEL_61;
          }
LABEL_75:
          if (++v68 == v124) {
            goto LABEL_76;
          }
          continue;
        }
      }
      int v62 = 0;
      uint64_t v61 = 0;
      int v63 = v105;
LABEL_83:
      LOWORD(__e[0]) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v61];
      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
      float v80 = v79 * v58;
      float v81 = 0.0;
      if (v80 == 0.0)
      {
        if (v62) {
          goto LABEL_85;
        }
      }
      else
      {
        __e[0] = 0;
        long double v83 = frexp(v80, __e);
        double v84 = ldexp(v83, 11);
        float v81 = ldexp(round(v84), __e[0] - 11);
        if (v62)
        {
LABEL_85:
          double v82 = INFINITY;
          if (v62 == 2) {
            double v82 = -INFINITY;
          }
          goto LABEL_91;
        }
      }
      if (!v63)
      {
        float v87 = 0.0;
        goto LABEL_92;
      }
      double v82 = (double)v63;
LABEL_91:
      __e[0] = 0;
      long double v85 = frexp(v82, __e);
      double v86 = ldexp(v85, 11);
      float v87 = ldexp(round(v86), __e[0] - 11);
LABEL_92:
      float v88 = v81 * v87;
      float v89 = 0.0;
      if (v88 != 0.0)
      {
        __e[0] = 0;
        long double v90 = frexp(v88, __e);
        double v91 = ldexp(v90, 11);
        float v89 = ldexp(round(v91), __e[0] - 11);
      }
      float v92 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(a19, v89);
      __int16 v94 = MIL::Fp16::FromFloat(v92, v93);
      *(_WORD *)(*v51
      uint64_t v59 = v110 + 1;
      v121 += v104;
      double v52 = a7;
      if (v110 + 1 == v108) {
        goto LABEL_97;
      }
    }
  }
LABEL_101:
  std::__function::__value_func<signed char ()(signed char)>::~__value_func[abi:ne180100](v136);
  if (v128)
  {
    uint64_t v129 = v128;
    operator delete(v128);
  }
  if (v131)
  {
    __int16 v132 = v131;
    operator delete(v131);
  }
}

void sub_210B46574(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void *)(v1 - 256);
  unint64_t v3 = *(void **)(v1 - 248);
  if (v3)
  {
    *(void *)(v1 - 240) = v3;
    operator delete(v3);
  }
  uint64_t v5 = *(void **)(v1 - 224);
  if (v5)
  {
    *(void *)(v1 - 216) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)v4;
  if (*(void *)v4)
  {
    *(void *)(v4 + 8) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int *a7@<X6>, int a8@<W7>, unint64_t *a9@<X8>, char a10, char a11, uint64_t a12, uint64_t a13, char a14, char a15, uint64_t a16)
{
  uint64_t v138 = *MEMORY[0x263EF8340];
  __int16 v133 = a12;
  __int16 v132 = a13;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2) {
    std::vector<unsigned char>::__append(a9, a2);
  }
  int v125 = a9;
  uint64_t v22 = *(const void **)a3;
  uint64_t v23 = *(void *)(a3 + 8);
  unint64_t v24 = (v23 - *(void *)a3) >> 3;
  if (v24 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    float v93 = "x_rank == o_shape.size()";
    int v94 = 68;
    goto LABEL_119;
  }
  uint64_t v25 = *a5;
  uint64_t v26 = a5[1];
  uint64_t v27 = (v26 - *a5) >> 2;
  if (v27 != v24 - 1)
  {
    float v93 = "kernel_sizes.size() == num_spatial_dims + 1";
    int v94 = 69;
    goto LABEL_119;
  }
  uint64_t v28 = *a6;
  uint64_t v29 = a6[1];
  if (v27 != (v29 - *a6) >> 2)
  {
    float v93 = "strides.size() == num_spatial_dims + 1";
    int v94 = 70;
    goto LABEL_119;
  }
  if (*(_DWORD *)(v26 - 4) != *(_DWORD *)(v29 - 4))
  {
    float v93 = "kernel_sizes.back() == strides.back()";
    int v94 = 71;
LABEL_119:
    __assert_rtn("ComputeValueAvgPool", "NePoolCpu.cpp", v94, v93);
  }
  unint64_t v30 = v24 - 2;
  uint64_t v31 = 4 * v24;
  if (v24 == 5)
  {
    unint64_t v110 = *(int *)(v25 + v31 - 20);
    uint64_t v97 = *(int *)(v28 + v31 - 20);
    uint64_t v32 = 2;
LABEL_11:
    uint64_t v33 = v31 - 16;
    unint64_t v115 = *(int *)(v25 + v33);
    int v34 = *(_DWORD *)(v28 + v33);
    int v35 = 1;
    goto LABEL_13;
  }
  uint64_t v32 = v24 - 3;
  uint64_t v97 = 1;
  if (v30 > 1)
  {
    unint64_t v110 = 1;
    goto LABEL_11;
  }
  int v35 = 0;
  unint64_t v110 = 1;
  unint64_t v115 = 1;
  int v34 = 1;
LABEL_13:
  unsigned int v121 = *(_DWORD *)(v25 + 4 * v30);
  unint64_t v114 = *(int *)(v25 + 4 * v32);
  uint64_t v98 = *(int *)(v28 + 4 * v32);
  uint64_t v102 = *(int *)(v28 + 4 * v30);
  uint64_t v129 = 0;
  uint64_t v130 = 0;
  uint64_t v131 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v129, v22, v23, v24);
  uint64_t v126 = 0;
  uint64_t v127 = 0;
  uint64_t v128 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v126, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v24 == 3)
  {
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v129, (uint64_t)(v129 + 8), (char *)__e, v136, 2);
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v126, (uint64_t)(v126 + 8), (char *)__e, v136, 2);
  }
  else if (v24 == 4)
  {
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v129, v129 + 8, __e);
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v126, v126 + 8, __e);
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v133);
  float v37 = v36;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v132);
  if (v24 == 5)
  {
    float v37 = v37 * (float)v110;
    if (a14) {
      float v38 = v38 / (float)v110;
    }
  }
  char v39 = a14;
  float v40 = v37 * (float)v115;
  if (v35)
  {
    float v41 = v38 / (float)v115;
  }
  else
  {
    float v40 = v37;
    float v41 = v38;
  }
  float v42 = v40 * (float)v114;
  uint64_t v43 = *(void *)v126;
  uint64_t v99 = *((void *)v126 + 1);
  uint64_t v100 = *((void *)v126 + 2);
  uint64_t v101 = *((void *)v126 + 3);
  uint64_t v106 = *((void *)v126 + 4);
  uint64_t v109 = *((void *)v129 + 1);
  uint64_t v113 = *((void *)v129 + 2);
  uint64_t v117 = *((void *)v129 + 3);
  v134[0] = &unk_26C315F98;
  v134[3] = v134;
  if (a15)
  {
    *(void *)int __e = &unk_26C316018;
    uint64_t v137 = __e;
    std::__function::__value_func<signed char ()(signed char)>::swap[abi:ne180100](__e, v134);
    std::__function::__value_func<signed char ()(signed char)>::~__value_func[abi:ne180100](__e);
  }
  double v44 = ldexp(1.0, a8);
  float v45 = ldexp(1.0, a10 + a8);
  float v46 = v42 * v45;
  unsigned int v47 = llroundf(v46);
  if (fabsf(v46) < 1.0) {
    unsigned int v47 = 0;
  }
  unsigned int v103 = v47;
  double v48 = exp2(-(double)(a11 + a8));
  unsigned int v49 = v125;
  double v50 = a7;
  uint64_t v96 = v43;
  if (v43)
  {
    uint64_t v51 = 0;
    uint64_t v95 = v34;
    float v52 = v44;
    double v53 = v48 * (float)(v41 / (float)v114);
    int v123 = -20 - a8;
    int v54 = v121;
    if (v121 <= 1) {
      int v54 = 1;
    }
    uint64_t v118 = v54;
    uint64_t v55 = v114;
    if (v114 <= 1) {
      uint64_t v55 = 1;
    }
    uint64_t v122 = v55;
    float v56 = v53;
    while (!v99)
    {
LABEL_109:
      if (++v51 == v96) {
        goto LABEL_110;
      }
    }
    uint64_t v104 = 0;
    while (!v100)
    {
LABEL_108:
      if (++v104 == v99) {
        goto LABEL_109;
      }
    }
    uint64_t v105 = 0;
    while (!v101)
    {
LABEL_107:
      if (++v105 == v100) {
        goto LABEL_108;
      }
    }
    uint64_t v107 = 0;
    while (!v106)
    {
LABEL_106:
      if (++v107 == v101) {
        goto LABEL_107;
      }
    }
    uint64_t v119 = 0;
    uint64_t v57 = 0;
    while (1)
    {
      uint64_t v108 = v57;
      if (v110)
      {
        uint64_t v58 = 0;
        uint64_t v59 = 0;
        int v60 = 0;
        int v61 = v103;
        while (1)
        {
          unint64_t v62 = v58 + v104 * v97;
          if ((v39 & 1) == 0 && (v62 < *v50 || v62 >= v109 - v50[1])) {
            goto LABEL_82;
          }
          uint64_t v111 = v58;
          uint64_t v112 = v59;
          if (v115) {
            break;
          }
LABEL_79:
          uint64_t v58 = v111;
          uint64_t v59 = v112 + 1;
          double v50 = a7;
LABEL_82:
          if (++v58 == v110) {
            goto LABEL_85;
          }
        }
        uint64_t v63 = 0;
        while (2)
        {
          unint64_t v64 = v63 + v105 * v95;
          uint64_t v116 = v63;
          if (v39)
          {
            if (v114) {
              goto LABEL_54;
            }
LABEL_78:
            uint64_t v63 = v116 + 1;
            char v39 = a14;
            if (v116 + 1 == v115) {
              goto LABEL_79;
            }
            continue;
          }
          break;
        }
        if (v64 < a7[2]) {
          goto LABEL_78;
        }
        if (v64 >= v113 - a7[3] || v114 == 0) {
          goto LABEL_78;
        }
LABEL_54:
        uint64_t v66 = 0;
        while (2)
        {
          unint64_t v67 = v66 + v107 * v98;
          if (a14)
          {
            if (!v121) {
              goto LABEL_77;
            }
LABEL_63:
            uint64_t v69 = v118;
            uint64_t v70 = v119;
            do
            {
              int v72 = std::function<signed char ()(signed char)>::operator()((uint64_t)v134, *(unsigned char *)(a1 + Index));
              if (!v60)
              {
                int v73 = v72;
                int v74 = ilogbf(1.0);
                if (v74 <= -14) {
                  int v75 = -14;
                }
                else {
                  int v75 = v74;
                }
                if (v75 >= v123)
                {
                  uint64_t v76 = (int)llroundf(v52 * (float)v73) + (uint64_t)v61;
                  if (v76 <= 0x7FFFFFFF)
                  {
                    if (v76 >= (uint64_t)0xFFFFFFFF80000000) {
                      int v61 = v76;
                    }
                    else {
                      int v61 = -8388608;
                    }
                    int v60 = 2 * (v76 < (uint64_t)0xFFFFFFFF80000000);
                  }
                  else
                  {
                    int v60 = 1;
                    int v61 = 2139095040;
                  }
                }
                else
                {
                  int v60 = 0;
                }
              }
              unsigned int v49 = v125;
              ++v70;
              --v69;
            }
            while (v69);
          }
          else if (v67 >= a7[4] && v67 < v117 - a7[5] && v121 != 0)
          {
            goto LABEL_63;
          }
LABEL_77:
          if (++v66 == v122) {
            goto LABEL_78;
          }
          continue;
        }
      }
      int v60 = 0;
      uint64_t v59 = 0;
      int v61 = v103;
LABEL_85:
      LOWORD(__e[0]) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v59];
      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
      float v78 = v77 * v56;
      float v79 = 0.0;
      if (v78 == 0.0)
      {
        if (v60) {
          goto LABEL_87;
        }
      }
      else
      {
        __e[0] = 0;
        long double v81 = frexp(v78, __e);
        double v82 = ldexp(v81, 11);
        float v79 = ldexp(round(v82), __e[0] - 11);
        if (v60)
        {
LABEL_87:
          double v80 = INFINITY;
          if (v60 == 2) {
            double v80 = -INFINITY;
          }
          goto LABEL_93;
        }
      }
      if (!v61)
      {
        float v85 = 0.0;
        goto LABEL_94;
      }
      double v80 = (double)v61;
LABEL_93:
      __e[0] = 0;
      long double v83 = frexp(v80, __e);
      double v84 = ldexp(v83, 11);
      float v85 = ldexp(round(v84), __e[0] - 11);
LABEL_94:
      float v86 = v79 * v85;
      float v87 = 0.0;
      if (v86 != 0.0)
      {
        __e[0] = 0;
        long double v88 = frexp(v86, __e);
        double v89 = ldexp(v88, 11);
        float v87 = ldexp(round(v89), __e[0] - 11);
      }
      std::function<float ()(float)>::operator()(a16, v87);
      if (v90 == INFINITY)
      {
        LOBYTE(v91) = -1;
      }
      else if (v90 == -INFINITY)
      {
        LOBYTE(v91) = 0;
      }
      else
      {
        int v92 = llroundf(v90);
        if (v92 >= 255) {
          int v92 = 255;
        }
        int v91 = v92 & ~(v92 >> 31);
      }
      *(unsigned char *)(*v49
      uint64_t v57 = v108 + 1;
      v119 += v102;
      double v50 = a7;
      if (v108 + 1 == v106) {
        goto LABEL_106;
      }
    }
  }
LABEL_110:
  std::__function::__value_func<signed char ()(signed char)>::~__value_func[abi:ne180100](v134);
  if (v126)
  {
    uint64_t v127 = v126;
    operator delete(v126);
  }
  if (v129)
  {
    uint64_t v130 = v129;
    operator delete(v129);
  }
}

void sub_210B46EF8(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void *)(v1 - 256);
  unint64_t v3 = *(void **)(v1 - 248);
  if (v3)
  {
    *(void *)(v1 - 240) = v3;
    operator delete(v3);
  }
  uint64_t v5 = *(void **)(v1 - 224);
  if (v5)
  {
    *(void *)(v1 - 216) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)v4;
  if (*(void *)v4)
  {
    *(void *)(v4 + 8) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int *a7@<X6>, int a8@<W7>, unint64_t *a9@<X8>, char a10, char a11, uint64_t a12, uint64_t a13, char a14, char a15, uint64_t a16)
{
  uint64_t v138 = *MEMORY[0x263EF8340];
  __int16 v133 = a12;
  __int16 v132 = a13;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2) {
    std::vector<unsigned char>::__append(a9, a2);
  }
  int v125 = a9;
  uint64_t v22 = *(const void **)a3;
  uint64_t v23 = *(void *)(a3 + 8);
  unint64_t v24 = (v23 - *(void *)a3) >> 3;
  if (v24 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    float v93 = "x_rank == o_shape.size()";
    int v94 = 68;
    goto LABEL_121;
  }
  uint64_t v25 = *a5;
  uint64_t v26 = a5[1];
  uint64_t v27 = (v26 - *a5) >> 2;
  if (v27 != v24 - 1)
  {
    float v93 = "kernel_sizes.size() == num_spatial_dims + 1";
    int v94 = 69;
    goto LABEL_121;
  }
  uint64_t v28 = *a6;
  uint64_t v29 = a6[1];
  if (v27 != (v29 - *a6) >> 2)
  {
    float v93 = "strides.size() == num_spatial_dims + 1";
    int v94 = 70;
    goto LABEL_121;
  }
  if (*(_DWORD *)(v26 - 4) != *(_DWORD *)(v29 - 4))
  {
    float v93 = "kernel_sizes.back() == strides.back()";
    int v94 = 71;
LABEL_121:
    __assert_rtn("ComputeValueAvgPool", "NePoolCpu.cpp", v94, v93);
  }
  unint64_t v30 = v24 - 2;
  uint64_t v31 = 4 * v24;
  if (v24 == 5)
  {
    unint64_t v110 = *(int *)(v25 + v31 - 20);
    uint64_t v97 = *(int *)(v28 + v31 - 20);
    uint64_t v32 = 2;
LABEL_11:
    uint64_t v33 = v31 - 16;
    unint64_t v115 = *(int *)(v25 + v33);
    int v34 = *(_DWORD *)(v28 + v33);
    int v35 = 1;
    goto LABEL_13;
  }
  uint64_t v32 = v24 - 3;
  uint64_t v97 = 1;
  if (v30 > 1)
  {
    unint64_t v110 = 1;
    goto LABEL_11;
  }
  int v35 = 0;
  unint64_t v110 = 1;
  unint64_t v115 = 1;
  int v34 = 1;
LABEL_13:
  unsigned int v121 = *(_DWORD *)(v25 + 4 * v30);
  unint64_t v114 = *(int *)(v25 + 4 * v32);
  uint64_t v98 = *(int *)(v28 + 4 * v32);
  uint64_t v102 = *(int *)(v28 + 4 * v30);
  uint64_t v129 = 0;
  uint64_t v130 = 0;
  uint64_t v131 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v129, v22, v23, v24);
  uint64_t v126 = 0;
  uint64_t v127 = 0;
  uint64_t v128 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v126, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v24 == 3)
  {
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v129, (uint64_t)(v129 + 8), (char *)__e, v136, 2);
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v126, (uint64_t)(v126 + 8), (char *)__e, v136, 2);
  }
  else if (v24 == 4)
  {
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v129, v129 + 8, __e);
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v126, v126 + 8, __e);
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v133);
  float v37 = v36;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v132);
  if (v24 == 5)
  {
    float v37 = v37 * (float)v110;
    if (a14) {
      float v38 = v38 / (float)v110;
    }
  }
  char v39 = a14;
  float v40 = v37 * (float)v115;
  if (v35)
  {
    float v41 = v38 / (float)v115;
  }
  else
  {
    float v40 = v37;
    float v41 = v38;
  }
  float v42 = v40 * (float)v114;
  uint64_t v43 = *(void *)v126;
  uint64_t v99 = *((void *)v126 + 1);
  uint64_t v100 = *((void *)v126 + 2);
  uint64_t v101 = *((void *)v126 + 3);
  uint64_t v106 = *((void *)v126 + 4);
  uint64_t v109 = *((void *)v129 + 1);
  uint64_t v113 = *((void *)v129 + 2);
  uint64_t v117 = *((void *)v129 + 3);
  v134[0] = &unk_26C316098;
  v134[3] = v134;
  if (a15)
  {
    *(void *)int __e = &unk_26C316118;
    uint64_t v137 = __e;
    std::__function::__value_func<signed char ()(signed char)>::swap[abi:ne180100](__e, v134);
    std::__function::__value_func<signed char ()(signed char)>::~__value_func[abi:ne180100](__e);
  }
  double v44 = ldexp(1.0, a8);
  float v45 = ldexp(1.0, a10 + a8);
  float v46 = v42 * v45;
  unsigned int v47 = llroundf(v46);
  if (fabsf(v46) < 1.0) {
    unsigned int v47 = 0;
  }
  unsigned int v103 = v47;
  double v48 = exp2(-(double)(a11 + a8));
  unsigned int v49 = v125;
  double v50 = a7;
  uint64_t v96 = v43;
  if (v43)
  {
    uint64_t v51 = 0;
    uint64_t v95 = v34;
    float v52 = v44;
    int v123 = -20 - a8;
    double v53 = v48 * (float)(v41 / (float)v114);
    int v54 = v121;
    if (v121 <= 1) {
      int v54 = 1;
    }
    uint64_t v118 = v54;
    uint64_t v55 = v114;
    if (v114 <= 1) {
      uint64_t v55 = 1;
    }
    uint64_t v122 = v55;
    float v56 = v53;
    while (!v99)
    {
LABEL_111:
      if (++v51 == v96) {
        goto LABEL_112;
      }
    }
    uint64_t v104 = 0;
    while (!v100)
    {
LABEL_110:
      if (++v104 == v99) {
        goto LABEL_111;
      }
    }
    uint64_t v105 = 0;
    while (!v101)
    {
LABEL_109:
      if (++v105 == v100) {
        goto LABEL_110;
      }
    }
    uint64_t v107 = 0;
    while (!v106)
    {
LABEL_108:
      if (++v107 == v101) {
        goto LABEL_109;
      }
    }
    uint64_t v119 = 0;
    uint64_t v57 = 0;
    while (1)
    {
      uint64_t v108 = v57;
      if (v110)
      {
        uint64_t v58 = 0;
        uint64_t v59 = 0;
        int v60 = 0;
        int v61 = v103;
        while (1)
        {
          unint64_t v62 = v58 + v104 * v97;
          if ((v39 & 1) == 0 && (v62 < *v50 || v62 >= v109 - v50[1])) {
            goto LABEL_82;
          }
          uint64_t v111 = v58;
          uint64_t v112 = v59;
          if (v115) {
            break;
          }
LABEL_79:
          uint64_t v58 = v111;
          uint64_t v59 = v112 + 1;
          double v50 = a7;
LABEL_82:
          if (++v58 == v110) {
            goto LABEL_85;
          }
        }
        uint64_t v63 = 0;
        while (2)
        {
          unint64_t v64 = v63 + v105 * v95;
          uint64_t v116 = v63;
          if (v39)
          {
            if (v114) {
              goto LABEL_54;
            }
LABEL_78:
            uint64_t v63 = v116 + 1;
            char v39 = a14;
            if (v116 + 1 == v115) {
              goto LABEL_79;
            }
            continue;
          }
          break;
        }
        if (v64 < a7[2]) {
          goto LABEL_78;
        }
        if (v64 >= v113 - a7[3] || v114 == 0) {
          goto LABEL_78;
        }
LABEL_54:
        uint64_t v66 = 0;
        while (2)
        {
          unint64_t v67 = v66 + v107 * v98;
          if (a14)
          {
            if (!v121) {
              goto LABEL_77;
            }
LABEL_63:
            uint64_t v69 = v118;
            uint64_t v70 = v119;
            do
            {
              int v72 = std::function<signed char ()(signed char)>::operator()((uint64_t)v134, *(unsigned char *)(a1 + Index));
              if (!v60)
              {
                int v73 = v72;
                int v74 = ilogbf(1.0);
                if (v74 <= -14) {
                  int v75 = -14;
                }
                else {
                  int v75 = v74;
                }
                if (v75 >= v123)
                {
                  uint64_t v76 = (int)llroundf(v52 * (float)v73) + (uint64_t)v61;
                  if (v76 <= 0x7FFFFFFF)
                  {
                    if (v76 >= (uint64_t)0xFFFFFFFF80000000) {
                      int v61 = v76;
                    }
                    else {
                      int v61 = -8388608;
                    }
                    int v60 = 2 * (v76 < (uint64_t)0xFFFFFFFF80000000);
                  }
                  else
                  {
                    int v60 = 1;
                    int v61 = 2139095040;
                  }
                }
                else
                {
                  int v60 = 0;
                }
              }
              unsigned int v49 = v125;
              ++v70;
              --v69;
            }
            while (v69);
          }
          else if (v67 >= a7[4] && v67 < v117 - a7[5] && v121 != 0)
          {
            goto LABEL_63;
          }
LABEL_77:
          if (++v66 == v122) {
            goto LABEL_78;
          }
          continue;
        }
      }
      int v60 = 0;
      uint64_t v59 = 0;
      int v61 = v103;
LABEL_85:
      LOWORD(__e[0]) = MIL::ANEMachineIR::Interpreter::RecipTableRaw[v59];
      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
      float v78 = v77 * v56;
      float v79 = 0.0;
      if (v78 == 0.0)
      {
        if (v60) {
          goto LABEL_87;
        }
      }
      else
      {
        __e[0] = 0;
        long double v81 = frexp(v78, __e);
        double v82 = ldexp(v81, 11);
        float v79 = ldexp(round(v82), __e[0] - 11);
        if (v60)
        {
LABEL_87:
          double v80 = INFINITY;
          if (v60 == 2) {
            double v80 = -INFINITY;
          }
          goto LABEL_93;
        }
      }
      if (!v61)
      {
        float v85 = 0.0;
        goto LABEL_94;
      }
      double v80 = (double)v61;
LABEL_93:
      __e[0] = 0;
      long double v83 = frexp(v80, __e);
      double v84 = ldexp(v83, 11);
      float v85 = ldexp(round(v84), __e[0] - 11);
LABEL_94:
      float v86 = v79 * v85;
      float v87 = 0.0;
      if (v86 != 0.0)
      {
        __e[0] = 0;
        long double v88 = frexp(v86, __e);
        double v89 = ldexp(v88, 11);
        float v87 = ldexp(round(v89), __e[0] - 11);
      }
      std::function<float ()(float)>::operator()(a16, v87);
      if (v90 == INFINITY)
      {
        char v91 = 127;
      }
      else if (v90 == -INFINITY)
      {
        char v91 = 0x80;
      }
      else
      {
        int v92 = llroundf(v90);
        if (v92 >= 127) {
          int v92 = 127;
        }
        if (v92 <= -128) {
          char v91 = 0x80;
        }
        else {
          char v91 = v92;
        }
      }
      *(unsigned char *)(*v49
      uint64_t v57 = v108 + 1;
      v119 += v102;
      double v50 = a7;
      if (v108 + 1 == v106) {
        goto LABEL_108;
      }
    }
  }
LABEL_112:
  std::__function::__value_func<signed char ()(signed char)>::~__value_func[abi:ne180100](v134);
  if (v126)
  {
    uint64_t v127 = v126;
    operator delete(v126);
  }
  if (v129)
  {
    uint64_t v130 = v129;
    operator delete(v129);
  }
}

void sub_210B47884(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void *)(v1 - 256);
  unint64_t v3 = *(void **)(v1 - 248);
  if (v3)
  {
    *(void *)(v1 - 240) = v3;
    operator delete(v3);
  }
  uint64_t v5 = *(void **)(v1 - 224);
  if (v5)
  {
    *(void *)(v1 - 216) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)v4;
  if (*(void *)v4)
  {
    *(void *)(v4 + 8) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::NeMaxPoolCpu::Run(MIL::IROperation *a1@<X1>, void *a2@<X2>, _DWORD *a3@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(MIL::IROperation *))(*(void *)a1 + 56))(a1);
  int v7 = *(char *)(v6 + 23);
  if (v7 < 0)
  {
    if (*(void *)(v6 + 8) != 11)
    {
LABEL_10:
      *a3 = 1;
      uint64_t v9 = a3 + 2;
      std::string::basic_string[abi:ne180100]<0>(&v20, "ne_max_pool");
      uint64_t v10 = std::string::insert(&v20, 0, "Expected '");
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v21.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = std::string::append(&v21, "' op. Got ");
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v22.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      uint64_t v14 = (*(uint64_t (**)(MIL::IROperation *))(*(void *)a1 + 56))(a1);
      int v15 = *(char *)(v14 + 23);
      if (v15 >= 0) {
        float v16 = (const std::string::value_type *)v14;
      }
      else {
        float v16 = *(const std::string::value_type **)v14;
      }
      if (v15 >= 0) {
        std::string::size_type v17 = *(unsigned __int8 *)(v14 + 23);
      }
      else {
        std::string::size_type v17 = *(void *)(v14 + 8);
      }
      BOOL v18 = std::string::append(&v22, v16, v17);
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      *((void *)v9 + 2) = *((void *)&v18->__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v9 = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      return;
    }
    uint64_t v6 = *(void *)v6;
  }
  else if (v7 != 11)
  {
    goto LABEL_10;
  }
  if (*(void *)v6 != 0x705F78616D5F656ELL || *(void *)(v6 + 3) != 0x6C6F6F705F78616DLL) {
    goto LABEL_10;
  }
}

void sub_210B47AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::RunMaxOrMinPool(MIL::IROperation *a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  v103[4] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  uint64_t InterpretedTensorValue = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&__p);
  uint64_t v9 = InterpretedTensorValue;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (InterpretedTensorValue) {
      goto LABEL_3;
    }
LABEL_29:
    *(_DWORD *)a4 = 2;
    std::string::basic_string[abi:ne180100]<0>(&__p, "x");
    uint64_t v27 = std::string::insert(&__p, 0, "No value for ");
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    *(void *)(a4 + 24) = *((void *)&v27->__r_.__value_.__l + 2);
    *(_OWORD *)(a4 + 8) = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    std::vector<int>::pointer v29 = (std::vector<int>::pointer)__p.__r_.__value_.__r.__words[0];
    goto LABEL_93;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v9) {
    goto LABEL_29;
  }
LABEL_3:
  std::string::basic_string[abi:ne180100]<0>(&__p, "kernel_sizes");
  uint64_t ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
  MIL::IRValue::AsTensor(ParameterValue);
  uint64_t Data = MIL::IRTensorValue::GetDataView<int>();
  std::vector<int>::size_type __n = v11;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    std::vector<int>::size_type v11 = __n;
  }
  std::vector<int>::vector(&v90, v11);
  if (v90.__end_ != v90.__begin_)
  {
    unint64_t v12 = 0;
    do
    {
      long long v13 = (int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&Data, v12);
      std::vector<int>::pointer begin = v90.__begin_;
      v90.__begin_[v12++] = *v13;
    }
    while (v12 < v90.__end_ - begin);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "strides");
  int v15 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
  MIL::IRValue::AsTensor(v15);
  uint64_t v88 = MIL::IRTensorValue::GetDataView<int>();
  std::vector<int>::size_type v89 = v16;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    std::vector<int>::size_type v16 = v89;
  }
  std::vector<int>::vector(&v87, v16);
  if (v87.__end_ != v87.__begin_)
  {
    unint64_t v17 = 0;
    do
    {
      BOOL v18 = (int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v88, v17);
      std::vector<int>::pointer v19 = v87.__begin_;
      v87.__begin_[v17++] = *v18;
    }
    while (v17 < v87.__end_ - v19);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "post_right_shift");
  uint64_t v20 = MIL::IROperation::TryGetParameterValue();
  if (v20
    && (*(uint64_t (**)(uint64_t))(*(void *)v20 + 40))(v20)
    && (std::string v21 = (char *)MEMORY[0x21667B840]()) != 0)
  {
    char v22 = *v21;
  }
  else
  {
    char v22 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v23 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&__p, "post_scale");
  __int16 v24 = MIL::Fp16::FromFloat(v23, 1.0);
  uint64_t v25 = MIL::IROperation::TryGetParameterValue();
  if (v25)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v25 + 40))(v25))
    {
      uint64_t v26 = (__int16 *)MEMORY[0x21667B820]();
      if (v26) {
        __int16 v24 = *v26;
      }
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  uint64_t v86 = 0;
  MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction((uint64_t)a1, (uint64_t)&__p, (uint64_t)v103);
  if (LODWORD(__p.__r_.__value_.__l.__data_))
  {
    *(_DWORD *)a4 = __p.__r_.__value_.__l.__data_;
    *(_OWORD *)(a4 + 8) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
    *(void *)(a4 + 24) = v86;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    uint64_t v86 = 0;
    goto LABEL_87;
  }
  uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 32))(v9);
  int v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 88))(v30);
  OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  uint64_t v33 = MIL::IRValueType::AsTensorType(OutputType);
  int v34 = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 88))(v33);
  int v35 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  uint64_t v36 = MIL::IRValueType::AsTensorType(v35);
  size_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 16))(v36);
  float v38 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 32))(v9);
  ANEMachineIR::Utils::GetStaticTensorShape(v38, v39, (uint64_t)v84);
  float v40 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  float v41 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v40);
  ANEMachineIR::Utils::GetStaticTensorShape(v41, v42, (uint64_t)v83);
  switch(v31)
  {
    case 4:
      switch(v34)
      {
        case 14:
          uint64_t v72 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
          std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v101, (uint64_t)v103);
          std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v101);
          (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v80, a1);
          int v73 = v80;
          if (v81 == v80) {
            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
          }
          int v74 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
          MIL::IRValueType::AsTensorType(v74);
          MIL::IRTensorValueType::MakeUInt8Value();
          MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v73, (uint64_t *)&v93);
          int v75 = v93;
          float v93 = 0;
          if (v75) {
            (*((void (**)(void **))*v75 + 1))(v75);
          }
          goto LABEL_81;
        case 9:
          uint64_t v64 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
          std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v100, (uint64_t)v103);
          std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v100);
          (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v80, a1);
          uint64_t v65 = v80;
          if (v81 == v80) {
            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v66 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
          MIL::IRValueType::AsTensorType(v66);
          MIL::IRTensorValueType::MakeInt8Value();
          MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v65, (uint64_t *)&v93);
          unint64_t v67 = v93;
          float v93 = 0;
          if (v67) {
            (*((void (**)(void **))*v67 + 1))(v67);
          }
          goto LABEL_81;
        case 4:
          uint64_t v51 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
          std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v102, (uint64_t)v103);
          std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v102);
          (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v80, a1);
          float v52 = v80;
          if (v81 == v80) {
            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
          }
          double v53 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
          MIL::IRValueType::AsTensorType(v53);
          MIL::IRTensorValueType::MakeFloat16Value();
          MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v52, (uint64_t *)&v93);
          int v54 = v93;
          float v93 = 0;
          if (v54) {
            (*((void (**)(void **))*v54 + 1))(v54);
          }
          goto LABEL_81;
      }
LABEL_56:
      uint64_t v55 = "Unimplemented output dtype";
      goto LABEL_57;
    case 9:
      switch(v34)
      {
        case 14:
          uint64_t v60 = MIL::IRTensorValue::GetDataView<signed char>();
          std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v95, (uint64_t)v103);
          std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v95);
          (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v80, a1);
          int v61 = v80;
          if (v81 == v80) {
            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
          }
          unint64_t v62 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
          MIL::IRValueType::AsTensorType(v62);
          MIL::IRTensorValueType::MakeUInt8Value();
          MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v61, (uint64_t *)&v93);
          uint64_t v63 = v93;
          float v93 = 0;
          if (v63) {
            (*((void (**)(void **))*v63 + 1))(v63);
          }
          goto LABEL_81;
        case 9:
          uint64_t v56 = MIL::IRTensorValue::GetDataView<signed char>();
          std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v94, (uint64_t)v103);
          std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v94);
          (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v80, a1);
          uint64_t v57 = v80;
          if (v81 == v80) {
            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v58 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
          MIL::IRValueType::AsTensorType(v58);
          MIL::IRTensorValueType::MakeInt8Value();
          MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v57, (uint64_t *)&v93);
          uint64_t v59 = v93;
          float v93 = 0;
          if (v59) {
            (*((void (**)(void **))*v59 + 1))(v59);
          }
          goto LABEL_81;
        case 4:
          uint64_t v47 = MIL::IRTensorValue::GetDataView<signed char>();
          std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v96, (uint64_t)v103);
          std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v96);
          (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v80, a1);
          double v48 = v80;
          if (v81 == v80) {
            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
          }
          unsigned int v49 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
          MIL::IRValueType::AsTensorType(v49);
          MIL::IRTensorValueType::MakeFloat16Value();
          MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v48, (uint64_t *)&v93);
          double v50 = v93;
          float v93 = 0;
          if (v50) {
            (*((void (**)(void **))*v50 + 1))(v50);
          }
          goto LABEL_81;
      }
      goto LABEL_56;
    case 14:
      switch(v34)
      {
        case 14:
          uint64_t v76 = MIL::IRTensorValue::GetDataView<unsigned char>();
          std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v98, (uint64_t)v103);
          std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v98);
          (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v80, a1);
          float v77 = v80;
          if (v81 == v80) {
            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
          }
          float v78 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
          MIL::IRValueType::AsTensorType(v78);
          MIL::IRTensorValueType::MakeUInt8Value();
          MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v77, (uint64_t *)&v93);
          float v79 = v93;
          float v93 = 0;
          if (v79) {
            (*((void (**)(void **))*v79 + 1))(v79);
          }
          goto LABEL_81;
        case 9:
          uint64_t v68 = MIL::IRTensorValue::GetDataView<unsigned char>();
          std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v97, (uint64_t)v103);
          std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v97);
          (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v80, a1);
          uint64_t v69 = v80;
          if (v81 == v80) {
            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v70 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
          MIL::IRValueType::AsTensorType(v70);
          MIL::IRTensorValueType::MakeInt8Value();
          MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v69, (uint64_t *)&v93);
          uint64_t v71 = v93;
          float v93 = 0;
          if (v71) {
            (*((void (**)(void **))*v71 + 1))(v71);
          }
          goto LABEL_81;
        case 4:
          uint64_t v43 = MIL::IRTensorValue::GetDataView<unsigned char>();
          std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v99, (uint64_t)v103);
          std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v99);
          (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v80, a1);
          double v44 = v80;
          if (v81 == v80) {
            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
          }
          float v45 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
          MIL::IRValueType::AsTensorType(v45);
          MIL::IRTensorValueType::MakeFloat16Value();
          MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v44, (uint64_t *)&v93);
          float v46 = v93;
          float v93 = 0;
          if (v46) {
            (*((void (**)(void **))*v46 + 1))(v46);
          }
LABEL_81:
          float v93 = (void **)&v80;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v93);
          *(_DWORD *)a4 = 0;
          std::string::basic_string[abi:ne180100]<0>((void *)(a4 + 8), (char *)&unk_210C6BFE7);
          if (v82[0])
          {
            v82[1] = v82[0];
            operator delete(v82[0]);
          }
          goto LABEL_83;
      }
      goto LABEL_56;
  }
  uint64_t v55 = "Unimplemented input dtype";
LABEL_57:
  *(_DWORD *)a4 = 3;
  std::string::basic_string[abi:ne180100]<0>((void *)(a4 + 8), v55);
LABEL_83:
  if (v83[0])
  {
    v83[1] = v83[0];
    operator delete(v83[0]);
  }
  if (v84[0])
  {
    v84[1] = v84[0];
    operator delete(v84[0]);
  }
LABEL_87:
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v103);
  if (SHIBYTE(v86) < 0) {
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  }
  if (v87.__begin_)
  {
    v87.__end_ = v87.__begin_;
    operator delete(v87.__begin_);
  }
  std::vector<int>::pointer v29 = v90.__begin_;
  if (v90.__begin_)
  {
    v90.__end_ = v90.__begin_;
LABEL_93:
    operator delete(v29);
  }
}

{
  uint64_t InterpretedTensorValue;
  uint64_t v9;
  MIL::IRValue *ParameterValue;
  std::vector<int>::size_type v11;
  unint64_t v12;
  int *v13;
  std::vector<int>::pointer begin;
  MIL::IRValue *v15;
  std::vector<int>::size_type v16;
  unint64_t v17;
  int *v18;
  std::vector<int>::pointer v19;
  MIL::Fp16 *v20;
  __int16 v21;
  uint64_t v22;
  __int16 *v23;
  std::string *v24;
  long long v25;
  std::vector<int>::pointer v26;
  uint64_t v27;
  int v28;
  MIL::IRValueType *OutputType;
  uint64_t v30;
  int v31;
  MIL::IRValueType *v32;
  uint64_t v33;
  size_t v34;
  ANEMachineIR::Utils *v35;
  const MIL::IRTensorValueType *v36;
  MIL::IRValueType *v37;
  ANEMachineIR::Utils *v38;
  const MIL::IRTensorValueType *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  MIL::IRValueType *v42;
  void **v43;
  uint64_t v44;
  unsigned __int8 *v45;
  MIL::IRValueType *v46;
  void **v47;
  uint64_t v48;
  unsigned __int8 *v49;
  MIL::IRValueType *v50;
  void **v51;
  char *v52;
  uint64_t v53;
  unsigned __int8 *v54;
  MIL::IRValueType *v55;
  void **v56;
  uint64_t v57;
  unsigned __int8 *v58;
  MIL::IRValueType *v59;
  void **v60;
  uint64_t v61;
  unsigned __int8 *v62;
  MIL::IRValueType *v63;
  void **v64;
  uint64_t v65;
  unsigned __int8 *v66;
  MIL::IRValueType *v67;
  void **v68;
  uint64_t v69;
  unsigned __int8 *v70;
  MIL::IRValueType *v71;
  void **v72;
  uint64_t v73;
  unsigned __int8 *v74;
  MIL::IRValueType *v75;
  void **v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  void *v79[3];
  void *v80[3];
  void *v81[3];
  std::string __p;
  uint64_t v83;
  std::vector<int> v84;
  uint64_t v85;
  std::vector<int>::size_type v86;
  std::vector<int> v87;
  uint64_t Data;
  std::vector<int>::size_type __n;
  void **v90;
  void v91[4];
  void v92[4];
  void v93[4];
  void v94[4];
  void v95[4];
  void v96[4];
  void v97[4];
  void v98[4];
  void v99[4];
  void v100[5];

  void v100[4] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  uint64_t InterpretedTensorValue = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&__p);
  uint64_t v9 = InterpretedTensorValue;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (InterpretedTensorValue) {
      goto LABEL_3;
    }
LABEL_22:
    *(_DWORD *)a4 = 2;
    std::string::basic_string[abi:ne180100]<0>(&__p, "x");
    __int16 v24 = std::string::insert(&__p, 0, "No value for ");
    uint64_t v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    *(void *)(a4 + 24) = *((void *)&v24->__r_.__value_.__l + 2);
    *(_OWORD *)(a4 + 8) = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    uint64_t v26 = (std::vector<int>::pointer)__p.__r_.__value_.__r.__words[0];
    goto LABEL_86;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v9) {
    goto LABEL_22;
  }
LABEL_3:
  std::string::basic_string[abi:ne180100]<0>(&__p, "kernel_sizes");
  uint64_t ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
  MIL::IRValue::AsTensor(ParameterValue);
  uint64_t Data = MIL::IRTensorValue::GetDataView<int>();
  std::vector<int>::size_type __n = v11;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    std::vector<int>::size_type v11 = __n;
  }
  std::vector<int>::vector(&v87, v11);
  if (v87.__end_ != v87.__begin_)
  {
    unint64_t v12 = 0;
    do
    {
      long long v13 = (int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&Data, v12);
      std::vector<int>::pointer begin = v87.__begin_;
      v87.__begin_[v12++] = *v13;
    }
    while (v12 < v87.__end_ - begin);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "strides");
  int v15 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
  MIL::IRValue::AsTensor(v15);
  float v85 = MIL::IRTensorValue::GetDataView<int>();
  uint64_t v86 = v16;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    std::vector<int>::size_type v16 = v86;
  }
  std::vector<int>::vector(&v84, v16);
  if (v84.__end_ != v84.__begin_)
  {
    unint64_t v17 = 0;
    do
    {
      BOOL v18 = (int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v85, v17);
      std::vector<int>::pointer v19 = v84.__begin_;
      v84.__begin_[v17++] = *v18;
    }
    while (v17 < v84.__end_ - v19);
  }
  uint64_t v20 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&__p, "post_scale");
  std::string v21 = MIL::Fp16::FromFloat(v20, 1.0);
  char v22 = MIL::IROperation::TryGetParameterValue();
  if (v22)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v22 + 40))(v22))
    {
      uint64_t v23 = (__int16 *)MEMORY[0x21667B820]();
      if (v23) {
        std::string v21 = *v23;
      }
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  long double v83 = 0;
  MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction((uint64_t)a1, (uint64_t)&__p, (uint64_t)v100);
  if (LODWORD(__p.__r_.__value_.__l.__data_))
  {
    *(_DWORD *)a4 = __p.__r_.__value_.__l.__data_;
    *(_OWORD *)(a4 + 8) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
    *(void *)(a4 + 24) = v83;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    long double v83 = 0;
    goto LABEL_80;
  }
  uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 32))(v9);
  long long v28 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 88))(v27);
  OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  uint64_t v30 = MIL::IRValueType::AsTensorType(OutputType);
  int v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 88))(v30);
  uint64_t v32 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  uint64_t v33 = MIL::IRValueType::AsTensorType(v32);
  int v34 = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 16))(v33);
  int v35 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 32))(v9);
  ANEMachineIR::Utils::GetStaticTensorShape(v35, v36, (uint64_t)v81);
  size_t v37 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  float v38 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v37);
  ANEMachineIR::Utils::GetStaticTensorShape(v38, v39, (uint64_t)v80);
  switch(v28)
  {
    case 4:
      switch(v31)
      {
        case 14:
          uint64_t v69 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
          std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v98, (uint64_t)v100);
          std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v98);
          (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v77, a1);
          uint64_t v70 = v77;
          if (v78 == v77) {
            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v71 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
          MIL::IRValueType::AsTensorType(v71);
          MIL::IRTensorValueType::MakeUInt8Value();
          MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v70, (uint64_t *)&v90);
          uint64_t v72 = v90;
          std::vector<int> v90 = 0;
          if (v72) {
            (*((void (**)(void **))*v72 + 1))(v72);
          }
          goto LABEL_74;
        case 9:
          int v61 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
          std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v97, (uint64_t)v100);
          std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v97);
          (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v77, a1);
          unint64_t v62 = v77;
          if (v78 == v77) {
            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v63 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
          MIL::IRValueType::AsTensorType(v63);
          MIL::IRTensorValueType::MakeInt8Value();
          MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v62, (uint64_t *)&v90);
          uint64_t v64 = v90;
          std::vector<int> v90 = 0;
          if (v64) {
            (*((void (**)(void **))*v64 + 1))(v64);
          }
          goto LABEL_74;
        case 4:
          double v48 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
          std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v99, (uint64_t)v100);
          std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v99);
          (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v77, a1);
          unsigned int v49 = v77;
          if (v78 == v77) {
            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
          }
          double v50 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
          MIL::IRValueType::AsTensorType(v50);
          MIL::IRTensorValueType::MakeFloat16Value();
          MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v49, (uint64_t *)&v90);
          uint64_t v51 = v90;
          std::vector<int> v90 = 0;
          if (v51) {
            (*((void (**)(void **))*v51 + 1))(v51);
          }
          goto LABEL_74;
      }
LABEL_49:
      float v52 = "Unimplemented output dtype";
      goto LABEL_50;
    case 9:
      switch(v31)
      {
        case 14:
          uint64_t v57 = MIL::IRTensorValue::GetDataView<signed char>();
          std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v92, (uint64_t)v100);
          std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v92);
          (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v77, a1);
          uint64_t v58 = v77;
          if (v78 == v77) {
            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v59 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
          MIL::IRValueType::AsTensorType(v59);
          MIL::IRTensorValueType::MakeUInt8Value();
          MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v58, (uint64_t *)&v90);
          uint64_t v60 = v90;
          std::vector<int> v90 = 0;
          if (v60) {
            (*((void (**)(void **))*v60 + 1))(v60);
          }
          goto LABEL_74;
        case 9:
          double v53 = MIL::IRTensorValue::GetDataView<signed char>();
          std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v91, (uint64_t)v100);
          std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v91);
          (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v77, a1);
          int v54 = v77;
          if (v78 == v77) {
            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v55 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
          MIL::IRValueType::AsTensorType(v55);
          MIL::IRTensorValueType::MakeInt8Value();
          MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v54, (uint64_t *)&v90);
          uint64_t v56 = v90;
          std::vector<int> v90 = 0;
          if (v56) {
            (*((void (**)(void **))*v56 + 1))(v56);
          }
          goto LABEL_74;
        case 4:
          double v44 = MIL::IRTensorValue::GetDataView<signed char>();
          std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v93, (uint64_t)v100);
          std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v93);
          (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v77, a1);
          float v45 = v77;
          if (v78 == v77) {
            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
          }
          float v46 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
          MIL::IRValueType::AsTensorType(v46);
          MIL::IRTensorValueType::MakeFloat16Value();
          MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v45, (uint64_t *)&v90);
          uint64_t v47 = v90;
          std::vector<int> v90 = 0;
          if (v47) {
            (*((void (**)(void **))*v47 + 1))(v47);
          }
          goto LABEL_74;
      }
      goto LABEL_49;
    case 14:
      switch(v31)
      {
        case 14:
          int v73 = MIL::IRTensorValue::GetDataView<unsigned char>();
          std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v95, (uint64_t)v100);
          std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v95);
          (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v77, a1);
          int v74 = v77;
          if (v78 == v77) {
            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
          }
          int v75 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
          MIL::IRValueType::AsTensorType(v75);
          MIL::IRTensorValueType::MakeUInt8Value();
          MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v74, (uint64_t *)&v90);
          uint64_t v76 = v90;
          std::vector<int> v90 = 0;
          if (v76) {
            (*((void (**)(void **))*v76 + 1))(v76);
          }
          goto LABEL_74;
        case 9:
          uint64_t v65 = MIL::IRTensorValue::GetDataView<unsigned char>();
          std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v94, (uint64_t)v100);
          std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v94);
          (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v77, a1);
          uint64_t v66 = v77;
          if (v78 == v77) {
            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
          }
          unint64_t v67 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
          MIL::IRValueType::AsTensorType(v67);
          MIL::IRTensorValueType::MakeInt8Value();
          MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v66, (uint64_t *)&v90);
          uint64_t v68 = v90;
          std::vector<int> v90 = 0;
          if (v68) {
            (*((void (**)(void **))*v68 + 1))(v68);
          }
          goto LABEL_74;
        case 4:
          float v40 = MIL::IRTensorValue::GetDataView<unsigned char>();
          std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v96, (uint64_t)v100);
          std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v96);
          (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v77, a1);
          float v41 = v77;
          if (v78 == v77) {
            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
          }
          float v42 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
          MIL::IRValueType::AsTensorType(v42);
          MIL::IRTensorValueType::MakeFloat16Value();
          MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v41, (uint64_t *)&v90);
          uint64_t v43 = v90;
          std::vector<int> v90 = 0;
          if (v43) {
            (*((void (**)(void **))*v43 + 1))(v43);
          }
LABEL_74:
          std::vector<int> v90 = (void **)&v77;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v90);
          *(_DWORD *)a4 = 0;
          std::string::basic_string[abi:ne180100]<0>((void *)(a4 + 8), (char *)&unk_210C6BFE7);
          if (v79[0])
          {
            v79[1] = v79[0];
            operator delete(v79[0]);
          }
          goto LABEL_76;
      }
      goto LABEL_49;
  }
  float v52 = "Unimplemented input dtype";
LABEL_50:
  *(_DWORD *)a4 = 3;
  std::string::basic_string[abi:ne180100]<0>((void *)(a4 + 8), v52);
LABEL_76:
  if (v80[0])
  {
    v80[1] = v80[0];
    operator delete(v80[0]);
  }
  if (v81[0])
  {
    v81[1] = v81[0];
    operator delete(v81[0]);
  }
LABEL_80:
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v100);
  if (SHIBYTE(v83) < 0) {
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  }
  if (v84.__begin_)
  {
    v84.__end_ = v84.__begin_;
    operator delete(v84.__begin_);
  }
  uint64_t v26 = v87.__begin_;
  if (v87.__begin_)
  {
    v87.__end_ = v87.__begin_;
LABEL_86:
    operator delete(v26);
  }
}

void sub_210B48A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,int a26,__int16 a27,char a28,char a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  if (a21) {
    operator delete(a21);
  }
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100]((void *)(v61 - 128));
  if (a33 < 0) {
    operator delete(a25);
  }
  if (a34) {
    operator delete(a34);
  }
  if (a39) {
    operator delete(a39);
  }
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::NeMinPoolCpu::Run(MIL::IROperation *a1@<X1>, void *a2@<X2>, _DWORD *a3@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(MIL::IROperation *))(*(void *)a1 + 56))(a1);
  int v7 = *(char *)(v6 + 23);
  if (v7 < 0)
  {
    if (*(void *)(v6 + 8) != 11)
    {
LABEL_10:
      *a3 = 1;
      uint64_t v9 = a3 + 2;
      std::string::basic_string[abi:ne180100]<0>(&v20, "ne_min_pool");
      uint64_t v10 = std::string::insert(&v20, 0, "Expected '");
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v21.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = std::string::append(&v21, "' op. Got ");
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v22.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      uint64_t v14 = (*(uint64_t (**)(MIL::IROperation *))(*(void *)a1 + 56))(a1);
      int v15 = *(char *)(v14 + 23);
      if (v15 >= 0) {
        std::vector<int>::size_type v16 = (const std::string::value_type *)v14;
      }
      else {
        std::vector<int>::size_type v16 = *(const std::string::value_type **)v14;
      }
      if (v15 >= 0) {
        std::string::size_type v17 = *(unsigned __int8 *)(v14 + 23);
      }
      else {
        std::string::size_type v17 = *(void *)(v14 + 8);
      }
      BOOL v18 = std::string::append(&v22, v16, v17);
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      *((void *)v9 + 2) = *((void *)&v18->__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v9 = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      return;
    }
    uint64_t v6 = *(void *)v6;
  }
  else if (v7 != 11)
  {
    goto LABEL_10;
  }
  if (*(void *)v6 != 0x705F6E696D5F656ELL || *(void *)(v6 + 3) != 0x6C6F6F705F6E696DLL) {
    goto LABEL_10;
  }
}

void sub_210B48F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::NeAvgPoolCpu::~NeAvgPoolCpu(MIL::ANEMachineIR::Interpreter::NeAvgPoolCpu *this)
{
}

void MIL::ANEMachineIR::Interpreter::NeMaxPoolCpu::~NeMaxPoolCpu(MIL::ANEMachineIR::Interpreter::NeMaxPoolCpu *this)
{
}

void MIL::ANEMachineIR::Interpreter::NeMinPoolCpu::~NeMinPoolCpu(MIL::ANEMachineIR::Interpreter::NeMinPoolCpu *this)
{
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueMinMaxPool<MIL::Fp16,MIL::Fp16>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int a7@<W6>, __int16 a8@<W7>, void *a9@<X8>, uint64_t a10, char a11)
{
  std::vector<int>::size_type v16 = a9;
  *(void *)uint64_t v113 = *MEMORY[0x263EF8340];
  __int16 v111 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a2);
  std::string::size_type v17 = *(const void **)a3;
  uint64_t v18 = *(void *)(a3 + 8);
  unint64_t v19 = (v18 - *(void *)a3) >> 3;
  if (v19 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    uint64_t v72 = "x_rank == o_shape.size()";
    int v73 = 217;
    goto LABEL_73;
  }
  uint64_t v20 = *a5;
  uint64_t v21 = a5[1];
  uint64_t v22 = (v21 - *a5) >> 2;
  if (v22 != v19 - 1)
  {
    uint64_t v72 = "kernel_sizes.size() == num_spatial_dims + 1";
    int v73 = 218;
    goto LABEL_73;
  }
  uint64_t v23 = *a6;
  uint64_t v24 = a6[1];
  if (v22 != (v24 - *a6) >> 2)
  {
    uint64_t v72 = "strides.size() == num_spatial_dims + 1";
    int v73 = 219;
    goto LABEL_73;
  }
  if (*(_DWORD *)(v21 - 4) != *(_DWORD *)(v24 - 4))
  {
    uint64_t v72 = "kernel_sizes.back() == strides.back()";
    int v73 = 220;
LABEL_73:
    __assert_rtn("ComputeValueMinMaxPool", "NePoolCpu.cpp", v73, v72);
  }
  unint64_t v25 = v19 - 2;
  uint64_t v26 = 4 * v19;
  if (v19 == 5)
  {
    uint64_t v27 = *(int *)(v20 + v26 - 20);
    uint64_t v90 = *(int *)(v23 + v26 - 20);
    uint64_t v28 = 2;
  }
  else
  {
    uint64_t v28 = v19 - 3;
    uint64_t v90 = 1;
    uint64_t v27 = 1;
    unint64_t v91 = 1;
    unint64_t v96 = 1;
    int v29 = 1;
    if (v25 <= 1) {
      goto LABEL_9;
    }
  }
  uint64_t v30 = v26 - 16;
  unint64_t v96 = *(int *)(v20 + v30);
  int v29 = *(_DWORD *)(v23 + v30);
  unint64_t v91 = v27;
LABEL_9:
  unsigned int v101 = *(_DWORD *)(v20 + 4 * v25);
  unint64_t v103 = *(int *)(v20 + 4 * v28);
  unint64_t v102 = *(int *)(v23 + 4 * v28);
  uint64_t v31 = *(int *)(v23 + 4 * v25);
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  uint64_t v110 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v108, v17, v18, v19);
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v105, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  double v84 = v16;
  if (v19 == 3)
  {
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v108, (uint64_t)(v108 + 8), (char *)__e, v113, 2);
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v105, (uint64_t)(v105 + 8), (char *)__e, v113, 2);
  }
  else if (v19 == 4)
  {
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v108, v108 + 8, __e);
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v105, v105 + 8, __e);
  }
  uint64_t v32 = *(void *)v105;
  uint64_t v33 = *((void *)v105 + 1);
  uint64_t v34 = *((void *)v105 + 2);
  uint64_t v35 = *((void *)v105 + 3);
  uint64_t v85 = *((void *)v105 + 4);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v111);
  float v37 = v36;
  double v38 = exp2(-(double)a7);
  if (v32)
  {
    uint64_t v39 = 0;
    float v40 = v38 * v37;
    int v41 = v101;
    if (v101 <= 1) {
      int v41 = 1;
    }
    uint64_t v98 = v41;
    uint64_t v42 = v102;
    if (v102 <= 1) {
      uint64_t v42 = 1;
    }
    uint64_t v86 = v42;
    uint64_t v94 = v29;
    if ((unint64_t)v29 <= 1) {
      uint64_t v43 = 1;
    }
    else {
      uint64_t v43 = v29;
    }
    uint64_t v78 = v43;
    uint64_t v79 = v35;
    uint64_t v75 = v32;
    uint64_t v76 = v31;
    uint64_t v74 = v33;
    uint64_t v80 = v34;
    do
    {
      if (v33)
      {
        for (uint64_t i = 0; i != v33; ++i)
        {
          if (v34)
          {
            uint64_t v45 = 0;
            uint64_t v88 = i * v90;
            uint64_t v77 = i;
            do
            {
              if (v35)
              {
                uint64_t v46 = 0;
                uint64_t v93 = v45 * v94;
                uint64_t v81 = v45;
                do
                {
                  if (v85)
                  {
                    uint64_t v100 = 0;
                    uint64_t v47 = 0;
                    uint64_t v48 = v46 * v102;
                    uint64_t v82 = v46;
                    uint64_t v99 = v46 * v102;
                    do
                    {
                      uint64_t v83 = v47;
                      __int16 v49 = *(_WORD *)(a1
                                     + 2
                      if (v90)
                      {
                        for (unint64_t j = 0; j != v90; ++j)
                        {
                          if (v94)
                          {
                            unint64_t v89 = 0;
                            do
                            {
                              if (v102)
                              {
                                unint64_t v50 = 0;
                                unint64_t v51 = v89;
                                do
                                {
                                  unint64_t v52 = j;
                                  unint64_t v95 = v50;
                                  if (j < v91)
                                  {
                                    do
                                    {
                                      unint64_t v92 = v52;
                                      if (v51 < v96)
                                      {
                                        uint64_t v53 = v52 + v88;
                                        do
                                        {
                                          unint64_t v97 = v51;
                                          if (v50 < v103)
                                          {
                                            uint64_t v54 = v51 + v93;
                                            do
                                            {
                                              if (v101)
                                              {
                                                uint64_t v55 = v100;
                                                uint64_t v56 = v98;
                                                do
                                                {
                                                  __int16 v57 = *(_WORD *)(a1
                                                                 + 2
                                                  if (a11)
                                                  {
                                                    LOWORD(__e[0]) = v49;
                                                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                                                    float v59 = v58;
                                                    LOWORD(__e[0]) = v57;
                                                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                                                    if (v59 < v60) {
                                                      __int16 v49 = v57;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    LOWORD(__e[0]) = v49;
                                                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                                                    float v62 = v61;
                                                    LOWORD(__e[0]) = v57;
                                                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                                                    if (v62 > v63) {
                                                      __int16 v49 = v57;
                                                    }
                                                  }
                                                  ++v55;
                                                  --v56;
                                                }
                                                while (v56);
                                              }
                                              v50 += v102;
                                            }
                                            while (v50 < v103);
                                          }
                                          unint64_t v50 = v95;
                                          unint64_t v51 = v97 + v94;
                                        }
                                        while (v97 + v94 < v96);
                                      }
                                      unint64_t v51 = v89;
                                      unint64_t v52 = v92 + v90;
                                    }
                                    while (v92 + v90 < v91);
                                  }
                                  ++v50;
                                }
                                while (v50 != v86);
                              }
                              else
                              {
                                unint64_t v51 = v89;
                              }
                              uint64_t v35 = v79;
                              unint64_t v89 = v51 + 1;
                              std::vector<int>::size_type v16 = v84;
                              uint64_t v34 = v80;
                              uint64_t i = v77;
                            }
                            while (v51 + 1 != v78);
                          }
                        }
                      }
                      LOWORD(__e[0]) = v49;
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                      float v65 = v64 * v40;
                      float v66 = 0.0;
                      uint64_t v32 = v75;
                      uint64_t v31 = v76;
                      uint64_t v33 = v74;
                      if (v65 != 0.0)
                      {
                        __e[0] = 0;
                        long double v67 = frexp(v65, __e);
                        double v68 = ldexp(v67, 11);
                        float v66 = ldexp(round(v68), __e[0] - 11);
                      }
                      uint64_t v69 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(a10, v66);
                      __int16 v71 = MIL::Fp16::FromFloat(v69, v70);
                      *(_WORD *)(*v16
                               + 2
                      uint64_t v46 = v82;
                      uint64_t v47 = v83 + 1;
                      uint64_t v48 = v99;
                      v100 += v76;
                    }
                    while (v83 + 1 != v85);
                  }
                  ++v46;
                  uint64_t v45 = v81;
                }
                while (v46 != v35);
              }
              ++v45;
            }
            while (v45 != v34);
          }
        }
      }
      ++v39;
    }
    while (v39 != v32);
  }
  if (v105)
  {
    uint64_t v106 = v105;
    operator delete(v105);
  }
  if (v108)
  {
    uint64_t v109 = v108;
    operator delete(v108);
  }
}

void sub_210B49658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v23 = *(void **)(v21 - 184);
  if (v23)
  {
    *(void *)(v21 - 176) = v23;
    operator delete(v23);
  }
  uint64_t v24 = *(void **)(v21 - 160);
  if (v24)
  {
    *(void *)(v21 - 152) = v24;
    operator delete(v24);
  }
  unint64_t v25 = *(void **)a21;
  if (*(void *)a21)
  {
    *(void *)(a21 + 8) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueMinMaxPool<unsigned char,MIL::Fp16>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int a7@<W6>, __int16 a8@<W7>, unint64_t *a9@<X8>, uint64_t a10, char a11)
{
  std::vector<int>::size_type v16 = a9;
  *(void *)unint64_t v114 = *MEMORY[0x263EF8340];
  __int16 v112 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2) {
    std::vector<unsigned char>::__append(a9, a2);
  }
  std::string::size_type v17 = *(const void **)a3;
  uint64_t v18 = *(void *)(a3 + 8);
  unint64_t v19 = (v18 - *(void *)a3) >> 3;
  if (v19 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    int v73 = "x_rank == o_shape.size()";
    int v74 = 217;
    goto LABEL_82;
  }
  uint64_t v20 = *a5;
  uint64_t v21 = a5[1];
  uint64_t v22 = (v21 - *a5) >> 2;
  if (v22 != v19 - 1)
  {
    int v73 = "kernel_sizes.size() == num_spatial_dims + 1";
    int v74 = 218;
    goto LABEL_82;
  }
  uint64_t v23 = *a6;
  uint64_t v24 = a6[1];
  if (v22 != (v24 - *a6) >> 2)
  {
    int v73 = "strides.size() == num_spatial_dims + 1";
    int v74 = 219;
    goto LABEL_82;
  }
  if (*(_DWORD *)(v21 - 4) != *(_DWORD *)(v24 - 4))
  {
    int v73 = "kernel_sizes.back() == strides.back()";
    int v74 = 220;
LABEL_82:
    __assert_rtn("ComputeValueMinMaxPool", "NePoolCpu.cpp", v74, v73);
  }
  unint64_t v25 = v19 - 2;
  uint64_t v26 = 4 * v19;
  if (v19 == 5)
  {
    uint64_t v27 = *(int *)(v20 + v26 - 20);
    uint64_t v91 = *(int *)(v23 + v26 - 20);
    uint64_t v28 = 2;
  }
  else
  {
    uint64_t v28 = v19 - 3;
    uint64_t v91 = 1;
    uint64_t v27 = 1;
    unint64_t v92 = 1;
    unint64_t v97 = 1;
    int v29 = 1;
    if (v25 <= 1) {
      goto LABEL_11;
    }
  }
  uint64_t v30 = v26 - 16;
  unint64_t v97 = *(int *)(v20 + v30);
  int v29 = *(_DWORD *)(v23 + v30);
  unint64_t v92 = v27;
LABEL_11:
  unsigned int v102 = *(_DWORD *)(v20 + 4 * v25);
  unint64_t v104 = *(int *)(v20 + 4 * v28);
  unint64_t v103 = *(int *)(v23 + 4 * v28);
  uint64_t v31 = *(int *)(v23 + 4 * v25);
  uint64_t v109 = 0;
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v109, v17, v18, v19);
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  uint64_t v108 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v106, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  uint64_t v85 = v16;
  if (v19 == 3)
  {
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v109, (uint64_t)(v109 + 8), (char *)__e, v114, 2);
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v106, (uint64_t)(v106 + 8), (char *)__e, v114, 2);
  }
  else if (v19 == 4)
  {
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v109, v109 + 8, __e);
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v106, v106 + 8, __e);
  }
  uint64_t v32 = *(void *)v106;
  uint64_t v33 = *((void *)v106 + 1);
  uint64_t v34 = *((void *)v106 + 2);
  uint64_t v35 = *((void *)v106 + 3);
  uint64_t v86 = *((void *)v106 + 4);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v112);
  float v37 = v36;
  double v38 = exp2(-(double)a7);
  if (v32)
  {
    uint64_t v39 = 0;
    double v40 = v38 * v37;
    int v41 = v102;
    if (v102 <= 1) {
      int v41 = 1;
    }
    uint64_t v99 = v41;
    uint64_t v42 = v103;
    if (v103 <= 1) {
      uint64_t v42 = 1;
    }
    uint64_t v87 = v42;
    float v43 = v40;
    uint64_t v95 = v29;
    if ((unint64_t)v29 <= 1) {
      uint64_t v44 = 1;
    }
    else {
      uint64_t v44 = v29;
    }
    uint64_t v79 = v44;
    uint64_t v80 = v35;
    uint64_t v76 = v32;
    uint64_t v77 = v31;
    uint64_t v75 = v33;
    uint64_t v81 = v34;
    do
    {
      if (v33)
      {
        for (uint64_t i = 0; i != v33; ++i)
        {
          if (v34)
          {
            uint64_t v46 = 0;
            uint64_t v89 = i * v91;
            uint64_t v78 = i;
            do
            {
              if (v35)
              {
                uint64_t v47 = 0;
                uint64_t v94 = v46 * v95;
                uint64_t v82 = v46;
                do
                {
                  if (v86)
                  {
                    uint64_t v101 = 0;
                    uint64_t v48 = 0;
                    uint64_t v49 = v47 * v103;
                    uint64_t v100 = v47 * v103;
                    uint64_t v83 = v47;
                    do
                    {
                      uint64_t v84 = v48;
                      __int16 v50 = *(_WORD *)(a1
                                     + 2
                      if (v91)
                      {
                        for (unint64_t j = 0; j != v91; ++j)
                        {
                          if (v95)
                          {
                            unint64_t v90 = 0;
                            do
                            {
                              if (v103)
                              {
                                unint64_t v51 = 0;
                                unint64_t v52 = v90;
                                do
                                {
                                  unint64_t v53 = j;
                                  unint64_t v96 = v51;
                                  if (j < v92)
                                  {
                                    do
                                    {
                                      unint64_t v93 = v53;
                                      if (v52 < v97)
                                      {
                                        uint64_t v54 = v53 + v89;
                                        do
                                        {
                                          unint64_t v98 = v52;
                                          if (v51 < v104)
                                          {
                                            uint64_t v55 = v52 + v94;
                                            do
                                            {
                                              if (v102)
                                              {
                                                uint64_t v56 = v101;
                                                uint64_t v57 = v99;
                                                do
                                                {
                                                  __int16 v58 = *(_WORD *)(a1
                                                                 + 2
                                                  if (a11)
                                                  {
                                                    LOWORD(__e[0]) = v50;
                                                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                                                    float v60 = v59;
                                                    LOWORD(__e[0]) = v58;
                                                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                                                    if (v60 < v61) {
                                                      __int16 v50 = v58;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    LOWORD(__e[0]) = v50;
                                                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                                                    float v63 = v62;
                                                    LOWORD(__e[0]) = v58;
                                                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                                                    if (v63 > v64) {
                                                      __int16 v50 = v58;
                                                    }
                                                  }
                                                  ++v56;
                                                  --v57;
                                                }
                                                while (v57);
                                              }
                                              v51 += v103;
                                            }
                                            while (v51 < v104);
                                          }
                                          unint64_t v51 = v96;
                                          unint64_t v52 = v98 + v95;
                                        }
                                        while (v98 + v95 < v97);
                                      }
                                      unint64_t v52 = v90;
                                      unint64_t v53 = v93 + v91;
                                    }
                                    while (v93 + v91 < v92);
                                  }
                                  ++v51;
                                }
                                while (v51 != v87);
                              }
                              else
                              {
                                unint64_t v52 = v90;
                              }
                              uint64_t v35 = v80;
                              unint64_t v90 = v52 + 1;
                              std::vector<int>::size_type v16 = v85;
                              uint64_t v34 = v81;
                              uint64_t i = v78;
                            }
                            while (v52 + 1 != v79);
                          }
                        }
                      }
                      LOWORD(__e[0]) = v50;
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                      uint64_t v32 = v76;
                      uint64_t v31 = v77;
                      uint64_t v33 = v75;
                      float v66 = v65 * v43;
                      float v67 = 0.0;
                      if (v66 != 0.0)
                      {
                        __e[0] = 0;
                        long double v68 = frexp(v66, __e);
                        double v69 = ldexp(v68, 11);
                        float v67 = ldexp(round(v69), __e[0] - 11);
                      }
                      std::function<float ()(float)>::operator()(a10, v67);
                      if (v70 == INFINITY)
                      {
                        LOBYTE(v71) = -1;
                      }
                      else if (v70 == -INFINITY)
                      {
                        LOBYTE(v71) = 0;
                      }
                      else
                      {
                        int v72 = llroundf(v70);
                        if (v72 >= 255) {
                          int v72 = 255;
                        }
                        int v71 = v72 & ~(v72 >> 31);
                      }
                      *(unsigned char *)(*v16
                      uint64_t v47 = v83;
                      uint64_t v48 = v84 + 1;
                      uint64_t v49 = v100;
                      v101 += v77;
                    }
                    while (v84 + 1 != v86);
                  }
                  ++v47;
                  uint64_t v46 = v82;
                }
                while (v47 != v35);
              }
              ++v46;
            }
            while (v46 != v34);
          }
        }
      }
      ++v39;
    }
    while (v39 != v32);
  }
  if (v106)
  {
    uint64_t v107 = v106;
    operator delete(v106);
  }
  if (v109)
  {
    uint64_t v110 = v109;
    operator delete(v109);
  }
}

void sub_210B49D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v23 = *(void **)(v21 - 184);
  if (v23)
  {
    *(void *)(v21 - 176) = v23;
    operator delete(v23);
  }
  uint64_t v24 = *(void **)(v21 - 160);
  if (v24)
  {
    *(void *)(v21 - 152) = v24;
    operator delete(v24);
  }
  unint64_t v25 = *(void **)a21;
  if (*(void *)a21)
  {
    *(void *)(a21 + 8) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueMinMaxPool<signed char,MIL::Fp16>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int a7@<W6>, __int16 a8@<W7>, unint64_t *a9@<X8>, uint64_t a10, char a11)
{
  std::vector<int>::size_type v16 = a9;
  *(void *)unint64_t v114 = *MEMORY[0x263EF8340];
  __int16 v112 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2) {
    std::vector<unsigned char>::__append(a9, a2);
  }
  std::string::size_type v17 = *(const void **)a3;
  uint64_t v18 = *(void *)(a3 + 8);
  unint64_t v19 = (v18 - *(void *)a3) >> 3;
  if (v19 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    int v73 = "x_rank == o_shape.size()";
    int v74 = 217;
    goto LABEL_84;
  }
  uint64_t v20 = *a5;
  uint64_t v21 = a5[1];
  uint64_t v22 = (v21 - *a5) >> 2;
  if (v22 != v19 - 1)
  {
    int v73 = "kernel_sizes.size() == num_spatial_dims + 1";
    int v74 = 218;
    goto LABEL_84;
  }
  uint64_t v23 = *a6;
  uint64_t v24 = a6[1];
  if (v22 != (v24 - *a6) >> 2)
  {
    int v73 = "strides.size() == num_spatial_dims + 1";
    int v74 = 219;
    goto LABEL_84;
  }
  if (*(_DWORD *)(v21 - 4) != *(_DWORD *)(v24 - 4))
  {
    int v73 = "kernel_sizes.back() == strides.back()";
    int v74 = 220;
LABEL_84:
    __assert_rtn("ComputeValueMinMaxPool", "NePoolCpu.cpp", v74, v73);
  }
  unint64_t v25 = v19 - 2;
  uint64_t v26 = 4 * v19;
  if (v19 == 5)
  {
    uint64_t v27 = *(int *)(v20 + v26 - 20);
    uint64_t v91 = *(int *)(v23 + v26 - 20);
    uint64_t v28 = 2;
  }
  else
  {
    uint64_t v28 = v19 - 3;
    uint64_t v91 = 1;
    uint64_t v27 = 1;
    unint64_t v92 = 1;
    unint64_t v97 = 1;
    int v29 = 1;
    if (v25 <= 1) {
      goto LABEL_11;
    }
  }
  uint64_t v30 = v26 - 16;
  unint64_t v97 = *(int *)(v20 + v30);
  int v29 = *(_DWORD *)(v23 + v30);
  unint64_t v92 = v27;
LABEL_11:
  unsigned int v102 = *(_DWORD *)(v20 + 4 * v25);
  unint64_t v104 = *(int *)(v20 + 4 * v28);
  unint64_t v103 = *(int *)(v23 + 4 * v28);
  uint64_t v31 = *(int *)(v23 + 4 * v25);
  uint64_t v109 = 0;
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v109, v17, v18, v19);
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  uint64_t v108 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v106, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  uint64_t v85 = v16;
  if (v19 == 3)
  {
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v109, (uint64_t)(v109 + 8), (char *)__e, v114, 2);
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v106, (uint64_t)(v106 + 8), (char *)__e, v114, 2);
  }
  else if (v19 == 4)
  {
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v109, v109 + 8, __e);
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v106, v106 + 8, __e);
  }
  uint64_t v32 = *(void *)v106;
  uint64_t v33 = *((void *)v106 + 1);
  uint64_t v34 = *((void *)v106 + 2);
  uint64_t v35 = *((void *)v106 + 3);
  uint64_t v86 = *((void *)v106 + 4);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v112);
  float v37 = v36;
  double v38 = exp2(-(double)a7);
  if (v32)
  {
    uint64_t v39 = 0;
    double v40 = v38 * v37;
    int v41 = v102;
    if (v102 <= 1) {
      int v41 = 1;
    }
    uint64_t v99 = v41;
    uint64_t v42 = v103;
    if (v103 <= 1) {
      uint64_t v42 = 1;
    }
    uint64_t v87 = v42;
    uint64_t v95 = v29;
    if ((unint64_t)v29 <= 1) {
      uint64_t v43 = 1;
    }
    else {
      uint64_t v43 = v29;
    }
    uint64_t v79 = v43;
    uint64_t v80 = v35;
    float v44 = v40;
    uint64_t v76 = v32;
    uint64_t v77 = v31;
    uint64_t v75 = v33;
    uint64_t v81 = v34;
    do
    {
      if (v33)
      {
        for (uint64_t i = 0; i != v33; ++i)
        {
          if (v34)
          {
            uint64_t v46 = 0;
            uint64_t v89 = i * v91;
            uint64_t v78 = i;
            do
            {
              if (v35)
              {
                uint64_t v47 = 0;
                uint64_t v94 = v46 * v95;
                uint64_t v82 = v46;
                do
                {
                  if (v86)
                  {
                    uint64_t v101 = 0;
                    uint64_t v48 = 0;
                    uint64_t v49 = v47 * v103;
                    uint64_t v100 = v47 * v103;
                    uint64_t v83 = v47;
                    do
                    {
                      uint64_t v84 = v48;
                      __int16 v50 = *(_WORD *)(a1
                                     + 2
                      if (v91)
                      {
                        for (unint64_t j = 0; j != v91; ++j)
                        {
                          if (v95)
                          {
                            unint64_t v90 = 0;
                            do
                            {
                              if (v103)
                              {
                                unint64_t v51 = 0;
                                unint64_t v52 = v90;
                                do
                                {
                                  unint64_t v53 = j;
                                  unint64_t v96 = v51;
                                  if (j < v92)
                                  {
                                    do
                                    {
                                      unint64_t v93 = v53;
                                      if (v52 < v97)
                                      {
                                        uint64_t v54 = v53 + v89;
                                        do
                                        {
                                          unint64_t v98 = v52;
                                          if (v51 < v104)
                                          {
                                            uint64_t v55 = v52 + v94;
                                            do
                                            {
                                              if (v102)
                                              {
                                                uint64_t v56 = v101;
                                                uint64_t v57 = v99;
                                                do
                                                {
                                                  __int16 v58 = *(_WORD *)(a1
                                                                 + 2
                                                  if (a11)
                                                  {
                                                    LOWORD(__e[0]) = v50;
                                                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                                                    float v60 = v59;
                                                    LOWORD(__e[0]) = v58;
                                                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                                                    if (v60 < v61) {
                                                      __int16 v50 = v58;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    LOWORD(__e[0]) = v50;
                                                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                                                    float v63 = v62;
                                                    LOWORD(__e[0]) = v58;
                                                    MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                                                    if (v63 > v64) {
                                                      __int16 v50 = v58;
                                                    }
                                                  }
                                                  ++v56;
                                                  --v57;
                                                }
                                                while (v57);
                                              }
                                              v51 += v103;
                                            }
                                            while (v51 < v104);
                                          }
                                          unint64_t v51 = v96;
                                          unint64_t v52 = v98 + v95;
                                        }
                                        while (v98 + v95 < v97);
                                      }
                                      unint64_t v52 = v90;
                                      unint64_t v53 = v93 + v91;
                                    }
                                    while (v93 + v91 < v92);
                                  }
                                  ++v51;
                                }
                                while (v51 != v87);
                              }
                              else
                              {
                                unint64_t v52 = v90;
                              }
                              uint64_t v35 = v80;
                              unint64_t v90 = v52 + 1;
                              std::vector<int>::size_type v16 = v85;
                              uint64_t v34 = v81;
                              uint64_t i = v78;
                            }
                            while (v52 + 1 != v79);
                          }
                        }
                      }
                      LOWORD(__e[0]) = v50;
                      MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                      uint64_t v32 = v76;
                      uint64_t v31 = v77;
                      uint64_t v33 = v75;
                      float v66 = v65 * v44;
                      float v67 = 0.0;
                      if (v66 != 0.0)
                      {
                        __e[0] = 0;
                        long double v68 = frexp(v66, __e);
                        double v69 = ldexp(v68, 11);
                        float v67 = ldexp(round(v69), __e[0] - 11);
                      }
                      std::function<float ()(float)>::operator()(a10, v67);
                      if (v70 == INFINITY)
                      {
                        char v71 = 127;
                      }
                      else if (v70 == -INFINITY)
                      {
                        char v71 = 0x80;
                      }
                      else
                      {
                        int v72 = llroundf(v70);
                        if (v72 >= 127) {
                          int v72 = 127;
                        }
                        if (v72 <= -128) {
                          char v71 = 0x80;
                        }
                        else {
                          char v71 = v72;
                        }
                      }
                      *(unsigned char *)(*v16
                      uint64_t v47 = v83;
                      uint64_t v48 = v84 + 1;
                      uint64_t v49 = v100;
                      v101 += v77;
                    }
                    while (v84 + 1 != v86);
                  }
                  ++v47;
                  uint64_t v46 = v82;
                }
                while (v47 != v35);
              }
              ++v46;
            }
            while (v46 != v34);
          }
        }
      }
      ++v39;
    }
    while (v39 != v32);
  }
  if (v106)
  {
    uint64_t v107 = v106;
    operator delete(v106);
  }
  if (v109)
  {
    uint64_t v110 = v109;
    operator delete(v109);
  }
}

void sub_210B4A454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v23 = *(void **)(v21 - 184);
  if (v23)
  {
    *(void *)(v21 - 176) = v23;
    operator delete(v23);
  }
  uint64_t v24 = *(void **)(v21 - 160);
  if (v24)
  {
    *(void *)(v21 - 152) = v24;
    operator delete(v24);
  }
  unint64_t v25 = *(void **)a21;
  if (*(void *)a21)
  {
    *(void *)(a21 + 8) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueMinMaxPool<MIL::Fp16,unsigned char>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int a7@<W6>, __int16 a8@<W7>, void *a9@<X8>, uint64_t a10, char a11)
{
  *(void *)uint64_t v105 = *MEMORY[0x263EF8340];
  __int16 v103 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a2);
  std::string::size_type v17 = *(const void **)a3;
  uint64_t v18 = *(void *)(a3 + 8);
  unint64_t v19 = (v18 - *(void *)a3) >> 3;
  if (v19 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    float v66 = "x_rank == o_shape.size()";
    int v67 = 217;
    goto LABEL_70;
  }
  uint64_t v20 = *a5;
  uint64_t v21 = a5[1];
  uint64_t v22 = (v21 - *a5) >> 2;
  if (v22 != v19 - 1)
  {
    float v66 = "kernel_sizes.size() == num_spatial_dims + 1";
    int v67 = 218;
    goto LABEL_70;
  }
  uint64_t v23 = *a6;
  uint64_t v24 = a6[1];
  if (v22 != (v24 - *a6) >> 2)
  {
    float v66 = "strides.size() == num_spatial_dims + 1";
    int v67 = 219;
    goto LABEL_70;
  }
  if (*(_DWORD *)(v21 - 4) != *(_DWORD *)(v24 - 4))
  {
    float v66 = "kernel_sizes.back() == strides.back()";
    int v67 = 220;
LABEL_70:
    __assert_rtn("ComputeValueMinMaxPool", "NePoolCpu.cpp", v67, v66);
  }
  unint64_t v25 = v19 - 2;
  uint64_t v26 = 4 * v19;
  if (v19 == 5)
  {
    uint64_t v27 = *(int *)(v20 + v26 - 20);
    uint64_t v84 = *(int *)(v23 + v26 - 20);
    uint64_t v28 = 2;
  }
  else
  {
    uint64_t v28 = v19 - 3;
    uint64_t v84 = 1;
    uint64_t v27 = 1;
    unint64_t v85 = 1;
    unint64_t v89 = 1;
    int v29 = 1;
    if (v25 <= 1) {
      goto LABEL_9;
    }
  }
  uint64_t v30 = v26 - 16;
  unint64_t v89 = *(int *)(v20 + v30);
  int v29 = *(_DWORD *)(v23 + v30);
  unint64_t v85 = v27;
LABEL_9:
  unsigned int v94 = *(_DWORD *)(v20 + 4 * v25);
  unint64_t v96 = *(int *)(v20 + 4 * v28);
  unint64_t v95 = *(int *)(v23 + 4 * v28);
  uint64_t v31 = *(int *)(v23 + 4 * v25);
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  uint64_t v102 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v100, v17, v18, v19);
  unint64_t v97 = 0;
  unint64_t v98 = 0;
  uint64_t v99 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v97, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v19 == 3)
  {
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v100, (uint64_t)(v100 + 8), (char *)__e, v105, 2);
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v97, (uint64_t)(v97 + 8), (char *)__e, v105, 2);
  }
  else if (v19 == 4)
  {
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v100, v100 + 8, __e);
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v97, v97 + 8, __e);
  }
  uint64_t v32 = *(void *)v97;
  uint64_t v33 = *((void *)v97 + 1);
  uint64_t v34 = *((void *)v97 + 2);
  uint64_t v35 = *((void *)v97 + 3);
  uint64_t v79 = *((void *)v97 + 4);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v103);
  float v37 = v36;
  double v38 = exp2(-(double)a7);
  if (v32)
  {
    uint64_t v39 = 0;
    float v40 = v38 * v37;
    int v41 = v94;
    if (v94 <= 1) {
      int v41 = 1;
    }
    uint64_t v91 = v41;
    uint64_t v42 = v95;
    if (v95 <= 1) {
      uint64_t v42 = 1;
    }
    uint64_t v80 = v42;
    if ((unint64_t)v29 <= 1) {
      uint64_t v43 = 1;
    }
    else {
      uint64_t v43 = v29;
    }
    uint64_t v76 = v43;
    uint64_t v71 = v32;
    uint64_t v72 = v31;
    uint64_t v69 = v34;
    uint64_t v70 = v33;
    uint64_t v68 = v35;
    do
    {
      if (v33)
      {
        for (uint64_t i = 0; i != v33; ++i)
        {
          if (v34)
          {
            uint64_t v45 = 0;
            uint64_t v82 = i * v84;
            uint64_t v73 = i;
            do
            {
              if (v35)
              {
                uint64_t v46 = 0;
                uint64_t v87 = v45 * v29;
                uint64_t v74 = v45;
                do
                {
                  if (v79)
                  {
                    uint64_t v93 = 0;
                    uint64_t v47 = 0;
                    uint64_t v48 = v46 * v95;
                    uint64_t v92 = v46 * v95;
                    uint64_t v75 = v46;
                    do
                    {
                      uint64_t v77 = v47;
                      unsigned __int8 v49 = *(unsigned char *)(a1
                      if (v84)
                      {
                        for (unint64_t j = 0; j != v84; ++j)
                        {
                          if (v29)
                          {
                            unint64_t v50 = 0;
                            do
                            {
                              if (v95)
                              {
                                unint64_t v51 = 0;
                                unint64_t v83 = v50;
                                do
                                {
                                  unint64_t v52 = j;
                                  unint64_t v88 = v51;
                                  if (j < v85)
                                  {
                                    do
                                    {
                                      unint64_t v86 = v52;
                                      if (v50 < v89)
                                      {
                                        uint64_t v53 = v52 + v82;
                                        do
                                        {
                                          unint64_t v90 = v50;
                                          if (v51 < v96)
                                          {
                                            uint64_t v54 = v50 + v87;
                                            do
                                            {
                                              if (v94)
                                              {
                                                uint64_t v55 = v93;
                                                uint64_t v56 = v91;
                                                do
                                                {
                                                  unsigned int v57 = *(unsigned __int8 *)(a1
                                                  BOOL v58 = v49 > v57;
                                                  if (a11) {
                                                    BOOL v58 = v49 < v57;
                                                  }
                                                  if (v58) {
                                                    unsigned __int8 v49 = v57;
                                                  }
                                                  ++v55;
                                                  --v56;
                                                }
                                                while (v56);
                                              }
                                              v51 += v95;
                                            }
                                            while (v51 < v96);
                                          }
                                          unint64_t v51 = v88;
                                          unint64_t v50 = v90 + v29;
                                        }
                                        while (v50 < v89);
                                      }
                                      unint64_t v50 = v83;
                                      unint64_t v52 = v86 + v84;
                                    }
                                    while (v86 + v84 < v85);
                                  }
                                  ++v51;
                                }
                                while (v51 != v80);
                              }
                              ++v50;
                            }
                            while (v50 != v76);
                          }
                        }
                      }
                      float v59 = v40 * (float)v49;
                      float v60 = 0.0;
                      if (v59 != 0.0)
                      {
                        __e[0] = 0;
                        long double v61 = frexp(v59, __e);
                        double v62 = ldexp(v61, 11);
                        float v60 = ldexp(round(v62), __e[0] - 11);
                      }
                      float v63 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(a10, v60);
                      uint64_t v32 = v71;
                      uint64_t v31 = v72;
                      uint64_t v34 = v69;
                      uint64_t v33 = v70;
                      uint64_t v35 = v68;
                      __int16 v65 = MIL::Fp16::FromFloat(v63, v64);
                      *(_WORD *)(*a9
                               + 2
                      uint64_t v47 = v77 + 1;
                      uint64_t v48 = v92;
                      v93 += v72;
                      uint64_t v46 = v75;
                    }
                    while (v77 + 1 != v79);
                  }
                  ++v46;
                  uint64_t v45 = v74;
                }
                while (v46 != v35);
              }
              ++v45;
              uint64_t i = v73;
            }
            while (v45 != v34);
          }
        }
      }
      ++v39;
    }
    while (v39 != v32);
  }
  if (v97)
  {
    unint64_t v98 = v97;
    operator delete(v97);
  }
  if (v100)
  {
    uint64_t v101 = v100;
    operator delete(v100);
  }
}

void sub_210B4AAC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v22 = *(void **)(v20 - 184);
  if (v22)
  {
    *(void *)(v20 - 176) = v22;
    operator delete(v22);
  }
  uint64_t v23 = *(void **)(v20 - 160);
  if (v23)
  {
    *(void *)(v20 - 152) = v23;
    operator delete(v23);
  }
  uint64_t v24 = *(void **)a20;
  if (*(void *)a20)
  {
    *(void *)(a20 + 8) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueMinMaxPool<unsigned char,unsigned char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int a7@<W6>, __int16 a8@<W7>, unint64_t *a9@<X8>, uint64_t a10, char a11)
{
  *(void *)uint64_t v106 = *MEMORY[0x263EF8340];
  __int16 v104 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2) {
    std::vector<unsigned char>::__append(a9, a2);
  }
  std::string::size_type v17 = *(const void **)a3;
  uint64_t v18 = *(void *)(a3 + 8);
  unint64_t v19 = (v18 - *(void *)a3) >> 3;
  if (v19 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    int v67 = "x_rank == o_shape.size()";
    int v68 = 217;
    goto LABEL_79;
  }
  uint64_t v20 = *a5;
  uint64_t v21 = a5[1];
  uint64_t v22 = (v21 - *a5) >> 2;
  if (v22 != v19 - 1)
  {
    int v67 = "kernel_sizes.size() == num_spatial_dims + 1";
    int v68 = 218;
    goto LABEL_79;
  }
  uint64_t v23 = *a6;
  uint64_t v24 = a6[1];
  if (v22 != (v24 - *a6) >> 2)
  {
    int v67 = "strides.size() == num_spatial_dims + 1";
    int v68 = 219;
    goto LABEL_79;
  }
  if (*(_DWORD *)(v21 - 4) != *(_DWORD *)(v24 - 4))
  {
    int v67 = "kernel_sizes.back() == strides.back()";
    int v68 = 220;
LABEL_79:
    __assert_rtn("ComputeValueMinMaxPool", "NePoolCpu.cpp", v68, v67);
  }
  unint64_t v25 = v19 - 2;
  uint64_t v26 = 4 * v19;
  if (v19 == 5)
  {
    uint64_t v27 = *(int *)(v20 + v26 - 20);
    uint64_t v85 = *(int *)(v23 + v26 - 20);
    uint64_t v28 = 2;
  }
  else
  {
    uint64_t v28 = v19 - 3;
    uint64_t v85 = 1;
    uint64_t v27 = 1;
    unint64_t v86 = 1;
    unint64_t v90 = 1;
    int v29 = 1;
    if (v25 <= 1) {
      goto LABEL_11;
    }
  }
  uint64_t v30 = v26 - 16;
  unint64_t v90 = *(int *)(v20 + v30);
  int v29 = *(_DWORD *)(v23 + v30);
  unint64_t v86 = v27;
LABEL_11:
  unsigned int v95 = *(_DWORD *)(v20 + 4 * v25);
  unint64_t v97 = *(int *)(v20 + 4 * v28);
  unint64_t v96 = *(int *)(v23 + 4 * v28);
  uint64_t v31 = *(int *)(v23 + 4 * v25);
  uint64_t v101 = 0;
  uint64_t v102 = 0;
  uint64_t v103 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v101, v17, v18, v19);
  unint64_t v98 = 0;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v98, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v19 == 3)
  {
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v101, (uint64_t)(v101 + 8), (char *)__e, v106, 2);
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v98, (uint64_t)(v98 + 8), (char *)__e, v106, 2);
  }
  else if (v19 == 4)
  {
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v101, v101 + 8, __e);
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v98, v98 + 8, __e);
  }
  uint64_t v32 = *(void *)v98;
  uint64_t v33 = *((void *)v98 + 1);
  uint64_t v34 = *((void *)v98 + 2);
  uint64_t v35 = *((void *)v98 + 3);
  uint64_t v80 = *((void *)v98 + 4);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v104);
  float v37 = v36;
  double v38 = exp2(-(double)a7);
  if (v32)
  {
    uint64_t v39 = 0;
    double v40 = v38 * v37;
    int v41 = v95;
    if (v95 <= 1) {
      int v41 = 1;
    }
    uint64_t v92 = v41;
    uint64_t v42 = v96;
    if (v96 <= 1) {
      uint64_t v42 = 1;
    }
    uint64_t v81 = v42;
    float v43 = v40;
    if ((unint64_t)v29 <= 1) {
      uint64_t v44 = 1;
    }
    else {
      uint64_t v44 = v29;
    }
    uint64_t v77 = v44;
    uint64_t v72 = v32;
    uint64_t v73 = v31;
    uint64_t v70 = v34;
    uint64_t v71 = v33;
    uint64_t v69 = v35;
    do
    {
      if (v33)
      {
        for (uint64_t i = 0; i != v33; ++i)
        {
          if (v34)
          {
            uint64_t v46 = 0;
            uint64_t v83 = i * v85;
            uint64_t v74 = i;
            do
            {
              if (v35)
              {
                uint64_t v47 = 0;
                uint64_t v88 = v46 * v29;
                uint64_t v75 = v46;
                do
                {
                  if (v80)
                  {
                    uint64_t v94 = 0;
                    uint64_t v48 = 0;
                    uint64_t v49 = v47 * v96;
                    uint64_t v93 = v47 * v96;
                    uint64_t v76 = v47;
                    do
                    {
                      uint64_t v78 = v48;
                      unsigned __int8 v50 = *(unsigned char *)(a1
                      if (v85)
                      {
                        for (unint64_t j = 0; j != v85; ++j)
                        {
                          if (v29)
                          {
                            unint64_t v51 = 0;
                            do
                            {
                              if (v96)
                              {
                                unint64_t v52 = 0;
                                unint64_t v84 = v51;
                                do
                                {
                                  unint64_t v53 = j;
                                  unint64_t v89 = v52;
                                  if (j < v86)
                                  {
                                    do
                                    {
                                      unint64_t v87 = v53;
                                      if (v51 < v90)
                                      {
                                        uint64_t v54 = v53 + v83;
                                        do
                                        {
                                          unint64_t v91 = v51;
                                          if (v52 < v97)
                                          {
                                            uint64_t v55 = v51 + v88;
                                            do
                                            {
                                              if (v95)
                                              {
                                                uint64_t v56 = v94;
                                                uint64_t v57 = v92;
                                                do
                                                {
                                                  unsigned int v58 = *(unsigned __int8 *)(a1
                                                  BOOL v59 = v50 > v58;
                                                  if (a11) {
                                                    BOOL v59 = v50 < v58;
                                                  }
                                                  if (v59) {
                                                    unsigned __int8 v50 = v58;
                                                  }
                                                  ++v56;
                                                  --v57;
                                                }
                                                while (v57);
                                              }
                                              v52 += v96;
                                            }
                                            while (v52 < v97);
                                          }
                                          unint64_t v52 = v89;
                                          unint64_t v51 = v91 + v29;
                                        }
                                        while (v51 < v90);
                                      }
                                      unint64_t v51 = v84;
                                      unint64_t v53 = v87 + v85;
                                    }
                                    while (v87 + v85 < v86);
                                  }
                                  ++v52;
                                }
                                while (v52 != v81);
                              }
                              ++v51;
                            }
                            while (v51 != v77);
                          }
                        }
                      }
                      float v60 = v43 * (float)v50;
                      float v61 = 0.0;
                      if (v60 != 0.0)
                      {
                        __e[0] = 0;
                        long double v62 = frexp(v60, __e);
                        double v63 = ldexp(v62, 11);
                        float v61 = ldexp(round(v63), __e[0] - 11);
                      }
                      std::function<float ()(float)>::operator()(a10, v61);
                      uint64_t v32 = v72;
                      uint64_t v31 = v73;
                      uint64_t v34 = v70;
                      uint64_t v33 = v71;
                      uint64_t v35 = v69;
                      if (v64 == INFINITY)
                      {
                        LOBYTE(v65) = -1;
                      }
                      else if (v64 == -INFINITY)
                      {
                        LOBYTE(v65) = 0;
                      }
                      else
                      {
                        int v66 = llroundf(v64);
                        if (v66 >= 255) {
                          int v66 = 255;
                        }
                        int v65 = v66 & ~(v66 >> 31);
                      }
                      *(unsigned char *)(*a9
                      uint64_t v48 = v78 + 1;
                      uint64_t v49 = v93;
                      v94 += v73;
                      uint64_t v47 = v76;
                    }
                    while (v78 + 1 != v80);
                  }
                  ++v47;
                  uint64_t v46 = v75;
                }
                while (v47 != v35);
              }
              ++v46;
              uint64_t i = v74;
            }
            while (v46 != v34);
          }
        }
      }
      ++v39;
    }
    while (v39 != v32);
  }
  if (v98)
  {
    uint64_t v99 = v98;
    operator delete(v98);
  }
  if (v101)
  {
    uint64_t v102 = v101;
    operator delete(v101);
  }
}

void sub_210B4B170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v22 = *(void **)(v20 - 184);
  if (v22)
  {
    *(void *)(v20 - 176) = v22;
    operator delete(v22);
  }
  uint64_t v23 = *(void **)(v20 - 160);
  if (v23)
  {
    *(void *)(v20 - 152) = v23;
    operator delete(v23);
  }
  uint64_t v24 = *(void **)a20;
  if (*(void *)a20)
  {
    *(void *)(a20 + 8) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueMinMaxPool<signed char,unsigned char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int a7@<W6>, __int16 a8@<W7>, unint64_t *a9@<X8>, uint64_t a10, char a11)
{
  *(void *)uint64_t v106 = *MEMORY[0x263EF8340];
  __int16 v104 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2) {
    std::vector<unsigned char>::__append(a9, a2);
  }
  std::string::size_type v17 = *(const void **)a3;
  uint64_t v18 = *(void *)(a3 + 8);
  unint64_t v19 = (v18 - *(void *)a3) >> 3;
  if (v19 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    int v67 = "x_rank == o_shape.size()";
    int v68 = 217;
    goto LABEL_81;
  }
  uint64_t v20 = *a5;
  uint64_t v21 = a5[1];
  uint64_t v22 = (v21 - *a5) >> 2;
  if (v22 != v19 - 1)
  {
    int v67 = "kernel_sizes.size() == num_spatial_dims + 1";
    int v68 = 218;
    goto LABEL_81;
  }
  uint64_t v23 = *a6;
  uint64_t v24 = a6[1];
  if (v22 != (v24 - *a6) >> 2)
  {
    int v67 = "strides.size() == num_spatial_dims + 1";
    int v68 = 219;
    goto LABEL_81;
  }
  if (*(_DWORD *)(v21 - 4) != *(_DWORD *)(v24 - 4))
  {
    int v67 = "kernel_sizes.back() == strides.back()";
    int v68 = 220;
LABEL_81:
    __assert_rtn("ComputeValueMinMaxPool", "NePoolCpu.cpp", v68, v67);
  }
  unint64_t v25 = v19 - 2;
  uint64_t v26 = 4 * v19;
  if (v19 == 5)
  {
    uint64_t v27 = *(int *)(v20 + v26 - 20);
    uint64_t v85 = *(int *)(v23 + v26 - 20);
    uint64_t v28 = 2;
  }
  else
  {
    uint64_t v28 = v19 - 3;
    uint64_t v85 = 1;
    uint64_t v27 = 1;
    unint64_t v86 = 1;
    unint64_t v90 = 1;
    int v29 = 1;
    if (v25 <= 1) {
      goto LABEL_11;
    }
  }
  uint64_t v30 = v26 - 16;
  unint64_t v90 = *(int *)(v20 + v30);
  int v29 = *(_DWORD *)(v23 + v30);
  unint64_t v86 = v27;
LABEL_11:
  unsigned int v95 = *(_DWORD *)(v20 + 4 * v25);
  unint64_t v97 = *(int *)(v20 + 4 * v28);
  unint64_t v96 = *(int *)(v23 + 4 * v28);
  uint64_t v31 = *(int *)(v23 + 4 * v25);
  uint64_t v101 = 0;
  uint64_t v102 = 0;
  uint64_t v103 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v101, v17, v18, v19);
  unint64_t v98 = 0;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v98, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v19 == 3)
  {
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v101, (uint64_t)(v101 + 8), (char *)__e, v106, 2);
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v98, (uint64_t)(v98 + 8), (char *)__e, v106, 2);
  }
  else if (v19 == 4)
  {
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v101, v101 + 8, __e);
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v98, v98 + 8, __e);
  }
  uint64_t v32 = *(void *)v98;
  uint64_t v33 = *((void *)v98 + 1);
  uint64_t v34 = *((void *)v98 + 2);
  uint64_t v35 = *((void *)v98 + 3);
  uint64_t v80 = *((void *)v98 + 4);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v104);
  float v37 = v36;
  double v38 = exp2(-(double)a7);
  if (v32)
  {
    uint64_t v39 = 0;
    double v40 = v38 * v37;
    int v41 = v95;
    if (v95 <= 1) {
      int v41 = 1;
    }
    uint64_t v92 = v41;
    uint64_t v42 = v96;
    if (v96 <= 1) {
      uint64_t v42 = 1;
    }
    uint64_t v81 = v42;
    if ((unint64_t)v29 <= 1) {
      uint64_t v43 = 1;
    }
    else {
      uint64_t v43 = v29;
    }
    uint64_t v77 = v43;
    float v44 = v40;
    uint64_t v72 = v32;
    uint64_t v73 = v31;
    uint64_t v70 = v34;
    uint64_t v71 = v33;
    uint64_t v69 = v35;
    do
    {
      if (v33)
      {
        for (uint64_t i = 0; i != v33; ++i)
        {
          if (v34)
          {
            uint64_t v46 = 0;
            uint64_t v83 = i * v85;
            uint64_t v74 = i;
            do
            {
              if (v35)
              {
                uint64_t v47 = 0;
                uint64_t v88 = v46 * v29;
                uint64_t v75 = v46;
                do
                {
                  if (v80)
                  {
                    uint64_t v94 = 0;
                    uint64_t v48 = 0;
                    uint64_t v49 = v47 * v96;
                    uint64_t v93 = v47 * v96;
                    uint64_t v76 = v47;
                    do
                    {
                      uint64_t v78 = v48;
                      unsigned __int8 v50 = *(unsigned char *)(a1
                      if (v85)
                      {
                        for (unint64_t j = 0; j != v85; ++j)
                        {
                          if (v29)
                          {
                            unint64_t v51 = 0;
                            do
                            {
                              if (v96)
                              {
                                unint64_t v52 = 0;
                                unint64_t v84 = v51;
                                do
                                {
                                  unint64_t v53 = j;
                                  unint64_t v89 = v52;
                                  if (j < v86)
                                  {
                                    do
                                    {
                                      unint64_t v87 = v53;
                                      if (v51 < v90)
                                      {
                                        uint64_t v54 = v53 + v83;
                                        do
                                        {
                                          unint64_t v91 = v51;
                                          if (v52 < v97)
                                          {
                                            uint64_t v55 = v51 + v88;
                                            do
                                            {
                                              if (v95)
                                              {
                                                uint64_t v56 = v94;
                                                uint64_t v57 = v92;
                                                do
                                                {
                                                  unsigned int v58 = *(unsigned __int8 *)(a1
                                                  BOOL v59 = v50 > v58;
                                                  if (a11) {
                                                    BOOL v59 = v50 < v58;
                                                  }
                                                  if (v59) {
                                                    unsigned __int8 v50 = v58;
                                                  }
                                                  ++v56;
                                                  --v57;
                                                }
                                                while (v57);
                                              }
                                              v52 += v96;
                                            }
                                            while (v52 < v97);
                                          }
                                          unint64_t v52 = v89;
                                          unint64_t v51 = v91 + v29;
                                        }
                                        while (v51 < v90);
                                      }
                                      unint64_t v51 = v84;
                                      unint64_t v53 = v87 + v85;
                                    }
                                    while (v87 + v85 < v86);
                                  }
                                  ++v52;
                                }
                                while (v52 != v81);
                              }
                              ++v51;
                            }
                            while (v51 != v77);
                          }
                        }
                      }
                      float v60 = v44 * (float)v50;
                      float v61 = 0.0;
                      if (v60 != 0.0)
                      {
                        __e[0] = 0;
                        long double v62 = frexp(v60, __e);
                        double v63 = ldexp(v62, 11);
                        float v61 = ldexp(round(v63), __e[0] - 11);
                      }
                      std::function<float ()(float)>::operator()(a10, v61);
                      uint64_t v32 = v72;
                      uint64_t v31 = v73;
                      uint64_t v34 = v70;
                      uint64_t v33 = v71;
                      uint64_t v35 = v69;
                      if (v64 == INFINITY)
                      {
                        char v65 = 127;
                      }
                      else if (v64 == -INFINITY)
                      {
                        char v65 = 0x80;
                      }
                      else
                      {
                        int v66 = llroundf(v64);
                        if (v66 >= 127) {
                          int v66 = 127;
                        }
                        if (v66 <= -128) {
                          char v65 = 0x80;
                        }
                        else {
                          char v65 = v66;
                        }
                      }
                      *(unsigned char *)(*a9
                      uint64_t v48 = v78 + 1;
                      uint64_t v49 = v93;
                      v94 += v73;
                      uint64_t v47 = v76;
                    }
                    while (v78 + 1 != v80);
                  }
                  ++v47;
                  uint64_t v46 = v75;
                }
                while (v47 != v35);
              }
              ++v46;
              uint64_t i = v74;
            }
            while (v46 != v34);
          }
        }
      }
      ++v39;
    }
    while (v39 != v32);
  }
  if (v98)
  {
    uint64_t v99 = v98;
    operator delete(v98);
  }
  if (v101)
  {
    uint64_t v102 = v101;
    operator delete(v101);
  }
}

void sub_210B4B828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v22 = *(void **)(v20 - 184);
  if (v22)
  {
    *(void *)(v20 - 176) = v22;
    operator delete(v22);
  }
  uint64_t v23 = *(void **)(v20 - 160);
  if (v23)
  {
    *(void *)(v20 - 152) = v23;
    operator delete(v23);
  }
  uint64_t v24 = *(void **)a20;
  if (*(void *)a20)
  {
    *(void *)(a20 + 8) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueMinMaxPool<MIL::Fp16,signed char>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int a7@<W6>, __int16 a8@<W7>, void *a9@<X8>, uint64_t a10, char a11)
{
  *(void *)uint64_t v105 = *MEMORY[0x263EF8340];
  __int16 v103 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a2);
  std::string::size_type v17 = *(const void **)a3;
  uint64_t v18 = *(void *)(a3 + 8);
  unint64_t v19 = (v18 - *(void *)a3) >> 3;
  if (v19 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    int v66 = "x_rank == o_shape.size()";
    int v67 = 217;
    goto LABEL_70;
  }
  uint64_t v20 = *a5;
  uint64_t v21 = a5[1];
  uint64_t v22 = (v21 - *a5) >> 2;
  if (v22 != v19 - 1)
  {
    int v66 = "kernel_sizes.size() == num_spatial_dims + 1";
    int v67 = 218;
    goto LABEL_70;
  }
  uint64_t v23 = *a6;
  uint64_t v24 = a6[1];
  if (v22 != (v24 - *a6) >> 2)
  {
    int v66 = "strides.size() == num_spatial_dims + 1";
    int v67 = 219;
    goto LABEL_70;
  }
  if (*(_DWORD *)(v21 - 4) != *(_DWORD *)(v24 - 4))
  {
    int v66 = "kernel_sizes.back() == strides.back()";
    int v67 = 220;
LABEL_70:
    __assert_rtn("ComputeValueMinMaxPool", "NePoolCpu.cpp", v67, v66);
  }
  unint64_t v25 = v19 - 2;
  uint64_t v26 = 4 * v19;
  if (v19 == 5)
  {
    uint64_t v27 = *(int *)(v20 + v26 - 20);
    uint64_t v84 = *(int *)(v23 + v26 - 20);
    uint64_t v28 = 2;
  }
  else
  {
    uint64_t v28 = v19 - 3;
    uint64_t v84 = 1;
    uint64_t v27 = 1;
    unint64_t v85 = 1;
    unint64_t v89 = 1;
    int v29 = 1;
    if (v25 <= 1) {
      goto LABEL_9;
    }
  }
  uint64_t v30 = v26 - 16;
  unint64_t v89 = *(int *)(v20 + v30);
  int v29 = *(_DWORD *)(v23 + v30);
  unint64_t v85 = v27;
LABEL_9:
  unsigned int v94 = *(_DWORD *)(v20 + 4 * v25);
  unint64_t v96 = *(int *)(v20 + 4 * v28);
  unint64_t v95 = *(int *)(v23 + 4 * v28);
  uint64_t v31 = *(int *)(v23 + 4 * v25);
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  uint64_t v102 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v100, v17, v18, v19);
  unint64_t v97 = 0;
  unint64_t v98 = 0;
  uint64_t v99 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v97, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v19 == 3)
  {
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v100, (uint64_t)(v100 + 8), (char *)__e, v105, 2);
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v97, (uint64_t)(v97 + 8), (char *)__e, v105, 2);
  }
  else if (v19 == 4)
  {
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v100, v100 + 8, __e);
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v97, v97 + 8, __e);
  }
  uint64_t v32 = *(void *)v97;
  uint64_t v33 = *((void *)v97 + 1);
  uint64_t v34 = *((void *)v97 + 2);
  uint64_t v35 = *((void *)v97 + 3);
  uint64_t v79 = *((void *)v97 + 4);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v103);
  float v37 = v36;
  double v38 = exp2(-(double)a7);
  if (v32)
  {
    uint64_t v39 = 0;
    float v40 = v38 * v37;
    int v41 = v94;
    if (v94 <= 1) {
      int v41 = 1;
    }
    uint64_t v91 = v41;
    uint64_t v42 = v95;
    if (v95 <= 1) {
      uint64_t v42 = 1;
    }
    uint64_t v80 = v42;
    if ((unint64_t)v29 <= 1) {
      uint64_t v43 = 1;
    }
    else {
      uint64_t v43 = v29;
    }
    uint64_t v76 = v43;
    uint64_t v71 = v32;
    uint64_t v72 = v31;
    uint64_t v69 = v34;
    uint64_t v70 = v33;
    uint64_t v68 = v35;
    do
    {
      if (v33)
      {
        for (uint64_t i = 0; i != v33; ++i)
        {
          if (v34)
          {
            uint64_t v45 = 0;
            uint64_t v82 = i * v84;
            uint64_t v73 = i;
            do
            {
              if (v35)
              {
                uint64_t v46 = 0;
                uint64_t v87 = v45 * v29;
                uint64_t v74 = v45;
                do
                {
                  if (v79)
                  {
                    uint64_t v93 = 0;
                    uint64_t v47 = 0;
                    uint64_t v48 = v46 * v95;
                    uint64_t v92 = v46 * v95;
                    uint64_t v75 = v46;
                    do
                    {
                      uint64_t v77 = v47;
                      char v49 = *(unsigned char *)(a1
                      if (v84)
                      {
                        for (unint64_t j = 0; j != v84; ++j)
                        {
                          if (v29)
                          {
                            unint64_t v50 = 0;
                            do
                            {
                              if (v95)
                              {
                                unint64_t v51 = 0;
                                unint64_t v83 = v50;
                                do
                                {
                                  unint64_t v52 = j;
                                  unint64_t v88 = v51;
                                  if (j < v85)
                                  {
                                    do
                                    {
                                      unint64_t v86 = v52;
                                      if (v50 < v89)
                                      {
                                        uint64_t v53 = v52 + v82;
                                        do
                                        {
                                          unint64_t v90 = v50;
                                          if (v51 < v96)
                                          {
                                            uint64_t v54 = v50 + v87;
                                            do
                                            {
                                              if (v94)
                                              {
                                                uint64_t v55 = v93;
                                                uint64_t v56 = v91;
                                                do
                                                {
                                                  int v57 = *(char *)(a1
                                                  BOOL v58 = v49 > v57;
                                                  if (a11) {
                                                    BOOL v58 = v49 < v57;
                                                  }
                                                  if (v58) {
                                                    char v49 = v57;
                                                  }
                                                  ++v55;
                                                  --v56;
                                                }
                                                while (v56);
                                              }
                                              v51 += v95;
                                            }
                                            while (v51 < v96);
                                          }
                                          unint64_t v51 = v88;
                                          unint64_t v50 = v90 + v29;
                                        }
                                        while (v50 < v89);
                                      }
                                      unint64_t v50 = v83;
                                      unint64_t v52 = v86 + v84;
                                    }
                                    while (v86 + v84 < v85);
                                  }
                                  ++v51;
                                }
                                while (v51 != v80);
                              }
                              ++v50;
                            }
                            while (v50 != v76);
                          }
                        }
                      }
                      float v59 = v40 * (float)v49;
                      float v60 = 0.0;
                      if (v59 != 0.0)
                      {
                        __e[0] = 0;
                        long double v61 = frexp(v59, __e);
                        double v62 = ldexp(v61, 11);
                        float v60 = ldexp(round(v62), __e[0] - 11);
                      }
                      double v63 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(a10, v60);
                      uint64_t v32 = v71;
                      uint64_t v31 = v72;
                      uint64_t v34 = v69;
                      uint64_t v33 = v70;
                      uint64_t v35 = v68;
                      __int16 v65 = MIL::Fp16::FromFloat(v63, v64);
                      *(_WORD *)(*a9
                               + 2
                      uint64_t v47 = v77 + 1;
                      uint64_t v48 = v92;
                      v93 += v72;
                      uint64_t v46 = v75;
                    }
                    while (v77 + 1 != v79);
                  }
                  ++v46;
                  uint64_t v45 = v74;
                }
                while (v46 != v35);
              }
              ++v45;
              uint64_t i = v73;
            }
            while (v45 != v34);
          }
        }
      }
      ++v39;
    }
    while (v39 != v32);
  }
  if (v97)
  {
    unint64_t v98 = v97;
    operator delete(v97);
  }
  if (v100)
  {
    uint64_t v101 = v100;
    operator delete(v100);
  }
}

void sub_210B4BE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v22 = *(void **)(v20 - 184);
  if (v22)
  {
    *(void *)(v20 - 176) = v22;
    operator delete(v22);
  }
  uint64_t v23 = *(void **)(v20 - 160);
  if (v23)
  {
    *(void *)(v20 - 152) = v23;
    operator delete(v23);
  }
  uint64_t v24 = *(void **)a20;
  if (*(void *)a20)
  {
    *(void *)(a20 + 8) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueMinMaxPool<unsigned char,signed char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int a7@<W6>, __int16 a8@<W7>, unint64_t *a9@<X8>, uint64_t a10, char a11)
{
  *(void *)uint64_t v106 = *MEMORY[0x263EF8340];
  __int16 v104 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2) {
    std::vector<unsigned char>::__append(a9, a2);
  }
  std::string::size_type v17 = *(const void **)a3;
  uint64_t v18 = *(void *)(a3 + 8);
  unint64_t v19 = (v18 - *(void *)a3) >> 3;
  if (v19 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    int v67 = "x_rank == o_shape.size()";
    int v68 = 217;
    goto LABEL_79;
  }
  uint64_t v20 = *a5;
  uint64_t v21 = a5[1];
  uint64_t v22 = (v21 - *a5) >> 2;
  if (v22 != v19 - 1)
  {
    int v67 = "kernel_sizes.size() == num_spatial_dims + 1";
    int v68 = 218;
    goto LABEL_79;
  }
  uint64_t v23 = *a6;
  uint64_t v24 = a6[1];
  if (v22 != (v24 - *a6) >> 2)
  {
    int v67 = "strides.size() == num_spatial_dims + 1";
    int v68 = 219;
    goto LABEL_79;
  }
  if (*(_DWORD *)(v21 - 4) != *(_DWORD *)(v24 - 4))
  {
    int v67 = "kernel_sizes.back() == strides.back()";
    int v68 = 220;
LABEL_79:
    __assert_rtn("ComputeValueMinMaxPool", "NePoolCpu.cpp", v68, v67);
  }
  unint64_t v25 = v19 - 2;
  uint64_t v26 = 4 * v19;
  if (v19 == 5)
  {
    uint64_t v27 = *(int *)(v20 + v26 - 20);
    uint64_t v85 = *(int *)(v23 + v26 - 20);
    uint64_t v28 = 2;
  }
  else
  {
    uint64_t v28 = v19 - 3;
    uint64_t v85 = 1;
    uint64_t v27 = 1;
    unint64_t v86 = 1;
    unint64_t v90 = 1;
    int v29 = 1;
    if (v25 <= 1) {
      goto LABEL_11;
    }
  }
  uint64_t v30 = v26 - 16;
  unint64_t v90 = *(int *)(v20 + v30);
  int v29 = *(_DWORD *)(v23 + v30);
  unint64_t v86 = v27;
LABEL_11:
  unsigned int v95 = *(_DWORD *)(v20 + 4 * v25);
  unint64_t v97 = *(int *)(v20 + 4 * v28);
  unint64_t v96 = *(int *)(v23 + 4 * v28);
  uint64_t v31 = *(int *)(v23 + 4 * v25);
  uint64_t v101 = 0;
  uint64_t v102 = 0;
  uint64_t v103 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v101, v17, v18, v19);
  unint64_t v98 = 0;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v98, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v19 == 3)
  {
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v101, (uint64_t)(v101 + 8), (char *)__e, v106, 2);
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v98, (uint64_t)(v98 + 8), (char *)__e, v106, 2);
  }
  else if (v19 == 4)
  {
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v101, v101 + 8, __e);
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v98, v98 + 8, __e);
  }
  uint64_t v32 = *(void *)v98;
  uint64_t v33 = *((void *)v98 + 1);
  uint64_t v34 = *((void *)v98 + 2);
  uint64_t v35 = *((void *)v98 + 3);
  uint64_t v80 = *((void *)v98 + 4);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v104);
  float v37 = v36;
  double v38 = exp2(-(double)a7);
  if (v32)
  {
    uint64_t v39 = 0;
    double v40 = v38 * v37;
    int v41 = v95;
    if (v95 <= 1) {
      int v41 = 1;
    }
    uint64_t v92 = v41;
    uint64_t v42 = v96;
    if (v96 <= 1) {
      uint64_t v42 = 1;
    }
    uint64_t v81 = v42;
    float v43 = v40;
    if ((unint64_t)v29 <= 1) {
      uint64_t v44 = 1;
    }
    else {
      uint64_t v44 = v29;
    }
    uint64_t v77 = v44;
    uint64_t v72 = v32;
    uint64_t v73 = v31;
    uint64_t v70 = v34;
    uint64_t v71 = v33;
    uint64_t v69 = v35;
    do
    {
      if (v33)
      {
        for (uint64_t i = 0; i != v33; ++i)
        {
          if (v34)
          {
            uint64_t v46 = 0;
            uint64_t v83 = i * v85;
            uint64_t v74 = i;
            do
            {
              if (v35)
              {
                uint64_t v47 = 0;
                uint64_t v88 = v46 * v29;
                uint64_t v75 = v46;
                do
                {
                  if (v80)
                  {
                    uint64_t v94 = 0;
                    uint64_t v48 = 0;
                    uint64_t v49 = v47 * v96;
                    uint64_t v93 = v47 * v96;
                    uint64_t v76 = v47;
                    do
                    {
                      uint64_t v78 = v48;
                      char v50 = *(unsigned char *)(a1
                      if (v85)
                      {
                        for (unint64_t j = 0; j != v85; ++j)
                        {
                          if (v29)
                          {
                            unint64_t v51 = 0;
                            do
                            {
                              if (v96)
                              {
                                unint64_t v52 = 0;
                                unint64_t v84 = v51;
                                do
                                {
                                  unint64_t v53 = j;
                                  unint64_t v89 = v52;
                                  if (j < v86)
                                  {
                                    do
                                    {
                                      unint64_t v87 = v53;
                                      if (v51 < v90)
                                      {
                                        uint64_t v54 = v53 + v83;
                                        do
                                        {
                                          unint64_t v91 = v51;
                                          if (v52 < v97)
                                          {
                                            uint64_t v55 = v51 + v88;
                                            do
                                            {
                                              if (v95)
                                              {
                                                uint64_t v56 = v94;
                                                uint64_t v57 = v92;
                                                do
                                                {
                                                  int v58 = *(char *)(a1
                                                  BOOL v59 = v50 > v58;
                                                  if (a11) {
                                                    BOOL v59 = v50 < v58;
                                                  }
                                                  if (v59) {
                                                    char v50 = v58;
                                                  }
                                                  ++v56;
                                                  --v57;
                                                }
                                                while (v57);
                                              }
                                              v52 += v96;
                                            }
                                            while (v52 < v97);
                                          }
                                          unint64_t v52 = v89;
                                          unint64_t v51 = v91 + v29;
                                        }
                                        while (v51 < v90);
                                      }
                                      unint64_t v51 = v84;
                                      unint64_t v53 = v87 + v85;
                                    }
                                    while (v87 + v85 < v86);
                                  }
                                  ++v52;
                                }
                                while (v52 != v81);
                              }
                              ++v51;
                            }
                            while (v51 != v77);
                          }
                        }
                      }
                      float v60 = v43 * (float)v50;
                      float v61 = 0.0;
                      if (v60 != 0.0)
                      {
                        __e[0] = 0;
                        long double v62 = frexp(v60, __e);
                        double v63 = ldexp(v62, 11);
                        float v61 = ldexp(round(v63), __e[0] - 11);
                      }
                      std::function<float ()(float)>::operator()(a10, v61);
                      uint64_t v32 = v72;
                      uint64_t v31 = v73;
                      uint64_t v34 = v70;
                      uint64_t v33 = v71;
                      uint64_t v35 = v69;
                      if (v64 == INFINITY)
                      {
                        LOBYTE(v65) = -1;
                      }
                      else if (v64 == -INFINITY)
                      {
                        LOBYTE(v65) = 0;
                      }
                      else
                      {
                        int v66 = llroundf(v64);
                        if (v66 >= 255) {
                          int v66 = 255;
                        }
                        int v65 = v66 & ~(v66 >> 31);
                      }
                      *(unsigned char *)(*a9
                      uint64_t v48 = v78 + 1;
                      uint64_t v49 = v93;
                      v94 += v73;
                      uint64_t v47 = v76;
                    }
                    while (v78 + 1 != v80);
                  }
                  ++v47;
                  uint64_t v46 = v75;
                }
                while (v47 != v35);
              }
              ++v46;
              uint64_t i = v74;
            }
            while (v46 != v34);
          }
        }
      }
      ++v39;
    }
    while (v39 != v32);
  }
  if (v98)
  {
    uint64_t v99 = v98;
    operator delete(v98);
  }
  if (v101)
  {
    uint64_t v102 = v101;
    operator delete(v101);
  }
}

void sub_210B4C544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v22 = *(void **)(v20 - 184);
  if (v22)
  {
    *(void *)(v20 - 176) = v22;
    operator delete(v22);
  }
  uint64_t v23 = *(void **)(v20 - 160);
  if (v23)
  {
    *(void *)(v20 - 152) = v23;
    operator delete(v23);
  }
  uint64_t v24 = *(void **)a20;
  if (*(void *)a20)
  {
    *(void *)(a20 + 8) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueMinMaxPool<signed char,signed char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int a7@<W6>, __int16 a8@<W7>, unint64_t *a9@<X8>, uint64_t a10, char a11)
{
  *(void *)uint64_t v106 = *MEMORY[0x263EF8340];
  __int16 v104 = a8;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  if (a2) {
    std::vector<unsigned char>::__append(a9, a2);
  }
  std::string::size_type v17 = *(const void **)a3;
  uint64_t v18 = *(void *)(a3 + 8);
  unint64_t v19 = (v18 - *(void *)a3) >> 3;
  if (v19 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3)
  {
    int v67 = "x_rank == o_shape.size()";
    int v68 = 217;
    goto LABEL_81;
  }
  uint64_t v20 = *a5;
  uint64_t v21 = a5[1];
  uint64_t v22 = (v21 - *a5) >> 2;
  if (v22 != v19 - 1)
  {
    int v67 = "kernel_sizes.size() == num_spatial_dims + 1";
    int v68 = 218;
    goto LABEL_81;
  }
  uint64_t v23 = *a6;
  uint64_t v24 = a6[1];
  if (v22 != (v24 - *a6) >> 2)
  {
    int v67 = "strides.size() == num_spatial_dims + 1";
    int v68 = 219;
    goto LABEL_81;
  }
  if (*(_DWORD *)(v21 - 4) != *(_DWORD *)(v24 - 4))
  {
    int v67 = "kernel_sizes.back() == strides.back()";
    int v68 = 220;
LABEL_81:
    __assert_rtn("ComputeValueMinMaxPool", "NePoolCpu.cpp", v68, v67);
  }
  unint64_t v25 = v19 - 2;
  uint64_t v26 = 4 * v19;
  if (v19 == 5)
  {
    uint64_t v27 = *(int *)(v20 + v26 - 20);
    uint64_t v85 = *(int *)(v23 + v26 - 20);
    uint64_t v28 = 2;
  }
  else
  {
    uint64_t v28 = v19 - 3;
    uint64_t v85 = 1;
    uint64_t v27 = 1;
    unint64_t v86 = 1;
    unint64_t v90 = 1;
    int v29 = 1;
    if (v25 <= 1) {
      goto LABEL_11;
    }
  }
  uint64_t v30 = v26 - 16;
  unint64_t v90 = *(int *)(v20 + v30);
  int v29 = *(_DWORD *)(v23 + v30);
  unint64_t v86 = v27;
LABEL_11:
  unsigned int v95 = *(_DWORD *)(v20 + 4 * v25);
  unint64_t v97 = *(int *)(v20 + 4 * v28);
  unint64_t v96 = *(int *)(v23 + 4 * v28);
  uint64_t v31 = *(int *)(v23 + 4 * v25);
  uint64_t v101 = 0;
  uint64_t v102 = 0;
  uint64_t v103 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v101, v17, v18, v19);
  unint64_t v98 = 0;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v98, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v19 == 3)
  {
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v101, (uint64_t)(v101 + 8), (char *)__e, v106, 2);
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v98, (uint64_t)(v98 + 8), (char *)__e, v106, 2);
  }
  else if (v19 == 4)
  {
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v101, v101 + 8, __e);
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v98, v98 + 8, __e);
  }
  uint64_t v32 = *(void *)v98;
  uint64_t v33 = *((void *)v98 + 1);
  uint64_t v34 = *((void *)v98 + 2);
  uint64_t v35 = *((void *)v98 + 3);
  uint64_t v80 = *((void *)v98 + 4);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v104);
  float v37 = v36;
  double v38 = exp2(-(double)a7);
  if (v32)
  {
    uint64_t v39 = 0;
    double v40 = v38 * v37;
    int v41 = v95;
    if (v95 <= 1) {
      int v41 = 1;
    }
    uint64_t v92 = v41;
    uint64_t v42 = v96;
    if (v96 <= 1) {
      uint64_t v42 = 1;
    }
    uint64_t v81 = v42;
    if ((unint64_t)v29 <= 1) {
      uint64_t v43 = 1;
    }
    else {
      uint64_t v43 = v29;
    }
    uint64_t v77 = v43;
    float v44 = v40;
    uint64_t v72 = v32;
    uint64_t v73 = v31;
    uint64_t v70 = v34;
    uint64_t v71 = v33;
    uint64_t v69 = v35;
    do
    {
      if (v33)
      {
        for (uint64_t i = 0; i != v33; ++i)
        {
          if (v34)
          {
            uint64_t v46 = 0;
            uint64_t v83 = i * v85;
            uint64_t v74 = i;
            do
            {
              if (v35)
              {
                uint64_t v47 = 0;
                uint64_t v88 = v46 * v29;
                uint64_t v75 = v46;
                do
                {
                  if (v80)
                  {
                    uint64_t v94 = 0;
                    uint64_t v48 = 0;
                    uint64_t v49 = v47 * v96;
                    uint64_t v93 = v47 * v96;
                    uint64_t v76 = v47;
                    do
                    {
                      uint64_t v78 = v48;
                      char v50 = *(unsigned char *)(a1
                      if (v85)
                      {
                        for (unint64_t j = 0; j != v85; ++j)
                        {
                          if (v29)
                          {
                            unint64_t v51 = 0;
                            do
                            {
                              if (v96)
                              {
                                unint64_t v52 = 0;
                                unint64_t v84 = v51;
                                do
                                {
                                  unint64_t v53 = j;
                                  unint64_t v89 = v52;
                                  if (j < v86)
                                  {
                                    do
                                    {
                                      unint64_t v87 = v53;
                                      if (v51 < v90)
                                      {
                                        uint64_t v54 = v53 + v83;
                                        do
                                        {
                                          unint64_t v91 = v51;
                                          if (v52 < v97)
                                          {
                                            uint64_t v55 = v51 + v88;
                                            do
                                            {
                                              if (v95)
                                              {
                                                uint64_t v56 = v94;
                                                uint64_t v57 = v92;
                                                do
                                                {
                                                  int v58 = *(char *)(a1
                                                  BOOL v59 = v50 > v58;
                                                  if (a11) {
                                                    BOOL v59 = v50 < v58;
                                                  }
                                                  if (v59) {
                                                    char v50 = v58;
                                                  }
                                                  ++v56;
                                                  --v57;
                                                }
                                                while (v57);
                                              }
                                              v52 += v96;
                                            }
                                            while (v52 < v97);
                                          }
                                          unint64_t v52 = v89;
                                          unint64_t v51 = v91 + v29;
                                        }
                                        while (v51 < v90);
                                      }
                                      unint64_t v51 = v84;
                                      unint64_t v53 = v87 + v85;
                                    }
                                    while (v87 + v85 < v86);
                                  }
                                  ++v52;
                                }
                                while (v52 != v81);
                              }
                              ++v51;
                            }
                            while (v51 != v77);
                          }
                        }
                      }
                      float v60 = v44 * (float)v50;
                      float v61 = 0.0;
                      if (v60 != 0.0)
                      {
                        __e[0] = 0;
                        long double v62 = frexp(v60, __e);
                        double v63 = ldexp(v62, 11);
                        float v61 = ldexp(round(v63), __e[0] - 11);
                      }
                      std::function<float ()(float)>::operator()(a10, v61);
                      uint64_t v32 = v72;
                      uint64_t v31 = v73;
                      uint64_t v34 = v70;
                      uint64_t v33 = v71;
                      uint64_t v35 = v69;
                      if (v64 == INFINITY)
                      {
                        char v65 = 127;
                      }
                      else if (v64 == -INFINITY)
                      {
                        char v65 = 0x80;
                      }
                      else
                      {
                        int v66 = llroundf(v64);
                        if (v66 >= 127) {
                          int v66 = 127;
                        }
                        if (v66 <= -128) {
                          char v65 = 0x80;
                        }
                        else {
                          char v65 = v66;
                        }
                      }
                      *(unsigned char *)(*a9
                      uint64_t v48 = v78 + 1;
                      uint64_t v49 = v93;
                      v94 += v73;
                      uint64_t v47 = v76;
                    }
                    while (v78 + 1 != v80);
                  }
                  ++v47;
                  uint64_t v46 = v75;
                }
                while (v47 != v35);
              }
              ++v46;
              uint64_t i = v74;
            }
            while (v46 != v34);
          }
        }
      }
      ++v39;
    }
    while (v39 != v32);
  }
  if (v98)
  {
    uint64_t v99 = v98;
    operator delete(v98);
  }
  if (v101)
  {
    uint64_t v102 = v101;
    operator delete(v101);
  }
}

void sub_210B4CBFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v22 = *(void **)(v20 - 184);
  if (v22)
  {
    *(void *)(v20 - 176) = v22;
    operator delete(v22);
  }
  uint64_t v23 = *(void **)(v20 - 160);
  if (v23)
  {
    *(void *)(v20 - 152) = v23;
    operator delete(v23);
  }
  uint64_t v24 = *(void **)a20;
  if (*(void *)a20)
  {
    *(void *)(a20 + 8) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<MIL::Fp16>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 2 * a2;
    }
  }
  else
  {
    std::vector<MIL::Fp16>::__append((char **)a1, a2 - v2);
  }
}

char *std::vector<unsigned long long>::insert(uint64_t a1, char *__src, void *a3)
{
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  uint64_t v7 = a1 + 16;
  unint64_t v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    uint64_t v14 = *(unsigned char **)a1;
    unint64_t v15 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v15 >> 61) {
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = (__src - v14) >> 3;
    uint64_t v17 = v8 - (void)v14;
    if (v17 >> 2 > v15) {
      unint64_t v15 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v15;
    }
    uint64_t v25 = v7;
    if (v18) {
      unint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v7, v18);
    }
    else {
      unint64_t v19 = 0;
    }
    std::string __p = v19;
    uint64_t v22 = &v19[8 * v16];
    uint64_t v23 = v22;
    uint64_t v24 = &v19[8 * v18];
    std::__split_buffer<unsigned long long>::push_back(&__p, a3);
    uint64_t v4 = std::vector<unsigned long long>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22) {
      v23 += (v22 - v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)int64x2_t __src = *a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    uint64_t v10 = __src + 8;
    long long v11 = v6 - 8;
    unint64_t v12 = v6;
    while (v11 < v6)
    {
      uint64_t v13 = *(void *)v11;
      v11 += 8;
      *(void *)unint64_t v12 = v13;
      v12 += 8;
    }
    *(void *)(a1 + 8) = v12;
    if (v6 != v10) {
      memmove(&v6[-8 * ((v6 - v10) >> 3)], __src, v6 - v10);
    }
    *(void *)uint64_t v4 = *a3;
  }
  return v4;
}

void sub_210B4CE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::ANEMachineIR::Interpreter::anonymous namespace'::GetIndex(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1[1] - *a1 != 40) {
  return a6
  }
       + (a5
        + (a4 + *(void *)(*a1 + 16) * a3 + *(void *)(*a1 + 8) * a2 * *(void *)(*a1 + 16))
        * *(void *)(*a1 + 24))
       * *(void *)(*a1 + 32);
}

{
  if (a1[1] - *a1 != 40) {
  return a6
  }
       + (a5
        + (a4 + *(void *)(*a1 + 16) * a3 + *(void *)(*a1 + 8) * a2 * *(void *)(*a1 + 16))
        * *(void *)(*a1 + 24))
       * *(void *)(*a1 + 32);
}

{
  if (a1[1] - *a1 != 40) {
  return a6
  }
       + (a5
        + (a4 + *(void *)(*a1 + 16) * a3 + *(void *)(*a1 + 8) * a2 * *(void *)(*a1 + 16))
        * *(void *)(*a1 + 24))
       * *(void *)(*a1 + 32);
}

void std::vector<MIL::Fp16>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    uint64_t v10 = a2 + (v9 >> 1);
    if (v10 < 0) {
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 1;
    unint64_t v12 = v5 - v8;
    if (v12 > v10) {
      uint64_t v10 = v12;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>(v4, v13);
      unint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    unint64_t v15 = &v14[2 * v11];
    uint64_t v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    uint64_t v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      __int16 v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void std::__split_buffer<unsigned long long>::push_back(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a1[4], v16);
      unint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      uint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      unint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] = v4 + 8;
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  uint64_t v5 = (char *)a1[1];
  uint64_t v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    uint64_t v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    uint64_t v12 = &v7[v11];
    uint64_t v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      int64_t v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      uint64_t v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t std::function<MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, __int16 a2)
{
  __int16 v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, __int16 *))(*(void *)v2 + 48))(v2, &v4);
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C3159E8;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C3159E8;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, unsigned __int16 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C315A78;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C315A78;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, __int16 *a2)
{
  __int16 v5 = *a2;
  Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  if (v3 < 0.0) {
    float v3 = 0.0;
  }
  return MIL::Fp16::FromFloat(Float, v3);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void *std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    float v3 = result;
    __int16 v4 = (void *)result[3];
    __int16 v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_210B4D668(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C315AF8;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C315AF8;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, unsigned __int16 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C315B78;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C315B78;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, __int16 *a2)
{
  __int16 v5 = *a2;
  Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  if (v3 < 0.0) {
    float v3 = 0.0;
  }
  return MIL::Fp16::FromFloat(Float, v3);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C315BF8;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C315BF8;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, unsigned __int16 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C315C78;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C315C78;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, __int16 *a2)
{
  __int16 v5 = *a2;
  Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  if (v3 < 0.0) {
    float v3 = 0.0;
  }
  return MIL::Fp16::FromFloat(Float, v3);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,MIL::Fp16>(MIL::Fp16 const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

uint64_t std::function<unsigned char ()(unsigned char)>::operator()(uint64_t a1, char a2)
{
  char v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)v2 + 48))(v2, &v4);
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::~__func()
{
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C315CF8;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C315CF8;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target_type()
{
}

void *std::__function::__value_func<unsigned char ()(unsigned char)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::~__func()
{
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C315D88;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C315D88;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::~__func()
{
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C315E08;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C315E08;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,unsigned char>(unsigned char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target_type()
{
}

uint64_t std::function<signed char ()(signed char)>::operator()(uint64_t a1, char a2)
{
  char v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)v2 + 48))(v2, &v4);
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C315E88;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C315E88;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target_type()
{
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C315F18;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C315F18;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2 & ~(*a2 >> 31);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<MIL::Fp16,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target_type()
{
}

void *std::__function::__value_func<signed char ()(signed char)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    float v3 = result;
    char v4 = (void *)result[3];
    __int16 v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_210B4E21C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<signed char ()(signed char)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C315F98;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C315F98;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C316018;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C316018;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2 & ~(*a2 >> 31);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<unsigned char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C316098;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C316098;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C316118;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C316118;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2 & ~(*a2 >> 31);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValueAvgPool<signed char,signed char>(signed char const*,unsigned long long,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,std::vector<int> const&,std::vector<int> const&,std::array<std::pair<int,int>,3ul> const&,signed char,signed char,signed char,MIL::Fp16,MIL::Fp16,BOOL,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target_type()
{
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::GetIndex()
{
  __assert_rtn("GetIndex", "NePoolCpu.cpp", 38, "shape5d.size() == 5");
}

{
  __assert_rtn("GetIndex", "PeReduceCpu.cpp", 53, "shape5d.size() == 5");
}

{
  __assert_rtn("GetIndex", "PePoolCpu.cpp", 39, "shape5d.size() == 5");
}

void MilTranslator::OpTranslator::TranslateConv(MilTranslator::OpTranslator *this@<X0>, const MIL::IROperation *a2@<X1>, uint64_t a3@<X8>)
{
  v33[0] = 0;
  v33[1] = 0;
  uint64_t v34 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "groups");
  uint64_t ParameterValue = MIL::IROperation::TryGetParameterValue();
  if (ParameterValue
    && (*(uint64_t (**)(uint64_t))(*(void *)ParameterValue + 40))(ParameterValue)
    && (uint64_t v7 = (int *)MEMORY[0x21667B880]()) != 0)
  {
    int v8 = *v7;
  }
  else
  {
    int v8 = 1;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "weight");
  MilTranslator::WeightTranslator::TargetProgramConstOpName((uint64_t)this + 144, (uint64_t)a2, (uint64_t)&__p, 0, v8, (uint64_t)v33, &v30);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v30)
  {
    *(_DWORD *)a3 = v30;
    *(_OWORD *)(a3 + 8) = v31;
    *(void *)(a3 + 24) = v32;
    long long v31 = 0uLL;
    uint64_t v32 = 0;
    goto LABEL_12;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  uint64_t v9 = (*(uint64_t (**)(const MIL::IROperation *, std::string *, void))(*(void *)a2 + 120))(a2, &__p, 0);
  uint64_t v10 = v9;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v9) {
      goto LABEL_19;
    }
LABEL_25:
    *(_DWORD *)a3 = 4;
    std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), "Conv does not handle immediate value inputs for x");
    goto LABEL_12;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v10) {
    goto LABEL_25;
  }
LABEL_19:
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  uint64_t ParameterType = MIL::IROperation::GetParameterType();
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)ParameterType + 24))(ParameterType);
  uint64_t v13 = (ANEMachineIR::Utils *)v12;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v13) {
      goto LABEL_21;
    }
LABEL_27:
    *(_DWORD *)a3 = 8;
    std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), "Conv input not a tensor");
    goto LABEL_12;
  }
  if (!v12) {
    goto LABEL_27;
  }
LABEL_21:
  MilTranslator::OpTranslator::GetChannelLastTensorNameMayInsertTranspose((uint64_t)this, v10, v13, &v29);
  (*(void (**)(std::string *__return_ptr, const MIL::IROperation *))(*(void *)a2 + 200))(&__p, a2);
  if (__p.__r_.__value_.__l.__size_ == __p.__r_.__value_.__r.__words[0]) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if (*(char *)(__p.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)__p.__r_.__value_.__l.__data_, *(void *)(__p.__r_.__value_.__r.__words[0] + 8));
  }
  else
  {
    long long v14 = *(_OWORD *)__p.__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = *(void *)(__p.__r_.__value_.__r.__words[0] + 16);
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v14;
  }
  v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  char v15 = (void *)(*(uint64_t (**)(ANEMachineIR::Utils *))(*(void *)v13 + 96))(v13);
  uint64_t v16 = (uint64_t)(v15[1] - *v15) >> 3;
  MilTranslator::OpTranslator::InferChannelLastTransposeInfo((uint64_t)this, (uint64_t)&v28, v16, (uint64_t)&v27);
  MilTranslator::OpTranslator::GetTransposeOpParamPerm(v16, (uint64_t)&v27, &v26);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__str, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  }
  else {
    std::string __str = v28;
  }
  if (MilTranslator::OpTranslator::IsTransposeRequired(&v26))
  {
    (*(void (**)(void *__return_ptr, const MIL::IROperation *))(*(void *)a2 + 200))(v24, a2);
    uint64_t v17 = (char *)v24[0];
    if (v24[1] == v24[0]) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    if (*(char *)(v24[0] + 23) >= 0) {
      size_t v18 = *(unsigned __int8 *)(v24[0] + 23);
    }
    else {
      size_t v18 = *(void *)(v24[0] + 8);
    }
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v18 + 13);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v18)
    {
      if (v17[23] >= 0) {
        uint64_t v20 = v17;
      }
      else {
        uint64_t v20 = *(char **)v17;
      }
      memmove(p_p, v20, v18);
    }
    strcpy((char *)p_p + v18, "_channel_last");
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    std::string __str = __p;
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v35 = (void **)v24;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v35);
    std::string::operator=(&v27, &__str);
    std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>::pair[abi:ne180100]<std::string&,std::pair<std::string,std::array<unsigned char,5ul>>&,0>(&__p, (long long *)&v28, (long long *)&v27);
    std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>>((uint64_t)this + 296, (unsigned __int8 *)&__p, (long long *)&__p);
    if (v23 < 0) {
      operator delete(v22);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v26.__begin_)
  {
    v26.__end_ = v26.__begin_;
    operator delete(v26.__begin_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
LABEL_12:
  if (SHIBYTE(v32) < 0) {
    operator delete((void *)v31);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(v33[0]);
  }
}

void sub_210B4EB24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (__p) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (*(char *)(v43 - 137) < 0) {
    operator delete(*(void **)(v43 - 160));
  }
  if (*(char *)(v43 - 105) < 0) {
    operator delete(*(void **)(v43 - 128));
  }
  if (*(char *)(v43 - 81) < 0) {
    operator delete(*(void **)(v43 - 104));
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::ANEMachineIR::GetScalarValueOrDefault<int>(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t ParameterValue = MIL::IROperation::TryGetParameterValue();
  if (!ParameterValue)
  {
    if (!a4) {
      return a3;
    }
    int v8 = 1;
LABEL_11:
    *a4 = v8;
    return a3;
  }
  if (!(*(uint64_t (**)(uint64_t))(*(void *)ParameterValue + 40))(ParameterValue)
    || (uint64_t v7 = (unsigned int *)MEMORY[0x21667B880]()) == 0)
  {
    if (!a4) {
      return a3;
    }
    int v8 = 2;
    goto LABEL_11;
  }
  if (a4) {
    *a4 = 0;
  }
  return *v7;
}

void MilTranslator::anonymous namespace'::TranslateConvOp(MIL::IROperation *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v196 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v187, "x");
  uint64_t ParameterType = MIL::IROperation::TryGetParameterType();
  if (SHIBYTE(v189) < 0) {
    operator delete((void *)v187);
  }
  std::string::basic_string[abi:ne180100]<0>(&v187, "weight");
  uint64_t v8 = MIL::IROperation::TryGetParameterType();
  if (SHIBYTE(v189) < 0) {
    operator delete((void *)v187);
  }
  uint64_t OutputType = MIL::IROperation::GetOutputType(a1);
  uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)ParameterType + 24))(ParameterType);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 24))(v8);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)OutputType + 24))(OutputType);
  uint64_t v13 = v12;
  if (v10) {
    BOOL v14 = v11 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14 || v12 == 0)
  {
    int v146 = 11;
    std::string::basic_string[abi:ne180100]<0>(&__p, "Conv input, weights, and output must be tensors.");
    int v16 = 0;
  }
  else
  {
    (*(void (**)(void *))(*(void *)v10 + 88))(v10);
    int v16 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 88))(v11);
    (*(void (**)(uint64_t))(*(void *)v13 + 88))(v13);
    uint64_t v17 = 0;
    unint64_t v187 = (unint64_t)v10;
    std::string::size_type v188 = v11;
    uint64_t v189 = v13;
    while (1)
    {
      int v18 = (*(uint64_t (**)(void))(**(void **)((char *)&v187 + v17) + 88))(*(unint64_t *)((char *)&v187 + v17));
      if (v18 != 4) {
        break;
      }
      v17 += 8;
      if (v17 == 24)
      {
        int v146 = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&unk_210C6BFE7);
        goto LABEL_24;
      }
    }
    if (v18 == 9 || v18 == 14)
    {
      uint64_t v20 = "ios opset does not yet have quantized conv.";
      int v21 = 4;
    }
    else
    {
      uint64_t v20 = "Conv input, weights, and output must be supported dtype.";
      int v21 = 11;
    }
    int v146 = v21;
    std::string::basic_string[abi:ne180100]<0>(&__p, v20);
  }
LABEL_24:
  if (v146)
  {
    *(_DWORD *)a5 = v146;
    *(_OWORD *)(a5 + 8) = __p;
    *(void *)(a5 + 24) = v148;
    long long __p = 0uLL;
    uint64_t v148 = 0;
    goto LABEL_26;
  }
  std::string::basic_string[abi:ne180100]<0>(&v187, "weight");
  uint64_t ParameterValue = MIL::IROperation::TryGetParameterValue();
  uint64_t v23 = ParameterValue;
  if ((SHIBYTE(v189) & 0x80000000) == 0)
  {
    if (ParameterValue) {
      goto LABEL_31;
    }
LABEL_52:
    *(_DWORD *)a5 = 4;
    std::string::basic_string[abi:ne180100]<0>((void *)(a5 + 8), "Dynamic weight translation not implemented for conv.");
    goto LABEL_26;
  }
  operator delete((void *)v187);
  if (!v23) {
    goto LABEL_52;
  }
LABEL_31:
  memset(&v193, 0, sizeof(v193));
  long long v192 = 0u;
  long long v191 = 0u;
  long long v190 = 0u;
  char v143 = 0;
  uint64_t v144 = 0;
  std::string v145 = 0;
  uint64_t v140 = 0;
  char v141 = 0;
  char v142 = 0;
  uint64_t v137 = 0;
  uint64_t v138 = 0;
  unint64_t v139 = 0;
  memset(&v136, 0, sizeof(v136));
  MEMORY[0x21667BA20](&v136, "zero");
  std::string::basic_string[abi:ne180100]<0>(&v130, "x");
  uint64_t v24 = MIL::IROperation::TryGetParameterType();
  uint64_t v25 = v24;
  if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v24) {
      goto LABEL_33;
    }
LABEL_54:
    int v133 = 11;
    std::string::basic_string[abi:ne180100]<0>(&v130, "Cannot get value type for ");
    uint64_t v32 = std::string::append(&v130, "x");
    goto LABEL_191;
  }
  operator delete(v130.__r_.__value_.__l.__data_);
  if (!v25) {
    goto LABEL_54;
  }
LABEL_33:
  uint64_t v124 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 24))(v25);
  if (v124)
  {
    std::string::basic_string[abi:ne180100]<0>(&v130, "strides");
    uint64_t v26 = MIL::IROperation::TryGetParameterType();
    if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v130.__r_.__value_.__l.__data_);
    }
    if (v26)
    {
      uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 24))(v26);
      if (v27)
      {
        std::string::basic_string[abi:ne180100]<0>(&v130, "dilations");
        uint64_t v28 = MIL::IROperation::TryGetParameterType();
        if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v130.__r_.__value_.__l.__data_);
        }
        if (v28)
        {
          uint64_t v123 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 24))(v28);
          if (v123)
          {
            std::string::basic_string[abi:ne180100]<0>(&v130, "weight");
            uint64_t v29 = MIL::IROperation::TryGetParameterType();
            if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v130.__r_.__value_.__l.__data_);
            }
            if (v29)
            {
              uint64_t v122 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 24))(v29);
              if (v122)
              {
                std::string::basic_string[abi:ne180100]<0>(&v130, "bias");
                uint64_t v30 = MIL::IROperation::TryGetParameterType();
                if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v130.__r_.__value_.__l.__data_);
                }
                if (v30)
                {
                  uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 24))(v30);
                  if (!v31)
                  {
                    int v133 = 11;
                    std::string::basic_string[abi:ne180100]<0>(&v130, "Cannot get type as tensor for ");
                    uint64_t v32 = std::string::append(&v130, "bias");
                    goto LABEL_191;
                  }
                }
                else
                {
                  uint64_t v31 = 0;
                }
                std::string::basic_string[abi:ne180100]<0>(&v130, "pad");
                uint64_t v33 = MIL::IROperation::TryGetParameterType();
                if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v130.__r_.__value_.__l.__data_);
                }
                if (v33)
                {
                  if ((*(uint64_t (**)(uint64_t))(*(void *)v33 + 24))(v33))
                  {
                    unint64_t v194 = 0;
                    if (!v31) {
                      goto LABEL_93;
                    }
                    unint64_t v194 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 16))(v31);
                    std::string::basic_string[abi:ne180100]<0>(&v130, "bias");
                    uint64_t v34 = (MIL::IRValue *)MIL::IROperation::TryGetParameterValue();
                    if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v130.__r_.__value_.__l.__data_);
                    }
                    if (v34)
                    {
                      MIL::IRValue::AsTensor(v34);
                      std::vector<MIL::Fp16>::reserve(&v137, v194);
                      int v35 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 88))(v31);
                      if (v35 == 5)
                      {
                        int v133 = 11;
                        __int16 v112 = "Fp32 precision (for bias) not supported by ANE.";
                      }
                      else
                      {
                        if (v35 == 4)
                        {
                          v130.__r_.__value_.__r.__words[0] = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
                          v130.__r_.__value_.__l.__size_ = v36;
                          if (v194)
                          {
                            for (unint64_t i = 0; i < v194; ++i)
                            {
                              double v38 = (_WORD *)MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::At(&v130, i);
                              uint64_t v39 = v38;
                              double v40 = v138;
                              if ((unint64_t)v138 >= v139)
                              {
                                uint64_t v42 = v137;
                                uint64_t v43 = (char *)v138 - (unsigned char *)v137;
                                if ((char *)v138 - (unsigned char *)v137 <= -3) {
                                  std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
                                }
                                uint64_t v121 = v43 >> 1;
                                if (v139 - (unint64_t)v137 <= (v43 >> 1) + 1) {
                                  uint64_t v44 = (v43 >> 1) + 1;
                                }
                                else {
                                  uint64_t v44 = v139 - (void)v137;
                                }
                                if (v139 - (unint64_t)v137 >= 0x7FFFFFFFFFFFFFFELL) {
                                  uint64_t v45 = 0x7FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  uint64_t v45 = v44;
                                }
                                if (v45)
                                {
                                  uint64_t v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v139, v45);
                                  uint64_t v42 = v137;
                                  double v40 = v138;
                                }
                                else
                                {
                                  uint64_t v46 = 0;
                                }
                                uint64_t v47 = &v46[2 * v121];
                                *(_WORD *)uint64_t v47 = *v39;
                                int v41 = v47 + 2;
                                while (v40 != v42)
                                {
                                  __int16 v48 = *--v40;
                                  *((_WORD *)v47 - 1) = v48;
                                  v47 -= 2;
                                }
                                uint64_t v137 = v47;
                                uint64_t v138 = v41;
                                unint64_t v139 = (unint64_t)&v46[2 * v45];
                                if (v42) {
                                  operator delete(v42);
                                }
                              }
                              else
                              {
                                *uint64_t v138 = *v38;
                                int v41 = v40 + 1;
                              }
                              uint64_t v138 = v41;
                            }
                          }
LABEL_93:
                          std::vector<int>::size_type v49 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 16))(v27);
                          std::vector<int>::reserve((std::vector<int> *)&v190, v49);
                          std::string::basic_string[abi:ne180100]<0>(&v130, "strides");
                          char v50 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
                          MIL::IRValue::AsTensor(v50);
                          uint64_t Data = (void *)MIL::IRTensorValue::GetDataView<int>();
                          unint64_t v172 = v51;
                          if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
                          {
                            operator delete(v130.__r_.__value_.__l.__data_);
                            unint64_t v51 = v172;
                          }
                          if (v51)
                          {
                            unint64_t v52 = 0;
                            do
                            {
                              unint64_t v53 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](&Data, v52);
                              uint64_t v54 = v53;
                              uint64_t v55 = (char *)*((void *)&v190 + 1);
                              if (*((void *)&v190 + 1) >= (unint64_t)v191)
                              {
                                uint64_t v57 = (char *)v190;
                                uint64_t v58 = (uint64_t)(*((void *)&v190 + 1) - v190) >> 2;
                                unint64_t v59 = v58 + 1;
                                if ((unint64_t)(v58 + 1) >> 62) {
LABEL_328:
                                }
                                  std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
                                uint64_t v60 = v191 - v190;
                                if ((uint64_t)(v191 - v190) >> 1 > v59) {
                                  unint64_t v59 = v60 >> 1;
                                }
                                if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL) {
                                  unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v61 = v59;
                                }
                                if (v61)
                                {
                                  long double v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v191, v61);
                                  uint64_t v55 = (char *)*((void *)&v190 + 1);
                                  uint64_t v57 = (char *)v190;
                                }
                                else
                                {
                                  long double v62 = 0;
                                }
                                double v63 = &v62[4 * v58];
                                *(_DWORD *)double v63 = *v54;
                                uint64_t v56 = v63 + 4;
                                while (v55 != v57)
                                {
                                  int v64 = *((_DWORD *)v55 - 1);
                                  v55 -= 4;
                                  *((_DWORD *)v63 - 1) = v64;
                                  v63 -= 4;
                                }
                                *(void *)&long long v190 = v63;
                                *((void *)&v190 + 1) = v56;
                                *(void *)&long long v191 = &v62[4 * v61];
                                if (v57) {
                                  operator delete(v57);
                                }
                              }
                              else
                              {
                                **((_DWORD **)&v190 + 1) = *v53;
                                uint64_t v56 = v55 + 4;
                              }
                              *((void *)&v190 + 1) = v56;
                              ++v52;
                            }
                            while (v172 > v52);
                          }
                          std::vector<int>::size_type v65 = (*(uint64_t (**)(uint64_t))(*(void *)v123 + 16))(v123);
                          std::vector<int>::reserve((std::vector<int> *)((char *)&v191 + 8), v65);
                          std::string::basic_string[abi:ne180100]<0>(&v130, "dilations");
                          int v66 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
                          MIL::IRValue::AsTensor(v66);
                          std::string v167 = (void *)MIL::IRTensorValue::GetDataView<int>();
                          unint64_t v168 = v67;
                          if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
                          {
                            operator delete(v130.__r_.__value_.__l.__data_);
                            unint64_t v67 = v168;
                          }
                          if (v67)
                          {
                            unint64_t v68 = 0;
                            do
                            {
                              uint64_t v69 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](&v167, v68);
                              uint64_t v70 = v69;
                              uint64_t v71 = (char *)v192;
                              if ((unint64_t)v192 >= *((void *)&v192 + 1))
                              {
                                uint64_t v73 = (char *)*((void *)&v191 + 1);
                                uint64_t v74 = (uint64_t)(v192 - *((void *)&v191 + 1)) >> 2;
                                unint64_t v75 = v74 + 1;
                                if ((unint64_t)(v74 + 1) >> 62) {
                                  goto LABEL_328;
                                }
                                uint64_t v76 = *((void *)&v192 + 1) - *((void *)&v191 + 1);
                                if ((uint64_t)(*((void *)&v192 + 1) - *((void *)&v191 + 1)) >> 1 > v75) {
                                  unint64_t v75 = v76 >> 1;
                                }
                                if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL) {
                                  unint64_t v77 = 0x3FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v77 = v75;
                                }
                                if (v77)
                                {
                                  uint64_t v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v192 + 8, v77);
                                  uint64_t v73 = (char *)*((void *)&v191 + 1);
                                  uint64_t v71 = (char *)v192;
                                }
                                else
                                {
                                  uint64_t v78 = 0;
                                }
                                uint64_t v79 = &v78[4 * v74];
                                *(_DWORD *)uint64_t v79 = *v70;
                                uint64_t v72 = v79 + 4;
                                while (v71 != v73)
                                {
                                  int v80 = *((_DWORD *)v71 - 1);
                                  v71 -= 4;
                                  *((_DWORD *)v79 - 1) = v80;
                                  v79 -= 4;
                                }
                                *((void *)&v191 + 1) = v79;
                                *(void *)&long long v192 = v72;
                                *((void *)&v192 + 1) = &v78[4 * v77];
                                if (v73) {
                                  operator delete(v73);
                                }
                              }
                              else
                              {
                                *(_DWORD *)long long v192 = *v69;
                                uint64_t v72 = v71 + 4;
                              }
                              *(void *)&long long v192 = v72;
                              ++v68;
                            }
                            while (v168 > v68);
                          }
                          memset(&v130, 0, sizeof(v130));
                          if ((ANEMachineIR::Utils::TryGetStaticTensorShape(v122, (uint64_t)&v130) & 1) == 0)
                          {
                            int v133 = 11;
                            std::string::basic_string[abi:ne180100]<0>(v134, "weights must have static shape.");
LABEL_325:
                            uint64_t v108 = (void *)v130.__r_.__value_.__r.__words[0];
                            if (!v130.__r_.__value_.__r.__words[0]) {
                              goto LABEL_194;
                            }
                            v130.__r_.__value_.__l.__size_ = v130.__r_.__value_.__r.__words[0];
                            goto LABEL_193;
                          }
                          __int16 v184 = 0;
                          char v185 = 0;
                          uint64_t v186 = 0;
                          if ((ANEMachineIR::Utils::TryGetStaticTensorShape(v124, (uint64_t)&v184) & 1) == 0)
                          {
                            int v133 = 11;
                            std::string::basic_string[abi:ne180100]<0>(v134, "x must have static shape.");
LABEL_323:
                            if (v184)
                            {
                              char v185 = v184;
                              operator delete(v184);
                            }
                            goto LABEL_325;
                          }
                          std::vector<unsigned long long>::reserve(&v140, ((uint64_t)(v130.__r_.__value_.__l.__size_ - v130.__r_.__value_.__r.__words[0]) >> 3) + 1);
                          std::string::basic_string[abi:ne180100]<0>(&v179, "groups");
                          int ScalarValueOr = MIL::ANEMachineIR::GetScalarValueOrDefault<int>((uint64_t)a1, (uint64_t)&v179, 1, 0);
                          std::string::size_type v82 = ScalarValueOr;
                          std::string::size_type v188 = ScalarValueOr;
                          if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0)
                          {
                            operator delete(v179.__r_.__value_.__l.__data_);
                            std::string::size_type v82 = v188;
                          }
                          unint64_t v187 = ((uint64_t)(v130.__r_.__value_.__l.__size_ - v130.__r_.__value_.__r.__words[0]) >> 3)
                               - 2;
                          LOBYTE(v189) = 0;
                          v179.__r_.__value_.__r.__words[0] = v82;
                          std::vector<unsigned long long>::push_back[abi:ne180100]((uint64_t)&v140, &v179);
                          if (v187)
                          {
                            for (unint64_t j = 0; j < v187; ++j)
                            {
                              unint64_t v84 = j + 2;
                              std::string::size_type v85 = v130.__r_.__value_.__r.__words[0];
                              if (j + 2 >= (uint64_t)(v130.__r_.__value_.__l.__size_ - v130.__r_.__value_.__r.__words[0]) >> 3) {
                                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                              }
                              unint64_t v86 = v141;
                              if (v141 >= v142)
                              {
                                uint64_t v88 = (char *)v140;
                                uint64_t v125 = (v141 - (unsigned char *)v140) >> 3;
                                unint64_t v89 = v125 + 1;
                                if ((unint64_t)(v125 + 1) >> 61) {
                                  std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
                                }
                                uint64_t v90 = v142 - (unsigned char *)v140;
                                if ((v142 - (unsigned char *)v140) >> 2 > v89) {
                                  unint64_t v89 = v90 >> 2;
                                }
                                if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8) {
                                  unint64_t v91 = 0x1FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v91 = v89;
                                }
                                if (v91)
                                {
                                  uint64_t v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v142, v91);
                                  uint64_t v88 = (char *)v140;
                                  unint64_t v86 = v141;
                                }
                                else
                                {
                                  uint64_t v92 = 0;
                                }
                                uint64_t v93 = &v92[8 * v125];
                                *(void *)uint64_t v93 = *(void *)(v85 + 8 * v84);
                                unint64_t v87 = v93 + 8;
                                while (v86 != v88)
                                {
                                  uint64_t v94 = *((void *)v86 - 1);
                                  v86 -= 8;
                                  *((void *)v93 - 1) = v94;
                                  v93 -= 8;
                                }
                                uint64_t v140 = v93;
                                char v141 = v87;
                                char v142 = &v92[8 * v91];
                                if (v88) {
                                  operator delete(v88);
                                }
                              }
                              else
                              {
                                *(void *)char v141 = *(void *)(v130.__r_.__value_.__r.__words[0] + 8 * v84);
                                unint64_t v87 = v86 + 8;
                              }
                              char v141 = v87;
                            }
                          }
                          if (v130.__r_.__value_.__l.__size_ - v130.__r_.__value_.__r.__words[0] <= 8) {
                            goto LABEL_338;
                          }
                          std::vector<unsigned long long>::push_back[abi:ne180100]((uint64_t)&v140, (void *)(v130.__r_.__value_.__r.__words[0] + 8));
                          if (v130.__r_.__value_.__l.__size_ == v130.__r_.__value_.__r.__words[0]) {
                            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                          }
                          v179.__r_.__value_.__r.__words[0] = *(void *)v130.__r_.__value_.__l.__data_ / v188;
                          std::vector<unsigned long long>::push_back[abi:ne180100]((uint64_t)&v140, &v179);
                          uint64_t v195 = 0;
                          std::vector<unsigned long long>::reserve(&v143, (v185 - (unsigned char *)v184) >> 3);
                          if (v185 == (unsigned char *)v184) {
                            goto LABEL_338;
                          }
                          std::vector<unsigned long long>::push_back[abi:ne180100]((uint64_t)&v143, v184);
                          if (v187)
                          {
                            for (unint64_t k = 0; k < v187; ++k)
                            {
                              unint64_t v96 = k + 2;
                              unint64_t v97 = v184;
                              if (k + 2 >= (v185 - (unsigned char *)v184) >> 3) {
                                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                              }
                              unint64_t v98 = v144;
                              if (v144 >= v145)
                              {
                                uint64_t v100 = (char *)v143;
                                uint64_t v126 = (v144 - (unsigned char *)v143) >> 3;
                                unint64_t v101 = v126 + 1;
                                if ((unint64_t)(v126 + 1) >> 61) {
                                  std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
                                }
                                uint64_t v102 = v145 - (unsigned char *)v143;
                                if ((v145 - (unsigned char *)v143) >> 2 > v101) {
                                  unint64_t v101 = v102 >> 2;
                                }
                                if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8) {
                                  unint64_t v103 = 0x1FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  unint64_t v103 = v101;
                                }
                                if (v103)
                                {
                                  __int16 v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v145, v103);
                                  uint64_t v100 = (char *)v143;
                                  unint64_t v98 = v144;
                                }
                                else
                                {
                                  __int16 v104 = 0;
                                }
                                uint64_t v105 = &v104[8 * v126];
                                *(void *)uint64_t v105 = v97[v96];
                                uint64_t v99 = v105 + 8;
                                while (v98 != v100)
                                {
                                  uint64_t v106 = *((void *)v98 - 1);
                                  v98 -= 8;
                                  *((void *)v105 - 1) = v106;
                                  v105 -= 8;
                                }
                                char v143 = v105;
                                uint64_t v144 = v99;
                                std::string v145 = &v104[8 * v103];
                                if (v100) {
                                  operator delete(v100);
                                }
                              }
                              else
                              {
                                *(void *)uint64_t v144 = v184[v96];
                                uint64_t v99 = v98 + 8;
                              }
                              uint64_t v144 = v99;
                            }
                          }
                          if ((unint64_t)(v185 - (unsigned char *)v184) <= 8) {
LABEL_338:
                          }
                            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                          std::vector<unsigned long long>::push_back[abi:ne180100]((uint64_t)&v143, v184 + 1);
                          *(_WORD *)((char *)&v189 + 1) = 0;
                          std::string::basic_string[abi:ne180100]<0>(__u, "pad_type");
                          std::string::basic_string[abi:ne180100]<0>(&v175, "custom");
                          MIL::ANEMachineIR::GetScalarValueOrDefault<std::string>((uint64_t)&v175, 0, &v179);
                          if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(v175.__r_.__value_.__l.__data_);
                          }
                          if (v177 < 0) {
                            operator delete(*(void **)__u);
                          }
                          std::vector<int>::reserve(&v193, 2 * v187);
                          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v179, "valid"))
                          {
                            __u[0] = 0;
                            std::vector<int>::assign(&v193, 2 * v187, __u);
                          }
                          else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v179, "same"))
                          {
                            if ((v187 & 0x7FFFFFFFFFFFFFFFLL) != 0)
                            {
                              unint64_t v113 = 0;
                              do
                              {
                                unsigned int v114 = v113 >> 1;
                                unint64_t v115 = (v113 >> 1) + 1;
                                if (v115 >= (v141 - (unsigned char *)v140) >> 3) {
                                  std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                                }
                                uint64_t v116 = *((void *)v140 + v115);
                                if (v113)
                                {
                                  __u[0] = 0;
                                  if (v114 >= (unint64_t)((uint64_t)(v192 - *((void *)&v191 + 1)) >> 2)) {
                                    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                                  }
                                }
                                else
                                {
                                  __u[0] = 0;
                                  if (v114 >= (unint64_t)((uint64_t)(v192 - *((void *)&v191 + 1)) >> 2)) {
                                    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
                                  }
                                }
                                __u[0] = (unint64_t)((v116 - 1) * *(int *)(*((void *)&v191 + 1) + 4 * v114)
                                                          + 1) >> 1;
                                std::vector<int>::push_back[abi:ne180100]((uint64_t)&v193, __u);
                                ++v113;
                              }
                              while (v113 < 2 * v187);
                            }
                          }
                          else
                          {
                            if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v179, "custom"))
                            {
                              int v133 = 11;
                              std::operator+<char>();
LABEL_321:
                              if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(v179.__r_.__value_.__l.__data_);
                              }
                              goto LABEL_323;
                            }
                            std::string::basic_string[abi:ne180100]<0>(__u, "pad");
                            uint64_t v117 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
                            MIL::IRValue::AsTensor(v117);
                            int v164 = (void *)MIL::IRTensorValue::GetDataView<int>();
                            char v165 = v118;
                            if (v177 < 0) {
                              operator delete(*(void **)__u);
                            }
                            if ((v187 & 0x7FFFFFFFFFFFFFFFLL) != 0)
                            {
                              unint64_t v119 = 0;
                              do
                              {
                                uint64_t v120 = (_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::At(&v164, v119);
                                std::vector<int>::push_back[abi:ne180100]((uint64_t)&v193, v120);
                                ++v119;
                              }
                              while (v119 < 2 * v187);
                            }
                          }
                          int v133 = 0;
                          std::string::basic_string[abi:ne180100]<0>(v134, (char *)&unk_210C6BFE7);
                          goto LABEL_321;
                        }
                        int v133 = 11;
                        __int16 v112 = "Unhandled dtype for conv bias.";
                      }
                    }
                    else
                    {
                      int v133 = 4;
                      __int16 v112 = "Non constant bias vectors not yet implemented.";
                    }
                    std::string::basic_string[abi:ne180100]<0>(v134, v112);
                    goto LABEL_194;
                  }
                  int v133 = 11;
                  std::string::basic_string[abi:ne180100]<0>(&v130, "Cannot get type as tensor for ");
                  uint64_t v32 = std::string::append(&v130, "pad");
                }
                else
                {
                  int v133 = 11;
                  std::string::basic_string[abi:ne180100]<0>(&v130, "Cannot get value type for ");
                  uint64_t v32 = std::string::append(&v130, "pad");
                }
              }
              else
              {
                int v133 = 11;
                std::string::basic_string[abi:ne180100]<0>(&v130, "Cannot get type as tensor for ");
                uint64_t v32 = std::string::append(&v130, "kernel");
              }
            }
            else
            {
              int v133 = 11;
              std::string::basic_string[abi:ne180100]<0>(&v130, "Cannot get value type for ");
              uint64_t v32 = std::string::append(&v130, "kernel");
            }
          }
          else
          {
            int v133 = 11;
            std::string::basic_string[abi:ne180100]<0>(&v130, "Cannot get type as tensor for ");
            uint64_t v32 = std::string::append(&v130, "dilations");
          }
        }
        else
        {
          int v133 = 11;
          std::string::basic_string[abi:ne180100]<0>(&v130, "Cannot get value type for ");
          uint64_t v32 = std::string::append(&v130, "dilations");
        }
      }
      else
      {
        int v133 = 11;
        std::string::basic_string[abi:ne180100]<0>(&v130, "Cannot get type as tensor for ");
        uint64_t v32 = std::string::append(&v130, "strides");
      }
    }
    else
    {
      int v133 = 11;
      std::string::basic_string[abi:ne180100]<0>(&v130, "Cannot get value type for ");
      uint64_t v32 = std::string::append(&v130, "strides");
    }
  }
  else
  {
    int v133 = 11;
    std::string::basic_string[abi:ne180100]<0>(&v130, "Cannot get type as tensor for ");
    uint64_t v32 = std::string::append(&v130, "x");
  }
LABEL_191:
  long long v107 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  std::string::size_type v135 = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)__int16 v134 = v107;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v108 = (void *)v130.__r_.__value_.__r.__words[0];
LABEL_193:
    operator delete(v108);
  }
LABEL_194:
  if (v133)
  {
    *(_DWORD *)a5 = v133;
    *(_OWORD *)(a5 + 8) = *(_OWORD *)v134;
    *(void *)(a5 + 24) = v135;
  }
  else
  {
    ANEMachineIR::Validators::InferOutputShape((uint64_t)&v143, (uint64_t *)&v140, (uint64_t)&v187, &v131);
    if (!v194) {
      goto LABEL_200;
    }
    std::string::basic_string[abi:ne180100]<0>(&v130, "bias");
    uint64_t v109 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
    uint64_t v110 = MIL::IRValueType::AsTensorType(v109);
    if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v130.__r_.__value_.__l.__data_);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v110 + 88))(v110) != 4)
    {
      *(_DWORD *)a5 = 4;
      std::string::basic_string[abi:ne180100]<0>((void *)(a5 + 8), "Biases not matching the input type (fp16) are not implemented or expected from the iOS opset.");
    }
    else
    {
LABEL_200:
      uint64_t LocationPtr = MIL::IRObject::GetLocationPtr(a1);
      ANEMachineIR::Validators::ValidateConvParameters(LocationPtr, (uint64_t *)&v143, (uint64_t *)&v140, v16, (uint64_t *)&v131, (uint64_t)&v187, (uint64_t)&v130);
      if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v130))
      {
        MIL::IRObject::GetLocationPtr(a1);
        __int16 v184 = 0;
        char v185 = 0;
        uint64_t v186 = 0;
        std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v184, v131, (uint64_t)v132, (v132 - (unsigned char *)v131) >> 3);
        MIL::IRTensorValueType::Make();
        if (v184)
        {
          char v185 = v184;
          operator delete(v184);
        }
        std::string::basic_string[abi:ne180100]<0>(&v184, "ne_conv");
        char v182 = 0;
        uint64_t v181 = 0;
        MIL::Builder::BlockBuilder::AddOperation();
        if (v182) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v182);
        }
        if (SHIBYTE(v186) < 0) {
          operator delete(v184);
        }
        std::string::basic_string[abi:ne180100]<0>(&v184, "x");
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v179, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string v179 = *(std::string *)a2;
        }
        MIL::Builder::OperationBuilder::AddInput();
        if (v180) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v180);
        }
        if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v179.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v186) < 0) {
          operator delete(v184);
        }
        std::string::basic_string[abi:ne180100]<0>(__u, "dense_kernel");
        if (*(char *)(a3 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v175, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
        }
        else {
          std::string v175 = *(std::string *)a3;
        }
        MIL::Builder::OperationBuilder::AddInput();
        if (v178) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v178);
        }
        if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v175.__r_.__value_.__l.__data_);
        }
        if (v177 < 0) {
          operator delete(*(void **)__u);
        }
        std::string::basic_string[abi:ne180100]<0>(&Data, "num_groups");
        MIL::Builder::OperationBuilder::AddInputInt32();
        if (v174) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v174);
        }
        if (v173 < 0) {
          operator delete(Data);
        }
        std::string::basic_string[abi:ne180100]<0>(&v167, "strides");
        char v165 = 0;
        int v164 = 0;
        uint64_t v166 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v164, (const void *)v190, *((uint64_t *)&v190 + 1), (uint64_t)(*((void *)&v190 + 1) - v190) >> 2);
        MIL::Builder::OperationBuilder::AddInputInt32();
        if (v170) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v170);
        }
        if (v164)
        {
          char v165 = v164;
          operator delete(v164);
        }
        if (v169 < 0) {
          operator delete(v167);
        }
        std::string::basic_string[abi:ne180100]<0>(&v164, "dilations");
        float v160 = 0;
        char v161 = 0;
        uint64_t v162 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v160, *((const void **)&v191 + 1), v192, (uint64_t)(v192 - *((void *)&v191 + 1)) >> 2);
        MIL::Builder::OperationBuilder::AddInputInt32();
        if (v163) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v163);
        }
        if (v160)
        {
          char v161 = v160;
          operator delete(v160);
        }
        if (SHIBYTE(v166) < 0) {
          operator delete(v164);
        }
        std::string::basic_string[abi:ne180100]<0>(&v160, "pad_mode");
        if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v158, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
        }
        else {
          std::string v158 = v136;
        }
        MIL::Builder::OperationBuilder::AddInputString();
        if (v159) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v159);
        }
        if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v158.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v162) < 0) {
          operator delete(v160);
        }
        std::string::basic_string[abi:ne180100]<0>(&v155, "pad");
        char v152 = 0;
        std::string v153 = 0;
        uint64_t v154 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v152, v193.__begin_, (uint64_t)v193.__end_, v193.__end_ - v193.__begin_);
        MIL::Builder::OperationBuilder::AddInputInt32();
        if (v157) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v157);
        }
        if (v152)
        {
          std::string v153 = v152;
          operator delete(v152);
        }
        if (v156 < 0) {
          operator delete(v155);
        }
        if (v194)
        {
          if (v194 == 1)
          {
            std::string::basic_string[abi:ne180100]<0>(&v152, "bias");
            if (v138 == v137) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            MIL::Builder::OperationBuilder::AddInputFloat16();
            if (v151) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v151);
            }
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(&v152, "bias");
            memset(&v150, 0, sizeof(v150));
            std::vector<MIL::Fp16>::__init_with_size[abi:ne180100]<MIL::Fp16*,MIL::Fp16*>(&v150, v137, (uint64_t)v138, ((char *)v138 - (unsigned char *)v137) >> 1);
            MIL::Builder::OperationBuilder::AddInputFloat16();
            if (v151) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v151);
            }
            if (v150.__r_.__value_.__r.__words[0])
            {
              v150.__r_.__value_.__l.__size_ = v150.__r_.__value_.__r.__words[0];
              operator delete(v150.__r_.__value_.__l.__data_);
            }
          }
          if (SHIBYTE(v154) < 0) {
            operator delete(v152);
          }
        }
        if (*(char *)(a4 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
        }
        else {
          std::string v150 = *(std::string *)a4;
        }
        MIL::Builder::OperationBuilder::AddOutput();
        if (v149) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v149);
        }
        if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v150.__r_.__value_.__l.__data_);
        }
        if (v183) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v183);
        }
        *(_DWORD *)a5 = 0;
        std::string::basic_string[abi:ne180100]<0>((void *)(a5 + 8), (char *)&unk_210C6BFE7);
      }
      else
      {
        *(_DWORD *)a5 = 8;
        MIL::MILResult::GetMessage((MIL::MILResult *)&v130);
        std::operator+<char>();
      }
      MEMORY[0x21667B360](&v130);
    }
    if (v131)
    {
      __int16 v132 = v131;
      operator delete(v131);
    }
    if (SHIBYTE(v135) < 0) {
      operator delete(v134[0]);
    }
  }
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v136.__r_.__value_.__l.__data_);
  }
  if (v137)
  {
    uint64_t v138 = v137;
    operator delete(v137);
  }
  if (v140)
  {
    char v141 = (char *)v140;
    operator delete(v140);
  }
  if (v143)
  {
    uint64_t v144 = (char *)v143;
    operator delete(v143);
  }
  if (v193.__begin_)
  {
    v193.__end_ = v193.__begin_;
    operator delete(v193.__begin_);
  }
  if (*((void *)&v191 + 1))
  {
    *(void *)&long long v192 = *((void *)&v191 + 1);
    operator delete(*((void **)&v191 + 1));
  }
  if ((void)v190)
  {
    *((void *)&v190 + 1) = v190;
    operator delete((void *)v190);
  }
LABEL_26:
  if (SHIBYTE(v148) < 0) {
    operator delete((void *)__p);
  }
}

void sub_210B506F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (SLOBYTE(STACK[0x2D7]) < 0) {
    operator delete((void *)STACK[0x2C0]);
  }
  uint64_t v56 = *(void **)(v54 - 240);
  if (v56)
  {
    *(void *)(v54 - 232) = v56;
    operator delete(v56);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a39) {
    operator delete(a39);
  }
  if (a42) {
    operator delete(a42);
  }
  if (a45) {
    operator delete(a45);
  }
  ANEMachineIR::Validators::NeConvParameterValues::~NeConvParameterValues((ANEMachineIR::Validators::NeConvParameterValues *)(v54 - 216));
  if (a54 < 0) {
    operator delete(a49);
  }
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>::pair[abi:ne180100]<std::string&,std::pair<std::string,std::array<unsigned char,5ul>>&,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  unint64_t v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  int v8 = *((_DWORD *)a3 + 6);
  this[2].__r_.__value_.__s.__data_[4] = *((unsigned char *)a3 + 28);
  LODWORD(this[2].__r_.__value_.__l.__data_) = v8;
  return this;
}

void sub_210B50B70(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<MIL::Fp16>::reserve(void **a1, unint64_t a2)
{
  char v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 1)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>(v3, a2);
    long long v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFELL];
    uint64_t v9 = &v6[2 * v8];
    uint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        __int16 v13 = *((_WORD *)v11 - 1);
        v11 -= 2;
        *((_WORD *)v12 - 1) = v13;
        v12 -= 2;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::At(void *a1, unint64_t a2)
{
  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_26418A7C0, MEMORY[0x263F8C050]);
  }
  return *a1 + 2 * a2;
}

void sub_210B50C98(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<int>::reserve(std::vector<int> *this, std::vector<int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62) {
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, __n);
    long long v7 = (int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = (int *)&v6[4 * v8];
    std::vector<int>::pointer begin = this->__begin_;
    std::vector<int>::pointer end = this->__end_;
    uint64_t v12 = v7;
    if (end != this->__begin_)
    {
      uint64_t v12 = v7;
      do
      {
        int v13 = *--end;
        *--uint64_t v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void std::vector<int>::push_back[abi:ne180100](uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *(_DWORD **)a1;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a1) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v4, v12);
      uint64_t v8 = *(_DWORD **)a1;
      unint64_t v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      int v13 = 0;
    }
    BOOL v14 = &v13[4 * v9];
    char v15 = &v13[4 * v12];
    *(_DWORD *)BOOL v14 = *a2;
    long long v7 = v14 + 4;
    while (v6 != v8)
    {
      int v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *unint64_t v6 = *a2;
    long long v7 = v6 + 1;
  }
  *(void *)(a1 + 8) = v7;
}

void std::vector<unsigned long long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v3, a2);
    long long v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    unint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v11 != *a1)
    {
      unint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void MIL::ANEMachineIR::GetScalarValueOrDefault<std::string>(uint64_t a1@<X2>, int *a2@<X3>, std::string *a3@<X8>)
{
  uint64_t ParameterValue = MIL::IROperation::TryGetParameterValue();
  if (!ParameterValue)
  {
    if (a2)
    {
      int v9 = 1;
      goto LABEL_12;
    }
LABEL_13:
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a3->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    return;
  }
  if (!(*(uint64_t (**)(uint64_t))(*(void *)ParameterValue + 40))(ParameterValue)
    || (uint64_t v7 = MEMORY[0x21667B830]()) == 0)
  {
    if (a2)
    {
      int v9 = 2;
LABEL_12:
      *a2 = v9;
      goto LABEL_13;
    }
    goto LABEL_13;
  }
  if (a2) {
    *a2 = 0;
  }
  if (*(char *)(v7 + 23) < 0)
  {
    unint64_t v10 = *(const std::string::value_type **)v7;
    std::string::size_type v11 = *(void *)(v7 + 8);
    std::string::__init_copy_ctor_external(a3, v10, v11);
  }
  else
  {
    long long v8 = *(_OWORD *)v7;
    a3->__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v8;
  }
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1) {
LABEL_10:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

void std::vector<int>::assign(std::vector<int> *this, std::vector<int>::size_type __n, std::vector<int>::const_reference __u)
{
  uint64_t value = (uint64_t)this->__end_cap_.__value_;
  std::vector<int>::pointer begin = this->__begin_;
  if (__n <= (value - (uint64_t)begin) >> 2)
  {
    std::vector<int>::pointer end = this->__end_;
    std::vector<int>::size_type v14 = end - begin;
    if (v14 >= __n) {
      std::vector<int>::size_type v15 = __n;
    }
    else {
      std::vector<int>::size_type v15 = end - begin;
    }
    if (v15)
    {
      int v16 = begin;
      do
      {
        *v16++ = *__u;
        --v15;
      }
      while (v15);
    }
    if (__n <= v14)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      uint64_t v17 = &end[__n - v14];
      std::vector<int>::size_type v18 = 4 * __n - 4 * v14;
      do
      {
        *end++ = *__u;
        v18 -= 4;
      }
      while (v18);
      this->__end_ = v17;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      uint64_t value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n >> 62) {
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    }
    std::vector<int>::size_type v8 = value >> 1;
    if (value >> 1 <= __n) {
      std::vector<int>::size_type v8 = __n;
    }
    if ((unint64_t)value >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v9 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    std::vector<int>::__vallocate[abi:ne180100](this, v9);
    std::vector<int>::pointer v10 = this->__end_;
    std::string::size_type v11 = &v10[__n];
    std::vector<int>::size_type v12 = 4 * __n;
    do
    {
      *v10++ = *__u;
      v12 -= 4;
    }
    while (v12);
    this->__end_ = v11;
  }
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
}

void *std::vector<MIL::Fp16>::__init_with_size[abi:ne180100]<MIL::Fp16*,MIL::Fp16*>(void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<MIL::Fp16>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_210B511EC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MilTranslator::anonymous namespace'::TranslateConvOp(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t ANEMachineIR::HasNeuralEngine()
{
  return 1;
}

BOOL ANEMachineIR::HasTextureEngine(int a1)
{
  return a1 != 0;
}

char *ANEMachineIR::GetOpsetString(unsigned int a1)
{
  if (a1 > 2) {
    return 0;
  }
  else {
    return (&off_26418A830)[a1];
  }
}

uint64_t ANEMachineIR::LookupOpsetString(uint64_t *a1, int *a2)
{
  int v2 = *((char *)a1 + 23);
  if (v2 < 0)
  {
    if (a1[1] == 12)
    {
      a1 = (uint64_t *)*a1;
      goto LABEL_6;
    }
    return 0;
  }
  if (v2 != 12) {
    return 0;
  }
LABEL_6:
  if (*a1 == 0x68776F6C66656E61 && *((_DWORD *)a1 + 2) == 808595506)
  {
    int v7 = 0;
  }
  else if (*a1 == 0x68776F6C66656E61 && *((_DWORD *)a1 + 2) == 825372722)
  {
    int v7 = 1;
  }
  else
  {
    if (*a1 != 0x68776F6C66656E61 || *((_DWORD *)a1 + 2) != 842149938) {
      return 0;
    }
    int v7 = 2;
  }
  *a2 = v7;
  return 1;
}

void ANEMachineIR::H2020::BaseActivation::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210B517E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer(&a28);
  if (a24) {
    (*(void (**)(uint64_t))(*(void *)a24 + 8))(a24);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (__p) {
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v33 - 96), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a27, 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::Linear::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2020::Validators::ValidateLinear;
  v2[3] = v2;
  ANEMachineIR::H2020::BaseActivation::Make();
}

void sub_210B51A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::NePiecewiseV2::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210B52D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer(&a68);
  if (a40) {
    (*(void (**)(uint64_t))(*(void *)a40 + 8))(a40);
  }
  if (a39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a39);
  }
  uint64_t v70 = *(void **)(v68 - 192);
  if (v70)
  {
    *(void *)(v68 - 184) = v70;
    operator delete(v70);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v68 - 80), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a67, 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::Relu::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2020::Validators::ValidateRelu;
  v2[3] = v2;
  ANEMachineIR::H2020::BaseActivation::Make();
}

void sub_210B534C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::ScaledActivation::Make()
{
}

void sub_210B53A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer(&__p);
  if (a21) {
    (*(void (**)(uint64_t))(*(void *)a21 + 8))(a21);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  uint64_t v34 = *(void **)(v32 - 128);
  if (v34)
  {
    *(void *)(v32 - 120) = v34;
    operator delete(v34);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v32 - 96), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a26, 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::Lrelu::Make()
{
}

void sub_210B54244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer(&__p);
  if (a21) {
    (*(void (**)(uint64_t))(*(void *)a21 + 8))(a21);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  std::string::size_type v36 = *(void **)(v34 - 112);
  if (v36)
  {
    *(void *)(v34 - 104) = v36;
    operator delete(v36);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v34 - 80), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a28, 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::Sigmoid::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2020::Validators::ValidateSigmoid;
  v2[3] = v2;
  ANEMachineIR::H2020::ScaledActivation::Make();
}

void sub_210B544C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::Sqrt::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2020::Validators::ValidateSqrt;
  v2[3] = v2;
  ANEMachineIR::H2020::ScaledActivation::Make();
}

void sub_210B545A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::Tanh::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2020::Validators::ValidateTanh;
  v2[3] = v2;
  ANEMachineIR::H2020::ScaledActivation::Make();
}

void sub_210B54684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[12],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_210B54788(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[12],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[12],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_210B54824(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[12],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_210B54874(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[7],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_210B548F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[7],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[7],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_210B5498C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[7],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_210B549DC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[9],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_210B54A58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[9],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[9],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_210B54AF4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[9],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_210B54B44(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[6],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_210B54BC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[6],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[6],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_210B54C5C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[6],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_210B54CAC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::NeMatmulCpu::Run(MIL::Fp16 *a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v173 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  uint64_t InterpretedTensorValue = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "y");
  uint64_t v6 = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&__p);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (InterpretedTensorValue) {
      goto LABEL_5;
    }
LABEL_15:
    *(_DWORD *)a3 = 2;
    std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), "No value for x");
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!InterpretedTensorValue) {
    goto LABEL_15;
  }
LABEL_5:
  if (!v6)
  {
    *(_DWORD *)a3 = 2;
    std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), "No value for y");
    return;
  }
  int v7 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&__p, "post_scale");
  __int16 v8 = MIL::Fp16::FromFloat(v7, 1.0);
  unint64_t v9 = operator new(2uLL);
  char v141 = v9;
  *unint64_t v9 = v8;
  *(void *)&long long v142 = v9 + 1;
  *((void *)&v142 + 1) = v9 + 1;
  MIL::ANEMachineIR::GetScalarOrVectorOrDefault<MIL::Fp16>(a1, (uint64_t)&v141, (uint64_t)&v151);
  if (v141)
  {
    *(void *)&long long v142 = v141;
    operator delete(v141);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "acc_left_shift");
  uint64_t ParameterValue = MIL::IROperation::TryGetParameterValue();
  if (ParameterValue
    && (*(uint64_t (**)(uint64_t))(*(void *)ParameterValue + 40))(ParameterValue)
    && (std::string::size_type v11 = (char *)MEMORY[0x21667B840]()) != 0)
  {
    char v134 = *v11;
  }
  else
  {
    char v134 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "post_right_shift");
  uint64_t v12 = MIL::IROperation::TryGetParameterValue();
  if (v12
    && (*(uint64_t (**)(uint64_t))(*(void *)v12 + 40))(v12)
    && (uint64_t v13 = (char *)MEMORY[0x21667B840]()) != 0)
  {
    char v133 = *v13;
  }
  else
  {
    char v133 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)InterpretedTensorValue + 32))(InterpretedTensorValue);
  int v136 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 88))(v14);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
  int v137 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 88))(v15);
  uint64_t OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  uint64_t v17 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(OutputType);
  int v135 = (*(uint64_t (**)(ANEMachineIR::Utils *))(*(void *)v17 + 88))(v17);
  std::vector<int>::size_type v18 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(void *)InterpretedTensorValue + 32))(InterpretedTensorValue);
  ANEMachineIR::Utils::GetStaticTensorShape(v18, v19, (uint64_t)__dst);
  uint64_t v20 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
  ANEMachineIR::Utils::GetStaticTensorShape(v20, v21, (uint64_t)&v148);
  ANEMachineIR::Utils::GetStaticTensorShape(v17, v22, (uint64_t)v147);
  if (v137 == 4)
  {
    uint64_t v23 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
    uint64_t v24 = 0;
  }
  else
  {
    uint64_t v25 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
    ANEMachineIR::Utils::GetStaticTensorShape(v25, v26, (uint64_t)&__p);
    uint64_t v27 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
    unint64_t v28 = 1;
    while (v27 != (uint64_t *)__p.__r_.__value_.__l.__size_)
    {
      uint64_t v29 = *v27++;
      v28 *= v29;
    }
    char v141 = 0;
    long long v142 = 0uLL;
    std::vector<MIL::Fp16>::reserve(&v141, v28);
    if (v137 == 9)
    {
      uint64_t Data = MIL::IRTensorValue::GetDataView<signed char>();
      uint64_t v172 = v46;
      if (v28)
      {
        for (unint64_t i = 0; i != v28; ++i)
        {
          __int16 v48 = (MIL::Fp16 *)MIL::Util::Span<signed char const,18446744073709551615ul>::operator[](&Data, i);
          __int16 v49 = MIL::Fp16::FromFloat(v48, (float)*(char *)v48);
          __int16 v50 = v49;
          unint64_t v51 = (char *)v142;
          if ((unint64_t)v142 >= *((void *)&v142 + 1))
          {
            unint64_t v53 = (char *)v141;
            uint64_t v54 = v142 - (void)v141;
            if ((uint64_t)(v142 - (void)v141) <= -3) {
              std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v55 = v54 >> 1;
            if (*((void *)&v142 + 1) - (void)v141 <= (unint64_t)((v54 >> 1) + 1)) {
              uint64_t v56 = v55 + 1;
            }
            else {
              uint64_t v56 = *((void *)&v142 + 1) - (void)v141;
            }
            if (*((void *)&v142 + 1) - (void)v141 >= 0x7FFFFFFFFFFFFFFEuLL) {
              uint64_t v57 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v57 = v56;
            }
            if (v57)
            {
              uint64_t v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v142 + 8, v57);
              unint64_t v53 = (char *)v141;
              unint64_t v51 = (char *)v142;
            }
            else
            {
              uint64_t v58 = 0;
            }
            unint64_t v59 = &v58[2 * v55];
            *(_WORD *)unint64_t v59 = v50;
            unint64_t v52 = v59 + 2;
            while (v51 != v53)
            {
              __int16 v60 = *((_WORD *)v51 - 1);
              v51 -= 2;
              *((_WORD *)v59 - 1) = v60;
              v59 -= 2;
            }
            char v141 = v59;
            *(void *)&long long v142 = v52;
            *((void *)&v142 + 1) = &v58[2 * v57];
            if (v53) {
              operator delete(v53);
            }
          }
          else
          {
            *(_WORD *)long long v142 = v49;
            unint64_t v52 = v51 + 2;
          }
          *(void *)&long long v142 = v52;
        }
      }
    }
    else
    {
      if (v137 != 14)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Unexpected dtype copying to fp16.");
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      uint64_t Data = MIL::IRTensorValue::GetDataView<unsigned char>();
      uint64_t v172 = v30;
      if (v28)
      {
        for (unint64_t j = 0; j != v28; ++j)
        {
          uint64_t v32 = (MIL::Fp16 *)MIL::Util::Span<unsigned char const,18446744073709551615ul>::operator[](&Data, j);
          LOBYTE(v33) = *(unsigned char *)v32;
          __int16 v34 = MIL::Fp16::FromFloat(v32, (float)v33);
          __int16 v35 = v34;
          std::string::size_type v36 = (char *)v142;
          if ((unint64_t)v142 >= *((void *)&v142 + 1))
          {
            double v38 = (char *)v141;
            uint64_t v39 = v142 - (void)v141;
            if ((uint64_t)(v142 - (void)v141) <= -3) {
              std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v40 = v39 >> 1;
            if (*((void *)&v142 + 1) - (void)v141 <= (unint64_t)((v39 >> 1) + 1)) {
              uint64_t v41 = v40 + 1;
            }
            else {
              uint64_t v41 = *((void *)&v142 + 1) - (void)v141;
            }
            if (*((void *)&v142 + 1) - (void)v141 >= 0x7FFFFFFFFFFFFFFEuLL) {
              uint64_t v42 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v42 = v41;
            }
            if (v42)
            {
              uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v142 + 8, v42);
              double v38 = (char *)v141;
              std::string::size_type v36 = (char *)v142;
            }
            else
            {
              uint64_t v43 = 0;
            }
            uint64_t v44 = &v43[2 * v40];
            *(_WORD *)uint64_t v44 = v35;
            float v37 = v44 + 2;
            while (v36 != v38)
            {
              __int16 v45 = *((_WORD *)v36 - 1);
              v36 -= 2;
              *((_WORD *)v44 - 1) = v45;
              v44 -= 2;
            }
            char v141 = v44;
            *(void *)&long long v142 = v37;
            *((void *)&v142 + 1) = &v43[2 * v42];
            if (v38) {
              operator delete(v38);
            }
          }
          else
          {
            *(_WORD *)long long v142 = v34;
            float v37 = v36 + 2;
          }
          *(void *)&long long v142 = v37;
        }
      }
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v24 = v141;
    uint64_t v23 = (uint64_t)v141;
  }
  unint64_t v61 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&__p, "bias");
  __int16 v62 = MIL::Fp16::FromFloat(v61, 0.0);
  double v63 = operator new(2uLL);
  char v141 = v63;
  *double v63 = v62;
  *(void *)&long long v142 = v63 + 1;
  *((void *)&v142 + 1) = v63 + 1;
  MIL::ANEMachineIR::GetScalarOrVectorOrDefault<MIL::Fp16>(a1, (uint64_t)&v141, (uint64_t)&v144);
  if (v141)
  {
    *(void *)&long long v142 = v141;
    operator delete(v141);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "bias");
  int v64 = (MIL::Fp16 *)MIL::IROperation::TryGetParameterValue();
  std::vector<int>::size_type v65 = v64;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __int16 v66 = MIL::Fp16::FromFloat(v64, 1.0);
  if (!v65)
  {
    __int16 v69 = v66;
    goto LABEL_134;
  }
  if (v137 == 4)
  {
    uint64_t v72 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&__p, "matrix_vector_bias");
    __int16 v69 = MIL::Fp16::FromFloat(v72, 1.0);
    uint64_t v73 = MIL::IROperation::TryGetParameterValue();
    if (v73)
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)v73 + 40))(v73))
      {
        uint64_t v74 = (__int16 *)MEMORY[0x21667B820]();
        if (v74) {
          __int16 v69 = *v74;
        }
      }
    }
  }
  else
  {
    if (v137 == 9)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "matrix_vector_bias");
      uint64_t v70 = (MIL::Fp16 *)MIL::IROperation::TryGetParameterValue();
      if (v70
        && (uint64_t v70 = (MIL::Fp16 *)(*(uint64_t (**)(MIL::Fp16 *))(*(void *)v70 + 40))(v70)) != 0
        && (uint64_t v70 = (MIL::Fp16 *)MEMORY[0x21667B840]()) != 0)
      {
        char v71 = *(unsigned char *)v70;
      }
      else
      {
        char v71 = 1;
      }
      __int16 v75 = MIL::Fp16::FromFloat(v70, (float)v71);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "matrix_vector_bias");
      unint64_t v67 = (MIL::Fp16 *)MIL::IROperation::TryGetParameterValue();
      if (v67
        && (unint64_t v67 = (MIL::Fp16 *)(*(uint64_t (**)(MIL::Fp16 *))(*(void *)v67 + 40))(v67)) != 0
        && (unint64_t v67 = (MIL::Fp16 *)MEMORY[0x21667B870]()) != 0)
      {
        unsigned int v68 = *(unsigned __int8 *)v67;
      }
      else
      {
        unsigned int v68 = 1;
      }
      __int16 v75 = MIL::Fp16::FromFloat(v67, (float)v68);
    }
    __int16 v69 = v75;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v76 = v148;
  if (v149 == v148) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v77 = v145;
  if (*(void *)v148 == (v145 - (unsigned char *)v144) >> 1)
  {
LABEL_134:
    long long v142 = 0uLL;
    uint64_t v143 = 0;
    MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction((uint64_t)a1, (uint64_t)&v141, (uint64_t)&Data);
    if (v141)
    {
      *(_DWORD *)a3 = v141;
      *(_OWORD *)(a3 + 8) = v142;
      *(void *)(a3 + 24) = v143;
      long long v142 = 0uLL;
      uint64_t v143 = 0;
      goto LABEL_194;
    }
    __p.__r_.__value_.__r.__words[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)__dst, (uint64_t)__dst[0], (char *)&__p, &__p.__r_.__value_.__s.__data_[8], 1);
    *(int64x2_t *)&__p.__r_.__value_.__l.__data_ = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v148, (uint64_t)v148, (char *)&__p, &__p.__r_.__value_.__s.__data_[16], 2);
    __p.__r_.__value_.__r.__words[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)v147, (uint64_t)v147[0], (char *)&__p, &__p.__r_.__value_.__s.__data_[8], 1);
    memset(v170, 0, 24);
    long long v169 = 0u;
    long long v168 = 0u;
    long long v167 = 0u;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = xmmword_210C5A5D0;
    LOWORD(__p.__r_.__value_.__r.__words[2]) = 0;
    __p.__r_.__value_.__s.__data_[18] = 0;
    int64x2_t __src = (void *)0x100000001;
    std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)&v167, (char *)&__src, (uint64_t)&v164, 2uLL);
    int64x2_t __src = (void *)0x100000001;
    std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)&v168 + 8, (char *)&__src, (uint64_t)&v164, 2uLL);
    int v164 = 0;
    int64x2_t __src = 0;
    std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)v170, (char *)&__src, (uint64_t)&v165, 4uLL);
    v170[3] = (void *)((v145 - (unsigned char *)v144) >> 1);
    v170[4] = (void *)((v152 - (unsigned char *)v151) >> 1);
    switch(v136)
    {
      case 4:
        switch(v135)
        {
          case 14:
            uint64_t v120 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
            std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v161, (uint64_t)&Data);
            MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(v120, (uint64_t *)__dst, v23, v137, &v148, (uint64_t)v147, (unint64_t *)&__p, 0, (unint64_t *)&__src, v134, 0, v133, (uint64_t)&v144, (MIL::Fp16 **)&v151, v65 != 0, v129, v69, 0, 0,
              (uint64_t)v161);
            std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v161);
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::Fp16 *))(*(void *)a1 + 200))(&v139, a1);
            uint64_t v121 = v139;
            if (v140 == v139) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t v122 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v122);
            MIL::IRTensorValueType::MakeUInt8Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v121, (uint64_t *)&v153);
            uint64_t v123 = v153;
            std::string v153 = 0;
            if (v123) {
              (*((void (**)(void **))*v123 + 1))(v123);
            }
            goto LABEL_186;
          case 9:
            uint64_t v112 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
            std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v160, (uint64_t)&Data);
            MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(v112, (uint64_t *)__dst, v23, v137, &v148, (uint64_t)v147, (unint64_t *)&__p, 0, (unint64_t *)&__src, v134, 0, v133, (uint64_t)&v144, (MIL::Fp16 **)&v151, v65 != 0, v129, v69, 0, 0,
              (uint64_t)v160);
            std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v160);
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::Fp16 *))(*(void *)a1 + 200))(&v139, a1);
            unint64_t v113 = v139;
            if (v140 == v139) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            unsigned int v114 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v114);
            MIL::IRTensorValueType::MakeInt8Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v113, (uint64_t *)&v153);
            unint64_t v115 = v153;
            std::string v153 = 0;
            if (v115) {
              (*((void (**)(void **))*v115 + 1))(v115);
            }
            goto LABEL_186;
          case 4:
            uint64_t v99 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
            std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v162, (uint64_t)&Data);
            MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(v99, (uint64_t *)__dst, v23, v137, &v148, (uint64_t)v147, (unint64_t *)&__p, 0, (uint64_t)&__src, v134, 0, v133, (uint64_t)&v144, (MIL::Fp16 **)&v151, v65 != 0, v129, v69, 0, 0,
              (uint64_t)v162);
            std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v162);
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::Fp16 *))(*(void *)a1 + 200))(&v139, a1);
            uint64_t v100 = v139;
            if (v140 == v139) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            unint64_t v101 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v101);
            MIL::IRTensorValueType::MakeFloat16Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v100, (uint64_t *)&v153);
            uint64_t v102 = v153;
            std::string v153 = 0;
            if (v102) {
              (*((void (**)(void **))*v102 + 1))(v102);
            }
            goto LABEL_186;
        }
        break;
      case 9:
        switch(v135)
        {
          case 14:
            uint64_t v108 = MIL::IRTensorValue::GetDataView<signed char>();
            std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v155, (uint64_t)&Data);
            MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(v108, (uint64_t *)__dst, v23, v137, &v148, (uint64_t)v147, (unint64_t *)&__p, 0, (unint64_t *)&__src, v134, 0, v133, (uint64_t)&v144, (MIL::Fp16 **)&v151, v65 != 0, v129, v69, 0, 0,
              (uint64_t)v155);
            std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v155);
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::Fp16 *))(*(void *)a1 + 200))(&v139, a1);
            uint64_t v109 = v139;
            if (v140 == v139) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t v110 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v110);
            MIL::IRTensorValueType::MakeUInt8Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v109, (uint64_t *)&v153);
            uint64_t v111 = v153;
            std::string v153 = 0;
            if (v111) {
              (*((void (**)(void **))*v111 + 1))(v111);
            }
            goto LABEL_186;
          case 9:
            uint64_t v104 = MIL::IRTensorValue::GetDataView<signed char>();
            std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v154, (uint64_t)&Data);
            MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(v104, (uint64_t *)__dst, v23, v137, &v148, (uint64_t)v147, (unint64_t *)&__p, 0, (unint64_t *)&__src, v134, 0, v133, (uint64_t)&v144, (MIL::Fp16 **)&v151, v65 != 0, v129, v69, 0, 0,
              (uint64_t)v154);
            std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v154);
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::Fp16 *))(*(void *)a1 + 200))(&v139, a1);
            uint64_t v105 = v139;
            if (v140 == v139) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t v106 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v106);
            MIL::IRTensorValueType::MakeInt8Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v105, (uint64_t *)&v153);
            long long v107 = v153;
            std::string v153 = 0;
            if (v107) {
              (*((void (**)(void **))*v107 + 1))(v107);
            }
            goto LABEL_186;
          case 4:
            uint64_t v95 = MIL::IRTensorValue::GetDataView<signed char>();
            std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v156, (uint64_t)&Data);
            MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(v95, (uint64_t *)__dst, v23, v137, &v148, (uint64_t)v147, (unint64_t *)&__p, 0, (uint64_t)&__src, v134, 0, v133, (uint64_t)&v144, (MIL::Fp16 **)&v151, v65 != 0, v129, v69, 0, 0,
              (uint64_t)v156);
            std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v156);
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::Fp16 *))(*(void *)a1 + 200))(&v139, a1);
            unint64_t v96 = v139;
            if (v140 == v139) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            unint64_t v97 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v97);
            MIL::IRTensorValueType::MakeFloat16Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v96, (uint64_t *)&v153);
            unint64_t v98 = v153;
            std::string v153 = 0;
            if (v98) {
              (*((void (**)(void **))*v98 + 1))(v98);
            }
            goto LABEL_186;
        }
        break;
      case 14:
        switch(v135)
        {
          case 14:
            uint64_t v124 = MIL::IRTensorValue::GetDataView<unsigned char>();
            std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v158, (uint64_t)&Data);
            LOBYTE(v130) = 0;
            MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(v124, (uint64_t *)__dst, v23, v137, &v148, (uint64_t)v147, (unint64_t *)&__p, 0, (unint64_t *)&__src, v134, 0, v133, (uint64_t)&v144, (MIL::Fp16 **)&v151, v65 != 0, v129, v69, v130, (uint64_t)v158);
            std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v158);
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::Fp16 *))(*(void *)a1 + 200))(&v139, a1);
            uint64_t v125 = v139;
            if (v140 == v139) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t v126 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v126);
            MIL::IRTensorValueType::MakeUInt8Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v125, (uint64_t *)&v153);
            uint64_t v127 = v153;
            std::string v153 = 0;
            if (v127) {
              (*((void (**)(void **))*v127 + 1))(v127);
            }
            goto LABEL_186;
          case 9:
            uint64_t v116 = MIL::IRTensorValue::GetDataView<unsigned char>();
            std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v157, (uint64_t)&Data);
            LOBYTE(v130) = 0;
            MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(v116, (uint64_t *)__dst, v23, v137, &v148, (uint64_t)v147, (unint64_t *)&__p, 0, (unint64_t *)&__src, v134, 0, v133, (uint64_t)&v144, (MIL::Fp16 **)&v151, v65 != 0, v129, v69, v130, (uint64_t)v157);
            std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v157);
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::Fp16 *))(*(void *)a1 + 200))(&v139, a1);
            uint64_t v117 = v139;
            if (v140 == v139) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t v118 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v118);
            MIL::IRTensorValueType::MakeInt8Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v117, (uint64_t *)&v153);
            unint64_t v119 = v153;
            std::string v153 = 0;
            if (v119) {
              (*((void (**)(void **))*v119 + 1))(v119);
            }
            goto LABEL_186;
          case 4:
            uint64_t v91 = MIL::IRTensorValue::GetDataView<unsigned char>();
            std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v159, (uint64_t)&Data);
            LOBYTE(v130) = 0;
            MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(v91, (uint64_t *)__dst, v23, v137, &v148, (uint64_t)v147, (unint64_t *)&__p, 0, (uint64_t)&__src, v134, 0, v133, (uint64_t)&v144, (MIL::Fp16 **)&v151, v65 != 0, v129, v69, v130, (uint64_t)v159);
            std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v159);
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::Fp16 *))(*(void *)a1 + 200))(&v139, a1);
            uint64_t v92 = v139;
            if (v140 == v139) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t v93 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v93);
            MIL::IRTensorValueType::MakeFloat16Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v92, (uint64_t *)&v153);
            uint64_t v94 = v153;
            std::string v153 = 0;
            if (v94) {
              (*((void (**)(void **))*v94 + 1))(v94);
            }
LABEL_186:
            std::string v153 = (void **)&v139;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v153);
            *(_DWORD *)a3 = 0;
            std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), (char *)&unk_210C6BFE7);
            if (__src)
            {
              int v164 = __src;
              operator delete(__src);
            }
            goto LABEL_188;
        }
        break;
      default:
        unint64_t v103 = "Unimplemented input dtype";
LABEL_162:
        *(_DWORD *)a3 = 3;
        std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), v103);
LABEL_188:
        if (v170[0])
        {
          v170[1] = v170[0];
          operator delete(v170[0]);
        }
        if (*((void *)&v168 + 1))
        {
          *(void *)&long long v169 = *((void *)&v168 + 1);
          operator delete(*((void **)&v168 + 1));
        }
        if ((void)v167)
        {
          *((void *)&v167 + 1) = v167;
          operator delete((void *)v167);
        }
LABEL_194:
        std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](&Data);
        if (SHIBYTE(v143) < 0)
        {
          uint64_t v90 = (void *)v142;
          goto LABEL_196;
        }
        goto LABEL_197;
    }
    unint64_t v103 = "Unimplemented output dtype";
    goto LABEL_162;
  }
  if (v145 - (unsigned char *)v144 == 2)
  {
    uint64_t v131 = v23;
    __int16 v132 = v24;
    for (unint64_t k = 0; *v76 - 1 > k; ++k)
    {
      if (v77 >= v146)
      {
        uint64_t v79 = (char *)v144;
        uint64_t v80 = v77 - (unsigned char *)v144;
        if (v77 - (unsigned char *)v144 <= -3) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v81 = v80 >> 1;
        if (v146 - (unsigned char *)v144 <= (unint64_t)((v80 >> 1) + 1)) {
          uint64_t v82 = v81 + 1;
        }
        else {
          uint64_t v82 = v146 - (unsigned char *)v144;
        }
        if ((unint64_t)(v146 - (unsigned char *)v144) >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v83 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v83 = v82;
        }
        if (v83)
        {
          unint64_t v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v146, v83);
          uint64_t v79 = (char *)v144;
          std::string::size_type v85 = v145;
        }
        else
        {
          unint64_t v84 = 0;
          std::string::size_type v85 = v77;
        }
        unint64_t v86 = &v84[2 * v81];
        *(_WORD *)unint64_t v86 = *((_WORD *)v77 - 1);
        unint64_t v77 = v86 + 2;
        while (v85 != v79)
        {
          __int16 v87 = *((_WORD *)v85 - 1);
          v85 -= 2;
          *((_WORD *)v86 - 1) = v87;
          v86 -= 2;
        }
        uint64_t v144 = v86;
        std::string v145 = v77;
        int v146 = &v84[2 * v83];
        if (v79) {
          operator delete(v79);
        }
      }
      else
      {
        *(_WORD *)unint64_t v77 = *((_WORD *)v77 - 1);
        v77 += 2;
      }
      std::string v145 = v77;
      uint64_t v76 = v148;
      if (v149 == v148) {
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
    }
    uint64_t v23 = v131;
    uint64_t v24 = v132;
    goto LABEL_134;
  }
  *(_DWORD *)a3 = 3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "matrix_vector_bias");
  uint64_t v88 = std::string::insert(&__p, 0, "Vector size wrong for ");
  long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
  *(void *)(a3 + 24) = *((void *)&v88->__r_.__value_.__l + 2);
  *(_OWORD *)(a3 + 8) = v89;
  v88->__r_.__value_.__l.__size_ = 0;
  v88->__r_.__value_.__r.__words[2] = 0;
  v88->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v90 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_196:
    operator delete(v90);
  }
LABEL_197:
  if (v144)
  {
    std::string v145 = (char *)v144;
    operator delete(v144);
  }
  if (v24) {
    operator delete(v24);
  }
  if (v147[0])
  {
    v147[1] = v147[0];
    operator delete(v147[0]);
  }
  if (v148)
  {
    int v149 = v148;
    operator delete(v148);
  }
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
  if (v151)
  {
    char v152 = v151;
    operator delete(v151);
  }
}

void sub_210B565F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45)
{
  __int16 v48 = (void *)STACK[0x248];
  if (STACK[0x248])
  {
    STACK[0x250] = (unint64_t)v48;
    operator delete(v48);
  }
  ANEMachineIR::Validators::NeConvParameterValues::~NeConvParameterValues((ANEMachineIR::Validators::NeConvParameterValues *)&STACK[0x260]);
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100]((void *)(v46 - 152));
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a33) {
    operator delete(a33);
  }
  if (v45) {
    operator delete(v45);
  }
  if (a36) {
    operator delete(a36);
  }
  if (a39) {
    operator delete(a39);
  }
  if (a42) {
    operator delete(a42);
  }
  if (a45) {
    operator delete(a45);
  }
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::GetScalarOrVectorOrDefault<MIL::Fp16>(MIL::Fp16 *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  MIL::Fp16::FromFloat(a1, 0.0);
  uint64_t ParameterValue = MIL::IROperation::TryGetParameterValue();
  if (ParameterValue)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)ParameterValue + 40))(ParameterValue)
      && (uint64_t v6 = (__int16 *)MEMORY[0x21667B820]()) != 0)
    {
      __int16 v7 = *v6;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      __int16 v8 = operator new(2uLL);
      *(void *)a3 = v8;
      *v8++ = v7;
      *(void *)(a3 + 8) = v8;
      *(void *)(a3 + 16) = v8;
    }
    else
    {
      unint64_t v9 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
      uint64_t v10 = MIL::IRValue::AsTensor(v9);
      std::string::size_type v11 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 32))(v10);
      ANEMachineIR::Utils::GetStaticTensorShape(v11, v12, (uint64_t)&v33);
      if (v34 == v33) {
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
      unint64_t v13 = *v33;
      __int16 v34 = v33;
      operator delete(v33);
      unsigned int v33 = (unint64_t *)MIL::IRTensorValue::GetDataView<MIL::Fp16>();
      __int16 v34 = v14;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      std::vector<MIL::Fp16>::reserve((void **)a3, v13);
      if (v13)
      {
        for (unint64_t i = 0; i != v13; ++i)
        {
          int v16 = (_WORD *)MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::operator[](&v33, i);
          uint64_t v17 = v16;
          unint64_t v19 = *(_WORD **)(a3 + 8);
          unint64_t v18 = *(void *)(a3 + 16);
          if ((unint64_t)v19 >= v18)
          {
            int v21 = *(_WORD **)a3;
            uint64_t v22 = (uint64_t)v19 - *(void *)a3;
            if (v22 <= -3) {
              std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v23 = v22 >> 1;
            unint64_t v24 = v18 - (void)v21;
            if (v24 <= (v22 >> 1) + 1) {
              unint64_t v25 = v23 + 1;
            }
            else {
              unint64_t v25 = v24;
            }
            if (v24 >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v26 = v25;
            }
            if (v26)
            {
              uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>(a3 + 16, v26);
              int v21 = *(_WORD **)a3;
              unint64_t v19 = *(_WORD **)(a3 + 8);
            }
            else
            {
              uint64_t v27 = 0;
            }
            unint64_t v28 = &v27[2 * v23];
            *(_WORD *)unint64_t v28 = *v17;
            uint64_t v20 = v28 + 2;
            while (v19 != v21)
            {
              __int16 v29 = *--v19;
              *((_WORD *)v28 - 1) = v29;
              v28 -= 2;
            }
            *(void *)a3 = v28;
            *(void *)(a3 + 8) = v20;
            *(void *)(a3 + 16) = &v27[2 * v26];
            if (v21) {
              operator delete(v21);
            }
          }
          else
          {
            *unint64_t v19 = *v16;
            uint64_t v20 = v19 + 1;
          }
          *(void *)(a3 + 8) = v20;
        }
      }
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    uint64_t v30 = *(const void **)a2;
    uint64_t v31 = *(void *)(a2 + 8);
    uint64_t v32 = (v31 - *(void *)a2) >> 1;
    std::vector<MIL::Fp16>::__init_with_size[abi:ne180100]<MIL::Fp16*,MIL::Fp16*>((void *)a3, v30, v31, v32);
  }
}

void sub_210B56D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void *MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, char a10, char a11, char a12, uint64_t a13, MIL::Fp16 **a14, char a15, int a16, __int16 a17, int a18, char a19, uint64_t a20)
{
  uint64_t v220 = *MEMORY[0x263EF8340];
  __int16 v205 = a17;
  uint64_t v203 = a3;
  uint64_t v204 = a1;
  unint64_t v24 = *a7;
  if (*a7 == 3)
  {
    uint64_t v25 = *a2;
    unint64_t v26 = a2[1] - *a2;
    if (v26 <= 8) {
      goto LABEL_167;
    }
    uint64_t v27 = *(void *)(v25 + 8);
    uint64_t v201 = 0;
    uint64_t v202 = v27;
    goto LABEL_5;
  }
  uint64_t v27 = 1;
  uint64_t v201 = 0;
  uint64_t v202 = 1;
  uint64_t v25 = *a2;
  unint64_t v26 = a2[1] - *a2;
  if (v24 >= 2)
  {
LABEL_5:
    if (v26 > 0x10)
    {
      uint64_t v28 = *(void *)(v26 + v25 - 24);
      uint64_t v200 = 0;
      uint64_t v201 = v28;
      goto LABEL_8;
    }
LABEL_167:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v28 = 1;
  uint64_t v200 = 0;
  uint64_t v201 = 1;
  uint64_t v27 = 1;
  if (v26 <= 8) {
    goto LABEL_167;
  }
LABEL_8:
  uint64_t v29 = v26 + v25;
  uint64_t v30 = *(void *)(v29 - 16);
  uint64_t v199 = 0;
  uint64_t v200 = v30;
  uint64_t v198 = *(void *)(v29 - 8);
  uint64_t v199 = v198;
  uint64_t v197 = v198 * v30;
  uint64_t v195 = v198 * v30 * v28 * v27;
  uint64_t v196 = v198 * v30 * v28;
  Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v205);
  __int16 v194 = MIL::Fp16::FromFloat(Float, v32);
  v216[3] = 0;
  if (a15)
  {
    *(void *)&long long v209 = &v199;
    *((void *)&v209 + 1) = &v194;
    float v210 = &v204;
    v211 = &v195;
    v212 = &v196;
    v213 = &v197;
    uint64_t v214 = &v198;
    std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(v216, (uint64_t)&v209);
  }
  else
  {
    *(void *)&long long v209 = &v202;
    *((void *)&v209 + 1) = &v201;
    float v210 = &v200;
    v211 = &v204;
    v212 = &v195;
    v213 = &v196;
    uint64_t v214 = &v197;
    uint64_t v215 = &v198;
    if (a8) {
      std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(v216, &v209);
    }
    else {
      std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(v216, &v209);
    }
  }
  v208[0] = &unk_26C316368;
  v208[3] = v208;
  if (a19)
  {
    *(void *)&long long v209 = &unk_26C3163E8;
    v211 = (uint64_t *)&v209;
    std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::swap[abi:ne180100](&v209, v208);
    std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::~__value_func[abi:ne180100](&v209);
  }
  __int16 v34 = *(uint64_t **)a6;
  uint64_t v33 = *(void *)(a6 + 8);
  unint64_t v35 = v33 - *(void *)a6;
  if (v33 == *(void *)a6) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v36 = (uint64_t)v35 >> 3;
  uint64_t v167 = *v34;
  unint64_t v37 = *a7;
  if (*a7 == 3)
  {
    if (v35 <= 8) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v38 = v34[1];
    goto LABEL_21;
  }
  if (v37 >= 2)
  {
    uint64_t v38 = 1;
LABEL_21:
    uint64_t v170 = v38;
    if (v35 <= 0x10) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v39 = &v34[v36];
    uint64_t v40 = *(v39 - 2);
    uint64_t v171 = *(v39 - 3);
    unint64_t v41 = *(v39 - 1);
    if (v37 == 3)
    {
      if (a5[1] - *a5 <= 8uLL) {
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v42 = *(void *)(*a5 + 8);
    }
    else
    {
      uint64_t v42 = 1;
    }
    uint64_t v173 = v42;
    uint64_t v43 = *a5;
    unint64_t v44 = a5[1] - *a5;
    if (v44 <= 0x18) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    unint64_t v160 = v41 * v40;
    uint64_t v45 = *(void *)(v44 + v43 - 32);
    goto LABEL_31;
  }
  if (v35 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v43 = *a5;
  unint64_t v44 = a5[1] - *a5;
  if (v44 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v46 = &v34[v36];
  uint64_t v40 = *(v46 - 2);
  unint64_t v41 = *(v46 - 1);
  unint64_t v160 = v41 * v40;
  uint64_t v45 = 1;
  uint64_t v170 = 1;
  uint64_t v171 = 1;
  uint64_t v173 = 1;
LABEL_31:
  uint64_t v47 = v44 + v43;
  uint64_t v48 = *(void *)(v47 - 24);
  uint64_t v49 = *(void *)(v47 - 16);
  uint64_t v193 = *(void *)(v47 - 8);
  uint64_t v182 = v49;
  int v166 = v193;
  uint64_t v192 = v193 * v49;
  uint64_t v177 = v48;
  uint64_t v191 = v193 * v49 * v48;
  uint64_t v175 = v45;
  uint64_t v190 = v191 * v45;
  uint64_t v189 = v191 * v45 * v173;
  *(void *)&long long v209 = &v189;
  *((void *)&v209 + 1) = &v190;
  float v210 = &v191;
  v211 = &v192;
  v212 = &v193;
  unint64_t v50 = a7[4];
  if (v37 >= 3)
  {
    unint64_t v51 = a7[3];
    unint64_t v52 = v50 - v51;
    if (v50 - v51 <= 8) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v53 = *(_DWORD *)(v50 - 12);
    goto LABEL_37;
  }
  unint64_t v51 = a7[3];
  if (v37 == 2)
  {
    unint64_t v52 = v50 - v51;
    if (v50 - v51 <= 4) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v53 = 1;
LABEL_37:
    int v158 = v53;
    int v54 = *(_DWORD *)(v52 + v51 - 8);
    goto LABEL_39;
  }
  int v54 = 1;
  int v158 = 1;
LABEL_39:
  int v159 = v54;
  long long v169 = a7;
  if (v50 == v51) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  int v161 = *(_DWORD *)(v50 - 4);
  *(void *)a9 = 0;
  *(void *)(a9 + 8) = 0;
  *(void *)(a9 + 16) = 0;
  std::vector<MIL::Fp16>::reserve((void **)a9, v170 * v167 * v171 * v40 * v41);
  uint64_t v165 = v40;
  __int16 v188 = MIL::Fp16::FromFloat(v55, 0.0);
  std::vector<MIL::Fp16>::assign((char **)a9, v170 * v167 * v171 * v40 * v41, &v188);
  if (a4 == 4) {
    int v56 = 20;
  }
  else {
    int v56 = 10;
  }
  int v57 = v56 + a10;
  double v58 = ldexp(1.0, v57);
  double v59 = ldexp(1.0, v57 + a11);
  unint64_t v60 = v41;
  if (*((unsigned char *)v169 + 16)) {
    v41 /= v169[1];
  }
  unint64_t v164 = v60;
  std::string __p = 0;
  uint64_t v186 = 0;
  unint64_t v187 = 0;
  std::vector<float>::reserve(&__p, v41);
  __int16 v62 = *a14;
  unint64_t v61 = a14[1];
  if (v61 - *a14 == 2)
  {
    MIL::Fp16::GetFloat(*a14);
    float v64 = exp2(-(double)(v57 + a12)) * v63;
    *(float *)&long long __u = v64;
    std::vector<float>::assign((char **)&__p, v41, &__u);
  }
  else if (v62 != v61)
  {
    double v65 = exp2(-(double)(v57 + a12));
    do
    {
      MIL::Fp16::GetFloat(v62);
      float v67 = v65 * v66;
      unsigned int v68 = v186;
      if (v186 >= (float *)v187)
      {
        uint64_t v70 = (float *)__p;
        uint64_t v71 = ((char *)v186 - (unsigned char *)__p) >> 2;
        unint64_t v72 = v71 + 1;
        if ((unint64_t)(v71 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v73 = v187 - (unsigned char *)__p;
        if ((v187 - (unsigned char *)__p) >> 1 > v72) {
          unint64_t v72 = v73 >> 1;
        }
        if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v74 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v74 = v72;
        }
        if (v74)
        {
          __int16 v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v187, v74);
          uint64_t v70 = (float *)__p;
          unsigned int v68 = v186;
        }
        else
        {
          __int16 v75 = 0;
        }
        uint64_t v76 = (float *)&v75[4 * v71];
        *uint64_t v76 = v67;
        __int16 v69 = v76 + 1;
        while (v68 != v70)
        {
          int v77 = *((_DWORD *)v68-- - 1);
          *((_DWORD *)v76-- - 1) = v77;
        }
        std::string __p = v76;
        uint64_t v186 = v69;
        unint64_t v187 = &v75[4 * v74];
        if (v70) {
          operator delete(v70);
        }
      }
      else
      {
        *uint64_t v186 = v67;
        __int16 v69 = v68 + 1;
      }
      uint64_t v186 = v69;
      __int16 v62 = (MIL::Fp16 *)((char *)v62 + 2);
    }
    while (v62 != v61);
  }
  memset(&v184, 0, sizeof(v184));
  std::vector<int>::reserve(&v184, v41);
  if (a15)
  {
    LODWORD(__u) = 0;
    std::vector<int>::assign(&v184, v41, (std::vector<int>::const_reference)&__u);
  }
  else
  {
    float v78 = v59;
    if (*(void *)(a13 + 8) - *(void *)a13 == 2)
    {
      MIL::Fp16::GetFloat(*(MIL::Fp16 **)a13);
      float v80 = v79 * v78;
      unsigned int v81 = llroundf(v80);
      if (fabsf(v80) < 1.0) {
        unsigned int v81 = 0;
      }
      LODWORD(__u) = v81;
      std::vector<int>::assign(&v184, v41, (std::vector<int>::const_reference)&__u);
    }
    else if (v41)
    {
      for (uint64_t i = 0; i != v41; ++i)
      {
        MIL::Fp16::GetFloat((MIL::Fp16 *)(*(void *)a13 + 2 * i));
        float v84 = v83 * v78;
        unsigned int v85 = llroundf(v84);
        if (fabsf(v84) >= 1.0) {
          int v86 = v85;
        }
        else {
          int v86 = 0;
        }
        std::vector<int>::pointer end = v184.__end_;
        if (v184.__end_ >= v184.__end_cap_.__value_)
        {
          std::vector<int>::pointer begin = v184.__begin_;
          int64_t v90 = v184.__end_ - v184.__begin_;
          unint64_t v91 = v90 + 1;
          if ((unint64_t)(v90 + 1) >> 62) {
            std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
          }
          int64_t v92 = (char *)v184.__end_cap_.__value_ - (char *)v184.__begin_;
          if (((char *)v184.__end_cap_.__value_ - (char *)v184.__begin_) >> 1 > v91) {
            unint64_t v91 = v92 >> 1;
          }
          if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v93 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v93 = v91;
          }
          if (v93)
          {
            uint64_t v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v184.__end_cap_, v93);
            std::vector<int>::pointer begin = v184.__begin_;
            std::vector<int>::pointer end = v184.__end_;
          }
          else
          {
            uint64_t v94 = 0;
          }
          uint64_t v95 = (int *)&v94[4 * v90];
          *uint64_t v95 = v86;
          uint64_t v88 = v95 + 1;
          while (end != begin)
          {
            int v96 = *--end;
            *--uint64_t v95 = v96;
          }
          v184.__begin_ = v95;
          v184.__end_ = v88;
          v184.__end_cap_.__value_ = (int *)&v94[4 * v93];
          if (begin) {
            operator delete(begin);
          }
        }
        else
        {
          *v184.__end_ = v86;
          uint64_t v88 = end + 1;
        }
        v184.__end_ = v88;
      }
    }
  }
  unint64_t v97 = (char *)v169[10];
  if (*v169 == 3)
  {
    unint64_t v98 = (char *)v169[9];
    if (v97 == v98) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v99 = *(_DWORD *)v98;
    goto LABEL_99;
  }
  unint64_t v98 = (char *)v169[9];
  if (*v169 >= 2)
  {
    int v99 = 0;
LABEL_99:
    unint64_t v100 = v97 - v98;
    if (v100 <= 0xC) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v101 = *(_DWORD *)&v98[v100 - 16];
    int v102 = a4;
    goto LABEL_103;
  }
  unint64_t v100 = v97 - v98;
  int v102 = a4;
  if (v100 <= 4) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  int v101 = 0;
  int v99 = 0;
LABEL_103:
  int v103 = *(_DWORD *)&v98[v100 - 8];
  v207[3] = 0;
  switch(v102)
  {
    case 4:
      uint64_t v104 = &unk_26C316468;
      break;
    case 9:
      uint64_t v104 = &unk_26C316578;
      break;
    case 14:
      uint64_t v104 = &unk_26C3164F8;
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid kernel dtype");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  *(void *)&long long __u = v104;
  p_u = &__u;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::swap[abi:ne180100](&__u, v207);
  uint64_t v105 = std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::~__value_func[abi:ne180100](&__u);
  v206[3] = 0;
  if (a15)
  {
    *(void *)&long long __u = &v199;
    *((void *)&__u + 1) = a13;
    v218 = &v203;
    p_u = &v209;
    std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(v206, &__u);
  }
  else
  {
    *(void *)&long long __u = &unk_26C316688;
    *((void *)&__u + 1) = &v203;
    v218 = (uint64_t *)&v209;
    p_u = &__u;
    std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v105, v206);
    std::__function::__value_func<float const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](&__u);
  }
  uint64_t v106 = v169;
  unint64_t v107 = v169[1];
  if (v107)
  {
    int v179 = 0;
    uint64_t v108 = 0;
    uint64_t v109 = a20;
    uint64_t v110 = v166;
    uint64_t v111 = v166;
    float v112 = v58;
    int v150 = -v99;
    int v151 = -v101;
    int v156 = -v103;
    while (1)
    {
      int v113 = *((unsigned char *)v106 + 16) ? 0 : v108;
      int v178 = v113;
      if (v167) {
        break;
      }
LABEL_159:
      ++v108;
      v179 += v182;
      if (v107 <= v108) {
        goto LABEL_160;
      }
    }
    uint64_t v181 = 0;
    uint64_t v147 = v108;
    uint64_t v114 = v108 * v110;
    if (*((unsigned char *)v106 + 16)) {
      uint64_t v115 = 0;
    }
    else {
      uint64_t v115 = (int)v108 * (int)v110;
    }
    uint64_t v116 = (void *)a9;
    unint64_t v118 = v164;
    uint64_t v117 = v165;
    uint64_t v153 = v115;
    uint64_t v154 = v108 * v110;
    while (!v170)
    {
LABEL_157:
      if (++v181 == v167)
      {
        uint64_t v106 = v169;
        unint64_t v107 = v169[1];
        uint64_t v110 = v166;
        uint64_t v108 = v147;
        goto LABEL_159;
      }
    }
    uint64_t v119 = 0;
    while (!v171)
    {
LABEL_156:
      if (++v119 == v170) {
        goto LABEL_157;
      }
    }
    uint64_t v120 = 0;
    int v172 = v150 + v158 * v119;
    uint64_t v152 = (v170 * v181 + v119) * v171;
    uint64_t v148 = v119;
    while (!v117)
    {
LABEL_155:
      ++v120;
      uint64_t v119 = v148;
      if (v120 == v171) {
        goto LABEL_156;
      }
    }
    uint64_t v121 = 0;
    int v174 = v151 + v159 * v120;
    unint64_t v122 = v160 * (v152 + v120);
    uint64_t v149 = v120;
    unint64_t v155 = v122;
    while (v166 < 1)
    {
LABEL_154:
      ++v121;
      uint64_t v120 = v149;
      if (v121 == v117) {
        goto LABEL_155;
      }
    }
    uint64_t v123 = 0;
    int v176 = v156 + v161 * v121;
    uint64_t v163 = v118 * v121;
    uint64_t v157 = v121;
    while (1)
    {
      int v183 = 0;
      int v124 = v184.__begin_[v123 + v115];
      int v183 = v124;
      if (v173)
      {
        uint64_t v162 = v123 + v115;
        uint64_t v125 = 0;
        int v126 = 0;
        uint64_t v127 = v175;
        do
        {
          if (v127)
          {
            uint64_t v128 = 0;
            do
            {
              if (v177)
              {
                for (uint64_t j = 0; j != v177; ++j)
                {
                  if (v182)
                  {
                    for (uint64_t k = 0; k != v182; ++k)
                    {
                      __int16 v131 = std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()((uint64_t)v216, v181, v172 + (int)v125, v174 + (int)v128, v176 + (int)j, v179 + (int)k, v123);
                      __int16 v132 = std::function<MIL::Fp16 ()(MIL::Fp16)>::operator()((uint64_t)v208, v131);
                      std::function<float const ()(int,int,int,int,int,int)>::operator()((uint64_t)v206, v178, v125, v128, j, k, v123);
                      int v126 = std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator()((uint64_t)v207, (uint64_t)&v183, v126, v132, a10, v133, v112);
                    }
                  }
                }
              }
              ++v128;
              uint64_t v127 = v175;
            }
            while (v128 != v175);
          }
          ++v125;
        }
        while (v125 != v173);
        float v134 = *((float *)__p + v162);
        if (v126)
        {
          double v135 = INFINITY;
          if (v126 == 2) {
            double v135 = -INFINITY;
          }
          uint64_t v116 = (void *)a9;
          unint64_t v118 = v164;
          uint64_t v117 = v165;
          uint64_t v111 = v166;
          uint64_t v109 = a20;
          uint64_t v115 = v153;
          uint64_t v114 = v154;
          uint64_t v121 = v157;
          unint64_t v122 = v155;
          goto LABEL_148;
        }
        int v124 = v183;
        uint64_t v116 = (void *)a9;
        unint64_t v118 = v164;
        uint64_t v117 = v165;
        uint64_t v111 = v166;
        uint64_t v109 = a20;
        uint64_t v115 = v153;
        uint64_t v114 = v154;
        uint64_t v121 = v157;
        unint64_t v122 = v155;
        if (!v183)
        {
LABEL_150:
          float v138 = 0.0;
          goto LABEL_151;
        }
      }
      else
      {
        float v134 = *((float *)__p + v123 + v115);
        if (!v124) {
          goto LABEL_150;
        }
      }
      double v135 = (double)v124;
LABEL_148:
      LODWORD(__u) = 0;
      long double v136 = frexp(v135, (int *)&__u);
      double v137 = ldexp(v136, 11);
      float v138 = ldexp(round(v137), (int)__u - 11);
LABEL_151:
      float v139 = v134 * v138;
      float v140 = 0.0;
      if (v139 != 0.0)
      {
        LODWORD(__u) = 0;
        long double v141 = frexp(v139, (int *)&__u);
        double v142 = ldexp(v141, 11);
        float v140 = ldexp(round(v142), (int)__u - 11);
      }
      uint64_t v143 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(v109, v140);
      *(_WORD *)(*v116 + 2 * (v163 + v122 + v123 + v114)) = MIL::Fp16::FromFloat(v143, v144);
      if (++v123 == v111) {
        goto LABEL_154;
      }
    }
  }
LABEL_160:
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v206);
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::~__value_func[abi:ne180100](v207);
  if (v184.__begin_)
  {
    v184.__end_ = v184.__begin_;
    operator delete(v184.__begin_);
  }
  if (__p)
  {
    uint64_t v186 = (float *)__p;
    operator delete(__p);
  }
  std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::~__value_func[abi:ne180100](v208);
  return std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v216);
}

void sub_210B57B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,uint64_t a51,void *a52)
{
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::~__value_func[abi:ne180100](&STACK[0x220]);
  if (__p) {
    operator delete(__p);
  }
  if (a52) {
    operator delete(a52);
  }
  int v54 = *(void **)a34;
  if (*(void *)a34)
  {
    *(void *)(a34 + 8) = v54;
    operator delete(v54);
  }
  std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::~__value_func[abi:ne180100](&STACK[0x240]);
  std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100]((void *)(v52 - 192));
  _Unwind_Resume(a1);
}

void *MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X6>, int a8@<W7>, unint64_t *a9@<X8>, char a10, char a11, char a12, uint64_t a13, MIL::Fp16 **a14, char a15, int a16, __int16 a17, int a18, char a19, uint64_t a20)
{
  uint64_t v217 = *MEMORY[0x263EF8340];
  __int16 v202 = a17;
  uint64_t v200 = a3;
  uint64_t v201 = a1;
  unint64_t v24 = *a7;
  if (*a7 == 3)
  {
    uint64_t v25 = *a2;
    unint64_t v26 = a2[1] - *a2;
    if (v26 <= 8) {
      goto LABEL_174;
    }
    uint64_t v27 = *(void *)(v25 + 8);
    uint64_t v198 = 0;
    uint64_t v199 = v27;
    goto LABEL_5;
  }
  uint64_t v27 = 1;
  uint64_t v198 = 0;
  uint64_t v199 = 1;
  uint64_t v25 = *a2;
  unint64_t v26 = a2[1] - *a2;
  if (v24 >= 2)
  {
LABEL_5:
    if (v26 > 0x10)
    {
      uint64_t v28 = *(void *)(v26 + v25 - 24);
      uint64_t v197 = 0;
      uint64_t v198 = v28;
      goto LABEL_8;
    }
LABEL_174:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v28 = 1;
  uint64_t v197 = 0;
  uint64_t v198 = 1;
  uint64_t v27 = 1;
  if (v26 <= 8) {
    goto LABEL_174;
  }
LABEL_8:
  uint64_t v29 = v26 + v25;
  uint64_t v30 = *(void *)(v29 - 16);
  uint64_t v196 = 0;
  uint64_t v197 = v30;
  uint64_t v195 = *(void *)(v29 - 8);
  uint64_t v196 = v195;
  uint64_t v194 = v195 * v30;
  uint64_t v192 = v195 * v30 * v28 * v27;
  uint64_t v193 = v195 * v30 * v28;
  Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v202);
  __int16 v191 = MIL::Fp16::FromFloat(Float, v32);
  v213[3] = 0;
  if (a15)
  {
    *(void *)&long long v206 = &v196;
    *((void *)&v206 + 1) = &v191;
    unint64_t v207 = &v201;
    uint64_t v208 = &v192;
    long long v209 = &v193;
    float v210 = &v194;
    v211 = &v195;
    std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(v213, (uint64_t)&v206);
  }
  else
  {
    *(void *)&long long v206 = &v199;
    *((void *)&v206 + 1) = &v198;
    unint64_t v207 = &v197;
    uint64_t v208 = &v201;
    long long v209 = &v192;
    float v210 = &v193;
    v211 = &v194;
    v212 = &v195;
    if (a8) {
      std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(v213, &v206);
    }
    else {
      std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(v213, &v206);
    }
  }
  v205[0] = &unk_26C316888;
  v205[3] = v205;
  if (a19)
  {
    *(void *)&long long v206 = &unk_26C316908;
    uint64_t v208 = (uint64_t *)&v206;
    std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::swap[abi:ne180100](&v206, v205);
    std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::~__value_func[abi:ne180100](&v206);
  }
  __int16 v34 = *(uint64_t **)a6;
  uint64_t v33 = *(void *)(a6 + 8);
  unint64_t v35 = v33 - *(void *)a6;
  if (v33 == *(void *)a6) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v36 = (uint64_t)v35 >> 3;
  uint64_t v164 = *v34;
  unint64_t v37 = *a7;
  if (*a7 == 3)
  {
    if (v35 <= 8) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v38 = v34[1];
    goto LABEL_21;
  }
  if (v37 >= 2)
  {
    uint64_t v38 = 1;
LABEL_21:
    uint64_t v167 = v38;
    if (v35 <= 0x10) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v39 = &v34[v36];
    uint64_t v40 = *(v39 - 2);
    uint64_t v168 = *(v39 - 3);
    unint64_t v41 = *(v39 - 1);
    if (v37 == 3)
    {
      if (a5[1] - *a5 <= 8uLL) {
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v42 = *(void *)(*a5 + 8);
    }
    else
    {
      uint64_t v42 = 1;
    }
    uint64_t v170 = v42;
    uint64_t v43 = *a5;
    unint64_t v44 = a5[1] - *a5;
    if (v44 <= 0x18) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    unint64_t v156 = v41 * v40;
    uint64_t v45 = *(void *)(v44 + v43 - 32);
    goto LABEL_31;
  }
  if (v35 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v43 = *a5;
  unint64_t v44 = a5[1] - *a5;
  if (v44 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v46 = &v34[v36];
  uint64_t v40 = *(v46 - 2);
  unint64_t v41 = *(v46 - 1);
  unint64_t v156 = v41 * v40;
  uint64_t v45 = 1;
  uint64_t v167 = 1;
  uint64_t v168 = 1;
  uint64_t v170 = 1;
LABEL_31:
  uint64_t v47 = v44 + v43;
  uint64_t v48 = *(void *)(v47 - 24);
  uint64_t v49 = *(void *)(v47 - 16);
  uint64_t v190 = *(void *)(v47 - 8);
  uint64_t v179 = v49;
  int v163 = v190;
  uint64_t v189 = v190 * v49;
  uint64_t v174 = v48;
  uint64_t v188 = v190 * v49 * v48;
  uint64_t v172 = v45;
  uint64_t v187 = v188 * v45;
  uint64_t v186 = v188 * v45 * v170;
  *(void *)&long long v206 = &v186;
  *((void *)&v206 + 1) = &v187;
  unint64_t v207 = &v188;
  uint64_t v208 = &v189;
  long long v209 = &v190;
  unint64_t v50 = a7[4];
  if (v37 >= 3)
  {
    unint64_t v51 = a7[3];
    unint64_t v52 = v50 - v51;
    if (v50 - v51 <= 8) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v53 = *(_DWORD *)(v50 - 12);
    goto LABEL_37;
  }
  unint64_t v51 = a7[3];
  if (v37 == 2)
  {
    unint64_t v52 = v50 - v51;
    if (v50 - v51 <= 4) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v53 = 1;
LABEL_37:
    int v154 = v53;
    int v54 = *(_DWORD *)(v52 + v51 - 8);
    goto LABEL_39;
  }
  int v54 = 1;
  int v154 = 1;
LABEL_39:
  int v155 = v54;
  int v166 = a7;
  if (v50 == v51) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  int v157 = *(_DWORD *)(v50 - 4);
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  std::vector<unsigned char>::reserve(a9, v167 * v164 * v168 * v40 * v41);
  uint64_t v162 = v40;
  char v185 = 0;
  std::vector<unsigned char>::assign((char **)a9, v167 * v164 * v168 * v40 * v41, &v185);
  if (a4 == 4) {
    int v55 = 20;
  }
  else {
    int v55 = 10;
  }
  int v56 = v55 + a10;
  double v57 = ldexp(1.0, v56);
  double v58 = ldexp(1.0, v56 + a11);
  unint64_t v59 = v41;
  if (*((unsigned char *)v166 + 16)) {
    v41 /= v166[1];
  }
  unint64_t v161 = v59;
  std::string __p = 0;
  int v183 = 0;
  std::vector<int> v184 = 0;
  std::vector<float>::reserve(&__p, v41);
  unint64_t v61 = *a14;
  unint64_t v60 = a14[1];
  if (v60 - *a14 == 2)
  {
    MIL::Fp16::GetFloat(*a14);
    float v63 = exp2(-(double)(v56 + a12)) * v62;
    *(float *)&long long __u = v63;
    std::vector<float>::assign((char **)&__p, v41, &__u);
  }
  else if (v61 != v60)
  {
    double v64 = exp2(-(double)(v56 + a12));
    do
    {
      MIL::Fp16::GetFloat(v61);
      float v66 = v64 * v65;
      float v67 = v183;
      if (v183 >= (float *)v184)
      {
        __int16 v69 = (float *)__p;
        uint64_t v70 = ((char *)v183 - (unsigned char *)__p) >> 2;
        unint64_t v71 = v70 + 1;
        if ((unint64_t)(v70 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v72 = v184 - (unsigned char *)__p;
        if ((v184 - (unsigned char *)__p) >> 1 > v71) {
          unint64_t v71 = v72 >> 1;
        }
        if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v73 = v71;
        }
        if (v73)
        {
          unint64_t v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v184, v73);
          __int16 v69 = (float *)__p;
          float v67 = v183;
        }
        else
        {
          unint64_t v74 = 0;
        }
        __int16 v75 = (float *)&v74[4 * v70];
        *__int16 v75 = v66;
        unsigned int v68 = v75 + 1;
        while (v67 != v69)
        {
          int v76 = *((_DWORD *)v67-- - 1);
          *((_DWORD *)v75-- - 1) = v76;
        }
        std::string __p = v75;
        int v183 = v68;
        std::vector<int> v184 = &v74[4 * v73];
        if (v69) {
          operator delete(v69);
        }
      }
      else
      {
        float *v183 = v66;
        unsigned int v68 = v67 + 1;
      }
      int v183 = v68;
      unint64_t v61 = (MIL::Fp16 *)((char *)v61 + 2);
    }
    while (v61 != v60);
  }
  memset(&v181, 0, sizeof(v181));
  std::vector<int>::reserve(&v181, v41);
  if (a15)
  {
    LODWORD(__u) = 0;
    std::vector<int>::assign(&v181, v41, (std::vector<int>::const_reference)&__u);
  }
  else
  {
    float v77 = v58;
    if (*(void *)(a13 + 8) - *(void *)a13 == 2)
    {
      MIL::Fp16::GetFloat(*(MIL::Fp16 **)a13);
      float v79 = v78 * v77;
      unsigned int v80 = llroundf(v79);
      if (fabsf(v79) < 1.0) {
        unsigned int v80 = 0;
      }
      LODWORD(__u) = v80;
      std::vector<int>::assign(&v181, v41, (std::vector<int>::const_reference)&__u);
    }
    else if (v41)
    {
      for (uint64_t i = 0; i != v41; ++i)
      {
        MIL::Fp16::GetFloat((MIL::Fp16 *)(*(void *)a13 + 2 * i));
        float v83 = v82 * v77;
        unsigned int v84 = llroundf(v83);
        if (fabsf(v83) >= 1.0) {
          int v85 = v84;
        }
        else {
          int v85 = 0;
        }
        std::vector<int>::pointer end = v181.__end_;
        if (v181.__end_ >= v181.__end_cap_.__value_)
        {
          std::vector<int>::pointer begin = v181.__begin_;
          int64_t v89 = v181.__end_ - v181.__begin_;
          unint64_t v90 = v89 + 1;
          if ((unint64_t)(v89 + 1) >> 62) {
            std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
          }
          int64_t v91 = (char *)v181.__end_cap_.__value_ - (char *)v181.__begin_;
          if (((char *)v181.__end_cap_.__value_ - (char *)v181.__begin_) >> 1 > v90) {
            unint64_t v90 = v91 >> 1;
          }
          if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v92 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v92 = v90;
          }
          if (v92)
          {
            unint64_t v93 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v181.__end_cap_, v92);
            std::vector<int>::pointer begin = v181.__begin_;
            std::vector<int>::pointer end = v181.__end_;
          }
          else
          {
            unint64_t v93 = 0;
          }
          uint64_t v94 = (int *)&v93[4 * v89];
          *uint64_t v94 = v85;
          __int16 v87 = v94 + 1;
          while (end != begin)
          {
            int v95 = *--end;
            *--uint64_t v94 = v95;
          }
          v181.__begin_ = v94;
          v181.__end_ = v87;
          v181.__end_cap_.__value_ = (int *)&v93[4 * v92];
          if (begin) {
            operator delete(begin);
          }
        }
        else
        {
          *v181.__end_ = v85;
          __int16 v87 = end + 1;
        }
        v181.__end_ = v87;
      }
    }
  }
  int v96 = (char *)v166[10];
  if (*v166 == 3)
  {
    unint64_t v97 = (char *)v166[9];
    if (v96 == v97) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v98 = *(_DWORD *)v97;
    goto LABEL_99;
  }
  unint64_t v97 = (char *)v166[9];
  if (*v166 >= 2)
  {
    int v98 = 0;
LABEL_99:
    unint64_t v99 = v96 - v97;
    if (v99 <= 0xC) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v100 = *(_DWORD *)&v97[v99 - 16];
    goto LABEL_103;
  }
  unint64_t v99 = v96 - v97;
  if (v99 <= 4) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  int v100 = 0;
  int v98 = 0;
LABEL_103:
  int v101 = *(_DWORD *)&v97[v99 - 8];
  v204[3] = 0;
  switch(a4)
  {
    case 4:
      int v102 = &unk_26C316988;
      break;
    case 9:
      int v102 = &unk_26C316A88;
      break;
    case 14:
      int v102 = &unk_26C316A08;
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid kernel dtype");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  *(void *)&long long __u = v102;
  p_u = &__u;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::swap[abi:ne180100](&__u, v204);
  int v103 = std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::~__value_func[abi:ne180100](&__u);
  v203[3] = 0;
  if (a15)
  {
    *(void *)&long long __u = &v196;
    *((void *)&__u + 1) = a13;
    uint64_t v215 = &v200;
    p_u = &v206;
    std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(v203, &__u);
  }
  else
  {
    *(void *)&long long __u = &unk_26C316B88;
    *((void *)&__u + 1) = &v200;
    uint64_t v215 = (uint64_t *)&v206;
    p_u = &__u;
    std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v103, v203);
    std::__function::__value_func<float const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](&__u);
  }
  uint64_t v104 = v166;
  unint64_t v105 = v166[1];
  if (v105)
  {
    int v176 = 0;
    uint64_t v106 = 0;
    uint64_t v107 = a20;
    uint64_t v108 = v163;
    uint64_t v109 = v163;
    float v110 = v57;
    int v148 = -v98;
    int v152 = -v101;
    while (1)
    {
      int v111 = *((unsigned char *)v104 + 16) ? 0 : v106;
      int v175 = v111;
      if (v164) {
        break;
      }
LABEL_166:
      ++v106;
      v176 += v179;
      if (v105 <= v106) {
        goto LABEL_167;
      }
    }
    uint64_t v178 = 0;
    uint64_t v145 = v106;
    uint64_t v112 = v106 * v108;
    if (*((unsigned char *)v104 + 16)) {
      uint64_t v113 = 0;
    }
    else {
      uint64_t v113 = (int)v106 * (int)v108;
    }
    uint64_t v114 = a9;
    unint64_t v116 = v161;
    uint64_t v115 = v162;
    uint64_t v150 = v113;
    uint64_t v151 = v106 * v108;
    while (!v167)
    {
LABEL_164:
      if (++v178 == v164)
      {
        uint64_t v104 = v166;
        unint64_t v105 = v166[1];
        uint64_t v108 = v163;
        uint64_t v106 = v145;
        goto LABEL_166;
      }
    }
    uint64_t v117 = 0;
    while (!v168)
    {
LABEL_163:
      if (++v117 == v167) {
        goto LABEL_164;
      }
    }
    uint64_t v118 = 0;
    int v169 = v148 + v154 * v117;
    uint64_t v149 = (v167 * v178 + v117) * v168;
    uint64_t v146 = v117;
    while (!v115)
    {
LABEL_162:
      ++v118;
      uint64_t v117 = v146;
      if (v118 == v168) {
        goto LABEL_163;
      }
    }
    uint64_t v119 = 0;
    int v171 = v155 * v118 - v100;
    unint64_t v159 = v156 * (v149 + v118);
    uint64_t v147 = v118;
    while (v163 < 1)
    {
LABEL_161:
      ++v119;
      uint64_t v118 = v147;
      if (v119 == v115) {
        goto LABEL_162;
      }
    }
    uint64_t v120 = 0;
    int v173 = v152 + v157 * v119;
    uint64_t v160 = v116 * v119;
    uint64_t v153 = v119;
    while (1)
    {
      int v180 = 0;
      int v121 = v181.__begin_[v120 + v113];
      int v180 = v121;
      if (v170)
      {
        uint64_t v158 = v120 + v113;
        uint64_t v122 = 0;
        int v123 = 0;
        uint64_t v124 = v172;
        do
        {
          if (v124)
          {
            uint64_t v125 = 0;
            do
            {
              if (v174)
              {
                for (uint64_t j = 0; j != v174; ++j)
                {
                  if (v179)
                  {
                    for (uint64_t k = 0; k != v179; ++k)
                    {
                      __int16 v128 = std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()((uint64_t)v213, v178, v169 + (int)v122, v171 + (int)v125, v173 + (int)j, v176 + (int)k, v120);
                      __int16 v129 = std::function<MIL::Fp16 ()(MIL::Fp16)>::operator()((uint64_t)v205, v128);
                      std::function<float const ()(int,int,int,int,int,int)>::operator()((uint64_t)v203, v175, v122, v125, j, k, v120);
                      int v123 = std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator()((uint64_t)v204, (uint64_t)&v180, v123, v129, a10, v130, v110);
                    }
                  }
                }
              }
              ++v125;
              uint64_t v124 = v172;
            }
            while (v125 != v172);
          }
          ++v122;
        }
        while (v122 != v170);
        float v131 = *((float *)__p + v158);
        if (v123)
        {
          double v132 = INFINITY;
          if (v123 == 2) {
            double v132 = -INFINITY;
          }
          uint64_t v114 = a9;
          unint64_t v116 = v161;
          uint64_t v115 = v162;
          uint64_t v109 = v163;
          uint64_t v107 = a20;
          uint64_t v113 = v150;
          uint64_t v112 = v151;
          uint64_t v119 = v153;
          goto LABEL_148;
        }
        int v121 = v180;
        uint64_t v114 = a9;
        unint64_t v116 = v161;
        uint64_t v115 = v162;
        uint64_t v109 = v163;
        uint64_t v107 = a20;
        uint64_t v113 = v150;
        uint64_t v112 = v151;
        uint64_t v119 = v153;
        if (!v180)
        {
LABEL_150:
          float v135 = 0.0;
          goto LABEL_151;
        }
      }
      else
      {
        float v131 = *((float *)__p + v120 + v113);
        if (!v121) {
          goto LABEL_150;
        }
      }
      double v132 = (double)v121;
LABEL_148:
      LODWORD(__u) = 0;
      long double v133 = frexp(v132, (int *)&__u);
      double v134 = ldexp(v133, 11);
      float v135 = ldexp(round(v134), (int)__u - 11);
LABEL_151:
      float v136 = v131 * v135;
      float v137 = 0.0;
      if (v136 != 0.0)
      {
        LODWORD(__u) = 0;
        long double v138 = frexp(v136, (int *)&__u);
        double v139 = ldexp(v138, 11);
        float v137 = ldexp(round(v139), (int)__u - 11);
      }
      std::function<float ()(float)>::operator()(v107, v137);
      if (v140 == INFINITY)
      {
        LOBYTE(v141) = -1;
      }
      else if (v140 == -INFINITY)
      {
        LOBYTE(v141) = 0;
      }
      else
      {
        int v142 = llroundf(v140);
        if (v142 >= 255) {
          int v142 = 255;
        }
        int v141 = v142 & ~(v142 >> 31);
      }
      *(unsigned char *)(*v114 + v160 + v159 + v120 + v112) = v141;
      if (++v120 == v109) {
        goto LABEL_161;
      }
    }
  }
LABEL_167:
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v203);
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::~__value_func[abi:ne180100](v204);
  if (v181.__begin_)
  {
    v181.__end_ = v181.__begin_;
    operator delete(v181.__begin_);
  }
  if (__p)
  {
    int v183 = (float *)__p;
    operator delete(__p);
  }
  std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::~__value_func[abi:ne180100](v205);
  return std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v213);
}

void sub_210B58A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,uint64_t a51,void *a52)
{
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::~__value_func[abi:ne180100](&STACK[0x220]);
  if (__p) {
    operator delete(__p);
  }
  if (a52) {
    operator delete(a52);
  }
  int v54 = *(void **)a34;
  if (*(void *)a34)
  {
    *(void *)(a34 + 8) = v54;
    operator delete(v54);
  }
  std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::~__value_func[abi:ne180100](&STACK[0x240]);
  std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100]((void *)(v52 - 192));
  _Unwind_Resume(a1);
}

void *MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X6>, int a8@<W7>, unint64_t *a9@<X8>, char a10, char a11, char a12, uint64_t a13, MIL::Fp16 **a14, char a15, int a16, __int16 a17, int a18, char a19, uint64_t a20)
{
  uint64_t v216 = *MEMORY[0x263EF8340];
  __int16 v201 = a17;
  uint64_t v199 = a3;
  uint64_t v200 = a1;
  unint64_t v24 = *a7;
  if (*a7 == 3)
  {
    uint64_t v25 = *a2;
    unint64_t v26 = a2[1] - *a2;
    if (v26 <= 8) {
      goto LABEL_175;
    }
    uint64_t v27 = *(void *)(v25 + 8);
    uint64_t v197 = 0;
    uint64_t v198 = v27;
    goto LABEL_5;
  }
  uint64_t v27 = 1;
  uint64_t v197 = 0;
  uint64_t v198 = 1;
  uint64_t v25 = *a2;
  unint64_t v26 = a2[1] - *a2;
  if (v24 >= 2)
  {
LABEL_5:
    if (v26 > 0x10)
    {
      uint64_t v28 = *(void *)(v26 + v25 - 24);
      uint64_t v196 = 0;
      uint64_t v197 = v28;
      goto LABEL_8;
    }
LABEL_175:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v28 = 1;
  uint64_t v196 = 0;
  uint64_t v197 = 1;
  uint64_t v27 = 1;
  if (v26 <= 8) {
    goto LABEL_175;
  }
LABEL_8:
  uint64_t v29 = v26 + v25;
  uint64_t v30 = *(void *)(v29 - 16);
  uint64_t v195 = 0;
  uint64_t v196 = v30;
  uint64_t v194 = *(void *)(v29 - 8);
  uint64_t v195 = v194;
  uint64_t v193 = v194 * v30;
  uint64_t v191 = v194 * v30 * v28 * v27;
  uint64_t v192 = v194 * v30 * v28;
  Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v201);
  __int16 v190 = MIL::Fp16::FromFloat(Float, v32);
  v212[3] = 0;
  if (a15)
  {
    *(void *)&long long v205 = &v195;
    *((void *)&v205 + 1) = &v190;
    long long v206 = &v200;
    unint64_t v207 = &v191;
    uint64_t v208 = &v192;
    long long v209 = &v193;
    float v210 = &v194;
    std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(v212, (uint64_t)&v205);
  }
  else
  {
    *(void *)&long long v205 = &v198;
    *((void *)&v205 + 1) = &v197;
    long long v206 = &v196;
    unint64_t v207 = &v200;
    uint64_t v208 = &v191;
    long long v209 = &v192;
    float v210 = &v193;
    v211 = &v194;
    if (a8) {
      std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(v212, &v205);
    }
    else {
      std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(v212, &v205);
    }
  }
  v204[0] = &unk_26C316D88;
  v204[3] = v204;
  if (a19)
  {
    *(void *)&long long v205 = &unk_26C316E08;
    unint64_t v207 = (uint64_t *)&v205;
    std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::swap[abi:ne180100](&v205, v204);
    std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::~__value_func[abi:ne180100](&v205);
  }
  __int16 v34 = *(uint64_t **)a6;
  uint64_t v33 = *(void *)(a6 + 8);
  unint64_t v35 = v33 - *(void *)a6;
  if (v33 == *(void *)a6) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v36 = (uint64_t)v35 >> 3;
  uint64_t v163 = *v34;
  unint64_t v37 = *a7;
  if (*a7 == 3)
  {
    if (v35 <= 8) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v38 = v34[1];
    goto LABEL_21;
  }
  if (v37 >= 2)
  {
    uint64_t v38 = 1;
LABEL_21:
    uint64_t v166 = v38;
    if (v35 <= 0x10) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v39 = &v34[v36];
    uint64_t v40 = *(v39 - 2);
    uint64_t v167 = *(v39 - 3);
    unint64_t v41 = *(v39 - 1);
    if (v37 == 3)
    {
      if (a5[1] - *a5 <= 8uLL) {
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v42 = *(void *)(*a5 + 8);
    }
    else
    {
      uint64_t v42 = 1;
    }
    uint64_t v169 = v42;
    uint64_t v43 = *a5;
    unint64_t v44 = a5[1] - *a5;
    if (v44 <= 0x18) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    unint64_t v155 = v41 * v40;
    uint64_t v45 = *(void *)(v44 + v43 - 32);
    goto LABEL_31;
  }
  if (v35 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v43 = *a5;
  unint64_t v44 = a5[1] - *a5;
  if (v44 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v46 = &v34[v36];
  uint64_t v40 = *(v46 - 2);
  unint64_t v41 = *(v46 - 1);
  unint64_t v155 = v41 * v40;
  uint64_t v45 = 1;
  uint64_t v166 = 1;
  uint64_t v167 = 1;
  uint64_t v169 = 1;
LABEL_31:
  uint64_t v47 = v44 + v43;
  uint64_t v48 = *(void *)(v47 - 24);
  uint64_t v49 = *(void *)(v47 - 16);
  uint64_t v189 = *(void *)(v47 - 8);
  uint64_t v178 = v49;
  int v162 = v189;
  uint64_t v188 = v189 * v49;
  uint64_t v173 = v48;
  uint64_t v187 = v189 * v49 * v48;
  uint64_t v171 = v45;
  uint64_t v186 = v187 * v45;
  uint64_t v185 = v187 * v45 * v169;
  *(void *)&long long v205 = &v185;
  *((void *)&v205 + 1) = &v186;
  long long v206 = &v187;
  unint64_t v207 = &v188;
  uint64_t v208 = &v189;
  unint64_t v50 = a7[4];
  if (v37 >= 3)
  {
    unint64_t v51 = a7[3];
    unint64_t v52 = v50 - v51;
    if (v50 - v51 <= 8) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v53 = *(_DWORD *)(v50 - 12);
    goto LABEL_37;
  }
  unint64_t v51 = a7[3];
  if (v37 == 2)
  {
    unint64_t v52 = v50 - v51;
    if (v50 - v51 <= 4) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v53 = 1;
LABEL_37:
    int v153 = v53;
    int v54 = *(_DWORD *)(v52 + v51 - 8);
    goto LABEL_39;
  }
  int v54 = 1;
  int v153 = 1;
LABEL_39:
  int v154 = v54;
  uint64_t v165 = a7;
  if (v50 == v51) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  int v156 = *(_DWORD *)(v50 - 4);
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  std::vector<unsigned char>::reserve(a9, v166 * v163 * v167 * v40 * v41);
  uint64_t v161 = v40;
  char v184 = 0;
  std::vector<unsigned char>::assign((char **)a9, v166 * v163 * v167 * v40 * v41, &v184);
  if (a4 == 4) {
    int v55 = 20;
  }
  else {
    int v55 = 10;
  }
  int v56 = v55 + a10;
  double v57 = ldexp(1.0, v56);
  double v58 = ldexp(1.0, v56 + a11);
  unint64_t v59 = v41;
  if (*((unsigned char *)v165 + 16)) {
    v41 /= v165[1];
  }
  unint64_t v160 = v59;
  std::string __p = 0;
  uint64_t v182 = 0;
  int v183 = 0;
  std::vector<float>::reserve(&__p, v41);
  unint64_t v61 = *a14;
  unint64_t v60 = a14[1];
  if (v60 - *a14 == 2)
  {
    MIL::Fp16::GetFloat(*a14);
    float v63 = exp2(-(double)(v56 + a12)) * v62;
    *(float *)&long long __u = v63;
    std::vector<float>::assign((char **)&__p, v41, &__u);
  }
  else if (v61 != v60)
  {
    double v64 = exp2(-(double)(v56 + a12));
    do
    {
      MIL::Fp16::GetFloat(v61);
      float v66 = v64 * v65;
      float v67 = v182;
      if (v182 >= (float *)v183)
      {
        __int16 v69 = (float *)__p;
        uint64_t v70 = ((char *)v182 - (unsigned char *)__p) >> 2;
        unint64_t v71 = v70 + 1;
        if ((unint64_t)(v70 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v72 = v183 - (unsigned char *)__p;
        if ((v183 - (unsigned char *)__p) >> 1 > v71) {
          unint64_t v71 = v72 >> 1;
        }
        if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v73 = v71;
        }
        if (v73)
        {
          unint64_t v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v183, v73);
          __int16 v69 = (float *)__p;
          float v67 = v182;
        }
        else
        {
          unint64_t v74 = 0;
        }
        __int16 v75 = (float *)&v74[4 * v70];
        *__int16 v75 = v66;
        unsigned int v68 = v75 + 1;
        while (v67 != v69)
        {
          int v76 = *((_DWORD *)v67-- - 1);
          *((_DWORD *)v75-- - 1) = v76;
        }
        std::string __p = v75;
        uint64_t v182 = v68;
        int v183 = &v74[4 * v73];
        if (v69) {
          operator delete(v69);
        }
      }
      else
      {
        *uint64_t v182 = v66;
        unsigned int v68 = v67 + 1;
      }
      uint64_t v182 = v68;
      unint64_t v61 = (MIL::Fp16 *)((char *)v61 + 2);
    }
    while (v61 != v60);
  }
  memset(&v180, 0, sizeof(v180));
  std::vector<int>::reserve(&v180, v41);
  if (a15)
  {
    LODWORD(__u) = 0;
    std::vector<int>::assign(&v180, v41, (std::vector<int>::const_reference)&__u);
  }
  else
  {
    float v77 = v58;
    if (*(void *)(a13 + 8) - *(void *)a13 == 2)
    {
      MIL::Fp16::GetFloat(*(MIL::Fp16 **)a13);
      float v79 = v78 * v77;
      unsigned int v80 = llroundf(v79);
      if (fabsf(v79) < 1.0) {
        unsigned int v80 = 0;
      }
      LODWORD(__u) = v80;
      std::vector<int>::assign(&v180, v41, (std::vector<int>::const_reference)&__u);
    }
    else if (v41)
    {
      for (uint64_t i = 0; i != v41; ++i)
      {
        MIL::Fp16::GetFloat((MIL::Fp16 *)(*(void *)a13 + 2 * i));
        float v83 = v82 * v77;
        unsigned int v84 = llroundf(v83);
        if (fabsf(v83) >= 1.0) {
          int v85 = v84;
        }
        else {
          int v85 = 0;
        }
        std::vector<int>::pointer end = v180.__end_;
        if (v180.__end_ >= v180.__end_cap_.__value_)
        {
          std::vector<int>::pointer begin = v180.__begin_;
          int64_t v89 = v180.__end_ - v180.__begin_;
          unint64_t v90 = v89 + 1;
          if ((unint64_t)(v89 + 1) >> 62) {
            std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
          }
          int64_t v91 = (char *)v180.__end_cap_.__value_ - (char *)v180.__begin_;
          if (((char *)v180.__end_cap_.__value_ - (char *)v180.__begin_) >> 1 > v90) {
            unint64_t v90 = v91 >> 1;
          }
          if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v92 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v92 = v90;
          }
          if (v92)
          {
            unint64_t v93 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v180.__end_cap_, v92);
            std::vector<int>::pointer begin = v180.__begin_;
            std::vector<int>::pointer end = v180.__end_;
          }
          else
          {
            unint64_t v93 = 0;
          }
          uint64_t v94 = (int *)&v93[4 * v89];
          *uint64_t v94 = v85;
          __int16 v87 = v94 + 1;
          while (end != begin)
          {
            int v95 = *--end;
            *--uint64_t v94 = v95;
          }
          v180.__begin_ = v94;
          v180.__end_ = v87;
          v180.__end_cap_.__value_ = (int *)&v93[4 * v92];
          if (begin) {
            operator delete(begin);
          }
        }
        else
        {
          *v180.__end_ = v85;
          __int16 v87 = end + 1;
        }
        v180.__end_ = v87;
      }
    }
  }
  int v96 = (char *)v165[10];
  if (*v165 == 3)
  {
    unint64_t v97 = (char *)v165[9];
    if (v96 == v97) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v98 = *(_DWORD *)v97;
    goto LABEL_99;
  }
  unint64_t v97 = (char *)v165[9];
  if (*v165 >= 2)
  {
    int v98 = 0;
LABEL_99:
    unint64_t v99 = v96 - v97;
    if (v99 <= 0xC) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v100 = *(_DWORD *)&v97[v99 - 16];
    goto LABEL_103;
  }
  unint64_t v99 = v96 - v97;
  if (v99 <= 4) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  int v100 = 0;
  int v98 = 0;
LABEL_103:
  int v101 = *(_DWORD *)&v97[v99 - 8];
  v203[3] = 0;
  switch(a4)
  {
    case 4:
      int v102 = &unk_26C316E88;
      break;
    case 9:
      int v102 = &unk_26C316F88;
      break;
    case 14:
      int v102 = &unk_26C316F08;
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid kernel dtype");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  *(void *)&long long __u = v102;
  p_u = &__u;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::swap[abi:ne180100](&__u, v203);
  int v103 = std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::~__value_func[abi:ne180100](&__u);
  v202[3] = 0;
  if (a15)
  {
    *(void *)&long long __u = &v195;
    *((void *)&__u + 1) = a13;
    uint64_t v214 = &v199;
    p_u = &v205;
    std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(v202, &__u);
  }
  else
  {
    *(void *)&long long __u = &unk_26C317088;
    *((void *)&__u + 1) = &v199;
    uint64_t v214 = (uint64_t *)&v205;
    p_u = &__u;
    std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v103, v202);
    std::__function::__value_func<float const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](&__u);
  }
  uint64_t v104 = v165;
  unint64_t v105 = v165[1];
  if (v105)
  {
    int v175 = 0;
    uint64_t v106 = 0;
    uint64_t v107 = a20;
    uint64_t v108 = v162;
    uint64_t v109 = v162;
    float v110 = v57;
    int v147 = -v98;
    int v151 = -v101;
    while (1)
    {
      int v111 = *((unsigned char *)v104 + 16) ? 0 : v106;
      int v174 = v111;
      if (v163) {
        break;
      }
LABEL_167:
      ++v106;
      v175 += v178;
      if (v105 <= v106) {
        goto LABEL_168;
      }
    }
    uint64_t v177 = 0;
    uint64_t v144 = v106;
    uint64_t v112 = v106 * v108;
    if (*((unsigned char *)v104 + 16)) {
      uint64_t v113 = 0;
    }
    else {
      uint64_t v113 = (int)v106 * (int)v108;
    }
    uint64_t v114 = a9;
    unint64_t v116 = v160;
    uint64_t v115 = v161;
    uint64_t v149 = v113;
    uint64_t v150 = v106 * v108;
    while (!v166)
    {
LABEL_165:
      if (++v177 == v163)
      {
        uint64_t v104 = v165;
        unint64_t v105 = v165[1];
        uint64_t v108 = v162;
        uint64_t v106 = v144;
        goto LABEL_167;
      }
    }
    uint64_t v117 = 0;
    while (!v167)
    {
LABEL_164:
      if (++v117 == v166) {
        goto LABEL_165;
      }
    }
    uint64_t v118 = 0;
    int v168 = v147 + v153 * v117;
    uint64_t v148 = (v166 * v177 + v117) * v167;
    uint64_t v145 = v117;
    while (!v115)
    {
LABEL_163:
      ++v118;
      uint64_t v117 = v145;
      if (v118 == v167) {
        goto LABEL_164;
      }
    }
    uint64_t v119 = 0;
    int v170 = v154 * v118 - v100;
    unint64_t v158 = v155 * (v148 + v118);
    uint64_t v146 = v118;
    while (v162 < 1)
    {
LABEL_162:
      ++v119;
      uint64_t v118 = v146;
      if (v119 == v115) {
        goto LABEL_163;
      }
    }
    uint64_t v120 = 0;
    int v172 = v151 + v156 * v119;
    uint64_t v159 = v116 * v119;
    uint64_t v152 = v119;
    while (1)
    {
      int v179 = 0;
      int v121 = v180.__begin_[v120 + v113];
      int v179 = v121;
      if (v169)
      {
        uint64_t v157 = v120 + v113;
        uint64_t v122 = 0;
        int v123 = 0;
        uint64_t v124 = v171;
        do
        {
          if (v124)
          {
            uint64_t v125 = 0;
            do
            {
              if (v173)
              {
                for (uint64_t j = 0; j != v173; ++j)
                {
                  if (v178)
                  {
                    for (uint64_t k = 0; k != v178; ++k)
                    {
                      __int16 v128 = std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()((uint64_t)v212, v177, v168 + (int)v122, v170 + (int)v125, v172 + (int)j, v175 + (int)k, v120);
                      __int16 v129 = std::function<MIL::Fp16 ()(MIL::Fp16)>::operator()((uint64_t)v204, v128);
                      std::function<float const ()(int,int,int,int,int,int)>::operator()((uint64_t)v202, v174, v122, v125, j, k, v120);
                      int v123 = std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator()((uint64_t)v203, (uint64_t)&v179, v123, v129, a10, v130, v110);
                    }
                  }
                }
              }
              ++v125;
              uint64_t v124 = v171;
            }
            while (v125 != v171);
          }
          ++v122;
        }
        while (v122 != v169);
        float v131 = *((float *)__p + v157);
        if (v123)
        {
          double v132 = INFINITY;
          if (v123 == 2) {
            double v132 = -INFINITY;
          }
          uint64_t v114 = a9;
          unint64_t v116 = v160;
          uint64_t v115 = v161;
          uint64_t v109 = v162;
          uint64_t v107 = a20;
          uint64_t v113 = v149;
          uint64_t v112 = v150;
          uint64_t v119 = v152;
          goto LABEL_148;
        }
        int v121 = v179;
        uint64_t v114 = a9;
        unint64_t v116 = v160;
        uint64_t v115 = v161;
        uint64_t v109 = v162;
        uint64_t v107 = a20;
        uint64_t v113 = v149;
        uint64_t v112 = v150;
        uint64_t v119 = v152;
        if (!v179)
        {
LABEL_150:
          float v135 = 0.0;
          goto LABEL_151;
        }
      }
      else
      {
        float v131 = *((float *)__p + v120 + v113);
        if (!v121) {
          goto LABEL_150;
        }
      }
      double v132 = (double)v121;
LABEL_148:
      LODWORD(__u) = 0;
      long double v133 = frexp(v132, (int *)&__u);
      double v134 = ldexp(v133, 11);
      float v135 = ldexp(round(v134), (int)__u - 11);
LABEL_151:
      float v136 = v131 * v135;
      float v137 = 0.0;
      if (v136 != 0.0)
      {
        LODWORD(__u) = 0;
        long double v138 = frexp(v136, (int *)&__u);
        double v139 = ldexp(v138, 11);
        float v137 = ldexp(round(v139), (int)__u - 11);
      }
      std::function<float ()(float)>::operator()(v107, v137);
      if (v140 == INFINITY)
      {
        LOBYTE(v141) = 127;
      }
      else if (v140 == -INFINITY)
      {
        LOBYTE(v141) = 0x80;
      }
      else
      {
        int v141 = llroundf(v140);
        if (v141 >= 127) {
          int v141 = 127;
        }
        if (v141 <= -128) {
          LOBYTE(v141) = 0x80;
        }
      }
      *(unsigned char *)(*v114 + v159 + v158 + v120 + v112) = v141;
      if (++v120 == v109) {
        goto LABEL_162;
      }
    }
  }
LABEL_168:
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v202);
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::~__value_func[abi:ne180100](v203);
  if (v180.__begin_)
  {
    v180.__end_ = v180.__begin_;
    operator delete(v180.__begin_);
  }
  if (__p)
  {
    uint64_t v182 = (float *)__p;
    operator delete(__p);
  }
  std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::~__value_func[abi:ne180100](v204);
  return std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v212);
}

void sub_210B599D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,uint64_t a51,void *a52)
{
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::~__value_func[abi:ne180100](&STACK[0x220]);
  if (__p) {
    operator delete(__p);
  }
  if (a52) {
    operator delete(a52);
  }
  int v54 = *(void **)a34;
  if (*(void *)a34)
  {
    *(void *)(a34 + 8) = v54;
    operator delete(v54);
  }
  std::__function::__value_func<MIL::Fp16 ()(MIL::Fp16)>::~__value_func[abi:ne180100](&STACK[0x240]);
  std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100]((void *)(v52 - 192));
  _Unwind_Resume(a1);
}

void *MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, char a10, char a11, char a12, uint64_t a13, MIL::Fp16 **a14, char a15, int a16, __int16 a17, uint64_t a18, uint64_t a19)
{
  uint64_t v220 = *MEMORY[0x263EF8340];
  __int16 v212 = a17;
  uint64_t v210 = a3;
  uint64_t v211 = a1;
  unint64_t v23 = *a7;
  if (*a7 == 3)
  {
    uint64_t v24 = *a2;
    unint64_t v25 = a2[1] - *a2;
    if (v25 <= 8) {
      goto LABEL_172;
    }
    uint64_t v26 = *(void *)(v24 + 8);
    uint64_t v208 = 0;
    uint64_t v209 = v26;
    goto LABEL_5;
  }
  uint64_t v26 = 1;
  uint64_t v208 = 0;
  uint64_t v209 = 1;
  uint64_t v24 = *a2;
  unint64_t v25 = a2[1] - *a2;
  if (v23 >= 2)
  {
LABEL_5:
    if (v25 > 0x10)
    {
      uint64_t v27 = *(void *)(v25 + v24 - 24);
      uint64_t v207 = 0;
      uint64_t v208 = v27;
      goto LABEL_8;
    }
LABEL_172:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v27 = 1;
  uint64_t v207 = 0;
  uint64_t v208 = 1;
  uint64_t v26 = 1;
  if (v25 <= 8) {
    goto LABEL_172;
  }
LABEL_8:
  uint64_t v28 = v25 + v24;
  uint64_t v29 = *(void *)(v28 - 16);
  uint64_t v206 = 0;
  uint64_t v207 = v29;
  uint64_t v205 = *(void *)(v28 - 8);
  uint64_t v206 = v205;
  uint64_t v30 = v205 * v29;
  uint64_t v203 = v30 * v27;
  uint64_t v204 = v30;
  uint64_t v202 = v30 * v27 * v26;
  char v201 = 0;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v212);
  if (v31 == INFINITY)
  {
    LOBYTE(v32) = -1;
  }
  else if (v31 == -INFINITY)
  {
    LOBYTE(v32) = 0;
  }
  else
  {
    int v33 = llroundf(v31);
    if (v33 >= 255) {
      int v33 = 255;
    }
    int v32 = v33 & ~(v33 >> 31);
  }
  char v201 = v32;
  v216[3] = 0;
  if (a15)
  {
    *(void *)&long long v194 = &v206;
    *((void *)&v194 + 1) = &v201;
    uint64_t v195 = &v211;
    uint64_t v196 = &v202;
    uint64_t v197 = &v203;
    uint64_t v198 = &v204;
    uint64_t v199 = &v205;
    std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(v216, (uint64_t)&v194);
  }
  else
  {
    *(void *)&long long v194 = &v209;
    *((void *)&v194 + 1) = &v208;
    uint64_t v195 = &v207;
    uint64_t v196 = &v211;
    uint64_t v197 = &v202;
    uint64_t v198 = &v203;
    uint64_t v199 = &v204;
    uint64_t v200 = &v205;
    if (a8) {
      std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(v216, &v194);
    }
    else {
      std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(v216, &v194);
    }
  }
  v215[0] = &unk_26C317298;
  v215[3] = v215;
  unint64_t v35 = *(uint64_t **)a6;
  uint64_t v34 = *(void *)(a6 + 8);
  unint64_t v36 = v34 - *(void *)a6;
  if (v34 == *(void *)a6) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v37 = (uint64_t)v36 >> 3;
  uint64_t v167 = *v35;
  unint64_t v38 = *a7;
  if (*a7 == 3)
  {
    if (v36 <= 8) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v39 = v35[1];
    goto LABEL_26;
  }
  if (v38 >= 2)
  {
    uint64_t v39 = 1;
LABEL_26:
    uint64_t v170 = v39;
    if (v36 <= 0x10) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v40 = &v35[v37];
    uint64_t v41 = *(v40 - 2);
    uint64_t v171 = *(v40 - 3);
    unint64_t v42 = *(v40 - 1);
    if (v38 == 3)
    {
      if (a5[1] - *a5 <= 8uLL) {
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v43 = *(void *)(*a5 + 8);
    }
    else
    {
      uint64_t v43 = 1;
    }
    uint64_t v173 = v43;
    uint64_t v44 = *a5;
    unint64_t v45 = a5[1] - *a5;
    if (v45 <= 0x18) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    unint64_t v160 = v42 * v41;
    uint64_t v46 = *(void *)(v45 + v44 - 32);
    goto LABEL_36;
  }
  if (v36 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v44 = *a5;
  unint64_t v45 = a5[1] - *a5;
  if (v45 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v47 = &v35[v37];
  uint64_t v41 = *(v47 - 2);
  unint64_t v42 = *(v47 - 1);
  unint64_t v160 = v42 * v41;
  uint64_t v46 = 1;
  uint64_t v170 = 1;
  uint64_t v171 = 1;
  uint64_t v173 = 1;
LABEL_36:
  uint64_t v48 = v45 + v44;
  uint64_t v49 = *(void *)(v48 - 24);
  uint64_t v50 = *(void *)(v48 - 16);
  uint64_t v193 = *(void *)(v48 - 8);
  uint64_t v182 = v50;
  int v166 = v193;
  uint64_t v192 = v193 * v50;
  uint64_t v177 = v49;
  uint64_t v191 = v193 * v50 * v49;
  uint64_t v175 = v46;
  uint64_t v190 = v191 * v46;
  uint64_t v189 = v191 * v46 * v173;
  *(void *)&long long v194 = &v189;
  *((void *)&v194 + 1) = &v190;
  uint64_t v195 = &v191;
  uint64_t v196 = &v192;
  uint64_t v197 = &v193;
  unint64_t v51 = a7[4];
  if (v38 >= 3)
  {
    unint64_t v52 = a7[3];
    unint64_t v53 = v51 - v52;
    if (v51 - v52 <= 8) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v54 = *(_DWORD *)(v51 - 12);
    goto LABEL_42;
  }
  unint64_t v52 = a7[3];
  if (v38 == 2)
  {
    unint64_t v53 = v51 - v52;
    if (v51 - v52 <= 4) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v54 = 1;
LABEL_42:
    int v158 = v54;
    int v55 = *(_DWORD *)(v53 + v52 - 8);
    goto LABEL_44;
  }
  int v55 = 1;
  int v158 = 1;
LABEL_44:
  int v159 = v55;
  uint64_t v169 = a7;
  if (v51 == v52) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  int v161 = *(_DWORD *)(v51 - 4);
  *(void *)a9 = 0;
  *(void *)(a9 + 8) = 0;
  *(void *)(a9 + 16) = 0;
  std::vector<MIL::Fp16>::reserve((void **)a9, v170 * v167 * v171 * v41 * v42);
  uint64_t v165 = v41;
  __int16 v188 = MIL::Fp16::FromFloat(v56, 0.0);
  std::vector<MIL::Fp16>::assign((char **)a9, v170 * v167 * v171 * v41 * v42, &v188);
  if (a4 == 4) {
    int v57 = 10;
  }
  else {
    int v57 = 0;
  }
  int v58 = v57 + a10;
  double v59 = ldexp(1.0, v58);
  double v60 = ldexp(1.0, v58 + a11);
  unint64_t v61 = v42;
  if (*((unsigned char *)v169 + 16)) {
    v42 /= v169[1];
  }
  unint64_t v164 = v61;
  std::string __p = 0;
  uint64_t v186 = 0;
  uint64_t v187 = 0;
  std::vector<float>::reserve(&__p, v42);
  float v63 = *a14;
  float v62 = a14[1];
  if (v62 - *a14 == 2)
  {
    MIL::Fp16::GetFloat(*a14);
    float v65 = exp2(-(double)(v58 + a12)) * v64;
    *(float *)&long long __u = v65;
    std::vector<float>::assign((char **)&__p, v42, &__u);
  }
  else if (v63 != v62)
  {
    double v66 = exp2(-(double)(v58 + a12));
    do
    {
      MIL::Fp16::GetFloat(v63);
      float v68 = v66 * v67;
      __int16 v69 = v186;
      if (v186 >= (float *)v187)
      {
        unint64_t v71 = (float *)__p;
        uint64_t v72 = ((char *)v186 - (unsigned char *)__p) >> 2;
        unint64_t v73 = v72 + 1;
        if ((unint64_t)(v72 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v74 = v187 - (unsigned char *)__p;
        if ((v187 - (unsigned char *)__p) >> 1 > v73) {
          unint64_t v73 = v74 >> 1;
        }
        if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v75 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v75 = v73;
        }
        if (v75)
        {
          int v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v187, v75);
          unint64_t v71 = (float *)__p;
          __int16 v69 = v186;
        }
        else
        {
          int v76 = 0;
        }
        float v77 = (float *)&v76[4 * v72];
        *float v77 = v68;
        uint64_t v70 = v77 + 1;
        while (v69 != v71)
        {
          int v78 = *((_DWORD *)v69-- - 1);
          *((_DWORD *)v77-- - 1) = v78;
        }
        std::string __p = v77;
        uint64_t v186 = v70;
        uint64_t v187 = &v76[4 * v75];
        if (v71) {
          operator delete(v71);
        }
      }
      else
      {
        *uint64_t v186 = v68;
        uint64_t v70 = v69 + 1;
      }
      uint64_t v186 = v70;
      float v63 = (MIL::Fp16 *)((char *)v63 + 2);
    }
    while (v63 != v62);
  }
  memset(&v184, 0, sizeof(v184));
  std::vector<int>::reserve(&v184, v42);
  if (a15)
  {
    LODWORD(__u) = 0;
    std::vector<int>::assign(&v184, v42, (std::vector<int>::const_reference)&__u);
  }
  else
  {
    float v79 = v60;
    if (*(void *)(a13 + 8) - *(void *)a13 == 2)
    {
      MIL::Fp16::GetFloat(*(MIL::Fp16 **)a13);
      float v81 = v80 * v79;
      unsigned int v82 = llroundf(v81);
      if (fabsf(v81) < 1.0) {
        unsigned int v82 = 0;
      }
      LODWORD(__u) = v82;
      std::vector<int>::assign(&v184, v42, (std::vector<int>::const_reference)&__u);
    }
    else if (v42)
    {
      for (uint64_t i = 0; i != v42; ++i)
      {
        MIL::Fp16::GetFloat((MIL::Fp16 *)(*(void *)a13 + 2 * i));
        float v85 = v84 * v79;
        unsigned int v86 = llroundf(v85);
        if (fabsf(v85) >= 1.0) {
          int v87 = v86;
        }
        else {
          int v87 = 0;
        }
        std::vector<int>::pointer end = v184.__end_;
        if (v184.__end_ >= v184.__end_cap_.__value_)
        {
          std::vector<int>::pointer begin = v184.__begin_;
          int64_t v91 = v184.__end_ - v184.__begin_;
          unint64_t v92 = v91 + 1;
          if ((unint64_t)(v91 + 1) >> 62) {
            std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
          }
          int64_t v93 = (char *)v184.__end_cap_.__value_ - (char *)v184.__begin_;
          if (((char *)v184.__end_cap_.__value_ - (char *)v184.__begin_) >> 1 > v92) {
            unint64_t v92 = v93 >> 1;
          }
          if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v94 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v94 = v92;
          }
          if (v94)
          {
            int v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v184.__end_cap_, v94);
            std::vector<int>::pointer begin = v184.__begin_;
            std::vector<int>::pointer end = v184.__end_;
          }
          else
          {
            int v95 = 0;
          }
          int v96 = (int *)&v95[4 * v91];
          *int v96 = v87;
          int64_t v89 = v96 + 1;
          while (end != begin)
          {
            int v97 = *--end;
            *--int v96 = v97;
          }
          v184.__begin_ = v96;
          v184.__end_ = v89;
          v184.__end_cap_.__value_ = (int *)&v95[4 * v94];
          if (begin) {
            operator delete(begin);
          }
        }
        else
        {
          *v184.__end_ = v87;
          int64_t v89 = end + 1;
        }
        v184.__end_ = v89;
      }
    }
  }
  int v98 = (char *)v169[10];
  if (*v169 == 3)
  {
    unint64_t v99 = (char *)v169[9];
    if (v98 == v99) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v100 = *(_DWORD *)v99;
    goto LABEL_104;
  }
  unint64_t v99 = (char *)v169[9];
  if (*v169 >= 2)
  {
    int v100 = 0;
LABEL_104:
    unint64_t v101 = v98 - v99;
    if (v101 <= 0xC) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v102 = *(_DWORD *)&v99[v101 - 16];
    goto LABEL_108;
  }
  unint64_t v101 = v98 - v99;
  if (v101 <= 4) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  int v102 = 0;
  int v100 = 0;
LABEL_108:
  int v103 = *(_DWORD *)&v99[v101 - 8];
  v214[3] = 0;
  switch(a4)
  {
    case 4:
      uint64_t v104 = &unk_26C317318;
      break;
    case 9:
      uint64_t v104 = &unk_26C317428;
      break;
    case 14:
      uint64_t v104 = &unk_26C3173A8;
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid kernel dtype");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  *(void *)&long long __u = v104;
  p_u = &__u;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::swap[abi:ne180100](&__u, v214);
  unint64_t v105 = std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::~__value_func[abi:ne180100](&__u);
  v213[3] = 0;
  if (a15)
  {
    *(void *)&long long __u = &v206;
    *((void *)&__u + 1) = a13;
    v218 = &v210;
    p_u = &v194;
    std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(v213, &__u);
  }
  else
  {
    *(void *)&long long __u = &unk_26C317528;
    *((void *)&__u + 1) = &v210;
    v218 = (uint64_t *)&v194;
    p_u = &__u;
    std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v105, v213);
    std::__function::__value_func<float const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](&__u);
  }
  uint64_t v106 = v169;
  unint64_t v107 = v169[1];
  if (v107)
  {
    int v179 = 0;
    uint64_t v108 = 0;
    uint64_t v109 = a19;
    uint64_t v110 = v166;
    uint64_t v111 = v166;
    float v112 = v59;
    int v150 = -v100;
    int v151 = -v102;
    int v156 = -v103;
    while (1)
    {
      int v113 = *((unsigned char *)v106 + 16) ? 0 : v108;
      int v178 = v113;
      if (v167) {
        break;
      }
LABEL_164:
      ++v108;
      v179 += v182;
      if (v107 <= v108) {
        goto LABEL_165;
      }
    }
    uint64_t v181 = 0;
    uint64_t v147 = v108;
    uint64_t v114 = v108 * v110;
    if (*((unsigned char *)v106 + 16)) {
      uint64_t v115 = 0;
    }
    else {
      uint64_t v115 = (int)v108 * (int)v110;
    }
    unint64_t v116 = (void *)a9;
    unint64_t v118 = v164;
    uint64_t v117 = v165;
    uint64_t v153 = v115;
    uint64_t v154 = v108 * v110;
    while (!v170)
    {
LABEL_162:
      if (++v181 == v167)
      {
        uint64_t v106 = v169;
        unint64_t v107 = v169[1];
        uint64_t v110 = v166;
        uint64_t v108 = v147;
        goto LABEL_164;
      }
    }
    uint64_t v119 = 0;
    while (!v171)
    {
LABEL_161:
      if (++v119 == v170) {
        goto LABEL_162;
      }
    }
    uint64_t v120 = 0;
    int v172 = v150 + v158 * v119;
    uint64_t v152 = (v170 * v181 + v119) * v171;
    uint64_t v148 = v119;
    while (!v117)
    {
LABEL_160:
      ++v120;
      uint64_t v119 = v148;
      if (v120 == v171) {
        goto LABEL_161;
      }
    }
    uint64_t v121 = 0;
    int v174 = v151 + v159 * v120;
    unint64_t v122 = v160 * (v152 + v120);
    uint64_t v149 = v120;
    unint64_t v155 = v122;
    while (v166 < 1)
    {
LABEL_159:
      ++v121;
      uint64_t v120 = v149;
      if (v121 == v117) {
        goto LABEL_160;
      }
    }
    uint64_t v123 = 0;
    int v176 = v156 + v161 * v121;
    uint64_t v163 = v118 * v121;
    uint64_t v157 = v121;
    while (1)
    {
      int v183 = 0;
      int v124 = v184.__begin_[v123 + v115];
      int v183 = v124;
      if (v173)
      {
        uint64_t v162 = v123 + v115;
        uint64_t v125 = 0;
        int v126 = 0;
        uint64_t v127 = v175;
        do
        {
          if (v127)
          {
            uint64_t v128 = 0;
            do
            {
              if (v177)
              {
                for (uint64_t j = 0; j != v177; ++j)
                {
                  if (v182)
                  {
                    for (uint64_t k = 0; k != v182; ++k)
                    {
                      char v131 = std::function<unsigned char const ()(int,int,int,int,int,int)>::operator()((uint64_t)v216, v181, v172 + (int)v125, v174 + (int)v128, v176 + (int)j, v179 + (int)k, v123);
                      char v132 = std::function<unsigned char ()(unsigned char)>::operator()((uint64_t)v215, v131);
                      std::function<float const ()(int,int,int,int,int,int)>::operator()((uint64_t)v213, v178, v125, v128, j, k, v123);
                      int v126 = std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator()((uint64_t)v214, (uint64_t)&v183, v126, v132, a10, v133, v112);
                    }
                  }
                }
              }
              ++v128;
              uint64_t v127 = v175;
            }
            while (v128 != v175);
          }
          ++v125;
        }
        while (v125 != v173);
        float v134 = *((float *)__p + v162);
        if (v126)
        {
          double v135 = INFINITY;
          if (v126 == 2) {
            double v135 = -INFINITY;
          }
          unint64_t v116 = (void *)a9;
          unint64_t v118 = v164;
          uint64_t v117 = v165;
          uint64_t v111 = v166;
          uint64_t v109 = a19;
          uint64_t v115 = v153;
          uint64_t v114 = v154;
          uint64_t v121 = v157;
          unint64_t v122 = v155;
          goto LABEL_153;
        }
        int v124 = v183;
        unint64_t v116 = (void *)a9;
        unint64_t v118 = v164;
        uint64_t v117 = v165;
        uint64_t v111 = v166;
        uint64_t v109 = a19;
        uint64_t v115 = v153;
        uint64_t v114 = v154;
        uint64_t v121 = v157;
        unint64_t v122 = v155;
        if (!v183)
        {
LABEL_155:
          float v138 = 0.0;
          goto LABEL_156;
        }
      }
      else
      {
        float v134 = *((float *)__p + v123 + v115);
        if (!v124) {
          goto LABEL_155;
        }
      }
      double v135 = (double)v124;
LABEL_153:
      LODWORD(__u) = 0;
      long double v136 = frexp(v135, (int *)&__u);
      double v137 = ldexp(v136, 11);
      float v138 = ldexp(round(v137), (int)__u - 11);
LABEL_156:
      float v139 = v134 * v138;
      float v140 = 0.0;
      if (v139 != 0.0)
      {
        LODWORD(__u) = 0;
        long double v141 = frexp(v139, (int *)&__u);
        double v142 = ldexp(v141, 11);
        float v140 = ldexp(round(v142), (int)__u - 11);
      }
      uint64_t v143 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(v109, v140);
      *(_WORD *)(*v116 + 2 * (v163 + v122 + v123 + v114)) = MIL::Fp16::FromFloat(v143, v144);
      if (++v123 == v111) {
        goto LABEL_159;
      }
    }
  }
LABEL_165:
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v213);
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::~__value_func[abi:ne180100](v214);
  if (v184.__begin_)
  {
    v184.__end_ = v184.__begin_;
    operator delete(v184.__begin_);
  }
  if (__p)
  {
    uint64_t v186 = (float *)__p;
    operator delete(__p);
  }
  std::__function::__value_func<unsigned char ()(unsigned char)>::~__value_func[abi:ne180100](v215);
  return std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v216);
}

void sub_210B5A8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,uint64_t a51,void *a52)
{
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::~__value_func[abi:ne180100]((void *)(v52 - 256));
  if (__p) {
    operator delete(__p);
  }
  if (a52) {
    operator delete(a52);
  }
  int v54 = *(void **)a34;
  if (*(void *)a34)
  {
    *(void *)(a34 + 8) = v54;
    operator delete(v54);
  }
  std::__function::__value_func<unsigned char ()(unsigned char)>::~__value_func[abi:ne180100]((void *)(v52 - 224));
  std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100]((void *)(v52 - 192));
  _Unwind_Resume(a1);
}

void *MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X6>, int a8@<W7>, unint64_t *a9@<X8>, char a10, char a11, char a12, uint64_t a13, MIL::Fp16 **a14, char a15, int a16, __int16 a17, uint64_t a18, uint64_t a19)
{
  uint64_t v218 = *MEMORY[0x263EF8340];
  __int16 v210 = a17;
  uint64_t v208 = a3;
  uint64_t v209 = a1;
  unint64_t v23 = *a7;
  if (*a7 == 3)
  {
    uint64_t v24 = *a2;
    unint64_t v25 = a2[1] - *a2;
    if (v25 <= 8) {
      goto LABEL_179;
    }
    uint64_t v26 = *(void *)(v24 + 8);
    uint64_t v206 = 0;
    uint64_t v207 = v26;
    goto LABEL_5;
  }
  uint64_t v26 = 1;
  uint64_t v206 = 0;
  uint64_t v207 = 1;
  uint64_t v24 = *a2;
  unint64_t v25 = a2[1] - *a2;
  if (v23 >= 2)
  {
LABEL_5:
    if (v25 > 0x10)
    {
      uint64_t v27 = *(void *)(v25 + v24 - 24);
      uint64_t v205 = 0;
      uint64_t v206 = v27;
      goto LABEL_8;
    }
LABEL_179:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v27 = 1;
  uint64_t v205 = 0;
  uint64_t v206 = 1;
  uint64_t v26 = 1;
  if (v25 <= 8) {
    goto LABEL_179;
  }
LABEL_8:
  uint64_t v28 = v25 + v24;
  uint64_t v29 = *(void *)(v28 - 16);
  uint64_t v204 = 0;
  uint64_t v205 = v29;
  uint64_t v203 = *(void *)(v28 - 8);
  uint64_t v204 = v203;
  uint64_t v30 = v203 * v29;
  uint64_t v201 = v30 * v27;
  uint64_t v202 = v30;
  uint64_t v200 = v30 * v27 * v26;
  char v199 = 0;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v210);
  if (v31 == INFINITY)
  {
    LOBYTE(v32) = -1;
  }
  else if (v31 == -INFINITY)
  {
    LOBYTE(v32) = 0;
  }
  else
  {
    int v33 = llroundf(v31);
    if (v33 >= 255) {
      int v33 = 255;
    }
    int v32 = v33 & ~(v33 >> 31);
  }
  char v199 = v32;
  v214[3] = 0;
  if (a15)
  {
    *(void *)&long long v192 = &v204;
    *((void *)&v192 + 1) = &v199;
    uint64_t v193 = &v209;
    long long v194 = &v200;
    uint64_t v195 = &v201;
    uint64_t v196 = &v202;
    uint64_t v197 = &v203;
    std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(v214, (uint64_t)&v192);
  }
  else
  {
    *(void *)&long long v192 = &v207;
    *((void *)&v192 + 1) = &v206;
    uint64_t v193 = &v205;
    long long v194 = &v209;
    uint64_t v195 = &v200;
    uint64_t v196 = &v201;
    uint64_t v197 = &v202;
    uint64_t v198 = &v203;
    if (a8) {
      std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(v214, &v192);
    }
    else {
      std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(v214, &v192);
    }
  }
  v213[0] = &unk_26C317728;
  v213[3] = v213;
  unint64_t v35 = *(uint64_t **)a6;
  uint64_t v34 = *(void *)(a6 + 8);
  unint64_t v36 = v34 - *(void *)a6;
  if (v34 == *(void *)a6) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v37 = (uint64_t)v36 >> 3;
  uint64_t v165 = *v35;
  unint64_t v38 = *a7;
  if (*a7 == 3)
  {
    if (v36 <= 8) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v39 = v35[1];
    goto LABEL_26;
  }
  if (v38 >= 2)
  {
    uint64_t v39 = 1;
LABEL_26:
    uint64_t v168 = v39;
    if (v36 <= 0x10) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v40 = &v35[v37];
    uint64_t v41 = *(v40 - 2);
    uint64_t v169 = *(v40 - 3);
    unint64_t v42 = *(v40 - 1);
    if (v38 == 3)
    {
      if (a5[1] - *a5 <= 8uLL) {
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v43 = *(void *)(*a5 + 8);
    }
    else
    {
      uint64_t v43 = 1;
    }
    uint64_t v171 = v43;
    uint64_t v44 = *a5;
    unint64_t v45 = a5[1] - *a5;
    if (v45 <= 0x18) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    unint64_t v157 = v42 * v41;
    uint64_t v46 = *(void *)(v45 + v44 - 32);
    goto LABEL_36;
  }
  if (v36 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v44 = *a5;
  unint64_t v45 = a5[1] - *a5;
  if (v45 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v47 = &v35[v37];
  uint64_t v41 = *(v47 - 2);
  unint64_t v42 = *(v47 - 1);
  unint64_t v157 = v42 * v41;
  uint64_t v46 = 1;
  uint64_t v168 = 1;
  uint64_t v169 = 1;
  uint64_t v171 = 1;
LABEL_36:
  uint64_t v48 = v45 + v44;
  uint64_t v49 = *(void *)(v48 - 24);
  uint64_t v50 = *(void *)(v48 - 16);
  uint64_t v191 = *(void *)(v48 - 8);
  uint64_t v180 = v50;
  int v164 = v191;
  uint64_t v190 = v191 * v50;
  uint64_t v175 = v49;
  uint64_t v189 = v191 * v50 * v49;
  uint64_t v173 = v46;
  uint64_t v188 = v189 * v46;
  uint64_t v187 = v189 * v46 * v171;
  *(void *)&long long v192 = &v187;
  *((void *)&v192 + 1) = &v188;
  uint64_t v193 = &v189;
  long long v194 = &v190;
  uint64_t v195 = &v191;
  unint64_t v51 = a7[4];
  if (v38 >= 3)
  {
    unint64_t v52 = a7[3];
    unint64_t v53 = v51 - v52;
    if (v51 - v52 <= 8) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v54 = *(_DWORD *)(v51 - 12);
    goto LABEL_42;
  }
  unint64_t v52 = a7[3];
  if (v38 == 2)
  {
    unint64_t v53 = v51 - v52;
    if (v51 - v52 <= 4) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v54 = 1;
LABEL_42:
    int v155 = v54;
    int v55 = *(_DWORD *)(v53 + v52 - 8);
    goto LABEL_44;
  }
  int v55 = 1;
  int v155 = 1;
LABEL_44:
  int v156 = v55;
  uint64_t v167 = a7;
  if (v51 == v52) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  int v158 = *(_DWORD *)(v51 - 4);
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  std::vector<unsigned char>::reserve(a9, v168 * v165 * v169 * v41 * v42);
  uint64_t v163 = v41;
  char v186 = 0;
  std::vector<unsigned char>::assign((char **)a9, v168 * v165 * v169 * v41 * v42, &v186);
  if (a4 == 4) {
    int v56 = 10;
  }
  else {
    int v56 = 0;
  }
  int v57 = v56 + a10;
  double v58 = ldexp(1.0, v57);
  double v59 = ldexp(1.0, v57 + a11);
  unint64_t v60 = v42;
  if (*((unsigned char *)v167 + 16)) {
    v42 /= v167[1];
  }
  unint64_t v162 = v60;
  std::string __p = 0;
  std::vector<int> v184 = 0;
  uint64_t v185 = 0;
  std::vector<float>::reserve(&__p, v42);
  float v62 = *a14;
  unint64_t v61 = a14[1];
  if (v61 - *a14 == 2)
  {
    MIL::Fp16::GetFloat(*a14);
    float v64 = exp2(-(double)(v57 + a12)) * v63;
    *(float *)&long long __u = v64;
    std::vector<float>::assign((char **)&__p, v42, &__u);
  }
  else if (v62 != v61)
  {
    double v65 = exp2(-(double)(v57 + a12));
    do
    {
      MIL::Fp16::GetFloat(v62);
      float v67 = v65 * v66;
      float v68 = v184;
      if (v184 >= (float *)v185)
      {
        uint64_t v70 = (float *)__p;
        uint64_t v71 = ((char *)v184 - (unsigned char *)__p) >> 2;
        unint64_t v72 = v71 + 1;
        if ((unint64_t)(v71 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v73 = v185 - (unsigned char *)__p;
        if ((v185 - (unsigned char *)__p) >> 1 > v72) {
          unint64_t v72 = v73 >> 1;
        }
        if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v74 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v74 = v72;
        }
        if (v74)
        {
          unint64_t v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v185, v74);
          uint64_t v70 = (float *)__p;
          float v68 = v184;
        }
        else
        {
          unint64_t v75 = 0;
        }
        int v76 = (float *)&v75[4 * v71];
        *int v76 = v67;
        __int16 v69 = v76 + 1;
        while (v68 != v70)
        {
          int v77 = *((_DWORD *)v68-- - 1);
          *((_DWORD *)v76-- - 1) = v77;
        }
        std::string __p = v76;
        std::vector<int> v184 = v69;
        uint64_t v185 = &v75[4 * v74];
        if (v70) {
          operator delete(v70);
        }
      }
      else
      {
        float *v184 = v67;
        __int16 v69 = v68 + 1;
      }
      std::vector<int> v184 = v69;
      float v62 = (MIL::Fp16 *)((char *)v62 + 2);
    }
    while (v62 != v61);
  }
  memset(&v182, 0, sizeof(v182));
  std::vector<int>::reserve(&v182, v42);
  if (a15)
  {
    LODWORD(__u) = 0;
    std::vector<int>::assign(&v182, v42, (std::vector<int>::const_reference)&__u);
  }
  else
  {
    float v78 = v59;
    if (*(void *)(a13 + 8) - *(void *)a13 == 2)
    {
      MIL::Fp16::GetFloat(*(MIL::Fp16 **)a13);
      float v80 = v79 * v78;
      unsigned int v81 = llroundf(v80);
      if (fabsf(v80) < 1.0) {
        unsigned int v81 = 0;
      }
      LODWORD(__u) = v81;
      std::vector<int>::assign(&v182, v42, (std::vector<int>::const_reference)&__u);
    }
    else if (v42)
    {
      for (uint64_t i = 0; i != v42; ++i)
      {
        MIL::Fp16::GetFloat((MIL::Fp16 *)(*(void *)a13 + 2 * i));
        float v84 = v83 * v78;
        unsigned int v85 = llroundf(v84);
        if (fabsf(v84) >= 1.0) {
          int v86 = v85;
        }
        else {
          int v86 = 0;
        }
        std::vector<int>::pointer end = v182.__end_;
        if (v182.__end_ >= v182.__end_cap_.__value_)
        {
          std::vector<int>::pointer begin = v182.__begin_;
          int64_t v90 = v182.__end_ - v182.__begin_;
          unint64_t v91 = v90 + 1;
          if ((unint64_t)(v90 + 1) >> 62) {
            std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
          }
          int64_t v92 = (char *)v182.__end_cap_.__value_ - (char *)v182.__begin_;
          if (((char *)v182.__end_cap_.__value_ - (char *)v182.__begin_) >> 1 > v91) {
            unint64_t v91 = v92 >> 1;
          }
          if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v93 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v93 = v91;
          }
          if (v93)
          {
            unint64_t v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v182.__end_cap_, v93);
            std::vector<int>::pointer begin = v182.__begin_;
            std::vector<int>::pointer end = v182.__end_;
          }
          else
          {
            unint64_t v94 = 0;
          }
          int v95 = (int *)&v94[4 * v90];
          *int v95 = v86;
          uint64_t v88 = v95 + 1;
          while (end != begin)
          {
            int v96 = *--end;
            *--int v95 = v96;
          }
          v182.__begin_ = v95;
          v182.__end_ = v88;
          v182.__end_cap_.__value_ = (int *)&v94[4 * v93];
          if (begin) {
            operator delete(begin);
          }
        }
        else
        {
          *v182.__end_ = v86;
          uint64_t v88 = end + 1;
        }
        v182.__end_ = v88;
      }
    }
  }
  int v97 = (char *)v167[10];
  if (*v167 == 3)
  {
    int v98 = (char *)v167[9];
    if (v97 == v98) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v99 = *(_DWORD *)v98;
    goto LABEL_104;
  }
  int v98 = (char *)v167[9];
  if (*v167 >= 2)
  {
    int v99 = 0;
LABEL_104:
    unint64_t v100 = v97 - v98;
    if (v100 <= 0xC) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v101 = *(_DWORD *)&v98[v100 - 16];
    goto LABEL_108;
  }
  unint64_t v100 = v97 - v98;
  if (v100 <= 4) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  int v101 = 0;
  int v99 = 0;
LABEL_108:
  int v102 = *(_DWORD *)&v98[v100 - 8];
  v212[3] = 0;
  switch(a4)
  {
    case 4:
      int v103 = &unk_26C3177A8;
      break;
    case 9:
      int v103 = &unk_26C3178A8;
      break;
    case 14:
      int v103 = &unk_26C317828;
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid kernel dtype");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  *(void *)&long long __u = v103;
  p_u = &__u;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::swap[abi:ne180100](&__u, v212);
  uint64_t v104 = std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::~__value_func[abi:ne180100](&__u);
  v211[3] = 0;
  if (a15)
  {
    *(void *)&long long __u = &v204;
    *((void *)&__u + 1) = a13;
    uint64_t v216 = &v208;
    p_u = &v192;
    std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(v211, &__u);
  }
  else
  {
    *(void *)&long long __u = &unk_26C3179A8;
    *((void *)&__u + 1) = &v208;
    uint64_t v216 = (uint64_t *)&v192;
    p_u = &__u;
    std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v104, v211);
    std::__function::__value_func<float const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](&__u);
  }
  unint64_t v105 = v167;
  unint64_t v106 = v167[1];
  if (v106)
  {
    int v177 = 0;
    uint64_t v107 = 0;
    uint64_t v108 = a19;
    uint64_t v109 = v164;
    uint64_t v110 = v164;
    float v111 = v58;
    int v149 = -v99;
    int v153 = -v102;
    while (1)
    {
      int v112 = *((unsigned char *)v105 + 16) ? 0 : v107;
      int v176 = v112;
      if (v165) {
        break;
      }
LABEL_171:
      ++v107;
      v177 += v180;
      if (v106 <= v107) {
        goto LABEL_172;
      }
    }
    uint64_t v179 = 0;
    uint64_t v146 = v107;
    uint64_t v113 = v107 * v109;
    if (*((unsigned char *)v105 + 16)) {
      uint64_t v114 = 0;
    }
    else {
      uint64_t v114 = (int)v107 * (int)v109;
    }
    uint64_t v115 = a9;
    unint64_t v117 = v162;
    uint64_t v116 = v163;
    uint64_t v151 = v114;
    uint64_t v152 = v107 * v109;
    while (!v168)
    {
LABEL_169:
      if (++v179 == v165)
      {
        unint64_t v105 = v167;
        unint64_t v106 = v167[1];
        uint64_t v109 = v164;
        uint64_t v107 = v146;
        goto LABEL_171;
      }
    }
    uint64_t v118 = 0;
    while (!v169)
    {
LABEL_168:
      if (++v118 == v168) {
        goto LABEL_169;
      }
    }
    uint64_t v119 = 0;
    int v170 = v149 + v155 * v118;
    uint64_t v150 = (v168 * v179 + v118) * v169;
    uint64_t v147 = v118;
    while (!v116)
    {
LABEL_167:
      ++v119;
      uint64_t v118 = v147;
      if (v119 == v169) {
        goto LABEL_168;
      }
    }
    uint64_t v120 = 0;
    int v172 = v156 * v119 - v101;
    unint64_t v160 = v157 * (v150 + v119);
    uint64_t v148 = v119;
    while (v164 < 1)
    {
LABEL_166:
      ++v120;
      uint64_t v119 = v148;
      if (v120 == v116) {
        goto LABEL_167;
      }
    }
    uint64_t v121 = 0;
    int v174 = v153 + v158 * v120;
    uint64_t v161 = v117 * v120;
    uint64_t v154 = v120;
    while (1)
    {
      int v181 = 0;
      int v122 = v182.__begin_[v121 + v114];
      int v181 = v122;
      if (v171)
      {
        uint64_t v159 = v121 + v114;
        uint64_t v123 = 0;
        int v124 = 0;
        uint64_t v125 = v173;
        do
        {
          if (v125)
          {
            uint64_t v126 = 0;
            do
            {
              if (v175)
              {
                for (uint64_t j = 0; j != v175; ++j)
                {
                  if (v180)
                  {
                    for (uint64_t k = 0; k != v180; ++k)
                    {
                      char v129 = std::function<unsigned char const ()(int,int,int,int,int,int)>::operator()((uint64_t)v214, v179, v170 + (int)v123, v172 + (int)v126, v174 + (int)j, v177 + (int)k, v121);
                      char v130 = std::function<unsigned char ()(unsigned char)>::operator()((uint64_t)v213, v129);
                      std::function<float const ()(int,int,int,int,int,int)>::operator()((uint64_t)v211, v176, v123, v126, j, k, v121);
                      int v124 = std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator()((uint64_t)v212, (uint64_t)&v181, v124, v130, a10, v131, v111);
                    }
                  }
                }
              }
              ++v126;
              uint64_t v125 = v173;
            }
            while (v126 != v173);
          }
          ++v123;
        }
        while (v123 != v171);
        float v132 = *((float *)__p + v159);
        if (v124)
        {
          double v133 = INFINITY;
          if (v124 == 2) {
            double v133 = -INFINITY;
          }
          uint64_t v115 = a9;
          unint64_t v117 = v162;
          uint64_t v116 = v163;
          uint64_t v110 = v164;
          uint64_t v108 = a19;
          uint64_t v114 = v151;
          uint64_t v113 = v152;
          uint64_t v120 = v154;
          goto LABEL_153;
        }
        int v122 = v181;
        uint64_t v115 = a9;
        unint64_t v117 = v162;
        uint64_t v116 = v163;
        uint64_t v110 = v164;
        uint64_t v108 = a19;
        uint64_t v114 = v151;
        uint64_t v113 = v152;
        uint64_t v120 = v154;
        if (!v181)
        {
LABEL_155:
          float v136 = 0.0;
          goto LABEL_156;
        }
      }
      else
      {
        float v132 = *((float *)__p + v121 + v114);
        if (!v122) {
          goto LABEL_155;
        }
      }
      double v133 = (double)v122;
LABEL_153:
      LODWORD(__u) = 0;
      long double v134 = frexp(v133, (int *)&__u);
      double v135 = ldexp(v134, 11);
      float v136 = ldexp(round(v135), (int)__u - 11);
LABEL_156:
      float v137 = v132 * v136;
      float v138 = 0.0;
      if (v137 != 0.0)
      {
        LODWORD(__u) = 0;
        long double v139 = frexp(v137, (int *)&__u);
        double v140 = ldexp(v139, 11);
        float v138 = ldexp(round(v140), (int)__u - 11);
      }
      std::function<float ()(float)>::operator()(v108, v138);
      if (v141 == INFINITY)
      {
        LOBYTE(v142) = -1;
      }
      else if (v141 == -INFINITY)
      {
        LOBYTE(v142) = 0;
      }
      else
      {
        int v143 = llroundf(v141);
        if (v143 >= 255) {
          int v143 = 255;
        }
        int v142 = v143 & ~(v143 >> 31);
      }
      *(unsigned char *)(*v115 + v161 + v160 + v121 + v113) = v142;
      if (++v121 == v110) {
        goto LABEL_166;
      }
    }
  }
LABEL_172:
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v211);
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::~__value_func[abi:ne180100](v212);
  if (v182.__begin_)
  {
    v182.__end_ = v182.__begin_;
    operator delete(v182.__begin_);
  }
  if (__p)
  {
    std::vector<int> v184 = (float *)__p;
    operator delete(__p);
  }
  std::__function::__value_func<unsigned char ()(unsigned char)>::~__value_func[abi:ne180100](v213);
  return std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v214);
}

void sub_210B5B834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,uint64_t a51,void *a52)
{
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::~__value_func[abi:ne180100]((void *)(v52 - 256));
  if (__p) {
    operator delete(__p);
  }
  if (a52) {
    operator delete(a52);
  }
  int v54 = *(void **)a34;
  if (*(void *)a34)
  {
    *(void *)(a34 + 8) = v54;
    operator delete(v54);
  }
  std::__function::__value_func<unsigned char ()(unsigned char)>::~__value_func[abi:ne180100]((void *)(v52 - 224));
  std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100]((void *)(v52 - 192));
  _Unwind_Resume(a1);
}

void *MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X6>, int a8@<W7>, unint64_t *a9@<X8>, char a10, char a11, char a12, uint64_t a13, MIL::Fp16 **a14, char a15, int a16, __int16 a17, uint64_t a18, uint64_t a19)
{
  uint64_t v217 = *MEMORY[0x263EF8340];
  __int16 v209 = a17;
  uint64_t v207 = a3;
  uint64_t v208 = a1;
  unint64_t v23 = *a7;
  if (*a7 == 3)
  {
    uint64_t v24 = *a2;
    unint64_t v25 = a2[1] - *a2;
    if (v25 <= 8) {
      goto LABEL_180;
    }
    uint64_t v26 = *(void *)(v24 + 8);
    uint64_t v205 = 0;
    uint64_t v206 = v26;
    goto LABEL_5;
  }
  uint64_t v26 = 1;
  uint64_t v205 = 0;
  uint64_t v206 = 1;
  uint64_t v24 = *a2;
  unint64_t v25 = a2[1] - *a2;
  if (v23 >= 2)
  {
LABEL_5:
    if (v25 > 0x10)
    {
      uint64_t v27 = *(void *)(v25 + v24 - 24);
      uint64_t v204 = 0;
      uint64_t v205 = v27;
      goto LABEL_8;
    }
LABEL_180:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v27 = 1;
  uint64_t v204 = 0;
  uint64_t v205 = 1;
  uint64_t v26 = 1;
  if (v25 <= 8) {
    goto LABEL_180;
  }
LABEL_8:
  uint64_t v28 = v25 + v24;
  uint64_t v29 = *(void *)(v28 - 16);
  uint64_t v203 = 0;
  uint64_t v204 = v29;
  uint64_t v202 = *(void *)(v28 - 8);
  uint64_t v203 = v202;
  uint64_t v30 = v202 * v29;
  uint64_t v200 = v30 * v27;
  uint64_t v201 = v30;
  uint64_t v199 = v30 * v27 * v26;
  char v198 = 0;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v209);
  if (v31 == INFINITY)
  {
    LOBYTE(v32) = -1;
  }
  else if (v31 == -INFINITY)
  {
    LOBYTE(v32) = 0;
  }
  else
  {
    int v33 = llroundf(v31);
    if (v33 >= 255) {
      int v33 = 255;
    }
    int v32 = v33 & ~(v33 >> 31);
  }
  char v198 = v32;
  v213[3] = 0;
  if (a15)
  {
    *(void *)&long long v191 = &v203;
    *((void *)&v191 + 1) = &v198;
    long long v192 = &v208;
    uint64_t v193 = &v199;
    long long v194 = &v200;
    uint64_t v195 = &v201;
    uint64_t v196 = &v202;
    std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(v213, (uint64_t)&v191);
  }
  else
  {
    *(void *)&long long v191 = &v206;
    *((void *)&v191 + 1) = &v205;
    long long v192 = &v204;
    uint64_t v193 = &v208;
    long long v194 = &v199;
    uint64_t v195 = &v200;
    uint64_t v196 = &v201;
    uint64_t v197 = &v202;
    if (a8) {
      std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(v213, &v191);
    }
    else {
      std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(v213, &v191);
    }
  }
  v212[0] = &unk_26C317BA8;
  v212[3] = v212;
  unint64_t v35 = *(uint64_t **)a6;
  uint64_t v34 = *(void *)(a6 + 8);
  unint64_t v36 = v34 - *(void *)a6;
  if (v34 == *(void *)a6) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v37 = (uint64_t)v36 >> 3;
  uint64_t v164 = *v35;
  unint64_t v38 = *a7;
  if (*a7 == 3)
  {
    if (v36 <= 8) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v39 = v35[1];
    goto LABEL_26;
  }
  if (v38 >= 2)
  {
    uint64_t v39 = 1;
LABEL_26:
    uint64_t v167 = v39;
    if (v36 <= 0x10) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v40 = &v35[v37];
    uint64_t v41 = *(v40 - 2);
    uint64_t v168 = *(v40 - 3);
    unint64_t v42 = *(v40 - 1);
    if (v38 == 3)
    {
      if (a5[1] - *a5 <= 8uLL) {
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v43 = *(void *)(*a5 + 8);
    }
    else
    {
      uint64_t v43 = 1;
    }
    uint64_t v170 = v43;
    uint64_t v44 = *a5;
    unint64_t v45 = a5[1] - *a5;
    if (v45 <= 0x18) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    unint64_t v156 = v42 * v41;
    uint64_t v46 = *(void *)(v45 + v44 - 32);
    goto LABEL_36;
  }
  if (v36 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v44 = *a5;
  unint64_t v45 = a5[1] - *a5;
  if (v45 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v47 = &v35[v37];
  uint64_t v41 = *(v47 - 2);
  unint64_t v42 = *(v47 - 1);
  unint64_t v156 = v42 * v41;
  uint64_t v46 = 1;
  uint64_t v167 = 1;
  uint64_t v168 = 1;
  uint64_t v170 = 1;
LABEL_36:
  uint64_t v48 = v45 + v44;
  uint64_t v49 = *(void *)(v48 - 24);
  uint64_t v50 = *(void *)(v48 - 16);
  uint64_t v190 = *(void *)(v48 - 8);
  uint64_t v179 = v50;
  int v163 = v190;
  uint64_t v189 = v190 * v50;
  uint64_t v174 = v49;
  uint64_t v188 = v190 * v50 * v49;
  uint64_t v172 = v46;
  uint64_t v187 = v188 * v46;
  uint64_t v186 = v188 * v46 * v170;
  *(void *)&long long v191 = &v186;
  *((void *)&v191 + 1) = &v187;
  long long v192 = &v188;
  uint64_t v193 = &v189;
  long long v194 = &v190;
  unint64_t v51 = a7[4];
  if (v38 >= 3)
  {
    unint64_t v52 = a7[3];
    unint64_t v53 = v51 - v52;
    if (v51 - v52 <= 8) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v54 = *(_DWORD *)(v51 - 12);
    goto LABEL_42;
  }
  unint64_t v52 = a7[3];
  if (v38 == 2)
  {
    unint64_t v53 = v51 - v52;
    if (v51 - v52 <= 4) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v54 = 1;
LABEL_42:
    int v154 = v54;
    int v55 = *(_DWORD *)(v53 + v52 - 8);
    goto LABEL_44;
  }
  int v55 = 1;
  int v154 = 1;
LABEL_44:
  int v155 = v55;
  int v166 = a7;
  if (v51 == v52) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  int v157 = *(_DWORD *)(v51 - 4);
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  std::vector<unsigned char>::reserve(a9, v167 * v164 * v168 * v41 * v42);
  uint64_t v162 = v41;
  char v185 = 0;
  std::vector<unsigned char>::assign((char **)a9, v167 * v164 * v168 * v41 * v42, &v185);
  if (a4 == 4) {
    int v56 = 10;
  }
  else {
    int v56 = 0;
  }
  int v57 = v56 + a10;
  double v58 = ldexp(1.0, v57);
  double v59 = ldexp(1.0, v57 + a11);
  unint64_t v60 = v42;
  if (*((unsigned char *)v166 + 16)) {
    v42 /= v166[1];
  }
  unint64_t v161 = v60;
  std::string __p = 0;
  int v183 = 0;
  std::vector<int> v184 = 0;
  std::vector<float>::reserve(&__p, v42);
  float v62 = *a14;
  unint64_t v61 = a14[1];
  if (v61 - *a14 == 2)
  {
    MIL::Fp16::GetFloat(*a14);
    float v64 = exp2(-(double)(v57 + a12)) * v63;
    *(float *)&long long __u = v64;
    std::vector<float>::assign((char **)&__p, v42, &__u);
  }
  else if (v62 != v61)
  {
    double v65 = exp2(-(double)(v57 + a12));
    do
    {
      MIL::Fp16::GetFloat(v62);
      float v67 = v65 * v66;
      float v68 = v183;
      if (v183 >= (float *)v184)
      {
        uint64_t v70 = (float *)__p;
        uint64_t v71 = ((char *)v183 - (unsigned char *)__p) >> 2;
        unint64_t v72 = v71 + 1;
        if ((unint64_t)(v71 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v73 = v184 - (unsigned char *)__p;
        if ((v184 - (unsigned char *)__p) >> 1 > v72) {
          unint64_t v72 = v73 >> 1;
        }
        if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v74 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v74 = v72;
        }
        if (v74)
        {
          unint64_t v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v184, v74);
          uint64_t v70 = (float *)__p;
          float v68 = v183;
        }
        else
        {
          unint64_t v75 = 0;
        }
        int v76 = (float *)&v75[4 * v71];
        *int v76 = v67;
        __int16 v69 = v76 + 1;
        while (v68 != v70)
        {
          int v77 = *((_DWORD *)v68-- - 1);
          *((_DWORD *)v76-- - 1) = v77;
        }
        std::string __p = v76;
        int v183 = v69;
        std::vector<int> v184 = &v75[4 * v74];
        if (v70) {
          operator delete(v70);
        }
      }
      else
      {
        float *v183 = v67;
        __int16 v69 = v68 + 1;
      }
      int v183 = v69;
      float v62 = (MIL::Fp16 *)((char *)v62 + 2);
    }
    while (v62 != v61);
  }
  memset(&v181, 0, sizeof(v181));
  std::vector<int>::reserve(&v181, v42);
  if (a15)
  {
    LODWORD(__u) = 0;
    std::vector<int>::assign(&v181, v42, (std::vector<int>::const_reference)&__u);
  }
  else
  {
    float v78 = v59;
    if (*(void *)(a13 + 8) - *(void *)a13 == 2)
    {
      MIL::Fp16::GetFloat(*(MIL::Fp16 **)a13);
      float v80 = v79 * v78;
      unsigned int v81 = llroundf(v80);
      if (fabsf(v80) < 1.0) {
        unsigned int v81 = 0;
      }
      LODWORD(__u) = v81;
      std::vector<int>::assign(&v181, v42, (std::vector<int>::const_reference)&__u);
    }
    else if (v42)
    {
      for (uint64_t i = 0; i != v42; ++i)
      {
        MIL::Fp16::GetFloat((MIL::Fp16 *)(*(void *)a13 + 2 * i));
        float v84 = v83 * v78;
        unsigned int v85 = llroundf(v84);
        if (fabsf(v84) >= 1.0) {
          int v86 = v85;
        }
        else {
          int v86 = 0;
        }
        std::vector<int>::pointer end = v181.__end_;
        if (v181.__end_ >= v181.__end_cap_.__value_)
        {
          std::vector<int>::pointer begin = v181.__begin_;
          int64_t v90 = v181.__end_ - v181.__begin_;
          unint64_t v91 = v90 + 1;
          if ((unint64_t)(v90 + 1) >> 62) {
            std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
          }
          int64_t v92 = (char *)v181.__end_cap_.__value_ - (char *)v181.__begin_;
          if (((char *)v181.__end_cap_.__value_ - (char *)v181.__begin_) >> 1 > v91) {
            unint64_t v91 = v92 >> 1;
          }
          if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v93 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v93 = v91;
          }
          if (v93)
          {
            unint64_t v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v181.__end_cap_, v93);
            std::vector<int>::pointer begin = v181.__begin_;
            std::vector<int>::pointer end = v181.__end_;
          }
          else
          {
            unint64_t v94 = 0;
          }
          int v95 = (int *)&v94[4 * v90];
          *int v95 = v86;
          uint64_t v88 = v95 + 1;
          while (end != begin)
          {
            int v96 = *--end;
            *--int v95 = v96;
          }
          v181.__begin_ = v95;
          v181.__end_ = v88;
          v181.__end_cap_.__value_ = (int *)&v94[4 * v93];
          if (begin) {
            operator delete(begin);
          }
        }
        else
        {
          *v181.__end_ = v86;
          uint64_t v88 = end + 1;
        }
        v181.__end_ = v88;
      }
    }
  }
  int v97 = (char *)v166[10];
  if (*v166 == 3)
  {
    int v98 = (char *)v166[9];
    if (v97 == v98) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v99 = *(_DWORD *)v98;
    goto LABEL_104;
  }
  int v98 = (char *)v166[9];
  if (*v166 >= 2)
  {
    int v99 = 0;
LABEL_104:
    unint64_t v100 = v97 - v98;
    if (v100 <= 0xC) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v101 = *(_DWORD *)&v98[v100 - 16];
    goto LABEL_108;
  }
  unint64_t v100 = v97 - v98;
  if (v100 <= 4) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  int v101 = 0;
  int v99 = 0;
LABEL_108:
  int v102 = *(_DWORD *)&v98[v100 - 8];
  v211[3] = 0;
  switch(a4)
  {
    case 4:
      int v103 = &unk_26C317C28;
      break;
    case 9:
      int v103 = &unk_26C317D28;
      break;
    case 14:
      int v103 = &unk_26C317CA8;
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid kernel dtype");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  *(void *)&long long __u = v103;
  p_u = &__u;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::swap[abi:ne180100](&__u, v211);
  uint64_t v104 = std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::~__value_func[abi:ne180100](&__u);
  v210[3] = 0;
  if (a15)
  {
    *(void *)&long long __u = &v203;
    *((void *)&__u + 1) = a13;
    uint64_t v215 = &v207;
    p_u = &v191;
    std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(v210, &__u);
  }
  else
  {
    *(void *)&long long __u = &unk_26C317E28;
    *((void *)&__u + 1) = &v207;
    uint64_t v215 = (uint64_t *)&v191;
    p_u = &__u;
    std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v104, v210);
    std::__function::__value_func<float const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](&__u);
  }
  unint64_t v105 = v166;
  unint64_t v106 = v166[1];
  if (v106)
  {
    int v176 = 0;
    uint64_t v107 = 0;
    uint64_t v108 = a19;
    uint64_t v109 = v163;
    uint64_t v110 = v163;
    float v111 = v58;
    int v148 = -v99;
    int v152 = -v102;
    while (1)
    {
      int v112 = *((unsigned char *)v105 + 16) ? 0 : v107;
      int v175 = v112;
      if (v164) {
        break;
      }
LABEL_172:
      ++v107;
      v176 += v179;
      if (v106 <= v107) {
        goto LABEL_173;
      }
    }
    uint64_t v178 = 0;
    uint64_t v145 = v107;
    uint64_t v113 = v107 * v109;
    if (*((unsigned char *)v105 + 16)) {
      uint64_t v114 = 0;
    }
    else {
      uint64_t v114 = (int)v107 * (int)v109;
    }
    uint64_t v115 = a9;
    unint64_t v117 = v161;
    uint64_t v116 = v162;
    uint64_t v150 = v114;
    uint64_t v151 = v107 * v109;
    while (!v167)
    {
LABEL_170:
      if (++v178 == v164)
      {
        unint64_t v105 = v166;
        unint64_t v106 = v166[1];
        uint64_t v109 = v163;
        uint64_t v107 = v145;
        goto LABEL_172;
      }
    }
    uint64_t v118 = 0;
    while (!v168)
    {
LABEL_169:
      if (++v118 == v167) {
        goto LABEL_170;
      }
    }
    uint64_t v119 = 0;
    int v169 = v148 + v154 * v118;
    uint64_t v149 = (v167 * v178 + v118) * v168;
    uint64_t v146 = v118;
    while (!v116)
    {
LABEL_168:
      ++v119;
      uint64_t v118 = v146;
      if (v119 == v168) {
        goto LABEL_169;
      }
    }
    uint64_t v120 = 0;
    int v171 = v155 * v119 - v101;
    unint64_t v159 = v156 * (v149 + v119);
    uint64_t v147 = v119;
    while (v163 < 1)
    {
LABEL_167:
      ++v120;
      uint64_t v119 = v147;
      if (v120 == v116) {
        goto LABEL_168;
      }
    }
    uint64_t v121 = 0;
    int v173 = v152 + v157 * v120;
    uint64_t v160 = v117 * v120;
    uint64_t v153 = v120;
    while (1)
    {
      int v180 = 0;
      int v122 = v181.__begin_[v121 + v114];
      int v180 = v122;
      if (v170)
      {
        uint64_t v158 = v121 + v114;
        uint64_t v123 = 0;
        int v124 = 0;
        uint64_t v125 = v172;
        do
        {
          if (v125)
          {
            uint64_t v126 = 0;
            do
            {
              if (v174)
              {
                for (uint64_t j = 0; j != v174; ++j)
                {
                  if (v179)
                  {
                    for (uint64_t k = 0; k != v179; ++k)
                    {
                      char v129 = std::function<unsigned char const ()(int,int,int,int,int,int)>::operator()((uint64_t)v213, v178, v169 + (int)v123, v171 + (int)v126, v173 + (int)j, v176 + (int)k, v121);
                      char v130 = std::function<unsigned char ()(unsigned char)>::operator()((uint64_t)v212, v129);
                      std::function<float const ()(int,int,int,int,int,int)>::operator()((uint64_t)v210, v175, v123, v126, j, k, v121);
                      int v124 = std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator()((uint64_t)v211, (uint64_t)&v180, v124, v130, a10, v131, v111);
                    }
                  }
                }
              }
              ++v126;
              uint64_t v125 = v172;
            }
            while (v126 != v172);
          }
          ++v123;
        }
        while (v123 != v170);
        float v132 = *((float *)__p + v158);
        if (v124)
        {
          double v133 = INFINITY;
          if (v124 == 2) {
            double v133 = -INFINITY;
          }
          uint64_t v115 = a9;
          unint64_t v117 = v161;
          uint64_t v116 = v162;
          uint64_t v110 = v163;
          uint64_t v108 = a19;
          uint64_t v114 = v150;
          uint64_t v113 = v151;
          uint64_t v120 = v153;
          goto LABEL_153;
        }
        int v122 = v180;
        uint64_t v115 = a9;
        unint64_t v117 = v161;
        uint64_t v116 = v162;
        uint64_t v110 = v163;
        uint64_t v108 = a19;
        uint64_t v114 = v150;
        uint64_t v113 = v151;
        uint64_t v120 = v153;
        if (!v180)
        {
LABEL_155:
          float v136 = 0.0;
          goto LABEL_156;
        }
      }
      else
      {
        float v132 = *((float *)__p + v121 + v114);
        if (!v122) {
          goto LABEL_155;
        }
      }
      double v133 = (double)v122;
LABEL_153:
      LODWORD(__u) = 0;
      long double v134 = frexp(v133, (int *)&__u);
      double v135 = ldexp(v134, 11);
      float v136 = ldexp(round(v135), (int)__u - 11);
LABEL_156:
      float v137 = v132 * v136;
      float v138 = 0.0;
      if (v137 != 0.0)
      {
        LODWORD(__u) = 0;
        long double v139 = frexp(v137, (int *)&__u);
        double v140 = ldexp(v139, 11);
        float v138 = ldexp(round(v140), (int)__u - 11);
      }
      std::function<float ()(float)>::operator()(v108, v138);
      if (v141 == INFINITY)
      {
        LOBYTE(v142) = 127;
      }
      else if (v141 == -INFINITY)
      {
        LOBYTE(v142) = 0x80;
      }
      else
      {
        int v142 = llroundf(v141);
        if (v142 >= 127) {
          int v142 = 127;
        }
        if (v142 <= -128) {
          LOBYTE(v142) = 0x80;
        }
      }
      *(unsigned char *)(*v115 + v160 + v159 + v121 + v113) = v142;
      if (++v121 == v110) {
        goto LABEL_167;
      }
    }
  }
LABEL_173:
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v210);
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::~__value_func[abi:ne180100](v211);
  if (v181.__begin_)
  {
    v181.__end_ = v181.__begin_;
    operator delete(v181.__begin_);
  }
  if (__p)
  {
    int v183 = (float *)__p;
    operator delete(__p);
  }
  std::__function::__value_func<unsigned char ()(unsigned char)>::~__value_func[abi:ne180100](v212);
  return std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v213);
}

void sub_210B5C78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,uint64_t a51,void *a52)
{
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::~__value_func[abi:ne180100]((void *)(v52 - 256));
  if (__p) {
    operator delete(__p);
  }
  if (a52) {
    operator delete(a52);
  }
  int v54 = *(void **)a34;
  if (*(void *)a34)
  {
    *(void *)(a34 + 8) = v54;
    operator delete(v54);
  }
  std::__function::__value_func<unsigned char ()(unsigned char)>::~__value_func[abi:ne180100]((void *)(v52 - 224));
  std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100]((void *)(v52 - 192));
  _Unwind_Resume(a1);
}

void *MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, char a10, char a11, char a12, uint64_t a13, MIL::Fp16 **a14, char a15, int a16, __int16 a17, int a18, char a19, uint64_t a20)
{
  uint64_t v220 = *MEMORY[0x263EF8340];
  __int16 v205 = a17;
  uint64_t v203 = a3;
  uint64_t v204 = a1;
  unint64_t v24 = *a7;
  if (*a7 == 3)
  {
    uint64_t v25 = *a2;
    unint64_t v26 = a2[1] - *a2;
    if (v26 <= 8) {
      goto LABEL_175;
    }
    uint64_t v27 = *(void *)(v25 + 8);
    uint64_t v201 = 0;
    uint64_t v202 = v27;
    goto LABEL_5;
  }
  uint64_t v27 = 1;
  uint64_t v201 = 0;
  uint64_t v202 = 1;
  uint64_t v25 = *a2;
  unint64_t v26 = a2[1] - *a2;
  if (v24 >= 2)
  {
LABEL_5:
    if (v26 > 0x10)
    {
      uint64_t v28 = *(void *)(v26 + v25 - 24);
      uint64_t v200 = 0;
      uint64_t v201 = v28;
      goto LABEL_8;
    }
LABEL_175:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v28 = 1;
  uint64_t v200 = 0;
  uint64_t v201 = 1;
  uint64_t v27 = 1;
  if (v26 <= 8) {
    goto LABEL_175;
  }
LABEL_8:
  uint64_t v29 = v26 + v25;
  uint64_t v30 = *(void *)(v29 - 16);
  uint64_t v199 = 0;
  uint64_t v200 = v30;
  uint64_t v198 = *(void *)(v29 - 8);
  uint64_t v199 = v198;
  uint64_t v197 = v198 * v30;
  uint64_t v195 = v198 * v30 * v28 * v27;
  uint64_t v196 = v198 * v30 * v28;
  char v194 = 0;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v205);
  if (v31 == INFINITY)
  {
    char v32 = 127;
  }
  else
  {
    char v32 = 0x80;
    if (v31 != -INFINITY)
    {
      int v33 = llroundf(v31);
      if (v33 >= 127) {
        int v33 = 127;
      }
      if (v33 <= -128) {
        char v32 = 0x80;
      }
      else {
        char v32 = v33;
      }
    }
  }
  char v194 = v32;
  v216[3] = 0;
  if (a15)
  {
    *(void *)&long long v209 = &v199;
    *((void *)&v209 + 1) = &v194;
    __int16 v210 = &v204;
    uint64_t v211 = &v195;
    __int16 v212 = &v196;
    v213 = &v197;
    uint64_t v214 = &v198;
    std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(v216, (uint64_t)&v209);
  }
  else
  {
    *(void *)&long long v209 = &v202;
    *((void *)&v209 + 1) = &v201;
    __int16 v210 = &v200;
    uint64_t v211 = &v204;
    __int16 v212 = &v195;
    v213 = &v196;
    uint64_t v214 = &v197;
    uint64_t v215 = &v198;
    if (a8) {
      std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(v216, &v209);
    }
    else {
      std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(v216, &v209);
    }
  }
  v208[0] = &unk_26C318038;
  v208[3] = v208;
  if (a19)
  {
    *(void *)&long long v209 = &unk_26C3180B8;
    uint64_t v211 = (uint64_t *)&v209;
    std::__function::__value_func<signed char ()(signed char)>::swap[abi:ne180100](&v209, v208);
    std::__function::__value_func<signed char ()(signed char)>::~__value_func[abi:ne180100](&v209);
  }
  unint64_t v35 = *(uint64_t **)a6;
  uint64_t v34 = *(void *)(a6 + 8);
  unint64_t v36 = v34 - *(void *)a6;
  if (v34 == *(void *)a6) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v37 = (uint64_t)v36 >> 3;
  uint64_t v167 = *v35;
  unint64_t v38 = *a7;
  if (*a7 == 3)
  {
    if (v36 <= 8) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v39 = v35[1];
    goto LABEL_29;
  }
  if (v38 >= 2)
  {
    uint64_t v39 = 1;
LABEL_29:
    uint64_t v170 = v39;
    if (v36 <= 0x10) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v40 = &v35[v37];
    uint64_t v41 = *(v40 - 2);
    uint64_t v171 = *(v40 - 3);
    unint64_t v42 = *(v40 - 1);
    if (v38 == 3)
    {
      if (a5[1] - *a5 <= 8uLL) {
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v43 = *(void *)(*a5 + 8);
    }
    else
    {
      uint64_t v43 = 1;
    }
    uint64_t v173 = v43;
    uint64_t v44 = *a5;
    unint64_t v45 = a5[1] - *a5;
    if (v45 <= 0x18) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    unint64_t v160 = v42 * v41;
    uint64_t v46 = *(void *)(v45 + v44 - 32);
    goto LABEL_39;
  }
  if (v36 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v44 = *a5;
  unint64_t v45 = a5[1] - *a5;
  if (v45 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v47 = &v35[v37];
  uint64_t v41 = *(v47 - 2);
  unint64_t v42 = *(v47 - 1);
  unint64_t v160 = v42 * v41;
  uint64_t v46 = 1;
  uint64_t v170 = 1;
  uint64_t v171 = 1;
  uint64_t v173 = 1;
LABEL_39:
  uint64_t v48 = v45 + v44;
  uint64_t v49 = *(void *)(v48 - 24);
  uint64_t v50 = *(void *)(v48 - 16);
  uint64_t v193 = *(void *)(v48 - 8);
  uint64_t v182 = v50;
  int v166 = v193;
  uint64_t v192 = v193 * v50;
  uint64_t v177 = v49;
  uint64_t v191 = v193 * v50 * v49;
  uint64_t v175 = v46;
  uint64_t v190 = v191 * v46;
  uint64_t v189 = v191 * v46 * v173;
  *(void *)&long long v209 = &v189;
  *((void *)&v209 + 1) = &v190;
  __int16 v210 = &v191;
  uint64_t v211 = &v192;
  __int16 v212 = &v193;
  unint64_t v51 = a7[4];
  if (v38 >= 3)
  {
    unint64_t v52 = a7[3];
    unint64_t v53 = v51 - v52;
    if (v51 - v52 <= 8) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v54 = *(_DWORD *)(v51 - 12);
    goto LABEL_45;
  }
  unint64_t v52 = a7[3];
  if (v38 == 2)
  {
    unint64_t v53 = v51 - v52;
    if (v51 - v52 <= 4) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v54 = 1;
LABEL_45:
    int v158 = v54;
    int v55 = *(_DWORD *)(v53 + v52 - 8);
    goto LABEL_47;
  }
  int v55 = 1;
  int v158 = 1;
LABEL_47:
  int v159 = v55;
  int v169 = a7;
  if (v51 == v52) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  int v161 = *(_DWORD *)(v51 - 4);
  *(void *)a9 = 0;
  *(void *)(a9 + 8) = 0;
  *(void *)(a9 + 16) = 0;
  std::vector<MIL::Fp16>::reserve((void **)a9, v170 * v167 * v171 * v41 * v42);
  uint64_t v165 = v41;
  __int16 v188 = MIL::Fp16::FromFloat(v56, 0.0);
  std::vector<MIL::Fp16>::assign((char **)a9, v170 * v167 * v171 * v41 * v42, &v188);
  if (a4 == 4) {
    int v57 = 10;
  }
  else {
    int v57 = 0;
  }
  int v58 = v57 + a10;
  double v59 = ldexp(1.0, v58);
  double v60 = ldexp(1.0, v58 + a11);
  unint64_t v61 = v42;
  if (*((unsigned char *)v169 + 16)) {
    v42 /= v169[1];
  }
  unint64_t v164 = v61;
  std::string __p = 0;
  uint64_t v186 = 0;
  uint64_t v187 = 0;
  std::vector<float>::reserve(&__p, v42);
  float v63 = *a14;
  float v62 = a14[1];
  if (v62 - *a14 == 2)
  {
    MIL::Fp16::GetFloat(*a14);
    float v65 = exp2(-(double)(v58 + a12)) * v64;
    *(float *)&long long __u = v65;
    std::vector<float>::assign((char **)&__p, v42, &__u);
  }
  else if (v63 != v62)
  {
    double v66 = exp2(-(double)(v58 + a12));
    do
    {
      MIL::Fp16::GetFloat(v63);
      float v68 = v66 * v67;
      __int16 v69 = v186;
      if (v186 >= (float *)v187)
      {
        uint64_t v71 = (float *)__p;
        uint64_t v72 = ((char *)v186 - (unsigned char *)__p) >> 2;
        unint64_t v73 = v72 + 1;
        if ((unint64_t)(v72 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v74 = v187 - (unsigned char *)__p;
        if ((v187 - (unsigned char *)__p) >> 1 > v73) {
          unint64_t v73 = v74 >> 1;
        }
        if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v75 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v75 = v73;
        }
        if (v75)
        {
          int v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v187, v75);
          uint64_t v71 = (float *)__p;
          __int16 v69 = v186;
        }
        else
        {
          int v76 = 0;
        }
        int v77 = (float *)&v76[4 * v72];
        *int v77 = v68;
        uint64_t v70 = v77 + 1;
        while (v69 != v71)
        {
          int v78 = *((_DWORD *)v69-- - 1);
          *((_DWORD *)v77-- - 1) = v78;
        }
        std::string __p = v77;
        uint64_t v186 = v70;
        uint64_t v187 = &v76[4 * v75];
        if (v71) {
          operator delete(v71);
        }
      }
      else
      {
        *uint64_t v186 = v68;
        uint64_t v70 = v69 + 1;
      }
      uint64_t v186 = v70;
      float v63 = (MIL::Fp16 *)((char *)v63 + 2);
    }
    while (v63 != v62);
  }
  memset(&v184, 0, sizeof(v184));
  std::vector<int>::reserve(&v184, v42);
  if (a15)
  {
    LODWORD(__u) = 0;
    std::vector<int>::assign(&v184, v42, (std::vector<int>::const_reference)&__u);
  }
  else
  {
    float v79 = v60;
    if (*(void *)(a13 + 8) - *(void *)a13 == 2)
    {
      MIL::Fp16::GetFloat(*(MIL::Fp16 **)a13);
      float v81 = v80 * v79;
      unsigned int v82 = llroundf(v81);
      if (fabsf(v81) < 1.0) {
        unsigned int v82 = 0;
      }
      LODWORD(__u) = v82;
      std::vector<int>::assign(&v184, v42, (std::vector<int>::const_reference)&__u);
    }
    else if (v42)
    {
      for (uint64_t i = 0; i != v42; ++i)
      {
        MIL::Fp16::GetFloat((MIL::Fp16 *)(*(void *)a13 + 2 * i));
        float v85 = v84 * v79;
        unsigned int v86 = llroundf(v85);
        if (fabsf(v85) >= 1.0) {
          int v87 = v86;
        }
        else {
          int v87 = 0;
        }
        std::vector<int>::pointer end = v184.__end_;
        if (v184.__end_ >= v184.__end_cap_.__value_)
        {
          std::vector<int>::pointer begin = v184.__begin_;
          int64_t v91 = v184.__end_ - v184.__begin_;
          unint64_t v92 = v91 + 1;
          if ((unint64_t)(v91 + 1) >> 62) {
            std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
          }
          int64_t v93 = (char *)v184.__end_cap_.__value_ - (char *)v184.__begin_;
          if (((char *)v184.__end_cap_.__value_ - (char *)v184.__begin_) >> 1 > v92) {
            unint64_t v92 = v93 >> 1;
          }
          if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v94 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v94 = v92;
          }
          if (v94)
          {
            int v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v184.__end_cap_, v94);
            std::vector<int>::pointer begin = v184.__begin_;
            std::vector<int>::pointer end = v184.__end_;
          }
          else
          {
            int v95 = 0;
          }
          int v96 = (int *)&v95[4 * v91];
          *int v96 = v87;
          int64_t v89 = v96 + 1;
          while (end != begin)
          {
            int v97 = *--end;
            *--int v96 = v97;
          }
          v184.__begin_ = v96;
          v184.__end_ = v89;
          v184.__end_cap_.__value_ = (int *)&v95[4 * v94];
          if (begin) {
            operator delete(begin);
          }
        }
        else
        {
          *v184.__end_ = v87;
          int64_t v89 = end + 1;
        }
        v184.__end_ = v89;
      }
    }
  }
  int v98 = (char *)v169[10];
  if (*v169 == 3)
  {
    int v99 = (char *)v169[9];
    if (v98 == v99) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v100 = *(_DWORD *)v99;
    goto LABEL_107;
  }
  int v99 = (char *)v169[9];
  if (*v169 >= 2)
  {
    int v100 = 0;
LABEL_107:
    unint64_t v101 = v98 - v99;
    if (v101 <= 0xC) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v102 = *(_DWORD *)&v99[v101 - 16];
    goto LABEL_111;
  }
  unint64_t v101 = v98 - v99;
  if (v101 <= 4) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  int v102 = 0;
  int v100 = 0;
LABEL_111:
  int v103 = *(_DWORD *)&v99[v101 - 8];
  v207[3] = 0;
  switch(a4)
  {
    case 4:
      uint64_t v104 = &unk_26C318138;
      break;
    case 9:
      uint64_t v104 = &unk_26C318248;
      break;
    case 14:
      uint64_t v104 = &unk_26C3181C8;
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid kernel dtype");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  *(void *)&long long __u = v104;
  p_u = &__u;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::swap[abi:ne180100](&__u, v207);
  unint64_t v105 = std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::~__value_func[abi:ne180100](&__u);
  v206[3] = 0;
  if (a15)
  {
    *(void *)&long long __u = &v199;
    *((void *)&__u + 1) = a13;
    uint64_t v218 = &v203;
    p_u = &v209;
    std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(v206, &__u);
  }
  else
  {
    *(void *)&long long __u = &unk_26C318348;
    *((void *)&__u + 1) = &v203;
    uint64_t v218 = (uint64_t *)&v209;
    p_u = &__u;
    std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v105, v206);
    std::__function::__value_func<float const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](&__u);
  }
  unint64_t v106 = v169;
  unint64_t v107 = v169[1];
  if (v107)
  {
    int v179 = 0;
    uint64_t v108 = 0;
    uint64_t v109 = a20;
    uint64_t v110 = v166;
    uint64_t v111 = v166;
    float v112 = v59;
    int v150 = -v100;
    int v151 = -v102;
    int v156 = -v103;
    while (1)
    {
      int v113 = *((unsigned char *)v106 + 16) ? 0 : v108;
      int v178 = v113;
      if (v167) {
        break;
      }
LABEL_167:
      ++v108;
      v179 += v182;
      if (v107 <= v108) {
        goto LABEL_168;
      }
    }
    uint64_t v181 = 0;
    uint64_t v147 = v108;
    uint64_t v114 = v108 * v110;
    if (*((unsigned char *)v106 + 16)) {
      uint64_t v115 = 0;
    }
    else {
      uint64_t v115 = (int)v108 * (int)v110;
    }
    uint64_t v116 = (void *)a9;
    unint64_t v118 = v164;
    uint64_t v117 = v165;
    uint64_t v153 = v115;
    uint64_t v154 = v108 * v110;
    while (!v170)
    {
LABEL_165:
      if (++v181 == v167)
      {
        unint64_t v106 = v169;
        unint64_t v107 = v169[1];
        uint64_t v110 = v166;
        uint64_t v108 = v147;
        goto LABEL_167;
      }
    }
    uint64_t v119 = 0;
    while (!v171)
    {
LABEL_164:
      if (++v119 == v170) {
        goto LABEL_165;
      }
    }
    uint64_t v120 = 0;
    int v172 = v150 + v158 * v119;
    uint64_t v152 = (v170 * v181 + v119) * v171;
    uint64_t v148 = v119;
    while (!v117)
    {
LABEL_163:
      ++v120;
      uint64_t v119 = v148;
      if (v120 == v171) {
        goto LABEL_164;
      }
    }
    uint64_t v121 = 0;
    int v174 = v151 + v159 * v120;
    unint64_t v122 = v160 * (v152 + v120);
    uint64_t v149 = v120;
    unint64_t v155 = v122;
    while (v166 < 1)
    {
LABEL_162:
      ++v121;
      uint64_t v120 = v149;
      if (v121 == v117) {
        goto LABEL_163;
      }
    }
    uint64_t v123 = 0;
    int v176 = v156 + v161 * v121;
    uint64_t v163 = v118 * v121;
    uint64_t v157 = v121;
    while (1)
    {
      int v183 = 0;
      int v124 = v184.__begin_[v123 + v115];
      int v183 = v124;
      if (v173)
      {
        uint64_t v162 = v123 + v115;
        uint64_t v125 = 0;
        int v126 = 0;
        uint64_t v127 = v175;
        do
        {
          if (v127)
          {
            uint64_t v128 = 0;
            do
            {
              if (v177)
              {
                for (uint64_t j = 0; j != v177; ++j)
                {
                  if (v182)
                  {
                    for (uint64_t k = 0; k != v182; ++k)
                    {
                      char v131 = std::function<signed char const ()(int,int,int,int,int,int)>::operator()((uint64_t)v216, v181, v172 + (int)v125, v174 + (int)v128, v176 + (int)j, v179 + (int)k, v123);
                      char v132 = std::function<signed char ()(signed char)>::operator()((uint64_t)v208, v131);
                      std::function<float const ()(int,int,int,int,int,int)>::operator()((uint64_t)v206, v178, v125, v128, j, k, v123);
                      int v126 = std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator()((uint64_t)v207, (uint64_t)&v183, v126, v132, a10, v133, v112);
                    }
                  }
                }
              }
              ++v128;
              uint64_t v127 = v175;
            }
            while (v128 != v175);
          }
          ++v125;
        }
        while (v125 != v173);
        float v134 = *((float *)__p + v162);
        if (v126)
        {
          double v135 = INFINITY;
          if (v126 == 2) {
            double v135 = -INFINITY;
          }
          uint64_t v116 = (void *)a9;
          unint64_t v118 = v164;
          uint64_t v117 = v165;
          uint64_t v111 = v166;
          uint64_t v109 = a20;
          uint64_t v115 = v153;
          uint64_t v114 = v154;
          uint64_t v121 = v157;
          unint64_t v122 = v155;
          goto LABEL_156;
        }
        int v124 = v183;
        uint64_t v116 = (void *)a9;
        unint64_t v118 = v164;
        uint64_t v117 = v165;
        uint64_t v111 = v166;
        uint64_t v109 = a20;
        uint64_t v115 = v153;
        uint64_t v114 = v154;
        uint64_t v121 = v157;
        unint64_t v122 = v155;
        if (!v183)
        {
LABEL_158:
          float v138 = 0.0;
          goto LABEL_159;
        }
      }
      else
      {
        float v134 = *((float *)__p + v123 + v115);
        if (!v124) {
          goto LABEL_158;
        }
      }
      double v135 = (double)v124;
LABEL_156:
      LODWORD(__u) = 0;
      long double v136 = frexp(v135, (int *)&__u);
      double v137 = ldexp(v136, 11);
      float v138 = ldexp(round(v137), (int)__u - 11);
LABEL_159:
      float v139 = v134 * v138;
      float v140 = 0.0;
      if (v139 != 0.0)
      {
        LODWORD(__u) = 0;
        long double v141 = frexp(v139, (int *)&__u);
        double v142 = ldexp(v141, 11);
        float v140 = ldexp(round(v142), (int)__u - 11);
      }
      int v143 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(v109, v140);
      *(_WORD *)(*v116 + 2 * (v163 + v122 + v123 + v114)) = MIL::Fp16::FromFloat(v143, v144);
      if (++v123 == v111) {
        goto LABEL_162;
      }
    }
  }
LABEL_168:
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v206);
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::~__value_func[abi:ne180100](v207);
  if (v184.__begin_)
  {
    v184.__end_ = v184.__begin_;
    operator delete(v184.__begin_);
  }
  if (__p)
  {
    uint64_t v186 = (float *)__p;
    operator delete(__p);
  }
  std::__function::__value_func<signed char ()(signed char)>::~__value_func[abi:ne180100](v208);
  return std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v216);
}

void sub_210B5D6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,uint64_t a51,void *a52)
{
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::~__value_func[abi:ne180100](&STACK[0x220]);
  if (__p) {
    operator delete(__p);
  }
  if (a52) {
    operator delete(a52);
  }
  int v54 = *(void **)a34;
  if (*(void *)a34)
  {
    *(void *)(a34 + 8) = v54;
    operator delete(v54);
  }
  std::__function::__value_func<signed char ()(signed char)>::~__value_func[abi:ne180100](&STACK[0x240]);
  std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100]((void *)(v52 - 192));
  _Unwind_Resume(a1);
}

void *MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X6>, int a8@<W7>, unint64_t *a9@<X8>, char a10, char a11, char a12, uint64_t a13, MIL::Fp16 **a14, char a15, int a16, __int16 a17, int a18, char a19, uint64_t a20)
{
  uint64_t v218 = *MEMORY[0x263EF8340];
  __int16 v203 = a17;
  uint64_t v201 = a3;
  uint64_t v202 = a1;
  unint64_t v24 = *a7;
  if (*a7 == 3)
  {
    uint64_t v25 = *a2;
    unint64_t v26 = a2[1] - *a2;
    if (v26 <= 8) {
      goto LABEL_182;
    }
    uint64_t v27 = *(void *)(v25 + 8);
    uint64_t v199 = 0;
    uint64_t v200 = v27;
    goto LABEL_5;
  }
  uint64_t v27 = 1;
  uint64_t v199 = 0;
  uint64_t v200 = 1;
  uint64_t v25 = *a2;
  unint64_t v26 = a2[1] - *a2;
  if (v24 >= 2)
  {
LABEL_5:
    if (v26 > 0x10)
    {
      uint64_t v28 = *(void *)(v26 + v25 - 24);
      uint64_t v198 = 0;
      uint64_t v199 = v28;
      goto LABEL_8;
    }
LABEL_182:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v28 = 1;
  uint64_t v198 = 0;
  uint64_t v199 = 1;
  uint64_t v27 = 1;
  if (v26 <= 8) {
    goto LABEL_182;
  }
LABEL_8:
  uint64_t v29 = v26 + v25;
  uint64_t v30 = *(void *)(v29 - 16);
  uint64_t v197 = 0;
  uint64_t v198 = v30;
  uint64_t v196 = *(void *)(v29 - 8);
  uint64_t v197 = v196;
  uint64_t v195 = v196 * v30;
  uint64_t v193 = v196 * v30 * v28 * v27;
  uint64_t v194 = v196 * v30 * v28;
  char v192 = 0;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v203);
  if (v31 == INFINITY)
  {
    char v32 = 127;
  }
  else
  {
    char v32 = 0x80;
    if (v31 != -INFINITY)
    {
      int v33 = llroundf(v31);
      if (v33 >= 127) {
        int v33 = 127;
      }
      if (v33 <= -128) {
        char v32 = 0x80;
      }
      else {
        char v32 = v33;
      }
    }
  }
  char v192 = v32;
  v214[3] = 0;
  if (a15)
  {
    *(void *)&long long v207 = &v197;
    *((void *)&v207 + 1) = &v192;
    uint64_t v208 = &v202;
    long long v209 = &v193;
    __int16 v210 = &v194;
    uint64_t v211 = &v195;
    __int16 v212 = &v196;
    std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(v214, (uint64_t)&v207);
  }
  else
  {
    *(void *)&long long v207 = &v200;
    *((void *)&v207 + 1) = &v199;
    uint64_t v208 = &v198;
    long long v209 = &v202;
    __int16 v210 = &v193;
    uint64_t v211 = &v194;
    __int16 v212 = &v195;
    v213 = &v196;
    if (a8) {
      std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(v214, &v207);
    }
    else {
      std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(v214, &v207);
    }
  }
  v206[0] = &unk_26C318548;
  v206[3] = v206;
  if (a19)
  {
    *(void *)&long long v207 = &unk_26C3185C8;
    long long v209 = (uint64_t *)&v207;
    std::__function::__value_func<signed char ()(signed char)>::swap[abi:ne180100](&v207, v206);
    std::__function::__value_func<signed char ()(signed char)>::~__value_func[abi:ne180100](&v207);
  }
  unint64_t v35 = *(uint64_t **)a6;
  uint64_t v34 = *(void *)(a6 + 8);
  unint64_t v36 = v34 - *(void *)a6;
  if (v34 == *(void *)a6) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v37 = (uint64_t)v36 >> 3;
  uint64_t v165 = *v35;
  unint64_t v38 = *a7;
  if (*a7 == 3)
  {
    if (v36 <= 8) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v39 = v35[1];
    goto LABEL_29;
  }
  if (v38 >= 2)
  {
    uint64_t v39 = 1;
LABEL_29:
    uint64_t v168 = v39;
    if (v36 <= 0x10) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v40 = &v35[v37];
    uint64_t v41 = *(v40 - 2);
    uint64_t v169 = *(v40 - 3);
    unint64_t v42 = *(v40 - 1);
    if (v38 == 3)
    {
      if (a5[1] - *a5 <= 8uLL) {
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v43 = *(void *)(*a5 + 8);
    }
    else
    {
      uint64_t v43 = 1;
    }
    uint64_t v171 = v43;
    uint64_t v44 = *a5;
    unint64_t v45 = a5[1] - *a5;
    if (v45 <= 0x18) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    unint64_t v157 = v42 * v41;
    uint64_t v46 = *(void *)(v45 + v44 - 32);
    goto LABEL_39;
  }
  if (v36 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v44 = *a5;
  unint64_t v45 = a5[1] - *a5;
  if (v45 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v47 = &v35[v37];
  uint64_t v41 = *(v47 - 2);
  unint64_t v42 = *(v47 - 1);
  unint64_t v157 = v42 * v41;
  uint64_t v46 = 1;
  uint64_t v168 = 1;
  uint64_t v169 = 1;
  uint64_t v171 = 1;
LABEL_39:
  uint64_t v48 = v45 + v44;
  uint64_t v49 = *(void *)(v48 - 24);
  uint64_t v50 = *(void *)(v48 - 16);
  uint64_t v191 = *(void *)(v48 - 8);
  uint64_t v180 = v50;
  int v164 = v191;
  uint64_t v190 = v191 * v50;
  uint64_t v175 = v49;
  uint64_t v189 = v191 * v50 * v49;
  uint64_t v173 = v46;
  uint64_t v188 = v189 * v46;
  uint64_t v187 = v189 * v46 * v171;
  *(void *)&long long v207 = &v187;
  *((void *)&v207 + 1) = &v188;
  uint64_t v208 = &v189;
  long long v209 = &v190;
  __int16 v210 = &v191;
  unint64_t v51 = a7[4];
  if (v38 >= 3)
  {
    unint64_t v52 = a7[3];
    unint64_t v53 = v51 - v52;
    if (v51 - v52 <= 8) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v54 = *(_DWORD *)(v51 - 12);
    goto LABEL_45;
  }
  unint64_t v52 = a7[3];
  if (v38 == 2)
  {
    unint64_t v53 = v51 - v52;
    if (v51 - v52 <= 4) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v54 = 1;
LABEL_45:
    int v155 = v54;
    int v55 = *(_DWORD *)(v53 + v52 - 8);
    goto LABEL_47;
  }
  int v55 = 1;
  int v155 = 1;
LABEL_47:
  int v156 = v55;
  uint64_t v167 = a7;
  if (v51 == v52) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  int v158 = *(_DWORD *)(v51 - 4);
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  std::vector<unsigned char>::reserve(a9, v168 * v165 * v169 * v41 * v42);
  uint64_t v163 = v41;
  char v186 = 0;
  std::vector<unsigned char>::assign((char **)a9, v168 * v165 * v169 * v41 * v42, &v186);
  if (a4 == 4) {
    int v56 = 10;
  }
  else {
    int v56 = 0;
  }
  int v57 = v56 + a10;
  double v58 = ldexp(1.0, v57);
  double v59 = ldexp(1.0, v57 + a11);
  unint64_t v60 = v42;
  if (*((unsigned char *)v167 + 16)) {
    v42 /= v167[1];
  }
  unint64_t v162 = v60;
  std::string __p = 0;
  std::vector<int> v184 = 0;
  char v185 = 0;
  std::vector<float>::reserve(&__p, v42);
  float v62 = *a14;
  unint64_t v61 = a14[1];
  if (v61 - *a14 == 2)
  {
    MIL::Fp16::GetFloat(*a14);
    float v64 = exp2(-(double)(v57 + a12)) * v63;
    *(float *)&long long __u = v64;
    std::vector<float>::assign((char **)&__p, v42, &__u);
  }
  else if (v62 != v61)
  {
    double v65 = exp2(-(double)(v57 + a12));
    do
    {
      MIL::Fp16::GetFloat(v62);
      float v67 = v65 * v66;
      float v68 = v184;
      if (v184 >= (float *)v185)
      {
        uint64_t v70 = (float *)__p;
        uint64_t v71 = ((char *)v184 - (unsigned char *)__p) >> 2;
        unint64_t v72 = v71 + 1;
        if ((unint64_t)(v71 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v73 = v185 - (unsigned char *)__p;
        if ((v185 - (unsigned char *)__p) >> 1 > v72) {
          unint64_t v72 = v73 >> 1;
        }
        if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v74 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v74 = v72;
        }
        if (v74)
        {
          unint64_t v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v185, v74);
          uint64_t v70 = (float *)__p;
          float v68 = v184;
        }
        else
        {
          unint64_t v75 = 0;
        }
        int v76 = (float *)&v75[4 * v71];
        *int v76 = v67;
        __int16 v69 = v76 + 1;
        while (v68 != v70)
        {
          int v77 = *((_DWORD *)v68-- - 1);
          *((_DWORD *)v76-- - 1) = v77;
        }
        std::string __p = v76;
        std::vector<int> v184 = v69;
        char v185 = &v75[4 * v74];
        if (v70) {
          operator delete(v70);
        }
      }
      else
      {
        float *v184 = v67;
        __int16 v69 = v68 + 1;
      }
      std::vector<int> v184 = v69;
      float v62 = (MIL::Fp16 *)((char *)v62 + 2);
    }
    while (v62 != v61);
  }
  memset(&v182, 0, sizeof(v182));
  std::vector<int>::reserve(&v182, v42);
  if (a15)
  {
    LODWORD(__u) = 0;
    std::vector<int>::assign(&v182, v42, (std::vector<int>::const_reference)&__u);
  }
  else
  {
    float v78 = v59;
    if (*(void *)(a13 + 8) - *(void *)a13 == 2)
    {
      MIL::Fp16::GetFloat(*(MIL::Fp16 **)a13);
      float v80 = v79 * v78;
      unsigned int v81 = llroundf(v80);
      if (fabsf(v80) < 1.0) {
        unsigned int v81 = 0;
      }
      LODWORD(__u) = v81;
      std::vector<int>::assign(&v182, v42, (std::vector<int>::const_reference)&__u);
    }
    else if (v42)
    {
      for (uint64_t i = 0; i != v42; ++i)
      {
        MIL::Fp16::GetFloat((MIL::Fp16 *)(*(void *)a13 + 2 * i));
        float v84 = v83 * v78;
        unsigned int v85 = llroundf(v84);
        if (fabsf(v84) >= 1.0) {
          int v86 = v85;
        }
        else {
          int v86 = 0;
        }
        std::vector<int>::pointer end = v182.__end_;
        if (v182.__end_ >= v182.__end_cap_.__value_)
        {
          std::vector<int>::pointer begin = v182.__begin_;
          int64_t v90 = v182.__end_ - v182.__begin_;
          unint64_t v91 = v90 + 1;
          if ((unint64_t)(v90 + 1) >> 62) {
            std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
          }
          int64_t v92 = (char *)v182.__end_cap_.__value_ - (char *)v182.__begin_;
          if (((char *)v182.__end_cap_.__value_ - (char *)v182.__begin_) >> 1 > v91) {
            unint64_t v91 = v92 >> 1;
          }
          if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v93 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v93 = v91;
          }
          if (v93)
          {
            unint64_t v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v182.__end_cap_, v93);
            std::vector<int>::pointer begin = v182.__begin_;
            std::vector<int>::pointer end = v182.__end_;
          }
          else
          {
            unint64_t v94 = 0;
          }
          int v95 = (int *)&v94[4 * v90];
          *int v95 = v86;
          uint64_t v88 = v95 + 1;
          while (end != begin)
          {
            int v96 = *--end;
            *--int v95 = v96;
          }
          v182.__begin_ = v95;
          v182.__end_ = v88;
          v182.__end_cap_.__value_ = (int *)&v94[4 * v93];
          if (begin) {
            operator delete(begin);
          }
        }
        else
        {
          *v182.__end_ = v86;
          uint64_t v88 = end + 1;
        }
        v182.__end_ = v88;
      }
    }
  }
  int v97 = (char *)v167[10];
  if (*v167 == 3)
  {
    int v98 = (char *)v167[9];
    if (v97 == v98) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v99 = *(_DWORD *)v98;
    goto LABEL_107;
  }
  int v98 = (char *)v167[9];
  if (*v167 >= 2)
  {
    int v99 = 0;
LABEL_107:
    unint64_t v100 = v97 - v98;
    if (v100 <= 0xC) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v101 = *(_DWORD *)&v98[v100 - 16];
    goto LABEL_111;
  }
  unint64_t v100 = v97 - v98;
  if (v100 <= 4) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  int v101 = 0;
  int v99 = 0;
LABEL_111:
  int v102 = *(_DWORD *)&v98[v100 - 8];
  v205[3] = 0;
  switch(a4)
  {
    case 4:
      int v103 = &unk_26C318648;
      break;
    case 9:
      int v103 = &unk_26C318748;
      break;
    case 14:
      int v103 = &unk_26C3186C8;
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid kernel dtype");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  *(void *)&long long __u = v103;
  p_u = &__u;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::swap[abi:ne180100](&__u, v205);
  uint64_t v104 = std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::~__value_func[abi:ne180100](&__u);
  v204[3] = 0;
  if (a15)
  {
    *(void *)&long long __u = &v197;
    *((void *)&__u + 1) = a13;
    uint64_t v216 = &v201;
    p_u = &v207;
    std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(v204, &__u);
  }
  else
  {
    *(void *)&long long __u = &unk_26C318848;
    *((void *)&__u + 1) = &v201;
    uint64_t v216 = (uint64_t *)&v207;
    p_u = &__u;
    std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v104, v204);
    std::__function::__value_func<float const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](&__u);
  }
  unint64_t v105 = v167;
  unint64_t v106 = v167[1];
  if (v106)
  {
    int v177 = 0;
    uint64_t v107 = 0;
    uint64_t v108 = a20;
    uint64_t v109 = v164;
    uint64_t v110 = v164;
    float v111 = v58;
    int v149 = -v99;
    int v153 = -v102;
    while (1)
    {
      int v112 = *((unsigned char *)v105 + 16) ? 0 : v107;
      int v176 = v112;
      if (v165) {
        break;
      }
LABEL_174:
      ++v107;
      v177 += v180;
      if (v106 <= v107) {
        goto LABEL_175;
      }
    }
    uint64_t v179 = 0;
    uint64_t v146 = v107;
    uint64_t v113 = v107 * v109;
    if (*((unsigned char *)v105 + 16)) {
      uint64_t v114 = 0;
    }
    else {
      uint64_t v114 = (int)v107 * (int)v109;
    }
    uint64_t v115 = a9;
    unint64_t v117 = v162;
    uint64_t v116 = v163;
    uint64_t v151 = v114;
    uint64_t v152 = v107 * v109;
    while (!v168)
    {
LABEL_172:
      if (++v179 == v165)
      {
        unint64_t v105 = v167;
        unint64_t v106 = v167[1];
        uint64_t v109 = v164;
        uint64_t v107 = v146;
        goto LABEL_174;
      }
    }
    uint64_t v118 = 0;
    while (!v169)
    {
LABEL_171:
      if (++v118 == v168) {
        goto LABEL_172;
      }
    }
    uint64_t v119 = 0;
    int v170 = v149 + v155 * v118;
    uint64_t v150 = (v168 * v179 + v118) * v169;
    uint64_t v147 = v118;
    while (!v116)
    {
LABEL_170:
      ++v119;
      uint64_t v118 = v147;
      if (v119 == v169) {
        goto LABEL_171;
      }
    }
    uint64_t v120 = 0;
    int v172 = v156 * v119 - v101;
    unint64_t v160 = v157 * (v150 + v119);
    uint64_t v148 = v119;
    while (v164 < 1)
    {
LABEL_169:
      ++v120;
      uint64_t v119 = v148;
      if (v120 == v116) {
        goto LABEL_170;
      }
    }
    uint64_t v121 = 0;
    int v174 = v153 + v158 * v120;
    uint64_t v161 = v117 * v120;
    uint64_t v154 = v120;
    while (1)
    {
      int v181 = 0;
      int v122 = v182.__begin_[v121 + v114];
      int v181 = v122;
      if (v171)
      {
        uint64_t v159 = v121 + v114;
        uint64_t v123 = 0;
        int v124 = 0;
        uint64_t v125 = v173;
        do
        {
          if (v125)
          {
            uint64_t v126 = 0;
            do
            {
              if (v175)
              {
                for (uint64_t j = 0; j != v175; ++j)
                {
                  if (v180)
                  {
                    for (uint64_t k = 0; k != v180; ++k)
                    {
                      char v129 = std::function<signed char const ()(int,int,int,int,int,int)>::operator()((uint64_t)v214, v179, v170 + (int)v123, v172 + (int)v126, v174 + (int)j, v177 + (int)k, v121);
                      char v130 = std::function<signed char ()(signed char)>::operator()((uint64_t)v206, v129);
                      std::function<float const ()(int,int,int,int,int,int)>::operator()((uint64_t)v204, v176, v123, v126, j, k, v121);
                      int v124 = std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator()((uint64_t)v205, (uint64_t)&v181, v124, v130, a10, v131, v111);
                    }
                  }
                }
              }
              ++v126;
              uint64_t v125 = v173;
            }
            while (v126 != v173);
          }
          ++v123;
        }
        while (v123 != v171);
        float v132 = *((float *)__p + v159);
        if (v124)
        {
          double v133 = INFINITY;
          if (v124 == 2) {
            double v133 = -INFINITY;
          }
          uint64_t v115 = a9;
          unint64_t v117 = v162;
          uint64_t v116 = v163;
          uint64_t v110 = v164;
          uint64_t v108 = a20;
          uint64_t v114 = v151;
          uint64_t v113 = v152;
          uint64_t v120 = v154;
          goto LABEL_156;
        }
        int v122 = v181;
        uint64_t v115 = a9;
        unint64_t v117 = v162;
        uint64_t v116 = v163;
        uint64_t v110 = v164;
        uint64_t v108 = a20;
        uint64_t v114 = v151;
        uint64_t v113 = v152;
        uint64_t v120 = v154;
        if (!v181)
        {
LABEL_158:
          float v136 = 0.0;
          goto LABEL_159;
        }
      }
      else
      {
        float v132 = *((float *)__p + v121 + v114);
        if (!v122) {
          goto LABEL_158;
        }
      }
      double v133 = (double)v122;
LABEL_156:
      LODWORD(__u) = 0;
      long double v134 = frexp(v133, (int *)&__u);
      double v135 = ldexp(v134, 11);
      float v136 = ldexp(round(v135), (int)__u - 11);
LABEL_159:
      float v137 = v132 * v136;
      float v138 = 0.0;
      if (v137 != 0.0)
      {
        LODWORD(__u) = 0;
        long double v139 = frexp(v137, (int *)&__u);
        double v140 = ldexp(v139, 11);
        float v138 = ldexp(round(v140), (int)__u - 11);
      }
      std::function<float ()(float)>::operator()(v108, v138);
      if (v141 == INFINITY)
      {
        LOBYTE(v142) = -1;
      }
      else if (v141 == -INFINITY)
      {
        LOBYTE(v142) = 0;
      }
      else
      {
        int v143 = llroundf(v141);
        if (v143 >= 255) {
          int v143 = 255;
        }
        int v142 = v143 & ~(v143 >> 31);
      }
      *(unsigned char *)(*v115 + v161 + v160 + v121 + v113) = v142;
      if (++v121 == v110) {
        goto LABEL_169;
      }
    }
  }
LABEL_175:
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v204);
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::~__value_func[abi:ne180100](v205);
  if (v182.__begin_)
  {
    v182.__end_ = v182.__begin_;
    operator delete(v182.__begin_);
  }
  if (__p)
  {
    std::vector<int> v184 = (float *)__p;
    operator delete(__p);
  }
  std::__function::__value_func<signed char ()(signed char)>::~__value_func[abi:ne180100](v206);
  return std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v214);
}

void sub_210B5E668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,uint64_t a51,void *a52)
{
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::~__value_func[abi:ne180100](&STACK[0x220]);
  if (__p) {
    operator delete(__p);
  }
  if (a52) {
    operator delete(a52);
  }
  int v54 = *(void **)a34;
  if (*(void *)a34)
  {
    *(void *)(a34 + 8) = v54;
    operator delete(v54);
  }
  std::__function::__value_func<signed char ()(signed char)>::~__value_func[abi:ne180100](&STACK[0x240]);
  std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100]((void *)(v52 - 192));
  _Unwind_Resume(a1);
}

void *MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X6>, int a8@<W7>, unint64_t *a9@<X8>, char a10, char a11, char a12, uint64_t a13, MIL::Fp16 **a14, char a15, int a16, __int16 a17, int a18, char a19, uint64_t a20)
{
  uint64_t v217 = *MEMORY[0x263EF8340];
  __int16 v202 = a17;
  uint64_t v200 = a3;
  uint64_t v201 = a1;
  unint64_t v24 = *a7;
  if (*a7 == 3)
  {
    uint64_t v25 = *a2;
    unint64_t v26 = a2[1] - *a2;
    if (v26 <= 8) {
      goto LABEL_183;
    }
    uint64_t v27 = *(void *)(v25 + 8);
    uint64_t v198 = 0;
    uint64_t v199 = v27;
    goto LABEL_5;
  }
  uint64_t v27 = 1;
  uint64_t v198 = 0;
  uint64_t v199 = 1;
  uint64_t v25 = *a2;
  unint64_t v26 = a2[1] - *a2;
  if (v24 >= 2)
  {
LABEL_5:
    if (v26 > 0x10)
    {
      uint64_t v28 = *(void *)(v26 + v25 - 24);
      uint64_t v197 = 0;
      uint64_t v198 = v28;
      goto LABEL_8;
    }
LABEL_183:
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v28 = 1;
  uint64_t v197 = 0;
  uint64_t v198 = 1;
  uint64_t v27 = 1;
  if (v26 <= 8) {
    goto LABEL_183;
  }
LABEL_8:
  uint64_t v29 = v26 + v25;
  uint64_t v30 = *(void *)(v29 - 16);
  uint64_t v196 = 0;
  uint64_t v197 = v30;
  uint64_t v195 = *(void *)(v29 - 8);
  uint64_t v196 = v195;
  uint64_t v194 = v195 * v30;
  uint64_t v192 = v195 * v30 * v28 * v27;
  uint64_t v193 = v195 * v30 * v28;
  char v191 = 0;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v202);
  if (v31 == INFINITY)
  {
    char v32 = 127;
  }
  else
  {
    char v32 = 0x80;
    if (v31 != -INFINITY)
    {
      int v33 = llroundf(v31);
      if (v33 >= 127) {
        int v33 = 127;
      }
      if (v33 <= -128) {
        char v32 = 0x80;
      }
      else {
        char v32 = v33;
      }
    }
  }
  char v191 = v32;
  v213[3] = 0;
  if (a15)
  {
    *(void *)&long long v206 = &v196;
    *((void *)&v206 + 1) = &v191;
    long long v207 = &v201;
    uint64_t v208 = &v192;
    long long v209 = &v193;
    __int16 v210 = &v194;
    uint64_t v211 = &v195;
    std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(v213, (uint64_t)&v206);
  }
  else
  {
    *(void *)&long long v206 = &v199;
    *((void *)&v206 + 1) = &v198;
    long long v207 = &v197;
    uint64_t v208 = &v201;
    long long v209 = &v192;
    __int16 v210 = &v193;
    uint64_t v211 = &v194;
    __int16 v212 = &v195;
    if (a8) {
      std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(v213, &v206);
    }
    else {
      std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(v213, &v206);
    }
  }
  v205[0] = &unk_26C318A48;
  v205[3] = v205;
  if (a19)
  {
    *(void *)&long long v206 = &unk_26C318AC8;
    uint64_t v208 = (uint64_t *)&v206;
    std::__function::__value_func<signed char ()(signed char)>::swap[abi:ne180100](&v206, v205);
    std::__function::__value_func<signed char ()(signed char)>::~__value_func[abi:ne180100](&v206);
  }
  unint64_t v35 = *(uint64_t **)a6;
  uint64_t v34 = *(void *)(a6 + 8);
  unint64_t v36 = v34 - *(void *)a6;
  if (v34 == *(void *)a6) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v37 = (uint64_t)v36 >> 3;
  uint64_t v164 = *v35;
  unint64_t v38 = *a7;
  if (*a7 == 3)
  {
    if (v36 <= 8) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v39 = v35[1];
    goto LABEL_29;
  }
  if (v38 >= 2)
  {
    uint64_t v39 = 1;
LABEL_29:
    uint64_t v167 = v39;
    if (v36 <= 0x10) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v40 = &v35[v37];
    uint64_t v41 = *(v40 - 2);
    uint64_t v168 = *(v40 - 3);
    unint64_t v42 = *(v40 - 1);
    if (v38 == 3)
    {
      if (a5[1] - *a5 <= 8uLL) {
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v43 = *(void *)(*a5 + 8);
    }
    else
    {
      uint64_t v43 = 1;
    }
    uint64_t v170 = v43;
    uint64_t v44 = *a5;
    unint64_t v45 = a5[1] - *a5;
    if (v45 <= 0x18) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    unint64_t v156 = v42 * v41;
    uint64_t v46 = *(void *)(v45 + v44 - 32);
    goto LABEL_39;
  }
  if (v36 <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v44 = *a5;
  unint64_t v45 = a5[1] - *a5;
  if (v45 <= 0x10) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v47 = &v35[v37];
  uint64_t v41 = *(v47 - 2);
  unint64_t v42 = *(v47 - 1);
  unint64_t v156 = v42 * v41;
  uint64_t v46 = 1;
  uint64_t v167 = 1;
  uint64_t v168 = 1;
  uint64_t v170 = 1;
LABEL_39:
  uint64_t v48 = v45 + v44;
  uint64_t v49 = *(void *)(v48 - 24);
  uint64_t v50 = *(void *)(v48 - 16);
  uint64_t v190 = *(void *)(v48 - 8);
  uint64_t v179 = v50;
  int v163 = v190;
  uint64_t v189 = v190 * v50;
  uint64_t v174 = v49;
  uint64_t v188 = v190 * v50 * v49;
  uint64_t v172 = v46;
  uint64_t v187 = v188 * v46;
  uint64_t v186 = v188 * v46 * v170;
  *(void *)&long long v206 = &v186;
  *((void *)&v206 + 1) = &v187;
  long long v207 = &v188;
  uint64_t v208 = &v189;
  long long v209 = &v190;
  unint64_t v51 = a7[4];
  if (v38 >= 3)
  {
    unint64_t v52 = a7[3];
    unint64_t v53 = v51 - v52;
    if (v51 - v52 <= 8) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v54 = *(_DWORD *)(v51 - 12);
    goto LABEL_45;
  }
  unint64_t v52 = a7[3];
  if (v38 == 2)
  {
    unint64_t v53 = v51 - v52;
    if (v51 - v52 <= 4) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v54 = 1;
LABEL_45:
    int v154 = v54;
    int v55 = *(_DWORD *)(v53 + v52 - 8);
    goto LABEL_47;
  }
  int v55 = 1;
  int v154 = 1;
LABEL_47:
  int v155 = v55;
  int v166 = a7;
  if (v51 == v52) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  int v157 = *(_DWORD *)(v51 - 4);
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  std::vector<unsigned char>::reserve(a9, v167 * v164 * v168 * v41 * v42);
  uint64_t v162 = v41;
  char v185 = 0;
  std::vector<unsigned char>::assign((char **)a9, v167 * v164 * v168 * v41 * v42, &v185);
  if (a4 == 4) {
    int v56 = 10;
  }
  else {
    int v56 = 0;
  }
  int v57 = v56 + a10;
  double v58 = ldexp(1.0, v57);
  double v59 = ldexp(1.0, v57 + a11);
  unint64_t v60 = v42;
  if (*((unsigned char *)v166 + 16)) {
    v42 /= v166[1];
  }
  unint64_t v161 = v60;
  std::string __p = 0;
  int v183 = 0;
  std::vector<int> v184 = 0;
  std::vector<float>::reserve(&__p, v42);
  float v62 = *a14;
  unint64_t v61 = a14[1];
  if (v61 - *a14 == 2)
  {
    MIL::Fp16::GetFloat(*a14);
    float v64 = exp2(-(double)(v57 + a12)) * v63;
    *(float *)&long long __u = v64;
    std::vector<float>::assign((char **)&__p, v42, &__u);
  }
  else if (v62 != v61)
  {
    double v65 = exp2(-(double)(v57 + a12));
    do
    {
      MIL::Fp16::GetFloat(v62);
      float v67 = v65 * v66;
      float v68 = v183;
      if (v183 >= (float *)v184)
      {
        uint64_t v70 = (float *)__p;
        uint64_t v71 = ((char *)v183 - (unsigned char *)__p) >> 2;
        unint64_t v72 = v71 + 1;
        if ((unint64_t)(v71 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v73 = v184 - (unsigned char *)__p;
        if ((v184 - (unsigned char *)__p) >> 1 > v72) {
          unint64_t v72 = v73 >> 1;
        }
        if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v74 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v74 = v72;
        }
        if (v74)
        {
          unint64_t v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v184, v74);
          uint64_t v70 = (float *)__p;
          float v68 = v183;
        }
        else
        {
          unint64_t v75 = 0;
        }
        int v76 = (float *)&v75[4 * v71];
        *int v76 = v67;
        __int16 v69 = v76 + 1;
        while (v68 != v70)
        {
          int v77 = *((_DWORD *)v68-- - 1);
          *((_DWORD *)v76-- - 1) = v77;
        }
        std::string __p = v76;
        int v183 = v69;
        std::vector<int> v184 = &v75[4 * v74];
        if (v70) {
          operator delete(v70);
        }
      }
      else
      {
        float *v183 = v67;
        __int16 v69 = v68 + 1;
      }
      int v183 = v69;
      float v62 = (MIL::Fp16 *)((char *)v62 + 2);
    }
    while (v62 != v61);
  }
  memset(&v181, 0, sizeof(v181));
  std::vector<int>::reserve(&v181, v42);
  if (a15)
  {
    LODWORD(__u) = 0;
    std::vector<int>::assign(&v181, v42, (std::vector<int>::const_reference)&__u);
  }
  else
  {
    float v78 = v59;
    if (*(void *)(a13 + 8) - *(void *)a13 == 2)
    {
      MIL::Fp16::GetFloat(*(MIL::Fp16 **)a13);
      float v80 = v79 * v78;
      unsigned int v81 = llroundf(v80);
      if (fabsf(v80) < 1.0) {
        unsigned int v81 = 0;
      }
      LODWORD(__u) = v81;
      std::vector<int>::assign(&v181, v42, (std::vector<int>::const_reference)&__u);
    }
    else if (v42)
    {
      for (uint64_t i = 0; i != v42; ++i)
      {
        MIL::Fp16::GetFloat((MIL::Fp16 *)(*(void *)a13 + 2 * i));
        float v84 = v83 * v78;
        unsigned int v85 = llroundf(v84);
        if (fabsf(v84) >= 1.0) {
          int v86 = v85;
        }
        else {
          int v86 = 0;
        }
        std::vector<int>::pointer end = v181.__end_;
        if (v181.__end_ >= v181.__end_cap_.__value_)
        {
          std::vector<int>::pointer begin = v181.__begin_;
          int64_t v90 = v181.__end_ - v181.__begin_;
          unint64_t v91 = v90 + 1;
          if ((unint64_t)(v90 + 1) >> 62) {
            std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
          }
          int64_t v92 = (char *)v181.__end_cap_.__value_ - (char *)v181.__begin_;
          if (((char *)v181.__end_cap_.__value_ - (char *)v181.__begin_) >> 1 > v91) {
            unint64_t v91 = v92 >> 1;
          }
          if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v93 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v93 = v91;
          }
          if (v93)
          {
            unint64_t v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v181.__end_cap_, v93);
            std::vector<int>::pointer begin = v181.__begin_;
            std::vector<int>::pointer end = v181.__end_;
          }
          else
          {
            unint64_t v94 = 0;
          }
          int v95 = (int *)&v94[4 * v90];
          *int v95 = v86;
          uint64_t v88 = v95 + 1;
          while (end != begin)
          {
            int v96 = *--end;
            *--int v95 = v96;
          }
          v181.__begin_ = v95;
          v181.__end_ = v88;
          v181.__end_cap_.__value_ = (int *)&v94[4 * v93];
          if (begin) {
            operator delete(begin);
          }
        }
        else
        {
          *v181.__end_ = v86;
          uint64_t v88 = end + 1;
        }
        v181.__end_ = v88;
      }
    }
  }
  int v97 = (char *)v166[10];
  if (*v166 == 3)
  {
    int v98 = (char *)v166[9];
    if (v97 == v98) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v99 = *(_DWORD *)v98;
    goto LABEL_107;
  }
  int v98 = (char *)v166[9];
  if (*v166 >= 2)
  {
    int v99 = 0;
LABEL_107:
    unint64_t v100 = v97 - v98;
    if (v100 <= 0xC) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    int v101 = *(_DWORD *)&v98[v100 - 16];
    goto LABEL_111;
  }
  unint64_t v100 = v97 - v98;
  if (v100 <= 4) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  int v101 = 0;
  int v99 = 0;
LABEL_111:
  int v102 = *(_DWORD *)&v98[v100 - 8];
  v204[3] = 0;
  switch(a4)
  {
    case 4:
      int v103 = &unk_26C318B48;
      break;
    case 9:
      int v103 = &unk_26C318C48;
      break;
    case 14:
      int v103 = &unk_26C318BC8;
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid kernel dtype");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  *(void *)&long long __u = v103;
  p_u = &__u;
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::swap[abi:ne180100](&__u, v204);
  uint64_t v104 = std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::~__value_func[abi:ne180100](&__u);
  v203[3] = 0;
  if (a15)
  {
    *(void *)&long long __u = &v196;
    *((void *)&__u + 1) = a13;
    uint64_t v215 = &v200;
    p_u = &v206;
    std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(v203, &__u);
  }
  else
  {
    *(void *)&long long __u = &unk_26C318D48;
    *((void *)&__u + 1) = &v200;
    uint64_t v215 = (uint64_t *)&v206;
    p_u = &__u;
    std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v104, v203);
    std::__function::__value_func<float const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](&__u);
  }
  unint64_t v105 = v166;
  unint64_t v106 = v166[1];
  if (v106)
  {
    int v176 = 0;
    uint64_t v107 = 0;
    uint64_t v108 = a20;
    uint64_t v109 = v163;
    uint64_t v110 = v163;
    float v111 = v58;
    int v148 = -v99;
    int v152 = -v102;
    while (1)
    {
      int v112 = *((unsigned char *)v105 + 16) ? 0 : v107;
      int v175 = v112;
      if (v164) {
        break;
      }
LABEL_175:
      ++v107;
      v176 += v179;
      if (v106 <= v107) {
        goto LABEL_176;
      }
    }
    uint64_t v178 = 0;
    uint64_t v145 = v107;
    uint64_t v113 = v107 * v109;
    if (*((unsigned char *)v105 + 16)) {
      uint64_t v114 = 0;
    }
    else {
      uint64_t v114 = (int)v107 * (int)v109;
    }
    uint64_t v115 = a9;
    unint64_t v117 = v161;
    uint64_t v116 = v162;
    uint64_t v150 = v114;
    uint64_t v151 = v107 * v109;
    while (!v167)
    {
LABEL_173:
      if (++v178 == v164)
      {
        unint64_t v105 = v166;
        unint64_t v106 = v166[1];
        uint64_t v109 = v163;
        uint64_t v107 = v145;
        goto LABEL_175;
      }
    }
    uint64_t v118 = 0;
    while (!v168)
    {
LABEL_172:
      if (++v118 == v167) {
        goto LABEL_173;
      }
    }
    uint64_t v119 = 0;
    int v169 = v148 + v154 * v118;
    uint64_t v149 = (v167 * v178 + v118) * v168;
    uint64_t v146 = v118;
    while (!v116)
    {
LABEL_171:
      ++v119;
      uint64_t v118 = v146;
      if (v119 == v168) {
        goto LABEL_172;
      }
    }
    uint64_t v120 = 0;
    int v171 = v155 * v119 - v101;
    unint64_t v159 = v156 * (v149 + v119);
    uint64_t v147 = v119;
    while (v163 < 1)
    {
LABEL_170:
      ++v120;
      uint64_t v119 = v147;
      if (v120 == v116) {
        goto LABEL_171;
      }
    }
    uint64_t v121 = 0;
    int v173 = v152 + v157 * v120;
    uint64_t v160 = v117 * v120;
    uint64_t v153 = v120;
    while (1)
    {
      int v180 = 0;
      int v122 = v181.__begin_[v121 + v114];
      int v180 = v122;
      if (v170)
      {
        uint64_t v158 = v121 + v114;
        uint64_t v123 = 0;
        int v124 = 0;
        uint64_t v125 = v172;
        do
        {
          if (v125)
          {
            uint64_t v126 = 0;
            do
            {
              if (v174)
              {
                for (uint64_t j = 0; j != v174; ++j)
                {
                  if (v179)
                  {
                    for (uint64_t k = 0; k != v179; ++k)
                    {
                      char v129 = std::function<signed char const ()(int,int,int,int,int,int)>::operator()((uint64_t)v213, v178, v169 + (int)v123, v171 + (int)v126, v173 + (int)j, v176 + (int)k, v121);
                      char v130 = std::function<signed char ()(signed char)>::operator()((uint64_t)v205, v129);
                      std::function<float const ()(int,int,int,int,int,int)>::operator()((uint64_t)v203, v175, v123, v126, j, k, v121);
                      int v124 = std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator()((uint64_t)v204, (uint64_t)&v180, v124, v130, a10, v131, v111);
                    }
                  }
                }
              }
              ++v126;
              uint64_t v125 = v172;
            }
            while (v126 != v172);
          }
          ++v123;
        }
        while (v123 != v170);
        float v132 = *((float *)__p + v158);
        if (v124)
        {
          double v133 = INFINITY;
          if (v124 == 2) {
            double v133 = -INFINITY;
          }
          uint64_t v115 = a9;
          unint64_t v117 = v161;
          uint64_t v116 = v162;
          uint64_t v110 = v163;
          uint64_t v108 = a20;
          uint64_t v114 = v150;
          uint64_t v113 = v151;
          uint64_t v120 = v153;
          goto LABEL_156;
        }
        int v122 = v180;
        uint64_t v115 = a9;
        unint64_t v117 = v161;
        uint64_t v116 = v162;
        uint64_t v110 = v163;
        uint64_t v108 = a20;
        uint64_t v114 = v150;
        uint64_t v113 = v151;
        uint64_t v120 = v153;
        if (!v180)
        {
LABEL_158:
          float v136 = 0.0;
          goto LABEL_159;
        }
      }
      else
      {
        float v132 = *((float *)__p + v121 + v114);
        if (!v122) {
          goto LABEL_158;
        }
      }
      double v133 = (double)v122;
LABEL_156:
      LODWORD(__u) = 0;
      long double v134 = frexp(v133, (int *)&__u);
      double v135 = ldexp(v134, 11);
      float v136 = ldexp(round(v135), (int)__u - 11);
LABEL_159:
      float v137 = v132 * v136;
      float v138 = 0.0;
      if (v137 != 0.0)
      {
        LODWORD(__u) = 0;
        long double v139 = frexp(v137, (int *)&__u);
        double v140 = ldexp(v139, 11);
        float v138 = ldexp(round(v140), (int)__u - 11);
      }
      std::function<float ()(float)>::operator()(v108, v138);
      if (v141 == INFINITY)
      {
        LOBYTE(v142) = 127;
      }
      else if (v141 == -INFINITY)
      {
        LOBYTE(v142) = 0x80;
      }
      else
      {
        int v142 = llroundf(v141);
        if (v142 >= 127) {
          int v142 = 127;
        }
        if (v142 <= -128) {
          LOBYTE(v142) = 0x80;
        }
      }
      *(unsigned char *)(*v115 + v160 + v159 + v121 + v113) = v142;
      if (++v121 == v110) {
        goto LABEL_170;
      }
    }
  }
LABEL_176:
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v203);
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::~__value_func[abi:ne180100](v204);
  if (v181.__begin_)
  {
    v181.__end_ = v181.__begin_;
    operator delete(v181.__begin_);
  }
  if (__p)
  {
    int v183 = (float *)__p;
    operator delete(__p);
  }
  std::__function::__value_func<signed char ()(signed char)>::~__value_func[abi:ne180100](v205);
  return std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v213);
}

void sub_210B5F5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,uint64_t a51,void *a52)
{
  std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::~__value_func[abi:ne180100](&STACK[0x220]);
  if (__p) {
    operator delete(__p);
  }
  if (a52) {
    operator delete(a52);
  }
  int v54 = *(void **)a34;
  if (*(void *)a34)
  {
    *(void *)(a34 + 8) = v54;
    operator delete(v54);
  }
  std::__function::__value_func<signed char ()(signed char)>::~__value_func[abi:ne180100](&STACK[0x240]);
  std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100]((void *)(v52 - 192));
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::NeMatmulCpu::~NeMatmulCpu(MIL::ANEMachineIR::Interpreter::NeMatmulCpu *this)
{
}

unint64_t MIL::Util::Span<unsigned char const,18446744073709551615ul>::operator[](void *a1, unint64_t a2)
{
  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_26418A7C0, MEMORY[0x263F8C050]);
  }
  return *a1 + a2;
}

void sub_210B5F79C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Util::Span<signed char const,18446744073709551615ul>::operator[](void *a1, unint64_t a2)
{
  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_26418A7C0, MEMORY[0x263F8C050]);
  }
  return *a1 + a2;
}

void sub_210B5F818(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::operator[](void *a1, unint64_t a2)
{
  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_26418A7C0, MEMORY[0x263F8C050]);
  }
  return *a1 + 2 * a2;
}

void sub_210B5F894(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  __int16 v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *__int16 v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    unint64_t result = std::vector<int>::__vallocate[abi:ne180100](v7, v11);
    unint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      unint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  int v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    unint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    unint64_t v19 = v16;
LABEL_18:
    unint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

void *std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(void *a1, uint64_t a2)
{
  v7[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v4 = &unk_26C3161D8;
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 24) = v5;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 32);
  *((void *)v4 + 7) = *(void *)(a2 + 48);
  uint64_t v7[3] = v4;
  std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v7, a1);
  std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v7);
  return a1;
}

void *std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(void *a1, _OWORD *a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (char *)operator new(0x48uLL);
  *(void *)uint64_t v4 = &unk_26C316268;
  long long v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  long long v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v8[3] = v4;
  std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v8, a1);
  std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v8);
  return a1;
}

void *std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(void *a1, _OWORD *a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (char *)operator new(0x48uLL);
  *(void *)uint64_t v4 = &unk_26C3162E8;
  long long v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  long long v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v8[3] = v4;
  std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v8, a1);
  std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v8);
  return a1;
}

char *std::vector<MIL::Fp16>::assign(char **a1, unint64_t a2, _WORD *a3)
{
  unint64_t v6 = (unint64_t)a1[2];
  unint64_t result = *a1;
  if (a2 <= (uint64_t)(v6 - (void)result) >> 1)
  {
    unint64_t v13 = a1[1];
    unint64_t v14 = (v13 - result) >> 1;
    if (v14 >= a2) {
      uint64_t v15 = a2;
    }
    else {
      uint64_t v15 = (v13 - result) >> 1;
    }
    if (v15)
    {
      int v16 = result;
      do
      {
        *(_WORD *)int v16 = *a3;
        v16 += 2;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[2 * a2];
    }
    else
    {
      size_t v17 = &v13[2 * (a2 - v14)];
      uint64_t v18 = 2 * a2 - 2 * v14;
      do
      {
        *(_WORD *)unint64_t v13 = *a3;
        v13 += 2;
        v18 -= 2;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      unint64_t v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    }
    if (v6 <= a2) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = v6;
    }
    if (v6 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v9 = v8;
    }
    unint64_t result = std::vector<MIL::Fp16>::__vallocate[abi:ne180100](a1, v9);
    uint64_t v10 = a1[1];
    unint64_t v11 = &v10[2 * a2];
    uint64_t v12 = 2 * a2;
    do
    {
      *(_WORD *)uint64_t v10 = *a3;
      v10 += 2;
      v12 -= 2;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v3, a2);
    __int16 v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = &v6[4 * v8];
    uint64_t v10 = (char *)*a1;
    unint64_t v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

char *std::vector<float>::assign(char **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6 = (uint64_t)a1[2];
  unint64_t result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 2)
  {
    int v13 = a1[1];
    unint64_t v14 = (v13 - result) >> 2;
    if (v14 >= a2) {
      uint64_t v15 = a2;
    }
    else {
      uint64_t v15 = (v13 - result) >> 2;
    }
    if (v15)
    {
      int v16 = result;
      do
      {
        *(_DWORD *)int v16 = *a3;
        v16 += 4;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[4 * a2];
    }
    else
    {
      size_t v17 = &v13[4 * (a2 - v14)];
      uint64_t v18 = 4 * a2 - 4 * v14;
      do
      {
        *(_DWORD *)int v13 = *a3;
        v13 += 4;
        v18 -= 4;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 62) {
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v6 >> 1;
    if (v6 >> 1 <= a2) {
      uint64_t v8 = a2;
    }
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v9 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    unint64_t result = std::vector<int>::__vallocate[abi:ne180100](a1, v9);
    uint64_t v10 = a1[1];
    unint64_t v11 = &v10[4 * a2];
    uint64_t v12 = 4 * a2;
    do
    {
      *(_DWORD *)uint64_t v10 = *a3;
      v10 += 4;
      v12 -= 4;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

void *std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(void *a1, _OWORD *a2)
{
  v7[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v4 = &unk_26C3165F8;
  long long v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  uint64_t v7[3] = v4;
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v7, a1);
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v7);
  return a1;
}

uint64_t std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  int v13 = a3;
  int v14 = a2;
  int v12 = a4;
  int v10 = a6;
  int v11 = a5;
  int v9 = a7;
  uint64_t v7 = *(void *)(a1 + 24);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *, int *, int *, int *, int *, int *))(*(void *)v7 + 48))(v7, &v14, &v13, &v12, &v11, &v10, &v9);
}

uint64_t std::function<float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  int v13 = a3;
  int v14 = a2;
  int v12 = a4;
  int v10 = a6;
  int v11 = a5;
  int v9 = a7;
  uint64_t v7 = *(void *)(a1 + 24);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *, int *, int *, int *, int *, int *))(*(void *)v7 + 48))(v7, &v14, &v13, &v12, &v11, &v10, &v9);
}

uint64_t std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator()(uint64_t a1, uint64_t a2, int a3, __int16 a4, char a5, float a6, float a7)
{
  __int16 v13 = a4;
  int v12 = a3;
  float v11 = a6;
  float v10 = a7;
  char v9 = a5;
  uint64_t v7 = *(void *)(a1 + 24);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, int *, __int16 *, float *, float *, char *))(*(void *)v7 + 48))(v7, a2, &v12, &v13, &v11, &v10, &v9);
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x40uLL);
  *(void *)int v2 = &unk_26C3161D8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C3161D8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<MIL::Fp16 const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<MIL::Fp16 const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1} &,int,int,int,int,int,int>(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  uint64_t v6 = *a6;
  if (**(void **)a1 == v6) {
    uint64_t v7 = *(unsigned __int16 **)(a1 + 8);
  }
  else {
    uint64_t v7 = (unsigned __int16 *)(**(void **)(a1 + 16)
  }
                            + 2
                            * (v6
                             + **(void **)(a1 + 24) * *a2
                             + **(void **)(a1 + 32) * *a3
                             + **(void **)(a1 + 40) * *a4
                             + **(void **)(a1 + 48) * *a5));
  return *v7;
}

void *std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    long long v3 = result;
    long long v4 = (void *)result[3];
    long long v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_210B60470(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x48uLL);
  *(void *)int v2 = &unk_26C316268;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C316268;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<MIL::Fp16 const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2} &,int,int,int,int,int,int>((MIL::Fp16 *)(a1 + 8), a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<MIL::Fp16 const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2} &,int,int,int,int,int,int>(MIL::Fp16 *a1, int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, int *a6)
{
  unint64_t v6 = *a3;
  if ((v6 & 0x80000000) != 0) {
    return MIL::Fp16::FromFloat(a1, 0.0);
  }
  if (**(void **)a1 <= v6) {
    return MIL::Fp16::FromFloat(a1, 0.0);
  }
  unint64_t v7 = *a4;
  if ((v7 & 0x80000000) != 0) {
    return MIL::Fp16::FromFloat(a1, 0.0);
  }
  if (**((void **)a1 + 1) <= v7) {
    return MIL::Fp16::FromFloat(a1, 0.0);
  }
  unint64_t v8 = *a5;
  if ((v8 & 0x80000000) != 0 || **((void **)a1 + 2) <= v8) {
    return MIL::Fp16::FromFloat(a1, 0.0);
  }
  else {
    return *(unsigned __int16 *)(**((void **)a1 + 3)
  }
                               + 2
                               * (*a6
                                + **((void **)a1 + 4) * *a2
                                + **((void **)a1 + 5) * v6
                                + **((void **)a1 + 6) * v7
                                + **((void **)a1 + 7) * v8));
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x48uLL);
  *(void *)int v2 = &unk_26C3162E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C3162E8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<MIL::Fp16 const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<MIL::Fp16 const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3} &,int,int,int,int,int,int>(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  unint64_t v6 = *a3 & ~(*a3 >> 31);
  if (**(void **)a1 - 1 < v6) {
    unint64_t v6 = **(void **)a1 - 1;
  }
  unint64_t v8 = *a4 & ~(*a4 >> 31);
  unint64_t v7 = *(void **)(a1 + 8);
  if (*v7 - 1 < v8) {
    unint64_t v8 = *v7 - 1;
  }
  unint64_t v9 = *a5 & ~(*a5 >> 31);
  if (**(void **)(a1 + 16) - 1 < v9) {
    unint64_t v9 = **(void **)(a1 + 16) - 1;
  }
  return *(unsigned __int16 *)(**(void **)(a1 + 24)
                             + 2
                             * (*a6
                              + **(void **)(a1 + 32) * *a2
                              + **(void **)(a1 + 40) * v6
                              + **(void **)(a1 + 48) * v8
                              + **(void **)(a1 + 56) * v9));
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C316368;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C316368;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, unsigned __int16 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C3163E8;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C3163E8;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, __int16 *a2)
{
  __int16 v5 = *a2;
  Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  if (v3 < 0.0) {
    float v3 = 0.0;
  }
  return MIL::Fp16::FromFloat(Float, v3);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C316468;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C316468;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, __int16 *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char>(uint64_t a1, int *a2, unsigned int *a3, __int16 *a4, float *a5, float *a6, char *a7)
{
  uint64_t result = *a3;
  if (!result)
  {
    float v9 = *a5;
    float v10 = *a6;
    int v11 = *a7;
    __int16 v19 = *a4;
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v19);
    float v13 = v12;
    int v14 = ilogbf(v12);
    if (v14 <= -14) {
      int v15 = -14;
    }
    else {
      int v15 = v14;
    }
    int v16 = ilogbf(v9);
    if (v16 <= -14) {
      int v17 = -14;
    }
    else {
      int v17 = v16;
    }
    if (v15 + v11 + v17 >= -20)
    {
      uint64_t v18 = *a2 + (uint64_t)(int)llroundf(v10 * (float)(v9 * v13));
      if (v18 < 0x80000000)
      {
        if (v18 > (uint64_t)0xFFFFFFFF7FFFFFFFLL)
        {
          uint64_t result = 0;
          *a2 = v18;
        }
        else
        {
          *a2 = -8388608;
          return 2;
        }
      }
      else
      {
        *a2 = 2139095040;
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    float v3 = result;
    long long v4 = (void *)result[3];
    __int16 v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_210B60DB4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C3164F8;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C3164F8;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, __int16 *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char>(uint64_t a1, int *a2, unsigned int *a3, __int16 *a4, float *a5, float *a6, char *a7)
{
  uint64_t result = *a3;
  if (!result)
  {
    float v9 = *a5;
    float v10 = *a6;
    int v11 = *a7;
    __int16 v17 = *a4;
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v17);
    float v13 = v12;
    int v14 = ilogbf(v12);
    if (v14 <= -14) {
      int v15 = -14;
    }
    else {
      int v15 = v14;
    }
    if (v15 + v11 >= -20)
    {
      uint64_t v16 = *a2 + (uint64_t)(int)llroundf(v10 * (float)(v13 * (float)(int)v9));
      if (v16 < 0x80000000)
      {
        if (v16 > (uint64_t)0xFFFFFFFF7FFFFFFFLL)
        {
          uint64_t result = 0;
          *a2 = v16;
        }
        else
        {
          *a2 = -8388608;
          return 2;
        }
      }
      else
      {
        *a2 = 2139095040;
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C316578;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C316578;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, __int16 *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char>(uint64_t a1, int *a2, unsigned int *a3, __int16 *a4, float *a5, float *a6, char *a7)
{
  uint64_t result = *a3;
  if (!result)
  {
    float v9 = *a5;
    float v10 = *a6;
    int v11 = *a7;
    __int16 v17 = *a4;
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v17);
    float v13 = v12;
    int v14 = ilogbf(v12);
    if (v14 <= -14) {
      int v15 = -14;
    }
    else {
      int v15 = v14;
    }
    if (v15 + v11 >= -20)
    {
      uint64_t v16 = *a2 + (uint64_t)(int)llroundf(v10 * (float)(v13 * (float)(int)v9));
      if (v16 < 0x80000000)
      {
        if (v16 > (uint64_t)0xFFFFFFFF7FFFFFFFLL)
        {
          uint64_t result = 0;
          *a2 = v16;
        }
        else
        {
          *a2 = -8388608;
          return 2;
        }
      }
      else
      {
        *a2 = 2139095040;
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x28uLL);
  *(void *)int v2 = &unk_26C3165F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C3165F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5} &,int,int,int,int,int,int>(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  uint64_t v7 = *a6;
  unint64_t v8 = *a7;
  if (**(void **)a1 == v7)
  {
    float v9 = *(void **)(a1 + 8);
    if (v8 >= (uint64_t)(v9[1] - *v9) >> 1) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    float v10 = (MIL::Fp16 *)(*v9 + 2 * v8);
  }
  else
  {
    int v11 = *(void ***)(a1 + 24);
    float v10 = (MIL::Fp16 *)(**(void **)(a1 + 16)
                      + 2 * (v8 + **v11 * *a2 + *v11[1] * *a3 + *v11[2] * *a4 + *v11[3] * *a5 + *v11[4] * v7));
  }
  return MIL::Fp16::GetFloat(v10);
}

void *std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    float v3 = result;
    long long v4 = (void *)result[3];
    __int16 v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_210B6151C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x18uLL);
  *(void *)int v2 = &unk_26C316688;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C316688;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6} &,int,int,int,int,int,int>(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  uint64_t v7 = *(void ***)(a1 + 8);
  return MIL::Fp16::GetFloat((MIL::Fp16 *)(**(void **)a1
                                         + 2
                                         * (*a7 + **v7 * *a2 + *v7[1] * *a3 + *v7[2] * *a4 + *v7[3] * *a5 + *v7[4] * *a6)));
}

void *std::__function::__value_func<float const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(void *a1, uint64_t a2)
{
  v7[4] = *MEMORY[0x263EF8340];
  long long v4 = (char *)operator new(0x40uLL);
  *(void *)long long v4 = &unk_26C316708;
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 24) = v5;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 32);
  *((void *)v4 + 7) = *(void *)(a2 + 48);
  uint64_t v7[3] = v4;
  std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v7, a1);
  std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v7);
  return a1;
}

void *std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(void *a1, _OWORD *a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  long long v4 = (char *)operator new(0x48uLL);
  *(void *)long long v4 = &unk_26C316788;
  long long v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  long long v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v8[3] = v4;
  std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v8, a1);
  std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v8);
  return a1;
}

void *std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(void *a1, _OWORD *a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  long long v4 = (char *)operator new(0x48uLL);
  *(void *)long long v4 = &unk_26C316808;
  long long v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  long long v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v8[3] = v4;
  std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v8, a1);
  std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v8);
  return a1;
}

void std::vector<unsigned char>::reserve(unint64_t *a1, size_t __sz)
{
  unint64_t v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0) {
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    }
    long long v5 = (char *)a1[1];
    long long v6 = operator new(__sz);
    uint64_t v7 = &v5[(void)v6 - v2];
    unint64_t v8 = v7;
    if (v5 != (char *)v2)
    {
      float v9 = &v5[~v2];
      do
      {
        char v10 = *--v5;
        (v9--)[(void)v6] = v10;
      }
      while (v5 != (char *)v2);
      unint64_t v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
    {
      operator delete((void *)v2);
    }
  }
}

char *std::vector<unsigned char>::assign(char **a1, unint64_t a2, char *a3)
{
  unint64_t v4 = a2;
  unint64_t v6 = (unint64_t)a1[2];
  __n128 result = *a1;
  if (v6 - (unint64_t)result >= a2)
  {
    unint64_t v12 = a1[1] - result;
    if (v12 >= a2) {
      unint64_t v13 = a2;
    }
    else {
      unint64_t v13 = a1[1] - result;
    }
    for (; v13; --v13)
      *result++ = *a3;
    BOOL v14 = a2 >= v12;
    unint64_t v15 = a2 - v12;
    if (v15 != 0 && v14)
    {
      uint64_t v16 = a1[1];
      __int16 v17 = &v16[v15];
      do
      {
        *v16++ = *a3;
        --v15;
      }
      while (v15);
      a1[1] = v17;
    }
    else
    {
      a1[1] = &(*a1)[a2];
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      unint64_t v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if ((v4 & 0x8000000000000000) != 0) {
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = 2 * v6;
    if (2 * v6 <= v4) {
      uint64_t v8 = v4;
    }
    if (v6 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v9 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v9 = v8;
    }
    __n128 result = std::vector<unsigned char>::__vallocate[abi:ne180100](a1, v9);
    char v10 = a1[1];
    int v11 = &v10[v4];
    do
    {
      *v10++ = *a3;
      --v4;
    }
    while (v4);
    a1[1] = v11;
  }
  return result;
}

void *std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(void *a1, _OWORD *a2)
{
  v7[4] = *MEMORY[0x263EF8340];
  unint64_t v4 = (char *)operator new(0x28uLL);
  *(void *)unint64_t v4 = &unk_26C316B08;
  long long v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  uint64_t v7[3] = v4;
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v7, a1);
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v7);
  return a1;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v2 = &unk_26C316708;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C316708;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<MIL::Fp16 const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)unint64_t v2 = &unk_26C316788;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C316788;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<MIL::Fp16 const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2} &,int,int,int,int,int,int>((MIL::Fp16 *)(a1 + 8), a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)unint64_t v2 = &unk_26C316808;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C316808;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<MIL::Fp16 const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C316888;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C316888;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, unsigned __int16 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C316908;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C316908;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, __int16 *a2)
{
  __int16 v5 = *a2;
  Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  if (v3 < 0.0) {
    float v3 = 0.0;
  }
  return MIL::Fp16::FromFloat(Float, v3);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C316988;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C316988;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, __int16 *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C316A08;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C316A08;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, __int16 *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C316A88;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C316A88;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, __int16 *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)unint64_t v2 = &unk_26C316B08;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C316B08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C316B88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C316B88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

void *std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(void *a1, uint64_t a2)
{
  v7[4] = *MEMORY[0x263EF8340];
  long long v4 = (char *)operator new(0x40uLL);
  *(void *)long long v4 = &unk_26C316C08;
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 24) = v5;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 32);
  *((void *)v4 + 7) = *(void *)(a2 + 48);
  uint64_t v7[3] = v4;
  std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v7, a1);
  std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v7);
  return a1;
}

void *std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(void *a1, _OWORD *a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  long long v4 = (char *)operator new(0x48uLL);
  *(void *)long long v4 = &unk_26C316C88;
  long long v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  long long v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v8[3] = v4;
  std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v8, a1);
  std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v8);
  return a1;
}

void *std::function<MIL::Fp16 const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(void *a1, _OWORD *a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  long long v4 = (char *)operator new(0x48uLL);
  *(void *)long long v4 = &unk_26C316D08;
  long long v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  long long v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v8[3] = v4;
  std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v8, a1);
  std::__function::__value_func<MIL::Fp16 const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v8);
  return a1;
}

void *std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(void *a1, _OWORD *a2)
{
  v7[4] = *MEMORY[0x263EF8340];
  long long v4 = (char *)operator new(0x28uLL);
  *(void *)long long v4 = &unk_26C317008;
  long long v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  uint64_t v7[3] = v4;
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v7, a1);
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v7);
  return a1;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v2 = &unk_26C316C08;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C316C08;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<MIL::Fp16 const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)unint64_t v2 = &unk_26C316C88;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C316C88;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<MIL::Fp16 const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2} &,int,int,int,int,int,int>((MIL::Fp16 *)(a1 + 8), a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)unint64_t v2 = &unk_26C316D08;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C316D08;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<MIL::Fp16 const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,MIL::Fp16 const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C316D88;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C316D88;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, unsigned __int16 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#1}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::~__func()
{
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C316E08;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C316E08;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::operator()(uint64_t a1, __int16 *a2)
{
  __int16 v5 = *a2;
  Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v5);
  if (v3 < 0.0) {
    float v3 = 0.0;
  }
  return MIL::Fp16::FromFloat(Float, v3);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(MIL::Fp16)#2}>,MIL::Fp16 ()(MIL::Fp16)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C316E88;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C316E88;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, __int16 *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C316F08;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C316F08;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, __int16 *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C316F88;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C316F88;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, __int16 *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,MIL::Fp16,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)unint64_t v2 = &unk_26C317008;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C317008;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C317088;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C317088;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

void *std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(void *a1, uint64_t a2)
{
  v7[4] = *MEMORY[0x263EF8340];
  long long v4 = (char *)operator new(0x40uLL);
  *(void *)long long v4 = &unk_26C317108;
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 24) = v5;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 32);
  *((void *)v4 + 7) = *(void *)(a2 + 48);
  uint64_t v7[3] = v4;
  std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v7, a1);
  std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v7);
  return a1;
}

void *std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(void *a1, _OWORD *a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  long long v4 = (char *)operator new(0x48uLL);
  *(void *)long long v4 = &unk_26C317198;
  long long v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  long long v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v8[3] = v4;
  std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v8, a1);
  std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v8);
  return a1;
}

void *std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(void *a1, _OWORD *a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  long long v4 = (char *)operator new(0x48uLL);
  *(void *)long long v4 = &unk_26C317218;
  long long v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  long long v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v8[3] = v4;
  std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v8, a1);
  std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v8);
  return a1;
}

void *std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(void *a1, _OWORD *a2)
{
  v7[4] = *MEMORY[0x263EF8340];
  long long v4 = (char *)operator new(0x28uLL);
  *(void *)long long v4 = &unk_26C3174A8;
  long long v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  uint64_t v7[3] = v4;
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v7, a1);
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v7);
  return a1;
}

uint64_t std::function<unsigned char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  int v13 = a3;
  int v14 = a2;
  int v12 = a4;
  int v10 = a6;
  int v11 = a5;
  int v9 = a7;
  uint64_t v7 = *(void *)(a1 + 24);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *, int *, int *, int *, int *, int *))(*(void *)v7 + 48))(v7, &v14, &v13, &v12, &v11, &v10, &v9);
}

uint64_t std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator()(uint64_t a1, uint64_t a2, int a3, char a4, char a5, float a6, float a7)
{
  int v13 = a3;
  char v12 = a4;
  float v11 = a6;
  float v10 = a7;
  char v9 = a5;
  uint64_t v7 = *(void *)(a1 + 24);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, int *, char *, float *, float *, char *))(*(void *)v7 + 48))(v7, a2, &v13, &v12, &v11, &v10, &v9);
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v2 = &unk_26C317108;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C317108;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<unsigned char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<unsigned char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1} &,int,int,int,int,int,int>(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  uint64_t v6 = *a6;
  if (**(void **)a1 == v6) {
    uint64_t v7 = *(unsigned __int8 **)(a1 + 8);
  }
  else {
    uint64_t v7 = (unsigned __int8 *)(**(void **)(a1 + 16)
  }
                           + v6
                           + **(void **)(a1 + 24) * *a2
                           + **(void **)(a1 + 32) * *a3
                           + **(void **)(a1 + 40) * *a4
                           + **(void **)(a1 + 48) * *a5);
  return *v7;
}

void *std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    long long v3 = result;
    long long v4 = (void *)result[3];
    long long v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_210B63958(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)unint64_t v2 = &unk_26C317198;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C317198;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<unsigned char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2} &,int,int,int,int,int,int>((unint64_t **)(a1 + 8), a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<unsigned char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2} &,int,int,int,int,int,int>(unint64_t **a1, int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, int *a6)
{
  unint64_t v6 = *a3;
  if ((v6 & 0x80000000) != 0) {
    return 0;
  }
  uint64_t v7 = 0;
  unint64_t v8 = *a4;
  if ((v8 & 0x80000000) == 0 && **a1 > v6)
  {
    uint64_t v7 = 0;
    unint64_t v9 = *a5;
    if ((v9 & 0x80000000) == 0 && *a1[1] > v8)
    {
      if (*a1[2] > v9) {
        return *(unsigned __int8 *)(*a1[3] + *a6 + *a1[4] * *a2 + *a1[5] * v6 + *a1[6] * v8 + *a1[7] * v9);
      }
      return 0;
    }
  }
  return v7;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)unint64_t v2 = &unk_26C317218;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C317218;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<unsigned char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<unsigned char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3} &,int,int,int,int,int,int>(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  unint64_t v6 = *a3 & ~(*a3 >> 31);
  if (**(void **)a1 - 1 < v6) {
    unint64_t v6 = **(void **)a1 - 1;
  }
  unint64_t v8 = *a4 & ~(*a4 >> 31);
  uint64_t v7 = *(void **)(a1 + 8);
  if (*v7 - 1 < v8) {
    unint64_t v8 = *v7 - 1;
  }
  unint64_t v9 = *a5 & ~(*a5 >> 31);
  if (**(void **)(a1 + 16) - 1 < v9) {
    unint64_t v9 = **(void **)(a1 + 16) - 1;
  }
  return *(unsigned __int8 *)(**(void **)(a1 + 24)
                            + *a6
                            + **(void **)(a1 + 32) * *a2
                            + **(void **)(a1 + 40) * v6
                            + **(void **)(a1 + 48) * v8
                            + **(void **)(a1 + 56) * v9);
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::~__func()
{
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C317298;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C317298;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target_type()
{
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C317318;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C317318;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned __int8 *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char>(uint64_t a1, int *a2, unsigned int *a3, unsigned __int8 *a4, float *a5, float *a6, char *a7)
{
  uint64_t result = *a3;
  if (!result)
  {
    unsigned int v9 = *a4;
    float v10 = *a5;
    float v11 = *a6;
    int v12 = *a7;
    int v13 = ilogbf(*a5);
    if (v13 <= -14) {
      int v14 = -14;
    }
    else {
      int v14 = v13;
    }
    if (v14 + v12 >= -20)
    {
      uint64_t v15 = *a2 + (uint64_t)(int)llroundf((float)(v10 * (float)v9) * v11);
      if (v15 < 0x80000000)
      {
        if (v15 > (uint64_t)0xFFFFFFFF7FFFFFFFLL)
        {
          uint64_t result = 0;
          *a2 = v15;
        }
        else
        {
          *a2 = -8388608;
          return 2;
        }
      }
      else
      {
        *a2 = 2139095040;
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    long long v3 = result;
    long long v4 = (void *)result[3];
    long long v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_210B6417C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C3173A8;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C3173A8;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned __int8 *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char>(uint64_t a1, int *a2, unsigned int *a3, unsigned __int8 *a4, float *a5, float *a6, char *a7)
{
  uint64_t result = *a3;
  if (!result)
  {
    if (*a7 >= -20)
    {
      uint64_t v8 = *a2 + (uint64_t)(int)llroundf(*a6 * (float)((float)*a4 * (float)(int)*a5));
      if (v8 < 0x80000000)
      {
        if (v8 > (uint64_t)0xFFFFFFFF7FFFFFFFLL)
        {
          uint64_t result = 0;
          *a2 = v8;
        }
        else
        {
          *a2 = -8388608;
          return 2;
        }
      }
      else
      {
        *a2 = 2139095040;
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C317428;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C317428;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned __int8 *a4, float *a5, uint64_t a6, unsigned char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char>(uint64_t a1, int *a2, unsigned int *a3, unsigned __int8 *a4, float *a5, uint64_t a6, unsigned char *a7)
{
  uint64_t result = *a3;
  if (!result)
  {
    int v8 = (int)*a5 * *a4;
    int v9 = (v8 + (1 << ~*a7)) >> -*a7;
    if ((char)*a7 >= 1) {
      int v9 = v8 << *a7;
    }
    if (*a7) {
      int v10 = v9;
    }
    else {
      int v10 = (int)*a5 * *a4;
    }
    uint64_t v11 = *a2 + (uint64_t)v10;
    if (v11 < 0x80000000)
    {
      if (v11 > (uint64_t)0xFFFFFFFF7FFFFFFFLL)
      {
        uint64_t result = 0;
        *a2 = v11;
      }
      else
      {
        *a2 = -8388608;
        return 2;
      }
    }
    else
    {
      *a2 = 2139095040;
      return 1;
    }
  }
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)unint64_t v2 = &unk_26C3174A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C3174A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C317528;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C317528;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

void *std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(void *a1, uint64_t a2)
{
  v7[4] = *MEMORY[0x263EF8340];
  long long v4 = (char *)operator new(0x40uLL);
  *(void *)long long v4 = &unk_26C3175A8;
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 24) = v5;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 32);
  *((void *)v4 + 7) = *(void *)(a2 + 48);
  uint64_t v7[3] = v4;
  std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v7, a1);
  std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v7);
  return a1;
}

void *std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(void *a1, _OWORD *a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  long long v4 = (char *)operator new(0x48uLL);
  *(void *)long long v4 = &unk_26C317628;
  long long v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  long long v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v8[3] = v4;
  std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v8, a1);
  std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v8);
  return a1;
}

void *std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(void *a1, _OWORD *a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  long long v4 = (char *)operator new(0x48uLL);
  *(void *)long long v4 = &unk_26C3176A8;
  long long v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  long long v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v8[3] = v4;
  std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v8, a1);
  std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v8);
  return a1;
}

void *std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(void *a1, _OWORD *a2)
{
  v7[4] = *MEMORY[0x263EF8340];
  long long v4 = (char *)operator new(0x28uLL);
  *(void *)long long v4 = &unk_26C317928;
  long long v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  uint64_t v7[3] = v4;
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v7, a1);
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v7);
  return a1;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v2 = &unk_26C3175A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C3175A8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<unsigned char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)unint64_t v2 = &unk_26C317628;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C317628;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<unsigned char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2} &,int,int,int,int,int,int>((unint64_t **)(a1 + 8), a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)unint64_t v2 = &unk_26C3176A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C3176A8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<unsigned char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::~__func()
{
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C317728;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C317728;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C3177A8;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C3177A8;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned __int8 *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C317828;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C317828;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned __int8 *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C3178A8;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C3178A8;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned __int8 *a4, float *a5, uint64_t a6, unsigned char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)unint64_t v2 = &unk_26C317928;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C317928;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C3179A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C3179A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

void *std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(void *a1, uint64_t a2)
{
  v7[4] = *MEMORY[0x263EF8340];
  long long v4 = (char *)operator new(0x40uLL);
  *(void *)long long v4 = &unk_26C317A28;
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 24) = v5;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 32);
  *((void *)v4 + 7) = *(void *)(a2 + 48);
  uint64_t v7[3] = v4;
  std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v7, a1);
  std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v7);
  return a1;
}

void *std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(void *a1, _OWORD *a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  long long v4 = (char *)operator new(0x48uLL);
  *(void *)long long v4 = &unk_26C317AA8;
  long long v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  long long v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v8[3] = v4;
  std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v8, a1);
  std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v8);
  return a1;
}

void *std::function<unsigned char const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(void *a1, _OWORD *a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  long long v4 = (char *)operator new(0x48uLL);
  *(void *)long long v4 = &unk_26C317B28;
  long long v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  long long v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v8[3] = v4;
  std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v8, a1);
  std::__function::__value_func<unsigned char const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v8);
  return a1;
}

void *std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(void *a1, _OWORD *a2)
{
  v7[4] = *MEMORY[0x263EF8340];
  long long v4 = (char *)operator new(0x28uLL);
  *(void *)long long v4 = &unk_26C317DA8;
  long long v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  uint64_t v7[3] = v4;
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v7, a1);
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v7);
  return a1;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v2 = &unk_26C317A28;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C317A28;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<unsigned char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,unsigned char const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)unint64_t v2 = &unk_26C317AA8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C317AA8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<unsigned char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2} &,int,int,int,int,int,int>((unint64_t **)(a1 + 8), a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,unsigned char const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)unint64_t v2 = &unk_26C317B28;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C317B28;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<unsigned char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,unsigned char const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::~__func()
{
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C317BA8;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C317BA8;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(unsigned char)#1}>,unsigned char ()(unsigned char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C317C28;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C317C28;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned __int8 *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C317CA8;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C317CA8;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned __int8 *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C317D28;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C317D28;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned __int8 *a4, float *a5, uint64_t a6, unsigned char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,unsigned char,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)unint64_t v2 = &unk_26C317DA8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C317DA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C317E28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C317E28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(unsigned char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

void *std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(void *a1, uint64_t a2)
{
  v7[4] = *MEMORY[0x263EF8340];
  long long v4 = (char *)operator new(0x40uLL);
  *(void *)long long v4 = &unk_26C317EA8;
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 24) = v5;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 32);
  *((void *)v4 + 7) = *(void *)(a2 + 48);
  uint64_t v7[3] = v4;
  std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v7, a1);
  std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v7);
  return a1;
}

void *std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(void *a1, _OWORD *a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  long long v4 = (char *)operator new(0x48uLL);
  *(void *)long long v4 = &unk_26C317F38;
  long long v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  long long v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v8[3] = v4;
  std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v8, a1);
  std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v8);
  return a1;
}

void *std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(void *a1, _OWORD *a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  long long v4 = (char *)operator new(0x48uLL);
  *(void *)long long v4 = &unk_26C317FB8;
  long long v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  long long v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v8[3] = v4;
  std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v8, a1);
  std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v8);
  return a1;
}

void *std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(void *a1, _OWORD *a2)
{
  v7[4] = *MEMORY[0x263EF8340];
  long long v4 = (char *)operator new(0x28uLL);
  *(void *)long long v4 = &unk_26C3182C8;
  long long v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  uint64_t v7[3] = v4;
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v7, a1);
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v7);
  return a1;
}

uint64_t std::function<signed char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  int v13 = a3;
  int v14 = a2;
  int v12 = a4;
  int v10 = a6;
  int v11 = a5;
  int v9 = a7;
  uint64_t v7 = *(void *)(a1 + 24);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *, int *, int *, int *, int *, int *))(*(void *)v7 + 48))(v7, &v14, &v13, &v12, &v11, &v10, &v9);
}

uint64_t std::function<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator()(uint64_t a1, uint64_t a2, int a3, char a4, char a5, float a6, float a7)
{
  int v13 = a3;
  char v12 = a4;
  float v11 = a6;
  float v10 = a7;
  char v9 = a5;
  uint64_t v7 = *(void *)(a1 + 24);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, int *, char *, float *, float *, char *))(*(void *)v7 + 48))(v7, a2, &v13, &v12, &v11, &v10, &v9);
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v2 = &unk_26C317EA8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C317EA8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<signed char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<signed char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1} &,int,int,int,int,int,int>(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  uint64_t v6 = *a6;
  if (**(void **)a1 == v6) {
    uint64_t v7 = *(char **)(a1 + 8);
  }
  else {
    uint64_t v7 = (char *)(**(void **)(a1 + 16)
  }
                + v6
                + **(void **)(a1 + 24) * *a2
                + **(void **)(a1 + 32) * *a3
                + **(void **)(a1 + 40) * *a4
                + **(void **)(a1 + 48) * *a5);
  return *v7;
}

void *std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    long long v3 = result;
    long long v4 = (void *)result[3];
    long long v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_210B664D0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)unint64_t v2 = &unk_26C317F38;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C317F38;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<signed char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2} &,int,int,int,int,int,int>((unint64_t **)(a1 + 8), a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<signed char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2} &,int,int,int,int,int,int>(unint64_t **a1, int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, int *a6)
{
  unint64_t v6 = *a3;
  if ((v6 & 0x80000000) != 0) {
    return 0;
  }
  char v7 = 0;
  unint64_t v8 = *a4;
  if ((v8 & 0x80000000) == 0 && **a1 > v6)
  {
    char v7 = 0;
    unint64_t v9 = *a5;
    if ((v9 & 0x80000000) == 0 && *a1[1] > v8)
    {
      if (*a1[2] > v9) {
        return *(char *)(*a1[3] + *a6 + *a1[4] * *a2 + *a1[5] * v6 + *a1[6] * v8 + *a1[7] * v9);
      }
      return 0;
    }
  }
  return v7;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)unint64_t v2 = &unk_26C317FB8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C317FB8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<signed char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<signed char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3} &,int,int,int,int,int,int>(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  unint64_t v6 = *a3 & ~(*a3 >> 31);
  if (**(void **)a1 - 1 < v6) {
    unint64_t v6 = **(void **)a1 - 1;
  }
  unint64_t v8 = *a4 & ~(*a4 >> 31);
  char v7 = *(void **)(a1 + 8);
  if (*v7 - 1 < v8) {
    unint64_t v8 = *v7 - 1;
  }
  unint64_t v9 = *a5 & ~(*a5 >> 31);
  if (**(void **)(a1 + 16) - 1 < v9) {
    unint64_t v9 = **(void **)(a1 + 16) - 1;
  }
  return *(char *)(**(void **)(a1 + 24)
                               + *a6
                               + **(void **)(a1 + 32) * *a2
                               + **(void **)(a1 + 40) * v6
                               + **(void **)(a1 + 48) * v8
                               + **(void **)(a1 + 56) * v9);
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C318038;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C318038;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target_type()
{
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C3180B8;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C3180B8;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2 & ~(*a2 >> 31);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target_type()
{
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C318138;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C318138;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, char *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char>(uint64_t a1, int *a2, unsigned int *a3, char *a4, float *a5, float *a6, char *a7)
{
  uint64_t result = *a3;
  if (!result)
  {
    char v9 = *a4;
    float v10 = *a5;
    float v11 = *a6;
    int v12 = *a7;
    int v13 = ilogbf(*a5);
    if (v13 <= -14) {
      int v14 = -14;
    }
    else {
      int v14 = v13;
    }
    if (v14 + v12 >= -20)
    {
      uint64_t v15 = *a2 + (uint64_t)(int)llroundf((float)(v10 * (float)v9) * v11);
      if (v15 < 0x80000000)
      {
        if (v15 > (uint64_t)0xFFFFFFFF7FFFFFFFLL)
        {
          uint64_t result = 0;
          *a2 = v15;
        }
        else
        {
          *a2 = -8388608;
          return 2;
        }
      }
      else
      {
        *a2 = 2139095040;
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    long long v3 = result;
    long long v4 = (void *)result[3];
    long long v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_210B66DC8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C3181C8;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C3181C8;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, char *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char>(uint64_t a1, int *a2, unsigned int *a3, char *a4, float *a5, float *a6, char *a7)
{
  uint64_t result = *a3;
  if (!result)
  {
    if (*a7 >= -20)
    {
      uint64_t v8 = *a2 + (uint64_t)(int)llroundf(*a6 * (float)((float)*a4 * (float)(int)*a5));
      if (v8 < 0x80000000)
      {
        if (v8 > (uint64_t)0xFFFFFFFF7FFFFFFFLL)
        {
          uint64_t result = 0;
          *a2 = v8;
        }
        else
        {
          *a2 = -8388608;
          return 2;
        }
      }
      else
      {
        *a2 = 2139095040;
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C318248;
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C318248;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, char *a4, float *a5, uint64_t a6, unsigned char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char>(uint64_t a1, int *a2, unsigned int *a3, char *a4, float *a5, uint64_t a6, unsigned char *a7)
{
  uint64_t result = *a3;
  if (!result)
  {
    int v8 = (int)*a5 * *a4;
    int v9 = (v8 + (1 << ~*a7)) >> -*a7;
    if ((char)*a7 >= 1) {
      int v9 = v8 << *a7;
    }
    if (*a7) {
      int v10 = v9;
    }
    else {
      int v10 = (int)*a5 * *a4;
    }
    uint64_t v11 = *a2 + (uint64_t)v10;
    if (v11 < 0x80000000)
    {
      if (v11 > (uint64_t)0xFFFFFFFF7FFFFFFFLL)
      {
        uint64_t result = 0;
        *a2 = v11;
      }
      else
      {
        *a2 = -8388608;
        return 2;
      }
    }
    else
    {
      *a2 = 2139095040;
      return 1;
    }
  }
  return result;
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)unint64_t v2 = &unk_26C3182C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C3182C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C318348;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C318348;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

void *std::__function::__value_func<MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(void *a1, uint64_t a2)
{
  v7[4] = *MEMORY[0x263EF8340];
  long long v4 = (char *)operator new(0x40uLL);
  *(void *)long long v4 = &unk_26C3183C8;
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 24) = v5;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 32);
  *((void *)v4 + 7) = *(void *)(a2 + 48);
  uint64_t v7[3] = v4;
  std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v7, a1);
  std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v7);
  return a1;
}

void *std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(void *a1, _OWORD *a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  long long v4 = (char *)operator new(0x48uLL);
  *(void *)long long v4 = &unk_26C318448;
  long long v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  long long v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v8[3] = v4;
  std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v8, a1);
  std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v8);
  return a1;
}

void *std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(void *a1, _OWORD *a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  long long v4 = (char *)operator new(0x48uLL);
  *(void *)long long v4 = &unk_26C3184C8;
  long long v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  long long v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v8[3] = v4;
  std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v8, a1);
  std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v8);
  return a1;
}

void *std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(void *a1, _OWORD *a2)
{
  v7[4] = *MEMORY[0x263EF8340];
  long long v4 = (char *)operator new(0x28uLL);
  *(void *)long long v4 = &unk_26C3187C8;
  long long v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  uint64_t v7[3] = v4;
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v7, a1);
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v7);
  return a1;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v2 = &unk_26C3183C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C3183C8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<signed char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)unint64_t v2 = &unk_26C318448;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C318448;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<signed char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2} &,int,int,int,int,int,int>((unint64_t **)(a1 + 8), a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)unint64_t v2 = &unk_26C3184C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C3184C8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<signed char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C318548;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C318548;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C3185C8;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C3185C8;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2 & ~(*a2 >> 31);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C318648;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C318648;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, char *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C3186C8;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C3186C8;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, char *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C318748;
  return result;
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C318748;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, char *a4, float *a5, uint64_t a6, unsigned char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)unint64_t v2 = &unk_26C3187C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C3187C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C318848;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C318848;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<unsigned char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

void *std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},void>(void *a1, uint64_t a2)
{
  v7[4] = *MEMORY[0x263EF8340];
  long long v4 = (char *)operator new(0x40uLL);
  *(void *)long long v4 = &unk_26C3188C8;
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 24) = v5;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 32);
  *((void *)v4 + 7) = *(void *)(a2 + 48);
  uint64_t v7[3] = v4;
  std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v7, a1);
  std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v7);
  return a1;
}

void *std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},void>(void *a1, _OWORD *a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  long long v4 = (char *)operator new(0x48uLL);
  *(void *)long long v4 = &unk_26C318948;
  long long v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  long long v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v8[3] = v4;
  std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v8, a1);
  std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v8);
  return a1;
}

void *std::function<signed char const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},void>(void *a1, _OWORD *a2)
{
  v8[4] = *MEMORY[0x263EF8340];
  long long v4 = (char *)operator new(0x48uLL);
  *(void *)long long v4 = &unk_26C3189C8;
  long long v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  long long v6 = a2[3];
  *(_OWORD *)(v4 + 40) = a2[2];
  *(_OWORD *)(v4 + 56) = v6;
  v8[3] = v4;
  std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v8, a1);
  std::__function::__value_func<signed char const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v8);
  return a1;
}

void *std::function<float const ()(int,int,int,int,int,int)>::operator=<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},void>(void *a1, _OWORD *a2)
{
  v7[4] = *MEMORY[0x263EF8340];
  long long v4 = (char *)operator new(0x28uLL);
  *(void *)long long v4 = &unk_26C318CC8;
  long long v5 = a2[1];
  *(_OWORD *)(v4 + 8) = *a2;
  *(_OWORD *)(v4 + 24) = v5;
  uint64_t v7[3] = v4;
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::swap[abi:ne180100](v7, a1);
  std::__function::__value_func<float const ()(int,int,int,int,int,int)>::~__value_func[abi:ne180100](v7);
  return a1;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v2 = &unk_26C3188C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C3188C8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<signed char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#1}>,signed char const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)unint64_t v2 = &unk_26C318948;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C318948;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<signed char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2} &,int,int,int,int,int,int>((unint64_t **)(a1 + 8), a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#2}>,signed char const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)unint64_t v2 = &unk_26C3189C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C3189C8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6)
{
  return std::__invoke_void_return_wrapper<signed char const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#3}>,signed char const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C318A48;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C318A48;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#1}>,signed char ()(signed char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C318AC8;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C318AC8;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::operator()(uint64_t a1, char *a2)
{
  return *a2 & ~(*a2 >> 31);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(signed char)#2}>,signed char ()(signed char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C318B48;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C318B48;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, char *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#1}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C318BC8;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C318BC8;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, char *a4, float *a5, float *a6, char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#2}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::~__func()
{
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C318C48;
  return result;
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C318C48;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::operator()(uint64_t a1, int *a2, unsigned int *a3, char *a4, float *a5, uint64_t a6, unsigned char *a7)
{
  return std::__invoke_void_return_wrapper<MIL::ANEMachineIR::Interpreter::NumericType,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3} &,int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)#3}>,MIL::ANEMachineIR::Interpreter::NumericType ()(int &,MIL::ANEMachineIR::Interpreter::NumericType,signed char,float,float,signed char)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)unint64_t v2 = &unk_26C318CC8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C318CC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#5}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

void std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::~__func()
{
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26C318D48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C318D48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::operator()(uint64_t a1, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7)
{
  return std::__invoke_void_return_wrapper<float const,false>::__call[abi:ne180100]<std::vector<MIL::Fp16> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(MIL::Fp16 const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6} &,int,int,int,int,int,int>(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6},std::allocator<std::vector<signed char> MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(signed char const*,std::vector<unsigned long long> const&,MIL::Fp16 const*,MIL::IRDataType,std::vector<unsigned long long> const&,std::vector<unsigned long long> const&,ANEMachineIR::Validators::NeConvParameterValues const&,ANEMachineIR::Validators::PaddingMode,signed char,signed char,signed char,std::vector<MIL::Fp16> const&,std::vector<MIL::Fp16> const&,BOOL,MIL::Fp16,BOOL,std::function<float ()(float)>)::{lambda(int,int,int,int,int,int)#6}>,float const ()(int,int,int,int,int,int)>::target_type()
{
}

void ANEMachineIR::H2022::NeConv::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210B6BF88(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)&STACK[0x6B8]);
  unint64_t v3 = STACK[0x548];
  STACK[0x548] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x540]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x540]);
  }
  long long v4 = (void *)STACK[0x520];
  if (STACK[0x520])
  {
    STACK[0x528] = (unint64_t)v4;
    operator delete(v4);
  }
  long long v5 = (void *)STACK[0x688];
  if (STACK[0x688])
  {
    STACK[0x690] = (unint64_t)v5;
    operator delete(v5);
  }
  long long v6 = *(void **)(v1 - 112);
  if (v6)
  {
    *(void *)(v1 - 104) = v6;
    operator delete(v6);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x550], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x6B0], 0);
  _Unwind_Resume(a1);
}

void sub_210B6D034()
{
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[13],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_210B6D09C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[13],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  int v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *int v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[13],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_210B6D138(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[13],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_210B6D188(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[8],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_210B6D204(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[8],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  int v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *int v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[8],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_210B6D2A0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[8],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_210B6D2F0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[4],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[4],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_210B6D36C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[4],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  int v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *int v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[4],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_210B6D408(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[4],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_210B6D458(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[19],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[19],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_210B6D4D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[19],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  int v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *int v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[19],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_210B6D570(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[19],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_210B6D5C0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[39],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[39],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_210B6D63C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[39],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  int v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *int v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[39],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_210B6D6D8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[39],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_210B6D728(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[30],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[30],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_210B6D7A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[30],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  int v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *int v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[30],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_210B6D840(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[30],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_210B6D890(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[14],std::unique_ptr<MIL::IRParameter>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_210B6D90C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node<char const(&)[14],std::unique_ptr<MIL::IRParameter>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  int v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *int v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[14],std::unique_ptr<MIL::IRParameter>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_210B6D9A8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[14],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRParameter>::shared_ptr[abi:ne180100]<MIL::IRParameter,std::default_delete<MIL::IRParameter>,void>(v5 + 3, a3);
  return a1;
}

void sub_210B6D9F8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<MIL::Validation::TensorRankValueConstraints  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x21667BBD0);
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::TensorRankValueConstraints  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::TensorRankValueConstraints  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void ANEMachineIR::H2021::BaseActivation::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210B6DF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer(&a28);
  if (a24) {
    (*(void (**)(uint64_t))(*(void *)a24 + 8))(a24);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (__p) {
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v33 - 96), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a27, 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::Linear::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2021::Validators::ValidateLinear;
  v2[3] = v2;
  ANEMachineIR::H2021::BaseActivation::Make();
}

void sub_210B6E194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::NePiecewiseV2::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210B6F524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer(&a68);
  if (a40) {
    (*(void (**)(uint64_t))(*(void *)a40 + 8))(a40);
  }
  if (a39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a39);
  }
  uint64_t v70 = *(void **)(v68 - 192);
  if (v70)
  {
    *(void *)(v68 - 184) = v70;
    operator delete(v70);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v68 - 80), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a67, 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::Relu::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2021::Validators::ValidateRelu;
  v2[3] = v2;
  ANEMachineIR::H2021::BaseActivation::Make();
}

void sub_210B6FC54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::ScaledActivation::Make()
{
}

void sub_210B70204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer(&__p);
  if (a21) {
    (*(void (**)(uint64_t))(*(void *)a21 + 8))(a21);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  uint64_t v34 = *(void **)(v32 - 128);
  if (v34)
  {
    *(void *)(v32 - 120) = v34;
    operator delete(v34);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v32 - 96), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a26, 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::Lrelu::Make()
{
}

void sub_210B709D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer(&__p);
  if (a21) {
    (*(void (**)(uint64_t))(*(void *)a21 + 8))(a21);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  unint64_t v36 = *(void **)(v34 - 112);
  if (v36)
  {
    *(void *)(v34 - 104) = v36;
    operator delete(v36);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v34 - 80), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a28, 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::Sigmoid::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2021::Validators::ValidateSigmoid;
  v2[3] = v2;
  ANEMachineIR::H2021::ScaledActivation::Make();
}

void sub_210B70C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::Sqrt::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2021::Validators::ValidateSqrt;
  v2[3] = v2;
  ANEMachineIR::H2021::ScaledActivation::Make();
}

void sub_210B70D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::Tanh::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2021::Validators::ValidateTanh;
  v2[3] = v2;
  ANEMachineIR::H2021::ScaledActivation::Make();
}

void sub_210B70E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::BaseNePool::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210B72538(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v1 - 128));
  unint64_t v3 = STACK[0x2A0];
  STACK[0x2A0] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x298]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x298]);
  }
  long long v4 = (void *)STACK[0x278];
  if (STACK[0x278])
  {
    STACK[0x280] = (unint64_t)v4;
    operator delete(v4);
  }
  char v5 = (void *)STACK[0x300];
  if (STACK[0x300])
  {
    STACK[0x308] = (unint64_t)v5;
    operator delete(v5);
  }
  long long v6 = *(void **)(v1 - 176);
  if (v6)
  {
    *(void *)(v1 - 168) = v6;
    operator delete(v6);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2A8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v1 - 248), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::NeAvgPool::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210B7482C(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v1 - 112));
  unint64_t v3 = STACK[0x2A0];
  STACK[0x2A0] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x298]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x298]);
  }
  long long v4 = (void *)STACK[0x278];
  if (STACK[0x278])
  {
    STACK[0x280] = (unint64_t)v4;
    operator delete(v4);
  }
  char v5 = (void *)STACK[0x350];
  if (STACK[0x350])
  {
    STACK[0x358] = (unint64_t)v5;
    operator delete(v5);
  }
  long long v6 = *(void **)(v1 - 160);
  if (v6)
  {
    *(void *)(v1 - 152) = v6;
    operator delete(v6);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2A8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v1 - 232), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::NeMaxPool::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2021::Validators::ValidateNeMaxPool;
  v2[3] = v2;
  ANEMachineIR::H2021::BaseNePool::Make();
}

void sub_210B751C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::NeMinPool::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2021::Validators::ValidateNeMinPool;
  v2[3] = v2;
  ANEMachineIR::H2021::BaseNePool::Make();
}

void sub_210B752A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::BasePePool::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210B768E8(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v1 - 128));
  unint64_t v3 = STACK[0x2A0];
  STACK[0x2A0] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x298]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x298]);
  }
  long long v4 = (void *)STACK[0x278];
  if (STACK[0x278])
  {
    STACK[0x280] = (unint64_t)v4;
    operator delete(v4);
  }
  char v5 = (void *)STACK[0x2F0];
  if (STACK[0x2F0])
  {
    STACK[0x2F8] = (unint64_t)v5;
    operator delete(v5);
  }
  long long v6 = *(void **)(v1 - 176);
  if (v6)
  {
    *(void *)(v1 - 168) = v6;
    operator delete(v6);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2A8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v1 - 248), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeAvgPool::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210B7884C(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v1 - 112));
  unint64_t v3 = STACK[0x2A0];
  STACK[0x2A0] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x298]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x298]);
  }
  long long v4 = (void *)STACK[0x278];
  if (STACK[0x278])
  {
    STACK[0x280] = (unint64_t)v4;
    operator delete(v4);
  }
  char v5 = (void *)STACK[0x310];
  if (STACK[0x310])
  {
    STACK[0x318] = (unint64_t)v5;
    operator delete(v5);
  }
  long long v6 = *(void **)(v1 - 160);
  if (v6)
  {
    *(void *)(v1 - 152) = v6;
    operator delete(v6);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2A8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v1 - 232), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeMaxPool::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2021::Validators::ValidatePeMaxPool;
  v2[3] = v2;
  ANEMachineIR::H2021::BasePePool::Make();
}

void sub_210B79120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeMinPool::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2021::Validators::ValidatePeMinPool;
  v2[3] = v2;
  ANEMachineIR::H2021::BasePePool::Make();
}

void sub_210B79200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2021::Validators::ValidateBaseNeMatmul@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return MIL::ValidationResult::ValidationResult(a1);
}

void ANEMachineIR::H2021::Validators::ValidateNeBatchMatmul(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2021::Validators::ValidateNeMatmul(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2020::Validators::ValidateReshape(MIL::IROperation *this@<X0>, uint64_t a2@<X8>)
{
}

void ANEMachineIR::H2020::Validators::ValidateTranspose(MIL::IROperation *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2022::BaseActivation::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210B79700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer(&a28);
  if (a24) {
    (*(void (**)(uint64_t))(*(void *)a24 + 8))(a24);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (__p) {
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v33 - 96), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a27, 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::Linear::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2022::Validators::ValidateLinear;
  v2[3] = v2;
  ANEMachineIR::H2022::BaseActivation::Make();
}

void sub_210B7991C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::NePiecewiseV2::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210B7ACAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer(&a68);
  if (a40) {
    (*(void (**)(uint64_t))(*(void *)a40 + 8))(a40);
  }
  if (a39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a39);
  }
  uint64_t v70 = *(void **)(v68 - 192);
  if (v70)
  {
    *(void *)(v68 - 184) = v70;
    operator delete(v70);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v68 - 80), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a67, 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::Relu::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2022::Validators::ValidateRelu;
  v2[3] = v2;
  ANEMachineIR::H2022::BaseActivation::Make();
}

void sub_210B7B3DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::ScaledActivation::Make()
{
}

void sub_210B7B98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer(&__p);
  if (a21) {
    (*(void (**)(uint64_t))(*(void *)a21 + 8))(a21);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  uint64_t v34 = *(void **)(v32 - 128);
  if (v34)
  {
    *(void *)(v32 - 120) = v34;
    operator delete(v34);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v32 - 96), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a26, 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::Lrelu::Make()
{
}

void sub_210B7C160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer(&__p);
  if (a21) {
    (*(void (**)(uint64_t))(*(void *)a21 + 8))(a21);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  unint64_t v36 = *(void **)(v34 - 112);
  if (v36)
  {
    *(void *)(v34 - 104) = v36;
    operator delete(v36);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)(v34 - 80), 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a28, 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::Sigmoid::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2022::Validators::ValidateSigmoid;
  v2[3] = v2;
  ANEMachineIR::H2022::ScaledActivation::Make();
}

void sub_210B7C3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::Sqrt::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2022::Validators::ValidateSqrt;
  v2[3] = v2;
  ANEMachineIR::H2022::ScaledActivation::Make();
}

void sub_210B7C4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::Tanh::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2022::Validators::ValidateTanh;
  v2[3] = v2;
  ANEMachineIR::H2022::ScaledActivation::Make();
}

void sub_210B7C5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::FunctionInterpreter::Call(uint64_t a1@<X0>, MIL::IRObject *a2@<X1>, unsigned int a3@<W2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  OpsetString = ANEMachineIR::GetOpsetString(a3);
  std::string::basic_string[abi:ne180100]<0>(v33, OpsetString);
  if (((*(uint64_t (**)(MIL::IRObject *, void **))(*(void *)a2 + 200))(a2, v33) & 1) == 0)
  {
    *(_DWORD *)a5 = 3;
    std::string::basic_string[abi:ne180100]<0>((void *)(a5 + 8), "Function does not have requested opset");
    uint64_t LocationPtr = (void *)MIL::IRObject::GetLocationPtr(a2);
LABEL_21:
    *(void *)(a5 + 32) = *LocationPtr;
    uint64_t v27 = LocationPtr[1];
    *(void *)(a5 + 40) = v27;
    if (v27) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
    }
    goto LABEL_34;
  }
  int v10 = (void *)(*(uint64_t (**)(MIL::IRObject *))(*(void *)a2 + 128))(a2);
  uint64_t v11 = (unsigned __int8 *)(v10 + 1);
  int v12 = (unsigned __int8 *)*v10;
  if ((void *)*v10 != v10 + 1)
  {
    while (1)
    {
      Value = MIL::ANEMachineIR::Interpreter::ComputedValueStore::TryGetValue(a4, v12 + 32);
      if (!Value)
      {
        *(_DWORD *)a5 = 2;
        std::operator+<char>();
        uint64_t LocationPtr = (void *)MIL::IRObject::GetLocationPtr(a2);
        goto LABEL_21;
      }
      if ((*(uint64_t (**)(unsigned __int8 *))(*(void *)Value + 32))(Value) != *((void *)v12 + 7)) {
        break;
      }
      int v14 = (unsigned __int8 *)*((void *)v12 + 1);
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          int v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (unsigned __int8 *)*((void *)v12 + 2);
          BOOL v16 = *(void *)v15 == (void)v12;
          int v12 = v15;
        }
        while (!v16);
      }
      int v12 = v15;
      if (v15 == v11) {
        goto LABEL_11;
      }
    }
    *(_DWORD *)a5 = 3;
    std::operator+<char>();
    uint64_t LocationPtr = (void *)MIL::IRObject::GetLocationPtr(a2);
    goto LABEL_21;
  }
LABEL_11:
  uint64_t v17 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a2 + 112))(a2);
  uint64_t v18 = (void *)std::map<std::string,std::unique_ptr<MIL::IRBlock>>::at(v17, (const void **)v33);
  __int16 v19 = (uint64_t ***)(*(uint64_t (**)(void))(*(void *)*v18 + 64))(*v18);
  uint64_t v20 = **v19;
  int v21 = (*v19)[1];
  if (v20 == v21)
  {
LABEL_16:
    uint64_t v23 = (*(uint64_t (**)(void))(*(void *)*v18 + 88))();
    unint64_t v24 = *(unsigned __int8 **)v23;
    uint64_t v25 = *(unsigned __int8 **)(v23 + 8);
    while (1)
    {
      if (v24 == v25)
      {
        *(_DWORD *)a5 = 0;
        std::string::basic_string[abi:ne180100]<0>((void *)(a5 + 8), (char *)&unk_210C6BFE7);
        *(void *)(a5 + 32) = 0;
        *(void *)(a5 + 40) = 0;
        goto LABEL_34;
      }
      if (!MIL::ANEMachineIR::Interpreter::ComputedValueStore::TryGetValue(a4, v24)) {
        break;
      }
      v24 += 24;
    }
    *(_DWORD *)a5 = 4;
    std::operator+<char>();
    uint64_t LocationPtr = (void *)MIL::IRObject::GetLocationPtr(a2);
    goto LABEL_21;
  }
  while (1)
  {
    uint64_t v22 = (MIL::IRObject *)*v20;
    MIL::ANEMachineIR::Interpreter::DelegateByNameOp::Run(a1, *v20, (uint64_t)a4, &v30);
    if (v30) {
      break;
    }
    if (SHIBYTE(v32) < 0) {
      operator delete((void *)__p);
    }
    v20 += 2;
    if (v20 == v21) {
      goto LABEL_16;
    }
  }
  *(_DWORD *)a5 = v30;
  if (SHIBYTE(v32) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a5 + 8), (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
  }
  else
  {
    *(_OWORD *)(a5 + 8) = __p;
    *(void *)(a5 + 24) = v32;
  }
  uint64_t v28 = (void *)MIL::IRObject::GetLocationPtr(v22);
  *(void *)(a5 + 32) = *v28;
  uint64_t v29 = v28[1];
  *(void *)(a5 + 40) = v29;
  if (v29) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete((void *)__p);
  }
LABEL_34:
  if (v34 < 0) {
    operator delete(v33[0]);
  }
}

void sub_210B7C96C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,std::unique_ptr<MIL::IRBlock>>::at(uint64_t a1, const void **a2)
{
  uint64_t v2 = *std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>(a1, &v4, a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  return v2 + 56;
}

void *std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>(uint64_t a1, void *a2, const void **a3)
{
  char v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v8 = (void *)v4;
        int v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v8;
        char v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3)) {
        break;
      }
      char v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    long long v6 = a2;
  }
  else {
    long long v6 = *a2;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v3 >= 0) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = *a3;
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  if (v10) {
    return v10 < 0;
  }
  else {
    return v5 < v7;
  }
}

void MilTranslator::OpTranslator::TranslateReduceMean(MilTranslator::OpTranslator *this@<X0>, const MIL::IROperation *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  uint64_t v6 = (*(uint64_t (**)(const MIL::IROperation *, std::string *, void))(*(void *)a2 + 120))(a2, &__p, 0);
  uint64_t v7 = v6;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v6) {
      goto LABEL_3;
    }
LABEL_6:
    *(_DWORD *)a3 = 4;
    std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), "Immediate value inputs not handled.");
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v7) {
    goto LABEL_6;
  }
LABEL_3:
  if (*(char *)(v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v156, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
  }
  else
  {
    long long v8 = *(_OWORD *)v7;
    v156.__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
    *(_OWORD *)&v156.__r_.__value_.__l.__data_ = v8;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  uint64_t ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  uint64_t v11 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  ANEMachineIR::Utils::GetStaticTensorShape(v11, v10, (uint64_t)v155);
  MilTranslator::OpTranslator::GetChannelLastTensorNameMayInsertTranspose((uint64_t)this, (uint64_t)&v156, v11, &v154);
  int v99 = v11;
  uint64_t v100 = a3;
  int v12 = (MIL::IRNamedValueType ***)(*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 176))(a2);
  int v13 = (std::__shared_weak_count *)(*v12)[1];
  int v102 = **v12;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(v102);
  int v97 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(Type);
  std::string::basic_string[abi:ne180100]<0>(&__p, "keep_dims");
  MIL::IROperation::GetParameterValue();
  char v15 = MIL::IRValue::GetScalar<BOOL>();
  char v16 = v15;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v16)
    {
LABEL_14:
      std::string::basic_string[abi:ne180100]<0>(&v153, "mean");
      uint64_t v17 = (void *)(*(uint64_t (**)(ANEMachineIR::Utils *))(*(void *)v11 + 96))(v11);
      unint64_t v18 = v17[1] - *v17;
      if (v18 <= 0x17)
      {
        *(_DWORD *)a3 = 8;
        std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), "reduce_mean: input tensor rank must >= 3.");
LABEL_230:
        if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v153.__r_.__value_.__l.__data_);
        }
        goto LABEL_232;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "axes");
      uint64_t v150 = 0;
      uint64_t v151 = 0;
      int v152 = 0;
      uint64_t ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
      MIL::IRValue::AsTensor(ParameterValue);
      v120.__r_.__value_.__r.__words[0] = MIL::IRTensorValue::GetDataView<int>();
      v120.__r_.__value_.__l.__size_ = (std::string::size_type)v20;
      int v96 = this;
      if (v20)
      {
        unint64_t v21 = 0;
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        unint64_t v24 = 0;
        unint64_t v25 = v18 >> 3;
        char v98 = v25 - 1;
        while (1)
        {
          int v26 = (*(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](&v120, v24) & 0x80000000) != 0
              ? *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](&v120, v24) + v25
              : *(_DWORD *)MIL::Util::Span<int const,18446744073709551615ul>::operator[](&v120, v24);
          char v27 = v26 - 1;
          if (v26 == 1) {
            break;
          }
          if (!v26)
          {
            if (v23 < v22)
            {
              char *v23 = 0;
              uint64_t v28 = v23 + 1;
              goto LABEL_32;
            }
            uint64_t v30 = (uint64_t)&v23[-v21 + 1];
            if (v30 < 0) {
              std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
            }
            if (2 * (uint64_t)&v22[-v21] > (unint64_t)v30) {
              uint64_t v30 = 2 * (void)&v22[-v21];
            }
            if ((unint64_t)&v22[-v21] >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v31 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v31 = v30;
            }
            if (v31) {
              uint64_t v32 = (char *)operator new(v31);
            }
            else {
              uint64_t v32 = 0;
            }
            uint64_t v41 = &v23[(void)v32 - v21];
            char *v41 = 0;
            uint64_t v29 = v41 + 1;
            if (v23 != (char *)v21)
            {
              unint64_t v42 = &v23[~v21];
              do
              {
                char v43 = *--v23;
                (v42--)[(void)v32] = v43;
              }
              while (v23 != (char *)v21);
              uint64_t v41 = v32;
            }
            uint64_t v22 = &v32[v31];
            uint64_t v150 = v41;
LABEL_69:
            int v152 = v22;
            if (v21) {
              operator delete((void *)v21);
            }
            unint64_t v21 = (unint64_t)v41;
            goto LABEL_72;
          }
          if (v26 >= 2)
          {
            if (v23 >= v22)
            {
              unint64_t v36 = &v23[-v21];
              uint64_t v37 = (uint64_t)&v23[-v21 + 1];
              if (v37 < 0) {
                std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
              }
              if (2 * (uint64_t)&v22[-v21] > (unint64_t)v37) {
                uint64_t v37 = 2 * (void)&v22[-v21];
              }
              if ((unint64_t)&v22[-v21] >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v38 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v38 = v37;
              }
              if (v38)
              {
                uint64_t v39 = (char *)operator new(v38);
                uint64_t v40 = v13;
              }
              else
              {
                uint64_t v40 = v13;
                uint64_t v39 = 0;
              }
              uint64_t v46 = &v36[(void)v39];
              uint64_t v47 = &v36[(void)v39];
              *uint64_t v47 = v27;
              uint64_t v29 = v47 + 1;
              if (v23 != (char *)v21)
              {
                uint64_t v48 = &v23[~v21];
                do
                {
                  char v49 = *--v23;
                  (v48--)[(void)v39] = v49;
                }
                while (v23 != (char *)v21);
                uint64_t v46 = v39;
              }
              uint64_t v22 = &v39[v38];
              uint64_t v150 = v46;
              int v152 = v22;
              if (v21) {
                operator delete((void *)v21);
              }
              unint64_t v21 = (unint64_t)v46;
              int v13 = v40;
              this = v96;
            }
            else
            {
              char *v23 = v27;
              uint64_t v28 = v23 + 1;
LABEL_32:
              uint64_t v29 = v28;
            }
LABEL_72:
            uint64_t v151 = v29;
            uint64_t v23 = v29;
          }
          if (++v24 >= v120.__r_.__value_.__l.__size_) {
            goto LABEL_83;
          }
        }
        if (v23 < v22)
        {
          char *v23 = v98;
          uint64_t v28 = v23 + 1;
          goto LABEL_32;
        }
        uint64_t v33 = (uint64_t)&v23[-v21 + 1];
        if (v33 < 0) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        if (2 * (uint64_t)&v22[-v21] > (unint64_t)v33) {
          uint64_t v33 = 2 * (void)&v22[-v21];
        }
        if ((unint64_t)&v22[-v21] >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v34 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v34 = v33;
        }
        if (v34) {
          unint64_t v35 = (char *)operator new(v34);
        }
        else {
          unint64_t v35 = 0;
        }
        uint64_t v41 = &v23[(void)v35 - v21];
        char *v41 = v98;
        uint64_t v29 = v41 + 1;
        if (v23 != (char *)v21)
        {
          uint64_t v44 = &v23[~v21];
          do
          {
            char v45 = *--v23;
            (v44--)[(void)v35] = v45;
          }
          while (v23 != (char *)v21);
          uint64_t v41 = v35;
        }
        uint64_t v22 = &v35[v34];
        uint64_t v150 = v41;
        uint64_t v151 = v29;
        goto LABEL_69;
      }
LABEL_83:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v147 = 0;
      int v148 = 0;
      unint64_t v149 = 0;
      ANEMachineIR::Utils::GetStaticTensorShape(v97, v20, (uint64_t)&v145);
      uint64_t v50 = (void *)(*(uint64_t (**)(ANEMachineIR::Utils *))(*(void *)v99 + 96))(v99);
      MilTranslator::OpTranslator::InferChannelLastTransposeInfo((uint64_t)this, (uint64_t)&v156, (uint64_t)(v50[1] - *v50) >> 3, (uint64_t)&__s);
      MilTranslator::OpTranslator::GetTransposeOpParamPerm((v146 - (unsigned char *)v145) >> 3, (uint64_t)&__s, &v141);
      if (MilTranslator::OpTranslator::IsTransposeRequired(&v141))
      {
        MilTranslator::OpTranslator::InferTransposedShape((uint64_t *)&v145, (unsigned int **)&v141, &v139);
        (*(void (**)(ANEMachineIR::Utils *))(*(void *)v97 + 88))(v97);
        MIL::IRTensorValueType::Make();
        uint64_t Name = MIL::IRNamedValueType::GetName(v102);
        uint64_t v52 = (char *)Name;
        if (*(char *)(Name + 23) >= 0) {
          size_t v53 = *(unsigned __int8 *)(Name + 23);
        }
        else {
          size_t v53 = *(void *)(Name + 8);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&__str, v53 + 13);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if (v53)
        {
          if (v52[23] >= 0) {
            int v55 = v52;
          }
          else {
            int v55 = *(char **)v52;
          }
          memmove(p_str, v55, v53);
        }
        strcpy((char *)p_str + v53, "_channel_last");
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v120, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else {
          std::string v120 = __s;
        }
        int v121 = v143;
        char v122 = v144;
        std::string::operator=(&v120, &__str);
        __int16 v69 = (long long *)MIL::IRNamedValueType::GetName(v102);
        std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>::pair[abi:ne180100]<std::string const&,std::pair<std::string,std::array<unsigned char,5ul>>&,0>(&__p, v69, (long long *)&v120);
        std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>>((uint64_t)this + 296, (unsigned __int8 *)&__p, (long long *)&__p);
        if (SHIBYTE(v126) < 0) {
          operator delete(v124);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v137, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        }
        else {
          std::string v137 = __str;
        }
        MIL::IRNamedValueType::Make();
        if (v104.__r_.__value_.__r.__words[0]) {
          operator new();
        }
        v104.__r_.__value_.__r.__words[0] = 0;
        uint64_t v70 = v148;
        if ((unint64_t)v148 >= v149)
        {
          uint64_t v72 = (v148 - (char *)v147) >> 4;
          unint64_t v73 = v72 + 1;
          if ((unint64_t)(v72 + 1) >> 60) {
            std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v74 = v149 - (void)v147;
          if ((uint64_t)(v149 - (void)v147) >> 3 > v73) {
            unint64_t v73 = v74 >> 3;
          }
          if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v75 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v75 = v73;
          }
          uint64_t v125 = &v149;
          int v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)&v149, v75);
          int v77 = &v76[16 * v72];
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v77;
          int v124 = &v76[16 * v78];
          *(void *)int v77 = 0;
          *((void *)v77 + 1) = 0;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v77 + 16);
          std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__swap_out_circular_buffer((uint64_t *)&v147, &__p);
          uint64_t v71 = v148;
          std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)&__p.__r_.__value_.__l.__data_);
        }
        else
        {
          *(void *)int v148 = 0;
          *((void *)v70 + 1) = 0;
          uint64_t v71 = v70 + 16;
        }
        int v148 = v71;
        float v79 = (MIL::IRNamedValueType *)v104.__r_.__value_.__r.__words[0];
        v104.__r_.__value_.__r.__words[0] = 0;
        if (v79)
        {
          MIL::IRNamedValueType::~IRNamedValueType(v79);
          MEMORY[0x21667BBD0]();
        }
        if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v137.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v120.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        uint64_t v68 = v139;
        if (!v139) {
          goto LABEL_147;
        }
        double v140 = v139;
      }
      else
      {
        uint64_t v56 = MIL::IRNamedValueType::GetName(v102);
        if (*(char *)(v56 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v136, *(const std::string::value_type **)v56, *(void *)(v56 + 8));
        }
        else
        {
          long long v57 = *(_OWORD *)v56;
          v136.__r_.__value_.__r.__words[2] = *(void *)(v56 + 16);
          *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v57;
        }
        MIL::IRNamedValueType::Make();
        if (v120.__r_.__value_.__r.__words[0]) {
          operator new();
        }
        v120.__r_.__value_.__r.__words[0] = 0;
        double v58 = v148;
        if ((unint64_t)v148 >= v149)
        {
          uint64_t v60 = (v148 - (char *)v147) >> 4;
          unint64_t v61 = v60 + 1;
          if ((unint64_t)(v60 + 1) >> 60) {
            std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v62 = v149 - (void)v147;
          if ((uint64_t)(v149 - (void)v147) >> 3 > v61) {
            unint64_t v61 = v62 >> 3;
          }
          if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v63 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v63 = v61;
          }
          uint64_t v125 = &v149;
          float v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>>((uint64_t)&v149, v63);
          double v65 = &v64[16 * v60];
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v65;
          int v124 = &v64[16 * v66];
          *(void *)double v65 = 0;
          *((void *)v65 + 1) = 0;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v65 + 16);
          std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__swap_out_circular_buffer((uint64_t *)&v147, &__p);
          double v59 = v148;
          std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)&__p.__r_.__value_.__l.__data_);
        }
        else
        {
          *(void *)int v148 = 0;
          *((void *)v58 + 1) = 0;
          double v59 = v58 + 16;
        }
        int v148 = v59;
        float v67 = (MIL::IRNamedValueType *)v120.__r_.__value_.__r.__words[0];
        v120.__r_.__value_.__r.__words[0] = 0;
        if (v67)
        {
          MIL::IRNamedValueType::~IRNamedValueType(v67);
          MEMORY[0x21667BBD0]();
        }
        if ((SHIBYTE(v136.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_147;
        }
        uint64_t v68 = (void *)v136.__r_.__value_.__r.__words[0];
      }
      operator delete(v68);
LABEL_147:
      MilTranslator::OpTranslator::InferTransposedShape((uint64_t *)v155, (unsigned int **)&v141, &v139);
      (*(void (**)(ANEMachineIR::Utils *))(*(void *)v99 + 88))(v99);
      memset(&__p, 0, sizeof(__p));
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, v139, (uint64_t)v140, (v140 - (unsigned char *)v139) >> 3);
      float v80 = (ANEMachineIR::Utils *)MIL::IRTensorValueType::Make();
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      memset(&__str, 0, sizeof(__str));
      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v153.__r_.__value_.__l.__data_, v153.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v153;
      }
      LOBYTE(v124) = 1;
      uint64_t v126 = 0;
      uint64_t v127 = 0;
      uint64_t v125 = 0;
      std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&v125, v150, (uint64_t)v151, v151 - v150);
      char v128 = 1;
      char v129 = 0;
      char v130 = 0;
      char v131 = 0;
      char v132 = 0;
      LOBYTE(v133) = 0;
      char v135 = 0;
      uint64_t LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a2);
      (*(void (**)(const MIL::IROperation *))(*(void *)a2 + 56))(a2);
      if (v148 == (char *)v147) {
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
      unsigned int v82 = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(*v147);
      uint64_t v83 = MIL::IRValueType::AsTensorType(v82);
      ANEMachineIR::Validators::ValidatePeReduce(LocationPtr, v80, v83, (uint64_t)&__p, (MIL::ValidationResult *)&v120);
      if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v120))
      {
        std::string::basic_string[abi:ne180100]<0>(&v118, "pe_reduce");
        MilTranslator::OpTranslator::AddOperation((uint64_t)v96);
        if (v119 < 0) {
          operator delete(v118);
        }
        std::string::basic_string[abi:ne180100]<0>(&v115, "x");
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v114, v154.__r_.__value_.__l.__data_, v154.__r_.__value_.__l.__size_);
        }
        else {
          std::string v114 = v154;
        }
        MIL::Builder::OperationBuilder::AddInput();
        if (v117) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v117);
        }
        if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v114.__r_.__value_.__l.__data_);
        }
        if (v116 < 0) {
          operator delete(v115);
        }
        std::string::basic_string[abi:ne180100]<0>(&v111, "reduction");
        if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v110, v153.__r_.__value_.__l.__data_, v153.__r_.__value_.__l.__size_);
        }
        else {
          std::string v110 = v153;
        }
        MIL::Builder::OperationBuilder::AddInputString();
        if (v113) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v113);
        }
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v110.__r_.__value_.__l.__data_);
        }
        if (v112 < 0) {
          operator delete(v111);
        }
        std::string::basic_string[abi:ne180100]<0>(&v107, "reduction_axes");
        MIL::Builder::OperationBuilder::AddInputInt8();
        if (v109) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v109);
        }
        if (v108 < 0) {
          operator delete(v107);
        }
        if (v148 == (char *)v147) {
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v94 = MIL::IRNamedValueType::GetName(*v147);
        if (*(char *)(v94 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v105, *(const std::string::value_type **)v94, *(void *)(v94 + 8));
        }
        else
        {
          long long v95 = *(_OWORD *)v94;
          v105.__r_.__value_.__r.__words[2] = *(void *)(v94 + 16);
          *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v95;
        }
        if (v148 == (char *)v147) {
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        MIL::IRNamedValueType::GetType(*v147);
        MIL::Builder::OperationBuilder::AddOutput();
        if (v106) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v106);
        }
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v105.__r_.__value_.__l.__data_);
        }
        *(_DWORD *)uint64_t v100 = 0;
        std::string::basic_string[abi:ne180100]<0>((void *)(v100 + 8), (char *)&unk_210C6BFE7);
        if (v104.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v104.__r_.__value_.__l.__size_);
        }
      }
      else
      {
        MIL::MILResult::GetMessage((MIL::MILResult *)&v120);
        std::operator+<char>();
        float v84 = std::string::append(&v103, "; ");
        long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
        v104.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v85;
        v84->__r_.__value_.__l.__size_ = 0;
        v84->__r_.__value_.__r.__words[2] = 0;
        v84->__r_.__value_.__r.__words[0] = 0;
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v86 = &v104;
        }
        else {
          int v86 = (std::string *)v104.__r_.__value_.__r.__words[0];
        }
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v104.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v104.__r_.__value_.__l.__size_;
        }
        std::string::append(&__str, (const std::string::value_type *)v86, size);
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v104.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v103.__r_.__value_.__l.__data_);
        }
        *(_DWORD *)uint64_t v100 = 6;
        uint64_t v101 = v100 + 8;
        (*(void (**)(const MIL::IROperation *))(*(void *)a2 + 56))(a2);
        std::operator+<char>();
        uint64_t v88 = std::string::append(&v103, "', violations: ");
        long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
        v104.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v89;
        v88->__r_.__value_.__l.__size_ = 0;
        v88->__r_.__value_.__r.__words[2] = 0;
        v88->__r_.__value_.__r.__words[0] = 0;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int64_t v90 = &__str;
        }
        else {
          int64_t v90 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v91 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v91 = __str.__r_.__value_.__l.__size_;
        }
        int64_t v92 = std::string::append(&v104, (const std::string::value_type *)v90, v91);
        long long v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
        *(void *)(v101 + 16) = *((void *)&v92->__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v101 = v93;
        v92->__r_.__value_.__l.__size_ = 0;
        v92->__r_.__value_.__r.__words[2] = 0;
        v92->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v104.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v103.__r_.__value_.__l.__data_);
        }
      }
      MEMORY[0x21667B360](&v120);
      if (v135 && v134 < 0) {
        operator delete(v133);
      }
      if (v128 && v125)
      {
        uint64_t v126 = v125;
        operator delete(v125);
      }
      if ((_BYTE)v124 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v139)
      {
        double v140 = v139;
        operator delete(v139);
      }
      if (v141.__begin_)
      {
        v141.__end_ = v141.__begin_;
        operator delete(v141.__begin_);
      }
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s.__r_.__value_.__l.__data_);
      }
      if (v145)
      {
        uint64_t v146 = v145;
        operator delete(v145);
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v147;
      std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (v150)
      {
        uint64_t v151 = v150;
        operator delete(v150);
      }
      goto LABEL_230;
    }
  }
  else if (v15)
  {
    goto LABEL_14;
  }
  *(_DWORD *)a3 = 8;
  std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), "reduce_mean: keep_dim must be true.");
LABEL_232:
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v154.__r_.__value_.__l.__data_);
  }
  if (v155[0])
  {
    v155[1] = v155[0];
    operator delete(v155[0]);
  }
  if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v156.__r_.__value_.__l.__data_);
  }
}

void sub_210B7DBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  MEMORY[0x21667B360](&a56);
  ANEMachineIR::Validators::PeReduceParamValues::~PeReduceParamValues((void **)&a64);
  if (SLOBYTE(STACK[0x25F]) < 0) {
    operator delete((void *)STACK[0x248]);
  }
  float v67 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v67;
    operator delete(v67);
  }
  uint64_t v68 = (void *)STACK[0x278];
  if (STACK[0x278])
  {
    STACK[0x280] = (unint64_t)v68;
    operator delete(v68);
  }
  if (SLOBYTE(STACK[0x2A7]) < 0) {
    operator delete((void *)STACK[0x290]);
  }
  __int16 v69 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v69;
    operator delete(v69);
  }
  a56 = (void *)(v65 - 248);
  std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a56);
  uint64_t v70 = *(void **)(v65 - 224);
  if (v70)
  {
    *(void *)(v65 - 216) = v70;
    operator delete(v70);
  }
  if (*(char *)(v65 - 177) < 0) {
    operator delete(*(void **)(v65 - 200));
  }
  if (v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
  }
  if (*(char *)(v65 - 153) < 0) {
    operator delete(*(void **)(v65 - 176));
  }
  uint64_t v71 = *(void **)(v65 - 152);
  if (v71)
  {
    *(void *)(v65 - 144) = v71;
    operator delete(v71);
  }
  if (*(char *)(v65 - 105) < 0) {
    operator delete(*(void **)(v65 - 128));
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::Validators::PeReduceParamValues::~PeReduceParamValues(void **this)
{
  if (*((unsigned char *)this + 104) && *((char *)this + 103) < 0) {
    operator delete(this[10]);
  }
  if (*((unsigned char *)this + 56))
  {
    uint64_t v2 = this[4];
    if (v2)
    {
      this[5] = v2;
      operator delete(v2);
    }
  }
  if (*((unsigned char *)this + 24))
  {
    if (*((char *)this + 23) < 0) {
      operator delete(*this);
    }
  }
}

void *std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_210B7E054(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ANEMachineIR::H2020::NeReduce::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210B7F57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)&STACK[0x288]);
  if (a68) {
    (*(void (**)(uint64_t))(*(void *)a68 + 8))(a68);
  }
  if (a67) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a67);
  }
  if (__p) {
    operator delete(__p);
  }
  uint64_t v71 = (void *)STACK[0x258];
  if (STACK[0x258])
  {
    STACK[0x260] = (unint64_t)v71;
    operator delete(v71);
  }
  uint64_t v72 = *(void **)(v69 - 96);
  if (v72)
  {
    *(void *)(v69 - 88) = v72;
    operator delete(v72);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a69, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x280], 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::PeReduce::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210B81160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)&STACK[0x288]);
  if (a72) {
    (*(void (**)(uint64_t))(*(void *)a72 + 8))(a72);
  }
  if (a71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a71);
  }
  if (__p) {
    operator delete(__p);
  }
  uint64_t v74 = (void *)STACK[0x258];
  if (STACK[0x258])
  {
    STACK[0x260] = (unint64_t)v74;
    operator delete(v74);
  }
  unint64_t v75 = *(void **)(v72 - 96);
  if (v75)
  {
    *(void *)(v72 - 88) = v75;
    operator delete(v75);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x200], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x280], 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::Const::Make(uint64_t a1, uint64_t a2)
{
  void v6[4] = *MEMORY[0x263EF8340];
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v2 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  v6[0] = &unk_26C315638;
  v6[1] = ANEMachineIR::H2022::Validators::ValidateConst;
  v6[3] = v6;
  char v4 = HIBYTE(v2);
  v5[0] = &unk_26C318E28;
  v5[3] = v5;
  MIL::IROperator::Make();
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__value_func[abi:ne180100](v5);
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::~__value_func[abi:ne180100](v6);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

{
  std::__shared_weak_count *v3;

  int v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void sub_210B819E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__value_func[abi:ne180100]((uint64_t *)va2);
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::~__value_func[abi:ne180100]((void *)(v5 - 56));
  if (a5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a5);
  }
  ANEMachineIR::H2022::Const::Make((uint64_t)va, (uint64_t)va1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ANEMachineIR::H2022::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2022::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__func()
{
}

void *std::__function::__func<ANEMachineIR::H2022::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2022::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C318E28;
  return result;
}

void std::__function::__func<ANEMachineIR::H2022::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2022::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C318E28;
}

void std::__function::__func<ANEMachineIR::H2022::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2022::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()()
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "val");
  MIL::IRObject::TryGetAttributeSharedPtr();
  if (v1 < 0) {
    operator delete(__p);
  }
}

void sub_210B81AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ANEMachineIR::H2022::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2022::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ANEMachineIR::H2022::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2022::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target_type()
{
}

uint64_t ANEMachineIR::H2020::Validators::ValidateBaseNeMatmul@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return MIL::ValidationResult::ValidationResult(a1);
}

void ANEMachineIR::H2020::Validators::ValidateNeBatchMatmul(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2020::Validators::ValidateNeMatmul(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2021::Const::Make(uint64_t a1, uint64_t a2)
{
  void v6[4] = *MEMORY[0x263EF8340];
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v2 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  v6[0] = &unk_26C315638;
  v6[1] = ANEMachineIR::H2021::Validators::ValidateConst;
  v6[3] = v6;
  char v4 = HIBYTE(v2);
  v5[0] = &unk_26C318EB8;
  v5[3] = v5;
  MIL::IROperator::Make();
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__value_func[abi:ne180100](v5);
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::~__value_func[abi:ne180100](v6);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_210B81CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__value_func[abi:ne180100]((uint64_t *)va2);
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::~__value_func[abi:ne180100]((void *)(v5 - 56));
  if (a5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a5);
  }
  ANEMachineIR::H2022::Const::Make((uint64_t)va, (uint64_t)va1);
  _Unwind_Resume(a1);
}

void std::__function::__func<ANEMachineIR::H2021::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2021::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__func()
{
}

void *std::__function::__func<ANEMachineIR::H2021::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2021::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C318EB8;
  return result;
}

void std::__function::__func<ANEMachineIR::H2021::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2021::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C318EB8;
}

void std::__function::__func<ANEMachineIR::H2021::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2021::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator()()
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "val");
  MIL::IRObject::TryGetAttributeSharedPtr();
  if (v1 < 0) {
    operator delete(__p);
  }
}

void sub_210B81DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<ANEMachineIR::H2021::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2021::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ANEMachineIR::H2021::Const::Make(MIL::MILContext &,std::string)::$_0,std::allocator<ANEMachineIR::H2021::Const::Make(MIL::MILContext &,std::string)::$_0>,std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::target_type()
{
}

void ANEMachineIR::H2021::Validators::ValidateReshape(MIL::IROperation *this@<X0>, uint64_t a2@<X8>)
{
}

void ANEMachineIR::H2021::Validators::ValidateTranspose(MIL::IROperation *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

uint64_t std::array<std::string,6ul>::~array(uint64_t a1)
{
  for (uint64_t i = 0; i != -144; i -= 24)
  {
    if (*(char *)(a1 + i + 143) < 0) {
      operator delete(*(void **)(a1 + i + 120));
    }
  }
  return a1;
}

void MilTranslator::OpTranslator::~OpTranslator(MilTranslator::OpTranslator *this)
{
  std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::~__hash_table((uint64_t)this + 296);
  MilTranslator::WeightTranslator::~WeightTranslator((MilTranslator::OpTranslator *)((char *)this + 144));
  std::__hash_table<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>>>::~__hash_table((uint64_t)this + 104);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  char v4 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

uint64_t MilTranslator::OpTranslator::OpTranslator(uint64_t a1, void *a2, void *a3, long long *a4, unsigned int *a5, uint64_t a6, uint64_t a7)
{
  v69[7] = *MEMORY[0x263EF8340];
  *(void *)(a1 + 8) = *a2;
  uint64_t v11 = a2[1];
  *(void *)(a1 + 16) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 24) = *a3;
  uint64_t v12 = a3[1];
  *(void *)(a1 + 32) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v13 = *a4;
    *(void *)(a1 + 56) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 40) = v13;
  }
  int v14 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v55 = *(void *)(a1 + 8);
  uint64_t v56 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::ProgramBuilder::Make();
  unint64_t v15 = v57.n128_u64[0];
  *(void *)(a1 + 64) = v57.n128_u64[0];
  if (v15) {
    operator new();
  }
  *(void *)(a1 + 72) = 0;
  v57.n128_u64[0] = 0;
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  MIL::Builder::ProgramBuilder::AddFunction();
  OpsetString = ANEMachineIR::GetOpsetString(*a5);
  std::string::basic_string[abi:ne180100]<0>(__p, OpsetString);
  MIL::Builder::FunctionBuilder::AddBlock();
  if (v54 < 0) {
    operator delete(__p[0]);
  }
  if (v57.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v57.n128_u64[1]);
  }
  *(void *)(a1 + 96) = a5;
  *(void *)&long long v51 = MilTranslator::OpTranslator::TranslateElementWiseBinary;
  *((void *)&v51 + 1) = 0;
  uint64_t v52 = a1;
  std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[4],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(&v57, "add", &v51);
  *(void *)&long long v49 = MilTranslator::OpTranslator::TranslateAvgPool;
  *((void *)&v49 + 1) = 0;
  uint64_t v50 = a1;
  std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[9],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(v59, "avg_pool", &v49);
  *(void *)&long long v47 = MilTranslator::OpTranslator::TranslateConst;
  *((void *)&v47 + 1) = 0;
  uint64_t v48 = a1;
  std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[6],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(v60, "const", &v47);
  *(void *)&long long v45 = MilTranslator::OpTranslator::TranslateConv;
  *((void *)&v45 + 1) = 0;
  uint64_t v46 = a1;
  std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[5],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(v61, "conv", &v45);
  *(void *)&long long v43 = MilTranslator::OpTranslator::TranslateLinear;
  *((void *)&v43 + 1) = 0;
  uint64_t v44 = a1;
  std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[7],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(v62, "linear", &v43);
  *(void *)&long long v41 = MilTranslator::OpTranslator::TranslateElementWiseBinary;
  *((void *)&v41 + 1) = 0;
  uint64_t v42 = a1;
  std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[8],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(v63, "maximum", &v41);
  *(void *)&long long v39 = MilTranslator::OpTranslator::TranslateMaxPool;
  *((void *)&v39 + 1) = 0;
  uint64_t v40 = a1;
  std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[9],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(v64, "max_pool", &v39);
  *(void *)&long long v37 = MilTranslator::OpTranslator::TranslateElementWiseBinary;
  *((void *)&v37 + 1) = 0;
  uint64_t v38 = a1;
  std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[4],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(v65, "mul", &v37);
  *(void *)&long long v35 = MilTranslator::OpTranslator::TranslateReduceMean;
  *((void *)&v35 + 1) = 0;
  uint64_t v36 = a1;
  std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[12],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(v66, "reduce_mean", &v35);
  *(void *)&long long v33 = MilTranslator::OpTranslator::TranslateActivation;
  *((void *)&v33 + 1) = 0;
  uint64_t v34 = a1;
  std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[5],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(v67, "relu", &v33);
  *(void *)&long long v31 = MilTranslator::OpTranslator::TranslateReshape;
  *((void *)&v31 + 1) = 0;
  uint64_t v32 = a1;
  std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[8],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(v68, "reshape", &v31);
  *(void *)&long long v29 = MilTranslator::OpTranslator::TranslateActivation;
  *((void *)&v29 + 1) = 0;
  uint64_t v30 = a1;
  std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[8],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(v69, "sigmoid", &v29);
  std::unordered_map<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::unordered_map(a1 + 104, (unsigned __int8 *)&v57, 12);
  uint64_t v17 = 84;
  do
  {
    std::__function::__value_func<TranslatorStatus ()(MIL::IROperation const&)>::~__value_func[abi:ne180100](&__p[v17 + 1]);
    if (SHIBYTE(__p[v17]) < 0) {
      operator delete(*(void **)((char *)&v51 + v17 * 8 + 8));
    }
    v17 -= 7;
  }
  while (v17 * 8);
  uint64_t Function = MIL::IRProgram::GetFunction();
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)Function + 40))(Function);
  unint64_t v20 = *(void *)(a1 + 80);
  unint64_t v21 = *(std::__shared_weak_count **)(a1 + 88);
  if (v21)
  {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    v57.n128_u64[1] = v20;
    double v58 = v21;
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    v57.n128_u64[1] = *(void *)(a1 + 80);
    double v58 = 0;
  }
  v57.n128_u64[0] = v19 + 64;
  std::allocate_shared[abi:ne180100]<std::function<std::string ()(std::string const&)>,std::allocator<std::function<std::string ()(std::string const&)>>,ANEMachineIR::Utils::CheckedCounterNameGenerator,void>(&v57, &v27);
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  uint64_t v22 = *(std::__shared_weak_count **)(a1 + 88);
  uint64_t v25 = *(void *)(a1 + 80);
  int v26 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MilTranslator::WeightTranslator::WeightTranslator(a1 + 144, a6, a7, &v27, &v25);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_DWORD *)(a1 + 328) = 1065353216;
  MIL::Builder::ProgramBuilder::GetFunction();
  uint64_t v23 = ANEMachineIR::GetOpsetString(**(_DWORD **)(a1 + 96));
  std::string::basic_string[abi:ne180100]<0>(&v57, v23);
  MIL::Builder::FunctionBuilder::SetSpecialization();
  if (SHIBYTE(v58) < 0) {
    operator delete((void *)v57.n128_u64[0]);
  }
  if (*((void *)&v51 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v51 + 1));
  }
  return a1;
}

void sub_210B824C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  float v64 = *(std::__shared_weak_count **)(v62 + 32);
  if (v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
  }
  uint64_t v65 = *(std::__shared_weak_count **)(v62 + 16);
  if (v65) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v65);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void MilTranslator::OpTranslator::Translate(MilTranslator::OpTranslator *this@<X0>, const MIL::IROperation *a2@<X1>, _DWORD *a3@<X8>)
{
  ++*(void *)this;
  uint64_t v6 = (*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 56))(a2);
  if (*(char *)(v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
  }
  else
  {
    long long v7 = *(_OWORD *)v6;
    __p.__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
  }
  size_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>>>::find<std::string>((void *)this + 13, (unsigned __int8 *)&__p);
  if (v8)
  {
    uint64_t v9 = *((void *)v8 + 8);
    if (!v9) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, const MIL::IROperation *))(*(void *)v9 + 48))(v9, a2);
  }
  else
  {
    *a3 = 1;
    std::operator+<char>();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_210B827E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MilTranslator::OpTranslator::Translate(MilTranslator::OpTranslator *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  long long v7 = (const MIL::IROperation ****)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 56))(v6);
  size_t v8 = **v7;
  uint64_t v9 = (*v7)[1];
  while (v8 != v9)
  {
    MilTranslator::OpTranslator::Translate(a1, *v8, (_DWORD *)a3);
    if (*(_DWORD *)a3) {
      return;
    }
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*(void **)(a3 + 8));
    }
    v8 += 2;
  }
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  unint64_t v43 = 0;
  uint64_t v10 = (void ***)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 56))(v6);
  uint64_t v11 = **v10;
  uint64_t v12 = (*v10)[1];
  while (v11 != v12)
  {
    uint64_t v13 = *v11;
    uint64_t v14 = (*(uint64_t (**)(void))(*(void *)*v11 + 56))(*v11);
    int v15 = *(char *)(v14 + 23);
    if (v15 < 0)
    {
      if (*(void *)(v14 + 8) == 5)
      {
        uint64_t v14 = *(void *)v14;
LABEL_13:
        if (*(_DWORD *)v14 == 1936617315 && *(unsigned char *)(v14 + 4) == 116)
        {
          (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v13 + 200))(&v40, v13);
          if (*(char *)(v40.__r_.__value_.__r.__words[0] + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v40.__r_.__value_.__l.__data_, *(void *)(v40.__r_.__value_.__r.__words[0] + 8));
          }
          else
          {
            long long v17 = *(_OWORD *)v40.__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = *(void *)(v40.__r_.__value_.__r.__words[0] + 16);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v17;
          }
          v39[0] = &v40;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
          uint64_t v18 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 88))(v6);
          uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 88))(v6);
          uint64_t v20 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v18, *(void *)(v19 + 8), (unsigned __int8 **)&__p);
          if (v20 != *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v6 + 88))(v6) + 8))
          {
            unint64_t v21 = v42;
            if ((unint64_t)v42 >= v43)
            {
              uint64_t v23 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v41, (long long *)&__p);
            }
            else
            {
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(v42, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
              }
              else
              {
                long long v22 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                v42->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
              }
              uint64_t v23 = v21 + 1;
            }
            uint64_t v42 = v23;
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    else if (v15 == 5)
    {
      goto LABEL_13;
    }
    v11 += 2;
  }
  unint64_t v24 = (long long **)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 88))(v6);
  memset(&v40, 0, sizeof(v40));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v40, *v24, v24[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v24[1] - (char *)*v24) >> 3));
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 160))(v39, a2);
  std::string::size_type v25 = v40.__r_.__value_.__r.__words[0];
  if (v40.__r_.__value_.__l.__size_ != v40.__r_.__value_.__r.__words[0])
  {
    uint64_t v26 = 0;
    unint64_t v27 = 0;
    do
    {
      uint64_t v28 = (long long *)(v25 + v26);
      if (*((char *)v28 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)v28, *((void *)v28 + 1));
      }
      else
      {
        long long v29 = *v28;
        v38.__r_.__value_.__r.__words[2] = *((void *)v28 + 2);
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v29;
      }
      uint64_t v30 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(*((MIL::IRValueType **)v39[0] + v27));
      if (std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::find<std::string>((void *)a1 + 37, (unsigned __int8 *)&v38))
      {
        long long v31 = std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::find<std::string>((void *)a1 + 37, (unsigned __int8 *)&v38);
        uint64_t v32 = v31;
        if ((char)v31[63] < 0) {
          std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v31 + 5), *((void *)v31 + 6));
        }
        else {
          std::string __p = *(std::string *)(v31 + 40);
        }
        int v36 = *((_DWORD *)v32 + 16);
        unsigned __int8 v37 = v32[68];
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        char v34 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          MilTranslator::OpTranslator::EnsureTransposeProducesChannelFirst((uint64_t)a1, (uint64_t)&v38, v30);
          char v34 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        if (v34 < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
      ++v27;
      std::string::size_type v25 = v40.__r_.__value_.__r.__words[0];
      v26 += 24;
    }
    while (v27 < 0xAAAAAAAAAAAAAAABLL
                * ((uint64_t)(v40.__r_.__value_.__l.__size_ - v40.__r_.__value_.__r.__words[0]) >> 3));
  }
  *(_DWORD *)a3 = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), (char *)&unk_210C6BFE7);
  if (v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_210B82CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::string __p = &a28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void MilTranslator::OpTranslator::EnsureTransposeProducesChannelFirst(uint64_t a1, uint64_t a2, ANEMachineIR::Utils *a3)
{
  uint64_t v6 = (void *)(*(uint64_t (**)(ANEMachineIR::Utils *))(*(void *)a3 + 96))(a3);
  uint64_t v7 = (uint64_t)(v6[1] - *v6) >> 3;
  if (v8[23] < 0) {
    std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else {
    std::string v38 = *(std::string *)v8;
  }
  if (v9[23] < 0) {
    std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)v9, *((void *)v9 + 1));
  }
  else {
    std::string v37 = *(std::string *)v9;
  }
  if (*(char *)(a2 + 23) >= 0) {
    size_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v10 = *(void *)(a2 + 8);
  }
  std::vector<int>::pointer begin = &v34;
  std::string::basic_string[abi:ne180100]((uint64_t)&v34, v10 + 13);
  if (SHIBYTE(v34.__end_cap_.__value_) < 0) {
    std::vector<int>::pointer begin = v34.__begin_;
  }
  if (v10)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v12 = (const std::string::value_type *)a2;
    }
    else {
      uint64_t v12 = *(const std::string::value_type **)a2;
    }
    memmove(begin, v12, v10);
  }
  strcpy((char *)begin + v10, "_channel_last");
  if (SHIBYTE(v34.__end_cap_.__value_) < 0) {
    operator delete(v34.__begin_);
  }
  uint64_t v13 = (uint64_t *)(*(uint64_t (**)(ANEMachineIR::Utils *))(*(void *)a3 + 96))(a3);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  std::vector<int>::size_type v16 = (v14 - *v13) >> 3;
  std::vector<int>::vector(&v34, v16);
  if (v14 != v15)
  {
    long long v17 = (unsigned __int8 *)&v36;
    std::vector<int>::pointer v18 = v34.__begin_;
    do
    {
      int v19 = *v17++;
      *v18++ = v19;
      --v16;
    }
    while (v16);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "transpose");
  MilTranslator::OpTranslator::AddOperation(a1);
  if (v32 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&v28, "x");
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v27, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
  }
  else {
    std::string v27 = v35;
  }
  MIL::Builder::OperationBuilder::AddInput();
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (v29 < 0) {
    operator delete(v28);
  }
  std::string::basic_string[abi:ne180100]<0>(&v24, "perm");
  MIL::Builder::OperationBuilder::AddInputInt32();
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v25 < 0) {
    operator delete(v24);
  }
  ANEMachineIR::Utils::GetStaticTensorShape(a3, v20, (uint64_t)v23);
  (*(void (**)(ANEMachineIR::Utils *))(*(void *)a3 + 88))(a3);
  MIL::IRTensorValueType::Make();
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v21 = *(std::string *)a2;
  }
  MIL::Builder::OperationBuilder::AddOutput();
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (v23[0])
  {
    v23[1] = v23[0];
    operator delete(v23[0]);
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (v34.__begin_)
  {
    v34.__end_ = v34.__begin_;
    operator delete(v34.__begin_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
}

void sub_210B83198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,std::__shared_weak_count *a50)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (a50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a50);
  }
  uint64_t v52 = *(void **)(v50 - 184);
  if (v52)
  {
    *(void *)(v50 - 176) = v52;
    operator delete(v52);
  }
  if (*(char *)(v50 - 137) < 0) {
    operator delete(*(void **)(v50 - 160));
  }
  if (*(char *)(v50 - 105) < 0) {
    operator delete(*(void **)(v50 - 128));
  }
  if (*(char *)(v50 - 73) < 0) {
    operator delete(*(void **)(v50 - 96));
  }
  _Unwind_Resume(exception_object);
}

void MilTranslator::OpTranslator::AddOperation(uint64_t a1)
{
  OpsetString = ANEMachineIR::GetOpsetString(**(_DWORD **)(a1 + 96));
  std::string::basic_string[abi:ne180100]<0>(__p, OpsetString);
  MIL::MILContext::GetOpset();
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  MIL::IROpset::TryGetOperatorSharedPtr();
  uint64_t v2 = __p[0];
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    char v4 = std::string::append(&v6, "'");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v8 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x21667B9A0](exception, __p);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  MIL::Builder::BlockBuilder::AddOperation();
}

void sub_210B833E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0)
  {
    operator delete(a12);
    if ((v24 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

uint64_t MilTranslator::OpTranslator::GetBlockBuilder@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 88);
  *a2 = *(void *)(this + 80);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void MilTranslator::OpTranslator::ConstructProgram(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  MIL::Builder::ProgramBuilder::GetFunction();
  uint64_t v12 = (void *)*a3;
  size_t v10 = a3 + 1;
  uint64_t v11 = v12;
  if (v12 != v10)
  {
    do
    {
      if (*((char *)v11 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v23, (const std::string::value_type *)v11[4], v11[5]);
      }
      else {
        std::string v23 = *(std::string *)(v11 + 4);
      }
      MIL::Builder::FunctionBuilder::AddInput();
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      uint64_t v13 = (void *)v11[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)v11[2];
          BOOL v15 = *v14 == (void)v11;
          uint64_t v11 = v14;
        }
        while (!v15);
      }
      uint64_t v11 = v14;
    }
    while (v14 != v10);
  }
  uint64_t v17 = *a4;
  uint64_t v16 = a4[1];
  while (v17 != v16)
  {
    MIL::Builder::BlockBuilder::AddOutput();
    v17 += 24;
  }
  MIL::Builder::ProgramBuilder::CreateProgram(&v21, *(MIL::Builder::ProgramBuilder **)(a1 + 64));
  if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)v22))
  {
    uint64_t v18 = v21;
    uint64_t v21 = 0;
    uint64_t v19 = *a2;
    *a2 = v18;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
    *(_DWORD *)a5 = 0;
    std::string::basic_string[abi:ne180100]<0>((void *)(a5 + 8), (char *)&unk_210C6BFE7);
  }
  else
  {
    *(_DWORD *)a5 = 3;
    MIL::MILResult::GetMessageWithLocation((uint64_t *)(a5 + 8), (MIL::MILResult *)v22);
  }
  MEMORY[0x21667B360](v22);
  uint64_t v20 = v21;
  uint64_t v21 = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
}

void sub_210B8366C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  int v24 = *(std::__shared_weak_count **)(v22 - 72);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::pair<std::unique_ptr<MIL::IRProgram>,MIL::ValidationResult>::~pair(uint64_t *a1)
{
  MEMORY[0x21667B360](a1 + 1);
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void *MilTranslator::OpTranslator::InferTransposedShape@<X0>(uint64_t *a1@<X0>, unsigned int **a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = (a1[1] - *a1) >> 3;
  std::string v6 = *a2;
  long long v5 = a2[1];
  if (v4 != v5 - *a2) {
    MilTranslator::OpTranslator::InferTransposedShape();
  }
  uint64_t result = std::vector<unsigned long long>::vector(a3, v4);
  if (v5 != v6)
  {
    size_t v10 = *a2;
    uint64_t v11 = *a1;
    uint64_t v12 = (void *)*a3;
    if (v4 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v4;
    }
    do
    {
      unsigned int v15 = *v10++;
      unint64_t v14 = v15;
      if ((v15 & 0x80000000) != 0 || v4 <= v14) {
        __assert_rtn("InferTransposedShape", "OpTranslator.cpp", 215, "positive_perm[i] >= 0 && positive_perm[i] < rank");
      }
      *v12++ = *(void *)(v11 + 8 * v14);
      --v13;
    }
    while (v13);
  }
  return result;
}

void sub_210B837D4(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MilTranslator::OpTranslator::InferChannelLastTransposeInfo(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 21) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v7 = (void *)(a1 + 296);
  if (std::__hash_table<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>>>::find<std::string>((void *)(a1 + 296), (unsigned __int8 *)a2))
  {
    std::string::size_type v8 = std::__hash_table<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>>>::find<std::string>(v7, (unsigned __int8 *)a2);
    std::string::operator=((std::string *)a4, (const std::string *)(v8 + 40));
    int v9 = *((_DWORD *)v8 + 16);
    *(unsigned char *)(a4 + 28) = v8[68];
    *(_DWORD *)(a4 + 24) = v9;
  }
  else
  {
    if (v10[23] < 0) {
      std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)v10, *((void *)v10 + 1));
    }
    else {
      std::string v22 = *(std::string *)v10;
    }
    if (v11[23] < 0) {
      std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)v11, *((void *)v11 + 1));
    }
    else {
      std::string v21 = *(std::string *)v11;
    }
    if (*(char *)(a2 + 23) >= 0) {
      size_t v12 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v12 = *(void *)(a2 + 8);
    }
    p_p = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v12 + 13);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v12)
    {
      if (*(char *)(a2 + 23) >= 0) {
        unint64_t v14 = (const void *)a2;
      }
      else {
        unint64_t v14 = *(const void **)a2;
      }
      memmove(p_p, v14, v12);
    }
    strcpy((char *)p_p + v12, "_channel_last");
    int v15 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_OWORD *)a4 = v17;
    *(void *)(a4 + 16) = v18;
    HIBYTE(v18) = 0;
    LOBYTE(v17) = 0;
    *(_DWORD *)(a4 + 24) = v19;
    *(unsigned char *)(a4 + 28) = v20;
    if (v15 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
  }
}

void sub_210B839C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (*(char *)(v25 - 41) < 0) {
    operator delete(*(void **)(v25 - 64));
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::GetShapePermInfoFromAxisConvention@<X0>(std::string *__str@<X2>, uint64_t a2@<X0>, uint64_t *a3@<X1>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 21) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t result = (uint64_t)std::string::operator=((std::string *)a4, __str);
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  uint64_t v9 = *((unsigned __int8 *)a3 + 23);
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = a3[1];
  }
  if (v8 != v9) {
    __assert_rtn("GetShapePermInfoFromAxisConvention", "OpTranslator.cpp", 39, "source.size() == target.size()");
  }
  if (v8)
  {
    uint64_t v10 = 0;
    uint64_t v11 = a4 + 24;
    do
    {
      if (*((char *)a3 + 23) >= 0) {
        size_t v12 = a3;
      }
      else {
        size_t v12 = (uint64_t *)*a3;
      }
      uint64_t result = std::string::find((const std::string *)a2, *((unsigned char *)v12 + v10), 0);
      *(unsigned char *)(v11 + v10++) = result;
    }
    while (v8 != v10);
  }
  return result;
}

void sub_210B83B10(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MilTranslator::OpTranslator::IsTransposeRequired(void *a1)
{
  uint64_t v1 = a1[1];
  uint64_t v2 = v1 - *a1;
  if (v1 == *a1)
  {
    char v4 = 0;
  }
  else
  {
    uint64_t v3 = 0;
    char v4 = 0;
    unint64_t v5 = v2 >> 2;
    if (v5 <= 1) {
      unint64_t v5 = 1;
    }
    do
    {
      v4 |= v3 != *(int *)(*a1 + 4 * v3);
      ++v3;
    }
    while (v5 != v3);
  }
  return v4 & 1;
}

std::vector<int> *MilTranslator::OpTranslator::GetTransposeOpParamPerm@<X0>(std::vector<int>::size_type __n@<X2>, uint64_t a2@<X1>, std::vector<int> *a3@<X8>)
{
  std::vector<int>::size_type v3 = __n;
  uint64_t result = std::vector<int>::vector(a3, __n);
  if (v3)
  {
    std::string v6 = (unsigned __int8 *)(a2 + 24);
    std::vector<int>::pointer begin = result->__begin_;
    do
    {
      int v8 = *v6++;
      *begin++ = v8;
      --v3;
    }
    while (v3);
  }
  return result;
}

void MilTranslator::OpTranslator::GetChannelLastTensorNameMayInsertTranspose(uint64_t a1@<X0>, uint64_t a2@<X1>, ANEMachineIR::Utils *a3@<X2>, std::string *a4@<X8>)
{
  int v8 = (uint64_t *)(*(uint64_t (**)(ANEMachineIR::Utils *))(*(void *)a3 + 96))(a3);
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  if (std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::find<std::string>((void *)(a1 + 296), (unsigned __int8 *)a2))
  {
    uint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::find<std::string>((void *)(a1 + 296), (unsigned __int8 *)a2);
    size_t v12 = v11;
    if ((char)v11[63] < 0) {
      std::string::__init_copy_ctor_external(&v38, *((const std::string::value_type **)v11 + 5), *((void *)v11 + 6));
    }
    else {
      std::string v38 = *(std::string *)(v11 + 40);
    }
    LODWORD(v39) = *((_DWORD *)v12 + 16);
    BYTE4(v39) = v12[68];
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v38.__r_.__value_.__l.__size_)
      {
        std::string::__init_copy_ctor_external(a4, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
        if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return;
        }
        uint64_t v13 = (void *)v38.__r_.__value_.__r.__words[0];
        goto LABEL_70;
      }
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    else if (*((unsigned char *)&v38.__r_.__value_.__s + 23))
    {
      *a4 = v38;
      return;
    }
  }
  MilTranslator::OpTranslator::InferChannelLastTransposeInfo(a1, a2, (v9 - v10) >> 3, (uint64_t)&v46);
  unint64_t v14 = (uint64_t *)(*(uint64_t (**)(ANEMachineIR::Utils *))(*(void *)a3 + 96))(a3);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  std::vector<int>::size_type v17 = (v15 - *v14) >> 3;
  std::vector<int>::vector(&v45, v17);
  if (v15 != v16)
  {
    uint64_t v18 = (unsigned __int8 *)&v47;
    std::vector<int>::pointer begin = v45.__begin_;
    do
    {
      int v20 = *v18++;
      *begin++ = v20;
      --v17;
    }
    while (v17);
  }
  if (v45.__end_ == v45.__begin_) {
    goto LABEL_24;
  }
  uint64_t v21 = 0;
  char v22 = 0;
  unint64_t v23 = v45.__end_ - v45.__begin_;
  if (v23 <= 1) {
    unint64_t v23 = 1;
  }
  do
  {
    v22 |= v21 != v45.__begin_[v21];
    ++v21;
  }
  while (v23 != v21);
  if ((v22 & 1) == 0)
  {
LABEL_24:
    long long v41 = 0uLL;
    uint64_t v42 = 0;
    int v43 = 50462976;
    char v44 = 4;
    std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>::pair[abi:ne180100]<std::string const&,std::pair<std::string,std::array<unsigned char,5ul>>&,0>(&v38, (long long *)a2, &v41);
    std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>>(a1 + 296, (unsigned __int8 *)&v38, (long long *)&v38);
    if (v40 < 0) {
      operator delete(v39);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    }
    if (SHIBYTE(v42) < 0) {
      operator delete((void *)v41);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "transpose");
    MilTranslator::OpTranslator::AddOperation(a1);
    if (v36 < 0) {
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&v32, "x");
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v31 = *(std::string *)a2;
    }
    MIL::Builder::OperationBuilder::AddInput();
    if (v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    if (v33 < 0) {
      operator delete(v32);
    }
    std::string::basic_string[abi:ne180100]<0>(&v28, "perm");
    memset(&v38, 0, sizeof(v38));
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v38, v45.__begin_, (uint64_t)v45.__end_, v45.__end_ - v45.__begin_);
    MIL::Builder::OperationBuilder::AddInputInt32();
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    if (v38.__r_.__value_.__r.__words[0])
    {
      v38.__r_.__value_.__l.__size_ = v38.__r_.__value_.__r.__words[0];
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (v29 < 0) {
      operator delete(v28);
    }
    ANEMachineIR::Utils::GetStaticTensorShape(a3, v24, (uint64_t)&v41);
    MilTranslator::OpTranslator::InferTransposedShape((uint64_t *)&v41, (unsigned int **)&v45, v27);
    (*(void (**)(ANEMachineIR::Utils *))(*(void *)a3 + 88))(a3);
    MIL::IRTensorValueType::Make();
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v25, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
    }
    else {
      std::string v25 = v46;
    }
    MIL::Builder::OperationBuilder::AddOutput();
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>::pair[abi:ne180100]<std::string const&,std::pair<std::string,std::array<unsigned char,5ul>>&,0>(&v38, (long long *)a2, (long long *)&v46);
    std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>>(a1 + 296, (unsigned __int8 *)&v38, (long long *)&v38);
    if (v40 < 0) {
      operator delete(v39);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(a4, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
    }
    else {
      *a4 = v46;
    }
    if (v27[0])
    {
      v27[1] = v27[0];
      operator delete(v27[0]);
    }
    if ((void)v41)
    {
      *((void *)&v41 + 1) = v41;
      operator delete((void *)v41);
    }
    if (v37) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v37);
    }
  }
  if (v45.__begin_)
  {
    v45.__end_ = v45.__begin_;
    operator delete(v45.__begin_);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v13 = (void *)v46.__r_.__value_.__r.__words[0];
LABEL_70:
    operator delete(v13);
  }
}

void sub_210B840C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,std::__shared_weak_count *a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  if (a51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a51);
  }
  double v59 = *(void **)(v57 - 136);
  if (v59)
  {
    *(void *)(v57 - 128) = v59;
    operator delete(v59);
  }
  if (*(char *)(v57 - 89) < 0) {
    operator delete(*(void **)(v57 - 112));
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[4],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(void *a1, char *a2, long long *a3)
{
  unint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  long long v8 = *a3;
  uint64_t v9 = *((void *)a3 + 2);
  v5[6] = 0;
  std::string v6 = (char *)operator new(0x20uLL);
  *(void *)std::string v6 = &unk_26C318F38;
  *(_OWORD *)(v6 + 8) = v8;
  *((void *)v6 + 3) = v9;
  a1[6] = v6;
  return a1;
}

void sub_210B8429C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>>,TranslatorStatus ()(MIL::IROperation const&)>::~__func()
{
}

__n128 std::__function::__func<std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>>,TranslatorStatus ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C318F38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>>,TranslatorStatus ()(MIL::IROperation const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C318F38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>>,TranslatorStatus ()(MIL::IROperation const&)>::operator()(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  std::vector<int>::size_type v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t std::__function::__func<std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>>,TranslatorStatus ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>>,TranslatorStatus ()(MIL::IROperation const&)>::target_type()
{
}

void *std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[9],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(void *a1, char *a2, long long *a3)
{
  unint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  long long v8 = *a3;
  uint64_t v9 = *((void *)a3 + 2);
  v5[6] = 0;
  std::string v6 = (char *)operator new(0x20uLL);
  *(void *)std::string v6 = &unk_26C318F38;
  *(_OWORD *)(v6 + 8) = v8;
  *((void *)v6 + 3) = v9;
  a1[6] = v6;
  return a1;
}

void sub_210B84450(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[6],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(void *a1, char *a2, long long *a3)
{
  unint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  long long v8 = *a3;
  uint64_t v9 = *((void *)a3 + 2);
  v5[6] = 0;
  std::string v6 = (char *)operator new(0x20uLL);
  *(void *)std::string v6 = &unk_26C318F38;
  *(_OWORD *)(v6 + 8) = v8;
  *((void *)v6 + 3) = v9;
  a1[6] = v6;
  return a1;
}

void sub_210B844EC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[5],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(void *a1, char *a2, long long *a3)
{
  unint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  long long v8 = *a3;
  uint64_t v9 = *((void *)a3 + 2);
  v5[6] = 0;
  std::string v6 = (char *)operator new(0x20uLL);
  *(void *)std::string v6 = &unk_26C318F38;
  *(_OWORD *)(v6 + 8) = v8;
  *((void *)v6 + 3) = v9;
  a1[6] = v6;
  return a1;
}

void sub_210B84588(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[7],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(void *a1, char *a2, long long *a3)
{
  unint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  long long v8 = *a3;
  uint64_t v9 = *((void *)a3 + 2);
  v5[6] = 0;
  std::string v6 = (char *)operator new(0x20uLL);
  *(void *)std::string v6 = &unk_26C318F38;
  *(_OWORD *)(v6 + 8) = v8;
  *((void *)v6 + 3) = v9;
  a1[6] = v6;
  return a1;
}

void sub_210B84624(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[8],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(void *a1, char *a2, long long *a3)
{
  unint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  long long v8 = *a3;
  uint64_t v9 = *((void *)a3 + 2);
  v5[6] = 0;
  std::string v6 = (char *)operator new(0x20uLL);
  *(void *)std::string v6 = &unk_26C318F38;
  *(_OWORD *)(v6 + 8) = v8;
  *((void *)v6 + 3) = v9;
  a1[6] = v6;
  return a1;
}

void sub_210B846C0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]<char const(&)[12],std::__bind<TranslatorStatus (MilTranslator::OpTranslator::*)(MIL::IROperation const&),MilTranslator::OpTranslator*,std::placeholders::__ph<1> const&>,0>(void *a1, char *a2, long long *a3)
{
  unint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  long long v8 = *a3;
  uint64_t v9 = *((void *)a3 + 2);
  v5[6] = 0;
  std::string v6 = (char *)operator new(0x20uLL);
  *(void *)std::string v6 = &unk_26C318F38;
  *(_OWORD *)(v6 + 8) = v8;
  *((void *)v6 + 3) = v9;
  a1[6] = v6;
  return a1;
}

void sub_210B8475C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<TranslatorStatus ()(MIL::IROperation const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::allocate_shared[abi:ne180100]<std::function<std::string ()(std::string const&)>,std::allocator<std::function<std::string ()(std::string const&)>>,ANEMachineIR::Utils::CheckedCounterNameGenerator,void>@<X0>(__n128 *a1@<X1>, void *a2@<X8>)
{
  char v4 = operator new(0x38uLL);
  __n128 result = std::__shared_ptr_emplace<std::function<std::string ()(std::string const&)>>::__shared_ptr_emplace[abi:ne180100]<ANEMachineIR::Utils::CheckedCounterNameGenerator,std::allocator<std::function<std::string ()(std::string const&)>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_210B84844(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<std::function<std::string ()(std::string const&)>>::__shared_ptr_emplace[abi:ne180100]<ANEMachineIR::Utils::CheckedCounterNameGenerator,std::allocator<std::function<std::string ()(std::string const&)>>,0>(void *a1, __n128 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C318FF8;
  std::allocator<std::function<std::string ()(std::string const&)>>::construct[abi:ne180100]<std::function<std::string ()(std::string const&)>,ANEMachineIR::Utils::CheckedCounterNameGenerator>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_210B848B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::function<std::string ()(std::string const&)>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C318FF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::function<std::string ()(std::string const&)>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C318FF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x21667BBD0);
}

void *std::__shared_ptr_emplace<std::function<std::string ()(std::string const&)>>::__on_zero_shared(uint64_t a1)
{
  return std::__function::__value_func<std::string ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(a1 + 24));
}

__n128 std::allocator<std::function<std::string ()(std::string const&)>>::construct[abi:ne180100]<std::function<std::string ()(std::string const&)>,ANEMachineIR::Utils::CheckedCounterNameGenerator>(uint64_t a1, uint64_t a2, __n128 *a3)
{
  __n128 v7 = *a3;
  unint64_t v4 = a3[1].n128_u64[0];
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  *(void *)(a2 + 24) = 0;
  unint64_t v5 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v5 = &unk_26C319048;
  __n128 result = v7;
  *(__n128 *)(v5 + 8) = v7;
  *((void *)v5 + 3) = v4;
  *(void *)(a2 + 24) = v5;
  return result;
}

void sub_210B849B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<ANEMachineIR::Utils::CheckedCounterNameGenerator,std::allocator<ANEMachineIR::Utils::CheckedCounterNameGenerator>,std::string ()(std::string const&)>::~__func(void *a1)
{
  *a1 = &unk_26C319048;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__function::__func<ANEMachineIR::Utils::CheckedCounterNameGenerator,std::allocator<ANEMachineIR::Utils::CheckedCounterNameGenerator>,std::string ()(std::string const&)>::~__func(void *a1)
{
  *a1 = &unk_26C319048;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x21667BBD0);
}

char *std::__function::__func<ANEMachineIR::Utils::CheckedCounterNameGenerator,std::allocator<ANEMachineIR::Utils::CheckedCounterNameGenerator>,std::string ()(std::string const&)>::__clone(uint64_t a1)
{
  __n128 result = (char *)operator new(0x20uLL);
  *(void *)__n128 result = &unk_26C319048;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<ANEMachineIR::Utils::CheckedCounterNameGenerator,std::allocator<ANEMachineIR::Utils::CheckedCounterNameGenerator>,std::string ()(std::string const&)>::__clone(void *result, void *a2)
{
  uint64_t v2 = result[1];
  *a2 = &unk_26C319048;
  a2[1] = v2;
  uint64_t v3 = result[3];
  a2[2] = result[2];
  a2[3] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<ANEMachineIR::Utils::CheckedCounterNameGenerator,std::allocator<ANEMachineIR::Utils::CheckedCounterNameGenerator>,std::string ()(std::string const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__function::__func<ANEMachineIR::Utils::CheckedCounterNameGenerator,std::allocator<ANEMachineIR::Utils::CheckedCounterNameGenerator>,std::string ()(std::string const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  operator delete(__p);
}

BOOL std::__function::__func<ANEMachineIR::Utils::CheckedCounterNameGenerator,std::allocator<ANEMachineIR::Utils::CheckedCounterNameGenerator>,std::string ()(std::string const&)>::operator()@<W0>(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  return ANEMachineIR::Utils::CheckedCounterNameGenerator::operator()((MIL::Builder::BlockBuilder **)(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<ANEMachineIR::Utils::CheckedCounterNameGenerator,std::allocator<ANEMachineIR::Utils::CheckedCounterNameGenerator>,std::string ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ANEMachineIR::Utils::CheckedCounterNameGenerator,std::allocator<ANEMachineIR::Utils::CheckedCounterNameGenerator>,std::string ()(std::string const&)>::target_type()
{
}

BOOL ANEMachineIR::Utils::CheckedCounterNameGenerator::operator()@<W0>(MIL::Builder::BlockBuilder **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  for (unint64_t i = 0; ; ++i)
  {
    ANEMachineIR::Utils::CheckedCounterNameGenerator::Candidate(a2, i, (std::string *)a3);
    BOOL result = ANEMachineIR::Utils::CheckedCounterNameGenerator::NameExists(a1, (unsigned __int8 *)a3);
    if (!result) {
      break;
    }
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
  }
  return result;
}

void sub_210B84C3C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void ANEMachineIR::Utils::CheckedCounterNameGenerator::Candidate(const void **a1@<X1>, unint64_t a2@<X2>, std::string *a3@<X8>)
{
  if (a2)
  {
    if (*((char *)a1 + 23) >= 0) {
      size_t v6 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      size_t v6 = (size_t)a1[1];
    }
    __n128 v7 = &v16;
    std::string::basic_string[abi:ne180100]((uint64_t)&v16, v6 + 1);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      __n128 v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
    }
    if (v6)
    {
      if (*((char *)a1 + 23) >= 0) {
        long long v8 = a1;
      }
      else {
        long long v8 = *a1;
      }
      memmove(v7, v8, v6);
    }
    *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 95;
    std::to_string(&__p, a2);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v11 = std::string::append(&v16, (const std::string::value_type *)p_p, size);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    a3->__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
  }
  else if (*((char *)a1 + 23) < 0)
  {
    uint64_t v13 = (const std::string::value_type *)*a1;
    std::string::size_type v14 = (std::string::size_type)a1[1];
    std::string::__init_copy_ctor_external(a3, v13, v14);
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a3->__r_.__value_.__r.__words[2] = (std::string::size_type)a1[2];
  }
}

void sub_210B84DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

BOOL ANEMachineIR::Utils::CheckedCounterNameGenerator::NameExists(MIL::Builder::BlockBuilder **a1, unsigned __int8 *a2)
{
  BOOL v4 = 1;
  if (!(*(uint64_t (**)(MIL::Builder::BlockBuilder *, unsigned __int8 *, uint64_t))(*(void *)*a1 + 24))(*a1, a2, 1))
  {
    MIL::Builder::BlockBuilder::GetOperations(&v24, a1[1]);
    uint64_t v5 = v24;
    uint64_t v6 = v25;
    if (v24 != v25)
    {
      while (1)
      {
        __n128 v7 = *(MIL::Builder::OperationBuilder **)v5;
        long long v8 = *(std::__shared_weak_count **)(v5 + 8);
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Outputuint64_t Name = (unsigned __int8 *)MIL::Builder::OperationBuilder::GetOutputName(v7);
        uint64_t v10 = OutputName[23];
        if ((v10 & 0x80u) == 0) {
          uint64_t v11 = OutputName[23];
        }
        else {
          uint64_t v11 = *((void *)OutputName + 1);
        }
        uint64_t v12 = a2[23];
        int v13 = (char)v12;
        if ((v12 & 0x80u) != 0) {
          uint64_t v12 = *((void *)a2 + 1);
        }
        if (v11 != v12) {
          break;
        }
        if (v13 >= 0) {
          std::string::size_type v14 = a2;
        }
        else {
          std::string::size_type v14 = *(unsigned __int8 **)a2;
        }
        if ((v10 & 0x80) != 0)
        {
          BOOL v4 = memcmp(*(const void **)OutputName, v14, *((void *)OutputName + 1)) == 0;
        }
        else
        {
          if (!OutputName[23])
          {
            BOOL v4 = 1;
            if (!v8) {
              goto LABEL_28;
            }
LABEL_27:
            std::__shared_weak_count::__release_shared[abi:ne180100](v8);
            goto LABEL_28;
          }
          uint64_t v15 = v10 - 1;
          do
          {
            int v17 = *OutputName++;
            int v16 = v17;
            int v19 = *v14++;
            int v18 = v19;
            BOOL v21 = v15-- != 0;
            BOOL v4 = v16 == v18;
          }
          while (v16 == v18 && v21);
        }
        if (v8) {
          goto LABEL_27;
        }
LABEL_28:
        v5 += 16;
        char v22 = v5 == v6 || v4;
        if (v22) {
          goto LABEL_36;
        }
      }
      BOOL v4 = 0;
      if (!v8) {
        goto LABEL_28;
      }
      goto LABEL_27;
    }
    BOOL v4 = 0;
LABEL_36:
    uint64_t v26 = (void **)&v24;
    std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100](&v26);
  }
  return v4;
}

void sub_210B84F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<MIL::IRParameter>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<std::string ()(std::string const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,0>(uint64_t a1)
{
  std::__function::__value_func<TranslatorStatus ()(MIL::IROperation const&)>::~__value_func[abi:ne180100]((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<std::string,std::array<unsigned char,5ul>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__shared_ptr_pointer<MIL::Builder::ProgramBuilder  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x21667BBD0);
}

uint64_t std::__shared_ptr_pointer<MIL::Builder::ProgramBuilder  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Builder::ProgramBuilder  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::unordered_map<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::unordered_map(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>> const&>(a1, a2, (long long *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_210B85270(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  __n128 v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    int v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (unint64_t i = *v13; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>>>::__construct_node_hash<std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  char v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *char v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  unint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_210B854F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>>>::__construct_node_hash<std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_210B85568(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<TranslatorStatus ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_210B855DC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<TranslatorStatus ()(MIL::IROperation const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint8x8_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint8x8_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    char v5 = *((unsigned char *)a3 + 23);
    if (v5 >= 0) {
      unint64_t v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      unint64_t v6 = a3[1];
    }
    if (v5 >= 0) {
      uint8x8_t v7 = (unsigned __int8 *)a3;
    }
    else {
      uint8x8_t v7 = *a3;
    }
    do
    {
      uint64_t v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0) {
        unint64_t v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      }
      else {
        unint64_t v9 = *(unsigned __int8 **)(v3 + 8);
      }
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(void *)(v3 + 8))) {
            return v3;
          }
        }
        else
        {
          if (!*(unsigned char *)(v3 + 23)) {
            return v3;
          }
          uint64_t v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10) {
              return v3;
            }
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    uint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_210B859B4(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  std::vector<int>::pointer begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  uint64_t value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      unint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        unint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_210B85CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  uint8x8_t v11 = this;
  long long v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      unint64_t v6 = (long long *)((char *)v6 + 24);
      long long v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_210B85DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::string,std::array<unsigned char,5ul>>>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  char v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint8x8_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint8x8_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void *std::vector<unsigned long long>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_210B85FB4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MilTranslator::OpTranslator::OpTranslator(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void MilTranslator::OpTranslator::InferTransposedShape()
{
  __assert_rtn("InferTransposedShape", "OpTranslator.cpp", 211, "shape.size() == positive_perm.size()");
}

uint64_t _GLOBAL__sub_I_OpTranslator_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(v0 + 3, "C");
  std::string::basic_string[abi:ne180100]<0>(qword_26AA45AD0, "NC");
  std::string::basic_string[abi:ne180100]<0>(qword_26AA45AE8, "NCW");
  std::string::basic_string[abi:ne180100]<0>(qword_26AA45B00, "NCHW");
  std::string::basic_string[abi:ne180100]<0>(qword_26AA45B18, "NCDHW");
  std::string::basic_string[abi:ne180100]<0>(v1 + 3, "C");
  std::string::basic_string[abi:ne180100]<0>(qword_26AA459F0, "NC");
  std::string::basic_string[abi:ne180100]<0>(qword_26AA45A08, "NWC");
  std::string::basic_string[abi:ne180100]<0>(qword_26AA45A20, "NHWC");
  std::string::basic_string[abi:ne180100]<0>(qword_26AA45A38, "NDHWC");
}

void sub_210B861B4(_Unwind_Exception *a1)
{
  _GLOBAL__sub_I_OpTranslator_cpp_cold_1(v1);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_OpTranslator_cpp_cold_1(void *a1)
{
  do
  {
    if (*((char *)a1 - 1) < 0) {
      operator delete((void *)*(a1 - 3));
    }
    a1 -= 3;
  }
}

void _GLOBAL__sub_I_OpTranslator_cpp_cold_2(void *a1)
{
  do
  {
    if (*((char *)a1 - 1) < 0) {
      operator delete((void *)*(a1 - 3));
    }
    a1 -= 3;
  }
}

void ANEMachineIR::H2021::Validators::ValidateBaseActivation(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

uint64_t ANEMachineIR::H2021::Validators::ValidateLinear@<X0>(MIL::IRObject *this@<X0>, uint64_t a2@<X8>)
{
  return ANEMachineIR::Validators::ValidateLinear(this, a2);
}

uint64_t ANEMachineIR::H2021::Validators::ValidateLrelu@<X0>(MIL::IRObject *this@<X0>, uint64_t a2@<X8>)
{
  return ANEMachineIR::Validators::ValidateLrelu(this, a2);
}

uint64_t ANEMachineIR::H2021::Validators::ValidateNePiecewiseV2@<X0>(MIL::IRObject *this@<X0>, uint64_t a2@<X8>)
{
  return ANEMachineIR::Validators::ValidateNePiecewiseV2(this, a2);
}

uint64_t ANEMachineIR::H2021::Validators::ValidateRelu(ANEMachineIR::H2021::Validators *this, const MIL::IROperation *a2)
{
  return ANEMachineIR::Validators::ValidateRelu(this, 1);
}

uint64_t ANEMachineIR::H2021::Validators::ValidateScaledActivation(ANEMachineIR::H2021::Validators *this, const MIL::IROperation *a2)
{
  return ANEMachineIR::Validators::ValidateRelu(this, 1);
}

uint64_t ANEMachineIR::H2021::Validators::ValidateSigmoid(ANEMachineIR::H2021::Validators *this, const MIL::IROperation *a2)
{
  return ANEMachineIR::Validators::ValidateRelu(this, 1);
}

uint64_t ANEMachineIR::H2021::Validators::ValidateSqrt(ANEMachineIR::H2021::Validators *this, const MIL::IROperation *a2)
{
  return ANEMachineIR::Validators::ValidateRelu(this, 1);
}

uint64_t ANEMachineIR::H2021::Validators::ValidateTanh(ANEMachineIR::H2021::Validators *this, const MIL::IROperation *a2)
{
  return ANEMachineIR::Validators::ValidateRelu(this, 1);
}

uint64_t ANEMachineIR::H2020::Validators::ValidateBasePeElementWiseBinary@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return MIL::ValidationResult::ValidationResult(a1);
}

uint64_t ANEMachineIR::H2020::Validators::ValidateBasePeElementWiseUnary@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return MIL::ValidationResult::ValidationResult(a1);
}

uint64_t ANEMachineIR::H2020::Validators::ValidateNeActivation@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return ANEMachineIR::Validators::ValidatePostRightShiftRange(a1);
}

void ANEMachineIR::H2020::Validators::ValidateNeAdd(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2020::Validators::ValidateNeMaximum(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

uint64_t ANEMachineIR::H2020::Validators::ValidateNeMinimum@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return ANEMachineIR::Validators::ValidatePostRightShiftRange(a1);
}

uint64_t ANEMachineIR::H2020::Validators::ValidateNeMul@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return ANEMachineIR::Validators::ValidatePostRightShiftRange(a1);
}

uint64_t ANEMachineIR::H2020::Validators::ValidateNeSquare@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return ANEMachineIR::Validators::ValidatePostRightShiftRange(a1);
}

void ANEMachineIR::H2020::Validators::ValidatePeAbs(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2020::Validators::ValidatePeSquare(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2020::Validators::ValidatePeAdd(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2020::Validators::ValidatePeAddAbs(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2020::Validators::ValidatePeAddMul(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2020::Validators::ValidatePeAddSquare(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2020::Validators::ValidatePeMaximum(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2020::Validators::ValidatePeMinimum(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2020::Validators::ValidatePeMul(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2020::Validators::ValidatePeEqual(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2020::Validators::ValidatePeNotEqual(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2020::Validators::ValidatePeLess(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2020::Validators::ValidatePeLessEqual(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2020::Validators::ValidatePeGreater(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2020::Validators::ValidatePeGreaterEqual(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2021::Opsets::aneflowh2021Opset::Register(ANEMachineIR::H2021::Opsets::aneflowh2021Opset *this, MIL::MILContext *a2)
{
  char v3 = 12;
  strcpy((char *)__p, "aneflowh2021");
  operator new();
}

void sub_210B8644C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, MIL::IROpset *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v18 = a11;
  a11 = 0;
  if (v18) {
    ANEMachineIR::H2021::Opsets::aneflowh2021Opset::Register();
  }
  std::unique_ptr<ANEMachineIR::H2021::Opsets::aneflowh2021Opset>::reset[abi:ne180100](&a10, 0);
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

const char *ANEMachineIR::H2021::Opsets::aneflowh2021Opset::GetOpsetName(ANEMachineIR::H2021::Opsets::aneflowh2021Opset *this)
{
  return "aneflowh2021";
}

void ANEMachineIR::H2021::Opsets::aneflowh2021Opset::aneflowh2021Opset(ANEMachineIR::H2021::Opsets::aneflowh2021Opset *this, MIL::MILContext *a2)
{
  ANEMachineIR::H2021::Opsets::aneflowh2021Opset::GetOps((uint64_t)v2);
}

void sub_210B86528(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::Opsets::aneflowh2021Opset::GetOps(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&v3, "base_ne_matmul");
  ANEMachineIR::H2021::BaseNeMatmul::Make();
}

void sub_210B878FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v17 = *(void *)(v15 - 40);
  *(void *)(v15 - 40) = 0;
  if (v17) {
    ANEMachineIR::H2021::Opsets::aneflowh2021Opset::GetOps();
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table(v14);
  _Unwind_Resume(a1);
}

const char *ANEMachineIR::H2021::Opsets::aneflowh2021Opset::GetName(ANEMachineIR::H2021::Opsets::aneflowh2021Opset *this)
{
  return "aneflowh2021";
}

void ANEMachineIR::H2021::Opsets::aneflowh2021Opset::~aneflowh2021Opset(ANEMachineIR::H2021::Opsets::aneflowh2021Opset *this)
{
  MIL::IROpset::~IROpset(this);
  JUMPOUT(0x21667BBD0);
}

MIL::IROpset *std::unique_ptr<ANEMachineIR::H2021::Opsets::aneflowh2021Opset>::reset[abi:ne180100](MIL::IROpset **a1, MIL::IROpset *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::IROpset::~IROpset(result);
    JUMPOUT(0x21667BBD0);
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[15],std::unique_ptr<MIL::IROperator>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[15],std::unique_ptr<MIL::IROperator>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_210B8821C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[15],std::unique_ptr<MIL::IROperator>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[15],std::unique_ptr<MIL::IROperator>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_210B882B8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[15],std::unique_ptr<MIL::IROperator>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IROperator const>::shared_ptr[abi:ne180100]<MIL::IROperator,std::default_delete<MIL::IROperator>,void>(v5 + 3, a3);
  return a1;
}

void sub_210B88308(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::shared_ptr<MIL::IROperator const>::shared_ptr[abi:ne180100]<MIL::IROperator,std::default_delete<MIL::IROperator>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  MIL::IROpset *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<MIL::IROperator  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x21667BBD0);
}

uint64_t std::__shared_ptr_pointer<MIL::IROperator  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IROperator  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[6],std::unique_ptr<MIL::IROperator>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[6],std::unique_ptr<MIL::IROperator>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_210B884B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[6],std::unique_ptr<MIL::IROperator>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[6],std::unique_ptr<MIL::IROperator>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_210B88550(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[6],std::unique_ptr<MIL::IROperator>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IROperator const>::shared_ptr[abi:ne180100]<MIL::IROperator,std::default_delete<MIL::IROperator>,void>(v5 + 3, a3);
  return a1;
}

void sub_210B885A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[7],std::unique_ptr<MIL::IROperator>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[7],std::unique_ptr<MIL::IROperator>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_210B8861C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[7],std::unique_ptr<MIL::IROperator>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[7],std::unique_ptr<MIL::IROperator>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_210B886B8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[7],std::unique_ptr<MIL::IROperator>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IROperator const>::shared_ptr[abi:ne180100]<MIL::IROperator,std::default_delete<MIL::IROperator>,void>(v5 + 3, a3);
  return a1;
}

void sub_210B88708(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[14],std::unique_ptr<MIL::IROperator>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[14],std::unique_ptr<MIL::IROperator>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_210B88784(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[14],std::unique_ptr<MIL::IROperator>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[14],std::unique_ptr<MIL::IROperator>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_210B88820(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[14],std::unique_ptr<MIL::IROperator>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IROperator const>::shared_ptr[abi:ne180100]<MIL::IROperator,std::default_delete<MIL::IROperator>,void>(v5 + 3, a3);
  return a1;
}

void sub_210B88870(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[12],std::unique_ptr<MIL::IROperator>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[12],std::unique_ptr<MIL::IROperator>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_210B888EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[12],std::unique_ptr<MIL::IROperator>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[12],std::unique_ptr<MIL::IROperator>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_210B88988(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[12],std::unique_ptr<MIL::IROperator>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IROperator const>::shared_ptr[abi:ne180100]<MIL::IROperator,std::default_delete<MIL::IROperator>,void>(v5 + 3, a3);
  return a1;
}

void sub_210B889D8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[16],std::unique_ptr<MIL::IROperator>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[16],std::unique_ptr<MIL::IROperator>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_210B88A54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[16],std::unique_ptr<MIL::IROperator>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[16],std::unique_ptr<MIL::IROperator>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_210B88AF0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[16],std::unique_ptr<MIL::IROperator>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IROperator const>::shared_ptr[abi:ne180100]<MIL::IROperator,std::default_delete<MIL::IROperator>,void>(v5 + 3, a3);
  return a1;
}

void sub_210B88B40(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[8],std::unique_ptr<MIL::IROperator>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[8],std::unique_ptr<MIL::IROperator>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_210B88BBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[8],std::unique_ptr<MIL::IROperator>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[8],std::unique_ptr<MIL::IROperator>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_210B88C58(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[8],std::unique_ptr<MIL::IROperator>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IROperator const>::shared_ptr[abi:ne180100]<MIL::IROperator,std::default_delete<MIL::IROperator>,void>(v5 + 3, a3);
  return a1;
}

void sub_210B88CA8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[10],std::unique_ptr<MIL::IROperator>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[10],std::unique_ptr<MIL::IROperator>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_210B88D24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[10],std::unique_ptr<MIL::IROperator>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[10],std::unique_ptr<MIL::IROperator>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_210B88DC0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[10],std::unique_ptr<MIL::IROperator>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IROperator const>::shared_ptr[abi:ne180100]<MIL::IROperator,std::default_delete<MIL::IROperator>,void>(v5 + 3, a3);
  return a1;
}

void sub_210B88E10(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[11],std::unique_ptr<MIL::IROperator>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[11],std::unique_ptr<MIL::IROperator>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_210B88E8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[11],std::unique_ptr<MIL::IROperator>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[11],std::unique_ptr<MIL::IROperator>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_210B88F28(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[11],std::unique_ptr<MIL::IROperator>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IROperator const>::shared_ptr[abi:ne180100]<MIL::IROperator,std::default_delete<MIL::IROperator>,void>(v5 + 3, a3);
  return a1;
}

void sub_210B88F78(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[9],std::unique_ptr<MIL::IROperator>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[9],std::unique_ptr<MIL::IROperator>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_210B88FF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[9],std::unique_ptr<MIL::IROperator>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[9],std::unique_ptr<MIL::IROperator>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_210B89090(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[9],std::unique_ptr<MIL::IROperator>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IROperator const>::shared_ptr[abi:ne180100]<MIL::IROperator,std::default_delete<MIL::IROperator>,void>(v5 + 3, a3);
  return a1;
}

void sub_210B890E0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[17],std::unique_ptr<MIL::IROperator>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[17],std::unique_ptr<MIL::IROperator>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_210B8915C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[17],std::unique_ptr<MIL::IROperator>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[17],std::unique_ptr<MIL::IROperator>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_210B891F8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[17],std::unique_ptr<MIL::IROperator>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IROperator const>::shared_ptr[abi:ne180100]<MIL::IROperator,std::default_delete<MIL::IROperator>,void>(v5 + 3, a3);
  return a1;
}

void sub_210B89248(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[13],std::unique_ptr<MIL::IROperator>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[13],std::unique_ptr<MIL::IROperator>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_210B892C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[13],std::unique_ptr<MIL::IROperator>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[13],std::unique_ptr<MIL::IROperator>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_210B89360(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[13],std::unique_ptr<MIL::IROperator>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IROperator const>::shared_ptr[abi:ne180100]<MIL::IROperator,std::default_delete<MIL::IROperator>,void>(v5 + 3, a3);
  return a1;
}

void sub_210B893B0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IROperator>>(void *a1, char *a2, uint64_t *a3)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[5],std::unique_ptr<MIL::IROperator>>((uint64_t)a1, a2, a3, (uint64_t)v7);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v7[0]);
  if (v5) {
    v7[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return inserted;
}

void sub_210B8942C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node<char const(&)[5],std::unique_ptr<MIL::IROperator>>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = operator new(0x38uLL);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v9 = 0;
  v9[1] = 0;
  std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[5],std::unique_ptr<MIL::IROperator>,0>(v9 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v9 + 2));
  v9[1] = result;
  return result;
}

void sub_210B894C8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[5],std::unique_ptr<MIL::IROperator>,0>(void *a1, char *a2, uint64_t *a3)
{
  char v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IROperator const>::shared_ptr[abi:ne180100]<MIL::IROperator,std::default_delete<MIL::IROperator>,void>(v5 + 3, a3);
  return a1;
}

void sub_210B89518(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ANEMachineIR::H2021::Opsets::aneflowh2021Opset::Register()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ANEMachineIR::H2021::Opsets::aneflowh2021Opset::GetOps()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ANEMachineIR::H2020::Validators::ValidateBaseNePool@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return MIL::ValidationResult::ValidationResult(a1);
}

void ANEMachineIR::H2020::Validators::ValidateNeAvgPool(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2020::Validators::ValidateNeMaxPool(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2020::Validators::ValidateNeMinPool(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

uint64_t ANEMachineIR::H2020::Validators::ValidateBasePePool@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return MIL::ValidationResult::ValidationResult(a1);
}

void ANEMachineIR::H2020::Validators::ValidatePeAvgPool(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2020::Validators::ValidatePeMaxPool(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2020::Validators::ValidatePeMinPool(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2021::BasePeElementWiseBinary::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210B8B0F4(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)&STACK[0x348]);
  unint64_t v3 = STACK[0x278];
  STACK[0x278] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x270]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x270]);
  }
  unint64_t v4 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v4;
    operator delete(v4);
  }
  char v5 = (void *)STACK[0x318];
  if (STACK[0x318])
  {
    STACK[0x320] = (unint64_t)v5;
    operator delete(v5);
  }
  unint64_t v6 = *(void **)(v1 - 112);
  if (v6)
  {
    *(void *)(v1 - 104) = v6;
    operator delete(v6);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x280], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x340], 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeAdd::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2021::Validators::ValidatePeAdd;
  v2[3] = v2;
  ANEMachineIR::H2021::BasePeElementWiseBinary::Make();
}

void sub_210B8BAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeAddAbs::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2021::Validators::ValidatePeAddAbs;
  v2[3] = v2;
  ANEMachineIR::H2021::BasePeElementWiseBinary::Make();
}

void sub_210B8BBC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeAddMul::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2021::Validators::ValidatePeAddMul;
  v2[3] = v2;
  ANEMachineIR::H2021::BasePeElementWiseBinary::Make();
}

void sub_210B8BCA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeAddSquare::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2021::Validators::ValidatePeAddSquare;
  v2[3] = v2;
  ANEMachineIR::H2021::BasePeElementWiseBinary::Make();
}

void sub_210B8BD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeEqual::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2021::Validators::ValidatePeEqual;
  v2[3] = v2;
  ANEMachineIR::H2021::BasePeElementWiseBinary::Make();
}

void sub_210B8BE68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeGreater::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2021::Validators::ValidatePeGreater;
  v2[3] = v2;
  ANEMachineIR::H2021::BasePeElementWiseBinary::Make();
}

void sub_210B8BF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeGreaterEqual::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2021::Validators::ValidatePeGreaterEqual;
  v2[3] = v2;
  ANEMachineIR::H2021::BasePeElementWiseBinary::Make();
}

void sub_210B8C028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeLess::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2021::Validators::ValidatePeLess;
  v2[3] = v2;
  ANEMachineIR::H2021::BasePeElementWiseBinary::Make();
}

void sub_210B8C108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeLessEqual::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2021::Validators::ValidatePeLessEqual;
  v2[3] = v2;
  ANEMachineIR::H2021::BasePeElementWiseBinary::Make();
}

void sub_210B8C1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeMaximum::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2021::Validators::ValidatePeMaximum;
  v2[3] = v2;
  ANEMachineIR::H2021::BasePeElementWiseBinary::Make();
}

void sub_210B8C2C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeMinimum::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2021::Validators::ValidatePeMinimum;
  v2[3] = v2;
  ANEMachineIR::H2021::BasePeElementWiseBinary::Make();
}

void sub_210B8C3A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeMul::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2021::Validators::ValidatePeMul;
  v2[3] = v2;
  ANEMachineIR::H2021::BasePeElementWiseBinary::Make();
}

void sub_210B8C488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeNotEqual::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2021::Validators::ValidatePeNotEqual;
  v2[3] = v2;
  ANEMachineIR::H2021::BasePeElementWiseBinary::Make();
}

void sub_210B8C568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::BasePeElementWiseUnary::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210B8DB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)&STACK[0x298]);
  if (a72) {
    (*(void (**)(uint64_t))(*(void *)a72 + 8))(a72);
  }
  if (a71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a71);
  }
  if (__p) {
    operator delete(__p);
  }
  uint64_t v74 = (void *)STACK[0x268];
  if (STACK[0x268])
  {
    STACK[0x270] = (unint64_t)v74;
    operator delete(v74);
  }
  unint64_t v75 = *(void **)(v72 - 112);
  if (v75)
  {
    *(void *)(v72 - 104) = v75;
    operator delete(v75);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x200], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x290], 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeAbs::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2021::Validators::ValidatePeAbs;
  v2[3] = v2;
  ANEMachineIR::H2021::BasePeElementWiseUnary::Make();
}

void sub_210B8E3C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::PeSquare::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2021::Validators::ValidatePeSquare;
  v2[3] = v2;
  ANEMachineIR::H2021::BasePeElementWiseUnary::Make();
}

void sub_210B8E4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::NeActivation::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210B8F1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,void **a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v58 - 112));
  if (a51) {
    (*(void (**)(uint64_t))(*(void *)a51 + 8))(a51);
  }
  if (a50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a50);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a57)
  {
    a58 = (uint64_t)a57;
    operator delete(a57);
  }
  uint64_t v60 = *(void **)(v58 - 248);
  if (v60)
  {
    *(void *)(v58 - 240) = v60;
    operator delete(v60);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a52, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v58 - 208), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::NeAdd::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210B90B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v68 - 112));
  if (a67) {
    (*(void (**)(uint64_t))(*(void *)a67 + 8))(a67);
  }
  if (a66) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a66);
  }
  if (__p) {
    operator delete(__p);
  }
  uint64_t v70 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v70;
    operator delete(v70);
  }
  uint64_t v71 = *(void **)(v68 - 248);
  if (v71)
  {
    *(void *)(v68 - 240) = v71;
    operator delete(v71);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a68, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v68 - 208), 0);
  _Unwind_Resume(a1);
}

void sub_210B911C0()
{
}

void ANEMachineIR::H2021::NeMaximum::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210B9225C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v68 - 112));
  if (a67) {
    (*(void (**)(uint64_t))(*(void *)a67 + 8))(a67);
  }
  if (a66) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a66);
  }
  if (__p) {
    operator delete(__p);
  }
  uint64_t v70 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v70;
    operator delete(v70);
  }
  uint64_t v71 = *(void **)(v68 - 248);
  if (v71)
  {
    *(void *)(v68 - 240) = v71;
    operator delete(v71);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a68, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v68 - 208), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::NeMinimum::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210B938A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v68 - 112));
  if (a67) {
    (*(void (**)(uint64_t))(*(void *)a67 + 8))(a67);
  }
  if (a66) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a66);
  }
  if (__p) {
    operator delete(__p);
  }
  uint64_t v70 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v70;
    operator delete(v70);
  }
  uint64_t v71 = *(void **)(v68 - 248);
  if (v71)
  {
    *(void *)(v68 - 240) = v71;
    operator delete(v71);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a68, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v68 - 208), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::NeMul::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210B9517C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v68 - 112));
  if (a67) {
    (*(void (**)(uint64_t))(*(void *)a67 + 8))(a67);
  }
  if (a66) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a66);
  }
  if (__p) {
    operator delete(__p);
  }
  uint64_t v70 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v70;
    operator delete(v70);
  }
  uint64_t v71 = *(void **)(v68 - 248);
  if (v71)
  {
    *(void *)(v68 - 240) = v71;
    operator delete(v71);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a68, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v68 - 208), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2021::NeSquare::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210B96760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,void **a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v64 - 112));
  if (a51) {
    (*(void (**)(uint64_t))(*(void *)a51 + 8))(a51);
  }
  if (a50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a50);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a63)
  {
    a64 = (uint64_t)a63;
    operator delete(a63);
  }
  uint64_t v66 = *(void **)(v64 - 248);
  if (v66)
  {
    *(void *)(v64 - 240) = v66;
    operator delete(v66);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a52, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v64 - 208), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::Validators::ValidateReshape(MIL::IROperation *this@<X0>, uint64_t a2@<X8>)
{
}

void ANEMachineIR::H2022::Validators::ValidateTranspose(MIL::IROperation *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2020::Opsets::aneflowh2020Opset::Register(ANEMachineIR::H2020::Opsets::aneflowh2020Opset *this, MIL::MILContext *a2)
{
  char v3 = 12;
  strcpy((char *)__p, "aneflowh2020");
  operator new();
}

void sub_210B96D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, MIL::IROpset *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v18 = a11;
  a11 = 0;
  if (v18) {
    ANEMachineIR::H2021::Opsets::aneflowh2021Opset::Register();
  }
  std::unique_ptr<ANEMachineIR::H2021::Opsets::aneflowh2021Opset>::reset[abi:ne180100](&a10, 0);
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

const char *ANEMachineIR::H2020::Opsets::aneflowh2020Opset::GetOpsetName(ANEMachineIR::H2020::Opsets::aneflowh2020Opset *this)
{
  return "aneflowh2020";
}

void ANEMachineIR::H2020::Opsets::aneflowh2020Opset::aneflowh2020Opset(ANEMachineIR::H2020::Opsets::aneflowh2020Opset *this, MIL::MILContext *a2)
{
  ANEMachineIR::H2020::Opsets::aneflowh2020Opset::GetOps((uint64_t)v2);
}

void sub_210B96E3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::Opsets::aneflowh2020Opset::GetOps(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&v3, "base_ne_matmul");
  ANEMachineIR::H2020::BaseNeMatmul::Make();
}

void sub_210B98210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v17 = *(void *)(v15 - 40);
  *(void *)(v15 - 40) = 0;
  if (v17) {
    ANEMachineIR::H2021::Opsets::aneflowh2021Opset::GetOps();
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::~__hash_table(v14);
  _Unwind_Resume(a1);
}

const char *ANEMachineIR::H2020::Opsets::aneflowh2020Opset::GetName(ANEMachineIR::H2020::Opsets::aneflowh2020Opset *this)
{
  return "aneflowh2020";
}

void ANEMachineIR::H2020::Opsets::aneflowh2020Opset::~aneflowh2020Opset(ANEMachineIR::H2020::Opsets::aneflowh2020Opset *this)
{
  MIL::IROpset::~IROpset(this);
  JUMPOUT(0x21667BBD0);
}

void ANEMachineIR::H2022::BasePeElementWiseBinary::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210B9A598(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)&STACK[0x348]);
  unint64_t v3 = STACK[0x278];
  STACK[0x278] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x270]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x270]);
  }
  unint64_t v4 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v4;
    operator delete(v4);
  }
  char v5 = (void *)STACK[0x318];
  if (STACK[0x318])
  {
    STACK[0x320] = (unint64_t)v5;
    operator delete(v5);
  }
  unint64_t v6 = *(void **)(v1 - 112);
  if (v6)
  {
    *(void *)(v1 - 104) = v6;
    operator delete(v6);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x280], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x340], 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeAdd::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2022::Validators::ValidatePeAdd;
  v2[3] = v2;
  ANEMachineIR::H2022::BasePeElementWiseBinary::Make();
}

void sub_210B9AF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeAddAbs::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2022::Validators::ValidatePeAddAbs;
  v2[3] = v2;
  ANEMachineIR::H2022::BasePeElementWiseBinary::Make();
}

void sub_210B9B06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeAddMul::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2022::Validators::ValidatePeAddMul;
  v2[3] = v2;
  ANEMachineIR::H2022::BasePeElementWiseBinary::Make();
}

void sub_210B9B14C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeAddSquare::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2022::Validators::ValidatePeAddSquare;
  v2[3] = v2;
  ANEMachineIR::H2022::BasePeElementWiseBinary::Make();
}

void sub_210B9B22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeEqual::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2022::Validators::ValidatePeEqual;
  v2[3] = v2;
  ANEMachineIR::H2022::BasePeElementWiseBinary::Make();
}

void sub_210B9B30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeGreater::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2022::Validators::ValidatePeGreater;
  v2[3] = v2;
  ANEMachineIR::H2022::BasePeElementWiseBinary::Make();
}

void sub_210B9B3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeGreaterEqual::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2022::Validators::ValidatePeGreaterEqual;
  v2[3] = v2;
  ANEMachineIR::H2022::BasePeElementWiseBinary::Make();
}

void sub_210B9B4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeLess::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2022::Validators::ValidatePeLess;
  v2[3] = v2;
  ANEMachineIR::H2022::BasePeElementWiseBinary::Make();
}

void sub_210B9B5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeLessEqual::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2022::Validators::ValidatePeLessEqual;
  v2[3] = v2;
  ANEMachineIR::H2022::BasePeElementWiseBinary::Make();
}

void sub_210B9B68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeMaximum::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2022::Validators::ValidatePeMaximum;
  v2[3] = v2;
  ANEMachineIR::H2022::BasePeElementWiseBinary::Make();
}

void sub_210B9B76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeMinimum::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2022::Validators::ValidatePeMinimum;
  v2[3] = v2;
  ANEMachineIR::H2022::BasePeElementWiseBinary::Make();
}

void sub_210B9B84C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeMul::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2022::Validators::ValidatePeMul;
  v2[3] = v2;
  ANEMachineIR::H2022::BasePeElementWiseBinary::Make();
}

void sub_210B9B92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeNotEqual::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2022::Validators::ValidatePeNotEqual;
  v2[3] = v2;
  ANEMachineIR::H2022::BasePeElementWiseBinary::Make();
}

void sub_210B9BA0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::BasePeElementWiseUnary::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210B9D01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)&STACK[0x298]);
  if (a72) {
    (*(void (**)(uint64_t))(*(void *)a72 + 8))(a72);
  }
  if (a71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a71);
  }
  if (__p) {
    operator delete(__p);
  }
  uint64_t v74 = (void *)STACK[0x268];
  if (STACK[0x268])
  {
    STACK[0x270] = (unint64_t)v74;
    operator delete(v74);
  }
  unint64_t v75 = *(void **)(v72 - 112);
  if (v75)
  {
    *(void *)(v72 - 104) = v75;
    operator delete(v75);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x200], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x290], 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeAbs::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2022::Validators::ValidatePeAbs;
  v2[3] = v2;
  ANEMachineIR::H2022::BasePeElementWiseUnary::Make();
}

void sub_210B9D86C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeSquare::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2022::Validators::ValidatePeSquare;
  v2[3] = v2;
  ANEMachineIR::H2022::BasePeElementWiseUnary::Make();
}

void sub_210B9D94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::NeActivation::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210B9E684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,void **a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v58 - 112));
  if (a51) {
    (*(void (**)(uint64_t))(*(void *)a51 + 8))(a51);
  }
  if (a50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a50);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a57)
  {
    a58 = (uint64_t)a57;
    operator delete(a57);
  }
  uint64_t v60 = *(void **)(v58 - 248);
  if (v60)
  {
    *(void *)(v58 - 240) = v60;
    operator delete(v60);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a52, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v58 - 208), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::NeAdd::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210B9FFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v68 - 112));
  if (a67) {
    (*(void (**)(uint64_t))(*(void *)a67 + 8))(a67);
  }
  if (a66) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a66);
  }
  if (__p) {
    operator delete(__p);
  }
  uint64_t v70 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v70;
    operator delete(v70);
  }
  uint64_t v71 = *(void **)(v68 - 248);
  if (v71)
  {
    *(void *)(v68 - 240) = v71;
    operator delete(v71);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a68, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v68 - 208), 0);
  _Unwind_Resume(a1);
}

void sub_210BA0664()
{
}

void ANEMachineIR::H2022::NeMaximum::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210BA1700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v68 - 112));
  if (a67) {
    (*(void (**)(uint64_t))(*(void *)a67 + 8))(a67);
  }
  if (a66) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a66);
  }
  if (__p) {
    operator delete(__p);
  }
  uint64_t v70 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v70;
    operator delete(v70);
  }
  uint64_t v71 = *(void **)(v68 - 248);
  if (v71)
  {
    *(void *)(v68 - 240) = v71;
    operator delete(v71);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a68, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v68 - 208), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::NeMinimum::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210BA2D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v68 - 112));
  if (a67) {
    (*(void (**)(uint64_t))(*(void *)a67 + 8))(a67);
  }
  if (a66) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a66);
  }
  if (__p) {
    operator delete(__p);
  }
  uint64_t v70 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v70;
    operator delete(v70);
  }
  uint64_t v71 = *(void **)(v68 - 248);
  if (v71)
  {
    *(void *)(v68 - 240) = v71;
    operator delete(v71);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a68, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v68 - 208), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::NeMul::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210BA4620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v68 - 112));
  if (a67) {
    (*(void (**)(uint64_t))(*(void *)a67 + 8))(a67);
  }
  if (a66) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a66);
  }
  if (__p) {
    operator delete(__p);
  }
  uint64_t v70 = (void *)STACK[0x240];
  if (STACK[0x240])
  {
    STACK[0x248] = (unint64_t)v70;
    operator delete(v70);
  }
  uint64_t v71 = *(void **)(v68 - 248);
  if (v71)
  {
    *(void *)(v68 - 240) = v71;
    operator delete(v71);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a68, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v68 - 208), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::NeSquare::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210BA5C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,void **a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v64 - 112));
  if (a51) {
    (*(void (**)(uint64_t))(*(void *)a51 + 8))(a51);
  }
  if (a50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a50);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a63)
  {
    a64 = (uint64_t)a63;
    operator delete(a63);
  }
  uint64_t v66 = *(void **)(v64 - 248);
  if (v66)
  {
    *(void *)(v64 - 240) = v66;
    operator delete(v66);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a52, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v64 - 208), 0);
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::TransposeCpu::Run(MIL::IROperation *a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  v150[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(MIL::IROperation *))(*(void *)a1 + 56))(a1);
  int v5 = *(char *)(v4 + 23);
  if (v5 < 0)
  {
    if (*(void *)(v4 + 8) != 9) {
      goto LABEL_10;
    }
    uint64_t v4 = *(void *)v4;
  }
  else if (v5 != 9)
  {
    goto LABEL_10;
  }
  if (*(void *)v4 != 0x736F70736E617274 || *(unsigned char *)(v4 + 8) != 101)
  {
LABEL_10:
    *(_DWORD *)a3 = 1;
    uint64_t v135 = a3 + 8;
    std::string::basic_string[abi:ne180100]<0>(&v147, "transpose");
    uint8x8_t v7 = std::string::insert(&v147, 0, "Expected '");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v148.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    unint64_t v9 = std::string::append(&v148, "' op. Got ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    *(void *)&__src[16] = *((void *)&v9->__r_.__value_.__l + 2);
    *(_OWORD *)int64x2_t __src = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    uint64_t v11 = (*(uint64_t (**)(MIL::IROperation *))(*(void *)a1 + 56))(a1);
    int v12 = *(char *)(v11 + 23);
    if (v12 >= 0) {
      unint64_t v13 = (const std::string::value_type *)v11;
    }
    else {
      unint64_t v13 = *(const std::string::value_type **)v11;
    }
    if (v12 >= 0) {
      std::string::size_type v14 = *(unsigned __int8 *)(v11 + 23);
    }
    else {
      std::string::size_type v14 = *(void *)(v11 + 8);
    }
    uint64_t v15 = std::string::append((std::string *)__src, v13, v14);
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    *(void *)(v135 + 16) = *((void *)&v15->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v135 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if ((__src[23] & 0x80000000) != 0) {
      operator delete(*(void **)__src);
    }
    if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v148.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0)
    {
      std::vector<int>::pointer v17 = (std::vector<int>::pointer)v147.__r_.__value_.__r.__words[0];
LABEL_22:
      operator delete(v17);
      return;
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(__src, "x");
  uint64_t InterpretedTensorValue = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)__src);
  uint64_t v19 = InterpretedTensorValue;
  if ((__src[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__src);
    if (v19)
    {
LABEL_26:
      uint64_t OutputType = MIL::IROperation::GetOutputType(a1);
      if (!(*(uint64_t (**)(uint64_t))(*(void *)OutputType + 24))(OutputType))
      {
        *(_DWORD *)a3 = 3;
        std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), "Output type is not a tensor.");
        return;
      }
      std::string::basic_string[abi:ne180100]<0>(__src, "perm");
      uint64_t ParameterValue = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
      MIL::IRValue::AsTensor(ParameterValue);
      uint64_t Data = MIL::IRTensorValue::GetDataView<int>();
      std::vector<int>::size_type __n = v22;
      if ((__src[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__src);
        std::vector<int>::size_type v22 = __n;
      }
      std::vector<int>::vector(&v143, v22);
      if (v143.__end_ != v143.__begin_)
      {
        unint64_t v23 = 0;
        do
        {
          uint64_t v24 = (int *)MIL::Util::Span<int const,18446744073709551615ul>::At(&Data, v23);
          std::vector<int>::pointer begin = v143.__begin_;
          v143.__begin_[v23++] = *v24;
        }
        while (v23 < v143.__end_ - begin);
      }
      uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 32))(v19);
      int v27 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 88))(v26);
      uint64_t v28 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
      uint64_t v29 = MIL::IRValueType::AsTensorType(v28);
      if (v27 != (*(unsigned int (**)(uint64_t))(*(void *)v29 + 88))(v29))
      {
        *(_DWORD *)a3 = 3;
        std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), "Expect same data type for input and output.");
        goto LABEL_150;
      }
      uint64_t v30 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
      uint64_t v31 = MIL::IRValueType::AsTensorType(v30);
      unint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 16))(v31);
      char v33 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(void *)v19 + 32))(v19);
      ANEMachineIR::Utils::GetStaticTensorShape(v33, v34, (uint64_t)&v141);
      std::string v35 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
      char v36 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v35);
      ANEMachineIR::Utils::GetStaticTensorShape(v36, v37, (uint64_t)&v139);
      if (v27 == 4)
      {
        uint64_t v51 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        uint64_t v52 = (v142 - (unsigned char *)v141) >> 3;
        if (v52 == (v140 - (unsigned char *)v139) >> 3)
        {
          if (v52 == v143.__end_ - v143.__begin_)
          {
            uint64_t v53 = v51;
            std::string v136 = 0;
            std::string v137 = 0;
            uint64_t v138 = 0;
            std::vector<MIL::Fp16>::resize((uint64_t)&v136, v32);
            memset(&v148, 0, sizeof(v148));
            std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v148, v141, (uint64_t)v142, (v142 - (unsigned char *)v141) >> 3);
            memset(&v147, 0, sizeof(v147));
            std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v147, v139, (uint64_t)v140, (v140 - (unsigned char *)v139) >> 3);
            switch(v52)
            {
              case 1:
                *(_OWORD *)int64x2_t __src = xmmword_210C68E78;
                *(_OWORD *)&__src[16] = unk_210C68E88;
                std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v148, v148.__r_.__value_.__r.__words[0] + 8, __src, (char *)v150, 4);
                *(_OWORD *)int64x2_t __src = xmmword_210C68E78;
                *(_OWORD *)&__src[16] = unk_210C68E88;
                std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v147, v147.__r_.__value_.__r.__words[0] + 8, __src, (char *)v150, 4);
                break;
              case 2:
                *(_OWORD *)int64x2_t __src = xmmword_210C68E60;
                *(void *)&__src[16] = 1;
                std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v148, v148.__r_.__value_.__r.__words[0] + 8, __src, &__src[24], 3);
                *(_OWORD *)int64x2_t __src = xmmword_210C68E60;
                *(void *)&__src[16] = 1;
                std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v147, v147.__r_.__value_.__r.__words[0] + 8, __src, &__src[24], 3);
                break;
              case 3:
                *(int64x2_t *)int64x2_t __src = vdupq_n_s64(1uLL);
                std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v148, v148.__r_.__value_.__r.__words[0] + 8, __src, &__src[16], 2);
                *(int64x2_t *)int64x2_t __src = vdupq_n_s64(1uLL);
                std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v147, v147.__r_.__value_.__r.__words[0] + 8, __src, &__src[16], 2);
                break;
              case 4:
                *(void *)int64x2_t __src = 1;
                std::vector<unsigned long long>::insert((uint64_t)&v148, (char *)(v148.__r_.__value_.__r.__words[0] + 8), __src);
                *(void *)int64x2_t __src = 1;
                std::vector<unsigned long long>::insert((uint64_t)&v147, (char *)(v147.__r_.__value_.__r.__words[0] + 8), __src);
                break;
              default:
                break;
            }
            char v131 = __p.__begin_;
            uint64_t v132 = *(void *)v148.__r_.__value_.__l.__data_;
            if (*(void *)v148.__r_.__value_.__l.__data_)
            {
              uint64_t v102 = 0;
              uint64_t v103 = 0;
              uint64_t v104 = *(void *)(v147.__r_.__value_.__r.__words[0] + 24);
              uint64_t v105 = *(void *)(v147.__r_.__value_.__r.__words[0] + 32);
              uint64_t v106 = *(void *)(v148.__r_.__value_.__r.__words[0] + 8);
              uint64_t v107 = *(void *)(v148.__r_.__value_.__r.__words[0] + 16);
              uint64_t v108 = *(void *)(v148.__r_.__value_.__r.__words[0] + 24);
              uint64_t v109 = *(void *)(v148.__r_.__value_.__r.__words[0] + 32);
              uint64_t v110 = __p.__begin_[3];
              uint64_t v111 = __p.__begin_[4];
              uint64_t v113 = __p.__begin_[1];
              uint64_t v112 = __p.__begin_[2];
              uint64_t v114 = *__p.__begin_;
              uint64_t v116 = *(void *)(v147.__r_.__value_.__r.__words[0] + 8);
              uint64_t v115 = *(void *)(v147.__r_.__value_.__r.__words[0] + 16);
              do
              {
                if (v106)
                {
                  for (uint64_t i = 0; i != v106; ++i)
                  {
                    if (v107)
                    {
                      for (uint64_t j = 0; j != v107; ++j)
                      {
                        if (v108)
                        {
                          uint64_t v119 = 0;
                          std::string v120 = v136;
                          do
                          {
                            if (v109)
                            {
                              for (uint64_t k = 0; k != v109; ++k)
                              {
                                *(void *)int64x2_t __src = v102;
                                *(void *)&__src[8] = i;
                                *(void *)&__src[16] = j;
                                *(void *)&__src[24] = v119;
                                v150[0] = k;
                                v120[*(void *)&__src[8 * v111]
                                   + (*(void *)&__src[8 * v110]
                                    + (*(void *)&__src[8 * v112]
                                     + (*(void *)&__src[8 * v113] + *(void *)&__src[8 * v114] * v116) * v115)
                                    * v104)
                                   * v105] = *(_WORD *)(v53 + 2 * v103 + 2 * k);
                              }
                              v103 += k;
                            }
                            ++v119;
                          }
                          while (v119 != v108);
                        }
                      }
                    }
                  }
                }
                ++v102;
              }
              while (v102 != v132);
            }
            __p.__end_ = v131;
            operator delete(v131);
            if (v147.__r_.__value_.__r.__words[0])
            {
              v147.__r_.__value_.__l.__size_ = v147.__r_.__value_.__r.__words[0];
              operator delete(v147.__r_.__value_.__l.__data_);
            }
            if (v148.__r_.__value_.__r.__words[0])
            {
              v148.__r_.__value_.__l.__size_ = v148.__r_.__value_.__r.__words[0];
              operator delete(v148.__r_.__value_.__l.__data_);
            }
            (*(void (**)(unsigned char *__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(__src, a1);
            char v122 = *(unsigned __int8 **)__src;
            if (*(void *)&__src[8] == *(void *)__src) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t v123 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v123);
            MIL::IRTensorValueType::MakeFloat16Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v122, (uint64_t *)&v148);
            std::string::size_type v124 = v148.__r_.__value_.__r.__words[0];
            v148.__r_.__value_.__r.__words[0] = 0;
            if (v124) {
              (*(void (**)(std::string::size_type))(*(void *)v124 + 8))(v124);
            }
            goto LABEL_144;
          }
          uint64_t v127 = "x_rank == perm.size()";
          int v128 = 68;
        }
        else
        {
          uint64_t v127 = "x_rank == o_shape.size()";
          int v128 = 67;
        }
        __assert_rtn("ComputeValue", "TransposeCpu.cpp", v128, v127);
      }
      if (v27 != 9)
      {
        if (v27 != 14)
        {
          *(_DWORD *)a3 = 3;
          std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), "Unimplemented input dtype");
LABEL_146:
          if (v139)
          {
            double v140 = v139;
            operator delete(v139);
          }
          if (v141)
          {
            int v142 = v141;
            operator delete(v141);
          }
LABEL_150:
          std::vector<int>::pointer v17 = v143.__begin_;
          if (v143.__begin_)
          {
            v143.__end_ = v143.__begin_;
            goto LABEL_22;
          }
          return;
        }
        uint64_t v38 = MIL::IRTensorValue::GetDataView<unsigned char>();
        long long v39 = v141;
        uint64_t v40 = (uint64_t)v142;
        uint64_t v41 = (v142 - (unsigned char *)v141) >> 3;
        if (v41 == (v140 - (unsigned char *)v139) >> 3)
        {
          if (v41 == v143.__end_ - v143.__begin_)
          {
            uint64_t v42 = v38;
            std::string v136 = 0;
            std::string v137 = 0;
            uint64_t v138 = 0;
            if (v32)
            {
              std::vector<unsigned char>::__append((unint64_t *)&v136, v32);
              long long v39 = v141;
              uint64_t v40 = (uint64_t)v142;
            }
            memset(&v148, 0, sizeof(v148));
            std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v148, v39, v40, (v142 - (unsigned char *)v141) >> 3);
            memset(&v147, 0, sizeof(v147));
            std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v147, v139, (uint64_t)v140, (v140 - (unsigned char *)v139) >> 3);
            switch(v41)
            {
              case 1:
                *(_OWORD *)int64x2_t __src = xmmword_210C68E78;
                *(_OWORD *)&__src[16] = unk_210C68E88;
                std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v148, v148.__r_.__value_.__r.__words[0] + 8, __src, (char *)v150, 4);
                *(_OWORD *)int64x2_t __src = xmmword_210C68E78;
                *(_OWORD *)&__src[16] = unk_210C68E88;
                std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v147, v147.__r_.__value_.__r.__words[0] + 8, __src, (char *)v150, 4);
                break;
              case 2:
                *(_OWORD *)int64x2_t __src = xmmword_210C68E60;
                *(void *)&__src[16] = 1;
                std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v148, v148.__r_.__value_.__r.__words[0] + 8, __src, &__src[24], 3);
                *(_OWORD *)int64x2_t __src = xmmword_210C68E60;
                *(void *)&__src[16] = 1;
                std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v147, v147.__r_.__value_.__r.__words[0] + 8, __src, &__src[24], 3);
                break;
              case 3:
                *(int64x2_t *)int64x2_t __src = vdupq_n_s64(1uLL);
                std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v148, v148.__r_.__value_.__r.__words[0] + 8, __src, &__src[16], 2);
                *(int64x2_t *)int64x2_t __src = vdupq_n_s64(1uLL);
                std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v147, v147.__r_.__value_.__r.__words[0] + 8, __src, &__src[16], 2);
                break;
              case 4:
                *(void *)int64x2_t __src = 1;
                std::vector<unsigned long long>::insert((uint64_t)&v148, (char *)(v148.__r_.__value_.__r.__words[0] + 8), __src);
                *(void *)int64x2_t __src = 1;
                std::vector<unsigned long long>::insert((uint64_t)&v147, (char *)(v147.__r_.__value_.__r.__words[0] + 8), __src);
                break;
              default:
                break;
            }
            uint64_t v78 = *(void *)v148.__r_.__value_.__l.__data_;
            float v79 = __p.__begin_;
            if (*(void *)v148.__r_.__value_.__l.__data_)
            {
              uint64_t v80 = 0;
              uint64_t v81 = 0;
              uint64_t v82 = *(void *)(v147.__r_.__value_.__r.__words[0] + 24);
              uint64_t v83 = *(void *)(v147.__r_.__value_.__r.__words[0] + 32);
              uint64_t v84 = *(void *)(v148.__r_.__value_.__r.__words[0] + 8);
              uint64_t v85 = *(void *)(v148.__r_.__value_.__r.__words[0] + 16);
              uint64_t v86 = *(void *)(v148.__r_.__value_.__r.__words[0] + 24);
              uint64_t v87 = *(void *)(v148.__r_.__value_.__r.__words[0] + 32);
              uint64_t v88 = __p.__begin_[3];
              uint64_t v89 = __p.__begin_[4];
              uint64_t v91 = __p.__begin_[1];
              uint64_t v90 = __p.__begin_[2];
              uint64_t v92 = *__p.__begin_;
              uint64_t v94 = *(void *)(v147.__r_.__value_.__r.__words[0] + 8);
              uint64_t v93 = *(void *)(v147.__r_.__value_.__r.__words[0] + 16);
              do
              {
                if (v84)
                {
                  for (uint64_t m = 0; m != v84; ++m)
                  {
                    if (v85)
                    {
                      for (uint64_t n = 0; n != v85; ++n)
                      {
                        if (v86)
                        {
                          for (iuint64_t i = 0; ii != v86; ++ii)
                          {
                            if (v87)
                            {
                              for (juint64_t j = 0; jj != v87; ++jj)
                              {
                                *(void *)int64x2_t __src = v80;
                                *(void *)&__src[8] = m;
                                *(void *)&__src[16] = n;
                                *(void *)&__src[24] = ii;
                                v150[0] = jj;
                                *((unsigned char *)v136
                                + *(void *)&__src[8 * v89]
                                + (*(void *)&__src[8 * v88]
                                 + (*(void *)&__src[8 * v90]
                                  + (*(void *)&__src[8 * v91] + *(void *)&__src[8 * v92] * v94) * v93)
                                 * v82)
                                * v83) = *(unsigned char *)(v42 + v81 + jj);
                              }
                              v81 += jj;
                            }
                          }
                        }
                      }
                    }
                  }
                }
                ++v80;
              }
              while (v80 != v78);
              float v79 = __p.__begin_;
            }
            if (v79)
            {
              __p.__end_ = v79;
              operator delete(v79);
            }
            if (v147.__r_.__value_.__r.__words[0])
            {
              v147.__r_.__value_.__l.__size_ = v147.__r_.__value_.__r.__words[0];
              operator delete(v147.__r_.__value_.__l.__data_);
            }
            if (v148.__r_.__value_.__r.__words[0])
            {
              v148.__r_.__value_.__l.__size_ = v148.__r_.__value_.__r.__words[0];
              operator delete(v148.__r_.__value_.__l.__data_);
            }
            (*(void (**)(unsigned char *__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(__src, a1);
            int v99 = *(unsigned __int8 **)__src;
            if (*(void *)&__src[8] == *(void *)__src) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t v100 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v100);
            MIL::IRTensorValueType::MakeUInt8Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v99, (uint64_t *)&v148);
            std::string::size_type v101 = v148.__r_.__value_.__r.__words[0];
            v148.__r_.__value_.__r.__words[0] = 0;
            if (v101) {
              (*(void (**)(std::string::size_type))(*(void *)v101 + 8))(v101);
            }
LABEL_144:
            v148.__r_.__value_.__r.__words[0] = (std::string::size_type)__src;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v148);
            *(_DWORD *)a3 = 0;
            std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), (char *)&unk_210C6BFE7);
            if (v136)
            {
              std::string v137 = v136;
              operator delete(v136);
            }
            goto LABEL_146;
          }
          char v129 = "x_rank == perm.size()";
          int v130 = 68;
        }
        else
        {
          char v129 = "x_rank == o_shape.size()";
          int v130 = 67;
        }
        __assert_rtn("ComputeValue", "TransposeCpu.cpp", v130, v129);
      }
      uint64_t v46 = MIL::IRTensorValue::GetDataView<signed char>();
      uint64_t v47 = v141;
      uint64_t v48 = (uint64_t)v142;
      uint64_t v49 = (v142 - (unsigned char *)v141) >> 3;
      if (v49 == (v140 - (unsigned char *)v139) >> 3)
      {
        if (v49 == v143.__end_ - v143.__begin_)
        {
          uint64_t v50 = v46;
          std::string v136 = 0;
          std::string v137 = 0;
          uint64_t v138 = 0;
          if (v32)
          {
            std::vector<unsigned char>::__append((unint64_t *)&v136, v32);
            uint64_t v47 = v141;
            uint64_t v48 = (uint64_t)v142;
          }
          memset(&v148, 0, sizeof(v148));
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v148, v47, v48, (v142 - (unsigned char *)v141) >> 3);
          memset(&v147, 0, sizeof(v147));
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v147, v139, (uint64_t)v140, (v140 - (unsigned char *)v139) >> 3);
          switch(v49)
          {
            case 1:
              *(_OWORD *)int64x2_t __src = xmmword_210C68E78;
              *(_OWORD *)&__src[16] = unk_210C68E88;
              std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v148, v148.__r_.__value_.__r.__words[0] + 8, __src, (char *)v150, 4);
              *(_OWORD *)int64x2_t __src = xmmword_210C68E78;
              *(_OWORD *)&__src[16] = unk_210C68E88;
              std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v147, v147.__r_.__value_.__r.__words[0] + 8, __src, (char *)v150, 4);
              break;
            case 2:
              *(_OWORD *)int64x2_t __src = xmmword_210C68E60;
              *(void *)&__src[16] = 1;
              std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v148, v148.__r_.__value_.__r.__words[0] + 8, __src, &__src[24], 3);
              *(_OWORD *)int64x2_t __src = xmmword_210C68E60;
              *(void *)&__src[16] = 1;
              std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v147, v147.__r_.__value_.__r.__words[0] + 8, __src, &__src[24], 3);
              break;
            case 3:
              *(int64x2_t *)int64x2_t __src = vdupq_n_s64(1uLL);
              std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v148, v148.__r_.__value_.__r.__words[0] + 8, __src, &__src[16], 2);
              *(int64x2_t *)int64x2_t __src = vdupq_n_s64(1uLL);
              std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v147, v147.__r_.__value_.__r.__words[0] + 8, __src, &__src[16], 2);
              break;
            case 4:
              *(void *)int64x2_t __src = 1;
              std::vector<unsigned long long>::insert((uint64_t)&v148, (char *)(v148.__r_.__value_.__r.__words[0] + 8), __src);
              *(void *)int64x2_t __src = 1;
              std::vector<unsigned long long>::insert((uint64_t)&v147, (char *)(v147.__r_.__value_.__r.__words[0] + 8), __src);
              break;
            default:
              break;
          }
          uint64_t v54 = *(void *)v148.__r_.__value_.__l.__data_;
          uint64_t v55 = __p.__begin_;
          if (*(void *)v148.__r_.__value_.__l.__data_)
          {
            uint64_t v56 = 0;
            uint64_t v57 = 0;
            uint64_t v58 = *(void *)(v147.__r_.__value_.__r.__words[0] + 24);
            uint64_t v59 = *(void *)(v147.__r_.__value_.__r.__words[0] + 32);
            uint64_t v60 = *(void *)(v148.__r_.__value_.__r.__words[0] + 8);
            uint64_t v61 = *(void *)(v148.__r_.__value_.__r.__words[0] + 16);
            uint64_t v62 = *(void *)(v148.__r_.__value_.__r.__words[0] + 24);
            uint64_t v63 = *(void *)(v148.__r_.__value_.__r.__words[0] + 32);
            uint64_t v64 = __p.__begin_[3];
            uint64_t v65 = __p.__begin_[4];
            uint64_t v67 = __p.__begin_[1];
            uint64_t v66 = __p.__begin_[2];
            uint64_t v68 = *__p.__begin_;
            uint64_t v70 = *(void *)(v147.__r_.__value_.__r.__words[0] + 8);
            uint64_t v69 = *(void *)(v147.__r_.__value_.__r.__words[0] + 16);
            do
            {
              if (v60)
              {
                for (kuint64_t k = 0; kk != v60; ++kk)
                {
                  if (v61)
                  {
                    for (muint64_t m = 0; mm != v61; ++mm)
                    {
                      if (v62)
                      {
                        for (uint64_t nn = 0; nn != v62; ++nn)
                        {
                          if (v63)
                          {
                            for (uint64_t i1 = 0; i1 != v63; ++i1)
                            {
                              *(void *)int64x2_t __src = v56;
                              *(void *)&__src[8] = kk;
                              *(void *)&__src[16] = mm;
                              *(void *)&__src[24] = nn;
                              v150[0] = i1;
                              *((unsigned char *)v136
                              + *(void *)&__src[8 * v65]
                              + (*(void *)&__src[8 * v64]
                               + (*(void *)&__src[8 * v66]
                                + (*(void *)&__src[8 * v67] + *(void *)&__src[8 * v68] * v70) * v69)
                               * v58)
                              * v59) = *(unsigned char *)(v50 + v57 + i1);
                            }
                            v57 += i1;
                          }
                        }
                      }
                    }
                  }
                }
              }
              ++v56;
            }
            while (v56 != v54);
            uint64_t v55 = __p.__begin_;
          }
          if (v55)
          {
            __p.__end_ = v55;
            operator delete(v55);
          }
          if (v147.__r_.__value_.__r.__words[0])
          {
            v147.__r_.__value_.__l.__size_ = v147.__r_.__value_.__r.__words[0];
            operator delete(v147.__r_.__value_.__l.__data_);
          }
          if (v148.__r_.__value_.__r.__words[0])
          {
            v148.__r_.__value_.__l.__size_ = v148.__r_.__value_.__r.__words[0];
            operator delete(v148.__r_.__value_.__l.__data_);
          }
          (*(void (**)(unsigned char *__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(__src, a1);
          unint64_t v75 = *(unsigned __int8 **)__src;
          if (*(void *)&__src[8] == *(void *)__src) {
            std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
          }
          int v76 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
          MIL::IRValueType::AsTensorType(v76);
          MIL::IRTensorValueType::MakeInt8Value();
          MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v75, (uint64_t *)&v148);
          std::string::size_type v77 = v148.__r_.__value_.__r.__words[0];
          v148.__r_.__value_.__r.__words[0] = 0;
          if (v77) {
            (*(void (**)(std::string::size_type))(*(void *)v77 + 8))(v77);
          }
          goto LABEL_144;
        }
        uint64_t v125 = "x_rank == perm.size()";
        int v126 = 68;
      }
      else
      {
        uint64_t v125 = "x_rank == o_shape.size()";
        int v126 = 67;
      }
      __assert_rtn("ComputeValue", "TransposeCpu.cpp", v126, v125);
    }
  }
  else if (InterpretedTensorValue)
  {
    goto LABEL_26;
  }
  *(_DWORD *)a3 = 2;
  int v43 = (std::string *)std::string::basic_string[abi:ne180100]<0>(__src, "x");
  char v44 = std::string::insert(v43, 0, "No value for ");
  long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  *(void *)(a3 + 24) = *((void *)&v44->__r_.__value_.__l + 2);
  *(_OWORD *)(a3 + 8) = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  if ((__src[23] & 0x80000000) != 0)
  {
    std::vector<int>::pointer v17 = *(std::vector<int>::pointer *)__src;
    goto LABEL_22;
  }
}

void sub_210BA72A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (__p) {
    operator delete(__p);
  }
  if (a32) {
    operator delete(a32);
  }
  long long v39 = *(void **)(v37 - 176);
  if (v39)
  {
    *(void *)(v37 - 168) = v39;
    operator delete(v39);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  if (a21) {
    operator delete(a21);
  }
  if (a24) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::TransposeCpu::~TransposeCpu(MIL::ANEMachineIR::Interpreter::TransposeCpu *this)
{
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ConvertPermToRank5(void *a1@<X0>, std::vector<int> *a2@<X8>)
{
  v17[1] = *MEMORY[0x263EF8340];
  int v5 = (_DWORD *)*a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = v4 - *a1;
  unint64_t v7 = v6 >> 2;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  a2->__begin_ = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a2, v5, v4, v6 >> 2);
  for (uint64_t i = (_DWORD *)*a1; i != (_DWORD *)a1[1]; ++i)
  {
    if ((*i & 0x80000000) != 0)
    {
      ANEMachineIR::Utils::InferPositiveAxes((uint64_t)a1, &v16);
      std::vector<int>::pointer begin = a2->__begin_;
      if (a2->__begin_)
      {
        a2->__end_ = begin;
        operator delete(begin);
        a2->__begin_ = 0;
        a2->__end_ = 0;
        a2->__end_cap_.__value_ = 0;
      }
      *(_OWORD *)&a2->__begin_ = v16;
      a2->__end_cap_.__value_ = (int *)v17[0];
      break;
    }
  }
  if ((_DWORD *)v4 != v5)
  {
    std::vector<int>::pointer v10 = a2->__begin_;
    if (v7 <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = v6 >> 2;
    }
    do
    {
      if (*v10 >= 1) {
        std::string *v10 = *v10 - ((unint64_t)v6 >> 2) + 5;
      }
      ++v10;
      --v11;
    }
    while (v11);
  }
  switch(v7)
  {
    case 1uLL:
      uint64_t v12 = (uint64_t)(a2->__begin_ + 1);
      long long v16 = xmmword_210C68E00;
      std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a2, v12, (char *)&v16, (char *)v17, 4);
      break;
    case 2uLL:
      uint64_t v15 = (uint64_t)(a2->__begin_ + 1);
      *(void *)&long long v16 = 0x200000001;
      DWORD2(v16) = 3;
      std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a2, v15, (char *)&v16, (char *)&v16 + 12, 3);
      break;
    case 3uLL:
      uint64_t v13 = (uint64_t)(a2->__begin_ + 1);
      *(void *)&long long v16 = 0x200000001;
      std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a2, v13, (char *)&v16, (char *)&v16 + 8, 2);
      break;
    case 4uLL:
      uint64_t v14 = (uint64_t)(a2->__begin_ + 1);
      LODWORD(v16) = 1;
      std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(a2, v14, (char *)&v16, (char *)&v16 + 4, 1);
      break;
    default:
      return;
  }
}

void sub_210BA7730(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int *std::vector<int>::__insert_with_size[abi:ne180100]<int const*,int const*>(std::vector<int> *a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  int v5 = (int *)__dst;
  if (a5 < 1) {
    return v5;
  }
  unint64_t v7 = (int *)__src;
  uint64_t value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<int> *)&a1->__end_cap_;
  std::vector<int>::pointer v10 = value;
  unint64_t v12 = *((void *)p_end_cap - 1);
  if (a5 > (uint64_t)((uint64_t)value - v12) >> 2)
  {
    std::vector<int>::pointer begin = a1->__begin_;
    unint64_t v14 = a5 + ((uint64_t)(v12 - (unint64_t)a1->__begin_) >> 2);
    if (v14 >> 62) {
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)begin) >> 2;
    uint64_t v16 = (char *)v10 - (char *)begin;
    if (v16 >> 1 > v14) {
      unint64_t v14 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v17) {
      uint64_t v18 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)p_end_cap, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v28 = &v18[v15];
    __v.__first_ = v18;
    __v.__begin_ = v28;
    __v.__end_cap_.__value_ = &v18[v17];
    uint64_t v29 = 4 * a5;
    uint64_t v30 = &v28[a5];
    do
    {
      int v31 = *v7++;
      *v28++ = v31;
      v29 -= 4;
    }
    while (v29);
    __v.__end_ = v30;
    int v5 = std::vector<int>::__swap_out_circular_buffer(a1, &__v, v5);
    if (__v.__end_ != __v.__begin_) {
      __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
    }
                                                     + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_) {
      operator delete(__v.__first_);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    size_t v21 = &__src[4 * a5];
    unint64_t v23 = (int *)*((void *)p_end_cap - 1);
LABEL_17:
    uint64_t v24 = &v5[a5];
    uint64_t v25 = &v23[-a5];
    uint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      uint64_t v26 = v23;
      do
      {
        int v27 = *v25++;
        *v26++ = v27;
      }
      while ((unint64_t)v25 < v12);
    }
    a1->__end_ = v26;
    if (v23 != v24) {
      memmove(&v23[-(v23 - v24)], v5, (char *)v23 - (char *)v24);
    }
    if (v21 != (char *)v7) {
      memmove(v5, v7, v21 - (char *)v7);
    }
    return v5;
  }
  size_t v21 = &__src[4 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*((void **)p_end_cap - 1), &__src[4 * v20], a4 - v21);
  }
  unint64_t v23 = (int *)(v12 + v22);
  a1->__end_ = (std::vector<int>::pointer)(v12 + v22);
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_210BA7944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::vector<int>::pointer std::vector<int>::__swap_out_circular_buffer(std::vector<int> *this, std::__split_buffer<int> *__v, std::vector<int>::pointer __p)
{
  std::vector<int>::pointer begin = __v->__begin_;
  std::vector<int>::pointer v6 = this->__begin_;
  unint64_t v7 = begin;
  if (this->__begin_ != __p)
  {
    std::vector<int>::pointer v8 = __p;
    unint64_t v7 = __v->__begin_;
    do
    {
      int v9 = *--v8;
      *--unint64_t v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  std::__split_buffer<int>::pointer v11 = __v->__end_;
  int64_t v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    unint64_t v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<int>::pointer)((char *)v11 + v12);
  uint64_t v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  unint64_t v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  uint64_t value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

uint64_t MIL::ANEMachineIR::Interpreter::TransposeCpu::Run(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void ANEMachineIR::H2022::Validators::ValidateConst(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2022::Reshape::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210BA85B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *__p,uint64_t a56,uint64_t a57,uint64_t a58,std::__shared_weak_count *a59,uint64_t a60,void **a61,void *a62,uint64_t a63)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v63 - 112));
  if (a60) {
    (*(void (**)(uint64_t))(*(void *)a60 + 8))(a60);
  }
  if (a59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a59);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  uint64_t v65 = *(void **)(v63 - 248);
  if (v65)
  {
    *(void *)(v63 - 240) = v65;
    operator delete(v65);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a61, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v63 - 208), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::Transpose::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210BA97B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,void **a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v60 - 112));
  if (a55) {
    (*(void (**)(uint64_t))(*(void *)a55 + 8))(a55);
  }
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a59)
  {
    a60 = (uint64_t)a59;
    operator delete(a59);
  }
  uint64_t v62 = *(void **)(v60 - 160);
  if (v62)
  {
    *(void *)(v60 - 152) = v62;
    operator delete(v62);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100](&a56, 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v60 - 232), 0);
  _Unwind_Resume(a1);
}

uint64_t ANEMachineIR::H2022::Reshape::Make(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void ANEMachineIR::H2020::Validators::ValidateBaseActivation(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

uint64_t ANEMachineIR::H2020::Validators::ValidateLinear@<X0>(MIL::IRObject *this@<X0>, uint64_t a2@<X8>)
{
  return ANEMachineIR::Validators::ValidateLinear(this, a2);
}

uint64_t ANEMachineIR::H2020::Validators::ValidateLrelu@<X0>(MIL::IRObject *this@<X0>, uint64_t a2@<X8>)
{
  return ANEMachineIR::Validators::ValidateLrelu(this, a2);
}

uint64_t ANEMachineIR::H2020::Validators::ValidateNePiecewiseV2@<X0>(MIL::IRObject *this@<X0>, uint64_t a2@<X8>)
{
  return ANEMachineIR::Validators::ValidateNePiecewiseV2(this, a2);
}

uint64_t ANEMachineIR::H2020::Validators::ValidateRelu(ANEMachineIR::H2020::Validators *this, const MIL::IROperation *a2)
{
  return ANEMachineIR::Validators::ValidateRelu(this, 0);
}

uint64_t ANEMachineIR::H2020::Validators::ValidateScaledActivation(ANEMachineIR::H2020::Validators *this, const MIL::IROperation *a2)
{
  return ANEMachineIR::Validators::ValidateRelu(this, 0);
}

uint64_t ANEMachineIR::H2020::Validators::ValidateSigmoid(ANEMachineIR::H2020::Validators *this, const MIL::IROperation *a2)
{
  return ANEMachineIR::Validators::ValidateRelu(this, 0);
}

uint64_t ANEMachineIR::H2020::Validators::ValidateSqrt(ANEMachineIR::H2020::Validators *this, const MIL::IROperation *a2)
{
  return ANEMachineIR::Validators::ValidateRelu(this, 0);
}

uint64_t ANEMachineIR::H2020::Validators::ValidateTanh(ANEMachineIR::H2020::Validators *this, const MIL::IROperation *a2)
{
  return ANEMachineIR::Validators::ValidateRelu(this, 0);
}

void ANEMachineIR::Validators::ParseNeBatchMatmulParamValues(MIL::IRObject *a1@<X0>, uint64_t a2@<X1>, MIL::ValidationResult *a3@<X8>)
{
  __int16 v55 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v52, "acc_left_shift");
  MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<signed char>(a1, &v55, (unsigned char *)&v55 + 1, a3);
  if (SHIBYTE(v54) < 0) {
    operator delete(v52);
  }
  if (!MIL::ValidationResult::IsGood(a3)) {
    return;
  }
  MEMORY[0x21667B360](a3);
  *(_WORD *)a2 = HIBYTE(v55) | 0x100;
  __int16 v51 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v52, "post_right_shift");
  MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<signed char>(a1, &v51, (unsigned char *)&v51 + 1, a3);
  if (SHIBYTE(v54) < 0) {
    operator delete(v52);
  }
  if (!MIL::ValidationResult::IsGood(a3)) {
    return;
  }
  MEMORY[0x21667B360](a3);
  *(_WORD *)(a2 + 2) = HIBYTE(v51) | 0x100;
  std::string::basic_string[abi:ne180100]<0>(&v52, "post_scale");
  uint64_t ParameterValue = (MIL::Fp16 *)MIL::IROperation::TryGetParameterValue();
  unint64_t v7 = ParameterValue;
  if (SHIBYTE(v54) < 0)
  {
    operator delete(v52);
    if (!v7) {
      goto LABEL_34;
    }
  }
  else if (!ParameterValue)
  {
LABEL_34:
    LOWORD(__p) = MIL::Fp16::FromFloat(ParameterValue, 1.0);
    v47.__r_.__value_.__s.__data_[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&v52, "post_scale");
    MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<MIL::Fp16>(a1, &v47, &__p, a3);
    if (SHIBYTE(v54) < 0) {
      operator delete(v52);
    }
    if (MIL::ValidationResult::IsGood(a3))
    {
      MEMORY[0x21667B360](a3);
      __int16 v22 = (__int16)__p;
      if (!*(unsigned char *)(a2 + 6)) {
        *(unsigned char *)(a2 + 6) = 1;
      }
      *(_WORD *)(a2 + 4) = v22;
      if (*(unsigned char *)(a2 + 32))
      {
        unint64_t v23 = *(void **)(a2 + 8);
        if (v23)
        {
          *(void *)(a2 + 16) = v23;
          operator delete(v23);
        }
        *(unsigned char *)(a2 + 32) = 0;
      }
LABEL_43:
      MIL::ValidationResult::ValidationResult(a3);
      return;
    }
    return;
  }
  uint64_t ParameterValue = (MIL::Fp16 *)(*(uint64_t (**)(MIL::Fp16 *))(*(void *)v7 + 40))(v7);
  if (!ParameterValue) {
    goto LABEL_34;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "post_scale");
  uint64_t ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  uint64_t v9 = MIL::IRValueType::AsTensorType(ParameterType);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 96))(v9);
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v52, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 3);
  if (SHIBYTE(v50) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&v47, "y");
  std::__split_buffer<int>::pointer v11 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  uint64_t v12 = MIL::IRValueType::AsTensorType(v11);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 96))(v12);
  std::vector<int> __p = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v13, *(void *)(v13 + 8), (uint64_t)(*(void *)(v13 + 8) - *(void *)v13) >> 3);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (v53 - (char *)v52 == 8)
  {
    if ((unint64_t)(v49 - (unsigned char *)__p) <= 8) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    if (*v52 == *((void *)__p + 1))
    {
      std::string::basic_string[abi:ne180100]<0>(&v47, "post_scale");
      uint64_t v24 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
      MIL::IRValue::AsTensor(v24);
      v42.__r_.__value_.__r.__words[0] = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
      v42.__r_.__value_.__l.__size_ = v25;
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v47.__r_.__value_.__l.__data_);
      }
      memset(&v47, 0, sizeof(v47));
      uint64_t v26 = (void **)(a2 + 8);
      std::optional<std::vector<MIL::Fp16>>::operator=[abi:ne180100]<std::vector<MIL::Fp16>,void>(a2 + 8, (__n128 *)&v47);
      if (v47.__r_.__value_.__r.__words[0])
      {
        v47.__r_.__value_.__l.__size_ = v47.__r_.__value_.__r.__words[0];
        operator delete(v47.__r_.__value_.__l.__data_);
      }
      std::vector<MIL::Fp16>::reserve((void **)(a2 + 8), v42.__r_.__value_.__l.__size_);
      if (v42.__r_.__value_.__l.__size_)
      {
        std::string::size_type v27 = 0;
        do
        {
          uint64_t v28 = (_WORD *)MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::At(&v42, v27);
          uint64_t v29 = v28;
          int v31 = *(char **)(a2 + 16);
          unint64_t v30 = *(void *)(a2 + 24);
          if ((unint64_t)v31 >= v30)
          {
            char v33 = (char *)*v26;
            uint64_t v34 = v31 - (unsigned char *)*v26;
            if (v34 <= -3) {
              std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v35 = v34 >> 1;
            unint64_t v36 = v30 - (void)v33;
            if (v36 <= (v34 >> 1) + 1) {
              unint64_t v37 = v35 + 1;
            }
            else {
              unint64_t v37 = v36;
            }
            if (v36 >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v38 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v38 = v37;
            }
            if (v38)
            {
              long long v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>(a2 + 24, v38);
              char v33 = *(char **)(a2 + 8);
              int v31 = *(char **)(a2 + 16);
            }
            else
            {
              long long v39 = 0;
            }
            uint64_t v40 = &v39[2 * v35];
            *(_WORD *)uint64_t v40 = *v29;
            unint64_t v32 = v40 + 2;
            while (v31 != v33)
            {
              __int16 v41 = *((_WORD *)v31 - 1);
              v31 -= 2;
              *((_WORD *)v40 - 1) = v41;
              v40 -= 2;
            }
            *(void *)(a2 + 8) = v40;
            *(void *)(a2 + 16) = v32;
            *(void *)(a2 + 24) = &v39[2 * v38];
            if (v33) {
              operator delete(v33);
            }
          }
          else
          {
            *(_WORD *)int v31 = *v28;
            unint64_t v32 = v31 + 2;
          }
          *(void *)(a2 + 16) = v32;
          ++v27;
        }
        while (v27 < v42.__r_.__value_.__l.__size_);
      }
      if (*(unsigned char *)(a2 + 6)) {
        *(unsigned char *)(a2 + 6) = 0;
      }
      if (__p)
      {
        uint64_t v49 = __p;
        operator delete(__p);
      }
      if (v52)
      {
        uint64_t v53 = (char *)v52;
        operator delete(v52);
      }
      goto LABEL_43;
    }
  }
  uint64_t LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
  uint64_t v15 = (std::__shared_weak_count *)LocationPtr[1];
  uint64_t v45 = *LocationPtr;
  uint64_t v46 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((unint64_t)(v49 - (unsigned char *)__p) <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v16 = MIL::IRDimension::AsConstant(*((MIL::IRDimension **)__p + 1));
  unint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 48))(v16);
  std::to_string(&v42, v17);
  uint64_t v18 = std::string::insert(&v42, 0, "Post scale tensor must be of shape (");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  uint64_t v20 = std::string::append(&v47, ",)");
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  std::string::size_type v44 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)int v43 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x21667B340](a3, &v45, 319, v43);
  if (SHIBYTE(v44) < 0) {
    operator delete(v43[0]);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (__p)
  {
    uint64_t v49 = __p;
    operator delete(__p);
  }
  if (v52)
  {
    uint64_t v53 = (char *)v52;
    operator delete(v52);
  }
}

void sub_210BAA2E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (__p) {
    operator delete(__p);
  }
  long long v39 = *(void **)(v37 - 112);
  if (v39)
  {
    *(void *)(v37 - 104) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<std::vector<MIL::Fp16>>::operator=[abi:ne180100]<std::vector<MIL::Fp16>,void>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    std::vector<MIL::Fp16>::__move_assign(a1, a2);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

void MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<MIL::Fp16>(MIL::Fp16 *a1@<X0>, unsigned char *a2@<X2>, _WORD *a3@<X3>, MIL::ValidationResult *a4@<X8>)
{
  MIL::Fp16::FromFloat(a1, 0.0);
  uint64_t ParameterValue = MIL::IROperation::TryGetParameterValue();
  if (!ParameterValue)
  {
    *a2 = 0;
    goto LABEL_25;
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)ParameterValue + 40))(ParameterValue))
  {
    uint64_t v9 = (_WORD *)MEMORY[0x21667B820]();
    if (v9)
    {
      *a3 = *v9;
      *a2 = 1;
LABEL_25:
      MIL::ValidationResult::ValidationResult(a4);
      return;
    }
  }
  *a2 = 0;
  uint64_t LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
  std::__split_buffer<int>::pointer v11 = (std::__shared_weak_count *)LocationPtr[1];
  uint64_t v27 = *LocationPtr;
  uint64_t v28 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::operator+<char>();
  uint64_t v12 = std::string::append(&v22, "\" in operation \"");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  uint64_t v14 = (*(uint64_t (**)(MIL::Fp16 *))(*(void *)a1 + 56))(a1);
  int v15 = *(char *)(v14 + 23);
  if (v15 >= 0) {
    uint64_t v16 = (const std::string::value_type *)v14;
  }
  else {
    uint64_t v16 = *(const std::string::value_type **)v14;
  }
  if (v15 >= 0) {
    std::string::size_type v17 = *(unsigned __int8 *)(v14 + 23);
  }
  else {
    std::string::size_type v17 = *(void *)(v14 + 8);
  }
  uint64_t v18 = std::string::append(&v23, v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  uint64_t v20 = std::string::append(&v24, "\".");
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  std::string::size_type v26 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::vector<int> __p = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x21667B340](a4, &v27, 304, __p);
  if (SHIBYTE(v26) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
}

void sub_210BAA68C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  uint64_t v37 = *(std::__shared_weak_count **)(v35 - 56);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  _Unwind_Resume(exception_object);
}

void ANEMachineIR::Validators::ParseNeMatmulParamValues(ANEMachineIR::Validators *this@<X0>, const MIL::IROperation *a2@<X1>, MIL::ValidationResult *a3@<X8>)
{
  char v56 = 0;
  LOBYTE(v57[0]) = 0;
  char v58 = 0;
  LOBYTE(v59) = 0;
  char v60 = 0;
  *(_DWORD *)__int16 v55 = 0;
  v55[4] = 0;
  ANEMachineIR::Validators::ParseNeBatchMatmulParamValues(this, (uint64_t)v55, a3);
  if (!MIL::ValidationResult::IsGood(a3)) {
    goto LABEL_39;
  }
  MEMORY[0x21667B360](a3);
  *(_WORD *)a2 = *(_WORD *)v55;
  *(_DWORD *)((char *)a2 + 2) = *(_DWORD *)&v55[2];
  *((unsigned char *)a2 + 6) = v56;
  std::__optional_storage_base<std::vector<MIL::Fp16>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::vector<MIL::Fp16>,false> const&>((uint64_t)a2 + 8, (uint64_t)v57);
  *((_DWORD *)a2 + 10) = v59;
  *((unsigned char *)a2 + 44) = v60;
  std::string::basic_string[abi:ne180100]<0>(&__p, "bias");
  uint64_t ParameterValue = (MIL::Fp16 *)MIL::IROperation::TryGetParameterValue();
  std::vector<int>::pointer v8 = ParameterValue;
  if (SHIBYTE(v54) < 0)
  {
    operator delete(__p);
    if (!v8) {
      goto LABEL_29;
    }
  }
  else if (!ParameterValue)
  {
LABEL_29:
    LOWORD(v49) = MIL::Fp16::FromFloat(ParameterValue, 0.0);
    v48.__r_.__value_.__s.__data_[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "bias");
    MIL::ANEMachineIR::ExpectCorrectlyTypedOptional<MIL::Fp16>(this, &v48, &v49, a3);
    if (SHIBYTE(v54) < 0) {
      operator delete(__p);
    }
    if (MIL::ValidationResult::IsGood(a3))
    {
      MEMORY[0x21667B360](a3);
      __int16 v23 = (__int16)v49;
      if (!*((unsigned char *)a2 + 50)) {
        *((unsigned char *)a2 + 50) = 1;
      }
      *((_WORD *)a2 + 24) = v23;
      if (*((unsigned char *)a2 + 80))
      {
        std::string v24 = (void *)*((void *)a2 + 7);
        if (v24)
        {
          *((void *)a2 + 8) = v24;
          operator delete(v24);
        }
        *((unsigned char *)a2 + 80) = 0;
      }
LABEL_38:
      MIL::ValidationResult::ValidationResult(a3);
      goto LABEL_39;
    }
    goto LABEL_39;
  }
  uint64_t ParameterValue = (MIL::Fp16 *)(*(uint64_t (**)(MIL::Fp16 *))(*(void *)v8 + 40))(v8);
  if (!ParameterValue) {
    goto LABEL_29;
  }
  std::string::basic_string[abi:ne180100]<0>(&v49, "bias");
  uint64_t ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  uint64_t v10 = MIL::IRValueType::AsTensorType(ParameterType);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 96))(v10);
  std::vector<int> __p = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v11, *(void *)(v11 + 8), (uint64_t)(*(void *)(v11 + 8) - *(void *)v11) >> 3);
  if (SHIBYTE(v51) < 0) {
    operator delete(v49);
  }
  std::string::basic_string[abi:ne180100]<0>(&v48, "y");
  uint64_t v12 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  uint64_t v13 = MIL::IRValueType::AsTensorType(v12);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 96))(v13);
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v49, *(const void **)v14, *(void *)(v14 + 8), (uint64_t)(*(void *)(v14 + 8) - *(void *)v14) >> 3);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (v53 - (unsigned char *)__p == 8)
  {
    if ((unint64_t)(v50 - (unsigned char *)v49) <= 8) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    if (*(void *)__p == *((void *)v49 + 1))
    {
      std::string::basic_string[abi:ne180100]<0>(&v48, "bias");
      std::string::size_type v25 = (MIL::IRValue *)MIL::IROperation::GetParameterValue();
      MIL::IRValue::AsTensor(v25);
      v43.__r_.__value_.__r.__words[0] = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
      v43.__r_.__value_.__l.__size_ = v26;
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      memset(&v48, 0, sizeof(v48));
      uint64_t v27 = (void **)((char *)a2 + 56);
      std::optional<std::vector<MIL::Fp16>>::operator=[abi:ne180100]<std::vector<MIL::Fp16>,void>((uint64_t)a2 + 56, (__n128 *)&v48);
      if (v48.__r_.__value_.__r.__words[0])
      {
        v48.__r_.__value_.__l.__size_ = v48.__r_.__value_.__r.__words[0];
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      std::vector<MIL::Fp16>::reserve((void **)a2 + 7, v43.__r_.__value_.__l.__size_);
      if (v43.__r_.__value_.__l.__size_)
      {
        std::string::size_type v28 = 0;
        do
        {
          uint64_t v29 = (_WORD *)MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::At(&v43, v28);
          unint64_t v30 = v29;
          unint64_t v32 = (char *)*((void *)a2 + 8);
          unint64_t v31 = *((void *)a2 + 9);
          if ((unint64_t)v32 >= v31)
          {
            uint64_t v34 = (char *)*v27;
            uint64_t v35 = v32 - (unsigned char *)*v27;
            if (v35 <= -3) {
              std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v36 = v35 >> 1;
            unint64_t v37 = v31 - (void)v34;
            if (v37 <= (v35 >> 1) + 1) {
              unint64_t v38 = v36 + 1;
            }
            else {
              unint64_t v38 = v37;
            }
            if (v37 >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v39 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v39 = v38;
            }
            if (v39)
            {
              uint64_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)a2 + 72, v39);
              uint64_t v34 = (char *)*((void *)a2 + 7);
              unint64_t v32 = (char *)*((void *)a2 + 8);
            }
            else
            {
              uint64_t v40 = 0;
            }
            __int16 v41 = &v40[2 * v36];
            *(_WORD *)__int16 v41 = *v30;
            char v33 = v41 + 2;
            while (v32 != v34)
            {
              __int16 v42 = *((_WORD *)v32 - 1);
              v32 -= 2;
              *((_WORD *)v41 - 1) = v42;
              v41 -= 2;
            }
            *((void *)a2 + 7) = v41;
            *((void *)a2 + 8) = v33;
            *((void *)a2 + 9) = &v40[2 * v39];
            if (v34) {
              operator delete(v34);
            }
          }
          else
          {
            *(_WORD *)unint64_t v32 = *v29;
            char v33 = v32 + 2;
          }
          *((void *)a2 + 8) = v33;
          ++v28;
        }
        while (v28 < v43.__r_.__value_.__l.__size_);
      }
      if (*((unsigned char *)a2 + 50)) {
        *((unsigned char *)a2 + 50) = 0;
      }
      if (v49)
      {
        uint64_t v50 = v49;
        operator delete(v49);
      }
      if (__p)
      {
        uint64_t v53 = __p;
        operator delete(__p);
      }
      goto LABEL_38;
    }
  }
  uint64_t LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(this);
  uint64_t v16 = (std::__shared_weak_count *)LocationPtr[1];
  uint64_t v46 = *LocationPtr;
  std::string v47 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((unint64_t)(v50 - (unsigned char *)v49) <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v17 = MIL::IRDimension::AsConstant(*((MIL::IRDimension **)v49 + 1));
  unint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 48))(v17);
  std::to_string(&v43, v18);
  long long v19 = std::string::insert(&v43, 0, "Bias tensor must be of shape (");
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  long long v21 = std::string::append(&v48, ",)");
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  std::string::size_type v45 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string::size_type v44 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x21667B340](a3, &v46, 319, v44);
  if (SHIBYTE(v45) < 0) {
    operator delete(v44[0]);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  if (v49)
  {
    uint64_t v50 = v49;
    operator delete(v49);
  }
  if (__p)
  {
    uint64_t v53 = __p;
    operator delete(__p);
  }
LABEL_39:
  if (v58)
  {
    if (v57[0])
    {
      v57[1] = v57[0];
      operator delete(v57[0]);
    }
  }
}

void sub_210BAACC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (__p) {
    operator delete(__p);
  }
  if (a38) {
    operator delete(a38);
  }
  if (*(unsigned char *)(v43 - 96))
  {
    std::string::size_type v45 = *(void **)(v43 - 120);
    if (v45)
    {
      *(void *)(v43 - 112) = v45;
      operator delete(v45);
    }
  }
  _Unwind_Resume(exception_object);
}

void ANEMachineIR::Validators::ValidateNeBatchMatmul(uint64_t *a1@<X0>, uint64_t a2@<X1>, ANEMachineIR::Utils *a3@<X2>, ANEMachineIR::Utils *a4@<X3>, uint64_t a5@<X4>, ANEMachineIR::Utils *a6@<X5>, char *a7@<X6>, uint64_t a8@<X8>)
{
  if (a7[1]) {
    char v13 = *a7;
  }
  else {
    char v13 = 0;
  }
  if (a7[3]) {
    char v14 = a7[2];
  }
  else {
    char v14 = 0;
  }
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)a8)) {
    return;
  }
  MEMORY[0x21667B360](a8);
  ANEMachineIR::Utils::GetStaticTensorShape(a3, v15, (uint64_t)&v107);
  ANEMachineIR::Utils::GetStaticTensorShape(a4, v16, (uint64_t)&v105);
  ANEMachineIR::Utils::GetStaticTensorShape(a6, v17, (uint64_t)&v103);
  unint64_t v18 = v107;
  long long v19 = v108;
  if (v108 == v107) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  if ((unint64_t)(v106 - v105) <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v20 = *(v108 - 1);
  unint64_t v21 = *((void *)v106 - 2);
  if (v20 == v21 || v20 == v21 + 1)
  {
    memset(&v98, 0, sizeof(v98));
    std::string::size_type v24 = *a1;
    __int16 v23 = (std::__shared_weak_count *)a1[1];
    if (v23)
    {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      long long v19 = v108;
    }
    v98.__r_.__value_.__l.__size_ = 0;
    memset(&v114, 0, sizeof(v114));
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v114, v18, (uint64_t)(v19 - 2), v19 - 2 - v18);
    memset(&v113, 0, sizeof(v113));
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(&v113, v105, (uint64_t)(v106 - 16), (v106 - 16 - v105) >> 3);
    v97.__r_.__value_.__r.__words[0] = v24;
    v97.__r_.__value_.__l.__size_ = (std::string::size_type)v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ANEMachineIR::Utils::BroadcastShapes((uint64_t *)&v97, (uint64_t)&v114, (uint64_t)&v113, &v98.__r_.__value_.__l.__data_, (MIL::ValidationResult *)&v109);
    if (v97.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v97.__r_.__value_.__l.__size_);
    }
    if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v109) & 1) == 0)
    {
      *(_OWORD *)(a8 + 8) = *(_OWORD *)&v109.__r_.__value_.__r.__words[1];
      *(_OWORD *)&v109.__r_.__value_.__r.__words[1] = 0uLL;
      *(_OWORD *)(a8 + 24) = v110;
      *(void *)(a8 + 40) = v111;
      long long v110 = 0uLL;
      uint64_t v111 = 0;
      *(void *)a8 = MEMORY[0x263F52F88] + 16;
      *(_DWORD *)(a8 + 48) = v112;
LABEL_88:
      MEMORY[0x21667B360](&v109);
      if (v113.__r_.__value_.__r.__words[0])
      {
        v113.__r_.__value_.__l.__size_ = v113.__r_.__value_.__r.__words[0];
        operator delete(v113.__r_.__value_.__l.__data_);
      }
      if (v114.__r_.__value_.__r.__words[0])
      {
        v114.__r_.__value_.__l.__size_ = v114.__r_.__value_.__r.__words[0];
        operator delete(v114.__r_.__value_.__l.__data_);
      }
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)a8))
      {
        MEMORY[0x21667B360](a8);
        uint64_t v65 = v103;
        uint64_t v66 = v104 - (unsigned char *)v103;
        if (v98.__r_.__value_.__l.__size_ - v98.__r_.__value_.__r.__words[0] == v104 - (unsigned char *)v103)
        {
          if (!memcmp(v98.__r_.__value_.__l.__data_, v103, v98.__r_.__value_.__l.__size_ - v98.__r_.__value_.__r.__words[0]))
          {
            MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a8);
          }
          else
          {
            ANEMachineIR::Utils::ShapeString((uint64_t *)&v103);
            ANEMachineIR::Utils::ShapeString((uint64_t *)&v98);
            uint64_t v67 = (std::__shared_weak_count *)a1[1];
            uint64_t v89 = *a1;
            uint64_t v90 = v67;
            if (v67) {
              atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::operator+<char>();
            uint64_t v68 = std::string::append(&v96, " does not match inferred shape ");
            long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
            v97.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v69;
            v68->__r_.__value_.__l.__size_ = 0;
            v68->__r_.__value_.__r.__words[2] = 0;
            v68->__r_.__value_.__r.__words[0] = 0;
            if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v70 = &v114;
            }
            else {
              uint64_t v70 = (std::string *)v114.__r_.__value_.__r.__words[0];
            }
            if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v114.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v114.__r_.__value_.__l.__size_;
            }
            uint64_t v72 = std::string::append(&v97, (const std::string::value_type *)v70, size);
            long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
            v113.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v73;
            v72->__r_.__value_.__l.__size_ = 0;
            v72->__r_.__value_.__r.__words[2] = 0;
            v72->__r_.__value_.__r.__words[0] = 0;
            uint64_t v74 = std::string::append(&v113, ".");
            long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
            std::string::size_type v88 = v74->__r_.__value_.__r.__words[2];
            *(_OWORD *)uint64_t v87 = v75;
            v74->__r_.__value_.__l.__size_ = 0;
            v74->__r_.__value_.__r.__words[2] = 0;
            v74->__r_.__value_.__r.__words[0] = 0;
            MEMORY[0x21667B340](a8, &v89, 313, v87);
            if (SHIBYTE(v88) < 0) {
              operator delete(v87[0]);
            }
            if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v113.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v97.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v96.__r_.__value_.__l.__data_);
            }
            if (v90) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v90);
            }
            if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v114.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v109.__r_.__value_.__l.__data_);
            }
          }
        }
        else
        {
          int v76 = (std::__shared_weak_count *)a1[1];
          uint64_t v93 = *a1;
          uint64_t v94 = v76;
          if (v76)
          {
            atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v66 = v104 - v65;
          }
          std::to_string(&v97, v66 >> 3);
          std::string::size_type v77 = std::string::insert(&v97, 0, "Output rank ");
          long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
          v113.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v78;
          v77->__r_.__value_.__l.__size_ = 0;
          v77->__r_.__value_.__r.__words[2] = 0;
          v77->__r_.__value_.__r.__words[0] = 0;
          float v79 = std::string::append(&v113, " does not match rank of inferred shape ");
          long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
          v114.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v80;
          v79->__r_.__value_.__l.__size_ = 0;
          v79->__r_.__value_.__r.__words[2] = 0;
          v79->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v96, (uint64_t)(v98.__r_.__value_.__l.__size_ - v98.__r_.__value_.__r.__words[0]) >> 3);
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v81 = &v96;
          }
          else {
            uint64_t v81 = (std::string *)v96.__r_.__value_.__r.__words[0];
          }
          if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v82 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v82 = v96.__r_.__value_.__l.__size_;
          }
          uint64_t v83 = std::string::append(&v114, (const std::string::value_type *)v81, v82);
          long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
          v109.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v84;
          v83->__r_.__value_.__l.__size_ = 0;
          v83->__r_.__value_.__r.__words[2] = 0;
          v83->__r_.__value_.__r.__words[0] = 0;
          uint64_t v85 = std::string::append(&v109, ".");
          long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
          std::string::size_type v92 = v85->__r_.__value_.__r.__words[2];
          *(_OWORD *)uint64_t v91 = v86;
          v85->__r_.__value_.__l.__size_ = 0;
          v85->__r_.__value_.__r.__words[2] = 0;
          v85->__r_.__value_.__r.__words[0] = 0;
          MEMORY[0x21667B340](a8, &v93, 313, v91);
          if (SHIBYTE(v92) < 0) {
            operator delete(v91[0]);
          }
          if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v109.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v96.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v114.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v113.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v97.__r_.__value_.__l.__data_);
          }
          if (v94) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v94);
          }
        }
      }
      if (v98.__r_.__value_.__r.__words[0])
      {
        v98.__r_.__value_.__l.__size_ = v98.__r_.__value_.__r.__words[0];
        operator delete(v98.__r_.__value_.__l.__data_);
      }
      goto LABEL_144;
    }
    std::string::size_type v25 = v107;
    uint64_t v26 = v108 - v107 - 2;
    std::string::size_type v27 = v98.__r_.__value_.__r.__words[2];
    std::string::size_type v28 = v98.__r_.__value_.__l.__size_;
    if (v98.__r_.__value_.__l.__size_ >= v98.__r_.__value_.__r.__words[2])
    {
      std::string::size_type v45 = (void *)v98.__r_.__value_.__r.__words[0];
      uint64_t v46 = (uint64_t)(v98.__r_.__value_.__l.__size_ - v98.__r_.__value_.__r.__words[0]) >> 3;
      unint64_t v47 = v46 + 1;
      if ((unint64_t)(v46 + 1) >> 61) {
        goto LABEL_153;
      }
      int64_t v48 = v98.__r_.__value_.__r.__words[2] - v98.__r_.__value_.__r.__words[0];
      if ((uint64_t)(v98.__r_.__value_.__r.__words[2] - v98.__r_.__value_.__r.__words[0]) >> 2 > v47) {
        unint64_t v47 = v48 >> 2;
      }
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v49 = v47;
      }
      if (v49)
      {
        uint64_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v98.__r_.__value_.__r.__words[2], v49);
        std::string::size_type v28 = v98.__r_.__value_.__l.__size_;
        std::string::size_type v45 = (void *)v98.__r_.__value_.__r.__words[0];
      }
      else
      {
        uint64_t v50 = 0;
      }
      uint64_t v51 = &v50[8 * v46];
      std::string::size_type v27 = (std::string::size_type)&v50[8 * v49];
      *(void *)uint64_t v51 = v25[v26];
      uint64_t v29 = v51 + 8;
      while ((void *)v28 != v45)
      {
        uint64_t v52 = *(void *)(v28 - 8);
        v28 -= 8;
        *((void *)v51 - 1) = v52;
        v51 -= 8;
      }
      v98.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
      v98.__r_.__value_.__l.__size_ = (std::string::size_type)v29;
      v98.__r_.__value_.__r.__words[2] = v27;
      if (v45)
      {
        operator delete(v45);
        std::string::size_type v27 = v98.__r_.__value_.__r.__words[2];
      }
    }
    else
    {
      *(void *)v98.__r_.__value_.__l.__size_ = v107[v26];
      uint64_t v29 = (void *)(v28 + 8);
    }
    v98.__r_.__value_.__l.__size_ = (std::string::size_type)v29;
    uint64_t v53 = v105;
    uint64_t v54 = ((v106 - v105) >> 3) - 1;
    if ((unint64_t)v29 < v27)
    {
      *uint64_t v29 = *(void *)&v105[8 * v54];
      std::string::size_type v55 = (std::string::size_type)(v29 + 1);
LABEL_87:
      v98.__r_.__value_.__l.__size_ = v55;
      MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)a8);
      goto LABEL_88;
    }
    char v56 = (void *)v98.__r_.__value_.__r.__words[0];
    uint64_t v57 = (uint64_t)((uint64_t)v29 - v98.__r_.__value_.__r.__words[0]) >> 3;
    unint64_t v58 = v57 + 1;
    if (!((unint64_t)(v57 + 1) >> 61))
    {
      uint64_t v59 = v27 - v98.__r_.__value_.__r.__words[0];
      if (v59 >> 2 > v58) {
        unint64_t v58 = v59 >> 2;
      }
      if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v60 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v60 = v58;
      }
      if (v60)
      {
        uint64_t v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v98.__r_.__value_.__r.__words[2], v60);
        uint64_t v29 = (void *)v98.__r_.__value_.__l.__size_;
        char v56 = (void *)v98.__r_.__value_.__r.__words[0];
      }
      else
      {
        uint64_t v61 = 0;
      }
      uint64_t v62 = &v61[8 * v57];
      std::string::size_type v63 = (std::string::size_type)&v61[8 * v60];
      *(void *)uint64_t v62 = v53[v54];
      std::string::size_type v55 = (std::string::size_type)(v62 + 8);
      while (v29 != v56)
      {
        uint64_t v64 = *--v29;
        *((void *)v62 - 1) = v64;
        v62 -= 8;
      }
      v98.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
      v98.__r_.__value_.__l.__size_ = v55;
      v98.__r_.__value_.__r.__words[2] = v63;
      if (v56) {
        operator delete(v56);
      }
      goto LABEL_87;
    }
LABEL_153:
    std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v30 = (std::__shared_weak_count *)a1[1];
  uint64_t v101 = *a1;
  uint64_t v102 = v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::to_string(&v97, v20);
  unint64_t v31 = std::string::insert(&v97, 0, "Matrix inner dimension mismatch, tensor y must have inner dimension ");
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v98.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  char v33 = std::string::append(&v98, " or ");
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v113.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v96, v20 - 1);
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v35 = &v96;
  }
  else {
    uint64_t v35 = (std::string *)v96.__r_.__value_.__r.__words[0];
  }
  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v36 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v36 = v96.__r_.__value_.__l.__size_;
  }
  unint64_t v37 = std::string::append(&v113, (const std::string::value_type *)v35, v36);
  long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v114.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  uint64_t v39 = std::string::append(&v114, ", got ");
  long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v109.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v95, v21);
  if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v41 = &v95;
  }
  else {
    __int16 v41 = (std::string *)v95.__r_.__value_.__r.__words[0];
  }
  if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v42 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v42 = v95.__r_.__value_.__l.__size_;
  }
  uint64_t v43 = std::string::append(&v109, (const std::string::value_type *)v41, v42);
  long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  std::string::size_type v100 = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::vector<int> __p = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x21667B340](a8, &v101, 319, __p);
  if (SHIBYTE(v100) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v95.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v109.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v114.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v96.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v113.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v102) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v102);
  }
LABEL_144:
  if (v103)
  {
    uint64_t v104 = v103;
    operator delete(v103);
  }
  if (v105)
  {
    uint64_t v106 = v105;
    operator delete(v105);
  }
  if (v107)
  {
    uint64_t v108 = v107;
    operator delete(v107);
  }
}

void sub_210BAB714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42)
{
  if (__p) {
    operator delete(__p);
  }
  if (a42) {
    operator delete(a42);
  }
  long long v44 = *(void **)(v42 - 256);
  if (v44)
  {
    *(void *)(v42 - 248) = v44;
    operator delete(v44);
  }
  std::string::size_type v45 = *(void **)(v42 - 232);
  if (v45)
  {
    *(void *)(v42 - 224) = v45;
    operator delete(v45);
  }
  _Unwind_Resume(a1);
}

void anonymous namespace'::ValidateCommon(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, ANEMachineIR::Utils *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, MIL::ValidationResult *a9@<X8>, uint64_t a10)
{
  long long v19 = (std::__shared_weak_count *)a1[1];
  uint64_t v56 = *a1;
  uint64_t v57 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v53, "x");
  ANEMachineIR::Validators::ValidateLiveTensorSize(&v56, a3, (uint64_t)&v53, a2, a9);
  if (v55 < 0) {
    operator delete(v53);
  }
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  if (MIL::ValidationResult::IsGood(a9))
  {
    MEMORY[0x21667B360](a9);
    unint64_t v20 = (std::__shared_weak_count *)a1[1];
    uint64_t v51 = *a1;
    uint64_t v52 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v53, "y");
    ANEMachineIR::Validators::ValidateLiveTensorSize(&v51, (uint64_t)a4, (uint64_t)&v53, a2, a9);
    if (v55 < 0) {
      operator delete(v53);
    }
    if (v52) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v52);
    }
    if (MIL::ValidationResult::IsGood(a9))
    {
      MEMORY[0x21667B360](a9);
      unint64_t v21 = (std::__shared_weak_count *)a1[1];
      uint64_t v49 = *a1;
      uint64_t v50 = v21;
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      ANEMachineIR::Validators::ValidatePostRightShiftRange(a9);
      if (v50) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v50);
      }
      if (MIL::ValidationResult::IsGood(a9))
      {
        MEMORY[0x21667B360](a9);
        if (!*(unsigned char *)(a10 + 24)) {
          goto LABEL_36;
        }
        ANEMachineIR::Utils::GetStaticTensorShape(a4, v22, (uint64_t)&v53);
        __int16 v23 = v53;
        if ((unint64_t)(v54 - (unsigned char *)v53) <= 8) {
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v24 = *((void *)v53 + 1);
        uint64_t v36 = (uint64_t)(*(void *)(a10 + 8) - *(void *)a10) >> 1;
        if (v36 != v24)
        {
          std::string::size_type v25 = (std::__shared_weak_count *)a1[1];
          uint64_t v47 = *a1;
          int64_t v48 = v25;
          if (v25)
          {
            atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
            if ((unint64_t)(v54 - (unsigned char *)v23) <= 8) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
          }
          std::to_string(&v43, *((void *)v23 + 1));
          uint64_t v26 = std::string::insert(&v43, 0, "Post scale tensor must be of shape (");
          long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
          v44.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v27;
          v26->__r_.__value_.__l.__size_ = 0;
          v26->__r_.__value_.__r.__words[2] = 0;
          v26->__r_.__value_.__r.__words[0] = 0;
          std::string::size_type v28 = std::string::append(&v44, ",)");
          long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          std::string::size_type v46 = v28->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::vector<int> __p = v29;
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          MEMORY[0x21667B340](a9, &v47, 319, __p);
          if (SHIBYTE(v46) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v44.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v43.__r_.__value_.__l.__data_);
          }
          if (v48) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v48);
          }
        }
        if (v53)
        {
          uint64_t v54 = v53;
          operator delete(v53);
        }
        if (v36 == v24)
        {
LABEL_36:
          BOOL v30 = (*(unsigned int (**)(ANEMachineIR::Utils *))(*(void *)a4 + 88))(a4) == 4;
          BOOL v31 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 88))(a3) == 4;
          char v32 = ANEMachineIR::Validators::BinaryPointFormatOffsets((ANEMachineIR::Validators *)v30, v31);
          if (ANEMachineIR::Validators::NeuralEngineComputedBinaryPointAndShiftLegal((ANEMachineIR::Validators *)a7, a8, v32))
          {
            char v33 = (std::__shared_weak_count *)a1[1];
            uint64_t v37 = *a1;
            long long v38 = v33;
            if (v33) {
              atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            ANEMachineIR::Validators::ValidateLiveTensorSize(&v37, a6, a5, a2, a9);
            if (v38) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v38);
            }
            if (MIL::ValidationResult::IsGood(a9))
            {
              long long v34 = (MIL::ValidationResult *)MEMORY[0x21667B360](a9);
              MIL::ValidationResult::ValidationResult(v34);
            }
          }
          else
          {
            uint64_t v35 = (std::__shared_weak_count *)a1[1];
            uint64_t v41 = *a1;
            uint64_t v42 = v35;
            if (v35) {
              atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(v39, "Computed binary point plus post-right shift bounded by accumulator dest size. See op definition.");
            MEMORY[0x21667B340](a9, &v41, 309, v39);
            if (v40 < 0) {
              operator delete(v39[0]);
            }
            if (v42) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v42);
            }
          }
        }
      }
    }
  }
}

void sub_210BABE24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,std::__shared_weak_count *a42)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a42);
  }
  std::string v44 = *(void **)(v42 - 128);
  if (v44)
  {
    *(void *)(v42 - 120) = v44;
    operator delete(v44);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ANEMachineIR::Validators::ValidateNeMatmul@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, ANEMachineIR::Utils *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, MIL::ValidationResult *a8@<X8>)
{
  if (a7[1]) {
    char v9 = *a7;
  }
  else {
    char v9 = 0;
  }
  if (a7[3]) {
    char v10 = a7[2];
  }
  else {
    char v10 = 0;
  }
  uint64_t result = MIL::ValidationResult::IsGood(a8);
  if (result)
  {
    uint64_t v12 = (MIL::ValidationResult *)MEMORY[0x21667B360](a8);
    return MIL::ValidationResult::ValidationResult(v12);
  }
  return result;
}

void ANEMachineIR::Validators::ValidateNeBatchMatmul(MIL::IRObject *a1@<X0>, MIL::ValidationResult *a2@<X8>)
{
  char v21 = 0;
  LOBYTE(v22) = 0;
  char v24 = 0;
  char v25 = 0;
  char v26 = 0;
  int v19 = 0;
  char v20 = 0;
  ANEMachineIR::Validators::ParseNeBatchMatmulParamValues(a1, (uint64_t)&v19, a2);
  if (MIL::ValidationResult::IsGood(a2))
  {
    MEMORY[0x21667B360](a2);
    uint64_t LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    uint64_t v5 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a1 + 56))(a1);
    std::string::basic_string[abi:ne180100]<0>(&v17, "x");
    uint64_t ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
    unint64_t v7 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(ParameterType);
    std::string::basic_string[abi:ne180100]<0>(&__p, "y");
    std::vector<int>::pointer v8 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
    char v9 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v8);
    (*(void (**)(void *__return_ptr, MIL::IRObject *))(*(void *)a1 + 200))(v14, a1);
    uint64_t v10 = v14[0];
    if (v14[1] == v14[0]) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v11 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a1 + 176))(a1);
    if (*(void *)(v11 + 8) == *(void *)v11) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v11);
    char v13 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(Type);
    ANEMachineIR::Validators::ValidateNeBatchMatmul(LocationPtr, v5, v7, v9, v10, v13, (char *)&v19, (uint64_t)a2);
    long long v27 = (void **)v14;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v27);
    if (v16 < 0) {
      operator delete(__p);
    }
    if (v18 < 0) {
      operator delete(v17);
    }
  }
  if (v24)
  {
    if (v22)
    {
      __int16 v23 = v22;
      operator delete(v22);
    }
  }
}

void sub_210BAC1F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a28)
  {
    if (a25) {
      operator delete(a25);
    }
  }
  _Unwind_Resume(exception_object);
}

void ANEMachineIR::Validators::ValidateNeMatmul(ANEMachineIR::Validators *a1@<X0>, MIL::ValidationResult *a2@<X8>)
{
  char v21 = 0;
  LOBYTE(v22) = 0;
  char v24 = 0;
  char v25 = 0;
  char v26 = 0;
  int v19 = 0;
  char v20 = 0;
  char v27 = 0;
  char v28 = 0;
  LOBYTE(v29) = 0;
  char v31 = 0;
  ANEMachineIR::Validators::ParseNeMatmulParamValues(a1, (const MIL::IROperation *)&v19, a2);
  if (MIL::ValidationResult::IsGood(a2))
  {
    MEMORY[0x21667B360](a2);
    uint64_t LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    uint64_t v5 = (*(uint64_t (**)(ANEMachineIR::Validators *))(*(void *)a1 + 56))(a1);
    std::string::basic_string[abi:ne180100]<0>(&v17, "x");
    uint64_t ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
    uint64_t v7 = MIL::IRValueType::AsTensorType(ParameterType);
    std::string::basic_string[abi:ne180100]<0>(&__p, "y");
    std::vector<int>::pointer v8 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
    char v9 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v8);
    (*(void (**)(void *__return_ptr, ANEMachineIR::Validators *))(*(void *)a1 + 200))(v14, a1);
    uint64_t v10 = v14[0];
    if (v14[1] == v14[0]) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v11 = (*(uint64_t (**)(ANEMachineIR::Validators *))(*(void *)a1 + 176))(a1);
    if (*(void *)(v11 + 8) == *(void *)v11) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v11);
    uint64_t v13 = MIL::IRValueType::AsTensorType(Type);
    ANEMachineIR::Validators::ValidateNeMatmul(LocationPtr, v5, v7, v9, v10, v13, (char *)&v19, a2);
    char v32 = (void **)v14;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v32);
    if (v16 < 0) {
      operator delete(__p);
    }
    if (v18 < 0) {
      operator delete(v17);
    }
  }
  if (v31 && v29)
  {
    BOOL v30 = v29;
    operator delete(v29);
  }
  if (v24)
  {
    if (v22)
    {
      __int16 v23 = v22;
      operator delete(v22);
    }
  }
}

void sub_210BAC4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  ANEMachineIR::Validators::NeMatmulParamValues::~NeMatmulParamValues((ANEMachineIR::Validators::NeMatmulParamValues *)&a25);
  _Unwind_Resume(a1);
}

void ANEMachineIR::Validators::NeMatmulParamValues::~NeMatmulParamValues(ANEMachineIR::Validators::NeMatmulParamValues *this)
{
  if (*((unsigned char *)this + 80))
  {
    uint64_t v2 = (void *)*((void *)this + 7);
    if (v2)
    {
      *((void *)this + 8) = v2;
      operator delete(v2);
    }
  }
  if (*((unsigned char *)this + 32))
  {
    unint64_t v3 = (void *)*((void *)this + 1);
    if (v3)
    {
      *((void *)this + 2) = v3;
      operator delete(v3);
    }
  }
}

void std::__optional_storage_base<std::vector<MIL::Fp16>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::vector<MIL::Fp16>,false> const&>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2 && *(unsigned char *)(a1 + 24))
    {
      uint64_t v3 = *(void *)(a2 + 8);
      unint64_t v4 = (v3 - *(void *)a2) >> 1;
      uint64_t v5 = *(char **)a2;
      std::vector<MIL::Fp16>::__assign_with_size[abi:ne180100]<MIL::Fp16*,MIL::Fp16*>((char *)a1, v5, v3, v4);
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    std::vector<int>::pointer v6 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v6;
      operator delete(v6);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    std::vector<MIL::Fp16>::__init_with_size[abi:ne180100]<MIL::Fp16*,MIL::Fp16*>((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
    *(unsigned char *)(a1 + 24) = 1;
  }
}

char *std::vector<MIL::Fp16>::__assign_with_size[abi:ne180100]<MIL::Fp16*,MIL::Fp16*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  unint64_t v8 = *((void *)result + 2);
  char v9 = *(char **)result;
  if (a4 > (uint64_t)(v8 - *(void *)result) >> 1)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    }
    if (v8 <= a4) {
      unint64_t v10 = a4;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v8 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v11 = v10;
    }
    uint64_t result = std::vector<MIL::Fp16>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    char v9 = v13;
LABEL_17:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      char v18 = v9;
      int v19 = __src;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  uint64_t v12 = (void **)(result + 8);
  char v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 1;
  if (v15 >= a4) {
    goto LABEL_17;
  }
  char v16 = &__src[2 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    char v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    char v18 = v9;
    int v19 = v16;
LABEL_19:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_20:
  *uint64_t v12 = &v9[v17];
  return result;
}

void *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<int>::pointer v6 = result;
    uint64_t result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_210BAC784(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<int>::pointer v6 = result;
    uint64_t result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_210BAC800(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::vector<MIL::Fp16>::__move_assign(uint64_t a1, __n128 *a2)
{
  unint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void ANEMachineIR::H2021::NeConv::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210BAFCB8(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)&STACK[0x6B8]);
  unint64_t v3 = STACK[0x548];
  STACK[0x548] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x540]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x540]);
  }
  unint64_t v4 = (void *)STACK[0x520];
  if (STACK[0x520])
  {
    STACK[0x528] = (unint64_t)v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)STACK[0x688];
  if (STACK[0x688])
  {
    STACK[0x690] = (unint64_t)v5;
    operator delete(v5);
  }
  std::vector<int>::pointer v6 = *(void **)(v1 - 112);
  if (v6)
  {
    *(void *)(v1 - 104) = v6;
    operator delete(v6);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x550], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x6B0], 0);
  _Unwind_Resume(a1);
}

void sub_210BB0D64()
{
}

BOOL ANEMachineIR::Utils::IsBlockOutput(MIL::Builder::BlockBuilder **a1, unsigned __int8 **a2)
{
  MIL::Builder::BlockBuilder::GetOutputNames(&v6, *a1);
  uint64_t v3 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v6, v7, a2);
  BOOL v4 = v3 != v7;
  size_t v8 = (void **)&v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  return v4;
}

uint64_t ANEMachineIR::Utils::TryGetArgumentForParameter()
{
  return MIL::Builder::OperationBuilder::GetArgumentForParameter();
}

void sub_210BB0DF0(void *a1)
{
}

void ANEMachineIR::Utils::TryCopyOpInput(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v7 = *a2;
  size_t v8 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t ArgumentForParameter = ANEMachineIR::Utils::TryGetArgumentForParameter();
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (ArgumentForParameter)
  {
    if (*(char *)(a1 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    }
    else {
      std::string __p = *(std::string *)a1;
    }
    MIL::Builder::OperationBuilder::AddInput();
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_210BB0EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ANEMachineIR::Utils::TryGetArgumentForParameter(void *a1)
{
  exception_ptr = __cxa_get_exception_ptr(a1);
  MEMORY[0x21667B9B0](v3, exception_ptr);
  __cxa_begin_catch(a1);
  MEMORY[0x21667B9D0](v3);
  __cxa_end_catch();
}

void MIL::ANEMachineIR::Interpreter::NeAddCpu::Run(MIL::IROperation *a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v118 = *MEMORY[0x263EF8340];
  uint64_t v6 = (*(uint64_t (**)(MIL::IROperation *))(*(void *)a1 + 56))(a1);
  int v7 = *(char *)(v6 + 23);
  if (v7 < 0)
  {
    if (*(void *)(v6 + 8) != 6) {
      goto LABEL_10;
    }
    uint64_t v6 = *(void *)v6;
  }
  else if (v7 != 6)
  {
    goto LABEL_10;
  }
  if (*(_DWORD *)v6 != 1633641838 || *(_WORD *)(v6 + 4) != 25700)
  {
LABEL_10:
    *(_DWORD *)a3 = 1;
    uint64_t v9 = a3 + 8;
    std::string::basic_string[abi:ne180100]<0>(&v106, "ne_add");
    unint64_t v10 = std::string::insert(&v106, 0, "Expected ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v117.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v117.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    uint64_t v12 = std::string::append(&v117, " op. Got ");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v104.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (*(uint64_t (**)(MIL::IROperation *))(*(void *)a1 + 56))(a1);
    int v15 = *(char *)(v14 + 23);
    if (v15 >= 0) {
      char v16 = (const std::string::value_type *)v14;
    }
    else {
      char v16 = *(const std::string::value_type **)v14;
    }
    if (v15 >= 0) {
      std::string::size_type v17 = *(unsigned __int8 *)(v14 + 23);
    }
    else {
      std::string::size_type v17 = *(void *)(v14 + 8);
    }
    char v18 = std::string::append(&v104, v16, v17);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    *(void *)(v9 + 16) = *((void *)&v18->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v9 = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v104.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v117.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type size = (void *)v106.__r_.__value_.__r.__words[0];
LABEL_22:
      operator delete(size);
      return;
    }
    return;
  }
  char v21 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v104, "x_scale");
  __int16 v22 = MIL::Fp16::FromFloat(v21, 1.0);
  uint64_t ParameterValue = MIL::IROperation::TryGetParameterValue();
  if (ParameterValue)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)ParameterValue + 40))(ParameterValue))
    {
      char v24 = (__int16 *)MEMORY[0x21667B820]();
      if (v24) {
        __int16 v22 = *v24;
      }
    }
  }
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
  char v25 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v104, "y_scale");
  __int16 v101 = MIL::Fp16::FromFloat(v25, 1.0);
  uint64_t v26 = MIL::IROperation::TryGetParameterValue();
  if (v26)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v26 + 40))(v26))
    {
      char v27 = (__int16 *)MEMORY[0x21667B820]();
      if (v27) {
        __int16 v101 = *v27;
      }
    }
  }
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
  char v28 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v104, "bias");
  unsigned __int16 v100 = MIL::Fp16::FromFloat(v28, 0.0);
  uint64_t v29 = MIL::IROperation::TryGetParameterValue();
  if (v29)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v29 + 40))(v29))
    {
      BOOL v30 = (unsigned __int16 *)MEMORY[0x21667B820]();
      if (v30) {
        unsigned __int16 v100 = *v30;
      }
    }
  }
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
  char v31 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v104, "post_scale");
  unsigned __int16 v32 = MIL::Fp16::FromFloat(v31, 1.0);
  uint64_t v33 = MIL::IROperation::TryGetParameterValue();
  if (v33)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v33 + 40))(v33))
    {
      long long v34 = (unsigned __int16 *)MEMORY[0x21667B820]();
      if (v34) {
        unsigned __int16 v32 = *v34;
      }
    }
  }
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v104, "acc_bias_shift");
  uint64_t v35 = MIL::IROperation::TryGetParameterValue();
  if (v35
    && (*(uint64_t (**)(uint64_t))(*(void *)v35 + 40))(v35)
    && (uint64_t v36 = (char *)MEMORY[0x21667B840]()) != 0)
  {
    char v99 = *v36;
  }
  else
  {
    char v99 = 0;
  }
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v104, "acc_left_shift");
  uint64_t v37 = MIL::IROperation::TryGetParameterValue();
  if (v37
    && (*(uint64_t (**)(uint64_t))(*(void *)v37 + 40))(v37)
    && (long long v38 = (char *)MEMORY[0x21667B840]()) != 0)
  {
    char v39 = *v38;
  }
  else
  {
    char v39 = 0;
  }
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v104, "post_right_shift");
  uint64_t v40 = MIL::IROperation::TryGetParameterValue();
  if (v40
    && (*(uint64_t (**)(uint64_t))(*(void *)v40 + 40))(v40)
    && (uint64_t v41 = (char *)MEMORY[0x21667B840]()) != 0)
  {
    char v42 = *v41;
  }
  else
  {
    char v42 = 0;
  }
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v104, "x");
  uint64_t InterpretedTensorValue = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&v104);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v104, "y");
  uint64_t v44 = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&v104);
  if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (InterpretedTensorValue) {
      goto LABEL_73;
    }
LABEL_77:
    *(_DWORD *)a3 = 2;
    std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), "No value for x");
    return;
  }
  operator delete(v104.__r_.__value_.__l.__data_);
  if (!InterpretedTensorValue) {
    goto LABEL_77;
  }
LABEL_73:
  if (!v44)
  {
    *(_DWORD *)a3 = 2;
    std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), "No value for y");
    return;
  }
  __int16 v98 = v22;
  *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = 0uLL;
  uint64_t v105 = 0;
  MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction((uint64_t)a1, (uint64_t)&v104, (uint64_t)&v117);
  if (LODWORD(v104.__r_.__value_.__l.__data_))
  {
    *(_DWORD *)a3 = v104.__r_.__value_.__l.__data_;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)&v104.__r_.__value_.__r.__words[1];
    *(void *)(a3 + 24) = v105;
    *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = 0uLL;
    uint64_t v105 = 0;
    goto LABEL_131;
  }
  uint64_t v45 = (*(uint64_t (**)(uint64_t))(*(void *)InterpretedTensorValue + 32))(InterpretedTensorValue);
  int v46 = (*(uint64_t (**)(uint64_t))(*(void *)v45 + 88))(v45);
  uint64_t OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  uint64_t v48 = MIL::IRValueType::AsTensorType(OutputType);
  int v49 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 88))(v48);
  uint64_t v50 = (*(uint64_t (**)(uint64_t))(*(void *)InterpretedTensorValue + 32))(InterpretedTensorValue);
  size_t v97 = (*(uint64_t (**)(uint64_t))(*(void *)v50 + 16))(v50);
  if (v46 == 4)
  {
    switch(v49)
    {
      case 14:
        uint64_t v87 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        uint64_t v88 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v115, (uint64_t)&v117);
        std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v115);
        (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v102, a1);
        uint64_t v89 = v102;
        if (v103 == v102) {
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v90 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
        MIL::IRValueType::AsTensorType(v90);
        MIL::IRTensorValueType::MakeUInt8Value();
        MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v89, (uint64_t *)&v107);
        uint64_t v91 = v107;
        uint64_t v107 = 0;
        if (v91) {
          (*((void (**)(void **))*v91 + 1))(v91);
        }
        goto LABEL_129;
      case 9:
        uint64_t v77 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        uint64_t v78 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v114, (uint64_t)&v117);
        std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v114);
        (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v102, a1);
        float v79 = v102;
        if (v103 == v102) {
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        long long v80 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
        MIL::IRValueType::AsTensorType(v80);
        MIL::IRTensorValueType::MakeInt8Value();
        MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v79, (uint64_t *)&v107);
        uint64_t v81 = v107;
        uint64_t v107 = 0;
        if (v81) {
          (*((void (**)(void **))*v81 + 1))(v81);
        }
        goto LABEL_129;
      case 4:
        uint64_t v61 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        uint64_t v62 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v116, (uint64_t)&v117);
        std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v116);
        (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v102, a1);
        std::string::size_type v63 = v102;
        if (v103 == v102) {
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v64 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
        MIL::IRValueType::AsTensorType(v64);
        MIL::IRTensorValueType::MakeFloat16Value();
        MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v63, (uint64_t *)&v107);
        uint64_t v65 = v107;
        uint64_t v107 = 0;
        if (v65) {
          (*((void (**)(void **))*v65 + 1))(v65);
        }
        goto LABEL_129;
    }
    goto LABEL_104;
  }
  if (v46 == 9)
  {
    switch(v49)
    {
      case 14:
        uint64_t Data = MIL::IRTensorValue::GetDataView<signed char>();
        uint64_t v73 = MIL::IRTensorValue::GetDataView<signed char>();
        std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v109, (uint64_t)&v117);
        std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v109);
        (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v102, a1);
        uint64_t v74 = v102;
        if (v103 == v102) {
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        long long v75 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
        MIL::IRValueType::AsTensorType(v75);
        MIL::IRTensorValueType::MakeUInt8Value();
        MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v74, (uint64_t *)&v107);
        int v76 = v107;
        uint64_t v107 = 0;
        if (v76) {
          (*((void (**)(void **))*v76 + 1))(v76);
        }
        goto LABEL_129;
      case 9:
        uint64_t v67 = MIL::IRTensorValue::GetDataView<signed char>();
        uint64_t v68 = MIL::IRTensorValue::GetDataView<signed char>();
        std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v108, (uint64_t)&v117);
        std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v108);
        (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v102, a1);
        long long v69 = v102;
        if (v103 == v102) {
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v70 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
        MIL::IRValueType::AsTensorType(v70);
        MIL::IRTensorValueType::MakeInt8Value();
        MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v69, (uint64_t *)&v107);
        uint64_t v71 = v107;
        uint64_t v107 = 0;
        if (v71) {
          (*((void (**)(void **))*v71 + 1))(v71);
        }
        goto LABEL_129;
      case 4:
        uint64_t v56 = MIL::IRTensorValue::GetDataView<signed char>();
        uint64_t v57 = MIL::IRTensorValue::GetDataView<signed char>();
        std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v110, (uint64_t)&v117);
        std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v110);
        (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v102, a1);
        unint64_t v58 = v102;
        if (v103 == v102) {
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v59 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
        MIL::IRValueType::AsTensorType(v59);
        MIL::IRTensorValueType::MakeFloat16Value();
        MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v58, (uint64_t *)&v107);
        unint64_t v60 = v107;
        uint64_t v107 = 0;
        if (v60) {
          (*((void (**)(void **))*v60 + 1))(v60);
        }
        goto LABEL_129;
    }
    goto LABEL_104;
  }
  if (v46 != 14)
  {
    uint64_t v66 = "Unimplemented input dtype";
LABEL_105:
    *(_DWORD *)a3 = 3;
    std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), v66);
    goto LABEL_131;
  }
  if (v49 == 14)
  {
    uint64_t v92 = MIL::IRTensorValue::GetDataView<unsigned char>();
    uint64_t v93 = MIL::IRTensorValue::GetDataView<unsigned char>();
    std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v112, (uint64_t)&v117);
    std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v112);
    (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v102, a1);
    uint64_t v94 = v102;
    if (v103 == v102) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    std::string v95 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
    MIL::IRValueType::AsTensorType(v95);
    MIL::IRTensorValueType::MakeUInt8Value();
    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v94, (uint64_t *)&v107);
    std::string v96 = v107;
    uint64_t v107 = 0;
    if (v96) {
      (*((void (**)(void **))*v96 + 1))(v96);
    }
    goto LABEL_129;
  }
  if (v49 == 9)
  {
    uint64_t v82 = MIL::IRTensorValue::GetDataView<unsigned char>();
    uint64_t v83 = MIL::IRTensorValue::GetDataView<unsigned char>();
    std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v111, (uint64_t)&v117);
    std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v111);
    (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v102, a1);
    long long v84 = v102;
    if (v103 == v102) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v85 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
    MIL::IRValueType::AsTensorType(v85);
    MIL::IRTensorValueType::MakeInt8Value();
    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v84, (uint64_t *)&v107);
    long long v86 = v107;
    uint64_t v107 = 0;
    if (v86) {
      (*((void (**)(void **))*v86 + 1))(v86);
    }
    goto LABEL_129;
  }
  if (v49 != 4)
  {
LABEL_104:
    uint64_t v66 = "Unimplemented output dtype";
    goto LABEL_105;
  }
  uint64_t v51 = MIL::IRTensorValue::GetDataView<unsigned char>();
  uint64_t v52 = MIL::IRTensorValue::GetDataView<unsigned char>();
  std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v113, (uint64_t)&v117);
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v113);
  (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v102, a1);
  uint64_t v53 = v102;
  if (v103 == v102) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v54 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  MIL::IRValueType::AsTensorType(v54);
  MIL::IRTensorValueType::MakeFloat16Value();
  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v53, (uint64_t *)&v107);
  char v55 = v107;
  uint64_t v107 = 0;
  if (v55) {
    (*((void (**)(void **))*v55 + 1))(v55);
  }
LABEL_129:
  uint64_t v107 = (void **)&v102;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v107);
  *(_DWORD *)a3 = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), (char *)&unk_210C6BFE7);
  if (v106.__r_.__value_.__r.__words[0])
  {
    v106.__r_.__value_.__l.__size_ = v106.__r_.__value_.__r.__words[0];
    operator delete(v106.__r_.__value_.__l.__data_);
  }
LABEL_131:
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](&v117);
  if (SHIBYTE(v105) < 0)
  {
    std::string::size_type size = (void *)v104.__r_.__value_.__l.__size_;
    goto LABEL_22;
  }
}

void sub_210BB21E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,void *a22,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  if (__p) {
    operator delete(__p);
  }
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100]((void *)(v54 - 128));
  if (a30 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<MIL::Fp16,MIL::Fp16>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, __int16 a4@<W3>, __int16 a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, __int16 a10, int a11, __int16 a12, uint64_t a13)
{
  __int16 v87 = a4;
  __int16 v86 = a5;
  __int16 v85 = a10;
  __int16 v84 = a12;
  *(void *)(a9 + 8) = 0;
  *(void *)(a9 + 16) = 0;
  *(void *)a9 = 0;
  std::vector<MIL::Fp16>::reserve((void **)a9, a3);
  double v17 = ldexp(1.0, a6 + 20);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v85);
  float v19 = v18;
  float v20 = ldexp(1.0, a6 + 20 + a7);
  float v21 = v19 * v20;
  unsigned int v22 = llroundf(v21);
  if (fabsf(v21) >= 1.0) {
    signed int v23 = v22;
  }
  else {
    signed int v23 = 0;
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v84);
  float v25 = v24;
  double v26 = exp2(-(double)(a6 + 20 + a8));
  if (a3)
  {
    uint64_t v27 = 0;
    float v28 = v17;
    float v29 = v26 * v25;
    while (1)
    {
      __int16 v30 = *(_WORD *)(a1 + 2 * v27);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v87);
      float v32 = v31;
      LOWORD(__e) = v30;
      MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      float v34 = v33;
      int v35 = ilogbf(v33);
      if (v35 <= -14) {
        int v36 = -14;
      }
      else {
        int v36 = v35;
      }
      int v37 = ilogbf(v32);
      if (v37 <= -14) {
        int v38 = -14;
      }
      else {
        int v38 = v37;
      }
      int v39 = v36 + a6 + v38;
      uint64_t v40 = v23 + (uint64_t)(int)llroundf((float)(v32 * v34) * v28);
      if (v40 >= (uint64_t)0xFFFFFFFF80000000) {
        int v41 = v40;
      }
      else {
        int v41 = -8388608;
      }
      int v42 = 2 * (v40 < (uint64_t)0xFFFFFFFF80000000);
      BOOL v43 = v40 <= 0x7FFFFFFF;
      if (v40 <= 0x7FFFFFFF) {
        int v44 = v41;
      }
      else {
        int v44 = 2139095040;
      }
      if (!v43) {
        int v42 = 1;
      }
      LODWORD(v45) = v39 >= -20 ? v44 : v23;
      int v46 = v39 >= -20 ? v42 : 0;
      __int16 v47 = *(_WORD *)(a2 + 2 * v27);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v86);
      if (v46 == 2) {
        break;
      }
      if (v46) {
        goto LABEL_38;
      }
      float v49 = v48;
      LOWORD(__e) = v47;
      MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      float v51 = v50;
      int v52 = ilogbf(v50);
      if (v52 <= -14) {
        int v53 = -14;
      }
      else {
        int v53 = v52;
      }
      int v54 = ilogbf(v49);
      if (v54 <= -14) {
        int v55 = -14;
      }
      else {
        int v55 = v54;
      }
      if (v53 + a6 + v55 >= -20)
      {
        uint64_t v45 = (int)llroundf((float)(v49 * v51) * v28) + (uint64_t)(int)v45;
        if (v45 > 0x7FFFFFFF)
        {
LABEL_38:
          *(double *)&unint64_t v57 = INFINITY;
LABEL_41:
          double v56 = *(double *)&v57;
          goto LABEL_42;
        }
        if (v45 < (uint64_t)0xFFFFFFFF80000000) {
          break;
        }
      }
      if (!v45)
      {
        float v60 = 0.0;
        goto LABEL_43;
      }
      double v56 = (double)(int)v45;
LABEL_42:
      int __e = 0;
      long double v58 = frexp(v56, &__e);
      double v59 = ldexp(v58, 11);
      float v60 = ldexp(round(v59), __e - 11);
LABEL_43:
      float v61 = v60 * v29;
      float v62 = 0.0;
      if (v61 != 0.0)
      {
        int __e = 0;
        long double v63 = frexp(v61, &__e);
        double v64 = ldexp(v63, 11);
        float v62 = ldexp(round(v64), __e - 11);
      }
      uint64_t v65 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(a13, v62);
      __int16 v67 = MIL::Fp16::FromFloat(v65, v66);
      __int16 v68 = v67;
      uint64_t v70 = *(_WORD **)(a9 + 8);
      unint64_t v69 = *(void *)(a9 + 16);
      if ((unint64_t)v70 >= v69)
      {
        uint64_t v72 = *(_WORD **)a9;
        uint64_t v73 = (uint64_t)v70 - *(void *)a9;
        if (v73 <= -3) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v74 = v73 >> 1;
        unint64_t v75 = v69 - (void)v72;
        if (v75 <= (v73 >> 1) + 1) {
          unint64_t v76 = v74 + 1;
        }
        else {
          unint64_t v76 = v75;
        }
        if (v75 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v77 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v77 = v76;
        }
        if (v77)
        {
          uint64_t v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>(a9 + 16, v77);
          uint64_t v72 = *(_WORD **)a9;
          uint64_t v70 = *(_WORD **)(a9 + 8);
        }
        else
        {
          uint64_t v78 = 0;
        }
        float v79 = &v78[2 * v74];
        *(_WORD *)float v79 = v68;
        uint64_t v71 = v79 + 2;
        while (v70 != v72)
        {
          __int16 v80 = *--v70;
          *((_WORD *)v79 - 1) = v80;
          v79 -= 2;
        }
        *(void *)a9 = v79;
        *(void *)(a9 + 8) = v71;
        *(void *)(a9 + 16) = &v78[2 * v77];
        if (v72) {
          operator delete(v72);
        }
      }
      else
      {
        *uint64_t v70 = v67;
        uint64_t v71 = v70 + 1;
      }
      *(void *)(a9 + 8) = v71;
      if (++v27 == a3) {
        return;
      }
    }
    *(double *)&unint64_t v57 = -INFINITY;
    goto LABEL_41;
  }
}

void sub_210BB2880(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<unsigned char,MIL::Fp16>(size_t __sz@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, __int16 a4@<W3>, __int16 a5@<W4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  size_t v15 = __sz;
  __int16 v94 = a4;
  __int16 v93 = a5;
  __int16 v92 = a10;
  __int16 v91 = a11;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<unsigned char>::reserve(a9, __sz);
  double v18 = ldexp(1.0, (int)a6 + 20);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v92);
  float v20 = v19;
  float v21 = ldexp(1.0, (int)a6 + 20 + a7);
  float v22 = v20 * v21;
  unsigned int v23 = llroundf(v22);
  if (fabsf(v22) >= 1.0) {
    signed int v24 = v23;
  }
  else {
    signed int v24 = 0;
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v91);
  float v26 = v25;
  double v27 = exp2(-(double)((int)a6 + 20 + a8));
  float v28 = a9;
  if (v15)
  {
    uint64_t v29 = 0;
    float v30 = v18;
    uint64_t v90 = v24;
    float v31 = v27 * v26;
    signed int v88 = v24;
    while (1)
    {
      __int16 v32 = *(_WORD *)(a2 + 2 * v29);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v94);
      float v34 = v33;
      LOWORD(__e) = v32;
      MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      float v36 = v35;
      int v37 = ilogbf(v35);
      if (v37 <= -14) {
        int v38 = -14;
      }
      else {
        int v38 = v37;
      }
      int v39 = ilogbf(v34);
      if (v39 <= -14) {
        int v40 = -14;
      }
      else {
        int v40 = v39;
      }
      int v41 = v38 + a6 + v40;
      uint64_t v42 = v90 + (int)llroundf((float)(v34 * v36) * v30);
      if (v42 >= (uint64_t)0xFFFFFFFF80000000) {
        int v43 = v42;
      }
      else {
        int v43 = -8388608;
      }
      int v44 = 2 * (v42 < (uint64_t)0xFFFFFFFF80000000);
      BOOL v45 = v42 <= 0x7FFFFFFF;
      if (v42 <= 0x7FFFFFFF) {
        int v46 = v43;
      }
      else {
        int v46 = 2139095040;
      }
      if (!v45) {
        int v44 = 1;
      }
      LODWORD(v47) = v41 >= -20 ? v46 : v24;
      int v48 = v41 >= -20 ? v44 : 0;
      __int16 v49 = *(_WORD *)(a3 + 2 * v29);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v93);
      if (v48 == 2) {
        break;
      }
      if (v48) {
        goto LABEL_38;
      }
      float v51 = v50;
      LOWORD(__e) = v49;
      MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      float v53 = v52;
      int v54 = ilogbf(v52);
      if (v54 <= -14) {
        int v55 = -14;
      }
      else {
        int v55 = v54;
      }
      int v56 = ilogbf(v51);
      if (v56 <= -14) {
        int v57 = -14;
      }
      else {
        int v57 = v56;
      }
      if (v55 + (int)a6 + v57 >= -20)
      {
        uint64_t v47 = (int)llroundf((float)(v51 * v53) * v30) + (uint64_t)(int)v47;
        if (v47 > 0x7FFFFFFF)
        {
LABEL_38:
          *(double *)&unint64_t v59 = INFINITY;
LABEL_41:
          double v58 = *(double *)&v59;
          goto LABEL_42;
        }
        if (v47 < (uint64_t)0xFFFFFFFF80000000) {
          break;
        }
      }
      if (!v47)
      {
        float v62 = 0.0;
        goto LABEL_43;
      }
      double v58 = (double)(int)v47;
LABEL_42:
      int __e = 0;
      long double v60 = frexp(v58, &__e);
      double v61 = ldexp(v60, 11);
      float v62 = ldexp(round(v61), __e - 11);
LABEL_43:
      float v63 = v62 * v31;
      float v64 = 0.0;
      if (v63 != 0.0)
      {
        int __e = 0;
        long double v65 = frexp(v63, &__e);
        double v66 = ldexp(v65, 11);
        float v64 = ldexp(round(v66), __e - 11);
      }
      std::function<float ()(float)>::operator()(a12, v64);
      if (v67 == INFINITY)
      {
        LOBYTE(v68) = -1;
      }
      else if (v67 == -INFINITY)
      {
        LOBYTE(v68) = 0;
      }
      else
      {
        int v69 = llroundf(v67);
        if (v69 >= 255) {
          int v69 = 255;
        }
        int v68 = v69 & ~(v69 >> 31);
      }
      uint64_t v71 = (unsigned char *)v28[1];
      unint64_t v70 = v28[2];
      if ((unint64_t)v71 >= v70)
      {
        uint64_t v73 = a2;
        uint64_t v74 = a6;
        uint64_t v75 = a3;
        size_t v76 = v15;
        unint64_t v77 = *v28;
        uint64_t v78 = &v71[-*v28];
        unint64_t v79 = (unint64_t)(v78 + 1);
        if ((uint64_t)(v78 + 1) < 0) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v80 = v70 - v77;
        if (2 * v80 > v79) {
          unint64_t v79 = 2 * v80;
        }
        if (v80 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v81 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v81 = v79;
        }
        if (v81) {
          uint64_t v82 = (char *)operator new(v81);
        }
        else {
          uint64_t v82 = 0;
        }
        uint64_t v83 = &v78[(void)v82];
        __int16 v84 = &v78[(void)v82];
        unsigned char *v84 = v68;
        uint64_t v72 = v84 + 1;
        if (v71 == (unsigned char *)v77)
        {
          __int16 v87 = a9;
        }
        else
        {
          __int16 v85 = &v71[~v77];
          do
          {
            char v86 = *--v71;
            (v85--)[(void)v82] = v86;
          }
          while (v71 != (unsigned char *)v77);
          __int16 v87 = a9;
          uint64_t v71 = (unsigned char *)*a9;
          uint64_t v83 = v82;
        }
        unint64_t *v87 = (unint64_t)v83;
        v87[1] = (unint64_t)v72;
        v87[2] = (unint64_t)&v82[v81];
        size_t v15 = v76;
        float v28 = v87;
        if (v71) {
          operator delete(v71);
        }
        a3 = v75;
        a6 = v74;
        a2 = v73;
        signed int v24 = v88;
      }
      else
      {
        *uint64_t v71 = v68;
        uint64_t v72 = v71 + 1;
      }
      v28[1] = (unint64_t)v72;
      if (++v29 == v15) {
        return;
      }
    }
    *(double *)&unint64_t v59 = -INFINITY;
    goto LABEL_41;
  }
}

void sub_210BB2CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  long long v11 = *(void **)a10;
  if (*(void *)a10)
  {
    *(void *)(a10 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<signed char,MIL::Fp16>(size_t __sz@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, __int16 a4@<W3>, __int16 a5@<W4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  size_t v15 = __sz;
  __int16 v94 = a4;
  __int16 v93 = a5;
  __int16 v92 = a10;
  __int16 v91 = a11;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<unsigned char>::reserve(a9, __sz);
  double v18 = ldexp(1.0, (int)a6 + 20);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v92);
  float v20 = v19;
  float v21 = ldexp(1.0, (int)a6 + 20 + a7);
  float v22 = v20 * v21;
  unsigned int v23 = llroundf(v22);
  if (fabsf(v22) >= 1.0) {
    signed int v24 = v23;
  }
  else {
    signed int v24 = 0;
  }
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v91);
  float v26 = v25;
  double v27 = exp2(-(double)((int)a6 + 20 + a8));
  float v28 = a9;
  if (v15)
  {
    uint64_t v29 = 0;
    float v30 = v18;
    uint64_t v90 = v24;
    float v31 = v27 * v26;
    signed int v88 = v24;
    while (1)
    {
      __int16 v32 = *(_WORD *)(a2 + 2 * v29);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v94);
      float v34 = v33;
      LOWORD(__e) = v32;
      MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      float v36 = v35;
      int v37 = ilogbf(v35);
      if (v37 <= -14) {
        int v38 = -14;
      }
      else {
        int v38 = v37;
      }
      int v39 = ilogbf(v34);
      if (v39 <= -14) {
        int v40 = -14;
      }
      else {
        int v40 = v39;
      }
      int v41 = v38 + a6 + v40;
      uint64_t v42 = v90 + (int)llroundf((float)(v34 * v36) * v30);
      if (v42 >= (uint64_t)0xFFFFFFFF80000000) {
        int v43 = v42;
      }
      else {
        int v43 = -8388608;
      }
      int v44 = 2 * (v42 < (uint64_t)0xFFFFFFFF80000000);
      BOOL v45 = v42 <= 0x7FFFFFFF;
      if (v42 <= 0x7FFFFFFF) {
        int v46 = v43;
      }
      else {
        int v46 = 2139095040;
      }
      if (!v45) {
        int v44 = 1;
      }
      LODWORD(v47) = v41 >= -20 ? v46 : v24;
      int v48 = v41 >= -20 ? v44 : 0;
      __int16 v49 = *(_WORD *)(a3 + 2 * v29);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v93);
      if (v48 == 2) {
        break;
      }
      if (v48) {
        goto LABEL_38;
      }
      float v51 = v50;
      LOWORD(__e) = v49;
      MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      float v53 = v52;
      int v54 = ilogbf(v52);
      if (v54 <= -14) {
        int v55 = -14;
      }
      else {
        int v55 = v54;
      }
      int v56 = ilogbf(v51);
      if (v56 <= -14) {
        int v57 = -14;
      }
      else {
        int v57 = v56;
      }
      if (v55 + (int)a6 + v57 >= -20)
      {
        uint64_t v47 = (int)llroundf((float)(v51 * v53) * v30) + (uint64_t)(int)v47;
        if (v47 > 0x7FFFFFFF)
        {
LABEL_38:
          *(double *)&unint64_t v59 = INFINITY;
LABEL_41:
          double v58 = *(double *)&v59;
          goto LABEL_42;
        }
        if (v47 < (uint64_t)0xFFFFFFFF80000000) {
          break;
        }
      }
      if (!v47)
      {
        float v62 = 0.0;
        goto LABEL_43;
      }
      double v58 = (double)(int)v47;
LABEL_42:
      int __e = 0;
      long double v60 = frexp(v58, &__e);
      double v61 = ldexp(v60, 11);
      float v62 = ldexp(round(v61), __e - 11);
LABEL_43:
      float v63 = v62 * v31;
      float v64 = 0.0;
      if (v63 != 0.0)
      {
        int __e = 0;
        long double v65 = frexp(v63, &__e);
        double v66 = ldexp(v65, 11);
        float v64 = ldexp(round(v66), __e - 11);
      }
      std::function<float ()(float)>::operator()(a12, v64);
      if (v67 == INFINITY)
      {
        char v68 = 127;
      }
      else if (v67 == -INFINITY)
      {
        char v68 = 0x80;
      }
      else
      {
        int v69 = llroundf(v67);
        if (v69 >= 127) {
          int v69 = 127;
        }
        if (v69 <= -128) {
          char v68 = 0x80;
        }
        else {
          char v68 = v69;
        }
      }
      uint64_t v71 = (unsigned char *)v28[1];
      unint64_t v70 = v28[2];
      if ((unint64_t)v71 >= v70)
      {
        uint64_t v73 = a2;
        uint64_t v74 = a6;
        uint64_t v75 = a3;
        size_t v76 = v15;
        unint64_t v77 = *v28;
        uint64_t v78 = &v71[-*v28];
        unint64_t v79 = (unint64_t)(v78 + 1);
        if ((uint64_t)(v78 + 1) < 0) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v80 = v70 - v77;
        if (2 * v80 > v79) {
          unint64_t v79 = 2 * v80;
        }
        if (v80 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v81 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v81 = v79;
        }
        if (v81) {
          uint64_t v82 = (char *)operator new(v81);
        }
        else {
          uint64_t v82 = 0;
        }
        uint64_t v83 = &v78[(void)v82];
        __int16 v84 = &v78[(void)v82];
        char *v84 = v68;
        uint64_t v72 = v84 + 1;
        if (v71 == (unsigned char *)v77)
        {
          __int16 v87 = a9;
        }
        else
        {
          __int16 v85 = &v71[~v77];
          do
          {
            char v86 = *--v71;
            (v85--)[(void)v82] = v86;
          }
          while (v71 != (unsigned char *)v77);
          __int16 v87 = a9;
          uint64_t v71 = (unsigned char *)*a9;
          uint64_t v83 = v82;
        }
        unint64_t *v87 = (unint64_t)v83;
        v87[1] = (unint64_t)v72;
        v87[2] = (unint64_t)&v82[v81];
        size_t v15 = v76;
        float v28 = v87;
        if (v71) {
          operator delete(v71);
        }
        a3 = v75;
        a6 = v74;
        a2 = v73;
        signed int v24 = v88;
      }
      else
      {
        *uint64_t v71 = v68;
        uint64_t v72 = v71 + 1;
      }
      v28[1] = (unint64_t)v72;
      if (++v29 == v15) {
        return;
      }
    }
    *(double *)&unint64_t v59 = -INFINITY;
    goto LABEL_41;
  }
}

void sub_210BB3130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  long long v11 = *(void **)a10;
  if (*(void *)a10)
  {
    *(void *)(a10 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<MIL::Fp16,unsigned char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, __int16 a4@<W3>, __int16 a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, __int16 a10, int a11, __int16 a12, uint64_t a13)
{
  __int16 v75 = a4;
  __int16 v74 = a5;
  __int16 v73 = a10;
  __int16 v72 = a12;
  *(void *)(a9 + 8) = 0;
  *(void *)(a9 + 16) = 0;
  *(void *)a9 = 0;
  std::vector<MIL::Fp16>::reserve((void **)a9, a3);
  double v20 = ldexp(1.0, a6 + 10);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v73);
  float v22 = v21;
  float v23 = ldexp(1.0, a6 + 10 + a7);
  float v24 = v22 * v23;
  unsigned int v25 = llroundf(v24);
  if (fabsf(v24) < 1.0) {
    unsigned int v25 = 0;
  }
  signed int v71 = v25;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v72);
  float v27 = v26;
  double v28 = exp2(-(double)(a6 + 10 + a8));
  if (a3)
  {
    uint64_t v29 = 0;
    float v30 = v20;
    int v31 = -20 - a6;
    float v32 = v28 * v27;
    while (1)
    {
      unsigned int v33 = *(unsigned __int8 *)(a1 + v29);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v75);
      float v35 = v34;
      int v36 = ilogbf(v34);
      int v37 = v36 <= -14 ? -14 : v36;
      if (v37 >= v31)
      {
        uint64_t v40 = v71 + (uint64_t)(int)llroundf((float)(v35 * (float)v33) * v30);
        if (v40 <= 0x7FFFFFFF)
        {
          LODWORD(v39) = v40 >= (uint64_t)0xFFFFFFFF80000000 ? v40 : -8388608;
          int v38 = 2 * (v40 < (uint64_t)0xFFFFFFFF80000000);
        }
        else
        {
          int v38 = 1;
          LODWORD(v39) = 2139095040;
        }
      }
      else
      {
        int v38 = 0;
        LODWORD(v39) = v71;
      }
      unsigned int v41 = *(unsigned __int8 *)(a2 + v29);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v74);
      if (v38 == 2) {
        break;
      }
      if (v38) {
        goto LABEL_25;
      }
      float v43 = v42;
      int v44 = ilogbf(v42);
      if (v44 <= -14) {
        int v45 = -14;
      }
      else {
        int v45 = v44;
      }
      if (v45 >= v31)
      {
        uint64_t v39 = (int)llroundf((float)(v43 * (float)v41) * v30) + (uint64_t)(int)v39;
        if (v39 > 0x7FFFFFFF)
        {
LABEL_25:
          *(double *)&unint64_t v47 = INFINITY;
LABEL_28:
          double v46 = *(double *)&v47;
          goto LABEL_29;
        }
        if (v39 < (uint64_t)0xFFFFFFFF80000000) {
          break;
        }
      }
      if (!v39)
      {
        float v50 = 0.0;
        goto LABEL_30;
      }
      double v46 = (double)(int)v39;
LABEL_29:
      int __e = 0;
      long double v48 = frexp(v46, &__e);
      double v49 = ldexp(v48, 11);
      float v50 = ldexp(round(v49), __e - 11);
LABEL_30:
      float v51 = v50 * v32;
      float v52 = 0.0;
      if (v51 != 0.0)
      {
        int __e = 0;
        long double v53 = frexp(v51, &__e);
        double v54 = ldexp(v53, 11);
        float v52 = ldexp(round(v54), __e - 11);
      }
      int v55 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(a13, v52);
      __int16 v57 = MIL::Fp16::FromFloat(v55, v56);
      __int16 v58 = v57;
      long double v60 = *(_WORD **)(a9 + 8);
      unint64_t v59 = *(void *)(a9 + 16);
      if ((unint64_t)v60 >= v59)
      {
        float v62 = *(_WORD **)a9;
        uint64_t v63 = (uint64_t)v60 - *(void *)a9;
        if (v63 <= -3) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v64 = v63 >> 1;
        unint64_t v65 = v59 - (void)v62;
        if (v65 <= (v63 >> 1) + 1) {
          unint64_t v66 = v64 + 1;
        }
        else {
          unint64_t v66 = v65;
        }
        if (v65 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v67 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v67 = v66;
        }
        if (v67)
        {
          char v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>(a9 + 16, v67);
          float v62 = *(_WORD **)a9;
          long double v60 = *(_WORD **)(a9 + 8);
        }
        else
        {
          char v68 = 0;
        }
        int v69 = &v68[2 * v64];
        *(_WORD *)int v69 = v58;
        double v61 = v69 + 2;
        while (v60 != v62)
        {
          __int16 v70 = *--v60;
          *((_WORD *)v69 - 1) = v70;
          v69 -= 2;
        }
        *(void *)a9 = v69;
        *(void *)(a9 + 8) = v61;
        *(void *)(a9 + 16) = &v68[2 * v67];
        if (v62) {
          operator delete(v62);
        }
      }
      else
      {
        *long double v60 = v57;
        double v61 = v60 + 1;
      }
      *(void *)(a9 + 8) = v61;
      if (++v29 == a3) {
        return;
      }
    }
    *(double *)&unint64_t v47 = -INFINITY;
    goto LABEL_28;
  }
}

void sub_210BB34D4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<unsigned char,unsigned char>(size_t __sz@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, __int16 a4@<W3>, __int16 a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  size_t v15 = __sz;
  double v17 = a9;
  __int16 v81 = a4;
  __int16 v80 = a5;
  __int16 v79 = a10;
  __int16 v78 = a11;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<unsigned char>::reserve(a9, __sz);
  double v18 = ldexp(1.0, a6 + 10);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v79);
  float v20 = v19;
  float v21 = ldexp(1.0, a6 + 10 + a7);
  float v22 = v20 * v21;
  unsigned int v23 = llroundf(v22);
  if (fabsf(v22) < 1.0) {
    unsigned int v23 = 0;
  }
  signed int v75 = v23;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v78);
  float v25 = v24;
  double v26 = exp2(-(double)(a6 + 10 + a8));
  if (v15)
  {
    uint64_t v27 = 0;
    float v29 = v18;
    uint64_t v30 = (-20 - a6);
    float v31 = v26 * v25;
    while (1)
    {
      unsigned int v32 = *(unsigned __int8 *)(a2 + v27);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v81);
      float v34 = v33;
      int v35 = ilogbf(v33);
      int v36 = v35 <= -14 ? -14 : v35;
      if (v36 >= (int)v30)
      {
        uint64_t v39 = v75 + (uint64_t)(int)llroundf((float)(v34 * (float)v32) * v29);
        if (v39 <= 0x7FFFFFFF)
        {
          LODWORD(v38) = v39 >= (uint64_t)0xFFFFFFFF80000000 ? v39 : -8388608;
          int v37 = 2 * (v39 < (uint64_t)0xFFFFFFFF80000000);
        }
        else
        {
          int v37 = 1;
          LODWORD(v38) = 2139095040;
        }
      }
      else
      {
        int v37 = 0;
        LODWORD(v38) = v75;
      }
      unsigned int v40 = *(unsigned __int8 *)(a3 + v27);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v80);
      if (v37 == 2) {
        break;
      }
      if (v37) {
        goto LABEL_25;
      }
      float v42 = v41;
      int v43 = ilogbf(v41);
      if (v43 <= -14) {
        int v44 = -14;
      }
      else {
        int v44 = v43;
      }
      if (v44 >= (int)v30)
      {
        uint64_t v38 = (int)llroundf((float)(v42 * (float)v40) * v29) + (uint64_t)(int)v38;
        if (v38 > 0x7FFFFFFF)
        {
LABEL_25:
          *(double *)&unint64_t v46 = INFINITY;
LABEL_28:
          double v45 = *(double *)&v46;
          goto LABEL_29;
        }
        if (v38 < (uint64_t)0xFFFFFFFF80000000) {
          break;
        }
      }
      if (!v38)
      {
        float v49 = 0.0;
        goto LABEL_30;
      }
      double v45 = (double)(int)v38;
LABEL_29:
      int __e = 0;
      long double v47 = frexp(v45, &__e);
      double v48 = ldexp(v47, 11);
      float v49 = ldexp(round(v48), __e - 11);
LABEL_30:
      float v50 = v49 * v31;
      float v51 = 0.0;
      if (v50 != 0.0)
      {
        int __e = 0;
        long double v52 = frexp(v50, &__e);
        double v53 = ldexp(v52, 11);
        float v51 = ldexp(round(v53), __e - 11);
      }
      std::function<float ()(float)>::operator()(a12, v51);
      if (v54 == INFINITY)
      {
        LOBYTE(v55) = -1;
      }
      else if (v54 == -INFINITY)
      {
        LOBYTE(v55) = 0;
      }
      else
      {
        int v56 = llroundf(v54);
        if (v56 >= 255) {
          int v56 = 255;
        }
        int v55 = v56 & ~(v56 >> 31);
      }
      __int16 v58 = (unsigned char *)v17[1];
      unint64_t v57 = v17[2];
      if ((unint64_t)v58 >= v57)
      {
        uint64_t v60 = a12;
        size_t v61 = v15;
        uint64_t v62 = a3;
        unint64_t v63 = *v17;
        uint64_t v64 = &v58[-*v17];
        unint64_t v65 = (unint64_t)(v64 + 1);
        if ((uint64_t)(v64 + 1) < 0) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v66 = v30;
        unint64_t v67 = v57 - v63;
        if (2 * v67 > v65) {
          unint64_t v65 = 2 * v67;
        }
        if (v67 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v68 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v68 = v65;
        }
        if (v68) {
          int v69 = (char *)operator new(v68);
        }
        else {
          int v69 = 0;
        }
        __int16 v70 = &v64[(void)v69];
        signed int v71 = &v64[(void)v69];
        *signed int v71 = v55;
        unint64_t v59 = v71 + 1;
        if (v58 == (unsigned char *)v63)
        {
          __int16 v74 = a9;
        }
        else
        {
          __int16 v72 = &v58[~v63];
          do
          {
            char v73 = *--v58;
            (v72--)[(void)v69] = v73;
          }
          while (v58 != (unsigned char *)v63);
          __int16 v74 = a9;
          __int16 v58 = (unsigned char *)*a9;
          __int16 v70 = v69;
        }
        *__int16 v74 = (unint64_t)v70;
        v74[1] = (unint64_t)v59;
        v74[2] = (unint64_t)&v69[v68];
        a3 = v62;
        if (v58) {
          operator delete(v58);
        }
        size_t v15 = v61;
        a12 = v60;
        uint64_t v30 = v66;
        double v17 = a9;
      }
      else
      {
        *__int16 v58 = v55;
        unint64_t v59 = v58 + 1;
      }
      v17[1] = (unint64_t)v59;
      if (++v27 == v15) {
        return;
      }
    }
    *(double *)&unint64_t v46 = -INFINITY;
    goto LABEL_28;
  }
}

void sub_210BB38F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  long long v13 = *v11;
  if (*v11)
  {
    *(void *)(a11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<signed char,unsigned char>(size_t __sz@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, __int16 a4@<W3>, __int16 a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  size_t v15 = __sz;
  double v17 = a9;
  __int16 v81 = a4;
  __int16 v80 = a5;
  __int16 v79 = a10;
  __int16 v78 = a11;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<unsigned char>::reserve(a9, __sz);
  double v18 = ldexp(1.0, a6 + 10);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v79);
  float v20 = v19;
  float v21 = ldexp(1.0, a6 + 10 + a7);
  float v22 = v20 * v21;
  unsigned int v23 = llroundf(v22);
  if (fabsf(v22) < 1.0) {
    unsigned int v23 = 0;
  }
  signed int v75 = v23;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v78);
  float v25 = v24;
  double v26 = exp2(-(double)(a6 + 10 + a8));
  if (v15)
  {
    uint64_t v27 = 0;
    float v29 = v18;
    uint64_t v30 = (-20 - a6);
    float v31 = v26 * v25;
    while (1)
    {
      unsigned int v32 = *(unsigned __int8 *)(a2 + v27);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v81);
      float v34 = v33;
      int v35 = ilogbf(v33);
      int v36 = v35 <= -14 ? -14 : v35;
      if (v36 >= (int)v30)
      {
        uint64_t v39 = v75 + (uint64_t)(int)llroundf((float)(v34 * (float)v32) * v29);
        if (v39 <= 0x7FFFFFFF)
        {
          LODWORD(v38) = v39 >= (uint64_t)0xFFFFFFFF80000000 ? v39 : -8388608;
          int v37 = 2 * (v39 < (uint64_t)0xFFFFFFFF80000000);
        }
        else
        {
          int v37 = 1;
          LODWORD(v38) = 2139095040;
        }
      }
      else
      {
        int v37 = 0;
        LODWORD(v38) = v75;
      }
      unsigned int v40 = *(unsigned __int8 *)(a3 + v27);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v80);
      if (v37 == 2) {
        break;
      }
      if (v37) {
        goto LABEL_25;
      }
      float v42 = v41;
      int v43 = ilogbf(v41);
      if (v43 <= -14) {
        int v44 = -14;
      }
      else {
        int v44 = v43;
      }
      if (v44 >= (int)v30)
      {
        uint64_t v38 = (int)llroundf((float)(v42 * (float)v40) * v29) + (uint64_t)(int)v38;
        if (v38 > 0x7FFFFFFF)
        {
LABEL_25:
          *(double *)&unint64_t v46 = INFINITY;
LABEL_28:
          double v45 = *(double *)&v46;
          goto LABEL_29;
        }
        if (v38 < (uint64_t)0xFFFFFFFF80000000) {
          break;
        }
      }
      if (!v38)
      {
        float v49 = 0.0;
        goto LABEL_30;
      }
      double v45 = (double)(int)v38;
LABEL_29:
      int __e = 0;
      long double v47 = frexp(v45, &__e);
      double v48 = ldexp(v47, 11);
      float v49 = ldexp(round(v48), __e - 11);
LABEL_30:
      float v50 = v49 * v31;
      float v51 = 0.0;
      if (v50 != 0.0)
      {
        int __e = 0;
        long double v52 = frexp(v50, &__e);
        double v53 = ldexp(v52, 11);
        float v51 = ldexp(round(v53), __e - 11);
      }
      std::function<float ()(float)>::operator()(a12, v51);
      if (v54 == INFINITY)
      {
        char v55 = 127;
      }
      else if (v54 == -INFINITY)
      {
        char v55 = 0x80;
      }
      else
      {
        int v56 = llroundf(v54);
        if (v56 >= 127) {
          int v56 = 127;
        }
        if (v56 <= -128) {
          char v55 = 0x80;
        }
        else {
          char v55 = v56;
        }
      }
      __int16 v58 = (unsigned char *)v17[1];
      unint64_t v57 = v17[2];
      if ((unint64_t)v58 >= v57)
      {
        uint64_t v60 = a12;
        size_t v61 = v15;
        uint64_t v62 = a3;
        unint64_t v63 = *v17;
        uint64_t v64 = &v58[-*v17];
        unint64_t v65 = (unint64_t)(v64 + 1);
        if ((uint64_t)(v64 + 1) < 0) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v66 = v30;
        unint64_t v67 = v57 - v63;
        if (2 * v67 > v65) {
          unint64_t v65 = 2 * v67;
        }
        if (v67 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v68 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v68 = v65;
        }
        if (v68) {
          int v69 = (char *)operator new(v68);
        }
        else {
          int v69 = 0;
        }
        __int16 v70 = &v64[(void)v69];
        signed int v71 = &v64[(void)v69];
        *signed int v71 = v55;
        unint64_t v59 = v71 + 1;
        if (v58 == (unsigned char *)v63)
        {
          __int16 v74 = a9;
        }
        else
        {
          __int16 v72 = &v58[~v63];
          do
          {
            char v73 = *--v58;
            (v72--)[(void)v69] = v73;
          }
          while (v58 != (unsigned char *)v63);
          __int16 v74 = a9;
          __int16 v58 = (unsigned char *)*a9;
          __int16 v70 = v69;
        }
        *__int16 v74 = (unint64_t)v70;
        v74[1] = (unint64_t)v59;
        v74[2] = (unint64_t)&v69[v68];
        a3 = v62;
        if (v58) {
          operator delete(v58);
        }
        size_t v15 = v61;
        a12 = v60;
        uint64_t v30 = v66;
        double v17 = a9;
      }
      else
      {
        *__int16 v58 = v55;
        unint64_t v59 = v58 + 1;
      }
      v17[1] = (unint64_t)v59;
      if (++v27 == v15) {
        return;
      }
    }
    *(double *)&unint64_t v46 = -INFINITY;
    goto LABEL_28;
  }
}

void sub_210BB3D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  long long v13 = *v11;
  if (*v11)
  {
    *(void *)(a11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<MIL::Fp16,signed char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, __int16 a4@<W3>, __int16 a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, __int16 a10, int a11, __int16 a12, uint64_t a13)
{
  __int16 v75 = a4;
  __int16 v74 = a5;
  __int16 v73 = a10;
  __int16 v72 = a12;
  *(void *)(a9 + 8) = 0;
  *(void *)(a9 + 16) = 0;
  *(void *)a9 = 0;
  std::vector<MIL::Fp16>::reserve((void **)a9, a3);
  double v20 = ldexp(1.0, a6 + 10);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v73);
  float v22 = v21;
  float v23 = ldexp(1.0, a6 + 10 + a7);
  float v24 = v22 * v23;
  unsigned int v25 = llroundf(v24);
  if (fabsf(v24) < 1.0) {
    unsigned int v25 = 0;
  }
  signed int v71 = v25;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v72);
  float v27 = v26;
  double v28 = exp2(-(double)(a6 + 10 + a8));
  if (a3)
  {
    uint64_t v29 = 0;
    float v30 = v20;
    int v31 = -20 - a6;
    float v32 = v28 * v27;
    while (1)
    {
      char v33 = *(unsigned char *)(a1 + v29);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v75);
      float v35 = v34;
      int v36 = ilogbf(v34);
      int v37 = v36 <= -14 ? -14 : v36;
      if (v37 >= v31)
      {
        uint64_t v40 = v71 + (uint64_t)(int)llroundf((float)(v35 * (float)v33) * v30);
        if (v40 <= 0x7FFFFFFF)
        {
          LODWORD(v39) = v40 >= (uint64_t)0xFFFFFFFF80000000 ? v40 : -8388608;
          int v38 = 2 * (v40 < (uint64_t)0xFFFFFFFF80000000);
        }
        else
        {
          int v38 = 1;
          LODWORD(v39) = 2139095040;
        }
      }
      else
      {
        int v38 = 0;
        LODWORD(v39) = v71;
      }
      char v41 = *(unsigned char *)(a2 + v29);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v74);
      if (v38 == 2) {
        break;
      }
      if (v38) {
        goto LABEL_25;
      }
      float v43 = v42;
      int v44 = ilogbf(v42);
      if (v44 <= -14) {
        int v45 = -14;
      }
      else {
        int v45 = v44;
      }
      if (v45 >= v31)
      {
        uint64_t v39 = (int)llroundf((float)(v43 * (float)v41) * v30) + (uint64_t)(int)v39;
        if (v39 > 0x7FFFFFFF)
        {
LABEL_25:
          *(double *)&unint64_t v47 = INFINITY;
LABEL_28:
          double v46 = *(double *)&v47;
          goto LABEL_29;
        }
        if (v39 < (uint64_t)0xFFFFFFFF80000000) {
          break;
        }
      }
      if (!v39)
      {
        float v50 = 0.0;
        goto LABEL_30;
      }
      double v46 = (double)(int)v39;
LABEL_29:
      int __e = 0;
      long double v48 = frexp(v46, &__e);
      double v49 = ldexp(v48, 11);
      float v50 = ldexp(round(v49), __e - 11);
LABEL_30:
      float v51 = v50 * v32;
      float v52 = 0.0;
      if (v51 != 0.0)
      {
        int __e = 0;
        long double v53 = frexp(v51, &__e);
        double v54 = ldexp(v53, 11);
        float v52 = ldexp(round(v54), __e - 11);
      }
      char v55 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(a13, v52);
      __int16 v57 = MIL::Fp16::FromFloat(v55, v56);
      __int16 v58 = v57;
      uint64_t v60 = *(_WORD **)(a9 + 8);
      unint64_t v59 = *(void *)(a9 + 16);
      if ((unint64_t)v60 >= v59)
      {
        uint64_t v62 = *(_WORD **)a9;
        uint64_t v63 = (uint64_t)v60 - *(void *)a9;
        if (v63 <= -3) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v64 = v63 >> 1;
        unint64_t v65 = v59 - (void)v62;
        if (v65 <= (v63 >> 1) + 1) {
          unint64_t v66 = v64 + 1;
        }
        else {
          unint64_t v66 = v65;
        }
        if (v65 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v67 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v67 = v66;
        }
        if (v67)
        {
          size_t v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>(a9 + 16, v67);
          uint64_t v62 = *(_WORD **)a9;
          uint64_t v60 = *(_WORD **)(a9 + 8);
        }
        else
        {
          size_t v68 = 0;
        }
        int v69 = &v68[2 * v64];
        *(_WORD *)int v69 = v58;
        size_t v61 = v69 + 2;
        while (v60 != v62)
        {
          __int16 v70 = *--v60;
          *((_WORD *)v69 - 1) = v70;
          v69 -= 2;
        }
        *(void *)a9 = v69;
        *(void *)(a9 + 8) = v61;
        *(void *)(a9 + 16) = &v68[2 * v67];
        if (v62) {
          operator delete(v62);
        }
      }
      else
      {
        *uint64_t v60 = v57;
        size_t v61 = v60 + 1;
      }
      *(void *)(a9 + 8) = v61;
      if (++v29 == a3) {
        return;
      }
    }
    *(double *)&unint64_t v47 = -INFINITY;
    goto LABEL_28;
  }
}

void sub_210BB40D8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<unsigned char,signed char>(size_t __sz@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, __int16 a4@<W3>, __int16 a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  size_t v15 = __sz;
  double v17 = a9;
  __int16 v81 = a4;
  __int16 v80 = a5;
  __int16 v79 = a10;
  __int16 v78 = a11;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<unsigned char>::reserve(a9, __sz);
  double v18 = ldexp(1.0, a6 + 10);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v79);
  float v20 = v19;
  float v21 = ldexp(1.0, a6 + 10 + a7);
  float v22 = v20 * v21;
  unsigned int v23 = llroundf(v22);
  if (fabsf(v22) < 1.0) {
    unsigned int v23 = 0;
  }
  signed int v75 = v23;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v78);
  float v25 = v24;
  double v26 = exp2(-(double)(a6 + 10 + a8));
  if (v15)
  {
    uint64_t v27 = 0;
    float v29 = v18;
    uint64_t v30 = (-20 - a6);
    float v31 = v26 * v25;
    while (1)
    {
      char v32 = *(unsigned char *)(a2 + v27);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v81);
      float v34 = v33;
      int v35 = ilogbf(v33);
      int v36 = v35 <= -14 ? -14 : v35;
      if (v36 >= (int)v30)
      {
        uint64_t v39 = v75 + (uint64_t)(int)llroundf((float)(v34 * (float)v32) * v29);
        if (v39 <= 0x7FFFFFFF)
        {
          LODWORD(v38) = v39 >= (uint64_t)0xFFFFFFFF80000000 ? v39 : -8388608;
          int v37 = 2 * (v39 < (uint64_t)0xFFFFFFFF80000000);
        }
        else
        {
          int v37 = 1;
          LODWORD(v38) = 2139095040;
        }
      }
      else
      {
        int v37 = 0;
        LODWORD(v38) = v75;
      }
      char v40 = *(unsigned char *)(a3 + v27);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v80);
      if (v37 == 2) {
        break;
      }
      if (v37) {
        goto LABEL_25;
      }
      float v42 = v41;
      int v43 = ilogbf(v41);
      if (v43 <= -14) {
        int v44 = -14;
      }
      else {
        int v44 = v43;
      }
      if (v44 >= (int)v30)
      {
        uint64_t v38 = (int)llroundf((float)(v42 * (float)v40) * v29) + (uint64_t)(int)v38;
        if (v38 > 0x7FFFFFFF)
        {
LABEL_25:
          *(double *)&unint64_t v46 = INFINITY;
LABEL_28:
          double v45 = *(double *)&v46;
          goto LABEL_29;
        }
        if (v38 < (uint64_t)0xFFFFFFFF80000000) {
          break;
        }
      }
      if (!v38)
      {
        float v49 = 0.0;
        goto LABEL_30;
      }
      double v45 = (double)(int)v38;
LABEL_29:
      int __e = 0;
      long double v47 = frexp(v45, &__e);
      double v48 = ldexp(v47, 11);
      float v49 = ldexp(round(v48), __e - 11);
LABEL_30:
      float v50 = v49 * v31;
      float v51 = 0.0;
      if (v50 != 0.0)
      {
        int __e = 0;
        long double v52 = frexp(v50, &__e);
        double v53 = ldexp(v52, 11);
        float v51 = ldexp(round(v53), __e - 11);
      }
      std::function<float ()(float)>::operator()(a12, v51);
      if (v54 == INFINITY)
      {
        LOBYTE(v55) = -1;
      }
      else if (v54 == -INFINITY)
      {
        LOBYTE(v55) = 0;
      }
      else
      {
        int v56 = llroundf(v54);
        if (v56 >= 255) {
          int v56 = 255;
        }
        int v55 = v56 & ~(v56 >> 31);
      }
      __int16 v58 = (unsigned char *)v17[1];
      unint64_t v57 = v17[2];
      if ((unint64_t)v58 >= v57)
      {
        uint64_t v60 = a12;
        size_t v61 = v15;
        uint64_t v62 = a3;
        unint64_t v63 = *v17;
        uint64_t v64 = &v58[-*v17];
        unint64_t v65 = (unint64_t)(v64 + 1);
        if ((uint64_t)(v64 + 1) < 0) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v66 = v30;
        unint64_t v67 = v57 - v63;
        if (2 * v67 > v65) {
          unint64_t v65 = 2 * v67;
        }
        if (v67 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v68 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v68 = v65;
        }
        if (v68) {
          int v69 = (char *)operator new(v68);
        }
        else {
          int v69 = 0;
        }
        __int16 v70 = &v64[(void)v69];
        signed int v71 = &v64[(void)v69];
        *signed int v71 = v55;
        unint64_t v59 = v71 + 1;
        if (v58 == (unsigned char *)v63)
        {
          __int16 v74 = a9;
        }
        else
        {
          __int16 v72 = &v58[~v63];
          do
          {
            char v73 = *--v58;
            (v72--)[(void)v69] = v73;
          }
          while (v58 != (unsigned char *)v63);
          __int16 v74 = a9;
          __int16 v58 = (unsigned char *)*a9;
          __int16 v70 = v69;
        }
        *__int16 v74 = (unint64_t)v70;
        v74[1] = (unint64_t)v59;
        v74[2] = (unint64_t)&v69[v68];
        a3 = v62;
        if (v58) {
          operator delete(v58);
        }
        size_t v15 = v61;
        a12 = v60;
        uint64_t v30 = v66;
        double v17 = a9;
      }
      else
      {
        *__int16 v58 = v55;
        unint64_t v59 = v58 + 1;
      }
      v17[1] = (unint64_t)v59;
      if (++v27 == v15) {
        return;
      }
    }
    *(double *)&unint64_t v46 = -INFINITY;
    goto LABEL_28;
  }
}

void sub_210BB4500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  long long v13 = *v11;
  if (*v11)
  {
    *(void *)(a11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<signed char,signed char>(size_t __sz@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, __int16 a4@<W3>, __int16 a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  size_t v15 = __sz;
  double v17 = a9;
  __int16 v81 = a4;
  __int16 v80 = a5;
  __int16 v79 = a10;
  __int16 v78 = a11;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  std::vector<unsigned char>::reserve(a9, __sz);
  double v18 = ldexp(1.0, a6 + 10);
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v79);
  float v20 = v19;
  float v21 = ldexp(1.0, a6 + 10 + a7);
  float v22 = v20 * v21;
  unsigned int v23 = llroundf(v22);
  if (fabsf(v22) < 1.0) {
    unsigned int v23 = 0;
  }
  signed int v75 = v23;
  MIL::Fp16::GetFloat((MIL::Fp16 *)&v78);
  float v25 = v24;
  double v26 = exp2(-(double)(a6 + 10 + a8));
  if (v15)
  {
    uint64_t v27 = 0;
    float v29 = v18;
    uint64_t v30 = (-20 - a6);
    float v31 = v26 * v25;
    while (1)
    {
      char v32 = *(unsigned char *)(a2 + v27);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v81);
      float v34 = v33;
      int v35 = ilogbf(v33);
      int v36 = v35 <= -14 ? -14 : v35;
      if (v36 >= (int)v30)
      {
        uint64_t v39 = v75 + (uint64_t)(int)llroundf((float)(v34 * (float)v32) * v29);
        if (v39 <= 0x7FFFFFFF)
        {
          LODWORD(v38) = v39 >= (uint64_t)0xFFFFFFFF80000000 ? v39 : -8388608;
          int v37 = 2 * (v39 < (uint64_t)0xFFFFFFFF80000000);
        }
        else
        {
          int v37 = 1;
          LODWORD(v38) = 2139095040;
        }
      }
      else
      {
        int v37 = 0;
        LODWORD(v38) = v75;
      }
      char v40 = *(unsigned char *)(a3 + v27);
      MIL::Fp16::GetFloat((MIL::Fp16 *)&v80);
      if (v37 == 2) {
        break;
      }
      if (v37) {
        goto LABEL_25;
      }
      float v42 = v41;
      int v43 = ilogbf(v41);
      if (v43 <= -14) {
        int v44 = -14;
      }
      else {
        int v44 = v43;
      }
      if (v44 >= (int)v30)
      {
        uint64_t v38 = (int)llroundf((float)(v42 * (float)v40) * v29) + (uint64_t)(int)v38;
        if (v38 > 0x7FFFFFFF)
        {
LABEL_25:
          *(double *)&unint64_t v46 = INFINITY;
LABEL_28:
          double v45 = *(double *)&v46;
          goto LABEL_29;
        }
        if (v38 < (uint64_t)0xFFFFFFFF80000000) {
          break;
        }
      }
      if (!v38)
      {
        float v49 = 0.0;
        goto LABEL_30;
      }
      double v45 = (double)(int)v38;
LABEL_29:
      int __e = 0;
      long double v47 = frexp(v45, &__e);
      double v48 = ldexp(v47, 11);
      float v49 = ldexp(round(v48), __e - 11);
LABEL_30:
      float v50 = v49 * v31;
      float v51 = 0.0;
      if (v50 != 0.0)
      {
        int __e = 0;
        long double v52 = frexp(v50, &__e);
        double v53 = ldexp(v52, 11);
        float v51 = ldexp(round(v53), __e - 11);
      }
      std::function<float ()(float)>::operator()(a12, v51);
      if (v54 == INFINITY)
      {
        char v55 = 127;
      }
      else if (v54 == -INFINITY)
      {
        char v55 = 0x80;
      }
      else
      {
        int v56 = llroundf(v54);
        if (v56 >= 127) {
          int v56 = 127;
        }
        if (v56 <= -128) {
          char v55 = 0x80;
        }
        else {
          char v55 = v56;
        }
      }
      __int16 v58 = (unsigned char *)v17[1];
      unint64_t v57 = v17[2];
      if ((unint64_t)v58 >= v57)
      {
        uint64_t v60 = a12;
        size_t v61 = v15;
        uint64_t v62 = a3;
        unint64_t v63 = *v17;
        uint64_t v64 = &v58[-*v17];
        unint64_t v65 = (unint64_t)(v64 + 1);
        if ((uint64_t)(v64 + 1) < 0) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v66 = v30;
        unint64_t v67 = v57 - v63;
        if (2 * v67 > v65) {
          unint64_t v65 = 2 * v67;
        }
        if (v67 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v68 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v68 = v65;
        }
        if (v68) {
          int v69 = (char *)operator new(v68);
        }
        else {
          int v69 = 0;
        }
        __int16 v70 = &v64[(void)v69];
        signed int v71 = &v64[(void)v69];
        *signed int v71 = v55;
        unint64_t v59 = v71 + 1;
        if (v58 == (unsigned char *)v63)
        {
          __int16 v74 = a9;
        }
        else
        {
          __int16 v72 = &v58[~v63];
          do
          {
            char v73 = *--v58;
            (v72--)[(void)v69] = v73;
          }
          while (v58 != (unsigned char *)v63);
          __int16 v74 = a9;
          __int16 v58 = (unsigned char *)*a9;
          __int16 v70 = v69;
        }
        *__int16 v74 = (unint64_t)v70;
        v74[1] = (unint64_t)v59;
        v74[2] = (unint64_t)&v69[v68];
        a3 = v62;
        if (v58) {
          operator delete(v58);
        }
        size_t v15 = v61;
        a12 = v60;
        uint64_t v30 = v66;
        double v17 = a9;
      }
      else
      {
        *__int16 v58 = v55;
        unint64_t v59 = v58 + 1;
      }
      v17[1] = (unint64_t)v59;
      if (++v27 == v15) {
        return;
      }
    }
    *(double *)&unint64_t v46 = -INFINITY;
    goto LABEL_28;
  }
}

void sub_210BB493C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  long long v13 = *v11;
  if (*v11)
  {
    *(void *)(a11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::NeAddCpu::~NeAddCpu(MIL::ANEMachineIR::Interpreter::NeAddCpu *this)
{
}

void MIL::ANEMachineIR::Interpreter::NeConvCpu::Run(MIL::IRObject *a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  v172[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a1 + 56))(a1);
  int v7 = *(char *)(v6 + 23);
  if (v7 < 0)
  {
    if (*(void *)(v6 + 8) != 7) {
      goto LABEL_10;
    }
    uint64_t v6 = *(void *)v6;
  }
  else if (v7 != 7)
  {
    goto LABEL_10;
  }
  if (*(_DWORD *)v6 != 1667196270 || *(_DWORD *)(v6 + 3) != 1986948963)
  {
LABEL_10:
    *(_DWORD *)a3 = 1;
    uint64_t v9 = a3 + 8;
    std::string::basic_string[abi:ne180100]<0>(&v141, "ne_conv");
    unint64_t v10 = std::string::insert(&v141, 0, "Expected ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v147.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    uint64_t v12 = std::string::append(&v147, " op. Got ");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v154.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a1 + 56))(a1);
    int v15 = *(char *)(v14 + 23);
    if (v15 >= 0) {
      char v16 = (const std::string::value_type *)v14;
    }
    else {
      char v16 = *(const std::string::value_type **)v14;
    }
    if (v15 >= 0) {
      std::string::size_type v17 = *(unsigned __int8 *)(v14 + 23);
    }
    else {
      std::string::size_type v17 = *(void *)(v14 + 8);
    }
    double v18 = std::string::append(&v154, v16, v17);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    *(void *)(v9 + 16) = *((void *)&v18->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v9 = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v154.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v147.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    {
      float v20 = (void *)v141.__r_.__value_.__r.__words[0];
LABEL_217:
      operator delete(v20);
      return;
    }
    return;
  }
  uint64_t v159 = 0;
  long long v158 = 0u;
  long long v157 = 0u;
  long long v156 = 0u;
  long long v155 = 0u;
  uint64_t v151 = 0;
  int v152 = 0;
  uint64_t v153 = 0;
  std::string v148 = 0;
  unint64_t v149 = 0;
  uint64_t v150 = 0;
  ANEMachineIR::Validators::ParseConvParameterValues(a1, (uint64_t)&v151, (uint64_t)&v148, (uint64_t)&v154, (uint64_t)&v147);
  if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v147) & 1) == 0)
  {
    *(_DWORD *)a3 = 3;
    std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), "Failed to parse conv parameters.");
    goto LABEL_207;
  }
  std::string::basic_string[abi:ne180100]<0>(&v141, "acc_bias_shift");
  uint64_t ParameterValue = MIL::IROperation::TryGetParameterValue();
  if (ParameterValue
    && (*(uint64_t (**)(uint64_t))(*(void *)ParameterValue + 40))(ParameterValue)
    && (float v22 = (char *)MEMORY[0x21667B840]()) != 0)
  {
    char v134 = *v22;
  }
  else
  {
    char v134 = 0;
  }
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v141.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v141, "acc_left_shift");
  uint64_t v23 = MIL::IROperation::TryGetParameterValue();
  if (v23
    && (*(uint64_t (**)(uint64_t))(*(void *)v23 + 40))(v23)
    && (float v24 = (char *)MEMORY[0x21667B840]()) != 0)
  {
    char v133 = *v24;
  }
  else
  {
    char v133 = 0;
  }
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v141.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v141, "post_right_shift");
  uint64_t v25 = MIL::IROperation::TryGetParameterValue();
  if (v25
    && (*(uint64_t (**)(uint64_t))(*(void *)v25 + 40))(v25)
    && (double v26 = (char *)MEMORY[0x21667B840]()) != 0)
  {
    char v132 = *v26;
  }
  else
  {
    char v132 = 0;
  }
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v141.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v141, "pre_relu");
  uint64_t v27 = MIL::IROperation::TryGetParameterValue();
  char v131 = v27
      && (*(uint64_t (**)(uint64_t))(*(void *)v27 + 40))(v27)
      && (double v28 = (unsigned char *)MEMORY[0x21667B850]()) != 0
      && *v28 != 0;
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v141.__r_.__value_.__l.__data_);
  }
  float v29 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v141, "bias");
  __int16 v30 = MIL::Fp16::FromFloat(v29, 0.0);
  float v31 = (char *)operator new(2uLL);
  uint64_t v170 = v31;
  *(_WORD *)float v31 = v30;
  int v171 = v31 + 2;
  v172[0] = v31 + 2;
  MIL::ANEMachineIR::GetScalarOrVectorOrDefault<MIL::Fp16>(a1, (uint64_t)&v170, (uint64_t)v146);
  if (v170)
  {
    int v171 = v170;
    operator delete(v170);
  }
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v141.__r_.__value_.__l.__data_);
  }
  char v32 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&v141, "post_scale");
  __int16 v33 = MIL::Fp16::FromFloat(v32, 1.0);
  float v34 = (char *)operator new(2uLL);
  uint64_t v170 = v34;
  *(_WORD *)float v34 = v33;
  int v171 = v34 + 2;
  v172[0] = v34 + 2;
  MIL::ANEMachineIR::GetScalarOrVectorOrDefault<MIL::Fp16>(a1, (uint64_t)&v170, (uint64_t)v145);
  if (v170)
  {
    int v171 = v170;
    operator delete(v170);
  }
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v141.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v141, "x");
  uint64_t InterpretedTensorValue = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&v141);
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v141.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v141, "dense_kernel");
  uint64_t v36 = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&v141);
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v141.__r_.__value_.__l.__data_);
  }
  if (InterpretedTensorValue)
  {
    if (v36)
    {
      uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 32))(v36);
      int v130 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 88))(v37);
      uint64_t v129 = InterpretedTensorValue;
      if (v130 == 4)
      {
        uint64_t v38 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        uint64_t v39 = 0;
      }
      else
      {
        float v41 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(void *)v36 + 32))(v36);
        ANEMachineIR::Utils::GetStaticTensorShape(v41, v42, (uint64_t)&v141);
        int v43 = (uint64_t *)v141.__r_.__value_.__r.__words[0];
        unint64_t v44 = 1;
        while (v43 != (uint64_t *)v141.__r_.__value_.__l.__size_)
        {
          uint64_t v45 = *v43++;
          v44 *= v45;
        }
        uint64_t v170 = 0;
        int v171 = 0;
        v172[0] = 0;
        std::vector<MIL::Fp16>::reserve((void **)&v170, v44);
        if (v130 == 9)
        {
          uint64_t Data = (void *)MIL::IRTensorValue::GetDataView<signed char>();
          char v144 = v62;
          if (v44)
          {
            for (unint64_t i = 0; i != v44; ++i)
            {
              uint64_t v64 = (MIL::Fp16 *)MIL::Util::Span<signed char const,18446744073709551615ul>::operator[](&Data, i);
              __int16 v65 = MIL::Fp16::FromFloat(v64, (float)*(char *)v64);
              __int16 v66 = v65;
              unint64_t v67 = v171;
              if ((unint64_t)v171 >= v172[0])
              {
                int v69 = v170;
                uint64_t v70 = v171 - v170;
                if (v171 - v170 <= -3) {
                  std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v71 = v70 >> 1;
                if (v172[0] - (void)v170 <= (unint64_t)((v70 >> 1) + 1)) {
                  uint64_t v72 = v71 + 1;
                }
                else {
                  uint64_t v72 = v172[0] - (void)v170;
                }
                if (v172[0] - (void)v170 >= 0x7FFFFFFFFFFFFFFEuLL) {
                  uint64_t v73 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v73 = v72;
                }
                if (v73)
                {
                  __int16 v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)v172, v73);
                  int v69 = v170;
                  unint64_t v67 = v171;
                }
                else
                {
                  __int16 v74 = 0;
                }
                signed int v75 = &v74[2 * v71];
                *(_WORD *)signed int v75 = v66;
                size_t v68 = v75 + 2;
                while (v67 != v69)
                {
                  __int16 v76 = *((_WORD *)v67 - 1);
                  v67 -= 2;
                  *((_WORD *)v75 - 1) = v76;
                  v75 -= 2;
                }
                uint64_t v170 = v75;
                int v171 = v68;
                v172[0] = &v74[2 * v73];
                if (v69) {
                  operator delete(v69);
                }
              }
              else
              {
                *(_WORD *)int v171 = v65;
                size_t v68 = v67 + 2;
              }
              int v171 = v68;
            }
          }
        }
        else
        {
          if (v130 != 14)
          {
            exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Unexpected dtype copying to fp16.");
            __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          uint64_t Data = (void *)MIL::IRTensorValue::GetDataView<unsigned char>();
          char v144 = v46;
          if (v44)
          {
            for (unint64_t j = 0; j != v44; ++j)
            {
              double v48 = (MIL::Fp16 *)MIL::Util::Span<unsigned char const,18446744073709551615ul>::operator[](&Data, j);
              LOBYTE(v49) = *(unsigned char *)v48;
              __int16 v50 = MIL::Fp16::FromFloat(v48, (float)v49);
              __int16 v51 = v50;
              long double v52 = v171;
              if ((unint64_t)v171 >= v172[0])
              {
                float v54 = v170;
                uint64_t v55 = v171 - v170;
                if (v171 - v170 <= -3) {
                  std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v56 = v55 >> 1;
                if (v172[0] - (void)v170 <= (unint64_t)((v55 >> 1) + 1)) {
                  uint64_t v57 = v56 + 1;
                }
                else {
                  uint64_t v57 = v172[0] - (void)v170;
                }
                if (v172[0] - (void)v170 >= 0x7FFFFFFFFFFFFFFEuLL) {
                  uint64_t v58 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v58 = v57;
                }
                if (v58)
                {
                  unint64_t v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)v172, v58);
                  float v54 = v170;
                  long double v52 = v171;
                }
                else
                {
                  unint64_t v59 = 0;
                }
                uint64_t v60 = &v59[2 * v56];
                *(_WORD *)uint64_t v60 = v51;
                double v53 = v60 + 2;
                while (v52 != v54)
                {
                  __int16 v61 = *((_WORD *)v52 - 1);
                  v52 -= 2;
                  *((_WORD *)v60 - 1) = v61;
                  v60 -= 2;
                }
                uint64_t v170 = v60;
                int v171 = v53;
                v172[0] = &v59[2 * v58];
                if (v54) {
                  operator delete(v54);
                }
              }
              else
              {
                *(_WORD *)int v171 = v50;
                double v53 = v52 + 2;
              }
              int v171 = v53;
            }
          }
        }
        if (v141.__r_.__value_.__r.__words[0])
        {
          v141.__r_.__value_.__l.__size_ = v141.__r_.__value_.__r.__words[0];
          operator delete(v141.__r_.__value_.__l.__data_);
        }
        uint64_t v39 = v170;
        uint64_t v38 = (uint64_t)v170;
      }
      unint64_t v77 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(void *)v36 + 32))(v36);
      ANEMachineIR::Utils::GetStaticTensorShape(v77, v78, (uint64_t)&Data);
      *(_OWORD *)&v141.__r_.__value_.__r.__words[1] = 0uLL;
      uint64_t v142 = 0;
      MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction((uint64_t)a1, (uint64_t)&v141, (uint64_t)&v170);
      if (LODWORD(v141.__r_.__value_.__l.__data_))
      {
        *(_DWORD *)a3 = v141.__r_.__value_.__l.__data_;
        *(_OWORD *)(a3 + 8) = *(_OWORD *)&v141.__r_.__value_.__r.__words[1];
        *(void *)(a3 + 24) = v142;
        *(_OWORD *)&v141.__r_.__value_.__r.__words[1] = 0uLL;
        uint64_t v142 = 0;
LABEL_197:
        std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](&v170);
        if (SHIBYTE(v142) < 0) {
          operator delete((void *)v141.__r_.__value_.__l.__size_);
        }
        if (Data)
        {
          char v144 = Data;
          operator delete(Data);
        }
        if (v39) {
          operator delete(v39);
        }
        goto LABEL_203;
      }
      uint64_t v79 = (*(uint64_t (**)(void))(*(void *)v129 + 32))();
      int v80 = (*(uint64_t (**)(uint64_t))(*(void *)v79 + 88))(v79);
      uint64_t OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
      uint64_t v82 = MIL::IRValueType::AsTensorType(OutputType);
      int v83 = (*(uint64_t (**)(uint64_t))(*(void *)v82 + 88))(v82);
      std::string::basic_string[abi:ne180100]<0>(v138, "pad_mode");
      std::string::basic_string[abi:ne180100]<0>(&__p, "zero");
      uint64_t v84 = MIL::IROperation::TryGetParameterValue();
      if (v84
        && (uint64_t v84 = (*(uint64_t (**)(uint64_t))(*(void *)v84 + 40))(v84)) != 0
        && (uint64_t v84 = MEMORY[0x21667B830]()) != 0)
      {
        if (*(char *)(v84 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v140, *(const std::string::value_type **)v84, *(void *)(v84 + 8));
        }
        else
        {
          long long v85 = *(_OWORD *)v84;
          v140.__r_.__value_.__r.__words[2] = *(void *)(v84 + 16);
          *(_OWORD *)&v140.__r_.__value_.__l.__data_ = v85;
        }
      }
      else
      {
        std::string v140 = __p;
        memset(&__p, 0, sizeof(__p));
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v139 < 0) {
        operator delete(v138[0]);
      }
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v140.__r_.__value_.__l.__size_ != 4) {
          goto LABEL_138;
        }
        char v86 = (std::string *)v140.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) != 4) {
          goto LABEL_138;
        }
        char v86 = &v140;
      }
      if (LODWORD(v86->__r_.__value_.__l.__data_) == 1869768058)
      {
        int v128 = 0;
        goto LABEL_142;
      }
LABEL_138:
      uint64_t v84 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v140, "replicate");
      if ((v84 & 1) == 0)
      {
        *(_DWORD *)a3 = 3;
        std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), "Unexpected value for pad_mode.");
        goto LABEL_195;
      }
      int v128 = 1;
LABEL_142:
      __int16 v87 = MIL::Fp16::FromFloat((MIL::Fp16 *)v84, 1.0);
      switch(v80)
      {
        case 4:
          switch(v83)
          {
            case 14:
              uint64_t v117 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
              std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v168, (uint64_t)&v170);
              MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,MIL::Fp16>(v117, (uint64_t *)&v151, v38, v130, &Data, (uint64_t)&v148, (unint64_t *)&v154, v128, (unint64_t *)v138, v133, v134, v132, (uint64_t)v146, (MIL::Fp16 **)v145, 0, v126, v87, 0, v131,
                (uint64_t)v168);
              std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v168);
              (*(void (**)(unsigned __int8 **__return_ptr, MIL::IRObject *))(*(void *)a1 + 200))(&v135, a1);
              uint64_t v118 = v135;
              if (v136 == v135) {
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              }
              uint64_t v119 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
              MIL::IRValueType::AsTensorType(v119);
              MIL::IRTensorValueType::MakeUInt8Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v118, (uint64_t *)&v160);
              std::string v120 = v160;
              uint64_t v160 = 0;
              if (v120) {
                (*((void (**)(void **))*v120 + 1))(v120);
              }
              goto LABEL_193;
            case 9:
              uint64_t v109 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
              std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v167, (uint64_t)&v170);
              MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,MIL::Fp16>(v109, (uint64_t *)&v151, v38, v130, &Data, (uint64_t)&v148, (unint64_t *)&v154, v128, (unint64_t *)v138, v133, v134, v132, (uint64_t)v146, (MIL::Fp16 **)v145, 0, v126, v87, 0, v131,
                (uint64_t)v167);
              std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v167);
              (*(void (**)(unsigned __int8 **__return_ptr, MIL::IRObject *))(*(void *)a1 + 200))(&v135, a1);
              long long v110 = v135;
              if (v136 == v135) {
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              }
              uint64_t v111 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
              MIL::IRValueType::AsTensorType(v111);
              MIL::IRTensorValueType::MakeInt8Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v110, (uint64_t *)&v160);
              int v112 = v160;
              uint64_t v160 = 0;
              if (v112) {
                (*((void (**)(void **))*v112 + 1))(v112);
              }
              goto LABEL_193;
            case 4:
              uint64_t v96 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
              std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v169, (uint64_t)&v170);
              MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,MIL::Fp16>(v96, (uint64_t *)&v151, v38, v130, &Data, (uint64_t)&v148, (unint64_t *)&v154, v128, (uint64_t)v138, v133, v134, v132, (uint64_t)v146, (MIL::Fp16 **)v145, 0, v126, v87, 0, v131,
                (uint64_t)v169);
              std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v169);
              (*(void (**)(unsigned __int8 **__return_ptr, MIL::IRObject *))(*(void *)a1 + 200))(&v135, a1);
              size_t v97 = v135;
              if (v136 == v135) {
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              }
              __int16 v98 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
              MIL::IRValueType::AsTensorType(v98);
              MIL::IRTensorValueType::MakeFloat16Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v97, (uint64_t *)&v160);
              char v99 = v160;
              uint64_t v160 = 0;
              if (v99) {
                (*((void (**)(void **))*v99 + 1))(v99);
              }
              goto LABEL_193;
          }
          break;
        case 9:
          switch(v83)
          {
            case 14:
              uint64_t v105 = MIL::IRTensorValue::GetDataView<signed char>();
              std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v162, (uint64_t)&v170);
              MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,signed char>(v105, (uint64_t *)&v151, v38, v130, &Data, (uint64_t)&v148, (unint64_t *)&v154, v128, (unint64_t *)v138, v133, v134, v132, (uint64_t)v146, (MIL::Fp16 **)v145, 0, v126, v87, 0, v131,
                (uint64_t)v162);
              std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v162);
              (*(void (**)(unsigned __int8 **__return_ptr, MIL::IRObject *))(*(void *)a1 + 200))(&v135, a1);
              std::string v106 = v135;
              if (v136 == v135) {
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              }
              uint64_t v107 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
              MIL::IRValueType::AsTensorType(v107);
              MIL::IRTensorValueType::MakeUInt8Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v106, (uint64_t *)&v160);
              uint64_t v108 = v160;
              uint64_t v160 = 0;
              if (v108) {
                (*((void (**)(void **))*v108 + 1))(v108);
              }
              goto LABEL_193;
            case 9:
              uint64_t v101 = MIL::IRTensorValue::GetDataView<signed char>();
              std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v161, (uint64_t)&v170);
              MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,signed char>(v101, (uint64_t *)&v151, v38, v130, &Data, (uint64_t)&v148, (unint64_t *)&v154, v128, (unint64_t *)v138, v133, v134, v132, (uint64_t)v146, (MIL::Fp16 **)v145, 0, v126, v87, 0, v131,
                (uint64_t)v161);
              std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v161);
              (*(void (**)(unsigned __int8 **__return_ptr, MIL::IRObject *))(*(void *)a1 + 200))(&v135, a1);
              uint64_t v102 = v135;
              if (v136 == v135) {
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              }
              uint64_t v103 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
              MIL::IRValueType::AsTensorType(v103);
              MIL::IRTensorValueType::MakeInt8Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v102, (uint64_t *)&v160);
              std::string v104 = v160;
              uint64_t v160 = 0;
              if (v104) {
                (*((void (**)(void **))*v104 + 1))(v104);
              }
              goto LABEL_193;
            case 4:
              uint64_t v92 = MIL::IRTensorValue::GetDataView<signed char>();
              std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v163, (uint64_t)&v170);
              MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,signed char>(v92, (uint64_t *)&v151, v38, v130, &Data, (uint64_t)&v148, (unint64_t *)&v154, v128, (uint64_t)v138, v133, v134, v132, (uint64_t)v146, (MIL::Fp16 **)v145, 0, v126, v87, 0, v131,
                (uint64_t)v163);
              std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v163);
              (*(void (**)(unsigned __int8 **__return_ptr, MIL::IRObject *))(*(void *)a1 + 200))(&v135, a1);
              __int16 v93 = v135;
              if (v136 == v135) {
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              }
              __int16 v94 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
              MIL::IRValueType::AsTensorType(v94);
              MIL::IRTensorValueType::MakeFloat16Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v93, (uint64_t *)&v160);
              std::string v95 = v160;
              uint64_t v160 = 0;
              if (v95) {
                (*((void (**)(void **))*v95 + 1))(v95);
              }
              goto LABEL_193;
          }
          break;
        case 14:
          switch(v83)
          {
            case 14:
              uint64_t v121 = MIL::IRTensorValue::GetDataView<unsigned char>();
              std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v165, (uint64_t)&v170);
              LOBYTE(v127) = v131;
              MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<unsigned char,unsigned char>(v121, (uint64_t *)&v151, v38, v130, &Data, (uint64_t)&v148, (unint64_t *)&v154, v128, (unint64_t *)v138, v133, v134, v132, (uint64_t)v146, (MIL::Fp16 **)v145, 0, v126, v87, v127, (uint64_t)v165);
              std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v165);
              (*(void (**)(unsigned __int8 **__return_ptr, MIL::IRObject *))(*(void *)a1 + 200))(&v135, a1);
              char v122 = v135;
              if (v136 == v135) {
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              }
              uint64_t v123 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
              MIL::IRValueType::AsTensorType(v123);
              MIL::IRTensorValueType::MakeUInt8Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v122, (uint64_t *)&v160);
              std::string::size_type v124 = v160;
              uint64_t v160 = 0;
              if (v124) {
                (*((void (**)(void **))*v124 + 1))(v124);
              }
              goto LABEL_193;
            case 9:
              uint64_t v113 = MIL::IRTensorValue::GetDataView<unsigned char>();
              std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v164, (uint64_t)&v170);
              LOBYTE(v127) = v131;
              MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<signed char,unsigned char>(v113, (uint64_t *)&v151, v38, v130, &Data, (uint64_t)&v148, (unint64_t *)&v154, v128, (unint64_t *)v138, v133, v134, v132, (uint64_t)v146, (MIL::Fp16 **)v145, 0, v126, v87, v127, (uint64_t)v164);
              std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v164);
              (*(void (**)(unsigned __int8 **__return_ptr, MIL::IRObject *))(*(void *)a1 + 200))(&v135, a1);
              std::string v114 = v135;
              if (v136 == v135) {
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              }
              uint64_t v115 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
              MIL::IRValueType::AsTensorType(v115);
              MIL::IRTensorValueType::MakeInt8Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v114, (uint64_t *)&v160);
              uint64_t v116 = v160;
              uint64_t v160 = 0;
              if (v116) {
                (*((void (**)(void **))*v116 + 1))(v116);
              }
              goto LABEL_193;
            case 4:
              uint64_t v88 = MIL::IRTensorValue::GetDataView<unsigned char>();
              std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v166, (uint64_t)&v170);
              LOBYTE(v127) = v131;
              MIL::ANEMachineIR::Interpreter::NeConvCpu::ComputeValue<MIL::Fp16,unsigned char>(v88, (uint64_t *)&v151, v38, v130, &Data, (uint64_t)&v148, (unint64_t *)&v154, v128, (uint64_t)v138, v133, v134, v132, (uint64_t)v146, (MIL::Fp16 **)v145, 0, v126, v87, v127, (uint64_t)v166);
              std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v166);
              (*(void (**)(unsigned __int8 **__return_ptr, MIL::IRObject *))(*(void *)a1 + 200))(&v135, a1);
              uint64_t v89 = v135;
              if (v136 == v135) {
                std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
              }
              uint64_t v90 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
              MIL::IRValueType::AsTensorType(v90);
              MIL::IRTensorValueType::MakeFloat16Value();
              MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v89, (uint64_t *)&v160);
              __int16 v91 = v160;
              uint64_t v160 = 0;
              if (v91) {
                (*((void (**)(void **))*v91 + 1))(v91);
              }
LABEL_193:
              uint64_t v160 = (void **)&v135;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v160);
              *(_DWORD *)a3 = 0;
              std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), (char *)&unk_210C6BFE7);
              if (v138[0])
              {
                v138[1] = v138[0];
                operator delete(v138[0]);
              }
              goto LABEL_195;
          }
          break;
        default:
          unsigned __int16 v100 = "Unimplemented input dtype";
LABEL_168:
          *(_DWORD *)a3 = 3;
          std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), v100);
LABEL_195:
          if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v140.__r_.__value_.__l.__data_);
          }
          goto LABEL_197;
      }
      unsigned __int16 v100 = "Unimplemented output dtype";
      goto LABEL_168;
    }
    char v40 = "No value for dense_kernel";
  }
  else
  {
    char v40 = "No value for x";
  }
  *(_DWORD *)a3 = 2;
  std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), v40);
LABEL_203:
  if (v145[0])
  {
    v145[1] = v145[0];
    operator delete(v145[0]);
  }
  if (v146[0])
  {
    v146[1] = v146[0];
    operator delete(v146[0]);
  }
LABEL_207:
  MEMORY[0x21667B360](&v147);
  if (v148)
  {
    unint64_t v149 = v148;
    operator delete(v148);
  }
  if (v151)
  {
    int v152 = v151;
    operator delete(v151);
  }
  if ((void)v158)
  {
    *((void *)&v158 + 1) = v158;
    operator delete((void *)v158);
  }
  if (*((void *)&v156 + 1))
  {
    *(void *)&long long v157 = *((void *)&v156 + 1);
    operator delete(*((void **)&v156 + 1));
  }
  float v20 = (void *)v155;
  if ((void)v155)
  {
    *((void *)&v155 + 1) = v155;
    goto LABEL_217;
  }
}

void sub_210BB61B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100]((void *)(v68 - 136));
  if (a43 < 0) {
    operator delete(a38);
  }
  if (a44) {
    operator delete(a44);
  }
  if (v67) {
    operator delete(v67);
  }
  if (a47) {
    operator delete(a47);
  }
  if (a50) {
    operator delete(a50);
  }
  MEMORY[0x21667B360](&a53);
  if (a61)
  {
    a62 = (uint64_t)a61;
    operator delete(a61);
  }
  if (a64)
  {
    a65 = (uint64_t)a64;
    operator delete(a64);
  }
  ANEMachineIR::Validators::NeConvParameterValues::~NeConvParameterValues((ANEMachineIR::Validators::NeConvParameterValues *)&a67);
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::NeConvCpu::~NeConvCpu(MIL::ANEMachineIR::Interpreter::NeConvCpu *this)
{
}

void MilTranslator::OpTranslator::TranslateLinear(MilTranslator::OpTranslator *this@<X0>, const MIL::IROperation *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  uint64_t v6 = (*(uint64_t (**)(const MIL::IROperation *, std::string *, void))(*(void *)a2 + 120))(a2, &__p, 0);
  uint64_t v7 = v6;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v6) {
      goto LABEL_3;
    }
LABEL_6:
    *(_DWORD *)a3 = 4;
    std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), "Immediate value inputs not handled.");
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v7) {
    goto LABEL_6;
  }
LABEL_3:
  if (*(char *)(v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v83, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
  }
  else
  {
    long long v8 = *(_OWORD *)v7;
    v83.__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v8;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  uint64_t ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  long long v11 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  ANEMachineIR::Utils::GetStaticTensorShape(v11, v10, (uint64_t)&v81);
  uint64_t v12 = v82 - v81;
  if (v82 - v81 == 16)
  {
    MilTranslator::OpTranslator::GetChannelLastTensorNameMayInsertTranspose((uint64_t)this, (uint64_t)&v83, v11, &v80);
    memset(&v79, 0, sizeof(v79));
    std::string::basic_string[abi:ne180100]<0>(&__p, "weight");
    MilTranslator::WeightTranslator::TargetProgramConstOpName((uint64_t)this + 144, (uint64_t)a2, (uint64_t)&__p, 1, 1uLL, (uint64_t)&v79, (_DWORD *)a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (!*(_DWORD *)a3)
    {
      if (*(char *)(a3 + 31) < 0) {
        operator delete(*(void **)(a3 + 8));
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "weight");
      long long v13 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
      int v15 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v13);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ANEMachineIR::Utils::GetStaticTensorShape(v15, v14, (uint64_t)v78);
      char v16 = (MIL::IRNamedValueType ***)(*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 176))(a2);
      double v18 = **v16;
      std::string::size_type v17 = (*v16)[1];
      if (v17) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v17 + 1, 1uLL, memory_order_relaxed);
      }
      long double v52 = (std::__shared_weak_count *)v17;
      Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(v18);
      MIL::IRValueType::AsTensorType(Type);
      memset(&v77, 0, sizeof(v77));
      __p.__r_.__value_.__s.__data_[6] = 0;
      __p.__r_.__value_.__s.__data_[8] = 0;
      char v69 = 0;
      char v70 = 0;
      char v71 = 0;
      char v72 = 0;
      char v73 = 0;
      LOBYTE(v74) = 0;
      char v76 = 0;
      LODWORD(__p.__r_.__value_.__l.__data_) = 0;
      __p.__r_.__value_.__s.__data_[4] = 0;
      uint64_t LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a2);
      uint64_t v21 = (*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 56))(a2);
      (*(void (**)(std::string *__return_ptr, const MIL::IROperation *))(*(void *)a2 + 200))(&v66, a2);
      uint64_t v22 = v66.__r_.__value_.__r.__words[0];
      if (v66.__r_.__value_.__l.__size_ == v66.__r_.__value_.__r.__words[0]) {
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v23 = (*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 176))(a2);
      if (*(void *)(v23 + 8) == *(void *)v23) {
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
      float v24 = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(**(MIL::IRNamedValueType ***)v23);
      uint64_t v25 = MIL::IRValueType::AsTensorType(v24);
      ANEMachineIR::Validators::ValidateNeMatmul(LocationPtr, v21, (uint64_t)v11, v15, v22, v25, (char *)&__p, (MIL::ValidationResult *)&v67);
      v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&v66;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
      if (MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v67))
      {
        std::string::basic_string[abi:ne180100]<0>(&v64, "ne_matmul");
        MilTranslator::OpTranslator::AddOperation((uint64_t)this);
        if (v65 < 0) {
          operator delete(v64);
        }
        std::string::basic_string[abi:ne180100]<0>(&v61, "x");
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v60, v80.__r_.__value_.__l.__data_, v80.__r_.__value_.__l.__size_);
        }
        else {
          std::string v60 = v80;
        }
        MIL::Builder::OperationBuilder::AddInput();
        if (v63) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v63);
        }
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v60.__r_.__value_.__l.__data_);
        }
        if (v62 < 0) {
          operator delete(v61);
        }
        std::string::basic_string[abi:ne180100]<0>(&v57, "y");
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v56, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
        }
        else {
          std::string v56 = v79;
        }
        MIL::Builder::OperationBuilder::AddInput();
        if (v59) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v59);
        }
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v56.__r_.__value_.__l.__data_);
        }
        if (v58 < 0) {
          operator delete(v57);
        }
        uint64_t Name = MIL::IRNamedValueType::GetName(v18);
        if (*(char *)(Name + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)Name, *(void *)(Name + 8));
        }
        else
        {
          long long v51 = *(_OWORD *)Name;
          v54.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
          *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v51;
        }
        MIL::Builder::OperationBuilder::AddOutput();
        if (v55) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v55);
        }
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v54.__r_.__value_.__l.__data_);
        }
        *(_DWORD *)a3 = 0;
        std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), (char *)&unk_210C6BFE7);
        if (v66.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v66.__r_.__value_.__l.__size_);
        }
        unsigned int v49 = v52;
      }
      else
      {
        MIL::MILResult::GetMessage((MIL::MILResult *)&v67);
        std::operator+<char>();
        if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v40 = &v66;
        }
        else {
          char v40 = (std::string *)v66.__r_.__value_.__r.__words[0];
        }
        if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v66.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v66.__r_.__value_.__l.__size_;
        }
        std::string::append(&v77, (const std::string::value_type *)v40, size);
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v66.__r_.__value_.__l.__data_);
        }
        *(_DWORD *)a3 = 6;
        uint64_t v42 = a3 + 8;
        (*(void (**)(const MIL::IROperation *))(*(void *)a2 + 56))(a2);
        std::operator+<char>();
        int v43 = std::string::append(&v53, "', violations: ");
        long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v66.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v45 = &v77;
        }
        else {
          uint64_t v45 = (std::string *)v77.__r_.__value_.__r.__words[0];
        }
        if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v46 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v46 = v77.__r_.__value_.__l.__size_;
        }
        long double v47 = std::string::append(&v66, (const std::string::value_type *)v45, v46);
        long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        *(void *)(v42 + 16) = *((void *)&v47->__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v42 = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        unsigned int v49 = v52;
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v66.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v53.__r_.__value_.__l.__data_);
        }
      }
      MEMORY[0x21667B360](&v67);
      if (v76 && v74)
      {
        signed int v75 = v74;
        operator delete(v74);
      }
      if (v69 && __p.__r_.__value_.__l.__size_)
      {
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
        operator delete((void *)__p.__r_.__value_.__l.__size_);
      }
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
      if (v49) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      }
      if (v78[0])
      {
        v78[1] = v78[0];
        operator delete(v78[0]);
      }
    }
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v79.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_102;
    }
    uint64_t v39 = (void *)v80.__r_.__value_.__r.__words[0];
  }
  else
  {
    *(_DWORD *)a3 = 6;
    uint64_t v26 = a3 + 8;
    std::to_string(&v79, v12 >> 3);
    uint64_t v27 = std::string::insert(&v79, 0, "Unsupported input rank ");
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v80.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    float v29 = std::string::append(&v80, " for op '");
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v67.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    uint64_t v31 = (*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 56))(a2);
    int v32 = *(char *)(v31 + 23);
    if (v32 >= 0) {
      __int16 v33 = (const std::string::value_type *)v31;
    }
    else {
      __int16 v33 = *(const std::string::value_type **)v31;
    }
    if (v32 >= 0) {
      std::string::size_type v34 = *(unsigned __int8 *)(v31 + 23);
    }
    else {
      std::string::size_type v34 = *(void *)(v31 + 8);
    }
    int v35 = std::string::append(&v67, v33, v34);
    long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    uint64_t v37 = std::string::append(&__p, "'");
    long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    *(void *)(v26 + 16) = *((void *)&v37->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v26 = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v67.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v80.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_102;
    }
    uint64_t v39 = (void *)v79.__r_.__value_.__r.__words[0];
  }
  operator delete(v39);
LABEL_102:
  if (v81)
  {
    uint64_t v82 = v81;
    operator delete(v81);
  }
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v83.__r_.__value_.__l.__data_);
  }
}

void sub_210BB6E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,std::__shared_weak_count *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  MEMORY[0x21667B360](&a48);
  ANEMachineIR::Validators::NeMatmulParamValues::~NeMatmulParamValues((ANEMachineIR::Validators::NeMatmulParamValues *)&a56);
  if (*(char *)(v56 - 225) < 0) {
    operator delete(*(void **)(v56 - 248));
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  char v58 = *(void **)(v56 - 224);
  if (v58)
  {
    *(void *)(v56 - 216) = v58;
    operator delete(v58);
  }
  if (*(char *)(v56 - 177) < 0) {
    operator delete(*(void **)(v56 - 200));
  }
  if (*(char *)(v56 - 153) < 0) {
    operator delete(*(void **)(v56 - 176));
  }
  unint64_t v59 = *(void **)(v56 - 152);
  if (v59)
  {
    *(void *)(v56 - 144) = v59;
    operator delete(v59);
  }
  if (*(char *)(v56 - 105) < 0) {
    operator delete(*(void **)(v56 - 128));
  }
  _Unwind_Resume(a1);
}

void sub_210BB70C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a58 < 0) {
    JUMPOUT(0x210BB70B8);
  }
  JUMPOUT(0x210BB70BCLL);
}

void sub_210BB70D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a58 < 0) {
    JUMPOUT(0x210BB70A8);
  }
  JUMPOUT(0x210BB70ACLL);
}

void MIL::ANEMachineIR::Interpreter::PeReduceCpu::Run(MIL::IROperation *a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(MIL::IROperation *))(*(void *)a1 + 56))(a1);
  int v7 = *(char *)(v6 + 23);
  if (v7 < 0)
  {
    if (*(void *)(v6 + 8) != 9) {
      goto LABEL_10;
    }
    uint64_t v6 = *(void *)v6;
  }
  else if (v7 != 9)
  {
    goto LABEL_10;
  }
  if (*(void *)v6 != 0x63756465725F6570 || *(unsigned char *)(v6 + 8) != 101)
  {
LABEL_10:
    *(_DWORD *)a3 = 1;
    uint64_t v9 = a3 + 8;
    std::string::basic_string[abi:ne180100]<0>(&v97, "pe_reduce");
    unint64_t v10 = std::string::insert(&v97, 0, "Expected ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v98.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    uint64_t v12 = std::string::append(&v98, " op. Got ");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v99.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (*(uint64_t (**)(MIL::IROperation *))(*(void *)a1 + 56))(a1);
    int v15 = *(char *)(v14 + 23);
    if (v15 >= 0) {
      char v16 = (const std::string::value_type *)v14;
    }
    else {
      char v16 = *(const std::string::value_type **)v14;
    }
    if (v15 >= 0) {
      std::string::size_type v17 = *(unsigned __int8 *)(v14 + 23);
    }
    else {
      std::string::size_type v17 = *(void *)(v14 + 8);
    }
    double v18 = std::string::append(&v99, v16, v17);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    *(void *)(v9 + 16) = *((void *)&v18->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v9 = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v99.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v98.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    {
      float v20 = (void *)v97.__r_.__value_.__r.__words[0];
LABEL_22:
      operator delete(v20);
      return;
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v99, "x");
  uint64_t InterpretedTensorValue = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&v99);
  uint64_t v22 = InterpretedTensorValue;
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v99.__r_.__value_.__l.__data_);
    if (v22) {
      goto LABEL_26;
    }
LABEL_60:
    *(_DWORD *)a3 = 2;
    std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), "No value for x");
    return;
  }
  if (!InterpretedTensorValue) {
    goto LABEL_60;
  }
LABEL_26:
  uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 32))(v22);
  int v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 88))(v23);
  uint64_t OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  uint64_t v26 = MIL::IRValueType::AsTensorType(OutputType);
  int v27 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 88))(v26);
  long long v28 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(void *)v22 + 32))(v22);
  ANEMachineIR::Utils::GetStaticTensorShape(v28, v29, (uint64_t)&v99);
  long long v30 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  uint64_t v31 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(v30);
  ANEMachineIR::Utils::GetStaticTensorShape(v31, v32, (uint64_t)&v98);
  __int16 v33 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  uint64_t v34 = MIL::IRValueType::AsTensorType(v33);
  size_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 16))(v34);
  std::string::basic_string[abi:ne180100]<0>(&v97, "reduction_scale");
  uint64_t ParameterValue = MIL::IROperation::TryGetParameterValue();
  float v37 = 1.0;
  if (ParameterValue)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)ParameterValue + 40))(ParameterValue))
    {
      long long v38 = (float *)MEMORY[0x21667B860]();
      if (v38) {
        float v37 = *v38;
      }
    }
  }
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v97, "reduction_epsilon");
  uint64_t v39 = MIL::IROperation::TryGetParameterValue();
  float v40 = 0.0;
  if (v39)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v39 + 40))(v39))
    {
      float v41 = (float *)MEMORY[0x21667B860]();
      if (v41) {
        float v40 = *v41;
      }
    }
  }
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v95, "reduction");
  std::string::basic_string[abi:ne180100]<0>(&__p, "mean");
  uint64_t v42 = MIL::IROperation::TryGetParameterValue();
  if (v42 && (*(uint64_t (**)(uint64_t))(*(void *)v42 + 40))(v42) && (uint64_t v43 = MEMORY[0x21667B830]()) != 0)
  {
    if (*(char *)(v43 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v97, *(const std::string::value_type **)v43, *(void *)(v43 + 8));
    }
    else
    {
      long long v44 = *(_OWORD *)v43;
      v97.__r_.__value_.__r.__words[2] = *(void *)(v43 + 16);
      *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v44;
    }
  }
  else
  {
    std::string v97 = __p;
    memset(&__p, 0, sizeof(__p));
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v96 < 0) {
    operator delete(v95[0]);
  }
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v97.__r_.__value_.__l.__size_ == 3)
    {
      long double v47 = (std::string *)v97.__r_.__value_.__r.__words[0];
      if (*(_WORD *)v97.__r_.__value_.__l.__data_ != 26989 || *(unsigned char *)(v97.__r_.__value_.__r.__words[0] + 2) != 110)
      {
        if (*(_WORD *)v97.__r_.__value_.__l.__data_ != 24941 || *(unsigned char *)(v97.__r_.__value_.__r.__words[0] + 2) != 120) {
          goto LABEL_70;
        }
LABEL_74:
        int v52 = 2;
        goto LABEL_81;
      }
LABEL_73:
      int v52 = 1;
      goto LABEL_81;
    }
LABEL_72:
    int v52 = 0;
    goto LABEL_81;
  }
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) != 3) {
    goto LABEL_72;
  }
  if (LOWORD(v97.__r_.__value_.__l.__data_) == 26989 && v97.__r_.__value_.__s.__data_[2] == 110) {
    goto LABEL_73;
  }
  if (LOWORD(v97.__r_.__value_.__l.__data_) == 24941 && v97.__r_.__value_.__s.__data_[2] == 120) {
    goto LABEL_74;
  }
  long double v47 = &v97;
LABEL_70:
  unsigned int v50 = bswap32(LOWORD(v47->__r_.__value_.__l.__data_)) >> 16;
  if (v50 == 29557)
  {
    int v51 = v47->__r_.__value_.__s.__data_[2] - 109;
  }
  else if (v50 < 0x7375)
  {
    int v51 = -1;
  }
  else
  {
    int v51 = 1;
  }
  if (v51) {
    int v52 = 0;
  }
  else {
    int v52 = 3;
  }
LABEL_81:
  std::string::basic_string[abi:ne180100]<0>(v95, "reduction_post_processing");
  uint64_t v53 = MIL::IROperation::TryGetParameterValue();
  if (v96 < 0) {
    operator delete(v95[0]);
  }
  if (v53)
  {
    std::string v54 = "post_processing not implemented.";
    int v55 = 5;
LABEL_113:
    *(_DWORD *)a3 = v55;
    std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), v54);
    goto LABEL_114;
  }
  if (v24 == 14)
  {
    switch(v27)
    {
      case 14:
        uint64_t Data = MIL::IRTensorValue::GetDataView<unsigned char>();
        (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v92, a1);
        long long v85 = v92;
        if (v93 == v92) {
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        char v86 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
        MIL::IRValueType::AsTensorType(v86);
        MIL::IRTensorValueType::MakeUInt8Value();
        MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v85, (uint64_t *)&v100);
        __int16 v87 = v100;
        unsigned __int16 v100 = 0;
        if (v87) {
          (*((void (**)(void **))*v87 + 1))(v87);
        }
        goto LABEL_143;
      case 9:
        uint64_t v76 = MIL::IRTensorValue::GetDataView<unsigned char>();
        (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v92, a1);
        std::string v77 = v92;
        if (v93 == v92) {
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        __int16 v78 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
        MIL::IRValueType::AsTensorType(v78);
        MIL::IRTensorValueType::MakeInt8Value();
        MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v77, (uint64_t *)&v100);
        std::string v79 = v100;
        unsigned __int16 v100 = 0;
        if (v79) {
          (*((void (**)(void **))*v79 + 1))(v79);
        }
        goto LABEL_143;
      case 4:
        uint64_t v64 = MIL::IRTensorValue::GetDataView<unsigned char>();
        (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v92, a1);
        char v65 = v92;
        if (v93 == v92) {
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        std::string v66 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
        MIL::IRValueType::AsTensorType(v66);
        MIL::IRTensorValueType::MakeFloat16Value();
        MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v65, (uint64_t *)&v100);
        std::string v67 = v100;
        unsigned __int16 v100 = 0;
        if (v67) {
          (*((void (**)(void **))*v67 + 1))(v67);
        }
        goto LABEL_143;
    }
    goto LABEL_111;
  }
  if (v24 == 9)
  {
    switch(v27)
    {
      case 14:
        uint64_t v72 = MIL::IRTensorValue::GetDataView<signed char>();
        (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v92, a1);
        char v73 = v92;
        if (v93 == v92) {
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        __int16 v74 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
        MIL::IRValueType::AsTensorType(v74);
        MIL::IRTensorValueType::MakeUInt8Value();
        MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v73, (uint64_t *)&v100);
        signed int v75 = v100;
        unsigned __int16 v100 = 0;
        if (v75) {
          (*((void (**)(void **))*v75 + 1))(v75);
        }
        goto LABEL_143;
      case 9:
        uint64_t v68 = MIL::IRTensorValue::GetDataView<signed char>();
        (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v92, a1);
        char v69 = v92;
        if (v93 == v92) {
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        char v70 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
        MIL::IRValueType::AsTensorType(v70);
        MIL::IRTensorValueType::MakeInt8Value();
        MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v69, (uint64_t *)&v100);
        char v71 = v100;
        unsigned __int16 v100 = 0;
        if (v71) {
          (*((void (**)(void **))*v71 + 1))(v71);
        }
        goto LABEL_143;
      case 4:
        uint64_t v60 = MIL::IRTensorValue::GetDataView<signed char>();
        (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v92, a1);
        __int16 v61 = v92;
        if (v93 == v92) {
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        char v62 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
        MIL::IRValueType::AsTensorType(v62);
        MIL::IRTensorValueType::MakeFloat16Value();
        MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v61, (uint64_t *)&v100);
        unint64_t v63 = v100;
        unsigned __int16 v100 = 0;
        if (v63) {
          (*((void (**)(void **))*v63 + 1))(v63);
        }
        goto LABEL_143;
    }
    goto LABEL_111;
  }
  if (v24 != 4)
  {
    std::string v54 = "Unimplemented input dtype";
LABEL_112:
    int v55 = 3;
    goto LABEL_113;
  }
  if (v27 == 14)
  {
    uint64_t v88 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
    (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v92, a1);
    uint64_t v89 = v92;
    if (v93 == v92) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v90 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
    MIL::IRValueType::AsTensorType(v90);
    MIL::IRTensorValueType::MakeUInt8Value();
    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v89, (uint64_t *)&v100);
    __int16 v91 = v100;
    unsigned __int16 v100 = 0;
    if (v91) {
      (*((void (**)(void **))*v91 + 1))(v91);
    }
    goto LABEL_143;
  }
  if (v27 == 9)
  {
    uint64_t v80 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
    (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v92, a1);
    __int16 v81 = v92;
    if (v93 == v92) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v82 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
    MIL::IRValueType::AsTensorType(v82);
    MIL::IRTensorValueType::MakeInt8Value();
    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v81, (uint64_t *)&v100);
    std::string v83 = v100;
    unsigned __int16 v100 = 0;
    if (v83) {
      (*((void (**)(void **))*v83 + 1))(v83);
    }
    goto LABEL_143;
  }
  if (v27 != 4)
  {
LABEL_111:
    std::string v54 = "Unimplemented output dtype";
    goto LABEL_112;
  }
  uint64_t v56 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
  (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v92, a1);
  uint64_t v57 = v92;
  if (v93 == v92) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  char v58 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  MIL::IRValueType::AsTensorType(v58);
  MIL::IRTensorValueType::MakeFloat16Value();
  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v57, (uint64_t *)&v100);
  unint64_t v59 = v100;
  unsigned __int16 v100 = 0;
  if (v59) {
    (*((void (**)(void **))*v59 + 1))(v59);
  }
LABEL_143:
  unsigned __int16 v100 = (void **)&v92;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v100);
  *(_DWORD *)a3 = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), (char *)&unk_210C6BFE7);
  if (v95[0])
  {
    v95[1] = v95[0];
    operator delete(v95[0]);
  }
LABEL_114:
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (v98.__r_.__value_.__r.__words[0])
  {
    v98.__r_.__value_.__l.__size_ = v98.__r_.__value_.__r.__words[0];
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  float v20 = (void *)v99.__r_.__value_.__r.__words[0];
  if (v99.__r_.__value_.__r.__words[0])
  {
    v99.__r_.__value_.__l.__size_ = v99.__r_.__value_.__r.__words[0];
    goto LABEL_22;
  }
}

void sub_210BB8018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (__p) {
    operator delete(__p);
  }
  if (a2 == 1)
  {
    float v41 = __cxa_begin_catch(exception_object);
    *(_DWORD *)uint64_t v37 = 4;
    uint64_t v42 = (char *)(*(uint64_t (**)(void *))(*(void *)v41 + 16))(v41);
    std::string::basic_string[abi:ne180100]<0>((void *)(v37 + 8), v42);
    __cxa_end_catch();
    JUMPOUT(0x210BB7A14);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a32) {
    operator delete(a32);
  }
  uint64_t v43 = *(void **)(v38 - 128);
  if (v43)
  {
    *(void *)(v38 - 120) = v43;
    operator delete(v43);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValuePeReduce<MIL::Fp16,MIL::Fp16>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, void *a6@<X8>, float a7@<S0>, float a8@<S1>)
{
  *(void *)signed int v75 = *MEMORY[0x263EF8340];
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a6, a2);
  uint64_t v14 = *(const void **)a3;
  uint64_t v15 = *(void *)(a3 + 8);
  unint64_t v16 = (v15 - *(void *)a3) >> 3;
  if (v16 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3) {
    __assert_rtn("ComputeValuePeReduce", "PeReduceCpu.cpp", 77, "x_rank == o_shape.size()");
  }
  char v71 = 0;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v71, v14, v15, v16);
  std::string __p = 0;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v16 == 3)
  {
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v71, (uint64_t)(v71 + 8), (char *)__e, v75, 2);
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, (char *)__e, v75, 2);
  }
  else if (v16 == 4)
  {
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v71, v71 + 8, __e);
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, __e);
  }
  uint64_t v17 = *(void *)v71;
  uint64_t v18 = *((void *)v71 + 1);
  uint64_t v19 = *((void *)v71 + 2);
  uint64_t Float = (uint64_t)__p;
  uint64_t v21 = *((void *)__p + 1);
  uint64_t v22 = *((void *)__p + 2);
  uint64_t v23 = *((void *)__p + 3);
  uint64_t v24 = *((void *)__p + 4);
  if (*(void *)__p == *(void *)v71) {
    uint64_t v17 = 1;
  }
  if (v21 == v18) {
    uint64_t v18 = 1;
  }
  if (v22 == v19) {
    uint64_t v19 = 1;
  }
  if (v23 == *((void *)v71 + 3)) {
    uint64_t v25 = 1;
  }
  else {
    uint64_t v25 = *((void *)v71 + 3);
  }
  if (v24 == *((void *)v71 + 4)) {
    uint64_t v26 = 1;
  }
  else {
    uint64_t v26 = *((void *)v71 + 4);
  }
  uint64_t v53 = *(void *)__p;
  if (!*(void *)__p) {
    goto LABEL_51;
  }
  unint64_t v27 = 0;
  float v28 = (float)(unint64_t)(v18 * v17 * v19 * v25 * v26);
  uint64_t v60 = v17;
  uint64_t v50 = *((void *)__p + 1);
  uint64_t v51 = v18;
  uint64_t v52 = *((void *)__p + 2);
  uint64_t v54 = v19;
  uint64_t v55 = *((void *)__p + 3);
  uint64_t v47 = v17;
  uint64_t v48 = *((void *)__p + 4);
  uint64_t v49 = v26;
  do
  {
    if (v24)
    {
      unint64_t v61 = 0;
      unint64_t v57 = v27 + v17;
      uint64_t v63 = v26;
      uint64_t v58 = v27;
      do
      {
        if (v21)
        {
          unint64_t v64 = 0;
          unint64_t v59 = v61 + v26;
          uint64_t v66 = v18;
          do
          {
            if (v22)
            {
              unint64_t v67 = 0;
              unint64_t v62 = v64 + v18;
              uint64_t v29 = v19;
              do
              {
                if (v23)
                {
                  unint64_t v30 = 0;
                  unint64_t v65 = v67 + v19;
                  do
                  {
                    float v31 = 0.0;
                    if (v27 < v57)
                    {
                      uint64_t v32 = v58;
                      do
                      {
                        uint64_t v33 = v61;
                        if (v61 < v59)
                        {
                          do
                          {
                            uint64_t v34 = v64;
                            if (v64 < v62)
                            {
                              do
                              {
                                uint64_t v35 = v67;
                                if (v67 < v65)
                                {
                                  do
                                  {
                                    if (v30 < v30 + v25)
                                    {
                                      uint64_t v36 = 0;
                                      do
                                      {
                                        LOWORD(__e[0]) = *(_WORD *)(a1
                                                                  + 2
                                        uint64_t Float = MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                                        float v31 = v31 + v37;
                                        ++v36;
                                      }
                                      while (v25 != v36);
                                    }
                                    ++v35;
                                  }
                                  while (v35 != v29);
                                }
                                ++v34;
                              }
                              while (v34 != v66);
                            }
                            ++v33;
                          }
                          while (v33 != v63);
                        }
                        ++v32;
                      }
                      while (v32 != v60);
                    }
                    if (a5)
                    {
                      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(exception, "Function not implemented.");
                      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
                    }
                    float v38 = (float)(v31 / v28) * a7;
                    float v39 = 0.0;
                    float v40 = 0.0;
                    unint64_t v27 = v58;
                    if (v38 != 0.0)
                    {
                      __e[0] = 0;
                      long double v41 = frexp(v38, __e);
                      double v42 = ldexp(v41, 11);
                      float v40 = ldexp(round(v42), __e[0] - 11);
                    }
                    if ((float)(v40 + a8) != 0.0)
                    {
                      __e[0] = 0;
                      long double v43 = frexp((float)(v40 + a8), __e);
                      double v44 = ldexp(v43, 11);
                      float v39 = ldexp(round(v44), __e[0] - 11);
                    }
                    __int16 v45 = MIL::Fp16::FromFloat((MIL::Fp16 *)Float, v39);
                    *(_WORD *)(*a6 + 2 * Float) = v45;
                    ++v30;
                    uint64_t v19 = v54;
                    uint64_t v23 = v55;
                  }
                  while (v30 != v55);
                }
                ++v29;
                uint64_t v18 = v51;
                uint64_t v22 = v52;
                ++v67;
              }
              while (v67 != v52);
            }
            ++v66;
            uint64_t v26 = v49;
            uint64_t v21 = v50;
            ++v64;
          }
          while (v64 != v50);
        }
        ++v63;
        uint64_t v17 = v47;
        uint64_t v24 = v48;
        ++v61;
      }
      while (v61 != v48);
    }
    ++v27;
    ++v60;
  }
  while (v27 != v53);
  uint64_t Float = (uint64_t)__p;
  if (__p)
  {
LABEL_51:
    uint64_t v69 = Float;
    operator delete((void *)Float);
  }
  if (v71)
  {
    uint64_t v72 = v71;
    operator delete(v71);
  }
}

void sub_210BB8D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v35 = *(void **)(v33 - 168);
  if (v35)
  {
    *(void *)(v33 - 160) = v35;
    operator delete(v35);
  }
  uint64_t v36 = *(void **)v32;
  if (*(void *)v32)
  {
    *(void *)(v32 + 8) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValuePeReduce<unsigned char,MIL::Fp16>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, unint64_t *a6@<X8>, float a7@<S0>, float a8@<S1>)
{
  *(void *)uint64_t v76 = *MEMORY[0x263EF8340];
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (a2) {
    std::vector<unsigned char>::__append(a6, a2);
  }
  uint64_t v14 = *(const void **)a3;
  uint64_t v15 = *(void *)(a3 + 8);
  unint64_t v16 = (v15 - *(void *)a3) >> 3;
  if (v16 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3) {
    __assert_rtn("ComputeValuePeReduce", "PeReduceCpu.cpp", 77, "x_rank == o_shape.size()");
  }
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v72, v14, v15, v16);
  std::string __p = 0;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v16 == 3)
  {
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v72, (uint64_t)(v72 + 8), (char *)__e, v76, 2);
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, (char *)__e, v76, 2);
  }
  else if (v16 == 4)
  {
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v72, v72 + 8, __e);
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, __e);
  }
  uint64_t v17 = *(void *)v72;
  uint64_t v18 = *((void *)v72 + 1);
  uint64_t v19 = __p;
  uint64_t v20 = *((void *)__p + 1);
  uint64_t v21 = *((void *)__p + 2);
  uint64_t v22 = *((void *)__p + 3);
  uint64_t v23 = *((void *)__p + 4);
  if (*(void *)__p == *(void *)v72) {
    uint64_t v17 = 1;
  }
  if (v20 == v18) {
    uint64_t v18 = 1;
  }
  if (v21 == *((void *)v72 + 2)) {
    uint64_t v24 = 1;
  }
  else {
    uint64_t v24 = *((void *)v72 + 2);
  }
  if (v22 == *((void *)v72 + 3)) {
    uint64_t v25 = 1;
  }
  else {
    uint64_t v25 = *((void *)v72 + 3);
  }
  if (v23 == *((void *)v72 + 4)) {
    uint64_t v26 = 1;
  }
  else {
    uint64_t v26 = *((void *)v72 + 4);
  }
  uint64_t v54 = *(void *)__p;
  if (!*(void *)__p)
  {
LABEL_60:
    uint64_t v70 = v19;
    operator delete(v19);
    goto LABEL_61;
  }
  unint64_t v27 = 0;
  float v28 = (float)(unint64_t)(v18 * v17 * v24 * v25 * v26);
  uint64_t v61 = v17;
  uint64_t v51 = *((void *)__p + 1);
  uint64_t v52 = v18;
  uint64_t v53 = *((void *)__p + 2);
  uint64_t v55 = v24;
  uint64_t v56 = *((void *)__p + 3);
  uint64_t v48 = v17;
  uint64_t v49 = *((void *)__p + 4);
  uint64_t v50 = v26;
  do
  {
    if (v23)
    {
      unint64_t v62 = 0;
      unint64_t v58 = v27 + v17;
      uint64_t v64 = v26;
      uint64_t v59 = v27;
      while (!v20)
      {
LABEL_57:
        ++v64;
        uint64_t v17 = v48;
        uint64_t v23 = v49;
        if (++v62 == v49) {
          goto LABEL_58;
        }
      }
      unint64_t v65 = 0;
      unint64_t v60 = v62 + v26;
      uint64_t v67 = v18;
      while (!v21)
      {
LABEL_56:
        ++v67;
        uint64_t v26 = v50;
        uint64_t v20 = v51;
        if (++v65 == v51) {
          goto LABEL_57;
        }
      }
      unint64_t v68 = 0;
      unint64_t v63 = v65 + v18;
      uint64_t v29 = v24;
      while (!v22)
      {
LABEL_55:
        ++v29;
        uint64_t v18 = v52;
        uint64_t v21 = v53;
        if (++v68 == v53) {
          goto LABEL_56;
        }
      }
      unint64_t v30 = 0;
      unint64_t v66 = v68 + v24;
      while (1)
      {
        float v31 = 0.0;
        if (v27 < v58)
        {
          uint64_t v32 = v59;
          do
          {
            uint64_t v33 = v62;
            if (v62 < v60)
            {
              do
              {
                uint64_t v34 = v65;
                if (v65 < v63)
                {
                  do
                  {
                    uint64_t v35 = v68;
                    if (v68 < v66)
                    {
                      do
                      {
                        if (v30 < v30 + v25)
                        {
                          uint64_t v36 = 0;
                          do
                          {
                            LOWORD(__e[0]) = *(_WORD *)(a1
                                                      + 2
                            MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                            float v31 = v31 + v37;
                            ++v36;
                          }
                          while (v25 != v36);
                        }
                        ++v35;
                      }
                      while (v35 != v29);
                    }
                    ++v34;
                  }
                  while (v34 != v67);
                }
                ++v33;
              }
              while (v33 != v64);
            }
            ++v32;
          }
          while (v32 != v61);
        }
        if (a5)
        {
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Function not implemented.");
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        float v38 = (float)(v31 / v28) * a7;
        float v39 = 0.0;
        float v40 = 0.0;
        uint64_t v24 = v55;
        uint64_t v22 = v56;
        unint64_t v27 = v59;
        if (v38 != 0.0)
        {
          __e[0] = 0;
          long double v41 = frexp(v38, __e);
          double v42 = ldexp(v41, 11);
          float v40 = ldexp(round(v42), __e[0] - 11);
        }
        if ((float)(v40 + a8) == 0.0) {
          break;
        }
        __e[0] = 0;
        long double v45 = frexp((float)(v40 + a8), __e);
        double v46 = ldexp(v45, 11);
        float v39 = ldexp(round(v46), __e[0] - 11);
        if (v39 == INFINITY)
        {
          LOBYTE(v44) = -1;
        }
        else
        {
          if (v39 != -INFINITY) {
            break;
          }
          LOBYTE(v44) = 0;
        }
LABEL_54:
        if (v30 == v56) {
          goto LABEL_55;
        }
      }
      int v43 = llroundf(v39);
      if (v43 >= 255) {
        int v43 = 255;
      }
      int v44 = v43 & ~(v43 >> 31);
      goto LABEL_54;
    }
LABEL_58:
    ++v27;
    ++v61;
  }
  while (v27 != v54);
  uint64_t v19 = __p;
  if (__p) {
    goto LABEL_60;
  }
LABEL_61:
  if (v72)
  {
    uint64_t v73 = v72;
    operator delete(v72);
  }
}

void sub_210BB9300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v35 = *(void **)(v33 - 168);
  if (v35)
  {
    *(void *)(v33 - 160) = v35;
    operator delete(v35);
  }
  uint64_t v36 = *(void **)v32;
  if (*(void *)v32)
  {
    *(void *)(v32 + 8) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValuePeReduce<signed char,MIL::Fp16>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, unint64_t *a6@<X8>, float a7@<S0>, float a8@<S1>)
{
  *(void *)uint64_t v76 = *MEMORY[0x263EF8340];
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (a2) {
    std::vector<unsigned char>::__append(a6, a2);
  }
  uint64_t v14 = *(const void **)a3;
  uint64_t v15 = *(void *)(a3 + 8);
  unint64_t v16 = (v15 - *(void *)a3) >> 3;
  if (v16 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3) {
    __assert_rtn("ComputeValuePeReduce", "PeReduceCpu.cpp", 77, "x_rank == o_shape.size()");
  }
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v72, v14, v15, v16);
  std::string __p = 0;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v16 == 3)
  {
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v72, (uint64_t)(v72 + 8), (char *)__e, v76, 2);
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, (char *)__e, v76, 2);
  }
  else if (v16 == 4)
  {
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v72, v72 + 8, __e);
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, __e);
  }
  uint64_t v17 = *(void *)v72;
  uint64_t v18 = *((void *)v72 + 1);
  uint64_t v19 = __p;
  uint64_t v20 = *((void *)__p + 1);
  uint64_t v21 = *((void *)__p + 2);
  uint64_t v22 = *((void *)__p + 3);
  uint64_t v23 = *((void *)__p + 4);
  if (*(void *)__p == *(void *)v72) {
    uint64_t v17 = 1;
  }
  if (v20 == v18) {
    uint64_t v18 = 1;
  }
  if (v21 == *((void *)v72 + 2)) {
    uint64_t v24 = 1;
  }
  else {
    uint64_t v24 = *((void *)v72 + 2);
  }
  if (v22 == *((void *)v72 + 3)) {
    uint64_t v25 = 1;
  }
  else {
    uint64_t v25 = *((void *)v72 + 3);
  }
  if (v23 == *((void *)v72 + 4)) {
    uint64_t v26 = 1;
  }
  else {
    uint64_t v26 = *((void *)v72 + 4);
  }
  uint64_t v54 = *(void *)__p;
  if (!*(void *)__p)
  {
LABEL_62:
    uint64_t v70 = v19;
    operator delete(v19);
    goto LABEL_63;
  }
  unint64_t v27 = 0;
  float v28 = (float)(unint64_t)(v18 * v17 * v24 * v25 * v26);
  uint64_t v61 = v17;
  uint64_t v51 = *((void *)__p + 1);
  uint64_t v52 = v18;
  uint64_t v53 = *((void *)__p + 2);
  uint64_t v55 = v24;
  uint64_t v56 = *((void *)__p + 3);
  uint64_t v48 = v17;
  uint64_t v49 = *((void *)__p + 4);
  uint64_t v50 = v26;
  do
  {
    if (v23)
    {
      unint64_t v62 = 0;
      unint64_t v58 = v27 + v17;
      uint64_t v64 = v26;
      uint64_t v59 = v27;
      while (!v20)
      {
LABEL_59:
        ++v64;
        uint64_t v17 = v48;
        uint64_t v23 = v49;
        if (++v62 == v49) {
          goto LABEL_60;
        }
      }
      unint64_t v65 = 0;
      unint64_t v60 = v62 + v26;
      uint64_t v67 = v18;
      while (!v21)
      {
LABEL_58:
        ++v67;
        uint64_t v26 = v50;
        uint64_t v20 = v51;
        if (++v65 == v51) {
          goto LABEL_59;
        }
      }
      unint64_t v68 = 0;
      unint64_t v63 = v65 + v18;
      uint64_t v29 = v24;
      while (!v22)
      {
LABEL_57:
        ++v29;
        uint64_t v18 = v52;
        uint64_t v21 = v53;
        if (++v68 == v53) {
          goto LABEL_58;
        }
      }
      unint64_t v30 = 0;
      unint64_t v66 = v68 + v24;
      while (1)
      {
        float v31 = 0.0;
        if (v27 < v58)
        {
          uint64_t v32 = v59;
          do
          {
            uint64_t v33 = v62;
            if (v62 < v60)
            {
              do
              {
                uint64_t v34 = v65;
                if (v65 < v63)
                {
                  do
                  {
                    uint64_t v35 = v68;
                    if (v68 < v66)
                    {
                      do
                      {
                        if (v30 < v30 + v25)
                        {
                          uint64_t v36 = 0;
                          do
                          {
                            LOWORD(__e[0]) = *(_WORD *)(a1
                                                      + 2
                            MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
                            float v31 = v31 + v37;
                            ++v36;
                          }
                          while (v25 != v36);
                        }
                        ++v35;
                      }
                      while (v35 != v29);
                    }
                    ++v34;
                  }
                  while (v34 != v67);
                }
                ++v33;
              }
              while (v33 != v64);
            }
            ++v32;
          }
          while (v32 != v61);
        }
        if (a5)
        {
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Function not implemented.");
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        float v38 = (float)(v31 / v28) * a7;
        float v39 = 0.0;
        float v40 = 0.0;
        uint64_t v24 = v55;
        uint64_t v22 = v56;
        unint64_t v27 = v59;
        if (v38 != 0.0)
        {
          __e[0] = 0;
          long double v41 = frexp(v38, __e);
          double v42 = ldexp(v41, 11);
          float v40 = ldexp(round(v42), __e[0] - 11);
        }
        if ((float)(v40 + a8) == 0.0) {
          break;
        }
        __e[0] = 0;
        long double v45 = frexp((float)(v40 + a8), __e);
        double v46 = ldexp(v45, 11);
        float v39 = ldexp(round(v46), __e[0] - 11);
        if (v39 == INFINITY)
        {
          char v44 = 127;
        }
        else
        {
          if (v39 != -INFINITY) {
            break;
          }
          char v44 = 0x80;
        }
LABEL_56:
        if (v30 == v56) {
          goto LABEL_57;
        }
      }
      int v43 = llroundf(v39);
      if (v43 >= 127) {
        int v43 = 127;
      }
      if (v43 <= -128) {
        char v44 = 0x80;
      }
      else {
        char v44 = v43;
      }
      goto LABEL_56;
    }
LABEL_60:
    ++v27;
    ++v61;
  }
  while (v27 != v54);
  uint64_t v19 = __p;
  if (__p) {
    goto LABEL_62;
  }
LABEL_63:
  if (v72)
  {
    uint64_t v73 = v72;
    operator delete(v72);
  }
}

void sub_210BB98E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v35 = *(void **)(v33 - 168);
  if (v35)
  {
    *(void *)(v33 - 160) = v35;
    operator delete(v35);
  }
  uint64_t v36 = *(void **)v32;
  if (*(void *)v32)
  {
    *(void *)(v32 + 8) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValuePeReduce<MIL::Fp16,unsigned char>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, void *a6@<X8>, float a7@<S0>, float a8@<S1>)
{
  *(void *)uint64_t v74 = *MEMORY[0x263EF8340];
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a6, a2);
  uint64_t v14 = *(const void **)a3;
  uint64_t v15 = *(void *)(a3 + 8);
  unint64_t v16 = (v15 - *(void *)a3) >> 3;
  if (v16 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3) {
    __assert_rtn("ComputeValuePeReduce", "PeReduceCpu.cpp", 77, "x_rank == o_shape.size()");
  }
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v70, v14, v15, v16);
  std::string __p = 0;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v16 == 3)
  {
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v70, (uint64_t)(v70 + 8), (char *)__e, v74, 2);
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, (char *)__e, v74, 2);
  }
  else if (v16 == 4)
  {
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v70, v70 + 8, __e);
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, __e);
  }
  uint64_t v17 = *(void *)v70;
  uint64_t v18 = *((void *)v70 + 1);
  uint64_t v19 = *((void *)v70 + 2);
  uint64_t Index = (uint64_t)__p;
  uint64_t v21 = *((void *)__p + 1);
  uint64_t v22 = *((void *)__p + 2);
  uint64_t v23 = *((void *)__p + 3);
  uint64_t v24 = *((void *)__p + 4);
  if (*(void *)__p == *(void *)v70) {
    uint64_t v17 = 1;
  }
  if (v21 == v18) {
    uint64_t v18 = 1;
  }
  if (v22 == v19) {
    uint64_t v19 = 1;
  }
  if (v23 == *((void *)v70 + 3)) {
    uint64_t v25 = 1;
  }
  else {
    uint64_t v25 = *((void *)v70 + 3);
  }
  if (v24 == *((void *)v70 + 4)) {
    uint64_t v26 = 1;
  }
  else {
    uint64_t v26 = *((void *)v70 + 4);
  }
  uint64_t v53 = *(void *)__p;
  if (!*(void *)__p) {
    goto LABEL_51;
  }
  unint64_t v27 = 0;
  float v28 = (float)(unint64_t)(v18 * v17 * v19 * v25 * v26);
  uint64_t v60 = v17;
  uint64_t v50 = *((void *)__p + 1);
  uint64_t v51 = v18;
  uint64_t v52 = *((void *)__p + 2);
  uint64_t v54 = v19;
  uint64_t v55 = *((void *)__p + 3);
  uint64_t v47 = v17;
  uint64_t v48 = *((void *)__p + 4);
  uint64_t v49 = v26;
  do
  {
    if (v24)
    {
      unint64_t v61 = 0;
      unint64_t v57 = v27 + v17;
      uint64_t v63 = v26;
      uint64_t v58 = v27;
      do
      {
        if (v21)
        {
          unint64_t v64 = 0;
          unint64_t v59 = v61 + v26;
          uint64_t v65 = v18;
          do
          {
            if (v22)
            {
              unint64_t v66 = 0;
              unint64_t v62 = v64 + v18;
              uint64_t v29 = v19;
              do
              {
                if (v23)
                {
                  unint64_t v30 = 0;
                  do
                  {
                    float v31 = 0.0;
                    if (v27 < v57)
                    {
                      uint64_t v32 = v58;
                      do
                      {
                        uint64_t v33 = v61;
                        if (v61 < v59)
                        {
                          do
                          {
                            uint64_t v34 = v64;
                            if (v64 < v62)
                            {
                              do
                              {
                                uint64_t v35 = v66;
                                if (v66 < v66 + v54)
                                {
                                  do
                                  {
                                    if (v30 < v30 + v25)
                                    {
                                      uint64_t v36 = 0;
                                      do
                                      {
                                        LOBYTE(v37) = *(unsigned char *)(a1 + Index);
                                        float v31 = v31 + (float)v37;
                                        ++v36;
                                      }
                                      while (v25 != v36);
                                    }
                                    ++v35;
                                  }
                                  while (v35 != v29);
                                }
                                ++v34;
                              }
                              while (v34 != v65);
                            }
                            ++v33;
                          }
                          while (v33 != v63);
                        }
                        ++v32;
                      }
                      while (v32 != v60);
                    }
                    if (a5)
                    {
                      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(exception, "Function not implemented.");
                      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
                    }
                    float v38 = (float)(v31 / v28) * a7;
                    float v39 = 0.0;
                    float v40 = 0.0;
                    unint64_t v27 = v58;
                    if (v38 != 0.0)
                    {
                      __e[0] = 0;
                      long double v41 = frexp(v38, __e);
                      double v42 = ldexp(v41, 11);
                      float v40 = ldexp(round(v42), __e[0] - 11);
                    }
                    if ((float)(v40 + a8) != 0.0)
                    {
                      __e[0] = 0;
                      long double v43 = frexp((float)(v40 + a8), __e);
                      double v44 = ldexp(v43, 11);
                      float v39 = ldexp(round(v44), __e[0] - 11);
                    }
                    __int16 v45 = MIL::Fp16::FromFloat((MIL::Fp16 *)Index, v39);
                    *(_WORD *)(*a6 + 2 * Index) = v45;
                    ++v30;
                    uint64_t v23 = v55;
                  }
                  while (v30 != v55);
                }
                ++v29;
                uint64_t v18 = v51;
                uint64_t v22 = v52;
                ++v66;
                uint64_t v19 = v54;
              }
              while (v66 != v52);
            }
            ++v65;
            uint64_t v26 = v49;
            uint64_t v21 = v50;
            ++v64;
          }
          while (v64 != v50);
        }
        ++v63;
        uint64_t v17 = v47;
        uint64_t v24 = v48;
        ++v61;
      }
      while (v61 != v48);
    }
    ++v27;
    ++v60;
  }
  while (v27 != v53);
  uint64_t Index = (uint64_t)__p;
  if (__p)
  {
LABEL_51:
    uint64_t v68 = Index;
    operator delete((void *)Index);
  }
  if (v70)
  {
    uint64_t v71 = v70;
    operator delete(v70);
  }
}

void sub_210BB9E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v35 = *(void **)(v33 - 168);
  if (v35)
  {
    *(void *)(v33 - 160) = v35;
    operator delete(v35);
  }
  uint64_t v36 = *(void **)v32;
  if (*(void *)v32)
  {
    *(void *)(v32 + 8) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValuePeReduce<unsigned char,unsigned char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, unint64_t *a6@<X8>, float a7@<S0>, float a8@<S1>)
{
  *(void *)signed int v75 = *MEMORY[0x263EF8340];
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (a2) {
    std::vector<unsigned char>::__append(a6, a2);
  }
  uint64_t v14 = *(const void **)a3;
  uint64_t v15 = *(void *)(a3 + 8);
  unint64_t v16 = (v15 - *(void *)a3) >> 3;
  if (v16 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3) {
    __assert_rtn("ComputeValuePeReduce", "PeReduceCpu.cpp", 77, "x_rank == o_shape.size()");
  }
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v71, v14, v15, v16);
  std::string __p = 0;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v16 == 3)
  {
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v71, (uint64_t)(v71 + 8), (char *)__e, v75, 2);
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, (char *)__e, v75, 2);
  }
  else if (v16 == 4)
  {
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v71, v71 + 8, __e);
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, __e);
  }
  uint64_t v17 = *(void *)v71;
  uint64_t v18 = *((void *)v71 + 1);
  uint64_t v19 = *((void *)v71 + 2);
  uint64_t v20 = __p;
  uint64_t v21 = *((void *)__p + 1);
  uint64_t v22 = *((void *)__p + 2);
  uint64_t v23 = *((void *)__p + 3);
  uint64_t v24 = *((void *)__p + 4);
  if (*(void *)__p == *(void *)v71) {
    uint64_t v17 = 1;
  }
  if (v21 == v18) {
    uint64_t v18 = 1;
  }
  if (v22 == v19) {
    uint64_t v19 = 1;
  }
  if (v23 == *((void *)v71 + 3)) {
    uint64_t v25 = 1;
  }
  else {
    uint64_t v25 = *((void *)v71 + 3);
  }
  if (v24 == *((void *)v71 + 4)) {
    uint64_t v26 = 1;
  }
  else {
    uint64_t v26 = *((void *)v71 + 4);
  }
  uint64_t v54 = *(void *)__p;
  if (!*(void *)__p)
  {
LABEL_59:
    uint64_t v69 = v20;
    operator delete(v20);
    goto LABEL_60;
  }
  unint64_t v27 = 0;
  float v28 = (float)(unint64_t)(v18 * v17 * v19 * v25 * v26);
  uint64_t v61 = v17;
  uint64_t v51 = *((void *)__p + 1);
  uint64_t v52 = v18;
  uint64_t v53 = *((void *)__p + 2);
  uint64_t v55 = v19;
  uint64_t v56 = *((void *)__p + 3);
  uint64_t v48 = v17;
  uint64_t v49 = *((void *)__p + 4);
  uint64_t v50 = v26;
  do
  {
    if (v24)
    {
      unint64_t v62 = 0;
      unint64_t v58 = v27 + v17;
      uint64_t v64 = v26;
      uint64_t v59 = v27;
      while (!v21)
      {
LABEL_56:
        ++v64;
        uint64_t v17 = v48;
        uint64_t v24 = v49;
        if (++v62 == v49) {
          goto LABEL_57;
        }
      }
      unint64_t v65 = 0;
      unint64_t v60 = v62 + v26;
      uint64_t v66 = v18;
      while (!v22)
      {
LABEL_55:
        ++v66;
        uint64_t v26 = v50;
        uint64_t v21 = v51;
        if (++v65 == v51) {
          goto LABEL_56;
        }
      }
      unint64_t v67 = 0;
      unint64_t v63 = v65 + v18;
      uint64_t v29 = v19;
      while (!v23)
      {
LABEL_54:
        ++v29;
        uint64_t v18 = v52;
        uint64_t v22 = v53;
        ++v67;
        uint64_t v19 = v55;
        if (v67 == v53) {
          goto LABEL_55;
        }
      }
      unint64_t v30 = 0;
      while (1)
      {
        float v31 = 0.0;
        if (v27 < v58)
        {
          uint64_t v32 = v59;
          do
          {
            uint64_t v33 = v62;
            if (v62 < v60)
            {
              do
              {
                uint64_t v34 = v65;
                if (v65 < v63)
                {
                  do
                  {
                    uint64_t v35 = v67;
                    if (v67 < v67 + v55)
                    {
                      do
                      {
                        if (v30 < v30 + v25)
                        {
                          uint64_t v36 = 0;
                          do
                          {
                            LOBYTE(v37) = *(unsigned char *)(a1
                            float v31 = v31 + (float)v37;
                            ++v36;
                          }
                          while (v25 != v36);
                        }
                        ++v35;
                      }
                      while (v35 != v29);
                    }
                    ++v34;
                  }
                  while (v34 != v66);
                }
                ++v33;
              }
              while (v33 != v64);
            }
            ++v32;
          }
          while (v32 != v61);
        }
        if (a5)
        {
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Function not implemented.");
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        float v38 = (float)(v31 / v28) * a7;
        float v39 = 0.0;
        float v40 = 0.0;
        uint64_t v23 = v56;
        unint64_t v27 = v59;
        if (v38 != 0.0)
        {
          __e[0] = 0;
          long double v41 = frexp(v38, __e);
          double v42 = ldexp(v41, 11);
          float v40 = ldexp(round(v42), __e[0] - 11);
        }
        if ((float)(v40 + a8) == 0.0) {
          break;
        }
        __e[0] = 0;
        long double v45 = frexp((float)(v40 + a8), __e);
        double v46 = ldexp(v45, 11);
        float v39 = ldexp(round(v46), __e[0] - 11);
        if (v39 == INFINITY)
        {
          LOBYTE(v44) = -1;
        }
        else
        {
          if (v39 != -INFINITY) {
            break;
          }
          LOBYTE(v44) = 0;
        }
LABEL_53:
        if (v30 == v56) {
          goto LABEL_54;
        }
      }
      int v43 = llroundf(v39);
      if (v43 >= 255) {
        int v43 = 255;
      }
      int v44 = v43 & ~(v43 >> 31);
      goto LABEL_53;
    }
LABEL_57:
    ++v27;
    ++v61;
  }
  while (v27 != v54);
  uint64_t v20 = __p;
  if (__p) {
    goto LABEL_59;
  }
LABEL_60:
  if (v71)
  {
    uint64_t v72 = v71;
    operator delete(v71);
  }
}

void sub_210BBA46C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v35 = *(void **)(v33 - 168);
  if (v35)
  {
    *(void *)(v33 - 160) = v35;
    operator delete(v35);
  }
  uint64_t v36 = *(void **)v32;
  if (*(void *)v32)
  {
    *(void *)(v32 + 8) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValuePeReduce<signed char,unsigned char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, unint64_t *a6@<X8>, float a7@<S0>, float a8@<S1>)
{
  *(void *)signed int v75 = *MEMORY[0x263EF8340];
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (a2) {
    std::vector<unsigned char>::__append(a6, a2);
  }
  uint64_t v14 = *(const void **)a3;
  uint64_t v15 = *(void *)(a3 + 8);
  unint64_t v16 = (v15 - *(void *)a3) >> 3;
  if (v16 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3) {
    __assert_rtn("ComputeValuePeReduce", "PeReduceCpu.cpp", 77, "x_rank == o_shape.size()");
  }
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v71, v14, v15, v16);
  std::string __p = 0;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v16 == 3)
  {
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v71, (uint64_t)(v71 + 8), (char *)__e, v75, 2);
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, (char *)__e, v75, 2);
  }
  else if (v16 == 4)
  {
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v71, v71 + 8, __e);
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, __e);
  }
  uint64_t v17 = *(void *)v71;
  uint64_t v18 = *((void *)v71 + 1);
  uint64_t v19 = *((void *)v71 + 2);
  uint64_t v20 = __p;
  uint64_t v21 = *((void *)__p + 1);
  uint64_t v22 = *((void *)__p + 2);
  uint64_t v23 = *((void *)__p + 3);
  uint64_t v24 = *((void *)__p + 4);
  if (*(void *)__p == *(void *)v71) {
    uint64_t v17 = 1;
  }
  if (v21 == v18) {
    uint64_t v18 = 1;
  }
  if (v22 == v19) {
    uint64_t v19 = 1;
  }
  if (v23 == *((void *)v71 + 3)) {
    uint64_t v25 = 1;
  }
  else {
    uint64_t v25 = *((void *)v71 + 3);
  }
  if (v24 == *((void *)v71 + 4)) {
    uint64_t v26 = 1;
  }
  else {
    uint64_t v26 = *((void *)v71 + 4);
  }
  uint64_t v54 = *(void *)__p;
  if (!*(void *)__p)
  {
LABEL_61:
    uint64_t v69 = v20;
    operator delete(v20);
    goto LABEL_62;
  }
  unint64_t v27 = 0;
  float v28 = (float)(unint64_t)(v18 * v17 * v19 * v25 * v26);
  uint64_t v61 = v17;
  uint64_t v51 = *((void *)__p + 1);
  uint64_t v52 = v18;
  uint64_t v53 = *((void *)__p + 2);
  uint64_t v55 = v19;
  uint64_t v56 = *((void *)__p + 3);
  uint64_t v48 = v17;
  uint64_t v49 = *((void *)__p + 4);
  uint64_t v50 = v26;
  do
  {
    if (v24)
    {
      unint64_t v62 = 0;
      unint64_t v58 = v27 + v17;
      uint64_t v64 = v26;
      uint64_t v59 = v27;
      while (!v21)
      {
LABEL_58:
        ++v64;
        uint64_t v17 = v48;
        uint64_t v24 = v49;
        if (++v62 == v49) {
          goto LABEL_59;
        }
      }
      unint64_t v65 = 0;
      unint64_t v60 = v62 + v26;
      uint64_t v66 = v18;
      while (!v22)
      {
LABEL_57:
        ++v66;
        uint64_t v26 = v50;
        uint64_t v21 = v51;
        if (++v65 == v51) {
          goto LABEL_58;
        }
      }
      unint64_t v67 = 0;
      unint64_t v63 = v65 + v18;
      uint64_t v29 = v19;
      while (!v23)
      {
LABEL_56:
        ++v29;
        uint64_t v18 = v52;
        uint64_t v22 = v53;
        ++v67;
        uint64_t v19 = v55;
        if (v67 == v53) {
          goto LABEL_57;
        }
      }
      unint64_t v30 = 0;
      while (1)
      {
        float v31 = 0.0;
        if (v27 < v58)
        {
          uint64_t v32 = v59;
          do
          {
            uint64_t v33 = v62;
            if (v62 < v60)
            {
              do
              {
                uint64_t v34 = v65;
                if (v65 < v63)
                {
                  do
                  {
                    uint64_t v35 = v67;
                    if (v67 < v67 + v55)
                    {
                      do
                      {
                        if (v30 < v30 + v25)
                        {
                          uint64_t v36 = 0;
                          do
                          {
                            LOBYTE(v37) = *(unsigned char *)(a1
                            float v31 = v31 + (float)v37;
                            ++v36;
                          }
                          while (v25 != v36);
                        }
                        ++v35;
                      }
                      while (v35 != v29);
                    }
                    ++v34;
                  }
                  while (v34 != v66);
                }
                ++v33;
              }
              while (v33 != v64);
            }
            ++v32;
          }
          while (v32 != v61);
        }
        if (a5)
        {
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Function not implemented.");
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        float v38 = (float)(v31 / v28) * a7;
        float v39 = 0.0;
        float v40 = 0.0;
        uint64_t v23 = v56;
        unint64_t v27 = v59;
        if (v38 != 0.0)
        {
          __e[0] = 0;
          long double v41 = frexp(v38, __e);
          double v42 = ldexp(v41, 11);
          float v40 = ldexp(round(v42), __e[0] - 11);
        }
        if ((float)(v40 + a8) == 0.0) {
          break;
        }
        __e[0] = 0;
        long double v45 = frexp((float)(v40 + a8), __e);
        double v46 = ldexp(v45, 11);
        float v39 = ldexp(round(v46), __e[0] - 11);
        if (v39 == INFINITY)
        {
          char v44 = 127;
        }
        else
        {
          if (v39 != -INFINITY) {
            break;
          }
          char v44 = 0x80;
        }
LABEL_55:
        if (v30 == v56) {
          goto LABEL_56;
        }
      }
      int v43 = llroundf(v39);
      if (v43 >= 127) {
        int v43 = 127;
      }
      if (v43 <= -128) {
        char v44 = 0x80;
      }
      else {
        char v44 = v43;
      }
      goto LABEL_55;
    }
LABEL_59:
    ++v27;
    ++v61;
  }
  while (v27 != v54);
  uint64_t v20 = __p;
  if (__p) {
    goto LABEL_61;
  }
LABEL_62:
  if (v71)
  {
    uint64_t v72 = v71;
    operator delete(v71);
  }
}

void sub_210BBAA54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v35 = *(void **)(v33 - 168);
  if (v35)
  {
    *(void *)(v33 - 160) = v35;
    operator delete(v35);
  }
  uint64_t v36 = *(void **)v32;
  if (*(void *)v32)
  {
    *(void *)(v32 + 8) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValuePeReduce<MIL::Fp16,signed char>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, void *a6@<X8>, float a7@<S0>, float a8@<S1>)
{
  *(void *)uint64_t v73 = *MEMORY[0x263EF8340];
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a6, a2);
  uint64_t v14 = *(const void **)a3;
  uint64_t v15 = *(void *)(a3 + 8);
  unint64_t v16 = (v15 - *(void *)a3) >> 3;
  if (v16 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3) {
    __assert_rtn("ComputeValuePeReduce", "PeReduceCpu.cpp", 77, "x_rank == o_shape.size()");
  }
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v69, v14, v15, v16);
  std::string __p = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v16 == 3)
  {
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v69, (uint64_t)(v69 + 8), (char *)__e, v73, 2);
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, (char *)__e, v73, 2);
  }
  else if (v16 == 4)
  {
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v69, v69 + 8, __e);
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, __e);
  }
  uint64_t v17 = *(void *)v69;
  uint64_t v18 = *((void *)v69 + 1);
  uint64_t v19 = *((void *)v69 + 2);
  uint64_t Index = (uint64_t)__p;
  uint64_t v21 = *((void *)__p + 1);
  uint64_t v22 = *((void *)__p + 2);
  uint64_t v23 = *((void *)__p + 3);
  uint64_t v24 = *((void *)__p + 4);
  if (*(void *)__p == *(void *)v69) {
    uint64_t v17 = 1;
  }
  if (v21 == v18) {
    uint64_t v18 = 1;
  }
  if (v22 == v19) {
    uint64_t v19 = 1;
  }
  if (v23 == *((void *)v69 + 3)) {
    uint64_t v25 = 1;
  }
  else {
    uint64_t v25 = *((void *)v69 + 3);
  }
  if (v24 == *((void *)v69 + 4)) {
    uint64_t v26 = 1;
  }
  else {
    uint64_t v26 = *((void *)v69 + 4);
  }
  uint64_t v52 = *(void *)__p;
  if (!*(void *)__p) {
    goto LABEL_51;
  }
  unint64_t v27 = 0;
  float v28 = (float)(unint64_t)(v18 * v17 * v19 * v25 * v26);
  uint64_t v59 = v17;
  uint64_t v49 = *((void *)__p + 1);
  uint64_t v50 = v18;
  uint64_t v51 = *((void *)__p + 2);
  uint64_t v53 = v19;
  uint64_t v54 = *((void *)__p + 3);
  uint64_t v46 = v17;
  uint64_t v47 = *((void *)__p + 4);
  uint64_t v48 = v26;
  do
  {
    if (v24)
    {
      unint64_t v60 = 0;
      unint64_t v56 = v27 + v17;
      uint64_t v62 = v26;
      uint64_t v57 = v27;
      do
      {
        if (v21)
        {
          unint64_t v63 = 0;
          unint64_t v58 = v60 + v26;
          uint64_t v64 = v18;
          do
          {
            if (v22)
            {
              unint64_t v65 = 0;
              unint64_t v61 = v63 + v18;
              uint64_t v29 = v19;
              do
              {
                if (v23)
                {
                  unint64_t v30 = 0;
                  do
                  {
                    float v31 = 0.0;
                    if (v27 < v56)
                    {
                      uint64_t v32 = v57;
                      do
                      {
                        uint64_t v33 = v60;
                        if (v60 < v58)
                        {
                          do
                          {
                            uint64_t v34 = v63;
                            if (v63 < v61)
                            {
                              do
                              {
                                uint64_t v35 = v65;
                                if (v65 < v65 + v53)
                                {
                                  do
                                  {
                                    if (v30 < v30 + v25)
                                    {
                                      uint64_t v36 = 0;
                                      do
                                      {
                                        float v31 = v31 + (float)*(char *)(a1 + Index);
                                        ++v36;
                                      }
                                      while (v25 != v36);
                                    }
                                    ++v35;
                                  }
                                  while (v35 != v29);
                                }
                                ++v34;
                              }
                              while (v34 != v64);
                            }
                            ++v33;
                          }
                          while (v33 != v62);
                        }
                        ++v32;
                      }
                      while (v32 != v59);
                    }
                    if (a5)
                    {
                      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(exception, "Function not implemented.");
                      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
                    }
                    float v37 = (float)(v31 / v28) * a7;
                    float v38 = 0.0;
                    float v39 = 0.0;
                    unint64_t v27 = v57;
                    if (v37 != 0.0)
                    {
                      __e[0] = 0;
                      long double v40 = frexp(v37, __e);
                      double v41 = ldexp(v40, 11);
                      float v39 = ldexp(round(v41), __e[0] - 11);
                    }
                    if ((float)(v39 + a8) != 0.0)
                    {
                      __e[0] = 0;
                      long double v42 = frexp((float)(v39 + a8), __e);
                      double v43 = ldexp(v42, 11);
                      float v38 = ldexp(round(v43), __e[0] - 11);
                    }
                    __int16 v44 = MIL::Fp16::FromFloat((MIL::Fp16 *)Index, v38);
                    *(_WORD *)(*a6 + 2 * Index) = v44;
                    ++v30;
                    uint64_t v23 = v54;
                  }
                  while (v30 != v54);
                }
                ++v29;
                uint64_t v18 = v50;
                uint64_t v22 = v51;
                ++v65;
                uint64_t v19 = v53;
              }
              while (v65 != v51);
            }
            ++v64;
            uint64_t v26 = v48;
            uint64_t v21 = v49;
            ++v63;
          }
          while (v63 != v49);
        }
        ++v62;
        uint64_t v17 = v46;
        uint64_t v24 = v47;
        ++v60;
      }
      while (v60 != v47);
    }
    ++v27;
    ++v59;
  }
  while (v27 != v52);
  uint64_t Index = (uint64_t)__p;
  if (__p)
  {
LABEL_51:
    uint64_t v67 = Index;
    operator delete((void *)Index);
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
}

void sub_210BBAFF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v35 = *(void **)(v33 - 168);
  if (v35)
  {
    *(void *)(v33 - 160) = v35;
    operator delete(v35);
  }
  uint64_t v36 = *(void **)v32;
  if (*(void *)v32)
  {
    *(void *)(v32 + 8) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValuePeReduce<unsigned char,signed char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, unint64_t *a6@<X8>, float a7@<S0>, float a8@<S1>)
{
  *(void *)uint64_t v74 = *MEMORY[0x263EF8340];
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (a2) {
    std::vector<unsigned char>::__append(a6, a2);
  }
  uint64_t v14 = *(const void **)a3;
  uint64_t v15 = *(void *)(a3 + 8);
  unint64_t v16 = (v15 - *(void *)a3) >> 3;
  if (v16 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3) {
    __assert_rtn("ComputeValuePeReduce", "PeReduceCpu.cpp", 77, "x_rank == o_shape.size()");
  }
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v70, v14, v15, v16);
  std::string __p = 0;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v16 == 3)
  {
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v70, (uint64_t)(v70 + 8), (char *)__e, v74, 2);
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, (char *)__e, v74, 2);
  }
  else if (v16 == 4)
  {
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v70, v70 + 8, __e);
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, __e);
  }
  uint64_t v17 = *(void *)v70;
  uint64_t v18 = *((void *)v70 + 1);
  uint64_t v19 = *((void *)v70 + 2);
  uint64_t v20 = __p;
  uint64_t v21 = *((void *)__p + 1);
  uint64_t v22 = *((void *)__p + 2);
  uint64_t v23 = *((void *)__p + 3);
  uint64_t v24 = *((void *)__p + 4);
  if (*(void *)__p == *(void *)v70) {
    uint64_t v17 = 1;
  }
  if (v21 == v18) {
    uint64_t v18 = 1;
  }
  if (v22 == v19) {
    uint64_t v19 = 1;
  }
  if (v23 == *((void *)v70 + 3)) {
    uint64_t v25 = 1;
  }
  else {
    uint64_t v25 = *((void *)v70 + 3);
  }
  if (v24 == *((void *)v70 + 4)) {
    uint64_t v26 = 1;
  }
  else {
    uint64_t v26 = *((void *)v70 + 4);
  }
  uint64_t v53 = *(void *)__p;
  if (!*(void *)__p)
  {
LABEL_59:
    uint64_t v68 = v20;
    operator delete(v20);
    goto LABEL_60;
  }
  unint64_t v27 = 0;
  float v28 = (float)(unint64_t)(v18 * v17 * v19 * v25 * v26);
  uint64_t v60 = v17;
  uint64_t v50 = *((void *)__p + 1);
  uint64_t v51 = v18;
  uint64_t v52 = *((void *)__p + 2);
  uint64_t v54 = v19;
  uint64_t v55 = *((void *)__p + 3);
  uint64_t v47 = v17;
  uint64_t v48 = *((void *)__p + 4);
  uint64_t v49 = v26;
  do
  {
    if (v24)
    {
      unint64_t v61 = 0;
      unint64_t v57 = v27 + v17;
      uint64_t v63 = v26;
      uint64_t v58 = v27;
      while (!v21)
      {
LABEL_56:
        ++v63;
        uint64_t v17 = v47;
        uint64_t v24 = v48;
        if (++v61 == v48) {
          goto LABEL_57;
        }
      }
      unint64_t v64 = 0;
      unint64_t v59 = v61 + v26;
      uint64_t v65 = v18;
      while (!v22)
      {
LABEL_55:
        ++v65;
        uint64_t v26 = v49;
        uint64_t v21 = v50;
        if (++v64 == v50) {
          goto LABEL_56;
        }
      }
      unint64_t v66 = 0;
      unint64_t v62 = v64 + v18;
      uint64_t v29 = v19;
      while (!v23)
      {
LABEL_54:
        ++v29;
        uint64_t v18 = v51;
        uint64_t v22 = v52;
        ++v66;
        uint64_t v19 = v54;
        if (v66 == v52) {
          goto LABEL_55;
        }
      }
      unint64_t v30 = 0;
      while (1)
      {
        float v31 = 0.0;
        if (v27 < v57)
        {
          uint64_t v32 = v58;
          do
          {
            uint64_t v33 = v61;
            if (v61 < v59)
            {
              do
              {
                uint64_t v34 = v64;
                if (v64 < v62)
                {
                  do
                  {
                    uint64_t v35 = v66;
                    if (v66 < v66 + v54)
                    {
                      do
                      {
                        if (v30 < v30 + v25)
                        {
                          uint64_t v36 = 0;
                          do
                            float v31 = v31
                                + (float)*(char *)(a1
                          while (v25 != v36);
                        }
                        ++v35;
                      }
                      while (v35 != v29);
                    }
                    ++v34;
                  }
                  while (v34 != v65);
                }
                ++v33;
              }
              while (v33 != v63);
            }
            ++v32;
          }
          while (v32 != v60);
        }
        if (a5)
        {
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Function not implemented.");
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        float v37 = (float)(v31 / v28) * a7;
        float v38 = 0.0;
        float v39 = 0.0;
        uint64_t v23 = v55;
        unint64_t v27 = v58;
        if (v37 != 0.0)
        {
          __e[0] = 0;
          long double v40 = frexp(v37, __e);
          double v41 = ldexp(v40, 11);
          float v39 = ldexp(round(v41), __e[0] - 11);
        }
        if ((float)(v39 + a8) == 0.0) {
          break;
        }
        __e[0] = 0;
        long double v44 = frexp((float)(v39 + a8), __e);
        double v45 = ldexp(v44, 11);
        float v38 = ldexp(round(v45), __e[0] - 11);
        if (v38 == INFINITY)
        {
          LOBYTE(v43) = -1;
        }
        else
        {
          if (v38 != -INFINITY) {
            break;
          }
          LOBYTE(v43) = 0;
        }
LABEL_53:
        if (v30 == v55) {
          goto LABEL_54;
        }
      }
      int v42 = llroundf(v38);
      if (v42 >= 255) {
        int v42 = 255;
      }
      int v43 = v42 & ~(v42 >> 31);
      goto LABEL_53;
    }
LABEL_57:
    ++v27;
    ++v60;
  }
  while (v27 != v53);
  uint64_t v20 = __p;
  if (__p) {
    goto LABEL_59;
  }
LABEL_60:
  if (v70)
  {
    uint64_t v71 = v70;
    operator delete(v70);
  }
}

void sub_210BBB5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v35 = *(void **)(v33 - 168);
  if (v35)
  {
    *(void *)(v33 - 160) = v35;
    operator delete(v35);
  }
  uint64_t v36 = *(void **)v32;
  if (*(void *)v32)
  {
    *(void *)(v32 + 8) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValuePeReduce<signed char,signed char>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, unint64_t *a6@<X8>, float a7@<S0>, float a8@<S1>)
{
  *(void *)uint64_t v74 = *MEMORY[0x263EF8340];
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (a2) {
    std::vector<unsigned char>::__append(a6, a2);
  }
  uint64_t v14 = *(const void **)a3;
  uint64_t v15 = *(void *)(a3 + 8);
  unint64_t v16 = (v15 - *(void *)a3) >> 3;
  if (v16 != (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3) {
    __assert_rtn("ComputeValuePeReduce", "PeReduceCpu.cpp", 77, "x_rank == o_shape.size()");
  }
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v70, v14, v15, v16);
  std::string __p = 0;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3);
  if (v16 == 3)
  {
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&v70, (uint64_t)(v70 + 8), (char *)__e, v74, 2);
    *(int64x2_t *)int __e = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)&__p, (uint64_t)__p + 8, (char *)__e, v74, 2);
  }
  else if (v16 == 4)
  {
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&v70, v70 + 8, __e);
    *(void *)int __e = 1;
    std::vector<unsigned long long>::insert((uint64_t)&__p, (char *)__p + 8, __e);
  }
  uint64_t v17 = *(void *)v70;
  uint64_t v18 = *((void *)v70 + 1);
  uint64_t v19 = *((void *)v70 + 2);
  uint64_t v20 = __p;
  uint64_t v21 = *((void *)__p + 1);
  uint64_t v22 = *((void *)__p + 2);
  uint64_t v23 = *((void *)__p + 3);
  uint64_t v24 = *((void *)__p + 4);
  if (*(void *)__p == *(void *)v70) {
    uint64_t v17 = 1;
  }
  if (v21 == v18) {
    uint64_t v18 = 1;
  }
  if (v22 == v19) {
    uint64_t v19 = 1;
  }
  if (v23 == *((void *)v70 + 3)) {
    uint64_t v25 = 1;
  }
  else {
    uint64_t v25 = *((void *)v70 + 3);
  }
  if (v24 == *((void *)v70 + 4)) {
    uint64_t v26 = 1;
  }
  else {
    uint64_t v26 = *((void *)v70 + 4);
  }
  uint64_t v53 = *(void *)__p;
  if (!*(void *)__p)
  {
LABEL_61:
    uint64_t v68 = v20;
    operator delete(v20);
    goto LABEL_62;
  }
  unint64_t v27 = 0;
  float v28 = (float)(unint64_t)(v18 * v17 * v19 * v25 * v26);
  uint64_t v60 = v17;
  uint64_t v50 = *((void *)__p + 1);
  uint64_t v51 = v18;
  uint64_t v52 = *((void *)__p + 2);
  uint64_t v54 = v19;
  uint64_t v55 = *((void *)__p + 3);
  uint64_t v47 = v17;
  uint64_t v48 = *((void *)__p + 4);
  uint64_t v49 = v26;
  do
  {
    if (v24)
    {
      unint64_t v61 = 0;
      unint64_t v57 = v27 + v17;
      uint64_t v63 = v26;
      uint64_t v58 = v27;
      while (!v21)
      {
LABEL_58:
        ++v63;
        uint64_t v17 = v47;
        uint64_t v24 = v48;
        if (++v61 == v48) {
          goto LABEL_59;
        }
      }
      unint64_t v64 = 0;
      unint64_t v59 = v61 + v26;
      uint64_t v65 = v18;
      while (!v22)
      {
LABEL_57:
        ++v65;
        uint64_t v26 = v49;
        uint64_t v21 = v50;
        if (++v64 == v50) {
          goto LABEL_58;
        }
      }
      unint64_t v66 = 0;
      unint64_t v62 = v64 + v18;
      uint64_t v29 = v19;
      while (!v23)
      {
LABEL_56:
        ++v29;
        uint64_t v18 = v51;
        uint64_t v22 = v52;
        ++v66;
        uint64_t v19 = v54;
        if (v66 == v52) {
          goto LABEL_57;
        }
      }
      unint64_t v30 = 0;
      while (1)
      {
        float v31 = 0.0;
        if (v27 < v57)
        {
          uint64_t v32 = v58;
          do
          {
            uint64_t v33 = v61;
            if (v61 < v59)
            {
              do
              {
                uint64_t v34 = v64;
                if (v64 < v62)
                {
                  do
                  {
                    uint64_t v35 = v66;
                    if (v66 < v66 + v54)
                    {
                      do
                      {
                        if (v30 < v30 + v25)
                        {
                          uint64_t v36 = 0;
                          do
                            float v31 = v31
                                + (float)*(char *)(a1
                          while (v25 != v36);
                        }
                        ++v35;
                      }
                      while (v35 != v29);
                    }
                    ++v34;
                  }
                  while (v34 != v65);
                }
                ++v33;
              }
              while (v33 != v63);
            }
            ++v32;
          }
          while (v32 != v60);
        }
        if (a5)
        {
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Function not implemented.");
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        float v37 = (float)(v31 / v28) * a7;
        float v38 = 0.0;
        float v39 = 0.0;
        uint64_t v23 = v55;
        unint64_t v27 = v58;
        if (v37 != 0.0)
        {
          __e[0] = 0;
          long double v40 = frexp(v37, __e);
          double v41 = ldexp(v40, 11);
          float v39 = ldexp(round(v41), __e[0] - 11);
        }
        if ((float)(v39 + a8) == 0.0) {
          break;
        }
        __e[0] = 0;
        long double v44 = frexp((float)(v39 + a8), __e);
        double v45 = ldexp(v44, 11);
        float v38 = ldexp(round(v45), __e[0] - 11);
        if (v38 == INFINITY)
        {
          char v43 = 127;
        }
        else
        {
          if (v38 != -INFINITY) {
            break;
          }
          char v43 = 0x80;
        }
LABEL_55:
        if (v30 == v55) {
          goto LABEL_56;
        }
      }
      int v42 = llroundf(v38);
      if (v42 >= 127) {
        int v42 = 127;
      }
      if (v42 <= -128) {
        char v43 = 0x80;
      }
      else {
        char v43 = v42;
      }
      goto LABEL_55;
    }
LABEL_59:
    ++v27;
    ++v60;
  }
  while (v27 != v53);
  uint64_t v20 = __p;
  if (__p) {
    goto LABEL_61;
  }
LABEL_62:
  if (v70)
  {
    uint64_t v71 = v70;
    operator delete(v70);
  }
}

void sub_210BBBBC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v35 = *(void **)(v33 - 168);
  if (v35)
  {
    *(void *)(v33 - 160) = v35;
    operator delete(v35);
  }
  uint64_t v36 = *(void **)v32;
  if (*(void *)v32)
  {
    *(void *)(v32 + 8) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::PeReduceCpu::~PeReduceCpu(MIL::ANEMachineIR::Interpreter::PeReduceCpu *this)
{
}

void MIL::ANEMachineIR::Interpreter::DelegateByNameOp::MakeWithDefaultTable(MIL::ANEMachineIR::Interpreter::DelegateByNameOp *this)
{
  long long v1 = 0u;
  long long v2 = 0u;
  int v3 = 1065353216;
  operator new();
}

void sub_210BBC570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (a3) {
    MIL::ANEMachineIR::Interpreter::DelegateByNameOp::MakeWithDefaultTable();
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MIL::ANEMachineIR::Interpreter::DelegateByNameOp::Run@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  int v7 = (void *)(a1 + 8);
  long long v8 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>>>::find<std::string>(v7, v8);
  if (v9) {
    return (***((uint64_t (****)(void, uint64_t, uint64_t))v9 + 5))(*((void *)v9 + 5), a2, a3);
  }
  *a4 = 1;
  (*(void (**)(uint64_t))(*(void *)a2 + 56))(a2);
  return std::operator+<char>();
}

void MIL::ANEMachineIR::Interpreter::DelegateByNameOp::~DelegateByNameOp(MIL::ANEMachineIR::Interpreter::DelegateByNameOp *this)
{
  *(void *)this = &unk_26C319318;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::~__hash_table((uint64_t)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C319318;
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::~__hash_table((uint64_t)this + 8);
  JUMPOUT(0x21667BBD0);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)__n128 result = v2;
  *(void *)(result + 8) = a2[1];
  a2[1] = 0;
  uint64_t v5 = a2[2];
  int v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 16;
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      int v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    int v3 = *(void **)a1;
    operator delete(v3);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::ConstCpu>>>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::ConstCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if (v4) {
    v6[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_210BBCB40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::ConstCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  unint64_t v7 = operator new(0x30uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *unint64_t v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  void v7[5] = v8;
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_210BBCBE0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeActivationCpu>>>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeActivationCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if (v4) {
    v6[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_210BBCCB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeActivationCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  unint64_t v7 = operator new(0x30uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *unint64_t v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  void v7[5] = v8;
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_210BBCD50(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeAddCpu>>>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeAddCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if (v4) {
    v6[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_210BBCDC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeAddCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  unint64_t v7 = operator new(0x30uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *unint64_t v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  void v7[5] = v8;
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_210BBCE68(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeBatchMatmulCpu>>>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeBatchMatmulCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if (v4) {
    v6[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_210BBCEE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeBatchMatmulCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  unint64_t v7 = operator new(0x30uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *unint64_t v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  void v7[5] = v8;
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_210BBCF80(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeConvCpu>>>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeConvCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if (v4) {
    v6[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_210BBCFF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeConvCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  unint64_t v7 = operator new(0x30uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *unint64_t v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  void v7[5] = v8;
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_210BBD098(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeMatmulCpu>>>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeMatmulCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if (v4) {
    v6[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_210BBD110(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeMatmulCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  unint64_t v7 = operator new(0x30uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *unint64_t v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  void v7[5] = v8;
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_210BBD1B0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeAvgPoolCpu>>>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeAvgPoolCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if (v4) {
    v6[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_210BBD228(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeAvgPoolCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  unint64_t v7 = operator new(0x30uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *unint64_t v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  void v7[5] = v8;
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_210BBD2C8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeMaxPoolCpu>>>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeMaxPoolCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if (v4) {
    v6[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_210BBD340(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeMaxPoolCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  unint64_t v7 = operator new(0x30uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *unint64_t v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  void v7[5] = v8;
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_210BBD3E0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeMinPoolCpu>>>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeMinPoolCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if (v4) {
    v6[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_210BBD458(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::NeMinPoolCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  unint64_t v7 = operator new(0x30uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *unint64_t v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  void v7[5] = v8;
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_210BBD4F8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeAddCpu>>>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeAddCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if (v4) {
    v6[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_210BBD570(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeAddCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  unint64_t v7 = operator new(0x30uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *unint64_t v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  void v7[5] = v8;
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_210BBD610(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeAvgPoolCpu>>>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeAvgPoolCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if (v4) {
    v6[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_210BBD688(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeAvgPoolCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  unint64_t v7 = operator new(0x30uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *unint64_t v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  void v7[5] = v8;
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_210BBD728(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeMaxPoolCpu>>>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeMaxPoolCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if (v4) {
    v6[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_210BBD7A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeMaxPoolCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  unint64_t v7 = operator new(0x30uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *unint64_t v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  void v7[5] = v8;
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_210BBD840(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeMulCpu>>>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeMulCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if (v4) {
    v6[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_210BBD8B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeMulCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  unint64_t v7 = operator new(0x30uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *unint64_t v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  void v7[5] = v8;
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_210BBD958(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeMinPoolCpu>>>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeMinPoolCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if (v4) {
    v6[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_210BBD9D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeMinPoolCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  unint64_t v7 = operator new(0x30uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *unint64_t v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  void v7[5] = v8;
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_210BBDA70(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeReduceCpu>>>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeReduceCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if (v4) {
    v6[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_210BBDAE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::PeReduceCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  unint64_t v7 = operator new(0x30uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *unint64_t v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  void v7[5] = v8;
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_210BBDB88(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::ReshapeCpu>>>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::ReshapeCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if (v4) {
    v6[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_210BBDC00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::ReshapeCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  unint64_t v7 = operator new(0x30uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *unint64_t v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  void v7[5] = v8;
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_210BBDCA0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__emplace_unique_impl<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::TransposeCpu>>>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::TransposeCpu>>>((uint64_t)a1, a2, (uint64_t)v6);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, v6[0]);
  if (v4) {
    v6[0] = 0;
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)v6, 0);
  return inserted;
}

void sub_210BBDD18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>>>::__construct_node<std::pair<char const*,std::unique_ptr<MIL::ANEMachineIR::Interpreter::TransposeCpu>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  unint64_t v7 = operator new(0x30uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *unint64_t v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  void v7[5] = v8;
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_210BBDDB8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::ANEMachineIR::Interpreter::InterpretedOp>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::ANEMachineIR::Interpreter::DelegateByNameOp::MakeWithDefaultTable()
{
  OUTLINED_FUNCTION_0();
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void ANEMachineIR::H2022::Validators::ValidateBaseActivation(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

uint64_t ANEMachineIR::H2022::Validators::ValidateLinear@<X0>(MIL::IRObject *this@<X0>, uint64_t a2@<X8>)
{
  return ANEMachineIR::Validators::ValidateLinear(this, a2);
}

uint64_t ANEMachineIR::H2022::Validators::ValidateLrelu@<X0>(MIL::IRObject *this@<X0>, uint64_t a2@<X8>)
{
  return ANEMachineIR::Validators::ValidateLrelu(this, a2);
}

uint64_t ANEMachineIR::H2022::Validators::ValidateNePiecewiseV2@<X0>(MIL::IRObject *this@<X0>, uint64_t a2@<X8>)
{
  return ANEMachineIR::Validators::ValidateNePiecewiseV2(this, a2);
}

uint64_t ANEMachineIR::H2022::Validators::ValidateRelu(ANEMachineIR::H2022::Validators *this, const MIL::IROperation *a2)
{
  return ANEMachineIR::Validators::ValidateRelu(this, 2);
}

uint64_t ANEMachineIR::H2022::Validators::ValidateScaledActivation(ANEMachineIR::H2022::Validators *this, const MIL::IROperation *a2)
{
  return ANEMachineIR::Validators::ValidateRelu(this, 2);
}

uint64_t ANEMachineIR::H2022::Validators::ValidateSigmoid(ANEMachineIR::H2022::Validators *this, const MIL::IROperation *a2)
{
  return ANEMachineIR::Validators::ValidateRelu(this, 2);
}

uint64_t ANEMachineIR::H2022::Validators::ValidateSqrt(ANEMachineIR::H2022::Validators *this, const MIL::IROperation *a2)
{
  return ANEMachineIR::Validators::ValidateRelu(this, 2);
}

uint64_t ANEMachineIR::H2022::Validators::ValidateTanh(ANEMachineIR::H2022::Validators *this, const MIL::IROperation *a2)
{
  return ANEMachineIR::Validators::ValidateRelu(this, 2);
}

unsigned __int8 *MIL::ANEMachineIR::Interpreter::ComputedValueStore::TryGetValue(void *a1, unsigned __int8 *a2)
{
  unint64_t result = std::__hash_table<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>>>::find<std::string>(a1, a2);
  if (result) {
    return (unsigned __int8 *)*((void *)result + 5);
  }
  return result;
}

uint64_t MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  std::unordered_map<std::string,std::unique_ptr<MIL::IRTensorValue const>>::insert_or_assign[abi:ne180100]<std::unique_ptr<MIL::IRTensorValue const>>(a1, a2, a3);
  return v3 & 1;
}

unsigned __int8 *std::unordered_map<std::string,std::unique_ptr<MIL::IRTensorValue const>>::insert_or_assign[abi:ne180100]<std::unique_ptr<MIL::IRTensorValue const>>(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  char v4 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>>>::__emplace_unique_key_args<std::string,std::string const&,std::unique_ptr<MIL::IRTensorValue const>>(a1, a2, (uint64_t)a2, a3);
  uint64_t v5 = v4;
  if (!v6)
  {
    uint64_t v7 = *a3;
    *a3 = 0;
    uint64_t v8 = *((void *)v4 + 5);
    *((void *)v5 + 5) = v7;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  return v5;
}

uint64_t MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(void *a1, uint64_t a2, uint64_t a3)
{
  char v4 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 120))(a2, a3, 0);
  if (!v4
    || (uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<TranslatorStatus ()(MIL::IROperation const&)>>>>::find<std::string>(a1, v4)) == 0|| (result = *((void *)v5 + 5)) == 0)
  {
    uint64_t v7 = *(uint64_t (**)(void))(*(void *)MIL::IROperation::TryGetParameterValue() + 40);
    return v7();
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>>>::__emplace_unique_key_args<std::string,std::string const&,std::unique_ptr<MIL::IRTensorValue const>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v9 = (void *)(a1 + 24);
  unint64_t v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (unint64_t i = *v15; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v11)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>>>::__construct_node_hash<std::string const&,std::unique_ptr<MIL::IRTensorValue const>>(a1, v11, a3, a4, (uint64_t)v27);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__rehash<true>(a1, v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *uint64_t v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12) {
          v25 %= v12;
        }
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  unint64_t i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*v9;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void sub_210BBE248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>>>::__construct_node_hash<std::string const&,std::unique_ptr<MIL::IRTensorValue const>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = operator new(0x30uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  void *v10 = 0;
  v10[1] = a2;
  unint64_t v11 = (std::string *)(v10 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v10[4] = *(void *)(a3 + 16);
  }
  uint64_t v12 = *a4;
  *a4 = 0;
  v10[5] = v12;
  *(unsigned char *)(a5 + 16) = 1;
}

void sub_210BBE2F0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IRTensorValue const>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::IRTensorValue const>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::IRTensorValue const>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    char v3 = *(void **)a1;
    operator delete(v3);
  }
}

void MilTranslator::WeightTranslator::~WeightTranslator(MilTranslator::WeightTranslator *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  char v3 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::unique_ptr<MIL::Blob::StorageWriter>::reset[abi:ne180100]((MIL::Blob::StorageWriter **)this + 14, 0);
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  std::__hash_table<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::__unordered_map_hasher<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,true>,std::__unordered_map_equal<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,true>,std::allocator<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>>>::~__hash_table((uint64_t)this + 40);
  std::__hash_table<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::__unordered_map_hasher<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,true>,std::__unordered_map_equal<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,true>,std::allocator<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>>>::~__hash_table((uint64_t)this);
}

uint64_t MilTranslator::WeightTranslator::WeightTranslator(uint64_t a1, long long *a2, int a3, uint64_t a4, uint64_t a5)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 80), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v10 = *a2;
    *(void *)(a1 + 96) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 80) = v10;
  }
  *(void *)(a1 + 104) = 0;
  if (a3) {
    operator new();
  }
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)a5;
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  if (*((char *)a2 + 23) >= 0) {
    unint64_t v11 = (const char *)a2;
  }
  else {
    unint64_t v11 = *(const char **)a2;
  }
  uint64_t v12 = fopen(v11, "a");
  fclose(v12);
  return a1;
}

void sub_210BBE560(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::__unordered_map_hasher<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,true>,std::__unordered_map_equal<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,true>,std::allocator<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::__unordered_map_hasher<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,true>,std::__unordered_map_equal<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,true>,std::allocator<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void MilTranslator::WeightTranslator::TargetProgramConstOpName(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, std::string::size_type a5@<X4>, uint64_t a6@<X5>, _DWORD *a7@<X8>)
{
  v41[2] = *MEMORY[0x263EF8340];
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 120))(a2, a3, 0);
  uint64_t v15 = v14;
  std::string __p = 0;
  long long v39 = 0uLL;
  if (v14)
  {
    char v16 = 0;
    p_p = (void **)v14;
  }
  else
  {
    int v35 = a4;
    std::string::size_type v18 = a5;
    (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a2 + 200))(v36, a2);
    float v19 = (char *)v36[0];
    if (v36[1] == v36[0]) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    if (*(char *)(v36[0] + 23) >= 0) {
      size_t v20 = *(unsigned __int8 *)(v36[0] + 23);
    }
    else {
      size_t v20 = *(void *)(v36[0] + 8);
    }
    unint64_t v21 = &v37;
    std::string::basic_string[abi:ne180100]((uint64_t)&v37, v20 + 11);
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v21 = (std::string *)v37.__r_.__value_.__r.__words[0];
    }
    if (v20)
    {
      if (v19[23] >= 0) {
        unint64_t v22 = v19;
      }
      else {
        unint64_t v22 = *(char **)v19;
      }
      memmove(v21, v22, v20);
    }
    strcpy((char *)v21 + v20, "__ival_for_");
    int v23 = *(char *)(a3 + 23);
    if (v23 >= 0) {
      uint64_t v24 = (const std::string::value_type *)a3;
    }
    else {
      uint64_t v24 = *(const std::string::value_type **)a3;
    }
    if (v23 >= 0) {
      std::string::size_type v25 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v25 = *(void *)(a3 + 8);
    }
    uint64_t v26 = std::string::append(&v37, v24, v25);
    unint64_t v27 = (void *)v26->__r_.__value_.__r.__words[0];
    v41[0] = v26->__r_.__value_.__l.__size_;
    *(void *)((char *)v41 + 7) = *(std::string::size_type *)((char *)&v26->__r_.__value_.__r.__words[1] + 7);
    char v16 = HIBYTE(v26->__r_.__value_.__r.__words[2]);
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    *(void *)((char *)&v39 + 7) = *(void *)((char *)v41 + 7);
    std::string __p = v27;
    *(void *)&long long v39 = v41[0];
    HIBYTE(v39) = v16;
    a5 = v18;
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    long double v40 = (void **)v36;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v40);
    p_p = &__p;
    a4 = v35;
  }
  uint64_t ParameterValue = MIL::IROperation::TryGetParameterValue();
  if (ParameterValue
    && (uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)ParameterValue + 40))(ParameterValue), (v30 = v29) != 0))
  {
    uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 32))(v29);
    uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 88))(v31);
    uint64_t v33 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(void *)v30 + 32))(v30);
    ANEMachineIR::Utils::GetStaticTensorShape(v33, v34, (uint64_t)&v37);
    MilTranslator::WeightTranslator::TargetProgramConstOpName(a4, a1, (uint64_t)p_p, v15 == 0, (uint64_t **)&v37, v32, a5, (uint64_t)a7, a6);
    if (v37.__r_.__value_.__r.__words[0])
    {
      v37.__r_.__value_.__l.__size_ = v37.__r_.__value_.__r.__words[0];
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    char v16 = HIBYTE(v39);
  }
  else
  {
    *a7 = 11;
    std::operator+<char>();
  }
  if (v16 < 0) {
    operator delete(__p);
  }
}

void sub_210BBE944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char *a27)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  a27 = &a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  _Unwind_Resume(a1);
}

void MilTranslator::WeightTranslator::TargetProgramConstOpName(int __val@<W6>, uint64_t a2@<X0>, uint64_t a3@<X1>, char a4@<W2>, uint64_t **a5@<X3>, uint64_t a6@<X4>, std::string::size_type a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  BYTE8(v43) = 0;
  BYTE8(v44) = 0;
  memset(&v42, 0, sizeof(v42));
  MilTranslator::WeightTranslator::WeightRewriteDescriptionForEnum(__val, a5, a7, (uint64_t)&v43, &v42, (uint64_t)&v39);
  if (v39)
  {
    *(_DWORD *)a8 = v39;
    *(_OWORD *)(a8 + 8) = v40;
    *(void *)(a8 + 24) = v41;
    goto LABEL_55;
  }
  memset(&v37, 0, sizeof(v37));
  if ((a4 & 1) == 0)
  {
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string v32 = *(std::string *)a3;
    }
    *(_OWORD *)std::string __p = v43;
    long long v34 = v44;
    std::string::size_type v18 = std::__hash_table<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::__unordered_map_hasher<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,true>,std::__unordered_map_equal<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,true>,std::allocator<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>>>::find<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>((void *)a2, (unsigned __int8 *)&v32);
    float v19 = (const std::string *)v18;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v32.__r_.__value_.__l.__data_);
      if (v19) {
        goto LABEL_16;
      }
    }
    else if (v18)
    {
LABEL_16:
      std::string::operator=(&v37, v19 + 3);
      std::string::pointer data = v19[4].__r_.__value_.__l.__data_;
      goto LABEL_17;
    }
    if (*(void *)(a2 + 112))
    {
      MilTranslator::WeightTranslator::WriteWeight(a2, a5, a6, (uint64_t)&v43, (uint64_t)&v37, a8);
      if (*(_DWORD *)a8) {
        goto LABEL_51;
      }
      if (*(char *)(a8 + 31) < 0) {
        operator delete(*(void **)(a8 + 8));
      }
    }
    else
    {
      if (*(char *)(a2 + 103) < 0) {
        std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)(a2 + 80), *(void *)(a2 + 88));
      }
      else {
        std::string v32 = *(std::string *)(a2 + 80);
      }
      std::string::size_type v25 = *(void **)(a2 + 104);
      __p[0] = v25;
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v37.__r_.__value_.__l.__data_);
        std::string::size_type v25 = __p[0];
      }
      std::string v37 = v32;
      std::string::pointer data = (std::string::pointer)v25;
      uint64_t v26 = 1;
      if (a6 == 4) {
        uint64_t v26 = 2;
      }
      for (unint64_t i = *a5; i != a5[1]; ++i)
      {
        uint64_t v28 = *i;
        v26 *= v28;
      }
      *(void *)(a2 + 104) += v26;
    }
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string v29 = *(std::string *)a3;
    }
    long long v30 = v43;
    long long v31 = v44;
    std::pair<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription> const,MilTranslator::WeightTranslator::WeightFileInfo>::pair[abi:ne180100]<true,0>(&v32, (long long *)&v29, (long long *)&v37);
    std::__hash_table<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::__unordered_map_hasher<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,true>,std::__unordered_map_equal<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,true>,std::allocator<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>>>::__emplace_unique_key_args<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::pair<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription> const,MilTranslator::WeightTranslator::WeightFileInfo>>(a2, (unsigned __int8 *)&v32, (long long *)&v32);
    if (v36 < 0) {
      operator delete(v35);
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
LABEL_17:
    std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>::pair[abi:ne180100]<MilTranslator::WeightTranslator::WeightFileInfo&,std::vector<unsigned long long>&,0>(&v32, (long long *)&v37, (uint64_t)&v42);
    size_t v20 = (const std::string *)std::__hash_table<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::__unordered_map_hasher<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,true>,std::__unordered_map_equal<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,true>,std::allocator<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>>>::find<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>((void *)(a2 + 40), &v32);
    if (__p[1])
    {
      *(void **)&long long v34 = __p[1];
      operator delete(__p[1]);
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v32.__r_.__value_.__l.__data_);
      if (!v20)
      {
LABEL_36:
        uint64_t v24 = *(void *)(*(void *)(a2 + 120) + 24);
        if (!v24) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(std::string *__return_ptr))(*(void *)v24 + 48))(&v32);
        if (*(char *)(a9 + 23) < 0) {
          operator delete(*(void **)a9);
        }
        *(std::string *)a9 = v32;
        MilTranslator::WeightTranslator::WriteConstOp(a2, (uint64_t)&v42, a6, a9);
        if ((a4 & 1) == 0)
        {
          std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>::pair[abi:ne180100]<MilTranslator::WeightTranslator::WeightFileInfo&,std::vector<unsigned long long>&,0>(&v29, (long long *)&v37, (uint64_t)&v42);
          std::pair<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>> const,std::string>::pair[abi:ne180100]<true,0>(&v32, (long long *)&v29, (long long *)a9);
          std::__hash_table<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::__unordered_map_hasher<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,true>,std::__unordered_map_equal<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,true>,std::allocator<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>>>::__emplace_unique_key_args<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::pair<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>> const,std::string>>(a2 + 40, &v32, (uint64_t)&v32);
          if (v36 < 0) {
            operator delete(v35);
          }
          if (__p[1])
          {
            *(void **)&long long v34 = __p[1];
            operator delete(__p[1]);
          }
          if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v32.__r_.__value_.__l.__data_);
          }
          if (*((void *)&v30 + 1))
          {
            *(void *)&long long v31 = *((void *)&v30 + 1);
            operator delete(*((void **)&v30 + 1));
          }
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v29.__r_.__value_.__l.__data_);
          }
        }
        *(_DWORD *)a8 = 0;
        std::string::basic_string[abi:ne180100]<0>((void *)(a8 + 8), (char *)&unk_210C6BFE7);
        goto LABEL_51;
      }
    }
    else if (!v20)
    {
      goto LABEL_36;
    }
    std::string::operator=((std::string *)a9, v20 + 3);
    *(_DWORD *)a8 = 0;
    std::string::basic_string[abi:ne180100]<0>((void *)(a8 + 8), (char *)&unk_210C6BFE7);
    goto LABEL_51;
  }
  if (!*(void *)(a2 + 112))
  {
    if (*(char *)(a2 + 103) < 0)
    {
      std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)(a2 + 80), *(void *)(a2 + 88));
      char v16 = (void *)(a2 + 104);
      unint64_t v17 = *(void **)(a2 + 104);
      __p[0] = v17;
      if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_30;
      }
      uint64_t v15 = __p;
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    else
    {
      std::string v32 = *(std::string *)(a2 + 80);
      uint64_t v15 = (void **)(a2 + 104);
      char v16 = (void *)(a2 + 104);
    }
    unint64_t v17 = *v15;
LABEL_30:
    std::string v37 = v32;
    std::string::pointer data = (std::string::pointer)v17;
    uint64_t v21 = 1;
    if (a6 == 4) {
      uint64_t v21 = 2;
    }
    for (unint64_t j = *a5; j != a5[1]; ++j)
    {
      uint64_t v23 = *j;
      v21 *= v23;
    }
    *v16 += v21;
    goto LABEL_36;
  }
  MilTranslator::WeightTranslator::WriteWeight(a2, a5, a6, (uint64_t)&v43, (uint64_t)&v37, a8);
  if (!*(_DWORD *)a8)
  {
    if (*(char *)(a8 + 31) < 0) {
      operator delete(*(void **)(a8 + 8));
    }
    goto LABEL_36;
  }
LABEL_51:
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41) < 0) {
    operator delete((void *)v40);
  }
LABEL_55:
  if (v42.__r_.__value_.__r.__words[0])
  {
    v42.__r_.__value_.__l.__size_ = v42.__r_.__value_.__r.__words[0];
    operator delete(v42.__r_.__value_.__l.__data_);
  }
}

void sub_210BBEED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v40 - 137) < 0) {
    operator delete(*(void **)(v40 - 160));
  }
  std::string v42 = *(void **)(v40 - 136);
  if (v42)
  {
    *(void *)(v40 - 128) = v42;
    operator delete(v42);
  }
  _Unwind_Resume(exception_object);
}

void MilTranslator::WeightTranslator::WeightRewriteDescriptionForEnum(int __val@<W2>, void *a2@<X1>, std::string::size_type a3@<X3>, uint64_t a4@<X4>, std::string *a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (__val != 1)
  {
    if (__val)
    {
      *(_DWORD *)a6 = 4;
      std::to_string(&__src, __val);
      std::string::size_type v18 = std::string::insert(&__src, 0, "Weight rewrite not implemented for ");
    }
    else
    {
      uint64_t v8 = (void *)*a2;
      uint64_t v9 = (void *)a2[1];
      if (a3 != 1)
      {
        if (v9 == v8) {
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        if (*v8 % a3)
        {
          *(_DWORD *)a6 = 4;
          std::string::basic_string[abi:ne180100]<0>((void *)(a6 + 8), "num_groups in groupwise conv must divide kernel dimension.");
          return;
        }
      }
      unint64_t v19 = v9 - v8;
      switch(v19)
      {
        case 3uLL:
          if (*v8 == a3)
          {
            *(_WORD *)(a4 + 4) = 516;
            *(_DWORD *)a4 = 84082944;
          }
          else
          {
            *(_WORD *)(a4 + 4) = 772;
            *(_DWORD *)a4 = 84017408;
            if (a3 != 1)
            {
              int v23 = *(unsigned __int8 *)(a4 + 24);
              *(unsigned char *)(a4 + 8) = 3;
              *(void *)(a4 + 16) = a3;
              if (!v23) {
                *(unsigned char *)(a4 + 24) = 1;
              }
            }
          }
          uint64_t v24 = (void *)*a2;
          std::string::size_type v25 = *(void *)(*a2 + 16);
          __src.__r_.__value_.__r.__words[0] = a3;
          __src.__r_.__value_.__l.__size_ = v25;
          __src.__r_.__value_.__r.__words[2] = v24[1];
          std::string::size_type v29 = *v24 / a3;
          std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)a5, (char *)&__src, (uint64_t)&v30, 4uLL);
          goto LABEL_46;
        case 5uLL:
          if (*v8 == a3)
          {
            *(_WORD *)(a4 + 4) = 2;
            *(_DWORD *)a4 = 84148993;
          }
          else
          {
            *(_WORD *)(a4 + 4) = 258;
            *(_DWORD *)a4 = 84148992;
            if (a3 != 1)
            {
              int v26 = *(unsigned __int8 *)(a4 + 24);
              *(unsigned char *)(a4 + 8) = 1;
              *(void *)(a4 + 16) = a3;
              if (!v26) {
                *(unsigned char *)(a4 + 24) = 1;
              }
            }
          }
          __src.__r_.__value_.__r.__words[0] = a3;
          unint64_t v27 = (void *)*a2;
          *(_OWORD *)&__src.__r_.__value_.__r.__words[1] = *(_OWORD *)(*a2 + 16);
          std::string::size_type v29 = v27[4];
          std::string::size_type v30 = v27[1];
          std::string::size_type v31 = *v27 / a3;
          std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)a5, (char *)&__src, (uint64_t)&v32, 6uLL);
          goto LABEL_46;
        case 4uLL:
          if (*v8 == a3)
          {
            *(_WORD *)(a4 + 4) = 259;
            *(_DWORD *)a4 = 84148736;
          }
          else
          {
            *(_WORD *)(a4 + 4) = 515;
            *(_DWORD *)a4 = 84148480;
            if (a3 != 1)
            {
              int v21 = *(unsigned __int8 *)(a4 + 24);
              *(unsigned char *)(a4 + 8) = 2;
              *(void *)(a4 + 16) = a3;
              if (!v21) {
                *(unsigned char *)(a4 + 24) = 1;
              }
            }
          }
          __src.__r_.__value_.__r.__words[0] = a3;
          unint64_t v22 = (void *)*a2;
          *(_OWORD *)&__src.__r_.__value_.__r.__words[1] = *(_OWORD *)(*a2 + 16);
          std::string::size_type v29 = v22[1];
          std::string::size_type v30 = *v22 / a3;
          std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)a5, (char *)&__src, (uint64_t)&v31, 5uLL);
LABEL_46:
          *(_DWORD *)a6 = 0;
          *(void *)(a6 + 16) = 0;
          *(void *)(a6 + 24) = 0;
          *(void *)(a6 + 8) = 0;
          return;
      }
      *(_DWORD *)a6 = 11;
      std::to_string(&__src, v19);
      std::string::size_type v18 = std::string::insert(&__src, 0, "Illegal rank for conv weight translation: ");
    }
    goto LABEL_31;
  }
  uint64_t v10 = a2[1] - *a2;
  if (v10 != 16)
  {
    *(_DWORD *)a6 = 4;
    std::to_string(&__src, v10 >> 3);
    std::string::size_type v18 = std::string::insert(&__src, 0, "Not implemented rank for weight translation: ");
LABEL_31:
    long long v20 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    *(void *)(a6 + 24) = *((void *)&v18->__r_.__value_.__l + 2);
    *(_OWORD *)(a6 + 8) = v20;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    unint64_t v17 = (char *)__src.__r_.__value_.__r.__words[0];
LABEL_33:
    operator delete(v17);
    return;
  }
  *(_WORD *)(a4 + 4) = 1029;
  *(_DWORD *)a4 = 50462976;
  memset(&__src, 0, sizeof(__src));
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__src, (const void *)*a2, a2[1], (uint64_t)(a2[1] - *a2) >> 3);
  std::string::size_type size = __src.__r_.__value_.__l.__size_;
  unint64_t v11 = (char *)__src.__r_.__value_.__r.__words[0];
  if (__src.__r_.__value_.__r.__words[0] != __src.__r_.__value_.__l.__size_)
  {
    uint8x8_t v13 = (void *)(__src.__r_.__value_.__l.__size_ - 8);
    if (__src.__r_.__value_.__l.__size_ - 8 > __src.__r_.__value_.__r.__words[0])
    {
      std::string::size_type v14 = __src.__r_.__value_.__r.__words[0] + 8;
      do
      {
        uint64_t v15 = *(void *)(v14 - 8);
        *(void *)(v14 - 8) = *v13;
        *v13-- = v15;
        BOOL v16 = v14 >= (unint64_t)v13;
        v14 += 8;
      }
      while (!v16);
    }
  }
  if (&__src != a5)
  {
    std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)a5, v11, size, (uint64_t)(size - (void)v11) >> 3);
    unint64_t v11 = (char *)__src.__r_.__value_.__r.__words[0];
  }
  *(_DWORD *)a6 = 0;
  *(void *)(a6 + 16) = 0;
  *(void *)(a6 + 24) = 0;
  *(void *)(a6 + 8) = 0;
  if (v11)
  {
    __src.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
    unint64_t v17 = v11;
    goto LABEL_33;
  }
}

void sub_210BBF3E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MilTranslator::WeightTranslator::WriteWeight(uint64_t a1@<X0>, uint64_t **a2@<X1>, int a3@<W2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v7 = (char *)a2[1] - (char *)*a2;
  if (!v7 || (unint64_t)v7 >= 0x29)
  {
    *(_DWORD *)a6 = 13;
    std::to_string(&v201, v7 >> 3);
    char v36 = std::string::insert(&v201, 0, "Unexpected rank ");
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    *(void *)(a6 + 24) = *((void *)&v36->__r_.__value_.__l + 2);
    *(_OWORD *)(a6 + 8) = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    if ((SHIBYTE(v201.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    float v38 = (void *)v201.__r_.__value_.__r.__words[0];
    goto LABEL_299;
  }
  std::string __p = 0;
  long long v207 = 0;
  uint64_t v208 = 0;
  std::vector<unsigned long long>::reserve(&__p, 6uLL);
  uint64_t v12 = *a2;
  unint64_t v11 = a2[1];
  uint64_t v198 = a6;
  uint64_t v200 = a4;
  int __val = a3;
  if ((char *)v11 - (char *)*a2 != 48)
  {
    unint64_t v13 = 0;
    std::string::size_type v14 = v207;
    do
    {
      if (v14 >= v208)
      {
        BOOL v16 = (char *)__p;
        uint64_t v17 = (v14 - (unsigned char *)__p) >> 3;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 61) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = v208 - (unsigned char *)__p;
        if ((v208 - (unsigned char *)__p) >> 2 > v18) {
          unint64_t v18 = v19 >> 2;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          int v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v208, v20);
          BOOL v16 = (char *)__p;
          std::string::size_type v14 = v207;
        }
        else
        {
          int v21 = 0;
        }
        unint64_t v22 = &v21[8 * v17];
        *(void *)unint64_t v22 = 1;
        uint64_t v15 = v22 + 8;
        while (v14 != v16)
        {
          uint64_t v23 = *((void *)v14 - 1);
          v14 -= 8;
          *((void *)v22 - 1) = v23;
          v22 -= 8;
        }
        std::string __p = v22;
        long long v207 = v15;
        uint64_t v208 = &v21[8 * v20];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *(void *)std::string::size_type v14 = 1;
        uint64_t v15 = v14 + 8;
      }
      long long v207 = v15;
      ++v13;
      uint64_t v12 = *a2;
      unint64_t v11 = a2[1];
      std::string::size_type v14 = v15;
    }
    while (6 - (v11 - *a2) > v13);
  }
  if (v12 == v11)
  {
    unint64_t v25 = 1;
  }
  else
  {
    uint64_t v24 = v207;
    unint64_t v25 = 1;
    do
    {
      uint64_t v26 = *v12;
      if (v24 >= v208)
      {
        uint64_t v28 = (char *)__p;
        uint64_t v29 = (v24 - (unsigned char *)__p) >> 3;
        unint64_t v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 61) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v31 = v208 - (unsigned char *)__p;
        if ((v208 - (unsigned char *)__p) >> 2 > v30) {
          unint64_t v30 = v31 >> 2;
        }
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v32 = v30;
        }
        if (v32)
        {
          uint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v208, v32);
          uint64_t v28 = (char *)__p;
          uint64_t v24 = v207;
        }
        else
        {
          uint64_t v33 = 0;
        }
        long long v34 = &v33[8 * v29];
        *(void *)long long v34 = v26;
        unint64_t v27 = v34 + 8;
        while (v24 != v28)
        {
          uint64_t v35 = *((void *)v24 - 1);
          v24 -= 8;
          *((void *)v34 - 1) = v35;
          v34 -= 8;
        }
        std::string __p = v34;
        long long v207 = v27;
        uint64_t v208 = &v33[8 * v32];
        if (v28) {
          operator delete(v28);
        }
      }
      else
      {
        *(void *)uint64_t v24 = v26;
        unint64_t v27 = v24 + 8;
      }
      long long v207 = v27;
      v25 *= v26;
      ++v12;
      uint64_t v24 = v27;
    }
    while (v12 != v11);
  }
  if (__val == 4)
  {
    __int16 v203 = 0;
    uint64_t v204 = 0;
    uint64_t v205 = 0;
    std::vector<MIL::Fp16>::reserve(&v203, v25);
    LOWORD(v201.__r_.__value_.__l.__data_) = 0;
    std::vector<MIL::Fp16>::resize((uint64_t)&v203, v25, &v201);
    uint64_t Data = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
    uint64_t v217 = v39;
    int v40 = *(unsigned __int8 *)(v200 + 24);
    memset(&v201, 0, sizeof(v201));
    if (v40)
    {
      std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&v201, (char *)__p, (uint64_t)v207, (v207 - (unsigned char *)__p) >> 3);
      unint64_t v41 = *(unsigned __int8 *)(v200 + 8);
      if (!*(unsigned char *)(v200 + 8)) {
        goto LABEL_79;
      }
      unint64_t v42 = v41 - 1;
      std::string::size_type v43 = v201.__r_.__value_.__r.__words[0];
      if (v41 - 1 >= (uint64_t)(v201.__r_.__value_.__l.__size_ - v201.__r_.__value_.__r.__words[0]) >> 3) {
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
      if (*(void *)(v201.__r_.__value_.__r.__words[0] + 8 * v42) != 1)
      {
LABEL_79:
        *(_DWORD *)a6 = 13;
        std::to_string(&v215, v41);
        uint64_t v69 = std::string::insert(&v215, 0, "Illegal weight dimension to split at index: ");
        long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
        *(void *)(a6 + 24) = *((void *)&v69->__r_.__value_.__l + 2);
        *(_OWORD *)(a6 + 8) = v70;
        v69->__r_.__value_.__l.__size_ = 0;
        v69->__r_.__value_.__r.__words[2] = 0;
        v69->__r_.__value_.__r.__words[0] = 0;
        if ((SHIBYTE(v215.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_282;
        }
        uint64_t v71 = (void *)v215.__r_.__value_.__r.__words[0];
        goto LABEL_281;
      }
      *(void *)(v201.__r_.__value_.__r.__words[0] + 8 * v42) = *(void *)(v200 + 16);
      *(void *)(v43 + 8 * v41) /= *(void *)(v200 + 16);
      p_p = &v201;
    }
    else
    {
      p_p = (std::string *)&__p;
    }
    memset(&v215, 0, sizeof(v215));
    __int16 v212 = (void *)1;
    std::vector<unsigned long long>::assign(&v215.__r_.__value_.__l.__data_, 6uLL, &v212);
    long long v155 = (void *)p_p->__r_.__value_.__r.__words[0];
    uint64_t v156 = *(void *)(p_p->__r_.__value_.__r.__words[0] + 40);
    long long v157 = (void *)v215.__r_.__value_.__r.__words[0];
    *(void *)(v215.__r_.__value_.__r.__words[0] + 32) = v156;
    uint64_t v158 = v155[4] * v156;
    v157[3] = v158;
    uint64_t v159 = v155[3] * v158;
    v157[2] = v159;
    uint64_t v160 = v155[2] * v159;
    v157[1] = v160;
    void *v157 = v155[1] * v160;
    __int16 v212 = 0;
    v213 = 0;
    uint64_t v214 = 0;
    std::vector<unsigned long long>::reserve(&v212, 6uLL);
    long long v209 = 0;
    __int16 v210 = 0;
    uint64_t v211 = 0;
    std::vector<unsigned long long>::reserve(&v209, 6uLL);
    for (uint64_t i = 0; i != 6; ++i)
    {
      uint64_t v162 = *(unsigned __int8 *)(v200 + i);
      std::string::size_type v163 = p_p->__r_.__value_.__r.__words[0];
      uint64_t v164 = v213;
      if (v213 >= v214)
      {
        int v166 = (char *)v212;
        uint64_t v167 = (v213 - (unsigned char *)v212) >> 3;
        unint64_t v168 = v167 + 1;
        if ((unint64_t)(v167 + 1) >> 61) {
          goto LABEL_309;
        }
        uint64_t v169 = v214 - (unsigned char *)v212;
        if ((v214 - (unsigned char *)v212) >> 2 > v168) {
          unint64_t v168 = v169 >> 2;
        }
        if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v170 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v170 = v168;
        }
        if (v170)
        {
          int v171 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v214, v170);
          int v166 = (char *)v212;
          uint64_t v164 = v213;
        }
        else
        {
          int v171 = 0;
        }
        uint64_t v172 = &v171[8 * v167];
        *(void *)uint64_t v172 = *(void *)(v163 + 8 * v162);
        uint64_t v165 = v172 + 8;
        while (v164 != v166)
        {
          uint64_t v173 = *((void *)v164 - 1);
          v164 -= 8;
          *((void *)v172 - 1) = v173;
          v172 -= 8;
        }
        __int16 v212 = v172;
        v213 = v165;
        uint64_t v214 = &v171[8 * v170];
        if (v166) {
          operator delete(v166);
        }
      }
      else
      {
        *(void *)v213 = *(void *)(v163 + 8 * v162);
        uint64_t v165 = v164 + 8;
      }
      v213 = v165;
      std::string::size_type v174 = v215.__r_.__value_.__r.__words[0];
      int v175 = v210;
      if (v210 >= v211)
      {
        int v177 = (char *)v209;
        uint64_t v178 = (v210 - (unsigned char *)v209) >> 3;
        unint64_t v179 = v178 + 1;
        if ((unint64_t)(v178 + 1) >> 61) {
LABEL_309:
        }
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        uint64_t v180 = v211 - (unsigned char *)v209;
        if ((v211 - (unsigned char *)v209) >> 2 > v179) {
          unint64_t v179 = v180 >> 2;
        }
        if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v181 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v181 = v179;
        }
        if (v181)
        {
          std::vector<int> v182 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v211, v181);
          int v177 = (char *)v209;
          int v175 = v210;
        }
        else
        {
          std::vector<int> v182 = 0;
        }
        int v183 = &v182[8 * v178];
        *(void *)int v183 = *(void *)(v174 + 8 * v162);
        int v176 = v183 + 8;
        while (v175 != v177)
        {
          uint64_t v184 = *((void *)v175 - 1);
          v175 -= 8;
          *((void *)v183 - 1) = v184;
          v183 -= 8;
        }
        long long v209 = v183;
        __int16 v210 = v176;
        uint64_t v211 = &v182[8 * v181];
        if (v177) {
          operator delete(v177);
        }
      }
      else
      {
        *(void *)__int16 v210 = *(void *)(v215.__r_.__value_.__r.__words[0] + 8 * v162);
        int v176 = v175 + 8;
      }
      __int16 v210 = v176;
    }
    char v185 = (unint64_t *)v212;
    unint64_t v186 = *(void *)v212;
    if (*(void *)v212)
    {
      uint64_t v187 = 0;
      unint64_t v188 = 0;
      do
      {
        if (v185[1])
        {
          unint64_t v189 = 0;
          do
          {
            if (v185[2])
            {
              unint64_t v190 = 0;
              uint64_t v191 = v187;
              do
              {
                if (v185[3])
                {
                  unint64_t v192 = 0;
                  do
                  {
                    if (v185[4])
                    {
                      unint64_t v193 = 0;
                      do
                      {
                        if (v185[5])
                        {
                          unint64_t v194 = 0;
                          do
                          {
                            uint64_t v195 = (_WORD *)MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::operator[](&Data, *(void *)v209 * v188+ *((void *)v209 + 1) * v189+ *((void *)v209 + 2) * v190+ *((void *)v209 + 3) * v192+ *((void *)v209 + 4) * v193+ *((void *)v209 + 5) * v194);
                            *((_WORD *)v203 + v191) = *v195;
                            uint64_t v187 = v191 + 1;
                            ++v194;
                            char v185 = (unint64_t *)v212;
                            ++v191;
                          }
                          while (v194 < *((void *)v212 + 5));
                          uint64_t v191 = v187;
                        }
                        else
                        {
                          uint64_t v187 = v191;
                        }
                        ++v193;
                      }
                      while (v193 < v185[4]);
                    }
                    else
                    {
                      uint64_t v187 = v191;
                    }
                    ++v192;
                    uint64_t v191 = v187;
                  }
                  while (v192 < v185[3]);
                }
                else
                {
                  uint64_t v187 = v191;
                }
                ++v190;
                uint64_t v191 = v187;
              }
              while (v190 < v185[2]);
            }
            ++v189;
          }
          while (v189 < v185[1]);
          unint64_t v186 = *v185;
          a6 = v198;
        }
        ++v188;
      }
      while (v188 < v186);
    }
    *(_DWORD *)a6 = 0;
    std::string::basic_string[abi:ne180100]<0>((void *)(a6 + 8), (char *)&unk_210C6BFE7);
    if (v209)
    {
      __int16 v210 = (char *)v209;
      operator delete(v209);
    }
    if (v212)
    {
      v213 = (char *)v212;
      operator delete(v212);
    }
    uint64_t v71 = (void *)v215.__r_.__value_.__r.__words[0];
    if (!v215.__r_.__value_.__r.__words[0])
    {
LABEL_282:
      if (v201.__r_.__value_.__r.__words[0])
      {
        v201.__r_.__value_.__l.__size_ = v201.__r_.__value_.__r.__words[0];
        operator delete(v201.__r_.__value_.__l.__data_);
      }
      uint64_t v50 = (char *)v203;
      if (!*(_DWORD *)a6)
      {
        uint64_t v112 = a1;
        uint64_t v113 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>();
        uint64_t v114 = a5;
        if (*(char *)(a1 + 103) < 0) {
          goto LABEL_147;
        }
        goto LABEL_289;
      }
      goto LABEL_285;
    }
    v215.__r_.__value_.__l.__size_ = v215.__r_.__value_.__r.__words[0];
LABEL_281:
    operator delete(v71);
    goto LABEL_282;
  }
  if (__val != 9)
  {
    if (__val != 14)
    {
      *(_DWORD *)a6 = 13;
      uint64_t v45 = a6 + 8;
      std::to_string(&v215, __val);
      uint64_t v46 = std::string::insert(&v215, 0, "Dtype ");
      long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      v201.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v47;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      uint64_t v48 = std::string::append(&v201, "not implemented for weight rewrite");
      long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      *(void *)(v45 + 16) = *((void *)&v48->__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v45 = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v201.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v215.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_297;
      }
      uint64_t v50 = (char *)v215.__r_.__value_.__r.__words[0];
      goto LABEL_287;
    }
    __int16 v203 = 0;
    uint64_t v204 = 0;
    uint64_t v205 = 0;
    std::vector<unsigned char>::reserve((unint64_t *)&v203, v25);
    v201.__r_.__value_.__s.__data_[0] = 0;
    if (v25 <= v204 - (unsigned char *)v203)
    {
      if (v25 < v204 - (unsigned char *)v203) {
        uint64_t v204 = (char *)v203 + v25;
      }
    }
    else
    {
      std::vector<unsigned char>::__append(&v203, v25 - (v204 - (unsigned char *)v203), &v201);
    }
    uint64_t Data = MIL::IRTensorValue::GetDataView<unsigned char>();
    uint64_t v217 = v57;
    int v58 = *(unsigned __int8 *)(v200 + 24);
    memset(&v201, 0, sizeof(v201));
    if (v58)
    {
      std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&v201, (char *)__p, (uint64_t)v207, (v207 - (unsigned char *)__p) >> 3);
      unint64_t v59 = *(unsigned __int8 *)(v200 + 8);
      if (!*(unsigned char *)(v200 + 8)) {
        goto LABEL_77;
      }
      unint64_t v60 = v59 - 1;
      std::string::size_type v61 = v201.__r_.__value_.__r.__words[0];
      if (v59 - 1 >= (uint64_t)(v201.__r_.__value_.__l.__size_ - v201.__r_.__value_.__r.__words[0]) >> 3) {
        std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
      }
      if (*(void *)(v201.__r_.__value_.__r.__words[0] + 8 * v60) != 1)
      {
LABEL_77:
        *(_DWORD *)a6 = 13;
        std::to_string(&v215, v59);
        unint64_t v66 = std::string::insert(&v215, 0, "Illegal weight dimension to split at index: ");
        long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
        *(void *)(a6 + 24) = *((void *)&v66->__r_.__value_.__l + 2);
        *(_OWORD *)(a6 + 8) = v67;
        v66->__r_.__value_.__l.__size_ = 0;
        v66->__r_.__value_.__r.__words[2] = 0;
        v66->__r_.__value_.__r.__words[0] = 0;
        if ((SHIBYTE(v215.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_210;
        }
        uint64_t v68 = (void *)v215.__r_.__value_.__r.__words[0];
        goto LABEL_209;
      }
      *(void *)(v201.__r_.__value_.__r.__words[0] + 8 * v60) = *(void *)(v200 + 16);
      *(void *)(v61 + 8 * v59) /= *(void *)(v200 + 16);
      unint64_t v62 = &v201;
    }
    else
    {
      unint64_t v62 = (std::string *)&__p;
    }
    memset(&v215, 0, sizeof(v215));
    __int16 v212 = (void *)1;
    std::vector<unsigned long long>::assign(&v215.__r_.__value_.__l.__data_, 6uLL, &v212);
    uint64_t v115 = (void *)v62->__r_.__value_.__r.__words[0];
    uint64_t v116 = *(void *)(v62->__r_.__value_.__r.__words[0] + 40);
    uint64_t v117 = (void *)v215.__r_.__value_.__r.__words[0];
    *(void *)(v215.__r_.__value_.__r.__words[0] + 32) = v116;
    uint64_t v118 = v115[4] * v116;
    v117[3] = v118;
    uint64_t v119 = v115[3] * v118;
    v117[2] = v119;
    uint64_t v120 = v115[2] * v119;
    v117[1] = v120;
    *uint64_t v117 = v115[1] * v120;
    __int16 v212 = 0;
    v213 = 0;
    uint64_t v214 = 0;
    std::vector<unsigned long long>::reserve(&v212, 6uLL);
    long long v209 = 0;
    __int16 v210 = 0;
    uint64_t v211 = 0;
    std::vector<unsigned long long>::reserve(&v209, 6uLL);
    for (uint64_t j = 0; j != 6; ++j)
    {
      uint64_t v122 = *(unsigned __int8 *)(v200 + j);
      std::string::size_type v123 = v62->__r_.__value_.__r.__words[0];
      std::string::size_type v124 = v213;
      if (v213 >= v214)
      {
        int v126 = (char *)v212;
        uint64_t v127 = (v213 - (unsigned char *)v212) >> 3;
        unint64_t v128 = v127 + 1;
        if ((unint64_t)(v127 + 1) >> 61) {
          goto LABEL_308;
        }
        uint64_t v129 = v214 - (unsigned char *)v212;
        if ((v214 - (unsigned char *)v212) >> 2 > v128) {
          unint64_t v128 = v129 >> 2;
        }
        if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v130 = v128;
        }
        if (v130)
        {
          char v131 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v214, v130);
          int v126 = (char *)v212;
          std::string::size_type v124 = v213;
        }
        else
        {
          char v131 = 0;
        }
        char v132 = &v131[8 * v127];
        *(void *)char v132 = *(void *)(v123 + 8 * v122);
        uint64_t v125 = v132 + 8;
        while (v124 != v126)
        {
          uint64_t v133 = *((void *)v124 - 1);
          v124 -= 8;
          *((void *)v132 - 1) = v133;
          v132 -= 8;
        }
        __int16 v212 = v132;
        v213 = v125;
        uint64_t v214 = &v131[8 * v130];
        if (v126) {
          operator delete(v126);
        }
      }
      else
      {
        *(void *)v213 = *(void *)(v123 + 8 * v122);
        uint64_t v125 = v124 + 8;
      }
      v213 = v125;
      std::string::size_type v134 = v215.__r_.__value_.__r.__words[0];
      uint64_t v135 = v210;
      if (v210 >= v211)
      {
        std::string v137 = (char *)v209;
        uint64_t v138 = (v210 - (unsigned char *)v209) >> 3;
        unint64_t v139 = v138 + 1;
        if ((unint64_t)(v138 + 1) >> 61) {
LABEL_308:
        }
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        uint64_t v140 = v211 - (unsigned char *)v209;
        if ((v211 - (unsigned char *)v209) >> 2 > v139) {
          unint64_t v139 = v140 >> 2;
        }
        if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v141 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v141 = v139;
        }
        if (v141)
        {
          uint64_t v142 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v211, v141);
          std::string v137 = (char *)v209;
          uint64_t v135 = v210;
        }
        else
        {
          uint64_t v142 = 0;
        }
        std::vector<int> v143 = &v142[8 * v138];
        *(void *)std::vector<int> v143 = *(void *)(v134 + 8 * v122);
        std::string v136 = v143 + 8;
        while (v135 != v137)
        {
          uint64_t v144 = *((void *)v135 - 1);
          v135 -= 8;
          *((void *)v143 - 1) = v144;
          v143 -= 8;
        }
        long long v209 = v143;
        __int16 v210 = v136;
        uint64_t v211 = &v142[8 * v141];
        if (v137) {
          operator delete(v137);
        }
      }
      else
      {
        *(void *)__int16 v210 = *(void *)(v215.__r_.__value_.__r.__words[0] + 8 * v122);
        std::string v136 = v135 + 8;
      }
      __int16 v210 = v136;
    }
    uint64_t v145 = (unint64_t *)v212;
    unint64_t v146 = *(void *)v212;
    if (*(void *)v212)
    {
      uint64_t v147 = 0;
      unint64_t v148 = 0;
      do
      {
        if (v145[1])
        {
          unint64_t v149 = 0;
          do
          {
            if (v145[2])
            {
              unint64_t v150 = 0;
              do
              {
                if (v145[3])
                {
                  unint64_t v151 = 0;
                  do
                  {
                    if (v145[4])
                    {
                      unint64_t v152 = 0;
                      do
                      {
                        if (v145[5])
                        {
                          unint64_t v153 = 0;
                          do
                          {
                            std::string v154 = (unsigned char *)MIL::Util::Span<unsigned char const,18446744073709551615ul>::operator[](&Data, *(void *)v209 * v148+ *((void *)v209 + 1) * v149+ *((void *)v209 + 2) * v150+ *((void *)v209 + 3) * v151+ *((void *)v209 + 4) * v152+ *((void *)v209 + 5) * v153);
                            *((unsigned char *)v203 + v147 + v153++) = *v154;
                            uint64_t v145 = (unint64_t *)v212;
                          }
                          while (v153 < *((void *)v212 + 5));
                          v147 += v153;
                        }
                        ++v152;
                      }
                      while (v152 < v145[4]);
                    }
                    ++v151;
                  }
                  while (v151 < v145[3]);
                }
                ++v150;
              }
              while (v150 < v145[2]);
            }
            ++v149;
          }
          while (v149 < v145[1]);
          unint64_t v146 = *v145;
        }
        ++v148;
      }
      while (v148 < v146);
    }
    a6 = v198;
    *(_DWORD *)uint64_t v198 = 0;
    std::string::basic_string[abi:ne180100]<0>((void *)(v198 + 8), (char *)&unk_210C6BFE7);
    if (v209)
    {
      __int16 v210 = (char *)v209;
      operator delete(v209);
    }
    if (v212)
    {
      v213 = (char *)v212;
      operator delete(v212);
    }
    uint64_t v68 = (void *)v215.__r_.__value_.__r.__words[0];
    if (!v215.__r_.__value_.__r.__words[0])
    {
LABEL_210:
      if (v201.__r_.__value_.__r.__words[0])
      {
        v201.__r_.__value_.__l.__size_ = v201.__r_.__value_.__r.__words[0];
        operator delete(v201.__r_.__value_.__l.__data_);
      }
      uint64_t v50 = (char *)v203;
      if (!*(_DWORD *)a6)
      {
        uint64_t v112 = a1;
        uint64_t v113 = MIL::Blob::StorageWriter::WriteData<unsigned char>();
        uint64_t v114 = a5;
        if (*(char *)(a1 + 103) < 0) {
          goto LABEL_147;
        }
        goto LABEL_289;
      }
      goto LABEL_285;
    }
    v215.__r_.__value_.__l.__size_ = v215.__r_.__value_.__r.__words[0];
LABEL_209:
    operator delete(v68);
    goto LABEL_210;
  }
  __int16 v203 = 0;
  uint64_t v204 = 0;
  uint64_t v205 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)&v203, v25);
  v201.__r_.__value_.__s.__data_[0] = 0;
  if (v25 <= v204 - (unsigned char *)v203)
  {
    if (v25 < v204 - (unsigned char *)v203) {
      uint64_t v204 = (char *)v203 + v25;
    }
  }
  else
  {
    std::vector<unsigned char>::__append(&v203, v25 - (v204 - (unsigned char *)v203), &v201);
  }
  uint64_t Data = MIL::IRTensorValue::GetDataView<signed char>();
  uint64_t v217 = v51;
  int v52 = *(unsigned __int8 *)(v200 + 24);
  memset(&v201, 0, sizeof(v201));
  if (v52)
  {
    std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&v201, (char *)__p, (uint64_t)v207, (v207 - (unsigned char *)__p) >> 3);
    unint64_t v53 = *(unsigned __int8 *)(v200 + 8);
    if (!*(unsigned char *)(v200 + 8)) {
      goto LABEL_75;
    }
    unint64_t v54 = v53 - 1;
    std::string::size_type v55 = v201.__r_.__value_.__r.__words[0];
    if (v53 - 1 >= (uint64_t)(v201.__r_.__value_.__l.__size_ - v201.__r_.__value_.__r.__words[0]) >> 3) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    if (*(void *)(v201.__r_.__value_.__r.__words[0] + 8 * v54) != 1)
    {
LABEL_75:
      *(_DWORD *)a6 = 13;
      std::to_string(&v215, v53);
      uint64_t v63 = std::string::insert(&v215, 0, "Illegal weight dimension to split at index: ");
      long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
      *(void *)(a6 + 24) = *((void *)&v63->__r_.__value_.__l + 2);
      *(_OWORD *)(a6 + 8) = v64;
      v63->__r_.__value_.__l.__size_ = 0;
      v63->__r_.__value_.__r.__words[2] = 0;
      v63->__r_.__value_.__r.__words[0] = 0;
      if ((SHIBYTE(v215.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_143;
      }
      uint64_t v65 = (void *)v215.__r_.__value_.__r.__words[0];
      goto LABEL_142;
    }
    *(void *)(v201.__r_.__value_.__r.__words[0] + 8 * v54) = *(void *)(v200 + 16);
    *(void *)(v55 + 8 * v53) /= *(void *)(v200 + 16);
    unint64_t v56 = &v201;
  }
  else
  {
    unint64_t v56 = (std::string *)&__p;
  }
  memset(&v215, 0, sizeof(v215));
  __int16 v212 = (void *)1;
  std::vector<unsigned long long>::assign(&v215.__r_.__value_.__l.__data_, 6uLL, &v212);
  uint64_t v72 = (void *)v56->__r_.__value_.__r.__words[0];
  uint64_t v73 = *(void *)(v56->__r_.__value_.__r.__words[0] + 40);
  uint64_t v74 = (void *)v215.__r_.__value_.__r.__words[0];
  *(void *)(v215.__r_.__value_.__r.__words[0] + 32) = v73;
  uint64_t v75 = v72[4] * v73;
  v74[3] = v75;
  uint64_t v76 = v72[3] * v75;
  v74[2] = v76;
  uint64_t v77 = v72[2] * v76;
  v74[1] = v77;
  *uint64_t v74 = v72[1] * v77;
  __int16 v212 = 0;
  v213 = 0;
  uint64_t v214 = 0;
  std::vector<unsigned long long>::reserve(&v212, 6uLL);
  long long v209 = 0;
  __int16 v210 = 0;
  uint64_t v211 = 0;
  std::vector<unsigned long long>::reserve(&v209, 6uLL);
  for (uint64_t k = 0; k != 6; ++k)
  {
    uint64_t v79 = *(unsigned __int8 *)(v200 + k);
    std::string::size_type v80 = v56->__r_.__value_.__r.__words[0];
    __int16 v81 = v213;
    if (v213 >= v214)
    {
      std::string v83 = (char *)v212;
      uint64_t v84 = (v213 - (unsigned char *)v212) >> 3;
      unint64_t v85 = v84 + 1;
      if ((unint64_t)(v84 + 1) >> 61) {
        goto LABEL_307;
      }
      uint64_t v86 = v214 - (unsigned char *)v212;
      if ((v214 - (unsigned char *)v212) >> 2 > v85) {
        unint64_t v85 = v86 >> 2;
      }
      if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v87 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v87 = v85;
      }
      if (v87)
      {
        uint64_t v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v214, v87);
        std::string v83 = (char *)v212;
        __int16 v81 = v213;
      }
      else
      {
        uint64_t v88 = 0;
      }
      uint64_t v89 = &v88[8 * v84];
      *(void *)uint64_t v89 = *(void *)(v80 + 8 * v79);
      uint64_t v82 = v89 + 8;
      while (v81 != v83)
      {
        uint64_t v90 = *((void *)v81 - 1);
        v81 -= 8;
        *((void *)v89 - 1) = v90;
        v89 -= 8;
      }
      __int16 v212 = v89;
      v213 = v82;
      uint64_t v214 = &v88[8 * v87];
      if (v83) {
        operator delete(v83);
      }
    }
    else
    {
      *(void *)v213 = *(void *)(v80 + 8 * v79);
      uint64_t v82 = v81 + 8;
    }
    v213 = v82;
    std::string::size_type v91 = v215.__r_.__value_.__r.__words[0];
    uint64_t v92 = v210;
    if (v210 >= v211)
    {
      __int16 v94 = (char *)v209;
      uint64_t v95 = (v210 - (unsigned char *)v209) >> 3;
      unint64_t v96 = v95 + 1;
      if ((unint64_t)(v95 + 1) >> 61) {
LABEL_307:
      }
        std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
      uint64_t v97 = v211 - (unsigned char *)v209;
      if ((v211 - (unsigned char *)v209) >> 2 > v96) {
        unint64_t v96 = v97 >> 2;
      }
      if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v98 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v98 = v96;
      }
      if (v98)
      {
        std::string v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v211, v98);
        __int16 v94 = (char *)v209;
        uint64_t v92 = v210;
      }
      else
      {
        std::string v99 = 0;
      }
      unsigned __int16 v100 = &v99[8 * v95];
      *(void *)unsigned __int16 v100 = *(void *)(v91 + 8 * v79);
      __int16 v93 = v100 + 8;
      while (v92 != v94)
      {
        uint64_t v101 = *((void *)v92 - 1);
        v92 -= 8;
        *((void *)v100 - 1) = v101;
        v100 -= 8;
      }
      long long v209 = v100;
      __int16 v210 = v93;
      uint64_t v211 = &v99[8 * v98];
      if (v94) {
        operator delete(v94);
      }
    }
    else
    {
      *(void *)__int16 v210 = *(void *)(v215.__r_.__value_.__r.__words[0] + 8 * v79);
      __int16 v93 = v92 + 8;
    }
    __int16 v210 = v93;
  }
  uint64_t v102 = (unint64_t *)v212;
  unint64_t v103 = *(void *)v212;
  if (*(void *)v212)
  {
    uint64_t v104 = 0;
    unint64_t v105 = 0;
    do
    {
      if (v102[1])
      {
        unint64_t v106 = 0;
        do
        {
          if (v102[2])
          {
            unint64_t v107 = 0;
            do
            {
              if (v102[3])
              {
                unint64_t v108 = 0;
                do
                {
                  if (v102[4])
                  {
                    unint64_t v109 = 0;
                    do
                    {
                      if (v102[5])
                      {
                        unint64_t v110 = 0;
                        do
                        {
                          uint64_t v111 = (unsigned char *)MIL::Util::Span<signed char const,18446744073709551615ul>::operator[](&Data, *(void *)v209 * v105+ *((void *)v209 + 1) * v106+ *((void *)v209 + 2) * v107+ *((void *)v209 + 3) * v108+ *((void *)v209 + 4) * v109+ *((void *)v209 + 5) * v110);
                          *((unsigned char *)v203 + v104 + v110++) = *v111;
                          uint64_t v102 = (unint64_t *)v212;
                        }
                        while (v110 < *((void *)v212 + 5));
                        v104 += v110;
                      }
                      ++v109;
                    }
                    while (v109 < v102[4]);
                  }
                  ++v108;
                }
                while (v108 < v102[3]);
              }
              ++v107;
            }
            while (v107 < v102[2]);
          }
          ++v106;
        }
        while (v106 < v102[1]);
        unint64_t v103 = *v102;
      }
      ++v105;
    }
    while (v105 < v103);
  }
  a6 = v198;
  *(_DWORD *)uint64_t v198 = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(v198 + 8), (char *)&unk_210C6BFE7);
  if (v209)
  {
    __int16 v210 = (char *)v209;
    operator delete(v209);
  }
  if (v212)
  {
    v213 = (char *)v212;
    operator delete(v212);
  }
  uint64_t v65 = (void *)v215.__r_.__value_.__r.__words[0];
  if (v215.__r_.__value_.__r.__words[0])
  {
    v215.__r_.__value_.__l.__size_ = v215.__r_.__value_.__r.__words[0];
LABEL_142:
    operator delete(v65);
  }
LABEL_143:
  if (v201.__r_.__value_.__r.__words[0])
  {
    v201.__r_.__value_.__l.__size_ = v201.__r_.__value_.__r.__words[0];
    operator delete(v201.__r_.__value_.__l.__data_);
  }
  uint64_t v50 = (char *)v203;
  if (!*(_DWORD *)a6)
  {
    uint64_t v112 = a1;
    uint64_t v113 = MIL::Blob::StorageWriter::WriteData<unsigned char>();
    uint64_t v114 = a5;
    if (*(char *)(a1 + 103) < 0)
    {
LABEL_147:
      std::string::__init_copy_ctor_external(&v201, *(const std::string::value_type **)(v112 + 80), *(void *)(v112 + 88));
      uint64_t v114 = a5;
LABEL_290:
      uint64_t v202 = v113;
      if (*(char *)(v114 + 23) < 0)
      {
        operator delete(*(void **)v114);
        uint64_t v114 = a5;
        uint64_t v113 = v202;
      }
      *(std::string *)uint64_t v114 = v201;
      *(void *)(v114 + 24) = v113;
      if (*(char *)(a6 + 31) < 0) {
        operator delete(*(void **)(a6 + 8));
      }
      if (v203)
      {
        uint64_t v204 = (char *)v203;
        operator delete(v203);
      }
      *(_DWORD *)a6 = 0;
      std::string::basic_string[abi:ne180100]<0>((void *)(a6 + 8), (char *)&unk_210C6BFE7);
      goto LABEL_297;
    }
LABEL_289:
    std::string v201 = *(std::string *)(v112 + 80);
    goto LABEL_290;
  }
LABEL_285:
  if (v50)
  {
    uint64_t v204 = v50;
LABEL_287:
    operator delete(v50);
  }
LABEL_297:
  float v38 = __p;
  if (!__p) {
    return;
  }
  long long v207 = (char *)__p;
LABEL_299:
  operator delete(v38);
}

void sub_210BC0688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  if (*(char *)(a12 + 31) < 0) {
    operator delete(*(void **)(a12 + 8));
  }
  if (__p) {
    operator delete(__p);
  }
  if (a25) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription> const,MilTranslator::WeightTranslator::WeightFileInfo>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void MilTranslator::WeightTranslator::WriteConstOp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MIL::Builder::BlockBuilder::GetContext(&v18, *(MIL::Builder::BlockBuilder **)(a1 + 136));
  std::string::basic_string[abi:ne180100]<0>(&v14, "const");
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  MIL::Builder::BlockBuilder::AddOperation();
  if (SHIBYTE(v16) < 0) {
    operator delete(v14);
  }
  std::string::size_type v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v14, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  MIL::IRTensorValueType::Make();
  if (v14)
  {
    uint64_t v15 = v14;
    operator delete(v14);
  }
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v10 = *(std::string *)a4;
  }
  MIL::Builder::OperationBuilder::AddOutput();
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  MIL::IRTensorValueType::MakeValueFromBlobFile();
  std::string::basic_string[abi:ne180100]<0>(&__p, "val");
  if (v14) {
    operator new();
  }
  std::string::size_type v14 = 0;
  MIL::Builder::OperationBuilder::SetAttribute();
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v8 < 0) {
    operator delete(__p);
  }
  char v6 = v14;
  std::string::size_type v14 = 0;
  if (v6) {
    (*(void (**)(void *))(*(void *)v6 + 8))(v6);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
}

void sub_210BC0B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v31 = *(std::__shared_weak_count **)(v29 - 72);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  unint64_t v32 = *(std::__shared_weak_count **)(v29 - 56);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>> const,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<MIL::Fp16>::resize(uint64_t a1, unint64_t a2, _WORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 2 * a2;
    }
  }
  else
  {
    std::vector<MIL::Fp16>::__append((void **)a1, a2 - v3, a3);
  }
}

std::string *std::pair<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription> const,MilTranslator::WeightTranslator::WeightFileInfo>::pair[abi:ne180100]<true,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
  }
  long long v7 = *(long long *)((char *)a2 + 24);
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = *(long long *)((char *)a2 + 40);
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v7;
  char v8 = (std::string *)((char *)this + 56);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v9 = *a3;
    this[3].__r_.__value_.__r.__words[0] = *((void *)a3 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  this[3].__r_.__value_.__l.__size_ = *((void *)a3 + 3);
  return this;
}

void sub_210BC0D1C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>::pair[abi:ne180100]<MilTranslator::WeightTranslator::WeightFileInfo&,std::vector<unsigned long long>&,0>(std::string *this, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
  }
  std::string::size_type v7 = *((void *)a2 + 3);
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[0] = v7;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__r.__words[0] = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&this[1].__r_.__value_.__l.__size_, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  return this;
}

void sub_210BC0DB8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>> const,std::string>::pair[abi:ne180100]<true,0>(std::string *a1, long long *a2, long long *a3)
{
  uint64_t v5 = (std::string *)((char *)std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>::pair[abi:ne180100](a1, a2)+ 56);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    v5->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_210BC0E28(_Unwind_Exception *a1)
{
  std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>::~pair(v1);
  _Unwind_Resume(a1);
}

std::string *std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::string::size_type v5 = *((void *)a2 + 3);
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[0] = v5;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__r.__words[0] = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&this[1].__r_.__value_.__l.__size_, *((const void **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
  return this;
}

void sub_210BC0EB0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::__unordered_map_hasher<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,true>,std::__unordered_map_equal<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,true>,std::allocator<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::__unordered_map_hasher<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,true>,std::__unordered_map_equal<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,true>,std::allocator<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::__unordered_map_hasher<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,true>,std::__unordered_map_equal<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,true>,std::allocator<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription> const,MilTranslator::WeightTranslator::WeightFileInfo>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription> const,MilTranslator::WeightTranslator::WeightFileInfo>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::__unordered_map_hasher<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,true>,std::__unordered_map_equal<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,true>,std::allocator<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::__unordered_map_hasher<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,true>,std::__unordered_map_equal<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,true>,std::allocator<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::__unordered_map_hasher<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,true>,std::__unordered_map_equal<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,true>,std::allocator<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>> const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>> const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

MIL::Blob::StorageWriter *std::unique_ptr<MIL::Blob::StorageWriter>::reset[abi:ne180100](MIL::Blob::StorageWriter **a1, MIL::Blob::StorageWriter *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::Blob::StorageWriter::~StorageWriter(result);
    JUMPOUT(0x21667BBD0);
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::__unordered_map_hasher<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,true>,std::__unordered_map_equal<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,true>,std::allocator<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>>>::find<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher::operator()((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  std::string v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>::operator()[abi:ne180100](v12, v11 + 16, a2))
        {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v6, a2);
  for (uint64_t i = 0; i != 6; ++i)
    v3 ^= MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher::operator()(std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription> const&)const::filter[i]
        * *(unsigned __int8 *)(a2 + 24 + i);
  unint64_t result = v3 ^ *(unsigned __int8 *)(a2 + 48);
  if (*(unsigned char *)(a2 + 48)) {
    result ^= (29 * *(void *)(a2 + 40)) ^ (23 * *(unsigned __int8 *)(a2 + 32));
  }
  return result;
}

BOOL std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4 = a2[23];
  size_t v5 = *((void *)a2 + 1);
  if ((v4 & 0x80u) == 0) {
    uint64_t v6 = a2[23];
  }
  else {
    uint64_t v6 = *((void *)a2 + 1);
  }
  uint64_t v7 = a3[23];
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)a3 + 1);
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    std::string v10 = a3;
  }
  else {
    std::string v10 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a2, v10, v5)) {
      goto LABEL_18;
    }
    return 0;
  }
  if (v4)
  {
    unint64_t v11 = a2;
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v4) {
        goto LABEL_18;
      }
    }
    return 0;
  }
LABEL_18:
  return MilTranslator::WeightTranslator::WeightRewriteDescription::operator==((uint64_t)(a2 + 24), (uint64_t)(a3 + 24));
}

BOOL MilTranslator::WeightTranslator::WeightRewriteDescription::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2 || *(unsigned __int16 *)(a1 + 4) != *(unsigned __int16 *)(a2 + 4)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 24)) {
    BOOL v4 = *(unsigned char *)(a2 + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return (*(unsigned char *)(a1 + 24) != 0) == (*(unsigned char *)(a2 + 24) != 0);
  }
  if (*(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8)) {
    return 0;
  }
  return *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::__unordered_map_hasher<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,true>,std::__unordered_map_equal<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,true>,std::allocator<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>>>::__emplace_unique_key_args<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::pair<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription> const,MilTranslator::WeightTranslator::WeightFileInfo>>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher::operator()(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>::operator()[abi:ne180100](a1 + 32, i + 16, a2))
          {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::__unordered_map_hasher<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,true>,std::__unordered_map_equal<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,true>,std::allocator<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>>>::__construct_node_hash<std::pair<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription> const,MilTranslator::WeightTranslator::WeightFileInfo>>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *unint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_210BC1610(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::__unordered_map_hasher<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,true>,std::__unordered_map_equal<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,std::equal_to<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>>,MilTranslator::WeightTranslator::WeightRewriteDescriptionPairHasher,true>,std::allocator<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>>>::__construct_node_hash<std::pair<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription> const,MilTranslator::WeightTranslator::WeightFileInfo>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x68uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t result = std::pair<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription> const,MilTranslator::WeightTranslator::WeightFileInfo>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_210BC1688(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription> const,MilTranslator::WeightTranslator::WeightFileInfo>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  long long v5 = *(long long *)((char *)a2 + 24);
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = *(long long *)((char *)a2 + 40);
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  long long v6 = *(long long *)((char *)a2 + 56);
  this[3].__r_.__value_.__r.__words[0] = *((void *)a2 + 9);
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = v6;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 7) = 0;
  this[3].__r_.__value_.__l.__size_ = *((void *)a2 + 10);
  return this;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription>,MilTranslator::WeightTranslator::WeightFileInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,MilTranslator::WeightTranslator::WeightRewriteDescription> const,MilTranslator::WeightTranslator::WeightFileInfo>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void *std::__hash_table<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::__unordered_map_hasher<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,true>,std::__unordered_map_equal<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,true>,std::allocator<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>>>::find<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>(void *a1, void *a2)
{
  unint64_t v4 = MilTranslator::WeightTranslator::WeightInfoShapePairHasher::operator()((uint64_t)(a1 + 3), a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint8x8_t v11 = (void *)*v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = v11[1];
      if (v13 == v6)
      {
        if (std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>::operator()[abi:ne180100](v12, (uint64_t)(v11 + 2), (uint64_t)a2))
        {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint8x8_t v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t MilTranslator::WeightTranslator::WeightInfoShapePairHasher::operator()(uint64_t a1, void *a2)
{
  unint64_t v3 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v11, (uint64_t)a2);
  unint64_t v4 = (uint64_t *)a2[4];
  unint64_t result = a2[3] ^ v3;
  unint64_t v6 = (uint64_t *)a2[5];
  if (v4 != v6)
  {
    unint64_t v7 = 0;
    unint64_t v8 = (char *)&MilTranslator::WeightTranslator::WeightInfoShapePairHasher::operator()(std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>> const&)const::filter;
    do
    {
      unint64_t v9 = -24 * (v7 / 6);
      uint64_t v10 = *v4++;
      ++v7;
      result ^= v10 * *(unsigned int *)&v8[v9];
      v8 += 4;
    }
    while (v4 != v6);
  }
  return result;
}

BOOL std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL result = MilTranslator::WeightTranslator::WeightFileInfo::operator==((unsigned __int8 *)a2, (unsigned __int8 *)a3);
  if (result)
  {
    unint64_t v6 = *(const void **)(a2 + 32);
    size_t v7 = *(void *)(a2 + 40) - (void)v6;
    unint64_t v8 = *(const void **)(a3 + 32);
    return v7 == *(void *)(a3 + 40) - (void)v8 && memcmp(v6, v8, v7) == 0;
  }
  return result;
}

BOOL MilTranslator::WeightTranslator::WeightFileInfo::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  unint64_t v6 = a2;
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a1, a2, *((void *)a1 + 1))) {
      return *((void *)a1 + 3) == *((void *)v6 + 3);
    }
    return 0;
  }
  if (a1[23])
  {
    for (uint64_t i = a1; *i == *a2; ++i)
    {
      ++a2;
      if (!--v2) {
        return *((void *)a1 + 3) == *((void *)v6 + 3);
      }
    }
    return 0;
  }
  return *((void *)a1 + 3) == *((void *)v6 + 3);
}

void *std::__hash_table<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::__unordered_map_hasher<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,true>,std::__unordered_map_equal<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,true>,std::allocator<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>>>::__emplace_unique_key_args<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::pair<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>> const,std::string>>(uint64_t a1, void *a2, uint64_t a3)
{
  size_t v7 = (void *)(a1 + 24);
  unint64_t v8 = MilTranslator::WeightTranslator::WeightInfoShapePairHasher::operator()(a1 + 24, a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(void **)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      std::string::size_type v14 = (void *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if (std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v14 + 2), (uint64_t)a2))
            {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3) {
              break;
            }
          }
          std::string::size_type v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::__unordered_map_hasher<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,true>,std::__unordered_map_equal<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,true>,std::allocator<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>>>::__construct_node_hash<std::pair<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>> const,std::string>>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *unint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  std::string::size_type v14 = (void *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return v14;
}

void sub_210BC1C84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

__n128 std::__hash_table<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::__unordered_map_hasher<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,true>,std::__unordered_map_equal<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,std::equal_to<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>>,MilTranslator::WeightTranslator::WeightInfoShapePairHasher,true>,std::allocator<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>>>::__construct_node_hash<std::pair<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>> const,std::string>>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x60uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>::pair[abi:ne180100]((std::string *)(v8 + 16), (long long *)a3);
  __n128 result = *(__n128 *)(a3 + 56);
  *(__n128 *)(v8 + 72) = result;
  *((void *)v8 + 11) = *(void *)(a3 + 72);
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 56) = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_210BC1D1C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>>,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::pair<MilTranslator::WeightTranslator::WeightFileInfo,std::vector<unsigned long long>> const,std::string>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__shared_ptr_pointer<MIL::IRTensorValue const *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x21667BBD0);
}

uint64_t std::__shared_ptr_pointer<MIL::IRTensorValue const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRTensorValue const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::vector<MIL::Fp16>::__append(void **a1, unint64_t a2, _WORD *a3)
{
  unint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  unint64_t v9 = *(_WORD **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 1)
  {
    if (a2)
    {
      uint64_t v16 = 2 * a2;
      float v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 2;
      }
      while (v16);
      unint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    uint64_t v11 = a2 + (v10 >> 1);
    if (v11 < 0) {
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 1;
    unint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 > v11) {
      uint64_t v11 = v13;
    }
    if (v13 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v14 = v11;
    }
    if (v14) {
      unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>(v6, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    BOOL v18 = &v15[2 * v12];
    unint64_t v19 = &v18[2 * a2];
    uint64_t v20 = 2 * a2;
    size_t v21 = v18;
    do
    {
      *(_WORD *)size_t v21 = *a3;
      v21 += 2;
      v20 -= 2;
    }
    while (v20);
    unint64_t v22 = &v15[2 * v14];
    unint64_t v23 = (char *)*a1;
    for (uint64_t i = (char *)a1[1]; i != v23; i -= 2)
    {
      __int16 v25 = *((_WORD *)i - 1);
      *((_WORD *)v18 - 1) = v25;
      v18 -= 2;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

char *std::vector<unsigned long long>::assign(char **a1, unint64_t a2, void *a3)
{
  uint64_t v6 = (uint64_t)a1[2];
  uint64_t result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 3)
  {
    unint64_t v13 = a1[1];
    unint64_t v14 = (v13 - result) >> 3;
    if (v14 >= a2) {
      uint64_t v15 = a2;
    }
    else {
      uint64_t v15 = (v13 - result) >> 3;
    }
    if (v15)
    {
      uint64_t v16 = result;
      do
      {
        *(void *)uint64_t v16 = *a3;
        v16 += 8;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[8 * a2];
    }
    else
    {
      float v17 = &v13[8 * (a2 - v14)];
      uint64_t v18 = 8 * a2 - 8 * v14;
      do
      {
        *(void *)unint64_t v13 = *a3;
        v13 += 8;
        v18 -= 8;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 61) {
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v6 >> 2;
    if (v6 >> 2 <= a2) {
      uint64_t v8 = a2;
    }
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    uint64_t result = std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, v9);
    uint64_t v10 = a1[1];
    uint64_t v11 = &v10[8 * a2];
    uint64_t v12 = 8 * a2;
    do
    {
      *(void *)uint64_t v10 = *a3;
      v10 += 8;
      v12 -= 8;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

void std::vector<unsigned char>::__append(void *a1, unint64_t a2, unsigned char *a3)
{
  unint64_t v4 = a2;
  uint64_t v7 = (unsigned char *)a1[1];
  uint64_t v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (a2)
    {
      unint64_t v13 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = &v7[-*a1];
    unint64_t v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0) {
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = v6 - *a1;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = operator new(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v14 = &v8[(void)v12];
    uint64_t v15 = &v8[(void)v12 + v4];
    uint64_t v16 = &v8[(void)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    float v17 = (unsigned char *)*a1;
    if (v7 != (unsigned char *)*a1)
    {
      do
      {
        char v18 = *--v7;
        *--unint64_t v14 = v18;
      }
      while (v7 != v17);
      uint64_t v7 = (unsigned char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

char *std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<unsigned long long>::__vallocate[abi:ne180100](v7, v11);
    unint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      char v18 = v9;
      unint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  unint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    char v18 = v9;
    unint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

MIL::Blob::StorageWriter *MilTranslator::WeightTranslator::WeightTranslator(std::__shared_weak_count **a1, MIL::Blob::StorageWriter **a2)
{
  unint64_t v3 = *a1;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return std::unique_ptr<MIL::Blob::StorageWriter>::reset[abi:ne180100](a2, 0);
}

void ANEMachineIR::H2021::Validators::ValidateConst(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

uint64_t ANEMachineIR::H2022::Validators::ValidateBaseNePool@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return MIL::ValidationResult::ValidationResult(a1);
}

void ANEMachineIR::H2022::Validators::ValidateNeAvgPool(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2022::Validators::ValidateNeMaxPool(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2022::Validators::ValidateNeMinPool(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

uint64_t ANEMachineIR::H2022::Validators::ValidateBasePePool@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return MIL::ValidationResult::ValidationResult(a1);
}

void ANEMachineIR::H2022::Validators::ValidatePeAvgPool(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2022::Validators::ValidatePeMaxPool(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2022::Validators::ValidatePeMinPool(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::Validators::ValidateLiveTensorSize(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, MIL::ValidationResult *a5@<X8>)
{
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2);
  std::string v83 = 0;
  uint64_t v84 = 0;
  uint64_t v82 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v82, *(const void **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 3);
  uint64_t v79 = 0;
  std::string::size_type v80 = 0;
  __int16 v81 = 0;
  unint64_t v10 = v83 - v82;
  if (v83 == v82) {
    goto LABEL_56;
  }
  uint64_t v65 = a1;
  unint64_t v11 = 0;
  if (v10 <= 1) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = v83 - v82;
  }
  while (1)
  {
    if (v11 >= v83 - v82) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    if (!(*(uint64_t (**)(void *))(*v82[v11] + 16))(v82[v11])) {
      break;
    }
    if (v11 >= v83 - v82) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v13 = MIL::IRDimension::AsConstant((MIL::IRDimension *)v82[v11]);
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 48))(v13);
    uint64_t v15 = v14;
    uint64_t v16 = v80;
    if (v80 >= v81)
    {
      char v18 = v79;
      uint64_t v19 = v80 - v79;
      unint64_t v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 61) {
        std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v21 = (char *)v81 - (char *)v79;
      if (((char *)v81 - (char *)v79) >> 2 > v20) {
        unint64_t v20 = v21 >> 2;
      }
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v22 = v20;
      }
      if (v22)
      {
        unint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v81, v22);
        char v18 = v79;
        uint64_t v16 = v80;
      }
      else
      {
        unint64_t v23 = 0;
      }
      uint64_t v24 = (uint64_t *)&v23[8 * v19];
      *uint64_t v24 = v15;
      size_t v17 = v24 + 1;
      while (v16 != v18)
      {
        uint64_t v25 = *--v16;
        *--uint64_t v24 = v25;
      }
      uint64_t v79 = v24;
      std::string::size_type v80 = v17;
      __int16 v81 = (uint64_t *)&v23[8 * v22];
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *std::string::size_type v80 = v14;
      size_t v17 = v16 + 1;
    }
    std::string::size_type v80 = v17;
    if (++v11 == v12)
    {
      uint64_t v27 = (char *)v17 - (char *)v79;
      BOOL v26 = v17 == v79;
      a1 = v65;
      if (v26) {
        goto LABEL_56;
      }
      uint64_t v28 = v27 >> 3;
      unint64_t v29 = (v27 >> 3) - 1;
      if ((unint64_t)v79[v29] > 0x10000) {
        goto LABEL_27;
      }
      if ((unint64_t)v27 < 9) {
        goto LABEL_56;
      }
      if ((unint64_t)*v79 > 0x1000)
      {
        char v30 = 0;
        unint64_t v29 = 0;
        goto LABEL_57;
      }
      if ((unint64_t)v27 < 0x11) {
        goto LABEL_56;
      }
      unint64_t v29 = v28 - 2;
      if ((unint64_t)v79[v28 - 2] > 0x4000) {
        goto LABEL_27;
      }
      if ((unint64_t)v27 < 0x19) {
        goto LABEL_56;
      }
      unint64_t v29 = v28 - 3;
      if ((unint64_t)v79[v28 - 3] > 0x1000)
      {
LABEL_27:
        char v30 = 0;
        goto LABEL_57;
      }
      if ((unint64_t)v27 >= 0x21 && (unint64_t)v79[1] > 0x4000)
      {
        char v30 = 0;
        unint64_t v29 = 1;
        goto LABEL_57;
      }
LABEL_56:
      unint64_t v29 = 0;
      char v30 = 1;
LABEL_57:
      if (v30)
      {
        MIL::ValidationResult::ValidationResult(a5);
        goto LABEL_96;
      }
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v76);
      long long v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Dimension extent invalid for parameter ", 39);
      uint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"\"", 1);
      int v46 = *(char *)(a3 + 23);
      if (v46 >= 0) {
        uint64_t v47 = a3;
      }
      else {
        uint64_t v47 = *(void *)a3;
      }
      if (v46 >= 0) {
        uint64_t v48 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v48 = *(void *)(a3 + 8);
      }
      long long v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, v47, v48);
      uint64_t v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"\"", 1);
      uint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" at index ", 10);
      std::to_string(&v71, v29);
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v52 = &v71;
      }
      else {
        int v52 = (std::string *)v71.__r_.__value_.__r.__words[0];
      }
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v71.__r_.__value_.__l.__size_;
      }
      unint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, size);
      std::string::size_type v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" into tensor of rank ", 21);
      std::to_string(&v70, v10);
      if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v56 = &v70;
      }
      else {
        unint64_t v56 = (std::string *)v70.__r_.__value_.__r.__words[0];
      }
      if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v57 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v57 = v70.__r_.__value_.__l.__size_;
      }
      int v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v56, v57);
      unint64_t v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" of \"", 5);
      int v60 = *(char *)(a4 + 23);
      if (v60 >= 0) {
        uint64_t v61 = a4;
      }
      else {
        uint64_t v61 = *(void *)a4;
      }
      if (v60 >= 0) {
        uint64_t v62 = *(unsigned __int8 *)(a4 + 23);
      }
      else {
        uint64_t v62 = *(void *)(a4 + 8);
      }
      uint64_t v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, v61, v62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"\".", 2);
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v71.__r_.__value_.__l.__data_);
      }
      long long v64 = (std::__shared_weak_count *)a1[1];
      uint64_t v68 = *a1;
      uint64_t v69 = v64;
      if (v64) {
        atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::stringbuf::str();
      MEMORY[0x21667B340](a5, &v68, 315, &v66);
      if (v67 < 0) {
        operator delete(v66);
      }
      std::string::size_type v43 = v69;
      if (v69) {
        goto LABEL_91;
      }
      goto LABEL_92;
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v76);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"Shape is not statically known at dimension ", 43);
  uint64_t v31 = (void *)std::ostream::operator<<();
  unint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" for parameter \"", 16);
  int v33 = *(char *)(a3 + 23);
  if (v33 >= 0) {
    uint64_t v34 = a3;
  }
  else {
    uint64_t v34 = *(void *)a3;
  }
  if (v33 >= 0) {
    uint64_t v35 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v35 = *(void *)(a3 + 8);
  }
  char v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
  long long v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\" in operation \"", 16);
  int v38 = *(char *)(a4 + 23);
  if (v38 >= 0) {
    uint64_t v39 = a4;
  }
  else {
    uint64_t v39 = *(void *)a4;
  }
  if (v38 >= 0) {
    uint64_t v40 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    uint64_t v40 = *(void *)(a4 + 8);
  }
  unint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v39, v40);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"\".", 2);
  unint64_t v42 = (std::__shared_weak_count *)v65[1];
  uint64_t v74 = *v65;
  uint64_t v75 = v42;
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::stringbuf::str();
  MEMORY[0x21667B340](a5, &v74, 302, &__p);
  if (v73 < 0) {
    operator delete(__p);
  }
  std::string::size_type v43 = v75;
  if (v75) {
LABEL_91:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
LABEL_92:
  v76[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v76 + *(void *)(v76[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v76[1] = MEMORY[0x263F8C318] + 16;
  if (v77 < 0) {
    operator delete((void *)v76[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x21667BB30](&v78);
LABEL_96:
  if (v79)
  {
    std::string::size_type v80 = v79;
    operator delete(v79);
  }
  if (v82)
  {
    std::string v83 = v82;
    operator delete(v82);
  }
}

void sub_210BC2978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,std::__shared_weak_count *a38,char a39)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  if (a38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a38);
  }
  std::ostringstream::~ostringstream((uint64_t)&a39);
  unint64_t v41 = *(void **)(v39 - 136);
  if (v41)
  {
    *(void *)(v39 - 128) = v41;
    operator delete(v41);
  }
  unint64_t v42 = *(void **)(v39 - 112);
  if (v42)
  {
    *(void *)(v39 - 104) = v42;
    operator delete(v42);
  }
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C340] + 64;
  *(void *)(a1 + 112) = MEMORY[0x263F8C340] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2C8] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C8] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  int v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x263F8C340] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_210BC2BCC(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x21667BB30](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)a1 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x21667BB30](a1 + 112);
  return a1;
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x21667BA50](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      unint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x21667BA60](v13);
  return a1;
}

void sub_210BC2E34(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x21667BA60](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x210BC2E14);
}

void sub_210BC2E88(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      uint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_210BC3008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

uint64_t ANEMachineIR::H2021::Validators::ValidateBaseNePool@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return MIL::ValidationResult::ValidationResult(a1);
}

void ANEMachineIR::H2021::Validators::ValidateNeAvgPool(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2021::Validators::ValidateNeMaxPool(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2021::Validators::ValidateNeMinPool(ANEMachineIR::Validators *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

uint64_t ANEMachineIR::H2021::Validators::ValidateBasePePool@<X0>(MIL::ValidationResult *a1@<X8>)
{
  return MIL::ValidationResult::ValidationResult(a1);
}

void ANEMachineIR::H2021::Validators::ValidatePeAvgPool(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2021::Validators::ValidatePeMaxPool(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void ANEMachineIR::H2021::Validators::ValidatePeMinPool(MIL::IRObject *this@<X0>, MIL::ValidationResult *a2@<X8>)
{
}

void *MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v92[4] = *MEMORY[0x263EF8340];
  v92[0] = &unk_26C319788;
  v92[3] = v92;
  uint64_t v4 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 208))(a1);
  uint64_t v5 = **v4;
  uint64_t v6 = (*v4)[1];
  if (v5 != v6)
  {
    size_t v7 = (void **)(a2 + 8);
LABEL_3:
    size_t v8 = (void ***)(*(uint64_t (**)(void))(**(void **)v5 + 56))();
    int v9 = **v8;
    unint64_t v10 = (*v8)[1];
    while (1)
    {
      if (v9 == v10)
      {
        v5 += 16;
        if (v5 != v6) {
          goto LABEL_3;
        }
        break;
      }
      uint64_t v11 = *v9;
      uint64_t v12 = (*(uint64_t (**)(void))(*(void *)*v9 + 56))(*v9);
      int v13 = *(char *)(v12 + 23);
      if (v13 < 0)
      {
        if (*(void *)(v12 + 8) != 4) {
          goto LABEL_11;
        }
        uint64_t v12 = *(void *)v12;
      }
      else if (v13 != 4)
      {
        goto LABEL_11;
      }
      if (*(_DWORD *)v12 == 1970038130)
      {
        *(_DWORD *)std::string __p = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p[8], (char *)&unk_210C6BFE7);
        *(_DWORD *)a2 = 0;
        if (*(char *)(a2 + 31) < 0) {
          operator delete(*v7);
        }
        *(_OWORD *)size_t v7 = *(_OWORD *)&__p[8];
        *(void *)(a2 + 24) = *(void *)&__p[24];
        uint64_t v31 = (void *)a3;
        unint64_t v32 = &unk_26C3193F8;
        goto LABEL_74;
      }
LABEL_11:
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 56))(v11);
      int v15 = *(char *)(v14 + 23);
      if (v15 < 0)
      {
        if (*(void *)(v14 + 8) != 6) {
          goto LABEL_20;
        }
        uint64_t v14 = *(void *)v14;
      }
      else if (v15 != 6)
      {
        goto LABEL_20;
      }
      if (*(_DWORD *)v14 == 1701734764 && *(_WORD *)(v14 + 4) == 29281)
      {
        *(_DWORD *)std::string __p = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p[8], (char *)&unk_210C6BFE7);
        *(_DWORD *)a2 = 0;
        if (*(char *)(a2 + 31) < 0) {
          operator delete(*v7);
        }
        *(_OWORD *)size_t v7 = *(_OWORD *)&__p[8];
        *(void *)(a2 + 24) = *(void *)&__p[24];
        uint64_t v31 = (void *)a3;
        unint64_t v32 = &unk_26C319488;
LABEL_74:
        *uint64_t v31 = v32;
        v31[3] = v31;
        return std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v92);
      }
LABEL_20:
      uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 56))(v11);
      int v18 = *(char *)(v17 + 23);
      if (v18 < 0)
      {
        if (*(void *)(v17 + 8) != 4) {
          goto LABEL_26;
        }
        uint64_t v17 = *(void *)v17;
      }
      else if (v18 != 4)
      {
        goto LABEL_26;
      }
      if (*(_DWORD *)v17 == 1752064372)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "scale");
        uint64_t ParameterValue = MIL::IROperation::TryGetParameterValue();
        float v34 = 1.0;
        if (ParameterValue)
        {
          if ((*(uint64_t (**)(uint64_t))(*(void *)ParameterValue + 40))(ParameterValue))
          {
            uint64_t v35 = (float *)MEMORY[0x21667B860]();
            if (v35) {
              float v34 = *v35;
            }
          }
        }
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        *(_DWORD *)std::string __p = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p[8], (char *)&unk_210C6BFE7);
        *(_DWORD *)a2 = *(_DWORD *)__p;
        if (*(char *)(a2 + 31) < 0) {
          operator delete(*v7);
        }
        *(_OWORD *)size_t v7 = *(_OWORD *)&__p[8];
        *(void *)(a2 + 24) = *(void *)&__p[24];
        *(void *)std::string __p = 0x40A0000000000000;
        *(_DWORD *)&__p[8] = 0;
        *(float *)&__p[12] = v34;
        *(_DWORD *)&v90[20] = ilogbf(8.0);
        for (uint64_t i = 4; i != 37; ++i)
        {
          float v37 = tanhf((float)((float)(i - 4) * 0.125) + 0.0);
          __int16 v91 = MIL::Fp16::FromFloat(v38, v34 * v37);
          MIL::Fp16::GetFloat((MIL::Fp16 *)&v91);
          *(_DWORD *)&__p[4 * i] = v39;
        }
        *(void *)&v90[4] = 0;
        *(float *)&v90[12] = v34 - *(float *)v90;
        *(float *)&v90[16] = *(float *)v90 + (float)((float)(v34 - *(float *)v90) * -4.0);
        uint64_t v40 = a3;
        *(void *)(a3 + 24) = 0;
        unint64_t v41 = (char *)operator new(0xB8uLL);
        if (v34 >= 0.0) {
          unint64_t v42 = &unk_26C319508;
        }
        else {
          unint64_t v42 = &unk_26C319588;
        }
        long long v74 = v87;
        *(_OWORD *)(v41 + 120) = v88;
        long long v75 = *(_OWORD *)v90;
        *(_OWORD *)(v41 + 136) = v89;
        *(_OWORD *)(v41 + 152) = v75;
        long long v76 = v83;
        *(_OWORD *)(v41 + 56) = v84;
        long long v77 = v86;
        *(_OWORD *)(v41 + 72) = v85;
        *(_OWORD *)(v41 + 88) = v77;
        *(_OWORD *)(v41 + 104) = v74;
        long long v78 = *(_OWORD *)&__p[16];
        *(_OWORD *)(v41 + 8) = *(_OWORD *)__p;
        *(_OWORD *)(v41 + 24) = v78;
        *(void *)unint64_t v41 = v42;
        *((void *)v41 + 21) = *(void *)&v90[16];
        *(_OWORD *)(v41 + 40) = v76;
        v41[176] = 1;
        v41[177] = 0;
        goto LABEL_128;
      }
LABEL_26:
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 56))(v11);
      int v20 = *(char *)(v19 + 23);
      if (v20 < 0)
      {
        if (*(void *)(v19 + 8) != 7) {
          goto LABEL_35;
        }
        uint64_t v19 = *(void *)v19;
      }
      else if (v20 != 7)
      {
        goto LABEL_35;
      }
      if (*(_DWORD *)v19 == 1835493747 && *(_DWORD *)(v19 + 3) == 1684631405)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "scale");
        uint64_t v43 = MIL::IROperation::TryGetParameterValue();
        float v44 = 1.0;
        if (v43)
        {
          if ((*(uint64_t (**)(uint64_t))(*(void *)v43 + 40))(v43))
          {
            uint64_t v45 = (float *)MEMORY[0x21667B860]();
            if (v45) {
              float v44 = *v45;
            }
          }
        }
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        *(_DWORD *)std::string __p = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p[8], (char *)&unk_210C6BFE7);
        *(_DWORD *)a2 = *(_DWORD *)__p;
        if (*(char *)(a2 + 31) < 0) {
          operator delete(*v7);
        }
        *(_OWORD *)size_t v7 = *(_OWORD *)&__p[8];
        *(void *)(a2 + 24) = *(void *)&__p[24];
        *(void *)std::string __p = 0x41052000C11F0000;
        *(_DWORD *)&__p[8] = 0;
        *(float *)&__p[12] = v44;
        *(_DWORD *)&v90[20] = ilogbf(2.0);
        for (uint64_t j = 4; j != 37; ++j)
        {
          float v47 = expf(-(float)((float)((float)(j - 4) * 0.5) + -8.0));
          __int16 v91 = MIL::Fp16::FromFloat(v48, v44 / (float)(v47 + 1.0));
          MIL::Fp16::GetFloat((MIL::Fp16 *)&v91);
          *(_DWORD *)&__p[4 * j] = v49;
        }
        *(float *)&v90[4] = *(float *)&__p[16] / 1.9375;
        *(float *)&v90[8] = *(float *)&__p[16] - (float)((float)(*(float *)&__p[16] / 1.9375) * -8.0);
        *(float *)&v90[12] = (float)(v44 - *(float *)v90) / 0.32031;
        *(float *)&v90[16] = *(float *)v90 + (float)(*(float *)&v90[12] * -8.0);
        uint64_t v40 = a3;
        *(void *)(a3 + 24) = 0;
        unint64_t v41 = (char *)operator new(0xB8uLL);
        long long v50 = v87;
        *(_OWORD *)(v41 + 120) = v88;
        long long v51 = *(_OWORD *)v90;
        *(_OWORD *)(v41 + 136) = v89;
        *(_OWORD *)(v41 + 152) = v51;
        long long v52 = v83;
        *(_OWORD *)(v41 + 56) = v84;
        long long v53 = v86;
        *(_OWORD *)(v41 + 72) = v85;
        *(_OWORD *)(v41 + 88) = v53;
        *(_OWORD *)(v41 + 104) = v50;
        long long v54 = *(_OWORD *)&__p[16];
        *(_OWORD *)(v41 + 8) = *(_OWORD *)__p;
        *(_OWORD *)(v41 + 24) = v54;
        *(void *)unint64_t v41 = &unk_26C319608;
        *((void *)v41 + 21) = *(void *)&v90[16];
        *(_OWORD *)(v41 + 40) = v52;
LABEL_124:
        __int16 v66 = 256;
LABEL_125:
        *((_WORD *)v41 + 88) = v66;
LABEL_128:
        *(void *)(v40 + 24) = v41;
        return std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v92);
      }
LABEL_35:
      uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 56))(v11);
      int v23 = *(char *)(v22 + 23);
      if (v23 < 0)
      {
        if (*(void *)(v22 + 8) != 4) {
          goto LABEL_41;
        }
        uint64_t v22 = *(void *)v22;
      }
      else if (v23 != 4)
      {
        goto LABEL_41;
      }
      if (*(_DWORD *)v22 == 1953657203)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "scale");
        uint64_t v55 = MIL::IROperation::TryGetParameterValue();
        float v56 = 1.0;
        if (v55)
        {
          if ((*(uint64_t (**)(uint64_t))(*(void *)v55 + 40))(v55))
          {
            std::string::size_type v57 = (float *)MEMORY[0x21667B860]();
            if (v57) {
              float v56 = *v57;
            }
          }
        }
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        *(_DWORD *)std::string __p = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p[8], (char *)&unk_210C6BFE7);
        *(_DWORD *)a2 = *(_DWORD *)__p;
        if (*(char *)(a2 + 31) < 0) {
          operator delete(*v7);
        }
        *(_OWORD *)size_t v7 = *(_OWORD *)&__p[8];
        *(void *)(a2 + 24) = *(void *)&__p[24];
        *(_OWORD *)std::string __p = xmmword_210C69160;
        uint64_t Float = (MIL::Fp16 *)ilogbf(16.0);
        *(_DWORD *)&v90[20] = Float;
        for (uint64_t k = 4; k != 37; ++k)
        {
          __int16 v91 = MIL::Fp16::FromFloat(Float, v56 * sqrtf((float)((float)(k - 4) * 0.0625) + 0.0));
          uint64_t Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v91);
          *(_DWORD *)&__p[4 * k] = v60;
        }
        *(void *)&v90[12] = 0;
        *(void *)&v90[4] = 0;
        uint64_t v40 = a3;
        *(void *)(a3 + 24) = 0;
        unint64_t v41 = (char *)operator new(0xB8uLL);
        long long v61 = v87;
        *(_OWORD *)(v41 + 120) = v88;
        long long v62 = *(_OWORD *)v90;
        *(_OWORD *)(v41 + 136) = v89;
        *(_OWORD *)(v41 + 152) = v62;
        long long v63 = v83;
        *(_OWORD *)(v41 + 56) = v84;
        long long v64 = v86;
        *(_OWORD *)(v41 + 72) = v85;
        *(_OWORD *)(v41 + 88) = v64;
        *(_OWORD *)(v41 + 104) = v61;
        long long v65 = *(_OWORD *)&__p[16];
        *(_OWORD *)(v41 + 8) = *(_OWORD *)__p;
        *(_OWORD *)(v41 + 24) = v65;
        *(void *)unint64_t v41 = &unk_26C319688;
        *((void *)v41 + 21) = *(void *)&v90[16];
        *(_OWORD *)(v41 + 40) = v63;
        __int16 v66 = 1280;
        goto LABEL_125;
      }
LABEL_41:
      uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 56))(v11);
      int v25 = *(char *)(v24 + 23);
      if (v25 < 0)
      {
        if (*(void *)(v24 + 8) != 5) {
          goto LABEL_50;
        }
        uint64_t v24 = *(void *)v24;
      }
      else if (v25 != 5)
      {
        goto LABEL_50;
      }
      if (*(_DWORD *)v24 == 1818587756 && *(unsigned char *)(v24 + 4) == 117)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "scale");
        uint64_t v67 = MIL::IROperation::TryGetParameterValue();
        float v80 = 1.0;
        if (v67)
        {
          if ((*(uint64_t (**)(uint64_t))(*(void *)v67 + 40))(v67))
          {
            uint64_t v68 = (float *)MEMORY[0x21667B860]();
            if (v68) {
              float v80 = *v68;
            }
          }
        }
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "alpha");
        uint64_t v69 = MIL::IROperation::TryGetParameterValue();
        float v70 = 0.3;
        if (v69)
        {
          if ((*(uint64_t (**)(uint64_t))(*(void *)v69 + 40))(v69))
          {
            std::string v71 = (float *)MEMORY[0x21667B860]();
            if (v71) {
              float v70 = *v71;
            }
          }
        }
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        *(_DWORD *)std::string __p = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p[8], (char *)&unk_210C6BFE7);
        *(_DWORD *)a2 = *(_DWORD *)__p;
        if (*(char *)(a2 + 31) < 0) {
          operator delete(*v7);
        }
        *(_OWORD *)size_t v7 = *(_OWORD *)&__p[8];
        *(void *)(a2 + 24) = *(void *)&__p[24];
        uint64_t v40 = a3;
        *(void *)(a3 + 24) = 0;
        unint64_t v41 = (char *)operator new(0xB8uLL);
        *(void *)unint64_t v41 = &unk_26C319708;
        v72.i32[0] = 2139095040;
        float32x2_t v73 = (float32x2_t)vdup_lane_s32(v72, 0);
        v73.f32[0] = v70 * -INFINITY;
        *((void *)v41 + 1) = 0x7F800000FF800000;
        *((float32x2_t *)v41 + 2) = vmul_n_f32(v73, v80);
        *(_OWORD *)(v41 + 24) = 0u;
        *(_OWORD *)(v41 + 40) = 0u;
        *(_OWORD *)(v41 + 56) = 0u;
        *(_OWORD *)(v41 + 72) = 0u;
        *(_OWORD *)(v41 + 88) = 0u;
        *(_OWORD *)(v41 + 104) = 0u;
        *(_OWORD *)(v41 + 120) = 0u;
        *(_OWORD *)(v41 + 136) = 0u;
        *((_DWORD *)v41 + 38) = 0;
        *((float *)v41 + 39) = v80 * v70;
        *((_DWORD *)v41 + 40) = 0;
        *((float *)v41 + 41) = v80;
        *((void *)v41 + 21) = 0x4000000000;
        goto LABEL_124;
      }
LABEL_50:
      uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 56))(v11);
      int v28 = *(char *)(v27 + 23);
      if (v28 < 0)
      {
        if (*(void *)(v27 + 8) != 15) {
          goto LABEL_59;
        }
        uint64_t v27 = *(void *)v27;
      }
      else if (v28 != 15)
      {
        goto LABEL_59;
      }
      if (*(void *)v27 != 0x65636569705F656ELL || *(void *)(v27 + 7) != 0x32765F6573697765)
      {
LABEL_59:
        *(_DWORD *)std::string __p = 3;
        (*(void (**)(uint64_t))(*(void *)v11 + 56))(v11);
        std::operator+<char>();
        goto LABEL_60;
      }
      *(_DWORD *)std::string __p = 3;
      std::string::basic_string[abi:ne180100]<0>(&__p[8], "ne_piecewise_v2");
LABEL_60:
      *(_DWORD *)a2 = *(_DWORD *)__p;
      if (*(char *)(a2 + 31) < 0) {
        operator delete(*v7);
      }
      *(_OWORD *)size_t v7 = *(_OWORD *)&__p[8];
      *(void *)(a2 + 24) = *(void *)&__p[24];
      v9 += 2;
    }
  }
  *(_DWORD *)std::string __p = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p[8], (char *)&unk_210C6BFE7);
  *(_DWORD *)a2 = 0;
  char v30 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v30);
  }
  *(_OWORD *)char v30 = *(_OWORD *)&__p[8];
  *(void *)(a2 + 24) = *(void *)&__p[24];
  std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100](a3, (uint64_t)v92);
  return std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v92);
}

void sub_210BC3DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100]((void *)(v18 - 168));
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::NeActivationCpu::Run(MIL::IROperation *a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  v93[4] = *MEMORY[0x263EF8340];
  long long v90 = 0uLL;
  std::string::size_type v91 = 0;
  MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction((uint64_t)a1, (uint64_t)&v89, (uint64_t)v93);
  if (v89)
  {
    *(_DWORD *)a3 = 1;
    uint64_t v6 = (std::string *)(a3 + 8);
    if (SHIBYTE(v91) < 0)
    {
      std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)v90, *((std::string::size_type *)&v90 + 1));
    }
    else
    {
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v90;
      v6->__r_.__value_.__r.__words[2] = v91;
    }
    goto LABEL_103;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  uint64_t InterpretedTensorValue = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)__p);
  uint64_t v8 = InterpretedTensorValue;
  if ((v88 & 0x80000000) == 0)
  {
    if (InterpretedTensorValue) {
      goto LABEL_6;
    }
LABEL_20:
    *(_DWORD *)a3 = 3;
    std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), "Value is not a tensor.");
    goto LABEL_103;
  }
  operator delete(__p[0]);
  if (!v8) {
    goto LABEL_20;
  }
LABEL_6:
  uint64_t OutputType = MIL::IROperation::GetOutputType(a1);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)OutputType + 24))(OutputType);
  uint64_t v11 = (ANEMachineIR::Utils *)v10;
  if (!v10)
  {
    int v25 = "Output type is not a tensor.";
    int v26 = 3;
LABEL_23:
    *(_DWORD *)a3 = v26;
    std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), v25);
    goto LABEL_103;
  }
  int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 88))(v10);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 32))(v8);
  if (v12 != (*(unsigned int (**)(uint64_t))(*(void *)v13 + 88))(v13))
  {
    int v25 = "ne_activation with different input and output dtypes (with casting) is not implemented in the interpreted mode.";
    int v26 = 4;
    goto LABEL_23;
  }
  uint64_t NumberOfElementsFromStaticTensorShape = ANEMachineIR::Utils::GetNumberOfElementsFromStaticTensorShape(v11, v14);
  uint64_t v16 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(__p, "post_scale");
  __int16 v17 = MIL::Fp16::FromFloat(v16, 1.0);
  uint64_t ParameterValue = MIL::IROperation::TryGetParameterValue();
  if (ParameterValue)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)ParameterValue + 40))(ParameterValue))
    {
      uint64_t v19 = (__int16 *)MEMORY[0x21667B820]();
      if (v19) {
        __int16 v17 = *v19;
      }
    }
  }
  LOWORD(__e[0]) = v17;
  MIL::Fp16::GetFloat((MIL::Fp16 *)__e);
  float v21 = v20;
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "post_right_shift");
  uint64_t v22 = MIL::IROperation::TryGetParameterValue();
  if (v22
    && (*(uint64_t (**)(uint64_t))(*(void *)v22 + 40))(v22)
    && (int v23 = (unsigned __int8 *)MEMORY[0x21667B840]()) != 0)
  {
    int v24 = *v23;
  }
  else
  {
    int v24 = 0;
  }
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 32))(v8);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v27 + 88))(v27) == 4) {
    int v28 = 20;
  }
  else {
    int v28 = 10;
  }
  double v29 = ldexp(1.0, v28);
  float v30 = 1.0;
  BOOL v31 = v21 == 1.0 && v24 == 0;
  int v32 = !v31;
  if (!v31) {
    float v30 = exp2(-(double)(v28 + (char)v24)) * v21;
  }
  float v33 = v29;
  if ((*(unsigned int (**)(ANEMachineIR::Utils *))(*(void *)v11 + 88))(v11) == 4)
  {
    std::vector<MIL::Fp16>::vector(__p, NumberOfElementsFromStaticTensorShape);
    if (NumberOfElementsFromStaticTensorShape)
    {
      for (unint64_t i = 0; i != NumberOfElementsFromStaticTensorShape; ++i)
      {
        *(void *)int __e = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        uint64_t v86 = v35;
        char v36 = (MIL::Fp16 *)MIL::Util::Span<MIL::Fp16 const,18446744073709551615ul>::operator[](__e, i);
        MIL::Fp16::GetFloat(v36);
        float v38 = v37;
        if (v32)
        {
          int v39 = ilogbf(v37);
          if (v39 <= -14) {
            int v40 = -14;
          }
          else {
            int v40 = v39;
          }
          int v41 = ilogbf(1.0);
          if (v41 <= -14) {
            int v42 = -14;
          }
          else {
            int v42 = v41;
          }
          float v43 = 0.0;
          float v44 = 0.0;
          if (v42 + v40 >= -20)
          {
            int v45 = llroundf(v38 * v33);
            float v44 = 0.0;
            if (v45)
            {
              __e[0] = 0;
              long double v46 = frexp((double)v45, __e);
              double v47 = ldexp(v46, 11);
              float v44 = ldexp(round(v47), __e[0] - 11);
            }
          }
          float v48 = v30 * v44;
          if (v48 != 0.0)
          {
            __e[0] = 0;
            long double v49 = frexp(v48, __e);
            double v50 = ldexp(v49, 11);
            float v43 = ldexp(round(v50), __e[0] - 11);
          }
        }
        else
        {
          float v43 = v37;
        }
        long long v51 = (MIL::Fp16 *)std::function<float ()(float)>::operator()((uint64_t)v93, v43);
        __int16 v53 = MIL::Fp16::FromFloat(v51, v52);
        *((_WORD *)__p[0] + i) = v53;
      }
    }
    (*(void (**)(int *__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(__e, a1);
    long long v54 = *(unsigned __int8 **)__e;
    if (v86 == *(void *)__e) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    MIL::IRTensorValueType::MakeFloat16Value();
    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v54, (uint64_t *)&v92);
LABEL_97:
    uint64_t v82 = v92;
    uint64_t v92 = 0;
    if (v82) {
      (*((void (**)(void **))*v82 + 1))(v82);
    }
    uint64_t v92 = (void **)__e;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v92);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    int v83 = 0;
    long long v84 = (char *)&unk_210C6BFE7;
    goto LABEL_102;
  }
  if ((*(unsigned int (**)(ANEMachineIR::Utils *))(*(void *)v11 + 88))(v11) == 9)
  {
    std::vector<signed char>::vector(__p, NumberOfElementsFromStaticTensorShape);
    if (NumberOfElementsFromStaticTensorShape)
    {
      for (unint64_t j = 0; j != NumberOfElementsFromStaticTensorShape; ++j)
      {
        *(void *)int __e = MIL::IRTensorValue::GetDataView<signed char>();
        uint64_t v86 = v56;
        int v57 = *(char *)MIL::Util::Span<signed char const,18446744073709551615ul>::operator[](__e, j);
        float v58 = (float)v57;
        if (v32)
        {
          int v59 = ilogbf((float)v57);
          if (v59 <= -14) {
            int v60 = -14;
          }
          else {
            int v60 = v59;
          }
          int v61 = ilogbf(1.0);
          if (v61 <= -14) {
            int v62 = -14;
          }
          else {
            int v62 = v61;
          }
          float v63 = 0.0;
          float v64 = 0.0;
          if (v62 + v60 >= -20)
          {
            int v65 = llroundf(v33 * v58);
            float v64 = 0.0;
            if (v65)
            {
              __e[0] = 0;
              long double v66 = frexp((double)v65, __e);
              double v67 = ldexp(v66, 11);
              float v64 = ldexp(round(v67), __e[0] - 11);
            }
          }
          float v68 = v30 * v64;
          if (v68 != 0.0)
          {
            __e[0] = 0;
            long double v69 = frexp(v68, __e);
            double v70 = ldexp(v69, 11);
            float v63 = ldexp(round(v70), __e[0] - 11);
          }
        }
        else
        {
          float v63 = (float)v57;
        }
        std::function<float ()(float)>::operator()((uint64_t)v93, v63);
        if (v71 == INFINITY)
        {
          LOBYTE(v72) = 127;
        }
        else if (v71 == -INFINITY)
        {
          LOBYTE(v72) = 0x80;
        }
        else
        {
          int v72 = llroundf(v71);
          if (v72 >= 127) {
            int v72 = 127;
          }
          if (v72 <= -128) {
            LOBYTE(v72) = 0x80;
          }
        }
        *((unsigned char *)__p[0] + j) = v72;
      }
    }
    (*(void (**)(int *__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(__e, a1);
    float32x2_t v73 = *(unsigned __int8 **)__e;
    if (v86 == *(void *)__e) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    MIL::IRTensorValueType::MakeInt8Value();
    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v73, (uint64_t *)&v92);
    goto LABEL_97;
  }
  if ((*(unsigned int (**)(ANEMachineIR::Utils *))(*(void *)v11 + 88))(v11) == 14)
  {
    std::vector<unsigned char>::vector(__p, NumberOfElementsFromStaticTensorShape);
    if (NumberOfElementsFromStaticTensorShape)
    {
      for (unint64_t k = 0; k != NumberOfElementsFromStaticTensorShape; ++k)
      {
        *(void *)int __e = MIL::IRTensorValue::GetDataView<unsigned char>();
        uint64_t v86 = v75;
        MIL::Util::Span<unsigned char const,18446744073709551615ul>::operator[](__e, k);
        *(void *)int __e = MIL::IRTensorValue::GetDataView<unsigned char>();
        uint64_t v86 = v76;
        LOBYTE(v77) = *(unsigned char *)MIL::Util::Span<unsigned char const,18446744073709551615ul>::operator[](__e, k);
        std::function<float ()(float)>::operator()((uint64_t)v93, (float)v77);
        if (v78 == INFINITY)
        {
          LOBYTE(v79) = -1;
        }
        else if (v78 == -INFINITY)
        {
          LOBYTE(v79) = 0;
        }
        else
        {
          int v80 = llroundf(v78);
          if (v80 >= 255) {
            int v80 = 255;
          }
          int v79 = v80 & ~(v80 >> 31);
        }
        *((unsigned char *)__p[0] + k) = v79;
      }
    }
    (*(void (**)(int *__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(__e, a1);
    __int16 v81 = *(unsigned __int8 **)__e;
    if (v86 == *(void *)__e) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    MIL::IRTensorValueType::MakeUInt8Value();
    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue((uint64_t)a2, v81, (uint64_t *)&v92);
    goto LABEL_97;
  }
  long long v84 = "Unsupported dtype.";
  int v83 = 3;
LABEL_102:
  *(_DWORD *)a3 = v83;
  std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), v84);
LABEL_103:
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v93);
  if (SHIBYTE(v91) < 0) {
    operator delete((void *)v90);
  }
}

void sub_210BC47AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char *a26,uint64_t a27)
{
  uint64_t v28 = (uint64_t)a26;
  a26 = 0;
  if (v28) {
    MIL::ANEMachineIR::Interpreter::TransposeCpu::Run(v28);
  }
  a26 = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](&a27);
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::NeActivationCpu::~NeActivationCpu(MIL::ANEMachineIR::Interpreter::NeActivationCpu *this)
{
}

void std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::ReluFunction(MIL::IROperation const&)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::ReluFunction(MIL::IROperation const&)::$_0>,float ()(float)>::~__func()
{
}

void *std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::ReluFunction(MIL::IROperation const&)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::ReluFunction(MIL::IROperation const&)::$_0>,float ()(float)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C3193F8;
  return result;
}

void std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::ReluFunction(MIL::IROperation const&)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::ReluFunction(MIL::IROperation const&)::$_0>,float ()(float)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C3193F8;
}

float std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::ReluFunction(MIL::IROperation const&)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::ReluFunction(MIL::IROperation const&)::$_0>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  return fmaxf(*a2, 0.0);
}

uint64_t std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::ReluFunction(MIL::IROperation const&)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::ReluFunction(MIL::IROperation const&)::$_0>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::ReluFunction(MIL::IROperation const&)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::ReluFunction(MIL::IROperation const&)::$_0>,float ()(float)>::target_type()
{
}

void std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::LinearFunction(MIL::IROperation const&)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::LinearFunction(MIL::IROperation const&)::$_0>,float ()(float)>::~__func()
{
}

void *std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::LinearFunction(MIL::IROperation const&)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::LinearFunction(MIL::IROperation const&)::$_0>,float ()(float)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C319488;
  return result;
}

void std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::LinearFunction(MIL::IROperation const&)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::LinearFunction(MIL::IROperation const&)::$_0>,float ()(float)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C319488;
}

float std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::LinearFunction(MIL::IROperation const&)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::LinearFunction(MIL::IROperation const&)::$_0>,float ()(float)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(float *)a2;
}

uint64_t std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::LinearFunction(MIL::IROperation const&)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::LinearFunction(MIL::IROperation const&)::$_0>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::LinearFunction(MIL::IROperation const&)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::LinearFunction(MIL::IROperation const&)::$_0>,float ()(float)>::target_type()
{
}

void std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::TanhFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::TanhFunction(float)::$_0>,float ()(float)>::~__func()
{
}

__n128 std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::TanhFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::TanhFunction(float)::$_0>,float ()(float)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0xB8uLL);
  *(void *)uint64_t v2 = &unk_26C319508;
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v2 + 152) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(v2 + 164) = *(_OWORD *)(a1 + 164);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::TanhFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::TanhFunction(float)::$_0>,float ()(float)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C319508;
  long long v2 = *(_OWORD *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  long long v4 = *(_OWORD *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 72);
  long long v6 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v6;
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  __n128 result = *(__n128 *)(a1 + 120);
  long long v8 = *(_OWORD *)(a1 + 136);
  long long v9 = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 164) = *(_OWORD *)(a1 + 164);
  *(_OWORD *)(a2 + 152) = v9;
  *(_OWORD *)(a2 + 136) = v8;
  *(__n128 *)(a2 + 120) = result;
  return result;
}

double std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::TanhFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::TanhFunction(float)::$_0>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  float v3 = *a2;
  float v4 = fabsf(*a2);
  int v5 = *(_DWORD *)(a1 + 172);
  *(double *)v6.i64 = ldexp(32.0, -v5);
  if (v4 >= *(float *)(a1 + 12))
  {
    v7.i32[0] = *(_DWORD *)(a1 + 20);
    goto LABEL_21;
  }
  if (v4 <= *(float *)(a1 + 8))
  {
    v7.i32[0] = *(_DWORD *)(a1 + 16);
    goto LABEL_21;
  }
  float v8 = *(double *)v6.i64;
  if (v4 >= v8)
  {
    float v22 = *(float *)(a1 + 164);
    float v23 = *(float *)(a1 + 168);
LABEL_16:
    float v24 = v4 * v22;
    v7.i64[0] = 0;
    float v25 = 0.0;
    if (v24 != 0.0)
    {
      int __e = 0;
      long double v26 = frexp(v24, &__e);
      double v27 = ldexp(v26, 11);
      *(double *)v6.i64 = ldexp(round(v27), __e - 11);
      v7.i64[0] = 0;
      float v25 = *(double *)v6.i64;
    }
    float v21 = v23 + v25;
    goto LABEL_19;
  }
  if (v3 == 0.0)
  {
    float v22 = *(float *)(a1 + 156);
    float v23 = *(float *)(a1 + 160);
    goto LABEL_16;
  }
  float v32 = 0.0;
  float v9 = ldexpf(v4, v5);
  float v10 = modff(fabsf(v9), &v32);
  int v11 = (int)v32 & 0x1F;
  if ((int)v32 <= 0) {
    int v11 = -(-(int)v32 & 0x1F);
  }
  uint64_t v12 = a1 + 4 * v11;
  float v13 = *(float *)(v12 + 24);
  float v14 = *(float *)(v12 + 28) - v13;
  float v15 = 0.0;
  float v16 = 0.0;
  if (v14 != 0.0)
  {
    int __e = 0;
    long double v17 = frexp(v14, &__e);
    double v18 = ldexp(v17, 11);
    *(double *)v6.i64 = ldexp(round(v18), __e - 11);
    float v16 = *(double *)v6.i64;
  }
  if ((float)(v10 * v16) != 0.0)
  {
    int __e = 0;
    long double v19 = frexp((float)(v10 * v16), &__e);
    double v20 = ldexp(v19, 11);
    *(double *)v6.i64 = ldexp(round(v20), __e - 11);
    float v15 = *(double *)v6.i64;
  }
  float v21 = v13 + v15;
  v7.i64[0] = 0;
LABEL_19:
  if (v21 != 0.0)
  {
    int __e = 0;
    long double v28 = frexp(v21, &__e);
    double v29 = ldexp(v28, 11);
    *(double *)v6.i64 = ldexp(round(v29), __e - 11);
    *(float *)v7.i32 = *(double *)v6.i64;
  }
LABEL_21:
  v6.i32[0] = 1.0;
  if (v3 < 0.0) {
    *(float *)v6.i32 = -1.0;
  }
  v30.i64[0] = 0x8000000080000000;
  v30.i64[1] = 0x8000000080000000;
  *(void *)&double result = vbslq_s8(v30, v7, v6).u64[0];
  return result;
}

uint64_t std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::TanhFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::TanhFunction(float)::$_0>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::TanhFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::TanhFunction(float)::$_0>,float ()(float)>::target_type()
{
}

void std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::TanhFunction(float)::$_1,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::TanhFunction(float)::$_1>,float ()(float)>::~__func()
{
}

__n128 std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::TanhFunction(float)::$_1,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::TanhFunction(float)::$_1>,float ()(float)>::__clone(uint64_t a1)
{
  long long v2 = (char *)operator new(0xB8uLL);
  *(void *)long long v2 = &unk_26C319588;
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v2 + 152) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(v2 + 164) = *(_OWORD *)(a1 + 164);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::TanhFunction(float)::$_1,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::TanhFunction(float)::$_1>,float ()(float)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C319588;
  long long v2 = *(_OWORD *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  long long v4 = *(_OWORD *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 72);
  long long v6 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v6;
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  __n128 result = *(__n128 *)(a1 + 120);
  long long v8 = *(_OWORD *)(a1 + 136);
  long long v9 = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 164) = *(_OWORD *)(a1 + 164);
  *(_OWORD *)(a2 + 152) = v9;
  *(_OWORD *)(a2 + 136) = v8;
  *(__n128 *)(a2 + 120) = result;
  return result;
}

double std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::TanhFunction(float)::$_1,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::TanhFunction(float)::$_1>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  float v3 = *a2;
  float v4 = fabsf(*a2);
  int v5 = *(_DWORD *)(a1 + 172);
  *(double *)v6.i64 = ldexp(32.0, -v5);
  if (v4 >= *(float *)(a1 + 12))
  {
    v7.i32[0] = *(_DWORD *)(a1 + 20);
    goto LABEL_21;
  }
  if (v4 <= *(float *)(a1 + 8))
  {
    v7.i32[0] = *(_DWORD *)(a1 + 16);
    goto LABEL_21;
  }
  float v8 = *(double *)v6.i64;
  if (v4 >= v8)
  {
    float v22 = *(float *)(a1 + 164);
    float v23 = *(float *)(a1 + 168);
LABEL_16:
    float v24 = v4 * v22;
    v7.i64[0] = 0;
    float v25 = 0.0;
    if (v24 != 0.0)
    {
      int __e = 0;
      long double v26 = frexp(v24, &__e);
      double v27 = ldexp(v26, 11);
      *(double *)v6.i64 = ldexp(round(v27), __e - 11);
      v7.i64[0] = 0;
      float v25 = *(double *)v6.i64;
    }
    float v21 = v23 + v25;
    goto LABEL_19;
  }
  if (v3 == 0.0)
  {
    float v22 = *(float *)(a1 + 156);
    float v23 = *(float *)(a1 + 160);
    goto LABEL_16;
  }
  float v32 = 0.0;
  float v9 = ldexpf(v4, v5);
  float v10 = modff(fabsf(v9), &v32);
  int v11 = (int)v32 & 0x1F;
  if ((int)v32 <= 0) {
    int v11 = -(-(int)v32 & 0x1F);
  }
  uint64_t v12 = a1 + 4 * v11;
  float v13 = *(float *)(v12 + 24);
  float v14 = *(float *)(v12 + 28) - v13;
  float v15 = 0.0;
  float v16 = 0.0;
  if (v14 != 0.0)
  {
    int __e = 0;
    long double v17 = frexp(v14, &__e);
    double v18 = ldexp(v17, 11);
    *(double *)v6.i64 = ldexp(round(v18), __e - 11);
    float v16 = *(double *)v6.i64;
  }
  if ((float)(v10 * v16) != 0.0)
  {
    int __e = 0;
    long double v19 = frexp((float)(v10 * v16), &__e);
    double v20 = ldexp(v19, 11);
    *(double *)v6.i64 = ldexp(round(v20), __e - 11);
    float v15 = *(double *)v6.i64;
  }
  float v21 = v13 + v15;
  v7.i64[0] = 0;
LABEL_19:
  if (v21 != 0.0)
  {
    int __e = 0;
    long double v28 = frexp(v21, &__e);
    double v29 = ldexp(v28, 11);
    *(double *)v6.i64 = ldexp(round(v29), __e - 11);
    *(float *)v7.i32 = *(double *)v6.i64;
  }
LABEL_21:
  v6.i32[0] = 1.0;
  if (v3 < 0.0) {
    *(float *)v6.i32 = -1.0;
  }
  *(float *)v6.i32 = -*(float *)v6.i32;
  v30.i64[0] = 0x8000000080000000;
  v30.i64[1] = 0x8000000080000000;
  v6.i64[0] = vbslq_s8(v30, v7, v6).u64[0];
  return *(double *)v6.i64;
}

uint64_t std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::TanhFunction(float)::$_1,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::TanhFunction(float)::$_1>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::TanhFunction(float)::$_1,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::TanhFunction(float)::$_1>,float ()(float)>::target_type()
{
}

void std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::SigmoidFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::SigmoidFunction(float)::$_0>,float ()(float)>::~__func()
{
}

__n128 std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::SigmoidFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::SigmoidFunction(float)::$_0>,float ()(float)>::__clone(uint64_t a1)
{
  long long v2 = (char *)operator new(0xB8uLL);
  *(void *)long long v2 = &unk_26C319608;
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v2 + 152) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(v2 + 164) = *(_OWORD *)(a1 + 164);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::SigmoidFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::SigmoidFunction(float)::$_0>,float ()(float)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C319608;
  long long v2 = *(_OWORD *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  long long v4 = *(_OWORD *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 72);
  long long v6 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v6;
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  __n128 result = *(__n128 *)(a1 + 120);
  long long v8 = *(_OWORD *)(a1 + 136);
  long long v9 = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 164) = *(_OWORD *)(a1 + 164);
  *(_OWORD *)(a2 + 152) = v9;
  *(_OWORD *)(a2 + 136) = v8;
  *(__n128 *)(a2 + 120) = result;
  return result;
}

float std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::SigmoidFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::SigmoidFunction(float)::$_0>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
}

uint64_t std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::SigmoidFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::SigmoidFunction(float)::$_0>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::SigmoidFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::SigmoidFunction(float)::$_0>,float ()(float)>::target_type()
{
}

float MIL::ANEMachineIR::Interpreter::anonymous namespace'::ane_activation_lut<false,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::LutType)1,(MIL::ANEMachineIR::Interpreter::anonymous namespace'::LutOutSign)0>(uint64_t a1, float a2)
{
  int v4 = *(_DWORD *)(a1 + 164);
  double v5 = ldexp(16.0, -v4);
  if (*(float *)(a1 + 4) <= a2) {
    return *(float *)(a1 + 12);
  }
  if (*(float *)a1 >= a2) {
    return *(float *)(a1 + 8);
  }
  float v6 = v5;
  if (v6 <= a2)
  {
    float v14 = *(float *)(a1 + 156);
    float v15 = *(float *)(a1 + 160);
LABEL_14:
    float v16 = v14 * a2;
    float v13 = 0.0;
    float v17 = 0.0;
    if (v16 != 0.0)
    {
      int __e = 0;
      long double v18 = frexp(v16, &__e);
      double v19 = ldexp(v18, 11);
      float v17 = ldexp(round(v19), __e - 11);
    }
    float v20 = v15 + v17;
    goto LABEL_23;
  }
  if ((float)-v6 >= a2)
  {
    float v14 = *(float *)(a1 + 148);
    float v15 = *(float *)(a1 + 152);
    goto LABEL_14;
  }
  float v33 = 0.0;
  float v7 = ldexpf(a2, v4);
  float v8 = modff(fabsf(v7), &v33);
  if ((int)v33 <= 0) {
    int v9 = -(-(int)v33 & 0xF);
  }
  else {
    int v9 = (int)v33 & 0xF;
  }
  uint64_t v10 = a1 + 16;
  if (a2 >= 0.0)
  {
    float v11 = *(float *)(v10 + 4 * (v9 + 17));
    unsigned int v12 = v9 + 16;
  }
  else
  {
    float v11 = *(float *)(v10 + 4 * (15 - v9));
    unsigned int v12 = 16 - v9;
  }
  float v21 = *(float *)(v10 + 4 * v12);
  float v22 = v11 - v21;
  float v23 = 0.0;
  if (v22 != 0.0)
  {
    int __e = 0;
    long double v24 = frexp(v22, &__e);
    double v25 = ldexp(v24, 11);
    float v23 = ldexp(round(v25), __e - 11);
  }
  float v26 = v8 * v23;
  float v13 = 0.0;
  float v27 = 0.0;
  if (v26 != 0.0)
  {
    int __e = 0;
    long double v28 = frexp(v26, &__e);
    double v29 = ldexp(v28, 11);
    float v27 = ldexp(round(v29), __e - 11);
  }
  float v20 = v21 + v27;
LABEL_23:
  if (v20 != 0.0)
  {
    int __e = 0;
    long double v30 = frexp(v20, &__e);
    double v31 = ldexp(v30, 11);
    return ldexp(round(v31), __e - 11);
  }
  return v13;
}

void std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::SqrtFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::SqrtFunction(float)::$_0>,float ()(float)>::~__func()
{
}

__n128 std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::SqrtFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::SqrtFunction(float)::$_0>,float ()(float)>::__clone(uint64_t a1)
{
  long long v2 = (char *)operator new(0xB8uLL);
  *(void *)long long v2 = &unk_26C319688;
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v2 + 152) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(v2 + 164) = *(_OWORD *)(a1 + 164);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::SqrtFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::SqrtFunction(float)::$_0>,float ()(float)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C319688;
  long long v2 = *(_OWORD *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  long long v4 = *(_OWORD *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 72);
  long long v6 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v6;
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  __n128 result = *(__n128 *)(a1 + 120);
  long long v8 = *(_OWORD *)(a1 + 136);
  long long v9 = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 164) = *(_OWORD *)(a1 + 164);
  *(_OWORD *)(a2 + 152) = v9;
  *(_OWORD *)(a2 + 136) = v8;
  *(__n128 *)(a2 + 120) = result;
  return result;
}

void std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::SqrtFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::SqrtFunction(float)::$_0>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  float v3 = *a2;
  if (*(float *)(a1 + 12) <= *a2 || *(float *)(a1 + 8) >= v3) {
    return;
  }
  if (v3 >= INFINITY)
  {
    float v12 = *(float *)(a1 + 164);
    float v13 = *(float *)(a1 + 168);
  }
  else
  {
    if (v3 > -INFINITY)
    {
      float v4 = frexpf(*a2, &v34);
      int v5 = v34;
      if (v34) {
        float v6 = v4 + v4;
      }
      else {
        float v6 = v4;
      }
      float v35 = 0.0;
      float v7 = ldexpf(v6, *(_DWORD *)(a1 + 172));
      float v8 = modff(fabsf(v7), &v35);
      int v9 = (int)v35 & 0x1F;
      if ((int)v35 <= 0) {
        int v9 = -(-(int)v35 & 0x1F);
      }
      if (v6 >= 0.0)
      {
        uint64_t v20 = a1 + 4 * v9;
        float v11 = *(float *)(v20 + 24);
        float v10 = *(float *)(v20 + 28);
      }
      else
      {
        float v10 = *(float *)(a1 + 24 + 4 * (31 - v9));
        float v11 = *(float *)(a1 + 24 + 4 * (32 - v9));
      }
      float v21 = v10 - v11;
      float v22 = 0.0;
      if (v21 != 0.0)
      {
        int __e = 0;
        long double v23 = frexp(v21, &__e);
        double v24 = ldexp(v23, 11);
        float v22 = ldexp(round(v24), __e - 11);
      }
      float v25 = v8 * v22;
      float v26 = 0.0;
      float v27 = 0.0;
      if (v25 != 0.0)
      {
        int __e = 0;
        long double v28 = frexp(v25, &__e);
        double v29 = ldexp(v28, 11);
        float v27 = ldexp(round(v29), __e - 11);
      }
      float v30 = v11 + v27;
      if (v30 != 0.0)
      {
        int __e = 0;
        long double v31 = frexp(v30, &__e);
        double v32 = ldexp(v31, 11);
        float v26 = ldexp(round(v32), __e - 11);
      }
      if (v5 >= 0) {
        signed int v33 = v5 & 0xFFFFFFFE;
      }
      else {
        signed int v33 = (v5 & 0xFFFFFFFE) + 1;
      }
      ldexpf(v26, v33 >> 1);
      return;
    }
    float v12 = *(float *)(a1 + 156);
    float v13 = *(float *)(a1 + 160);
  }
  float v14 = v3 * v12;
  float v15 = 0.0;
  if (v14 != 0.0)
  {
    int __e = 0;
    long double v16 = frexp(v14, &__e);
    double v17 = ldexp(v16, 11);
    float v15 = ldexp(round(v17), __e - 11);
  }
  if ((float)(v13 + v15) != 0.0)
  {
    int __e = 0;
    long double v18 = frexp((float)(v13 + v15), &__e);
    double v19 = ldexp(v18, 11);
    ldexp(round(v19), __e - 11);
  }
}

uint64_t std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::SqrtFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::SqrtFunction(float)::$_0>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::SqrtFunction(float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::SqrtFunction(float)::$_0>,float ()(float)>::target_type()
{
}

void std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::LreluFunction(float,float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::LreluFunction(float,float)::$_0>,float ()(float)>::~__func()
{
}

__n128 std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::LreluFunction(float,float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::LreluFunction(float,float)::$_0>,float ()(float)>::__clone(uint64_t a1)
{
  long long v2 = (char *)operator new(0xB8uLL);
  *(void *)long long v2 = &unk_26C319708;
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v2 + 152) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(v2 + 164) = *(_OWORD *)(a1 + 164);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::LreluFunction(float,float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::LreluFunction(float,float)::$_0>,float ()(float)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C319708;
  long long v2 = *(_OWORD *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  long long v4 = *(_OWORD *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 72);
  long long v6 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v6;
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  __n128 result = *(__n128 *)(a1 + 120);
  long long v8 = *(_OWORD *)(a1 + 136);
  long long v9 = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 164) = *(_OWORD *)(a1 + 164);
  *(_OWORD *)(a2 + 152) = v9;
  *(_OWORD *)(a2 + 136) = v8;
  *(__n128 *)(a2 + 120) = result;
  return result;
}

float std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::LreluFunction(float,float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::LreluFunction(float,float)::$_0>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
}

uint64_t std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::LreluFunction(float,float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::LreluFunction(float,float)::$_0>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ANEMachineIR::Interpreter::anonymous namespace'::LreluFunction(float,float)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::anonymous namespace'::LreluFunction(float,float)::$_0>,float ()(float)>::target_type()
{
}

void std::__function::__func<MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction(MIL::IROperation const&,MIL::ANEMachineIR::Interpreter::InterpretStatus *)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction(MIL::IROperation const&,MIL::ANEMachineIR::Interpreter::InterpretStatus *)::$_0>,float ()(float)>::~__func()
{
}

void *std::__function::__func<MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction(MIL::IROperation const&,MIL::ANEMachineIR::Interpreter::InterpretStatus *)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction(MIL::IROperation const&,MIL::ANEMachineIR::Interpreter::InterpretStatus *)::$_0>,float ()(float)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26C319788;
  return result;
}

void std::__function::__func<MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction(MIL::IROperation const&,MIL::ANEMachineIR::Interpreter::InterpretStatus *)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction(MIL::IROperation const&,MIL::ANEMachineIR::Interpreter::InterpretStatus *)::$_0>,float ()(float)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C319788;
}

float std::__function::__func<MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction(MIL::IROperation const&,MIL::ANEMachineIR::Interpreter::InterpretStatus *)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction(MIL::IROperation const&,MIL::ANEMachineIR::Interpreter::InterpretStatus *)::$_0>,float ()(float)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(float *)a2;
}

uint64_t std::__function::__func<MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction(MIL::IROperation const&,MIL::ANEMachineIR::Interpreter::InterpretStatus *)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction(MIL::IROperation const&,MIL::ANEMachineIR::Interpreter::InterpretStatus *)::$_0>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction(MIL::IROperation const&,MIL::ANEMachineIR::Interpreter::InterpretStatus *)::$_0,std::allocator<MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction(MIL::IROperation const&,MIL::ANEMachineIR::Interpreter::InterpretStatus *)::$_0>,float ()(float)>::target_type()
{
}

void ANEMachineIR::H2022::BaseNePool::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210BC72C8(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v1 - 128));
  unint64_t v3 = STACK[0x2A0];
  STACK[0x2A0] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x298]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x298]);
  }
  long long v4 = (void *)STACK[0x278];
  if (STACK[0x278])
  {
    STACK[0x280] = (unint64_t)v4;
    operator delete(v4);
  }
  long long v5 = (void *)STACK[0x300];
  if (STACK[0x300])
  {
    STACK[0x308] = (unint64_t)v5;
    operator delete(v5);
  }
  long long v6 = *(void **)(v1 - 176);
  if (v6)
  {
    *(void *)(v1 - 168) = v6;
    operator delete(v6);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2A8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v1 - 248), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::NeAvgPool::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210BC95BC(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v1 - 112));
  unint64_t v3 = STACK[0x2A0];
  STACK[0x2A0] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x298]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x298]);
  }
  long long v4 = (void *)STACK[0x278];
  if (STACK[0x278])
  {
    STACK[0x280] = (unint64_t)v4;
    operator delete(v4);
  }
  long long v5 = (void *)STACK[0x350];
  if (STACK[0x350])
  {
    STACK[0x358] = (unint64_t)v5;
    operator delete(v5);
  }
  long long v6 = *(void **)(v1 - 160);
  if (v6)
  {
    *(void *)(v1 - 152) = v6;
    operator delete(v6);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2A8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v1 - 232), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::NeMaxPool::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2022::Validators::ValidateNeMaxPool;
  v2[3] = v2;
  ANEMachineIR::H2022::BaseNePool::Make();
}

void sub_210BC9F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::NeMinPool::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2022::Validators::ValidateNeMinPool;
  v2[3] = v2;
  ANEMachineIR::H2022::BaseNePool::Make();
}

void sub_210BCA030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::BasePePool::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210BCB678(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v1 - 128));
  unint64_t v3 = STACK[0x2A0];
  STACK[0x2A0] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x298]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x298]);
  }
  long long v4 = (void *)STACK[0x278];
  if (STACK[0x278])
  {
    STACK[0x280] = (unint64_t)v4;
    operator delete(v4);
  }
  long long v5 = (void *)STACK[0x2F0];
  if (STACK[0x2F0])
  {
    STACK[0x2F8] = (unint64_t)v5;
    operator delete(v5);
  }
  long long v6 = *(void **)(v1 - 176);
  if (v6)
  {
    *(void *)(v1 - 168) = v6;
    operator delete(v6);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2A8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v1 - 248), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeAvgPool::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210BCD5DC(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)(v1 - 112));
  unint64_t v3 = STACK[0x2A0];
  STACK[0x2A0] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x298]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x298]);
  }
  long long v4 = (void *)STACK[0x278];
  if (STACK[0x278])
  {
    STACK[0x280] = (unint64_t)v4;
    operator delete(v4);
  }
  long long v5 = (void *)STACK[0x310];
  if (STACK[0x310])
  {
    STACK[0x318] = (unint64_t)v5;
    operator delete(v5);
  }
  long long v6 = *(void **)(v1 - 160);
  if (v6)
  {
    *(void *)(v1 - 152) = v6;
    operator delete(v6);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x2A8], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)(v1 - 232), 0);
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeMaxPool::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2022::Validators::ValidatePeMaxPool;
  v2[3] = v2;
  ANEMachineIR::H2022::BasePePool::Make();
}

void sub_210BCDEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2022::PeMinPool::Make(uint64_t a1, void *a2)
{
  v2[4] = *MEMORY[0x263EF8340];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v2[0] = &unk_26C315638;
  v2[1] = ANEMachineIR::H2022::Validators::ValidatePeMinPool;
  v2[3] = v2;
  ANEMachineIR::H2022::BasePePool::Make();
}

void sub_210BCDF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ANEMachineIR::H2020::NeConv::Make()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  operator new();
}

void sub_210BD13FC(_Unwind_Exception *a1)
{
  std::__split_buffer<std::shared_ptr<MIL::IRParameter>>::~__split_buffer((void **)&STACK[0x6B8]);
  unint64_t v3 = STACK[0x548];
  STACK[0x548] = 0;
  if (v3) {
    (*(void (**)(unint64_t))(*(void *)v3 + 8))(v3);
  }
  if (STACK[0x540]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x540]);
  }
  long long v4 = (void *)STACK[0x520];
  if (STACK[0x520])
  {
    STACK[0x528] = (unint64_t)v4;
    operator delete(v4);
  }
  long long v5 = (void *)STACK[0x688];
  if (STACK[0x688])
  {
    STACK[0x690] = (unint64_t)v5;
    operator delete(v5);
  }
  long long v6 = *(void **)(v1 - 112);
  if (v6)
  {
    *(void *)(v1 - 104) = v6;
    operator delete(v6);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((void ***)&STACK[0x550], 0);
  std::unique_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::reset[abi:ne180100]((uint64_t *)&STACK[0x6B0], 0);
  _Unwind_Resume(a1);
}

void sub_210BD24A8()
{
}

void MIL::ANEMachineIR::Interpreter::NeBatchMatmulCpu::Run(MIL::IROperation *a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  v249[4] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  uint64_t InterpretedTensorValue = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&__p);
  if (SHIBYTE(v213) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "y");
  uint64_t v7 = MIL::ANEMachineIR::Interpreter::TryGetInterpretedTensorValue(a2, (uint64_t)a1, (uint64_t)&__p);
  if (SHIBYTE(v213) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "acc_left_shift");
  uint64_t ParameterValue = MIL::IROperation::TryGetParameterValue();
  if (ParameterValue
    && (*(uint64_t (**)(uint64_t))(*(void *)ParameterValue + 40))(ParameterValue)
    && (long long v9 = (char *)MEMORY[0x21667B840]()) != 0)
  {
    char v10 = *v9;
  }
  else
  {
    char v10 = 0;
  }
  if (SHIBYTE(v213) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "post_right_shift");
  uint64_t v11 = MIL::IROperation::TryGetParameterValue();
  if (v11
    && (*(uint64_t (**)(uint64_t))(*(void *)v11 + 40))(v11)
    && (float v12 = (char *)MEMORY[0x21667B840]()) != 0)
  {
    char v13 = *v12;
  }
  else
  {
    char v13 = 0;
  }
  if (SHIBYTE(v213) < 0) {
    operator delete(__p);
  }
  float v14 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&__p, "post_scale");
  __int16 v15 = MIL::Fp16::FromFloat(v14, 1.0);
  uint64_t v16 = MIL::IROperation::TryGetParameterValue();
  if (v16)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v16 + 40))(v16))
    {
      double v17 = (__int16 *)MEMORY[0x21667B820]();
      if (v17) {
        __int16 v15 = *v17;
      }
    }
  }
  LOWORD(v249[0]) = v15;
  MIL::Fp16::GetFloat((MIL::Fp16 *)v249);
  int v19 = v18;
  uint64_t v20 = (float *)operator new(4uLL);
  *(_DWORD *)uint64_t v20 = v19;
  v220[1] = v20 + 1;
  v220[2] = v20 + 1;
  v220[0] = v20;
  if ((SHIBYTE(v213) & 0x80000000) == 0)
  {
    if (InterpretedTensorValue) {
      goto LABEL_25;
    }
LABEL_39:
    int v42 = "No value for x";
LABEL_53:
    *(_DWORD *)a3 = 2;
    std::string::basic_string[abi:ne180100]<0>((void *)(a3 + 8), v42);
LABEL_216:
    operator delete(v20);
    return;
  }
  operator delete(__p);
  if (!InterpretedTensorValue) {
    goto LABEL_39;
  }
LABEL_25:
  if (!v7)
  {
    int v42 = "No value for y";
    goto LABEL_53;
  }
  char v207 = v13;
  uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)InterpretedTensorValue + 32))(InterpretedTensorValue);
  int v22 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 88))(v21);
  uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(v7);
  int v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 88))(v23);
  char v206 = v10;
  uint64_t v208 = a3;
  uint64_t OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  float v26 = (ANEMachineIR::Utils *)MIL::IRValueType::AsTensorType(OutputType);
  int v27 = (*(uint64_t (**)(ANEMachineIR::Utils *))(*(void *)v26 + 88))(v26);
  size_t v28 = (*(uint64_t (**)(ANEMachineIR::Utils *))(*(void *)v26 + 16))(v26);
  double v29 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(void *)InterpretedTensorValue + 32))(InterpretedTensorValue);
  ANEMachineIR::Utils::GetStaticTensorShape(v29, v30, (uint64_t)&v218);
  long double v31 = (ANEMachineIR::Utils *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(v7);
  ANEMachineIR::Utils::GetStaticTensorShape(v31, v32, (uint64_t)&v216);
  ANEMachineIR::Utils::GetStaticTensorShape(v26, v33, (uint64_t)v215);
  if (v219 == v218 || (unint64_t)(v217 - (unsigned char *)v216) <= 8) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v205 = *(v219 - 1);
  uint64_t v34 = *((void *)v217 - 2);
  float v35 = (MIL::Fp16 *)std::string::basic_string[abi:ne180100]<0>(&__p, "matrix_vector_bias");
  __int16 v36 = MIL::Fp16::FromFloat(v35, 1.0);
  uint64_t v37 = MIL::IROperation::TryGetParameterValue();
  if (v37)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v37 + 40))(v37))
    {
      float v38 = (__int16 *)MEMORY[0x21667B820]();
      if (v38) {
        __int16 v36 = *v38;
      }
    }
  }
  if (SHIBYTE(v213) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "matrix_vector_bias");
  uint64_t v39 = MIL::IROperation::TryGetParameterValue();
  if (v39
    && (*(uint64_t (**)(uint64_t))(*(void *)v39 + 40))(v39)
    && (int v40 = (char *)MEMORY[0x21667B870]()) != 0)
  {
    char v41 = *v40;
  }
  else
  {
    char v41 = 1;
  }
  unsigned __int8 v203 = v41;
  if (SHIBYTE(v213) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "matrix_vector_bias");
  uint64_t v43 = MIL::IROperation::TryGetParameterValue();
  uint64_t v204 = (uint64_t)a2;
  if (v43
    && (*(uint64_t (**)(uint64_t))(*(void *)v43 + 40))(v43)
    && (float v44 = (char *)MEMORY[0x21667B840]()) != 0)
  {
    char v45 = *v44;
  }
  else
  {
    char v45 = 1;
  }
  if (SHIBYTE(v213) < 0) {
    operator delete(__p);
  }
  long long v213 = 0uLL;
  uint64_t v214 = 0;
  MIL::ANEMachineIR::Interpreter::GetCpuNeActivationFunction((uint64_t)a1, (uint64_t)&__p, (uint64_t)v249);
  if (__p)
  {
    *(_DWORD *)uint64_t v208 = __p;
    *(_OWORD *)(v208 + 8) = v213;
    *(void *)(v208 + 24) = v214;
    long long v213 = 0uLL;
    uint64_t v214 = 0;
    goto LABEL_207;
  }
  if (v22 == 14)
  {
    switch(v24)
    {
      case 14:
        switch(v27)
        {
          case 14:
            uint64_t Data = MIL::IRTensorValue::GetDataView<unsigned char>();
            uint64_t v47 = v208;
            uint64_t v181 = MIL::IRTensorValue::GetDataView<unsigned char>();
            std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v235, (uint64_t)v249);
            std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v235);
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v209, a1);
            std::vector<int> v182 = v209;
            if (v210 == v209) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            int v183 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v183);
            MIL::IRTensorValueType::MakeUInt8Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v204, v182, (uint64_t *)&v221);
            uint64_t v184 = v221;
            uint64_t v221 = 0;
            if (v184) {
              (*((void (**)(void **))*v184 + 1))(v184);
            }
            goto LABEL_204;
          case 9:
            uint64_t v146 = MIL::IRTensorValue::GetDataView<unsigned char>();
            uint64_t v47 = v208;
            uint64_t v147 = MIL::IRTensorValue::GetDataView<unsigned char>();
            std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v234, (uint64_t)v249);
            std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v234);
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v209, a1);
            unint64_t v148 = v209;
            if (v210 == v209) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            unint64_t v149 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v149);
            MIL::IRTensorValueType::MakeInt8Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v204, v148, (uint64_t *)&v221);
            unint64_t v150 = v221;
            uint64_t v221 = 0;
            if (v150) {
              (*((void (**)(void **))*v150 + 1))(v150);
            }
            goto LABEL_204;
          case 4:
            uint64_t v47 = v208;
            uint64_t v90 = MIL::IRTensorValue::GetDataView<unsigned char>();
            uint64_t v91 = MIL::IRTensorValue::GetDataView<unsigned char>();
            std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v236, (uint64_t)v249);
            std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v236);
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v209, a1);
            uint64_t v92 = v209;
            if (v210 == v209) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            __int16 v93 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v93);
            MIL::IRTensorValueType::MakeFloat16Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v204, v92, (uint64_t *)&v221);
            __int16 v94 = v221;
            uint64_t v221 = 0;
            if (v94) {
              (*((void (**)(void **))*v94 + 1))(v94);
            }
            goto LABEL_204;
        }
        break;
      case 9:
        switch(v27)
        {
          case 14:
            uint64_t v140 = v34 + 1;
            uint64_t v141 = MIL::IRTensorValue::GetDataView<unsigned char>();
            uint64_t v67 = v208;
            uint64_t v142 = MIL::IRTensorValue::GetDataView<signed char>();
            std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v232, (uint64_t)v249);
            std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v232);
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v209, a1);
            std::vector<int> v143 = v209;
            if (v210 == v209) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t v144 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v144);
            MIL::IRTensorValueType::MakeUInt8Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v204, v143, (uint64_t *)&v221);
            uint64_t v145 = v221;
            uint64_t v221 = 0;
            if (v145) {
              (*((void (**)(void **))*v145 + 1))(v145);
            }
            goto LABEL_180;
          case 9:
            uint64_t v117 = v34 + 1;
            uint64_t v118 = MIL::IRTensorValue::GetDataView<unsigned char>();
            uint64_t v67 = v208;
            uint64_t v119 = MIL::IRTensorValue::GetDataView<signed char>();
            std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v231, (uint64_t)v249);
            std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v231);
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v209, a1);
            uint64_t v120 = v209;
            if (v210 == v209) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t v121 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v121);
            MIL::IRTensorValueType::MakeInt8Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v204, v120, (uint64_t *)&v221);
            uint64_t v122 = v221;
            uint64_t v221 = 0;
            if (v122) {
              (*((void (**)(void **))*v122 + 1))(v122);
            }
            goto LABEL_180;
          case 4:
            uint64_t v78 = v34 + 1;
            uint64_t v67 = v208;
            uint64_t v79 = MIL::IRTensorValue::GetDataView<unsigned char>();
            uint64_t v80 = MIL::IRTensorValue::GetDataView<signed char>();
            std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v233, (uint64_t)v249);
            std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v233);
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v209, a1);
            __int16 v81 = v209;
            if (v210 == v209) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t v82 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v82);
            MIL::IRTensorValueType::MakeFloat16Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v204, v81, (uint64_t *)&v221);
            int v83 = v221;
            uint64_t v221 = 0;
            if (v83) {
              (*((void (**)(void **))*v83 + 1))(v83);
            }
            goto LABEL_180;
        }
        break;
      case 4:
        switch(v27)
        {
          case 14:
            uint64_t v185 = v34 + 1;
            uint64_t v186 = MIL::IRTensorValue::GetDataView<unsigned char>();
            uint64_t v47 = v208;
            uint64_t v187 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
            std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v238, (uint64_t)v249);
            std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v238);
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v209, a1);
            unint64_t v188 = v209;
            if (v210 == v209) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            unint64_t v189 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v189);
            MIL::IRTensorValueType::MakeUInt8Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v204, v188, (uint64_t *)&v221);
            unint64_t v190 = v221;
            uint64_t v221 = 0;
            if (v190) {
              (*((void (**)(void **))*v190 + 1))(v190);
            }
            goto LABEL_204;
          case 9:
            uint64_t v157 = v34 + 1;
            uint64_t v158 = MIL::IRTensorValue::GetDataView<unsigned char>();
            uint64_t v47 = v208;
            uint64_t v159 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
            std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v237, (uint64_t)v249);
            std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v237);
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v209, a1);
            uint64_t v160 = v209;
            if (v210 == v209) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            unint64_t v161 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v161);
            MIL::IRTensorValueType::MakeInt8Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v204, v160, (uint64_t *)&v221);
            uint64_t v162 = v221;
            uint64_t v221 = 0;
            if (v162) {
              (*((void (**)(void **))*v162 + 1))(v162);
            }
            goto LABEL_204;
          case 4:
            uint64_t v59 = v34 + 1;
            uint64_t v47 = v208;
            uint64_t v60 = MIL::IRTensorValue::GetDataView<unsigned char>();
            uint64_t v61 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
            std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v239, (uint64_t)v249);
            std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v239);
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v209, a1);
            int v62 = v209;
            if (v210 == v209) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            float v63 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v63);
            MIL::IRTensorValueType::MakeFloat16Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v204, v62, (uint64_t *)&v221);
            float v64 = v221;
            uint64_t v221 = 0;
            if (v64) {
              (*((void (**)(void **))*v64 + 1))(v64);
            }
            goto LABEL_204;
        }
        break;
      default:
        goto LABEL_88;
    }
    goto LABEL_131;
  }
  if (v22 == 9)
  {
    switch(v24)
    {
      case 14:
        switch(v27)
        {
          case 14:
            uint64_t v135 = MIL::IRTensorValue::GetDataView<signed char>();
            uint64_t v47 = v208;
            uint64_t v136 = MIL::IRTensorValue::GetDataView<unsigned char>();
            std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v226, (uint64_t)v249);
            std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v226);
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v209, a1);
            std::string v137 = v209;
            if (v210 == v209) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t v138 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v138);
            MIL::IRTensorValueType::MakeUInt8Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v204, v137, (uint64_t *)&v221);
            unint64_t v139 = v221;
            uint64_t v221 = 0;
            if (v139) {
              (*((void (**)(void **))*v139 + 1))(v139);
            }
            goto LABEL_204;
          case 9:
            uint64_t v112 = MIL::IRTensorValue::GetDataView<signed char>();
            uint64_t v47 = v208;
            uint64_t v113 = MIL::IRTensorValue::GetDataView<unsigned char>();
            std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v225, (uint64_t)v249);
            std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v225);
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v209, a1);
            uint64_t v114 = v209;
            if (v210 == v209) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t v115 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v115);
            MIL::IRTensorValueType::MakeInt8Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v204, v114, (uint64_t *)&v221);
            uint64_t v116 = v221;
            uint64_t v221 = 0;
            if (v116) {
              (*((void (**)(void **))*v116 + 1))(v116);
            }
            goto LABEL_204;
          case 4:
            uint64_t v47 = v208;
            uint64_t v73 = MIL::IRTensorValue::GetDataView<signed char>();
            uint64_t v74 = MIL::IRTensorValue::GetDataView<unsigned char>();
            std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v227, (uint64_t)v249);
            std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v227);
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v209, a1);
            uint64_t v75 = v209;
            if (v210 == v209) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t v76 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v76);
            MIL::IRTensorValueType::MakeFloat16Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v204, v75, (uint64_t *)&v221);
            unsigned int v77 = v221;
            uint64_t v221 = 0;
            if (v77) {
              (*((void (**)(void **))*v77 + 1))(v77);
            }
            goto LABEL_204;
        }
        break;
      case 9:
        switch(v27)
        {
          case 14:
            uint64_t v106 = v34 + 1;
            uint64_t v107 = MIL::IRTensorValue::GetDataView<signed char>();
            uint64_t v67 = v208;
            uint64_t v108 = MIL::IRTensorValue::GetDataView<signed char>();
            std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v223, (uint64_t)v249);
            std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v223);
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v209, a1);
            unint64_t v109 = v209;
            if (v210 == v209) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            unint64_t v110 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v110);
            MIL::IRTensorValueType::MakeUInt8Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v204, v109, (uint64_t *)&v221);
            uint64_t v111 = v221;
            uint64_t v221 = 0;
            if (v111) {
              (*((void (**)(void **))*v111 + 1))(v111);
            }
            goto LABEL_180;
          case 9:
            uint64_t v100 = v34 + 1;
            uint64_t v101 = MIL::IRTensorValue::GetDataView<signed char>();
            uint64_t v67 = v208;
            uint64_t v102 = MIL::IRTensorValue::GetDataView<signed char>();
            std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v222, (uint64_t)v249);
            std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v222);
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v209, a1);
            unint64_t v103 = v209;
            if (v210 == v209) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t v104 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v104);
            MIL::IRTensorValueType::MakeInt8Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v204, v103, (uint64_t *)&v221);
            unint64_t v105 = v221;
            uint64_t v221 = 0;
            if (v105) {
              (*((void (**)(void **))*v105 + 1))(v105);
            }
            goto LABEL_180;
          case 4:
            uint64_t v66 = v34 + 1;
            uint64_t v67 = v208;
            uint64_t v68 = MIL::IRTensorValue::GetDataView<signed char>();
            uint64_t v69 = MIL::IRTensorValue::GetDataView<signed char>();
            std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v224, (uint64_t)v249);
            std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v224);
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v209, a1);
            double v70 = v209;
            if (v210 == v209) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            float v71 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v71);
            MIL::IRTensorValueType::MakeFloat16Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v204, v70, (uint64_t *)&v221);
            int v72 = v221;
            uint64_t v221 = 0;
            if (v72) {
              (*((void (**)(void **))*v72 + 1))(v72);
            }
            goto LABEL_180;
        }
        break;
      case 4:
        switch(v27)
        {
          case 14:
            uint64_t v151 = v34 + 1;
            uint64_t v152 = MIL::IRTensorValue::GetDataView<signed char>();
            uint64_t v47 = v208;
            uint64_t v153 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
            std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v229, (uint64_t)v249);
            std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v229);
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v209, a1);
            std::string v154 = v209;
            if (v210 == v209) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            long long v155 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v155);
            MIL::IRTensorValueType::MakeUInt8Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v204, v154, (uint64_t *)&v221);
            uint64_t v156 = v221;
            uint64_t v221 = 0;
            if (v156) {
              (*((void (**)(void **))*v156 + 1))(v156);
            }
            goto LABEL_204;
          case 9:
            uint64_t v123 = v34 + 1;
            uint64_t v124 = MIL::IRTensorValue::GetDataView<signed char>();
            uint64_t v47 = v208;
            uint64_t v125 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
            std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v228, (uint64_t)v249);
            std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v228);
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v209, a1);
            int v126 = v209;
            if (v210 == v209) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t v127 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v127);
            MIL::IRTensorValueType::MakeInt8Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v204, v126, (uint64_t *)&v221);
            unint64_t v128 = v221;
            uint64_t v221 = 0;
            if (v128) {
              (*((void (**)(void **))*v128 + 1))(v128);
            }
            goto LABEL_204;
          case 4:
            uint64_t v53 = v34 + 1;
            uint64_t v47 = v208;
            uint64_t v54 = MIL::IRTensorValue::GetDataView<signed char>();
            uint64_t v55 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
            std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v230, (uint64_t)v249);
            std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v230);
            (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v209, a1);
            uint64_t v56 = v209;
            if (v210 == v209) {
              std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
            }
            int v57 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
            MIL::IRValueType::AsTensorType(v57);
            MIL::IRTensorValueType::MakeFloat16Value();
            MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v204, v56, (uint64_t *)&v221);
            float v58 = v221;
            uint64_t v221 = 0;
            if (v58) {
              (*((void (**)(void **))*v58 + 1))(v58);
            }
            goto LABEL_204;
        }
        break;
      default:
        goto LABEL_88;
    }
    goto LABEL_131;
  }
  if (v22 != 4)
  {
    int v65 = "Unimplemented x dtype";
LABEL_132:
    *(_DWORD *)uint64_t v208 = 3;
    std::string::basic_string[abi:ne180100]<0>((void *)(v208 + 8), v65);
    goto LABEL_207;
  }
  if (v24 == 14)
  {
    switch(v27)
    {
      case 14:
        uint64_t v191 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        uint64_t v47 = v208;
        uint64_t v192 = MIL::IRTensorValue::GetDataView<unsigned char>();
        std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v244, (uint64_t)v249);
        std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v244);
        (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v209, a1);
        unint64_t v193 = v209;
        if (v210 == v209) {
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        unint64_t v194 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
        MIL::IRValueType::AsTensorType(v194);
        MIL::IRTensorValueType::MakeUInt8Value();
        MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v204, v193, (uint64_t *)&v221);
        uint64_t v195 = v221;
        uint64_t v221 = 0;
        if (v195) {
          (*((void (**)(void **))*v195 + 1))(v195);
        }
        goto LABEL_204;
      case 9:
        uint64_t v169 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        uint64_t v47 = v208;
        uint64_t v170 = MIL::IRTensorValue::GetDataView<unsigned char>();
        std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v243, (uint64_t)v249);
        std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v243);
        (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v209, a1);
        int v171 = v209;
        if (v210 == v209) {
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v172 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
        MIL::IRValueType::AsTensorType(v172);
        MIL::IRTensorValueType::MakeInt8Value();
        MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v204, v171, (uint64_t *)&v221);
        uint64_t v173 = v221;
        uint64_t v221 = 0;
        if (v173) {
          (*((void (**)(void **))*v173 + 1))(v173);
        }
        goto LABEL_204;
      case 4:
        uint64_t v47 = v208;
        uint64_t v95 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        uint64_t v96 = MIL::IRTensorValue::GetDataView<unsigned char>();
        std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v245, (uint64_t)v249);
        std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v245);
        (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v209, a1);
        uint64_t v97 = v209;
        if (v210 == v209) {
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        unint64_t v98 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
        MIL::IRValueType::AsTensorType(v98);
        MIL::IRTensorValueType::MakeFloat16Value();
        MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v204, v97, (uint64_t *)&v221);
        std::string v99 = v221;
        uint64_t v221 = 0;
        if (v99) {
          (*((void (**)(void **))*v99 + 1))(v99);
        }
        goto LABEL_204;
    }
    goto LABEL_131;
  }
  if (v24 == 9)
  {
    switch(v27)
    {
      case 14:
        uint64_t v163 = v34 + 1;
        uint64_t v164 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        uint64_t v67 = v208;
        uint64_t v165 = MIL::IRTensorValue::GetDataView<signed char>();
        std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v241, (uint64_t)v249);
        std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v241);
        (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v209, a1);
        int v166 = v209;
        if (v210 == v209) {
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v167 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
        MIL::IRValueType::AsTensorType(v167);
        MIL::IRTensorValueType::MakeUInt8Value();
        MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v204, v166, (uint64_t *)&v221);
        unint64_t v168 = v221;
        uint64_t v221 = 0;
        if (v168) {
          (*((void (**)(void **))*v168 + 1))(v168);
        }
        goto LABEL_180;
      case 9:
        uint64_t v129 = v34 + 1;
        uint64_t v130 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        uint64_t v67 = v208;
        uint64_t v131 = MIL::IRTensorValue::GetDataView<signed char>();
        std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v240, (uint64_t)v249);
        std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v240);
        (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v209, a1);
        char v132 = v209;
        if (v210 == v209) {
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v133 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
        MIL::IRValueType::AsTensorType(v133);
        MIL::IRTensorValueType::MakeInt8Value();
        MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v204, v132, (uint64_t *)&v221);
        std::string::size_type v134 = v221;
        uint64_t v221 = 0;
        if (v134) {
          (*((void (**)(void **))*v134 + 1))(v134);
        }
        goto LABEL_180;
      case 4:
        uint64_t v84 = v34 + 1;
        uint64_t v67 = v208;
        uint64_t v85 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
        uint64_t v86 = MIL::IRTensorValue::GetDataView<signed char>();
        std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v242, (uint64_t)v249);
        std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v242);
        (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v209, a1);
        long long v87 = v209;
        if (v210 == v209) {
          std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
        }
        char v88 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
        MIL::IRValueType::AsTensorType(v88);
        MIL::IRTensorValueType::MakeFloat16Value();
        MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v204, v87, (uint64_t *)&v221);
        int v89 = v221;
        uint64_t v221 = 0;
        if (v89) {
          (*((void (**)(void **))*v89 + 1))(v89);
        }
LABEL_180:
        uint64_t v221 = (void **)&v209;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v221);
        *(_DWORD *)uint64_t v67 = 0;
        std::string::basic_string[abi:ne180100]<0>((void *)(v67 + 8), (char *)&unk_210C6BFE7);
        goto LABEL_205;
    }
LABEL_131:
    int v65 = "Unimplemented output dtype";
    goto LABEL_132;
  }
  if (v24 != 4)
  {
LABEL_88:
    int v65 = "Unimplemented y dtype";
    goto LABEL_132;
  }
  if (v27 == 14)
  {
    uint64_t v196 = v34 + 1;
    uint64_t v197 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
    uint64_t v47 = v208;
    uint64_t v198 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
    std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v247, (uint64_t)v249);
    std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v247);
    (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v209, a1);
    uint64_t v199 = v209;
    if (v210 == v209) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v200 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
    MIL::IRValueType::AsTensorType(v200);
    MIL::IRTensorValueType::MakeUInt8Value();
    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v204, v199, (uint64_t *)&v221);
    std::string v201 = v221;
    uint64_t v221 = 0;
    if (v201) {
      (*((void (**)(void **))*v201 + 1))(v201);
    }
    goto LABEL_204;
  }
  if (v27 == 9)
  {
    uint64_t v174 = v34 + 1;
    uint64_t v175 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
    uint64_t v47 = v208;
    uint64_t v176 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
    std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v246, (uint64_t)v249);
    std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v246);
    (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v209, a1);
    int v177 = v209;
    if (v210 == v209) {
      std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v178 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
    MIL::IRValueType::AsTensorType(v178);
    MIL::IRTensorValueType::MakeInt8Value();
    MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v204, v177, (uint64_t *)&v221);
    unint64_t v179 = v221;
    uint64_t v221 = 0;
    if (v179) {
      (*((void (**)(void **))*v179 + 1))(v179);
    }
    goto LABEL_204;
  }
  if (v27 != 4) {
    goto LABEL_131;
  }
  uint64_t v46 = v34 + 1;
  uint64_t v47 = v208;
  uint64_t v48 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
  uint64_t v49 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
  std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)v248, (uint64_t)v249);
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v248);
  (*(void (**)(unsigned __int8 **__return_ptr, MIL::IROperation *))(*(void *)a1 + 200))(&v209, a1);
  double v50 = v209;
  if (v210 == v209) {
    std::vector<unsigned long long>::__throw_out_of_range[abi:ne180100]();
  }
  long long v51 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a1);
  MIL::IRValueType::AsTensorType(v51);
  MIL::IRTensorValueType::MakeFloat16Value();
  MIL::ANEMachineIR::Interpreter::ComputedValueStore::InsertValue(v204, v50, (uint64_t *)&v221);
  float v52 = v221;
  uint64_t v221 = 0;
  if (v52) {
    (*((void (**)(void **))*v52 + 1))(v52);
  }
LABEL_204:
  uint64_t v221 = (void **)&v209;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v221);
  *(_DWORD *)uint64_t v47 = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(v47 + 8), (char *)&unk_210C6BFE7);
LABEL_205:
  if (v211[0])
  {
    v211[1] = v211[0];
    operator delete(v211[0]);
  }
LABEL_207:
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v249);
  if (SHIBYTE(v214) < 0) {
    operator delete((void *)v213);
  }
  if (v215[0])
  {
    v215[1] = v215[0];
    operator delete(v215[0]);
  }
  if (v216)
  {
    uint64_t v217 = v216;
    operator delete(v216);
  }
  if (v218)
  {
    v219 = v218;
    operator delete(v218);
  }
  uint64_t v20 = v220[0];
  if (v220[0]) {
    goto LABEL_216;
  }
}

void sub_210BD4F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42)
{
  if (__p) {
    operator delete(__p);
  }
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100]((void *)(v42 - 144));
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a33) {
    operator delete(a33);
  }
  if (a36) {
    operator delete(a36);
  }
  if (a39) {
    operator delete(a39);
  }
  if (a42) {
    operator delete(a42);
  }
  _Unwind_Resume(a1);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<MIL::Fp16,MIL::Fp16,MIL::Fp16>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, void *a9@<X8>, float **a10, char a11, int a12, __int16 a13, uint64_t a14)
{
  v99[2] = *MEMORY[0x263EF8340];
  float v14 = *a3;
  uint64_t v15 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v15 - 17) >= 0x1F) {
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  }
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F) {
  uint64_t v18 = v15 >> 3;
  }
  if (v18 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v14 + 1), __src.i8, (char *)v99, 2);
  }
  else if (v18 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v14 + 1), __src.i8, &__src.i8[8], 1);
  }
  int v19 = *a4;
  uint64_t v20 = (a4[1] - *a4) >> 3;
  if (v20 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, (char *)v99, 2);
  }
  else if (v20 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v21 = *a5;
  uint64_t v22 = a5[1] - *a5;
  if (v22 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, (char *)v99, 2);
  }
  else if (v22 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a6);
  unint64_t v79 = (*a3)[1];
  unint64_t v80 = **a3;
  unint64_t v78 = (*a3)[2];
  unint64_t v93 = (*a3)[4];
  unint64_t v88 = *((void *)*a4 + 1);
  unint64_t v89 = *(void *)*a4;
  unint64_t v87 = *((void *)*a4 + 2);
  uint64_t v23 = **a5;
  uint64_t v75 = (*a5)[1];
  uint64_t v76 = (*a5)[2];
  unint64_t v24 = (*a5)[4];
  uint64_t v77 = (*a5)[3];
  double v25 = ldexp(1.0, a7 + 20);
  double v26 = exp2(-(double)(a7 + 20 + a8));
  int64x2_t __src = 0uLL;
  v99[0] = 0;
  unint64_t v83 = v24;
  std::vector<float>::reserve((void **)&__src, v24);
  float v28 = v26;
  double v29 = *a10;
  float v30 = a10[1];
  if ((char *)v30 - (char *)*a10 == 4)
  {
    __int16 v96 = MIL::Fp16::FromFloat(Float, *v29);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v96);
    *(float *)&int __e = v31 * v28;
    std::vector<float>::assign((char **)&__src, v83, &__e);
  }
  else
  {
    for (; v29 != v30; ++v29)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v29);
      uint64_t Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      float v33 = v32 * v28;
      uint64_t v34 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v99[0])
      {
        uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        uint64_t v36 = (__src.i64[1] - __src.i64[0]) >> 2;
        unint64_t v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = v99[0] - __src.i64[0];
        if ((v99[0] - __src.i64[0]) >> 1 > v37) {
          unint64_t v37 = v38 >> 1;
        }
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v37;
        }
        if (v39)
        {
          int v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v99, v39);
          uint64_t v34 = (MIL::Fp16 *)__src.i64[1];
          uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          int v40 = 0;
        }
        char v41 = (float *)&v40[4 * v36];
        float *v41 = v33;
        float v35 = v41 + 1;
        while (v34 != Float)
        {
          int v42 = *((_DWORD *)v34 - 1);
          uint64_t v34 = (MIL::Fp16 *)((char *)v34 - 4);
          *((_DWORD *)v41-- - 1) = v42;
        }
        __src.i64[0] = (uint64_t)v41;
        __src.i64[1] = (uint64_t)v35;
        v99[0] = &v40[4 * v39];
        if (Float) {
          operator delete(Float);
        }
      }
      else
      {
        *(float *)__src.i64[1] = v33;
        float v35 = (float *)((char *)v34 + 4);
      }
      __src.i64[1] = (uint64_t)v35;
    }
  }
  if (v23)
  {
    unint64_t v43 = 0;
    float v44 = v25;
    while (!v75)
    {
LABEL_81:
      if (++v43 == v23) {
        goto LABEL_82;
      }
    }
    unint64_t v45 = 0;
    while (!v76)
    {
LABEL_80:
      if (++v45 == v75) {
        goto LABEL_81;
      }
    }
    unint64_t v46 = 0;
    while (!v77)
    {
LABEL_79:
      if (++v46 == v76) {
        goto LABEL_80;
      }
    }
    uint64_t v94 = 0;
    while (!v83)
    {
LABEL_78:
      if (++v94 == v77) {
        goto LABEL_79;
      }
    }
    uint64_t v90 = 0;
    while (1)
    {
      if (v93)
      {
        uint64_t v47 = 0;
        int v48 = 0;
        int v85 = 0;
        do
        {
          __int16 v49 = *(_WORD *)(a1
                         + 2
          if (!a11 || (__int16 v50 = a13, v47 != *((void *)a4[1] - 2))) {
            __int16 v50 = *(_WORD *)(a2
          }
                           + 2
          if (!v48)
          {
            LOWORD(__e) = v49;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            float v52 = v51;
            LOWORD(__e) = v50;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            float v54 = v53;
            LOWORD(__e) = 0;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            float v56 = v54 - v55;
            int v57 = ilogbf(v52);
            if (v57 <= -14) {
              int v58 = -14;
            }
            else {
              int v58 = v57;
            }
            int v59 = ilogbf(v56);
            if (v59 <= -14) {
              int v60 = -14;
            }
            else {
              int v60 = v59;
            }
            if (v58 + a7 + v60 >= -20)
            {
              uint64_t v61 = (int)llroundf((float)(v52 * v56) * v44) + (uint64_t)v85;
              if (v61 <= 0x7FFFFFFF)
              {
                BOOL v62 = v61 < (uint64_t)0xFFFFFFFF80000000;
                if (v61 < (uint64_t)0xFFFFFFFF80000000) {
                  LODWORD(v61) = -8388608;
                }
                int v85 = v61;
                int v48 = 2 * v62;
              }
              else
              {
                int v48 = 1;
                int v85 = 2139095040;
              }
            }
            else
            {
              int v48 = 0;
            }
          }
          ++v47;
        }
        while (v93 != v47);
        float v63 = *(float *)(__src.i64[0] + 4 * v90);
        if (v48)
        {
          double v64 = INFINITY;
          if (v48 == 2) {
            double v64 = -INFINITY;
          }
          goto LABEL_74;
        }
        if (v85)
        {
          double v64 = (double)v85;
LABEL_74:
          *(float *)&int __e = 0.0;
          long double v66 = frexp(v64, &__e);
          double v67 = ldexp(v66, 11);
          float v65 = ldexp(round(v67), __e - 11);
          goto LABEL_75;
        }
      }
      else
      {
        float v63 = *(float *)(__src.i64[0] + 4 * v90);
      }
      float v65 = 0.0;
LABEL_75:
      float v68 = v63 * v65;
      float v69 = 0.0;
      if (v68 != 0.0)
      {
        *(float *)&int __e = 0.0;
        long double v70 = frexp(v68, &__e);
        double v71 = ldexp(v70, 11);
        float v69 = ldexp(round(v71), __e - 11);
      }
      int v72 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(a14, v69);
      __int16 v74 = MIL::Fp16::FromFloat(v72, v73);
      *(_WORD *)(*a9
               + 2
      if (v90 == v83) {
        goto LABEL_78;
      }
    }
  }
LABEL_82:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_210BD5E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v20 = *(void **)(v18 - 160);
  if (v20)
  {
    *(void *)(v18 - 152) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *(void **)a18;
  if (*(void *)a18)
  {
    *(void *)(a18 + 8) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<MIL::Fp16,MIL::Fp16,unsigned char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, int a12, __int16 a13, __int16 a14, uint64_t a15)
{
  v100[2] = *MEMORY[0x263EF8340];
  uint64_t v15 = *a3;
  uint64_t v16 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v16 - 17) >= 0x1F) {
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  }
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F) {
  uint64_t v19 = v16 >> 3;
  }
  if (v19 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v15 + 1), __src.i8, (char *)v100, 2);
  }
  else if (v19 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v15 + 1), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v20 = *a4;
  uint64_t v21 = (a4[1] - *a4) >> 3;
  if (v21 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v20 + 8), __src.i8, (char *)v100, 2);
  }
  else if (v21 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v20 + 8), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v22 = *a5;
  uint64_t v23 = a5[1] - *a5;
  if (v23 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v22 + 1), __src.i8, (char *)v100, 2);
  }
  else if (v23 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v22 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6) {
    std::vector<unsigned char>::__append(a9, a6);
  }
  unint64_t v80 = (*a3)[1];
  unint64_t v81 = **a3;
  unint64_t v79 = (*a3)[2];
  unint64_t v94 = (*a3)[4];
  unint64_t v89 = *((void *)*a4 + 1);
  unint64_t v90 = *(void *)*a4;
  unint64_t v88 = *((void *)*a4 + 2);
  uint64_t v24 = **a5;
  uint64_t v76 = (*a5)[1];
  uint64_t v77 = (*a5)[2];
  unint64_t v25 = (*a5)[4];
  uint64_t v78 = (*a5)[3];
  double v26 = ldexp(1.0, a7 + 20);
  double v27 = exp2(-(double)(a7 + 20 + a8));
  int64x2_t __src = 0uLL;
  v100[0] = 0;
  unint64_t v84 = v25;
  std::vector<float>::reserve((void **)&__src, v25);
  float v29 = v27;
  float v30 = *a10;
  float v31 = a10[1];
  if ((char *)v31 - (char *)*a10 == 4)
  {
    __int16 v97 = MIL::Fp16::FromFloat(Float, *v30);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v97);
    *(float *)&int __e = v32 * v29;
    std::vector<float>::assign((char **)&__src, v84, &__e);
  }
  else
  {
    for (; v30 != v31; ++v30)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v30);
      uint64_t Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      float v34 = v33 * v29;
      float v35 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v100[0])
      {
        uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        uint64_t v37 = (__src.i64[1] - __src.i64[0]) >> 2;
        unint64_t v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v39 = v100[0] - __src.i64[0];
        if ((v100[0] - __src.i64[0]) >> 1 > v38) {
          unint64_t v38 = v39 >> 1;
        }
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v38;
        }
        if (v40)
        {
          char v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v100, v40);
          float v35 = (MIL::Fp16 *)__src.i64[1];
          uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          char v41 = 0;
        }
        int v42 = (float *)&v41[4 * v37];
        *int v42 = v34;
        uint64_t v36 = v42 + 1;
        while (v35 != Float)
        {
          int v43 = *((_DWORD *)v35 - 1);
          float v35 = (MIL::Fp16 *)((char *)v35 - 4);
          *((_DWORD *)v42-- - 1) = v43;
        }
        __src.i64[0] = (uint64_t)v42;
        __src.i64[1] = (uint64_t)v36;
        v100[0] = &v41[4 * v40];
        if (Float) {
          operator delete(Float);
        }
      }
      else
      {
        *(float *)__src.i64[1] = v34;
        uint64_t v36 = (float *)((char *)v35 + 4);
      }
      __src.i64[1] = (uint64_t)v36;
    }
  }
  if (v24)
  {
    unint64_t v44 = 0;
    float v45 = v26;
    while (!v76)
    {
LABEL_90:
      if (++v44 == v24) {
        goto LABEL_91;
      }
    }
    unint64_t v46 = 0;
    while (!v77)
    {
LABEL_89:
      if (++v46 == v76) {
        goto LABEL_90;
      }
    }
    unint64_t v47 = 0;
    while (!v78)
    {
LABEL_88:
      if (++v47 == v77) {
        goto LABEL_89;
      }
    }
    uint64_t v95 = 0;
    while (!v84)
    {
LABEL_87:
      if (++v95 == v78) {
        goto LABEL_88;
      }
    }
    uint64_t v91 = 0;
    while (1)
    {
      if (v94)
      {
        uint64_t v48 = 0;
        int v49 = 0;
        int v86 = 0;
        do
        {
          __int16 v50 = *(_WORD *)(a1
                         + 2
          if (!a11 || (__int16 v51 = a13, v48 != *((void *)a4[1] - 2))) {
            __int16 v51 = *(_WORD *)(a2
          }
                           + 2
          if (!v49)
          {
            LOWORD(__e) = v50;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            float v53 = v52;
            LOWORD(__e) = v51;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            float v55 = v54;
            LOWORD(__e) = 0;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            float v57 = v55 - v56;
            int v58 = ilogbf(v53);
            if (v58 <= -14) {
              int v59 = -14;
            }
            else {
              int v59 = v58;
            }
            int v60 = ilogbf(v57);
            if (v60 <= -14) {
              int v61 = -14;
            }
            else {
              int v61 = v60;
            }
            if (v59 + a7 + v61 >= -20)
            {
              uint64_t v62 = (int)llroundf((float)(v53 * v57) * v45) + (uint64_t)v86;
              if (v62 <= 0x7FFFFFFF)
              {
                BOOL v63 = v62 < (uint64_t)0xFFFFFFFF80000000;
                if (v62 < (uint64_t)0xFFFFFFFF80000000) {
                  LODWORD(v62) = -8388608;
                }
                int v86 = v62;
                int v49 = 2 * v63;
              }
              else
              {
                int v49 = 1;
                int v86 = 2139095040;
              }
            }
            else
            {
              int v49 = 0;
            }
          }
          ++v48;
        }
        while (v94 != v48);
        float v64 = *(float *)(__src.i64[0] + 4 * v91);
        if (v49)
        {
          double v65 = INFINITY;
          if (v49 == 2) {
            double v65 = -INFINITY;
          }
          goto LABEL_76;
        }
        if (v86)
        {
          double v65 = (double)v86;
LABEL_76:
          *(float *)&int __e = 0.0;
          long double v67 = frexp(v65, &__e);
          double v68 = ldexp(v67, 11);
          float v66 = ldexp(round(v68), __e - 11);
          goto LABEL_77;
        }
      }
      else
      {
        float v64 = *(float *)(__src.i64[0] + 4 * v91);
      }
      float v66 = 0.0;
LABEL_77:
      float v69 = v64 * v66;
      float v70 = 0.0;
      if (v69 != 0.0)
      {
        *(float *)&int __e = 0.0;
        long double v71 = frexp(v69, &__e);
        double v72 = ldexp(v71, 11);
        float v70 = ldexp(round(v72), __e - 11);
      }
      std::function<float ()(float)>::operator()(a15, v70);
      if (v73 == INFINITY)
      {
        LOBYTE(v74) = -1;
      }
      else if (v73 == -INFINITY)
      {
        LOBYTE(v74) = 0;
      }
      else
      {
        int v75 = llroundf(v73);
        if (v75 >= 255) {
          int v75 = 255;
        }
        int v74 = v75 & ~(v75 >> 31);
      }
      *(unsigned char *)(*a9
      if (v91 == v84) {
        goto LABEL_87;
      }
    }
  }
LABEL_91:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_210BD6644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19 = *(void **)a18;
  if (*(void *)a18)
  {
    *(void *)(a18 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<MIL::Fp16,MIL::Fp16,signed char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, int a12, __int16 a13, __int16 a14, uint64_t a15)
{
  v100[2] = *MEMORY[0x263EF8340];
  uint64_t v15 = *a3;
  uint64_t v16 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v16 - 17) >= 0x1F) {
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  }
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F) {
  uint64_t v19 = v16 >> 3;
  }
  if (v19 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v15 + 1), __src.i8, (char *)v100, 2);
  }
  else if (v19 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v15 + 1), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v20 = *a4;
  uint64_t v21 = (a4[1] - *a4) >> 3;
  if (v21 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v20 + 8), __src.i8, (char *)v100, 2);
  }
  else if (v21 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v20 + 8), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v22 = *a5;
  uint64_t v23 = a5[1] - *a5;
  if (v23 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v22 + 1), __src.i8, (char *)v100, 2);
  }
  else if (v23 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v22 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6) {
    std::vector<unsigned char>::__append(a9, a6);
  }
  unint64_t v80 = (*a3)[1];
  unint64_t v81 = **a3;
  unint64_t v79 = (*a3)[2];
  unint64_t v94 = (*a3)[4];
  unint64_t v89 = *((void *)*a4 + 1);
  unint64_t v90 = *(void *)*a4;
  unint64_t v88 = *((void *)*a4 + 2);
  uint64_t v24 = **a5;
  uint64_t v76 = (*a5)[1];
  uint64_t v77 = (*a5)[2];
  unint64_t v25 = (*a5)[4];
  uint64_t v78 = (*a5)[3];
  double v26 = ldexp(1.0, a7 + 20);
  double v27 = exp2(-(double)(a7 + 20 + a8));
  int64x2_t __src = 0uLL;
  v100[0] = 0;
  unint64_t v84 = v25;
  std::vector<float>::reserve((void **)&__src, v25);
  float v29 = v27;
  float v30 = *a10;
  float v31 = a10[1];
  if ((char *)v31 - (char *)*a10 == 4)
  {
    __int16 v97 = MIL::Fp16::FromFloat(Float, *v30);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v97);
    *(float *)&int __e = v32 * v29;
    std::vector<float>::assign((char **)&__src, v84, &__e);
  }
  else
  {
    for (; v30 != v31; ++v30)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v30);
      uint64_t Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      float v34 = v33 * v29;
      float v35 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v100[0])
      {
        uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        uint64_t v37 = (__src.i64[1] - __src.i64[0]) >> 2;
        unint64_t v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v39 = v100[0] - __src.i64[0];
        if ((v100[0] - __src.i64[0]) >> 1 > v38) {
          unint64_t v38 = v39 >> 1;
        }
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v38;
        }
        if (v40)
        {
          char v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v100, v40);
          float v35 = (MIL::Fp16 *)__src.i64[1];
          uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          char v41 = 0;
        }
        int v42 = (float *)&v41[4 * v37];
        *int v42 = v34;
        uint64_t v36 = v42 + 1;
        while (v35 != Float)
        {
          int v43 = *((_DWORD *)v35 - 1);
          float v35 = (MIL::Fp16 *)((char *)v35 - 4);
          *((_DWORD *)v42-- - 1) = v43;
        }
        __src.i64[0] = (uint64_t)v42;
        __src.i64[1] = (uint64_t)v36;
        v100[0] = &v41[4 * v40];
        if (Float) {
          operator delete(Float);
        }
      }
      else
      {
        *(float *)__src.i64[1] = v34;
        uint64_t v36 = (float *)((char *)v35 + 4);
      }
      __src.i64[1] = (uint64_t)v36;
    }
  }
  if (v24)
  {
    unint64_t v44 = 0;
    float v45 = v26;
    while (!v76)
    {
LABEL_92:
      if (++v44 == v24) {
        goto LABEL_93;
      }
    }
    unint64_t v46 = 0;
    while (!v77)
    {
LABEL_91:
      if (++v46 == v76) {
        goto LABEL_92;
      }
    }
    unint64_t v47 = 0;
    while (!v78)
    {
LABEL_90:
      if (++v47 == v77) {
        goto LABEL_91;
      }
    }
    uint64_t v95 = 0;
    while (!v84)
    {
LABEL_89:
      if (++v95 == v78) {
        goto LABEL_90;
      }
    }
    uint64_t v91 = 0;
    while (1)
    {
      if (v94)
      {
        uint64_t v48 = 0;
        int v49 = 0;
        int v86 = 0;
        do
        {
          __int16 v50 = *(_WORD *)(a1
                         + 2
          if (!a11 || (__int16 v51 = a13, v48 != *((void *)a4[1] - 2))) {
            __int16 v51 = *(_WORD *)(a2
          }
                           + 2
          if (!v49)
          {
            LOWORD(__e) = v50;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            float v53 = v52;
            LOWORD(__e) = v51;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            float v55 = v54;
            LOWORD(__e) = 0;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            float v57 = v55 - v56;
            int v58 = ilogbf(v53);
            if (v58 <= -14) {
              int v59 = -14;
            }
            else {
              int v59 = v58;
            }
            int v60 = ilogbf(v57);
            if (v60 <= -14) {
              int v61 = -14;
            }
            else {
              int v61 = v60;
            }
            if (v59 + a7 + v61 >= -20)
            {
              uint64_t v62 = (int)llroundf((float)(v53 * v57) * v45) + (uint64_t)v86;
              if (v62 <= 0x7FFFFFFF)
              {
                BOOL v63 = v62 < (uint64_t)0xFFFFFFFF80000000;
                if (v62 < (uint64_t)0xFFFFFFFF80000000) {
                  LODWORD(v62) = -8388608;
                }
                int v86 = v62;
                int v49 = 2 * v63;
              }
              else
              {
                int v49 = 1;
                int v86 = 2139095040;
              }
            }
            else
            {
              int v49 = 0;
            }
          }
          ++v48;
        }
        while (v94 != v48);
        float v64 = *(float *)(__src.i64[0] + 4 * v91);
        if (v49)
        {
          double v65 = INFINITY;
          if (v49 == 2) {
            double v65 = -INFINITY;
          }
          goto LABEL_76;
        }
        if (v86)
        {
          double v65 = (double)v86;
LABEL_76:
          *(float *)&int __e = 0.0;
          long double v67 = frexp(v65, &__e);
          double v68 = ldexp(v67, 11);
          float v66 = ldexp(round(v68), __e - 11);
          goto LABEL_77;
        }
      }
      else
      {
        float v64 = *(float *)(__src.i64[0] + 4 * v91);
      }
      float v66 = 0.0;
LABEL_77:
      float v69 = v64 * v66;
      float v70 = 0.0;
      if (v69 != 0.0)
      {
        *(float *)&int __e = 0.0;
        long double v71 = frexp(v69, &__e);
        double v72 = ldexp(v71, 11);
        float v70 = ldexp(round(v72), __e - 11);
      }
      std::function<float ()(float)>::operator()(a15, v70);
      if (v73 == INFINITY)
      {
        char v74 = 127;
      }
      else if (v73 == -INFINITY)
      {
        char v74 = 0x80;
      }
      else
      {
        int v75 = llroundf(v73);
        if (v75 >= 127) {
          int v75 = 127;
        }
        if (v75 <= -128) {
          char v74 = 0x80;
        }
        else {
          char v74 = v75;
        }
      }
      *(unsigned char *)(*a9
      if (v91 == v84) {
        goto LABEL_89;
      }
    }
  }
LABEL_93:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_210BD6E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19 = *(void **)a18;
  if (*(void *)a18)
  {
    *(void *)(a18 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<MIL::Fp16,unsigned char,MIL::Fp16>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, void *a9@<X8>, float **a10, char a11, unsigned __int8 a12, uint64_t a13)
{
  v94[2] = *MEMORY[0x263EF8340];
  char v13 = *a3;
  uint64_t v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F) {
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  }
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F) {
  uint64_t v18 = v14 >> 3;
  }
  if (v18 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v94, 2);
  }
  else if (v18 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v19 = *a4;
  uint64_t v20 = (a4[1] - *a4) >> 3;
  if (v20 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, (char *)v94, 2);
  }
  else if (v20 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v21 = *a5;
  uint64_t v22 = a5[1] - *a5;
  if (v22 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, (char *)v94, 2);
  }
  else if (v22 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a6);
  unint64_t v74 = (*a3)[1];
  unint64_t v75 = **a3;
  unint64_t v73 = (*a3)[2];
  unint64_t v88 = (*a3)[4];
  unint64_t v83 = *((void *)*a4 + 1);
  unint64_t v84 = *(void *)*a4;
  unint64_t v82 = *((void *)*a4 + 2);
  uint64_t v23 = **a5;
  uint64_t v70 = (*a5)[1];
  uint64_t v71 = (*a5)[2];
  unint64_t v24 = (*a5)[4];
  uint64_t v72 = (*a5)[3];
  double v25 = ldexp(1.0, a7 + 10);
  double v26 = exp2(-(double)(a7 + 10 + a8));
  int64x2_t __src = 0uLL;
  v94[0] = 0;
  unint64_t v78 = v24;
  std::vector<float>::reserve((void **)&__src, v24);
  float v28 = v26;
  float v29 = *a10;
  float v30 = a10[1];
  if ((char *)v30 - (char *)*a10 == 4)
  {
    __int16 v91 = MIL::Fp16::FromFloat(Float, *v29);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v91);
    *(float *)&int __e = v31 * v28;
    std::vector<float>::assign((char **)&__src, v78, &__e);
  }
  else
  {
    for (; v29 != v30; ++v29)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v29);
      uint64_t Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      float v33 = v32 * v28;
      float v34 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v94[0])
      {
        uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        uint64_t v36 = (__src.i64[1] - __src.i64[0]) >> 2;
        unint64_t v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = v94[0] - __src.i64[0];
        if ((v94[0] - __src.i64[0]) >> 1 > v37) {
          unint64_t v37 = v38 >> 1;
        }
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v37;
        }
        if (v39)
        {
          unint64_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v94, v39);
          float v34 = (MIL::Fp16 *)__src.i64[1];
          uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          unint64_t v40 = 0;
        }
        char v41 = (float *)&v40[4 * v36];
        float *v41 = v33;
        float v35 = v41 + 1;
        while (v34 != Float)
        {
          int v42 = *((_DWORD *)v34 - 1);
          float v34 = (MIL::Fp16 *)((char *)v34 - 4);
          *((_DWORD *)v41-- - 1) = v42;
        }
        __src.i64[0] = (uint64_t)v41;
        __src.i64[1] = (uint64_t)v35;
        v94[0] = &v40[4 * v39];
        if (Float) {
          operator delete(Float);
        }
      }
      else
      {
        *(float *)__src.i64[1] = v33;
        float v35 = (float *)((char *)v34 + 4);
      }
      __src.i64[1] = (uint64_t)v35;
    }
  }
  uint64_t v69 = v23;
  if (v23)
  {
    unint64_t v43 = 0;
    int v79 = -20 - a7;
    float v44 = v25;
    while (!v70)
    {
LABEL_78:
      if (++v43 == v69) {
        goto LABEL_79;
      }
    }
    unint64_t v45 = 0;
    while (!v71)
    {
LABEL_77:
      if (++v45 == v70) {
        goto LABEL_78;
      }
    }
    unint64_t v46 = 0;
    while (!v72)
    {
LABEL_76:
      if (++v46 == v71) {
        goto LABEL_77;
      }
    }
    uint64_t v89 = 0;
    while (!v78)
    {
LABEL_75:
      if (++v89 == v72) {
        goto LABEL_76;
      }
    }
    uint64_t v85 = 0;
    while (1)
    {
      if (v88)
      {
        uint64_t v47 = 0;
        int v48 = 0;
        int v80 = 0;
        do
        {
          __int16 v49 = *(_WORD *)(a1
                         + 2
          if (!a11 || (unsigned int v50 = a12, v47 != *((void *)a4[1] - 2))) {
            unsigned int v50 = *(unsigned __int8 *)(a2
          }
          if (!v48)
          {
            LOWORD(__e) = v49;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            float v52 = v51;
            int v53 = ilogbf(v51);
            if (v53 <= -14) {
              int v54 = -14;
            }
            else {
              int v54 = v53;
            }
            if (v54 >= v79)
            {
              uint64_t v55 = (int)llroundf((float)(v52 * (float)v50) * v44) + (uint64_t)v80;
              if (v55 <= 0x7FFFFFFF)
              {
                BOOL v56 = v55 < (uint64_t)0xFFFFFFFF80000000;
                if (v55 < (uint64_t)0xFFFFFFFF80000000) {
                  LODWORD(v55) = -8388608;
                }
                int v80 = v55;
                int v48 = 2 * v56;
              }
              else
              {
                int v48 = 1;
                int v80 = 2139095040;
              }
            }
            else
            {
              int v48 = 0;
            }
          }
          ++v47;
        }
        while (v88 != v47);
        float v57 = *(float *)(__src.i64[0] + 4 * v85);
        if (v48)
        {
          double v58 = INFINITY;
          if (v48 == 2) {
            double v58 = -INFINITY;
          }
          goto LABEL_71;
        }
        if (v80)
        {
          double v58 = (double)v80;
LABEL_71:
          *(float *)&int __e = 0.0;
          long double v60 = frexp(v58, &__e);
          double v61 = ldexp(v60, 11);
          float v59 = ldexp(round(v61), __e - 11);
          goto LABEL_72;
        }
      }
      else
      {
        float v57 = *(float *)(__src.i64[0] + 4 * v85);
      }
      float v59 = 0.0;
LABEL_72:
      float v62 = v57 * v59;
      float v63 = 0.0;
      if (v62 != 0.0)
      {
        *(float *)&int __e = 0.0;
        long double v64 = frexp(v62, &__e);
        double v65 = ldexp(v64, 11);
        float v63 = ldexp(round(v65), __e - 11);
      }
      float v66 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(a13, v63);
      __int16 v68 = MIL::Fp16::FromFloat(v66, v67);
      *(_WORD *)(*a9
               + 2
      if (v85 == v78) {
        goto LABEL_75;
      }
    }
  }
LABEL_79:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_210BD75AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v20 = *(void **)(v18 - 160);
  if (v20)
  {
    *(void *)(v18 - 152) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *(void **)a18;
  if (*(void *)a18)
  {
    *(void *)(a18 + 8) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<MIL::Fp16,unsigned char,unsigned char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, unsigned __int8 a12, uint64_t a13)
{
  v94[2] = *MEMORY[0x263EF8340];
  char v13 = *a3;
  uint64_t v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F) {
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  }
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F) {
  uint64_t v18 = v14 >> 3;
  }
  if (v18 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v94, 2);
  }
  else if (v18 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v19 = *a4;
  uint64_t v20 = (a4[1] - *a4) >> 3;
  if (v20 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, (char *)v94, 2);
  }
  else if (v20 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v21 = *a5;
  uint64_t v22 = a5[1] - *a5;
  if (v22 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, (char *)v94, 2);
  }
  else if (v22 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6) {
    std::vector<unsigned char>::__append(a9, a6);
  }
  unint64_t v74 = (*a3)[1];
  unint64_t v75 = **a3;
  unint64_t v73 = (*a3)[2];
  unint64_t v88 = (*a3)[4];
  unint64_t v83 = *((void *)*a4 + 1);
  unint64_t v84 = *(void *)*a4;
  unint64_t v82 = *((void *)*a4 + 2);
  uint64_t v23 = **a5;
  uint64_t v70 = (*a5)[1];
  uint64_t v71 = (*a5)[2];
  unint64_t v24 = (*a5)[4];
  uint64_t v72 = (*a5)[3];
  double v25 = ldexp(1.0, a7 + 10);
  double v26 = exp2(-(double)(a7 + 10 + a8));
  int64x2_t __src = 0uLL;
  v94[0] = 0;
  unint64_t v78 = v24;
  std::vector<float>::reserve((void **)&__src, v24);
  float v28 = v26;
  float v29 = *a10;
  float v30 = a10[1];
  if ((char *)v30 - (char *)*a10 == 4)
  {
    __int16 v91 = MIL::Fp16::FromFloat(Float, *v29);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v91);
    *(float *)&int __e = v31 * v28;
    std::vector<float>::assign((char **)&__src, v78, &__e);
  }
  else
  {
    for (; v29 != v30; ++v29)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v29);
      uint64_t Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      float v33 = v32 * v28;
      float v34 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v94[0])
      {
        uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        uint64_t v36 = (__src.i64[1] - __src.i64[0]) >> 2;
        unint64_t v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = v94[0] - __src.i64[0];
        if ((v94[0] - __src.i64[0]) >> 1 > v37) {
          unint64_t v37 = v38 >> 1;
        }
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v37;
        }
        if (v39)
        {
          unint64_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v94, v39);
          float v34 = (MIL::Fp16 *)__src.i64[1];
          uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          unint64_t v40 = 0;
        }
        char v41 = (float *)&v40[4 * v36];
        float *v41 = v33;
        float v35 = v41 + 1;
        while (v34 != Float)
        {
          int v42 = *((_DWORD *)v34 - 1);
          float v34 = (MIL::Fp16 *)((char *)v34 - 4);
          *((_DWORD *)v41-- - 1) = v42;
        }
        __src.i64[0] = (uint64_t)v41;
        __src.i64[1] = (uint64_t)v35;
        v94[0] = &v40[4 * v39];
        if (Float) {
          operator delete(Float);
        }
      }
      else
      {
        *(float *)__src.i64[1] = v33;
        float v35 = (float *)((char *)v34 + 4);
      }
      __src.i64[1] = (uint64_t)v35;
    }
  }
  uint64_t v69 = v23;
  if (v23)
  {
    unint64_t v43 = 0;
    int v79 = -20 - a7;
    float v44 = v25;
    while (!v70)
    {
LABEL_87:
      if (++v43 == v69) {
        goto LABEL_88;
      }
    }
    unint64_t v45 = 0;
    while (!v71)
    {
LABEL_86:
      if (++v45 == v70) {
        goto LABEL_87;
      }
    }
    unint64_t v46 = 0;
    while (!v72)
    {
LABEL_85:
      if (++v46 == v71) {
        goto LABEL_86;
      }
    }
    uint64_t v89 = 0;
    while (!v78)
    {
LABEL_84:
      if (++v89 == v72) {
        goto LABEL_85;
      }
    }
    uint64_t v85 = 0;
    while (1)
    {
      if (v88)
      {
        uint64_t v47 = 0;
        int v48 = 0;
        int v80 = 0;
        do
        {
          __int16 v49 = *(_WORD *)(a1
                         + 2
          if (!a11 || (unsigned int v50 = a12, v47 != *((void *)a4[1] - 2))) {
            unsigned int v50 = *(unsigned __int8 *)(a2
          }
          if (!v48)
          {
            LOWORD(__e) = v49;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            float v52 = v51;
            int v53 = ilogbf(v51);
            if (v53 <= -14) {
              int v54 = -14;
            }
            else {
              int v54 = v53;
            }
            if (v54 >= v79)
            {
              uint64_t v55 = (int)llroundf((float)(v52 * (float)v50) * v44) + (uint64_t)v80;
              if (v55 <= 0x7FFFFFFF)
              {
                BOOL v56 = v55 < (uint64_t)0xFFFFFFFF80000000;
                if (v55 < (uint64_t)0xFFFFFFFF80000000) {
                  LODWORD(v55) = -8388608;
                }
                int v80 = v55;
                int v48 = 2 * v56;
              }
              else
              {
                int v48 = 1;
                int v80 = 2139095040;
              }
            }
            else
            {
              int v48 = 0;
            }
          }
          ++v47;
        }
        while (v88 != v47);
        float v57 = *(float *)(__src.i64[0] + 4 * v85);
        if (v48)
        {
          double v58 = INFINITY;
          if (v48 == 2) {
            double v58 = -INFINITY;
          }
          goto LABEL_73;
        }
        if (v80)
        {
          double v58 = (double)v80;
LABEL_73:
          *(float *)&int __e = 0.0;
          long double v60 = frexp(v58, &__e);
          double v61 = ldexp(v60, 11);
          float v59 = ldexp(round(v61), __e - 11);
          goto LABEL_74;
        }
      }
      else
      {
        float v57 = *(float *)(__src.i64[0] + 4 * v85);
      }
      float v59 = 0.0;
LABEL_74:
      float v62 = v57 * v59;
      float v63 = 0.0;
      if (v62 != 0.0)
      {
        *(float *)&int __e = 0.0;
        long double v64 = frexp(v62, &__e);
        double v65 = ldexp(v64, 11);
        float v63 = ldexp(round(v65), __e - 11);
      }
      std::function<float ()(float)>::operator()(a13, v63);
      if (v66 == INFINITY)
      {
        LOBYTE(v67) = -1;
      }
      else if (v66 == -INFINITY)
      {
        LOBYTE(v67) = 0;
      }
      else
      {
        int v68 = llroundf(v66);
        if (v68 >= 255) {
          int v68 = 255;
        }
        int v67 = v68 & ~(v68 >> 31);
      }
      *(unsigned char *)(*a9
      if (v85 == v78) {
        goto LABEL_84;
      }
    }
  }
LABEL_88:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_210BD7D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19 = *(void **)a18;
  if (*(void *)a18)
  {
    *(void *)(a18 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<MIL::Fp16,unsigned char,signed char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, unsigned __int8 a12, uint64_t a13)
{
  v94[2] = *MEMORY[0x263EF8340];
  char v13 = *a3;
  uint64_t v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F) {
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  }
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F) {
  uint64_t v18 = v14 >> 3;
  }
  if (v18 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v94, 2);
  }
  else if (v18 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v19 = *a4;
  uint64_t v20 = (a4[1] - *a4) >> 3;
  if (v20 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, (char *)v94, 2);
  }
  else if (v20 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v21 = *a5;
  uint64_t v22 = a5[1] - *a5;
  if (v22 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, (char *)v94, 2);
  }
  else if (v22 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6) {
    std::vector<unsigned char>::__append(a9, a6);
  }
  unint64_t v74 = (*a3)[1];
  unint64_t v75 = **a3;
  unint64_t v73 = (*a3)[2];
  unint64_t v88 = (*a3)[4];
  unint64_t v83 = *((void *)*a4 + 1);
  unint64_t v84 = *(void *)*a4;
  unint64_t v82 = *((void *)*a4 + 2);
  uint64_t v23 = **a5;
  uint64_t v70 = (*a5)[1];
  uint64_t v71 = (*a5)[2];
  unint64_t v24 = (*a5)[4];
  uint64_t v72 = (*a5)[3];
  double v25 = ldexp(1.0, a7 + 10);
  double v26 = exp2(-(double)(a7 + 10 + a8));
  int64x2_t __src = 0uLL;
  v94[0] = 0;
  unint64_t v78 = v24;
  std::vector<float>::reserve((void **)&__src, v24);
  float v28 = v26;
  float v29 = *a10;
  float v30 = a10[1];
  if ((char *)v30 - (char *)*a10 == 4)
  {
    __int16 v91 = MIL::Fp16::FromFloat(Float, *v29);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v91);
    *(float *)&int __e = v31 * v28;
    std::vector<float>::assign((char **)&__src, v78, &__e);
  }
  else
  {
    for (; v29 != v30; ++v29)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v29);
      uint64_t Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      float v33 = v32 * v28;
      float v34 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v94[0])
      {
        uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        uint64_t v36 = (__src.i64[1] - __src.i64[0]) >> 2;
        unint64_t v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = v94[0] - __src.i64[0];
        if ((v94[0] - __src.i64[0]) >> 1 > v37) {
          unint64_t v37 = v38 >> 1;
        }
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v37;
        }
        if (v39)
        {
          unint64_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v94, v39);
          float v34 = (MIL::Fp16 *)__src.i64[1];
          uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          unint64_t v40 = 0;
        }
        char v41 = (float *)&v40[4 * v36];
        float *v41 = v33;
        float v35 = v41 + 1;
        while (v34 != Float)
        {
          int v42 = *((_DWORD *)v34 - 1);
          float v34 = (MIL::Fp16 *)((char *)v34 - 4);
          *((_DWORD *)v41-- - 1) = v42;
        }
        __src.i64[0] = (uint64_t)v41;
        __src.i64[1] = (uint64_t)v35;
        v94[0] = &v40[4 * v39];
        if (Float) {
          operator delete(Float);
        }
      }
      else
      {
        *(float *)__src.i64[1] = v33;
        float v35 = (float *)((char *)v34 + 4);
      }
      __src.i64[1] = (uint64_t)v35;
    }
  }
  uint64_t v69 = v23;
  if (v23)
  {
    unint64_t v43 = 0;
    int v79 = -20 - a7;
    float v44 = v25;
    while (!v70)
    {
LABEL_89:
      if (++v43 == v69) {
        goto LABEL_90;
      }
    }
    unint64_t v45 = 0;
    while (!v71)
    {
LABEL_88:
      if (++v45 == v70) {
        goto LABEL_89;
      }
    }
    unint64_t v46 = 0;
    while (!v72)
    {
LABEL_87:
      if (++v46 == v71) {
        goto LABEL_88;
      }
    }
    uint64_t v89 = 0;
    while (!v78)
    {
LABEL_86:
      if (++v89 == v72) {
        goto LABEL_87;
      }
    }
    uint64_t v85 = 0;
    while (1)
    {
      if (v88)
      {
        uint64_t v47 = 0;
        int v48 = 0;
        int v80 = 0;
        do
        {
          __int16 v49 = *(_WORD *)(a1
                         + 2
          if (!a11 || (unsigned int v50 = a12, v47 != *((void *)a4[1] - 2))) {
            unsigned int v50 = *(unsigned __int8 *)(a2
          }
          if (!v48)
          {
            LOWORD(__e) = v49;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            float v52 = v51;
            int v53 = ilogbf(v51);
            if (v53 <= -14) {
              int v54 = -14;
            }
            else {
              int v54 = v53;
            }
            if (v54 >= v79)
            {
              uint64_t v55 = (int)llroundf((float)(v52 * (float)v50) * v44) + (uint64_t)v80;
              if (v55 <= 0x7FFFFFFF)
              {
                BOOL v56 = v55 < (uint64_t)0xFFFFFFFF80000000;
                if (v55 < (uint64_t)0xFFFFFFFF80000000) {
                  LODWORD(v55) = -8388608;
                }
                int v80 = v55;
                int v48 = 2 * v56;
              }
              else
              {
                int v48 = 1;
                int v80 = 2139095040;
              }
            }
            else
            {
              int v48 = 0;
            }
          }
          ++v47;
        }
        while (v88 != v47);
        float v57 = *(float *)(__src.i64[0] + 4 * v85);
        if (v48)
        {
          double v58 = INFINITY;
          if (v48 == 2) {
            double v58 = -INFINITY;
          }
          goto LABEL_73;
        }
        if (v80)
        {
          double v58 = (double)v80;
LABEL_73:
          *(float *)&int __e = 0.0;
          long double v60 = frexp(v58, &__e);
          double v61 = ldexp(v60, 11);
          float v59 = ldexp(round(v61), __e - 11);
          goto LABEL_74;
        }
      }
      else
      {
        float v57 = *(float *)(__src.i64[0] + 4 * v85);
      }
      float v59 = 0.0;
LABEL_74:
      float v62 = v57 * v59;
      float v63 = 0.0;
      if (v62 != 0.0)
      {
        *(float *)&int __e = 0.0;
        long double v64 = frexp(v62, &__e);
        double v65 = ldexp(v64, 11);
        float v63 = ldexp(round(v65), __e - 11);
      }
      std::function<float ()(float)>::operator()(a13, v63);
      if (v66 == INFINITY)
      {
        char v67 = 127;
      }
      else if (v66 == -INFINITY)
      {
        char v67 = 0x80;
      }
      else
      {
        int v68 = llroundf(v66);
        if (v68 >= 127) {
          int v68 = 127;
        }
        if (v68 <= -128) {
          char v67 = 0x80;
        }
        else {
          char v67 = v68;
        }
      }
      *(unsigned char *)(*a9
      if (v85 == v78) {
        goto LABEL_86;
      }
    }
  }
LABEL_90:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_210BD8528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19 = *(void **)a18;
  if (*(void *)a18)
  {
    *(void *)(a18 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<MIL::Fp16,signed char,MIL::Fp16>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, void *a9@<X8>, float **a10, char a11, char a12, uint64_t a13)
{
  v94[2] = *MEMORY[0x263EF8340];
  char v13 = *a3;
  uint64_t v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F) {
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  }
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F) {
  uint64_t v18 = v14 >> 3;
  }
  if (v18 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v94, 2);
  }
  else if (v18 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v19 = *a4;
  uint64_t v20 = (a4[1] - *a4) >> 3;
  if (v20 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, (char *)v94, 2);
  }
  else if (v20 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v21 = *a5;
  uint64_t v22 = a5[1] - *a5;
  if (v22 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, (char *)v94, 2);
  }
  else if (v22 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a6);
  unint64_t v74 = (*a3)[1];
  unint64_t v75 = **a3;
  unint64_t v73 = (*a3)[2];
  unint64_t v88 = (*a3)[4];
  unint64_t v83 = *((void *)*a4 + 1);
  unint64_t v84 = *(void *)*a4;
  unint64_t v82 = *((void *)*a4 + 2);
  uint64_t v23 = **a5;
  uint64_t v70 = (*a5)[1];
  uint64_t v71 = (*a5)[2];
  unint64_t v24 = (*a5)[4];
  uint64_t v72 = (*a5)[3];
  double v25 = ldexp(1.0, a7 + 10);
  double v26 = exp2(-(double)(a7 + 10 + a8));
  int64x2_t __src = 0uLL;
  v94[0] = 0;
  unint64_t v78 = v24;
  std::vector<float>::reserve((void **)&__src, v24);
  float v28 = v26;
  float v29 = *a10;
  float v30 = a10[1];
  if ((char *)v30 - (char *)*a10 == 4)
  {
    __int16 v91 = MIL::Fp16::FromFloat(Float, *v29);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v91);
    *(float *)&int __e = v31 * v28;
    std::vector<float>::assign((char **)&__src, v78, &__e);
  }
  else
  {
    for (; v29 != v30; ++v29)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v29);
      uint64_t Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      float v33 = v32 * v28;
      float v34 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v94[0])
      {
        uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        uint64_t v36 = (__src.i64[1] - __src.i64[0]) >> 2;
        unint64_t v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = v94[0] - __src.i64[0];
        if ((v94[0] - __src.i64[0]) >> 1 > v37) {
          unint64_t v37 = v38 >> 1;
        }
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v37;
        }
        if (v39)
        {
          unint64_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v94, v39);
          float v34 = (MIL::Fp16 *)__src.i64[1];
          uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          unint64_t v40 = 0;
        }
        char v41 = (float *)&v40[4 * v36];
        float *v41 = v33;
        float v35 = v41 + 1;
        while (v34 != Float)
        {
          int v42 = *((_DWORD *)v34 - 1);
          float v34 = (MIL::Fp16 *)((char *)v34 - 4);
          *((_DWORD *)v41-- - 1) = v42;
        }
        __src.i64[0] = (uint64_t)v41;
        __src.i64[1] = (uint64_t)v35;
        v94[0] = &v40[4 * v39];
        if (Float) {
          operator delete(Float);
        }
      }
      else
      {
        *(float *)__src.i64[1] = v33;
        float v35 = (float *)((char *)v34 + 4);
      }
      __src.i64[1] = (uint64_t)v35;
    }
  }
  uint64_t v69 = v23;
  if (v23)
  {
    unint64_t v43 = 0;
    int v79 = -20 - a7;
    float v44 = v25;
    while (!v70)
    {
LABEL_78:
      if (++v43 == v69) {
        goto LABEL_79;
      }
    }
    unint64_t v45 = 0;
    while (!v71)
    {
LABEL_77:
      if (++v45 == v70) {
        goto LABEL_78;
      }
    }
    unint64_t v46 = 0;
    while (!v72)
    {
LABEL_76:
      if (++v46 == v71) {
        goto LABEL_77;
      }
    }
    uint64_t v89 = 0;
    while (!v78)
    {
LABEL_75:
      if (++v89 == v72) {
        goto LABEL_76;
      }
    }
    uint64_t v85 = 0;
    while (1)
    {
      if (v88)
      {
        uint64_t v47 = 0;
        int v48 = 0;
        int v80 = 0;
        do
        {
          __int16 v49 = *(_WORD *)(a1
                         + 2
          if (!a11 || (char v50 = a12, v47 != *((void *)a4[1] - 2))) {
            char v50 = *(unsigned char *)(a2
          }
          if (!v48)
          {
            LOWORD(__e) = v49;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            float v52 = v51;
            int v53 = ilogbf(v51);
            if (v53 <= -14) {
              int v54 = -14;
            }
            else {
              int v54 = v53;
            }
            if (v54 >= v79)
            {
              uint64_t v55 = (int)llroundf((float)(v52 * (float)v50) * v44) + (uint64_t)v80;
              if (v55 <= 0x7FFFFFFF)
              {
                BOOL v56 = v55 < (uint64_t)0xFFFFFFFF80000000;
                if (v55 < (uint64_t)0xFFFFFFFF80000000) {
                  LODWORD(v55) = -8388608;
                }
                int v80 = v55;
                int v48 = 2 * v56;
              }
              else
              {
                int v48 = 1;
                int v80 = 2139095040;
              }
            }
            else
            {
              int v48 = 0;
            }
          }
          ++v47;
        }
        while (v88 != v47);
        float v57 = *(float *)(__src.i64[0] + 4 * v85);
        if (v48)
        {
          double v58 = INFINITY;
          if (v48 == 2) {
            double v58 = -INFINITY;
          }
          goto LABEL_71;
        }
        if (v80)
        {
          double v58 = (double)v80;
LABEL_71:
          *(float *)&int __e = 0.0;
          long double v60 = frexp(v58, &__e);
          double v61 = ldexp(v60, 11);
          float v59 = ldexp(round(v61), __e - 11);
          goto LABEL_72;
        }
      }
      else
      {
        float v57 = *(float *)(__src.i64[0] + 4 * v85);
      }
      float v59 = 0.0;
LABEL_72:
      float v62 = v57 * v59;
      float v63 = 0.0;
      if (v62 != 0.0)
      {
        *(float *)&int __e = 0.0;
        long double v64 = frexp(v62, &__e);
        double v65 = ldexp(v64, 11);
        float v63 = ldexp(round(v65), __e - 11);
      }
      float v66 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(a13, v63);
      __int16 v68 = MIL::Fp16::FromFloat(v66, v67);
      *(_WORD *)(*a9
               + 2
      if (v85 == v78) {
        goto LABEL_75;
      }
    }
  }
LABEL_79:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_210BD8CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v20 = *(void **)(v18 - 160);
  if (v20)
  {
    *(void *)(v18 - 152) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *(void **)a18;
  if (*(void *)a18)
  {
    *(void *)(a18 + 8) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<MIL::Fp16,signed char,unsigned char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, char a12, uint64_t a13)
{
  v94[2] = *MEMORY[0x263EF8340];
  char v13 = *a3;
  uint64_t v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F) {
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  }
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F) {
  uint64_t v18 = v14 >> 3;
  }
  if (v18 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v94, 2);
  }
  else if (v18 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v19 = *a4;
  uint64_t v20 = (a4[1] - *a4) >> 3;
  if (v20 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, (char *)v94, 2);
  }
  else if (v20 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v21 = *a5;
  uint64_t v22 = a5[1] - *a5;
  if (v22 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, (char *)v94, 2);
  }
  else if (v22 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6) {
    std::vector<unsigned char>::__append(a9, a6);
  }
  unint64_t v74 = (*a3)[1];
  unint64_t v75 = **a3;
  unint64_t v73 = (*a3)[2];
  unint64_t v88 = (*a3)[4];
  unint64_t v83 = *((void *)*a4 + 1);
  unint64_t v84 = *(void *)*a4;
  unint64_t v82 = *((void *)*a4 + 2);
  uint64_t v23 = **a5;
  uint64_t v70 = (*a5)[1];
  uint64_t v71 = (*a5)[2];
  unint64_t v24 = (*a5)[4];
  uint64_t v72 = (*a5)[3];
  double v25 = ldexp(1.0, a7 + 10);
  double v26 = exp2(-(double)(a7 + 10 + a8));
  int64x2_t __src = 0uLL;
  v94[0] = 0;
  unint64_t v78 = v24;
  std::vector<float>::reserve((void **)&__src, v24);
  float v28 = v26;
  float v29 = *a10;
  float v30 = a10[1];
  if ((char *)v30 - (char *)*a10 == 4)
  {
    __int16 v91 = MIL::Fp16::FromFloat(Float, *v29);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v91);
    *(float *)&int __e = v31 * v28;
    std::vector<float>::assign((char **)&__src, v78, &__e);
  }
  else
  {
    for (; v29 != v30; ++v29)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v29);
      uint64_t Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      float v33 = v32 * v28;
      float v34 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v94[0])
      {
        uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        uint64_t v36 = (__src.i64[1] - __src.i64[0]) >> 2;
        unint64_t v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = v94[0] - __src.i64[0];
        if ((v94[0] - __src.i64[0]) >> 1 > v37) {
          unint64_t v37 = v38 >> 1;
        }
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v37;
        }
        if (v39)
        {
          unint64_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v94, v39);
          float v34 = (MIL::Fp16 *)__src.i64[1];
          uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          unint64_t v40 = 0;
        }
        char v41 = (float *)&v40[4 * v36];
        float *v41 = v33;
        float v35 = v41 + 1;
        while (v34 != Float)
        {
          int v42 = *((_DWORD *)v34 - 1);
          float v34 = (MIL::Fp16 *)((char *)v34 - 4);
          *((_DWORD *)v41-- - 1) = v42;
        }
        __src.i64[0] = (uint64_t)v41;
        __src.i64[1] = (uint64_t)v35;
        v94[0] = &v40[4 * v39];
        if (Float) {
          operator delete(Float);
        }
      }
      else
      {
        *(float *)__src.i64[1] = v33;
        float v35 = (float *)((char *)v34 + 4);
      }
      __src.i64[1] = (uint64_t)v35;
    }
  }
  uint64_t v69 = v23;
  if (v23)
  {
    unint64_t v43 = 0;
    int v79 = -20 - a7;
    float v44 = v25;
    while (!v70)
    {
LABEL_87:
      if (++v43 == v69) {
        goto LABEL_88;
      }
    }
    unint64_t v45 = 0;
    while (!v71)
    {
LABEL_86:
      if (++v45 == v70) {
        goto LABEL_87;
      }
    }
    unint64_t v46 = 0;
    while (!v72)
    {
LABEL_85:
      if (++v46 == v71) {
        goto LABEL_86;
      }
    }
    uint64_t v89 = 0;
    while (!v78)
    {
LABEL_84:
      if (++v89 == v72) {
        goto LABEL_85;
      }
    }
    uint64_t v85 = 0;
    while (1)
    {
      if (v88)
      {
        uint64_t v47 = 0;
        int v48 = 0;
        int v80 = 0;
        do
        {
          __int16 v49 = *(_WORD *)(a1
                         + 2
          if (!a11 || (char v50 = a12, v47 != *((void *)a4[1] - 2))) {
            char v50 = *(unsigned char *)(a2
          }
          if (!v48)
          {
            LOWORD(__e) = v49;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            float v52 = v51;
            int v53 = ilogbf(v51);
            if (v53 <= -14) {
              int v54 = -14;
            }
            else {
              int v54 = v53;
            }
            if (v54 >= v79)
            {
              uint64_t v55 = (int)llroundf((float)(v52 * (float)v50) * v44) + (uint64_t)v80;
              if (v55 <= 0x7FFFFFFF)
              {
                BOOL v56 = v55 < (uint64_t)0xFFFFFFFF80000000;
                if (v55 < (uint64_t)0xFFFFFFFF80000000) {
                  LODWORD(v55) = -8388608;
                }
                int v80 = v55;
                int v48 = 2 * v56;
              }
              else
              {
                int v48 = 1;
                int v80 = 2139095040;
              }
            }
            else
            {
              int v48 = 0;
            }
          }
          ++v47;
        }
        while (v88 != v47);
        float v57 = *(float *)(__src.i64[0] + 4 * v85);
        if (v48)
        {
          double v58 = INFINITY;
          if (v48 == 2) {
            double v58 = -INFINITY;
          }
          goto LABEL_73;
        }
        if (v80)
        {
          double v58 = (double)v80;
LABEL_73:
          *(float *)&int __e = 0.0;
          long double v60 = frexp(v58, &__e);
          double v61 = ldexp(v60, 11);
          float v59 = ldexp(round(v61), __e - 11);
          goto LABEL_74;
        }
      }
      else
      {
        float v57 = *(float *)(__src.i64[0] + 4 * v85);
      }
      float v59 = 0.0;
LABEL_74:
      float v62 = v57 * v59;
      float v63 = 0.0;
      if (v62 != 0.0)
      {
        *(float *)&int __e = 0.0;
        long double v64 = frexp(v62, &__e);
        double v65 = ldexp(v64, 11);
        float v63 = ldexp(round(v65), __e - 11);
      }
      std::function<float ()(float)>::operator()(a13, v63);
      if (v66 == INFINITY)
      {
        LOBYTE(v67) = -1;
      }
      else if (v66 == -INFINITY)
      {
        LOBYTE(v67) = 0;
      }
      else
      {
        int v68 = llroundf(v66);
        if (v68 >= 255) {
          int v68 = 255;
        }
        int v67 = v68 & ~(v68 >> 31);
      }
      *(unsigned char *)(*a9
      if (v85 == v78) {
        goto LABEL_84;
      }
    }
  }
LABEL_88:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_210BD9464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19 = *(void **)a18;
  if (*(void *)a18)
  {
    *(void *)(a18 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<MIL::Fp16,signed char,signed char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, char a12, uint64_t a13)
{
  v94[2] = *MEMORY[0x263EF8340];
  char v13 = *a3;
  uint64_t v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F) {
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  }
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F) {
  uint64_t v18 = v14 >> 3;
  }
  if (v18 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v94, 2);
  }
  else if (v18 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v19 = *a4;
  uint64_t v20 = (a4[1] - *a4) >> 3;
  if (v20 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, (char *)v94, 2);
  }
  else if (v20 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v21 = *a5;
  uint64_t v22 = a5[1] - *a5;
  if (v22 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, (char *)v94, 2);
  }
  else if (v22 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6) {
    std::vector<unsigned char>::__append(a9, a6);
  }
  unint64_t v74 = (*a3)[1];
  unint64_t v75 = **a3;
  unint64_t v73 = (*a3)[2];
  unint64_t v88 = (*a3)[4];
  unint64_t v83 = *((void *)*a4 + 1);
  unint64_t v84 = *(void *)*a4;
  unint64_t v82 = *((void *)*a4 + 2);
  uint64_t v23 = **a5;
  uint64_t v70 = (*a5)[1];
  uint64_t v71 = (*a5)[2];
  unint64_t v24 = (*a5)[4];
  uint64_t v72 = (*a5)[3];
  double v25 = ldexp(1.0, a7 + 10);
  double v26 = exp2(-(double)(a7 + 10 + a8));
  int64x2_t __src = 0uLL;
  v94[0] = 0;
  unint64_t v78 = v24;
  std::vector<float>::reserve((void **)&__src, v24);
  float v28 = v26;
  float v29 = *a10;
  float v30 = a10[1];
  if ((char *)v30 - (char *)*a10 == 4)
  {
    __int16 v91 = MIL::Fp16::FromFloat(Float, *v29);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v91);
    *(float *)&int __e = v31 * v28;
    std::vector<float>::assign((char **)&__src, v78, &__e);
  }
  else
  {
    for (; v29 != v30; ++v29)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v29);
      uint64_t Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      float v33 = v32 * v28;
      float v34 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v94[0])
      {
        uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        uint64_t v36 = (__src.i64[1] - __src.i64[0]) >> 2;
        unint64_t v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = v94[0] - __src.i64[0];
        if ((v94[0] - __src.i64[0]) >> 1 > v37) {
          unint64_t v37 = v38 >> 1;
        }
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v37;
        }
        if (v39)
        {
          unint64_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v94, v39);
          float v34 = (MIL::Fp16 *)__src.i64[1];
          uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          unint64_t v40 = 0;
        }
        char v41 = (float *)&v40[4 * v36];
        float *v41 = v33;
        float v35 = v41 + 1;
        while (v34 != Float)
        {
          int v42 = *((_DWORD *)v34 - 1);
          float v34 = (MIL::Fp16 *)((char *)v34 - 4);
          *((_DWORD *)v41-- - 1) = v42;
        }
        __src.i64[0] = (uint64_t)v41;
        __src.i64[1] = (uint64_t)v35;
        v94[0] = &v40[4 * v39];
        if (Float) {
          operator delete(Float);
        }
      }
      else
      {
        *(float *)__src.i64[1] = v33;
        float v35 = (float *)((char *)v34 + 4);
      }
      __src.i64[1] = (uint64_t)v35;
    }
  }
  uint64_t v69 = v23;
  if (v23)
  {
    unint64_t v43 = 0;
    int v79 = -20 - a7;
    float v44 = v25;
    while (!v70)
    {
LABEL_89:
      if (++v43 == v69) {
        goto LABEL_90;
      }
    }
    unint64_t v45 = 0;
    while (!v71)
    {
LABEL_88:
      if (++v45 == v70) {
        goto LABEL_89;
      }
    }
    unint64_t v46 = 0;
    while (!v72)
    {
LABEL_87:
      if (++v46 == v71) {
        goto LABEL_88;
      }
    }
    uint64_t v89 = 0;
    while (!v78)
    {
LABEL_86:
      if (++v89 == v72) {
        goto LABEL_87;
      }
    }
    uint64_t v85 = 0;
    while (1)
    {
      if (v88)
      {
        uint64_t v47 = 0;
        int v48 = 0;
        int v80 = 0;
        do
        {
          __int16 v49 = *(_WORD *)(a1
                         + 2
          if (!a11 || (char v50 = a12, v47 != *((void *)a4[1] - 2))) {
            char v50 = *(unsigned char *)(a2
          }
          if (!v48)
          {
            LOWORD(__e) = v49;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            float v52 = v51;
            int v53 = ilogbf(v51);
            if (v53 <= -14) {
              int v54 = -14;
            }
            else {
              int v54 = v53;
            }
            if (v54 >= v79)
            {
              uint64_t v55 = (int)llroundf((float)(v52 * (float)v50) * v44) + (uint64_t)v80;
              if (v55 <= 0x7FFFFFFF)
              {
                BOOL v56 = v55 < (uint64_t)0xFFFFFFFF80000000;
                if (v55 < (uint64_t)0xFFFFFFFF80000000) {
                  LODWORD(v55) = -8388608;
                }
                int v80 = v55;
                int v48 = 2 * v56;
              }
              else
              {
                int v48 = 1;
                int v80 = 2139095040;
              }
            }
            else
            {
              int v48 = 0;
            }
          }
          ++v47;
        }
        while (v88 != v47);
        float v57 = *(float *)(__src.i64[0] + 4 * v85);
        if (v48)
        {
          double v58 = INFINITY;
          if (v48 == 2) {
            double v58 = -INFINITY;
          }
          goto LABEL_73;
        }
        if (v80)
        {
          double v58 = (double)v80;
LABEL_73:
          *(float *)&int __e = 0.0;
          long double v60 = frexp(v58, &__e);
          double v61 = ldexp(v60, 11);
          float v59 = ldexp(round(v61), __e - 11);
          goto LABEL_74;
        }
      }
      else
      {
        float v57 = *(float *)(__src.i64[0] + 4 * v85);
      }
      float v59 = 0.0;
LABEL_74:
      float v62 = v57 * v59;
      float v63 = 0.0;
      if (v62 != 0.0)
      {
        *(float *)&int __e = 0.0;
        long double v64 = frexp(v62, &__e);
        double v65 = ldexp(v64, 11);
        float v63 = ldexp(round(v65), __e - 11);
      }
      std::function<float ()(float)>::operator()(a13, v63);
      if (v66 == INFINITY)
      {
        char v67 = 127;
      }
      else if (v66 == -INFINITY)
      {
        char v67 = 0x80;
      }
      else
      {
        int v68 = llroundf(v66);
        if (v68 >= 127) {
          int v68 = 127;
        }
        if (v68 <= -128) {
          char v67 = 0x80;
        }
        else {
          char v67 = v68;
        }
      }
      *(unsigned char *)(*a9
      if (v85 == v78) {
        goto LABEL_86;
      }
    }
  }
LABEL_90:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_210BD9C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19 = *(void **)a18;
  if (*(void *)a18)
  {
    *(void *)(a18 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<unsigned char,MIL::Fp16,MIL::Fp16>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, void *a9@<X8>, float **a10, char a11, int a12, __int16 a13, uint64_t a14)
{
  v97[2] = *MEMORY[0x263EF8340];
  uint64_t v14 = *a3;
  uint64_t v15 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v15 - 17) >= 0x1F) {
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  }
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F) {
  uint64_t v19 = v15 >> 3;
  }
  if (v19 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v14 + 1), __src.i8, (char *)v97, 2);
  }
  else if (v19 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v14 + 1), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v20 = *a4;
  uint64_t v21 = (a4[1] - *a4) >> 3;
  if (v21 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v20 + 8), __src.i8, (char *)v97, 2);
  }
  else if (v21 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v20 + 8), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v22 = *a5;
  uint64_t v23 = a5[1] - *a5;
  if (v23 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v22 + 1), __src.i8, (char *)v97, 2);
  }
  else if (v23 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v22 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a6);
  unint64_t v78 = (*a3)[1];
  unint64_t v79 = **a3;
  unint64_t v91 = (*a3)[4];
  unint64_t v87 = *((void *)*a4 + 1);
  unint64_t v88 = *(void *)*a4;
  unint64_t v86 = *((void *)*a4 + 2);
  uint64_t v24 = **a5;
  uint64_t v74 = (*a5)[1];
  uint64_t v75 = (*a5)[2];
  unint64_t v25 = (*a5)[4];
  uint64_t v76 = (*a5)[3];
  unint64_t v77 = (*a3)[2];
  double v26 = ldexp(1.0, a7 + 10);
  double v27 = exp2(-(double)(a7 + 10 + a8));
  int64x2_t __src = 0uLL;
  v97[0] = 0;
  unint64_t v82 = v25;
  std::vector<float>::reserve((void **)&__src, v25);
  float v29 = v27;
  float v30 = *a10;
  float v31 = a10[1];
  if ((char *)v31 - (char *)*a10 == 4)
  {
    __int16 v94 = MIL::Fp16::FromFloat(Float, *v30);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v94);
    *(float *)&int __e = v32 * v29;
    std::vector<float>::assign((char **)&__src, v82, &__e);
  }
  else
  {
    for (; v30 != v31; ++v30)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v30);
      uint64_t Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      float v34 = v33 * v29;
      float v35 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v97[0])
      {
        uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        uint64_t v37 = (__src.i64[1] - __src.i64[0]) >> 2;
        unint64_t v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v39 = v97[0] - __src.i64[0];
        if ((v97[0] - __src.i64[0]) >> 1 > v38) {
          unint64_t v38 = v39 >> 1;
        }
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v38;
        }
        if (v40)
        {
          char v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v97, v40);
          float v35 = (MIL::Fp16 *)__src.i64[1];
          uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          char v41 = 0;
        }
        int v42 = (float *)&v41[4 * v37];
        *int v42 = v34;
        uint64_t v36 = v42 + 1;
        while (v35 != Float)
        {
          int v43 = *((_DWORD *)v35 - 1);
          float v35 = (MIL::Fp16 *)((char *)v35 - 4);
          *((_DWORD *)v42-- - 1) = v43;
        }
        __src.i64[0] = (uint64_t)v42;
        __src.i64[1] = (uint64_t)v36;
        v97[0] = &v41[4 * v40];
        if (Float) {
          operator delete(Float);
        }
      }
      else
      {
        *(float *)__src.i64[1] = v34;
        uint64_t v36 = (float *)((char *)v35 + 4);
      }
      __src.i64[1] = (uint64_t)v36;
    }
  }
  if (v24)
  {
    unint64_t v44 = 0;
    int v83 = -20 - a7;
    float v45 = v26;
    uint64_t v73 = v24;
    while (!v74)
    {
LABEL_78:
      if (++v44 == v73) {
        goto LABEL_79;
      }
    }
    unint64_t v46 = 0;
    while (!v75)
    {
LABEL_77:
      if (++v46 == v74) {
        goto LABEL_78;
      }
    }
    unint64_t v47 = 0;
    while (!v76)
    {
LABEL_76:
      if (++v47 == v75) {
        goto LABEL_77;
      }
    }
    uint64_t v92 = 0;
    while (!v82)
    {
LABEL_75:
      if (++v92 == v76) {
        goto LABEL_76;
      }
    }
    uint64_t v48 = 0;
    while (1)
    {
      if (v91)
      {
        uint64_t v49 = 0;
        int v50 = 0;
        int v84 = 0;
        do
        {
          unsigned int v51 = *(unsigned __int8 *)(a1
          if (!a11 || (__int16 v52 = a13, v49 != *((void *)a4[1] - 2))) {
            __int16 v52 = *(_WORD *)(a2
          }
                           + 2
          if (!v50)
          {
            LOWORD(__e) = v52;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            float v54 = v53;
            LOWORD(__e) = 0;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            float v56 = v54 - v55;
            int v57 = ilogbf(v56);
            if (v57 <= -14) {
              int v58 = -14;
            }
            else {
              int v58 = v57;
            }
            if (v58 >= v83)
            {
              uint64_t v59 = (int)llroundf((float)(v56 * (float)v51) * v45) + (uint64_t)v84;
              if (v59 <= 0x7FFFFFFF)
              {
                BOOL v60 = v59 < (uint64_t)0xFFFFFFFF80000000;
                if (v59 < (uint64_t)0xFFFFFFFF80000000) {
                  LODWORD(v59) = -8388608;
                }
                int v84 = v59;
                int v50 = 2 * v60;
              }
              else
              {
                int v50 = 1;
                int v84 = 2139095040;
              }
            }
            else
            {
              int v50 = 0;
            }
          }
          ++v49;
        }
        while (v91 != v49);
        float v61 = *(float *)(__src.i64[0] + 4 * v48);
        if (v50)
        {
          double v62 = INFINITY;
          if (v50 == 2) {
            double v62 = -INFINITY;
          }
          goto LABEL_71;
        }
        if (v84)
        {
          double v62 = (double)v84;
LABEL_71:
          *(float *)&int __e = 0.0;
          long double v64 = frexp(v62, &__e);
          double v65 = ldexp(v64, 11);
          float v63 = ldexp(round(v65), __e - 11);
          goto LABEL_72;
        }
      }
      else
      {
        float v61 = *(float *)(__src.i64[0] + 4 * v48);
      }
      float v63 = 0.0;
LABEL_72:
      float v66 = v61 * v63;
      float v67 = 0.0;
      if (v66 != 0.0)
      {
        *(float *)&int __e = 0.0;
        long double v68 = frexp(v66, &__e);
        double v69 = ldexp(v68, 11);
        float v67 = ldexp(round(v69), __e - 11);
      }
      uint64_t v70 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(a14, v67);
      __int16 v72 = MIL::Fp16::FromFloat(v70, v71);
      *(_WORD *)(*a9
               + 2
      if (v48 == v82) {
        goto LABEL_75;
      }
    }
  }
LABEL_79:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_210BDA3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v19 = *(void **)(v17 - 160);
  if (v19)
  {
    *(void *)(v17 - 152) = v19;
    operator delete(v19);
  }
  uint64_t v20 = *(void **)a17;
  if (*(void *)a17)
  {
    *(void *)(a17 + 8) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<unsigned char,MIL::Fp16,unsigned char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, int a12, __int16 a13, __int16 a14, uint64_t a15)
{
  v98[2] = *MEMORY[0x263EF8340];
  uint64_t v15 = *a3;
  uint64_t v16 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v16 - 17) >= 0x1F) {
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  }
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F) {
  uint64_t v20 = v16 >> 3;
  }
  if (v20 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v15 + 1), __src.i8, (char *)v98, 2);
  }
  else if (v20 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v15 + 1), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v21 = *a4;
  uint64_t v22 = (a4[1] - *a4) >> 3;
  if (v22 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v21 + 8), __src.i8, (char *)v98, 2);
  }
  else if (v22 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v21 + 8), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v23 = *a5;
  uint64_t v24 = a5[1] - *a5;
  if (v24 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v23 + 1), __src.i8, (char *)v98, 2);
  }
  else if (v24 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v23 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6) {
    std::vector<unsigned char>::__append(a9, a6);
  }
  unint64_t v79 = (*a3)[1];
  unint64_t v80 = **a3;
  unint64_t v92 = (*a3)[4];
  unint64_t v88 = *((void *)*a4 + 1);
  unint64_t v89 = *(void *)*a4;
  unint64_t v87 = *((void *)*a4 + 2);
  uint64_t v25 = **a5;
  uint64_t v75 = (*a5)[1];
  uint64_t v76 = (*a5)[2];
  unint64_t v26 = (*a5)[4];
  uint64_t v77 = (*a5)[3];
  unint64_t v78 = (*a3)[2];
  double v27 = ldexp(1.0, a7 + 10);
  double v28 = exp2(-(double)(a7 + 10 + a8));
  int64x2_t __src = 0uLL;
  v98[0] = 0;
  unint64_t v83 = v26;
  std::vector<float>::reserve((void **)&__src, v26);
  float v30 = v28;
  float v31 = *a10;
  float v32 = a10[1];
  if ((char *)v32 - (char *)*a10 == 4)
  {
    __int16 v95 = MIL::Fp16::FromFloat(Float, *v31);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v95);
    *(float *)&int __e = v33 * v30;
    std::vector<float>::assign((char **)&__src, v83, &__e);
  }
  else
  {
    for (; v31 != v32; ++v31)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v31);
      uint64_t Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      float v35 = v34 * v30;
      uint64_t v36 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v98[0])
      {
        uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        uint64_t v38 = (__src.i64[1] - __src.i64[0]) >> 2;
        unint64_t v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v40 = v98[0] - __src.i64[0];
        if ((v98[0] - __src.i64[0]) >> 1 > v39) {
          unint64_t v39 = v40 >> 1;
        }
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v39;
        }
        if (v41)
        {
          int v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v98, v41);
          uint64_t v36 = (MIL::Fp16 *)__src.i64[1];
          uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          int v42 = 0;
        }
        int v43 = (float *)&v42[4 * v38];
        *int v43 = v35;
        uint64_t v37 = v43 + 1;
        while (v36 != Float)
        {
          int v44 = *((_DWORD *)v36 - 1);
          uint64_t v36 = (MIL::Fp16 *)((char *)v36 - 4);
          *((_DWORD *)v43-- - 1) = v44;
        }
        __src.i64[0] = (uint64_t)v43;
        __src.i64[1] = (uint64_t)v37;
        v98[0] = &v42[4 * v41];
        if (Float) {
          operator delete(Float);
        }
      }
      else
      {
        *(float *)__src.i64[1] = v35;
        uint64_t v37 = (float *)((char *)v36 + 4);
      }
      __src.i64[1] = (uint64_t)v37;
    }
  }
  if (v25)
  {
    unint64_t v45 = 0;
    int v84 = -20 - a7;
    float v46 = v27;
    uint64_t v74 = v25;
    while (!v75)
    {
LABEL_87:
      if (++v45 == v74) {
        goto LABEL_88;
      }
    }
    unint64_t v47 = 0;
    while (!v76)
    {
LABEL_86:
      if (++v47 == v75) {
        goto LABEL_87;
      }
    }
    unint64_t v48 = 0;
    while (!v77)
    {
LABEL_85:
      if (++v48 == v76) {
        goto LABEL_86;
      }
    }
    uint64_t v93 = 0;
    while (!v83)
    {
LABEL_84:
      if (++v93 == v77) {
        goto LABEL_85;
      }
    }
    uint64_t v49 = 0;
    while (1)
    {
      if (v92)
      {
        uint64_t v50 = 0;
        int v51 = 0;
        int v85 = 0;
        do
        {
          unsigned int v52 = *(unsigned __int8 *)(a1
          if (!a11 || (__int16 v53 = a13, v50 != *((void *)a4[1] - 2))) {
            __int16 v53 = *(_WORD *)(a2
          }
                           + 2
          if (!v51)
          {
            LOWORD(__e) = v53;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            float v55 = v54;
            LOWORD(__e) = 0;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            float v57 = v55 - v56;
            int v58 = ilogbf(v57);
            if (v58 <= -14) {
              int v59 = -14;
            }
            else {
              int v59 = v58;
            }
            if (v59 >= v84)
            {
              uint64_t v60 = (int)llroundf((float)(v57 * (float)v52) * v46) + (uint64_t)v85;
              if (v60 <= 0x7FFFFFFF)
              {
                BOOL v61 = v60 < (uint64_t)0xFFFFFFFF80000000;
                if (v60 < (uint64_t)0xFFFFFFFF80000000) {
                  LODWORD(v60) = -8388608;
                }
                int v85 = v60;
                int v51 = 2 * v61;
              }
              else
              {
                int v51 = 1;
                int v85 = 2139095040;
              }
            }
            else
            {
              int v51 = 0;
            }
          }
          ++v50;
        }
        while (v92 != v50);
        float v62 = *(float *)(__src.i64[0] + 4 * v49);
        if (v51)
        {
          double v63 = INFINITY;
          if (v51 == 2) {
            double v63 = -INFINITY;
          }
          goto LABEL_73;
        }
        if (v85)
        {
          double v63 = (double)v85;
LABEL_73:
          *(float *)&int __e = 0.0;
          long double v65 = frexp(v63, &__e);
          double v66 = ldexp(v65, 11);
          float v64 = ldexp(round(v66), __e - 11);
          goto LABEL_74;
        }
      }
      else
      {
        float v62 = *(float *)(__src.i64[0] + 4 * v49);
      }
      float v64 = 0.0;
LABEL_74:
      float v67 = v62 * v64;
      float v68 = 0.0;
      if (v67 != 0.0)
      {
        *(float *)&int __e = 0.0;
        long double v69 = frexp(v67, &__e);
        double v70 = ldexp(v69, 11);
        float v68 = ldexp(round(v70), __e - 11);
      }
      std::function<float ()(float)>::operator()(a15, v68);
      if (v71 == INFINITY)
      {
        LOBYTE(v72) = -1;
      }
      else if (v71 == -INFINITY)
      {
        LOBYTE(v72) = 0;
      }
      else
      {
        int v73 = llroundf(v71);
        if (v73 >= 255) {
          int v73 = 255;
        }
        int v72 = v73 & ~(v73 >> 31);
      }
      *(unsigned char *)(*a9
      if (v49 == v83) {
        goto LABEL_84;
      }
    }
  }
LABEL_88:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_210BDAB64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v18 = *(void **)a17;
  if (*(void *)a17)
  {
    *(void *)(a17 + 8) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<unsigned char,MIL::Fp16,signed char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, int a12, __int16 a13, __int16 a14, uint64_t a15)
{
  v98[2] = *MEMORY[0x263EF8340];
  uint64_t v15 = *a3;
  uint64_t v16 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v16 - 17) >= 0x1F) {
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  }
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F) {
  uint64_t v20 = v16 >> 3;
  }
  if (v20 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v15 + 1), __src.i8, (char *)v98, 2);
  }
  else if (v20 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v15 + 1), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v21 = *a4;
  uint64_t v22 = (a4[1] - *a4) >> 3;
  if (v22 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v21 + 8), __src.i8, (char *)v98, 2);
  }
  else if (v22 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v21 + 8), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v23 = *a5;
  uint64_t v24 = a5[1] - *a5;
  if (v24 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v23 + 1), __src.i8, (char *)v98, 2);
  }
  else if (v24 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v23 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6) {
    std::vector<unsigned char>::__append(a9, a6);
  }
  unint64_t v79 = (*a3)[1];
  unint64_t v80 = **a3;
  unint64_t v92 = (*a3)[4];
  unint64_t v88 = *((void *)*a4 + 1);
  unint64_t v89 = *(void *)*a4;
  unint64_t v87 = *((void *)*a4 + 2);
  uint64_t v25 = **a5;
  uint64_t v75 = (*a5)[1];
  uint64_t v76 = (*a5)[2];
  unint64_t v26 = (*a5)[4];
  uint64_t v77 = (*a5)[3];
  unint64_t v78 = (*a3)[2];
  double v27 = ldexp(1.0, a7 + 10);
  double v28 = exp2(-(double)(a7 + 10 + a8));
  int64x2_t __src = 0uLL;
  v98[0] = 0;
  unint64_t v83 = v26;
  std::vector<float>::reserve((void **)&__src, v26);
  float v30 = v28;
  float v31 = *a10;
  float v32 = a10[1];
  if ((char *)v32 - (char *)*a10 == 4)
  {
    __int16 v95 = MIL::Fp16::FromFloat(Float, *v31);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v95);
    *(float *)&int __e = v33 * v30;
    std::vector<float>::assign((char **)&__src, v83, &__e);
  }
  else
  {
    for (; v31 != v32; ++v31)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v31);
      uint64_t Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      float v35 = v34 * v30;
      uint64_t v36 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v98[0])
      {
        uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        uint64_t v38 = (__src.i64[1] - __src.i64[0]) >> 2;
        unint64_t v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v40 = v98[0] - __src.i64[0];
        if ((v98[0] - __src.i64[0]) >> 1 > v39) {
          unint64_t v39 = v40 >> 1;
        }
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v39;
        }
        if (v41)
        {
          int v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v98, v41);
          uint64_t v36 = (MIL::Fp16 *)__src.i64[1];
          uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          int v42 = 0;
        }
        int v43 = (float *)&v42[4 * v38];
        *int v43 = v35;
        uint64_t v37 = v43 + 1;
        while (v36 != Float)
        {
          int v44 = *((_DWORD *)v36 - 1);
          uint64_t v36 = (MIL::Fp16 *)((char *)v36 - 4);
          *((_DWORD *)v43-- - 1) = v44;
        }
        __src.i64[0] = (uint64_t)v43;
        __src.i64[1] = (uint64_t)v37;
        v98[0] = &v42[4 * v41];
        if (Float) {
          operator delete(Float);
        }
      }
      else
      {
        *(float *)__src.i64[1] = v35;
        uint64_t v37 = (float *)((char *)v36 + 4);
      }
      __src.i64[1] = (uint64_t)v37;
    }
  }
  if (v25)
  {
    unint64_t v45 = 0;
    int v84 = -20 - a7;
    float v46 = v27;
    uint64_t v74 = v25;
    while (!v75)
    {
LABEL_89:
      if (++v45 == v74) {
        goto LABEL_90;
      }
    }
    unint64_t v47 = 0;
    while (!v76)
    {
LABEL_88:
      if (++v47 == v75) {
        goto LABEL_89;
      }
    }
    unint64_t v48 = 0;
    while (!v77)
    {
LABEL_87:
      if (++v48 == v76) {
        goto LABEL_88;
      }
    }
    uint64_t v93 = 0;
    while (!v83)
    {
LABEL_86:
      if (++v93 == v77) {
        goto LABEL_87;
      }
    }
    uint64_t v49 = 0;
    while (1)
    {
      if (v92)
      {
        uint64_t v50 = 0;
        int v51 = 0;
        int v85 = 0;
        do
        {
          unsigned int v52 = *(unsigned __int8 *)(a1
          if (!a11 || (__int16 v53 = a13, v50 != *((void *)a4[1] - 2))) {
            __int16 v53 = *(_WORD *)(a2
          }
                           + 2
          if (!v51)
          {
            LOWORD(__e) = v53;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            float v55 = v54;
            LOWORD(__e) = 0;
            MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
            float v57 = v55 - v56;
            int v58 = ilogbf(v57);
            if (v58 <= -14) {
              int v59 = -14;
            }
            else {
              int v59 = v58;
            }
            if (v59 >= v84)
            {
              uint64_t v60 = (int)llroundf((float)(v57 * (float)v52) * v46) + (uint64_t)v85;
              if (v60 <= 0x7FFFFFFF)
              {
                BOOL v61 = v60 < (uint64_t)0xFFFFFFFF80000000;
                if (v60 < (uint64_t)0xFFFFFFFF80000000) {
                  LODWORD(v60) = -8388608;
                }
                int v85 = v60;
                int v51 = 2 * v61;
              }
              else
              {
                int v51 = 1;
                int v85 = 2139095040;
              }
            }
            else
            {
              int v51 = 0;
            }
          }
          ++v50;
        }
        while (v92 != v50);
        float v62 = *(float *)(__src.i64[0] + 4 * v49);
        if (v51)
        {
          double v63 = INFINITY;
          if (v51 == 2) {
            double v63 = -INFINITY;
          }
          goto LABEL_73;
        }
        if (v85)
        {
          double v63 = (double)v85;
LABEL_73:
          *(float *)&int __e = 0.0;
          long double v65 = frexp(v63, &__e);
          double v66 = ldexp(v65, 11);
          float v64 = ldexp(round(v66), __e - 11);
          goto LABEL_74;
        }
      }
      else
      {
        float v62 = *(float *)(__src.i64[0] + 4 * v49);
      }
      float v64 = 0.0;
LABEL_74:
      float v67 = v62 * v64;
      float v68 = 0.0;
      if (v67 != 0.0)
      {
        *(float *)&int __e = 0.0;
        long double v69 = frexp(v67, &__e);
        double v70 = ldexp(v69, 11);
        float v68 = ldexp(round(v70), __e - 11);
      }
      std::function<float ()(float)>::operator()(a15, v68);
      if (v71 == INFINITY)
      {
        char v72 = 127;
      }
      else if (v71 == -INFINITY)
      {
        char v72 = 0x80;
      }
      else
      {
        int v73 = llroundf(v71);
        if (v73 >= 127) {
          int v73 = 127;
        }
        if (v73 <= -128) {
          char v72 = 0x80;
        }
        else {
          char v72 = v73;
        }
      }
      *(unsigned char *)(*a9
      if (v49 == v83) {
        goto LABEL_86;
      }
    }
  }
LABEL_90:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_210BDB328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v18 = *(void **)a17;
  if (*(void *)a17)
  {
    *(void *)(a17 + 8) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<unsigned char,unsigned char,MIL::Fp16>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, void *a9@<X8>, float **a10, char a11, unsigned __int8 a12, uint64_t a13)
{
  v87[2] = *MEMORY[0x263EF8340];
  char v13 = *a3;
  uint64_t v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F) {
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  }
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F) {
  uint64_t v17 = v14 >> 3;
  }
  if (v17 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v87, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v18 = *a4;
  uint64_t v19 = (a4[1] - *a4) >> 3;
  if (v19 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, (char *)v87, 2);
  }
  else if (v19 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v20 = *a5;
  uint64_t v21 = a5[1] - *a5;
  if (v21 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, (char *)v87, 2);
  }
  else if (v21 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a6);
  unint64_t v68 = (*a3)[1];
  unint64_t v69 = **a3;
  unint64_t v67 = (*a3)[2];
  unint64_t v81 = (*a3)[4];
  unint64_t v75 = *((void *)*a4 + 1);
  unint64_t v76 = *(void *)*a4;
  unint64_t v74 = *((void *)*a4 + 2);
  uint64_t v22 = **a5;
  uint64_t v64 = (*a5)[1];
  uint64_t v65 = (*a5)[2];
  unint64_t v23 = (*a5)[4];
  uint64_t v66 = (*a5)[3];
  double v24 = ldexp(1.0, a7);
  double v25 = exp2(-(double)(a8 + a7));
  int64x2_t __src = 0uLL;
  v87[0] = 0;
  unint64_t v72 = v23;
  std::vector<float>::reserve((void **)&__src, v23);
  float v27 = v25;
  double v28 = *a10;
  float v29 = a10[1];
  if ((char *)v29 - (char *)*a10 == 4)
  {
    __int16 v84 = MIL::Fp16::FromFloat(Float, *v28);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v84);
    *(float *)&int v85 = v30 * v27;
    std::vector<float>::assign((char **)&__src, v72, &v85);
  }
  else
  {
    for (; v28 != v29; ++v28)
    {
      LOWORD(v85) = MIL::Fp16::FromFloat(Float, *v28);
      uint64_t Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v85);
      float v32 = v31 * v27;
      float v33 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v87[0])
      {
        uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        uint64_t v35 = (__src.i64[1] - __src.i64[0]) >> 2;
        unint64_t v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v37 = v87[0] - __src.i64[0];
        if ((v87[0] - __src.i64[0]) >> 1 > v36) {
          unint64_t v36 = v37 >> 1;
        }
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v36;
        }
        if (v38)
        {
          unint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v87, v38);
          float v33 = (MIL::Fp16 *)__src.i64[1];
          uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          unint64_t v39 = 0;
        }
        uint64_t v40 = (float *)&v39[4 * v35];
        float *v40 = v32;
        float v34 = v40 + 1;
        while (v33 != Float)
        {
          int v41 = *((_DWORD *)v33 - 1);
          float v33 = (MIL::Fp16 *)((char *)v33 - 4);
          *((_DWORD *)v40-- - 1) = v41;
        }
        __src.i64[0] = (uint64_t)v40;
        __src.i64[1] = (uint64_t)v34;
        v87[0] = &v39[4 * v38];
        if (Float) {
          operator delete(Float);
        }
      }
      else
      {
        *(float *)__src.i64[1] = v32;
        float v34 = (float *)((char *)v33 + 4);
      }
      __src.i64[1] = (uint64_t)v34;
    }
  }
  if (v22)
  {
    unint64_t v42 = 0;
    float v43 = v24;
    while (!v64)
    {
LABEL_75:
      if (++v42 == v22) {
        goto LABEL_76;
      }
    }
    unint64_t v44 = 0;
    while (!v65)
    {
LABEL_74:
      if (++v44 == v64) {
        goto LABEL_75;
      }
    }
    unint64_t v45 = 0;
    while (!v66)
    {
LABEL_73:
      if (++v45 == v65) {
        goto LABEL_74;
      }
    }
    uint64_t v82 = 0;
    while (!v72)
    {
LABEL_72:
      if (++v82 == v66) {
        goto LABEL_73;
      }
    }
    uint64_t v78 = 0;
    while (1)
    {
      if (v81)
      {
        uint64_t v46 = 0;
        int v47 = 0;
        int v48 = 0;
        do
        {
          unsigned int v49 = *(unsigned __int8 *)(a1
          if (!a11 || (unsigned int v50 = a12, v46 != *((void *)a4[1] - 2))) {
            unsigned int v50 = *(unsigned __int8 *)(a2
          }
          if (!v47 && a7 >= -20)
          {
            uint64_t v51 = (int)llroundf((float)((float)v49 * (float)v50) * v43) + (uint64_t)v48;
            if (v51 <= 0x7FFFFFFF)
            {
              if (v51 >= (uint64_t)0xFFFFFFFF80000000) {
                int v48 = v51;
              }
              else {
                int v48 = -8388608;
              }
              int v47 = 2 * (v51 < (uint64_t)0xFFFFFFFF80000000);
            }
            else
            {
              int v47 = 1;
              int v48 = 2139095040;
            }
          }
          ++v46;
        }
        while (v81 != v46);
        float v52 = *(float *)(__src.i64[0] + 4 * v78);
        if (v47)
        {
          double v53 = INFINITY;
          if (v47 == 2) {
            double v53 = -INFINITY;
          }
          goto LABEL_68;
        }
        if (v48)
        {
          double v53 = (double)v48;
LABEL_68:
          *(float *)&int v85 = 0.0;
          long double v55 = frexp(v53, &v85);
          double v56 = ldexp(v55, 11);
          float v54 = ldexp(round(v56), v85 - 11);
          goto LABEL_69;
        }
      }
      else
      {
        float v52 = *(float *)(__src.i64[0] + 4 * v78);
      }
      float v54 = 0.0;
LABEL_69:
      float v57 = v52 * v54;
      float v58 = 0.0;
      if (v57 != 0.0)
      {
        *(float *)&int v85 = 0.0;
        long double v59 = frexp(v57, &v85);
        double v60 = ldexp(v59, 11);
        float v58 = ldexp(round(v60), v85 - 11);
      }
      BOOL v61 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(a13, v58);
      __int16 v63 = MIL::Fp16::FromFloat(v61, v62);
      *(_WORD *)(*a9
               + 2
      if (v78 == v72) {
        goto LABEL_72;
      }
    }
  }
LABEL_76:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_210BDBA64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v20 = *(void **)(v18 - 160);
  if (v20)
  {
    *(void *)(v18 - 152) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *(void **)a18;
  if (*(void *)a18)
  {
    *(void *)(a18 + 8) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<unsigned char,unsigned char,unsigned char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, unsigned __int8 a12, uint64_t a13)
{
  v87[2] = *MEMORY[0x263EF8340];
  char v13 = *a3;
  uint64_t v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F) {
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  }
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F) {
  uint64_t v17 = v14 >> 3;
  }
  if (v17 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v87, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v18 = *a4;
  uint64_t v19 = (a4[1] - *a4) >> 3;
  if (v19 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, (char *)v87, 2);
  }
  else if (v19 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v20 = *a5;
  uint64_t v21 = a5[1] - *a5;
  if (v21 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, (char *)v87, 2);
  }
  else if (v21 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6) {
    std::vector<unsigned char>::__append(a9, a6);
  }
  unint64_t v68 = (*a3)[1];
  unint64_t v69 = **a3;
  unint64_t v67 = (*a3)[2];
  unint64_t v81 = (*a3)[4];
  unint64_t v75 = *((void *)*a4 + 1);
  unint64_t v76 = *(void *)*a4;
  unint64_t v74 = *((void *)*a4 + 2);
  uint64_t v22 = **a5;
  uint64_t v64 = (*a5)[1];
  uint64_t v65 = (*a5)[2];
  unint64_t v23 = (*a5)[4];
  uint64_t v66 = (*a5)[3];
  double v24 = ldexp(1.0, a7);
  double v25 = exp2(-(double)(a8 + a7));
  int64x2_t __src = 0uLL;
  v87[0] = 0;
  unint64_t v72 = v23;
  std::vector<float>::reserve((void **)&__src, v23);
  float v27 = v25;
  double v28 = *a10;
  float v29 = a10[1];
  if ((char *)v29 - (char *)*a10 == 4)
  {
    __int16 v84 = MIL::Fp16::FromFloat(Float, *v28);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v84);
    *(float *)&int v85 = v30 * v27;
    std::vector<float>::assign((char **)&__src, v72, &v85);
  }
  else
  {
    for (; v28 != v29; ++v28)
    {
      LOWORD(v85) = MIL::Fp16::FromFloat(Float, *v28);
      uint64_t Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v85);
      float v32 = v31 * v27;
      float v33 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v87[0])
      {
        uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        uint64_t v35 = (__src.i64[1] - __src.i64[0]) >> 2;
        unint64_t v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v37 = v87[0] - __src.i64[0];
        if ((v87[0] - __src.i64[0]) >> 1 > v36) {
          unint64_t v36 = v37 >> 1;
        }
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v36;
        }
        if (v38)
        {
          unint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v87, v38);
          float v33 = (MIL::Fp16 *)__src.i64[1];
          uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          unint64_t v39 = 0;
        }
        uint64_t v40 = (float *)&v39[4 * v35];
        float *v40 = v32;
        float v34 = v40 + 1;
        while (v33 != Float)
        {
          int v41 = *((_DWORD *)v33 - 1);
          float v33 = (MIL::Fp16 *)((char *)v33 - 4);
          *((_DWORD *)v40-- - 1) = v41;
        }
        __src.i64[0] = (uint64_t)v40;
        __src.i64[1] = (uint64_t)v34;
        v87[0] = &v39[4 * v38];
        if (Float) {
          operator delete(Float);
        }
      }
      else
      {
        *(float *)__src.i64[1] = v32;
        float v34 = (float *)((char *)v33 + 4);
      }
      __src.i64[1] = (uint64_t)v34;
    }
  }
  if (v22)
  {
    unint64_t v42 = 0;
    float v43 = v24;
    while (!v64)
    {
LABEL_84:
      if (++v42 == v22) {
        goto LABEL_85;
      }
    }
    unint64_t v44 = 0;
    while (!v65)
    {
LABEL_83:
      if (++v44 == v64) {
        goto LABEL_84;
      }
    }
    unint64_t v45 = 0;
    while (!v66)
    {
LABEL_82:
      if (++v45 == v65) {
        goto LABEL_83;
      }
    }
    uint64_t v82 = 0;
    while (!v72)
    {
LABEL_81:
      if (++v82 == v66) {
        goto LABEL_82;
      }
    }
    uint64_t v78 = 0;
    while (1)
    {
      if (v81)
      {
        uint64_t v46 = 0;
        int v47 = 0;
        int v48 = 0;
        do
        {
          unsigned int v49 = *(unsigned __int8 *)(a1
          if (!a11 || (unsigned int v50 = a12, v46 != *((void *)a4[1] - 2))) {
            unsigned int v50 = *(unsigned __int8 *)(a2
          }
          if (!v47 && a7 >= -20)
          {
            uint64_t v51 = (int)llroundf((float)((float)v49 * (float)v50) * v43) + (uint64_t)v48;
            if (v51 <= 0x7FFFFFFF)
            {
              if (v51 >= (uint64_t)0xFFFFFFFF80000000) {
                int v48 = v51;
              }
              else {
                int v48 = -8388608;
              }
              int v47 = 2 * (v51 < (uint64_t)0xFFFFFFFF80000000);
            }
            else
            {
              int v47 = 1;
              int v48 = 2139095040;
            }
          }
          ++v46;
        }
        while (v81 != v46);
        float v52 = *(float *)(__src.i64[0] + 4 * v78);
        if (v47)
        {
          double v53 = INFINITY;
          if (v47 == 2) {
            double v53 = -INFINITY;
          }
          goto LABEL_70;
        }
        if (v48)
        {
          double v53 = (double)v48;
LABEL_70:
          *(float *)&int v85 = 0.0;
          long double v55 = frexp(v53, &v85);
          double v56 = ldexp(v55, 11);
          float v54 = ldexp(round(v56), v85 - 11);
          goto LABEL_71;
        }
      }
      else
      {
        float v52 = *(float *)(__src.i64[0] + 4 * v78);
      }
      float v54 = 0.0;
LABEL_71:
      float v57 = v52 * v54;
      float v58 = 0.0;
      if (v57 != 0.0)
      {
        *(float *)&int v85 = 0.0;
        long double v59 = frexp(v57, &v85);
        double v60 = ldexp(v59, 11);
        float v58 = ldexp(round(v60), v85 - 11);
      }
      std::function<float ()(float)>::operator()(a13, v58);
      if (v61 == INFINITY)
      {
        LOBYTE(v62) = -1;
      }
      else if (v61 == -INFINITY)
      {
        LOBYTE(v62) = 0;
      }
      else
      {
        int v63 = llroundf(v61);
        if (v63 >= 255) {
          int v63 = 255;
        }
        int v62 = v63 & ~(v63 >> 31);
      }
      *(unsigned char *)(*a9
      if (v78 == v72) {
        goto LABEL_81;
      }
    }
  }
LABEL_85:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_210BDC1E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19 = *(void **)a18;
  if (*(void *)a18)
  {
    *(void *)(a18 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<unsigned char,unsigned char,signed char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, unsigned __int8 a12, uint64_t a13)
{
  v87[2] = *MEMORY[0x263EF8340];
  char v13 = *a3;
  uint64_t v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F) {
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  }
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F) {
  uint64_t v17 = v14 >> 3;
  }
  if (v17 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v87, 2);
  }
  else if (v17 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v18 = *a4;
  uint64_t v19 = (a4[1] - *a4) >> 3;
  if (v19 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, (char *)v87, 2);
  }
  else if (v19 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v18 + 8), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v20 = *a5;
  uint64_t v21 = a5[1] - *a5;
  if (v21 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, (char *)v87, 2);
  }
  else if (v21 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v20 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6) {
    std::vector<unsigned char>::__append(a9, a6);
  }
  unint64_t v68 = (*a3)[1];
  unint64_t v69 = **a3;
  unint64_t v67 = (*a3)[2];
  unint64_t v81 = (*a3)[4];
  unint64_t v75 = *((void *)*a4 + 1);
  unint64_t v76 = *(void *)*a4;
  unint64_t v74 = *((void *)*a4 + 2);
  uint64_t v22 = **a5;
  uint64_t v64 = (*a5)[1];
  uint64_t v65 = (*a5)[2];
  unint64_t v23 = (*a5)[4];
  uint64_t v66 = (*a5)[3];
  double v24 = ldexp(1.0, a7);
  double v25 = exp2(-(double)(a8 + a7));
  int64x2_t __src = 0uLL;
  v87[0] = 0;
  unint64_t v72 = v23;
  std::vector<float>::reserve((void **)&__src, v23);
  float v27 = v25;
  double v28 = *a10;
  float v29 = a10[1];
  if ((char *)v29 - (char *)*a10 == 4)
  {
    __int16 v84 = MIL::Fp16::FromFloat(Float, *v28);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v84);
    *(float *)&int v85 = v30 * v27;
    std::vector<float>::assign((char **)&__src, v72, &v85);
  }
  else
  {
    for (; v28 != v29; ++v28)
    {
      LOWORD(v85) = MIL::Fp16::FromFloat(Float, *v28);
      uint64_t Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&v85);
      float v32 = v31 * v27;
      float v33 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v87[0])
      {
        uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        uint64_t v35 = (__src.i64[1] - __src.i64[0]) >> 2;
        unint64_t v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v37 = v87[0] - __src.i64[0];
        if ((v87[0] - __src.i64[0]) >> 1 > v36) {
          unint64_t v36 = v37 >> 1;
        }
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v36;
        }
        if (v38)
        {
          unint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v87, v38);
          float v33 = (MIL::Fp16 *)__src.i64[1];
          uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          unint64_t v39 = 0;
        }
        uint64_t v40 = (float *)&v39[4 * v35];
        float *v40 = v32;
        float v34 = v40 + 1;
        while (v33 != Float)
        {
          int v41 = *((_DWORD *)v33 - 1);
          float v33 = (MIL::Fp16 *)((char *)v33 - 4);
          *((_DWORD *)v40-- - 1) = v41;
        }
        __src.i64[0] = (uint64_t)v40;
        __src.i64[1] = (uint64_t)v34;
        v87[0] = &v39[4 * v38];
        if (Float) {
          operator delete(Float);
        }
      }
      else
      {
        *(float *)__src.i64[1] = v32;
        float v34 = (float *)((char *)v33 + 4);
      }
      __src.i64[1] = (uint64_t)v34;
    }
  }
  if (v22)
  {
    unint64_t v42 = 0;
    float v43 = v24;
    while (!v64)
    {
LABEL_86:
      if (++v42 == v22) {
        goto LABEL_87;
      }
    }
    unint64_t v44 = 0;
    while (!v65)
    {
LABEL_85:
      if (++v44 == v64) {
        goto LABEL_86;
      }
    }
    unint64_t v45 = 0;
    while (!v66)
    {
LABEL_84:
      if (++v45 == v65) {
        goto LABEL_85;
      }
    }
    uint64_t v82 = 0;
    while (!v72)
    {
LABEL_83:
      if (++v82 == v66) {
        goto LABEL_84;
      }
    }
    uint64_t v78 = 0;
    while (1)
    {
      if (v81)
      {
        uint64_t v46 = 0;
        int v47 = 0;
        int v48 = 0;
        do
        {
          unsigned int v49 = *(unsigned __int8 *)(a1
          if (!a11 || (unsigned int v50 = a12, v46 != *((void *)a4[1] - 2))) {
            unsigned int v50 = *(unsigned __int8 *)(a2
          }
          if (!v47 && a7 >= -20)
          {
            uint64_t v51 = (int)llroundf((float)((float)v49 * (float)v50) * v43) + (uint64_t)v48;
            if (v51 <= 0x7FFFFFFF)
            {
              if (v51 >= (uint64_t)0xFFFFFFFF80000000) {
                int v48 = v51;
              }
              else {
                int v48 = -8388608;
              }
              int v47 = 2 * (v51 < (uint64_t)0xFFFFFFFF80000000);
            }
            else
            {
              int v47 = 1;
              int v48 = 2139095040;
            }
          }
          ++v46;
        }
        while (v81 != v46);
        float v52 = *(float *)(__src.i64[0] + 4 * v78);
        if (v47)
        {
          double v53 = INFINITY;
          if (v47 == 2) {
            double v53 = -INFINITY;
          }
          goto LABEL_70;
        }
        if (v48)
        {
          double v53 = (double)v48;
LABEL_70:
          *(float *)&int v85 = 0.0;
          long double v55 = frexp(v53, &v85);
          double v56 = ldexp(v55, 11);
          float v54 = ldexp(round(v56), v85 - 11);
          goto LABEL_71;
        }
      }
      else
      {
        float v52 = *(float *)(__src.i64[0] + 4 * v78);
      }
      float v54 = 0.0;
LABEL_71:
      float v57 = v52 * v54;
      float v58 = 0.0;
      if (v57 != 0.0)
      {
        *(float *)&int v85 = 0.0;
        long double v59 = frexp(v57, &v85);
        double v60 = ldexp(v59, 11);
        float v58 = ldexp(round(v60), v85 - 11);
      }
      std::function<float ()(float)>::operator()(a13, v58);
      if (v61 == INFINITY)
      {
        char v62 = 127;
      }
      else if (v61 == -INFINITY)
      {
        char v62 = 0x80;
      }
      else
      {
        int v63 = llroundf(v61);
        if (v63 >= 127) {
          int v63 = 127;
        }
        if (v63 <= -128) {
          char v62 = 0x80;
        }
        else {
          char v62 = v63;
        }
      }
      *(unsigned char *)(*a9
      if (v78 == v72) {
        goto LABEL_83;
      }
    }
  }
LABEL_87:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_210BDC968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19 = *(void **)a18;
  if (*(void *)a18)
  {
    *(void *)(a18 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<unsigned char,signed char,MIL::Fp16>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, void *a9@<X8>, float **a10, char a11, char a12, uint64_t a13)
{
  v88[2] = *MEMORY[0x263EF8340];
  char v13 = *a3;
  uint64_t v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F) {
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  }
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F) {
  uint64_t v18 = v14 >> 3;
  }
  if (v18 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v18 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v19 = *a4;
  uint64_t v20 = (a4[1] - *a4) >> 3;
  if (v20 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, (char *)v88, 2);
  }
  else if (v20 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v21 = *a5;
  uint64_t v22 = a5[1] - *a5;
  if (v22 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v22 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  std::vector<MIL::Fp16>::resize((uint64_t)a9, a6);
  unint64_t v70 = (*a3)[1];
  unint64_t v71 = **a3;
  unint64_t v69 = (*a3)[2];
  unint64_t v82 = (*a3)[4];
  unint64_t v77 = *((void *)*a4 + 1);
  unint64_t v78 = *(void *)*a4;
  unint64_t v76 = *((void *)*a4 + 2);
  uint64_t v23 = **a5;
  uint64_t v66 = (*a5)[1];
  uint64_t v67 = (*a5)[2];
  unint64_t v24 = (*a5)[4];
  uint64_t v68 = (*a5)[3];
  double v25 = exp2(-(double)(a8 + a7));
  int64x2_t __src = 0uLL;
  v88[0] = 0;
  unint64_t v74 = v24;
  std::vector<float>::reserve((void **)&__src, v24);
  float v27 = v25;
  double v28 = *a10;
  float v29 = a10[1];
  if ((char *)v29 - (char *)*a10 == 4)
  {
    __int16 v85 = MIL::Fp16::FromFloat(Float, *v28);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v85);
    *(float *)&int __e = v30 * v27;
    std::vector<float>::assign((char **)&__src, v74, &__e);
  }
  else
  {
    for (; v28 != v29; ++v28)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v28);
      uint64_t Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      float v32 = v31 * v27;
      float v33 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v88[0])
      {
        uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        uint64_t v35 = (__src.i64[1] - __src.i64[0]) >> 2;
        unint64_t v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v37 = v88[0] - __src.i64[0];
        if ((v88[0] - __src.i64[0]) >> 1 > v36) {
          unint64_t v36 = v37 >> 1;
        }
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v36;
        }
        if (v38)
        {
          unint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v88, v38);
          float v33 = (MIL::Fp16 *)__src.i64[1];
          uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          unint64_t v39 = 0;
        }
        uint64_t v40 = (float *)&v39[4 * v35];
        float *v40 = v32;
        float v34 = v40 + 1;
        while (v33 != Float)
        {
          int v41 = *((_DWORD *)v33 - 1);
          float v33 = (MIL::Fp16 *)((char *)v33 - 4);
          *((_DWORD *)v40-- - 1) = v41;
        }
        __src.i64[0] = (uint64_t)v40;
        __src.i64[1] = (uint64_t)v34;
        v88[0] = &v39[4 * v38];
        if (Float) {
          operator delete(Float);
        }
      }
      else
      {
        *(float *)__src.i64[1] = v32;
        float v34 = (float *)((char *)v33 + 4);
      }
      __src.i64[1] = (uint64_t)v34;
    }
  }
  uint64_t v65 = v23;
  if (v23)
  {
    unint64_t v42 = 0;
    while (!v66)
    {
LABEL_77:
      if (++v42 == v65) {
        goto LABEL_78;
      }
    }
    unint64_t v43 = 0;
    while (!v67)
    {
LABEL_76:
      if (++v43 == v66) {
        goto LABEL_77;
      }
    }
    unint64_t v44 = 0;
    while (!v68)
    {
LABEL_75:
      if (++v44 == v67) {
        goto LABEL_76;
      }
    }
    uint64_t v83 = 0;
    while (!v74)
    {
LABEL_74:
      if (++v83 == v68) {
        goto LABEL_75;
      }
    }
    uint64_t v79 = 0;
    while (1)
    {
      if (v82)
      {
        uint64_t v45 = 0;
        int v46 = 0;
        int v47 = 0;
        do
        {
          int v48 = *(unsigned __int8 *)(a1
          if (!a11 || (char v49 = a12, v45 != *((void *)a4[1] - 2))) {
            char v49 = *(unsigned char *)(a2
          }
          if (!v46)
          {
            int v50 = v49 * v48;
            if (a7)
            {
              int v51 = (v50 + (1 << ~(_BYTE)a7)) >> -(char)a7;
              v50 <<= a7;
              if (a7 < 1) {
                int v50 = v51;
              }
            }
            uint64_t v52 = v47 + (uint64_t)v50;
            if (v52 <= 0x7FFFFFFF)
            {
              if (v52 >= (uint64_t)0xFFFFFFFF80000000) {
                int v47 = v52;
              }
              else {
                int v47 = -8388608;
              }
              int v46 = 2 * (v52 < (uint64_t)0xFFFFFFFF80000000);
            }
            else
            {
              int v46 = 1;
              int v47 = 2139095040;
            }
          }
          ++v45;
        }
        while (v82 != v45);
        float v53 = *(float *)(__src.i64[0] + 4 * v79);
        if (v46)
        {
          double v54 = INFINITY;
          if (v46 == 2) {
            double v54 = -INFINITY;
          }
          goto LABEL_70;
        }
        if (v47)
        {
          double v54 = (double)v47;
LABEL_70:
          *(float *)&int __e = 0.0;
          long double v56 = frexp(v54, &__e);
          double v57 = ldexp(v56, 11);
          float v55 = ldexp(round(v57), __e - 11);
          goto LABEL_71;
        }
      }
      else
      {
        float v53 = *(float *)(__src.i64[0] + 4 * v79);
      }
      float v55 = 0.0;
LABEL_71:
      float v58 = v53 * v55;
      float v59 = 0.0;
      if (v58 != 0.0)
      {
        *(float *)&int __e = 0.0;
        long double v60 = frexp(v58, &__e);
        double v61 = ldexp(v60, 11);
        float v59 = ldexp(round(v61), __e - 11);
      }
      char v62 = (MIL::Fp16 *)std::function<float ()(float)>::operator()(a13, v59);
      __int16 v64 = MIL::Fp16::FromFloat(v62, v63);
      *(_WORD *)(*a9
               + 2
      if (v79 == v74) {
        goto LABEL_74;
      }
    }
  }
LABEL_78:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_210BDD0A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v20 = *(void **)(v18 - 144);
  if (v20)
  {
    *(void *)(v18 - 136) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *(void **)a18;
  if (*(void *)a18)
  {
    *(void *)(a18 + 8) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<unsigned char,signed char,unsigned char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, char a12, uint64_t a13)
{
  v88[2] = *MEMORY[0x263EF8340];
  char v13 = *a3;
  uint64_t v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F) {
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  }
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F) {
  uint64_t v18 = v14 >> 3;
  }
  if (v18 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v18 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v19 = *a4;
  uint64_t v20 = (a4[1] - *a4) >> 3;
  if (v20 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, (char *)v88, 2);
  }
  else if (v20 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v21 = *a5;
  uint64_t v22 = a5[1] - *a5;
  if (v22 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v22 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6) {
    std::vector<unsigned char>::__append(a9, a6);
  }
  unint64_t v70 = (*a3)[1];
  unint64_t v71 = **a3;
  unint64_t v69 = (*a3)[2];
  unint64_t v82 = (*a3)[4];
  unint64_t v77 = *((void *)*a4 + 1);
  unint64_t v78 = *(void *)*a4;
  unint64_t v76 = *((void *)*a4 + 2);
  uint64_t v23 = **a5;
  uint64_t v66 = (*a5)[1];
  uint64_t v67 = (*a5)[2];
  unint64_t v24 = (*a5)[4];
  uint64_t v68 = (*a5)[3];
  double v25 = exp2(-(double)(a8 + a7));
  int64x2_t __src = 0uLL;
  v88[0] = 0;
  unint64_t v74 = v24;
  std::vector<float>::reserve((void **)&__src, v24);
  float v27 = v25;
  double v28 = *a10;
  float v29 = a10[1];
  if ((char *)v29 - (char *)*a10 == 4)
  {
    __int16 v85 = MIL::Fp16::FromFloat(Float, *v28);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v85);
    *(float *)&int __e = v30 * v27;
    std::vector<float>::assign((char **)&__src, v74, &__e);
  }
  else
  {
    for (; v28 != v29; ++v28)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v28);
      uint64_t Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      float v32 = v31 * v27;
      float v33 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v88[0])
      {
        uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        uint64_t v35 = (__src.i64[1] - __src.i64[0]) >> 2;
        unint64_t v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v37 = v88[0] - __src.i64[0];
        if ((v88[0] - __src.i64[0]) >> 1 > v36) {
          unint64_t v36 = v37 >> 1;
        }
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v36;
        }
        if (v38)
        {
          unint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v88, v38);
          float v33 = (MIL::Fp16 *)__src.i64[1];
          uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          unint64_t v39 = 0;
        }
        uint64_t v40 = (float *)&v39[4 * v35];
        float *v40 = v32;
        float v34 = v40 + 1;
        while (v33 != Float)
        {
          int v41 = *((_DWORD *)v33 - 1);
          float v33 = (MIL::Fp16 *)((char *)v33 - 4);
          *((_DWORD *)v40-- - 1) = v41;
        }
        __src.i64[0] = (uint64_t)v40;
        __src.i64[1] = (uint64_t)v34;
        v88[0] = &v39[4 * v38];
        if (Float) {
          operator delete(Float);
        }
      }
      else
      {
        *(float *)__src.i64[1] = v32;
        float v34 = (float *)((char *)v33 + 4);
      }
      __src.i64[1] = (uint64_t)v34;
    }
  }
  uint64_t v65 = v23;
  if (v23)
  {
    unint64_t v42 = 0;
    while (!v66)
    {
LABEL_86:
      if (++v42 == v65) {
        goto LABEL_87;
      }
    }
    unint64_t v43 = 0;
    while (!v67)
    {
LABEL_85:
      if (++v43 == v66) {
        goto LABEL_86;
      }
    }
    unint64_t v44 = 0;
    while (!v68)
    {
LABEL_84:
      if (++v44 == v67) {
        goto LABEL_85;
      }
    }
    uint64_t v83 = 0;
    while (!v74)
    {
LABEL_83:
      if (++v83 == v68) {
        goto LABEL_84;
      }
    }
    uint64_t v79 = 0;
    while (1)
    {
      if (v82)
      {
        uint64_t v45 = 0;
        int v46 = 0;
        int v47 = 0;
        do
        {
          int v48 = *(unsigned __int8 *)(a1
          if (!a11 || (char v49 = a12, v45 != *((void *)a4[1] - 2))) {
            char v49 = *(unsigned char *)(a2
          }
          if (!v46)
          {
            int v50 = v49 * v48;
            if (a7)
            {
              int v51 = (v50 + (1 << ~(_BYTE)a7)) >> -(char)a7;
              v50 <<= a7;
              if (a7 < 1) {
                int v50 = v51;
              }
            }
            uint64_t v52 = v47 + (uint64_t)v50;
            if (v52 <= 0x7FFFFFFF)
            {
              if (v52 >= (uint64_t)0xFFFFFFFF80000000) {
                int v47 = v52;
              }
              else {
                int v47 = -8388608;
              }
              int v46 = 2 * (v52 < (uint64_t)0xFFFFFFFF80000000);
            }
            else
            {
              int v46 = 1;
              int v47 = 2139095040;
            }
          }
          ++v45;
        }
        while (v82 != v45);
        float v53 = *(float *)(__src.i64[0] + 4 * v79);
        if (v46)
        {
          double v54 = INFINITY;
          if (v46 == 2) {
            double v54 = -INFINITY;
          }
          goto LABEL_72;
        }
        if (v47)
        {
          double v54 = (double)v47;
LABEL_72:
          *(float *)&int __e = 0.0;
          long double v56 = frexp(v54, &__e);
          double v57 = ldexp(v56, 11);
          float v55 = ldexp(round(v57), __e - 11);
          goto LABEL_73;
        }
      }
      else
      {
        float v53 = *(float *)(__src.i64[0] + 4 * v79);
      }
      float v55 = 0.0;
LABEL_73:
      float v58 = v53 * v55;
      float v59 = 0.0;
      if (v58 != 0.0)
      {
        *(float *)&int __e = 0.0;
        long double v60 = frexp(v58, &__e);
        double v61 = ldexp(v60, 11);
        float v59 = ldexp(round(v61), __e - 11);
      }
      std::function<float ()(float)>::operator()(a13, v59);
      if (v62 == INFINITY)
      {
        LOBYTE(v63) = -1;
      }
      else if (v62 == -INFINITY)
      {
        LOBYTE(v63) = 0;
      }
      else
      {
        int v64 = llroundf(v62);
        if (v64 >= 255) {
          int v64 = 255;
        }
        int v63 = v64 & ~(v64 >> 31);
      }
      *(unsigned char *)(*a9
      if (v79 == v74) {
        goto LABEL_83;
      }
    }
  }
LABEL_87:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}

void sub_210BDD824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19 = *(void **)a18;
  if (*(void *)a18)
  {
    *(void *)(a18 + 8) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::ANEMachineIR::Interpreter::anonymous namespace'::ComputeValue<unsigned char,signed char,signed char>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, char **a4@<X3>, uint64_t **a5@<X4>, size_t a6@<X5>, int a7@<W6>, int a8@<W7>, unint64_t *a9@<X8>, float **a10, char a11, char a12, uint64_t a13)
{
  v88[2] = *MEMORY[0x263EF8340];
  char v13 = *a3;
  uint64_t v14 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)(v14 - 17) >= 0x1F) {
  if ((unint64_t)(a4[1] - *a4 - 17) >= 0x1F)
  }
  if ((unint64_t)((char *)a5[1] - (char *)*a5 - 17) >= 0x1F) {
  uint64_t v18 = v14 >> 3;
  }
  if (v18 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v18 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a3, (uint64_t)(v13 + 1), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v19 = *a4;
  uint64_t v20 = (a4[1] - *a4) >> 3;
  if (v20 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, (char *)v88, 2);
  }
  else if (v20 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a4, (uint64_t)(v19 + 8), __src.i8, &__src.i8[8], 1);
  }
  uint64_t v21 = *a5;
  uint64_t v22 = a5[1] - *a5;
  if (v22 == 3)
  {
    int64x2_t __src = vdupq_n_s64(1uLL);
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, (char *)v88, 2);
  }
  else if (v22 == 4)
  {
    __src.i64[0] = 1;
    std::vector<unsigned long long>::__insert_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((uint64_t)a5, (uint64_t)(v21 + 1), __src.i8, &__src.i8[8], 1);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  if (a6) {
    std::vector<unsigned char>::__append(a9, a6);
  }
  unint64_t v70 = (*a3)[1];
  unint64_t v71 = **a3;
  unint64_t v69 = (*a3)[2];
  unint64_t v82 = (*a3)[4];
  unint64_t v77 = *((void *)*a4 + 1);
  unint64_t v78 = *(void *)*a4;
  unint64_t v76 = *((void *)*a4 + 2);
  uint64_t v23 = **a5;
  uint64_t v66 = (*a5)[1];
  uint64_t v67 = (*a5)[2];
  unint64_t v24 = (*a5)[4];
  uint64_t v68 = (*a5)[3];
  double v25 = exp2(-(double)(a8 + a7));
  int64x2_t __src = 0uLL;
  v88[0] = 0;
  unint64_t v74 = v24;
  std::vector<float>::reserve((void **)&__src, v24);
  float v27 = v25;
  double v28 = *a10;
  float v29 = a10[1];
  if ((char *)v29 - (char *)*a10 == 4)
  {
    __int16 v85 = MIL::Fp16::FromFloat(Float, *v28);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&v85);
    *(float *)&int __e = v30 * v27;
    std::vector<float>::assign((char **)&__src, v74, &__e);
  }
  else
  {
    for (; v28 != v29; ++v28)
    {
      LOWORD(__e) = MIL::Fp16::FromFloat(Float, *v28);
      uint64_t Float = (MIL::Fp16 *)MIL::Fp16::GetFloat((MIL::Fp16 *)&__e);
      float v32 = v31 * v27;
      float v33 = (MIL::Fp16 *)__src.i64[1];
      if (__src.i64[1] >= v88[0])
      {
        uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        uint64_t v35 = (__src.i64[1] - __src.i64[0]) >> 2;
        unint64_t v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 62) {
          std::vector<MIL::Fp16>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v37 = v88[0] - __src.i64[0];
        if ((v88[0] - __src.i64[0]) >> 1 > v36) {
          unint64_t v36 = v37 >> 1;
        }
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v36;
        }
        if (v38)
        {
          unint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v88, v38);
          float v33 = (MIL::Fp16 *)__src.i64[1];
          uint64_t Float = (MIL::Fp16 *)__src.i64[0];
        }
        else
        {
          unint64_t v39 = 0;
        }
        uint64_t v40 = (float *)&v39[4 * v35];
        float *v40 = v32;
        float v34 = v40 + 1;
        while (v33 != Float)
        {
          int v41 = *((_DWORD *)v33 - 1);
          float v33 = (MIL::Fp16 *)((char *)v33 - 4);
          *((_DWORD *)v40-- - 1) = v41;
        }
        __src.i64[0] = (uint64_t)v40;
        __src.i64[1] = (uint64_t)v34;
        v88[0] = &v39[4 * v38];
        if (Float) {
          operator delete(Float);
        }
      }
      else
      {
        *(float *)__src.i64[1] = v32;
        float v34 = (float *)((char *)v33 + 4);
      }
      __src.i64[1] = (uint64_t)v34;
    }
  }
  uint64_t v65 = v23;
  if (v23)
  {
    unint64_t v42 = 0;
    while (!v66)
    {
LABEL_88:
      if (++v42 == v65) {
        goto LABEL_89;
      }
    }
    unint64_t v43 = 0;
    while (!v67)
    {
LABEL_87:
      if (++v43 == v66) {
        goto LABEL_88;
      }
    }
    unint64_t v44 = 0;
    while (!v68)
    {
LABEL_86:
      if (++v44 == v67) {
        goto LABEL_87;
      }
    }
    uint64_t v83 = 0;
    while (!v74)
    {
LABEL_85:
      if (++v83 == v68) {
        goto LABEL_86;
      }
    }
    uint64_t v79 = 0;
    while (1)
    {
      if (v82)
      {
        uint64_t v45 = 0;
        int v46 = 0;
        int v47 = 0;
        do
        {
          int v48 = *(unsigned __int8 *)(a1
          if (!a11 || (char v49 = a12, v45 != *((void *)a4[1] - 2))) {
            char v49 = *(unsigned char *)(a2
          }
          if (!v46)
          {
            int v50 = v49 * v48;
            if (a7)
            {
              int v51 = (v50 + (1 << ~(_BYTE)a7)) >> -(char)a7;
              v50 <<= a7;
              if (a7 < 1) {
                int v50 = v51;
              }
            }
            uint64_t v52 = v47 + (uint64_t)v50;
            if (v52 <= 0x7FFFFFFF)
            {
              if (v52 >= (uint64_t)0xFFFFFFFF80000000) {
                int v47 = v52;
              }
              else {
                int v47 = -8388608;
              }
              int v46 = 2 * (v52 < (uint64_t)0xFFFFFFFF80000000);
            }
            else
            {
              int v46 = 1;
              int v47 = 2139095040;
            }
          }
          ++v45;
        }
        while (v82 != v45);
        float v53 = *(float *)(__src.i64[0] + 4 * v79);
        if (v46)
        {
          double v54 = INFINITY;
          if (v46 == 2) {
            double v54 = -INFINITY;
          }
          goto LABEL_72;
        }
        if (v47)
        {
          double v54 = (double)v47;
LABEL_72:
          *(float *)&int __e = 0.0;
          long double v56 = frexp(v54, &__e);
          double v57 = ldexp(v56, 11);
          float v55 = ldexp(round(v57), __e - 11);
          goto LABEL_73;
        }
      }
      else
      {
        float v53 = *(float *)(__src.i64[0] + 4 * v79);
      }
      float v55 = 0.0;
LABEL_73:
      float v58 = v53 * v55;
      float v59 = 0.0;
      if (v58 != 0.0)
      {
        *(float *)&int __e = 0.0;
        long double v60 = frexp(v58, &__e);
        double v61 = ldexp(v60, 11);
        float v59 = ldexp(round(v61), __e - 11);
      }
      std::function<float ()(float)>::operator()(a13, v59);
      if (v62 == INFINITY)
      {
        char v63 = 127;
      }
      else if (v62 == -INFINITY)
      {
        char v63 = 0x80;
      }
      else
      {
        int v64 = llroundf(v62);
        if (v64 >= 127) {
          int v64 = 127;
        }
        if (v64 <= -128) {
          char v63 = 0x80;
        }
        else {
          char v63 = v64;
        }
      }
      *(unsigned char *)(*a9
      if (v79 == v74) {
        goto LABEL_85;
      }
    }
  }
LABEL_89:
  if (__src.i64[0])
  {
    __src.i64[1] = __src.i64[0];
    operator delete((void *)__src.i64[0]);
  }
}