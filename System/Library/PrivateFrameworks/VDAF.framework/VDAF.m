uint64_t PINE<>.shardAndEncode(_:nonce:seedBytes:)(float *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t result;
  void *i;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  int64_t v51;
  uint64_t v52;
  long long v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  long long v58;
  unsigned char __dst[328];
  uint64_t v60;

  v8 = v7;
  memcpy(__dst, v6, sizeof(__dst));
  outlined copy of Data._Representation(a3, a4);
  v15 = specialized _copyCollectionToContiguousArray<A>(_:)(a3, a4);
  outlined consume of Data._Representation(a3, a4);
  v16 = specialized PINE.shard<A>(_:nonce:seedBytes:)(&v54, a1, a2, (uint64_t)v15, a5, a6);
  swift_release();
  if (v7) {
    return v8;
  }
  v50 = v16;
  v17 = v54;
  v18 = v55;
  v19 = specialized PINEPublicShare.encodedLength.getter(v54, v55);
  v54 = specialized Data.init(capacity:)(v19);
  v55 = v20;
  specialized PINEPublicShare.encode<A>(into:)((uint64_t)&v54, v17, v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = v54;
  v21 = *((void *)v50 + 2);
  if (!v21)
  {
    swift_bridgeObjectRelease();
    return v8;
  }
  v49 = v54;
  v60 = MEMORY[0x263F8EE78];
  result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
  for (i = v50 + 72; ; i += 6)
  {
    v24 = *((unsigned char *)i - 32);
    v25 = *(i - 3);
    v26 = *((unsigned char *)i - 16);
    v27 = *(i - 1);
    v28 = *i;
    v52 = *(i - 5);
    v29 = *(void *)(v52 + 16);
    if ((v24 & 1) == 0)
    {
      if (v29)
      {
        v30 = (unsigned __int128)(v29 * (__int128)5) >> 64;
        v29 *= 5;
        if (v30 != v29 >> 63) {
          break;
        }
      }
    }
    v31 = *(void *)(v25 + 16);
    if ((*(unsigned char *)(i - 2) & 1) == 0)
    {
      if (v31)
      {
        v32 = (unsigned __int128)(v31 * (__int128)5) >> 64;
        v31 *= 5;
        if (v32 != v31 >> 63) {
          goto LABEL_37;
        }
      }
    }
    v33 = __OFADD__(v29, v31);
    v34 = v29 + v31;
    if (v33)
    {
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
      break;
    }
    v35 = *(void *)(v27 + 16);
    v33 = __OFADD__(v34, v35);
    v36 = v34 + v35;
    if (v33) {
      goto LABEL_34;
    }
    v37 = *(void *)(v28 + 16);
    v38 = v36 + v37;
    if (__OFADD__(v36, v37)) {
      goto LABEL_35;
    }
    if (v38)
    {
      if (v38 <= 14)
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v40 = 0;
        v41 = 0;
      }
      else
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v39 = __DataStorage.init(capacity:)();
        if ((unint64_t)v38 >= 0x7FFFFFFF)
        {
          type metadata accessor for Data.RangeReference();
          v40 = swift_allocObject();
          v41 = v39 | 0x8000000000000000;
          *(void *)(v40 + 16) = 0;
          *(void *)(v40 + 24) = 0;
        }
        else
        {
          v40 = 0;
          v41 = v39 | 0x4000000000000000;
        }
      }
    }
    else
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v40 = 0;
      v41 = 0xC000000000000000;
    }
    *(void *)&v58 = v40;
    *((void *)&v58 + 1) = v41;
    v51 = v21;
    if (v24)
    {
      v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
      v56 = v42;
      v57 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8]);
      v54 = v52;
      __swift_project_boxed_opaque_existential_1(&v54, v42);
      swift_bridgeObjectRetain_n();
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
      swift_bridgeObjectRelease();
      if (v26) {
        goto LABEL_24;
      }
    }
    else
    {
      specialized Collection<>.encode<A>(into:)((uint64_t)&v58, v52);
      if (v26)
      {
LABEL_24:
        v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
        v56 = v43;
        v57 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8]);
        v54 = v25;
        __swift_project_boxed_opaque_existential_1(&v54, v43);
        swift_bridgeObjectRetain_n();
        Data._Representation.append(contentsOf:)();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
    }
    specialized Collection<>.encode<A>(into:)((uint64_t)&v58, v25);
LABEL_25:
    v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
    v56 = v44;
    v45 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8]);
    v57 = v45;
    v54 = v27;
    __swift_project_boxed_opaque_existential_1(&v54, v44);
    swift_bridgeObjectRetain_n();
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
    swift_bridgeObjectRelease();
    v56 = v44;
    v57 = v45;
    v54 = v28;
    __swift_project_boxed_opaque_existential_1(&v54, v44);
    swift_bridgeObjectRetain_n();
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    v53 = v58;
    v46 = v60;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v46 + 16) + 1, 1);
      v46 = v60;
    }
    v48 = *(void *)(v46 + 16);
    v47 = *(void *)(v46 + 24);
    if (v48 >= v47 >> 1)
    {
      result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v47 > 1), v48 + 1, 1);
      v46 = v60;
    }
    *(void *)(v46 + 16) = v48 + 1;
    *(_OWORD *)(v46 + 16 * v48 + 32) = v53;
    v21 = v51 - 1;
    if (v51 == 1)
    {
      swift_bridgeObjectRelease();
      return v49;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

{
  const void *v6;
  uint64_t v7;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t result;
  void *i;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  long long v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  long long v53;
  unsigned char __dst[328];
  uint64_t v55;

  memcpy(__dst, v6, sizeof(__dst));
  outlined copy of Data._Representation(a3, a4);
  v14 = specialized _copyCollectionToContiguousArray<A>(_:)(a3, a4);
  outlined consume of Data._Representation(a3, a4);
  v15 = specialized PINE.shard<A>(_:nonce:seedBytes:)((unint64_t *)&v49, a1, a2, (uint64_t)v14, a5, a6);
  swift_release();
  if (v7) {
    return a6;
  }
  v16 = v49;
  v17 = v50;
  v18 = specialized PINEPublicShare.encodedLength.getter(v49, v50);
  v49 = specialized Data.init(capacity:)(v18);
  v50 = v19;
  specialized PINEPublicShare.encode<A>(into:)((uint64_t)&v49, v16, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a6 = v49;
  v20 = *(void *)(v15 + 16);
  if (!v20)
  {
    swift_bridgeObjectRelease();
    return a6;
  }
  v45 = v49;
  v55 = MEMORY[0x263F8EE78];
  result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
  for (i = (void *)(v15 + 72); ; i += 6)
  {
    v23 = *((unsigned char *)i - 32);
    v24 = *(i - 3);
    v25 = *((unsigned char *)i - 16);
    v26 = *(i - 1);
    v27 = *i;
    v47 = *(i - 5);
    v28 = *(void *)(v47 + 16);
    if ((v23 & 1) == 0 && v28)
    {
      if (v28 >> 61) {
        goto LABEL_39;
      }
      v28 *= 4;
    }
    v29 = *(void *)(v24 + 16);
    if ((*(unsigned char *)(i - 2) & 1) == 0 && v29)
    {
      if (v29 >> 61) {
        goto LABEL_40;
      }
      v29 *= 4;
    }
    v30 = __OFADD__(v28, v29);
    v31 = v28 + v29;
    if (v30) {
      break;
    }
    v32 = *(void *)(v26 + 16);
    v30 = __OFADD__(v31, v32);
    v33 = v31 + v32;
    if (v30) {
      goto LABEL_37;
    }
    v34 = *(void *)(v27 + 16);
    v35 = v33 + v34;
    if (__OFADD__(v33, v34)) {
      goto LABEL_38;
    }
    if (v35)
    {
      if (v35 <= 14)
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v53 = 0uLL;
        if (v23) {
          goto LABEL_23;
        }
      }
      else
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v36 = __DataStorage.init(capacity:)();
        if ((unint64_t)v35 >= 0x7FFFFFFF)
        {
          type metadata accessor for Data.RangeReference();
          v38 = swift_allocObject();
          *(void *)(v38 + 16) = 0;
          *(void *)(v38 + 24) = 0;
          *(void *)&v53 = v38;
          *((void *)&v53 + 1) = v36 | 0x8000000000000000;
          if (v23)
          {
LABEL_23:
            v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
            v51 = v37;
            v52 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]();
            v49 = v47;
            __swift_project_boxed_opaque_existential_1(&v49, v37);
            swift_bridgeObjectRetain_n();
            Data._Representation.append(contentsOf:)();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v49);
            swift_bridgeObjectRelease();
            v46 = v20;
            if (v25) {
              goto LABEL_27;
            }
            goto LABEL_24;
          }
        }
        else
        {
          *(void *)&v53 = 0;
          *((void *)&v53 + 1) = v36 | 0x4000000000000000;
          if (v23) {
            goto LABEL_23;
          }
        }
      }
    }
    else
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      *(void *)&v53 = 0;
      *((void *)&v53 + 1) = 0xC000000000000000;
      if (v23) {
        goto LABEL_23;
      }
    }
    specialized Collection<>.encode<A>(into:)((uint64_t)&v53, v47);
    v46 = v20;
    if (v25)
    {
LABEL_27:
      v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
      v51 = v39;
      v52 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]();
      v49 = v24;
      __swift_project_boxed_opaque_existential_1(&v49, v39);
      swift_bridgeObjectRetain_n();
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v49);
      swift_bridgeObjectRelease();
      goto LABEL_28;
    }
LABEL_24:
    specialized Collection<>.encode<A>(into:)((uint64_t)&v53, v24);
LABEL_28:
    v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
    v51 = v40;
    v41 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]();
    v52 = v41;
    v49 = v26;
    __swift_project_boxed_opaque_existential_1(&v49, v40);
    swift_bridgeObjectRetain_n();
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v49);
    swift_bridgeObjectRelease();
    v51 = v40;
    v52 = v41;
    v49 = v27;
    __swift_project_boxed_opaque_existential_1(&v49, v40);
    swift_bridgeObjectRetain_n();
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v49);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    v48 = v53;
    v42 = v55;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v42 + 16) + 1, 1);
      v42 = v55;
    }
    v44 = *(void *)(v42 + 16);
    v43 = *(void *)(v42 + 24);
    if (v44 >= v43 >> 1)
    {
      result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v43 > 1), v44 + 1, 1);
      v42 = v55;
    }
    *(void *)(v42 + 16) = v44 + 1;
    *(_OWORD *)(v42 + 16 * v44 + 32) = v48;
    v20 = v46 - 1;
    if (v46 == 1)
    {
      swift_bridgeObjectRelease();
      return v45;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

char *specialized PINE.shard<A>(_:nonce:seedBytes:)(uint64_t *a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  v11 = *(char **)(a4 + 16);
  if (v11 == (char *)16)
  {
    int64_t v12 = a6;
    unint64_t v13 = a6 >> 62;
    v15 = 0;
    switch(a6 >> 62)
    {
      case 1uLL:
        LODWORD(v15) = HIDWORD(a5) - a5;
        if (__OFSUB__(HIDWORD(a5), a5)) {
          goto LABEL_90;
        }
        v15 = (char *)(int)v15;
        goto LABEL_8;
      case 2uLL:
        uint64_t v19 = *(void *)(a5 + 16);
        uint64_t v18 = *(void *)(a5 + 24);
        BOOL v20 = __OFSUB__(v18, v19);
        v15 = (char *)(v18 - v19);
        if (!v20) {
          goto LABEL_8;
        }
        goto LABEL_91;
      case 3uLL:
        goto LABEL_8;
      default:
        v15 = (char *)BYTE6(a6);
LABEL_8:
        uint64_t v21 = *v6;
        uint64_t v22 = *v6 - 1;
        if (__OFSUB__(*v6, 1)) {
          goto LABEL_84;
        }
        if (*v6 + 0x3FFFFFFFFFFFFFFFLL < 0) {
          goto LABEL_85;
        }
        if (v21 + 0x4000000000000000 < 0) {
          goto LABEL_86;
        }
        uint64_t v23 = 2 * v22 + 2 * v21;
        if (__OFADD__(2 * v22, 2 * v21)) {
          goto LABEL_87;
        }
        if ((unint64_t)(v23 - 0x3FFFFFFFFFFFFFFLL) >> 59 != 31) {
          goto LABEL_88;
        }
        v24 = (char *)((32 * v23) | 0x20);
        if (v15 == v24)
        {
          uint64_t v125 = v7;
          uint64_t v117 = *v6;
          v112 = a1;
          uint64_t v113 = *v6 - 1;
          v129 = v6;
          uint64_t v8 = specialized PINE.splitSeedBytes<A>(_:)(a5, a6);
          uint64_t v26 = v25;
          uint64_t v119 = v27;
          int64_t v28 = *(void *)(v8 + 16);
          v29 = (char *)MEMORY[0x263F8EE78];
          uint64_t v128 = v30;
          if (v28)
          {
            v135 = (char *)MEMORY[0x263F8EE78];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28, 0);
            v31 = v135;
            v126 = (uint64_t *)v8;
            v32 = (uint64_t *)(v8 + 32);
            int64_t v33 = v28;
            do
            {
              uint64_t v34 = *v32;
              v135 = v31;
              unint64_t v36 = *((void *)v31 + 2);
              unint64_t v35 = *((void *)v31 + 3);
              swift_bridgeObjectRetain();
              if (v36 >= v35 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1);
                v31 = v135;
              }
              *((void *)v31 + 2) = v36 + 1;
              *(void *)&v31[8 * v36 + 32] = v34;
              v32 += 4;
              --v33;
            }
            while (v33);
            uint64_t v130 = (uint64_t)v31;
            uint64_t v115 = v26;
            v135 = v29;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28, 0);
            v40 = v29;
            v41 = v126 + 5;
            int64_t v42 = v28;
            do
            {
              uint64_t v43 = *v41;
              v135 = v40;
              unint64_t v45 = *((void *)v40 + 2);
              unint64_t v44 = *((void *)v40 + 3);
              swift_bridgeObjectRetain();
              if (v45 >= v44 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v44 > 1), v45 + 1, 1);
                v40 = v135;
              }
              *((void *)v40 + 2) = v45 + 1;
              *(void *)&v40[8 * v45 + 32] = v43;
              v41 += 4;
              --v42;
            }
            while (v42);
            uint64_t v132 = (uint64_t)v40;
            v135 = v29;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28, 0);
            v46 = v29;
            v47 = v126 + 6;
            int64_t v48 = v28;
            do
            {
              uint64_t v49 = *v47;
              v135 = v46;
              unint64_t v51 = *((void *)v46 + 2);
              unint64_t v50 = *((void *)v46 + 3);
              swift_bridgeObjectRetain();
              if (v51 >= v50 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v50 > 1), v51 + 1, 1);
                v46 = v135;
              }
              *((void *)v46 + 2) = v51 + 1;
              *(void *)&v46[8 * v51 + 32] = v49;
              v47 += 4;
              --v48;
            }
            while (v48);
            v135 = v29;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28, 0);
            uint64_t v8 = (uint64_t)v126;
            v52 = v126 + 7;
            do
            {
              uint64_t v53 = *v52;
              v135 = v29;
              unint64_t v54 = *((void *)v29 + 2);
              unint64_t v55 = *((void *)v29 + 3);
              swift_bridgeObjectRetain();
              if (v54 >= v55 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v55 > 1), v54 + 1, 1);
                v29 = v135;
              }
              *((void *)v29 + 2) = v54 + 1;
              *(void *)&v29[8 * v54 + 32] = v53;
              v52 += 4;
              --v28;
            }
            while (v28);
            uint64_t v26 = v115;
          }
          else
          {
            v46 = (char *)MEMORY[0x263F8EE78];
            uint64_t v130 = MEMORY[0x263F8EE78];
            uint64_t v132 = MEMORY[0x263F8EE78];
          }
          long long v56 = *(_OWORD *)(v129 + 15);
          long long v153 = *(_OWORD *)(v129 + 13);
          long long v154 = v56;
          long long v155 = *(_OWORD *)(v129 + 17);
          uint64_t v156 = v129[19];
          long long v57 = *(_OWORD *)(v129 + 7);
          long long v149 = *(_OWORD *)(v129 + 5);
          long long v150 = v57;
          long long v58 = *(_OWORD *)(v129 + 11);
          long long v151 = *(_OWORD *)(v129 + 9);
          long long v152 = v58;
          long long v59 = *(_OWORD *)(v129 + 3);
          long long v147 = *(_OWORD *)(v129 + 1);
          long long v148 = v59;
          v135 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)&v151 + 1) & ~(*((uint64_t *)&v151 + 1) >> 63), 0, MEMORY[0x263F8EE78], &demangling cache variable for type metadata for _ContiguousArrayStorage<Field40>);
          specialized PINECircuit.encodeMeasurementAndNormRangeCheck(raw:into:)(a2, a3, &v135);
          if (v125)
          {
            v60 = v135;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_37:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return v60;
          }
          v61 = (char *)swift_bridgeObjectRetain();
          uint64_t v68 = specialized static JointRandomness.jointRandPartsAndLeaderShare(commitment:leaderJointRandBlind:helperJointRandBlinds:helperMeasurementSeeds:numOfAggregators:nonce:)(v61, v26, (unint64_t)v46, v130, v117, a4, 9u);
          uint64_t v69 = v26;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WraparoundJointRandomness<PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field40>);
          swift_initStackObject();
          uint64_t v10 = v68;
          uint64_t v70 = swift_bridgeObjectRetain();
          uint64_t v71 = specialized WraparoundJointRandomness.init(parts:)(v70, &lazy protocol witness table cache variable for type WraparoundJointRandomness<PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field40> and conformance WraparoundJointRandomness<A, B>, &demangling cache variable for type metadata for WraparoundJointRandomness<PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field40>, (uint64_t (*)(uint64_t))specialized static PINE.domainSeparationTag(usage:));
          v123 = specialized PINECircuit.appendWraparoundCheck<A>(into:random:)(&v135, v71);
          v72 = (char *)swift_bridgeObjectRetain();
          int64_t v73 = v128;
          uint64_t v114 = v69;
          uint64_t v74 = specialized static JointRandomness.jointRandPartsAndLeaderShare(commitment:leaderJointRandBlind:helperJointRandBlinds:helperMeasurementSeeds:numOfAggregators:nonce:)(v72, v128, (unint64_t)v29, v130, v117, a4, 6u);
          uint64_t v111 = v75;
          uint64_t v120 = v10;
          int64_t v12 = v74;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v9 = v129[39];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VerificationJointRandomness<PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field40>);
          inited = (void *)swift_initStackObject();
          inited[4] = 0;
          inited[5] = 3;
          inited[6] = v9;
          inited[2] = v12;
          inited[3] = 0;
          int64_t v116 = v12;
          swift_bridgeObjectRetain();
          specialized Array.append<A>(contentsOf:)((uint64_t)v123, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field40>);
          uint64_t v77 = specialized static PINE.domainSeparationTag(usage:)(3u);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
          uint64_t v78 = swift_initStackObject();
          *(_OWORD *)(v78 + 16) = xmmword_260BF9FD0;
          unint64_t v79 = v129[40];
          if ((v79 & 0x8000000000000000) != 0) {
            goto LABEL_96;
          }
          if (v79 > 0xFF) {
            goto LABEL_97;
          }
          int64_t v12 = v78;
          *(unsigned char *)(v78 + 32) = v79;
          if ((v9 & 0x8000000000000000) != 0) {
            goto LABEL_98;
          }
          if (v9 > 0xFF) {
            goto LABEL_99;
          }
          *(unsigned char *)(v78 + 33) = v9;
          uint64_t v10 = v9;
          unint64_t v9 = v119;
          uint64_t v131 = specialized static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(v119, v77, v78);
          swift_bridgeObjectRelease();
          swift_setDeallocating();
          swift_bridgeObjectRelease();
          long long v80 = *((_OWORD *)v129 + 17);
          long long v143 = *((_OWORD *)v129 + 16);
          long long v144 = v80;
          long long v145 = *((_OWORD *)v129 + 18);
          uint64_t v146 = v129[38];
          long long v81 = *((_OWORD *)v129 + 13);
          long long v139 = *((_OWORD *)v129 + 12);
          long long v140 = v81;
          long long v82 = *((_OWORD *)v129 + 15);
          long long v141 = *((_OWORD *)v129 + 14);
          long long v142 = v82;
          long long v83 = *((_OWORD *)v129 + 11);
          long long v137 = *((_OWORD *)v129 + 10);
          long long v138 = v83;
          uint64_t v84 = specialized FullyLinearProof.proofLength.getter();
          int64_t v12 = v79 * v84;
          if ((unsigned __int128)((uint64_t)v79 * (__int128)v84) >> 64 != (uint64_t)(v79 * v84) >> 63) {
            goto LABEL_100;
          }
          uint64_t v85 = specialized FullyLinearProof.proofLength.getter();
          uint64_t v86 = v10 * v85;
          if ((unsigned __int128)(v10 * (__int128)v85) >> 64 != (v10 * v85) >> 63) {
            goto LABEL_101;
          }
          BOOL v20 = __OFADD__(v12, v86);
          uint64_t v87 = v12 + v86;
          if (v20) {
            goto LABEL_102;
          }
          v157 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v87 & ~(v87 >> 63), 0, MEMORY[0x263F8EE78], &demangling cache variable for type metadata for _ContiguousArrayStorage<Field40>);
          if (v79)
          {
            int64_t v12 = (int64_t)v135;
            unint64_t v9 = MEMORY[0x263F8EE78];
            do
            {
              unint64_t v88 = specialized FullyLinearProof.proveRandLength.getter();
              unint64_t v89 = specialized static FieldElement.randomVector<A>(count:using:)(v88, v131, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t))specialized static FieldElement.randomElement<A>(using:));
              swift_bridgeObjectRetain();
              specialized FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:)(&v157, v12, v89, v9);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              --v79;
            }
            while (v79);
          }
          if (v10)
          {
            int64_t v12 = (int64_t)v135;
            uint64_t v90 = v10 & ~(v10 >> 63);
            uint64_t v127 = v8;
            v124 = v135;
            do
            {
              if (!v90) {
                goto LABEL_94;
              }
              uint64_t v91 = specialized VerificationJointRandomness.xof.getter();
              unint64_t v134 = MEMORY[0x263F8EE78];
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 3, 0);
              v92 = (void *)v134;
              specialized static FieldElement.randomElement<A>(using:)(v91, &v133);
              unint64_t v93 = v133;
              unint64_t v95 = v92[2];
              unint64_t v94 = v92[3];
              if (v95 >= v94 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v94 > 1), v95 + 1, 1);
                v92 = (void *)v134;
              }
              v92[2] = v95 + 1;
              v92[v95 + 4] = v93;
              specialized static FieldElement.randomElement<A>(using:)(v91, &v133);
              unint64_t v96 = v133;
              unint64_t v134 = (unint64_t)v92;
              unint64_t v98 = v92[2];
              unint64_t v97 = v92[3];
              if (v98 >= v97 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v97 > 1), v98 + 1, 1);
                v92 = (void *)v134;
              }
              v92[2] = v98 + 1;
              v92[v98 + 4] = v96;
              specialized static FieldElement.randomElement<A>(using:)(v91, &v133);
              unint64_t v99 = v133;
              unint64_t v134 = (unint64_t)v92;
              unint64_t v101 = v92[2];
              unint64_t v100 = v92[3];
              if (v101 >= v100 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v100 > 1), v101 + 1, 1);
                v92 = (void *)v134;
              }
              v92[2] = v101 + 1;
              v92[v101 + 4] = v99;
              swift_release();
              unint64_t v102 = specialized FullyLinearProof.proveRandLength.getter();
              unint64_t v9 = specialized static FieldElement.randomVector<A>(count:using:)(v102, v131, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t))specialized static FieldElement.randomElement<A>(using:));
              int64_t v12 = (int64_t)v124;
              swift_bridgeObjectRetain();
              specialized FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:)(&v157, (unint64_t)v124, v9, v92);
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              --v90;
              --v10;
              uint64_t v8 = v127;
              int64_t v73 = v128;
            }
            while (v10);
          }
          uint64_t v10 = v113;
          if (v113 < 0) {
            goto LABEL_103;
          }
          uint64_t v103 = v114;
          unint64_t v9 = (unint64_t)v129;
          if (!v113)
          {
            swift_bridgeObjectRelease();
            int64_t v12 = (int64_t)v157;
            goto LABEL_82;
          }
          int64_t v12 = (int64_t)v157;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            goto LABEL_104;
          }
          while (1)
          {
            unint64_t v104 = 0;
            v105 = (char *)(v12 + 32);
            while (1)
            {
              if (v104 == v10) {
                goto LABEL_95;
              }
              uint64_t v106 = specialized closure #5 in PINE.shard<A>(_:nonce:seedBytes:)(v104, v132, v9);
              unint64_t v9 = *(void *)(v12 + 16);
              if (v9) {
                break;
              }
LABEL_69:
              ++v104;
              swift_release();
              uint64_t v10 = v113;
              uint64_t v103 = v114;
              unint64_t v9 = (unint64_t)v129;
              if (v104 == v113)
              {
                swift_bridgeObjectRelease();
                v157 = (char *)v12;
                int64_t v73 = v128;
LABEL_82:
                swift_bridgeObjectRetain();
                v60 = (char *)specialized PINE.inputSharesFrom(leaderMeasurementShare:leaderProofShare:leaderWraparoundJointRandBlind:leaderVerificationJointRandBlind:helperSeeds:)(v111, v12, v103, v73, v8, &demangling cache variable for type metadata for _ContiguousArrayStorage<PINEInputShare<Field40, XofHmacSha256Aes128>>, &demangling cache variable for type metadata for PINEInputShare<Field40, XofHmacSha256Aes128>);
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                uint64_t *v112 = v120;
                v112[1] = v116;
                return v60;
              }
            }
            uint64_t v10 = 0;
            while (1)
            {
              specialized static FieldElement.randomElement<A>(using:)(v106, &v134);
              if ((unint64_t)v10 >= *(void *)(v12 + 16)) {
                break;
              }
              unint64_t v107 = *(void *)&v105[8 * v10];
              uint64_t v108 = v107 - v134;
              if (v107 < v134)
              {
                uint64_t v109 = 0xFFFEB00001 - v134;
                if (v134 > 0xFFFEB00001) {
                  goto LABEL_89;
                }
                BOOL v110 = __CFADD__(v107, v109);
                uint64_t v108 = v107 + v109;
                if (v110)
                {
                  __break(1u);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v60 = v157;
                  goto LABEL_37;
                }
              }
              *(void *)&v105[8 * v10++] = v108;
              if (v9 == v10) {
                goto LABEL_69;
              }
            }
            __break(1u);
LABEL_84:
            __break(1u);
LABEL_85:
            __break(1u);
LABEL_86:
            __break(1u);
LABEL_87:
            __break(1u);
LABEL_88:
            __break(1u);
LABEL_89:
            __break(1u);
LABEL_90:
            __break(1u);
LABEL_91:
            __break(1u);
LABEL_92:
            __break(1u);
LABEL_93:
            __break(1u);
            __break(1u);
LABEL_94:
            __break(1u);
LABEL_95:
            __break(1u);
LABEL_96:
            __break(1u);
LABEL_97:
            __break(1u);
LABEL_98:
            __break(1u);
LABEL_99:
            __break(1u);
LABEL_100:
            __break(1u);
LABEL_101:
            __break(1u);
LABEL_102:
            __break(1u);
LABEL_103:
            __break(1u);
LABEL_104:
            int64_t v12 = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v12);
          }
        }
        _StringGuts.grow(_:)(39);
        swift_bridgeObjectRelease();
        v135 = (char *)0xD00000000000002ALL;
        unint64_t v136 = 0x8000000260BFEDF0;
        v157 = v24;
        v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v37);
        swift_bridgeObjectRelease();
        v38._countAndFlagsBits = 0x3D746F67202CLL;
        v38._object = (void *)0xE600000000000000;
        String.append(_:)(v38);
        v39 = 0;
        switch((int)v13)
        {
          case 1:
            LODWORD(v39) = HIDWORD(a5) - a5;
            if (__OFSUB__(HIDWORD(a5), a5)) {
              goto LABEL_92;
            }
            v39 = (char *)(int)v39;
            break;
          case 2:
            uint64_t v63 = *(void *)(a5 + 16);
            uint64_t v62 = *(void *)(a5 + 24);
            BOOL v20 = __OFSUB__(v62, v63);
            v39 = (char *)(v62 - v63);
            if (v20) {
              goto LABEL_93;
            }
            break;
          case 3:
            break;
          default:
            v39 = (char *)BYTE6(v12);
            break;
        }
        v157 = v39;
        break;
    }
  }
  else
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    v135 = (char *)0xD00000000000002FLL;
    unint64_t v136 = 0x8000000260BFEDC0;
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 0x3D746F67202CLL;
    v17._object = (void *)0xE600000000000000;
    String.append(_:)(v17);
    v157 = v11;
  }
  v64._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v64);
  swift_bridgeObjectRelease();
  v60 = v135;
  unint64_t v65 = v136;
  lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
  swift_allocError();
  *(void *)uint64_t v66 = v135;
  *(void *)(v66 + 8) = v65;
  *(unsigned char *)(v66 + 16) = 1;
  swift_willThrow();
  return v60;
}

uint64_t specialized PINE.shard<A>(_:nonce:seedBytes:)(unint64_t *a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v176 = a3;
  uint64_t v7 = v6;
  v175 = a2;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HMAC<SHA256>);
  unint64_t v13 = *(unint64_t **)(v12 - 8);
  MEMORY[0x270FA5388](v12, v14);
  Swift::String v16 = (char *)v151 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA256>);
  uint64_t v19 = MEMORY[0x270FA5388](v17, v18);
  uint64_t v22 = (char *)v151 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v192 = a4;
  uint64_t v23 = *(char **)(a4 + 16);
  if (v23 == (char *)16)
  {
    v171 = v13;
    v24 = 0;
    switch(a6 >> 62)
    {
      case 1uLL:
        LODWORD(v24) = HIDWORD(a5) - a5;
        if (__OFSUB__(HIDWORD(a5), a5)) {
          goto LABEL_99;
        }
        v24 = (char *)(int)v24;
        goto LABEL_8;
      case 2uLL:
        uint64_t v28 = *(void *)(a5 + 16);
        uint64_t v27 = *(void *)(a5 + 24);
        BOOL v29 = __OFSUB__(v27, v28);
        v24 = (char *)(v27 - v28);
        if (!v29) {
          goto LABEL_8;
        }
        goto LABEL_100;
      case 3uLL:
        goto LABEL_8;
      default:
        v24 = (char *)BYTE6(a6);
LABEL_8:
        uint64_t v30 = *v7;
        uint64_t v31 = *v7 - 1;
        if (__OFSUB__(*v7, 1)) {
          goto LABEL_92;
        }
        if (*v7 + 0x3FFFFFFFFFFFFFFFLL < 0) {
          goto LABEL_93;
        }
        if (v30 + 0x4000000000000000 < 0) {
          goto LABEL_94;
        }
        uint64_t v32 = 2 * v31 + 2 * v30;
        if (__OFADD__(2 * v31, 2 * v30)) {
          goto LABEL_95;
        }
        if ((unint64_t)(v32 - 0x3FFFFFFFFFFFFFFLL) >> 59 != 31) {
          goto LABEL_96;
        }
        int64_t v33 = (char *)((32 * v32) | 0x20);
        if (v24 == v33)
        {
          v167 = (void *)*v7;
          v159 = v20;
          v160 = a1;
          uint64_t v164 = v12;
          uint64_t v165 = v31;
          v161 = v22;
          uint64_t v162 = v19;
          v163 = v16;
          uint64_t v35 = specialized PINE.splitSeedBytes<A>(_:)(a5, a6);
          uint64_t v36 = v34;
          *(void *)&long long v170 = v37;
          int64_t v38 = *(void *)(v35 + 16);
          uint64_t v172 = v39;
          v169 = v7;
          if (v38)
          {
            uint64_t v166 = v34;
            unint64_t v178 = MEMORY[0x263F8EE78];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38, 0);
            uint64_t v40 = v178;
            v41 = (uint64_t *)(v35 + 32);
            int64_t v42 = v38;
            do
            {
              uint64_t v43 = *v41;
              unint64_t v178 = v40;
              unint64_t v45 = *(void *)(v40 + 16);
              unint64_t v44 = *(void *)(v40 + 24);
              swift_bridgeObjectRetain();
              if (v45 >= v44 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v44 > 1), v45 + 1, 1);
                uint64_t v40 = v178;
              }
              *(void *)(v40 + 16) = v45 + 1;
              *(void *)(v40 + 8 * v45 + 32) = v43;
              v41 += 4;
              --v42;
            }
            while (v42);
            unint64_t v173 = v40;
            unint64_t v178 = MEMORY[0x263F8EE78];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38, 0);
            unint64_t v49 = v178;
            unint64_t v50 = (uint64_t *)(v35 + 40);
            int64_t v51 = v38;
            do
            {
              uint64_t v52 = *v50;
              unint64_t v178 = v49;
              unint64_t v54 = *(void *)(v49 + 16);
              unint64_t v53 = *(void *)(v49 + 24);
              swift_bridgeObjectRetain();
              if (v54 >= v53 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v53 > 1), v54 + 1, 1);
                unint64_t v49 = v178;
              }
              *(void *)(v49 + 16) = v54 + 1;
              *(void *)(v49 + 8 * v54 + 32) = v52;
              v50 += 4;
              --v51;
            }
            while (v51);
            v174 = (unint64_t *)v49;
            unint64_t v178 = MEMORY[0x263F8EE78];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38, 0);
            unint64_t v55 = v178;
            uint64_t v168 = v35;
            long long v56 = (uint64_t *)(v35 + 48);
            int64_t v57 = v38;
            do
            {
              uint64_t v58 = *v56;
              unint64_t v178 = v55;
              unint64_t v60 = *(void *)(v55 + 16);
              unint64_t v59 = *(void *)(v55 + 24);
              swift_bridgeObjectRetain();
              if (v60 >= v59 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v59 > 1), v60 + 1, 1);
                unint64_t v55 = v178;
              }
              *(void *)(v55 + 16) = v60 + 1;
              *(void *)(v55 + 8 * v60 + 32) = v58;
              v56 += 4;
              --v57;
            }
            while (v57);
            unint64_t v178 = MEMORY[0x263F8EE78];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38, 0);
            unint64_t v61 = v178;
            uint64_t v35 = v168;
            uint64_t v62 = (uint64_t *)(v168 + 56);
            do
            {
              uint64_t v63 = *v62;
              unint64_t v178 = v61;
              unint64_t v65 = *(void *)(v61 + 16);
              unint64_t v64 = *(void *)(v61 + 24);
              swift_bridgeObjectRetain();
              if (v65 >= v64 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v64 > 1), v65 + 1, 1);
                unint64_t v61 = v178;
              }
              *(void *)(v61 + 16) = v65 + 1;
              *(void *)(v61 + 8 * v65 + 32) = v63;
              v62 += 4;
              --v38;
            }
            while (v38);
            unint64_t v66 = v61;
            uint64_t v36 = v166;
            uint64_t v7 = v169;
          }
          else
          {
            unint64_t v55 = MEMORY[0x263F8EE78];
            unint64_t v173 = MEMORY[0x263F8EE78];
            v174 = (unint64_t *)MEMORY[0x263F8EE78];
            unint64_t v66 = MEMORY[0x263F8EE78];
          }
          long long v67 = *(_OWORD *)(v7 + 15);
          long long v188 = *(_OWORD *)(v7 + 13);
          long long v189 = v67;
          long long v190 = *(_OWORD *)(v7 + 17);
          int v191 = *((_DWORD *)v7 + 38);
          long long v68 = *(_OWORD *)(v7 + 7);
          v185[2] = *(_OWORD *)(v7 + 5);
          v185[3] = v68;
          long long v69 = *(_OWORD *)(v7 + 11);
          long long v186 = *(_OWORD *)(v7 + 9);
          long long v187 = v69;
          long long v70 = *(_OWORD *)(v7 + 3);
          v185[0] = *(_OWORD *)(v7 + 1);
          v185[1] = v70;
          uint64_t v182 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)&v186 + 1) & ~(*((uint64_t *)&v186 + 1) >> 63), 0, MEMORY[0x263F8EE78]);
          uint64_t v71 = v177;
          specialized PINECircuit.encodeMeasurementAndNormRangeCheck(raw:into:)(v175, v176, (char **)&v182);
          uint64_t v72 = v71;
          uint64_t v73 = v192;
          if (v72)
          {
            uint64_t v74 = v182;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return v74;
          }
          uint64_t v75 = (char *)swift_bridgeObjectRetain();
          uint64_t v82 = specialized static JointRandomness.jointRandPartsAndLeaderShare(commitment:leaderJointRandBlind:helperJointRandBlinds:helperMeasurementSeeds:numOfAggregators:nonce:)(v75, v36, v55, v173, (uint64_t)v167, v73, 9u);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WraparoundJointRandomness<PINE<Field32, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field32>);
          swift_initStackObject();
          uint64_t v83 = swift_bridgeObjectRetain();
          uint64_t v84 = specialized WraparoundJointRandomness.init(parts:)(v83, &lazy protocol witness table cache variable for type WraparoundJointRandomness<PINE<Field32, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field32> and conformance WraparoundJointRandomness<A, B>, &demangling cache variable for type metadata for WraparoundJointRandomness<PINE<Field32, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field32>, (uint64_t (*)(uint64_t))specialized static PINE.domainSeparationTag(usage:));
          uint64_t v176 = specialized PINECircuit.appendWraparoundCheck<A>(into:random:)(&v182, v84);
          uint64_t v177 = v82;
          uint64_t v85 = (char *)swift_bridgeObjectRetain();
          a5 = v173;
          uint64_t v86 = specialized static JointRandomness.jointRandPartsAndLeaderShare(commitment:leaderJointRandBlind:helperJointRandBlinds:helperMeasurementSeeds:numOfAggregators:nonce:)(v85, v172, v66, v173, (uint64_t)v167, v192, 6u);
          uint64_t v152 = v87;
          uint64_t v153 = v86;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v88 = v169;
          uint64_t v89 = v169[39];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VerificationJointRandomness<PINE<Field32, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field32>);
          inited = (void *)swift_initStackObject();
          inited[4] = 0;
          inited[5] = 3;
          unint64_t v173 = v89;
          inited[6] = v89;
          v167 = inited;
          inited[2] = v153;
          inited[3] = 0;
          swift_bridgeObjectRetain();
          a1 = (unint64_t *)&v182;
          specialized Array.append<A>(contentsOf:)(v176);
          uint64_t v91 = specialized static PINE.domainSeparationTag(usage:)(3u);
          uint64_t v157 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
          uint64_t v92 = swift_initStackObject();
          *(_OWORD *)(v92 + 16) = xmmword_260BF9FD0;
          unint64_t v93 = v88[40];
          if ((v93 & 0x8000000000000000) != 0) {
            goto LABEL_110;
          }
          if (v93 > 0xFF) {
            goto LABEL_111;
          }
          a5 = v92;
          *(unsigned char *)(v92 + 32) = v93;
          if ((v173 & 0x8000000000000000) != 0) {
            goto LABEL_112;
          }
          int64_t v158 = v93;
          if (v173 > 0xFF) {
            goto LABEL_113;
          }
          *(unsigned char *)(v92 + 33) = v173;
          uint64_t v192 = specialized static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(v170, v91, v92);
          swift_bridgeObjectRelease();
          swift_setDeallocating();
          swift_bridgeObjectRelease();
          long long v94 = *((_OWORD *)v88 + 17);
          v183[6] = *((_OWORD *)v88 + 16);
          v183[7] = v94;
          v183[8] = *((_OWORD *)v88 + 18);
          int v184 = *((_DWORD *)v88 + 76);
          long long v95 = *((_OWORD *)v88 + 13);
          v183[2] = *((_OWORD *)v88 + 12);
          v183[3] = v95;
          long long v96 = *((_OWORD *)v88 + 15);
          v183[4] = *((_OWORD *)v88 + 14);
          v183[5] = v96;
          long long v97 = *((_OWORD *)v88 + 11);
          v183[0] = *((_OWORD *)v88 + 10);
          v183[1] = v97;
          a1 = (unint64_t *)v183;
          uint64_t v98 = specialized FullyLinearProof.proofLength.getter();
          a5 = v158 * v98;
          if ((unsigned __int128)(v158 * (__int128)v98) >> 64 != (v158 * v98) >> 63) {
            goto LABEL_114;
          }
          a1 = (unint64_t *)v185;
          uint64_t v99 = specialized FullyLinearProof.proofLength.getter();
          uint64_t v100 = v173 * v99;
          if ((unsigned __int128)((uint64_t)v173 * (__int128)v99) >> 64 != (uint64_t)(v173 * v99) >> 63) {
            goto LABEL_115;
          }
          BOOL v29 = __OFADD__(a5, v100);
          uint64_t v101 = a5 + v100;
          if (v29) {
            goto LABEL_116;
          }
          v151[1] = v84;
          uint64_t v168 = v35;
          v181[0] = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v101 & ~(v101 >> 63), 0, MEMORY[0x263F8EE78]);
          int64_t v102 = v158;
          if (v158)
          {
            a5 = v182;
            unint64_t v103 = MEMORY[0x263F8EE78];
            do
            {
              if (!v102) {
                goto LABEL_103;
              }
              int64_t v104 = specialized FullyLinearProof.proveRandLength.getter();
              unint64_t v105 = specialized static FieldElement.randomVector<A>(count:using:)(v104, v192);
              swift_bridgeObjectRetain();
              a1 = (unint64_t *)v183;
              specialized FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:)(v181, a5, v105, v103);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              --v102;
            }
            while (v102);
          }
          uint64_t v166 = v36;
          uint64_t v106 = v173;
          a1 = v174;
          if (v173)
          {
            uint64_t v107 = v173 & ~((uint64_t)v173 >> 63);
            v175 = (float *)v182;
            do
            {
              uint64_t v176 = v106;
              if (!v107) {
                goto LABEL_104;
              }
              uint64_t v108 = specialized VerificationJointRandomness.xof.getter(&lazy protocol witness table cache variable for type VerificationJointRandomness<PINE<Field32, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field32> and conformance VerificationJointRandomness<A, B>, &demangling cache variable for type metadata for VerificationJointRandomness<PINE<Field32, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field32>, (uint64_t (*)(uint64_t))specialized static PINE.domainSeparationTag(usage:));
              unint64_t v178 = MEMORY[0x263F8EE78];
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 3, 0);
              unint64_t v109 = v178;
              specialized static FieldElement.randomElement<A>(using:)(v108, &v180);
              unsigned int v110 = v180;
              unint64_t v112 = *(void *)(v109 + 16);
              unint64_t v111 = *(void *)(v109 + 24);
              if (v112 >= v111 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v111 > 1), v112 + 1, 1);
                unint64_t v109 = v178;
              }
              *(void *)(v109 + 16) = v112 + 1;
              *(_DWORD *)(v109 + 4 * v112 + 32) = v110;
              specialized static FieldElement.randomElement<A>(using:)(v108, &v180);
              unsigned int v113 = v180;
              unint64_t v178 = v109;
              unint64_t v115 = *(void *)(v109 + 16);
              unint64_t v114 = *(void *)(v109 + 24);
              if (v115 >= v114 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v114 > 1), v115 + 1, 1);
                unint64_t v109 = v178;
              }
              *(void *)(v109 + 16) = v115 + 1;
              *(_DWORD *)(v109 + 4 * v115 + 32) = v113;
              specialized static FieldElement.randomElement<A>(using:)(v108, &v180);
              unsigned int v116 = v180;
              unint64_t v178 = v109;
              unint64_t v118 = *(void *)(v109 + 16);
              unint64_t v117 = *(void *)(v109 + 24);
              if (v118 >= v117 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v117 > 1), v118 + 1, 1);
                unint64_t v109 = v178;
              }
              *(void *)(v109 + 16) = v118 + 1;
              *(_DWORD *)(v109 + 4 * v118 + 32) = v116;
              swift_release();
              int64_t v119 = specialized FullyLinearProof.proveRandLength.getter();
              a5 = specialized static FieldElement.randomVector<A>(count:using:)(v119, v192);
              uint64_t v120 = v175;
              swift_bridgeObjectRetain();
              specialized FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:)(v181, (uint64_t)v120, a5, v109);
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              --v107;
              unint64_t v121 = v177;
              uint64_t v106 = v176 - 1;
              uint64_t v122 = v168;
              a1 = v174;
            }
            while (v176 != 1);
          }
          else
          {
            uint64_t v122 = v168;
            unint64_t v121 = v177;
          }
          if (v165 < 0) {
            goto LABEL_117;
          }
          uint64_t v123 = v166;
          int64_t v124 = v172;
          if (!v165)
          {
LABEL_90:
            swift_bridgeObjectRelease();
            long long v148 = v181[0];
            swift_bridgeObjectRetain();
            uint64_t v74 = specialized PINE.inputSharesFrom(leaderMeasurementShare:leaderProofShare:leaderWraparoundJointRandBlind:leaderVerificationJointRandBlind:helperSeeds:)(v152, (unint64_t)v148, v123, v124, v122, &demangling cache variable for type metadata for _ContiguousArrayStorage<PINEInputShare<Field32, XofHmacSha256Aes128>>, &demangling cache variable for type metadata for PINEInputShare<Field32, XofHmacSha256Aes128>);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            long long v149 = v160;
            uint64_t v150 = v153;
            unint64_t *v160 = v121;
            v149[1] = v150;
            return v74;
          }
          a5 = (uint64_t)v181[0];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            goto LABEL_118;
          }
          while (1)
          {
            uint64_t v125 = v171;
            v126 = v159;
            uint64_t v127 = 0;
            v181[0] = (char *)a5;
            v171 = a1 + 4;
            v159 = (void (**)(char *, uint64_t, uint64_t))(v125 + 2);
            long long v155 = (void (**)(char *, uint64_t))(v126 + 1);
            uint64_t v156 = (void (**)(char *, uint64_t))(v125 + 1);
            long long v170 = xmmword_260BF9FE0;
            uint64_t v154 = MEMORY[0x263F8EE60] + 8;
            uint64_t v128 = (float *)v165;
            while (1)
            {
              if (v127 == v128) {
                goto LABEL_105;
              }
              if (v127 == (float *)255) {
                goto LABEL_106;
              }
              if ((unint64_t)v127 >= a1[2]) {
                goto LABEL_107;
              }
              a1 = (unint64_t *)((char *)v127 + 1);
              uint64_t v129 = v171[(void)v127];
              swift_bridgeObjectRetain();
              uint64_t v130 = specialized static PINE.domainSeparationTag(usage:)(1u);
              uint64_t v131 = swift_initStackObject();
              *(_OWORD *)(v131 + 16) = v170;
              *(unsigned char *)(v131 + 32) = v158;
              *(unsigned char *)(v131 + 33) = v173;
              *(unsigned char *)(v131 + 34) = (_BYTE)a1;
              if (*(void *)(v129 + 16) != 32) {
                goto LABEL_108;
              }
              uint64_t v132 = v131;
              v175 = (float *)a1;
              type metadata accessor for XofHmacSha256Aes128(0);
              a1 = (unint64_t *)swift_allocObject();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              uint64_t v176 = v130;
              uint64_t v133 = XofHmacSha256Aes128.init(seedBytes:domainSeparationTag:binder:)(v129, v130, v132);
              if (*(void *)(v133 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream)) {
                goto LABEL_109;
              }
              uint64_t v134 = v133;
              uint64_t v135 = v133 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_hmac;
              swift_beginAccess();
              unint64_t v136 = v163;
              uint64_t v137 = v135;
              uint64_t v138 = v164;
              (*v159)(v163, v137, v164);
              long long v139 = v161;
              HMAC.finalize()();
              (*v156)(v136, v138);
              uint64_t v140 = v162;
              HashedAuthenticationCode.withUnsafeBytes<A>(_:)();
              (*v155)(v139, v140);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              a1 = *(unint64_t **)(a5 + 16);
              if (a1) {
                break;
              }
              swift_release();
              uint64_t v123 = v166;
              int64_t v124 = v172;
LABEL_72:
              unint64_t v121 = v177;
              a1 = v174;
              uint64_t v127 = v175;
              uint64_t v128 = (float *)v165;
              uint64_t v122 = v168;
              if (v175 == (float *)v165) {
                goto LABEL_90;
              }
            }
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v123 = v166;
            int64_t v124 = v172;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              a5 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(a5);
            }
            long long v142 = 0;
            while (1)
            {
              specialized static FieldElement.randomElement<A>(using:)(v134, &v180);
              if ((unint64_t)v142 >= *(void *)(a5 + 16)) {
                break;
              }
              uint64_t v143 = a5 + 4 * (void)v142;
              unsigned int v144 = *(_DWORD *)(v143 + 32);
              int v145 = v144 - v180;
              if (v144 < v180)
              {
                unsigned int v146 = -1048575 - v180;
                if (v180 > 0xFFF00001) {
                  goto LABEL_97;
                }
                BOOL v147 = __CFADD__(v144, v146);
                int v145 = v144 + v146;
                if (v147) {
                  goto LABEL_98;
                }
              }
              long long v142 = (unint64_t *)((char *)v142 + 1);
              *(_DWORD *)(v143 + 32) = v145;
              if (a1 == v142)
              {
                swift_release();
                v181[0] = (char *)a5;
                goto LABEL_72;
              }
            }
            __break(1u);
LABEL_92:
            __break(1u);
LABEL_93:
            __break(1u);
LABEL_94:
            __break(1u);
LABEL_95:
            __break(1u);
LABEL_96:
            __break(1u);
LABEL_97:
            __break(1u);
LABEL_98:
            __break(1u);
LABEL_99:
            __break(1u);
LABEL_100:
            __break(1u);
LABEL_101:
            __break(1u);
LABEL_102:
            __break(1u);
LABEL_103:
            __break(1u);
LABEL_104:
            __break(1u);
LABEL_105:
            __break(1u);
LABEL_106:
            __break(1u);
LABEL_107:
            __break(1u);
LABEL_108:
            __break(1u);
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            a5 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(a5);
          }
        }
        unint64_t v178 = 0;
        unint64_t v179 = 0xE000000000000000;
        _StringGuts.grow(_:)(39);
        swift_bridgeObjectRelease();
        unint64_t v178 = 0xD00000000000002ALL;
        unint64_t v179 = 0x8000000260BFEDF0;
        uint64_t v182 = (uint64_t)v33;
        v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v46);
        swift_bridgeObjectRelease();
        a1 = &v178;
        v47._countAndFlagsBits = 0x3D746F67202CLL;
        v47._object = (void *)0xE600000000000000;
        String.append(_:)(v47);
        uint64_t v48 = 0;
        switch(a6 >> 62)
        {
          case 1uLL:
            LODWORD(v48) = HIDWORD(a5) - a5;
            if (__OFSUB__(HIDWORD(a5), a5)) {
              goto LABEL_101;
            }
            uint64_t v48 = (int)v48;
            break;
          case 2uLL:
            uint64_t v77 = *(void *)(a5 + 16);
            uint64_t v76 = *(void *)(a5 + 24);
            BOOL v29 = __OFSUB__(v76, v77);
            uint64_t v48 = v76 - v77;
            if (v29) {
              goto LABEL_102;
            }
            break;
          case 3uLL:
            break;
          default:
            uint64_t v48 = BYTE6(a6);
            break;
        }
        uint64_t v182 = v48;
        break;
    }
  }
  else
  {
    unint64_t v178 = 0;
    unint64_t v179 = 0xE000000000000000;
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    unint64_t v178 = 0xD00000000000002FLL;
    unint64_t v179 = 0x8000000260BFEDC0;
    uint64_t v182 = 16;
    v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._countAndFlagsBits = 0x3D746F67202CLL;
    v26._object = (void *)0xE600000000000000;
    String.append(_:)(v26);
    uint64_t v182 = (uint64_t)v23;
  }
  v78._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v78);
  swift_bridgeObjectRelease();
  uint64_t v74 = v178;
  unint64_t v79 = v179;
  lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
  swift_allocError();
  *(void *)uint64_t v80 = v74;
  *(void *)(v80 + 8) = v79;
  *(unsigned char *)(v80 + 16) = 1;
  swift_willThrow();
  return v74;
}

uint64_t specialized PINE.shard<A>(_:nonce:seedBytes:)(uint64_t *a1, float *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v176 = a3;
  uint64_t v7 = v6;
  v175 = a2;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HMAC<SHA256>);
  unint64_t v13 = *(uint64_t **)(v12 - 8);
  MEMORY[0x270FA5388](v12, v14);
  Swift::String v16 = (char *)v151 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA256>);
  uint64_t v19 = MEMORY[0x270FA5388](v17, v18);
  uint64_t v22 = (char *)v151 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v178 = a4;
  uint64_t v23 = *(void *)(a4 + 16);
  if (v23 == 16)
  {
    v171 = v13;
    uint64_t v24 = 0;
    switch(a6 >> 62)
    {
      case 1uLL:
        LODWORD(v24) = HIDWORD(a5) - a5;
        if (__OFSUB__(HIDWORD(a5), a5)) {
          goto LABEL_99;
        }
        uint64_t v24 = (int)v24;
        goto LABEL_8;
      case 2uLL:
        uint64_t v28 = *(void *)(a5 + 16);
        uint64_t v27 = *(void *)(a5 + 24);
        BOOL v29 = __OFSUB__(v27, v28);
        uint64_t v24 = v27 - v28;
        if (!v29) {
          goto LABEL_8;
        }
        goto LABEL_100;
      case 3uLL:
        goto LABEL_8;
      default:
        uint64_t v24 = BYTE6(a6);
LABEL_8:
        uint64_t v30 = *v7;
        uint64_t v31 = *v7 - 1;
        if (__OFSUB__(*v7, 1)) {
          goto LABEL_92;
        }
        if (*v7 + 0x3FFFFFFFFFFFFFFFLL < 0) {
          goto LABEL_93;
        }
        if (v30 + 0x4000000000000000 < 0) {
          goto LABEL_94;
        }
        uint64_t v32 = 2 * v31 + 2 * v30;
        if (__OFADD__(2 * v31, 2 * v30)) {
          goto LABEL_95;
        }
        if ((unint64_t)(v32 - 0x3FFFFFFFFFFFFFFLL) >> 59 != 31) {
          goto LABEL_96;
        }
        uint64_t v33 = (32 * v32) | 0x20;
        if (v24 == v33)
        {
          v167 = (void *)*v7;
          v159 = v20;
          v160 = a1;
          uint64_t v164 = v12;
          uint64_t v165 = v31;
          v161 = v22;
          uint64_t v162 = v19;
          v163 = v16;
          uint64_t v35 = specialized PINE.splitSeedBytes<A>(_:)(a5, a6);
          uint64_t v36 = v34;
          *(void *)&long long v170 = v37;
          int64_t v38 = *(void *)(v35 + 16);
          uint64_t v172 = v39;
          v169 = v7;
          if (v38)
          {
            uint64_t v166 = v34;
            unint64_t v179 = MEMORY[0x263F8EE78];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38, 0);
            uint64_t v40 = v179;
            v41 = (uint64_t *)(v35 + 32);
            int64_t v42 = v38;
            do
            {
              uint64_t v43 = *v41;
              unint64_t v179 = v40;
              unint64_t v45 = *(void *)(v40 + 16);
              unint64_t v44 = *(void *)(v40 + 24);
              swift_bridgeObjectRetain();
              if (v45 >= v44 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v44 > 1), v45 + 1, 1);
                uint64_t v40 = v179;
              }
              *(void *)(v40 + 16) = v45 + 1;
              *(void *)(v40 + 8 * v45 + 32) = v43;
              v41 += 4;
              --v42;
            }
            while (v42);
            uint64_t v173 = v40;
            unint64_t v179 = MEMORY[0x263F8EE78];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38, 0);
            unint64_t v49 = v179;
            unint64_t v50 = (uint64_t *)(v35 + 40);
            int64_t v51 = v38;
            do
            {
              uint64_t v52 = *v50;
              unint64_t v179 = v49;
              unint64_t v54 = *(void *)(v49 + 16);
              unint64_t v53 = *(void *)(v49 + 24);
              swift_bridgeObjectRetain();
              if (v54 >= v53 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v53 > 1), v54 + 1, 1);
                unint64_t v49 = v179;
              }
              *(void *)(v49 + 16) = v54 + 1;
              *(void *)(v49 + 8 * v54 + 32) = v52;
              v50 += 4;
              --v51;
            }
            while (v51);
            v174 = (uint64_t *)v49;
            unint64_t v179 = MEMORY[0x263F8EE78];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38, 0);
            unint64_t v55 = v179;
            uint64_t v168 = v35;
            long long v56 = (uint64_t *)(v35 + 48);
            int64_t v57 = v38;
            do
            {
              uint64_t v58 = *v56;
              unint64_t v179 = v55;
              unint64_t v60 = *(void *)(v55 + 16);
              unint64_t v59 = *(void *)(v55 + 24);
              swift_bridgeObjectRetain();
              if (v60 >= v59 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v59 > 1), v60 + 1, 1);
                unint64_t v55 = v179;
              }
              *(void *)(v55 + 16) = v60 + 1;
              *(void *)(v55 + 8 * v60 + 32) = v58;
              v56 += 4;
              --v57;
            }
            while (v57);
            unint64_t v179 = MEMORY[0x263F8EE78];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38, 0);
            unint64_t v61 = v179;
            uint64_t v35 = v168;
            uint64_t v62 = (uint64_t *)(v168 + 56);
            do
            {
              uint64_t v63 = *v62;
              unint64_t v179 = v61;
              unint64_t v65 = *(void *)(v61 + 16);
              unint64_t v64 = *(void *)(v61 + 24);
              swift_bridgeObjectRetain();
              if (v65 >= v64 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v64 > 1), v65 + 1, 1);
                unint64_t v61 = v179;
              }
              *(void *)(v61 + 16) = v65 + 1;
              *(void *)(v61 + 8 * v65 + 32) = v63;
              v62 += 4;
              --v38;
            }
            while (v38);
            unint64_t v66 = v61;
            uint64_t v36 = v166;
            uint64_t v7 = v169;
          }
          else
          {
            unint64_t v55 = MEMORY[0x263F8EE78];
            uint64_t v173 = MEMORY[0x263F8EE78];
            v174 = (uint64_t *)MEMORY[0x263F8EE78];
            unint64_t v66 = MEMORY[0x263F8EE78];
          }
          long long v67 = *(_OWORD *)(v7 + 15);
          long long v188 = *(_OWORD *)(v7 + 13);
          long long v189 = v67;
          long long v190 = *(_OWORD *)(v7 + 17);
          uint64_t v191 = v7[19];
          long long v68 = *(_OWORD *)(v7 + 7);
          v185[2] = *(_OWORD *)(v7 + 5);
          v185[3] = v68;
          long long v69 = *(_OWORD *)(v7 + 11);
          long long v186 = *(_OWORD *)(v7 + 9);
          long long v187 = v69;
          long long v70 = *(_OWORD *)(v7 + 3);
          v185[0] = *(_OWORD *)(v7 + 1);
          v185[1] = v70;
          unint64_t v192 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)&v186 + 1) & ~(*((uint64_t *)&v186 + 1) >> 63), 0, MEMORY[0x263F8EE78], &demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
          uint64_t v71 = v177;
          specialized PINECircuit.encodeMeasurementAndNormRangeCheck(raw:into:)(v175, v176, (uint64_t *)&v192);
          uint64_t v72 = v71;
          uint64_t v73 = v178;
          if (v72)
          {
            uint64_t v74 = v192;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return v74;
          }
          uint64_t v75 = (char *)swift_bridgeObjectRetain();
          uint64_t v82 = specialized static JointRandomness.jointRandPartsAndLeaderShare(commitment:leaderJointRandBlind:helperJointRandBlinds:helperMeasurementSeeds:numOfAggregators:nonce:)(v75, v36, v55, v173, (uint64_t)v167, v73, 9u, (uint64_t (*)(uint64_t))specialized static PINE.domainSeparationTag(usage:), (uint64_t)partial apply for closure #1 in XofHmacSha256Aes128.finalize(), (uint64_t (*)(void))specialized static PINE.domainSeparationTag(usage:));
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WraparoundJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64>);
          swift_initStackObject();
          uint64_t v83 = swift_bridgeObjectRetain();
          uint64_t v84 = specialized WraparoundJointRandomness.init(parts:)(v83, &lazy protocol witness table cache variable for type WraparoundJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64> and conformance WraparoundJointRandomness<A, B>, &demangling cache variable for type metadata for WraparoundJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64>, (uint64_t (*)(uint64_t))specialized static PINE.domainSeparationTag(usage:));
          unint64_t v176 = specialized PINECircuit.appendWraparoundCheck<A>(into:random:)((uint64_t *)&v192, v84);
          uint64_t v177 = v82;
          uint64_t v85 = (char *)swift_bridgeObjectRetain();
          a5 = v173;
          uint64_t v86 = specialized static JointRandomness.jointRandPartsAndLeaderShare(commitment:leaderJointRandBlind:helperJointRandBlinds:helperMeasurementSeeds:numOfAggregators:nonce:)(v85, v172, v66, v173, (uint64_t)v167, v178, 6u, (uint64_t (*)(uint64_t))specialized static PINE.domainSeparationTag(usage:), (uint64_t)partial apply for closure #1 in XofHmacSha256Aes128.finalize(), (uint64_t (*)(void))specialized static PINE.domainSeparationTag(usage:));
          uint64_t v152 = v87;
          uint64_t v153 = v86;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v88 = v169;
          uint64_t v89 = v169[39];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VerificationJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64>);
          inited = (void *)swift_initStackObject();
          inited[4] = 0;
          inited[5] = 3;
          uint64_t v173 = v89;
          inited[6] = v89;
          v167 = inited;
          inited[2] = v153;
          inited[3] = 0;
          swift_bridgeObjectRetain();
          a1 = (uint64_t *)&v192;
          specialized Array.append<A>(contentsOf:)(v176, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
          uint64_t v91 = specialized static PINE.domainSeparationTag(usage:)(3u);
          uint64_t v157 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
          uint64_t v92 = swift_initStackObject();
          *(_OWORD *)(v92 + 16) = xmmword_260BF9FD0;
          unint64_t v93 = v88[40];
          if ((v93 & 0x8000000000000000) != 0) {
            goto LABEL_110;
          }
          if (v93 > 0xFF) {
            goto LABEL_111;
          }
          a5 = v92;
          *(unsigned char *)(v92 + 32) = v93;
          if (v173 < 0) {
            goto LABEL_112;
          }
          int64_t v158 = v93;
          if ((unint64_t)v173 > 0xFF) {
            goto LABEL_113;
          }
          *(unsigned char *)(v92 + 33) = v173;
          uint64_t v178 = specialized static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(v170, v91, v92);
          swift_bridgeObjectRelease();
          swift_setDeallocating();
          swift_bridgeObjectRelease();
          long long v94 = *((_OWORD *)v88 + 17);
          v183[6] = *((_OWORD *)v88 + 16);
          v183[7] = v94;
          v183[8] = *((_OWORD *)v88 + 18);
          uint64_t v184 = v88[38];
          long long v95 = *((_OWORD *)v88 + 13);
          v183[2] = *((_OWORD *)v88 + 12);
          v183[3] = v95;
          long long v96 = *((_OWORD *)v88 + 15);
          v183[4] = *((_OWORD *)v88 + 14);
          v183[5] = v96;
          long long v97 = *((_OWORD *)v88 + 11);
          v183[0] = *((_OWORD *)v88 + 10);
          v183[1] = v97;
          a1 = (uint64_t *)v183;
          uint64_t v98 = specialized FullyLinearProof.proofLength.getter();
          a5 = v158 * v98;
          if ((unsigned __int128)(v158 * (__int128)v98) >> 64 != (v158 * v98) >> 63) {
            goto LABEL_114;
          }
          a1 = (uint64_t *)v185;
          uint64_t v99 = specialized FullyLinearProof.proofLength.getter();
          uint64_t v100 = v173 * v99;
          if ((unsigned __int128)(v173 * (__int128)v99) >> 64 != (v173 * v99) >> 63) {
            goto LABEL_115;
          }
          BOOL v29 = __OFADD__(a5, v100);
          uint64_t v101 = a5 + v100;
          if (v29) {
            goto LABEL_116;
          }
          v151[1] = v84;
          uint64_t v168 = v35;
          v182[0] = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v101 & ~(v101 >> 63), 0, MEMORY[0x263F8EE78], &demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
          int64_t v102 = v158;
          if (v158)
          {
            unint64_t v103 = v192;
            unint64_t v104 = MEMORY[0x263F8EE78];
            do
            {
              if (!v102) {
                goto LABEL_103;
              }
              unint64_t v105 = specialized FullyLinearProof.proveRandLength.getter();
              a5 = specialized static FieldElement.randomVector<A>(count:using:)(v105, v178, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t))specialized static FieldElement.randomElement<A>(using:));
              swift_bridgeObjectRetain();
              a1 = (uint64_t *)v183;
              specialized FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:)(v182, v103, a5, v104);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              --v102;
            }
            while (v102);
          }
          uint64_t v166 = v36;
          unint64_t v106 = v173;
          a1 = v174;
          if (v173)
          {
            uint64_t v107 = v173 & ~(v173 >> 63);
            v175 = (float *)v192;
            do
            {
              unint64_t v176 = v106;
              if (!v107) {
                goto LABEL_104;
              }
              uint64_t v108 = specialized VerificationJointRandomness.xof.getter(&lazy protocol witness table cache variable for type VerificationJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64> and conformance VerificationJointRandomness<A, B>, &demangling cache variable for type metadata for VerificationJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64>, (uint64_t (*)(uint64_t))specialized static PINE.domainSeparationTag(usage:));
              unint64_t v179 = MEMORY[0x263F8EE78];
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 3, 0);
              unint64_t v109 = (void *)v179;
              specialized static FieldElement.randomElement<A>(using:)(v108, &v181);
              unint64_t v110 = v181;
              unint64_t v112 = v109[2];
              unint64_t v111 = v109[3];
              if (v112 >= v111 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v111 > 1), v112 + 1, 1);
                unint64_t v109 = (void *)v179;
              }
              v109[2] = v112 + 1;
              v109[v112 + 4] = v110;
              specialized static FieldElement.randomElement<A>(using:)(v108, &v181);
              unint64_t v113 = v181;
              unint64_t v179 = (unint64_t)v109;
              unint64_t v115 = v109[2];
              unint64_t v114 = v109[3];
              if (v115 >= v114 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v114 > 1), v115 + 1, 1);
                unint64_t v109 = (void *)v179;
              }
              v109[2] = v115 + 1;
              v109[v115 + 4] = v113;
              specialized static FieldElement.randomElement<A>(using:)(v108, &v181);
              unint64_t v116 = v181;
              unint64_t v179 = (unint64_t)v109;
              unint64_t v118 = v109[2];
              unint64_t v117 = v109[3];
              if (v118 >= v117 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v117 > 1), v118 + 1, 1);
                unint64_t v109 = (void *)v179;
              }
              v109[2] = v118 + 1;
              v109[v118 + 4] = v116;
              swift_release();
              unint64_t v119 = specialized FullyLinearProof.proveRandLength.getter();
              a5 = specialized static FieldElement.randomVector<A>(count:using:)(v119, v178, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t))specialized static FieldElement.randomElement<A>(using:));
              uint64_t v120 = v175;
              swift_bridgeObjectRetain();
              specialized FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:)(v182, (uint64_t)v120, a5, v109);
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              --v107;
              uint64_t v121 = v177;
              unint64_t v106 = v176 - 1;
              uint64_t v122 = v168;
              a1 = v174;
            }
            while (v176 != 1);
          }
          else
          {
            uint64_t v122 = v168;
            uint64_t v121 = v177;
          }
          if (v165 < 0) {
            goto LABEL_117;
          }
          uint64_t v123 = v166;
          int64_t v124 = v172;
          if (!v165)
          {
LABEL_90:
            swift_bridgeObjectRelease();
            long long v148 = v182[0];
            swift_bridgeObjectRetain();
            uint64_t v74 = specialized PINE.inputSharesFrom(leaderMeasurementShare:leaderProofShare:leaderWraparoundJointRandBlind:leaderVerificationJointRandBlind:helperSeeds:)(v152, (unint64_t)v148, v123, v124, v122, &demangling cache variable for type metadata for _ContiguousArrayStorage<PINEInputShare<Field64, XofHmacSha256Aes128>>, &demangling cache variable for type metadata for PINEInputShare<Field64, XofHmacSha256Aes128>);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            long long v149 = v160;
            uint64_t v150 = v153;
            uint64_t *v160 = v121;
            v149[1] = v150;
            return v74;
          }
          a5 = (uint64_t)v182[0];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            goto LABEL_118;
          }
          while (1)
          {
            uint64_t v125 = v171;
            v126 = v159;
            uint64_t v127 = 0;
            v182[0] = (char *)a5;
            v171 = a1 + 4;
            v159 = (void (**)(char *, uint64_t, uint64_t))(v125 + 2);
            long long v155 = (void (**)(char *, uint64_t))(v126 + 1);
            uint64_t v156 = (void (**)(char *, uint64_t))(v125 + 1);
            long long v170 = xmmword_260BF9FE0;
            uint64_t v154 = MEMORY[0x263F8EE60] + 8;
            uint64_t v128 = (float *)v165;
            while (1)
            {
              if (v127 == v128) {
                goto LABEL_105;
              }
              if (v127 == (float *)255) {
                goto LABEL_106;
              }
              if ((unint64_t)v127 >= a1[2]) {
                goto LABEL_107;
              }
              a1 = (uint64_t *)((char *)v127 + 1);
              uint64_t v129 = v171[(void)v127];
              swift_bridgeObjectRetain();
              unint64_t v130 = specialized static PINE.domainSeparationTag(usage:)(1u);
              uint64_t v131 = swift_initStackObject();
              *(_OWORD *)(v131 + 16) = v170;
              *(unsigned char *)(v131 + 32) = v158;
              *(unsigned char *)(v131 + 33) = v173;
              *(unsigned char *)(v131 + 34) = (_BYTE)a1;
              if (*(void *)(v129 + 16) != 32) {
                goto LABEL_108;
              }
              uint64_t v132 = v131;
              v175 = (float *)a1;
              type metadata accessor for XofHmacSha256Aes128(0);
              a1 = (uint64_t *)swift_allocObject();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              unint64_t v176 = v130;
              uint64_t v133 = XofHmacSha256Aes128.init(seedBytes:domainSeparationTag:binder:)(v129, v130, v132);
              if (*(void *)(v133 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream)) {
                goto LABEL_109;
              }
              uint64_t v134 = v133;
              uint64_t v135 = v133 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_hmac;
              swift_beginAccess();
              unint64_t v136 = v163;
              uint64_t v137 = v135;
              uint64_t v138 = v164;
              (*v159)(v163, v137, v164);
              long long v139 = v161;
              HMAC.finalize()();
              (*v156)(v136, v138);
              uint64_t v140 = v162;
              HashedAuthenticationCode.withUnsafeBytes<A>(_:)();
              (*v155)(v139, v140);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              a1 = *(uint64_t **)(a5 + 16);
              if (a1) {
                break;
              }
              swift_release();
              uint64_t v123 = v166;
              int64_t v124 = v172;
LABEL_72:
              uint64_t v121 = v177;
              a1 = v174;
              uint64_t v127 = v175;
              uint64_t v128 = (float *)v165;
              uint64_t v122 = v168;
              if (v175 == (float *)v165) {
                goto LABEL_90;
              }
            }
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v123 = v166;
            int64_t v124 = v172;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              a5 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(a5);
            }
            long long v142 = 0;
            while (1)
            {
              specialized static FieldElement.randomElement<A>(using:)(v134, &v181);
              if ((unint64_t)v142 >= *(void *)(a5 + 16)) {
                break;
              }
              uint64_t v143 = a5 + 8 * (void)v142;
              unint64_t v144 = *(void *)(v143 + 32);
              uint64_t v145 = v144 - v181;
              if (v144 < v181)
              {
                uint64_t v146 = 0xFFFFFFFF00000001 - v181;
                if (v181 > 0xFFFFFFFF00000001) {
                  goto LABEL_97;
                }
                BOOL v147 = __CFADD__(v144, v146);
                uint64_t v145 = v144 + v146;
                if (v147) {
                  goto LABEL_98;
                }
              }
              long long v142 = (uint64_t *)((char *)v142 + 1);
              *(void *)(v143 + 32) = v145;
              if (a1 == v142)
              {
                swift_release();
                v182[0] = (char *)a5;
                goto LABEL_72;
              }
            }
            __break(1u);
LABEL_92:
            __break(1u);
LABEL_93:
            __break(1u);
LABEL_94:
            __break(1u);
LABEL_95:
            __break(1u);
LABEL_96:
            __break(1u);
LABEL_97:
            __break(1u);
LABEL_98:
            __break(1u);
LABEL_99:
            __break(1u);
LABEL_100:
            __break(1u);
LABEL_101:
            __break(1u);
LABEL_102:
            __break(1u);
LABEL_103:
            __break(1u);
LABEL_104:
            __break(1u);
LABEL_105:
            __break(1u);
LABEL_106:
            __break(1u);
LABEL_107:
            __break(1u);
LABEL_108:
            __break(1u);
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            a5 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(a5);
          }
        }
        unint64_t v179 = 0;
        unint64_t v180 = 0xE000000000000000;
        _StringGuts.grow(_:)(39);
        swift_bridgeObjectRelease();
        unint64_t v179 = 0xD00000000000002ALL;
        unint64_t v180 = 0x8000000260BFEDF0;
        unint64_t v192 = v33;
        v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v46);
        swift_bridgeObjectRelease();
        a1 = (uint64_t *)&v179;
        v47._countAndFlagsBits = 0x3D746F67202CLL;
        v47._object = (void *)0xE600000000000000;
        String.append(_:)(v47);
        uint64_t v48 = 0;
        switch(a6 >> 62)
        {
          case 1uLL:
            LODWORD(v48) = HIDWORD(a5) - a5;
            if (__OFSUB__(HIDWORD(a5), a5)) {
              goto LABEL_101;
            }
            uint64_t v48 = (int)v48;
            break;
          case 2uLL:
            uint64_t v77 = *(void *)(a5 + 16);
            uint64_t v76 = *(void *)(a5 + 24);
            BOOL v29 = __OFSUB__(v76, v77);
            uint64_t v48 = v76 - v77;
            if (v29) {
              goto LABEL_102;
            }
            break;
          case 3uLL:
            break;
          default:
            uint64_t v48 = BYTE6(a6);
            break;
        }
        unint64_t v192 = v48;
        break;
    }
  }
  else
  {
    unint64_t v179 = 0;
    unint64_t v180 = 0xE000000000000000;
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    unint64_t v179 = 0xD00000000000002FLL;
    unint64_t v180 = 0x8000000260BFEDC0;
    unint64_t v192 = 16;
    v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._countAndFlagsBits = 0x3D746F67202CLL;
    v26._object = (void *)0xE600000000000000;
    String.append(_:)(v26);
    unint64_t v192 = v23;
  }
  v78._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v78);
  swift_bridgeObjectRelease();
  uint64_t v74 = v179;
  unint64_t v79 = v180;
  lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
  swift_allocError();
  *(void *)uint64_t v80 = v74;
  *(void *)(v80 + 8) = v79;
  *(unsigned char *)(v80 + 16) = 1;
  swift_willThrow();
  return v74;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF4SeedV16measurementShare_AI05proofG0AI24wraparoundJointRandBlindAI012verificationjkL0ts5NeverOTg5020_s4VDAF4PINEV14splite65Bytes33_96F6F895E25AE9C9B366289ACE02F486LLySayAA0D0V16measurementg26_AG05proofO0AG24wraparoundjkl117AG012verificationrsT0tG12helperShares_AG016leaderWraparoundrsT0AG0x12VerificationrsT0AG05provesD0tqd__SkRd__s5UInt8V7B89Rtd__lFAgH_AgigjgKtSiXEfU_AA7Field40V_SRySfGAA19XofHmacSha256Aes128C10Foundation4DataVTG5s10ArraySliceVys5UInt8VGTf1cn_nTm(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v19 = result;
  uint64_t v4 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (!v4) {
    return v5;
  }
  uint64_t v21 = MEMORY[0x263F8EE78];
  result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = v21;
    uint64_t v6 = a2;
    if (a2 <= v19) {
      uint64_t v6 = v19;
    }
    for (uint64_t i = v6 - v19; ; --i)
    {
      result = specialized closure #1 in PINE.splitSeedBytes<A>(_:)(a3);
      if (v3)
      {
        swift_release();
        return v5;
      }
      uint64_t v11 = result;
      uint64_t v12 = v8;
      uint64_t v13 = v9;
      uint64_t v14 = v10;
      unint64_t v16 = *(void *)(v21 + 16);
      unint64_t v15 = *(void *)(v21 + 24);
      if (v16 >= v15 >> 1) {
        result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1);
      }
      *(void *)(v21 + 16) = v16 + 1;
      uint64_t v17 = (void *)(v21 + 32 * v16);
      v17[4] = v11;
      v17[5] = v12;
      v17[6] = v13;
      v17[7] = v14;
      if (a2 < v19) {
        break;
      }
      if (!i) {
        goto LABEL_17;
      }
      if (!--v4) {
        return v5;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_19:
  __break(1u);
  return result;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay4VDAF16GadgetParametersVG_AF0E10WireInputsCyAF7Field40VGs5NeverOTg5096_s4VDAF16FullyLinearProofPAAE5prove4into11measurement0E4Rand05jointH0yqd__z_Say1FQzGA2KtKSmRd__7b15Qyd__AJRSlFAA16egh11CyAJGAA0K10f30VXEfU_AA15PINEMainCircuitVyAA7I18VSRySfGG_SayAVGTG5s10ArraySliceVyAMGTf1cn_nTm(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v5 = 0;
    uint64_t v35 = a2;
    uint64_t v36 = a1 + 32;
    uint64_t v34 = v3;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v36 + 40 * v5);
      uint64_t v7 = *v6;
      if (*v6 < 0) {
        break;
      }
      uint64_t v8 = a2[2];
      uint64_t v9 = a2[3] >> 1;
      uint64_t v10 = v9 - v8;
      if (__OFSUB__(v9, v8)) {
        goto LABEL_54;
      }
      uint64_t v37 = v5;
      uint64_t v11 = v6[2];
      uint64_t v12 = a2[1];
      if (!v7 || v10 < 0 || (uint64_t v13 = a2[3] >> 1, v10 >= v7))
      {
        uint64_t v13 = v8 + v7;
        if (__OFADD__(v8, v7)) {
          goto LABEL_65;
        }
      }
      if (v13 < v8) {
        goto LABEL_55;
      }
      if (v9 < v8) {
        goto LABEL_56;
      }
      if (v9 < v13) {
        goto LABEL_57;
      }
      if (v13 < 0) {
        goto LABEL_58;
      }
      if (!v7 || v10 < 0 || v10 >= v7)
      {
        BOOL v14 = __OFADD__(v8, v7);
        uint64_t v15 = v8 + v7;
        if (v14) {
          goto LABEL_66;
        }
        if (v9 < v15) {
          goto LABEL_59;
        }
        uint64_t v9 = v15;
      }
      if (v9 < v8) {
        goto LABEL_60;
      }
      a2[2] = v9;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GadgetWireInputs<Field40>);
      uint64_t v16 = swift_allocObject();
      *(void *)(v16 + 16) = 0;
      uint64_t v17 = v13 - v8;
      if (__OFSUB__(v13, v8)) {
        goto LABEL_61;
      }
      *(void *)(v16 + 24) = v11;
      uint64_t v18 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_62;
      }
      if (v18 < 0) {
        goto LABEL_63;
      }
      uint64_t v38 = v16;
      swift_unknownObjectRetain();
      if (v11 == -1)
      {
        uint64_t v19 = MEMORY[0x263F8EE78];
        if (v17 < 0) {
          goto LABEL_64;
        }
      }
      else
      {
        uint64_t v19 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v19 + 16) = v18;
        bzero((void *)(v19 + 32), 8 * v11 + 8);
        if (v17 < 0) {
          goto LABEL_64;
        }
      }
      if (v17)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Field40]);
        BOOL v20 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
        uint64_t v21 = v20;
        v20[2] = v17;
        v20[4] = v19;
        if (v17 == 1)
        {
          *(void *)(v38 + 32) = v20;
          uint64_t v22 = (void **)(v38 + 32);
        }
        else
        {
          v20[5] = v19;
          uint64_t v23 = v17 - 2;
          if (v17 != 2)
          {
            uint64_t v24 = v20 + 6;
            do
            {
              *v24++ = v19;
              swift_bridgeObjectRetain();
              --v23;
            }
            while (v23);
          }
          *(void *)(v38 + 32) = v21;
          uint64_t v22 = (void **)(v38 + 32);
          swift_bridgeObjectRetain();
        }
        swift_beginAccess();
        unint64_t v25 = 0;
        if (v13 <= v8) {
          uint64_t v26 = v8;
        }
        else {
          uint64_t v26 = v13;
        }
        uint64_t v27 = v26 - v8;
        uint64_t v28 = v12 + 8 * v8;
        while (v27 != v25)
        {
          uint64_t v29 = *(void *)(v28 + 8 * v25);
          uint64_t v30 = *v22;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew()(v30);
          }
          if (v25 >= v30[2]) {
            goto LABEL_52;
          }
          uint64_t v31 = &v30[v25];
          uint64_t v32 = (char *)v31[4];
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v31[4] = v32;
          if (isUniquelyReferenced_nonNull_native)
          {
            if (!*((void *)v32 + 2)) {
              goto LABEL_49;
            }
          }
          else
          {
            uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v32);
            v31[4] = v32;
            if (!*((void *)v32 + 2))
            {
LABEL_49:
              __break(1u);
              return;
            }
          }
          ++v25;
          *((void *)v32 + 4) = v29;
          *uint64_t v22 = v30;
          if (v17 == v25) {
            goto LABEL_4;
          }
        }
        __break(1u);
LABEL_52:
        __break(1u);
        break;
      }
      swift_bridgeObjectRelease();
      *(void *)(v38 + 32) = MEMORY[0x263F8EE78];
LABEL_4:
      uint64_t v5 = v37 + 1;
      swift_unknownObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      a2 = v35;
      if (v37 + 1 == v34) {
        return;
      }
    }
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
  }
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF4SeedVs5NeverOTg5072_s4VDAF15PINEPublicShareV4from9parameterACyxGqd___SiSgtKcSkRd__s5UInt8V7b12Rtd__lufcAA4E38VSiXEfU_AA19XofHmacSha256Aes128C_SWTG5s10ArraySliceVys0T0VGTf1cn_nTm(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v5 = v3;
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (!v4) {
    return v6;
  }
  uint64_t v8 = result;
  uint64_t v15 = MEMORY[0x263F8EE78];
  result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = v15;
    if (a2 <= v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = a2;
    }
    for (uint64_t i = v9 - v8; ; --i)
    {
      result = specialized closure #1 in PINEPublicShare.init<A>(from:parameter:)(a3);
      if (v5)
      {
        swift_release();
        return v6;
      }
      uint64_t v11 = result;
      uint64_t v5 = 0;
      unint64_t v13 = *(void *)(v15 + 16);
      unint64_t v12 = *(void *)(v15 + 24);
      if (v13 >= v12 >> 1) {
        result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1);
      }
      *(void *)(v15 + 16) = v13 + 1;
      *(void *)(v15 + 8 * v13 + 32) = v11;
      if (a2 < v8) {
        break;
      }
      if (!i) {
        goto LABEL_18;
      }
      if (!--v4) {
        return v6;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_20:
  __break(1u);
  return result;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay4VDAF16GadgetParametersVG_AF0E10WireInputsCyAF7Field32VGs5NeverOTg5096_s4VDAF16FullyLinearProofPAAE5prove4into11measurement0E4Rand05jointH0yqd__z_Say1FQzGA2KtKSmRd__7b15Qyd__AJRSlFAA16egh11CyAJGAA0K10f30VXEfU_AA15PINEMainCircuitVyAA7I18VSRySfGG_SayAVGTG5s10ArraySliceVyAMGTf1cn_nTm(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v5 = 0;
    uint64_t v35 = a2;
    uint64_t v36 = a1 + 32;
    uint64_t v34 = v3;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v36 + 40 * v5);
      uint64_t v7 = *v6;
      if (*v6 < 0) {
        break;
      }
      uint64_t v8 = a2[2];
      uint64_t v9 = a2[3] >> 1;
      uint64_t v10 = v9 - v8;
      if (__OFSUB__(v9, v8)) {
        goto LABEL_54;
      }
      uint64_t v37 = v5;
      uint64_t v11 = v6[2];
      uint64_t v12 = a2[1];
      if (!v7 || v10 < 0 || (uint64_t v13 = a2[3] >> 1, v10 >= v7))
      {
        uint64_t v13 = v8 + v7;
        if (__OFADD__(v8, v7)) {
          goto LABEL_65;
        }
      }
      if (v13 < v8) {
        goto LABEL_55;
      }
      if (v9 < v8) {
        goto LABEL_56;
      }
      if (v9 < v13) {
        goto LABEL_57;
      }
      if (v13 < 0) {
        goto LABEL_58;
      }
      if (!v7 || v10 < 0 || v10 >= v7)
      {
        BOOL v14 = __OFADD__(v8, v7);
        uint64_t v15 = v8 + v7;
        if (v14) {
          goto LABEL_66;
        }
        if (v9 < v15) {
          goto LABEL_59;
        }
        uint64_t v9 = v15;
      }
      if (v9 < v8) {
        goto LABEL_60;
      }
      a2[2] = v9;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GadgetWireInputs<Field32>);
      uint64_t v16 = swift_allocObject();
      *(void *)(v16 + 16) = 0;
      uint64_t v17 = v13 - v8;
      if (__OFSUB__(v13, v8)) {
        goto LABEL_61;
      }
      *(void *)(v16 + 24) = v11;
      uint64_t v18 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_62;
      }
      if (v18 < 0) {
        goto LABEL_63;
      }
      uint64_t v38 = v16;
      swift_unknownObjectRetain();
      if (v11 == -1)
      {
        uint64_t v19 = MEMORY[0x263F8EE78];
        if (v17 < 0) {
          goto LABEL_64;
        }
      }
      else
      {
        uint64_t v19 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v19 + 16) = v18;
        bzero((void *)(v19 + 32), 4 * v11 + 4);
        if (v17 < 0) {
          goto LABEL_64;
        }
      }
      if (v17)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Field32]);
        BOOL v20 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
        uint64_t v21 = v20;
        v20[2] = v17;
        v20[4] = v19;
        if (v17 == 1)
        {
          *(void *)(v38 + 32) = v20;
          uint64_t v22 = (void **)(v38 + 32);
        }
        else
        {
          v20[5] = v19;
          uint64_t v23 = v17 - 2;
          if (v17 != 2)
          {
            uint64_t v24 = v20 + 6;
            do
            {
              *v24++ = v19;
              swift_bridgeObjectRetain();
              --v23;
            }
            while (v23);
          }
          *(void *)(v38 + 32) = v21;
          uint64_t v22 = (void **)(v38 + 32);
          swift_bridgeObjectRetain();
        }
        swift_beginAccess();
        unint64_t v25 = 0;
        if (v13 <= v8) {
          uint64_t v26 = v8;
        }
        else {
          uint64_t v26 = v13;
        }
        uint64_t v27 = v26 - v8;
        uint64_t v28 = v12 + 4 * v8;
        while (v27 != v25)
        {
          int v29 = *(_DWORD *)(v28 + 4 * v25);
          uint64_t v30 = *v22;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew()(v30);
          }
          if (v25 >= v30[2]) {
            goto LABEL_52;
          }
          uint64_t v31 = &v30[v25];
          uint64_t v32 = (char *)v31[4];
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v31[4] = v32;
          if (isUniquelyReferenced_nonNull_native)
          {
            if (!*((void *)v32 + 2)) {
              goto LABEL_49;
            }
          }
          else
          {
            uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v32);
            v31[4] = v32;
            if (!*((void *)v32 + 2))
            {
LABEL_49:
              __break(1u);
              return;
            }
          }
          ++v25;
          *((_DWORD *)v32 + 8) = v29;
          *uint64_t v22 = v30;
          if (v17 == v25) {
            goto LABEL_4;
          }
        }
        __break(1u);
LABEL_52:
        __break(1u);
        break;
      }
      swift_bridgeObjectRelease();
      *(void *)(v38 + 32) = MEMORY[0x263F8EE78];
LABEL_4:
      uint64_t v5 = v37 + 1;
      swift_unknownObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      a2 = v35;
      if (v37 + 1 == v34) {
        return;
      }
    }
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
  }
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay4VDAF16GadgetParametersVG_AF0E10WireInputsCyAF7Field64VGs5NeverOTg5096_s4VDAF16FullyLinearProofPAAE5prove4into11measurement0E4Rand05jointH0yqd__z_Say1FQzGA2KtKSmRd__7b15Qyd__AJRSlFAA16egh11CyAJGAA0K10f28VXEfU_AA13SumVectorTypeVyAA7I14VSWG_SayAVGTG5s10ArraySliceVyAMGTf1cn_n(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v5 = 0;
    uint64_t v35 = a2;
    uint64_t v36 = a1 + 32;
    uint64_t v34 = v3;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v36 + 40 * v5);
      uint64_t v7 = *v6;
      if (*v6 < 0) {
        break;
      }
      uint64_t v8 = a2[2];
      uint64_t v9 = a2[3] >> 1;
      uint64_t v10 = v9 - v8;
      if (__OFSUB__(v9, v8)) {
        goto LABEL_54;
      }
      uint64_t v37 = v5;
      uint64_t v11 = v6[2];
      uint64_t v12 = a2[1];
      if (!v7 || v10 < 0 || (uint64_t v13 = a2[3] >> 1, v10 >= v7))
      {
        uint64_t v13 = v8 + v7;
        if (__OFADD__(v8, v7)) {
          goto LABEL_65;
        }
      }
      if (v13 < v8) {
        goto LABEL_55;
      }
      if (v9 < v8) {
        goto LABEL_56;
      }
      if (v9 < v13) {
        goto LABEL_57;
      }
      if (v13 < 0) {
        goto LABEL_58;
      }
      if (!v7 || v10 < 0 || v10 >= v7)
      {
        BOOL v14 = __OFADD__(v8, v7);
        uint64_t v15 = v8 + v7;
        if (v14) {
          goto LABEL_66;
        }
        if (v9 < v15) {
          goto LABEL_59;
        }
        uint64_t v9 = v15;
      }
      if (v9 < v8) {
        goto LABEL_60;
      }
      a2[2] = v9;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GadgetWireInputs<Field64>);
      uint64_t v16 = swift_allocObject();
      *(void *)(v16 + 16) = 0;
      uint64_t v17 = v13 - v8;
      if (__OFSUB__(v13, v8)) {
        goto LABEL_61;
      }
      *(void *)(v16 + 24) = v11;
      uint64_t v18 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_62;
      }
      if (v18 < 0) {
        goto LABEL_63;
      }
      uint64_t v38 = v16;
      swift_unknownObjectRetain();
      if (v11 == -1)
      {
        uint64_t v19 = MEMORY[0x263F8EE78];
        if (v17 < 0) {
          goto LABEL_64;
        }
      }
      else
      {
        uint64_t v19 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v19 + 16) = v18;
        bzero((void *)(v19 + 32), 8 * v11 + 8);
        if (v17 < 0) {
          goto LABEL_64;
        }
      }
      if (v17)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Field64]);
        BOOL v20 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
        uint64_t v21 = v20;
        v20[2] = v17;
        v20[4] = v19;
        if (v17 == 1)
        {
          *(void *)(v38 + 32) = v20;
          uint64_t v22 = (void **)(v38 + 32);
        }
        else
        {
          v20[5] = v19;
          uint64_t v23 = v17 - 2;
          if (v17 != 2)
          {
            uint64_t v24 = v20 + 6;
            do
            {
              *v24++ = v19;
              swift_bridgeObjectRetain();
              --v23;
            }
            while (v23);
          }
          *(void *)(v38 + 32) = v21;
          uint64_t v22 = (void **)(v38 + 32);
          swift_bridgeObjectRetain();
        }
        swift_beginAccess();
        unint64_t v25 = 0;
        if (v13 <= v8) {
          uint64_t v26 = v8;
        }
        else {
          uint64_t v26 = v13;
        }
        uint64_t v27 = v26 - v8;
        uint64_t v28 = v12 + 8 * v8;
        while (v27 != v25)
        {
          uint64_t v29 = *(void *)(v28 + 8 * v25);
          uint64_t v30 = *v22;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew()(v30);
          }
          if (v25 >= v30[2]) {
            goto LABEL_52;
          }
          uint64_t v31 = &v30[v25];
          uint64_t v32 = (char *)v31[4];
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v31[4] = v32;
          if (isUniquelyReferenced_nonNull_native)
          {
            if (!*((void *)v32 + 2)) {
              goto LABEL_49;
            }
          }
          else
          {
            uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v32);
            v31[4] = v32;
            if (!*((void *)v32 + 2))
            {
LABEL_49:
              __break(1u);
              return;
            }
          }
          ++v25;
          *((void *)v32 + 4) = v29;
          *uint64_t v22 = v30;
          if (v17 == v25) {
            goto LABEL_4;
          }
        }
        __break(1u);
LABEL_52:
        __break(1u);
        break;
      }
      swift_bridgeObjectRelease();
      *(void *)(v38 + 32) = MEMORY[0x263F8EE78];
LABEL_4:
      uint64_t v5 = v37 + 1;
      swift_unknownObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      a2 = v35;
      if (v37 + 1 == v34) {
        return;
      }
    }
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
  }
}

uint64_t PINE<>.shardAndEncodeIntoBytes(_:nonce:seedBytes:)(float *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  memcpy(__dst, v6, 0x148uLL);
  outlined copy of Data._Representation(a3, a4);
  BOOL v14 = specialized _copyCollectionToContiguousArray<A>(_:)(a3, a4);
  outlined consume of Data._Representation(a3, a4);
  uint64_t v15 = __dst;
  uint64_t v16 = specialized PINE.shard<A>(_:nonce:seedBytes:)((uint64_t *)&v59, a1, a2, (uint64_t)v14, a5, a6);
  swift_release();
  if (v7) {
    return (uint64_t)v15;
  }
  uint64_t v17 = v59;
  uint64_t v18 = v60;
  uint64_t v19 = specialized PINEPublicShare.encodedLength.getter((uint64_t)v59, v60);
  BOOL v20 = (char *)MEMORY[0x263F8EE78];
  unint64_t v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19 & ~(v19 >> 63), 0, MEMORY[0x263F8EE78]);
  specialized PINEPublicShare.encode<A>(into:)((char *)&v59, (uint64_t)v17, v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v15 = v59;
  int64_t v21 = *((void *)v16 + 2);
  if (!v21)
  {
    swift_bridgeObjectRelease();
    return (uint64_t)v15;
  }
  long long v56 = v59;
  unint64_t v59 = v20;
  uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
  uint64_t v23 = 0;
  uint64_t v24 = v59;
  int64_t v57 = v21;
  uint64_t v58 = v16 + 32;
  while (1)
  {
    unint64_t v25 = &v58[48 * v23];
    uint64_t v26 = *(void *)v25;
    char v27 = v25[8];
    uint64_t v28 = *((void *)v25 + 2);
    char v29 = v25[24];
    uint64_t v31 = *((void *)v25 + 4);
    uint64_t v30 = *((void *)v25 + 5);
    uint64_t v32 = *(void *)(*(void *)v25 + 16);
    if ((v27 & 1) == 0)
    {
      if (v32)
      {
        uint64_t v33 = (unsigned __int128)(v32 * (__int128)5) >> 64;
        v32 *= 5;
        if (v33 != v32 >> 63) {
          break;
        }
      }
    }
    uint64_t v34 = *(void *)(v28 + 16);
    if ((v29 & 1) == 0)
    {
      if (v34)
      {
        uint64_t v35 = (unsigned __int128)(v34 * (__int128)5) >> 64;
        v34 *= 5;
        if (v35 != v34 >> 63) {
          goto LABEL_35;
        }
      }
    }
    BOOL v36 = __OFADD__(v32, v34);
    uint64_t v37 = v32 + v34;
    if (v36)
    {
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      break;
    }
    uint64_t v38 = *(void *)(v31 + 16);
    BOOL v36 = __OFADD__(v37, v38);
    uint64_t v39 = v37 + v38;
    if (v36) {
      goto LABEL_32;
    }
    uint64_t v40 = *(void *)(v30 + 16);
    BOOL v36 = __OFADD__(v39, v40);
    uint64_t v41 = v39 + v40;
    if (v36) {
      goto LABEL_33;
    }
    int64_t v42 = v41 & ~(v41 >> 63);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42, 0, MEMORY[0x263F8EE78]);
    if (v27)
    {
      uint64_t v43 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v43);
    }
    else
    {
      uint64_t v44 = *(void *)(v26 + 16);
      if (v44)
      {
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v44; ++i)
        {
          uint64_t v46 = *(void *)(v26 + 8 * i + 32);
          specialized FieldElement.encode<A>(into:)((uint64_t *)&v62, v46);
        }
        swift_bridgeObjectRelease();
      }
    }
    if (v29)
    {
      uint64_t v47 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v47);
    }
    else
    {
      uint64_t v48 = *(void *)(v28 + 16);
      if (v48)
      {
        swift_bridgeObjectRetain();
        for (uint64_t j = 0; j != v48; ++j)
        {
          uint64_t v50 = *(void *)(v28 + 8 * j + 32);
          specialized FieldElement.encode<A>(into:)((uint64_t *)&v62, v50);
        }
        swift_bridgeObjectRelease();
      }
    }
    uint64_t v51 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v51);
    uint64_t v52 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v52);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t result = swift_bridgeObjectRelease_n();
    unint64_t v53 = v62;
    unint64_t v59 = v24;
    unint64_t v55 = *((void *)v24 + 2);
    unint64_t v54 = *((void *)v24 + 3);
    if (v55 >= v54 >> 1)
    {
      uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v54 > 1), v55 + 1, 1);
      uint64_t v24 = v59;
    }
    ++v23;
    *((void *)v24 + 2) = v55 + 1;
    *(void *)&v24[8 * v55 + 32] = v53;
    if (v23 == v57)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v56;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

{
  const void *v6;
  uint64_t v7;
  void *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  uint64_t result;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t i;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t j;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  int64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unsigned char __dst[336];
  char *v60;

  memcpy(__dst, v6, 0x148uLL);
  outlined copy of Data._Representation(a3, a4);
  BOOL v14 = specialized _copyCollectionToContiguousArray<A>(_:)(a3, a4);
  outlined consume of Data._Representation(a3, a4);
  uint64_t v15 = __dst;
  uint64_t v16 = specialized PINE.shard<A>(_:nonce:seedBytes:)((unint64_t *)&v57, a1, a2, (uint64_t)v14, a5, a6);
  swift_release();
  if (v7) {
    return (uint64_t)v15;
  }
  uint64_t v17 = (uint64_t)v57;
  uint64_t v18 = v58;
  uint64_t v19 = specialized PINEPublicShare.encodedLength.getter((uint64_t)v57, v58);
  BOOL v20 = (char *)MEMORY[0x263F8EE78];
  int64_t v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19 & ~(v19 >> 63), 0, MEMORY[0x263F8EE78]);
  specialized PINEPublicShare.encode<A>(into:)((char *)&v57, v17, v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v15 = v57;
  int64_t v21 = *(void *)(v16 + 16);
  if (!v21)
  {
    swift_bridgeObjectRelease();
    return (uint64_t)v15;
  }
  unint64_t v54 = v57;
  int64_t v57 = v20;
  uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
  uint64_t v23 = 0;
  uint64_t v24 = v57;
  unint64_t v55 = v21;
  long long v56 = v16 + 32;
  while (1)
  {
    unint64_t v25 = v56 + 48 * v23;
    uint64_t v26 = *(void *)v25;
    char v27 = *(unsigned char *)(v25 + 8);
    uint64_t v28 = *(void *)(v25 + 16);
    char v29 = *(unsigned char *)(v25 + 24);
    uint64_t v31 = *(void *)(v25 + 32);
    uint64_t v30 = *(void *)(v25 + 40);
    uint64_t v32 = *(void *)(*(void *)v25 + 16);
    if ((v27 & 1) == 0 && v32)
    {
      if (v32 >> 61) {
        goto LABEL_36;
      }
      v32 *= 4;
    }
    uint64_t v33 = *(void *)(v28 + 16);
    if ((v29 & 1) == 0 && v33)
    {
      if (v33 >> 61) {
        goto LABEL_37;
      }
      v33 *= 4;
    }
    uint64_t v34 = __OFADD__(v32, v33);
    uint64_t v35 = v32 + v33;
    if (v34) {
      break;
    }
    BOOL v36 = *(void *)(v31 + 16);
    uint64_t v34 = __OFADD__(v35, v36);
    uint64_t v37 = v35 + v36;
    if (v34) {
      goto LABEL_34;
    }
    uint64_t v38 = *(void *)(v30 + 16);
    uint64_t v34 = __OFADD__(v37, v38);
    uint64_t v39 = v37 + v38;
    if (v34) {
      goto LABEL_35;
    }
    uint64_t v40 = v39 & ~(v39 >> 63);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40, 0, MEMORY[0x263F8EE78]);
    if (v27)
    {
      uint64_t v41 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v41);
    }
    else
    {
      int64_t v42 = *(void *)(v26 + 16);
      if (v42)
      {
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v42; ++i)
        {
          uint64_t v44 = *(_DWORD *)(v26 + 4 * i + 32);
          specialized FieldElement.encode<A>(into:)((uint64_t *)&v60, v44);
        }
        swift_bridgeObjectRelease();
      }
    }
    if (v29)
    {
      unint64_t v45 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v45);
    }
    else
    {
      uint64_t v46 = *(void *)(v28 + 16);
      if (v46)
      {
        swift_bridgeObjectRetain();
        for (uint64_t j = 0; j != v46; ++j)
        {
          uint64_t v48 = *(_DWORD *)(v28 + 4 * j + 32);
          specialized FieldElement.encode<A>(into:)((uint64_t *)&v60, v48);
        }
        swift_bridgeObjectRelease();
      }
    }
    unint64_t v49 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v49);
    uint64_t v50 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v50);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t result = swift_bridgeObjectRelease_n();
    uint64_t v51 = v60;
    int64_t v57 = v24;
    unint64_t v53 = *((void *)v24 + 2);
    uint64_t v52 = *((void *)v24 + 3);
    if (v53 >= v52 >> 1)
    {
      uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v52 > 1), v53 + 1, 1);
      uint64_t v24 = v57;
    }
    ++v23;
    *((void *)v24 + 2) = v53 + 1;
    *(void *)&v24[8 * v53 + 32] = v51;
    if (v23 == v55)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v54;
    }
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

void specialized VDAFEncodable.encodedBytes.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  if (a4 >> 1 == a3)
  {
    uint64_t v5 = (char *)MEMORY[0x263F8EE78];
    int64_t v6 = *(void *)(MEMORY[0x263F8EE78] + 16);
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0, v5);
    return;
  }
  if ((uint64_t)(a4 >> 1) <= a3)
  {
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v8 = v4 - a3;
  if (__OFSUB__(v4, a3))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((unsigned __int128)((uint64_t)v8 * (__int128)5) >> 64 != (uint64_t)(5 * v8) >> 63)
  {
LABEL_16:
    __break(1u);
    return;
  }
  if (*(void *)(MEMORY[0x263F8EE78] + 16) <= (int64_t)(5 * v8)) {
    int64_t v10 = 5 * v8;
  }
  else {
    int64_t v10 = *(void *)(MEMORY[0x263F8EE78] + 16);
  }
  uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0, MEMORY[0x263F8EE78]);
  swift_unknownObjectRetain();
  uint64_t v11 = (uint64_t *)(a2 + 8 * a3);
  do
  {
    uint64_t v12 = *v11++;
    specialized FieldElement.encode<A>(into:)((uint64_t *)&v13, v12);
    --v8;
  }
  while (v8);
  swift_unknownObjectRelease();
}

{
  unint64_t v4;
  char *v5;
  int64_t v6;
  unint64_t v8;
  int64_t v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  uint64_t vars8;

  unint64_t v4 = a4 >> 1;
  if (a4 >> 1 == a3)
  {
    uint64_t v5 = (char *)MEMORY[0x263F8EE78];
    int64_t v6 = *(void *)(MEMORY[0x263F8EE78] + 16);
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0, v5);
    return;
  }
  if ((uint64_t)(a4 >> 1) <= a3)
  {
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v8 = v4 - a3;
  if (__OFSUB__(v4, a3))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((v8 - 0x2000000000000000) >> 62 != 3)
  {
LABEL_16:
    __break(1u);
    return;
  }
  if (*(void *)(MEMORY[0x263F8EE78] + 16) <= (int64_t)(4 * v8)) {
    int64_t v10 = 4 * v8;
  }
  else {
    int64_t v10 = *(void *)(MEMORY[0x263F8EE78] + 16);
  }
  uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0, MEMORY[0x263F8EE78]);
  swift_unknownObjectRetain();
  uint64_t v11 = (unsigned int *)(a2 + 4 * a3);
  do
  {
    uint64_t v12 = *v11++;
    specialized FieldElement.encode<A>(into:)((uint64_t *)&v13, v12);
    --v8;
  }
  while (v8);
  swift_unknownObjectRelease();
}

{
  unint64_t v4;
  char *v5;
  int64_t v6;
  unint64_t v8;
  int64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char *v13;
  uint64_t vars8;

  unint64_t v4 = a4 >> 1;
  if (a4 >> 1 == a3)
  {
    uint64_t v5 = (char *)MEMORY[0x263F8EE78];
    int64_t v6 = *(void *)(MEMORY[0x263F8EE78] + 16);
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0, v5);
    return;
  }
  if ((uint64_t)(a4 >> 1) <= a3)
  {
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v8 = v4 - a3;
  if (__OFSUB__(v4, a3))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((v8 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_16:
    __break(1u);
    return;
  }
  if (*(void *)(MEMORY[0x263F8EE78] + 16) <= (int64_t)(8 * v8)) {
    int64_t v10 = 8 * v8;
  }
  else {
    int64_t v10 = *(void *)(MEMORY[0x263F8EE78] + 16);
  }
  uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0, MEMORY[0x263F8EE78]);
  swift_unknownObjectRetain();
  uint64_t v11 = (uint64_t *)(a2 + 8 * a3);
  do
  {
    uint64_t v12 = *v11++;
    specialized FieldElement.encode<A>(into:)((uint64_t *)&v13, v12);
    --v8;
  }
  while (v8);
  swift_unknownObjectRelease();
}

char *specialized VDAFEncodable.encodedBytes.getter(char *result)
{
  uint64_t v1 = *((void *)result + 2);
  if ((unsigned __int128)(v1 * (__int128)5) >> 64 == (5 * v1) >> 63)
  {
    v2 = result;
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 5 * v1, 0, MEMORY[0x263F8EE78]);
    unint64_t v4 = v3;
    if (v1)
    {
      uint64_t v5 = *((void *)v3 + 2);
      swift_bridgeObjectRetain();
      uint64_t v6 = 0;
      uint64_t v7 = v5 + 32;
      do
      {
        uint64_t v8 = *(void *)&v2[8 * v6 + 32];
        if (__CFADD__(-v8, v8)) {
          unint64_t v9 = ((0xCFFE47FFFEAFFFFFLL * v8 * (unsigned __int128)0xFFFEB00001uLL) >> 64) + 1;
        }
        else {
          unint64_t v9 = (0xCFFE47FFFEAFFFFFLL * v8 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
        }
        if (v9 >= 0xFFFEB00001) {
          unint64_t v10 = 0;
        }
        else {
          unint64_t v10 = v9;
        }
        unint64_t v11 = *((void *)v4 + 3);
        if (v7 - 32 >= v11 >> 1) {
          unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v7 - 31, 1, v4);
        }
        *((void *)v4 + 2) = v7 - 31;
        v4[v7] = v10;
        unint64_t v12 = *((void *)v4 + 3);
        if (v7 - 30 > (uint64_t)(v12 >> 1)) {
          unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v7 - 30, 1, v4);
        }
        *((void *)v4 + 2) = v7 - 30;
        v4[v7 + 1] = BYTE1(v10);
        unint64_t v13 = *((void *)v4 + 3);
        if (v7 - 29 > (uint64_t)(v13 >> 1)) {
          unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v7 - 29, 1, v4);
        }
        *((void *)v4 + 2) = v7 - 29;
        v4[v7 + 2] = BYTE2(v10);
        unint64_t v14 = *((void *)v4 + 3);
        if (v7 - 28 > (uint64_t)(v14 >> 1)) {
          unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v7 - 28, 1, v4);
        }
        *((void *)v4 + 2) = v7 - 28;
        v4[v7 + 3] = BYTE3(v10);
        unint64_t v15 = *((void *)v4 + 3);
        if (v7 - 27 > (uint64_t)(v15 >> 1)) {
          unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v7 - 27, 1, v4);
        }
        ++v6;
        *((void *)v4 + 2) = v7 - 27;
        v4[v7 + 4] = BYTE4(v10);
        v7 += 5;
      }
      while (v1 != v6);
      swift_bridgeObjectRelease();
    }
    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  unint64_t v1;
  char *v2;
  char *v3;
  uint64_t i;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  uint64_t v1 = *((void *)result + 2);
  if (v1 >> 60)
  {
    __break(1u);
  }
  else
  {
    v2 = result;
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 8 * v1, 0, MEMORY[0x263F8EE78]);
    if (v1)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v1; ++i)
      {
        uint64_t v5 = *(void *)&v2[8 * i + 32];
        uint64_t v6 = (0xFFFFFFFEFFFFFFFFLL * v5 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
        if (__CFADD__(-v5, v5))
        {
          if (v6 > 0xFFFFFFFEFFFFFFFFLL) {
            uint64_t v6 = 0;
          }
          else {
            ++v6;
          }
        }
        uint64_t v8 = *((void *)v3 + 2);
        uint64_t v7 = *((void *)v3 + 3);
        unint64_t v9 = v7 >> 1;
        unint64_t v10 = v8 + 1;
        if (v7 >> 1 <= v8)
        {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1, v3);
          uint64_t v7 = *((void *)v3 + 3);
          unint64_t v9 = v7 >> 1;
        }
        *((void *)v3 + 2) = v10;
        v3[v8 + 32] = v6;
        unint64_t v11 = v8 + 2;
        if (v9 < (uint64_t)(v8 + 2))
        {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 2, 1, v3);
          uint64_t v7 = *((void *)v3 + 3);
          unint64_t v9 = v7 >> 1;
        }
        *((void *)v3 + 2) = v11;
        v3[v10 + 32] = BYTE1(v6);
        unint64_t v12 = v8 + 3;
        if (v9 < (uint64_t)(v8 + 3))
        {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 3, 1, v3);
          uint64_t v7 = *((void *)v3 + 3);
          unint64_t v9 = v7 >> 1;
        }
        *((void *)v3 + 2) = v12;
        v3[v11 + 32] = BYTE2(v6);
        unint64_t v13 = v8 + 4;
        if (v9 < (uint64_t)(v8 + 4))
        {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 4, 1, v3);
          uint64_t v7 = *((void *)v3 + 3);
          unint64_t v9 = v7 >> 1;
        }
        *((void *)v3 + 2) = v13;
        v3[v12 + 32] = BYTE3(v6);
        unint64_t v14 = v8 + 5;
        if (v9 < (uint64_t)(v8 + 5))
        {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 5, 1, v3);
          uint64_t v7 = *((void *)v3 + 3);
          unint64_t v9 = v7 >> 1;
        }
        *((void *)v3 + 2) = v14;
        v3[v13 + 32] = BYTE4(v6);
        unint64_t v15 = v8 + 6;
        if (v9 < (uint64_t)(v8 + 6))
        {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 6, 1, v3);
          uint64_t v7 = *((void *)v3 + 3);
          unint64_t v9 = v7 >> 1;
        }
        *((void *)v3 + 2) = v15;
        v3[v14 + 32] = BYTE5(v6);
        uint64_t v16 = v8 + 7;
        if (v9 < (uint64_t)(v8 + 7))
        {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 7, 1, v3);
          uint64_t v7 = *((void *)v3 + 3);
          unint64_t v9 = v7 >> 1;
        }
        *((void *)v3 + 2) = v16;
        v3[v15 + 32] = BYTE6(v6);
        if (v9 < (uint64_t)(v8 + 8)) {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 8, 1, v3);
        }
        *((void *)v3 + 2) = v8 + 8;
        v3[v16 + 32] = HIBYTE(v6);
      }
      swift_bridgeObjectRelease();
    }
    return v3;
  }
  return result;
}

char *specialized VDAFEncodable.encodedBytes.getter(uint64_t a1)
{
  v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 5, 0, MEMORY[0x263F8EE78]);
  unint64_t v3 = specialized FieldElement.integerValue.getter(a1);
  unint64_t v5 = *((void *)v2 + 2);
  unint64_t v4 = *((void *)v2 + 3);
  int64_t v6 = v4 >> 1;
  unint64_t v7 = v5 + 1;
  if (v4 >> 1 <= v5)
  {
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v5 + 1, 1, v2);
    unint64_t v4 = *((void *)v2 + 3);
    int64_t v6 = v4 >> 1;
  }
  *((void *)v2 + 2) = v7;
  v2[v5 + 32] = v3;
  unint64_t v8 = v5 + 2;
  if (v6 < (uint64_t)(v5 + 2))
  {
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v5 + 2, 1, v2);
    unint64_t v4 = *((void *)v2 + 3);
    int64_t v6 = v4 >> 1;
  }
  *((void *)v2 + 2) = v8;
  v2[v7 + 32] = BYTE1(v3);
  unint64_t v9 = v5 + 3;
  if (v6 < (uint64_t)(v5 + 3))
  {
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v5 + 3, 1, v2);
    unint64_t v4 = *((void *)v2 + 3);
    int64_t v6 = v4 >> 1;
  }
  *((void *)v2 + 2) = v9;
  v2[v8 + 32] = BYTE2(v3);
  unint64_t v10 = v5 + 4;
  if (v6 < (uint64_t)(v5 + 4))
  {
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v5 + 4, 1, v2);
    unint64_t v4 = *((void *)v2 + 3);
    int64_t v6 = v4 >> 1;
  }
  *((void *)v2 + 2) = v10;
  v2[v9 + 32] = BYTE3(v3);
  if (v6 < (uint64_t)(v5 + 5)) {
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v5 + 5, 1, v2);
  }
  *((void *)v2 + 2) = v5 + 5;
  v2[v10 + 32] = BYTE4(v3);
  return v2;
}

{
  char *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 8, 0, MEMORY[0x263F8EE78]);
  unint64_t v3 = specialized FieldElement.integerValue.getter(a1);
  unint64_t v5 = *((void *)v2 + 2);
  unint64_t v4 = *((void *)v2 + 3);
  int64_t v6 = v4 >> 1;
  unint64_t v7 = v5 + 1;
  if (v4 >> 1 <= v5)
  {
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v5 + 1, 1, v2);
    unint64_t v4 = *((void *)v2 + 3);
    int64_t v6 = v4 >> 1;
  }
  *((void *)v2 + 2) = v7;
  v2[v5 + 32] = v3;
  unint64_t v8 = v5 + 2;
  if (v6 < (uint64_t)(v5 + 2))
  {
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v5 + 2, 1, v2);
    unint64_t v4 = *((void *)v2 + 3);
    int64_t v6 = v4 >> 1;
  }
  *((void *)v2 + 2) = v8;
  v2[v7 + 32] = BYTE1(v3);
  unint64_t v9 = v5 + 3;
  if (v6 < (uint64_t)(v5 + 3))
  {
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v5 + 3, 1, v2);
    unint64_t v4 = *((void *)v2 + 3);
    int64_t v6 = v4 >> 1;
  }
  *((void *)v2 + 2) = v9;
  v2[v8 + 32] = BYTE2(v3);
  unint64_t v10 = v5 + 4;
  if (v6 < (uint64_t)(v5 + 4))
  {
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v5 + 4, 1, v2);
    unint64_t v4 = *((void *)v2 + 3);
    int64_t v6 = v4 >> 1;
  }
  *((void *)v2 + 2) = v10;
  v2[v9 + 32] = BYTE3(v3);
  unint64_t v11 = v5 + 5;
  if (v6 < (uint64_t)(v5 + 5))
  {
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v5 + 5, 1, v2);
    unint64_t v4 = *((void *)v2 + 3);
    int64_t v6 = v4 >> 1;
  }
  *((void *)v2 + 2) = v11;
  v2[v10 + 32] = BYTE4(v3);
  unint64_t v12 = v5 + 6;
  if (v6 < (uint64_t)(v5 + 6))
  {
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v5 + 6, 1, v2);
    unint64_t v4 = *((void *)v2 + 3);
    int64_t v6 = v4 >> 1;
  }
  *((void *)v2 + 2) = v12;
  v2[v11 + 32] = BYTE5(v3);
  unint64_t v13 = v5 + 7;
  if (v6 < (uint64_t)(v5 + 7))
  {
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v5 + 7, 1, v2);
    unint64_t v4 = *((void *)v2 + 3);
    int64_t v6 = v4 >> 1;
  }
  *((void *)v2 + 2) = v13;
  v2[v12 + 32] = BYTE6(v3);
  if (v6 < (uint64_t)(v5 + 8)) {
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v5 + 8, 1, v2);
  }
  *((void *)v2 + 2) = v5 + 8;
  v2[v13 + 32] = HIBYTE(v3);
  return v2;
}

{
  int64_t v1;
  uint64_t v2;
  char *v4;
  int64_t v5;
  char *v6;
  uint64_t vars8;

  if (a1)
  {
    if (*(void *)(MEMORY[0x263F8EE78] + 16) <= *(void *)(a1 + 16)) {
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else {
      uint64_t v1 = *(void *)(MEMORY[0x263F8EE78] + 16);
    }
    int64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0, MEMORY[0x263F8EE78]);
    v2 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v2);
    return v6;
  }
  else
  {
    unint64_t v4 = (char *)MEMORY[0x263F8EE78];
    unint64_t v5 = *(void *)(MEMORY[0x263F8EE78] + 16);
    return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0, v4);
  }
}

void *PINE<>.prepareInitAndEncodeIntoBytes(verifyKey:aggregatorID:nonce:encodedPublicShare:encodedInputShare:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, size_t a8, unint64_t a9)
{
  unint64_t v11 = v9;
  size_t v55 = a8;
  memcpy(__dst, v11, 0x148uLL);
  outlined copy of Data._Representation(a1, a2);
  uint64_t v19 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  outlined consume of Data._Representation(a1, a2);
  outlined copy of Data._Representation(a4, a5);
  BOOL v20 = specialized _copyCollectionToContiguousArray<A>(_:)(a4, a5);
  outlined consume of Data._Representation(a4, a5);
  specialized PINEPublicShare.init<A>(from:parameter:)(a6, a7, __dst[0], 0, v47);
  if (v10)
  {
    swift_release();
    swift_release();
    return v20;
  }
  uint64_t v21 = (uint64_t)v19;
  size_t v22 = v55;
  uint64_t v23 = v47[0];
  uint64_t v24 = v47[1];
  outlined retain of PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>((uint64_t)__dst);
  specialized PINEInputShare.DecodableParameter.init<A>(vdaf:aggregatorID:)((uint64_t)__dst, a3, (uint64_t (*)(uint64_t))outlined release of PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, specialized FullyLinearProof.proofLength.getter, specialized FullyLinearProof.proofLength.getter, (uint64_t)&v42);
  specialized PINEInputShare.init<A>(from:parameter:)(v22, a9, v42, v43, v44, v45, (uint64_t)v46);
  v53[0] = v46[0];
  v53[1] = v46[1];
  v53[2] = v46[2];
  specialized PINE.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:)(&v49, v48, v21, a3, (uint64_t)v20, v23, v24, (uint64_t)v53);
  swift_release();
  swift_release();
  outlined release of PINEInputShare<Field40, XofHmacSha256Aes128>((uint64_t)v53);
  swift_bridgeObjectRelease();
  uint64_t result = (void *)swift_bridgeObjectRelease();
  uint64_t v26 = v49;
  uint64_t v27 = *(void *)(v49 + 16);
  uint64_t v28 = (unsigned __int128)(v27 * (__int128)5) >> 64;
  uint64_t v29 = 5 * v27;
  if (v28 != v29 >> 63)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v30 = v50;
  uint64_t v31 = *(void *)(v50 + 16);
  BOOL v32 = __OFADD__(v29, v31);
  uint64_t v33 = v29 + v31;
  if (v32)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v34 = v51;
  uint64_t v35 = *(void *)(v51 + 16);
  BOOL v32 = __OFADD__(v33, v35);
  uint64_t v36 = v33 + v35;
  if (!v32)
  {
    uint64_t v37 = v52;
    uint64_t v38 = v48[0];
    uint64_t v39 = v48[1];
    uint64_t v40 = v48[2];
    *(void *)&v46[0] = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36 & ~(v36 >> 63), 0, MEMORY[0x263F8EE78]);
    specialized PINEPrepareState.encode<A>(into:)((uint64_t)v46, v26, v30, v34, v37, (void (*)(uint64_t, uint64_t))specialized FieldElement.encode<A>(into:));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BOOL v20 = *(void **)&v46[0];
    uint64_t v41 = specialized PINEPrepareShare.encodedLength.getter((uint64_t)v38, (uint64_t)v39, (uint64_t)v40);
    *(void *)&v46[0] = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v41 & ~(v41 >> 63), 0, MEMORY[0x263F8EE78]);
    specialized PINEPrepareShare.encode<A>(into:)((uint64_t)v46, (uint64_t)v38, (uint64_t)v39, (uint64_t)v40, (void (*)(uint64_t, uint64_t))specialized FieldElement.encode<A>(into:));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v20;
  }
LABEL_11:
  __break(1u);
  return result;
}

{
  const void *v9;
  uint64_t v10;
  const void *v11;
  void *v19;
  void *v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  void *result;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  _OWORD v42[3];
  uint64_t v43[2];
  char *v44[3];
  void v45[3];
  _OWORD v46[3];
  uint64_t __dst[43];
  size_t v48;

  unint64_t v11 = v9;
  uint64_t v48 = a8;
  memcpy(__dst, v11, 0x148uLL);
  outlined copy of Data._Representation(a1, a2);
  uint64_t v19 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  outlined consume of Data._Representation(a1, a2);
  outlined copy of Data._Representation(a4, a5);
  BOOL v20 = specialized _copyCollectionToContiguousArray<A>(_:)(a4, a5);
  outlined consume of Data._Representation(a4, a5);
  specialized PINEPublicShare.init<A>(from:parameter:)(a6, a7, __dst[0], 0, v43);
  if (v10)
  {
    swift_release();
    swift_release();
    return v19;
  }
  uint64_t v21 = (uint64_t)v19;
  size_t v22 = v48;
  uint64_t v23 = v43[0];
  uint64_t v24 = v43[1];
  outlined retain of PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>((uint64_t)__dst);
  specialized PINEInputShare.DecodableParameter.init<A>(vdaf:aggregatorID:)((uint64_t)__dst, a3, (uint64_t)&v38);
  specialized PINEInputShare.init<A>(from:parameter:)(v22, a9, v38, v39, v40, v41, (uint64_t)v42);
  v46[0] = v42[0];
  v46[1] = v42[1];
  v46[2] = v42[2];
  specialized PINE.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:)(v45, v44, v21, a3, (uint64_t)v20, v23, v24, (uint64_t)v46);
  swift_release();
  swift_release();
  outlined release of PINEInputShare<Field40, XofHmacSha256Aes128>((uint64_t)v46);
  swift_bridgeObjectRelease();
  uint64_t result = (void *)swift_bridgeObjectRelease();
  uint64_t v26 = v45[0];
  uint64_t v27 = *(void *)(v45[0] + 16);
  if (v27 >> 61)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v28 = *(void *)(v45[1] + 16);
  uint64_t v29 = __OFADD__(v28, 4 * v27);
  uint64_t v30 = v28 + 4 * v27;
  if (v29)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v31 = *(void *)(v45[2] + 16);
  uint64_t v29 = __OFADD__(v30, v31);
  BOOL v32 = v30 + v31;
  if (!v29)
  {
    uint64_t v33 = v44[0];
    uint64_t v34 = v44[1];
    uint64_t v35 = v44[2];
    uint64_t v36 = (char *)MEMORY[0x263F8EE78];
    *(void *)&v42[0] = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32 & ~(v32 >> 63), 0, MEMORY[0x263F8EE78]);
    specialized PINEPrepareState.encode<A>(into:)((uint64_t *)v42, v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void **)&v42[0];
    uint64_t v37 = specialized PINEPrepareShare.encodedLength.getter((uint64_t)v33, (uint64_t)v34, (uint64_t)v35);
    *(void *)&v42[0] = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37 & ~(v37 >> 63), 0, v36);
    specialized PINEPrepareState.encode<A>(into:)((uint64_t *)v42, (uint64_t)v33);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v19;
  }
LABEL_11:
  __break(1u);
  return result;
}

{
  const void *v9;
  uint64_t v10;
  const void *v11;
  void *v19;
  void *v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  void *result;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  _OWORD v45[3];
  uint64_t v46[2];
  char *v47[3];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  _OWORD v52[3];
  uint64_t __dst[43];
  size_t v54;

  unint64_t v11 = v9;
  unint64_t v54 = a8;
  memcpy(__dst, v11, 0x148uLL);
  outlined copy of Data._Representation(a1, a2);
  uint64_t v19 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  outlined consume of Data._Representation(a1, a2);
  outlined copy of Data._Representation(a4, a5);
  BOOL v20 = specialized _copyCollectionToContiguousArray<A>(_:)(a4, a5);
  outlined consume of Data._Representation(a4, a5);
  specialized PINEPublicShare.init<A>(from:parameter:)(a6, a7, __dst[0], 0, v46);
  if (v10)
  {
    swift_release();
    swift_release();
    return v19;
  }
  uint64_t v21 = (uint64_t)v19;
  size_t v22 = v54;
  uint64_t v23 = v46[0];
  uint64_t v24 = v46[1];
  outlined retain of PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>((uint64_t)__dst);
  specialized PINEInputShare.DecodableParameter.init<A>(vdaf:aggregatorID:)((uint64_t)__dst, a3, (uint64_t)&v41);
  specialized PINEInputShare.init<A>(from:parameter:)(v22, a9, v41, v42, v43, v44, (uint64_t)v45);
  v52[0] = v45[0];
  v52[1] = v45[1];
  v52[2] = v45[2];
  specialized PINE.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:)(&v48, v47, v21, a3, (uint64_t)v20, v23, v24, (uint64_t)v52);
  swift_release();
  swift_release();
  outlined release of PINEInputShare<Field40, XofHmacSha256Aes128>((uint64_t)v52);
  swift_bridgeObjectRelease();
  uint64_t result = (void *)swift_bridgeObjectRelease();
  uint64_t v26 = v48;
  uint64_t v27 = *(void *)(v48 + 16);
  if (v27 >> 60)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v28 = v49;
  uint64_t v29 = *(void *)(v49 + 16);
  uint64_t v30 = __OFADD__(v29, 8 * v27);
  uint64_t v31 = v29 + 8 * v27;
  if (v30)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  BOOL v32 = v50;
  uint64_t v33 = *(void *)(v50 + 16);
  uint64_t v30 = __OFADD__(v31, v33);
  uint64_t v34 = v31 + v33;
  if (!v30)
  {
    uint64_t v35 = v51;
    uint64_t v36 = v47[0];
    uint64_t v37 = v47[1];
    uint64_t v38 = v47[2];
    uint64_t v39 = (char *)MEMORY[0x263F8EE78];
    *(void *)&v45[0] = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34 & ~(v34 >> 63), 0, MEMORY[0x263F8EE78]);
    specialized PINEPrepareState.encode<A>(into:)((uint64_t)v45, v26, v28, v32, v35);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void **)&v45[0];
    uint64_t v40 = specialized PINEPrepareShare.encodedLength.getter((uint64_t)v36, (uint64_t)v37, (uint64_t)v38);
    *(void *)&v45[0] = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40 & ~(v40 >> 63), 0, v39);
    specialized PINEPrepareShare.encode<A>(into:)((uint64_t)v45, (uint64_t)v36, (uint64_t)v37, (uint64_t)v38);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v19;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t specialized PINE.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:)(void *a1, char **a2, uint64_t a3, int64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v43)(uint64_t *__return_ptr, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void (*v53)(uint64_t *__return_ptr, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int64_t v99;
  unint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  int64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  char **v112;
  uint64_t (*v113)(uint64_t, uint64_t, uint64_t, uint64_t);
  void v114[4];
  void v115[2];
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t (*v122)(uint64_t);
  uint64_t (*v123)(uint64_t, uint64_t, uint64_t, uint64_t);
  long long v124;
  long long v125;
  unint64_t v126;
  unint64_t v127;
  int64_t v128;
  int64_t v129;
  char **v130;
  void *v131;
  uint64_t v132;
  char *v133;
  unint64_t v134;
  unint64_t v135;
  void v136[61];
  long long v137;
  long long v138;
  long long v139;
  long long v140;
  long long v141;
  long long v142;
  long long v143;
  long long v144;
  long long v145;
  int64_t v146;
  _OWORD v147[9];
  uint64_t v148;
  long long v149;
  long long v150;
  long long v151;
  _OWORD v152[9];
  uint64_t v153;
  long long v154;
  long long v155;
  long long v156;
  long long v157;
  long long v158;
  long long v159;
  uint64_t v160;
  uint64_t v161;
  long long v162;
  uint64_t v163;
  uint64_t v164;
  long long v165;
  long long v166;
  long long v167;
  uint64_t v168;
  int64_t v169;

  v169 = a4;
  unint64_t v130 = a2;
  uint64_t v131 = a1;
  uint64_t result = (uint64_t)memcpy(v136, v8, 0x148uLL);
  uint64_t v16 = *(char **)(a3 + 16);
  if (v16 != (char *)32)
  {
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    uint64_t v134 = 0xD000000000000034;
    uint64_t v135 = 0x8000000260BFEAA0;
LABEL_15:
    v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._countAndFlagsBits = 0x3D746F67202CLL;
    v34._object = (void *)0xE600000000000000;
    String.append(_:)(v34);
    uint64_t v133 = v16;
    v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    unint64_t v36 = v135;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v37 = v134;
    *(void *)(v37 + 8) = v36;
    *(unsigned char *)(v37 + 16) = 1;
    return swift_willThrow();
  }
  uint64_t v16 = *(char **)(a5 + 16);
  if (v16 != (char *)16)
  {
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    uint64_t v134 = 0xD000000000000030;
    uint64_t v135 = 0x8000000260BFEAE0;
    goto LABEL_15;
  }
  if (*v8 < 0)
  {
    __break(1u);
    goto LABEL_47;
  }
  if (v169 < 0 || *v8 <= v169)
  {
    uint64_t v134 = v169;
    uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v40 = v39;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v41 = v38;
    *(void *)(v41 + 8) = v40;
    *(unsigned char *)(v41 + 16) = 0;
    return swift_willThrow();
  }
  long long v17 = *(_OWORD *)(v8 + 15);
  uint64_t v143 = *(_OWORD *)(v8 + 13);
  unint64_t v144 = v17;
  uint64_t v145 = *(_OWORD *)(v8 + 17);
  uint64_t v146 = v8[19];
  long long v18 = *(_OWORD *)(v8 + 7);
  long long v139 = *(_OWORD *)(v8 + 5);
  uint64_t v140 = v18;
  long long v19 = *(_OWORD *)(v8 + 11);
  long long v141 = *(_OWORD *)(v8 + 9);
  long long v142 = v19;
  long long v20 = *(_OWORD *)(v8 + 3);
  uint64_t v137 = *(_OWORD *)(v8 + 1);
  uint64_t v138 = v20;
  if ((unint64_t)v169 > 0xFF)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (__OFSUB__(*((void *)&v141 + 1), (void)v145))
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  uint64_t result = specialized static VDAFProtocol.decodeMeasurementShare<A>(_:aggregatorID:count:)(*(void *)a8, *(unsigned char *)(a8 + 8), v169, *((void *)&v141 + 1) - v145, (uint64_t (*)(void))specialized static PINE.domainSeparationTag(usage:), (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t))specialized static FieldElement.randomElement<A>(using:));
  if (!v9)
  {
    int64_t v21 = v8[40];
    long long v22 = *((_OWORD *)v8 + 17);
    *(_OWORD *)&v136[53] = *((_OWORD *)v8 + 16);
    *(_OWORD *)&v136[55] = v22;
    *(_OWORD *)&v136[57] = *((_OWORD *)v8 + 18);
    uint64_t v128 = v8[39];
    uint64_t v129 = v21;
    v136[59] = v8[38];
    long long v23 = *((_OWORD *)v8 + 13);
    *(_OWORD *)&v136[45] = *((_OWORD *)v8 + 12);
    *(_OWORD *)&v136[47] = v23;
    long long v24 = *((_OWORD *)v8 + 15);
    *(_OWORD *)&v136[49] = *((_OWORD *)v8 + 14);
    *(_OWORD *)&v136[51] = v24;
    long long v25 = *((_OWORD *)v8 + 11);
    *(_OWORD *)&v136[41] = *((_OWORD *)v8 + 10);
    *(_OWORD *)&v136[43] = v25;
    unint64_t v26 = *(void *)(a8 + 16);
    v126 = result;
    uint64_t v127 = v26;
    LODWORD(v125) = *(unsigned __int8 *)(a8 + 24);
    uint64_t v134 = result;
    swift_bridgeObjectRetain();
    uint64_t result = specialized FullyLinearProof.proofLength.getter();
    uint64_t v27 = v129 * result;
    if ((unsigned __int128)(v129 * (__int128)result) >> 64 != (v129 * result) >> 63)
    {
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    uint64_t result = specialized FullyLinearProof.proofLength.getter();
    if ((unsigned __int128)(v128 * (__int128)result) >> 64 != (v128 * result) >> 63)
    {
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    if (__OFADD__(v27, v128 * result))
    {
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    MEMORY[0x270FA5388](result, v28);
    v114[2] = v136;
    v114[3] = v169;
    uint64_t result = specialized static VDAFProtocol.decodeProofShare<A>(_:aggregatorID:count:makeXOF:)(v127, v125, v29, (uint64_t (*)(unint64_t))partial apply for specialized closure #1 in PINE.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:), (uint64_t)v114, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t))specialized static FieldElement.randomElement<A>(using:));
    unint64_t v118 = result;
    uint64_t v127 = v32;
    uint64_t v129 = v30;
    if ((v136[11] & 0x8000000000000000) != 0) {
      goto LABEL_54;
    }
    v115[1] = v115;
    uint64_t v128 = v31;
    uint64_t result = v126;
    if (*(void *)(v126 + 16) < v136[11])
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    uint64_t v42 = *(void *)(a8 + 32);
    *(void *)&int64_t v124 = *(void *)(a8 + 40);
    char v43 = (void (*)(uint64_t *__return_ptr, uint64_t))(v126 + 32);
    uint64_t v44 = (2 * v136[11]) | 1;
    char v45 = v126;
    *(void *)&uint64_t v125 = v136[11];
    swift_bridgeObjectRetain();
    uint64_t v123 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized VDAFEncodable.encodedBytes.getter;
    uint64_t v122 = (uint64_t (*)(uint64_t))specialized static PINE.domainSeparationTag(usage:);
    uint64_t v46 = a6;
    uint64_t v47 = v169;
    uint64_t v48 = specialized static JointRandomness.updateJointRandParts(_:commitment:blind:aggregatorID:nonce:)(v46, v45, (uint64_t)v43, 0, v44, v42, v169, a5, 9u, (uint64_t (*)(uint64_t))specialized static PINE.domainSeparationTag(usage:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized VDAFEncodable.encodedBytes.getter);
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WraparoundJointRandomness<PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field40>);
    swift_allocObject();
    unint64_t v116 = specialized WraparoundJointRandomness.init(parts:)(v48, &lazy protocol witness table cache variable for type WraparoundJointRandomness<PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field40> and conformance WraparoundJointRandomness<A, B>, &demangling cache variable for type metadata for WraparoundJointRandomness<PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field40>, (uint64_t (*)(uint64_t))specialized static PINE.domainSeparationTag(usage:));
    uint64_t v49 = (2 * *(void *)(v45 + 16)) | 1;
    swift_bridgeObjectRetain();
    unint64_t v113 = v123;
    uint64_t v123 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v43;
    uint64_t v50 = specialized static JointRandomness.updateJointRandParts(_:commitment:blind:aggregatorID:nonce:)(a7, v45, (uint64_t)v43, 0, v49, v124, v47, a5, 6u, v122, v113);
    swift_bridgeObjectRelease();
    uint64_t v51 = v136[39];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VerificationJointRandomness<PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field40>);
    unsigned __int8 v52 = (void *)swift_allocObject();
    v52[4] = 0;
    v52[5] = 3;
    v52[6] = v51;
    v52[2] = v50;
    v52[3] = 0;
    uint64_t v157 = *(_OWORD *)&v136[1];
    int64_t v158 = *(_OWORD *)&v136[3];
    v159 = *(_OWORD *)&v136[5];
    v160 = v136[7];
    v161 = v136[8];
    uint64_t v162 = *(_OWORD *)&v136[9];
    v163 = v125;
    uint64_t v164 = v136[12];
    uint64_t v165 = *(_OWORD *)&v136[13];
    uint64_t v166 = *(_OWORD *)&v136[15];
    int64_t v124 = *(_OWORD *)&v136[17];
    uint64_t v125 = *(_OWORD *)&v136[13];
    v167 = *(_OWORD *)&v136[17];
    uint64_t v168 = v136[19];
    uint64_t result = specialized PINECircuit.truncate(measurement:)(v45, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
    unint64_t v53 = (void (*)(uint64_t *__return_ptr, uint64_t))v123;
    uint64_t v121 = v51;
    if ((v125 & 0x8000000000000000) != 0)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    if (*(void *)(v126 + 16) < (unint64_t)v125)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    v115[0] = result;
    unint64_t v119 = v52;
    unint64_t v54 = v124;
    if ((v124 & 0x8000000000000000) != 0)
    {
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    size_t v55 = (2 * v125) | 1;
    long long v56 = v116;
    swift_retain();
    int64_t v57 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF7Field40Vs5NeverOTg50171_s4VDAF11PINECircuitPAAE21wraparoundDotProducts_6randomSay1FQzGs10ArraySliceVyAGG_AA25WraparoundJointRandomnessCyqd__AGGtAA12VDAFProtocolRd__lFAGSiXEfU_AA15PINEMainCircuits3AA7E48VSRySfGG_AA4PINEVyAstA19XofHmacSha256Aes128CGTG5s0qR0VyAIGAG0vwX0CyAG4PINEVyAISRySfGAG19XofHmacSha256Aes128CGAIGTf1cn_nTf4ngg_nTm(0, v54, v126, (uint64_t)v53, 0, v55, v56, (uint64_t)&v132, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void *(*)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))specialized closure #1 in PINECircuit.wraparoundDotProducts<A>(_:random:));
    swift_bridgeObjectRelease();
    swift_release();
    specialized Array.append<A>(contentsOf:)((uint64_t)v57, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field40>);
    swift_bridgeObjectRetain();
    uint64_t v58 = specialized static PINE.domainSeparationTag(usage:)(4u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_260BF9FD0;
    unint64_t v59 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v136[40];
    if ((v136[40] & 0x8000000000000000) != 0)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    uint64_t v60 = v121;
    if (v136[40] > 0xFFuLL)
    {
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    *(unsigned char *)(result + 32) = v136[40];
    if ((v60 & 0x8000000000000000) != 0)
    {
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    if (v60 > 0xFF)
    {
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    *(unsigned char *)(result + 33) = v60;
    uint64_t v133 = (char *)result;
    unint64_t v61 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v61);
    uint64_t v122 = (uint64_t (*)(uint64_t))specialized static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(a3, v58, (uint64_t)v133);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v147[6] = *(_OWORD *)&v136[13];
    v147[7] = *(_OWORD *)&v136[15];
    v147[8] = *(_OWORD *)&v136[17];
    long long v148 = v136[19];
    v147[2] = *(_OWORD *)&v136[5];
    v147[3] = *(_OWORD *)&v136[7];
    v147[4] = *(_OWORD *)&v136[9];
    v147[5] = *(_OWORD *)&v136[11];
    v147[0] = *(_OWORD *)&v136[1];
    v147[1] = *(_OWORD *)&v136[3];
    v152[6] = *(_OWORD *)&v136[32];
    v152[7] = *(_OWORD *)&v136[34];
    v152[8] = *(_OWORD *)&v136[36];
    uint64_t v153 = v136[38];
    v152[2] = *(_OWORD *)&v136[24];
    v152[3] = *(_OWORD *)&v136[26];
    v152[4] = *(_OWORD *)&v136[28];
    v152[5] = *(_OWORD *)&v136[30];
    v152[0] = *(_OWORD *)&v136[20];
    v152[1] = *(_OWORD *)&v136[22];
    uint64_t result = specialized FullyLinearProof.verifierLength.getter();
    uint64_t v62 = (void)v59 * result;
    if ((unsigned __int128)((uint64_t)v59 * (__int128)result) >> 64 != ((uint64_t)v59 * result) >> 63)
    {
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    uint64_t result = specialized FullyLinearProof.verifierLength.getter();
    uint64_t v63 = v121 * result;
    unint64_t v64 = v118;
    if ((unsigned __int128)(v121 * (__int128)result) >> 64 != (v121 * result) >> 63)
    {
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
    unint64_t v65 = __OFADD__(v62, v63);
    unint64_t v66 = v62 + v63;
    if (v65)
    {
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v66 & ~(v66 >> 63), 0, MEMORY[0x263F8EE78], &demangling cache variable for type metadata for _ContiguousArrayStorage<Field40>);
    uint64_t v133 = (char *)result;
    if (!v59)
    {
      uint64_t v76 = v64;
LABEL_37:
      long long v81 = v121;
      if (!v121)
      {
        int64_t v102 = v119;
LABEL_43:
        unint64_t v103 = v116;
        unint64_t v104 = *(void *)(v116 + 24);
        swift_bridgeObjectRetain();
        uint64_t result = specialized VerificationJointRandomness.seed.getter(&lazy protocol witness table cache variable for type VerificationJointRandomness<PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field40> and conformance VerificationJointRandomness<A, B>, &demangling cache variable for type metadata for VerificationJointRandomness<PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field40>);
        unint64_t v105 = v131;
        *uint64_t v131 = v115[0];
        v105[1] = v104;
        v105[2] = result;
        unint64_t v106 = v169;
        *((unsigned char *)v105 + 24) = v169;
        uint64_t v107 = *(void *)(v103 + 16);
        if (*(void *)(v107 + 16) > v106)
        {
          uint64_t v108 = v102[2];
          if (*(void *)(v108 + 16) > v106)
          {
            unint64_t v109 = v133;
            unint64_t v110 = *(char **)(v107 + 8 * v106 + 32);
            unint64_t v111 = *(char **)(v108 + 8 * v106 + 32);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_unknownObjectRelease();
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_setDeallocating();
            swift_bridgeObjectRelease();
            swift_release();
            uint64_t result = swift_deallocClassInstance();
            unint64_t v112 = v130;
            *unint64_t v130 = v109;
            v112[1] = v110;
            v112[2] = v111;
            return result;
          }
          goto LABEL_67;
        }
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        return result;
      }
      uint64_t v82 = v134;
      long long v149 = *(_OWORD *)((char *)v147 + 8);
      uint64_t v150 = *(_OWORD *)((char *)&v147[1] + 8);
      long long v151 = *(_OWORD *)((char *)&v147[2] + 8);
      unint64_t v117 = v119[5];
      unint64_t v118 = v136[0];
      uint64_t v83 = v121 & ~(v121 >> 63);
      uint64_t v84 = v127;
      while (1)
      {
        uint64_t v120 = v83;
        uint64_t v121 = v81;
        if (!v83) {
          goto LABEL_53;
        }
        uint64_t v85 = specialized VerificationJointRandomness.xof.getter();
        *(void *)&int64_t v124 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:);
        uint64_t v123 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized static FieldElement.randomElement<A>(using:);
        uint64_t v86 = specialized static FieldElement.randomVector<A>(count:using:)(v117, v85, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t))specialized static FieldElement.randomElement<A>(using:));
        swift_release();
        uint64_t v87 = specialized FullyLinearProof.proofLength.getter();
        unint64_t v88 = v128;
        uint64_t v89 = v129;
        uint64_t v90 = specialized Collection.prefix(_:)(v87, v76, v129, v128, v84);
        v126 = v92;
        uint64_t v127 = v91;
        *(void *)&uint64_t v125 = v93;
        long long v94 = v88;
        long long v95 = v86;
        long long v96 = v90;
        long long v97 = specialized Collection.dropFirst(_:)(v87, v76, v89, v94, v84);
        uint64_t v128 = v99;
        uint64_t v129 = v98;
        uint64_t v84 = v100;
        specialized Gadget.wirePolynomialLength.getter();
        specialized Gadget.gadgetPolynomialLength.getter();
        swift_unknownObjectRetain();
        uint64_t v101 = specialized static FieldElement.randomVector<A>(count:using:)(1uLL, (uint64_t)v122, (void (*)(BOOL, unint64_t, uint64_t))v124, (void (*)(uint64_t *__return_ptr, uint64_t))v123);
        swift_bridgeObjectRetain();
        specialized FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(&v133, v82, v96, v127, v126, v125, v101, v95, v118, specialized FullyLinearProof.proofLength.getter, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), (void (*)(uint64_t, _OWORD *))partial apply for specialized closure #1 in FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:), (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t))specialized PINEMainCircuit.evaluate(measurement:jointRand:numOfShares:for:), &demangling cache variable for type metadata for _ContiguousArrayStorage<Field40>, (uint64_t)&type metadata for Field40, (void (*)(void, void, void))specialized inverseDiscreteFourierTransform<A, B, C>(input:size:output:), (void (*)(uint64_t, _OWORD *))specialized evaluateUsingHorner<A, B>(_:atInput:));
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v83 = v120 - 1;
        uint64_t v76 = v97;
        long long v81 = v121 - 1;
        int64_t v102 = v119;
        if (v121 == 1) {
          goto LABEL_43;
        }
      }
    }
    long long v67 = v134;
    uint64_t v120 = v136[0];
    uint64_t v154 = *(_OWORD *)((char *)v152 + 8);
    long long v155 = *(_OWORD *)((char *)&v152[1] + 8);
    uint64_t v156 = *(_OWORD *)((char *)&v152[2] + 8);
    while (1)
    {
      uint64_t v123 = v59;
      if (!v59) {
        break;
      }
      long long v68 = specialized FullyLinearProof.proofLength.getter();
      long long v69 = v128;
      long long v70 = v129;
      uint64_t v71 = v127;
      uint64_t v72 = specialized Collection.prefix(_:)(v68, v64, v129, v128, v127);
      v126 = v73;
      *(void *)&uint64_t v125 = v74;
      *(void *)&int64_t v124 = v75;
      uint64_t v76 = specialized Collection.dropFirst(_:)(v68, v64, v70, v69, v71);
      uint64_t v128 = v78;
      uint64_t v129 = v77;
      uint64_t v127 = v79;
      specialized Gadget.wirePolynomialLength.getter();
      specialized Gadget.gadgetPolynomialLength.getter();
      swift_unknownObjectRetain();
      uint64_t v80 = specialized static FieldElement.randomVector<A>(count:using:)(1uLL, (uint64_t)v122, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t))specialized static FieldElement.randomElement<A>(using:));
      swift_bridgeObjectRetain();
      specialized FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(&v133, v67, v72, v126, v125, v124, v80, MEMORY[0x263F8EE78], v120, specialized FullyLinearProof.proofLength.getter, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), (char *)partial apply for specialized closure #1 in FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:), (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t))specialized PINENormEqualityCheckCircuit.evaluate(measurement:jointRand:numOfShares:for:), &demangling cache variable for type metadata for _ContiguousArrayStorage<Field40>, (uint64_t)&type metadata for Field40, (void (*)(void, void, void))specialized inverseDiscreteFourierTransform<A, B, C>(input:size:output:), (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))specialized evaluateUsingHorner<A, B>(_:atInput:));
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v64 = v76;
      unint64_t v59 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v123 - 1);
      if (v123 == (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))1) {
        goto LABEL_37;
      }
    }
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  return result;
}

{
  int64_t *v8;
  uint64_t v9;
  uint64_t result;
  char *v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  int64_t v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  int64_t v29;
  uint64_t v30;
  int64_t v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  void (*v52)(uint64_t, uint64_t, uint64_t, unint64_t);
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, uint64_t, unint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  int64_t v69;
  uint64_t v70;
  int64_t v71;
  int64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int64_t v78;
  uint64_t v79;
  int64_t v80;
  int64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int64_t v87;
  uint64_t v88;
  int64_t v89;
  int64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t, uint64_t, uint64_t, unint64_t);
  uint64_t v95;
  int64_t v96;
  uint64_t v97;
  int64_t v98;
  int64_t v99;
  char *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  int64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  char **v111;
  uint64_t (*v112)(uint64_t, uint64_t, uint64_t, uint64_t);
  void v113[2];
  uint64_t v114;
  int64_t v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t (*v120)(uint64_t);
  void (*v121)(uint64_t, uint64_t, uint64_t, unint64_t);
  long long v122;
  long long v123;
  char *v124;
  int64_t v125;
  int64_t v126;
  char **v127;
  void *v128;
  char *v129;
  unint64_t v130;
  unint64_t v131;
  void v132[59];
  int v133;
  long long v134;
  long long v135;
  long long v136;
  long long v137;
  long long v138;
  long long v139;
  long long v140;
  long long v141;
  long long v142;
  int v143;
  _OWORD v144[9];
  int v145;
  long long v146;
  long long v147;
  long long v148;
  _OWORD v149[9];
  int v150;
  long long v151;
  long long v152;
  long long v153;
  long long v154;
  long long v155;
  long long v156;
  uint64_t v157;
  uint64_t v158;
  long long v159;
  uint64_t v160;
  uint64_t v161;
  long long v162;
  int v163;
  uint64_t v164;
  long long v165;
  int v166;
  int64_t v167;

  v167 = a4;
  uint64_t v127 = a2;
  uint64_t v128 = a1;
  uint64_t result = (uint64_t)memcpy(v132, v8, 0x148uLL);
  uint64_t v16 = *(char **)(a3 + 16);
  if (v16 != (char *)32)
  {
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    unint64_t v130 = 0xD000000000000034;
    uint64_t v131 = 0x8000000260BFEAA0;
LABEL_15:
    v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._countAndFlagsBits = 0x3D746F67202CLL;
    v33._object = (void *)0xE600000000000000;
    String.append(_:)(v33);
    uint64_t v129 = v16;
    v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    Swift::String v35 = v131;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)unint64_t v36 = v130;
    *(void *)(v36 + 8) = v35;
    *(unsigned char *)(v36 + 16) = 1;
    return swift_willThrow();
  }
  uint64_t v16 = *(char **)(a5 + 16);
  if (v16 != (char *)16)
  {
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    unint64_t v130 = 0xD000000000000030;
    uint64_t v131 = 0x8000000260BFEAE0;
    goto LABEL_15;
  }
  if (*v8 < 0)
  {
    __break(1u);
    goto LABEL_47;
  }
  if (v167 < 0 || *v8 <= v167)
  {
    unint64_t v130 = v167;
    uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v39 = v38;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v40 = v37;
    *(void *)(v40 + 8) = v39;
    *(unsigned char *)(v40 + 16) = 0;
    return swift_willThrow();
  }
  long long v17 = *(_OWORD *)(v8 + 15);
  uint64_t v140 = *(_OWORD *)(v8 + 13);
  long long v141 = v17;
  long long v142 = *(_OWORD *)(v8 + 17);
  uint64_t v143 = *((_DWORD *)v8 + 38);
  long long v18 = *(_OWORD *)(v8 + 7);
  unint64_t v136 = *(_OWORD *)(v8 + 5);
  uint64_t v137 = v18;
  long long v19 = *(_OWORD *)(v8 + 11);
  uint64_t v138 = *(_OWORD *)(v8 + 9);
  long long v139 = v19;
  long long v20 = *(_OWORD *)(v8 + 3);
  uint64_t v134 = *(_OWORD *)(v8 + 1);
  uint64_t v135 = v20;
  if ((unint64_t)v167 > 0xFF)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (__OFSUB__(*((void *)&v138 + 1), (void)v142))
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  uint64_t result = specialized static VDAFProtocol.decodeMeasurementShare<A>(_:aggregatorID:count:)(*(void *)a8, *(unsigned char *)(a8 + 8), v167, *((void *)&v138 + 1) - v142);
  if (!v9)
  {
    int64_t v21 = v8[40];
    uint64_t v125 = v8[39];
    v126 = v21;
    long long v22 = *((_OWORD *)v8 + 17);
    *(_OWORD *)&v132[53] = *((_OWORD *)v8 + 16);
    *(_OWORD *)&v132[55] = v22;
    *(_OWORD *)&v132[57] = *((_OWORD *)v8 + 18);
    uint64_t v133 = *((_DWORD *)v8 + 76);
    long long v23 = *((_OWORD *)v8 + 13);
    *(_OWORD *)&v132[45] = *((_OWORD *)v8 + 12);
    *(_OWORD *)&v132[47] = v23;
    long long v24 = *((_OWORD *)v8 + 15);
    *(_OWORD *)&v132[49] = *((_OWORD *)v8 + 14);
    *(_OWORD *)&v132[51] = v24;
    long long v25 = *((_OWORD *)v8 + 11);
    *(_OWORD *)&v132[41] = *((_OWORD *)v8 + 10);
    *(_OWORD *)&v132[43] = v25;
    *(void *)&uint64_t v123 = *(void *)(a8 + 16);
    LODWORD(v122) = *(unsigned __int8 *)(a8 + 24);
    unint64_t v130 = result;
    int64_t v124 = (char *)result;
    swift_bridgeObjectRetain();
    uint64_t result = specialized FullyLinearProof.proofLength.getter();
    unint64_t v26 = v126 * result;
    if ((unsigned __int128)(v126 * (__int128)result) >> 64 != (v126 * result) >> 63)
    {
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    uint64_t result = specialized FullyLinearProof.proofLength.getter();
    if ((unsigned __int128)(v125 * (__int128)result) >> 64 != (v125 * result) >> 63)
    {
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    if (__OFADD__(v26, v125 * result))
    {
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    MEMORY[0x270FA5388](result, v27);
    uint64_t result = specialized static VDAFProtocol.decodeProofShare<A>(_:aggregatorID:count:makeXOF:)(v123, v122, v28, partial apply for specialized closure #1 in PINE.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:));
    unint64_t v115 = v29;
    unint64_t v116 = result;
    if ((v132[11] & 0x8000000000000000) != 0) {
      goto LABEL_54;
    }
    v113[1] = v113;
    uint64_t v125 = v31;
    v126 = v30;
    uint64_t result = (uint64_t)v124;
    if (*((void *)v124 + 2) < v132[11])
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    uint64_t v41 = *(void *)(a8 + 32);
    *(void *)&uint64_t v122 = *(void *)(a8 + 40);
    uint64_t v42 = v124 + 32;
    char v43 = (2 * v132[11]) | 1;
    uint64_t v44 = v124;
    *(void *)&uint64_t v123 = v132[11];
    swift_bridgeObjectRetain();
    uint64_t v121 = specialized VDAFEncodable.encodedBytes.getter;
    uint64_t v120 = (uint64_t (*)(uint64_t))specialized static PINE.domainSeparationTag(usage:);
    char v45 = a6;
    uint64_t v46 = v167;
    uint64_t v47 = specialized static JointRandomness.updateJointRandParts(_:commitment:blind:aggregatorID:nonce:)(v45, (uint64_t)v44, (uint64_t)v42, 0, v43, v41, v167, a5, 9u, (uint64_t (*)(uint64_t))specialized static PINE.domainSeparationTag(usage:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized VDAFEncodable.encodedBytes.getter);
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WraparoundJointRandomness<PINE<Field32, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field32>);
    swift_allocObject();
    unint64_t v114 = specialized WraparoundJointRandomness.init(parts:)(v47, &lazy protocol witness table cache variable for type WraparoundJointRandomness<PINE<Field32, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field32> and conformance WraparoundJointRandomness<A, B>, &demangling cache variable for type metadata for WraparoundJointRandomness<PINE<Field32, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field32>, (uint64_t (*)(uint64_t))specialized static PINE.domainSeparationTag(usage:));
    uint64_t v48 = (2 * *((void *)v44 + 2)) | 1;
    swift_bridgeObjectRetain();
    unint64_t v112 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v121;
    uint64_t v121 = (void (*)(uint64_t, uint64_t, uint64_t, unint64_t))v42;
    uint64_t v49 = specialized static JointRandomness.updateJointRandParts(_:commitment:blind:aggregatorID:nonce:)(a7, (uint64_t)v44, (uint64_t)v42, 0, v48, v122, v46, a5, 6u, v120, v112);
    swift_bridgeObjectRelease();
    uint64_t v50 = v132[39];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VerificationJointRandomness<PINE<Field32, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field32>);
    uint64_t v51 = (void *)swift_allocObject();
    v51[4] = 0;
    v51[5] = 3;
    v51[6] = v50;
    v51[2] = v49;
    v51[3] = 0;
    uint64_t v154 = *(_OWORD *)&v132[1];
    long long v155 = *(_OWORD *)&v132[3];
    uint64_t v156 = *(_OWORD *)&v132[5];
    uint64_t v157 = v132[7];
    int64_t v158 = v132[8];
    v159 = *(_OWORD *)&v132[9];
    v160 = v123;
    v161 = v132[12];
    uint64_t v123 = *(_OWORD *)&v132[13];
    uint64_t v162 = *(_OWORD *)&v132[13];
    v163 = v132[15];
    uint64_t v164 = v132[16];
    uint64_t v122 = *(_OWORD *)&v132[17];
    uint64_t v165 = *(_OWORD *)&v132[17];
    uint64_t v166 = v132[19];
    uint64_t result = specialized PINECircuit.truncate(measurement:)((uint64_t)v44);
    unsigned __int8 v52 = v121;
    unint64_t v117 = v51;
    if ((v123 & 0x8000000000000000) != 0)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    unint64_t v53 = v114;
    if (*((void *)v124 + 2) < (unint64_t)v123)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    v113[0] = result;
    unint64_t v54 = v122;
    if ((v122 & 0x8000000000000000) != 0)
    {
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    size_t v55 = (2 * v123) | 1;
    swift_retain();
    long long v56 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF7Field32Vs5NeverOTg50171_s4VDAF11PINECircuitPAAE21wraparoundDotProducts_6randomSay1FQzGs10ArraySliceVyAGG_AA25WraparoundJointRandomnessCyqd__AGGtAA12VDAFProtocolRd__lFAGSiXEfU_AA15PINEMainCircuits3AA7E48VSRySfGG_AA4PINEVyAstA19XofHmacSha256Aes128CGTG5s0qR0VyAIGAG0vwX0CyAG4PINEVyAISRySfGAG19XofHmacSha256Aes128CGAIGTf1cn_nTf4ngg_n(0, v54, (uint64_t)v124, (uint64_t)v52, 0, v55, v53);
    swift_bridgeObjectRelease();
    swift_release();
    specialized Array.append<A>(contentsOf:)(v56);
    swift_bridgeObjectRetain();
    int64_t v57 = specialized static PINE.domainSeparationTag(usage:)(4u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_260BF9FD0;
    uint64_t v58 = (void (*)(uint64_t, uint64_t, uint64_t, unint64_t))v132[40];
    if ((v132[40] & 0x8000000000000000) != 0)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    if (v132[40] > 0xFFuLL)
    {
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    *(unsigned char *)(result + 32) = v132[40];
    if ((v50 & 0x8000000000000000) != 0)
    {
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    if (v50 > 0xFF)
    {
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    unint64_t v119 = v50;
    *(unsigned char *)(result + 33) = v50;
    uint64_t v129 = (char *)result;
    unint64_t v59 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v59);
    uint64_t v120 = (uint64_t (*)(uint64_t))specialized static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(a3, v57, (uint64_t)v129);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v144[6] = *(_OWORD *)&v132[13];
    v144[7] = *(_OWORD *)&v132[15];
    v144[8] = *(_OWORD *)&v132[17];
    uint64_t v145 = v132[19];
    v144[2] = *(_OWORD *)&v132[5];
    v144[3] = *(_OWORD *)&v132[7];
    v144[4] = *(_OWORD *)&v132[9];
    v144[5] = *(_OWORD *)&v132[11];
    v144[0] = *(_OWORD *)&v132[1];
    v144[1] = *(_OWORD *)&v132[3];
    v149[6] = *(_OWORD *)&v132[32];
    v149[7] = *(_OWORD *)&v132[34];
    v149[8] = *(_OWORD *)&v132[36];
    uint64_t v150 = v132[38];
    v149[2] = *(_OWORD *)&v132[24];
    v149[3] = *(_OWORD *)&v132[26];
    v149[4] = *(_OWORD *)&v132[28];
    v149[5] = *(_OWORD *)&v132[30];
    v149[0] = *(_OWORD *)&v132[20];
    v149[1] = *(_OWORD *)&v132[22];
    uint64_t result = specialized FullyLinearProof.verifierLength.getter();
    uint64_t v60 = (void)v58 * result;
    if ((unsigned __int128)((uint64_t)v58 * (__int128)result) >> 64 != ((uint64_t)v58 * result) >> 63)
    {
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    uint64_t result = specialized FullyLinearProof.verifierLength.getter();
    unint64_t v61 = v119 * result;
    uint64_t v62 = v115;
    uint64_t v63 = v116;
    if ((unsigned __int128)(v119 * (__int128)result) >> 64 != (v119 * result) >> 63)
    {
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
    unint64_t v64 = __OFADD__(v60, v61);
    unint64_t v65 = v60 + v61;
    if (v64)
    {
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v65 & ~(v65 >> 63), 0, MEMORY[0x263F8EE78]);
    uint64_t v129 = (char *)result;
    if (!v58)
    {
      uint64_t v77 = v63;
      long long v67 = v62;
LABEL_37:
      if (!v119)
      {
        uint64_t v101 = v117;
LABEL_43:
        int64_t v102 = v114;
        unint64_t v103 = *(void *)(v114 + 24);
        swift_bridgeObjectRetain();
        uint64_t result = specialized VerificationJointRandomness.seed.getter(&lazy protocol witness table cache variable for type VerificationJointRandomness<PINE<Field32, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field32> and conformance VerificationJointRandomness<A, B>, &demangling cache variable for type metadata for VerificationJointRandomness<PINE<Field32, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field32>);
        unint64_t v104 = v128;
        *uint64_t v128 = v113[0];
        v104[1] = v103;
        v104[2] = result;
        unint64_t v105 = v167;
        *((unsigned char *)v104 + 24) = v167;
        unint64_t v106 = *(void *)(v102 + 16);
        if (*(void *)(v106 + 16) > v105)
        {
          uint64_t v107 = v101[2];
          if (*(void *)(v107 + 16) > v105)
          {
            uint64_t v108 = v129;
            unint64_t v109 = *(char **)(v106 + 8 * v105 + 32);
            unint64_t v110 = *(char **)(v107 + 8 * v105 + 32);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_unknownObjectRelease();
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_setDeallocating();
            swift_bridgeObjectRelease();
            swift_release();
            uint64_t result = swift_deallocClassInstance();
            unint64_t v111 = v127;
            *uint64_t v127 = v108;
            v111[1] = v109;
            v111[2] = v110;
            return result;
          }
          goto LABEL_67;
        }
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        return result;
      }
      uint64_t v82 = v130;
      uint64_t v146 = *(_OWORD *)((char *)v144 + 8);
      BOOL v147 = *(_OWORD *)((char *)&v144[1] + 8);
      long long v148 = *(_OWORD *)((char *)&v144[2] + 8);
      unint64_t v115 = v117[5];
      unint64_t v116 = v132[0];
      uint64_t v83 = v119 & ~(v119 >> 63);
      while (1)
      {
        unint64_t v118 = v83;
        if (!v83) {
          goto LABEL_53;
        }
        uint64_t v84 = v82;
        uint64_t v85 = specialized VerificationJointRandomness.xof.getter(&lazy protocol witness table cache variable for type VerificationJointRandomness<PINE<Field32, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field32> and conformance VerificationJointRandomness<A, B>, &demangling cache variable for type metadata for VerificationJointRandomness<PINE<Field32, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field32>, (uint64_t (*)(uint64_t))specialized static PINE.domainSeparationTag(usage:));
        int64_t v124 = (char *)specialized static FieldElement.randomVector<A>(count:using:)(v115, v85);
        swift_release();
        uint64_t v86 = specialized FullyLinearProof.proofLength.getter();
        uint64_t v87 = v67;
        unint64_t v88 = v126;
        uint64_t v89 = v67;
        uint64_t v90 = v125;
        uint64_t v91 = specialized Collection.prefix(_:)(v86, v77, v87, v126, v125);
        *(void *)&uint64_t v123 = v92;
        uint64_t v121 = v94;
        *(void *)&uint64_t v122 = v93;
        long long v95 = specialized Collection.dropFirst(_:)(v86, v77, v89, v88, v90);
        long long v67 = v96;
        uint64_t v125 = v98;
        v126 = v97;
        specialized Gadget.wirePolynomialLength.getter();
        specialized Gadget.gadgetPolynomialLength.getter();
        swift_unknownObjectRetain();
        uint64_t v99 = specialized static FieldElement.randomVector<A>(count:using:)(1, (uint64_t)v120);
        uint64_t v82 = v84;
        uint64_t v100 = v124;
        swift_bridgeObjectRetain();
        specialized FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(&v129, v82, v91, v123, v122, (unint64_t)v121, v99, (unint64_t)v100, v116);
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v83 = v118 - 1;
        uint64_t v77 = v95;
        --v119;
        uint64_t v101 = v117;
        if (!v119) {
          goto LABEL_43;
        }
      }
    }
    unint64_t v66 = v130;
    unint64_t v118 = v132[0];
    long long v151 = *(_OWORD *)((char *)v149 + 8);
    uint64_t v152 = *(_OWORD *)((char *)&v149[1] + 8);
    uint64_t v153 = *(_OWORD *)((char *)&v149[2] + 8);
    long long v67 = v62;
    while (1)
    {
      uint64_t v121 = v58;
      if (!v58) {
        break;
      }
      long long v68 = specialized FullyLinearProof.proofLength.getter();
      long long v69 = v67;
      long long v70 = v126;
      uint64_t v71 = v67;
      uint64_t v72 = v125;
      uint64_t v73 = specialized Collection.prefix(_:)(v68, v63, v69, v126, v125);
      int64_t v124 = v74;
      *(void *)&uint64_t v123 = v75;
      *(void *)&uint64_t v122 = v76;
      uint64_t v77 = specialized Collection.dropFirst(_:)(v68, v63, v71, v70, v72);
      long long v67 = v78;
      uint64_t v125 = v80;
      v126 = v79;
      specialized Gadget.wirePolynomialLength.getter();
      specialized Gadget.gadgetPolynomialLength.getter();
      swift_unknownObjectRetain();
      long long v81 = specialized static FieldElement.randomVector<A>(count:using:)(1, (uint64_t)v120);
      swift_bridgeObjectRetain();
      specialized FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(&v129, v66, v73, v124, v123, v122, v81, MEMORY[0x263F8EE78], v118);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v63 = v77;
      uint64_t v58 = (void (*)(uint64_t, uint64_t, uint64_t, unint64_t))((char *)v121 - 1);
      if (v121 == (void (*)(uint64_t, uint64_t, uint64_t, unint64_t))1) {
        goto LABEL_37;
      }
    }
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  return result;
}

int64_t specialized PINE.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:)(void *a1, char **a2, uint64_t a3, int64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int64_t v170 = a4;
  uint64_t v131 = a2;
  uint64_t v132 = a1;
  int64_t result = (int64_t)memcpy(v137, v8, 0x148uLL);
  uint64_t v16 = *(char **)(a3 + 16);
  if (v16 != (char *)32)
  {
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    unint64_t v135 = 0xD000000000000034;
    unint64_t v136 = 0x8000000260BFEAA0;
LABEL_15:
    v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._countAndFlagsBits = 0x3D746F67202CLL;
    v34._object = (void *)0xE600000000000000;
    String.append(_:)(v34);
    uint64_t v134 = v16;
    v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    unint64_t v36 = v136;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v37 = v135;
    *(void *)(v37 + 8) = v36;
    *(unsigned char *)(v37 + 16) = 1;
    return swift_willThrow();
  }
  uint64_t v16 = *(char **)(a5 + 16);
  if (v16 != (char *)16)
  {
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    unint64_t v135 = 0xD000000000000030;
    unint64_t v136 = 0x8000000260BFEAE0;
    goto LABEL_15;
  }
  if (*v8 < 0)
  {
    __break(1u);
    goto LABEL_47;
  }
  if (v170 < 0 || *v8 <= v170)
  {
    unint64_t v135 = v170;
    uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v40 = v39;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v41 = v38;
    *(void *)(v41 + 8) = v40;
    *(unsigned char *)(v41 + 16) = 0;
    return swift_willThrow();
  }
  long long v17 = *(_OWORD *)(v8 + 15);
  long long v144 = *(_OWORD *)(v8 + 13);
  long long v145 = v17;
  long long v146 = *(_OWORD *)(v8 + 17);
  int64_t v147 = v8[19];
  long long v18 = *(_OWORD *)(v8 + 7);
  long long v140 = *(_OWORD *)(v8 + 5);
  long long v141 = v18;
  long long v19 = *(_OWORD *)(v8 + 11);
  long long v142 = *(_OWORD *)(v8 + 9);
  long long v143 = v19;
  long long v20 = *(_OWORD *)(v8 + 3);
  long long v138 = *(_OWORD *)(v8 + 1);
  long long v139 = v20;
  if ((unint64_t)v170 > 0xFF)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (__OFSUB__(*((void *)&v142 + 1), (void)v146))
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  int64_t result = specialized static VDAFProtocol.decodeMeasurementShare<A>(_:aggregatorID:count:)(*(void *)a8, *(unsigned char *)(a8 + 8), v170, *((void *)&v142 + 1) - v146, (uint64_t (*)(void))specialized static PINE.domainSeparationTag(usage:), (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t))specialized static FieldElement.randomElement<A>(using:));
  if (!v9)
  {
    int64_t v21 = v8[40];
    long long v22 = *((_OWORD *)v8 + 17);
    *(_OWORD *)&v137[53] = *((_OWORD *)v8 + 16);
    *(_OWORD *)&v137[55] = v22;
    *(_OWORD *)&v137[57] = *((_OWORD *)v8 + 18);
    int64_t v129 = v8[39];
    int64_t v130 = v21;
    v137[59] = v8[38];
    long long v23 = *((_OWORD *)v8 + 13);
    *(_OWORD *)&v137[45] = *((_OWORD *)v8 + 12);
    *(_OWORD *)&v137[47] = v23;
    long long v24 = *((_OWORD *)v8 + 15);
    *(_OWORD *)&v137[49] = *((_OWORD *)v8 + 14);
    *(_OWORD *)&v137[51] = v24;
    long long v25 = *((_OWORD *)v8 + 11);
    *(_OWORD *)&v137[41] = *((_OWORD *)v8 + 10);
    *(_OWORD *)&v137[43] = v25;
    unint64_t v26 = *(void *)(a8 + 16);
    unint64_t v127 = result;
    unint64_t v128 = v26;
    LODWORD(v126) = *(unsigned __int8 *)(a8 + 24);
    unint64_t v135 = result;
    swift_bridgeObjectRetain();
    int64_t result = specialized FullyLinearProof.proofLength.getter();
    int64_t v27 = v130 * result;
    if ((unsigned __int128)(v130 * (__int128)result) >> 64 != (v130 * result) >> 63)
    {
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    int64_t result = specialized FullyLinearProof.proofLength.getter();
    if ((unsigned __int128)(v129 * (__int128)result) >> 64 != (v129 * result) >> 63)
    {
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    if (__OFADD__(v27, v129 * result))
    {
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    MEMORY[0x270FA5388](result, v28);
    v115[2] = v137;
    v115[3] = v170;
    int64_t result = specialized static VDAFProtocol.decodeProofShare<A>(_:aggregatorID:count:makeXOF:)(v128, v126, v29, (uint64_t (*)(unint64_t))partial apply for specialized closure #1 in PINE.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:), (uint64_t)v115, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t))specialized static FieldElement.randomElement<A>(using:));
    unint64_t v119 = result;
    unint64_t v128 = v32;
    int64_t v130 = v30;
    if ((v137[11] & 0x8000000000000000) != 0) {
      goto LABEL_54;
    }
    v116[1] = v116;
    int64_t v129 = v31;
    int64_t result = v127;
    if (*(void *)(v127 + 16) < v137[11])
    {
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    uint64_t v42 = *(void *)(a8 + 32);
    *(void *)&long long v125 = *(void *)(a8 + 40);
    uint64_t v43 = v127 + 32;
    uint64_t v44 = (2 * v137[11]) | 1;
    uint64_t v45 = v127;
    *(void *)&long long v126 = v137[11];
    swift_bridgeObjectRetain();
    int64_t v124 = specialized VDAFEncodable.encodedBytes.getter;
    uint64_t v123 = (uint64_t (*)(uint64_t))specialized static PINE.domainSeparationTag(usage:);
    uint64_t v46 = a6;
    unint64_t v47 = v170;
    uint64_t v48 = specialized static JointRandomness.updateJointRandParts(_:commitment:blind:aggregatorID:nonce:)(v46, v45, v43, 0, v44, v42, v170, a5, 9u, (uint64_t (*)(uint64_t))specialized static PINE.domainSeparationTag(usage:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized VDAFEncodable.encodedBytes.getter);
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WraparoundJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64>);
    swift_allocObject();
    uint64_t v117 = specialized WraparoundJointRandomness.init(parts:)(v48, &lazy protocol witness table cache variable for type WraparoundJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64> and conformance WraparoundJointRandomness<A, B>, &demangling cache variable for type metadata for WraparoundJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64>, (uint64_t (*)(uint64_t))specialized static PINE.domainSeparationTag(usage:));
    uint64_t v49 = (2 * *(void *)(v45 + 16)) | 1;
    swift_bridgeObjectRetain();
    unint64_t v114 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v124;
    int64_t v124 = (void (*)(uint64_t, uint64_t, uint64_t, unint64_t))v43;
    uint64_t v50 = specialized static JointRandomness.updateJointRandParts(_:commitment:blind:aggregatorID:nonce:)(a7, v45, v43, 0, v49, v125, v47, a5, 6u, v123, v114);
    swift_bridgeObjectRelease();
    uint64_t v51 = v137[39];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VerificationJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64>);
    unsigned __int8 v52 = (void *)swift_allocObject();
    v52[4] = 0;
    v52[5] = 3;
    v52[6] = v51;
    v52[2] = v50;
    v52[3] = 0;
    long long v158 = *(_OWORD *)&v137[1];
    long long v159 = *(_OWORD *)&v137[3];
    long long v160 = *(_OWORD *)&v137[5];
    uint64_t v161 = v137[7];
    uint64_t v162 = v137[8];
    long long v163 = *(_OWORD *)&v137[9];
    uint64_t v164 = v126;
    uint64_t v165 = v137[12];
    long long v166 = *(_OWORD *)&v137[13];
    long long v167 = *(_OWORD *)&v137[15];
    long long v125 = *(_OWORD *)&v137[17];
    long long v126 = *(_OWORD *)&v137[13];
    long long v168 = *(_OWORD *)&v137[17];
    uint64_t v169 = v137[19];
    int64_t result = specialized PINECircuit.truncate(measurement:)(v45, (uint64_t (*)(uint64_t, uint64_t, void, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
    uint64_t v53 = (uint64_t)v124;
    uint64_t v122 = v51;
    if ((v126 & 0x8000000000000000) != 0)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    if (*(void *)(v127 + 16) < (unint64_t)v126)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    v116[0] = result;
    uint64_t v120 = v52;
    uint64_t v54 = v125;
    if ((v125 & 0x8000000000000000) != 0)
    {
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    uint64_t v55 = (2 * v126) | 1;
    uint64_t v56 = v117;
    swift_retain();
    int64_t v57 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF7Field40Vs5NeverOTg50171_s4VDAF11PINECircuitPAAE21wraparoundDotProducts_6randomSay1FQzGs10ArraySliceVyAGG_AA25WraparoundJointRandomnessCyqd__AGGtAA12VDAFProtocolRd__lFAGSiXEfU_AA15PINEMainCircuits3AA7E48VSRySfGG_AA4PINEVyAstA19XofHmacSha256Aes128CGTG5s0qR0VyAIGAG0vwX0CyAG4PINEVyAISRySfGAG19XofHmacSha256Aes128CGAIGTf1cn_nTf4ngg_nTm(0, v54, v127, v53, 0, v55, v56, (uint64_t)&v133, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void *(*)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))specialized closure #1 in PINECircuit.wraparoundDotProducts<A>(_:random:));
    swift_bridgeObjectRelease();
    swift_release();
    specialized Array.append<A>(contentsOf:)((uint64_t)v57, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
    swift_bridgeObjectRetain();
    uint64_t v58 = specialized static PINE.domainSeparationTag(usage:)(4u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    int64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_260BF9FD0;
    unint64_t v59 = (void (*)(uint64_t, uint64_t, uint64_t, unint64_t))v137[40];
    if ((v137[40] & 0x8000000000000000) != 0)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    unint64_t v60 = v122;
    if (v137[40] > 0xFFuLL)
    {
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    *(unsigned char *)(result + 32) = v137[40];
    if ((v60 & 0x8000000000000000) != 0)
    {
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    if (v60 > 0xFF)
    {
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    *(unsigned char *)(result + 33) = v60;
    uint64_t v134 = (char *)result;
    uint64_t v61 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v61);
    uint64_t v123 = (uint64_t (*)(uint64_t))specialized static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(a3, v58, (uint64_t)v134);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v148[6] = *(_OWORD *)&v137[13];
    v148[7] = *(_OWORD *)&v137[15];
    v148[8] = *(_OWORD *)&v137[17];
    uint64_t v149 = v137[19];
    v148[2] = *(_OWORD *)&v137[5];
    v148[3] = *(_OWORD *)&v137[7];
    v148[4] = *(_OWORD *)&v137[9];
    v148[5] = *(_OWORD *)&v137[11];
    v148[0] = *(_OWORD *)&v137[1];
    v148[1] = *(_OWORD *)&v137[3];
    v153[6] = *(_OWORD *)&v137[32];
    v153[7] = *(_OWORD *)&v137[34];
    v153[8] = *(_OWORD *)&v137[36];
    uint64_t v154 = v137[38];
    v153[2] = *(_OWORD *)&v137[24];
    v153[3] = *(_OWORD *)&v137[26];
    v153[4] = *(_OWORD *)&v137[28];
    v153[5] = *(_OWORD *)&v137[30];
    v153[0] = *(_OWORD *)&v137[20];
    v153[1] = *(_OWORD *)&v137[22];
    int64_t result = specialized FullyLinearProof.verifierLength.getter();
    int64_t v62 = (void)v59 * result;
    if ((unsigned __int128)((uint64_t)v59 * (__int128)result) >> 64 != ((uint64_t)v59 * result) >> 63)
    {
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    int64_t result = specialized FullyLinearProof.verifierLength.getter();
    uint64_t v63 = v122 * result;
    unint64_t v64 = v119;
    if ((unsigned __int128)(v122 * (__int128)result) >> 64 != (v122 * result) >> 63)
    {
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
    BOOL v65 = __OFADD__(v62, v63);
    uint64_t v66 = v62 + v63;
    if (v65)
    {
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
    int64_t result = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v66 & ~(v66 >> 63), 0, MEMORY[0x263F8EE78], &demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
    uint64_t v134 = (char *)result;
    if (!v59)
    {
      uint64_t v76 = v64;
LABEL_37:
      uint64_t v81 = v122;
      if (!v122)
      {
        unint64_t v103 = v120;
LABEL_43:
        uint64_t v104 = v117;
        uint64_t v105 = *(void *)(v117 + 24);
        swift_bridgeObjectRetain();
        int64_t result = specialized VerificationJointRandomness.seed.getter(&lazy protocol witness table cache variable for type VerificationJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64> and conformance VerificationJointRandomness<A, B>, &demangling cache variable for type metadata for VerificationJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64>);
        unint64_t v106 = v132;
        *uint64_t v132 = v116[0];
        v106[1] = v105;
        v106[2] = result;
        int64_t v107 = v170;
        *((unsigned char *)v106 + 24) = v170;
        uint64_t v108 = *(void *)(v104 + 16);
        if (*(void *)(v108 + 16) > v107)
        {
          uint64_t v109 = v103[2];
          if (*(void *)(v109 + 16) > v107)
          {
            unint64_t v110 = v134;
            unint64_t v111 = *(char **)(v108 + 8 * v107 + 32);
            unint64_t v112 = *(char **)(v109 + 8 * v107 + 32);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_unknownObjectRelease();
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_setDeallocating();
            swift_bridgeObjectRelease();
            swift_release();
            int64_t result = swift_deallocClassInstance();
            unint64_t v113 = v131;
            *uint64_t v131 = v110;
            v113[1] = v111;
            v113[2] = v112;
            return result;
          }
          goto LABEL_67;
        }
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        return result;
      }
      uint64_t v121 = v137[0];
      long long v150 = *(_OWORD *)((char *)v148 + 8);
      long long v151 = *(_OWORD *)((char *)&v148[1] + 8);
      long long v152 = *(_OWORD *)((char *)&v148[2] + 8);
      unint64_t v82 = v120[5];
      unint64_t v118 = v135;
      unint64_t v119 = v82;
      uint64_t v83 = v122 & ~(v122 >> 63);
      unint64_t v84 = v128;
      while (1)
      {
        uint64_t v122 = v81;
        int64_t v124 = (void (*)(uint64_t, uint64_t, uint64_t, unint64_t))v83;
        if (!v83) {
          goto LABEL_53;
        }
        uint64_t v85 = specialized VerificationJointRandomness.xof.getter(&lazy protocol witness table cache variable for type VerificationJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64> and conformance VerificationJointRandomness<A, B>, &demangling cache variable for type metadata for VerificationJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64>, (uint64_t (*)(uint64_t))specialized static PINE.domainSeparationTag(usage:));
        *(void *)&long long v125 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:);
        unint64_t v86 = specialized static FieldElement.randomVector<A>(count:using:)(v119, v85, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t))specialized static FieldElement.randomElement<A>(using:));
        swift_release();
        uint64_t v87 = specialized FullyLinearProof.proofLength.getter();
        int64_t v88 = v129;
        uint64_t v89 = v130;
        uint64_t v90 = specialized Collection.prefix(_:)(v87, v76, v130, v129, v84);
        unint64_t v127 = v92;
        unint64_t v128 = v91;
        *(void *)&long long v126 = v93;
        uint64_t v94 = v88;
        unint64_t v95 = v86;
        uint64_t v96 = v90;
        uint64_t v97 = specialized Collection.dropFirst(_:)(v87, v76, v89, v94, v84);
        int64_t v129 = v99;
        int64_t v130 = v98;
        unint64_t v84 = v100;
        specialized Gadget.wirePolynomialLength.getter();
        specialized Gadget.gadgetPolynomialLength.getter();
        swift_unknownObjectRetain();
        unint64_t v101 = specialized static FieldElement.randomVector<A>(count:using:)(1uLL, (uint64_t)v123, (void (*)(BOOL, unint64_t, uint64_t))v125, (void (*)(uint64_t *__return_ptr, uint64_t))specialized static FieldElement.randomElement<A>(using:));
        uint64_t v102 = v118;
        swift_bridgeObjectRetain();
        specialized FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(&v134, v102, v96, v128, v127, v126, v101, v95, v121, specialized FullyLinearProof.proofLength.getter, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), (void (*)(uint64_t, _OWORD *))partial apply for specialized closure #1 in FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:), (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t))specialized PINEMainCircuit.evaluate(measurement:jointRand:numOfShares:for:), &demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>, (uint64_t)&type metadata for Field64, (void (*)(void, void, void))specialized inverseDiscreteFourierTransform<A, B, C>(input:size:output:), (void (*)(uint64_t, _OWORD *))specialized evaluateUsingHorner<A, B>(_:atInput:));
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        int64_t result = swift_bridgeObjectRelease();
        uint64_t v83 = (uint64_t)v124 - 1;
        uint64_t v76 = v97;
        uint64_t v81 = v122 - 1;
        unint64_t v103 = v120;
        if (v122 == 1) {
          goto LABEL_43;
        }
      }
    }
    uint64_t v67 = v135;
    uint64_t v121 = v137[0];
    long long v155 = *(_OWORD *)((char *)v153 + 8);
    long long v156 = *(_OWORD *)((char *)&v153[1] + 8);
    long long v157 = *(_OWORD *)((char *)&v153[2] + 8);
    while (1)
    {
      int64_t v124 = v59;
      if (!v59) {
        break;
      }
      uint64_t v68 = specialized FullyLinearProof.proofLength.getter();
      int64_t v69 = v129;
      uint64_t v70 = v130;
      unint64_t v71 = v128;
      uint64_t v72 = specialized Collection.prefix(_:)(v68, v64, v130, v129, v128);
      unint64_t v127 = v73;
      *(void *)&long long v126 = v74;
      *(void *)&long long v125 = v75;
      uint64_t v76 = specialized Collection.dropFirst(_:)(v68, v64, v70, v69, v71);
      int64_t v129 = v78;
      int64_t v130 = v77;
      unint64_t v128 = v79;
      specialized Gadget.wirePolynomialLength.getter();
      specialized Gadget.gadgetPolynomialLength.getter();
      swift_unknownObjectRetain();
      unint64_t v80 = specialized static FieldElement.randomVector<A>(count:using:)(1uLL, (uint64_t)v123, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t))specialized static FieldElement.randomElement<A>(using:));
      swift_bridgeObjectRetain();
      specialized FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(&v134, v67, v72, v127, v126, v125, v80, MEMORY[0x263F8EE78], v121, specialized FullyLinearProof.proofLength.getter, (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), (char *)partial apply for specialized closure #1 in FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:), (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t))specialized PINENormEqualityCheckCircuit.evaluate(measurement:jointRand:numOfShares:for:), &demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>, (uint64_t)&type metadata for Field64, (void (*)(void, void, void))specialized inverseDiscreteFourierTransform<A, B, C>(input:size:output:), (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))specialized evaluateUsingHorner<A, B>(_:atInput:));
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      int64_t result = swift_bridgeObjectRelease();
      unint64_t v64 = v76;
      unint64_t v59 = (void (*)(uint64_t, uint64_t, uint64_t, unint64_t))((char *)v124 - 1);
      if (v124 == (void (*)(uint64_t, uint64_t, uint64_t, unint64_t))1) {
        goto LABEL_37;
      }
    }
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  return result;
}

void PINE<>.encodedPrepareMessageFrom(_:)(uint64_t a1)
{
  memcpy(__dst, v1, sizeof(__dst));
  specialized PINE.prepareMessageFrom(_:parameter:)(a1, (uint64_t)&v11);
  if (!v2)
  {
    uint64_t v5 = v11;
    uint64_t v4 = v12;
    uint64_t v6 = *(void *)(v11 + 16);
    uint64_t v7 = *(void *)(v12 + 16);
    if (__OFADD__(v6, v7))
    {
      __break(1u);
    }
    else
    {
      uint64_t v15 = specialized Data.init(capacity:)(v6 + v7);
      uint64_t v16 = v8;
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
      uint64_t v13 = v9;
      uint64_t v10 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8]);
      uint64_t v14 = v10;
      uint64_t v11 = v5;
      __swift_project_boxed_opaque_existential_1(&v11, v9);
      swift_bridgeObjectRetain_n();
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
      swift_bridgeObjectRelease();
      uint64_t v13 = v9;
      uint64_t v14 = v10;
      uint64_t v11 = v4;
      __swift_project_boxed_opaque_existential_1(&v11, v9);
      swift_bridgeObjectRetain_n();
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
    }
  }
}

{
  const void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned char __dst[328];

  memcpy(__dst, v1, sizeof(__dst));
  specialized PINE.prepareMessageFrom(_:parameter:)(a1, (unint64_t)&v11);
  if (!v2)
  {
    uint64_t v5 = v11;
    uint64_t v4 = v12;
    uint64_t v6 = *(void *)(v11 + 16);
    uint64_t v7 = *(void *)(v12 + 16);
    if (__OFADD__(v6, v7))
    {
      __break(1u);
    }
    else
    {
      uint64_t v15 = specialized Data.init(capacity:)(v6 + v7);
      uint64_t v16 = v8;
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
      uint64_t v13 = v9;
      uint64_t v10 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]();
      uint64_t v14 = v10;
      uint64_t v11 = v5;
      __swift_project_boxed_opaque_existential_1(&v11, v9);
      swift_bridgeObjectRetain_n();
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
      swift_bridgeObjectRelease();
      uint64_t v13 = v9;
      uint64_t v14 = v10;
      uint64_t v11 = v4;
      __swift_project_boxed_opaque_existential_1(&v11, v9);
      swift_bridgeObjectRetain_n();
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
    }
  }
}

{
  const void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned char __dst[328];

  memcpy(__dst, v1, sizeof(__dst));
  specialized PINE.prepareMessageFrom(_:parameter:)(a1, (uint64_t)&v11);
  if (!v2)
  {
    uint64_t v5 = v11;
    uint64_t v4 = v12;
    uint64_t v6 = *(void *)(v11 + 16);
    uint64_t v7 = *(void *)(v12 + 16);
    if (__OFADD__(v6, v7))
    {
      __break(1u);
    }
    else
    {
      uint64_t v15 = specialized Data.init(capacity:)(v6 + v7);
      uint64_t v16 = v8;
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
      uint64_t v13 = v9;
      uint64_t v10 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]();
      uint64_t v14 = v10;
      uint64_t v11 = v5;
      __swift_project_boxed_opaque_existential_1(&v11, v9);
      swift_bridgeObjectRetain_n();
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
      swift_bridgeObjectRelease();
      uint64_t v13 = v9;
      uint64_t v14 = v10;
      uint64_t v11 = v4;
      __swift_project_boxed_opaque_existential_1(&v11, v9);
      swift_bridgeObjectRetain_n();
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
    }
  }
}

void specialized PINE.prepareMessageFrom(_:parameter:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int64_t v4 = *(void *)(a1 + 16);
  if (v4 != *v2)
  {
    _StringGuts.grow(_:)(53);
    v15._countAndFlagsBits = 0x4E49502F46414456;
    v15._object = (void *)0xEF74666977732E45;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0xD00000000000002CLL;
    v16._object = (void *)0x8000000260BFEA50;
    String.append(_:)(v16);
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 15649;
    v18._object = (void *)0xE200000000000000;
    String.append(_:)(v18);
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 41;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v21 = 0;
    *(void *)(v21 + 8) = 0xE000000000000000;
    *(unsigned char *)(v21 + 16) = 1;
    swift_willThrow();
    return;
  }
  uint64_t v73 = v3;
  uint64_t v7 = v2[40];
  uint64_t v8 = specialized FullyLinearProof.verifierLength.getter();
  uint64_t v9 = v7 * v8;
  uint64_t v72 = v7;
  if ((unsigned __int128)(v7 * (__int128)v8) >> 64 != (v7 * v8) >> 63) {
    goto LABEL_103;
  }
  uint64_t v10 = v2[39];
  uint64_t v11 = specialized FullyLinearProof.verifierLength.getter();
  uint64_t v12 = v10 * v11;
  if ((unsigned __int128)(v10 * (__int128)v11) >> 64 != (v10 * v11) >> 63)
  {
LABEL_104:
    __break(1u);
    goto LABEL_105;
  }
  uint64_t v13 = v9 + v12;
  if (__OFADD__(v9, v12))
  {
LABEL_105:
    __break(1u);
    goto LABEL_106;
  }
  if (v13 < 0)
  {
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
    return;
  }
  if (v13)
  {
    uint64_t v14 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v14 + 16) = v13;
    uint64_t v76 = v14;
    bzero((void *)(v14 + 32), 8 * v13);
  }
  else
  {
    uint64_t v76 = MEMORY[0x263F8EE78];
  }
  uint64_t i = v72;
  uint64_t v23 = v3;
  uint64_t v71 = v10;
  int64_t v69 = (void *)a2;
  if (v4)
  {
    a2 = v76 + 32;
    uint64_t v70 = a1;
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v4; ++i)
    {
      uint64_t v24 = a1 + 32 + 24 * i;
      uint64_t v25 = *(void *)v24;
      uint64_t v26 = *(void *)(v76 + 16);
      uint64_t v23 = *(void *)(*(void *)v24 + 16);
      if (v26 != v23)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(28);
        swift_bridgeObjectRelease();
        v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v44);
        swift_bridgeObjectRelease();
        v45._countAndFlagsBits = 540877088;
        v45._object = (void *)0xE400000000000000;
        String.append(_:)(v45);
        v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v46);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
        swift_allocError();
        *(void *)uint64_t v47 = 0xD000000000000020;
        *(void *)(v47 + 8) = 0x8000000260BFF130;
        *(unsigned char *)(v47 + 16) = 1;
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_83:
        swift_bridgeObjectRelease();
        return;
      }
      if (v26)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v27 = 0;
        while (1)
        {
          unint64_t v29 = *(void *)(v25 + 8 * v27 + 32);
          unint64_t v28 = *(void *)(a2 + 8 * v27);
          if (v29)
          {
            BOOL v30 = v29 <= 0xFFFEB00001;
            unint64_t v31 = 0xFFFEB00001 - v29;
            if (!v30)
            {
              __break(1u);
LABEL_85:
              __break(1u);
              __break(1u);
LABEL_86:
              __break(1u);
LABEL_87:
              __break(1u);
LABEL_88:
              __break(1u);
LABEL_89:
              __break(1u);
LABEL_90:
              __break(1u);
LABEL_91:
              __break(1u);
LABEL_92:
              __break(1u);
LABEL_93:
              __break(1u);
LABEL_94:
              __break(1u);
LABEL_95:
              __break(1u);
LABEL_96:
              __break(1u);
LABEL_97:
              __break(1u);
LABEL_98:
              __break(1u);
LABEL_99:
              __break(1u);
LABEL_100:
              __break(1u);
LABEL_101:
              __break(1u);
LABEL_102:
              __break(1u);
LABEL_103:
              __break(1u);
              goto LABEL_104;
            }
            if (v28 >= v31)
            {
              v28 -= v31;
            }
            else
            {
              BOOL v30 = v31 <= 0xFFFEB00001;
              unint64_t v32 = 0xFFFEB00001 - v31;
              if (!v30) {
                goto LABEL_85;
              }
              BOOL v30 = __CFADD__(v28, v32);
              v28 += v32;
              if (v30)
              {
                __break(1u);
                goto LABEL_28;
              }
            }
          }
          *(void *)(a2 + 8 * v27++) = v28;
          if (v26 == v27)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            break;
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v33 = *(void *)(v76 + 16);
    uint64_t v74 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    uint64_t v35 = v74;
    uint64_t v48 = (uint64_t *)(a1 + 40);
    int64_t v49 = v4;
    do
    {
      uint64_t v50 = *v48;
      unint64_t v52 = *(void *)(v74 + 16);
      unint64_t v51 = *(void *)(v74 + 24);
      swift_bridgeObjectRetain();
      if (v52 >= v51 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v51 > 1), v52 + 1, 1);
      }
      *(void *)(v74 + 16) = v52 + 1;
      *(void *)(v74 + 8 * v52 + 32) = v50;
      v48 += 3;
      --v49;
    }
    while (v49);
    uint64_t v75 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    uint64_t v34 = v75;
    uint64_t v53 = (uint64_t *)(v70 + 48);
    do
    {
      a2 = *v53;
      unint64_t v55 = *(void *)(v75 + 16);
      unint64_t v54 = *(void *)(v75 + 24);
      swift_bridgeObjectRetain();
      if (v55 >= v54 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v54 > 1), v55 + 1, 1);
      }
      *(void *)(v75 + 16) = v55 + 1;
      *(void *)(v75 + 8 * v55 + 32) = a2;
      v53 += 3;
      --v4;
    }
    while (v4);
    uint64_t i = v72;
    uint64_t v23 = v73;
    if ((v72 & 0x8000000000000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_59;
  }
LABEL_28:
  uint64_t v33 = *(void *)(v76 + 16);
  uint64_t v34 = MEMORY[0x263F8EE78];
  uint64_t v35 = MEMORY[0x263F8EE78];
  if (i < 0)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
LABEL_29:
  a2 = v76 + 32;
  if (i)
  {
    int64_t v36 = 0;
    while (1)
    {
      uint64_t v37 = specialized FullyLinearProof.verifierLength.getter();
      if (v37 < 0) {
        goto LABEL_86;
      }
      uint64_t v38 = v33 - v36;
      if (!v37 || v38 < 0 || (int64_t v39 = v33, v38 >= v37))
      {
        int64_t v39 = v36 + v37;
        if (__OFADD__(v36, v37)) {
          goto LABEL_92;
        }
      }
      if (v39 < v36) {
        goto LABEL_87;
      }
      if (v33 < v36) {
        goto LABEL_88;
      }
      if (v33 < v39) {
        goto LABEL_89;
      }
      if (!v37 || v38 < 0 || (uint64_t v40 = v33, v38 >= v37))
      {
        uint64_t v40 = v36 + v37;
        if (__OFADD__(v36, v37)) {
          goto LABEL_93;
        }
      }
      if (v33 < v40) {
        goto LABEL_90;
      }
      if (v40 < v36) {
        goto LABEL_91;
      }
      unint64_t v41 = (2 * v39) | 1;
      int64_t v42 = swift_unknownObjectRetain();
      char v43 = specialized FullyLinearProof.decide<A>(verifier:)(v42, a2, v36, v41);
      if (v23)
      {
LABEL_82:
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        goto LABEL_83;
      }
      if ((v43 & 1) == 0)
      {
LABEL_84:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
        swift_allocError();
        *(void *)uint64_t v68 = 0;
        *(void *)(v68 + 8) = 0;
        *(unsigned char *)(v68 + 16) = 4;
        swift_willThrow();
        swift_unknownObjectRelease_n();
        return;
      }
      swift_unknownObjectRelease();
      int64_t v36 = v40;
      if (!--i) {
        goto LABEL_61;
      }
    }
  }
LABEL_60:
  uint64_t v40 = 0;
LABEL_61:
  uint64_t v56 = v71;
  if (v71 < 0) {
    goto LABEL_107;
  }
  if (v71)
  {
    while (v56)
    {
      uint64_t v57 = specialized FullyLinearProof.verifierLength.getter();
      if (v57 < 0) {
        goto LABEL_95;
      }
      uint64_t v58 = v33 - v40;
      if (!v57 || v58 < 0 || (uint64_t v59 = v33, v58 >= v57))
      {
        uint64_t v59 = v40 + v57;
        if (__OFADD__(v40, v57)) {
          goto LABEL_101;
        }
      }
      if (v59 < v40) {
        goto LABEL_96;
      }
      if (v33 < v40) {
        goto LABEL_97;
      }
      if (v33 < v59) {
        goto LABEL_98;
      }
      if (!v57 || v58 < 0 || (uint64_t v60 = v33, v58 >= v57))
      {
        uint64_t v60 = v40 + v57;
        if (__OFADD__(v40, v57)) {
          goto LABEL_102;
        }
      }
      if (v33 < v60) {
        goto LABEL_99;
      }
      if (v60 < v40) {
        goto LABEL_100;
      }
      unint64_t v61 = (2 * v59) | 1;
      uint64_t v62 = swift_unknownObjectRetain();
      char v63 = specialized FullyLinearProof.decide<A>(verifier:)(v62, a2, v40, v61, specialized FullyLinearProof.verifierLength.getter, (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:), (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))specialized ParallelSum.evaluate<A>(at:));
      if (v23) {
        goto LABEL_82;
      }
      if ((v63 & 1) == 0) {
        goto LABEL_84;
      }
      swift_unknownObjectRelease();
      uint64_t v40 = v60;
      if (!--v56) {
        goto LABEL_81;
      }
    }
    goto LABEL_94;
  }
LABEL_81:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WraparoundJointRandomness<PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field40>);
  swift_initStackObject();
  uint64_t v64 = specialized WraparoundJointRandomness.init(parts:)(v35, &lazy protocol witness table cache variable for type WraparoundJointRandomness<PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field40> and conformance WraparoundJointRandomness<A, B>, &demangling cache variable for type metadata for WraparoundJointRandomness<PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field40>, (uint64_t (*)(uint64_t))specialized static PINE.domainSeparationTag(usage:));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VerificationJointRandomness<PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field40>);
  inited = (void *)swift_initStackObject();
  inited[4] = 0;
  inited[5] = 3;
  inited[6] = v71;
  inited[2] = v34;
  inited[3] = 0;
  uint64_t v66 = *(void *)(v64 + 24);
  swift_bridgeObjectRetain();
  uint64_t v67 = specialized VerificationJointRandomness.seed.getter(&lazy protocol witness table cache variable for type VerificationJointRandomness<PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field40> and conformance VerificationJointRandomness<A, B>, &demangling cache variable for type metadata for VerificationJointRandomness<PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field40>);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  *int64_t v69 = v66;
  v69[1] = v67;
}

{
  void *v2;
  uint64_t v3;
  int64_t v4;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  unint64_t v42;
  int64_t v43;
  char v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  uint64_t *v49;
  int64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  void *inited;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  int64_t v4 = *(void *)(a1 + 16);
  if (v4 != *v2)
  {
    _StringGuts.grow(_:)(53);
    v15._countAndFlagsBits = 0x4E49502F46414456;
    v15._object = (void *)0xEF74666977732E45;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0xD00000000000002CLL;
    v16._object = (void *)0x8000000260BFEA50;
    String.append(_:)(v16);
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 15649;
    v18._object = (void *)0xE200000000000000;
    String.append(_:)(v18);
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 41;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v21 = 0;
    *(void *)(v21 + 8) = 0xE000000000000000;
    *(unsigned char *)(v21 + 16) = 1;
    swift_willThrow();
    return;
  }
  uint64_t v74 = v3;
  uint64_t v7 = v2[40];
  uint64_t v8 = specialized FullyLinearProof.verifierLength.getter();
  uint64_t v9 = v7 * v8;
  uint64_t v73 = v7;
  if ((unsigned __int128)(v7 * (__int128)v8) >> 64 != (v7 * v8) >> 63) {
    goto LABEL_103;
  }
  uint64_t v10 = v2[39];
  uint64_t v11 = specialized FullyLinearProof.verifierLength.getter();
  uint64_t v12 = v10 * v11;
  if ((unsigned __int128)(v10 * (__int128)v11) >> 64 != (v10 * v11) >> 63)
  {
LABEL_104:
    __break(1u);
    goto LABEL_105;
  }
  uint64_t v13 = v9 + v12;
  if (__OFADD__(v9, v12))
  {
LABEL_105:
    __break(1u);
    goto LABEL_106;
  }
  if (v13 < 0)
  {
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
    return;
  }
  if (v13)
  {
    uint64_t v14 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v14 + 16) = v13;
    uint64_t v77 = v14;
    bzero((void *)(v14 + 32), 8 * v13);
  }
  else
  {
    uint64_t v77 = MEMORY[0x263F8EE78];
  }
  long long v22 = v73;
  uint64_t v23 = v3;
  uint64_t v72 = v10;
  uint64_t v70 = (void *)a2;
  if (v4)
  {
    uint64_t v24 = v77 + 32;
    uint64_t v71 = a1;
    swift_bridgeObjectRetain();
    a2 = 0;
    long long v22 = 0xFFFFFFFF00000001;
    do
    {
      uint64_t v25 = a1 + 32 + 24 * a2;
      uint64_t v26 = *(void *)v25;
      uint64_t v27 = *(void *)(v77 + 16);
      uint64_t v23 = *(void *)(*(void *)v25 + 16);
      if (v27 != v23)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(28);
        swift_bridgeObjectRelease();
        v45._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v45);
        swift_bridgeObjectRelease();
        v46._countAndFlagsBits = 540877088;
        v46._object = (void *)0xE400000000000000;
        String.append(_:)(v46);
        v47._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v47);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
        swift_allocError();
        *(void *)uint64_t v48 = 0xD000000000000020;
        *(void *)(v48 + 8) = 0x8000000260BFE7C0;
        *(unsigned char *)(v48 + 16) = 1;
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_83:
        swift_bridgeObjectRelease();
        return;
      }
      if (v27)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v28 = 0;
        while (1)
        {
          BOOL v30 = *(void *)(v26 + 8 * v28 + 32);
          unint64_t v29 = *(void *)(v24 + 8 * v28);
          if (v30)
          {
            unint64_t v31 = v30 <= 0xFFFFFFFF00000001;
            unint64_t v32 = 0xFFFFFFFF00000001 - v30;
            if (!v31)
            {
              __break(1u);
LABEL_85:
              __break(1u);
              __break(1u);
LABEL_86:
              __break(1u);
LABEL_87:
              __break(1u);
LABEL_88:
              __break(1u);
LABEL_89:
              __break(1u);
LABEL_90:
              __break(1u);
LABEL_91:
              __break(1u);
LABEL_92:
              __break(1u);
LABEL_93:
              __break(1u);
LABEL_94:
              __break(1u);
LABEL_95:
              __break(1u);
LABEL_96:
              __break(1u);
LABEL_97:
              __break(1u);
LABEL_98:
              __break(1u);
LABEL_99:
              __break(1u);
LABEL_100:
              __break(1u);
LABEL_101:
              __break(1u);
LABEL_102:
              __break(1u);
LABEL_103:
              __break(1u);
              goto LABEL_104;
            }
            if (v29 >= v32)
            {
              v29 -= v32;
            }
            else
            {
              unint64_t v31 = v32 <= 0xFFFFFFFF00000001;
              uint64_t v33 = 0xFFFFFFFF00000001 - v32;
              if (!v31) {
                goto LABEL_85;
              }
              unint64_t v31 = __CFADD__(v29, v33);
              v29 += v33;
              if (v31)
              {
                __break(1u);
                goto LABEL_28;
              }
            }
          }
          *(void *)(v24 + 8 * v28++) = v29;
          if (v27 == v28)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            break;
          }
        }
      }
      ++a2;
    }
    while (a2 != v4);
    swift_bridgeObjectRelease();
    uint64_t v34 = *(void *)(v77 + 16);
    uint64_t v75 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    int64_t v36 = v75;
    int64_t v49 = (uint64_t *)(a1 + 40);
    uint64_t v50 = v4;
    do
    {
      unint64_t v51 = *v49;
      uint64_t v53 = *(void *)(v75 + 16);
      unint64_t v52 = *(void *)(v75 + 24);
      swift_bridgeObjectRetain();
      if (v53 >= v52 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v52 > 1), v53 + 1, 1);
      }
      *(void *)(v75 + 16) = v53 + 1;
      *(void *)(v75 + 8 * v53 + 32) = v51;
      v49 += 3;
      --v50;
    }
    while (v50);
    uint64_t v76 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    uint64_t v35 = v76;
    unint64_t v54 = (uint64_t *)(v71 + 48);
    do
    {
      a2 = *v54;
      uint64_t v56 = *(void *)(v76 + 16);
      unint64_t v55 = *(void *)(v76 + 24);
      swift_bridgeObjectRetain();
      if (v56 >= v55 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v55 > 1), v56 + 1, 1);
      }
      *(void *)(v76 + 16) = v56 + 1;
      *(void *)(v76 + 8 * v56 + 32) = a2;
      v54 += 3;
      --v4;
    }
    while (v4);
    long long v22 = v73;
    uint64_t v23 = v74;
    if ((v73 & 0x8000000000000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_59;
  }
LABEL_28:
  uint64_t v34 = *(void *)(v77 + 16);
  uint64_t v35 = MEMORY[0x263F8EE78];
  int64_t v36 = MEMORY[0x263F8EE78];
  if ((v22 & 0x8000000000000000) != 0)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
LABEL_29:
  a2 = v77 + 32;
  if (v22)
  {
    uint64_t v37 = 0;
    while (1)
    {
      uint64_t v38 = specialized FullyLinearProof.verifierLength.getter();
      if (v38 < 0) {
        goto LABEL_86;
      }
      int64_t v39 = v34 - v37;
      if (!v38 || v39 < 0 || (uint64_t v40 = v34, v39 >= v38))
      {
        uint64_t v40 = v37 + v38;
        if (__OFADD__(v37, v38)) {
          goto LABEL_92;
        }
      }
      if (v40 < v37) {
        goto LABEL_87;
      }
      if (v34 < v37) {
        goto LABEL_88;
      }
      if (v34 < v40) {
        goto LABEL_89;
      }
      if (!v38 || v39 < 0 || (unint64_t v41 = v34, v39 >= v38))
      {
        unint64_t v41 = v37 + v38;
        if (__OFADD__(v37, v38)) {
          goto LABEL_93;
        }
      }
      if (v34 < v41) {
        goto LABEL_90;
      }
      if (v41 < v37) {
        goto LABEL_91;
      }
      int64_t v42 = (2 * v40) | 1;
      char v43 = swift_unknownObjectRetain();
      Swift::String v44 = specialized FullyLinearProof.decide<A>(verifier:)(v43, a2, v37, v42);
      if (v23)
      {
LABEL_82:
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        goto LABEL_83;
      }
      if ((v44 & 1) == 0)
      {
LABEL_84:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
        swift_allocError();
        *(void *)int64_t v69 = 0;
        *(void *)(v69 + 8) = 0;
        *(unsigned char *)(v69 + 16) = 4;
        swift_willThrow();
        swift_unknownObjectRelease_n();
        return;
      }
      swift_unknownObjectRelease();
      uint64_t v37 = v41;
      if (!--v22) {
        goto LABEL_61;
      }
    }
  }
LABEL_60:
  unint64_t v41 = 0;
LABEL_61:
  uint64_t v57 = v72;
  if (v72 < 0) {
    goto LABEL_107;
  }
  if (v72)
  {
    while (v57)
    {
      uint64_t v58 = specialized FullyLinearProof.verifierLength.getter();
      if (v58 < 0) {
        goto LABEL_95;
      }
      uint64_t v59 = v34 - v41;
      if (!v58 || v59 < 0 || (uint64_t v60 = v34, v59 >= v58))
      {
        uint64_t v60 = v41 + v58;
        if (__OFADD__(v41, v58)) {
          goto LABEL_101;
        }
      }
      if (v60 < v41) {
        goto LABEL_96;
      }
      if (v34 < v41) {
        goto LABEL_97;
      }
      if (v34 < v60) {
        goto LABEL_98;
      }
      if (!v58 || v59 < 0 || (unint64_t v61 = v34, v59 >= v58))
      {
        unint64_t v61 = v41 + v58;
        if (__OFADD__(v41, v58)) {
          goto LABEL_102;
        }
      }
      if (v34 < v61) {
        goto LABEL_99;
      }
      if (v61 < v41) {
        goto LABEL_100;
      }
      uint64_t v62 = (2 * v60) | 1;
      char v63 = swift_unknownObjectRetain();
      uint64_t v64 = specialized FullyLinearProof.decide<A>(verifier:)(v63, a2, v41, v62, specialized FullyLinearProof.verifierLength.getter, (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:), (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))specialized ParallelSum.evaluate<A>(at:));
      if (v23) {
        goto LABEL_82;
      }
      if ((v64 & 1) == 0) {
        goto LABEL_84;
      }
      swift_unknownObjectRelease();
      unint64_t v41 = v61;
      if (!--v57) {
        goto LABEL_81;
      }
    }
    goto LABEL_94;
  }
LABEL_81:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WraparoundJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64>);
  swift_initStackObject();
  BOOL v65 = specialized WraparoundJointRandomness.init(parts:)(v36, &lazy protocol witness table cache variable for type WraparoundJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64> and conformance WraparoundJointRandomness<A, B>, &demangling cache variable for type metadata for WraparoundJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64>, (uint64_t (*)(uint64_t))specialized static PINE.domainSeparationTag(usage:));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VerificationJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64>);
  inited = (void *)swift_initStackObject();
  inited[4] = 0;
  inited[5] = 3;
  inited[6] = v72;
  inited[2] = v35;
  inited[3] = 0;
  uint64_t v67 = *(void *)(v65 + 24);
  swift_bridgeObjectRetain();
  uint64_t v68 = specialized VerificationJointRandomness.seed.getter(&lazy protocol witness table cache variable for type VerificationJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64> and conformance VerificationJointRandomness<A, B>, &demangling cache variable for type metadata for VerificationJointRandomness<PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field64>);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  *uint64_t v70 = v67;
  v70[1] = v68;
}

void specialized PINE.prepareMessageFrom(_:parameter:)(uint64_t a1@<X0>, unint64_t a2@<X8>)
{
  int64_t v4 = *(void *)(a1 + 16);
  if (v4 != *v2)
  {
    _StringGuts.grow(_:)(53);
    v15._countAndFlagsBits = 0x4E49502F46414456;
    v15._object = (void *)0xEF74666977732E45;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0xD00000000000002CLL;
    v16._object = (void *)0x8000000260BFEA50;
    String.append(_:)(v16);
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 15649;
    v18._object = (void *)0xE200000000000000;
    String.append(_:)(v18);
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 41;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v21 = 0;
    *(void *)(v21 + 8) = 0xE000000000000000;
    *(unsigned char *)(v21 + 16) = 1;
    swift_willThrow();
    return;
  }
  uint64_t v74 = v3;
  uint64_t v7 = v2[40];
  uint64_t v8 = specialized FullyLinearProof.verifierLength.getter();
  uint64_t v9 = v7 * v8;
  uint64_t v73 = v7;
  if ((unsigned __int128)(v7 * (__int128)v8) >> 64 != (v7 * v8) >> 63) {
    goto LABEL_103;
  }
  uint64_t v10 = v2[39];
  uint64_t v11 = specialized FullyLinearProof.verifierLength.getter();
  uint64_t v12 = v10 * v11;
  if ((unsigned __int128)(v10 * (__int128)v11) >> 64 != (v10 * v11) >> 63)
  {
LABEL_104:
    __break(1u);
    goto LABEL_105;
  }
  uint64_t v13 = v9 + v12;
  if (__OFADD__(v9, v12))
  {
LABEL_105:
    __break(1u);
    goto LABEL_106;
  }
  if (v13 < 0)
  {
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
    return;
  }
  if (v13)
  {
    uint64_t v14 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v14 + 16) = v13;
    uint64_t v77 = v14;
    bzero((void *)(v14 + 32), 4 * v13);
  }
  else
  {
    uint64_t v77 = MEMORY[0x263F8EE78];
  }
  uint64_t v22 = v73;
  uint64_t v23 = v3;
  uint64_t v72 = v10;
  uint64_t v70 = (void *)a2;
  if (v4)
  {
    uint64_t v24 = v77 + 32;
    uint64_t v71 = a1;
    swift_bridgeObjectRetain();
    a2 = 0;
    uint64_t v22 = 4293918721;
    do
    {
      uint64_t v25 = a1 + 32 + 24 * a2;
      uint64_t v26 = *(void *)v25;
      uint64_t v27 = *(void *)(v77 + 16);
      uint64_t v23 = *(void *)(*(void *)v25 + 16);
      if (v27 != v23)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(28);
        swift_bridgeObjectRelease();
        v45._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v45);
        swift_bridgeObjectRelease();
        v46._countAndFlagsBits = 540877088;
        v46._object = (void *)0xE400000000000000;
        String.append(_:)(v46);
        v47._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v47);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
        swift_allocError();
        *(void *)uint64_t v48 = 0xD000000000000020;
        *(void *)(v48 + 8) = 0x8000000260BFF030;
        *(unsigned char *)(v48 + 16) = 1;
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_83:
        swift_bridgeObjectRelease();
        return;
      }
      if (v27)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v28 = 0;
        while (1)
        {
          unsigned int v30 = *(_DWORD *)(v26 + 4 * v28 + 32);
          unsigned int v29 = *(_DWORD *)(v24 + 4 * v28);
          if (v30)
          {
            BOOL v31 = v30 <= 0xFFF00001;
            unsigned int v32 = -1048575 - v30;
            if (!v31)
            {
              __break(1u);
LABEL_85:
              __break(1u);
              __break(1u);
LABEL_86:
              __break(1u);
LABEL_87:
              __break(1u);
LABEL_88:
              __break(1u);
LABEL_89:
              __break(1u);
LABEL_90:
              __break(1u);
LABEL_91:
              __break(1u);
LABEL_92:
              __break(1u);
LABEL_93:
              __break(1u);
LABEL_94:
              __break(1u);
LABEL_95:
              __break(1u);
LABEL_96:
              __break(1u);
LABEL_97:
              __break(1u);
LABEL_98:
              __break(1u);
LABEL_99:
              __break(1u);
LABEL_100:
              __break(1u);
LABEL_101:
              __break(1u);
LABEL_102:
              __break(1u);
LABEL_103:
              __break(1u);
              goto LABEL_104;
            }
            if (v29 >= v32)
            {
              v29 -= v32;
            }
            else
            {
              BOOL v31 = v32 <= 0xFFF00001;
              unsigned int v33 = -1048575 - v32;
              if (!v31) {
                goto LABEL_85;
              }
              BOOL v31 = __CFADD__(v29, v33);
              v29 += v33;
              if (v31)
              {
                __break(1u);
                goto LABEL_28;
              }
            }
          }
          *(_DWORD *)(v24 + 4 * v28++) = v29;
          if (v27 == v28)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            break;
          }
        }
      }
      ++a2;
    }
    while (a2 != v4);
    swift_bridgeObjectRelease();
    uint64_t v34 = *(void *)(v77 + 16);
    uint64_t v75 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    uint64_t v36 = v75;
    int64_t v49 = (uint64_t *)(a1 + 40);
    int64_t v50 = v4;
    do
    {
      uint64_t v51 = *v49;
      unint64_t v53 = *(void *)(v75 + 16);
      unint64_t v52 = *(void *)(v75 + 24);
      swift_bridgeObjectRetain();
      if (v53 >= v52 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v52 > 1), v53 + 1, 1);
      }
      *(void *)(v75 + 16) = v53 + 1;
      *(void *)(v75 + 8 * v53 + 32) = v51;
      v49 += 3;
      --v50;
    }
    while (v50);
    uint64_t v76 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    uint64_t v35 = v76;
    unint64_t v54 = (unint64_t *)(v71 + 48);
    do
    {
      a2 = *v54;
      unint64_t v56 = *(void *)(v76 + 16);
      unint64_t v55 = *(void *)(v76 + 24);
      swift_bridgeObjectRetain();
      if (v56 >= v55 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v55 > 1), v56 + 1, 1);
      }
      *(void *)(v76 + 16) = v56 + 1;
      *(void *)(v76 + 8 * v56 + 32) = a2;
      v54 += 3;
      --v4;
    }
    while (v4);
    uint64_t v22 = v73;
    uint64_t v23 = v74;
    if ((v73 & 0x8000000000000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_59;
  }
LABEL_28:
  uint64_t v34 = *(void *)(v77 + 16);
  uint64_t v35 = MEMORY[0x263F8EE78];
  uint64_t v36 = MEMORY[0x263F8EE78];
  if (v22 < 0)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
LABEL_29:
  a2 = v77 + 32;
  if (v22)
  {
    uint64_t v37 = 0;
    while (1)
    {
      uint64_t v38 = specialized FullyLinearProof.verifierLength.getter();
      if (v38 < 0) {
        goto LABEL_86;
      }
      uint64_t v39 = v34 - v37;
      if (!v38 || v39 < 0 || (uint64_t v40 = v34, v39 >= v38))
      {
        uint64_t v40 = v37 + v38;
        if (__OFADD__(v37, v38)) {
          goto LABEL_92;
        }
      }
      if (v40 < v37) {
        goto LABEL_87;
      }
      if (v34 < v37) {
        goto LABEL_88;
      }
      if (v34 < v40) {
        goto LABEL_89;
      }
      if (!v38 || v39 < 0 || (uint64_t v41 = v34, v39 >= v38))
      {
        uint64_t v41 = v37 + v38;
        if (__OFADD__(v37, v38)) {
          goto LABEL_93;
        }
      }
      if (v34 < v41) {
        goto LABEL_90;
      }
      if (v41 < v37) {
        goto LABEL_91;
      }
      unint64_t v42 = (2 * v40) | 1;
      int64_t v43 = swift_unknownObjectRetain();
      char v44 = specialized FullyLinearProof.decide<A>(verifier:)(v43, a2, v37, v42);
      if (v23)
      {
LABEL_82:
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        goto LABEL_83;
      }
      if ((v44 & 1) == 0)
      {
LABEL_84:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
        swift_allocError();
        *(void *)uint64_t v69 = 0;
        *(void *)(v69 + 8) = 0;
        *(unsigned char *)(v69 + 16) = 4;
        swift_willThrow();
        swift_unknownObjectRelease_n();
        return;
      }
      swift_unknownObjectRelease();
      uint64_t v37 = v41;
      if (!--v22) {
        goto LABEL_61;
      }
    }
  }
LABEL_60:
  uint64_t v41 = 0;
LABEL_61:
  uint64_t v57 = v72;
  if (v72 < 0) {
    goto LABEL_107;
  }
  if (v72)
  {
    while (v57)
    {
      uint64_t v58 = specialized FullyLinearProof.verifierLength.getter();
      if (v58 < 0) {
        goto LABEL_95;
      }
      uint64_t v59 = v34 - v41;
      if (!v58 || v59 < 0 || (uint64_t v60 = v34, v59 >= v58))
      {
        uint64_t v60 = v41 + v58;
        if (__OFADD__(v41, v58)) {
          goto LABEL_101;
        }
      }
      if (v60 < v41) {
        goto LABEL_96;
      }
      if (v34 < v41) {
        goto LABEL_97;
      }
      if (v34 < v60) {
        goto LABEL_98;
      }
      if (!v58 || v59 < 0 || (uint64_t v61 = v34, v59 >= v58))
      {
        uint64_t v61 = v41 + v58;
        if (__OFADD__(v41, v58)) {
          goto LABEL_102;
        }
      }
      if (v34 < v61) {
        goto LABEL_99;
      }
      if (v61 < v41) {
        goto LABEL_100;
      }
      unint64_t v62 = (2 * v60) | 1;
      uint64_t v63 = swift_unknownObjectRetain();
      char v64 = specialized FullyLinearProof.decide<A>(verifier:)(v63, a2, v41, v62);
      if (v23) {
        goto LABEL_82;
      }
      if ((v64 & 1) == 0) {
        goto LABEL_84;
      }
      swift_unknownObjectRelease();
      uint64_t v41 = v61;
      if (!--v57) {
        goto LABEL_81;
      }
    }
    goto LABEL_94;
  }
LABEL_81:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WraparoundJointRandomness<PINE<Field32, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field32>);
  swift_initStackObject();
  uint64_t v65 = specialized WraparoundJointRandomness.init(parts:)(v36, &lazy protocol witness table cache variable for type WraparoundJointRandomness<PINE<Field32, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field32> and conformance WraparoundJointRandomness<A, B>, &demangling cache variable for type metadata for WraparoundJointRandomness<PINE<Field32, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field32>, (uint64_t (*)(uint64_t))specialized static PINE.domainSeparationTag(usage:));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VerificationJointRandomness<PINE<Field32, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field32>);
  inited = (void *)swift_initStackObject();
  inited[4] = 0;
  inited[5] = 3;
  inited[6] = v72;
  inited[2] = v35;
  inited[3] = 0;
  uint64_t v67 = *(void *)(v65 + 24);
  swift_bridgeObjectRetain();
  uint64_t v68 = specialized VerificationJointRandomness.seed.getter(&lazy protocol witness table cache variable for type VerificationJointRandomness<PINE<Field32, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field32> and conformance VerificationJointRandomness<A, B>, &demangling cache variable for type metadata for VerificationJointRandomness<PINE<Field32, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field32>);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  *uint64_t v70 = v67;
  v70[1] = v68;
}

char *PINE<>.prepareNextAndEncodeIntoBytes(aggregatorID:encodedState:encodedMessage:)(unint64_t a1, size_t a2, unint64_t a3, size_t a4, unint64_t a5)
{
  uint64_t v8 = v5;
  memcpy(__dst, v8, sizeof(__dst));
  specialized PINEPrepareState.init<A>(from:parameter:)(a2, a3, a1, 64, __dst[13], 0, (uint64_t)&v27);
  if (!v6)
  {
    uint64_t v14 = v27;
    uint64_t v15 = v28;
    uint64_t v16 = v29;
    specialized PINEPrepareMessage.init<A>(from:parameter:)(a4, a5, &v27);
    specialized PINE.prepareNext(state:message:)(v14, v15, v16, v27, v28, (uint64_t)&v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v17 = v27;
    uint64_t v18 = v28;
    uint64_t v19 = v29;
    uint64_t v20 = v30;
    uint64_t v21 = v31;
    uint64_t v22 = v32;
    uint64_t v23 = v33;
    if (v34 == 1)
    {
      uint64_t v24 = (char *)swift_bridgeObjectRetain();
      uint64_t v7 = specialized VDAFEncodable.encodedBytes.getter(v24);
      outlined consume of PrepareTransition<PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>>(v17, v18, v19, v20, v21, v22, v23, 1);
      outlined consume of PrepareTransition<PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>>(v17, v18, v19, v20, v21, v22, v23, 1);
    }
    else
    {
      outlined consume of PrepareTransition<PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>>(v27, v28, v29, v30, v31, v32, v33, 0);
      lazy protocol witness table accessor for type Prio3Error and conformance Prio3Error();
      swift_allocError();
      *(void *)uint64_t v25 = 0xD000000000000018;
      *(void *)(v25 + 8) = 0x8000000260BFE7A0;
      *(unsigned char *)(v25 + 16) = 2;
      swift_willThrow();
    }
  }
  return v7;
}

uint64_t specialized PINE.prepareNext(state:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  return specialized PINE.prepareNext(state:message:)(a1, a2, a3, a4, a5, a6);
}

{
  uint64_t v6;
  Swift::String v12;
  unint64_t v13;
  const char *v14;
  Swift::String v15;
  unint64_t v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  unint64_t v24;
  unint64_t v25;

  if (!specialized static Array<A>.== infix(_:_:)(a3, a5))
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0xE000000000000000;
    _StringGuts.grow(_:)(81);
    v12._countAndFlagsBits = 0x4E49502F46414456;
    v12._object = (void *)0xEF74666977732E45;
    String.append(_:)(v12);
    uint64_t v13 = 0xD00000000000003BLL;
    uint64_t v14 = " mismatched verification joint randomness seed:\nin state: (";
LABEL_7:
    uint64_t v16 = (unint64_t)(v14 - 32) | 0x8000000000000000;
    String.append(_:)(*(Swift::String *)&v13);
    swift_bridgeObjectRetain();
    v17._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._object = (void *)0x8000000260BFE870;
    v18._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v18);
    swift_bridgeObjectRetain();
    uint64_t v19 = String.init<A>(describing:)();
    goto LABEL_8;
  }
  if (!specialized static Array<A>.== infix(_:_:)(a2, a4))
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0xE000000000000000;
    _StringGuts.grow(_:)(79);
    v15._countAndFlagsBits = 0x4E49502F46414456;
    v15._object = (void *)0xEF74666977732E45;
    String.append(_:)(v15);
    uint64_t v13 = 0xD000000000000039;
    uint64_t v14 = " mismatched wraparound joint randomness seed:\nin state: (";
    goto LABEL_7;
  }
  if (*(void *)(a1 + 16) == *(void *)(v6 + 104))
  {
    *(void *)a6 = a1;
    *(_OWORD *)(a6 + 8) = 0u;
    *(_OWORD *)(a6 + 24) = 0u;
    *(_OWORD *)(a6 + 40) = 0u;
    *(unsigned char *)(a6 + 56) = 1;
    return swift_bridgeObjectRetain();
  }
  _StringGuts.grow(_:)(49);
  swift_bridgeObjectRelease();
  uint64_t v24 = 0xD000000000000033;
  uint64_t v25 = 0x8000000260BFE8D0;
  v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 0x203A746F670A2CLL;
  v23._object = (void *)0xE700000000000000;
  String.append(_:)(v23);
  uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
LABEL_8:
  String.append(_:)(*(Swift::String *)&v19);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
  swift_allocError();
  *(void *)uint64_t v21 = v24;
  *(void *)(v21 + 8) = v25;
  *(unsigned char *)(v21 + 16) = 1;
  return swift_willThrow();
}

size_t PINE<>.outputShare(from:)@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, size_t *a3@<X8>)
{
  return PINE<>.outputShare(from:)(a1, a2, a3);
}

{
  uint64_t v3;
  size_t result;

  int64_t result = specialized Array<A>.init<A>(from:)(a1, a2);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

{
  return PINE<>.outputShare(from:)(a1, a2, a3);
}

{
  uint64_t v3;
  size_t result;

  int64_t result = specialized Array<A>.init<A>(from:)(a1, a2);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

{
  return Prio3<>.outputShare(from:)(a1, a2, a3);
}

char *PINE<>.encodedAggregateShare(_:)()
{
  v0 = (char *)swift_bridgeObjectRetain();
  uint64_t v1 = specialized VDAFEncodable.encodedBytes.getter(v0);
  swift_bridgeObjectRelease();
  return v1;
}

size_t PINE<>.aggregateShare(from:)@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, size_t *a3@<X8>)
{
  return PINE<>.outputShare(from:)(a1, a2, a3);
}

{
  return PINE<>.outputShare(from:)(a1, a2, a3);
}

{
  return Prio3<>.outputShare(from:)(a1, a2, a3);
}

uint64_t PINE<>.unshard(_:numOfMeasurements:into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  memcpy(__dst, v3, sizeof(__dst));
  return specialized PINE.unshard<A, B>(_:numOfMeasurements:into:parameter:)(a1, a3);
}

{
  const void *v3;
  unsigned char __dst[328];

  memcpy(__dst, v3, sizeof(__dst));
  return specialized PINE.unshard<A, B>(_:numOfMeasurements:into:parameter:)(a1, a3);
}

uint64_t specialized Array<A>.init<A>(from:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t (*a10)(uint64_t), uint64_t a11)
{
  if (a8)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *uint64_t v20 = 0;
    v20[1] = 0;
    goto LABEL_10;
  }
  if ((a7 | a6) < 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v16 = a6 * a7;
  if ((unsigned __int128)(a6 * (__int128)a7) >> 64 != (a6 * a7) >> 63)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v12 = a4;
  uint64_t v13 = a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v16 == (a4 >> 1) - a3)
  {
    uint64_t v14 = a2;
    uint64_t v17 = a10;
    uint64_t v31 = a9;
    if ((a4 & 1) == 0)
    {
LABEL_7:
      specialized _copyCollectionToContiguousArray<A>(_:)(a1, v14, v13, v12);
LABEL_17:
      MEMORY[0x270FA5388](v18, v19);
      uint64_t v11 = v17(v31);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return v11;
    }
    uint64_t v30 = a10;
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    uint64_t v28 = swift_dynamicCastClass();
    if (!v28)
    {
      swift_unknownObjectRelease();
      uint64_t v28 = MEMORY[0x263F8EE78];
    }
    uint64_t v29 = *(void *)(v28 + 16);
    swift_release();
    if (v29 == v16)
    {
      uint64_t v18 = swift_dynamicCastClass();
      uint64_t v17 = a10;
      if (!v18)
      {
        swift_unknownObjectRelease();
        uint64_t v18 = MEMORY[0x263F8EE78];
      }
      goto LABEL_17;
    }
LABEL_21:
    swift_unknownObjectRelease();
    uint64_t v17 = v30;
    goto LABEL_7;
  }
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 2107936;
  v22._object = (void *)0xE300000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 0x203A746F67202CLL;
  v24._object = (void *)0xE700000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  uint64_t v11 = 0xD000000000000020;
  lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
  swift_allocError();
  *uint64_t v26 = 0xD000000000000020;
  v26[1] = a11;
LABEL_10:
  swift_willThrow();
  swift_unknownObjectRelease();
  return v11;
}

size_t specialized Array<A>.init<A>(from:parameter:)(size_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t (*a8)(uint64_t), uint64_t a9)
{
  if (a6)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *uint64_t v13 = 0;
    v13[1] = 0;
    goto LABEL_10;
  }
  if ((a5 | a4) < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v10 = a4 * a5;
    if ((unsigned __int128)(a4 * (__int128)a5) >> 64 == (a4 * a5) >> 63)
    {
      if (result)
      {
        if (v10 == a2 - result) {
          goto LABEL_12;
        }
      }
      else if (!v10)
      {
LABEL_12:
        size_t v21 = specialized _copyCollectionToContiguousArray<A>(_:)(result, a2);
        MEMORY[0x270FA5388](v21, v20);
        uint64_t v9 = a8(a7);
        swift_unknownObjectRelease();
        return v9;
      }
      _StringGuts.grow(_:)(36);
      swift_bridgeObjectRelease();
      v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v15._countAndFlagsBits = 2107936;
      v15._object = (void *)0xE300000000000000;
      String.append(_:)(v15);
      v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      v17._countAndFlagsBits = 0x203A746F67202CLL;
      v17._object = (void *)0xE700000000000000;
      String.append(_:)(v17);
      v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      uint64_t v9 = 0xD000000000000020;
      lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
      swift_allocError();
      *uint64_t v19 = 0xD000000000000020;
      v19[1] = a9;
LABEL_10:
      swift_willThrow();
      return v9;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Array<A>.init<A>(from:)(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v4 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }
  else if (v4 == 5 * (v4 / 5))
  {
    return specialized Array<A>.init<A>(from:parameter:)(result, a2, a3, a4, 1, v4 / 5, 5, 0, (uint64_t)partial apply for specialized closure #1 in Array<A>.init<A>(from:parameter:), (uint64_t (*)(uint64_t))_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF7Field40VsAE_pTg5, 0x8000000260BFF160);
  }
  else
  {
    _StringGuts.grow(_:)(69);
    v5._countAndFlagsBits = 0x69463C7961727241;
    v5._object = (void *)0xEE003E3034646C65;
    String.append(_:)(v5);
    v6._object = (void *)0x8000000260BFE950;
    v6._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v6);
    v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 0xD00000000000002ELL;
    v8._object = (void *)0x8000000260BFE970;
    String.append(_:)(v8);
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 41;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *(void *)uint64_t v11 = 0;
    *(void *)(v11 + 8) = 0xE000000000000000;
    *(unsigned char *)(v11 + 16) = 0;
    swift_willThrow();
    return swift_unknownObjectRelease();
  }
  return result;
}

{
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;

  int64_t v4 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }
  else if ((v4 & 3) != 0)
  {
    _StringGuts.grow(_:)(69);
    v5._countAndFlagsBits = 0x69463C7961727241;
    v5._object = (void *)0xEE003E3233646C65;
    String.append(_:)(v5);
    v6._object = (void *)0x8000000260BFE950;
    v6._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v6);
    v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 0xD00000000000002ELL;
    v8._object = (void *)0x8000000260BFE970;
    String.append(_:)(v8);
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 41;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *(void *)uint64_t v11 = 0;
    *(void *)(v11 + 8) = 0xE000000000000000;
    *(unsigned char *)(v11 + 16) = 0;
    swift_willThrow();
    return swift_unknownObjectRelease();
  }
  else
  {
    unint64_t v12 = v4 + 3;
    if (v4 >= 0) {
      unint64_t v12 = (a4 >> 1) - a3;
    }
    return specialized Array<A>.init<A>(from:parameter:)(result, a2, a3, a4, 1, v12 >> 2, 4, 0, (uint64_t)partial apply for specialized closure #1 in Array<A>.init<A>(from:parameter:), (uint64_t (*)(uint64_t))_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF7Field32VsAE_pTg5, 0x8000000260BFF060);
  }
  return result;
}

{
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;

  int64_t v4 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }
  else if ((v4 & 7) != 0)
  {
    _StringGuts.grow(_:)(69);
    v5._countAndFlagsBits = 0x69463C7961727241;
    v5._object = (void *)0xEE003E3436646C65;
    String.append(_:)(v5);
    v6._object = (void *)0x8000000260BFE950;
    v6._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v6);
    v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 0xD00000000000002ELL;
    v8._object = (void *)0x8000000260BFE970;
    String.append(_:)(v8);
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 41;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *(void *)uint64_t v11 = 0;
    *(void *)(v11 + 8) = 0xE000000000000000;
    *(unsigned char *)(v11 + 16) = 0;
    swift_willThrow();
    return swift_unknownObjectRelease();
  }
  else
  {
    unint64_t v12 = v4 + 7;
    if (v4 >= 0) {
      unint64_t v12 = (a4 >> 1) - a3;
    }
    return specialized Array<A>.init<A>(from:parameter:)(result, a2, a3, a4, 1, v12 >> 3, 8, 0, (uint64_t)partial apply for specialized closure #1 in Array<A>.init<A>(from:parameter:), (uint64_t (*)(uint64_t))_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF7Field64VsAE_pTg5, 0x8000000260BFE9A0);
  }
  return result;
}

size_t specialized Array<A>.init<A>(from:)(size_t a1, unint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = (uint64_t)(a2 - a1) / 5;
    if (a2 - a1 != 5 * v2)
    {
      _StringGuts.grow(_:)(69);
      v3._countAndFlagsBits = 0x69463C7961727241;
      v3._object = (void *)0xEE003E3034646C65;
      String.append(_:)(v3);
      v4._object = (void *)0x8000000260BFE950;
      v4._countAndFlagsBits = 0xD000000000000010;
      String.append(_:)(v4);
      v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      v6._countAndFlagsBits = 0xD00000000000002ELL;
      v6._object = (void *)0x8000000260BFE970;
      String.append(_:)(v6);
      v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
      v8._countAndFlagsBits = 41;
      v8._object = (void *)0xE100000000000000;
      String.append(_:)(v8);
      lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
      swift_allocError();
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0xE000000000000000;
      *(unsigned char *)(v9 + 16) = 0;
      return swift_willThrow();
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  return specialized Array<A>.init<A>(from:parameter:)(a1, a2, 1, v2, 5, 0, (uint64_t)partial apply for specialized closure #1 in Array<A>.init<A>(from:parameter:), (uint64_t (*)(uint64_t))_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF7Field40VsAE_pTg5, 0x8000000260BFF160);
}

{
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if (a1)
  {
    uint64_t v2 = a2 - a1;
    if (((a2 - a1) & 3) != 0)
    {
      _StringGuts.grow(_:)(69);
      v3._countAndFlagsBits = 0x69463C7961727241;
      v3._object = (void *)0xEE003E3233646C65;
      String.append(_:)(v3);
      v4._object = (void *)0x8000000260BFE950;
      v4._countAndFlagsBits = 0xD000000000000010;
      String.append(_:)(v4);
      v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      v6._countAndFlagsBits = 0xD00000000000002ELL;
      v6._object = (void *)0x8000000260BFE970;
      String.append(_:)(v6);
      v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
      v8._countAndFlagsBits = 41;
      v8._object = (void *)0xE100000000000000;
      String.append(_:)(v8);
      lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
      swift_allocError();
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0xE000000000000000;
      *(unsigned char *)(v9 + 16) = 0;
      return swift_willThrow();
    }
    unint64_t v12 = v2 + 3;
    if (v2 >= 0) {
      unint64_t v12 = a2 - a1;
    }
    uint64_t v11 = v12 >> 2;
  }
  else
  {
    uint64_t v11 = 0;
  }
  return specialized Array<A>.init<A>(from:parameter:)(a1, a2, 1, v11, 4, 0, (uint64_t)partial apply for specialized closure #1 in Array<A>.init<A>(from:parameter:), (uint64_t (*)(uint64_t))_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF7Field32VsAE_pTg5, 0x8000000260BFF060);
}

{
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if (a1)
  {
    uint64_t v2 = a2 - a1;
    if (((a2 - a1) & 7) != 0)
    {
      _StringGuts.grow(_:)(69);
      v3._countAndFlagsBits = 0x69463C7961727241;
      v3._object = (void *)0xEE003E3436646C65;
      String.append(_:)(v3);
      v4._object = (void *)0x8000000260BFE950;
      v4._countAndFlagsBits = 0xD000000000000010;
      String.append(_:)(v4);
      v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      v6._countAndFlagsBits = 0xD00000000000002ELL;
      v6._object = (void *)0x8000000260BFE970;
      String.append(_:)(v6);
      v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
      v8._countAndFlagsBits = 41;
      v8._object = (void *)0xE100000000000000;
      String.append(_:)(v8);
      lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
      swift_allocError();
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0xE000000000000000;
      *(unsigned char *)(v9 + 16) = 0;
      return swift_willThrow();
    }
    unint64_t v12 = v2 + 7;
    if (v2 >= 0) {
      unint64_t v12 = a2 - a1;
    }
    uint64_t v11 = v12 >> 3;
  }
  else
  {
    uint64_t v11 = 0;
  }
  return specialized Array<A>.init<A>(from:parameter:)(a1, a2, 1, v11, 8, 0, (uint64_t)partial apply for specialized closure #1 in Array<A>.init<A>(from:parameter:), (uint64_t (*)(uint64_t))_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF7Field64VsAE_pTg5, 0x8000000260BFE9A0);
}

uint64_t specialized Collection<>.encode<A>(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(a2 + 8 * v4++ + 32);
      if (__CFADD__(-v5, v5)) {
        unint64_t v6 = ((0xCFFE47FFFEAFFFFFLL * v5 * (unsigned __int128)0xFFFEB00001uLL) >> 64) + 1;
      }
      else {
        unint64_t v6 = (0xCFFE47FFFEAFFFFFLL * v5 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
      }
      if (v6 >= 0xFFFEB00001) {
        unint64_t v7 = 0;
      }
      else {
        unint64_t v7 = v6;
      }
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<UInt8>);
      uint64_t v12 = v8;
      uint64_t v9 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A](&lazy protocol witness table cache variable for type CollectionOfOne<UInt8> and conformance <A> CollectionOfOne<A>, &demangling cache variable for type metadata for CollectionOfOne<UInt8>);
      uint64_t v13 = v9;
      LOBYTE(v11[0]) = v7;
      __swift_project_boxed_opaque_existential_1(v11, v8);
      Data._Representation.replaceSubrange(_:with:count:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
      uint64_t v12 = v8;
      uint64_t v13 = v9;
      LOBYTE(v11[0]) = BYTE1(v7);
      __swift_project_boxed_opaque_existential_1(v11, v8);
      Data._Representation.replaceSubrange(_:with:count:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
      uint64_t v12 = v8;
      uint64_t v13 = v9;
      LOBYTE(v11[0]) = BYTE2(v7);
      __swift_project_boxed_opaque_existential_1(v11, v8);
      Data._Representation.replaceSubrange(_:with:count:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
      uint64_t v12 = v8;
      uint64_t v13 = v9;
      LOBYTE(v11[0]) = BYTE3(v7);
      __swift_project_boxed_opaque_existential_1(v11, v8);
      Data._Representation.replaceSubrange(_:with:count:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
      uint64_t v12 = v8;
      uint64_t v13 = v9;
      LOBYTE(v11[0]) = BYTE4(v7);
      __swift_project_boxed_opaque_existential_1(v11, v8);
      Data._Representation.replaceSubrange(_:with:count:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    }
    while (v2 != v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = a2 + 4 * v4++;
      unint64_t v6 = (*(unsigned int *)(v5 + 32) + 4293918721u * (unint64_t)(-1048577 * *(_DWORD *)(v5 + 32))) >> 32;
      if (v6 >= 0xFFF00001) {
        unint64_t v7 = 0;
      }
      else {
        unint64_t v7 = v6;
      }
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<UInt8>);
      uint64_t v12 = v8;
      uint64_t v9 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A](&lazy protocol witness table cache variable for type CollectionOfOne<UInt8> and conformance <A> CollectionOfOne<A>, &demangling cache variable for type metadata for CollectionOfOne<UInt8>);
      uint64_t v13 = v9;
      LOBYTE(v11[0]) = v7;
      __swift_project_boxed_opaque_existential_1(v11, v8);
      Data._Representation.replaceSubrange(_:with:count:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
      uint64_t v12 = v8;
      uint64_t v13 = v9;
      LOBYTE(v11[0]) = BYTE1(v7);
      __swift_project_boxed_opaque_existential_1(v11, v8);
      Data._Representation.replaceSubrange(_:with:count:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
      uint64_t v12 = v8;
      uint64_t v13 = v9;
      LOBYTE(v11[0]) = BYTE2(v7);
      __swift_project_boxed_opaque_existential_1(v11, v8);
      Data._Representation.replaceSubrange(_:with:count:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
      uint64_t v12 = v8;
      uint64_t v13 = v9;
      LOBYTE(v11[0]) = HIBYTE(v7);
      __swift_project_boxed_opaque_existential_1(v11, v8);
      Data._Representation.replaceSubrange(_:with:count:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    }
    while (v2 != v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  void v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(a2 + 8 * v4 + 32);
      unint64_t v6 = (0xFFFFFFFEFFFFFFFFLL * v5 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      if (__CFADD__(-v5, v5))
      {
        if (v6 > 0xFFFFFFFEFFFFFFFFLL) {
          unint64_t v6 = 0;
        }
        else {
          ++v6;
        }
      }
      ++v4;
      unint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<UInt8>);
      uint64_t v11 = v7;
      uint64_t v8 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A](&lazy protocol witness table cache variable for type CollectionOfOne<UInt8> and conformance <A> CollectionOfOne<A>, &demangling cache variable for type metadata for CollectionOfOne<UInt8>);
      uint64_t v12 = v8;
      LOBYTE(v10[0]) = v6;
      __swift_project_boxed_opaque_existential_1(v10, v7);
      Data._Representation.replaceSubrange(_:with:count:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      uint64_t v11 = v7;
      uint64_t v12 = v8;
      LOBYTE(v10[0]) = BYTE1(v6);
      __swift_project_boxed_opaque_existential_1(v10, v7);
      Data._Representation.replaceSubrange(_:with:count:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      uint64_t v11 = v7;
      uint64_t v12 = v8;
      LOBYTE(v10[0]) = BYTE2(v6);
      __swift_project_boxed_opaque_existential_1(v10, v7);
      Data._Representation.replaceSubrange(_:with:count:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      uint64_t v11 = v7;
      uint64_t v12 = v8;
      LOBYTE(v10[0]) = BYTE3(v6);
      __swift_project_boxed_opaque_existential_1(v10, v7);
      Data._Representation.replaceSubrange(_:with:count:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      uint64_t v11 = v7;
      uint64_t v12 = v8;
      LOBYTE(v10[0]) = BYTE4(v6);
      __swift_project_boxed_opaque_existential_1(v10, v7);
      Data._Representation.replaceSubrange(_:with:count:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      uint64_t v11 = v7;
      uint64_t v12 = v8;
      LOBYTE(v10[0]) = BYTE5(v6);
      __swift_project_boxed_opaque_existential_1(v10, v7);
      Data._Representation.replaceSubrange(_:with:count:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      uint64_t v11 = v7;
      uint64_t v12 = v8;
      LOBYTE(v10[0]) = BYTE6(v6);
      __swift_project_boxed_opaque_existential_1(v10, v7);
      Data._Representation.replaceSubrange(_:with:count:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      uint64_t v11 = v7;
      uint64_t v12 = v8;
      LOBYTE(v10[0]) = HIBYTE(v6);
      __swift_project_boxed_opaque_existential_1(v10, v7);
      Data._Representation.replaceSubrange(_:with:count:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    }
    while (v2 != v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized static VDAFProtocol.domainSeparationTag(usage:)(unsigned __int8 a1)
{
  v11[1] = *MEMORY[0x263EF8340];
  uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 8, 0, MEMORY[0x263F8EE78]);
  unint64_t v4 = *((void *)v2 + 2);
  unint64_t v3 = *((void *)v2 + 3);
  int64_t v5 = v3 >> 1;
  unint64_t v6 = v4 + 1;
  if (v3 >> 1 <= v4)
  {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
    unint64_t v3 = *((void *)v2 + 3);
    int64_t v5 = v3 >> 1;
  }
  *((void *)v2 + 2) = v6;
  v2[v4 + 32] = 8;
  if (v5 < (uint64_t)(v4 + 2)) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 2, 1, v2);
  }
  *((void *)v2 + 2) = v4 + 2;
  v2[v6 + 32] = 0;
  v11[0] = v2;
  int v10 = 51445759;
  size_t v7 = specialized _copyCollectionToContiguousArray<A>(_:)((size_t)&v10, (unint64_t)v11);
  specialized Array.append<A>(contentsOf:)(v7);
  LOWORD(v10) = __rev16(a1 + 1);
  size_t v8 = specialized _copyCollectionToContiguousArray<A>(_:)((size_t)&v10, (unint64_t)&v10 + 2);
  specialized Array.append<A>(contentsOf:)(v8);
  return v11[0];
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result)
{
  int64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v11 = v4 + v2;
  }
  else {
    int64_t v11 = v4;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v11, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  uint64_t v7 = *(void *)(v3 + 16);
  if ((*(void *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = (uint64_t)memcpy((void *)(v3 + v7 + 32), (const void *)(v6 + 32), v2);
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v8 = *(void *)(v3 + 16);
  BOOL v9 = __OFADD__(v8, v2);
  uint64_t v10 = v8 + v2;
  if (!v9)
  {
    *(void *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  int64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v11 = v4 + v2;
  }
  else {
    int64_t v11 = v4;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v11, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  uint64_t v7 = *(void *)(v3 + 16);
  if ((*(void *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = (uint64_t)memcpy((void *)(v3 + 4 * v7 + 32), (const void *)(v6 + 32), 4 * v2);
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v8 = *(void *)(v3 + 16);
  BOOL v9 = __OFADD__(v8, v2);
  uint64_t v10 = v8 + v2;
  if (!v9)
  {
    *(void *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

void specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v7 = *v4;
  int64_t v8 = *(void *)(*v4 + 16);
  int64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native) {
    goto LABEL_8;
  }
  int64_t v13 = *(void *)(v7 + 24) >> 1;
  if (v13 < v9) {
    goto LABEL_8;
  }
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9) {
        int64_t v14 = v8 + v6;
      }
      else {
        int64_t v14 = v8;
      }
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)isUniquelyReferenced_nonNull_native, v14, 1, (char *)v7);
      uint64_t v7 = isUniquelyReferenced_nonNull_native;
      int64_t v13 = *(void *)(isUniquelyReferenced_nonNull_native + 24) >> 1;
      if (v5 != a3) {
        goto LABEL_12;
      }
    }
    goto LABEL_16;
  }
LABEL_12:
  uint64_t v15 = *(void *)(v7 + 16);
  if (v13 - v15 < v6) {
    goto LABEL_19;
  }
  memcpy((void *)(v7 + 4 * v15 + 32), (const void *)(a2 + 4 * a3), 4 * v6);
  if (v6 <= 0)
  {
LABEL_16:
    swift_unknownObjectRelease();
    *int64_t v4 = v7;
    return;
  }
  uint64_t v16 = *(void *)(v7 + 16);
  BOOL v17 = __OFADD__(v16, v6);
  uint64_t v18 = v16 + v6;
  if (!v17)
  {
    *(void *)(v7 + 16) = v18;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  return specialized Array.append<A>(contentsOf:)(a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = *(void *)(result + 16);
  uint64_t v4 = *v2;
  int64_t v5 = *(void *)(*v2 + 16);
  int64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v8 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v6 <= *(void *)(v4 + 24) >> 1)
  {
    if (*(void *)(v8 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v5 <= v6) {
    int64_t v13 = v5 + v3;
  }
  else {
    int64_t v13 = v5;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v13, 1, (char *)v4, a2);
  uint64_t v4 = result;
  if (!*(void *)(v8 + 16))
  {
LABEL_13:
    if (!v3) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  uint64_t v9 = *(void *)(v4 + 16);
  if ((*(void *)(v4 + 24) >> 1) - v9 < v3)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = (uint64_t)memcpy((void *)(v4 + 8 * v9 + 32), (const void *)(v8 + 32), 8 * v3);
  if (!v3)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t *v2 = v4;
    return result;
  }
  uint64_t v10 = *(void *)(v4 + 16);
  BOOL v11 = __OFADD__(v10, v3);
  uint64_t v12 = v10 + v3;
  if (!v11)
  {
    *(void *)(v4 + 16) = v12;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

void specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  unint64_t v6 = a4 >> 1;
  uint64_t v7 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v8 = *v5;
  int64_t v9 = *(void *)(*v5 + 16);
  int64_t v10 = v9 + v7;
  if (__OFADD__(v9, v7))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native) {
    goto LABEL_8;
  }
  int64_t v15 = *(void *)(v8 + 24) >> 1;
  if (v15 < v10) {
    goto LABEL_8;
  }
  if (v6 == a3)
  {
    while (v7 > 0)
    {
      __break(1u);
LABEL_8:
      if (v9 <= v10) {
        int64_t v16 = v9 + v7;
      }
      else {
        int64_t v16 = v9;
      }
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)isUniquelyReferenced_nonNull_native, v16, 1, (char *)v8, a5);
      uint64_t v8 = isUniquelyReferenced_nonNull_native;
      int64_t v15 = *(void *)(isUniquelyReferenced_nonNull_native + 24) >> 1;
      if (v6 != a3) {
        goto LABEL_12;
      }
    }
    goto LABEL_16;
  }
LABEL_12:
  uint64_t v17 = *(void *)(v8 + 16);
  if (v15 - v17 < v7) {
    goto LABEL_19;
  }
  memcpy((void *)(v8 + 8 * v17 + 32), (const void *)(a2 + 8 * a3), 8 * v7);
  if (v7 <= 0)
  {
LABEL_16:
    swift_unknownObjectRelease();
    *int64_t v5 = v8;
    return;
  }
  uint64_t v18 = *(void *)(v8 + 16);
  BOOL v19 = __OFADD__(v18, v7);
  uint64_t v20 = v18 + v7;
  if (!v19)
  {
    *(void *)(v8 + 16) = v20;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
}

uint64_t specialized VerificationJointRandomness.seed.getter(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  if (v2[3])
  {
    uint64_t v4 = v2[3];
  }
  else
  {
    uint64_t v5 = *v2;
    uint64_t v6 = v3[2];
    uint64_t v7 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A](a1, a2);
    uint64_t v4 = static JointRandomness.jointRandSeed(parts:)(v6, v5, v7);
    v3[3] = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v4;
}

uint64_t specialized VerificationJointRandomness.seed.getter()
{
  return specialized VerificationJointRandomness.seed.getter(&lazy protocol witness table cache variable for type VerificationJointRandomness<Prio3<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>, Field64> and conformance VerificationJointRandomness<A, B>, &demangling cache variable for type metadata for VerificationJointRandomness<Prio3<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>, Field64>);
}

uint64_t specialized VerificationJointRandomness.xof.getter()
{
  if (*(void *)(v0 + 32))
  {
    uint64_t v1 = *(void *)(v0 + 32);
  }
  else
  {
    uint64_t v1 = specialized closure #1 in VerificationJointRandomness.xof.getter(v0);
    *(void *)(v0 + 32) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

{
  return specialized VerificationJointRandomness.xof.getter(&lazy protocol witness table cache variable for type VerificationJointRandomness<Prio3<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>, Field64> and conformance VerificationJointRandomness<A, B>, &demangling cache variable for type metadata for VerificationJointRandomness<Prio3<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>, Field64>, (uint64_t (*)(uint64_t))specialized static VDAFProtocol.domainSeparationTag(usage:));
}

uint64_t specialized VerificationJointRandomness.xof.getter(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(uint64_t))
{
  if (*(void *)(v3 + 32))
  {
    uint64_t v4 = *(void *)(v3 + 32);
LABEL_6:
    swift_retain();
    return v4;
  }
  uint64_t v6 = specialized VerificationJointRandomness.seed.getter(a1, a2);
  uint64_t v7 = a3(2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t result = swift_initStackObject();
  *(_OWORD *)(result + 16) = xmmword_260BF9FF0;
  unint64_t v9 = *(void *)(v3 + 48);
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v9 <= 0xFF)
  {
    *(unsigned char *)(result + 32) = v9;
    uint64_t v4 = specialized static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(v6, v7, result);
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v3 + 32) = v4;
    swift_retain();
    swift_release();
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t specialized static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HMAC<SHA256>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6, v8);
  int64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA256>);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t result = MEMORY[0x270FA5388](v11, v13);
  int64_t v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a1 + 16) == 32)
  {
    type metadata accessor for XofHmacSha256Aes128(0);
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = XofHmacSha256Aes128.init(seedBytes:domainSeparationTag:binder:)(a1, a2, a3);
    if (!*(void *)(result + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream))
    {
      uint64_t v17 = result;
      uint64_t v18 = result + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_hmac;
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v18, v6);
      HMAC.finalize()();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      HashedAuthenticationCode.withUnsafeBytes<A>(_:)();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
      return v17;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

int64_t specialized static FieldElement.randomVector<A>(count:using:)(int64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    int64_t v2 = result;
    uint64_t v3 = MEMORY[0x263F8EE78];
    if (result)
    {
      uint64_t v9 = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, result, 0);
      uint64_t v3 = v9;
      do
      {
        specialized static FieldElement.randomElement<A>(using:)(a2, &v8);
        int v5 = v8;
        uint64_t v9 = v3;
        unint64_t v7 = *(void *)(v3 + 16);
        unint64_t v6 = *(void *)(v3 + 24);
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1);
          uint64_t v3 = v9;
        }
        *(void *)(v3 + 16) = v7 + 1;
        *(_DWORD *)(v3 + 4 * v7 + 32) = v5;
        --v2;
      }
      while (v2);
    }
    return v3;
  }
  return result;
}

unint64_t specialized static FieldElement.randomVector<A>(count:using:)(unint64_t a1, uint64_t a2)
{
  return specialized static FieldElement.randomVector<A>(count:using:)(a1, a2, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t))specialized static FieldElement.randomElement<A>(using:));
}

unint64_t specialized static FieldElement.randomVector<A>(count:using:)(unint64_t result, uint64_t a2, void (*a3)(BOOL, unint64_t, uint64_t), void (*a4)(uint64_t *__return_ptr, uint64_t))
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v4 = result;
    uint64_t v5 = MEMORY[0x263F8EE78];
    if (result)
    {
      uint64_t v13 = MEMORY[0x263F8EE78];
      a3(0, result, 0);
      uint64_t v5 = v13;
      do
      {
        a4(&v12, a2);
        uint64_t v9 = v12;
        uint64_t v13 = v5;
        unint64_t v11 = *(void *)(v5 + 16);
        unint64_t v10 = *(void *)(v5 + 24);
        if (v11 >= v10 >> 1)
        {
          a3(v10 > 1, v11 + 1, 1);
          uint64_t v5 = v13;
        }
        *(void *)(v5 + 16) = v11 + 1;
        *(void *)(v5 + 8 * v11 + 32) = v9;
        --v4;
      }
      while (v4);
    }
    return v5;
  }
  return result;
}

uint64_t specialized PINEPrepareState.init<A>(from:parameter:)@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  if (a6)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *uint64_t v26 = 0;
    v26[1] = 0;
    return swift_willThrow();
  }
  if (a1) {
    int64_t v12 = a2 - a1;
  }
  else {
    int64_t v12 = 0;
  }
  uint64_t v13 = 5 * a5;
  if ((unsigned __int128)(a5 * (__int128)5) >> 64 != (5 * a5) >> 63)
  {
    __break(1u);
    goto LABEL_56;
  }
  uint64_t v7 = v13 + a4;
  if (__OFADD__(v13, a4))
  {
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if (v12 != v7)
  {
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._countAndFlagsBits = 0x203A746F67202CLL;
    v28._object = (void *)0xE700000000000000;
    String.append(_:)(v28);
    v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *uint64_t v30 = 0xD000000000000039;
    v30[1] = 0x8000000260BFF1F0;
    return swift_willThrow();
  }
  uint64_t v42 = a7;
  unint64_t v43 = a3;
  int64_t v12 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  uint64_t v14 = (2 * *(void *)(v12 + 16)) | 1;
  uint64_t v15 = specialized Collection.prefix(_:)(v13, v12, v12 + 32, 0, v14);
  uint64_t v8 = v16;
  uint64_t v18 = v17;
  int64_t v11 = v19;
  uint64_t v20 = specialized Collection.dropFirst(_:)(v13, v12, v12 + 32, 0, v14);
  uint64_t v44 = v21;
  uint64_t v13 = v22;
  unint64_t v10 = v23;
  swift_retain();
  uint64_t v24 = specialized Array<A>.init<A>(from:)(v15, v8, v18, v11);
  if (v9) {
    return swift_unknownObjectRelease();
  }
  uint64_t v7 = v10 >> 1;
  unint64_t v31 = (v10 >> 1) - v13;
  if (__OFSUB__(v10 >> 1, v13)) {
    goto LABEL_57;
  }
  uint64_t v32 = v13;
  int64_t v11 = v10 >> 1;
  uint64_t v13 = v20;
  if (v31 >= 0x20)
  {
    int64_t v11 = v32 + 32;
    if (__OFADD__(v32, 32)) {
      goto LABEL_72;
    }
  }
  if (v11 < v32) {
    goto LABEL_58;
  }
  if (v7 < v32)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  if (v7 < v11)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  if (v11 < 0)
  {
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  int64_t v12 = v10 >> 1;
  if (v31 >= 0x20)
  {
    int64_t v12 = v32 + 32;
    if (__OFADD__(v32, 32)) {
      goto LABEL_73;
    }
    if (v7 < v12) {
      goto LABEL_70;
    }
  }
  if (v12 < v32) {
    goto LABEL_62;
  }
  uint64_t v41 = v24;
  uint64_t v8 = v10 & 1;
  if (v10)
  {
    unint64_t v10 = v32;
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    uint64_t v34 = swift_dynamicCastClass();
    if (!v34)
    {
      swift_unknownObjectRelease();
      uint64_t v34 = MEMORY[0x263F8EE78];
    }
    uint64_t v35 = *(void *)(v34 + 16);
    swift_release();
    if (__OFSUB__(v11, v32)) {
      goto LABEL_74;
    }
    if (v35 != v11 - v32) {
      goto LABEL_75;
    }
    int64_t v11 = swift_dynamicCastClass();
    if (!v11)
    {
      swift_unknownObjectRelease();
      int64_t v11 = MEMORY[0x263F8EE78];
    }
    goto LABEL_33;
  }
  swift_unknownObjectRetain();
  while (1)
  {
    specialized _copyCollectionToContiguousArray<A>(_:)(v13, v44, v32, v8 | (2 * v11));
    int64_t v11 = v33;
LABEL_33:
    swift_unknownObjectRelease();
    unint64_t v36 = v7 - v12;
    if (__OFSUB__(v7, v12))
    {
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    int64_t v37 = v7;
    unint64_t v10 = v44;
    if (v36 >= 0x20)
    {
      int64_t v37 = v12 + 32;
      if (__OFADD__(v12, 32))
      {
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        swift_unknownObjectRelease();
LABEL_45:
        specialized _copyCollectionToContiguousArray<A>(_:)(v13, v44, v12, v8 | (2 * v37));
        uint64_t v39 = v38;
        goto LABEL_52;
      }
    }
    if (v37 < v12) {
      goto LABEL_64;
    }
    if (v7 < v37) {
      goto LABEL_65;
    }
    if (v37 < 0) {
      goto LABEL_66;
    }
    if (v36 >= 0x20)
    {
      if (__OFADD__(v12, 32)) {
        goto LABEL_77;
      }
      if (v7 < v12 + 32) {
        goto LABEL_67;
      }
      uint64_t v7 = v12 + 32;
    }
    if (v7 >= v12) {
      break;
    }
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    swift_unknownObjectRelease();
    uint64_t v32 = v10;
  }
  if (!v8) {
    goto LABEL_45;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v40 = swift_dynamicCastClass();
  if (!v40)
  {
    swift_unknownObjectRelease();
    uint64_t v40 = MEMORY[0x263F8EE78];
  }
  uint64_t v7 = *(void *)(v40 + 16);
  swift_release();
  if (__OFSUB__(v37, v12)) {
    goto LABEL_78;
  }
  if (v7 != v37 - v12) {
    goto LABEL_79;
  }
  uint64_t v39 = swift_dynamicCastClass();
  if (!v39)
  {
    swift_unknownObjectRelease();
    uint64_t v39 = MEMORY[0x263F8EE78];
  }
LABEL_52:
  uint64_t result = swift_unknownObjectRelease();
  if ((v43 & 0x8000000000000000) != 0) {
    goto LABEL_69;
  }
  if (v43 > 0xFF) {
    goto LABEL_71;
  }
  *(void *)uint64_t v42 = v41;
  *(void *)(v42 + 8) = v11;
  *(void *)(v42 + 16) = v39;
  *(unsigned char *)(v42 + 24) = v43;
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t result;
  void *v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  void *v30;
  unint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;

  if (a6)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *uint64_t v26 = 0;
    v26[1] = 0;
    return swift_willThrow();
  }
  if (a1) {
    uint64_t v13 = a2 - a1;
  }
  else {
    uint64_t v13 = 0;
  }
  if ((unint64_t)(a5 - 0x2000000000000000) >> 62 != 3)
  {
    __break(1u);
    goto LABEL_56;
  }
  unint64_t v10 = 4 * a5;
  uint64_t v7 = 4 * a5 + a4;
  if (__OFADD__(4 * a5, a4))
  {
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if (v13 != v7)
  {
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._countAndFlagsBits = 0x203A746F67202CLL;
    v28._object = (void *)0xE700000000000000;
    String.append(_:)(v28);
    v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *uint64_t v30 = 0xD000000000000039;
    v30[1] = 0x8000000260BFF0B0;
    return swift_willThrow();
  }
  uint64_t v42 = a7;
  unint64_t v43 = a3;
  uint64_t v13 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  uint64_t v14 = (2 * *(void *)(v13 + 16)) | 1;
  uint64_t v15 = specialized Collection.prefix(_:)(v10, v13, v13 + 32, 0, v14);
  uint64_t v8 = v16;
  uint64_t v18 = v17;
  int64_t v12 = v19;
  uint64_t v20 = specialized Collection.dropFirst(_:)(v10, v13, v13 + 32, 0, v14);
  uint64_t v44 = v21;
  unint64_t v10 = v22;
  int64_t v11 = v23;
  swift_retain();
  uint64_t v24 = specialized Array<A>.init<A>(from:)(v15, v8, v18, v12);
  if (v9) {
    return swift_unknownObjectRelease();
  }
  uint64_t v7 = v11 >> 1;
  unint64_t v31 = (v11 >> 1) - v10;
  if (__OFSUB__(v11 >> 1, v10)) {
    goto LABEL_57;
  }
  uint64_t v32 = v10;
  int64_t v12 = v11 >> 1;
  unint64_t v10 = v20;
  if (v31 >= 0x20)
  {
    int64_t v12 = v32 + 32;
    if (__OFADD__(v32, 32)) {
      goto LABEL_72;
    }
  }
  if (v12 < v32) {
    goto LABEL_58;
  }
  if (v7 < v32)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  if (v7 < v12)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  if (v12 < 0)
  {
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  uint64_t v13 = v11 >> 1;
  if (v31 >= 0x20)
  {
    uint64_t v13 = v32 + 32;
    if (__OFADD__(v32, 32)) {
      goto LABEL_73;
    }
    if (v7 < v13) {
      goto LABEL_70;
    }
  }
  if (v13 < v32) {
    goto LABEL_62;
  }
  uint64_t v41 = v24;
  uint64_t v8 = v11 & 1;
  if (v11)
  {
    int64_t v11 = v32;
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    uint64_t v34 = swift_dynamicCastClass();
    if (!v34)
    {
      swift_unknownObjectRelease();
      uint64_t v34 = MEMORY[0x263F8EE78];
    }
    uint64_t v35 = *(void *)(v34 + 16);
    swift_release();
    if (__OFSUB__(v12, v32)) {
      goto LABEL_74;
    }
    if (v35 != v12 - v32) {
      goto LABEL_75;
    }
    int64_t v12 = swift_dynamicCastClass();
    if (!v12)
    {
      swift_unknownObjectRelease();
      int64_t v12 = MEMORY[0x263F8EE78];
    }
    goto LABEL_33;
  }
  swift_unknownObjectRetain();
  while (1)
  {
    specialized _copyCollectionToContiguousArray<A>(_:)(v10, v44, v32, v8 | (2 * v12));
    int64_t v12 = v33;
LABEL_33:
    swift_unknownObjectRelease();
    unint64_t v36 = v7 - v13;
    if (__OFSUB__(v7, v13))
    {
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    int64_t v37 = v7;
    int64_t v11 = v44;
    if (v36 >= 0x20)
    {
      int64_t v37 = v13 + 32;
      if (__OFADD__(v13, 32))
      {
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        swift_unknownObjectRelease();
LABEL_45:
        specialized _copyCollectionToContiguousArray<A>(_:)(v10, v44, v13, v8 | (2 * v37));
        uint64_t v39 = v38;
        goto LABEL_52;
      }
    }
    if (v37 < v13) {
      goto LABEL_64;
    }
    if (v7 < v37) {
      goto LABEL_65;
    }
    if (v37 < 0) {
      goto LABEL_66;
    }
    if (v36 >= 0x20)
    {
      if (__OFADD__(v13, 32)) {
        goto LABEL_77;
      }
      if (v7 < v13 + 32) {
        goto LABEL_67;
      }
      uint64_t v7 = v13 + 32;
    }
    if (v7 >= v13) {
      break;
    }
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    swift_unknownObjectRelease();
    uint64_t v32 = v11;
  }
  if (!v8) {
    goto LABEL_45;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v40 = swift_dynamicCastClass();
  if (!v40)
  {
    swift_unknownObjectRelease();
    uint64_t v40 = MEMORY[0x263F8EE78];
  }
  uint64_t v7 = *(void *)(v40 + 16);
  swift_release();
  if (__OFSUB__(v37, v13)) {
    goto LABEL_78;
  }
  if (v7 != v37 - v13) {
    goto LABEL_79;
  }
  uint64_t v39 = swift_dynamicCastClass();
  if (!v39)
  {
    swift_unknownObjectRelease();
    uint64_t v39 = MEMORY[0x263F8EE78];
  }
LABEL_52:
  uint64_t result = swift_unknownObjectRelease();
  if ((v43 & 0x8000000000000000) != 0) {
    goto LABEL_69;
  }
  if (v43 > 0xFF) {
    goto LABEL_71;
  }
  *(void *)uint64_t v42 = v41;
  *(void *)(v42 + 8) = v12;
  *(void *)(v42 + 16) = v39;
  *(unsigned char *)(v42 + 24) = v43;
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t result;
  void *v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  void *v30;
  unint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;

  if (a6)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *uint64_t v26 = 0;
    v26[1] = 0;
    return swift_willThrow();
  }
  if (a1) {
    uint64_t v13 = a2 - a1;
  }
  else {
    uint64_t v13 = 0;
  }
  if ((unint64_t)(a5 - 0x1000000000000000) >> 61 != 7)
  {
    __break(1u);
    goto LABEL_56;
  }
  unint64_t v10 = 8 * a5;
  uint64_t v7 = 8 * a5 + a4;
  if (__OFADD__(8 * a5, a4))
  {
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if (v13 != v7)
  {
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._countAndFlagsBits = 0x203A746F67202CLL;
    v28._object = (void *)0xE700000000000000;
    String.append(_:)(v28);
    v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *uint64_t v30 = 0xD000000000000039;
    v30[1] = 0x8000000260BFE910;
    return swift_willThrow();
  }
  uint64_t v42 = a7;
  unint64_t v43 = a3;
  uint64_t v13 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  uint64_t v14 = (2 * *(void *)(v13 + 16)) | 1;
  uint64_t v15 = specialized Collection.prefix(_:)(v10, v13, v13 + 32, 0, v14);
  uint64_t v8 = v16;
  uint64_t v18 = v17;
  int64_t v12 = v19;
  uint64_t v20 = specialized Collection.dropFirst(_:)(v10, v13, v13 + 32, 0, v14);
  uint64_t v44 = v21;
  unint64_t v10 = v22;
  int64_t v11 = v23;
  swift_retain();
  uint64_t v24 = specialized Array<A>.init<A>(from:)(v15, v8, v18, v12);
  if (v9) {
    return swift_unknownObjectRelease();
  }
  uint64_t v7 = v11 >> 1;
  unint64_t v31 = (v11 >> 1) - v10;
  if (__OFSUB__(v11 >> 1, v10)) {
    goto LABEL_57;
  }
  uint64_t v32 = v10;
  int64_t v12 = v11 >> 1;
  unint64_t v10 = v20;
  if (v31 >= 0x20)
  {
    int64_t v12 = v32 + 32;
    if (__OFADD__(v32, 32)) {
      goto LABEL_72;
    }
  }
  if (v12 < v32) {
    goto LABEL_58;
  }
  if (v7 < v32)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  if (v7 < v12)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  if (v12 < 0)
  {
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  uint64_t v13 = v11 >> 1;
  if (v31 >= 0x20)
  {
    uint64_t v13 = v32 + 32;
    if (__OFADD__(v32, 32)) {
      goto LABEL_73;
    }
    if (v7 < v13) {
      goto LABEL_70;
    }
  }
  if (v13 < v32) {
    goto LABEL_62;
  }
  uint64_t v41 = v24;
  uint64_t v8 = v11 & 1;
  if (v11)
  {
    int64_t v11 = v32;
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    uint64_t v34 = swift_dynamicCastClass();
    if (!v34)
    {
      swift_unknownObjectRelease();
      uint64_t v34 = MEMORY[0x263F8EE78];
    }
    uint64_t v35 = *(void *)(v34 + 16);
    swift_release();
    if (__OFSUB__(v12, v32)) {
      goto LABEL_74;
    }
    if (v35 != v12 - v32) {
      goto LABEL_75;
    }
    int64_t v12 = swift_dynamicCastClass();
    if (!v12)
    {
      swift_unknownObjectRelease();
      int64_t v12 = MEMORY[0x263F8EE78];
    }
    goto LABEL_33;
  }
  swift_unknownObjectRetain();
  while (1)
  {
    specialized _copyCollectionToContiguousArray<A>(_:)(v10, v44, v32, v8 | (2 * v12));
    int64_t v12 = v33;
LABEL_33:
    swift_unknownObjectRelease();
    unint64_t v36 = v7 - v13;
    if (__OFSUB__(v7, v13))
    {
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    int64_t v37 = v7;
    int64_t v11 = v44;
    if (v36 >= 0x20)
    {
      int64_t v37 = v13 + 32;
      if (__OFADD__(v13, 32))
      {
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        swift_unknownObjectRelease();
LABEL_45:
        specialized _copyCollectionToContiguousArray<A>(_:)(v10, v44, v13, v8 | (2 * v37));
        uint64_t v39 = v38;
        goto LABEL_52;
      }
    }
    if (v37 < v13) {
      goto LABEL_64;
    }
    if (v7 < v37) {
      goto LABEL_65;
    }
    if (v37 < 0) {
      goto LABEL_66;
    }
    if (v36 >= 0x20)
    {
      if (__OFADD__(v13, 32)) {
        goto LABEL_77;
      }
      if (v7 < v13 + 32) {
        goto LABEL_67;
      }
      uint64_t v7 = v13 + 32;
    }
    if (v7 >= v13) {
      break;
    }
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    swift_unknownObjectRelease();
    uint64_t v32 = v11;
  }
  if (!v8) {
    goto LABEL_45;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v40 = swift_dynamicCastClass();
  if (!v40)
  {
    swift_unknownObjectRelease();
    uint64_t v40 = MEMORY[0x263F8EE78];
  }
  uint64_t v7 = *(void *)(v40 + 16);
  swift_release();
  if (__OFSUB__(v37, v13)) {
    goto LABEL_78;
  }
  if (v7 != v37 - v13) {
    goto LABEL_79;
  }
  uint64_t v39 = swift_dynamicCastClass();
  if (!v39)
  {
    swift_unknownObjectRelease();
    uint64_t v39 = MEMORY[0x263F8EE78];
  }
LABEL_52:
  uint64_t result = swift_unknownObjectRelease();
  if ((v43 & 0x8000000000000000) != 0) {
    goto LABEL_69;
  }
  if (v43 > 0xFF) {
    goto LABEL_71;
  }
  *(void *)uint64_t v42 = v41;
  *(void *)(v42 + 8) = v12;
  *(void *)(v42 + 16) = v39;
  *(unsigned char *)(v42 + 24) = v43;
  return result;
}

uint64_t specialized PINEPrepareState.encode<A>(into:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v3; ++i)
    {
      unsigned int v6 = *(_DWORD *)(a2 + 4 * i + 32);
      specialized FieldElement.encode<A>(into:)(a1, v6);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v7 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v7);
  uint64_t v8 = swift_bridgeObjectRetain();
  return specialized Array.append<A>(contentsOf:)(v8);
}

uint64_t specialized PINEPrepareState.encode<A>(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return specialized PINEPrepareState.encode<A>(into:)(a1, a2, a3, a4, a5, (void (*)(uint64_t, uint64_t))specialized FieldElement.encode<A>(into:));
}

uint64_t specialized PINEPrepareState.encode<A>(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  uint64_t v7 = *(void *)(a2 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v7; ++i)
    {
      uint64_t v11 = *(void *)(a2 + 8 * i + 32);
      a6(a1, v11);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v12 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v12);
  uint64_t v13 = swift_bridgeObjectRetain();
  return specialized Array.append<A>(contentsOf:)(v13);
}

uint64_t specialized WraparoundJointRandomness.init(parts:)(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6 = v4;
  uint64_t v7 = *(void *)v4;
  *(void *)(v4 + 40) = 0;
  *(unsigned char *)(v4 + 48) = 0;
  *(void *)(v4 + 16) = a1;
  uint64_t v8 = v7;
  uint64_t v9 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A](a2, a3);
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = static JointRandomness.jointRandSeed(parts:)(v10, v8, v9);
  swift_bridgeObjectRelease();
  *(void *)(v6 + 24) = v11;
  swift_bridgeObjectRetain();
  uint64_t v12 = a4(7);
  uint64_t v13 = specialized static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(v11, v12, MEMORY[0x263F8EE78]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v6 + 32) = v13;
  return v6;
}

void *specialized Array.init(repeating:count:)(void *result, uint64_t a2, uint64_t *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = result;
    if (a2)
    {
      __swift_instantiateConcreteTypeFromMangledName(a3);
      uint64_t v5 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      uint64_t v6 = v5;
      v5[2] = a2;
      v5[4] = v4;
      if (a2 != 1)
      {
        v5[5] = v4;
        uint64_t v7 = a2 - 2;
        if (v7)
        {
          uint64_t v8 = v5 + 6;
          do
          {
            *v8++ = v4;
            swift_bridgeObjectRetain();
            --v7;
          }
          while (v7);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return (void *)MEMORY[0x263F8EE78];
    }
    return v6;
  }
  return result;
}

uint64_t specialized Share.init<A>(from:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, char a6)
{
  if (a6 == -1)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    void *v15 = 0;
    v15[1] = 0;
LABEL_19:
    swift_willThrow();
    swift_unknownObjectRelease();
    return v7;
  }
  uint64_t v7 = a5;
  unint64_t v12 = (a4 >> 1) - a3;
  BOOL v13 = __OFSUB__(a4 >> 1, a3);
  if (a6)
  {
    if (!v13)
    {
      if (v12 != a5)
      {
        _StringGuts.grow(_:)(51);
        v17._object = (void *)0x8000000260BFED60;
        v17._countAndFlagsBits = 0xD000000000000022;
        String.append(_:)(v17);
LABEL_18:
        v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v21);
        swift_bridgeObjectRelease();
        v22._countAndFlagsBits = 0x65707865203D2120;
        v22._object = (void *)0xED00003D64657463;
        String.append(_:)(v22);
        v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v23);
        swift_bridgeObjectRelease();
        uint64_t v7 = 0;
        lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
        swift_allocError();
        void *v24 = 0;
        v24[1] = 0xE000000000000000;
        goto LABEL_19;
      }
      if ((a4 & 1) == 0) {
        goto LABEL_15;
      }
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain_n();
      uint64_t v25 = swift_dynamicCastClass();
      if (!v25)
      {
        swift_unknownObjectRelease();
        uint64_t v25 = MEMORY[0x263F8EE78];
      }
      uint64_t v26 = *(void *)(v25 + 16);
      swift_release();
      if (v26 == v7)
      {
        uint64_t v7 = swift_dynamicCastClass();
        if (!v7)
        {
          swift_unknownObjectRelease();
          uint64_t v7 = MEMORY[0x263F8EE78];
        }
        goto LABEL_26;
      }
LABEL_31:
      swift_unknownObjectRelease();
LABEL_15:
      specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4);
      uint64_t v7 = v16;
LABEL_26:
      swift_unknownObjectRelease();
      return v7;
    }
    goto LABEL_29;
  }
  if (v13)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if ((unsigned __int128)(a5 * (__int128)5) >> 64 != (5 * a5) >> 63)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v12 != 5 * a5)
  {
    _StringGuts.grow(_:)(56);
    v18._object = (void *)0x8000000260BFED90;
    v18._countAndFlagsBits = 0xD000000000000022;
    String.append(_:)(v18);
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 2107936;
    v20._object = (void *)0xE300000000000000;
    String.append(_:)(v20);
    goto LABEL_18;
  }
  uint64_t v14 = specialized Array<A>.init<A>(from:)(a1, a2, a3, a4);
  if (!v6) {
    return v14;
  }
  return v7;
}

{
  uint64_t v6;
  uint64_t v7;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;

  if (a6 == -1)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    void *v15 = 0;
    v15[1] = 0;
LABEL_19:
    swift_willThrow();
    swift_unknownObjectRelease();
    return v7;
  }
  uint64_t v7 = a5;
  unint64_t v12 = (a4 >> 1) - a3;
  BOOL v13 = __OFSUB__(a4 >> 1, a3);
  if (a6)
  {
    if (!v13)
    {
      if (v12 != a5)
      {
        _StringGuts.grow(_:)(51);
        v17._object = (void *)0x8000000260BFED60;
        v17._countAndFlagsBits = 0xD000000000000022;
        String.append(_:)(v17);
LABEL_18:
        v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v21);
        swift_bridgeObjectRelease();
        v22._countAndFlagsBits = 0x65707865203D2120;
        v22._object = (void *)0xED00003D64657463;
        String.append(_:)(v22);
        v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v23);
        swift_bridgeObjectRelease();
        uint64_t v7 = 0;
        lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
        swift_allocError();
        void *v24 = 0;
        v24[1] = 0xE000000000000000;
        goto LABEL_19;
      }
      if ((a4 & 1) == 0) {
        goto LABEL_15;
      }
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain_n();
      uint64_t v25 = swift_dynamicCastClass();
      if (!v25)
      {
        swift_unknownObjectRelease();
        uint64_t v25 = MEMORY[0x263F8EE78];
      }
      uint64_t v26 = *(void *)(v25 + 16);
      swift_release();
      if (v26 == v7)
      {
        uint64_t v7 = swift_dynamicCastClass();
        if (!v7)
        {
          swift_unknownObjectRelease();
          uint64_t v7 = MEMORY[0x263F8EE78];
        }
        goto LABEL_26;
      }
LABEL_31:
      swift_unknownObjectRelease();
LABEL_15:
      specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4);
      uint64_t v7 = v16;
LABEL_26:
      swift_unknownObjectRelease();
      return v7;
    }
    goto LABEL_29;
  }
  if (v13)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if ((unint64_t)(a5 - 0x2000000000000000) >> 62 != 3)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v12 != 4 * a5)
  {
    _StringGuts.grow(_:)(56);
    v18._object = (void *)0x8000000260BFED90;
    v18._countAndFlagsBits = 0xD000000000000022;
    String.append(_:)(v18);
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 2107936;
    v20._object = (void *)0xE300000000000000;
    String.append(_:)(v20);
    goto LABEL_18;
  }
  uint64_t v14 = specialized Array<A>.init<A>(from:)(a1, a2, a3, a4);
  if (!v6) {
    return v14;
  }
  return v7;
}

{
  uint64_t v6;
  uint64_t v7;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;

  if (a6 == -1)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    void *v15 = 0;
    v15[1] = 0;
LABEL_19:
    swift_willThrow();
    swift_unknownObjectRelease();
    return v7;
  }
  uint64_t v7 = a5;
  unint64_t v12 = (a4 >> 1) - a3;
  BOOL v13 = __OFSUB__(a4 >> 1, a3);
  if (a6)
  {
    if (!v13)
    {
      if (v12 != a5)
      {
        _StringGuts.grow(_:)(51);
        v17._object = (void *)0x8000000260BFED60;
        v17._countAndFlagsBits = 0xD000000000000022;
        String.append(_:)(v17);
LABEL_18:
        v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v21);
        swift_bridgeObjectRelease();
        v22._countAndFlagsBits = 0x65707865203D2120;
        v22._object = (void *)0xED00003D64657463;
        String.append(_:)(v22);
        v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v23);
        swift_bridgeObjectRelease();
        uint64_t v7 = 0;
        lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
        swift_allocError();
        void *v24 = 0;
        v24[1] = 0xE000000000000000;
        goto LABEL_19;
      }
      if ((a4 & 1) == 0) {
        goto LABEL_15;
      }
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain_n();
      uint64_t v25 = swift_dynamicCastClass();
      if (!v25)
      {
        swift_unknownObjectRelease();
        uint64_t v25 = MEMORY[0x263F8EE78];
      }
      uint64_t v26 = *(void *)(v25 + 16);
      swift_release();
      if (v26 == v7)
      {
        uint64_t v7 = swift_dynamicCastClass();
        if (!v7)
        {
          swift_unknownObjectRelease();
          uint64_t v7 = MEMORY[0x263F8EE78];
        }
        goto LABEL_26;
      }
LABEL_31:
      swift_unknownObjectRelease();
LABEL_15:
      specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4);
      uint64_t v7 = v16;
LABEL_26:
      swift_unknownObjectRelease();
      return v7;
    }
    goto LABEL_29;
  }
  if (v13)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if ((unint64_t)(a5 - 0x1000000000000000) >> 61 != 7)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v12 != 8 * a5)
  {
    _StringGuts.grow(_:)(56);
    v18._object = (void *)0x8000000260BFED90;
    v18._countAndFlagsBits = 0xD000000000000022;
    String.append(_:)(v18);
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 2107936;
    v20._object = (void *)0xE300000000000000;
    String.append(_:)(v20);
    goto LABEL_18;
  }
  uint64_t v14 = specialized Array<A>.init<A>(from:)(a1, a2, a3, a4);
  if (!v6) {
    return v14;
  }
  return v7;
}

uint64_t specialized PINEInputShare.DecodableParameter.init<A>(vdaf:aggregatorID:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((*(void *)result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v5 = result;
  if (a2 < 0 || *(void *)result <= a2)
  {
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v10 = v9;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v11 = v8;
    *(void *)(v11 + 8) = v10;
    *(unsigned char *)(v11 + 16) = 0;
    swift_willThrow();
    return outlined release of PINE<Field32, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>(v5);
  }
  if (a2)
  {
    uint64_t result = outlined release of PINE<Field32, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>(result);
    uint64_t v6 = 32;
    uint64_t v7 = 32;
LABEL_11:
    *(void *)a3 = v7;
    *(unsigned char *)(a3 + 8) = a2 != 0;
    *(void *)(a3 + 16) = v6;
    *(unsigned char *)(a3 + 24) = a2 != 0;
    return result;
  }
  long long v19 = *(_OWORD *)(result + 136);
  long long v18 = *(_OWORD *)(result + 72);
  uint64_t v7 = *((void *)&v18 + 1) - v19;
  if (__OFSUB__(*((void *)&v18 + 1), (void)v19)) {
    goto LABEL_13;
  }
  uint64_t v12 = *(void *)(result + 320);
  uint64_t result = specialized FullyLinearProof.proofLength.getter();
  uint64_t v13 = v12 * result;
  if ((unsigned __int128)(v12 * (__int128)result) >> 64 != (v12 * result) >> 63)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v14 = *(void *)(v5 + 312);
  uint64_t v15 = specialized FullyLinearProof.proofLength.getter();
  uint64_t result = outlined release of PINE<Field32, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>(v5);
  uint64_t v16 = v14 * v15;
  if ((unsigned __int128)(v14 * (__int128)v15) >> 64 != (v14 * v15) >> 63)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  BOOL v17 = __OFADD__(v13, v16);
  uint64_t v6 = v13 + v16;
  if (!v17) {
    goto LABEL_11;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t specialized PINEInputShare.DecodableParameter.init<A>(vdaf:aggregatorID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized PINEInputShare.DecodableParameter.init<A>(vdaf:aggregatorID:)(a1, a2, (uint64_t (*)(uint64_t))outlined release of PINE<Field64, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, specialized FullyLinearProof.proofLength.getter, specialized FullyLinearProof.proofLength.getter, a3);
}

uint64_t specialized PINEInputShare.DecodableParameter.init<A>(vdaf:aggregatorID:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t (*a5)(void)@<X4>, uint64_t a6@<X8>)
{
  if ((*(void *)result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v9 = result;
  if (a2 < 0 || *(void *)result <= a2)
  {
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v14 = v13;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v15 = v12;
    *(void *)(v15 + 8) = v14;
    *(unsigned char *)(v15 + 16) = 0;
    swift_willThrow();
    return a3(v9);
  }
  if (a2)
  {
    uint64_t result = a3(result);
    uint64_t v10 = 32;
    uint64_t v11 = 32;
LABEL_11:
    *(void *)a6 = v11;
    *(unsigned char *)(a6 + 8) = a2 != 0;
    *(void *)(a6 + 16) = v10;
    *(unsigned char *)(a6 + 24) = a2 != 0;
    return result;
  }
  long long v24 = *(_OWORD *)(result + 136);
  long long v23 = *(_OWORD *)(result + 72);
  if (__OFSUB__(*((void *)&v23 + 1), (void)v24)) {
    goto LABEL_13;
  }
  uint64_t v17 = *(void *)(result + 320);
  uint64_t result = a4();
  uint64_t v18 = v17 * result;
  if ((unsigned __int128)(v17 * (__int128)result) >> 64 != (v17 * result) >> 63)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v19 = *(void *)(v9 + 312);
  uint64_t v20 = a5();
  uint64_t result = a3(v9);
  uint64_t v21 = v19 * v20;
  if ((unsigned __int128)(v19 * (__int128)v20) >> 64 != (v19 * v20) >> 63)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  BOOL v22 = __OFADD__(v18, v21);
  uint64_t v10 = v18 + v21;
  uint64_t v11 = *((void *)&v23 + 1) - v24;
  if (!v22) {
    goto LABEL_11;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t specialized PINEInputShare.init<A>(from:parameter:)@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  if (a4 == -1)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *uint64_t v12 = 0;
    v12[1] = 0;
    return swift_willThrow();
  }
  uint64_t v13 = a5;
  uint64_t v14 = a3;
  if (a1) {
    uint64_t v15 = a2 - a1;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = a3;
  if ((a4 & 1) == 0)
  {
    uint64_t v16 = 5 * a3;
    if ((unsigned __int128)(a3 * (__int128)5) >> 64 != (5 * a3) >> 63) {
      goto LABEL_70;
    }
  }
  uint64_t v17 = a5;
  int v18 = a6 & 1;
  if ((a6 & 1) == 0)
  {
    uint64_t v17 = 5 * a5;
    if ((unsigned __int128)(a5 * (__int128)5) >> 64 != (5 * a5) >> 63) {
      goto LABEL_71;
    }
  }
  BOOL v19 = __OFADD__(v16, v17);
  uint64_t v20 = v16 + v17;
  if (v19)
  {
    __break(1u);
    goto LABEL_69;
  }
  BOOL v19 = __OFADD__(v20, 64);
  uint64_t v21 = v20 + 64;
  if (v19)
  {
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  uint64_t v8 = a4 & 1;
  if (v15 != v21)
  {
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    if (!v8)
    {
      uint64_t v35 = (unsigned __int128)(v14 * (__int128)5) >> 64;
      v14 *= 5;
      if (v35 != v14 >> 63) {
        goto LABEL_75;
      }
    }
    if (!v18)
    {
      uint64_t v36 = (unsigned __int128)(v13 * (__int128)5) >> 64;
      v13 *= 5;
      if (v36 != v13 >> 63) {
        goto LABEL_76;
      }
    }
    if (!__OFADD__(v14, v13))
    {
      if (!__OFADD__(v14 + v13, 64))
      {
        v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v37);
        swift_bridgeObjectRelease();
        v38._countAndFlagsBits = 0x203A746F67202CLL;
        v38._object = (void *)0xE700000000000000;
        String.append(_:)(v38);
        v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v39);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
        swift_allocError();
        void *v40 = 0xD000000000000037;
        v40[1] = 0x8000000260BFF230;
        return swift_willThrow();
      }
      goto LABEL_73;
    }
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  uint64_t v70 = v7;
  int v67 = a6 & 1;
  uint64_t v65 = a7;
  size_t v22 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  uint64_t v15 = v14;
  LOBYTE(v69) = v8;
  if (!v8)
  {
    uint64_t v15 = 5 * v14;
    if ((unsigned __int128)(v14 * (__int128)5) >> 64 != (5 * v14) >> 63) {
      goto LABEL_74;
    }
  }
  uint64_t v23 = (2 * *(void *)(v22 + 16)) | 1;
  uint64_t v9 = specialized Collection.prefix(_:)(v15, v22, v22 + 32, 0, v23);
  uint64_t v25 = v24;
  uint64_t v8 = v26;
  unint64_t v68 = v27;
  uint64_t v28 = specialized Collection.dropFirst(_:)(v15, v22, v22 + 32, 0, v23);
  uint64_t v66 = v29;
  uint64_t v11 = v30;
  uint64_t v15 = v31;
  swift_retain();
  uint64_t v32 = specialized Share.init<A>(from:parameter:)(v9, v25, v8, v68, v14, v69);
  if (v7) {
    return swift_unknownObjectRelease();
  }
  uint64_t v41 = v28;
  unint64_t v10 = v66;
  char v64 = v33;
  uint64_t v70 = v32;
  uint64_t v42 = v13;
  if (!v67)
  {
    uint64_t v42 = 5 * v13;
    if ((unsigned __int128)(v13 * (__int128)5) >> 64 != (5 * v13) >> 63) {
      goto LABEL_77;
    }
  }
  uint64_t v9 = specialized Collection.prefix(_:)(v42, v41, v66, v11, v15);
  unint64_t v68 = v44;
  uint64_t v69 = v43;
  uint64_t v46 = v45;
  uint64_t v47 = specialized Collection.dropFirst(_:)(v42, v41, v66, v11, v15);
  uint64_t v66 = v48;
  uint64_t v11 = v49;
  unint64_t v10 = v50;
  uint64_t v15 = v70;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v51 = specialized Share.init<A>(from:parameter:)(v9, v69, v46, v68, v13, v67);
  uint64_t v8 = v10 >> 1;
  unint64_t v53 = (v10 >> 1) - v11;
  if (__OFSUB__(v10 >> 1, v11))
  {
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  uint64_t v13 = v51;
  uint64_t v54 = v11;
  uint64_t v9 = v10 >> 1;
  uint64_t v15 = v47;
  if (v53 >= 0x20)
  {
    uint64_t v9 = v11 + 32;
    if (__OFADD__(v11, 32)) {
      goto LABEL_91;
    }
  }
  if (v9 < v11) {
    goto LABEL_79;
  }
  if (v8 < v11)
  {
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  if (v8 < v9)
  {
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  if (v9 < 0)
  {
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  uint64_t v11 = v10 >> 1;
  if (v53 >= 0x20)
  {
    uint64_t v11 = v54 + 32;
    if (__OFADD__(v54, 32)) {
      goto LABEL_92;
    }
    if (v8 < v11) {
      goto LABEL_90;
    }
  }
  if (v11 < v54) {
    goto LABEL_83;
  }
  LOBYTE(v69) = v52;
  unint64_t v55 = v10 & 1;
  unint64_t v68 = v55;
  if (v10)
  {
    unint64_t v10 = v54;
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v57 = swift_dynamicCastClass();
    if (!v57)
    {
      swift_unknownObjectRelease();
      uint64_t v57 = MEMORY[0x263F8EE78];
    }
    uint64_t v58 = *(void *)(v57 + 16);
    swift_release();
    if (__OFSUB__(v9, v54)) {
      goto LABEL_93;
    }
    if (v58 != v9 - v54) {
      goto LABEL_94;
    }
    uint64_t v9 = swift_dynamicCastClass();
    if (!v9)
    {
      swift_unknownObjectRelease();
      uint64_t v9 = MEMORY[0x263F8EE78];
    }
    goto LABEL_47;
  }
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  while (1)
  {
    specialized _copyCollectionToContiguousArray<A>(_:)(v15, v66, v54, v55 | (2 * v9));
    uint64_t v9 = v56;
LABEL_47:
    swift_unknownObjectRelease();
    unint64_t v59 = v8 - v11;
    if (__OFSUB__(v8, v11))
    {
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
      goto LABEL_89;
    }
    unint64_t v10 = v8;
    if (v59 >= 0x20)
    {
      unint64_t v10 = v11 + 32;
      if (__OFADD__(v11, 32))
      {
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        swift_unknownObjectRelease();
        unint64_t v55 = v68;
LABEL_60:
        specialized _copyCollectionToContiguousArray<A>(_:)(v15, v8, v11, v55 | (2 * v10));
        uint64_t v61 = v60;
        goto LABEL_67;
      }
    }
    if ((uint64_t)v10 < v11) {
      goto LABEL_85;
    }
    if (v8 < (uint64_t)v10) {
      goto LABEL_86;
    }
    if ((v10 & 0x8000000000000000) != 0) {
      goto LABEL_87;
    }
    if (v59 >= 0x20)
    {
      if (__OFADD__(v11, 32)) {
        goto LABEL_96;
      }
      if (v8 < v11 + 32) {
        goto LABEL_88;
      }
      uint64_t v8 = v11 + 32;
    }
    if (v8 >= v11) {
      break;
    }
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    swift_unknownObjectRelease();
    uint64_t v54 = v10;
    unint64_t v55 = v68;
  }
  uint64_t v8 = v66;
  if (!v55)
  {
    swift_retain();
    goto LABEL_60;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  swift_retain();
  uint64_t v62 = swift_dynamicCastClass();
  if (!v62)
  {
    swift_unknownObjectRelease();
    uint64_t v62 = MEMORY[0x263F8EE78];
  }
  uint64_t v63 = *(void *)(v62 + 16);
  swift_release();
  if (__OFSUB__(v10, v11)) {
    goto LABEL_97;
  }
  if (v63 != v10 - v11) {
    goto LABEL_98;
  }
  uint64_t v61 = swift_dynamicCastClass();
  if (!v61)
  {
    swift_unknownObjectRelease();
    uint64_t v61 = MEMORY[0x263F8EE78];
  }
LABEL_67:
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease_n();
  *(void *)uint64_t v65 = v70;
  *(unsigned char *)(v65 + 8) = v64 & 1;
  *(void *)(v65 + 16) = v13;
  *(unsigned char *)(v65 + 24) = v69 & 1;
  *(void *)(v65 + 32) = v9;
  *(void *)(v65 + 40) = v61;
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;

  if (a4 == -1)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *uint64_t v13 = 0;
    v13[1] = 0;
    return swift_willThrow();
  }
  uint64_t v14 = a5;
  uint64_t v15 = a3;
  if (a1) {
    uint64_t v16 = a2 - a1;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = a3;
  if ((a4 & 1) == 0)
  {
    if ((unint64_t)(a3 - 0x2000000000000000) >> 62 != 3)
    {
LABEL_76:
      __break(1u);
      goto LABEL_77;
    }
    uint64_t v17 = 4 * a3;
  }
  int v18 = a5;
  uint64_t v8 = a6 & 1;
  if ((a6 & 1) == 0)
  {
    if ((unint64_t)(a5 - 0x2000000000000000) >> 62 != 3)
    {
LABEL_77:
      __break(1u);
      goto LABEL_78;
    }
    int v18 = 4 * a5;
  }
  BOOL v19 = __OFADD__(v17, v18);
  uint64_t v20 = v17 + v18;
  if (v19)
  {
    __break(1u);
    goto LABEL_75;
  }
  BOOL v19 = __OFADD__(v20, 64);
  uint64_t v21 = v20 + 64;
  if (v19)
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  uint64_t v9 = a4 & 1;
  if (v16 != v21)
  {
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    if (!v9)
    {
      if ((unint64_t)(v15 - 0x2000000000000000) >> 62 != 3)
      {
LABEL_81:
        __break(1u);
        goto LABEL_82;
      }
      v15 *= 4;
    }
    if (!v8)
    {
      if ((unint64_t)(v14 - 0x2000000000000000) >> 62 != 3)
      {
LABEL_82:
        __break(1u);
        goto LABEL_83;
      }
      v14 *= 4;
    }
    if (!__OFADD__(v15, v14))
    {
      if (!__OFADD__(v15 + v14, 64))
      {
        v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v34);
        swift_bridgeObjectRelease();
        v35._countAndFlagsBits = 0x203A746F67202CLL;
        v35._object = (void *)0xE700000000000000;
        String.append(_:)(v35);
        v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v36);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
        swift_allocError();
        *Swift::String v37 = 0xD000000000000037;
        v37[1] = 0x8000000260BFF0F0;
        return swift_willThrow();
      }
      goto LABEL_79;
    }
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  uint64_t v66 = v7;
  size_t v22 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  uint64_t v16 = v15;
  LOBYTE(v65) = v9;
  if (v9) {
    goto LABEL_18;
  }
  if ((unint64_t)(v15 - 0x2000000000000000) >> 62 != 3) {
    goto LABEL_80;
  }
  uint64_t v16 = 4 * v15;
LABEL_18:
  uint64_t v63 = v8;
  uint64_t v61 = a7;
  uint64_t v23 = (2 * *(void *)(v22 + 16)) | 1;
  uint64_t v9 = specialized Collection.prefix(_:)(v16, v22, v22 + 32, 0, v23);
  uint64_t v25 = v24;
  uint64_t v8 = v26;
  char v64 = v27;
  unint64_t v10 = specialized Collection.dropFirst(_:)(v16, v22, v22 + 32, 0, v23);
  uint64_t v62 = v28;
  uint64_t v11 = v29;
  uint64_t v16 = v30;
  swift_retain();
  uint64_t v31 = specialized Share.init<A>(from:parameter:)(v9, v25, v8, v64, v15, v65);
  if (v7) {
    return swift_unknownObjectRelease();
  }
  uint64_t v66 = v31;
  Swift::String v38 = v14;
  if (!v63)
  {
    if ((unint64_t)(v14 - 0x2000000000000000) >> 62 == 3)
    {
      Swift::String v38 = 4 * v14;
      goto LABEL_33;
    }
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
LABEL_33:
  uint64_t v60 = v32;
  uint64_t v9 = specialized Collection.prefix(_:)(v38, v10, v62, v11, v16);
  char v64 = v40;
  uint64_t v65 = v39;
  uint64_t v42 = v41;
  uint64_t v43 = specialized Collection.dropFirst(_:)(v38, v10, v62, v11, v16);
  uint64_t v62 = v44;
  uint64_t v11 = v45;
  unint64_t v10 = v46;
  uint64_t v16 = v66;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v47 = specialized Share.init<A>(from:parameter:)(v9, v65, v42, v64, v14, v63);
  uint64_t v8 = v10 >> 1;
  uint64_t v49 = (v10 >> 1) - v11;
  if (__OFSUB__(v10 >> 1, v11))
  {
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  uint64_t v14 = v47;
  unint64_t v50 = v11;
  uint64_t v9 = v10 >> 1;
  uint64_t v16 = v43;
  if (v49 >= 0x20)
  {
    uint64_t v9 = v11 + 32;
    if (__OFADD__(v11, 32)) {
      goto LABEL_97;
    }
  }
  if (v9 < v11) {
    goto LABEL_85;
  }
  if (v8 < v11)
  {
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
  if (v8 < v9)
  {
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  if (v9 < 0)
  {
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  uint64_t v11 = v10 >> 1;
  if (v49 >= 0x20)
  {
    uint64_t v11 = v50 + 32;
    if (__OFADD__(v50, 32)) {
      goto LABEL_98;
    }
    if (v8 < v11) {
      goto LABEL_96;
    }
  }
  if (v11 < v50) {
    goto LABEL_89;
  }
  LOBYTE(v65) = v48;
  uint64_t v51 = v10 & 1;
  char v64 = v51;
  if (v10)
  {
    unint64_t v10 = v50;
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain();
    unint64_t v53 = swift_dynamicCastClass();
    if (!v53)
    {
      swift_unknownObjectRelease();
      unint64_t v53 = MEMORY[0x263F8EE78];
    }
    uint64_t v54 = *(void *)(v53 + 16);
    swift_release();
    if (__OFSUB__(v9, v50)) {
      goto LABEL_99;
    }
    if (v54 != v9 - v50) {
      goto LABEL_100;
    }
    uint64_t v9 = swift_dynamicCastClass();
    if (!v9)
    {
      swift_unknownObjectRelease();
      uint64_t v9 = MEMORY[0x263F8EE78];
    }
    goto LABEL_53;
  }
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  while (1)
  {
    specialized _copyCollectionToContiguousArray<A>(_:)(v16, v62, v50, v51 | (2 * v9));
    uint64_t v9 = v52;
LABEL_53:
    swift_unknownObjectRelease();
    unint64_t v55 = v8 - v11;
    if (__OFSUB__(v8, v11))
    {
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
      goto LABEL_95;
    }
    unint64_t v10 = v8;
    if (v55 >= 0x20)
    {
      unint64_t v10 = v11 + 32;
      if (__OFADD__(v11, 32))
      {
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        swift_unknownObjectRelease();
        uint64_t v51 = v64;
LABEL_66:
        specialized _copyCollectionToContiguousArray<A>(_:)(v16, v8, v11, v51 | (2 * v10));
        uint64_t v57 = v56;
        goto LABEL_73;
      }
    }
    if ((uint64_t)v10 < v11) {
      goto LABEL_91;
    }
    if (v8 < (uint64_t)v10) {
      goto LABEL_92;
    }
    if ((v10 & 0x8000000000000000) != 0) {
      goto LABEL_93;
    }
    if (v55 >= 0x20)
    {
      if (__OFADD__(v11, 32)) {
        goto LABEL_102;
      }
      if (v8 < v11 + 32) {
        goto LABEL_94;
      }
      uint64_t v8 = v11 + 32;
    }
    if (v8 >= v11) {
      break;
    }
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    swift_unknownObjectRelease();
    unint64_t v50 = v10;
    uint64_t v51 = v64;
  }
  uint64_t v8 = v62;
  if (!v51)
  {
    swift_retain();
    goto LABEL_66;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  swift_retain();
  uint64_t v58 = swift_dynamicCastClass();
  if (!v58)
  {
    swift_unknownObjectRelease();
    uint64_t v58 = MEMORY[0x263F8EE78];
  }
  unint64_t v59 = *(void *)(v58 + 16);
  swift_release();
  if (__OFSUB__(v10, v11)) {
    goto LABEL_103;
  }
  if (v59 != v10 - v11) {
    goto LABEL_104;
  }
  uint64_t v57 = swift_dynamicCastClass();
  if (!v57)
  {
    swift_unknownObjectRelease();
    uint64_t v57 = MEMORY[0x263F8EE78];
  }
LABEL_73:
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease_n();
  *(void *)uint64_t v61 = v66;
  *(unsigned char *)(v61 + 8) = v60 & 1;
  *(void *)(v61 + 16) = v14;
  *(unsigned char *)(v61 + 24) = v65 & 1;
  *(void *)(v61 + 32) = v9;
  *(void *)(v61 + 40) = v57;
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;

  if (a4 == -1)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *uint64_t v13 = 0;
    v13[1] = 0;
    return swift_willThrow();
  }
  uint64_t v14 = a5;
  uint64_t v15 = a3;
  if (a1) {
    uint64_t v16 = a2 - a1;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = a3;
  if ((a4 & 1) == 0)
  {
    if ((unint64_t)(a3 - 0x1000000000000000) >> 61 != 7)
    {
LABEL_76:
      __break(1u);
      goto LABEL_77;
    }
    uint64_t v17 = 8 * a3;
  }
  int v18 = a5;
  uint64_t v8 = a6 & 1;
  if ((a6 & 1) == 0)
  {
    if ((unint64_t)(a5 - 0x1000000000000000) >> 61 != 7)
    {
LABEL_77:
      __break(1u);
      goto LABEL_78;
    }
    int v18 = 8 * a5;
  }
  BOOL v19 = __OFADD__(v17, v18);
  uint64_t v20 = v17 + v18;
  if (v19)
  {
    __break(1u);
    goto LABEL_75;
  }
  BOOL v19 = __OFADD__(v20, 64);
  uint64_t v21 = v20 + 64;
  if (v19)
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  uint64_t v9 = a4 & 1;
  if (v16 != v21)
  {
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    if (!v9)
    {
      if ((unint64_t)(v15 - 0x1000000000000000) >> 61 != 7)
      {
LABEL_81:
        __break(1u);
        goto LABEL_82;
      }
      v15 *= 8;
    }
    if (!v8)
    {
      if ((unint64_t)(v14 - 0x1000000000000000) >> 61 != 7)
      {
LABEL_82:
        __break(1u);
        goto LABEL_83;
      }
      v14 *= 8;
    }
    if (!__OFADD__(v15, v14))
    {
      if (!__OFADD__(v15 + v14, 64))
      {
        v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v34);
        swift_bridgeObjectRelease();
        v35._countAndFlagsBits = 0x203A746F67202CLL;
        v35._object = (void *)0xE700000000000000;
        String.append(_:)(v35);
        v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v36);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
        swift_allocError();
        *Swift::String v37 = 0xD000000000000037;
        v37[1] = 0x8000000260BFED20;
        return swift_willThrow();
      }
      goto LABEL_79;
    }
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  uint64_t v66 = v7;
  size_t v22 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  uint64_t v16 = v15;
  LOBYTE(v65) = v9;
  if (v9) {
    goto LABEL_18;
  }
  if ((unint64_t)(v15 - 0x1000000000000000) >> 61 != 7) {
    goto LABEL_80;
  }
  uint64_t v16 = 8 * v15;
LABEL_18:
  uint64_t v63 = v8;
  uint64_t v61 = a7;
  uint64_t v23 = (2 * *(void *)(v22 + 16)) | 1;
  uint64_t v9 = specialized Collection.prefix(_:)(v16, v22, v22 + 32, 0, v23);
  uint64_t v25 = v24;
  uint64_t v8 = v26;
  char v64 = v27;
  unint64_t v10 = specialized Collection.dropFirst(_:)(v16, v22, v22 + 32, 0, v23);
  uint64_t v62 = v28;
  uint64_t v11 = v29;
  uint64_t v16 = v30;
  swift_retain();
  uint64_t v31 = specialized Share.init<A>(from:parameter:)(v9, v25, v8, v64, v15, v65);
  if (v7) {
    return swift_unknownObjectRelease();
  }
  uint64_t v66 = v31;
  Swift::String v38 = v14;
  if (!v63)
  {
    if ((unint64_t)(v14 - 0x1000000000000000) >> 61 == 7)
    {
      Swift::String v38 = 8 * v14;
      goto LABEL_33;
    }
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
LABEL_33:
  uint64_t v60 = v32;
  uint64_t v9 = specialized Collection.prefix(_:)(v38, v10, v62, v11, v16);
  char v64 = v40;
  uint64_t v65 = v39;
  uint64_t v42 = v41;
  uint64_t v43 = specialized Collection.dropFirst(_:)(v38, v10, v62, v11, v16);
  uint64_t v62 = v44;
  uint64_t v11 = v45;
  unint64_t v10 = v46;
  uint64_t v16 = v66;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v47 = specialized Share.init<A>(from:parameter:)(v9, v65, v42, v64, v14, v63);
  uint64_t v8 = v10 >> 1;
  uint64_t v49 = (v10 >> 1) - v11;
  if (__OFSUB__(v10 >> 1, v11))
  {
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  uint64_t v14 = v47;
  unint64_t v50 = v11;
  uint64_t v9 = v10 >> 1;
  uint64_t v16 = v43;
  if (v49 >= 0x20)
  {
    uint64_t v9 = v11 + 32;
    if (__OFADD__(v11, 32)) {
      goto LABEL_97;
    }
  }
  if (v9 < v11) {
    goto LABEL_85;
  }
  if (v8 < v11)
  {
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
  if (v8 < v9)
  {
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  if (v9 < 0)
  {
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  uint64_t v11 = v10 >> 1;
  if (v49 >= 0x20)
  {
    uint64_t v11 = v50 + 32;
    if (__OFADD__(v50, 32)) {
      goto LABEL_98;
    }
    if (v8 < v11) {
      goto LABEL_96;
    }
  }
  if (v11 < v50) {
    goto LABEL_89;
  }
  LOBYTE(v65) = v48;
  uint64_t v51 = v10 & 1;
  char v64 = v51;
  if (v10)
  {
    unint64_t v10 = v50;
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain();
    unint64_t v53 = swift_dynamicCastClass();
    if (!v53)
    {
      swift_unknownObjectRelease();
      unint64_t v53 = MEMORY[0x263F8EE78];
    }
    uint64_t v54 = *(void *)(v53 + 16);
    swift_release();
    if (__OFSUB__(v9, v50)) {
      goto LABEL_99;
    }
    if (v54 != v9 - v50) {
      goto LABEL_100;
    }
    uint64_t v9 = swift_dynamicCastClass();
    if (!v9)
    {
      swift_unknownObjectRelease();
      uint64_t v9 = MEMORY[0x263F8EE78];
    }
    goto LABEL_53;
  }
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  while (1)
  {
    specialized _copyCollectionToContiguousArray<A>(_:)(v16, v62, v50, v51 | (2 * v9));
    uint64_t v9 = v52;
LABEL_53:
    swift_unknownObjectRelease();
    unint64_t v55 = v8 - v11;
    if (__OFSUB__(v8, v11))
    {
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
      goto LABEL_95;
    }
    unint64_t v10 = v8;
    if (v55 >= 0x20)
    {
      unint64_t v10 = v11 + 32;
      if (__OFADD__(v11, 32))
      {
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        swift_unknownObjectRelease();
        uint64_t v51 = v64;
LABEL_66:
        specialized _copyCollectionToContiguousArray<A>(_:)(v16, v8, v11, v51 | (2 * v10));
        uint64_t v57 = v56;
        goto LABEL_73;
      }
    }
    if ((uint64_t)v10 < v11) {
      goto LABEL_91;
    }
    if (v8 < (uint64_t)v10) {
      goto LABEL_92;
    }
    if ((v10 & 0x8000000000000000) != 0) {
      goto LABEL_93;
    }
    if (v55 >= 0x20)
    {
      if (__OFADD__(v11, 32)) {
        goto LABEL_102;
      }
      if (v8 < v11 + 32) {
        goto LABEL_94;
      }
      uint64_t v8 = v11 + 32;
    }
    if (v8 >= v11) {
      break;
    }
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    swift_unknownObjectRelease();
    unint64_t v50 = v10;
    uint64_t v51 = v64;
  }
  uint64_t v8 = v62;
  if (!v51)
  {
    swift_retain();
    goto LABEL_66;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  swift_retain();
  uint64_t v58 = swift_dynamicCastClass();
  if (!v58)
  {
    swift_unknownObjectRelease();
    uint64_t v58 = MEMORY[0x263F8EE78];
  }
  unint64_t v59 = *(void *)(v58 + 16);
  swift_release();
  if (__OFSUB__(v10, v11)) {
    goto LABEL_103;
  }
  if (v59 != v10 - v11) {
    goto LABEL_104;
  }
  uint64_t v57 = swift_dynamicCastClass();
  if (!v57)
  {
    swift_unknownObjectRelease();
    uint64_t v57 = MEMORY[0x263F8EE78];
  }
LABEL_73:
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease_n();
  *(void *)uint64_t v61 = v66;
  *(unsigned char *)(v61 + 8) = v60 & 1;
  *(void *)(v61 + 16) = v14;
  *(unsigned char *)(v61 + 24) = v65 & 1;
  *(void *)(v61 + 32) = v9;
  *(void *)(v61 + 40) = v57;
  return result;
}

int64_t specialized static VDAFProtocol.decodeMeasurementShare<A>(_:aggregatorID:count:)(int64_t a1, char a2, char a3, int64_t a4)
{
  int64_t v5 = a1;
  if (a2)
  {
    uint64_t v7 = specialized static PINE.domainSeparationTag(usage:)(0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_260BF9FF0;
    *(unsigned char *)(inited + 32) = a3;
    uint64_t v9 = specialized static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(v5, v7, inited);
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    int64_t v5 = specialized static FieldElement.randomVector<A>(count:using:)(a4, v9);
    swift_release();
  }
  else if (*(void *)(a1 + 16) == a4)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(57);
    v10._object = (void *)0x8000000260BFECA0;
    v10._countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v10);
    v11._countAndFlagsBits = 0xD00000000000002DLL;
    v11._object = (void *)0x8000000260BFECF0;
    String.append(_:)(v11);
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 0x3D746F67202CLL;
    v13._object = (void *)0xE600000000000000;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    int64_t v5 = 0;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v15 = 0;
    *(void *)(v15 + 8) = 0xE000000000000000;
    *(unsigned char *)(v15 + 16) = 1;
    swift_willThrow();
  }
  return v5;
}

unint64_t specialized static VDAFProtocol.decodeMeasurementShare<A>(_:aggregatorID:count:)(unint64_t a1, char a2, char a3, unint64_t a4)
{
  return specialized static VDAFProtocol.decodeMeasurementShare<A>(_:aggregatorID:count:)(a1, a2, a3, a4, (uint64_t (*)(void))specialized static VDAFProtocol.domainSeparationTag(usage:), (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t))specialized static FieldElement.randomElement<A>(using:));
}

unint64_t specialized static VDAFProtocol.decodeMeasurementShare<A>(_:aggregatorID:count:)(unint64_t a1, char a2, char a3, unint64_t a4, uint64_t (*a5)(void), void (*a6)(BOOL, unint64_t, uint64_t), void (*a7)(uint64_t *__return_ptr, uint64_t))
{
  unint64_t v8 = a1;
  if (a2)
  {
    uint64_t v12 = a5(0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_260BF9FF0;
    *(unsigned char *)(inited + 32) = a3;
    uint64_t v14 = specialized static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(v8, v12, inited);
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    unint64_t v8 = specialized static FieldElement.randomVector<A>(count:using:)(a4, v14, a6, a7);
    swift_release();
  }
  else if (*(void *)(a1 + 16) == a4)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(57);
    v15._object = (void *)0x8000000260BFECA0;
    v15._countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0xD00000000000002DLL;
    v16._object = (void *)0x8000000260BFECF0;
    String.append(_:)(v16);
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 0x3D746F67202CLL;
    v18._object = (void *)0xE600000000000000;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    unint64_t v8 = 0;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v20 = 0;
    *(void *)(v20 + 8) = 0xE000000000000000;
    *(unsigned char *)(v20 + 16) = 1;
    swift_willThrow();
  }
  return v8;
}

unint64_t specialized static FieldElement.randomElement<A>(using:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2 = OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream;
  uint64_t v3 = *(void *)(a1 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream);
  if (v3)
  {
    uint64_t v4 = a1;
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 1;
    uint64_t v27 = OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream;
    do
    {
      unint64_t v8 = *(void *)(v3 + 24);
      uint64_t v9 = (char **)(v3 + 16);
      if (v8 == 256)
      {
        swift_beginAccess();
        Swift::String v10 = *(char **)(v3 + 16);
        uint64_t v11 = *((void *)v10 + 2);
        swift_retain();
        if (v11)
        {
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v9 = v10;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            Swift::String v10 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v10);
          }
          unint64_t v13 = 0;
          while (1)
          {
            *uint64_t v9 = v10;
            if (v13 >= *((void *)v10 + 2)) {
              break;
            }
            v10[v13 + 32] = 0;
            Swift::String v10 = *v9;
            if (v11 == ++v13) {
              goto LABEL_12;
            }
          }
          __break(1u);
          break;
        }
LABEL_12:
        swift_beginAccess();
        uint64_t v14 = *v9;
        char v15 = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v9 = v14;
        unint64_t v29 = v5;
        if ((v15 & 1) == 0)
        {
          uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v14);
          *uint64_t v9 = v14;
        }
        uint64_t v16 = (uint64_t)&v14[*((void *)v14 + 2) + 32];
        uint64_t v17 = v3 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_key;
        uint64_t v18 = v3 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_nonce;
        swift_beginAccess();
        specialized static AES.CTR.encryptInPlace(_:using:updating:)((uint64_t)(v14 + 32), v16, v17, v18);
        swift_endAccess();
        *(void *)(v3 + 16) = v14;
        swift_endAccess();
        *(void *)(v3 + 24) = 0;
        swift_beginAccess();
        unint64_t v8 = 0;
        uint64_t v2 = v27;
        uint64_t v4 = a1;
        unint64_t v5 = v29;
      }
      else
      {
        swift_retain();
        swift_beginAccess();
        if ((v8 & 0x8000000000000000) != 0) {
          goto LABEL_33;
        }
      }
      if (v8 >= *((void *)*v9 + 2)) {
        goto LABEL_31;
      }
      uint64_t v19 = *(void *)(v3 + 24);
      BOOL v20 = __OFADD__(v19, 1);
      uint64_t v21 = v19 + 1;
      if (v20) {
        goto LABEL_32;
      }
      unint64_t v22 = (*v9)[v8 + 32];
      *(void *)(v3 + 24) = v21;
      swift_release();
      uint64_t v23 = 8 * v6;
      if (8 * v6 >= -64 && v23 <= 64)
      {
        if ((v23 & 0x8000000000000000) == 0)
        {
          if ((unint64_t)v23 >= 0x40) {
            goto LABEL_24;
          }
          unint64_t v24 = v22 << (v23 & 0x38);
          goto LABEL_23;
        }
        if ((unint64_t)v23 > 0xFFFFFFFFFFFFFFC0)
        {
          unint64_t v24 = v22 >> ((-8 * v6) & 0x38);
LABEL_23:
          v5 |= v24;
        }
      }
LABEL_24:
      if (v7 == 5)
      {
        if (v5 <= 0xFFFEB00001) {
          return specialized FieldElement.init(_:)(v5, a2);
        }
        uint64_t v7 = 0;
        unint64_t v5 = 0;
      }
      uint64_t v6 = v7++;
      uint64_t v3 = *(void *)(v4 + v2);
    }
    while (v3);
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  unint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char **v9;
  char *v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  char *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t result;
  uint64_t v27;
  unint64_t v29;

  uint64_t v2 = OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream;
  uint64_t v3 = *(void *)(a1 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream);
  if (v3)
  {
    uint64_t v4 = a1;
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 1;
    uint64_t v27 = OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream;
    do
    {
      unint64_t v8 = *(void *)(v3 + 24);
      uint64_t v9 = (char **)(v3 + 16);
      if (v8 == 256)
      {
        swift_beginAccess();
        Swift::String v10 = *(char **)(v3 + 16);
        uint64_t v11 = *((void *)v10 + 2);
        swift_retain();
        if (v11)
        {
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v9 = v10;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            Swift::String v10 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v10);
          }
          unint64_t v13 = 0;
          while (1)
          {
            *uint64_t v9 = v10;
            if (v13 >= *((void *)v10 + 2)) {
              break;
            }
            v10[v13 + 32] = 0;
            Swift::String v10 = *v9;
            if (v11 == ++v13) {
              goto LABEL_12;
            }
          }
          __break(1u);
          break;
        }
LABEL_12:
        swift_beginAccess();
        uint64_t v14 = *v9;
        char v15 = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v9 = v14;
        unint64_t v29 = v5;
        if ((v15 & 1) == 0)
        {
          uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v14);
          *uint64_t v9 = v14;
        }
        uint64_t v16 = (uint64_t)&v14[*((void *)v14 + 2) + 32];
        uint64_t v17 = v3 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_key;
        uint64_t v18 = v3 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_nonce;
        swift_beginAccess();
        specialized static AES.CTR.encryptInPlace(_:using:updating:)((uint64_t)(v14 + 32), v16, v17, v18);
        swift_endAccess();
        *(void *)(v3 + 16) = v14;
        swift_endAccess();
        *(void *)(v3 + 24) = 0;
        swift_beginAccess();
        unint64_t v8 = 0;
        uint64_t v2 = v27;
        uint64_t v4 = a1;
        unint64_t v5 = v29;
      }
      else
      {
        swift_retain();
        swift_beginAccess();
        if ((v8 & 0x8000000000000000) != 0) {
          goto LABEL_33;
        }
      }
      if (v8 >= *((void *)*v9 + 2)) {
        goto LABEL_31;
      }
      uint64_t v19 = *(void *)(v3 + 24);
      BOOL v20 = __OFADD__(v19, 1);
      uint64_t v21 = v19 + 1;
      if (v20) {
        goto LABEL_32;
      }
      unint64_t v22 = (*v9)[v8 + 32];
      *(void *)(v3 + 24) = v21;
      swift_release();
      uint64_t v23 = 8 * v6;
      if (8 * v6 >= -64 && v23 <= 64)
      {
        if ((v23 & 0x8000000000000000) == 0)
        {
          if ((unint64_t)v23 >= 0x40) {
            goto LABEL_24;
          }
          unint64_t v24 = v22 << (v23 & 0x38);
          goto LABEL_23;
        }
        if ((unint64_t)v23 > 0xFFFFFFFFFFFFFFC0)
        {
          unint64_t v24 = v22 >> ((-8 * v6) & 0x38);
LABEL_23:
          v5 |= v24;
        }
      }
LABEL_24:
      if (v7 == 8)
      {
        if (v5 <= 0xFFFFFFFF00000001) {
          return specialized FieldElement.init(_:)(v5, a2);
        }
        uint64_t v7 = 0;
        unint64_t v5 = 0;
      }
      uint64_t v6 = v7++;
      uint64_t v3 = *(void *)(v4 + v2);
    }
    while (v3);
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  unint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t specialized static FieldElement.randomElement<A>(using:)@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2 = OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream;
  uint64_t v3 = *(void *)(a1 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream);
  if (v3)
  {
    uint64_t v4 = a1;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 1;
    uint64_t v27 = OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream;
    do
    {
      unint64_t v8 = *(void *)(v3 + 24);
      uint64_t v9 = (char **)(v3 + 16);
      if (v8 == 256)
      {
        swift_beginAccess();
        Swift::String v10 = *(char **)(v3 + 16);
        uint64_t v11 = *((void *)v10 + 2);
        swift_retain();
        if (v11)
        {
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v9 = v10;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            Swift::String v10 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v10);
          }
          unint64_t v13 = 0;
          while (1)
          {
            *uint64_t v9 = v10;
            if (v13 >= *((void *)v10 + 2)) {
              break;
            }
            v10[v13 + 32] = 0;
            Swift::String v10 = *v9;
            if (v11 == ++v13) {
              goto LABEL_12;
            }
          }
          __break(1u);
          break;
        }
LABEL_12:
        swift_beginAccess();
        uint64_t v14 = *v9;
        char v15 = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v9 = v14;
        unsigned int v29 = v5;
        if ((v15 & 1) == 0)
        {
          uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v14);
          *uint64_t v9 = v14;
        }
        uint64_t v16 = (uint64_t)&v14[*((void *)v14 + 2) + 32];
        uint64_t v17 = v3 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_key;
        uint64_t v18 = v3 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_nonce;
        swift_beginAccess();
        specialized static AES.CTR.encryptInPlace(_:using:updating:)((uint64_t)(v14 + 32), v16, v17, v18);
        swift_endAccess();
        *(void *)(v3 + 16) = v14;
        swift_endAccess();
        *(void *)(v3 + 24) = 0;
        swift_beginAccess();
        unint64_t v8 = 0;
        uint64_t v2 = v27;
        uint64_t v4 = a1;
        uint64_t v5 = v29;
      }
      else
      {
        swift_retain();
        swift_beginAccess();
        if ((v8 & 0x8000000000000000) != 0) {
          goto LABEL_33;
        }
      }
      if (v8 >= *((void *)*v9 + 2)) {
        goto LABEL_31;
      }
      uint64_t v19 = *(void *)(v3 + 24);
      BOOL v20 = __OFADD__(v19, 1);
      uint64_t v21 = v19 + 1;
      if (v20) {
        goto LABEL_32;
      }
      unsigned int v22 = (*v9)[v8 + 32];
      *(void *)(v3 + 24) = v21;
      swift_release();
      uint64_t v23 = 8 * v6;
      if (8 * v6 >= -32 && v23 <= 32)
      {
        if ((v23 & 0x8000000000000000) == 0)
        {
          if ((unint64_t)v23 >= 0x20) {
            goto LABEL_24;
          }
          unsigned int v24 = v22 << (v23 & 0x18);
          goto LABEL_23;
        }
        if ((unint64_t)v23 > 0xFFFFFFFFFFFFFFE0)
        {
          unsigned int v24 = v22 >> ((-8 * v6) & 0x18);
LABEL_23:
          uint64_t v5 = v24 | v5;
        }
      }
LABEL_24:
      if (v7 == 4)
      {
        if (v5 <= 0xFFF00001) {
          return specialized FieldElement.init(_:)(v5, a2);
        }
        uint64_t v7 = 0;
        uint64_t v5 = 0;
      }
      uint64_t v6 = v7++;
      uint64_t v3 = *(void *)(v4 + v2);
    }
    while (v3);
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t specialized FieldElement.init(_:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = 0;
  if (result < 0xFFF00002)
  {
    if (result == -1048575)
    {
      LODWORD(v2) = 0;
LABEL_11:
      *a2 = v2;
      return result;
    }
    uint64_t v3 = 266338049 * result;
    uint64_t v4 = 4293918721 * (1048831 * result);
    BOOL v5 = __CFADD__(v4, v3);
    unint64_t v2 = (unint64_t)(v4 + v3) >> 32;
    if (v5)
    {
      BOOL v5 = __CFADD__(v2, 0xFFFFF);
      LODWORD(v2) = v2 + 0xFFFFF;
      if (!v5) {
        goto LABEL_11;
      }
      __break(1u);
    }
    if (v2 >= 0xFFF00001) {
      LODWORD(v2) = v2 + 0xFFFFF;
    }
    goto LABEL_11;
  }
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._object = (void *)0x8000000260BFEA10;
  v7._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v7);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 41;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized FieldElement.init(_:)@<X0>(unint64_t result@<X0>, unint64_t *a2@<X8>)
{
  *a2 = 0;
  if (result > 0xFFFEB00001)
  {
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._object = (void *)0x8000000260BFEA10;
    v7._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v7);
    v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 41;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (result == 0xFFFEB00001)
    {
      unint64_t v2 = 0;
    }
    else
    {
      uint64_t v3 = (result * (unsigned __int128)0x160DCD7524uLL) >> 64;
      uint64_t v4 = (0x1B8024032F28ADCLL * result * (unsigned __int128)0xFFFEB00001uLL) >> 64;
      unint64_t v5 = v3 + __CFADD__(0xFFFFFFE9F2328ADCLL * result, 0x160DCD7524 * result) + v4;
      if (v5 >= 0xFFFEB00001) {
        unint64_t v2 = v5 - 0xFFFEB00001;
      }
      else {
        unint64_t v2 = v3 + __CFADD__(0xFFFFFFE9F2328ADCLL * result, 0x160DCD7524 * result) + v4;
      }
    }
    *a2 = v2;
  }
  return result;
}

{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;

  *a2 = 0;
  if (result >= 0xFFFFFFFF00000002)
  {
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._object = (void *)0x8000000260BFEA10;
    v9._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v9);
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 41;
    v11._object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (result == 0xFFFFFFFF00000001)
    {
      unint64_t v2 = 0;
    }
    else
    {
      uint64_t v3 = (result * (unsigned __int128)0xFFFFFFFE00000001) >> 64;
      uint64_t v4 = (0xFFFFFFFF * result * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      LODWORD(v2) = __CFADD__(0x1FFFFFFFFLL * result, 0xFFFFFFFE00000001 * result);
      unint64_t v5 = v4 + v3;
      if (__CFADD__(v4, v3))
      {
        Swift::String v6 = v5 + v2;
        goto LABEL_10;
      }
      while (v5 == -1)
      {
        if ((v2 & 1) == 0)
        {
          unint64_t v2 = 4294967294;
          goto LABEL_20;
        }
        Swift::String v6 = 0;
LABEL_10:
        unint64_t v5 = 0xFFFFFFFFLL;
        Swift::String v7 = __CFADD__(v6, 0xFFFFFFFFLL);
        unint64_t v2 = v6 + 0xFFFFFFFFLL;
        if (!v7) {
          goto LABEL_20;
        }
        __break(1u);
      }
      unint64_t v2 = v5 + v2;
      if (v2 >= 0xFFFFFFFF00000001) {
        v2 += 0xFFFFFFFFLL;
      }
    }
LABEL_20:
    *a2 = v2;
  }
  return result;
}

unint64_t specialized FieldElement.init(_:)@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  BOOL v4 = result > 1;
  if (a2 != -28) {
    BOOL v4 = a2 > 0xFFFFFFFFFFFFFFE4;
  }
  *a3 = 0;
  a3[1] = 0;
  if (!v4)
  {
    BOOL v5 = result == 0;
    if (a2 != -28) {
      BOOL v5 = a2 < 0xFFFFFFFFFFFFFFE4;
    }
    if (!v5)
    {
      uint64_t v11 = 0;
      unint64_t v12 = 0;
LABEL_71:
      *a3 = v11;
      a3[1] = v12;
      return result;
    }
    uint64_t v41 = result;
    unint64_t v42 = a2;
    long long v40 = xmmword_260BFA000;
    _UInt128.multipliedFullWidth(by:)(&v37, &v43, (unint64_t *)&v40);
    long long v6 = v37;
    long long v7 = v43;
    long long v43 = xmmword_260BFA010;
    uint64_t v41 = -(uint64_t)v7;
    unint64_t v42 = 0;
    _UInt128.multipliedFullWidth(by:)(&v37, &v38, (unint64_t *)&v41);
    BOOL v8 = __CFADD__(v38, (void)v7);
    uint64_t v9 = v39 + *((void *)&v7 + 1);
    int v10 = __CFADD__(v39, *((void *)&v7 + 1)) || v9 == -1 && v8;
    uint64_t v13 = v9 + v8;
    uint64_t v14 = v6 + v37;
    BOOL v15 = __CFADD__((void)v6, (void)v37);
    uint64_t v16 = *((void *)&v6 + 1) + *((void *)&v37 + 1);
    if (__CFADD__(*((void *)&v6 + 1), *((void *)&v37 + 1)))
    {
      if (!v15)
      {
        if (!v10) {
          goto LABEL_24;
        }
LABEL_31:
        uint64_t v17 = 1;
LABEL_32:
        uint64_t v18 = v14 + v17;
        if (__CFADD__(v14, v17)) {
          uint64_t v19 = v16 + 1;
        }
        else {
          uint64_t v19 = v16;
        }
        long long v40 = xmmword_260BFA010;
        v36[0] = -v13;
        v36[1] = 0;
        uint64_t result = (unint64_t)_UInt128.multipliedFullWidth(by:)(&v43, &v41, v36);
        uint64_t v20 = *((void *)&v43 + 1);
        BOOL v21 = __CFADD__(v41, v13);
        uint64_t v22 = v42 + v18;
        int v23 = __CFADD__(v42, v18) || v22 == -1 && v21;
        uint64_t v11 = v22 + v21;
        unint64_t v12 = v19 + v43;
        BOOL v24 = __CFADD__(v19, (void)v43);
        if (*((void *)&v43 + 1) == -1)
        {
          if (!v24)
          {
            if (!v23) {
              goto LABEL_68;
            }
            uint64_t v20 = -1;
            goto LABEL_56;
          }
        }
        else if (!v24)
        {
          if ((v23 & 1) == 0) {
            goto LABEL_62;
          }
          goto LABEL_56;
        }
        uint64_t v20 = *((void *)&v43 + 1) + 1;
        if ((v23 & 1) == 0)
        {
          uint64_t v25 = 0;
LABEL_57:
          BOOL v26 = __CFADD__(v12, v25);
          v12 += v25;
          char v27 = v26;
          if (v20 == -1)
          {
            if (v27) {
              goto LABEL_65;
            }
            goto LABEL_68;
          }
          if (v27) {
            goto LABEL_68;
          }
LABEL_62:
          if (!v20)
          {
LABEL_65:
            BOOL v28 = v11 == 0;
            if (v12 != -28) {
              BOOL v28 = v12 < 0xFFFFFFFFFFFFFFE4;
            }
            if (v28) {
              goto LABEL_71;
            }
          }
LABEL_68:
          BOOL v26 = v11-- != 0;
          uint64_t v29 = 28;
          if (!v26) {
            uint64_t v29 = 27;
          }
          v12 += v29;
          goto LABEL_71;
        }
LABEL_56:
        uint64_t v25 = 1;
        goto LABEL_57;
      }
    }
    else if (v16 == -1)
    {
      if (!v15)
      {
        uint64_t v16 = -1;
        if (v10) {
          goto LABEL_31;
        }
        goto LABEL_24;
      }
    }
    else if (!v15)
    {
      if (v10) {
        goto LABEL_31;
      }
LABEL_24:
      uint64_t v17 = 0;
      goto LABEL_32;
    }
    ++v16;
    if ((v10 & 1) == 0) {
      goto LABEL_24;
    }
    goto LABEL_31;
  }
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
  v30._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._countAndFlagsBits = 30768;
  v31._object = (void *)0xE200000000000000;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._object = (void *)0x8000000260BFEA10;
  v32._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v32);
  v33._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  v34._countAndFlagsBits = 30768;
  v34._object = (void *)0xE200000000000000;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._countAndFlagsBits = 41;
  v35._object = (void *)0xE100000000000000;
  String.append(_:)(v35);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static FieldElement.integerFrom<A>(floatValue:fractionalBitCount:)(unint64_t a1, float a2)
{
  if ((LODWORD(a2) >> 23) == 255)
  {
    int v3 = LODWORD(a2) & 0x7FFFFF;
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    BOOL v5 = v4 + 2;
    if (v3)
    {
      unint64_t v6 = 0xD000000000000011;
      long long v7 = "floatValue is NaN";
    }
    else
    {
      unint64_t v6 = 0xD000000000000018;
      long long v7 = "floatValue is isInfinite";
    }
    *BOOL v4 = v6;
    v4[1] = (unint64_t)(v7 - 32) | 0x8000000000000000;
    goto LABEL_21;
  }
  if ((LODWORD(a2) & 0x7FFFFF) != 0 && !(LODWORD(a2) >> 23))
  {
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *uint64_t v9 = 0xD000000000000017;
    v9[1] = 0x8000000260BFF010;
LABEL_20:
    BOOL v5 = v9 + 2;
LABEL_21:
    *BOOL v5 = 4;
    return swift_willThrow();
  }
  uint64_t v10 = Float.exponent.getter();
  if (__OFADD__(v10, a1))
  {
    __break(1u);
LABEL_26:
    unint64_t v31 = 0;
    unint64_t v32 = 0xE000000000000000;
    _StringGuts.grow(_:)(80);
    v27._countAndFlagsBits = 0x74616F6C46;
    v27._object = (void *)0xE500000000000000;
    String.append(_:)(v27);
    v28._countAndFlagsBits = 0xD00000000000001ELL;
    v28._object = (void *)0x8000000260BFEF90;
    String.append(_:)(v28);
    v29._countAndFlagsBits = 0x3436746E4955;
    v29._object = (void *)0xE600000000000000;
    String.append(_:)(v29);
    v30._countAndFlagsBits = 0xD00000000000002ELL;
    v30._object = (void *)0x8000000260BFEFB0;
    String.append(_:)(v30);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if ((uint64_t)(v10 + a1) > 63)
  {
    unint64_t v31 = 0;
    unint64_t v32 = 0xE000000000000000;
    _StringGuts.grow(_:)(75);
    v18._object = (void *)0x8000000260BFEF10;
    v18._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v18);
    Float.exponent.getter();
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 0xD000000000000018;
    v20._object = (void *)0x8000000260BFEF30;
    String.append(_:)(v20);
    v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._object = (void *)0x8000000260BFEF50;
    v22._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v22);
    uint64_t v33 = 64;
    v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    uint64_t v16 = 46;
    unint64_t v17 = 0xE100000000000000;
    goto LABEL_19;
  }
  uint64_t v11 = 1 << a1;
  if (a1 >= 0x40) {
    uint64_t v11 = 0;
  }
  if (a1 > 0x40) {
    uint64_t v11 = 0;
  }
  specialized static FixedWidthInteger._convert<A>(from:)((uint64_t)&v31, fabsf(rintf((float)(unint64_t)v11 * a2)));
  if (v32) {
    goto LABEL_26;
  }
  unint64_t v12 = v31;
  if (v31 > 0x7FFF580000)
  {
    unint64_t v31 = 0;
    unint64_t v32 = 0xE000000000000000;
    _StringGuts.grow(_:)(49);
    v13._countAndFlagsBits = 0x6C615674616F6C66;
    v13._object = (void *)0xEB000000003D6575;
    String.append(_:)(v13);
    *(float *)&uint64_t v33 = a2;
    _print_unlocked<A, B>(_:_:)();
    v14._countAndFlagsBits = 0xD000000000000020;
    v14._object = (void *)0x8000000260BFEFE0;
    String.append(_:)(v14);
    uint64_t v33 = v12;
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    uint64_t v16 = 11817;
    unint64_t v17 = 0xE200000000000000;
LABEL_19:
    String.append(_:)(*(Swift::String *)&v16);
    unint64_t v24 = v31;
    unint64_t v25 = v32;
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *uint64_t v9 = v24;
    v9[1] = v25;
    goto LABEL_20;
  }
  if (a2 >= 0.0) {
    return v31;
  }
  else {
    return 0xFFFEB00001 - v31;
  }
}

{
  int v3;
  unint64_t *v4;
  unsigned char *v5;
  unint64_t v6;
  const char *v7;
  void *v9;
  uint64_t v10;
  float v11;
  int v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  unint64_t v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t result;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;

  if ((LODWORD(a2) >> 23) == 255)
  {
    int v3 = LODWORD(a2) & 0x7FFFFF;
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    BOOL v5 = v4 + 2;
    if (v3)
    {
      unint64_t v6 = 0xD000000000000011;
      long long v7 = "floatValue is NaN";
    }
    else
    {
      unint64_t v6 = 0xD000000000000018;
      long long v7 = "floatValue is isInfinite";
    }
    *BOOL v4 = v6;
    v4[1] = (unint64_t)(v7 - 32) | 0x8000000000000000;
    goto LABEL_19;
  }
  if ((LODWORD(a2) & 0x7FFFFF) != 0 && !(LODWORD(a2) >> 23))
  {
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *uint64_t v9 = 0xD000000000000017;
    v9[1] = 0x8000000260BFF010;
LABEL_18:
    BOOL v5 = v9 + 2;
LABEL_19:
    *BOOL v5 = 4;
    return swift_willThrow();
  }
  uint64_t v10 = Float.exponent.getter();
  if (__OFADD__(v10, a1))
  {
    __break(1u);
LABEL_24:
    unint64_t v31 = 0;
    unint64_t v32 = 0xE000000000000000;
    _StringGuts.grow(_:)(80);
    v27._countAndFlagsBits = 0x74616F6C46;
    v27._object = (void *)0xE500000000000000;
    String.append(_:)(v27);
    v28._countAndFlagsBits = 0xD00000000000001ELL;
    v28._object = (void *)0x8000000260BFEF90;
    String.append(_:)(v28);
    v29._countAndFlagsBits = 0x3233746E4955;
    v29._object = (void *)0xE600000000000000;
    String.append(_:)(v29);
    v30._countAndFlagsBits = 0xD00000000000002ELL;
    v30._object = (void *)0x8000000260BFEFB0;
    String.append(_:)(v30);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if ((uint64_t)(v10 + a1) > 31)
  {
    unint64_t v31 = 0;
    unint64_t v32 = 0xE000000000000000;
    _StringGuts.grow(_:)(75);
    v18._object = (void *)0x8000000260BFEF10;
    v18._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v18);
    Float.exponent.getter();
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 0xD000000000000018;
    v20._object = (void *)0x8000000260BFEF30;
    String.append(_:)(v20);
    v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._object = (void *)0x8000000260BFEF50;
    v22._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v22);
    uint64_t v33 = 32;
    v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    uint64_t v16 = 46;
    unint64_t v17 = 0xE100000000000000;
    goto LABEL_17;
  }
  uint64_t v11 = (float)(1 << a1);
  if (a1 >= 0x20) {
    uint64_t v11 = 0.0;
  }
  specialized static FixedWidthInteger._convert<A>(from:)((uint64_t)&v31, fabsf(rintf(v11 * a2)));
  if ((v31 & 0x100000000) != 0) {
    goto LABEL_24;
  }
  unint64_t v12 = v31;
  if (v31 > 0x7FF80000)
  {
    unint64_t v31 = 0;
    unint64_t v32 = 0xE000000000000000;
    _StringGuts.grow(_:)(49);
    v13._countAndFlagsBits = 0x6C615674616F6C66;
    v13._object = (void *)0xEB000000003D6575;
    String.append(_:)(v13);
    *(float *)&uint64_t v33 = a2;
    _print_unlocked<A, B>(_:_:)();
    v14._countAndFlagsBits = 0xD000000000000020;
    v14._object = (void *)0x8000000260BFEFE0;
    String.append(_:)(v14);
    LODWORD(v33) = v12;
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    uint64_t v16 = 11817;
    unint64_t v17 = 0xE200000000000000;
LABEL_17:
    String.append(_:)(*(Swift::String *)&v16);
    unint64_t v24 = v31;
    unint64_t v25 = v32;
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *uint64_t v9 = v24;
    v9[1] = v25;
    goto LABEL_18;
  }
  if (a2 >= 0.0) {
    return v31;
  }
  else {
    return (-1048575 - v31);
  }
}

{
  int v3;
  unint64_t *v4;
  unsigned char *v5;
  unint64_t v6;
  const char *v7;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  unint64_t v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;

  if ((LODWORD(a2) >> 23) == 255)
  {
    int v3 = LODWORD(a2) & 0x7FFFFF;
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    BOOL v5 = v4 + 2;
    if (v3)
    {
      unint64_t v6 = 0xD000000000000011;
      long long v7 = "floatValue is NaN";
    }
    else
    {
      unint64_t v6 = 0xD000000000000018;
      long long v7 = "floatValue is isInfinite";
    }
    *BOOL v4 = v6;
    v4[1] = (unint64_t)(v7 - 32) | 0x8000000000000000;
    goto LABEL_21;
  }
  if ((LODWORD(a2) & 0x7FFFFF) != 0 && !(LODWORD(a2) >> 23))
  {
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *uint64_t v9 = 0xD000000000000017;
    v9[1] = 0x8000000260BFF010;
LABEL_20:
    BOOL v5 = v9 + 2;
LABEL_21:
    *BOOL v5 = 4;
    return swift_willThrow();
  }
  uint64_t v10 = Float.exponent.getter();
  if (__OFADD__(v10, a1))
  {
    __break(1u);
LABEL_26:
    unint64_t v31 = 0;
    unint64_t v32 = 0xE000000000000000;
    _StringGuts.grow(_:)(80);
    v27._countAndFlagsBits = 0x74616F6C46;
    v27._object = (void *)0xE500000000000000;
    String.append(_:)(v27);
    v28._countAndFlagsBits = 0xD00000000000001ELL;
    v28._object = (void *)0x8000000260BFEF90;
    String.append(_:)(v28);
    v29._countAndFlagsBits = 0x3436746E4955;
    v29._object = (void *)0xE600000000000000;
    String.append(_:)(v29);
    v30._countAndFlagsBits = 0xD00000000000002ELL;
    v30._object = (void *)0x8000000260BFEFB0;
    String.append(_:)(v30);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if ((uint64_t)(v10 + a1) > 63)
  {
    unint64_t v31 = 0;
    unint64_t v32 = 0xE000000000000000;
    _StringGuts.grow(_:)(75);
    v18._object = (void *)0x8000000260BFEF10;
    v18._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v18);
    Float.exponent.getter();
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 0xD000000000000018;
    v20._object = (void *)0x8000000260BFEF30;
    String.append(_:)(v20);
    v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._object = (void *)0x8000000260BFEF50;
    v22._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v22);
    uint64_t v33 = 64;
    v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    uint64_t v16 = 46;
    unint64_t v17 = 0xE100000000000000;
    goto LABEL_19;
  }
  uint64_t v11 = 1 << a1;
  if (a1 >= 0x40) {
    uint64_t v11 = 0;
  }
  if (a1 > 0x40) {
    uint64_t v11 = 0;
  }
  specialized static FixedWidthInteger._convert<A>(from:)((uint64_t)&v31, fabsf(rintf((float)(unint64_t)v11 * a2)));
  if (v32) {
    goto LABEL_26;
  }
  unint64_t v12 = v31;
  if (v31 > 0x7FFFFFFF80000000)
  {
    unint64_t v31 = 0;
    unint64_t v32 = 0xE000000000000000;
    _StringGuts.grow(_:)(49);
    v13._countAndFlagsBits = 0x6C615674616F6C66;
    v13._object = (void *)0xEB000000003D6575;
    String.append(_:)(v13);
    *(float *)&uint64_t v33 = a2;
    _print_unlocked<A, B>(_:_:)();
    v14._countAndFlagsBits = 0xD000000000000020;
    v14._object = (void *)0x8000000260BFEFE0;
    String.append(_:)(v14);
    uint64_t v33 = v12;
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    uint64_t v16 = 11817;
    unint64_t v17 = 0xE200000000000000;
LABEL_19:
    String.append(_:)(*(Swift::String *)&v16);
    unint64_t v24 = v31;
    unint64_t v25 = v32;
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *uint64_t v9 = v24;
    v9[1] = v25;
    goto LABEL_20;
  }
  if (a2 >= 0.0) {
    return v31;
  }
  else {
    return 0xFFFFFFFF00000001 - v31;
  }
}

uint64_t default argument 1 of FieldElement.init<A>(bytes:mask:)()
{
  return dispatch thunk of static FixedWidthInteger.max.getter();
}

void specialized FieldElement.init<A>(bytes:mask:)(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, unint64_t a4@<X4>, unint64_t *a5@<X8>)
{
  if (__OFSUB__(a3 >> 1, a2))
  {
    __break(1u);
    return;
  }
  if ((a3 >> 1) - a2 == 5)
  {
    uint64_t v8 = specialized decodeInteger<A, B>(from:encodedLength:)(a1, a2, a3, 5);
    swift_unknownObjectRelease();
    if (v5) {
      return;
    }
    if ((v8 & a4) < 0xFFFEB00001)
    {
      specialized FieldElement.init(_:)(v8 & a4, a5);
      return;
    }
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *(void *)uint64_t v13 = 0;
    *(void *)(v13 + 8) = 0;
    *(unsigned char *)(v13 + 16) = 5;
  }
  else
  {
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 0x203A746F67202CLL;
    v10._object = (void *)0xE700000000000000;
    String.append(_:)(v10);
    swift_unknownObjectRelease();
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *(void *)uint64_t v12 = 0xD000000000000019;
    *(void *)(v12 + 8) = 0x8000000260BFF190;
    *(unsigned char *)(v12 + 16) = 0;
  }
  swift_willThrow();
}

void specialized FieldElement.init<A>(bytes:mask:)(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, unsigned int a4@<W4>, _DWORD *a5@<X8>)
{
  if (!__OFSUB__(a3 >> 1, a2))
  {
    if ((a3 >> 1) - a2 == 4)
    {
      int v8 = specialized decodeInteger<A, B>(from:encodedLength:)(a1, a2, a3, 4);
      if (v5)
      {
LABEL_8:
        swift_unknownObjectRelease();
        return;
      }
      uint64_t v9 = v8 & a4;
      if (v9 < 0xFFF00001)
      {
        specialized FieldElement.init(_:)(v9, a5);
        goto LABEL_8;
      }
      lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
      swift_allocError();
      *(void *)uint64_t v14 = 0;
      *(void *)(v14 + 8) = 0;
      *(unsigned char *)(v14 + 16) = 5;
    }
    else
    {
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      v11._countAndFlagsBits = 0x203A746F67202CLL;
      v11._object = (void *)0xE700000000000000;
      String.append(_:)(v11);
      v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
      swift_allocError();
      *(void *)uint64_t v13 = 0xD000000000000019;
      *(void *)(v13 + 8) = 0x8000000260BFF090;
      *(unsigned char *)(v13 + 16) = 0;
    }
    swift_willThrow();
    goto LABEL_8;
  }
  __break(1u);
}

void specialized FieldElement.init<A>(bytes:mask:)(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, unint64_t *a5@<X8>)
{
  if (!__OFSUB__(a3 >> 1, a2))
  {
    if ((a3 >> 1) - a2 == 8)
    {
      uint64_t v8 = specialized decodeInteger<A, B>(from:encodedLength:)(a1, a2, a3, 8);
      if (v5)
      {
LABEL_8:
        swift_unknownObjectRelease();
        return;
      }
      unint64_t v9 = v8 & a4;
      if (v9 < 0xFFFFFFFF00000001)
      {
        specialized FieldElement.init(_:)(v9, a5);
        goto LABEL_8;
      }
      lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
      swift_allocError();
      *(void *)uint64_t v14 = 0;
      *(void *)(v14 + 8) = 0;
      *(unsigned char *)(v14 + 16) = 5;
    }
    else
    {
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      v11._countAndFlagsBits = 0x203A746F67202CLL;
      v11._object = (void *)0xE700000000000000;
      String.append(_:)(v11);
      v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
      swift_allocError();
      *(void *)uint64_t v13 = 0xD000000000000019;
      *(void *)(v13 + 8) = 0x8000000260BFE9D0;
      *(unsigned char *)(v13 + 16) = 0;
    }
    swift_willThrow();
    goto LABEL_8;
  }
  __break(1u);
}

uint64_t specialized FieldElement.init(inputVector:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, unint64_t *a4@<X8>)
{
  int64_t v8 = a3 >> 1;
  if (__OFSUB__(a3 >> 1, a2))
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  BOOL v4 = a4;
  uint64_t result = specialized static FieldElement.assertValidBitLength(_:)((a3 >> 1) - a2);
  if (v5) {
    return swift_unknownObjectRelease();
  }
  if (one-time initialization token for one != -1)
  {
LABEL_9:
    uint64_t result = swift_once();
    uint64_t v11 = v8 - v6;
    BOOL v10 = v8 <= v6;
    if (v8 == v6)
    {
LABEL_6:
      unint64_t v12 = 0;
LABEL_7:
      uint64_t result = swift_unknownObjectRelease();
      *BOOL v4 = v12;
      return result;
    }
    goto LABEL_10;
  }
  uint64_t v11 = v8 - v6;
  BOOL v10 = v8 <= v6;
  if (v8 == v6) {
    goto LABEL_6;
  }
LABEL_10:
  if (v10) {
    goto LABEL_42;
  }
  unint64_t v12 = 0;
  unint64_t v13 = static Field40.one;
  uint64_t v14 = (unint64_t *)(v7 + 8 * v6);
  while (1)
  {
    unint64_t v15 = *v14++;
    uint64_t v16 = (v15 * (unsigned __int128)v13) >> 64;
    uint64_t v17 = (0xCFFE47FFFEAFFFFFLL * v15 * v13 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
    BOOL v18 = __CFADD__(-(uint64_t)(v15 * v13), v15 * v13);
    BOOL v19 = __CFADD__(v17, v16);
    uint64_t v20 = v17 + v16;
    if (v19) {
      goto LABEL_21;
    }
    if (v20 == -1) {
      break;
    }
    unint64_t v22 = v20 + v18;
    if (v22 >= 0xFFFEB00001) {
      v22 -= 0xFFFEB00001;
    }
    if (!v22) {
      goto LABEL_13;
    }
LABEL_23:
    BOOL v19 = v22 <= 0xFFFEB00001;
    unint64_t v23 = 0xFFFEB00001 - v22;
    if (!v19) {
      goto LABEL_38;
    }
    if (v12 >= v23)
    {
      v12 -= v23;
    }
    else
    {
      BOOL v19 = v23 <= 0xFFFEB00001;
      unint64_t v24 = 0xFFFEB00001 - v23;
      if (!v19) {
        goto LABEL_40;
      }
      BOOL v19 = __CFADD__(v12, v24);
      v12 += v24;
      if (v19) {
        goto LABEL_41;
      }
    }
LABEL_13:
    unint64_t v13 = (33555104 * v13 * (unsigned __int128)0xFFFEB00001uLL + v13 * (unsigned __int128)0x36FFFFD60uLL) >> 64;
    if (v13 >= 0xFFFEB00001) {
      v13 -= 0xFFFEB00001;
    }
    if (!--v11) {
      goto LABEL_7;
    }
  }
  if (v18)
  {
    BOOL v18 = 1;
LABEL_21:
    uint64_t v21 = v18 + v20;
    BOOL v19 = __CFADD__(v21, 0xFFFFFF00014FFFFFLL);
    unint64_t v22 = v21 - 0xFFFEB00001;
    if (v19) {
      goto LABEL_39;
    }
    if (!v22) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

{
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t result;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  int64_t v8 = a3 >> 1;
  if (__OFSUB__(a3 >> 1, a2))
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  BOOL v4 = a4;
  uint64_t result = specialized static FieldElement.assertValidBitLength(_:)((a3 >> 1) - a2);
  if (v5) {
    return swift_unknownObjectRelease();
  }
  if (one-time initialization token for one != -1)
  {
LABEL_9:
    uint64_t result = swift_once();
    uint64_t v11 = v8 - v6;
    BOOL v10 = v8 <= v6;
    if (v8 == v6)
    {
LABEL_6:
      unint64_t v12 = 0;
LABEL_7:
      uint64_t result = swift_unknownObjectRelease();
      *BOOL v4 = v12;
      return result;
    }
    goto LABEL_10;
  }
  uint64_t v11 = v8 - v6;
  BOOL v10 = v8 <= v6;
  if (v8 == v6) {
    goto LABEL_6;
  }
LABEL_10:
  if (v10) {
    goto LABEL_53;
  }
  unint64_t v12 = 0;
  unint64_t v13 = static Field64.one;
  uint64_t v14 = (unint64_t *)(v7 + 8 * v6);
  while (1)
  {
    BOOL v18 = *v14++;
    BOOL v19 = (v18 * (unsigned __int128)v13) >> 64;
    uint64_t v20 = (0xFFFFFFFEFFFFFFFFLL * v18 * v13 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
    uint64_t v21 = __CFADD__(-(uint64_t)(v18 * v13), v18 * v13);
    unint64_t v22 = v20 + v19;
    if (__CFADD__(v20, v19)) {
      goto LABEL_20;
    }
    if (v22 != -1) {
      break;
    }
    if (!v21)
    {
      unint64_t v25 = 0xFFFFFFFE00000003;
      goto LABEL_24;
    }
    uint64_t v21 = 1;
LABEL_20:
    unint64_t v23 = v21 + v22;
    uint64_t v17 = __CFADD__(v23, 0xFFFFFFFFLL);
    unint64_t v24 = v23 + 0xFFFFFFFFLL;
    if (v17) {
      goto LABEL_50;
    }
    if (v24) {
      goto LABEL_22;
    }
LABEL_36:
    Swift::String v27 = 2 * v13;
    Swift::String v28 = 0x1FFFFFFFELL * v13;
    Swift::String v29 = (v13 * (unsigned __int128)0x1FFFFFFFEuLL) >> 64;
    Swift::String v30 = ((unint64_t)v27 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
    unint64_t v15 = __CFADD__(-v28, v28);
    uint64_t v17 = __CFADD__(v30, v29);
    unint64_t v31 = v30 + v29;
    if (!v17)
    {
      if (v31 != -1)
      {
        unint64_t v13 = v31 + v15;
        if (v13 >= 0xFFFFFFFF00000001) {
          v13 += 0xFFFFFFFFLL;
        }
        goto LABEL_14;
      }
      if (!v15)
      {
        unint64_t v13 = 4294967294;
        goto LABEL_14;
      }
      unint64_t v15 = 1;
    }
    uint64_t v16 = v15 + v31;
    uint64_t v17 = __CFADD__(v16, 0xFFFFFFFFLL);
    unint64_t v13 = v16 + 0xFFFFFFFFLL;
    if (v17) {
      goto LABEL_49;
    }
LABEL_14:
    if (!--v11) {
      goto LABEL_7;
    }
  }
  unint64_t v24 = v22 + v21;
  if (v24 >= 0xFFFFFFFF00000001) {
    v24 += 0xFFFFFFFFLL;
  }
  if (!v24) {
    goto LABEL_36;
  }
LABEL_22:
  uint64_t v17 = v24 <= 0xFFFFFFFF00000001;
  unint64_t v25 = 0xFFFFFFFF00000001 - v24;
  if (v17)
  {
LABEL_24:
    if (v12 >= v25)
    {
      v12 -= v25;
    }
    else
    {
      uint64_t v17 = v25 <= 0xFFFFFFFF00000001;
      BOOL v26 = 0xFFFFFFFF00000001 - v25;
      if (!v17) {
        goto LABEL_51;
      }
      uint64_t v17 = __CFADD__(v12, v26);
      v12 += v26;
      if (v17) {
        goto LABEL_52;
      }
    }
    goto LABEL_36;
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

uint64_t specialized FieldElement.init(inputVector:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, unsigned int *a4@<X8>)
{
  int64_t v8 = a3 >> 1;
  if (__OFSUB__(a3 >> 1, a2))
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  BOOL v4 = a4;
  uint64_t result = specialized static FieldElement.assertValidBitLength(_:)((a3 >> 1) - a2);
  if (v5) {
    return swift_unknownObjectRelease();
  }
  if (one-time initialization token for one != -1)
  {
LABEL_9:
    uint64_t result = swift_once();
    uint64_t v11 = v8 - v6;
    BOOL v10 = v8 <= v6;
    if (v8 == v6)
    {
LABEL_6:
      unsigned int v12 = 0;
LABEL_7:
      uint64_t result = swift_unknownObjectRelease();
      *BOOL v4 = v12;
      return result;
    }
    goto LABEL_10;
  }
  uint64_t v11 = v8 - v6;
  BOOL v10 = v8 <= v6;
  if (v8 == v6) {
    goto LABEL_6;
  }
LABEL_10:
  if (v10) {
    goto LABEL_41;
  }
  unsigned int v12 = 0;
  LODWORD(v13) = static Field32.one;
  uint64_t v14 = (unsigned int *)(v7 + 4 * v6);
  while (1)
  {
    unsigned int v15 = *v14++;
    unint64_t v16 = v15 * (unint64_t)v13;
    uint64_t v17 = 4293918721 * (-1048577 * v16);
    BOOL v18 = __CFADD__(v17, v16);
    unint64_t v19 = (v17 + v16) >> 32;
    if (v18)
    {
      BOOL v18 = __CFADD__(v19, 0xFFFFF);
      LODWORD(v19) = v19 + 0xFFFFF;
      if (v18) {
        goto LABEL_38;
      }
      if (!v19) {
        goto LABEL_32;
      }
    }
    else
    {
      if (v19 >= 0xFFF00001) {
        LODWORD(v19) = v19 + 0xFFFFF;
      }
      if (!v19) {
        goto LABEL_32;
      }
    }
    BOOL v18 = v19 <= 0xFFF00001;
    unsigned int v20 = -1048575 - v19;
    if (!v18) {
      goto LABEL_37;
    }
    if (v12 >= v20)
    {
      v12 -= v20;
    }
    else
    {
      BOOL v18 = v20 <= 0xFFF00001;
      unsigned int v21 = -1048575 - v20;
      if (!v18) {
        goto LABEL_39;
      }
      BOOL v18 = __CFADD__(v12, v21);
      v12 += v21;
      if (v18) {
        goto LABEL_40;
      }
    }
LABEL_32:
    uint64_t v22 = 2097150 * v13;
    uint64_t v23 = 4293918721 * (2 * v13);
    BOOL v18 = __CFADD__(v23, v22);
    unint64_t v13 = (unint64_t)(v23 + v22) >> 32;
    if (!v18)
    {
      if (v13 >= 0xFFF00001) {
        LODWORD(v13) = v13 + 0xFFFFF;
      }
      goto LABEL_14;
    }
    BOOL v18 = __CFADD__(v13, 0xFFFFF);
    LODWORD(v13) = v13 + 0xFFFFF;
    if (v18) {
      break;
    }
LABEL_14:
    if (!--v11) {
      goto LABEL_7;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized static FieldElement.assertValidBitLength(_:)(uint64_t result)
{
  if (result >= 40)
  {
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    v2._countAndFlagsBits = 0xD000000000000015;
    v2._object = (void *)0x8000000260BFEC20;
    String.append(_:)(v2);
    v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *(void *)uint64_t v4 = 0xD000000000000011;
    *(void *)(v4 + 8) = 0x8000000260BFEC00;
    *(unsigned char *)(v4 + 16) = 3;
    return swift_willThrow();
  }
  return result;
}

{
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;

  if (result >= 32)
  {
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    v2._countAndFlagsBits = 0xD000000000000015;
    v2._object = (void *)0x8000000260BFEC20;
    String.append(_:)(v2);
    v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *(void *)uint64_t v4 = 0xD000000000000011;
    *(void *)(v4 + 8) = 0x8000000260BFEC00;
    *(unsigned char *)(v4 + 16) = 3;
    return swift_willThrow();
  }
  return result;
}

{
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;

  if (result >= 64)
  {
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    v2._countAndFlagsBits = 0xD000000000000015;
    v2._object = (void *)0x8000000260BFEC20;
    String.append(_:)(v2);
    v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *(void *)uint64_t v4 = 0xD000000000000011;
    *(void *)(v4 + 8) = 0x8000000260BFEC00;
    *(unsigned char *)(v4 + 16) = 3;
    return swift_willThrow();
  }
  return result;
}

uint64_t specialized static FieldElement.encode(_:into:with:)(uint64_t result, char **a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a3 >= 65)
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v5._countAndFlagsBits = 2113056;
    v5._object = (void *)0xE300000000000000;
    String.append(_:)(v5);
    v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    unint64_t v7 = 0x8000000260BFEE90;
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *(void *)uint64_t v8 = 0xD000000000000012;
    char v9 = 2;
LABEL_20:
    *(void *)(v8 + 8) = v7;
    *(unsigned char *)(v8 + 16) = v9;
    return swift_willThrow();
  }
  if (a3 < 0)
  {
    __break(1u);
    return result;
  }
  unint64_t v10 = result;
  if (a3)
  {
    uint64_t v21 = result;
    uint64_t v11 = *a2;
    unint64_t v10 = result;
    do
    {
      uint64_t v12 = ((uint64_t)(v10 << 63) >> 63) & 0x160DCD7524;
      if (__CFADD__(-v12, v12)) {
        unint64_t v13 = ((0xCFFE47FFFEAFFFFFLL * v12 * (unsigned __int128)0xFFFEB00001uLL) >> 64) + 1;
      }
      else {
        unint64_t v13 = (0xCFFE47FFFEAFFFFFLL * v12 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
      }
      if (v13 >= 0xFFFEB00001) {
        unint64_t v14 = 0;
      }
      else {
        unint64_t v14 = v13;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v11 + 2) + 1, 1, v11, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field40>);
      }
      unint64_t v16 = *((void *)v11 + 2);
      unint64_t v15 = *((void *)v11 + 3);
      if (v16 >= v15 >> 1) {
        uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, v11, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field40>);
      }
      *((void *)v11 + 2) = v16 + 1;
      *(void *)&v11[8 * v16 + 32] = v14;
      v10 >>= 1;
      --v3;
    }
    while (v3);
    uint64_t result = v21;
    *a2 = v11;
  }
  if (v10)
  {
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 0x6962206874697720;
    v18._object = (void *)0xEF3D687464695774;
    String.append(_:)(v18);
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    unint64_t v7 = 0x8000000260BFEE70;
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *(void *)uint64_t v8 = 0xD000000000000014;
    char v9 = 1;
    goto LABEL_20;
  }
  return result;
}

uint64_t specialized static FieldElement.encode(_:into:with:)(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = a3;
  if (a3 >= 33)
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = 2113056;
    v7._object = (void *)0xE300000000000000;
    String.append(_:)(v7);
    v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    unint64_t v9 = 0x8000000260BFEE90;
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *(void *)uint64_t v10 = 0xD000000000000012;
    char v11 = 2;
    goto LABEL_16;
  }
  if (a3 < 0)
  {
    __break(1u);
LABEL_19:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1, (char *)v4);
    uint64_t v4 = result;
LABEL_6:
    unint64_t v13 = *(void *)(v4 + 16);
    unsigned int v12 = v3;
    do
    {
      if (v12) {
        uint64_t v14 = 266338049;
      }
      else {
        uint64_t v14 = 0;
      }
      unint64_t v15 = *(void *)(v4 + 24);
      if (v13 >= v15 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v13 + 1, 1, (char *)v4);
        uint64_t v4 = result;
      }
      *(void *)(v4 + 16) = v13 + 1;
      *(_DWORD *)(v4 + 4 * v13 + 32) = (v14 + 4293918721u * (unint64_t)(-1048577 * v14)) >> 32;
      v12 >>= 1;
      ++v13;
      --v5;
    }
    while (v5);
    *Swift::String v19 = v4;
    goto LABEL_14;
  }
  unsigned int v3 = result;
  unsigned int v12 = result;
  if (a3)
  {
    Swift::String v19 = a2;
    uint64_t v4 = *a2;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_14:
  if (!v12) {
    return result;
  }
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 0x6962206874697720;
  v17._object = (void *)0xEF3D687464695774;
  String.append(_:)(v17);
  v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  unint64_t v9 = 0x8000000260BFEE70;
  lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
  swift_allocError();
  *(void *)uint64_t v10 = 0xD000000000000014;
  char v11 = 1;
LABEL_16:
  *(void *)(v10 + 8) = v9;
  *(unsigned char *)(v10 + 16) = v11;
  return swift_willThrow();
}

{
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;

  unsigned int v3 = a3;
  if (a3 >= 65)
  {
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v5._countAndFlagsBits = 2113056;
    v5._object = (void *)0xE300000000000000;
    String.append(_:)(v5);
    v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    Swift::String v7 = 0x8000000260BFEE90;
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *(void *)Swift::String v8 = 0xD000000000000012;
    unint64_t v9 = 2;
LABEL_19:
    *(void *)(v8 + 8) = v7;
    *(unsigned char *)(v8 + 16) = v9;
    return swift_willThrow();
  }
  if (a3 < 0)
  {
    __break(1u);
    return result;
  }
  uint64_t v10 = result;
  if (a3)
  {
    char v11 = *a2;
    uint64_t v10 = result;
    do
    {
      unsigned int v12 = ((uint64_t)(v10 << 63) >> 63) & 0xFFFFFFFE00000001;
      unint64_t v13 = ((unint64_t)-(uint64_t)(v12 | (v12 << 32)) * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      if (__CFADD__(-(uint64_t)v12, v12))
      {
        if (v13 > 0xFFFFFFFEFFFFFFFFLL) {
          unint64_t v13 = 0;
        }
        else {
          ++v13;
        }
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v11 + 16) + 1, 1, (char *)v11, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
        char v11 = result;
      }
      unint64_t v15 = *(void *)(v11 + 16);
      uint64_t v14 = *(void *)(v11 + 24);
      if (v15 >= v14 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1, (char *)v11, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
        char v11 = result;
      }
      *(void *)(v11 + 16) = v15 + 1;
      *(void *)(v11 + 8 * v15 + 32) = v13;
      v10 >>= 1;
      --v3;
    }
    while (v3);
    *a2 = v11;
  }
  if (v10)
  {
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 0x6962206874697720;
    v17._object = (void *)0xEF3D687464695774;
    String.append(_:)(v17);
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    Swift::String v7 = 0x8000000260BFEE70;
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *(void *)Swift::String v8 = 0xD000000000000014;
    unint64_t v9 = 1;
    goto LABEL_19;
  }
  return result;
}

uint64_t specialized FieldElement.encode<A>(into:)(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = specialized FieldElement.integerValue.getter(a2);
  uint64_t v4 = *a1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1, (char *)v4);
    uint64_t v4 = result;
  }
  unint64_t v7 = *(void *)(v4 + 16);
  unint64_t v6 = *(void *)(v4 + 24);
  int64_t v8 = v6 >> 1;
  unint64_t v9 = v7 + 1;
  if (v6 >> 1 <= v7)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1, (char *)v4);
    uint64_t v4 = result;
    unint64_t v6 = *(void *)(result + 24);
    int64_t v8 = v6 >> 1;
  }
  *(void *)(v4 + 16) = v9;
  *(unsigned char *)(v4 + v7 + 32) = v3;
  unint64_t v10 = v7 + 2;
  if (v8 < (uint64_t)(v7 + 2))
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 2, 1, (char *)v4);
    uint64_t v4 = result;
    unint64_t v6 = *(void *)(result + 24);
    int64_t v8 = v6 >> 1;
  }
  *(void *)(v4 + 16) = v10;
  *(unsigned char *)(v4 + v9 + 32) = BYTE1(v3);
  unint64_t v11 = v7 + 3;
  if (v8 < (uint64_t)(v7 + 3))
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 3, 1, (char *)v4);
    uint64_t v4 = result;
    unint64_t v6 = *(void *)(result + 24);
    int64_t v8 = v6 >> 1;
  }
  *(void *)(v4 + 16) = v11;
  *(unsigned char *)(v4 + v10 + 32) = BYTE2(v3);
  unint64_t v12 = v7 + 4;
  if (v8 < (uint64_t)(v7 + 4))
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 4, 1, (char *)v4);
    uint64_t v4 = result;
    unint64_t v6 = *(void *)(result + 24);
    int64_t v8 = v6 >> 1;
  }
  *(void *)(v4 + 16) = v12;
  *(unsigned char *)(v4 + v11 + 32) = BYTE3(v3);
  if (v8 < (uint64_t)(v7 + 5))
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 5, 1, (char *)v4);
    uint64_t v4 = result;
  }
  *(void *)(v4 + 16) = v7 + 5;
  *(unsigned char *)(v4 + v12 + 32) = BYTE4(v3);
  *a1 = v4;
  return result;
}

{
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  unint64_t v3 = specialized FieldElement.integerValue.getter(a2);
  uint64_t v4 = *a1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1, (char *)v4);
    uint64_t v4 = result;
  }
  unint64_t v7 = *(void *)(v4 + 16);
  unint64_t v6 = *(void *)(v4 + 24);
  int64_t v8 = v6 >> 1;
  unint64_t v9 = v7 + 1;
  if (v6 >> 1 <= v7)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1, (char *)v4);
    uint64_t v4 = result;
    unint64_t v6 = *(void *)(result + 24);
    int64_t v8 = v6 >> 1;
  }
  *(void *)(v4 + 16) = v9;
  *(unsigned char *)(v4 + v7 + 32) = v3;
  unint64_t v10 = v7 + 2;
  if (v8 < (uint64_t)(v7 + 2))
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 2, 1, (char *)v4);
    uint64_t v4 = result;
    unint64_t v6 = *(void *)(result + 24);
    int64_t v8 = v6 >> 1;
  }
  *(void *)(v4 + 16) = v10;
  *(unsigned char *)(v4 + v9 + 32) = BYTE1(v3);
  unint64_t v11 = v7 + 3;
  if (v8 < (uint64_t)(v7 + 3))
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 3, 1, (char *)v4);
    uint64_t v4 = result;
    unint64_t v6 = *(void *)(result + 24);
    int64_t v8 = v6 >> 1;
  }
  *(void *)(v4 + 16) = v11;
  *(unsigned char *)(v4 + v10 + 32) = BYTE2(v3);
  unint64_t v12 = v7 + 4;
  if (v8 < (uint64_t)(v7 + 4))
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 4, 1, (char *)v4);
    uint64_t v4 = result;
    unint64_t v6 = *(void *)(result + 24);
    int64_t v8 = v6 >> 1;
  }
  *(void *)(v4 + 16) = v12;
  *(unsigned char *)(v4 + v11 + 32) = BYTE3(v3);
  unint64_t v13 = v7 + 5;
  if (v8 < (uint64_t)(v7 + 5))
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 5, 1, (char *)v4);
    uint64_t v4 = result;
    unint64_t v6 = *(void *)(result + 24);
    int64_t v8 = v6 >> 1;
  }
  *(void *)(v4 + 16) = v13;
  *(unsigned char *)(v4 + v12 + 32) = BYTE4(v3);
  uint64_t v14 = v7 + 6;
  if (v8 < (uint64_t)(v7 + 6))
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 6, 1, (char *)v4);
    uint64_t v4 = result;
    unint64_t v6 = *(void *)(result + 24);
    int64_t v8 = v6 >> 1;
  }
  *(void *)(v4 + 16) = v14;
  *(unsigned char *)(v4 + v13 + 32) = BYTE5(v3);
  unint64_t v15 = v7 + 7;
  if (v8 < (uint64_t)(v7 + 7))
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 7, 1, (char *)v4);
    uint64_t v4 = result;
    unint64_t v6 = *(void *)(result + 24);
    int64_t v8 = v6 >> 1;
  }
  *(void *)(v4 + 16) = v15;
  *(unsigned char *)(v4 + v14 + 32) = BYTE6(v3);
  if (v8 < (uint64_t)(v7 + 8))
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 8, 1, (char *)v4);
    uint64_t v4 = result;
  }
  *(void *)(v4 + 16) = v7 + 8;
  *(unsigned char *)(v4 + v15 + 32) = HIBYTE(v3);
  *a1 = v4;
  return result;
}

uint64_t specialized FieldElement.encode<A>(into:)(uint64_t *a1, unsigned int a2)
{
  if (((a2 + 4293918721u * (unint64_t)(-1048577 * a2)) >> 32) >= 0xFFF00001) {
    int v3 = 0;
  }
  else {
    int v3 = (a2 + 4293918721u * (unint64_t)(-1048577 * a2)) >> 32;
  }
  uint64_t v4 = *a1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1, (char *)v4);
    uint64_t v4 = result;
  }
  unint64_t v7 = *(void *)(v4 + 16);
  unint64_t v6 = *(void *)(v4 + 24);
  int64_t v8 = v6 >> 1;
  unint64_t v9 = v7 + 1;
  if (v6 >> 1 <= v7)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1, (char *)v4);
    uint64_t v4 = result;
    unint64_t v6 = *(void *)(result + 24);
    int64_t v8 = v6 >> 1;
  }
  *(void *)(v4 + 16) = v9;
  *(unsigned char *)(v4 + v7 + 32) = v3;
  unint64_t v10 = v7 + 2;
  if (v8 < (uint64_t)(v7 + 2))
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 2, 1, (char *)v4);
    uint64_t v4 = result;
    unint64_t v6 = *(void *)(result + 24);
    int64_t v8 = v6 >> 1;
  }
  *(void *)(v4 + 16) = v10;
  *(unsigned char *)(v4 + v9 + 32) = BYTE1(v3);
  unint64_t v11 = v7 + 3;
  if (v8 < (uint64_t)(v7 + 3))
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 3, 1, (char *)v4);
    uint64_t v4 = result;
    unint64_t v6 = *(void *)(result + 24);
    int64_t v8 = v6 >> 1;
  }
  *(void *)(v4 + 16) = v11;
  *(unsigned char *)(v4 + v10 + 32) = BYTE2(v3);
  if (v8 < (uint64_t)(v7 + 4))
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 4, 1, (char *)v4);
    uint64_t v4 = result;
  }
  *(void *)(v4 + 16) = v7 + 4;
  *(unsigned char *)(v4 + v11 + 32) = HIBYTE(v3);
  *a1 = v4;
  return result;
}

uint64_t specialized FieldElement.pow(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3 = a2;
  unint64_t v4 = a1;
  unint64_t v6 = 0x1B7FFFEB0;
  *a3 = a2;
  uint64_t result = protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(a1, &v22);
  if (v22 == 0)
  {
LABEL_2:
    *a3 = v6;
    return result;
  }
  while (1)
  {
    uint64_t result = protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(v4 & 1, &v22);
    unint64_t v9 = *((void *)&v22 + 1) | v22;
    if (v22 == 0) {
      goto LABEL_26;
    }
    uint64_t v10 = (v3 * (unsigned __int128)v6) >> 64;
    uint64_t v11 = (0xCFFE47FFFEAFFFFFLL * v3 * v6 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
    BOOL v12 = __CFADD__(-(uint64_t)(v3 * v6), v3 * v6);
    BOOL v13 = __CFADD__(v11, v10);
    uint64_t v14 = v11 + v10;
    if (v13)
    {
      unint64_t v15 = v14 + v12;
    }
    else
    {
      if (v14 != -1)
      {
        unint64_t v9 = 0;
        unint64_t v16 = v14 + v12;
        if (v16 >= 0xFFFEB00001) {
          unint64_t v6 = v16 - 0xFFFEB00001;
        }
        else {
          unint64_t v6 = v16;
        }
        goto LABEL_26;
      }
      unint64_t v15 = 0;
      if (!v12)
      {
        unint64_t v9 = 0;
        unint64_t v6 = 0xFFFFFF00014FFFFELL;
        goto LABEL_26;
      }
    }
    unint64_t v6 = v15 - 0xFFFEB00001;
    if (v15 >= 0xFFFEB00001) {
      goto LABEL_33;
    }
    unint64_t v9 = 0;
LABEL_26:
    uint64_t v17 = (__PAIR128__(v9, v3) * __PAIR128__(v9, v3)) >> 64;
    uint64_t v18 = (0xCFFE47FFFEAFFFFFLL * v3 * v3 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
    BOOL v19 = __CFADD__(-(uint64_t)(v3 * v3), v3 * v3);
    BOOL v13 = __CFADD__(v18, v17);
    uint64_t v20 = v18 + v17;
    if (!v13)
    {
      if (v20 == -1)
      {
        unint64_t v3 = 0xFFFFFF00014FFFFELL;
        if (v19) {
          unint64_t v3 = 0xFFFFFF00014FFFFFLL;
        }
      }
      else
      {
        unint64_t v8 = v20 + v19;
        if (v8 >= 0xFFFEB00001) {
          unint64_t v3 = v8 - 0xFFFEB00001;
        }
        else {
          unint64_t v3 = v8;
        }
      }
      goto LABEL_8;
    }
    unint64_t v21 = v20 + v19;
    unint64_t v3 = v21 - 0xFFFEB00001;
    if (v21 >= 0xFFFEB00001) {
      break;
    }
LABEL_8:
    v4 >>= 1;
    uint64_t result = protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(v4, &v22);
    if (v22 == 0) {
      goto LABEL_2;
    }
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t specialized FieldElement.pow(_:)@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int *a3@<X8>)
{
  unsigned int v3 = a2;
  LODWORD(v4) = a1;
  *a3 = a2;
  uint64_t result = specialized static FixedWidthInteger._truncatingInit<A>(_:)(a1, &v15);
  unsigned int v7 = 0xFFFFF;
  if (v15 == 0)
  {
LABEL_2:
    *a3 = v7;
    return result;
  }
  while (1)
  {
    uint64_t result = specialized static FixedWidthInteger._truncatingInit<A>(_:)(v4 & 1, &v15);
    if (v15 != 0)
    {
      unint64_t v8 = v3 * (unint64_t)v7;
      uint64_t v9 = 4293918721 * (-1048577 * v8);
      BOOL v10 = __CFADD__(v9, v8);
      unint64_t v11 = (v9 + v8) >> 32;
      if (v10)
      {
        unsigned int v7 = v11 + 0xFFFFF;
        if (v11 >= 0xFFF00001) {
          goto LABEL_20;
        }
      }
      else if (v11 >= 0xFFF00001)
      {
        unsigned int v7 = v11 + 0xFFFFF;
      }
      else
      {
        unsigned int v7 = v11;
      }
    }
    unint64_t v12 = v3 * (unint64_t)v3;
    uint64_t v13 = 4293918721 * (-1048577 * v12);
    BOOL v10 = __CFADD__(v13, v12);
    unint64_t v14 = (v13 + v12) >> 32;
    if (!v10)
    {
      if (v14 >= 0xFFF00001) {
        unsigned int v3 = v14 + 0xFFFFF;
      }
      else {
        unsigned int v3 = v14;
      }
      goto LABEL_7;
    }
    unsigned int v3 = v14 + 0xFFFFF;
    if (v14 >= 0xFFF00001) {
      break;
    }
LABEL_7:
    uint64_t v4 = v4 >> 1;
    uint64_t result = specialized static FixedWidthInteger._truncatingInit<A>(_:)(v4, &v15);
    if (v15 == 0) {
      goto LABEL_2;
    }
  }
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t specialized FieldElement.pow(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3 = a2;
  unint64_t v4 = a1;
  *a3 = a2;
  uint64_t result = protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(a1, &v22);
  if (v22 == 0)
  {
    uint64_t v7 = 0xFFFFFFFFLL;
LABEL_3:
    *a3 = v7;
    return result;
  }
  uint64_t v7 = 0xFFFFFFFFLL;
  while (1)
  {
    uint64_t result = protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(v4 & 1, &v22);
    unint64_t v9 = *((void *)&v22 + 1) | v22;
    if (v22 == 0) {
      goto LABEL_27;
    }
    uint64_t v10 = ((unint64_t)v3 * (unsigned __int128)(unint64_t)v7) >> 64;
    uint64_t v11 = (0xFFFFFFFEFFFFFFFFLL * v3 * v7 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
    BOOL v12 = __CFADD__(-(v3 * v7), v3 * v7);
    BOOL v13 = __CFADD__(v11, v10);
    uint64_t v14 = v11 + v10;
    if (v13)
    {
      unint64_t v15 = v14 + v12;
    }
    else
    {
      if (v14 != -1)
      {
        unint64_t v9 = 0;
        unint64_t v16 = v14 + v12;
        if (v16 >= 0xFFFFFFFF00000001) {
          uint64_t v7 = v16 + 0xFFFFFFFF;
        }
        else {
          uint64_t v7 = v16;
        }
        goto LABEL_27;
      }
      unint64_t v15 = 0;
      if (!v12)
      {
        unint64_t v9 = 0;
        uint64_t v7 = 4294967294;
        goto LABEL_27;
      }
    }
    uint64_t v7 = v15 + 0xFFFFFFFF;
    if (v15 >= 0xFFFFFFFF00000001) {
      goto LABEL_35;
    }
    unint64_t v9 = 0;
LABEL_27:
    uint64_t v17 = (__PAIR128__(v9, v3) * __PAIR128__(v9, v3)) >> 64;
    uint64_t v18 = (0xFFFFFFFEFFFFFFFFLL * v3 * v3 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
    BOOL v19 = __CFADD__(-(v3 * v3), v3 * v3);
    BOOL v13 = __CFADD__(v18, v17);
    uint64_t v20 = v18 + v17;
    if (!v13)
    {
      if (v20 == -1)
      {
        if (v19) {
          uint64_t v3 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v3 = 4294967294;
        }
      }
      else
      {
        unint64_t v8 = v20 + v19;
        if (v8 >= 0xFFFFFFFF00000001) {
          uint64_t v3 = v8 + 0xFFFFFFFF;
        }
        else {
          uint64_t v3 = v8;
        }
      }
      goto LABEL_9;
    }
    unint64_t v21 = v20 + v19;
    uint64_t v3 = v21 + 0xFFFFFFFF;
    if (v21 >= 0xFFFFFFFF00000001) {
      break;
    }
LABEL_9:
    v4 >>= 1;
    uint64_t result = protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(v4, &v22);
    if (v22 == 0) {
      goto LABEL_3;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

uint64_t specialized ParallelSum.evaluate<A>(at:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  unint64_t v3 = *(void *)(v2 + 16);
  if (!v3) {
    goto LABEL_70;
  }
  uint64_t v4 = *(void *)(result + 16);
  unint64_t v5 = 0;
  if ((uint64_t)v3 < 1 || v4 == 0)
  {
LABEL_7:
    *a2 = v5;
    return result;
  }
  uint64_t v7 = 0;
  uint64_t v8 = result + 32;
  uint64_t result = 1;
  while (1)
  {
    int64_t v9 = v7;
    unint64_t v10 = v4 - v7;
    BOOL v11 = __OFSUB__(v4, v7);
    BOOL v12 = __OFADD__(v7, v3);
    v7 += v3;
    if (v12)
    {
      if (v11) {
        goto LABEL_66;
      }
      if ((v10 & 0x8000000000000000) != 0) {
        goto LABEL_71;
      }
      BOOL v13 = v10 >= v3;
      int64_t v14 = v10 >= v3 ? v7 : v4;
      if (v13) {
        goto LABEL_71;
      }
      uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
      if (v14 < v9) {
        goto LABEL_59;
      }
    }
    else
    {
      if (v11) {
        goto LABEL_67;
      }
      if ((v10 & 0x8000000000000000) != 0)
      {
        int64_t v14 = v7;
        if (v7 < v9) {
          goto LABEL_59;
        }
      }
      else
      {
        if (v10 >= v3) {
          int64_t v14 = v7;
        }
        else {
          int64_t v14 = v4;
        }
        if (v14 < v9) {
          goto LABEL_59;
        }
      }
    }
    if ((result & 1) == 0) {
      goto LABEL_60;
    }
    if (v9 < 0) {
      goto LABEL_61;
    }
    if (v4 < v14) {
      goto LABEL_62;
    }
    if (v9 >= (unint64_t)v14) {
      goto LABEL_63;
    }
    uint64_t result = v9 + 1;
    if (v9 + 1 >= (unint64_t)v14) {
      goto LABEL_64;
    }
    unint64_t v15 = *(void *)(v8 + 8 * v9);
    unint64_t v16 = *(void *)(v8 + 8 * result);
    uint64_t v17 = (v16 * (unsigned __int128)v15) >> 64;
    uint64_t v18 = (0xCFFE47FFFEAFFFFFLL * v16 * v15 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
    uint64_t result = __CFADD__(-(uint64_t)(v16 * v15), v16 * v15);
    uint64_t v19 = v18 + v17;
    if (__CFADD__(v18, v17)) {
      goto LABEL_41;
    }
    if (v19 == -1) {
      break;
    }
    unint64_t v21 = v19 + result;
    uint64_t result = v21 - 0xFFFEB00001;
    if (v21 >= 0xFFFEB00001) {
      v21 -= 0xFFFEB00001;
    }
    if (!v21) {
      goto LABEL_9;
    }
LABEL_43:
    BOOL v13 = v21 <= 0xFFFEB00001;
    unint64_t v22 = 0xFFFEB00001 - v21;
    if (!v13) {
      goto LABEL_58;
    }
    uint64_t result = v5 - v22;
    if (v5 >= v22)
    {
      v5 -= v22;
    }
    else
    {
      BOOL v13 = v22 <= 0xFFFEB00001;
      unint64_t v23 = 0xFFFEB00001 - v22;
      if (!v13) {
        goto LABEL_68;
      }
      BOOL v13 = __CFADD__(v5, v23);
      v5 += v23;
      if (v13) {
        goto LABEL_69;
      }
    }
LABEL_9:
    uint64_t result = v4 >= v7;
    if (v7 >= v4) {
      goto LABEL_7;
    }
  }
  if (result)
  {
    uint64_t result = 1;
LABEL_41:
    uint64_t v20 = result + v19;
    BOOL v13 = __CFADD__(v20, 0xFFFFFF00014FFFFFLL);
    unint64_t v21 = v20 - 0xFFFEB00001;
    if (v13) {
      goto LABEL_65;
    }
    if (!v21) {
      goto LABEL_9;
    }
    goto LABEL_43;
  }
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
  return result;
}

void specialized ParallelSum.evaluate<A>(at:)(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, unint64_t *a4@<X8>)
{
  int64_t v5 = a3 >> 1;
  uint64_t v6 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2)) {
    goto LABEL_67;
  }
  uint64_t v7 = *(void *)(v4 + 16);
  if (!v7)
  {
LABEL_68:
    __break(1u);
    return;
  }
  BOOL v8 = v6 >= 0;
  if (v7 > 0) {
    BOOL v8 = v6 < 1;
  }
  if (!v8)
  {
    unint64_t v9 = 0;
    int64_t v10 = 0;
    while (1)
    {
      int64_t v12 = v10;
      BOOL v13 = __OFADD__(v10, v7);
      v10 += v7;
      if (v13) {
        int64_t v10 = (v10 >> 63) ^ 0x8000000000000000;
      }
      BOOL v13 = __OFADD__(a2, v12);
      uint64_t v14 = a2 + v12;
      if (v13)
      {
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
      uint64_t v15 = v5 - v14;
      if (__OFSUB__(v5, v14)) {
        goto LABEL_55;
      }
      if (v7 < 1)
      {
        if (v15 <= 0)
        {
          uint64_t v16 = v5;
          if (v7 < v15) {
            goto LABEL_24;
          }
        }
      }
      else if ((v15 & 0x8000000000000000) == 0)
      {
        uint64_t v16 = v5;
        if (v15 < (unint64_t)v7) {
          goto LABEL_24;
        }
      }
      uint64_t v16 = v14 + v7;
      if (__OFADD__(v14, v7)) {
        goto LABEL_64;
      }
LABEL_24:
      if (v16 < v14) {
        goto LABEL_56;
      }
      if (v5 < v14) {
        goto LABEL_57;
      }
      if (v14 < a2) {
        goto LABEL_58;
      }
      if (v5 < v16) {
        goto LABEL_59;
      }
      if (v16 < 0) {
        goto LABEL_60;
      }
      if (v14 >= v16) {
        goto LABEL_61;
      }
      uint64_t v17 = v14 + 1;
      if (v14 + 1 >= v16) {
        goto LABEL_62;
      }
      unint64_t v18 = *(void *)(a1 + 8 * v14);
      unint64_t v19 = *(void *)(a1 + 8 * v17);
      uint64_t v20 = (v19 * (unsigned __int128)v18) >> 64;
      uint64_t v21 = (0xCFFE47FFFEAFFFFFLL * v19 * v18 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
      BOOL v22 = __CFADD__(-(uint64_t)(v19 * v18), v19 * v18);
      uint64_t v23 = v21 + v20;
      if (__CFADD__(v21, v20)) {
        goto LABEL_36;
      }
      if (v23 == -1)
      {
        if (!v22)
        {
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }
        BOOL v22 = 1;
LABEL_36:
        uint64_t v24 = v22 + v23;
        BOOL v25 = __CFADD__(v24, 0xFFFFFF00014FFFFFLL);
        unint64_t v26 = v24 - 0xFFFEB00001;
        if (v25) {
          goto LABEL_63;
        }
        if (!v26) {
          goto LABEL_10;
        }
        goto LABEL_38;
      }
      unint64_t v26 = v23 + v22;
      if (v26 >= 0xFFFEB00001) {
        v26 -= 0xFFFEB00001;
      }
      if (!v26) {
        goto LABEL_10;
      }
LABEL_38:
      BOOL v25 = v26 <= 0xFFFEB00001;
      unint64_t v27 = 0xFFFEB00001 - v26;
      if (!v25) {
        goto LABEL_53;
      }
      if (v9 >= v27)
      {
        v9 -= v27;
      }
      else
      {
        BOOL v25 = v27 <= 0xFFFEB00001;
        unint64_t v28 = 0xFFFEB00001 - v27;
        if (!v25) {
          goto LABEL_65;
        }
        BOOL v25 = __CFADD__(v9, v28);
        v9 += v28;
        if (v25) {
          goto LABEL_66;
        }
      }
LABEL_10:
      BOOL v11 = v6 >= v10;
      if (v7 > 0) {
        BOOL v11 = v10 >= v6;
      }
      if (v11) {
        goto LABEL_7;
      }
    }
  }
  unint64_t v9 = 0;
LABEL_7:
  *a4 = v9;
}

{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  int64_t v10;
  BOOL v11;
  int64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;

  int64_t v5 = a3 >> 1;
  uint64_t v6 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2)) {
    goto LABEL_67;
  }
  uint64_t v7 = *(void *)(v4 + 16);
  if (!v7)
  {
LABEL_68:
    __break(1u);
    return;
  }
  BOOL v8 = v6 >= 0;
  if (v7 > 0) {
    BOOL v8 = v6 < 1;
  }
  if (!v8)
  {
    unint64_t v9 = 0;
    int64_t v10 = 0;
    while (1)
    {
      int64_t v12 = v10;
      BOOL v13 = __OFADD__(v10, v7);
      v10 += v7;
      if (v13) {
        int64_t v10 = (v10 >> 63) ^ 0x8000000000000000;
      }
      BOOL v13 = __OFADD__(a2, v12);
      uint64_t v14 = a2 + v12;
      if (v13)
      {
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
      uint64_t v15 = v5 - v14;
      if (__OFSUB__(v5, v14)) {
        goto LABEL_55;
      }
      if (v7 < 1)
      {
        if (v15 <= 0)
        {
          uint64_t v16 = a3 >> 1;
          if (v7 < v15) {
            goto LABEL_24;
          }
        }
      }
      else if ((v15 & 0x8000000000000000) == 0)
      {
        uint64_t v16 = a3 >> 1;
        if (v15 < (unint64_t)v7) {
          goto LABEL_24;
        }
      }
      uint64_t v16 = v14 + v7;
      if (__OFADD__(v14, v7)) {
        goto LABEL_64;
      }
LABEL_24:
      if (v16 < v14) {
        goto LABEL_56;
      }
      if (v5 < v14) {
        goto LABEL_57;
      }
      if (v14 < a2) {
        goto LABEL_58;
      }
      if (v5 < v16) {
        goto LABEL_59;
      }
      if (v16 < 0) {
        goto LABEL_60;
      }
      if (v14 >= v16) {
        goto LABEL_61;
      }
      uint64_t v17 = v14 + 1;
      if (v14 + 1 >= v16) {
        goto LABEL_62;
      }
      unint64_t v18 = *(void *)(a1 + 8 * v14);
      unint64_t v19 = *(void *)(a1 + 8 * v17);
      uint64_t v20 = (v19 * (unsigned __int128)v18) >> 64;
      uint64_t v21 = (0xFFFFFFFEFFFFFFFFLL * v19 * v18 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      BOOL v22 = __CFADD__(-(uint64_t)(v19 * v18), v19 * v18);
      uint64_t v23 = v21 + v20;
      if (!__CFADD__(v21, v20))
      {
        if (v23 != -1)
        {
          unint64_t v26 = v23 + v22;
          if (v26 >= 0xFFFFFFFF00000001) {
            v26 += 0xFFFFFFFFLL;
          }
          if (!v26) {
            goto LABEL_10;
          }
LABEL_38:
          BOOL v25 = v26 <= 0xFFFFFFFF00000001;
          unint64_t v27 = 0xFFFFFFFF00000001 - v26;
          if (!v25)
          {
            __break(1u);
            goto LABEL_54;
          }
LABEL_40:
          if (v9 >= v27)
          {
            v9 -= v27;
          }
          else
          {
            BOOL v25 = v27 <= 0xFFFFFFFF00000001;
            unint64_t v28 = 0xFFFFFFFF00000001 - v27;
            if (!v25) {
              goto LABEL_65;
            }
            BOOL v25 = __CFADD__(v9, v28);
            v9 += v28;
            if (v25) {
              goto LABEL_66;
            }
          }
          goto LABEL_10;
        }
        if (!v22)
        {
          unint64_t v27 = 0xFFFFFFFE00000003;
          goto LABEL_40;
        }
        BOOL v22 = 1;
      }
      uint64_t v24 = v22 + v23;
      BOOL v25 = __CFADD__(v24, 0xFFFFFFFFLL);
      unint64_t v26 = v24 + 0xFFFFFFFFLL;
      if (v25) {
        goto LABEL_63;
      }
      if (v26) {
        goto LABEL_38;
      }
LABEL_10:
      BOOL v11 = v6 >= v10;
      if (v7 > 0) {
        BOOL v11 = v10 >= v6;
      }
      if (v11) {
        goto LABEL_7;
      }
    }
  }
  unint64_t v9 = 0;
LABEL_7:
  *a4 = v9;
}

uint64_t specialized ParallelSum.evaluate<A>(at:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3) {
    goto LABEL_64;
  }
  uint64_t v4 = *(void *)(result + 16);
  unsigned int v5 = 0;
  if (v3 < 1 || v4 == 0)
  {
LABEL_7:
    *a2 = v5;
    return result;
  }
  uint64_t v7 = 0;
  uint64_t v8 = result + 32;
  uint64_t result = 1;
  while (1)
  {
    int64_t v9 = v7;
    uint64_t v10 = v4 - v7;
    BOOL v11 = __OFSUB__(v4, v7);
    BOOL v12 = __OFADD__(v7, v3);
    v7 += v3;
    if (v12)
    {
      if (v11) {
        goto LABEL_60;
      }
      if (v10 < 0) {
        goto LABEL_65;
      }
      BOOL v13 = v10 < v3;
      int64_t v14 = v10 >= v3 ? v7 : v4;
      if (!v13) {
        goto LABEL_65;
      }
      uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
      if (v14 < v9) {
        goto LABEL_53;
      }
    }
    else
    {
      if (v11) {
        goto LABEL_61;
      }
      if (v10 < 0)
      {
        int64_t v14 = v7;
        if (v7 < v9) {
          goto LABEL_53;
        }
      }
      else
      {
        if (v10 >= v3) {
          int64_t v14 = v7;
        }
        else {
          int64_t v14 = v4;
        }
        if (v14 < v9) {
          goto LABEL_53;
        }
      }
    }
    if ((result & 1) == 0) {
      goto LABEL_54;
    }
    if (v9 < 0) {
      goto LABEL_55;
    }
    if (v4 < v14) {
      goto LABEL_56;
    }
    if (v9 >= (unint64_t)v14) {
      goto LABEL_57;
    }
    uint64_t result = v9 + 1;
    if (v9 + 1 >= (unint64_t)v14) {
      goto LABEL_58;
    }
    unint64_t v15 = *(unsigned int *)(v8 + 4 * result) * (unint64_t)*(unsigned int *)(v8 + 4 * v9);
    uint64_t result = 4293918721 * (-1048577 * v15);
    BOOL v16 = __CFADD__(result, v15);
    unint64_t v17 = (result + v15) >> 32;
    if (v16)
    {
      BOOL v16 = __CFADD__(v17, 0xFFFFF);
      LODWORD(v17) = v17 + 0xFFFFF;
      if (v16) {
        goto LABEL_62;
      }
      if (!v17) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t result = (v17 + 0xFFFFF);
      if (v17 >= 0xFFF00001) {
        LODWORD(v17) = v17 + 0xFFFFF;
      }
      if (!v17) {
        goto LABEL_9;
      }
    }
    BOOL v16 = v17 <= 0xFFF00001;
    unsigned int v18 = -1048575 - v17;
    if (!v16) {
      goto LABEL_59;
    }
    uint64_t result = v5 - v18;
    if (v5 >= v18)
    {
      v5 -= v18;
      goto LABEL_9;
    }
    BOOL v16 = v18 <= 0xFFF00001;
    unsigned int v19 = -1048575 - v18;
    if (!v16) {
      goto LABEL_63;
    }
    BOOL v16 = __CFADD__(v5, v19);
    v5 += v19;
    if (v16) {
      break;
    }
LABEL_9:
    uint64_t result = v4 >= v7;
    if (v7 >= v4) {
      goto LABEL_7;
    }
  }
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
  return result;
}

void specialized ParallelSum.evaluate<A>(at:)(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, unsigned int *a4@<X8>)
{
  int64_t v5 = a3 >> 1;
  uint64_t v6 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2)) {
    goto LABEL_60;
  }
  uint64_t v7 = *(void *)(v4 + 16);
  if (!v7)
  {
LABEL_61:
    __break(1u);
    return;
  }
  BOOL v8 = v6 >= 0;
  if (v7 > 0) {
    BOOL v8 = v6 < 1;
  }
  if (!v8)
  {
    unsigned int v9 = 0;
    int64_t v10 = 0;
    while (1)
    {
      int64_t v12 = v10;
      BOOL v13 = __OFADD__(v10, v7);
      v10 += v7;
      if (v13) {
        int64_t v10 = (v10 >> 63) ^ 0x8000000000000000;
      }
      BOOL v13 = __OFADD__(a2, v12);
      uint64_t v14 = a2 + v12;
      if (v13)
      {
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
      uint64_t v15 = v5 - v14;
      if (__OFSUB__(v5, v14)) {
        goto LABEL_48;
      }
      if (v7 < 1)
      {
        if (v15 <= 0)
        {
          uint64_t v16 = v5;
          if (v7 < v15) {
            goto LABEL_24;
          }
        }
      }
      else if ((v15 & 0x8000000000000000) == 0)
      {
        uint64_t v16 = v5;
        if (v15 < v7) {
          goto LABEL_24;
        }
      }
      uint64_t v16 = v14 + v7;
      if (__OFADD__(v14, v7)) {
        goto LABEL_57;
      }
LABEL_24:
      if (v16 < v14) {
        goto LABEL_49;
      }
      if (v5 < v14) {
        goto LABEL_50;
      }
      if (v14 < a2) {
        goto LABEL_51;
      }
      if (v5 < v16) {
        goto LABEL_52;
      }
      if (v16 < 0) {
        goto LABEL_53;
      }
      if (v14 >= v16) {
        goto LABEL_54;
      }
      if (v14 + 1 >= v16) {
        goto LABEL_55;
      }
      unint64_t v17 = *(unsigned int *)(a1 + 4 * (v14 + 1)) * (unint64_t)*(unsigned int *)(a1 + 4 * v14);
      uint64_t v18 = 4293918721 * (-1048577 * v17);
      BOOL v19 = __CFADD__(v18, v17);
      unint64_t v20 = (v18 + v17) >> 32;
      if (v19)
      {
        BOOL v19 = __CFADD__(v20, 0xFFFFF);
        LODWORD(v20) = v20 + 0xFFFFF;
        if (v19) {
          goto LABEL_58;
        }
        if (!v20) {
          goto LABEL_10;
        }
      }
      else
      {
        if (v20 >= 0xFFF00001) {
          LODWORD(v20) = v20 + 0xFFFFF;
        }
        if (!v20) {
          goto LABEL_10;
        }
      }
      BOOL v19 = v20 <= 0xFFF00001;
      unsigned int v21 = -1048575 - v20;
      if (!v19) {
        goto LABEL_56;
      }
      if (v9 >= v21)
      {
        v9 -= v21;
      }
      else
      {
        BOOL v19 = v21 <= 0xFFF00001;
        unsigned int v22 = -1048575 - v21;
        if (!v19) {
          goto LABEL_59;
        }
        BOOL v19 = __CFADD__(v9, v22);
        v9 += v22;
        if (v19)
        {
          __break(1u);
          goto LABEL_47;
        }
      }
LABEL_10:
      BOOL v11 = v6 >= v10;
      if (v7 > 0) {
        BOOL v11 = v10 >= v6;
      }
      if (v11) {
        goto LABEL_7;
      }
    }
  }
  unsigned int v9 = 0;
LABEL_7:
  *a4 = v9;
}

unint64_t specialized ParallelSum.evaluate<A>(at:)@<X0>(unint64_t result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3 = *(void *)(v2 + 16);
  if (!v3) {
    goto LABEL_70;
  }
  int64_t v4 = *(void *)(result + 16);
  unint64_t v5 = 0;
  if ((uint64_t)v3 < 1 || v4 == 0)
  {
LABEL_7:
    *a2 = v5;
    return result;
  }
  uint64_t v7 = 0;
  unint64_t v8 = result + 32;
  BOOL v9 = 1;
  while (1)
  {
    int64_t v10 = v7;
    uint64_t result = v4 - v7;
    BOOL v11 = __OFSUB__(v4, v7);
    BOOL v12 = __OFADD__(v7, v3);
    v7 += v3;
    if (v12)
    {
      if (v11) {
        goto LABEL_66;
      }
      if ((result & 0x8000000000000000) != 0) {
        goto LABEL_71;
      }
      BOOL v13 = result >= v3;
      uint64_t result = result >= v3 ? v7 : v4;
      if (v13) {
        goto LABEL_71;
      }
      uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
      if ((uint64_t)result < v10) {
        goto LABEL_59;
      }
    }
    else
    {
      if (v11) {
        goto LABEL_67;
      }
      if ((result & 0x8000000000000000) != 0)
      {
        uint64_t result = v7;
        if (v7 < v10) {
          goto LABEL_59;
        }
      }
      else
      {
        if (result >= v3) {
          uint64_t result = v7;
        }
        else {
          uint64_t result = v4;
        }
        if ((uint64_t)result < v10) {
          goto LABEL_59;
        }
      }
    }
    if (!v9) {
      goto LABEL_60;
    }
    if (v10 < 0) {
      goto LABEL_61;
    }
    if (v4 < (uint64_t)result) {
      goto LABEL_62;
    }
    if (v10 >= result) {
      goto LABEL_63;
    }
    int64_t v14 = v10 + 1;
    if (v10 + 1 >= result) {
      goto LABEL_64;
    }
    unint64_t v15 = *(void *)(v8 + 8 * v10);
    unint64_t v16 = *(void *)(v8 + 8 * v14);
    uint64_t result = (v16 * (unsigned __int128)v15) >> 64;
    uint64_t v17 = (0xFFFFFFFEFFFFFFFFLL * v16 * v15 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
    BOOL v18 = __CFADD__(-(uint64_t)(v16 * v15), v16 * v15);
    uint64_t v19 = v17 + result;
    if (__CFADD__(v17, result)) {
      goto LABEL_41;
    }
    if (v19 != -1) {
      break;
    }
    if (!v18)
    {
      unint64_t v22 = 0xFFFFFFFE00000003;
      goto LABEL_45;
    }
    BOOL v18 = 1;
LABEL_41:
    uint64_t v20 = v18 + v19;
    BOOL v13 = __CFADD__(v20, 0xFFFFFFFFLL);
    unint64_t v21 = v20 + 0xFFFFFFFFLL;
    if (v13) {
      goto LABEL_65;
    }
    if (v21) {
      goto LABEL_43;
    }
LABEL_9:
    BOOL v9 = v4 >= v7;
    if (v7 >= v4) {
      goto LABEL_7;
    }
  }
  unint64_t v21 = v19 + v18;
  if (v21 >= 0xFFFFFFFF00000001) {
    v21 += 0xFFFFFFFFLL;
  }
  if (!v21) {
    goto LABEL_9;
  }
LABEL_43:
  BOOL v13 = v21 <= 0xFFFFFFFF00000001;
  unint64_t v22 = 0xFFFFFFFF00000001 - v21;
  if (v13)
  {
LABEL_45:
    if (v5 >= v22)
    {
      v5 -= v22;
    }
    else
    {
      BOOL v13 = v22 <= 0xFFFFFFFF00000001;
      unint64_t v23 = 0xFFFFFFFF00000001 - v22;
      if (!v13) {
        goto LABEL_68;
      }
      BOOL v13 = __CFADD__(v5, v23);
      v5 += v23;
      if (v13) {
        goto LABEL_69;
      }
    }
    goto LABEL_9;
  }
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
  return result;
}

void specialized ParallelSum.chunkEvaluateSum(_:for:_:)(uint64_t a1@<X1>, int64_t a2@<X2>, unint64_t a3@<X3>, unint64_t a4@<X4>, void (*a5)(uint64_t, uint64_t, int64_t, uint64_t, uint64_t *)@<X5>, unint64_t *a6@<X8>)
{
  uint64_t v8 = *v6;
  if (*v6 < 0) {
    goto LABEL_175;
  }
  uint64_t v9 = v7;
  if (v8)
  {
    uint64_t v13 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v13 + 16) = v8;
    bzero((void *)(v13 + 32), 8 * v8);
  }
  else
  {
    uint64_t v13 = MEMORY[0x263F8EE78];
  }
  uint64_t v94 = v13;
  uint64_t v14 = v86[5];
  if (!v14)
  {
LABEL_176:
    __break(1u);
    goto LABEL_177;
  }
  unint64_t v79 = a6;
  int64_t v15 = a3 >> 1;
  BOOL v16 = (uint64_t)(a3 >> 1) >= a2;
  if (v14 > 0) {
    BOOL v16 = (uint64_t)(a3 >> 1) <= a2;
  }
  if (v16)
  {
    unint64_t v88 = 0;
LABEL_10:
    swift_bridgeObjectRelease();
    *unint64_t v79 = v88;
    return;
  }
  unint64_t v88 = 0;
  uint64_t v82 = a2;
  uint64_t v83 = a3 & 1;
  unint64_t v17 = a4 >> 62;
  BOOL v18 = (unint64_t *)(a4 + 16);
  uint64_t v19 = (void **)(a4 + 32);
  int64_t v20 = a2;
  int64_t v80 = v15;
  uint64_t v81 = v86[5];
  while (1)
  {
    int64_t v22 = v20 + v14;
    if (__OFADD__(v20, v14)) {
      unint64_t v23 = ((v20 + v14) >> 63) ^ 0x8000000000000000;
    }
    else {
      unint64_t v23 = v20 + v14;
    }
    if (__OFADD__(v20, v14)) {
      goto LABEL_162;
    }
    if (v15 < v22) {
      int64_t v22 = v15;
    }
    if (v22 < v20) {
      goto LABEL_163;
    }
    if (v20 < a2) {
      goto LABEL_164;
    }
    if (v22 < 0) {
      goto LABEL_165;
    }
    uint64_t v24 = v83 | (2 * v22);
    uint64_t v25 = swift_unknownObjectRetain();
    a5(v25, a1, v20, v24, &v94);
    swift_unknownObjectRelease();
    if (v9)
    {
      swift_bridgeObjectRelease();
      return;
    }
    int64_t v89 = v23;
    uint64_t v26 = v94;
    uint64_t v90 = v94;
    if (!v17)
    {
      swift_beginAccess();
      uint64_t v28 = *(void *)(a4 + 16);
      if (v28 >= *(void *)(a4 + 24))
      {
        swift_bridgeObjectRetain();
        outlined copy of GadgetEvaluation<Field32>(a4);
        unint64_t v91 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v92 = v73;
        v74._countAndFlagsBits = 540884512;
        v74._object = (void *)0xE400000000000000;
        String.append(_:)(v74);
        v75._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v75);
        swift_bridgeObjectRelease();
        unint64_t v76 = v91;
        uint64_t v77 = v92;
        lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
        swift_allocError();
        *(void *)uint64_t v78 = v76;
        *(void *)(v78 + 8) = v77;
        *(unsigned char *)(v78 + 16) = 3;
        swift_willThrow();
        outlined consume of GadgetEvaluation<Field32>(a4);
        swift_bridgeObjectRelease_n();
        return;
      }
      *BOOL v18 = v28 + 1;
      uint64_t v29 = *(void *)(v26 + 16);
      if (v29)
      {
        uint64_t v30 = v26 + 32;
        swift_bridgeObjectRetain();
        outlined copy of GadgetEvaluation<Field32>(a4);
        swift_beginAccess();
        unint64_t v31 = 0;
        while (1)
        {
          unint64_t v32 = *v18;
          uint64_t v33 = *(void *)(v30 + 8 * v31);
          Swift::String v34 = *v19;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v19 = v34;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            Swift::String v34 = specialized _ArrayBuffer._consumeAndCreateNew()(v34);
            *uint64_t v19 = v34;
          }
          if (v31 >= v34[2]) {
            break;
          }
          uint64_t v36 = &v34[v31];
          long long v37 = (char *)v36[4];
          char v38 = swift_isUniquelyReferenced_nonNull_native();
          v36[4] = v37;
          if (v38)
          {
            if ((v32 & 0x8000000000000000) != 0) {
              goto LABEL_142;
            }
          }
          else
          {
            long long v37 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v37);
            v36[4] = v37;
            if ((v32 & 0x8000000000000000) != 0) {
              goto LABEL_142;
            }
          }
          if (v32 >= *((void *)v37 + 2)) {
            goto LABEL_143;
          }
          ++v31;
          *(void *)&v37[8 * v32 + 32] = v33;
          if (v29 == v31) {
            goto LABEL_86;
          }
        }
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
        goto LABEL_145;
      }
      swift_bridgeObjectRetain();
      outlined copy of GadgetEvaluation<Field32>(a4);
LABEL_86:
      unint64_t v56 = v86[2];
      if (!v56) {
        goto LABEL_172;
      }
      unint64_t v27 = 0;
      if ((uint64_t)v56 >= 1)
      {
        uint64_t v57 = *(void *)(v90 + 16);
        if (v57)
        {
          unint64_t v27 = 0;
          uint64_t v58 = 0;
          unint64_t v59 = v86[4];
          BOOL v60 = 1;
          while (1)
          {
            uint64_t v61 = v58;
            unint64_t v62 = v57 - v58;
            BOOL v63 = __OFSUB__(v57, v58);
            BOOL v48 = __OFADD__(v58, v56);
            v58 += v56;
            if (v48)
            {
              if (v63) {
                goto LABEL_158;
              }
              if ((v62 & 0x8000000000000000) != 0) {
                goto LABEL_178;
              }
              BOOL v64 = v62 >= v56;
              uint64_t v65 = v62 >= v56 ? v58 : v57;
              if (v64) {
                goto LABEL_178;
              }
              uint64_t v58 = 0x7FFFFFFFFFFFFFFFLL;
              if (v65 < v61) {
                goto LABEL_150;
              }
            }
            else
            {
              if (v63) {
                goto LABEL_159;
              }
              if ((v62 & 0x8000000000000000) != 0)
              {
                uint64_t v65 = v58;
                if (v58 < v61) {
                  goto LABEL_150;
                }
              }
              else
              {
                if (v62 >= v56) {
                  uint64_t v65 = v58;
                }
                else {
                  uint64_t v65 = v57;
                }
                if (v65 < v61) {
                  goto LABEL_150;
                }
              }
            }
            if (!v60) {
              goto LABEL_151;
            }
            if (v61 < 0) {
              break;
            }
            if (v57 < v65) {
              goto LABEL_153;
            }
            if (v61 >= (unint64_t)v65) {
              goto LABEL_154;
            }
            uint64_t v66 = *(void *)(v59 + 16);
            if (!v66) {
              goto LABEL_155;
            }
            unint64_t v67 = *(void *)(v90 + 32 + 8 * v61);
            uint64_t v68 = v66 + 3;
            while (!*(void *)(v59 + 8 * v68))
            {
              unint64_t v69 = v68 - 3;
              --v68;
              if (v69 <= 1) {
                goto LABEL_91;
              }
            }
            specialized evaluateUsingHorner<A, B>(_:atInput:)(v59, v67, &v91);
            if (v91)
            {
              unint64_t v70 = 0xFFFEB00001 - v91;
              if (v91 > 0xFFFEB00001) {
                goto LABEL_161;
              }
              if (v27 >= v70)
              {
                v27 -= v70;
              }
              else
              {
                if (v70 > 0xFFFEB00001) {
                  goto LABEL_168;
                }
                BOOL v49 = __CFADD__(v27, v91);
                v27 += v91;
                if (v49) {
                  goto LABEL_169;
                }
              }
            }
LABEL_91:
            BOOL v60 = v57 >= v58;
            if (v58 >= v57) {
              goto LABEL_129;
            }
          }
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
          goto LABEL_176;
        }
      }
LABEL_129:
      outlined consume of GadgetEvaluation<Field32>(a4);
      swift_bridgeObjectRelease();
      goto LABEL_130;
    }
    if (v17 == 1)
    {
      swift_bridgeObjectRetain();
      outlined copy of GadgetEvaluation<Field32>(a4);
      specialized QueryGadget.evaluate<A>(at:)(v26, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), &v93);
      outlined consume of GadgetEvaluation<Field32>(a4);
      swift_bridgeObjectRelease();
      unint64_t v27 = v93;
      goto LABEL_130;
    }
    unint64_t v39 = v86[2];
    if (!v39) {
      goto LABEL_171;
    }
    unint64_t v27 = 0;
    if ((uint64_t)v39 >= 1)
    {
      uint64_t v40 = *(void *)(v94 + 16);
      if (v40) {
        break;
      }
    }
LABEL_130:
    if (v27)
    {
      unint64_t v71 = 0xFFFEB00001 - v27;
      uint64_t v14 = v81;
      a2 = v82;
      int64_t v15 = v80;
      if (v27 > 0xFFFEB00001) {
        goto LABEL_170;
      }
      uint64_t v9 = 0;
      LODWORD(v17) = a4 >> 62;
      if (v88 >= v71)
      {
        v88 -= v71;
      }
      else
      {
        BOOL v49 = v71 <= 0xFFFEB00001;
        unint64_t v72 = 0xFFFEB00001 - v71;
        if (!v49) {
          goto LABEL_173;
        }
        BOOL v49 = __CFADD__(v88, v72);
        v88 += v72;
        if (v49) {
          goto LABEL_174;
        }
      }
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v14 = v81;
      a2 = v82;
      LODWORD(v17) = a4 >> 62;
      int64_t v15 = v80;
    }
    int64_t v20 = v89;
    BOOL v21 = v15 >= v89;
    if (v14 > 0) {
      BOOL v21 = v89 >= v15;
    }
    if (v21) {
      goto LABEL_10;
    }
  }
  unint64_t v27 = 0;
  uint64_t v41 = 0;
  unint64_t v42 = v86[4];
  uint64_t v43 = v94 + 32;
  BOOL v44 = 1;
  while (2)
  {
    uint64_t v45 = v41;
    unint64_t v46 = v40 - v41;
    BOOL v47 = __OFSUB__(v40, v41);
    BOOL v48 = __OFADD__(v41, v39);
    v41 += v39;
    if (!v48)
    {
      if (v47) {
        goto LABEL_157;
      }
      if ((v46 & 0x8000000000000000) != 0)
      {
        uint64_t v50 = v41;
        if (v41 < v45) {
          goto LABEL_144;
        }
      }
      else
      {
        if (v46 >= v39) {
          uint64_t v50 = v41;
        }
        else {
          uint64_t v50 = v40;
        }
        if (v50 < v45) {
          goto LABEL_144;
        }
      }
LABEL_69:
      if (v44)
      {
        if ((v45 & 0x8000000000000000) == 0)
        {
          if (v40 >= v50)
          {
            if (v45 < (unint64_t)v50)
            {
              uint64_t v51 = *(void *)(v42 + 16);
              if (v51)
              {
                unint64_t v52 = *(void *)(v43 + 8 * v45);
                uint64_t v53 = v51 + 3;
                while (!*(void *)(v42 + 8 * v53))
                {
                  unint64_t v54 = v53 - 3;
                  --v53;
                  if (v54 <= 1) {
                    goto LABEL_47;
                  }
                }
                specialized evaluateUsingHorner<A, B>(_:atInput:)(v42, v52, &v91);
                if (v91)
                {
                  unint64_t v55 = 0xFFFEB00001 - v91;
                  if (v91 > 0xFFFEB00001) {
                    goto LABEL_160;
                  }
                  if (v27 >= v55)
                  {
                    v27 -= v55;
                  }
                  else
                  {
                    if (v55 > 0xFFFEB00001) {
                      goto LABEL_166;
                    }
                    BOOL v49 = __CFADD__(v27, v91);
                    v27 += v91;
                    if (v49) {
                      goto LABEL_167;
                    }
                  }
                }
LABEL_47:
                BOOL v44 = v40 >= v41;
                if (v41 >= v40) {
                  goto LABEL_130;
                }
                continue;
              }
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
              goto LABEL_152;
            }
LABEL_148:
            __break(1u);
            goto LABEL_149;
          }
LABEL_147:
          __break(1u);
          goto LABEL_148;
        }
LABEL_146:
        __break(1u);
        goto LABEL_147;
      }
LABEL_145:
      __break(1u);
      goto LABEL_146;
    }
    break;
  }
  if (v47) {
    goto LABEL_156;
  }
  if ((v46 & 0x8000000000000000) == 0)
  {
    BOOL v49 = v46 >= v39;
    uint64_t v50 = v46 >= v39 ? v41 : v40;
    if (!v49)
    {
      uint64_t v41 = 0x7FFFFFFFFFFFFFFFLL;
      if (v50 < v45) {
        goto LABEL_144;
      }
      goto LABEL_69;
    }
  }
LABEL_177:
  __break(1u);
LABEL_178:
  __break(1u);
}

{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t *v18;
  void **v19;
  int64_t v20;
  BOOL v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  char isUniquelyReferenced_nonNull_native;
  void *v36;
  char *v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  BOOL v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  unint64_t v62;
  BOOL v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  Swift::String v74;
  Swift::String v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  int64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v86;
  unint64_t v88;
  int64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;

  uint64_t v8 = *v6;
  if (*v6 < 0) {
    goto LABEL_175;
  }
  uint64_t v9 = v7;
  if (v8)
  {
    uint64_t v13 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v13 + 16) = v8;
    bzero((void *)(v13 + 32), 8 * v8);
  }
  else
  {
    uint64_t v13 = MEMORY[0x263F8EE78];
  }
  uint64_t v94 = v13;
  uint64_t v14 = v86[5];
  if (!v14)
  {
LABEL_176:
    __break(1u);
    goto LABEL_177;
  }
  unint64_t v79 = a6;
  int64_t v15 = a3 >> 1;
  BOOL v16 = (uint64_t)(a3 >> 1) >= a2;
  if (v14 > 0) {
    BOOL v16 = (uint64_t)(a3 >> 1) <= a2;
  }
  if (v16)
  {
    unint64_t v88 = 0;
LABEL_10:
    swift_bridgeObjectRelease();
    *unint64_t v79 = v88;
    return;
  }
  unint64_t v88 = 0;
  uint64_t v82 = a2;
  uint64_t v83 = a3 & 1;
  unint64_t v17 = a4 >> 62;
  BOOL v18 = (unint64_t *)(a4 + 16);
  uint64_t v19 = (void **)(a4 + 32);
  int64_t v20 = a2;
  int64_t v80 = v15;
  uint64_t v81 = v86[5];
  while (1)
  {
    int64_t v22 = v20 + v14;
    if (__OFADD__(v20, v14)) {
      unint64_t v23 = ((v20 + v14) >> 63) ^ 0x8000000000000000;
    }
    else {
      unint64_t v23 = v20 + v14;
    }
    if (__OFADD__(v20, v14)) {
      goto LABEL_162;
    }
    if (v15 < v22) {
      int64_t v22 = v15;
    }
    if (v22 < v20) {
      goto LABEL_163;
    }
    if (v20 < a2) {
      goto LABEL_164;
    }
    if (v22 < 0) {
      goto LABEL_165;
    }
    uint64_t v24 = v83 | (2 * v22);
    uint64_t v25 = swift_unknownObjectRetain();
    a5(v25, a1, v20, v24, &v94);
    swift_unknownObjectRelease();
    if (v9)
    {
      swift_bridgeObjectRelease();
      return;
    }
    int64_t v89 = v23;
    uint64_t v26 = v94;
    uint64_t v90 = v94;
    if (!v17)
    {
      swift_beginAccess();
      uint64_t v28 = *(void *)(a4 + 16);
      if (v28 >= *(void *)(a4 + 24))
      {
        swift_bridgeObjectRetain();
        outlined copy of GadgetEvaluation<Field32>(a4);
        unint64_t v91 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v92 = v73;
        v74._countAndFlagsBits = 540884512;
        v74._object = (void *)0xE400000000000000;
        String.append(_:)(v74);
        v75._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v75);
        swift_bridgeObjectRelease();
        unint64_t v76 = v91;
        uint64_t v77 = v92;
        lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
        swift_allocError();
        *(void *)uint64_t v78 = v76;
        *(void *)(v78 + 8) = v77;
        *(unsigned char *)(v78 + 16) = 3;
        swift_willThrow();
        outlined consume of GadgetEvaluation<Field32>(a4);
        swift_bridgeObjectRelease_n();
        return;
      }
      *BOOL v18 = v28 + 1;
      uint64_t v29 = *(void *)(v26 + 16);
      if (v29)
      {
        uint64_t v30 = v26 + 32;
        swift_bridgeObjectRetain();
        outlined copy of GadgetEvaluation<Field32>(a4);
        swift_beginAccess();
        unint64_t v31 = 0;
        while (1)
        {
          unint64_t v32 = *v18;
          uint64_t v33 = *(void *)(v30 + 8 * v31);
          Swift::String v34 = *v19;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v19 = v34;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            Swift::String v34 = specialized _ArrayBuffer._consumeAndCreateNew()(v34);
            *uint64_t v19 = v34;
          }
          if (v31 >= v34[2]) {
            break;
          }
          uint64_t v36 = &v34[v31];
          long long v37 = (char *)v36[4];
          char v38 = swift_isUniquelyReferenced_nonNull_native();
          v36[4] = v37;
          if (v38)
          {
            if ((v32 & 0x8000000000000000) != 0) {
              goto LABEL_142;
            }
          }
          else
          {
            long long v37 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v37);
            v36[4] = v37;
            if ((v32 & 0x8000000000000000) != 0) {
              goto LABEL_142;
            }
          }
          if (v32 >= *((void *)v37 + 2)) {
            goto LABEL_143;
          }
          ++v31;
          *(void *)&v37[8 * v32 + 32] = v33;
          if (v29 == v31) {
            goto LABEL_86;
          }
        }
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
        goto LABEL_145;
      }
      swift_bridgeObjectRetain();
      outlined copy of GadgetEvaluation<Field32>(a4);
LABEL_86:
      unint64_t v56 = v86[2];
      if (!v56) {
        goto LABEL_172;
      }
      unint64_t v27 = 0;
      if ((uint64_t)v56 >= 1)
      {
        uint64_t v57 = *(void *)(v90 + 16);
        if (v57)
        {
          unint64_t v27 = 0;
          uint64_t v58 = 0;
          unint64_t v59 = v86[4];
          BOOL v60 = 1;
          while (1)
          {
            uint64_t v61 = v58;
            unint64_t v62 = v57 - v58;
            BOOL v63 = __OFSUB__(v57, v58);
            BOOL v48 = __OFADD__(v58, v56);
            v58 += v56;
            if (v48)
            {
              if (v63) {
                goto LABEL_158;
              }
              if ((v62 & 0x8000000000000000) != 0) {
                goto LABEL_178;
              }
              BOOL v64 = v62 >= v56;
              uint64_t v65 = v62 >= v56 ? v58 : v57;
              if (v64) {
                goto LABEL_178;
              }
              uint64_t v58 = 0x7FFFFFFFFFFFFFFFLL;
              if (v65 < v61) {
                goto LABEL_150;
              }
            }
            else
            {
              if (v63) {
                goto LABEL_159;
              }
              if ((v62 & 0x8000000000000000) != 0)
              {
                uint64_t v65 = v58;
                if (v58 < v61) {
                  goto LABEL_150;
                }
              }
              else
              {
                if (v62 >= v56) {
                  uint64_t v65 = v58;
                }
                else {
                  uint64_t v65 = v57;
                }
                if (v65 < v61) {
                  goto LABEL_150;
                }
              }
            }
            if (!v60) {
              goto LABEL_151;
            }
            if (v61 < 0) {
              break;
            }
            if (v57 < v65) {
              goto LABEL_153;
            }
            if (v61 >= (unint64_t)v65) {
              goto LABEL_154;
            }
            uint64_t v66 = *(void *)(v59 + 16);
            if (!v66) {
              goto LABEL_155;
            }
            unint64_t v67 = *(void *)(v90 + 32 + 8 * v61);
            uint64_t v68 = v66 + 3;
            while (!*(void *)(v59 + 8 * v68))
            {
              unint64_t v69 = v68 - 3;
              --v68;
              if (v69 <= 1) {
                goto LABEL_91;
              }
            }
            specialized evaluateUsingHorner<A, B>(_:atInput:)(v59, v67, &v91);
            if (v91)
            {
              unint64_t v70 = 0xFFFFFFFF00000001 - v91;
              if (v91 > 0xFFFFFFFF00000001) {
                goto LABEL_161;
              }
              if (v27 >= v70)
              {
                v27 -= v70;
              }
              else
              {
                if (v70 > 0xFFFFFFFF00000001) {
                  goto LABEL_168;
                }
                BOOL v49 = __CFADD__(v27, v91);
                v27 += v91;
                if (v49) {
                  goto LABEL_169;
                }
              }
            }
LABEL_91:
            BOOL v60 = v57 >= v58;
            if (v58 >= v57) {
              goto LABEL_129;
            }
          }
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
          goto LABEL_176;
        }
      }
LABEL_129:
      outlined consume of GadgetEvaluation<Field32>(a4);
      swift_bridgeObjectRelease();
      goto LABEL_130;
    }
    if (v17 == 1)
    {
      swift_bridgeObjectRetain();
      outlined copy of GadgetEvaluation<Field32>(a4);
      specialized QueryGadget.evaluate<A>(at:)(v26, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), &v93);
      outlined consume of GadgetEvaluation<Field32>(a4);
      swift_bridgeObjectRelease();
      unint64_t v27 = v93;
      goto LABEL_130;
    }
    unint64_t v39 = v86[2];
    if (!v39) {
      goto LABEL_171;
    }
    unint64_t v27 = 0;
    if ((uint64_t)v39 >= 1)
    {
      uint64_t v40 = *(void *)(v94 + 16);
      if (v40) {
        break;
      }
    }
LABEL_130:
    if (v27)
    {
      unint64_t v71 = 0xFFFFFFFF00000001 - v27;
      uint64_t v14 = v81;
      a2 = v82;
      int64_t v15 = v80;
      if (v27 > 0xFFFFFFFF00000001) {
        goto LABEL_170;
      }
      uint64_t v9 = 0;
      LODWORD(v17) = a4 >> 62;
      if (v88 >= v71)
      {
        v88 -= v71;
      }
      else
      {
        BOOL v49 = v71 <= 0xFFFFFFFF00000001;
        unint64_t v72 = 0xFFFFFFFF00000001 - v71;
        if (!v49) {
          goto LABEL_173;
        }
        BOOL v49 = __CFADD__(v88, v72);
        v88 += v72;
        if (v49) {
          goto LABEL_174;
        }
      }
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v14 = v81;
      a2 = v82;
      LODWORD(v17) = a4 >> 62;
      int64_t v15 = v80;
    }
    int64_t v20 = v89;
    BOOL v21 = v15 >= v89;
    if (v14 > 0) {
      BOOL v21 = v89 >= v15;
    }
    if (v21) {
      goto LABEL_10;
    }
  }
  unint64_t v27 = 0;
  uint64_t v41 = 0;
  unint64_t v42 = v86[4];
  uint64_t v43 = v94 + 32;
  BOOL v44 = 1;
  while (2)
  {
    uint64_t v45 = v41;
    unint64_t v46 = v40 - v41;
    BOOL v47 = __OFSUB__(v40, v41);
    BOOL v48 = __OFADD__(v41, v39);
    v41 += v39;
    if (!v48)
    {
      if (v47) {
        goto LABEL_157;
      }
      if ((v46 & 0x8000000000000000) != 0)
      {
        uint64_t v50 = v41;
        if (v41 < v45) {
          goto LABEL_144;
        }
      }
      else
      {
        if (v46 >= v39) {
          uint64_t v50 = v41;
        }
        else {
          uint64_t v50 = v40;
        }
        if (v50 < v45) {
          goto LABEL_144;
        }
      }
LABEL_69:
      if (v44)
      {
        if ((v45 & 0x8000000000000000) == 0)
        {
          if (v40 >= v50)
          {
            if (v45 < (unint64_t)v50)
            {
              uint64_t v51 = *(void *)(v42 + 16);
              if (v51)
              {
                unint64_t v52 = *(void *)(v43 + 8 * v45);
                uint64_t v53 = v51 + 3;
                while (!*(void *)(v42 + 8 * v53))
                {
                  unint64_t v54 = v53 - 3;
                  --v53;
                  if (v54 <= 1) {
                    goto LABEL_47;
                  }
                }
                specialized evaluateUsingHorner<A, B>(_:atInput:)(v42, v52, &v91);
                if (v91)
                {
                  unint64_t v55 = 0xFFFFFFFF00000001 - v91;
                  if (v91 > 0xFFFFFFFF00000001) {
                    goto LABEL_160;
                  }
                  if (v27 >= v55)
                  {
                    v27 -= v55;
                  }
                  else
                  {
                    if (v55 > 0xFFFFFFFF00000001) {
                      goto LABEL_166;
                    }
                    BOOL v49 = __CFADD__(v27, v91);
                    v27 += v91;
                    if (v49) {
                      goto LABEL_167;
                    }
                  }
                }
LABEL_47:
                BOOL v44 = v40 >= v41;
                if (v41 >= v40) {
                  goto LABEL_130;
                }
                continue;
              }
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
              goto LABEL_152;
            }
LABEL_148:
            __break(1u);
            goto LABEL_149;
          }
LABEL_147:
          __break(1u);
          goto LABEL_148;
        }
LABEL_146:
        __break(1u);
        goto LABEL_147;
      }
LABEL_145:
      __break(1u);
      goto LABEL_146;
    }
    break;
  }
  if (v47) {
    goto LABEL_156;
  }
  if ((v46 & 0x8000000000000000) == 0)
  {
    BOOL v49 = v46 >= v39;
    uint64_t v50 = v46 >= v39 ? v41 : v40;
    if (!v49)
    {
      uint64_t v41 = 0x7FFFFFFFFFFFFFFFLL;
      if (v50 < v45) {
        goto LABEL_144;
      }
      goto LABEL_69;
    }
  }
LABEL_177:
  __break(1u);
LABEL_178:
  __break(1u);
}

void specialized ParallelSum.chunkEvaluateSum(_:for:_:)(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, unint64_t a4@<X4>, unint64_t *a5@<X5>, uint64_t a6@<X6>, unint64_t *a7@<X8>)
{
  uint64_t v9 = v7;
  uint64_t v10 = *v7;
  if ((*v7 & 0x8000000000000000) != 0)
  {
LABEL_60:
    __break(1u);
    return;
  }
  uint64_t v11 = v8;
  uint64_t v16 = v9[5];
  uint64_t v60 = v16;
  if (v10)
  {
    uint64_t v17 = a2;
    uint64_t v18 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v18 + 16) = v10;
    bzero((void *)(v18 + 32), 8 * v10);
    uint64_t v16 = v60;
    a2 = v17;
    uint64_t v66 = v18;
    if (v60) {
      goto LABEL_4;
    }
LABEL_48:
    __break(1u);
LABEL_49:
    swift_bridgeObjectRelease();
    return;
  }
LABEL_47:
  uint64_t v66 = MEMORY[0x263F8EE78];
  if (!v16) {
    goto LABEL_48;
  }
LABEL_4:
  BOOL v48 = a7;
  int64_t v19 = a3 >> 1;
  BOOL v20 = (uint64_t)(a3 >> 1) >= a2;
  if (v16 > 0) {
    BOOL v20 = (uint64_t)(a3 >> 1) <= a2;
  }
  if (!v20)
  {
    unint64_t v61 = 0;
    unint64_t v57 = a4 >> 62;
    unint64_t v58 = a3 & 1;
    unint64_t v51 = a4;
    uint64_t v52 = a4 & 0x3FFFFFFFFFFFFFFFLL;
    BOOL v21 = (unint64_t *)(a4 + 16);
    int64_t v22 = (void **)(a4 + 32);
    uint64_t v23 = a2;
    a7 = a5;
    uint64_t v49 = a6;
    uint64_t v50 = v9;
    int64_t v55 = a3 >> 1;
    uint64_t v56 = a2;
    while (1)
    {
      int64_t v25 = v23 + v16;
      if (__OFADD__(v23, v16)) {
        break;
      }
      if (v19 < v25) {
        int64_t v25 = v19;
      }
      if (v25 < v23) {
        goto LABEL_55;
      }
      if (v23 < a2) {
        goto LABEL_56;
      }
      if (v25 < 0) {
        goto LABEL_57;
      }
      int64_t v62 = v23 + v16;
      uint64_t v26 = v58 | (2 * v25);
      uint64_t v27 = swift_unknownObjectRetain();
      uint64_t v28 = v23;
      uint64_t v29 = v11;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))a7)(v27, a1, v28, v26, &v66);
      swift_unknownObjectRelease();
      if (v11) {
        goto LABEL_49;
      }
      uint64_t v30 = v66;
      if (v57)
      {
        if (v57 == 1)
        {
          swift_bridgeObjectRetain();
          outlined copy of GadgetEvaluation<Field32>(a4);
          a3 = v52;
          specialized QueryGadget.evaluate<A>(at:)(v30, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), v65);
          outlined consume of GadgetEvaluation<Field32>(a4);
          swift_bridgeObjectRelease();
        }
        else
        {
          a3 = (unint64_t)v9;
          specialized ParallelSum.evaluate<A>(at:)(v66, v65);
        }
      }
      else
      {
        swift_beginAccess();
        uint64_t v31 = *(void *)(a4 + 16);
        if (v31 >= *(void *)(a4 + 24))
        {
          swift_bridgeObjectRetain();
          outlined copy of GadgetEvaluation<Field32>(a4);
          uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v64 = v44;
          v45._countAndFlagsBits = 540884512;
          v45._object = (void *)0xE400000000000000;
          String.append(_:)(v45);
          v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v46);
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
          swift_allocError();
          *(void *)uint64_t v47 = v63;
          *(void *)(v47 + 8) = v64;
          *(unsigned char *)(v47 + 16) = 3;
          swift_willThrow();
          outlined consume of GadgetEvaluation<Field32>(a4);
          swift_bridgeObjectRelease_n();
          return;
        }
        uint64_t v54 = v30;
        *BOOL v21 = v31 + 1;
        uint64_t v32 = *(void *)(v30 + 16);
        if (v32)
        {
          uint64_t v33 = v30 + 32;
          swift_bridgeObjectRetain();
          outlined copy of GadgetEvaluation<Field32>(a4);
          swift_beginAccess();
          unint64_t v34 = 0;
          while (1)
          {
            unint64_t v35 = *v21;
            uint64_t v36 = *(void *)(v33 + 8 * v34);
            long long v37 = *v22;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *int64_t v22 = v37;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              long long v37 = specialized _ArrayBuffer._consumeAndCreateNew()(v37);
              *int64_t v22 = v37;
            }
            if (v34 >= v37[2]) {
              break;
            }
            unint64_t v39 = &v37[v34];
            uint64_t v40 = (char *)v39[4];
            char v41 = swift_isUniquelyReferenced_nonNull_native();
            v39[4] = v40;
            if (v41)
            {
              if ((v35 & 0x8000000000000000) != 0) {
                goto LABEL_53;
              }
            }
            else
            {
              uint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v40);
              v39[4] = v40;
              if ((v35 & 0x8000000000000000) != 0) {
                goto LABEL_53;
              }
            }
            if (v35 >= *((void *)v40 + 2)) {
              goto LABEL_52;
            }
            ++v34;
            *(void *)&v40[8 * v35 + 32] = v36;
            if (v32 == v34) {
              goto LABEL_39;
            }
          }
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
          break;
        }
        swift_bridgeObjectRetain();
        outlined copy of GadgetEvaluation<Field32>(a4);
LABEL_39:
        uint64_t v9 = v50;
        a3 = (unint64_t)v50;
        specialized ParallelSum.evaluate<A>(at:)(v54, v65);
        a4 = v51;
        outlined consume of GadgetEvaluation<Field32>(v51);
        swift_bridgeObjectRelease();
        uint64_t v11 = v29;
        a6 = v49;
        a7 = a5;
      }
      int64_t v19 = v55;
      a2 = v56;
      uint64_t v16 = v60;
      if (v65[0])
      {
        unint64_t v42 = 0xFFFEB00001 - v65[0];
        if (v65[0] > 0xFFFEB00001uLL) {
          goto LABEL_58;
        }
        if (v61 >= v42)
        {
          v61 -= v42;
        }
        else
        {
          if (v42 > 0xFFFEB00001) {
            goto LABEL_59;
          }
          BOOL v43 = __CFADD__(v61, v65[0]);
          v61 += v65[0];
          if (v43)
          {
            __break(1u);
            goto LABEL_47;
          }
        }
      }
      uint64_t v23 = v62;
      BOOL v24 = v55 >= v62;
      if (v60 > 0) {
        BOOL v24 = v62 >= v55;
      }
      if (v24) {
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  unint64_t v61 = 0;
LABEL_8:
  swift_bridgeObjectRelease();
  *BOOL v48 = v61;
}

{
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  BOOL v20;
  unint64_t *v21;
  void **v22;
  uint64_t v23;
  BOOL v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  char isUniquelyReferenced_nonNull_native;
  void *v39;
  char *v40;
  char v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  void *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v54;
  int64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v60;
  unint64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65[2];
  uint64_t v66;

  uint64_t v9 = v7;
  uint64_t v10 = *v7;
  if ((*v7 & 0x8000000000000000) != 0)
  {
LABEL_60:
    __break(1u);
    return;
  }
  uint64_t v11 = v8;
  uint64_t v16 = v9[5];
  uint64_t v60 = v16;
  if (v10)
  {
    uint64_t v17 = a2;
    uint64_t v18 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v18 + 16) = v10;
    bzero((void *)(v18 + 32), 8 * v10);
    uint64_t v16 = v60;
    a2 = v17;
    uint64_t v66 = v18;
    if (v60) {
      goto LABEL_4;
    }
LABEL_48:
    __break(1u);
LABEL_49:
    swift_bridgeObjectRelease();
    return;
  }
LABEL_47:
  uint64_t v66 = MEMORY[0x263F8EE78];
  if (!v16) {
    goto LABEL_48;
  }
LABEL_4:
  BOOL v48 = a7;
  int64_t v19 = a3 >> 1;
  BOOL v20 = (uint64_t)(a3 >> 1) >= a2;
  if (v16 > 0) {
    BOOL v20 = (uint64_t)(a3 >> 1) <= a2;
  }
  if (!v20)
  {
    unint64_t v61 = 0;
    unint64_t v57 = a4 >> 62;
    unint64_t v58 = a3 & 1;
    unint64_t v51 = a4;
    uint64_t v52 = a4 & 0x3FFFFFFFFFFFFFFFLL;
    BOOL v21 = (unint64_t *)(a4 + 16);
    int64_t v22 = (void **)(a4 + 32);
    uint64_t v23 = a2;
    a7 = a5;
    uint64_t v49 = a6;
    uint64_t v50 = v9;
    int64_t v55 = a3 >> 1;
    uint64_t v56 = a2;
    while (1)
    {
      int64_t v25 = v23 + v16;
      if (__OFADD__(v23, v16)) {
        break;
      }
      if (v19 < v25) {
        int64_t v25 = v19;
      }
      if (v25 < v23) {
        goto LABEL_55;
      }
      if (v23 < a2) {
        goto LABEL_56;
      }
      if (v25 < 0) {
        goto LABEL_57;
      }
      int64_t v62 = v23 + v16;
      uint64_t v26 = v58 | (2 * v25);
      uint64_t v27 = swift_unknownObjectRetain();
      uint64_t v28 = v23;
      uint64_t v29 = v11;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))a7)(v27, a1, v28, v26, &v66);
      swift_unknownObjectRelease();
      if (v11) {
        goto LABEL_49;
      }
      uint64_t v30 = v66;
      if (v57)
      {
        if (v57 == 1)
        {
          swift_bridgeObjectRetain();
          outlined copy of GadgetEvaluation<Field32>(a4);
          a3 = v52;
          specialized QueryGadget.evaluate<A>(at:)(v30, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(), v65);
          outlined consume of GadgetEvaluation<Field32>(a4);
          swift_bridgeObjectRelease();
        }
        else
        {
          a3 = (unint64_t)v9;
          specialized ParallelSum.evaluate<A>(at:)(v66, v65);
        }
      }
      else
      {
        swift_beginAccess();
        uint64_t v31 = *(void *)(a4 + 16);
        if (v31 >= *(void *)(a4 + 24))
        {
          swift_bridgeObjectRetain();
          outlined copy of GadgetEvaluation<Field32>(a4);
          uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v64 = v44;
          v45._countAndFlagsBits = 540884512;
          v45._object = (void *)0xE400000000000000;
          String.append(_:)(v45);
          v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v46);
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
          swift_allocError();
          *(void *)uint64_t v47 = v63;
          *(void *)(v47 + 8) = v64;
          *(unsigned char *)(v47 + 16) = 3;
          swift_willThrow();
          outlined consume of GadgetEvaluation<Field32>(a4);
          swift_bridgeObjectRelease_n();
          return;
        }
        uint64_t v54 = v30;
        *BOOL v21 = v31 + 1;
        uint64_t v32 = *(void *)(v30 + 16);
        if (v32)
        {
          uint64_t v33 = v30 + 32;
          swift_bridgeObjectRetain();
          outlined copy of GadgetEvaluation<Field32>(a4);
          swift_beginAccess();
          unint64_t v34 = 0;
          while (1)
          {
            unint64_t v35 = *v21;
            uint64_t v36 = *(void *)(v33 + 8 * v34);
            long long v37 = *v22;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *int64_t v22 = v37;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              long long v37 = specialized _ArrayBuffer._consumeAndCreateNew()(v37);
              *int64_t v22 = v37;
            }
            if (v34 >= v37[2]) {
              break;
            }
            unint64_t v39 = &v37[v34];
            uint64_t v40 = (char *)v39[4];
            char v41 = swift_isUniquelyReferenced_nonNull_native();
            v39[4] = v40;
            if (v41)
            {
              if ((v35 & 0x8000000000000000) != 0) {
                goto LABEL_53;
              }
            }
            else
            {
              uint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v40);
              v39[4] = v40;
              if ((v35 & 0x8000000000000000) != 0) {
                goto LABEL_53;
              }
            }
            if (v35 >= *((void *)v40 + 2)) {
              goto LABEL_52;
            }
            ++v34;
            *(void *)&v40[8 * v35 + 32] = v36;
            if (v32 == v34) {
              goto LABEL_39;
            }
          }
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
          break;
        }
        swift_bridgeObjectRetain();
        outlined copy of GadgetEvaluation<Field32>(a4);
LABEL_39:
        uint64_t v9 = v50;
        a3 = (unint64_t)v50;
        specialized ParallelSum.evaluate<A>(at:)(v54, v65);
        a4 = v51;
        outlined consume of GadgetEvaluation<Field32>(v51);
        swift_bridgeObjectRelease();
        uint64_t v11 = v29;
        a6 = v49;
        a7 = a5;
      }
      int64_t v19 = v55;
      a2 = v56;
      uint64_t v16 = v60;
      if (v65[0])
      {
        unint64_t v42 = 0xFFFFFFFF00000001 - v65[0];
        if (v65[0] > 0xFFFFFFFF00000001) {
          goto LABEL_58;
        }
        if (v61 >= v42)
        {
          v61 -= v42;
        }
        else
        {
          if (v42 > 0xFFFFFFFF00000001) {
            goto LABEL_59;
          }
          BOOL v43 = __CFADD__(v61, v65[0]);
          v61 += v65[0];
          if (v43)
          {
            __break(1u);
            goto LABEL_47;
          }
        }
      }
      uint64_t v23 = v62;
      BOOL v24 = v55 >= v62;
      if (v60 > 0) {
        BOOL v24 = v62 >= v55;
      }
      if (v24) {
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  unint64_t v61 = 0;
LABEL_8:
  swift_bridgeObjectRelease();
  *BOOL v48 = v61;
}

void specialized ParallelSum.chunkEvaluateSum(_:for:_:)(uint64_t a1@<X1>, int64_t a2@<X2>, unint64_t a3@<X3>, unint64_t a4@<X4>, void (*a5)(uint64_t, uint64_t, int64_t, uint64_t, uint64_t *)@<X5>, unsigned int *a6@<X8>)
{
  uint64_t v8 = *v6;
  if (*v6 < 0) {
    goto LABEL_175;
  }
  uint64_t v9 = v7;
  if (v8)
  {
    uint64_t v13 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v13 + 16) = v8;
    bzero((void *)(v13 + 32), 4 * v8);
  }
  else
  {
    uint64_t v13 = MEMORY[0x263F8EE78];
  }
  uint64_t v94 = v13;
  uint64_t v14 = v86[5];
  if (!v14)
  {
LABEL_176:
    __break(1u);
    goto LABEL_177;
  }
  unint64_t v79 = a6;
  int64_t v15 = a3 >> 1;
  BOOL v16 = (uint64_t)(a3 >> 1) >= a2;
  if (v14 > 0) {
    BOOL v16 = (uint64_t)(a3 >> 1) <= a2;
  }
  if (v16)
  {
    unsigned int v88 = 0;
LABEL_10:
    swift_bridgeObjectRelease();
    *unint64_t v79 = v88;
    return;
  }
  unsigned int v88 = 0;
  uint64_t v82 = a2;
  uint64_t v83 = a3 & 1;
  unint64_t v17 = a4 >> 62;
  uint64_t v18 = (unint64_t *)(a4 + 16);
  int64_t v19 = (void **)(a4 + 32);
  int64_t v20 = a2;
  int64_t v80 = v15;
  uint64_t v81 = v86[5];
  while (1)
  {
    int64_t v22 = v20 + v14;
    if (__OFADD__(v20, v14)) {
      unint64_t v23 = ((v20 + v14) >> 63) ^ 0x8000000000000000;
    }
    else {
      unint64_t v23 = v20 + v14;
    }
    if (__OFADD__(v20, v14)) {
      goto LABEL_162;
    }
    if (v15 < v22) {
      int64_t v22 = v15;
    }
    if (v22 < v20) {
      goto LABEL_163;
    }
    if (v20 < a2) {
      goto LABEL_164;
    }
    if (v22 < 0) {
      goto LABEL_165;
    }
    uint64_t v24 = v83 | (2 * v22);
    uint64_t v25 = swift_unknownObjectRetain();
    a5(v25, a1, v20, v24, &v94);
    swift_unknownObjectRelease();
    if (v9)
    {
      swift_bridgeObjectRelease();
      return;
    }
    int64_t v89 = v23;
    uint64_t v26 = v94;
    uint64_t v90 = v94;
    if (!v17)
    {
      swift_beginAccess();
      uint64_t v28 = *(void *)(a4 + 16);
      if (v28 >= *(void *)(a4 + 24))
      {
        swift_bridgeObjectRetain();
        outlined copy of GadgetEvaluation<Field32>(a4);
        uint64_t v91 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v92 = v73;
        v74._countAndFlagsBits = 540884512;
        v74._object = (void *)0xE400000000000000;
        String.append(_:)(v74);
        v75._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v75);
        swift_bridgeObjectRelease();
        uint64_t v76 = v91;
        uint64_t v77 = v92;
        lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
        swift_allocError();
        *(void *)uint64_t v78 = v76;
        *(void *)(v78 + 8) = v77;
        *(unsigned char *)(v78 + 16) = 3;
        swift_willThrow();
        outlined consume of GadgetEvaluation<Field32>(a4);
        swift_bridgeObjectRelease_n();
        return;
      }
      *uint64_t v18 = v28 + 1;
      uint64_t v29 = *(void *)(v26 + 16);
      if (v29)
      {
        uint64_t v30 = v26 + 32;
        swift_bridgeObjectRetain();
        outlined copy of GadgetEvaluation<Field32>(a4);
        swift_beginAccess();
        unint64_t v31 = 0;
        while (1)
        {
          unint64_t v32 = *v18;
          int v33 = *(_DWORD *)(v30 + 4 * v31);
          unint64_t v34 = *v19;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *int64_t v19 = v34;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            unint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew()(v34);
            *int64_t v19 = v34;
          }
          if (v31 >= v34[2]) {
            break;
          }
          uint64_t v36 = &v34[v31];
          long long v37 = (char *)v36[4];
          char v38 = swift_isUniquelyReferenced_nonNull_native();
          v36[4] = v37;
          if (v38)
          {
            if ((v32 & 0x8000000000000000) != 0) {
              goto LABEL_142;
            }
          }
          else
          {
            long long v37 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v37);
            v36[4] = v37;
            if ((v32 & 0x8000000000000000) != 0) {
              goto LABEL_142;
            }
          }
          if (v32 >= *((void *)v37 + 2)) {
            goto LABEL_143;
          }
          ++v31;
          *(_DWORD *)&v37[4 * v32 + 32] = v33;
          if (v29 == v31) {
            goto LABEL_86;
          }
        }
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
        goto LABEL_145;
      }
      swift_bridgeObjectRetain();
      outlined copy of GadgetEvaluation<Field32>(a4);
LABEL_86:
      unint64_t v56 = v86[2];
      if (!v56) {
        goto LABEL_172;
      }
      unsigned int v27 = 0;
      if ((uint64_t)v56 >= 1)
      {
        uint64_t v57 = *(void *)(v90 + 16);
        if (v57)
        {
          unsigned int v27 = 0;
          uint64_t v58 = 0;
          uint64_t v59 = v86[4];
          BOOL v60 = 1;
          while (1)
          {
            uint64_t v61 = v58;
            unint64_t v62 = v57 - v58;
            BOOL v63 = __OFSUB__(v57, v58);
            BOOL v48 = __OFADD__(v58, v56);
            v58 += v56;
            if (v48)
            {
              if (v63) {
                goto LABEL_158;
              }
              if ((v62 & 0x8000000000000000) != 0) {
                goto LABEL_178;
              }
              BOOL v64 = v62 >= v56;
              uint64_t v65 = v62 >= v56 ? v58 : v57;
              if (v64) {
                goto LABEL_178;
              }
              uint64_t v58 = 0x7FFFFFFFFFFFFFFFLL;
              if (v65 < v61) {
                goto LABEL_150;
              }
            }
            else
            {
              if (v63) {
                goto LABEL_159;
              }
              if ((v62 & 0x8000000000000000) != 0)
              {
                uint64_t v65 = v58;
                if (v58 < v61) {
                  goto LABEL_150;
                }
              }
              else
              {
                if (v62 >= v56) {
                  uint64_t v65 = v58;
                }
                else {
                  uint64_t v65 = v57;
                }
                if (v65 < v61) {
                  goto LABEL_150;
                }
              }
            }
            if (!v60) {
              goto LABEL_151;
            }
            if (v61 < 0) {
              break;
            }
            if (v57 < v65) {
              goto LABEL_153;
            }
            if (v61 >= (unint64_t)v65) {
              goto LABEL_154;
            }
            uint64_t v66 = *(void *)(v59 + 16);
            if (!v66) {
              goto LABEL_155;
            }
            unsigned int v67 = *(_DWORD *)(v90 + 32 + 4 * v61);
            uint64_t v68 = v66 + 7;
            while (!*(_DWORD *)(v59 + 4 * v68))
            {
              unint64_t v69 = v68 - 7;
              --v68;
              if (v69 <= 1) {
                goto LABEL_91;
              }
            }
            specialized evaluateUsingHorner<A, B>(_:atInput:)(v59, v67, &v91);
            if (v91)
            {
              unsigned int v70 = -1048575 - v91;
              if (v91 > 0xFFF00001) {
                goto LABEL_161;
              }
              if (v27 >= v70)
              {
                v27 -= v70;
              }
              else
              {
                if (v70 > 0xFFF00001) {
                  goto LABEL_168;
                }
                BOOL v49 = __CFADD__(v27, v91);
                v27 += v91;
                if (v49) {
                  goto LABEL_169;
                }
              }
            }
LABEL_91:
            BOOL v60 = v57 >= v58;
            if (v58 >= v57) {
              goto LABEL_129;
            }
          }
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
          goto LABEL_176;
        }
      }
LABEL_129:
      outlined consume of GadgetEvaluation<Field32>(a4);
      swift_bridgeObjectRelease();
      goto LABEL_130;
    }
    if (v17 == 1)
    {
      swift_bridgeObjectRetain();
      outlined copy of GadgetEvaluation<Field32>(a4);
      specialized QueryGadget.evaluate<A>(at:)(v26, v93);
      outlined consume of GadgetEvaluation<Field32>(a4);
      swift_bridgeObjectRelease();
      unsigned int v27 = v93[0];
      goto LABEL_130;
    }
    unint64_t v39 = v86[2];
    if (!v39) {
      goto LABEL_171;
    }
    unsigned int v27 = 0;
    if ((uint64_t)v39 >= 1)
    {
      uint64_t v40 = *(void *)(v94 + 16);
      if (v40) {
        break;
      }
    }
LABEL_130:
    if (v27)
    {
      unsigned int v71 = -1048575 - v27;
      uint64_t v14 = v81;
      a2 = v82;
      int64_t v15 = v80;
      if (v27 > 0xFFF00001) {
        goto LABEL_170;
      }
      uint64_t v9 = 0;
      LODWORD(v17) = a4 >> 62;
      if (v88 >= v71)
      {
        v88 -= v71;
      }
      else
      {
        BOOL v49 = v71 <= 0xFFF00001;
        unsigned int v72 = -1048575 - v71;
        if (!v49) {
          goto LABEL_173;
        }
        BOOL v49 = __CFADD__(v88, v72);
        v88 += v72;
        if (v49) {
          goto LABEL_174;
        }
      }
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v14 = v81;
      a2 = v82;
      LODWORD(v17) = a4 >> 62;
      int64_t v15 = v80;
    }
    int64_t v20 = v89;
    BOOL v21 = v15 >= v89;
    if (v14 > 0) {
      BOOL v21 = v89 >= v15;
    }
    if (v21) {
      goto LABEL_10;
    }
  }
  unsigned int v27 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = v86[4];
  uint64_t v43 = v94 + 32;
  BOOL v44 = 1;
  while (2)
  {
    uint64_t v45 = v41;
    unint64_t v46 = v40 - v41;
    BOOL v47 = __OFSUB__(v40, v41);
    BOOL v48 = __OFADD__(v41, v39);
    v41 += v39;
    if (!v48)
    {
      if (v47) {
        goto LABEL_157;
      }
      if ((v46 & 0x8000000000000000) != 0)
      {
        uint64_t v50 = v41;
        if (v41 < v45) {
          goto LABEL_144;
        }
      }
      else
      {
        if (v46 >= v39) {
          uint64_t v50 = v41;
        }
        else {
          uint64_t v50 = v40;
        }
        if (v50 < v45) {
          goto LABEL_144;
        }
      }
LABEL_69:
      if (v44)
      {
        if ((v45 & 0x8000000000000000) == 0)
        {
          if (v40 >= v50)
          {
            if (v45 < (unint64_t)v50)
            {
              uint64_t v51 = *(void *)(v42 + 16);
              if (v51)
              {
                unsigned int v52 = *(_DWORD *)(v43 + 4 * v45);
                uint64_t v53 = v51 + 7;
                while (!*(_DWORD *)(v42 + 4 * v53))
                {
                  unint64_t v54 = v53 - 7;
                  --v53;
                  if (v54 <= 1) {
                    goto LABEL_47;
                  }
                }
                specialized evaluateUsingHorner<A, B>(_:atInput:)(v42, v52, &v91);
                if (v91)
                {
                  unsigned int v55 = -1048575 - v91;
                  if (v91 > 0xFFF00001) {
                    goto LABEL_160;
                  }
                  if (v27 >= v55)
                  {
                    v27 -= v55;
                  }
                  else
                  {
                    if (v55 > 0xFFF00001) {
                      goto LABEL_166;
                    }
                    BOOL v49 = __CFADD__(v27, v91);
                    v27 += v91;
                    if (v49) {
                      goto LABEL_167;
                    }
                  }
                }
LABEL_47:
                BOOL v44 = v40 >= v41;
                if (v41 >= v40) {
                  goto LABEL_130;
                }
                continue;
              }
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
              goto LABEL_152;
            }
LABEL_148:
            __break(1u);
            goto LABEL_149;
          }
LABEL_147:
          __break(1u);
          goto LABEL_148;
        }
LABEL_146:
        __break(1u);
        goto LABEL_147;
      }
LABEL_145:
      __break(1u);
      goto LABEL_146;
    }
    break;
  }
  if (v47) {
    goto LABEL_156;
  }
  if ((v46 & 0x8000000000000000) == 0)
  {
    BOOL v49 = v46 >= v39;
    uint64_t v50 = v46 >= v39 ? v41 : v40;
    if (!v49)
    {
      uint64_t v41 = 0x7FFFFFFFFFFFFFFFLL;
      if (v50 < v45) {
        goto LABEL_144;
      }
      goto LABEL_69;
    }
  }
LABEL_177:
  __break(1u);
LABEL_178:
  __break(1u);
}

void specialized ParallelSum.chunkEvaluateSum(_:for:_:)(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, unint64_t a4@<X4>, unsigned int *a5@<X5>, uint64_t a6@<X6>, unsigned int *a7@<X8>)
{
  uint64_t v9 = v7;
  uint64_t v10 = *v7;
  if ((*v7 & 0x8000000000000000) != 0)
  {
LABEL_60:
    __break(1u);
    return;
  }
  uint64_t v11 = v8;
  uint64_t v16 = v9[5];
  uint64_t v60 = v16;
  if (v10)
  {
    uint64_t v17 = a2;
    uint64_t v18 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v18 + 16) = v10;
    bzero((void *)(v18 + 32), 4 * v10);
    uint64_t v16 = v60;
    a2 = v17;
    uint64_t v66 = v18;
    if (v60) {
      goto LABEL_4;
    }
LABEL_48:
    __break(1u);
LABEL_49:
    swift_bridgeObjectRelease();
    return;
  }
LABEL_47:
  uint64_t v66 = MEMORY[0x263F8EE78];
  if (!v16) {
    goto LABEL_48;
  }
LABEL_4:
  BOOL v48 = a7;
  int64_t v19 = a3 >> 1;
  BOOL v20 = (uint64_t)(a3 >> 1) >= a2;
  if (v16 > 0) {
    BOOL v20 = (uint64_t)(a3 >> 1) <= a2;
  }
  if (!v20)
  {
    unsigned int v61 = 0;
    unint64_t v57 = a4 >> 62;
    unint64_t v58 = a3 & 1;
    unint64_t v51 = a4;
    uint64_t v52 = a4 & 0x3FFFFFFFFFFFFFFFLL;
    BOOL v21 = (unint64_t *)(a4 + 16);
    int64_t v22 = (void **)(a4 + 32);
    uint64_t v23 = a2;
    a7 = a5;
    uint64_t v49 = a6;
    uint64_t v50 = v9;
    int64_t v55 = a3 >> 1;
    uint64_t v56 = a2;
    while (1)
    {
      int64_t v25 = v23 + v16;
      if (__OFADD__(v23, v16)) {
        break;
      }
      if (v19 < v25) {
        int64_t v25 = v19;
      }
      if (v25 < v23) {
        goto LABEL_55;
      }
      if (v23 < a2) {
        goto LABEL_56;
      }
      if (v25 < 0) {
        goto LABEL_57;
      }
      int64_t v62 = v23 + v16;
      uint64_t v26 = v58 | (2 * v25);
      uint64_t v27 = swift_unknownObjectRetain();
      uint64_t v28 = v23;
      uint64_t v29 = v11;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))a7)(v27, a1, v28, v26, &v66);
      swift_unknownObjectRelease();
      if (v11) {
        goto LABEL_49;
      }
      uint64_t v30 = v66;
      if (v57)
      {
        if (v57 == 1)
        {
          swift_bridgeObjectRetain();
          outlined copy of GadgetEvaluation<Field32>(a4);
          a3 = v52;
          specialized QueryGadget.evaluate<A>(at:)(v30, v65);
          outlined consume of GadgetEvaluation<Field32>(a4);
          swift_bridgeObjectRelease();
        }
        else
        {
          a3 = (unint64_t)v9;
          specialized ParallelSum.evaluate<A>(at:)(v66, v65);
        }
      }
      else
      {
        swift_beginAccess();
        uint64_t v31 = *(void *)(a4 + 16);
        if (v31 >= *(void *)(a4 + 24))
        {
          swift_bridgeObjectRetain();
          outlined copy of GadgetEvaluation<Field32>(a4);
          uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v64 = v44;
          v45._countAndFlagsBits = 540884512;
          v45._object = (void *)0xE400000000000000;
          String.append(_:)(v45);
          v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v46);
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
          swift_allocError();
          *(void *)uint64_t v47 = v63;
          *(void *)(v47 + 8) = v64;
          *(unsigned char *)(v47 + 16) = 3;
          swift_willThrow();
          outlined consume of GadgetEvaluation<Field32>(a4);
          swift_bridgeObjectRelease_n();
          return;
        }
        uint64_t v54 = v30;
        *BOOL v21 = v31 + 1;
        uint64_t v32 = *(void *)(v30 + 16);
        if (v32)
        {
          uint64_t v33 = v30 + 32;
          swift_bridgeObjectRetain();
          outlined copy of GadgetEvaluation<Field32>(a4);
          swift_beginAccess();
          unint64_t v34 = 0;
          while (1)
          {
            unint64_t v35 = *v21;
            int v36 = *(_DWORD *)(v33 + 4 * v34);
            long long v37 = *v22;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *int64_t v22 = v37;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              long long v37 = specialized _ArrayBuffer._consumeAndCreateNew()(v37);
              *int64_t v22 = v37;
            }
            if (v34 >= v37[2]) {
              break;
            }
            unint64_t v39 = &v37[v34];
            uint64_t v40 = (char *)v39[4];
            char v41 = swift_isUniquelyReferenced_nonNull_native();
            v39[4] = v40;
            if (v41)
            {
              if ((v35 & 0x8000000000000000) != 0) {
                goto LABEL_53;
              }
            }
            else
            {
              uint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v40);
              v39[4] = v40;
              if ((v35 & 0x8000000000000000) != 0) {
                goto LABEL_53;
              }
            }
            if (v35 >= *((void *)v40 + 2)) {
              goto LABEL_52;
            }
            ++v34;
            *(_DWORD *)&v40[4 * v35 + 32] = v36;
            if (v32 == v34) {
              goto LABEL_39;
            }
          }
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
          break;
        }
        swift_bridgeObjectRetain();
        outlined copy of GadgetEvaluation<Field32>(a4);
LABEL_39:
        uint64_t v9 = v50;
        a3 = (unint64_t)v50;
        specialized ParallelSum.evaluate<A>(at:)(v54, v65);
        a4 = v51;
        outlined consume of GadgetEvaluation<Field32>(v51);
        swift_bridgeObjectRelease();
        uint64_t v11 = v29;
        a6 = v49;
        a7 = a5;
      }
      int64_t v19 = v55;
      a2 = v56;
      uint64_t v16 = v60;
      if (v65[0])
      {
        unsigned int v42 = -1048575 - v65[0];
        if (v65[0] > 0xFFF00001) {
          goto LABEL_58;
        }
        if (v61 >= v42)
        {
          v61 -= v42;
        }
        else
        {
          if (v42 > 0xFFF00001) {
            goto LABEL_59;
          }
          BOOL v43 = __CFADD__(v61, v65[0]);
          v61 += v65[0];
          if (v43)
          {
            __break(1u);
            goto LABEL_47;
          }
        }
      }
      uint64_t v23 = v62;
      BOOL v24 = v55 >= v62;
      if (v60 > 0) {
        BOOL v24 = v62 >= v55;
      }
      if (v24) {
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  unsigned int v61 = 0;
LABEL_8:
  swift_bridgeObjectRelease();
  *BOOL v48 = v61;
}

uint64_t specialized Gadget.wirePolynomialLength.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  BOOL v2 = __OFADD__(v1, 1);
  uint64_t v3 = v1 + 1;
  if (v2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v3 < 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  if (v3) {
    return 1 << -(char)__clz(v3 - 1);
  }
  else {
    return 1;
  }
}

{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  uint64_t result;

  uint64_t v1 = *(void *)(v0 + 24);
  BOOL v2 = __OFADD__(v1, 1);
  uint64_t v3 = v1 + 1;
  if (v2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v3 < 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  if (v3) {
    return 1 << -(char)__clz(v3 - 1);
  }
  else {
    return 1;
  }
}

uint64_t specialized Gadget.gadgetPolynomialLength.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  BOOL v2 = __OFADD__(v1, 1);
  uint64_t v3 = v1 + 1;
  if (v2)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v3 < 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v3)
  {
    uint64_t v4 = 1 << -(char)__clz(v3 - 1);
    BOOL v2 = __OFSUB__(v4, 1);
    uint64_t v5 = v4 - 1;
    if (!v2) {
      goto LABEL_5;
    }
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v5 = 0;
LABEL_5:
  uint64_t v6 = *(void *)(v0 + 8);
  uint64_t v7 = v6 * v5;
  if ((unsigned __int128)(v6 * (__int128)v5) >> 64 != (v6 * v5) >> 63)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t result = v7 + 1;
  if (__OFADD__(v7, 1)) {
LABEL_14:
  }
    __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  uint64_t v1 = *(void *)(v0 + 24);
  BOOL v2 = __OFADD__(v1, 1);
  uint64_t v3 = v1 + 1;
  if (v2)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v3 < 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v3)
  {
    uint64_t v4 = 1 << -(char)__clz(v3 - 1);
    BOOL v2 = __OFSUB__(v4, 1);
    uint64_t v5 = v4 - 1;
    if (!v2) {
      goto LABEL_5;
    }
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v5 = 0;
LABEL_5:
  uint64_t v6 = *(void *)(v0 + 8);
  uint64_t v7 = v6 * v5;
  if ((unsigned __int128)(v6 * (__int128)v5) >> 64 != (v6 * v5) >> 63)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t result = v7 + 1;
  if (__OFADD__(v7, 1)) {
LABEL_14:
  }
    __break(1u);
  return result;
}

uint64_t specialized static JointRandomness.jointRandPart(commitment:blind:aggregatorID:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t), uint64_t (*a10)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v38 = a3;
  uint64_t v39 = a4;
  uint64_t v36 = a2;
  long long v37 = a10;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HMAC<SHA256>);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13, v15);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA256>);
  uint64_t v34 = *(void *)(v18 - 8);
  uint64_t v35 = v18;
  MEMORY[0x270FA5388](v18, v19);
  BOOL v21 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  uint64_t v22 = a9(a8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_260BF9FF0;
  *(unsigned char *)(inited + 32) = a6;
  uint64_t v40 = inited;
  uint64_t v24 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v24);
  uint64_t v25 = v40;
  type metadata accessor for XofHmacSha256Aes128(0);
  swift_allocObject();
  uint64_t v26 = XofHmacSha256Aes128.init(seedBytes:domainSeparationTag:binder:)(a5, v22, v25);
  uint64_t v27 = swift_unknownObjectRetain();
  uint64_t v28 = v37(v27, v36, v38, v39);
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v30 = OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream;
  if (*(void *)(v26 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream))
  {
    __break(1u);
  }
  else
  {
    uint64_t v41 = v28;
    uint64_t v31 = v26 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_hmac;
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
    lazy protocol witness table accessor for type [UInt8] and conformance <A> [A](&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8]);
    HMAC.update<A>(data:)();
    swift_endAccess();
    uint64_t result = swift_bridgeObjectRelease();
    if (!*(void *)(v26 + v30))
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v31, v13);
      HMAC.finalize()();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
      uint64_t v32 = v35;
      HashedAuthenticationCode.withUnsafeBytes<A>(_:)();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v21, v32);
      uint64_t v33 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_s5UInt8Vs5NeverOTg5060_s4VDAF24ExtendableOutputFunctionPAAE10nextVector5countSays5D44VGSi_tFAGSiXEfU_AA19XofHmacSha256Aes128C_TG54VDAF0rstU0CTf1cn_nTf4ng_n(0, 32, v26);
      swift_release();
      return v33;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized static JointRandomness.jointRandPartsAndLeaderShare(commitment:leaderJointRandBlind:helperJointRandBlinds:helperMeasurementSeeds:numOfAggregators:nonce:)(char *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t i = *(uint64_t (**)())(a6 + 16);
  if (i != (uint64_t (*)())16) {
    goto LABEL_35;
  }
  uint64_t v13 = a5;
  uint64_t v11 = a4;
  unint64_t v8 = a3;
  uint64_t v7 = a1;
  uint64_t v38 = a2;
  uint64_t v10 = MEMORY[0x263F8EE78];
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5 & ~(a5 >> 63), 0, MEMORY[0x263F8EE78]);
  a4 = result;
  unint64_t v9 = *(void *)(result + 16);
  uint64_t i = *(uint64_t (**)())(result + 24);
  uint64_t inited = v9 + 1;
  if (v9 >= (unint64_t)i >> 1) {
    goto LABEL_36;
  }
  while (1)
  {
    *(void *)(a4 + 16) = inited;
    *(void *)(a4 + 8 * v9 + 32) = v10;
    if (__OFSUB__(v13--, 1))
    {
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 < 0) {
      goto LABEL_38;
    }
    Swift::String v45 = (char *)a4;
    if (!v13) {
      break;
    }
    unint64_t v39 = v8 + 32;
    uint64_t v41 = v11 + 32;
    unsigned int v42 = *(uint64_t (**)())(v11 + 16);
    uint64_t v40 = *(uint64_t (**)())(v8 + 16);
    swift_bridgeObjectRetain();
    unint64_t v8 = 0;
    uint64_t i = __DataStorage._length.getter;
    while (1)
    {
      if (v8 == v13) {
        goto LABEL_31;
      }
      if (v8 == 255) {
        break;
      }
      uint64_t i = v42;
      if ((uint64_t (*)())v8 == v42) {
        goto LABEL_33;
      }
      unint64_t v9 = v8 + 1;
      uint64_t v10 = *(void *)(v41 + 8 * v8);
      swift_bridgeObjectRetain();
      uint64_t v11 = specialized static PINE.domainSeparationTag(usage:)(0);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_260BF9FF0;
      *(unsigned char *)(inited + 32) = v8 + 1;
      uint64_t v17 = specialized static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(v10, v11, inited);
      swift_setDeallocating();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v18 = specialized static FieldElement.randomVector<A>(count:using:)(*((void *)v7 + 2), v17, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t))specialized static FieldElement.randomElement<A>(using:));
      uint64_t i = v40;
      if ((uint64_t (*)())v8 == v40) {
        goto LABEL_34;
      }
      uint64_t v19 = v18;
      uint64_t v11 = v18 + 32;
      uint64_t v20 = (2 * *(void *)(v18 + 16)) | 1;
      uint64_t v21 = *(void *)(v39 + 8 * v8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v10 = specialized static JointRandomness.jointRandPart(commitment:blind:aggregatorID:nonce:)(v19, v11, 0, v20, v21, v8 + 1, a6, a7, (uint64_t (*)(uint64_t))specialized static PINE.domainSeparationTag(usage:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized VDAFEncodable.encodedBytes.getter);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v22 = v45;
      unint64_t v24 = *((void *)v45 + 2);
      unint64_t v23 = *((void *)v45 + 3);
      if (v24 >= v23 >> 1) {
        uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v24 + 1, 1, v45);
      }
      *((void *)v22 + 2) = v24 + 1;
      *(void *)&v22[8 * v24 + 32] = v10;
      unint64_t v8 = *((void *)v7 + 2);
      uint64_t inited = *(void *)(v19 + 16);
      if (v8 != inited)
      {
        _StringGuts.grow(_:)(28);
        swift_bridgeObjectRelease();
        v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v34);
        swift_bridgeObjectRelease();
        v35._countAndFlagsBits = 540877088;
        v35._object = (void *)0xE400000000000000;
        String.append(_:)(v35);
        v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v36);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
        swift_allocError();
        *(void *)uint64_t v37 = 0xD000000000000020;
        *(void *)(v37 + 8) = 0x8000000260BFF130;
        *(unsigned char *)(v37 + 16) = 1;
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_release();
      }
      Swift::String v45 = v22;
      if (v8)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v7);
        }
        for (uint64_t i = 0; (uint64_t (*)())v8 != i; uint64_t i = (uint64_t (*)())((char *)i + 1))
        {
          unint64_t v25 = *(void *)(v11 + 8 * i);
          uint64_t v26 = &v7[8 * (void)i];
          unint64_t v27 = *((void *)v26 + 4);
          uint64_t v28 = v27 - v25;
          if (v27 < v25)
          {
            unint64_t v29 = 0xFFFEB00001 - v25;
            if (v25 > 0xFFFEB00001)
            {
              __break(1u);
LABEL_30:
              __break(1u);
LABEL_31:
              __break(1u);
              goto LABEL_32;
            }
            BOOL v30 = __CFADD__(v27, v29);
            uint64_t v28 = v27 + v29;
            if (v30) {
              goto LABEL_30;
            }
          }
          *((void *)v26 + 4) = v28;
        }
      }
      swift_release();
      swift_bridgeObjectRelease();
      unint64_t v8 = v9;
      if (v9 == v13) {
        goto LABEL_26;
      }
    }
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)((unint64_t)i > 1), inited, 1, (char *)a4);
    a4 = result;
  }
  swift_bridgeObjectRetain();
LABEL_26:
  uint64_t v31 = (2 * *((void *)v7 + 2)) | 1;
  uint64_t v32 = swift_bridgeObjectRetain();
  uint64_t v33 = specialized static JointRandomness.jointRandPart(commitment:blind:aggregatorID:nonce:)(v32, (uint64_t)(v7 + 32), 0, v31, v38, 0, a6, a7, (uint64_t (*)(uint64_t))specialized static PINE.domainSeparationTag(usage:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized VDAFEncodable.encodedBytes.getter);
  uint64_t result = swift_bridgeObjectRelease();
  if (*((void *)v45 + 2))
  {
    *((void *)v45 + 4) = v33;
    swift_bridgeObjectRelease();
    return (uint64_t)v45;
  }
LABEL_39:
  __break(1u);
  return result;
}

{
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t (*i)();
  uint64_t result;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  char *v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t (*v40)();
  uint64_t v41;
  uint64_t (*v42)();
  char *v45;

  uint64_t i = *(uint64_t (**)())(a6 + 16);
  if (i != (uint64_t (*)())16) {
    goto LABEL_35;
  }
  uint64_t v13 = a5;
  uint64_t v11 = a4;
  unint64_t v8 = a3;
  uint64_t v7 = a1;
  uint64_t v38 = a2;
  uint64_t v10 = MEMORY[0x263F8EE78];
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5 & ~(a5 >> 63), 0, MEMORY[0x263F8EE78]);
  a4 = result;
  unint64_t v9 = *(void *)(result + 16);
  uint64_t i = *(uint64_t (**)())(result + 24);
  uint64_t inited = v9 + 1;
  if (v9 >= (unint64_t)i >> 1) {
    goto LABEL_36;
  }
  while (1)
  {
    *(void *)(a4 + 16) = inited;
    *(void *)(a4 + 8 * v9 + 32) = v10;
    if (__OFSUB__(v13--, 1))
    {
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 < 0) {
      goto LABEL_38;
    }
    Swift::String v45 = (char *)a4;
    if (!v13) {
      break;
    }
    unint64_t v39 = v8 + 32;
    uint64_t v41 = v11 + 32;
    unsigned int v42 = *(uint64_t (**)())(v11 + 16);
    uint64_t v40 = *(uint64_t (**)())(v8 + 16);
    swift_bridgeObjectRetain();
    unint64_t v8 = 0;
    uint64_t i = __DataStorage._length.getter;
    while (1)
    {
      if (v8 == v13) {
        goto LABEL_31;
      }
      if (v8 == 255) {
        break;
      }
      uint64_t i = v42;
      if ((uint64_t (*)())v8 == v42) {
        goto LABEL_33;
      }
      unint64_t v9 = v8 + 1;
      uint64_t v10 = *(void *)(v41 + 8 * v8);
      swift_bridgeObjectRetain();
      uint64_t v11 = specialized static PINE.domainSeparationTag(usage:)(0);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_260BF9FF0;
      *(unsigned char *)(inited + 32) = v8 + 1;
      uint64_t v17 = specialized static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(v10, v11, inited);
      swift_setDeallocating();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v18 = specialized static FieldElement.randomVector<A>(count:using:)(*((void *)v7 + 2), v17);
      uint64_t i = v40;
      if ((uint64_t (*)())v8 == v40) {
        goto LABEL_34;
      }
      uint64_t v19 = v18;
      uint64_t v11 = v18 + 32;
      uint64_t v20 = (2 * *(void *)(v18 + 16)) | 1;
      uint64_t v21 = *(void *)(v39 + 8 * v8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v10 = specialized static JointRandomness.jointRandPart(commitment:blind:aggregatorID:nonce:)(v19, v11, 0, v20, v21, v8 + 1, a6, a7, (uint64_t (*)(uint64_t))specialized static PINE.domainSeparationTag(usage:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized VDAFEncodable.encodedBytes.getter);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v22 = v45;
      unint64_t v24 = *((void *)v45 + 2);
      unint64_t v23 = *((void *)v45 + 3);
      if (v24 >= v23 >> 1) {
        uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v24 + 1, 1, v45);
      }
      *((void *)v22 + 2) = v24 + 1;
      *(void *)&v22[8 * v24 + 32] = v10;
      unint64_t v8 = *((void *)v7 + 2);
      uint64_t inited = *(void *)(v19 + 16);
      if (v8 != inited)
      {
        _StringGuts.grow(_:)(28);
        swift_bridgeObjectRelease();
        v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v34);
        swift_bridgeObjectRelease();
        v35._countAndFlagsBits = 540877088;
        v35._object = (void *)0xE400000000000000;
        String.append(_:)(v35);
        v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v36);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
        swift_allocError();
        *(void *)uint64_t v37 = 0xD000000000000020;
        *(void *)(v37 + 8) = 0x8000000260BFF030;
        *(unsigned char *)(v37 + 16) = 1;
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_release();
      }
      Swift::String v45 = v22;
      if (v8)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v7);
        }
        for (uint64_t i = 0; (uint64_t (*)())v8 != i; uint64_t i = (uint64_t (*)())((char *)i + 1))
        {
          unint64_t v25 = *(_DWORD *)(v11 + 4 * i);
          uint64_t v26 = &v7[4 * (void)i];
          unint64_t v27 = *((_DWORD *)v26 + 8);
          uint64_t v28 = v27 - v25;
          if (v27 < v25)
          {
            unint64_t v29 = -1048575 - v25;
            if (v25 > 0xFFF00001)
            {
              __break(1u);
LABEL_30:
              __break(1u);
LABEL_31:
              __break(1u);
              goto LABEL_32;
            }
            BOOL v30 = __CFADD__(v27, v29);
            uint64_t v28 = v27 + v29;
            if (v30) {
              goto LABEL_30;
            }
          }
          *((_DWORD *)v26 + 8) = v28;
        }
      }
      swift_release();
      swift_bridgeObjectRelease();
      unint64_t v8 = v9;
      if (v9 == v13) {
        goto LABEL_26;
      }
    }
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)((unint64_t)i > 1), inited, 1, (char *)a4);
    a4 = result;
  }
  swift_bridgeObjectRetain();
LABEL_26:
  uint64_t v31 = (2 * *((void *)v7 + 2)) | 1;
  uint64_t v32 = swift_bridgeObjectRetain();
  uint64_t v33 = specialized static JointRandomness.jointRandPart(commitment:blind:aggregatorID:nonce:)(v32, (uint64_t)(v7 + 32), 0, v31, v38, 0, a6, a7, (uint64_t (*)(uint64_t))specialized static PINE.domainSeparationTag(usage:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized VDAFEncodable.encodedBytes.getter);
  uint64_t result = swift_bridgeObjectRelease();
  if (*((void *)v45 + 2))
  {
    *((void *)v45 + 4) = v33;
    swift_bridgeObjectRelease();
    return (uint64_t)v45;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t specialized static JointRandomness.jointRandPartsAndLeaderShare(commitment:leaderJointRandBlind:helperJointRandBlinds:helperMeasurementSeeds:numOfAggregators:nonce:)(char *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized static JointRandomness.jointRandPartsAndLeaderShare(commitment:leaderJointRandBlind:helperJointRandBlinds:helperMeasurementSeeds:numOfAggregators:nonce:)(a1, a2, a3, a4, a5, a6, 6u, (uint64_t (*)(uint64_t))specialized static VDAFProtocol.domainSeparationTag(usage:), (uint64_t)partial apply for closure #1 in XofHmacSha256Aes128.finalize(), (uint64_t (*)(void))specialized static VDAFProtocol.domainSeparationTag(usage:));
}

uint64_t specialized static JointRandomness.jointRandPartsAndLeaderShare(commitment:leaderJointRandBlind:helperJointRandBlinds:helperMeasurementSeeds:numOfAggregators:nonce:)(char *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t (*a8)(uint64_t), uint64_t a9, uint64_t (*a10)(void))
{
  uint64_t i = *(uint64_t (**)())(a6 + 16);
  if (i != (uint64_t (*)())16) {
    goto LABEL_35;
  }
  uint64_t v16 = a5;
  uint64_t v14 = a4;
  unint64_t v11 = a3;
  uint64_t v10 = a1;
  uint64_t v41 = a2;
  uint64_t v13 = MEMORY[0x263F8EE78];
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5 & ~(a5 >> 63), 0, MEMORY[0x263F8EE78]);
  a4 = result;
  unint64_t v12 = *(void *)(result + 16);
  uint64_t i = *(uint64_t (**)())(result + 24);
  uint64_t inited = v12 + 1;
  if (v12 >= (unint64_t)i >> 1) {
    goto LABEL_36;
  }
  while (1)
  {
    *(void *)(a4 + 16) = inited;
    *(void *)(a4 + 8 * v12 + 32) = v13;
    if (__OFSUB__(v16--, 1))
    {
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v16 < 0) {
      goto LABEL_38;
    }
    uint64_t v49 = (char *)a4;
    if (!v16) {
      break;
    }
    uint64_t v44 = v14 + 32;
    unint64_t v42 = v11 + 32;
    Swift::String v45 = *(uint64_t (**)())(v14 + 16);
    BOOL v43 = *(uint64_t (**)())(v11 + 16);
    swift_bridgeObjectRetain();
    unint64_t v11 = 0;
    uint64_t i = __DataStorage._length.getter;
    while (1)
    {
      if (v11 == v16) {
        goto LABEL_31;
      }
      if (v11 == 255) {
        break;
      }
      uint64_t i = v45;
      if ((uint64_t (*)())v11 == v45) {
        goto LABEL_33;
      }
      unint64_t v12 = v11 + 1;
      uint64_t v13 = *(void *)(v44 + 8 * v11);
      swift_bridgeObjectRetain();
      uint64_t v14 = a10(0);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_260BF9FF0;
      *(unsigned char *)(inited + 32) = v11 + 1;
      uint64_t v20 = specialized static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(v13, v14, inited);
      swift_setDeallocating();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v21 = specialized static FieldElement.randomVector<A>(count:using:)(*((void *)v10 + 2), v20, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t))specialized static FieldElement.randomElement<A>(using:));
      uint64_t i = v43;
      if ((uint64_t (*)())v11 == v43) {
        goto LABEL_34;
      }
      uint64_t v22 = v21;
      uint64_t v14 = v21 + 32;
      uint64_t v23 = (2 * *(void *)(v21 + 16)) | 1;
      uint64_t v24 = *(void *)(v42 + 8 * v11);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v13 = specialized static JointRandomness.jointRandPart(commitment:blind:aggregatorID:nonce:)(v22, v14, 0, v23, v24, v11 + 1, a6, a7, a8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized VDAFEncodable.encodedBytes.getter);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v25 = v49;
      unint64_t v27 = *((void *)v49 + 2);
      unint64_t v26 = *((void *)v49 + 3);
      if (v27 >= v26 >> 1) {
        unint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v26 > 1), v27 + 1, 1, v49);
      }
      *((void *)v25 + 2) = v27 + 1;
      *(void *)&v25[8 * v27 + 32] = v13;
      unint64_t v11 = *((void *)v10 + 2);
      uint64_t inited = *(void *)(v22 + 16);
      if (v11 != inited)
      {
        _StringGuts.grow(_:)(28);
        swift_bridgeObjectRelease();
        v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v37);
        swift_bridgeObjectRelease();
        v38._countAndFlagsBits = 540877088;
        v38._object = (void *)0xE400000000000000;
        String.append(_:)(v38);
        v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v39);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
        swift_allocError();
        *(void *)uint64_t v40 = 0xD000000000000020;
        *(void *)(v40 + 8) = 0x8000000260BFE7C0;
        *(unsigned char *)(v40 + 16) = 1;
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_release();
      }
      uint64_t v49 = v25;
      if (v11)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v10);
        }
        for (uint64_t i = 0; (uint64_t (*)())v11 != i; uint64_t i = (uint64_t (*)())((char *)i + 1))
        {
          unint64_t v28 = *(void *)(v14 + 8 * i);
          unint64_t v29 = &v10[8 * (void)i];
          unint64_t v30 = *((void *)v29 + 4);
          uint64_t v31 = v30 - v28;
          if (v30 < v28)
          {
            unint64_t v32 = 0xFFFFFFFF00000001 - v28;
            if (v28 > 0xFFFFFFFF00000001)
            {
              __break(1u);
LABEL_30:
              __break(1u);
LABEL_31:
              __break(1u);
              goto LABEL_32;
            }
            BOOL v33 = __CFADD__(v30, v32);
            uint64_t v31 = v30 + v32;
            if (v33) {
              goto LABEL_30;
            }
          }
          *((void *)v29 + 4) = v31;
        }
      }
      swift_release();
      swift_bridgeObjectRelease();
      unint64_t v11 = v12;
      if (v12 == v16) {
        goto LABEL_26;
      }
    }
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)((unint64_t)i > 1), inited, 1, (char *)a4);
    a4 = result;
  }
  swift_bridgeObjectRetain();
LABEL_26:
  uint64_t v34 = (2 * *((void *)v10 + 2)) | 1;
  uint64_t v35 = swift_bridgeObjectRetain();
  uint64_t v36 = specialized static JointRandomness.jointRandPart(commitment:blind:aggregatorID:nonce:)(v35, (uint64_t)(v10 + 32), 0, v34, v41, 0, a6, a7, a8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized VDAFEncodable.encodedBytes.getter);
  uint64_t result = swift_bridgeObjectRelease();
  if (*((void *)v49 + 2))
  {
    *((void *)v49 + 4) = v36;
    swift_bridgeObjectRelease();
    return (uint64_t)v49;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t specialized static JointRandomness.updateJointRandParts(_:commitment:blind:aggregatorID:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  return specialized static JointRandomness.updateJointRandParts(_:commitment:blind:aggregatorID:nonce:)(a1, a2, a3, a4, a5, a6, a7, a8, 6u, (uint64_t (*)(uint64_t))specialized static VDAFProtocol.domainSeparationTag(usage:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized VDAFEncodable.encodedBytes.getter);
}

uint64_t specialized static JointRandomness.updateJointRandParts(_:commitment:blind:aggregatorID:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t (*a10)(uint64_t), uint64_t (*a11)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  if ((a7 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v11 = a7;
    if (a7 <= 0xFF)
    {
      uint64_t v12 = a1;
      swift_bridgeObjectRetain();
      uint64_t v13 = specialized static JointRandomness.jointRandPart(commitment:blind:aggregatorID:nonce:)(a2, a3, a4, a5, a6, v11, a8, a9, a10, a11);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  __break(1u);
LABEL_8:
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v12);
  uint64_t v12 = result;
LABEL_4:
  if (*(void *)(v12 + 16) <= v11)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v12 + 8 * v11 + 32) = v13;
    swift_bridgeObjectRelease();
    return v12;
  }
  return result;
}

unint64_t specialized discreteFourierTransform<A, B, C>(input:size:output:)(uint64_t a1, int64_t a2, char **a3)
{
  specialized static BitReversal.indicesFor(_:)(a2);
  if (a2 < 0) {
    goto LABEL_103;
  }
  uint64_t v10 = v9;
  if (a2)
  {
    if ((unint64_t)(a2 - 1) >= *(void *)(v9 + 16))
    {
      __break(1u);
    }
    else
    {
      uint64_t v3 = *(void *)(a1 + 16);
      uint64_t v4 = *a3;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_5;
      }
    }
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
LABEL_5:
    unint64_t v11 = 0;
    do
    {
      uint64_t v13 = *(void *)(v10 + 8 * v11 + 32);
      if (v13 >= v3)
      {
        if (v11 >= *((void *)v4 + 2)) {
          goto LABEL_97;
        }
        uint64_t v12 = 0;
      }
      else
      {
        if (v13 < 0) {
          goto LABEL_96;
        }
        if (v11 >= *((void *)v4 + 2)) {
          goto LABEL_98;
        }
        uint64_t v12 = *(void *)(a1 + 32 + 8 * v13);
      }
      *(void *)&v4[8 * v11++ + 32] = v12;
    }
    while (a2 != v11);
    swift_bridgeObjectRelease();
    *a3 = v4;
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  uint64_t v4 = *a3;
LABEL_16:
  int64_t v5 = __clz(__rbit64(a2));
  unint64_t result = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v58 = a3;
  if ((result & 1) == 0) {
    goto LABEL_104;
  }
LABEL_17:
  uint64_t v15 = 0;
  uint64_t v16 = v4 + 32;
  unint64_t v17 = 0x26A8DB000uLL;
  unint64_t v18 = &one-time initialization token for roots;
  unint64_t v19 = 0x26A8DB000uLL;
  uint64_t v20 = &unk_26A8DD000;
  uint64_t v21 = 1;
  while (1)
  {
LABEL_18:
    unint64_t v22 = v21;
    if (v21 >= v5)
    {
      if ((v21 != v5) | v15 & 1)
      {
LABEL_91:
        *unint64_t v58 = v4;
        return result;
      }
      uint64_t v15 = 1;
      uint64_t v21 = v5;
    }
    else
    {
      ++v21;
    }
    if (*(void *)(v17 + 4016) != -1)
    {
      uint64_t v53 = v15;
      unint64_t result = swift_once();
      unint64_t v19 = 0x26A8DB000;
      unint64_t v18 = (void *)&one-time initialization token for roots;
      unint64_t v17 = 0x26A8DB000;
      uint64_t v15 = v53;
      uint64_t v20 = (void *)&unk_26A8DD000;
    }
    unint64_t v23 = v18[330];
    if (*(void *)(v19 + 4080) != -1)
    {
      unsigned int v57 = v15;
      unint64_t result = swift_once();
      unint64_t v19 = 0x26A8DB000;
      unint64_t v18 = (void *)&one-time initialization token for roots;
      unint64_t v17 = 0x26A8DB000;
      uint64_t v15 = v57;
      uint64_t v20 = (void *)&unk_26A8DD000;
    }
    uint64_t v24 = v20[224];
    if ((int64_t)v22 >= *(void *)(v24 + 16)) {
      break;
    }
    if ((v22 & 0x8000000000000000) != 0) {
      goto LABEL_100;
    }
    if (v22 >= 0x40) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = 1 << v22;
    }
    if (v25 < 0)
    {
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
      uint64_t v4 = (char *)result;
      goto LABEL_17;
    }
    if ((unint64_t)v25 >= 2)
    {
      uint64_t v26 = a2 / (1 << v22);
      if (v26 < 0) {
        goto LABEL_102;
      }
      uint64_t v27 = 0;
      unint64_t v28 = *(void *)(v24 + 8 * v22 + 32);
      uint64_t v29 = v25 >> 1;
      while (1)
      {
        if (v27 == ((v25 >> 1) & ~(v25 >> 63))) {
          goto LABEL_95;
        }
        if (v26)
        {
          for (uint64_t i = 0; v26 != i; ++i)
          {
            uint64_t v34 = v25 * i;
            if ((unsigned __int128)(v25 * (__int128)i) >> 64 != (v25 * i) >> 63)
            {
              __break(1u);
LABEL_84:
              __break(1u);
LABEL_85:
              __break(1u);
LABEL_86:
              __break(1u);
LABEL_87:
              __break(1u);
LABEL_88:
              __break(1u);
LABEL_89:
              __break(1u);
LABEL_90:
              __break(1u);
              goto LABEL_91;
            }
            unint64_t v35 = v34 + v27;
            if (__OFADD__(v34, v27)) {
              goto LABEL_84;
            }
            if ((v35 & 0x8000000000000000) != 0) {
              goto LABEL_85;
            }
            unint64_t v36 = *((void *)v4 + 2);
            if (v35 >= v36) {
              goto LABEL_86;
            }
            unint64_t v37 = v35 + v29;
            if (__OFADD__(v35, v29)) {
              goto LABEL_87;
            }
            if (v37 >= v36) {
              goto LABEL_88;
            }
            unint64_t v38 = *(void *)&v16[8 * v35];
            unint64_t v39 = *(void *)&v16[8 * v37];
            uint64_t v40 = (v39 * (unsigned __int128)v23) >> 64;
            unint64_t v41 = v39 * v23;
            uint64_t v42 = (0xCFFE47FFFEAFFFFFLL * v41 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
            BOOL v43 = __CFADD__(-(uint64_t)v41, v41);
            uint64_t v44 = v42 + v40;
            if (!__CFADD__(v42, v40))
            {
              if (v44 != -1)
              {
                unint64_t result = v44 + v43;
                if (result >= 0xFFFEB00001) {
                  result -= 0xFFFEB00001;
                }
                if (!result) {
                  goto LABEL_41;
                }
                goto LABEL_56;
              }
              if (!v43)
              {
                unint64_t result = 0xFFFFFF00014FFFFELL;
                goto LABEL_89;
              }
              BOOL v43 = 1;
            }
            uint64_t v45 = v43 + v44;
            BOOL v46 = __CFADD__(v45, 0xFFFFFF00014FFFFFLL);
            unint64_t result = v45 - 0xFFFEB00001;
            if (v46) {
              goto LABEL_90;
            }
            if (!result) {
              goto LABEL_41;
            }
LABEL_56:
            unint64_t v47 = 0xFFFEB00001 - result;
            if (result > 0xFFFEB00001) {
              goto LABEL_89;
            }
            uint64_t v48 = v38 - v47;
            if (v38 < v47)
            {
              if (v47 > 0xFFFEB00001)
              {
                __break(1u);
LABEL_93:
                __break(1u);
LABEL_94:
                __break(1u);
LABEL_95:
                __break(1u);
LABEL_96:
                __break(1u);
LABEL_97:
                __break(1u);
LABEL_98:
                __break(1u);
LABEL_99:
                __break(1u);
LABEL_100:
                __break(1u);
                goto LABEL_101;
              }
              uint64_t v48 = v38 + result;
              if (__CFADD__(v38, result)) {
                goto LABEL_94;
              }
            }
            *(void *)&v16[8 * v35] = v48;
            if (v38 >= result)
            {
LABEL_41:
              uint64_t v33 = v38 - result;
              goto LABEL_42;
            }
            uint64_t v33 = v38 + v47;
            if (__CFADD__(v38, v47)) {
              goto LABEL_93;
            }
LABEL_42:
            *(void *)&v16[8 * v37] = v33;
          }
        }
        uint64_t v49 = (v23 * (unsigned __int128)v28) >> 64;
        uint64_t v50 = (0xCFFE47FFFEAFFFFFLL * v23 * v28 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
        BOOL v30 = __CFADD__(-(uint64_t)(v23 * v28), v23 * v28);
        uint64_t v51 = v50 + v49;
        if (__CFADD__(v50, v49)) {
          goto LABEL_36;
        }
        if (v51 == -1)
        {
          if (v30)
          {
            BOOL v30 = 1;
LABEL_36:
            unint64_t v31 = v30 + v51;
            unint64_t v23 = v31 - 0xFFFEB00001;
            if (v31 >= 0xFFFEB00001) {
              goto LABEL_99;
            }
            goto LABEL_37;
          }
          unint64_t v23 = 0xFFFFFF00014FFFFELL;
        }
        else
        {
          unint64_t v52 = v51 + v30;
          if (v52 >= 0xFFFEB00001) {
            unint64_t v23 = v52 - 0xFFFEB00001;
          }
          else {
            unint64_t v23 = v52;
          }
        }
LABEL_37:
        if (++v27 == v29)
        {
          unint64_t v19 = 0x26A8DB000;
          goto LABEL_18;
        }
      }
    }
  }
  _StringGuts.grow(_:)(26);
  dispatch thunk of CustomStringConvertible.description.getter();
  swift_bridgeObjectRelease();
  v54._countAndFlagsBits = 2112544;
  v54._object = (void *)0xE300000000000000;
  String.append(_:)(v54);
  v55._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v55);
  swift_bridgeObjectRelease();
  v56._object = (void *)0x8000000260BFEBE0;
  v56._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v56);
  unint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  int64_t v3;
  char *v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int64_t v12;
  unint64_t result;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;
  unint64_t v36;
  unsigned int v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  unsigned int v47;
  char **v48;

  specialized static BitReversal.indicesFor(_:)(a2);
  if (a2 < 0) {
    goto LABEL_91;
  }
  uint64_t v9 = v8;
  if (a2)
  {
    if ((unint64_t)(a2 - 1) >= *(void *)(v8 + 16))
    {
      __break(1u);
    }
    else
    {
      uint64_t v3 = *(void *)(a1 + 16);
      uint64_t v4 = *a3;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_5;
      }
    }
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
LABEL_5:
    uint64_t v10 = 0;
    do
    {
      uint64_t v12 = *(void *)(v9 + 8 * v10 + 32);
      if (v12 >= v3)
      {
        if (v10 >= *((void *)v4 + 2)) {
          goto LABEL_85;
        }
        unint64_t v11 = 0;
      }
      else
      {
        if (v12 < 0) {
          goto LABEL_84;
        }
        if (v10 >= *((void *)v4 + 2)) {
          goto LABEL_86;
        }
        unint64_t v11 = *(_DWORD *)(a1 + 32 + 4 * v12);
      }
      *(_DWORD *)&v4[4 * v10++ + 32] = v11;
    }
    while (a2 != v10);
    swift_bridgeObjectRelease();
    *a3 = v4;
    goto LABEL_15;
  }
  swift_bridgeObjectRelease();
  uint64_t v4 = *a3;
LABEL_15:
  uint64_t v3 = __clz(__rbit64(a2));
  unint64_t result = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v48 = a3;
  if ((result & 1) == 0) {
    goto LABEL_92;
  }
LABEL_16:
  uint64_t v14 = 0;
  uint64_t v15 = v4 + 32;
  uint64_t v16 = 0x26A8DB000uLL;
  unint64_t v17 = &one-time initialization token for roots;
  unint64_t v18 = 0x26A8DB000uLL;
  unint64_t v19 = &unk_26A8DD000;
  uint64_t v20 = 1;
  while (1)
  {
    uint64_t v21 = v20;
    if (v20 >= v3)
    {
      if ((v20 != v3) | v14 & 1)
      {
LABEL_80:
        *uint64_t v48 = v4;
        return result;
      }
      uint64_t v14 = 1;
      uint64_t v20 = v3;
    }
    else
    {
      ++v20;
    }
    if (*(void *)(v16 + 4000) != -1)
    {
      BOOL v43 = v14;
      unint64_t result = swift_once();
      unint64_t v18 = 0x26A8DB000;
      unint64_t v17 = (_DWORD *)&one-time initialization token for roots;
      uint64_t v16 = 0x26A8DB000;
      uint64_t v14 = v43;
      unint64_t v19 = (void *)&unk_26A8DD000;
    }
    unint64_t v22 = v17[658];
    if (*(void *)(v18 + 4072) != -1)
    {
      unint64_t v47 = v14;
      unint64_t result = swift_once();
      unint64_t v18 = 0x26A8DB000;
      unint64_t v17 = (_DWORD *)&one-time initialization token for roots;
      uint64_t v16 = 0x26A8DB000;
      uint64_t v14 = v47;
      unint64_t v19 = (void *)&unk_26A8DD000;
    }
    unint64_t v23 = v19[223];
    if ((int64_t)v21 >= *(void *)(v23 + 16)) {
      break;
    }
    if ((v21 & 0x8000000000000000) != 0) {
      goto LABEL_88;
    }
    if (v21 >= 0x40) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = 1 << v21;
    }
    if (v24 < 0)
    {
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
      uint64_t v4 = (char *)result;
      goto LABEL_16;
    }
    if ((unint64_t)v24 >= 2)
    {
      uint64_t v25 = a2 / (1 << v21);
      if (v25 < 0) {
        goto LABEL_90;
      }
      uint64_t v26 = 0;
      uint64_t v27 = *(_DWORD *)(v23 + 4 * v21 + 32);
      unint64_t v28 = v24 >> 1;
      do
      {
        if (v26 == ((v24 >> 1) & ~(v24 >> 63))) {
          goto LABEL_83;
        }
        if (v25)
        {
          for (uint64_t i = 0; v25 != i; ++i)
          {
            BOOL v30 = v24 * i;
            if ((unsigned __int128)(v24 * (__int128)i) >> 64 != (v24 * i) >> 63)
            {
              __break(1u);
LABEL_72:
              __break(1u);
LABEL_73:
              __break(1u);
LABEL_74:
              __break(1u);
LABEL_75:
              __break(1u);
LABEL_76:
              __break(1u);
LABEL_77:
              __break(1u);
LABEL_78:
              __break(1u);
              __break(1u);
LABEL_79:
              __break(1u);
              goto LABEL_80;
            }
            unint64_t v31 = v30 + v26;
            if (__OFADD__(v30, v26)) {
              goto LABEL_72;
            }
            if ((v31 & 0x8000000000000000) != 0) {
              goto LABEL_73;
            }
            unint64_t result = *((void *)v4 + 2);
            if (v31 >= result) {
              goto LABEL_74;
            }
            unint64_t v32 = v31 + v28;
            if (__OFADD__(v31, v28)) {
              goto LABEL_75;
            }
            if (v32 >= result) {
              goto LABEL_76;
            }
            unint64_t result = *(unsigned int *)&v15[4 * v31];
            uint64_t v33 = *(unsigned int *)&v15[4 * v32] * (unint64_t)v22;
            uint64_t v34 = 4293918721 * (-1048577 * v33);
            unint64_t v35 = __CFADD__(v34, v33);
            unint64_t v36 = (v34 + v33) >> 32;
            if (v35)
            {
              unint64_t v35 = __CFADD__(v36, 0xFFFFF);
              LODWORD(v36) = v36 + 0xFFFFF;
              if (v35) {
                goto LABEL_78;
              }
              if (!v36)
              {
LABEL_61:
                unint64_t v38 = *(_DWORD *)&v15[4 * v31];
                goto LABEL_62;
              }
            }
            else
            {
              if (v36 >= 0xFFF00001) {
                LODWORD(v36) = v36 + 0xFFFFF;
              }
              if (!v36) {
                goto LABEL_61;
              }
            }
            unint64_t v37 = -1048575 - v36;
            if (v36 > 0xFFF00001) {
              goto LABEL_77;
            }
            unint64_t v38 = result - v37;
            if (result < v37)
            {
              if (v37 > 0xFFF00001)
              {
                __break(1u);
LABEL_82:
                __break(1u);
LABEL_83:
                __break(1u);
LABEL_84:
                __break(1u);
LABEL_85:
                __break(1u);
LABEL_86:
                __break(1u);
LABEL_87:
                __break(1u);
LABEL_88:
                __break(1u);
                goto LABEL_89;
              }
              unint64_t v38 = result + v36;
              if (__CFADD__(result, v36)) {
                goto LABEL_82;
              }
            }
LABEL_62:
            *(_DWORD *)&v15[4 * v31] = v38;
            unint64_t v39 = result - v36;
            if (result < v36)
            {
              unint64_t v39 = result + -1048575 - v36;
              if (__CFADD__(result, -1048575 - v36)) {
                goto LABEL_79;
              }
            }
            *(_DWORD *)&v15[4 * v32] = v39;
          }
        }
        uint64_t v40 = v22 * (unint64_t)v27;
        unint64_t v41 = 4293918721 * (-1048577 * v40);
        unint64_t v35 = __CFADD__(v41, v40);
        uint64_t v42 = (v41 + v40) >> 32;
        if (v35)
        {
          unint64_t v22 = v42 + 0xFFFFF;
          if (v42 >= 0xFFF00001) {
            goto LABEL_87;
          }
        }
        else if (v42 >= 0xFFF00001)
        {
          unint64_t v22 = v42 + 0xFFFFF;
        }
        else
        {
          unint64_t v22 = v42;
        }
        ++v26;
      }
      while (v26 != v28);
      unint64_t v18 = 0x26A8DB000;
    }
  }
  _StringGuts.grow(_:)(26);
  dispatch thunk of CustomStringConvertible.description.getter();
  swift_bridgeObjectRelease();
  v44._countAndFlagsBits = 2112544;
  v44._object = (void *)0xE300000000000000;
  String.append(_:)(v44);
  v45._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  v46._object = (void *)0x8000000260BFEBE0;
  v46._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v46);
  unint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  int64_t v3;
  char *v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t result;
  char v14;
  char *v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  Swift::String v52;
  Swift::String v53;
  Swift::String v54;
  char **v55;

  specialized static BitReversal.indicesFor(_:)(a2);
  if (a2 < 0) {
    goto LABEL_102;
  }
  uint64_t v9 = v8;
  if (a2)
  {
    if ((unint64_t)(a2 - 1) >= *(void *)(v8 + 16))
    {
      __break(1u);
    }
    else
    {
      uint64_t v3 = *(void *)(a1 + 16);
      uint64_t v4 = *a3;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_5;
      }
    }
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
LABEL_5:
    uint64_t v10 = 0;
    do
    {
      uint64_t v12 = *(void *)(v9 + 8 * v10 + 32);
      if (v12 >= v3)
      {
        if (v10 >= *((void *)v4 + 2)) {
          goto LABEL_96;
        }
        unint64_t v11 = 0;
      }
      else
      {
        if (v12 < 0) {
          goto LABEL_95;
        }
        if (v10 >= *((void *)v4 + 2)) {
          goto LABEL_97;
        }
        unint64_t v11 = *(void *)(a1 + 32 + 8 * v12);
      }
      *(void *)&v4[8 * v10++ + 32] = v11;
    }
    while (a2 != v10);
    swift_bridgeObjectRelease();
    *a3 = v4;
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  uint64_t v4 = *a3;
LABEL_16:
  uint64_t v3 = __clz(__rbit64(a2));
  unint64_t result = swift_isUniquelyReferenced_nonNull_native();
  Swift::String v55 = a3;
  if ((result & 1) == 0) {
    goto LABEL_103;
  }
LABEL_17:
  uint64_t v14 = 0;
  uint64_t v15 = v4 + 32;
  uint64_t v16 = 0x26A8DB000uLL;
  unint64_t v17 = &one-time initialization token for roots;
  unint64_t v18 = 0x26A8DB000uLL;
  unint64_t v19 = &unk_26A8DD000;
  uint64_t v20 = 1;
  while (1)
  {
LABEL_18:
    uint64_t v21 = v20;
    if (v20 >= v3)
    {
      if ((v20 != v3) | v14 & 1)
      {
LABEL_90:
        *Swift::String v55 = v4;
        return result;
      }
      uint64_t v14 = 1;
      uint64_t v20 = v3;
    }
    else
    {
      ++v20;
    }
    if (*(void *)(v16 + 4032) != -1)
    {
      uint64_t v51 = v19;
      unint64_t result = swift_once();
      unint64_t v18 = 0x26A8DB000;
      unint64_t v17 = (void *)&one-time initialization token for roots;
      uint64_t v16 = 0x26A8DB000;
      unint64_t v19 = v51;
    }
    unint64_t v22 = v17[332];
    if (*(void *)(v18 + 4088) != -1)
    {
      unint64_t result = swift_once();
      unint64_t v18 = 0x26A8DB000;
      unint64_t v17 = (void *)&one-time initialization token for roots;
      uint64_t v16 = 0x26A8DB000;
      unint64_t v19 = (void *)&unk_26A8DD000;
    }
    unint64_t v23 = v19[225];
    if ((int64_t)v21 >= *(void *)(v23 + 16)) {
      break;
    }
    if ((v21 & 0x8000000000000000) != 0) {
      goto LABEL_99;
    }
    if (v21 >= 0x40) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = 1 << v21;
    }
    if (v24 < 0)
    {
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
      uint64_t v4 = (char *)result;
      goto LABEL_17;
    }
    if ((unint64_t)v24 >= 2)
    {
      uint64_t v25 = a2 / (1 << v21);
      if (v25 < 0) {
        goto LABEL_101;
      }
      uint64_t v26 = 0;
      uint64_t v27 = *(void *)(v23 + 8 * v21 + 32);
      unint64_t v28 = v24 >> 1;
      while (1)
      {
        if (v26 == ((v24 >> 1) & ~(v24 >> 63))) {
          goto LABEL_94;
        }
        if (v25)
        {
          unint64_t v31 = 0;
          while (1)
          {
            uint64_t v33 = v24 * v31;
            if ((unsigned __int128)(v24 * (__int128)v31) >> 64 != (v24 * v31) >> 63)
            {
              __break(1u);
LABEL_83:
              __break(1u);
LABEL_84:
              __break(1u);
LABEL_85:
              __break(1u);
LABEL_86:
              __break(1u);
LABEL_87:
              __break(1u);
LABEL_88:
              __break(1u);
LABEL_89:
              __break(1u);
              goto LABEL_90;
            }
            uint64_t v34 = v33 + v26;
            if (__OFADD__(v33, v26)) {
              goto LABEL_83;
            }
            if ((v34 & 0x8000000000000000) != 0) {
              goto LABEL_84;
            }
            unint64_t v35 = *((void *)v4 + 2);
            if (v34 >= v35) {
              goto LABEL_85;
            }
            unint64_t v36 = v34 + v28;
            if (__OFADD__(v34, v28)) {
              goto LABEL_86;
            }
            if (v36 >= v35) {
              goto LABEL_87;
            }
            unint64_t v37 = *(void *)&v15[8 * v34];
            unint64_t v38 = *(void *)&v15[8 * v36];
            unint64_t v39 = (v38 * (unsigned __int128)(unint64_t)v22) >> 64;
            uint64_t v40 = (0xFFFFFFFEFFFFFFFFLL * v38 * v22 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
            unint64_t v41 = __CFADD__(-(uint64_t)(v38 * v22), v38 * v22);
            uint64_t v42 = v40 + v39;
            if (__CFADD__(v40, v39)) {
              goto LABEL_54;
            }
            if (v42 == -1) {
              break;
            }
            unint64_t result = v42 + v41;
            if (result >= 0xFFFFFFFF00000001) {
              result += 0xFFFFFFFFLL;
            }
            if (!result) {
              goto LABEL_41;
            }
LABEL_56:
            uint64_t v45 = 0xFFFFFFFF00000001 - result;
            if (result > 0xFFFFFFFF00000001) {
              goto LABEL_88;
            }
LABEL_57:
            BOOL v46 = v37 - v45;
            if (v37 < v45)
            {
              unint64_t v47 = 0xFFFFFFFF00000001 - v45;
              if (v45 > 0xFFFFFFFF00000001)
              {
                __break(1u);
LABEL_92:
                __break(1u);
LABEL_93:
                __break(1u);
LABEL_94:
                __break(1u);
LABEL_95:
                __break(1u);
LABEL_96:
                __break(1u);
LABEL_97:
                __break(1u);
LABEL_98:
                __break(1u);
LABEL_99:
                __break(1u);
                goto LABEL_100;
              }
              uint64_t v44 = __CFADD__(v37, v47);
              BOOL v46 = v37 + v47;
              if (v44) {
                goto LABEL_93;
              }
            }
            *(void *)&v15[8 * v34] = v46;
            if (v37 >= result)
            {
LABEL_41:
              unint64_t v32 = v37 - result;
              goto LABEL_42;
            }
            unint64_t v32 = v37 + v45;
            if (__CFADD__(v37, v45)) {
              goto LABEL_92;
            }
LABEL_42:
            ++v31;
            *(void *)&v15[8 * v36] = v32;
            if (v25 == v31) {
              goto LABEL_72;
            }
          }
          if (!v41)
          {
            unint64_t result = 4294967294;
            uint64_t v45 = 0xFFFFFFFE00000003;
            goto LABEL_57;
          }
          unint64_t v41 = 1;
LABEL_54:
          BOOL v43 = v41 + v42;
          uint64_t v44 = __CFADD__(v43, 0xFFFFFFFFLL);
          unint64_t result = v43 + 0xFFFFFFFFLL;
          if (v44) {
            goto LABEL_89;
          }
          if (!result) {
            goto LABEL_41;
          }
          goto LABEL_56;
        }
LABEL_72:
        uint64_t v48 = ((unint64_t)v22 * (unsigned __int128)v27) >> 64;
        unint64_t result = (0xFFFFFFFEFFFFFFFFLL * v22 * v27 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
        uint64_t v29 = __CFADD__(-(uint64_t)(v22 * v27), v22 * v27);
        uint64_t v49 = result + v48;
        if (__CFADD__(result, v48)) {
          goto LABEL_36;
        }
        if (v49 == -1)
        {
          if (v29)
          {
            uint64_t v29 = 1;
LABEL_36:
            BOOL v30 = v29 + v49;
            unint64_t v22 = v30 + 0xFFFFFFFF;
            if (v30 >= 0xFFFFFFFF00000001) {
              goto LABEL_98;
            }
            goto LABEL_37;
          }
          unint64_t v22 = 4294967294;
        }
        else
        {
          uint64_t v50 = v49 + v29;
          if (v50 >= 0xFFFFFFFF00000001) {
            unint64_t v22 = v50 + 0xFFFFFFFF;
          }
          else {
            unint64_t v22 = v50;
          }
        }
LABEL_37:
        if (++v26 == v28) {
          goto LABEL_18;
        }
      }
    }
  }
  _StringGuts.grow(_:)(26);
  dispatch thunk of CustomStringConvertible.description.getter();
  swift_bridgeObjectRelease();
  v52._countAndFlagsBits = 2112544;
  v52._object = (void *)0xE300000000000000;
  String.append(_:)(v52);
  v53._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v53);
  swift_bridgeObjectRelease();
  v54._object = (void *)0x8000000260BFEBE0;
  v54._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v54);
  unint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized inverseDiscreteFourierTransform<A, B, C>(input:size:output:)(uint64_t a1, unint64_t a2, char **a3)
{
  if ((a2 & 0x8000000000000000) != 0) {
    goto LABEL_38;
  }
  specialized FieldElement.init(_:)(a2, &v25);
  unint64_t v6 = v25;
  if (!v25)
  {
LABEL_39:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  unint64_t v7 = 0x1B7FFFEB0;
  unint64_t v8 = 0xFFFEAFFFFFLL;
  protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(0xFFFEAFFFFFLL, &v24);
  while (v24 != 0)
  {
    protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(v8 & 1, &v24);
    unint64_t v11 = *((void *)&v24 + 1) | v24;
    if (v24 == 0) {
      goto LABEL_30;
    }
    uint64_t v12 = (v6 * (unsigned __int128)v7) >> 64;
    uint64_t v13 = (0xCFFE47FFFEAFFFFFLL * v6 * v7 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
    BOOL v14 = __CFADD__(-(uint64_t)(v6 * v7), v6 * v7);
    BOOL v15 = __CFADD__(v13, v12);
    uint64_t v16 = v13 + v12;
    if (v15)
    {
      unint64_t v17 = v16 + v14;
    }
    else
    {
      if (v16 != -1)
      {
        unint64_t v11 = 0;
        unint64_t v18 = v16 + v14;
        if (v18 >= 0xFFFEB00001) {
          unint64_t v7 = v18 - 0xFFFEB00001;
        }
        else {
          unint64_t v7 = v18;
        }
        goto LABEL_30;
      }
      unint64_t v17 = 0;
      if (!v14)
      {
        unint64_t v11 = 0;
        unint64_t v7 = 0xFFFFFF00014FFFFELL;
        goto LABEL_30;
      }
    }
    unint64_t v7 = v17 - 0xFFFEB00001;
    if (v17 >= 0xFFFEB00001) {
      goto LABEL_37;
    }
    unint64_t v11 = 0;
LABEL_30:
    uint64_t v19 = (__PAIR128__(v11, v6) * __PAIR128__(v11, v6)) >> 64;
    uint64_t v20 = (0xCFFE47FFFEAFFFFFLL * v6 * v6 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
    BOOL v21 = __CFADD__(-(uint64_t)(v6 * v6), v6 * v6);
    BOOL v15 = __CFADD__(v20, v19);
    uint64_t v22 = v20 + v19;
    if (v15)
    {
      unint64_t v23 = v22 + v21;
      unint64_t v6 = v23 - 0xFFFEB00001;
      if (v23 >= 0xFFFEB00001)
      {
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
    }
    else if (v22 == -1)
    {
      unint64_t v6 = 0xFFFFFF00014FFFFELL;
      if (v21) {
        unint64_t v6 = 0xFFFFFF00014FFFFFLL;
      }
    }
    else
    {
      unint64_t v10 = v22 + v21;
      if (v10 >= 0xFFFEB00001) {
        unint64_t v6 = v10 - 0xFFFEB00001;
      }
      else {
        unint64_t v6 = v10;
      }
    }
    v8 >>= 1;
    protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(v8, &v24);
  }
  specialized discreteFourierTransform<A, B, C>(input:size:output:)(a1, a2, a3);

  return specialized inverseDiscreteFourierTransformFinish<A, B>(size:sizeInverse:output:)(a2, v7, (uint64_t *)a3);
}

{
  unsigned int v6;
  unsigned int v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  long long v17;
  unsigned int v18;
  uint64_t vars8;

  if ((a2 & 0x8000000000000000) != 0) {
    goto LABEL_26;
  }
  if (HIDWORD(a2))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  specialized FieldElement.init(_:)(a2, &v18);
  unint64_t v6 = v18;
  if (!v18)
  {
LABEL_28:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  specialized static FixedWidthInteger._truncatingInit<A>(_:)(4293918719, &v17);
  unint64_t v7 = 0xFFFFF;
  if (v17 != 0)
  {
    LODWORD(v9) = -1048577;
    do
    {
      specialized static FixedWidthInteger._truncatingInit<A>(_:)(v9 & 1, &v17);
      if (v17 != 0)
      {
        unint64_t v10 = v6 * (unint64_t)v7;
        unint64_t v11 = 4293918721 * (-1048577 * v10);
        uint64_t v12 = __CFADD__(v11, v10);
        uint64_t v13 = (v11 + v10) >> 32;
        if (v12)
        {
          unint64_t v7 = v13 + 0xFFFFF;
          if (v13 >= 0xFFF00001) {
            goto LABEL_25;
          }
        }
        else if (v13 >= 0xFFF00001)
        {
          unint64_t v7 = v13 + 0xFFFFF;
        }
        else
        {
          unint64_t v7 = v13;
        }
      }
      BOOL v14 = v6 * (unint64_t)v6;
      BOOL v15 = 4293918721 * (-1048577 * v14);
      uint64_t v12 = __CFADD__(v15, v14);
      uint64_t v16 = (v15 + v14) >> 32;
      if (v12)
      {
        unint64_t v6 = v16 + 0xFFFFF;
        if (v16 >= 0xFFF00001)
        {
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
          goto LABEL_27;
        }
      }
      else if (v16 >= 0xFFF00001)
      {
        unint64_t v6 = v16 + 0xFFFFF;
      }
      else
      {
        unint64_t v6 = v16;
      }
      uint64_t v9 = v9 >> 1;
      specialized static FixedWidthInteger._truncatingInit<A>(_:)(v9, &v17);
    }
    while (v17 != 0);
  }
  specialized discreteFourierTransform<A, B, C>(input:size:output:)(a1, a2, a3);

  return specialized inverseDiscreteFourierTransformFinish<A, B>(size:sizeInverse:output:)(a2, v7, (uint64_t *)a3);
}

{
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  long long v24;
  unint64_t v25;
  uint64_t vars8;

  if ((a2 & 0x8000000000000000) != 0) {
    goto LABEL_40;
  }
  specialized FieldElement.init(_:)(a2, &v25);
  unint64_t v6 = v25;
  if (!v25)
  {
LABEL_41:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(0xFFFFFFFEFFFFFFFFLL, &v24);
  if (v24 != 0)
  {
    uint64_t v9 = 0xFFFFFFFEFFFFFFFFLL;
    unint64_t v7 = 0xFFFFFFFFLL;
    while (1)
    {
      protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(v9 & 1, &v24);
      unint64_t v11 = *((void *)&v24 + 1) | v24;
      if (v24 == 0) {
        goto LABEL_31;
      }
      uint64_t v12 = (v6 * (unsigned __int128)v7) >> 64;
      uint64_t v13 = (0xFFFFFFFEFFFFFFFFLL * v6 * v7 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      BOOL v14 = __CFADD__(-(uint64_t)(v6 * v7), v6 * v7);
      BOOL v15 = __CFADD__(v13, v12);
      uint64_t v16 = v13 + v12;
      if (v15)
      {
        unint64_t v17 = v16 + v14;
      }
      else
      {
        if (v16 != -1)
        {
          unint64_t v11 = 0;
          unint64_t v18 = v16 + v14;
          if (v18 >= 0xFFFFFFFF00000001) {
            unint64_t v7 = v18 + 0xFFFFFFFF;
          }
          else {
            unint64_t v7 = v18;
          }
          goto LABEL_31;
        }
        unint64_t v17 = 0;
        if (!v14)
        {
          unint64_t v11 = 0;
          unint64_t v7 = 4294967294;
          goto LABEL_31;
        }
      }
      unint64_t v7 = v17 + 0xFFFFFFFF;
      if (v17 >= 0xFFFFFFFF00000001) {
        goto LABEL_39;
      }
      unint64_t v11 = 0;
LABEL_31:
      uint64_t v19 = (__PAIR128__(v11, v6) * __PAIR128__(v11, v6)) >> 64;
      uint64_t v20 = (0xFFFFFFFEFFFFFFFFLL * v6 * v6 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      BOOL v21 = __CFADD__(-(uint64_t)(v6 * v6), v6 * v6);
      BOOL v15 = __CFADD__(v20, v19);
      uint64_t v22 = v20 + v19;
      if (v15)
      {
        unint64_t v23 = v22 + v21;
        unint64_t v6 = v23 + 0xFFFFFFFF;
        if (v23 >= 0xFFFFFFFF00000001)
        {
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
      }
      else if (v22 == -1)
      {
        if (v21) {
          unint64_t v6 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v6 = 4294967294;
        }
      }
      else
      {
        unint64_t v10 = v22 + v21;
        if (v10 >= 0xFFFFFFFF00000001) {
          unint64_t v6 = v10 + 0xFFFFFFFF;
        }
        else {
          unint64_t v6 = v10;
        }
      }
      v9 >>= 1;
      protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(v9, &v24);
      if (v24 == 0) {
        goto LABEL_5;
      }
    }
  }
  unint64_t v7 = 0xFFFFFFFFLL;
LABEL_5:
  specialized discreteFourierTransform<A, B, C>(input:size:output:)(a1, a2, a3);

  return specialized inverseDiscreteFourierTransformFinish<A, B>(size:sizeInverse:output:)(a2, v7, (uint64_t *)a3);
}

void specialized evaluateUsingHorner<A, B, C>(_:atInput:)(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    goto LABEL_42;
  }
  uint64_t v4 = *(void *)(a2 + 16);
  if (!v4)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v5 = v4 - 1;
  uint64_t v6 = (v4 - 1) * (v2 - 1);
  if ((unsigned __int128)((v4 - 1) * (__int128)(uint64_t)(v2 - 1)) >> 64 != v6 >> 63)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  unint64_t v7 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if ((v7 & 0x8000000000000000) != 0)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v6 != -1)
  {
    uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v9 + 16) = v7;
    bzero((void *)(v9 + 32), 8 * v6 + 8);
LABEL_9:
    uint64_t v10 = 0;
    char v20 = 0;
    uint64_t v11 = a1 + 32;
    *(void *)(v9 + 32) = *(void *)(a1 + 32 + 8 * (v2 - 1));
    uint64_t v21 = v9;
    for (uint64_t i = v2 - 2; ; uint64_t i = v14)
    {
      if (i <= 0)
      {
        if ((i != 0) | v20 & 1) {
          return;
        }
        uint64_t v14 = 0;
        char v20 = 1;
        unint64_t v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          goto LABEL_43;
        }
      }
      else
      {
        uint64_t v14 = i - 1;
        unint64_t v15 = v10 + 1;
        if (__OFADD__(v10, 1)) {
          goto LABEL_34;
        }
      }
      if ((v15 & 0x8000000000000000) != 0) {
        goto LABEL_35;
      }
      if (v7 < v15) {
        goto LABEL_36;
      }
      unint64_t v16 = (2 * v15) | 1;
      swift_bridgeObjectRetain();
      specialized convolveDirectly<A, B, C, D>(_:withKernel:result:)(v9 + 32, 0, v16, a2, &v21);
      swift_bridgeObjectRelease();
      if (__OFADD__(v10, v5)) {
        goto LABEL_37;
      }
      if (i >= v2) {
        goto LABEL_38;
      }
      unint64_t v17 = *(void *)(v11 + 8 * i);
      uint64_t v9 = v21;
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        unint64_t v7 = *(void *)(v9 + 16);
        if (!v7) {
          goto LABEL_32;
        }
      }
      else
      {
        uint64_t v9 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v9);
        unint64_t v7 = *(void *)(v9 + 16);
        if (!v7)
        {
LABEL_32:
          __break(1u);
          return;
        }
      }
      unint64_t v13 = *(void *)(v9 + 32);
      if (v17)
      {
        unint64_t v18 = 0xFFFEB00001 - v17;
        if (v17 > 0xFFFEB00001) {
          goto LABEL_39;
        }
        if (v13 >= v18)
        {
          v13 -= v18;
        }
        else
        {
          if (v18 > 0xFFFEB00001) {
            goto LABEL_40;
          }
          BOOL v19 = __CFADD__(v13, v17);
          v13 += v17;
          if (v19) {
            goto LABEL_41;
          }
        }
      }
      *(void *)(v9 + 32) = v13;
      uint64_t v21 = v9;
      v10 += v5;
    }
  }
  uint64_t v9 = MEMORY[0x263F8EE78];
  unint64_t v7 = *(void *)(MEMORY[0x263F8EE78] + 16);
  if (v7) {
    goto LABEL_9;
  }
LABEL_47:
  __break(1u);
}

{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  char v20;
  uint64_t v21;

  unint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    goto LABEL_42;
  }
  uint64_t v4 = *(void *)(a2 + 16);
  if (!v4)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v5 = v4 - 1;
  uint64_t v6 = (v4 - 1) * (v2 - 1);
  if ((unsigned __int128)((v4 - 1) * (__int128)(uint64_t)(v2 - 1)) >> 64 != v6 >> 63)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  unint64_t v7 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if ((v7 & 0x8000000000000000) != 0)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v6 != -1)
  {
    uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v9 + 16) = v7;
    bzero((void *)(v9 + 32), 8 * v6 + 8);
LABEL_9:
    uint64_t v10 = 0;
    char v20 = 0;
    uint64_t v11 = a1 + 32;
    *(void *)(v9 + 32) = *(void *)(a1 + 32 + 8 * (v2 - 1));
    uint64_t v21 = v9;
    for (uint64_t i = v2 - 2; ; uint64_t i = v14)
    {
      if (i <= 0)
      {
        if ((i != 0) | v20 & 1) {
          return;
        }
        uint64_t v14 = 0;
        char v20 = 1;
        unint64_t v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          goto LABEL_43;
        }
      }
      else
      {
        uint64_t v14 = i - 1;
        unint64_t v15 = v10 + 1;
        if (__OFADD__(v10, 1)) {
          goto LABEL_34;
        }
      }
      if ((v15 & 0x8000000000000000) != 0) {
        goto LABEL_35;
      }
      if (v7 < v15) {
        goto LABEL_36;
      }
      unint64_t v16 = (2 * v15) | 1;
      swift_bridgeObjectRetain();
      specialized convolveDirectly<A, B, C, D>(_:withKernel:result:)(v9 + 32, 0, v16, a2, &v21);
      swift_bridgeObjectRelease();
      if (__OFADD__(v10, v5)) {
        goto LABEL_37;
      }
      if (i >= v2) {
        goto LABEL_38;
      }
      unint64_t v17 = *(void *)(v11 + 8 * i);
      uint64_t v9 = v21;
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        unint64_t v7 = *(void *)(v9 + 16);
        if (!v7) {
          goto LABEL_32;
        }
      }
      else
      {
        uint64_t v9 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v9);
        unint64_t v7 = *(void *)(v9 + 16);
        if (!v7)
        {
LABEL_32:
          __break(1u);
          return;
        }
      }
      unint64_t v13 = *(void *)(v9 + 32);
      if (v17)
      {
        unint64_t v18 = 0xFFFFFFFF00000001 - v17;
        if (v17 > 0xFFFFFFFF00000001) {
          goto LABEL_39;
        }
        if (v13 >= v18)
        {
          v13 -= v18;
        }
        else
        {
          if (v18 > 0xFFFFFFFF00000001) {
            goto LABEL_40;
          }
          BOOL v19 = __CFADD__(v13, v17);
          v13 += v17;
          if (v19) {
            goto LABEL_41;
          }
        }
      }
      *(void *)(v9 + 32) = v13;
      uint64_t v21 = v9;
      v10 += v5;
    }
  }
  uint64_t v9 = MEMORY[0x263F8EE78];
  unint64_t v7 = *(void *)(MEMORY[0x263F8EE78] + 16);
  if (v7) {
    goto LABEL_9;
  }
LABEL_47:
  __break(1u);
}

void specialized evaluateUsingHorner<A, B, C>(_:atInput:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
LABEL_99:
    __break(1u);
    goto LABEL_100;
  }
  uint64_t v4 = *(void *)(a2 + 16);
  if (!v4)
  {
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  uint64_t v5 = v4 - 1;
  uint64_t v6 = (v4 - 1) * (v2 - 1);
  if ((unsigned __int128)((v4 - 1) * (__int128)(uint64_t)(v2 - 1)) >> 64 != v6 >> 63)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  uint64_t v7 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
LABEL_102:
    __break(1u);
    goto LABEL_103;
  }
  if (v7 < 0)
  {
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
    return;
  }
  if (v6 == -1)
  {
    uint64_t v7 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (!v7) {
      goto LABEL_104;
    }
    uint64_t v9 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v9 + 16) = v7;
    bzero((void *)(v9 + 32), 4 * v6 + 4);
  }
  uint64_t v10 = 0;
  char v51 = 0;
  *(_DWORD *)(v9 + 32) = *(_DWORD *)(a1 + 32 + 4 * (v2 - 1));
  uint64_t v11 = v2 - 2;
  Swift::String v55 = (unsigned int *)(a2 + 32);
  uint64_t v12 = 1;
  unint64_t v13 = v4 - 1;
  uint64_t v45 = v4 - 1;
  unint64_t v46 = v2;
  uint64_t v53 = v4;
  while (1)
  {
    if (v11 <= 0)
    {
      if ((v11 != 0) | v51 & 1) {
        return;
      }
      uint64_t v52 = 0;
      char v51 = 1;
      unint64_t v15 = v10 + 1;
      if (__OFADD__(v10, 1))
      {
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
        goto LABEL_92;
      }
    }
    else
    {
      uint64_t v52 = v11 - 1;
      unint64_t v15 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_89;
      }
    }
    if ((v15 & 0x8000000000000000) != 0) {
      goto LABEL_90;
    }
    if (v7 < v15) {
      goto LABEL_91;
    }
    if (v15) {
      break;
    }
    BOOL v19 = (char *)v9;
    if (__OFADD__(v10, v5)) {
      goto LABEL_96;
    }
LABEL_69:
    if (v11 >= v2) {
      goto LABEL_97;
    }
    unsigned int v42 = *(_DWORD *)(a1 + 32 + 4 * v11);
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      BOOL v43 = v19;
      uint64_t v7 = *((void *)v19 + 2);
      if (!v7) {
        goto LABEL_80;
      }
    }
    else
    {
      BOOL v43 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v19);
      uint64_t v7 = *((void *)v43 + 2);
      if (!v7)
      {
LABEL_80:
        __break(1u);
        goto LABEL_81;
      }
    }
    unsigned int v14 = *((_DWORD *)v43 + 8);
    if (v42)
    {
      unsigned int v44 = -1048575 - v42;
      if (v42 > 0xFFF00001) {
        goto LABEL_98;
      }
      if (v14 >= v44)
      {
        v14 -= v44;
      }
      else
      {
        if (v44 > 0xFFF00001) {
          goto LABEL_105;
        }
        BOOL v38 = __CFADD__(v14, v42);
        v14 += v42;
        if (v38) {
          goto LABEL_106;
        }
      }
    }
    uint64_t v9 = (uint64_t)v43;
    v10 += v5;
    *((_DWORD *)v43 + 8) = v14;
    v12 += v5;
    v13 += v5;
    uint64_t v11 = v52;
  }
  unint64_t v54 = v15;
  BOOL v16 = __OFADD__(v15, v4);
  uint64_t v17 = v15 + v4;
  if (v16)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  BOOL v16 = __OFSUB__(v17, 1);
  uint64_t v18 = v17 - 1;
  if (v16)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  if (v7 < v18)
  {
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  if (v18 < 0)
  {
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
    goto LABEL_99;
  }
  uint64_t v50 = v11;
  swift_bridgeObjectRetain();
  BOOL v19 = (char *)v9;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    BOOL v19 = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
  }
  unint64_t v20 = v5 + v10;
  unint64_t v21 = *((void *)v19 + 2);
  if (v21 < v5 + v10) {
    unint64_t v20 = *((void *)v19 + 2);
  }
  if (v20 > 7)
  {
    unint64_t v23 = v20 + 1;
    uint64_t v24 = 8;
    if ((v23 & 7) != 0) {
      uint64_t v24 = v23 & 7;
    }
    unint64_t v22 = v23 - v24;
    unint64_t v25 = v19 + 48;
    if (v21 >= v13) {
      unint64_t v26 = v13;
    }
    else {
      unint64_t v26 = *((void *)v19 + 2);
    }
    uint64_t v27 = v26 - v24 + 1;
    do
    {
      *(v25 - 1) = 0uLL;
      *unint64_t v25 = 0uLL;
      v25 += 2;
      v27 -= 8;
    }
    while (v27);
  }
  else
  {
    unint64_t v22 = 0;
  }
  uint64_t v56 = v12 & ~(v12 >> 63);
  while (2)
  {
    if (v22 >= v21)
    {
      __break(1u);
      goto LABEL_88;
    }
    *(_DWORD *)&v19[4 * v22++ + 32] = 0;
    if (v4 + v10 != v22) {
      continue;
    }
    break;
  }
  unint64_t v47 = v13;
  uint64_t v48 = v12;
  uint64_t v28 = v9;
  uint64_t v29 = 0;
  uint64_t v49 = v10;
  uint64_t v30 = v28 + 32;
  uint64_t v31 = 8;
LABEL_47:
  if (v29 == v56)
  {
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  uint64_t v57 = v29 + 1;
  unint64_t v32 = v55;
  uint64_t v33 = v31;
  while (1)
  {
    unsigned int v35 = *v32++;
    unint64_t v36 = v35 * (unint64_t)*(unsigned int *)(v30 + 4 * v29);
    uint64_t v37 = 4293918721 * (-1048577 * v36);
    BOOL v38 = __CFADD__(v37, v36);
    unint64_t v39 = (v37 + v36) >> 32;
    if (v38)
    {
      unsigned int v40 = v39 + 0xFFFFF;
      if (v39 >= 0xFFF00001) {
        goto LABEL_83;
      }
    }
    else
    {
      unsigned int v40 = v39 >= 0xFFF00001 ? v39 + 0xFFFFF : v39;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      BOOL v19 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v19);
    }
    if ((unint64_t)(v33 - 8) >= *((void *)v19 + 2)) {
      break;
    }
    unsigned int v34 = *(_DWORD *)&v19[4 * v33];
    if (v40)
    {
      unsigned int v41 = -1048575 - v40;
      if (v40 > 0xFFF00001) {
        goto LABEL_82;
      }
      if (v34 >= v41)
      {
        v34 -= v41;
      }
      else
      {
        if (v41 > 0xFFF00001) {
          goto LABEL_84;
        }
        BOOL v38 = __CFADD__(v34, v40);
        v34 += v40;
        if (v38) {
          goto LABEL_85;
        }
      }
    }
    *(_DWORD *)&v19[4 * v33++] = v34;
    if (!--v4)
    {
      ++v31;
      ++v29;
      uint64_t v4 = v53;
      if (v57 != v54) {
        goto LABEL_47;
      }
      swift_bridgeObjectRelease();
      uint64_t v5 = v45;
      unint64_t v2 = v46;
      uint64_t v10 = v49;
      uint64_t v11 = v50;
      unint64_t v13 = v47;
      uint64_t v12 = v48;
      if (__OFADD__(v49, v45)) {
        goto LABEL_96;
      }
      goto LABEL_69;
    }
  }
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
}

unint64_t specialized evaluateUsingHorner<A, B>(_:atInput:)@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3 = *(void *)(result + 16);
  if (!v3) {
    goto LABEL_34;
  }
  char v4 = 0;
  unint64_t v5 = result + 32;
  uint64_t result = *(void *)(result + 32 + 8 * v3 - 8);
  uint64_t v6 = v3 - 2;
  while (1)
  {
    if (v6 <= 0)
    {
      if ((v6 != 0) | v4 & 1) {
        goto LABEL_29;
      }
      uint64_t v7 = 0;
      char v4 = 1;
    }
    else
    {
      uint64_t v7 = v6 - 1;
    }
    uint64_t v8 = (result * (unsigned __int128)a2) >> 64;
    uint64_t v9 = (0xCFFE47FFFEAFFFFFLL * result * a2 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
    BOOL v10 = __CFADD__(-(uint64_t)(result * a2), result * a2);
    uint64_t v11 = v9 + v8;
    if (!__CFADD__(v9, v8))
    {
      if (v11 != -1)
      {
        uint64_t result = v11 + v10;
        if (result >= 0xFFFEB00001) {
          result -= 0xFFFEB00001;
        }
        goto LABEL_21;
      }
      uint64_t result = 0xFFFFFF00014FFFFELL;
      if (!v10) {
        goto LABEL_21;
      }
      BOOL v10 = 1;
    }
    uint64_t result = v10 + v11 - 0xFFFEB00001;
    if ((unint64_t)(v10 + v11) >= 0xFFFEB00001) {
      goto LABEL_32;
    }
LABEL_21:
    if (v6 >= v3) {
      break;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v6);
    uint64_t v6 = v7;
    if (v12)
    {
      unint64_t v13 = 0xFFFEB00001 - v12;
      if (v12 > 0xFFFEB00001) {
        goto LABEL_31;
      }
      if (result >= v13)
      {
        result -= v13;
        uint64_t v6 = v7;
      }
      else
      {
        if (v13 > 0xFFFEB00001) {
          goto LABEL_33;
        }
        uint64_t v6 = v7;
        BOOL v14 = __CFADD__(result, v12);
        result += v12;
        if (v14)
        {
          __break(1u);
LABEL_29:
          *a3 = result;
          return result;
        }
      }
    }
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t specialized evaluateUsingHorner<A, B>(_:atInput:)@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, _DWORD *a3@<X8>)
{
  unint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    char v4 = 0;
    uint64_t v5 = result + 32;
    LODWORD(v6) = *(_DWORD *)(result + 32 + 4 * v3 - 4);
    uint64_t v7 = v3 - 2;
    while (1)
    {
      if (v7 <= 0)
      {
        uint64_t result = v7 != 0;
        if ((v7 != 0) | v4 & 1) {
          goto LABEL_23;
        }
        uint64_t result = 0;
        char v4 = 1;
      }
      else
      {
        uint64_t result = v7 - 1;
      }
      unint64_t v9 = a2 * (unint64_t)v6;
      uint64_t v10 = 4293918721 * (-1048577 * v9);
      BOOL v11 = __CFADD__(v10, v9);
      unint64_t v6 = (v10 + v9) >> 32;
      if (v11)
      {
        BOOL v11 = __CFADD__(v6, 0xFFFFF);
        LODWORD(v6) = v6 + 0xFFFFF;
        if (v11) {
          goto LABEL_26;
        }
      }
      else if (v6 >= 0xFFF00001)
      {
        LODWORD(v6) = v6 + 0xFFFFF;
      }
      if (v7 >= v3) {
        break;
      }
      unsigned int v12 = *(_DWORD *)(v5 + 4 * v7);
      uint64_t v7 = result;
      if (v12)
      {
        unsigned int v13 = -1048575 - v12;
        if (v12 > 0xFFF00001) {
          goto LABEL_25;
        }
        if (v6 >= v13)
        {
          LODWORD(v6) = v6 - v13;
          uint64_t v7 = result;
        }
        else
        {
          if (v13 > 0xFFF00001) {
            goto LABEL_27;
          }
          uint64_t v7 = result;
          BOOL v11 = __CFADD__(v6, v12);
          LODWORD(v6) = v6 + v12;
          if (v11)
          {
            __break(1u);
LABEL_23:
            *a3 = v6;
            return result;
          }
        }
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized evaluateUsingHorner<A, B>(_:atInput:)@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3 = *(void *)(result + 16);
  if (!v3) {
    goto LABEL_36;
  }
  char v4 = 0;
  uint64_t v5 = result + 32;
  unint64_t v6 = *(void *)(result + 32 + 8 * v3 - 8);
  uint64_t v7 = v3 - 2;
  while (1)
  {
    do
    {
      if (v7 <= 0)
      {
        if ((v7 != 0) | v4 & 1) {
          goto LABEL_31;
        }
        uint64_t v8 = 0;
        char v4 = 1;
      }
      else
      {
        uint64_t v8 = v7 - 1;
      }
      uint64_t result = (v6 * (unsigned __int128)a2) >> 64;
      uint64_t v9 = (0xFFFFFFFEFFFFFFFFLL * v6 * a2 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      BOOL v10 = __CFADD__(-(uint64_t)(v6 * a2), v6 * a2);
      uint64_t v11 = v9 + result;
      if (__CFADD__(v9, result)) {
        goto LABEL_13;
      }
      if (v11 != -1)
      {
        unint64_t v6 = v11 + v10;
        if (v6 >= 0xFFFFFFFF00000001) {
          v6 += 0xFFFFFFFFLL;
        }
        goto LABEL_19;
      }
      if (v10)
      {
        BOOL v10 = 1;
LABEL_13:
        uint64_t v12 = v10 + v11;
        BOOL v13 = __CFADD__(v12, 0xFFFFFFFFLL);
        unint64_t v6 = v12 + 0xFFFFFFFFLL;
        if (v13) {
          goto LABEL_33;
        }
LABEL_19:
        if (v7 >= v3) {
          goto LABEL_30;
        }
        goto LABEL_20;
      }
      unint64_t v6 = 4294967294;
      if (v7 >= v3)
      {
LABEL_30:
        __break(1u);
LABEL_31:
        *a3 = v6;
        return result;
      }
LABEL_20:
      unint64_t v14 = *(void *)(v5 + 8 * v7);
      uint64_t v7 = v8;
    }
    while (!v14);
    unint64_t v15 = 0xFFFFFFFF00000001 - v14;
    if (v14 > 0xFFFFFFFF00000001) {
      break;
    }
    if (v6 >= v15)
    {
      v6 -= v15;
      uint64_t v7 = v8;
    }
    else
    {
      if (v15 > 0xFFFFFFFF00000001) {
        goto LABEL_34;
      }
      uint64_t v7 = v8;
      BOOL v13 = __CFADD__(v6, v14);
      v6 += v14;
      if (v13) {
        goto LABEL_35;
      }
    }
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t specialized evaluateUsingDFT<A, B, C>(_:atInput:)(uint64_t result, uint64_t a2)
{
  uint64_t v58 = result;
  uint64_t v2 = *(void *)(result + 16);
  if (!v2)
  {
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  unint64_t v4 = *(void *)(a2 + 16);
  if (!v4)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  uint64_t v5 = (v4 - 1) * (v2 - 1);
  uint64_t v56 = v2 - 1;
  if ((unsigned __int128)((uint64_t)(v4 - 1) * (__int128)(v2 - 1)) >> 64 != v5 >> 63)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  uint64_t result = v5 + 1;
  if (__OFADD__(v5, 1))
  {
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  unint64_t v55 = v4 - 1;
  uint64_t result = specialized FixedWidthInteger.nextPowerOfTwo.getter(result);
  if (v2 != 1)
  {
    unint64_t v6 = result;
    if (result < 0)
    {
LABEL_95:
      __break(1u);
      goto LABEL_96;
    }
    if (result)
    {
      uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v7 + 16) = v6;
      bzero((void *)(v7 + 32), 8 * v6);
      uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v8 + 16) = v6;
      bzero((void *)(v8 + 32), 8 * v6);
      if (v4 <= v6)
      {
LABEL_9:
        uint64_t v9 = 0;
        if (v4 < 8) {
          goto LABEL_14;
        }
        if ((unint64_t)(v8 - a2) < 0x20) {
          goto LABEL_14;
        }
        uint64_t v9 = v4 & 0x7FFFFFFFFFFFFFFCLL;
        BOOL v10 = (long long *)(a2 + 48);
        uint64_t v11 = (_OWORD *)(v8 + 48);
        uint64_t v12 = v4 & 0x7FFFFFFFFFFFFFFCLL;
        do
        {
          long long v13 = *v10;
          *(v11 - 1) = *(v10 - 1);
          _OWORD *v11 = v13;
          v10 += 2;
          v11 += 2;
          v12 -= 4;
        }
        while (v12);
        if (v4 != v9)
        {
LABEL_14:
          unint64_t v14 = v4 - v9;
          uint64_t v15 = 8 * v9 + 32;
          BOOL v16 = (void *)(v8 + v15);
          uint64_t v17 = (uint64_t *)(a2 + v15);
          do
          {
            uint64_t v18 = *v17++;
            *v16++ = v18;
            --v14;
          }
          while (v14);
        }
        unsigned int v61 = (char *)v8;
        if (v6)
        {
          uint64_t v19 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          *(void *)(v19 + 16) = v6;
          bzero((void *)(v19 + 32), 8 * v6);
LABEL_22:
          uint64_t v60 = (char *)v19;
          specialized discreteFourierTransform<A, B, C>(input:size:output:)(a2, v6, &v60);
          unint64_t v20 = v60;
          uint64_t v21 = *(void *)(v58 + 32);
          uint64_t v59 = v58 + 32;
          uint64_t v22 = *(void *)(v7 + 16);
          uint64_t result = swift_bridgeObjectRetain();
          if (!v22)
          {
LABEL_96:
            __break(1u);
            return result;
          }
          *(void *)(v7 + 32) = v21;
          uint64_t v54 = v2;
          uint64_t v23 = 1;
          unint64_t v24 = v55;
          uint64_t v25 = (uint64_t)v20;
LABEL_26:
          if ((v24 & 0x8000000000000000) != 0) {
            goto LABEL_88;
          }
          unint64_t v26 = v61;
          if (*((void *)v61 + 2))
          {
            unint64_t v27 = 0;
            uint64_t result = v23 + 1;
            unint64_t v28 = *(void *)(v59 + 8 * v23);
            uint64_t v29 = (unint64_t *)(v7 + 32);
            do
            {
              unint64_t v30 = *(void *)&v26[8 * v27 + 32];
              uint64_t v31 = (v30 * (unsigned __int128)v28) >> 64;
              uint64_t v32 = v30 * v28;
              uint64_t v33 = (0xCFFE47FFFEAFFFFFLL * v32 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
              BOOL v34 = __CFADD__(-v32, v32);
              uint64_t v35 = v33 + v31;
              if (!__CFADD__(v33, v31))
              {
                if (v35 != -1)
                {
                  unint64_t v38 = v35 + v34;
                  if (v38 >= 0xFFFEB00001) {
                    unint64_t v37 = v38 - 0xFFFEB00001;
                  }
                  else {
                    unint64_t v37 = v38;
                  }
                  goto LABEL_40;
                }
                if (!v34)
                {
                  if (v27 >= *(void *)(v7 + 16)) {
                    goto LABEL_81;
                  }
                  goto LABEL_82;
                }
                BOOL v34 = 1;
              }
              unint64_t v36 = v34 + v35;
              unint64_t v37 = v36 - 0xFFFEB00001;
              if (v36 >= 0xFFFEB00001) {
                goto LABEL_83;
              }
LABEL_40:
              if (v27 >= *(void *)(v7 + 16)) {
                goto LABEL_81;
              }
              unint64_t v39 = *v29;
              if (v37)
              {
                BOOL v40 = v37 <= 0xFFFEB00001;
                unint64_t v41 = 0xFFFEB00001 - v37;
                if (!v40) {
                  goto LABEL_82;
                }
                if (v39 >= v41)
                {
                  v39 -= v41;
                }
                else
                {
                  BOOL v40 = v41 <= 0xFFFEB00001;
                  unint64_t v42 = 0xFFFEB00001 - v41;
                  if (!v40) {
                    goto LABEL_86;
                  }
                  BOOL v40 = __CFADD__(v39, v42);
                  v39 += v42;
                  if (v40) {
                    goto LABEL_87;
                  }
                }
              }
              unint64_t *v29 = v39;
              if (v24 == v27)
              {
                if (v23 == v56)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  return v7;
                }
                uint64_t v57 = v23 + 1;
                if (v6)
                {
                  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
                  if ((result & 1) == 0)
                  {
                    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v25);
                    uint64_t v25 = result;
                  }
                  for (unint64_t i = 0; v6 != i; ++i)
                  {
                    if (i >= *((void *)v20 + 2)) {
                      goto LABEL_84;
                    }
                    uint64_t v47 = v25 + 8 * i;
                    unint64_t v48 = *(void *)(v47 + 32);
                    unint64_t v49 = *(void *)&v20[8 * i + 32];
                    uint64_t v50 = (v48 * (unsigned __int128)v49) >> 64;
                    uint64_t v51 = v48 * v49;
                    uint64_t v52 = (0xCFFE47FFFEAFFFFFLL * v51 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
                    BOOL v44 = __CFADD__(-v51, v51);
                    uint64_t v53 = v52 + v50;
                    if (__CFADD__(v52, v50)) {
                      goto LABEL_64;
                    }
                    if (v53 == -1)
                    {
                      if (v44)
                      {
                        BOOL v44 = 1;
LABEL_64:
                        uint64_t v45 = v44 + v53;
                        BOOL v40 = __CFADD__(v45, 0xFFFFFF00014FFFFFLL);
                        unint64_t v46 = v45 - 0xFFFEB00001;
                        if (v40) {
                          goto LABEL_85;
                        }
                        goto LABEL_65;
                      }
                      unint64_t v46 = 0xFFFFFF00014FFFFELL;
                    }
                    else
                    {
                      unint64_t v46 = v53 + v44;
                      if (v46 >= 0xFFFEB00001) {
                        v46 -= 0xFFFEB00001;
                      }
                    }
LABEL_65:
                    *(void *)(v47 + 32) = v46;
                  }
                }
                uint64_t result = specialized inverseDiscreteFourierTransform<A, B, C>(input:size:output:)(v25, v6, &v61);
                if (__OFADD__(v24, v55)) {
                  goto LABEL_89;
                }
                v24 += v55;
                uint64_t v23 = v57;
                if (v57 == v54) {
                  goto LABEL_90;
                }
                goto LABEL_26;
              }
              ++v27;
              ++v29;
            }
            while (v27 < *((void *)v26 + 2));
          }
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
LABEL_87:
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
          goto LABEL_91;
        }
LABEL_21:
        uint64_t v19 = MEMORY[0x263F8EE78];
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v8 = MEMORY[0x263F8EE78];
      uint64_t v7 = MEMORY[0x263F8EE78];
      if (v4 <= *(void *)(MEMORY[0x263F8EE78] + 16)) {
        goto LABEL_9;
      }
    }
    __break(1u);
    goto LABEL_21;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Field40>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_260BF9FF0;
  *(void *)(v7 + 32) = *(void *)(v58 + 32);
  return v7;
}

{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  long long *v10;
  _OWORD *v11;
  uint64_t v12;
  long long v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  int *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;

  unint64_t v49 = result;
  uint64_t v2 = *(void *)(result + 16);
  if (!v2)
  {
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  unint64_t v4 = *(void *)(a2 + 16);
  if (!v4)
  {
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  uint64_t v5 = (v4 - 1) * (v2 - 1);
  if ((unsigned __int128)((uint64_t)(v4 - 1) * (__int128)(v2 - 1)) >> 64 != v5 >> 63)
  {
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  uint64_t result = v5 + 1;
  if (__OFADD__(v5, 1))
  {
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  uint64_t result = specialized FixedWidthInteger.nextPowerOfTwo.getter(result);
  if (v2 != 1)
  {
    unint64_t v6 = result;
    if (result < 0)
    {
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }
    uint64_t v47 = v4 - 1;
    if (result)
    {
      uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v7 + 16) = v6;
      bzero((void *)(v7 + 32), 4 * v6);
      uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v8 + 16) = v6;
      bzero((void *)(v8 + 32), 4 * v6);
      if (v4 <= v6)
      {
LABEL_9:
        uint64_t v9 = 0;
        if (v4 < 8) {
          goto LABEL_14;
        }
        if ((unint64_t)(v8 - a2) < 0x20) {
          goto LABEL_14;
        }
        uint64_t v9 = v4 & 0x7FFFFFFFFFFFFFF8;
        BOOL v10 = (long long *)(a2 + 48);
        uint64_t v11 = (_OWORD *)(v8 + 48);
        uint64_t v12 = v4 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v13 = *v10;
          *(v11 - 1) = *(v10 - 1);
          _OWORD *v11 = v13;
          v10 += 2;
          v11 += 2;
          v12 -= 8;
        }
        while (v12);
        if (v4 != v9)
        {
LABEL_14:
          unint64_t v14 = v4 - v9;
          uint64_t v15 = 4 * v9 + 32;
          BOOL v16 = (_DWORD *)(v8 + v15);
          uint64_t v17 = (int *)(a2 + v15);
          do
          {
            uint64_t v18 = *v17++;
            *v16++ = v18;
            --v14;
          }
          while (v14);
        }
        uint64_t v52 = (char *)v8;
        if (v6)
        {
          uint64_t v19 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          *(void *)(v19 + 16) = v6;
          bzero((void *)(v19 + 32), 4 * v6);
LABEL_22:
          uint64_t v51 = (char *)v19;
          specialized discreteFourierTransform<A, B, C>(input:size:output:)(a2, v6, &v51);
          unint64_t v20 = *(_DWORD *)(v49 + 32);
          uint64_t v50 = v49 + 32;
          uint64_t v21 = *(void *)(v7 + 16);
          uint64_t result = swift_bridgeObjectRetain();
          if (!v21)
          {
LABEL_83:
            __break(1u);
            return result;
          }
          *(_DWORD *)(v7 + 32) = v20;
          uint64_t v22 = v7 + 32;
          uint64_t v23 = result + 32;
          unint64_t v46 = result;
          unint64_t v24 = 1;
          uint64_t v25 = result;
          unint64_t v26 = v47;
LABEL_24:
          if ((v26 & 0x8000000000000000) == 0)
          {
            unint64_t v27 = v52;
            unint64_t v28 = *((void *)v52 + 2);
            if (v28)
            {
              uint64_t v29 = 0;
              unint64_t v30 = *(_DWORD *)(v50 + 4 * v24);
              while (1)
              {
                uint64_t v31 = *(unsigned int *)&v27[4 * v29 + 32] * (unint64_t)v30;
                uint64_t v32 = 4293918721 * (-1048577 * v31);
                uint64_t v33 = __CFADD__(v32, v31);
                BOOL v34 = (v32 + v31) >> 32;
                if (v33)
                {
                  uint64_t v35 = v34 + 0xFFFFF;
                  if (v34 >= 0xFFF00001) {
                    goto LABEL_71;
                  }
                }
                else
                {
                  uint64_t v35 = v34 + 0xFFFFF;
                  if (v34 < 0xFFF00001) {
                    uint64_t v35 = v34;
                  }
                }
                if (v29 >= *(void *)(v7 + 16)) {
                  break;
                }
                unint64_t v36 = *(_DWORD *)(v22 + 4 * v29);
                if (v35)
                {
                  uint64_t v33 = v35 <= 0xFFF00001;
                  unint64_t v37 = -1048575 - v35;
                  if (!v33) {
                    goto LABEL_69;
                  }
                  if (v36 >= v37)
                  {
                    v36 -= v37;
                  }
                  else
                  {
                    uint64_t v33 = v37 <= 0xFFF00001;
                    unint64_t v38 = -1048575 - v37;
                    if (!v33) {
                      goto LABEL_72;
                    }
                    uint64_t v33 = __CFADD__(v36, v38);
                    v36 += v38;
                    if (v33) {
                      goto LABEL_73;
                    }
                  }
                }
                *(_DWORD *)(v22 + 4 * v29) = v36;
                if (v26 == v29)
                {
                  if (v24 == v2 - 1)
                  {
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    return v7;
                  }
                  unint64_t v48 = v24 + 1;
                  if (v6)
                  {
                    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
                    unint64_t v39 = v47;
                    if ((result & 1) == 0)
                    {
                      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v25);
                      uint64_t v25 = result;
                    }
                    BOOL v40 = 0;
                    unint64_t v41 = *(void *)(v46 + 16);
                    while (v41 != v40)
                    {
                      BOOL v43 = v25 + 4 * v40;
                      BOOL v44 = *(unsigned int *)(v43 + 32) * (unint64_t)*(unsigned int *)(v23 + 4 * v40);
                      uint64_t v45 = 4293918721 * (-1048577 * v44);
                      uint64_t v33 = __CFADD__(v45, v44);
                      unint64_t v42 = (v45 + v44) >> 32;
                      if (v33)
                      {
                        uint64_t v33 = __CFADD__(v42, 0xFFFFF);
                        LODWORD(v42) = v42 + 0xFFFFF;
                        if (v33) {
                          goto LABEL_74;
                        }
                      }
                      else if (v42 >= 0xFFF00001)
                      {
                        LODWORD(v42) = v42 + 0xFFFFF;
                      }
                      ++v40;
                      *(_DWORD *)(v43 + 32) = v42;
                      if (v6 == v40) {
                        goto LABEL_62;
                      }
                    }
                    goto LABEL_70;
                  }
                  unint64_t v39 = v47;
LABEL_62:
                  uint64_t result = specialized inverseDiscreteFourierTransform<A, B, C>(input:size:output:)(v25, v6, &v52);
                  if (__OFADD__(v26, v39)) {
                    goto LABEL_76;
                  }
                  v26 += v39;
                  unint64_t v24 = v48;
                  if (v48 != v2) {
                    goto LABEL_24;
                  }
                  goto LABEL_77;
                }
                if (v28 == ++v29) {
                  goto LABEL_67;
                }
              }
            }
            else
            {
LABEL_67:
              __break(1u);
            }
            __break(1u);
LABEL_69:
            __break(1u);
LABEL_70:
            __break(1u);
LABEL_71:
            __break(1u);
LABEL_72:
            __break(1u);
LABEL_73:
            __break(1u);
LABEL_74:
            __break(1u);
          }
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
          goto LABEL_78;
        }
LABEL_21:
        uint64_t v19 = MEMORY[0x263F8EE78];
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v8 = MEMORY[0x263F8EE78];
      uint64_t v7 = MEMORY[0x263F8EE78];
      if (v4 <= *(void *)(MEMORY[0x263F8EE78] + 16)) {
        goto LABEL_9;
      }
    }
    __break(1u);
    goto LABEL_21;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Field32>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_260BF9FF0;
  *(_DWORD *)(v7 + 32) = *(_DWORD *)(v49 + 32);
  return v7;
}

{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  long long *v10;
  _OWORD *v11;
  uint64_t v12;
  long long v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  BOOL v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t i;
  BOOL v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;

  unint64_t v55 = result;
  uint64_t v2 = *(void *)(result + 16);
  if (!v2) {
    goto LABEL_91;
  }
  unint64_t v4 = *(void *)(a2 + 16);
  if (!v4)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  uint64_t v5 = (v4 - 1) * (v2 - 1);
  if ((unsigned __int128)((uint64_t)(v4 - 1) * (__int128)(v2 - 1)) >> 64 != v5 >> 63)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  uint64_t result = v5 + 1;
  if (__OFADD__(v5, 1))
  {
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  uint64_t v54 = v4 - 1;
  uint64_t result = specialized FixedWidthInteger.nextPowerOfTwo.getter(result);
  if (v2 != 1)
  {
    unint64_t v6 = result;
    if ((result & 0x8000000000000000) == 0)
    {
      if (result)
      {
        uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v7 + 16) = v6;
        bzero((void *)(v7 + 32), 8 * v6);
        uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v8 + 16) = v6;
        bzero((void *)(v8 + 32), 8 * v6);
        if (v4 <= v6)
        {
LABEL_9:
          uint64_t v9 = 0;
          if (v4 < 8) {
            goto LABEL_14;
          }
          if ((unint64_t)(v8 - a2) < 0x20) {
            goto LABEL_14;
          }
          uint64_t v9 = v4 & 0x7FFFFFFFFFFFFFFCLL;
          BOOL v10 = (long long *)(a2 + 48);
          uint64_t v11 = (_OWORD *)(v8 + 48);
          uint64_t v12 = v4 & 0x7FFFFFFFFFFFFFFCLL;
          do
          {
            long long v13 = *v10;
            *(v11 - 1) = *(v10 - 1);
            _OWORD *v11 = v13;
            v10 += 2;
            v11 += 2;
            v12 -= 4;
          }
          while (v12);
          if (v4 != v9)
          {
LABEL_14:
            unint64_t v14 = v4 - v9;
            uint64_t v15 = 8 * v9 + 32;
            BOOL v16 = (void *)(v8 + v15);
            uint64_t v17 = (uint64_t *)(a2 + v15);
            do
            {
              uint64_t v18 = *v17++;
              *v16++ = v18;
              --v14;
            }
            while (v14);
          }
          uint64_t v58 = (char *)v8;
          if (v6)
          {
            uint64_t v19 = static Array._allocateBufferUninitialized(minimumCapacity:)();
            *(void *)(v19 + 16) = v6;
            bzero((void *)(v19 + 32), 8 * v6);
            goto LABEL_22;
          }
LABEL_21:
          uint64_t v19 = MEMORY[0x263F8EE78];
LABEL_22:
          uint64_t v57 = (char *)v19;
          specialized discreteFourierTransform<A, B, C>(input:size:output:)(a2, v6, &v57);
          unint64_t v20 = v57;
          uint64_t v21 = *(void *)(v55 + 32);
          uint64_t v56 = v55 + 32;
          uint64_t v22 = *(void *)(v7 + 16);
          uint64_t result = swift_bridgeObjectRetain();
          if (v22)
          {
            *(void *)(v7 + 32) = v21;
            uint64_t v23 = 1;
            unint64_t v24 = v4 - 1;
            uint64_t v25 = (uint64_t)v20;
            while (1)
            {
              if ((v24 & 0x8000000000000000) != 0) {
                goto LABEL_88;
              }
              unint64_t v26 = v58;
              if (!*((void *)v58 + 2))
              {
LABEL_80:
                __break(1u);
LABEL_81:
                __break(1u);
LABEL_82:
                __break(1u);
LABEL_83:
                __break(1u);
LABEL_84:
                __break(1u);
LABEL_85:
                __break(1u);
LABEL_86:
                __break(1u);
LABEL_87:
                __break(1u);
LABEL_88:
                __break(1u);
LABEL_89:
                __break(1u);
LABEL_90:
                __break(1u);
LABEL_91:
                __break(1u);
                goto LABEL_92;
              }
              unint64_t v27 = 0;
              unint64_t v28 = v23 + 1;
              uint64_t v29 = *(void *)(v56 + 8 * v23);
              unint64_t v30 = (unint64_t *)(v7 + 32);
              while (1)
              {
                uint64_t v31 = *(void *)&v26[8 * v27 + 32];
                uint64_t v32 = (v31 * (unsigned __int128)v29) >> 64;
                uint64_t v33 = (0xFFFFFFFEFFFFFFFFLL * v31 * v29 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
                BOOL v34 = __CFADD__(-(uint64_t)(v31 * v29), v31 * v29);
                uint64_t v35 = v33 + v32;
                if (__CFADD__(v33, v32)) {
                  goto LABEL_34;
                }
                if (v35 == -1)
                {
                  if (!v34)
                  {
                    if (v27 >= *(void *)(v7 + 16)) {
                      goto LABEL_81;
                    }
                    BOOL v40 = (unint64_t *)(v7 + 32 + 8 * v27);
                    unint64_t v39 = *v30;
                    unint64_t v42 = 0xFFFFFFFE00000003;
                    goto LABEL_44;
                  }
                  BOOL v34 = 1;
LABEL_34:
                  unint64_t v36 = v34 + v35;
                  unint64_t v37 = v36 + 0xFFFFFFFF;
                  if (v36 >= 0xFFFFFFFF00000001) {
                    goto LABEL_83;
                  }
                  goto LABEL_40;
                }
                unint64_t v38 = v35 + v34;
                unint64_t v37 = v38 >= 0xFFFFFFFF00000001 ? v38 + 0xFFFFFFFF : v38;
LABEL_40:
                if (v27 >= *(void *)(v7 + 16)) {
                  goto LABEL_81;
                }
                unint64_t v39 = *v30;
                BOOL v40 = v30;
                if (!v37) {
                  goto LABEL_51;
                }
                unint64_t v41 = v37 <= 0xFFFFFFFF00000001;
                unint64_t v42 = 0xFFFFFFFF00000001 - v37;
                if (!v41) {
                  goto LABEL_82;
                }
LABEL_44:
                if (v39 >= v42)
                {
                  v39 -= v42;
                }
                else
                {
                  unint64_t v41 = v42 <= 0xFFFFFFFF00000001;
                  BOOL v43 = 0xFFFFFFFF00000001 - v42;
                  if (!v41) {
                    goto LABEL_86;
                  }
                  unint64_t v41 = __CFADD__(v39, v43);
                  v39 += v43;
                  if (v41) {
                    goto LABEL_87;
                  }
                }
LABEL_51:
                char *v40 = v39;
                if (v24 == v27) {
                  break;
                }
                ++v27;
                ++v30;
                if (v27 >= *((void *)v26 + 2)) {
                  goto LABEL_80;
                }
              }
              if (v23 == v2 - 1)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                return v7;
              }
              if (v6)
              {
                uint64_t result = swift_isUniquelyReferenced_nonNull_native();
                if ((result & 1) == 0)
                {
                  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v25);
                  uint64_t v25 = result;
                }
                for (unint64_t i = 0; v6 != i; ++i)
                {
                  if (i >= *((void *)v20 + 2)) {
                    goto LABEL_84;
                  }
                  unint64_t v48 = v25 + 8 * i;
                  unint64_t v49 = *(void *)(v48 + 32);
                  uint64_t v50 = *(void *)&v20[8 * i + 32];
                  uint64_t v51 = (v49 * (unsigned __int128)v50) >> 64;
                  uint64_t v52 = (0xFFFFFFFEFFFFFFFFLL * v49 * v50 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
                  uint64_t v45 = __CFADD__(-(uint64_t)(v49 * v50), v49 * v50);
                  uint64_t v53 = v52 + v51;
                  if (__CFADD__(v52, v51)) {
                    goto LABEL_64;
                  }
                  if (v53 == -1)
                  {
                    if (v45)
                    {
                      uint64_t v45 = 1;
LABEL_64:
                      unint64_t v46 = v45 + v53;
                      unint64_t v41 = __CFADD__(v46, 0xFFFFFFFFLL);
                      uint64_t v47 = v46 + 0xFFFFFFFFLL;
                      if (v41) {
                        goto LABEL_85;
                      }
                      goto LABEL_65;
                    }
                    uint64_t v47 = 4294967294;
                  }
                  else
                  {
                    uint64_t v47 = v53 + v45;
                    if (v47 >= 0xFFFFFFFF00000001) {
                      v47 += 0xFFFFFFFFLL;
                    }
                  }
LABEL_65:
                  *(void *)(v48 + 32) = v47;
                }
              }
              uint64_t result = specialized inverseDiscreteFourierTransform<A, B, C>(input:size:output:)(v25, v6, &v58);
              if (__OFADD__(v24, v54)) {
                goto LABEL_89;
              }
              v24 += v54;
              uint64_t v23 = v28;
              if (v28 == v2) {
                goto LABEL_90;
              }
            }
          }
          goto LABEL_96;
        }
      }
      else
      {
        uint64_t v8 = MEMORY[0x263F8EE78];
        uint64_t v7 = MEMORY[0x263F8EE78];
        if (v4 <= *(void *)(MEMORY[0x263F8EE78] + 16)) {
          goto LABEL_9;
        }
      }
      __break(1u);
      goto LABEL_21;
    }
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
    return result;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_260BF9FF0;
  *(void *)(v7 + 32) = *(void *)(v55 + 32);
  return v7;
}

void specialized static Polynomial.+ infix(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  unint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = a1 + 32;
  unint64_t v9 = v3 + 3;
  do
  {
    if (*(void *)(a1 + 8 * v9))
    {
      unint64_t v11 = *(void *)(a2 + 16);
      if (!v11) {
        goto LABEL_87;
      }
      uint64_t v12 = *(void *)(a2 + 16);
      while (1)
      {
        uint64_t v13 = v12 - 1;
        if (*(void *)(a2 + 24 + 8 * v12)) {
          break;
        }
        --v12;
        if ((unint64_t)(v13 + 1) <= 1) {
          goto LABEL_56;
        }
      }
      if (v12 < 1)
      {
LABEL_56:
        *a3 = a1;
        goto LABEL_57;
      }
      unint64_t v14 = *(void *)(a1 + 16);
      while (!*(void *)(a1 + 24 + 8 * v14))
      {
        if (v14-- <= 1)
        {
          unint64_t v14 = 0;
          break;
        }
      }
      int64_t v15 = v14 - 1;
      unint64_t v16 = *(void *)(a2 + 16);
      while (!*(void *)(a2 + 24 + 8 * v16))
      {
        if (v16-- <= 1)
        {
          unint64_t v16 = 0;
          break;
        }
      }
      int64_t v17 = v16 - 1;
      if (v17 >= v15) {
        int64_t v18 = v15;
      }
      else {
        int64_t v18 = v17;
      }
      while (!*(void *)(a1 + 24 + 8 * v7))
      {
        if (v7-- <= 1)
        {
          unint64_t v7 = 0;
          break;
        }
      }
      int64_t v19 = v7 - 1;
      while (!*(void *)(a2 + 24 + 8 * v11))
      {
        if (v11-- <= 1)
        {
          unint64_t v11 = 0;
          break;
        }
      }
      int64_t v20 = v11 - 1;
      if (v20 <= v19) {
        int64_t v21 = v19;
      }
      else {
        int64_t v21 = v20;
      }
      int64_t v22 = v21 + 1;
      if (!__OFADD__(v21, 1))
      {
        if (v22 < 0) {
          goto LABEL_90;
        }
        if (v21 == -1)
        {
          uint64_t v23 = MEMORY[0x263F8EE78];
          if ((v18 & 0x8000000000000000) == 0) {
            goto LABEL_38;
          }
        }
        else
        {
          uint64_t v23 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          *(void *)(v23 + 16) = v22;
          bzero((void *)(v23 + 32), 8 * v21 + 8);
          if ((v18 & 0x8000000000000000) == 0)
          {
LABEL_38:
            unint64_t v24 = 0;
            unint64_t v25 = *(void *)(a2 + 16);
            uint64_t v26 = v23 + 32;
            if (v3 <= 1) {
              uint64_t v27 = 1;
            }
            else {
              uint64_t v27 = v3;
            }
            while (v25 != v24)
            {
              unint64_t v28 = *(void *)(v8 + 8 * v24);
              unint64_t v29 = *(void *)(a2 + 32 + 8 * v24);
              if (v29)
              {
                BOOL v30 = v29 <= 0xFFFEB00001;
                unint64_t v31 = 0xFFFEB00001 - v29;
                if (!v30) {
                  goto LABEL_83;
                }
                if (v28 >= v31)
                {
                  v28 -= v31;
                }
                else
                {
                  BOOL v30 = v31 <= 0xFFFEB00001;
                  unint64_t v32 = 0xFFFEB00001 - v31;
                  if (!v30) {
                    goto LABEL_84;
                  }
                  BOOL v30 = __CFADD__(v28, v32);
                  v28 += v32;
                  if (v30) {
                    goto LABEL_85;
                  }
                }
              }
              if (v24 >= *(void *)(v23 + 16)) {
                goto LABEL_80;
              }
              *(void *)(v26 + 8 * v24) = v28;
              if (v18 == v24)
              {
                unint64_t v33 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_91;
                }
                int v34 = 0;
                BOOL v35 = v33 == v21;
                if ((uint64_t)v33 >= v21) {
                  goto LABEL_65;
                }
LABEL_62:
                int64_t v36 = v33 + 1;
                if (v3 < v25)
                {
LABEL_63:
                  uint64_t v37 = a2;
                  if (v33 < v25) {
                    goto LABEL_71;
                  }
                  goto LABEL_81;
                }
                while (1)
                {
                  uint64_t v37 = a1;
                  if (v33 >= v3) {
                    goto LABEL_82;
                  }
LABEL_71:
                  if (v33 >= *(void *)(v23 + 16)) {
                    goto LABEL_78;
                  }
                  *(void *)(v26 + 8 * v33) = *(void *)(v37 + 8 * v33 + 32);
                  unint64_t v33 = v36;
                  BOOL v35 = v36 == v21;
                  if (v36 < v21) {
                    goto LABEL_62;
                  }
LABEL_65:
                  int v38 = !v35;
                  if ((v38 | v34))
                  {
                    if (!*(void *)(v23 + 16)) {
                      goto LABEL_92;
                    }
                    *a3 = v23;
                    return;
                  }
                  int v34 = 1;
                  int64_t v36 = v21;
                  if (v3 < v25) {
                    goto LABEL_63;
                  }
                }
              }
              if (v27 == ++v24)
              {
                __break(1u);
                goto LABEL_56;
              }
            }
            goto LABEL_79;
          }
        }
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
        goto LABEL_86;
      }
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
      return;
    }
    unint64_t v10 = v9 - 3;
    --v9;
  }
  while (v10 > 1);
  if (!*(void *)(a2 + 16)) {
    goto LABEL_88;
  }
  *a3 = a2;
LABEL_57:

  swift_bridgeObjectRetain();
}

{
  unint64_t v3;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  int64_t v19;
  int64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  int v34;
  BOOL v35;
  int64_t v36;
  uint64_t v37;
  int v38;
  uint64_t vars8;

  unint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  unint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = a1 + 32;
  unint64_t v9 = v3 + 7;
  do
  {
    if (*(_DWORD *)(a1 + 4 * v9))
    {
      unint64_t v11 = *(void *)(a2 + 16);
      if (!v11) {
        goto LABEL_87;
      }
      uint64_t v12 = *(void *)(a2 + 16);
      while (1)
      {
        uint64_t v13 = v12 - 1;
        if (*(_DWORD *)(a2 + 28 + 4 * v12)) {
          break;
        }
        --v12;
        if ((unint64_t)(v13 + 1) <= 1) {
          goto LABEL_56;
        }
      }
      if (v12 < 1)
      {
LABEL_56:
        *a3 = a1;
        goto LABEL_57;
      }
      unint64_t v14 = *(void *)(a1 + 16);
      while (!*(_DWORD *)(a1 + 28 + 4 * v14))
      {
        if (v14-- <= 1)
        {
          unint64_t v14 = 0;
          break;
        }
      }
      int64_t v15 = v14 - 1;
      unint64_t v16 = *(void *)(a2 + 16);
      while (!*(_DWORD *)(a2 + 28 + 4 * v16))
      {
        if (v16-- <= 1)
        {
          unint64_t v16 = 0;
          break;
        }
      }
      int64_t v17 = v16 - 1;
      if (v17 >= v15) {
        int64_t v18 = v15;
      }
      else {
        int64_t v18 = v17;
      }
      while (!*(_DWORD *)(a1 + 28 + 4 * v7))
      {
        if (v7-- <= 1)
        {
          unint64_t v7 = 0;
          break;
        }
      }
      int64_t v19 = v7 - 1;
      while (!*(_DWORD *)(a2 + 28 + 4 * v11))
      {
        if (v11-- <= 1)
        {
          unint64_t v11 = 0;
          break;
        }
      }
      int64_t v20 = v11 - 1;
      if (v20 <= v19) {
        int64_t v21 = v19;
      }
      else {
        int64_t v21 = v20;
      }
      int64_t v22 = v21 + 1;
      if (!__OFADD__(v21, 1))
      {
        if (v22 < 0) {
          goto LABEL_90;
        }
        if (v21 == -1)
        {
          uint64_t v23 = MEMORY[0x263F8EE78];
          if ((v18 & 0x8000000000000000) == 0) {
            goto LABEL_38;
          }
        }
        else
        {
          uint64_t v23 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          *(void *)(v23 + 16) = v22;
          bzero((void *)(v23 + 32), 4 * v21 + 4);
          if ((v18 & 0x8000000000000000) == 0)
          {
LABEL_38:
            unint64_t v24 = 0;
            unint64_t v25 = *(void *)(a2 + 16);
            uint64_t v26 = v23 + 32;
            if (v3 <= 1) {
              uint64_t v27 = 1;
            }
            else {
              uint64_t v27 = v3;
            }
            while (v25 != v24)
            {
              unint64_t v28 = *(_DWORD *)(v8 + 4 * v24);
              unint64_t v29 = *(_DWORD *)(a2 + 32 + 4 * v24);
              if (v29)
              {
                BOOL v30 = v29 <= 0xFFF00001;
                unint64_t v31 = -1048575 - v29;
                if (!v30) {
                  goto LABEL_83;
                }
                if (v28 >= v31)
                {
                  v28 -= v31;
                }
                else
                {
                  BOOL v30 = v31 <= 0xFFF00001;
                  unint64_t v32 = -1048575 - v31;
                  if (!v30) {
                    goto LABEL_84;
                  }
                  BOOL v30 = __CFADD__(v28, v32);
                  v28 += v32;
                  if (v30) {
                    goto LABEL_85;
                  }
                }
              }
              if (v24 >= *(void *)(v23 + 16)) {
                goto LABEL_80;
              }
              *(_DWORD *)(v26 + 4 * v24) = v28;
              if (v18 == v24)
              {
                unint64_t v33 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_91;
                }
                int v34 = 0;
                BOOL v35 = v33 == v21;
                if ((uint64_t)v33 >= v21) {
                  goto LABEL_65;
                }
LABEL_62:
                int64_t v36 = v33 + 1;
                if (v3 < v25)
                {
LABEL_63:
                  uint64_t v37 = a2;
                  if (v33 < v25) {
                    goto LABEL_71;
                  }
                  goto LABEL_81;
                }
                while (1)
                {
                  uint64_t v37 = a1;
                  if (v33 >= v3) {
                    goto LABEL_82;
                  }
LABEL_71:
                  if (v33 >= *(void *)(v23 + 16)) {
                    goto LABEL_78;
                  }
                  *(_DWORD *)(v26 + 4 * v33) = *(_DWORD *)(v37 + 4 * v33 + 32);
                  unint64_t v33 = v36;
                  BOOL v35 = v36 == v21;
                  if (v36 < v21) {
                    goto LABEL_62;
                  }
LABEL_65:
                  int v38 = !v35;
                  if ((v38 | v34))
                  {
                    if (!*(void *)(v23 + 16)) {
                      goto LABEL_92;
                    }
                    *a3 = v23;
                    return;
                  }
                  int v34 = 1;
                  int64_t v36 = v21;
                  if (v3 < v25) {
                    goto LABEL_63;
                  }
                }
              }
              if (v27 == ++v24)
              {
                __break(1u);
                goto LABEL_56;
              }
            }
            goto LABEL_79;
          }
        }
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
        goto LABEL_86;
      }
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
      return;
    }
    unint64_t v10 = v9 - 7;
    --v9;
  }
  while (v10 > 1);
  if (!*(void *)(a2 + 16)) {
    goto LABEL_88;
  }
  *a3 = a2;
LABEL_57:

  swift_bridgeObjectRetain();
}

{
  unint64_t v3;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  int64_t v19;
  int64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  BOOL v35;
  int64_t v36;
  uint64_t v37;
  int v38;
  uint64_t vars8;

  unint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  unint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = a1 + 32;
  unint64_t v9 = v3 + 3;
  do
  {
    if (*(void *)(a1 + 8 * v9))
    {
      unint64_t v11 = *(void *)(a2 + 16);
      if (!v11) {
        goto LABEL_87;
      }
      uint64_t v12 = *(void *)(a2 + 16);
      while (1)
      {
        uint64_t v13 = v12 - 1;
        if (*(void *)(a2 + 24 + 8 * v12)) {
          break;
        }
        --v12;
        if ((unint64_t)(v13 + 1) <= 1) {
          goto LABEL_56;
        }
      }
      if (v12 < 1)
      {
LABEL_56:
        *a3 = a1;
        goto LABEL_57;
      }
      unint64_t v14 = *(void *)(a1 + 16);
      while (!*(void *)(a1 + 24 + 8 * v14))
      {
        if (v14-- <= 1)
        {
          unint64_t v14 = 0;
          break;
        }
      }
      int64_t v15 = v14 - 1;
      unint64_t v16 = *(void *)(a2 + 16);
      while (!*(void *)(a2 + 24 + 8 * v16))
      {
        if (v16-- <= 1)
        {
          unint64_t v16 = 0;
          break;
        }
      }
      int64_t v17 = v16 - 1;
      if (v17 >= v15) {
        int64_t v18 = v15;
      }
      else {
        int64_t v18 = v17;
      }
      while (!*(void *)(a1 + 24 + 8 * v7))
      {
        if (v7-- <= 1)
        {
          unint64_t v7 = 0;
          break;
        }
      }
      int64_t v19 = v7 - 1;
      while (!*(void *)(a2 + 24 + 8 * v11))
      {
        if (v11-- <= 1)
        {
          unint64_t v11 = 0;
          break;
        }
      }
      int64_t v20 = v11 - 1;
      if (v20 <= v19) {
        int64_t v21 = v19;
      }
      else {
        int64_t v21 = v20;
      }
      int64_t v22 = v21 + 1;
      if (!__OFADD__(v21, 1))
      {
        if (v22 < 0) {
          goto LABEL_90;
        }
        if (v21 == -1)
        {
          uint64_t v23 = MEMORY[0x263F8EE78];
          if ((v18 & 0x8000000000000000) == 0) {
            goto LABEL_38;
          }
        }
        else
        {
          uint64_t v23 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          *(void *)(v23 + 16) = v22;
          bzero((void *)(v23 + 32), 8 * v21 + 8);
          if ((v18 & 0x8000000000000000) == 0)
          {
LABEL_38:
            unint64_t v24 = 0;
            unint64_t v25 = *(void *)(a2 + 16);
            uint64_t v26 = v23 + 32;
            if (v3 <= 1) {
              uint64_t v27 = 1;
            }
            else {
              uint64_t v27 = v3;
            }
            while (v25 != v24)
            {
              unint64_t v28 = *(void *)(v8 + 8 * v24);
              unint64_t v29 = *(void *)(a2 + 32 + 8 * v24);
              if (v29)
              {
                BOOL v30 = v29 <= 0xFFFFFFFF00000001;
                unint64_t v31 = 0xFFFFFFFF00000001 - v29;
                if (!v30) {
                  goto LABEL_83;
                }
                if (v28 >= v31)
                {
                  v28 -= v31;
                }
                else
                {
                  BOOL v30 = v31 <= 0xFFFFFFFF00000001;
                  unint64_t v32 = 0xFFFFFFFF00000001 - v31;
                  if (!v30) {
                    goto LABEL_84;
                  }
                  BOOL v30 = __CFADD__(v28, v32);
                  v28 += v32;
                  if (v30) {
                    goto LABEL_85;
                  }
                }
              }
              if (v24 >= *(void *)(v23 + 16)) {
                goto LABEL_80;
              }
              *(void *)(v26 + 8 * v24) = v28;
              if (v18 == v24)
              {
                unint64_t v33 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_91;
                }
                int v34 = 0;
                BOOL v35 = v33 == v21;
                if ((uint64_t)v33 >= v21) {
                  goto LABEL_65;
                }
LABEL_62:
                int64_t v36 = v33 + 1;
                if (v3 < v25)
                {
LABEL_63:
                  uint64_t v37 = a2;
                  if (v33 < v25) {
                    goto LABEL_71;
                  }
                  goto LABEL_81;
                }
                while (1)
                {
                  uint64_t v37 = a1;
                  if (v33 >= v3) {
                    goto LABEL_82;
                  }
LABEL_71:
                  if (v33 >= *(void *)(v23 + 16)) {
                    goto LABEL_78;
                  }
                  *(void *)(v26 + 8 * v33) = *(void *)(v37 + 8 * v33 + 32);
                  unint64_t v33 = v36;
                  BOOL v35 = v36 == v21;
                  if (v36 < v21) {
                    goto LABEL_62;
                  }
LABEL_65:
                  int v38 = !v35;
                  if ((v38 | v34))
                  {
                    if (!*(void *)(v23 + 16)) {
                      goto LABEL_92;
                    }
                    *a3 = v23;
                    return;
                  }
                  int v34 = 1;
                  int64_t v36 = v21;
                  if (v3 < v25) {
                    goto LABEL_63;
                  }
                }
              }
              if (v27 == ++v24)
              {
                __break(1u);
                goto LABEL_56;
              }
            }
            goto LABEL_79;
          }
        }
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
        goto LABEL_86;
      }
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
      return;
    }
    unint64_t v10 = v9 - 3;
    --v9;
  }
  while (v10 > 1);
  if (!*(void *)(a2 + 16)) {
    goto LABEL_88;
  }
  *a3 = a2;
LABEL_57:

  swift_bridgeObjectRetain();
}

void specialized static Polynomial.* infix(_:_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  int64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  uint64_t v7 = a1 + 32;
  uint64_t v8 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v9 = v8 - 1;
    if (*(void *)(a1 + 24 + 8 * v8)) {
      break;
    }
    --v8;
    if ((unint64_t)(v9 + 1) <= 1) {
      goto LABEL_37;
    }
  }
  if (v8 < 1) {
    goto LABEL_37;
  }
  unint64_t v10 = *(void *)(a2 + 16);
  if (!v10) {
    goto LABEL_77;
  }
  uint64_t v11 = *(void *)(a2 + 16);
  while (1)
  {
    uint64_t v12 = v11 - 1;
    if (*(void *)(a2 + 24 + 8 * v11)) {
      break;
    }
    --v11;
    if ((unint64_t)(v12 + 1) <= 1) {
      goto LABEL_37;
    }
  }
  if (v11 < 1)
  {
LABEL_37:
    uint64_t v26 = (char *)&outlined read-only object #0 of specialized static Polynomial.* infix(_:_:);
    goto LABEL_38;
  }
  unint64_t v13 = *(void *)(a1 + 16);
  while (!*(void *)(a1 + 24 + 8 * v13))
  {
    if (v13-- <= 1)
    {
      unint64_t v13 = 0;
      break;
    }
  }
  unint64_t v14 = v13 - 1;
  unint64_t v15 = *(void *)(a2 + 16);
  while (!*(void *)(a2 + 24 + 8 * v15))
  {
    if (v15-- <= 1)
    {
      unint64_t v15 = 0;
      break;
    }
  }
  unint64_t v16 = v15 - 1;
  BOOL v17 = __OFADD__(v14, v16);
  unint64_t v18 = v14 + v16;
  if (v17) {
    goto LABEL_78;
  }
  uint64_t v19 = v18 + 1;
  if (__OFADD__(v18, 1)) {
    goto LABEL_79;
  }
  unint64_t v20 = *(void *)(a1 + 16);
  while (!*(void *)(a1 + 24 + 8 * v20))
  {
    if (v20-- <= 1)
    {
      unint64_t v20 = 0;
      break;
    }
  }
  uint64_t v21 = v20 - 1;
  while (!*(void *)(a2 + 24 + 8 * v10))
  {
    if (v10-- <= 1)
    {
      unint64_t v10 = 0;
      break;
    }
  }
  uint64_t v22 = v10 - 1;
  if (v22 <= v21) {
    uint64_t v22 = v21;
  }
  if (v22 >= 61)
  {
    uint64_t v23 = specialized FixedWidthInteger.nextPowerOfTwo.getter(v19);
    if (v23 < 0) {
      goto LABEL_80;
    }
    uint64_t v24 = v23;
    if (v23)
    {
      uint64_t v25 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v25 + 16) = v24;
      bzero((void *)(v25 + 32), 8 * v24);
    }
    else
    {
      uint64_t v25 = MEMORY[0x263F8EE78];
    }
    uint64_t v37 = (char *)v25;
    int64_t v28 = *(void *)(a1 + 16);
    if (v28)
    {
      unint64_t v29 = *(void *)(a1 + 16);
      while (!*(void *)(a1 + 24 + 8 * v29))
      {
        if (v29-- <= 1)
        {
          unint64_t v29 = 0;
          goto LABEL_50;
        }
      }
      if ((v29 & 0x8000000000000000) != 0) {
        goto LABEL_83;
      }
      if (v28 < (uint64_t)v29) {
        goto LABEL_84;
      }
LABEL_50:
      int64_t v30 = *(void *)(a2 + 16);
      if (!v30) {
        goto LABEL_85;
      }
      unint64_t v31 = (2 * v29) | 1;
      unint64_t v32 = *(void *)(a2 + 16);
      while (!*(void *)(a2 + 24 + 8 * v32))
      {
        if (v32-- <= 1)
        {
          unint64_t v32 = 0;
LABEL_57:
          specialized convolveUsingDFT<A, B, C, D>(_:withKernel:result:)(v7, 0, v31, a2 + 32, 0, (char *)((2 * v32) | 1), &v37);
          goto LABEL_74;
        }
      }
      if ((v32 & 0x8000000000000000) != 0) {
        goto LABEL_86;
      }
      if (v30 >= (uint64_t)v32) {
        goto LABEL_57;
      }
      goto LABEL_92;
    }
    goto LABEL_82;
  }
  if ((v19 & 0x8000000000000000) == 0)
  {
    if (v19)
    {
      uint64_t v27 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v27 + 16) = v19;
      bzero((void *)(v27 + 32), 8 * v19);
      int64_t v4 = *(void *)(a1 + 16);
    }
    else
    {
      uint64_t v27 = MEMORY[0x263F8EE78];
    }
    uint64_t v37 = (char *)v27;
    if (!v4) {
      goto LABEL_87;
    }
    unint64_t v33 = v4;
    while (!*(void *)(a1 + 24 + 8 * v33))
    {
      if (v33-- <= 1)
      {
        unint64_t v33 = 0;
        goto LABEL_65;
      }
    }
    if ((v33 & 0x8000000000000000) != 0) {
      goto LABEL_88;
    }
LABEL_65:
    if (v4 < (uint64_t)v33) {
      goto LABEL_89;
    }
    int64_t v34 = *(void *)(a2 + 16);
    if (!v34) {
      goto LABEL_90;
    }
    unint64_t v35 = (2 * v33) | 1;
    unint64_t v36 = *(void *)(a2 + 16);
    while (!*(void *)(a2 + 24 + 8 * v36))
    {
      if (v36-- <= 1)
      {
        unint64_t v36 = 0;
        goto LABEL_73;
      }
    }
    if ((v36 & 0x8000000000000000) != 0) {
      goto LABEL_91;
    }
    if (v34 < (uint64_t)v36) {
      goto LABEL_93;
    }
LABEL_73:
    specialized convolveDirectly<A, B, C, D>(_:withKernel:result:)(v7, 0, v35, a2 + 32, 0, (2 * v36) | 1, (uint64_t *)&v37);
LABEL_74:
    uint64_t v26 = v37;
    if (!*((void *)v37 + 2))
    {
      __break(1u);
      goto LABEL_76;
    }
LABEL_38:
    *a3 = v26;
    return;
  }
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
}

{
  int64_t v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;

  unint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    goto LABEL_73;
  }
  uint64_t v7 = a1 + 32;
  uint64_t v8 = *(void *)(a1 + 16);
  while (!*(_DWORD *)(a1 + 28 + 4 * v8))
  {
    if (v8-- <= 1) {
      goto LABEL_36;
    }
  }
  uint64_t v9 = *(void *)(a2 + 16);
  if (!v9) {
    goto LABEL_74;
  }
  unint64_t v10 = *(void *)(a2 + 16);
  while (1)
  {
    uint64_t v11 = v10 - 1;
    if (*(_DWORD *)(a2 + 28 + 4 * v10)) {
      break;
    }
    --v10;
    if ((unint64_t)(v11 + 1) <= 1) {
      goto LABEL_36;
    }
  }
  if (v10 < 1)
  {
LABEL_36:
    uint64_t v25 = (char *)&outlined read-only object #0 of specialized static Polynomial.* infix(_:_:);
LABEL_37:
    *a3 = v25;
    return;
  }
  uint64_t v12 = *(void *)(a1 + 16);
  while (!*(_DWORD *)(a1 + 28 + 4 * v12))
  {
    if (v12-- <= 1)
    {
      uint64_t v12 = 0;
      break;
    }
  }
  unint64_t v13 = v12 - 1;
  unint64_t v14 = *(void *)(a2 + 16);
  while (!*(_DWORD *)(a2 + 28 + 4 * v14))
  {
    if (v14-- <= 1)
    {
      unint64_t v14 = 0;
      break;
    }
  }
  unint64_t v15 = v14 - 1;
  unint64_t v16 = __OFADD__(v13, v15);
  BOOL v17 = v13 + v15;
  if (v16) {
    goto LABEL_75;
  }
  unint64_t v18 = v17 + 1;
  if (__OFADD__(v17, 1)) {
    goto LABEL_76;
  }
  uint64_t v19 = *(void *)(a1 + 16);
  while (!*(_DWORD *)(a1 + 28 + 4 * v19))
  {
    if (v19-- <= 1)
    {
      uint64_t v19 = 0;
      break;
    }
  }
  unint64_t v20 = v19 - 1;
  while (!*(_DWORD *)(a2 + 28 + 4 * v9))
  {
    if (v9-- <= 1)
    {
      uint64_t v9 = 0;
      break;
    }
  }
  uint64_t v21 = v9 - 1;
  if (v21 <= v20) {
    uint64_t v21 = v20;
  }
  if (v21 >= 61)
  {
    uint64_t v22 = specialized FixedWidthInteger.nextPowerOfTwo.getter(v18);
    if (v22 < 0) {
      goto LABEL_77;
    }
    uint64_t v23 = v22;
    if (v22)
    {
      uint64_t v24 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v24 + 16) = v23;
      bzero((void *)(v24 + 32), 4 * v23);
    }
    else
    {
      uint64_t v24 = MEMORY[0x263F8EE78];
    }
    unint64_t v35 = (char *)v24;
    unint64_t v31 = *(void *)(a1 + 16);
    if (v31)
    {
      while (!*(_DWORD *)(a1 + 28 + 4 * v31))
      {
        if (v31-- <= 1)
        {
          unint64_t v31 = 0;
          goto LABEL_61;
        }
      }
      if ((v31 & 0x8000000000000000) != 0) {
        goto LABEL_84;
      }
      if (v3 < (uint64_t)v31) {
        goto LABEL_85;
      }
LABEL_61:
      unint64_t v32 = *(void *)(a2 + 16);
      if (!v32) {
        goto LABEL_86;
      }
      unint64_t v33 = (2 * v31) | 1;
      int64_t v34 = *(void *)(a2 + 16);
      while (!*(_DWORD *)(a2 + 28 + 4 * v34))
      {
        if (v34-- <= 1)
        {
          int64_t v34 = 0;
          goto LABEL_68;
        }
      }
      if ((v34 & 0x8000000000000000) != 0) {
        goto LABEL_87;
      }
      if (v32 < (uint64_t)v34) {
        goto LABEL_89;
      }
LABEL_68:
      specialized convolveUsingDFT<A, B, C, D>(_:withKernel:result:)(v7, 0, v33, a2 + 32, 0, (char *)((2 * v34) | 1), &v35);
LABEL_69:
      uint64_t v25 = v35;
      if (!*((void *)v35 + 2))
      {
        __break(1u);
        goto LABEL_71;
      }
      goto LABEL_37;
    }
    goto LABEL_83;
  }
  if (v18 < 0)
  {
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  if (v18)
  {
    uint64_t v26 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v26 + 16) = v18;
    bzero((void *)(v26 + 32), 4 * v18);
    uint64_t v27 = *(void *)(a1 + 16);
    unint64_t v35 = (char *)v26;
    if (v27) {
      goto LABEL_41;
    }
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
LABEL_71:
  uint64_t v27 = v3;
  unint64_t v35 = (char *)MEMORY[0x263F8EE78];
LABEL_41:
  while (!*(_DWORD *)(a1 + 28 + 4 * v27))
  {
    if (v27-- <= 1)
    {
      uint64_t v27 = 0;
      goto LABEL_46;
    }
  }
  if ((v27 & 0x8000000000000000) != 0) {
    goto LABEL_79;
  }
  if (v3 < (uint64_t)v27) {
    goto LABEL_80;
  }
LABEL_46:
  int64_t v28 = *(void *)(a2 + 16);
  if (!v28) {
    goto LABEL_81;
  }
  unint64_t v29 = (2 * v27) | 1;
  int64_t v30 = *(void *)(a2 + 16);
  while (!*(_DWORD *)(a2 + 28 + 4 * v30))
  {
    if (v30-- <= 1)
    {
      int64_t v30 = 0;
LABEL_53:
      specialized convolveDirectly<A, B, C, D>(_:withKernel:result:)(v7, 0, v29, a2 + 32, 0, (2 * v30) | 1, (uint64_t *)&v35);
      goto LABEL_69;
    }
  }
  if ((v30 & 0x8000000000000000) != 0) {
    goto LABEL_82;
  }
  if (v28 >= (uint64_t)v30) {
    goto LABEL_53;
  }
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
}

{
  int64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;

  int64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  uint64_t v7 = a1 + 32;
  uint64_t v8 = *(void *)(a1 + 16);
  while (1)
  {
    uint64_t v9 = v8 - 1;
    if (*(void *)(a1 + 24 + 8 * v8)) {
      break;
    }
    --v8;
    if ((unint64_t)(v9 + 1) <= 1) {
      goto LABEL_37;
    }
  }
  if (v8 < 1) {
    goto LABEL_37;
  }
  unint64_t v10 = *(void *)(a2 + 16);
  if (!v10) {
    goto LABEL_77;
  }
  uint64_t v11 = *(void *)(a2 + 16);
  while (1)
  {
    uint64_t v12 = v11 - 1;
    if (*(void *)(a2 + 24 + 8 * v11)) {
      break;
    }
    --v11;
    if ((unint64_t)(v12 + 1) <= 1) {
      goto LABEL_37;
    }
  }
  if (v11 < 1)
  {
LABEL_37:
    uint64_t v26 = (char *)&outlined read-only object #0 of specialized static Polynomial.* infix(_:_:);
    goto LABEL_38;
  }
  unint64_t v13 = *(void *)(a1 + 16);
  while (!*(void *)(a1 + 24 + 8 * v13))
  {
    if (v13-- <= 1)
    {
      unint64_t v13 = 0;
      break;
    }
  }
  unint64_t v14 = v13 - 1;
  unint64_t v15 = *(void *)(a2 + 16);
  while (!*(void *)(a2 + 24 + 8 * v15))
  {
    if (v15-- <= 1)
    {
      unint64_t v15 = 0;
      break;
    }
  }
  unint64_t v16 = v15 - 1;
  BOOL v17 = __OFADD__(v14, v16);
  unint64_t v18 = v14 + v16;
  if (v17) {
    goto LABEL_78;
  }
  uint64_t v19 = v18 + 1;
  if (__OFADD__(v18, 1)) {
    goto LABEL_79;
  }
  unint64_t v20 = *(void *)(a1 + 16);
  while (!*(void *)(a1 + 24 + 8 * v20))
  {
    if (v20-- <= 1)
    {
      unint64_t v20 = 0;
      break;
    }
  }
  uint64_t v21 = v20 - 1;
  while (!*(void *)(a2 + 24 + 8 * v10))
  {
    if (v10-- <= 1)
    {
      unint64_t v10 = 0;
      break;
    }
  }
  uint64_t v22 = v10 - 1;
  if (v22 <= v21) {
    uint64_t v22 = v21;
  }
  if (v22 >= 61)
  {
    uint64_t v23 = specialized FixedWidthInteger.nextPowerOfTwo.getter(v19);
    if (v23 < 0) {
      goto LABEL_80;
    }
    uint64_t v24 = v23;
    if (v23)
    {
      uint64_t v25 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v25 + 16) = v24;
      bzero((void *)(v25 + 32), 8 * v24);
    }
    else
    {
      uint64_t v25 = MEMORY[0x263F8EE78];
    }
    uint64_t v37 = (char *)v25;
    int64_t v28 = *(void *)(a1 + 16);
    if (v28)
    {
      unint64_t v29 = *(void *)(a1 + 16);
      while (!*(void *)(a1 + 24 + 8 * v29))
      {
        if (v29-- <= 1)
        {
          unint64_t v29 = 0;
          goto LABEL_50;
        }
      }
      if ((v29 & 0x8000000000000000) != 0) {
        goto LABEL_83;
      }
      if (v28 < (uint64_t)v29) {
        goto LABEL_84;
      }
LABEL_50:
      int64_t v30 = *(void *)(a2 + 16);
      if (!v30) {
        goto LABEL_85;
      }
      unint64_t v31 = (2 * v29) | 1;
      unint64_t v32 = *(void *)(a2 + 16);
      while (!*(void *)(a2 + 24 + 8 * v32))
      {
        if (v32-- <= 1)
        {
          unint64_t v32 = 0;
LABEL_57:
          specialized convolveUsingDFT<A, B, C, D>(_:withKernel:result:)(v7, 0, v31, a2 + 32, 0, (char *)((2 * v32) | 1), &v37);
          goto LABEL_74;
        }
      }
      if ((v32 & 0x8000000000000000) != 0) {
        goto LABEL_86;
      }
      if (v30 >= (uint64_t)v32) {
        goto LABEL_57;
      }
      goto LABEL_92;
    }
    goto LABEL_82;
  }
  if ((v19 & 0x8000000000000000) == 0)
  {
    if (v19)
    {
      uint64_t v27 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v27 + 16) = v19;
      bzero((void *)(v27 + 32), 8 * v19);
      int64_t v4 = *(void *)(a1 + 16);
    }
    else
    {
      uint64_t v27 = MEMORY[0x263F8EE78];
    }
    uint64_t v37 = (char *)v27;
    if (!v4) {
      goto LABEL_87;
    }
    unint64_t v33 = v4;
    while (!*(void *)(a1 + 24 + 8 * v33))
    {
      if (v33-- <= 1)
      {
        unint64_t v33 = 0;
        goto LABEL_65;
      }
    }
    if ((v33 & 0x8000000000000000) != 0) {
      goto LABEL_88;
    }
LABEL_65:
    if (v4 < (uint64_t)v33) {
      goto LABEL_89;
    }
    int64_t v34 = *(void *)(a2 + 16);
    if (!v34) {
      goto LABEL_90;
    }
    unint64_t v35 = (2 * v33) | 1;
    unint64_t v36 = *(void *)(a2 + 16);
    while (!*(void *)(a2 + 24 + 8 * v36))
    {
      if (v36-- <= 1)
      {
        unint64_t v36 = 0;
        goto LABEL_73;
      }
    }
    if ((v36 & 0x8000000000000000) != 0) {
      goto LABEL_91;
    }
    if (v34 < (uint64_t)v36) {
      goto LABEL_93;
    }
LABEL_73:
    specialized convolveDirectly<A, B, C, D>(_:withKernel:result:)(v7, 0, v35, a2 + 32, 0, (2 * v36) | 1, (uint64_t *)&v37);
LABEL_74:
    uint64_t v26 = v37;
    if (!*((void *)v37 + 2))
    {
      __break(1u);
      goto LABEL_76;
    }
LABEL_38:
    *a3 = v26;
    return;
  }
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
}

uint64_t default argument 3 of PINE.init(l2NormBound:fractionalBitCount:measurementLength:numOfAggregators:numOfProofs:numOfProofsNormEquality:chunkLength:chunkLengthNormEquality:alpha:wraparoundCheckCount:wraparoundCheckSuccessCount:)()
{
  return 2;
}

uint64_t default argument 5 of PINE.init(l2NormBound:fractionalBitCount:measurementLength:numOfAggregators:numOfProofs:numOfProofsNormEquality:chunkLength:chunkLengthNormEquality:alpha:wraparoundCheckCount:wraparoundCheckSuccessCount:)()
{
  return 1;
}

double default argument 8 of PINE.init(l2NormBound:fractionalBitCount:measurementLength:numOfAggregators:numOfProofs:numOfProofsNormEquality:chunkLength:chunkLengthNormEquality:alpha:wraparoundCheckCount:wraparoundCheckSuccessCount:)()
{
  return 8.7;
}

uint64_t default argument 9 of PINE.init(l2NormBound:fractionalBitCount:measurementLength:numOfAggregators:numOfProofs:numOfProofsNormEquality:chunkLength:chunkLengthNormEquality:alpha:wraparoundCheckCount:wraparoundCheckSuccessCount:)()
{
  return 100;
}

uint64_t specialized static PINE.domainSeparationTag(usage:)(unsigned __int8 a1)
{
  v9[1] = *MEMORY[0x263EF8340];
  uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 7, 0, MEMORY[0x263F8EE78]);
  unint64_t v4 = *((void *)v2 + 2);
  unint64_t v3 = *((void *)v2 + 3);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v4 + 1;
  v2[v4 + 32] = 1;
  v9[0] = v2;
  int v8 = 101777407;
  size_t v5 = specialized _copyCollectionToContiguousArray<A>(_:)((size_t)&v8, (unint64_t)v9);
  specialized Array.append<A>(contentsOf:)(v5);
  LOWORD(v8) = __rev16(a1 + 1);
  size_t v6 = specialized _copyCollectionToContiguousArray<A>(_:)((size_t)&v8, (unint64_t)&v8 + 2);
  specialized Array.append<A>(contentsOf:)(v6);
  return v9[0];
}

{
  char *v2;
  unint64_t v3;
  unint64_t v4;
  size_t v5;
  size_t v6;
  int v8;
  void v9[2];

  v9[1] = *MEMORY[0x263EF8340];
  uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 7, 0, MEMORY[0x263F8EE78]);
  unint64_t v4 = *((void *)v2 + 2);
  unint64_t v3 = *((void *)v2 + 3);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v4 + 1;
  v2[v4 + 32] = 1;
  v9[0] = v2;
  int v8 = 85000191;
  size_t v5 = specialized _copyCollectionToContiguousArray<A>(_:)((size_t)&v8, (unint64_t)v9);
  specialized Array.append<A>(contentsOf:)(v5);
  LOWORD(v8) = __rev16(a1 + 1);
  size_t v6 = specialized _copyCollectionToContiguousArray<A>(_:)((size_t)&v8, (unint64_t)&v8 + 2);
  specialized Array.append<A>(contentsOf:)(v6);
  return v9[0];
}

{
  char *v2;
  unint64_t v3;
  unint64_t v4;
  size_t v5;
  size_t v6;
  int v8;
  void v9[2];

  v9[1] = *MEMORY[0x263EF8340];
  uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 7, 0, MEMORY[0x263F8EE78]);
  unint64_t v4 = *((void *)v2 + 2);
  unint64_t v3 = *((void *)v2 + 3);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v4 + 1;
  v2[v4 + 32] = 1;
  v9[0] = v2;
  int v8 = 68222975;
  size_t v5 = specialized _copyCollectionToContiguousArray<A>(_:)((size_t)&v8, (unint64_t)v9);
  specialized Array.append<A>(contentsOf:)(v5);
  LOWORD(v8) = __rev16(a1 + 1);
  size_t v6 = specialized _copyCollectionToContiguousArray<A>(_:)((size_t)&v8, (unint64_t)&v8 + 2);
  specialized Array.append<A>(contentsOf:)(v6);
  return v9[0];
}

uint64_t specialized closure #1 in PINE.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v7 = a4(1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t result = swift_initStackObject();
  *(_OWORD *)(result + 16) = xmmword_260BF9FE0;
  unint64_t v9 = *(void *)(a2 + 320);
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v9 > 0xFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  *(unsigned char *)(result + 32) = v9;
  unint64_t v10 = *(void *)(a2 + 312);
  if ((v10 & 0x8000000000000000) != 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v10 > 0xFF)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  *(unsigned char *)(result + 33) = v10;
  if ((a3 & 0x8000000000000000) != 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (a3 <= 0xFF)
  {
    *(unsigned char *)(result + 34) = a3;
    uint64_t v11 = specialized static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(a1, v7, result);
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    return v11;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t specialized PINECircuit.truncate(measurement:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 64);
  unint64_t v4 = *(void *)(v1 + 96);
  unint64_t v5 = v4 + v3;
  if (__OFADD__(v4, v3))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v2 = a1;
  if (*(void *)(a1 + 16) != v5)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 540877088;
    v10._object = (void *)0xE400000000000000;
    String.append(_:)(v10);
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    uint64_t v8 = 0x8000000260BFEB20;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v12 = 0xD00000000000001BLL;
    *(void *)(v12 + 8) = 0x8000000260BFEB20;
    *(unsigned char *)(v12 + 16) = 2;
    swift_willThrow();
    return v8;
  }
  if ((v4 & 0x8000000000000000) != 0) {
    goto LABEL_13;
  }
  if (v5 < v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  uint64_t v6 = swift_dynamicCastClass();
  if (!v6)
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = MEMORY[0x263F8EE78];
  }
  uint64_t v7 = *(void *)(v6 + 16);
  swift_release();
  if (v7 == v4)
  {
    uint64_t v8 = swift_dynamicCastClass();
    swift_bridgeObjectRelease();
    if (!v8)
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x263F8EE78];
    }
    return v8;
  }
LABEL_15:
  swift_bridgeObjectRelease();
  specialized _copyCollectionToContiguousArray<A>(_:)(v2, v2 + 32, 0, (2 * v4) | 1);
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t specialized PINECircuit.truncate(measurement:)(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, void, uint64_t))
{
  uint64_t v5 = *(void *)(v2 + 64);
  unint64_t v6 = *(void *)(v2 + 96);
  unint64_t v7 = v6 + v5;
  if (__OFADD__(v6, v5))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v4 = a1;
  if (*(void *)(a1 + 16) != v7)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = 540877088;
    v12._object = (void *)0xE400000000000000;
    String.append(_:)(v12);
    v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    uint64_t v10 = 0x8000000260BFEB20;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v14 = 0xD00000000000001BLL;
    *(void *)(v14 + 8) = 0x8000000260BFEB20;
    *(unsigned char *)(v14 + 16) = 2;
    swift_willThrow();
    return v10;
  }
  if ((v6 & 0x8000000000000000) != 0) {
    goto LABEL_13;
  }
  if (v7 < v6)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v3 = a2;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  uint64_t v8 = swift_dynamicCastClass();
  if (!v8)
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = MEMORY[0x263F8EE78];
  }
  uint64_t v9 = *(void *)(v8 + 16);
  swift_release();
  if (v9 == v6)
  {
    uint64_t v10 = swift_dynamicCastClass();
    swift_bridgeObjectRelease();
    if (!v10)
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x263F8EE78];
    }
    return v10;
  }
LABEL_15:
  swift_bridgeObjectRelease();
  uint64_t v16 = v3(v4, v4 + 32, 0, (2 * v6) | 1);
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t specialized FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  uint64_t v14 = *((void *)v9 + 9);
  long long v15 = v9[7];
  long long v16 = v9[8];
  long long v17 = v9[5];
  long long v99 = v9[6];
  long long v100 = v15;
  long long v101 = v16;
  int v102 = *((_DWORD *)v9 + 36);
  long long v18 = v9[3];
  long long v95 = v9[2];
  long long v96 = v18;
  long long v97 = v9[4];
  long long v98 = v17;
  long long v19 = v9[1];
  long long v93 = *v9;
  long long v94 = v19;
  if (*(void *)(a2 + 16) != v14)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    unint64_t v89 = 0xD00000000000001BLL;
    unint64_t v90 = 0x8000000260BFEB20;
    v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._countAndFlagsBits = 540877088;
    v31._object = (void *)0xE400000000000000;
    String.append(_:)(v31);
    uint64_t v88 = v14;
LABEL_15:
    v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    unint64_t v40 = v90;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v41 = v89;
    *(void *)(v41 + 8) = v40;
    *(unsigned char *)(v41 + 16) = 2;
    return swift_willThrow();
  }
  unint64_t G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = a6;
  unint64_t v21 = a5;
  unint64_t v22 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  uint64_t v12 = a4;
  uint64_t v11 = a3;
  unint64_t v85 = v10;
  unint64_t v86 = a8;
  uint64_t v83 = a2;
  uint64_t v84 = a7;
  uint64_t v81 = a1;
  if (v22 != specialized FullyLinearProof.proofLength.getter())
  {
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    unint64_t v89 = 0xD000000000000015;
    unint64_t v90 = 0x8000000260BFEB40;
    v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._countAndFlagsBits = 540877088;
    v33._object = (void *)0xE400000000000000;
    String.append(_:)(v33);
    uint64_t v88 = specialized FullyLinearProof.proofLength.getter();
    goto LABEL_15;
  }
  long long v23 = *(long long *)((char *)v9 + 40);
  long long v24 = *(long long *)((char *)v9 + 24);
  long long v103 = *(long long *)((char *)v9 + 8);
  long long v104 = v24;
  long long v105 = v23;
  uint64_t v25 = *(void *)(v84 + 16);
  unint64_t v13 = *((void *)&v103 + 1);
  unint64_t v80 = v103;
  uint64_t v82 = v23;
  specialized Gadget.wirePolynomialLength.getter();
  specialized Gadget.gadgetPolynomialLength.getter();
  if (v25 != 1)
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    unint64_t v89 = 0xD000000000000019;
    unint64_t v90 = 0x8000000260BFEB60;
    uint64_t v88 = v25;
    v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 540877088;
    v35._object = (void *)0xE400000000000000;
    String.append(_:)(v35);
    specialized Gadget.wirePolynomialLength.getter();
    specialized Gadget.gadgetPolynomialLength.getter();
    uint64_t v36 = 1;
LABEL_14:
    uint64_t v88 = v36;
    goto LABEL_15;
  }
  uint64_t v26 = *(void *)(v86 + 16);
  if (v26 != 3)
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    unint64_t v89 = 0xD000000000000019;
    unint64_t v90 = 0x8000000260BFEB80;
    uint64_t v88 = v26;
    v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    v38._countAndFlagsBits = 540877088;
    v38._object = (void *)0xE400000000000000;
    String.append(_:)(v38);
    uint64_t v36 = 3;
    goto LABEL_14;
  }
  if (a9 < 1)
  {
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
    goto LABEL_105;
  }
  unint64_t v79 = a9;
  if ((G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_9:
    specialized _copyCollectionToContiguousArray<A>(_:)(v11, v12, v21, G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm);
    uint64_t v28 = v27;
    unint64_t v29 = v80;
    goto LABEL_21;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v43 = swift_dynamicCastClass();
  if (!v43)
  {
    swift_unknownObjectRelease();
    uint64_t v43 = MEMORY[0x263F8EE78];
  }
  uint64_t v44 = *(void *)(v43 + 16);
  swift_release();
  if (v44 != v22)
  {
LABEL_105:
    swift_unknownObjectRelease();
    goto LABEL_9;
  }
  uint64_t v28 = swift_dynamicCastClass();
  unint64_t v29 = v103;
  if (!v28)
  {
    swift_unknownObjectRelease();
    uint64_t v28 = MEMORY[0x263F8EE78];
  }
LABEL_21:
  swift_unknownObjectRelease();
  uint64_t v45 = (2 * *(void *)(v28 + 16)) | 1;
  unint64_t v89 = v28;
  unint64_t v90 = v28 + 32;
  uint64_t v91 = 0;
  uint64_t v92 = v45;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_260BF9FF0;
  uint64_t v47 = specialized Gadget.wirePolynomialLength.getter();
  uint64_t v48 = specialized Gadget.gadgetPolynomialLength.getter();
  *(void *)(inited + 32) = v29;
  *(void *)(inited + 40) = v13;
  *(void *)(inited + 48) = v82;
  *(void *)(inited + 56) = v47;
  *(void *)(inited + 64) = v48;
  MEMORY[0x270FA5388](v48, v49);
  unint64_t G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay4VDAF16GadgetParametersVGG_AH05QueryG0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm(inited, (void (*)(uint64_t, _OWORD *))partial apply for specialized closure #1 in FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:));
  unint64_t v50 = v85;
  swift_setDeallocating();
  if (v85) {
    return swift_unknownObjectRelease();
  }
  if (G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm >> 62)
  {
LABEL_108:
    swift_bridgeObjectRetain();
    uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v51 = *(void *)((G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm & 0xFFFFFFFFFFFFFF8)
                    + 0x10);
  }
  uint64_t v52 = MEMORY[0x263F8EE78];
  unint64_t v85 = G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm;
  unint64_t v80 = v51;
  if (v51)
  {
    uint64_t v88 = MEMORY[0x263F8EE78];
    uint64_t v53 = (char *)&v88;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v51 & ~(v51 >> 63), 0);
    if (v51 < 0)
    {
      __break(1u);
LABEL_110:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v53 + 2) + 1, 1, v53);
      uint64_t v53 = (char *)result;
      goto LABEL_40;
    }
    uint64_t v52 = v88;
    unint64_t v54 = G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm;
    if ((G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v51; ++i)
      {
        uint64_t v12 = MEMORY[0x2612245F0](i, v54);
        uint64_t v88 = v52;
        unint64_t v57 = *(void *)(v52 + 16);
        unint64_t v56 = *(void *)(v52 + 24);
        unint64_t v13 = v57 + 1;
        if (v57 >= v56 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v56 > 1), v57 + 1, 1);
          unint64_t v54 = v85;
          uint64_t v52 = v88;
        }
        *(void *)(v52 + 16) = v13;
        *(void *)(v52 + 8 * v57 + 32) = v12 | 0x4000000000000000;
      }
    }
    else
    {
      uint64_t v58 = (uint64_t *)(G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm
                      + 32);
      unint64_t v13 = *(void *)(v88 + 16);
      do
      {
        uint64_t v12 = *v58;
        uint64_t v88 = v52;
        unint64_t v59 = *(void *)(v52 + 24);
        swift_retain();
        if (v13 >= v59 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v59 > 1), v13 + 1, 1);
          uint64_t v52 = v88;
        }
        *(void *)(v52 + 16) = v13 + 1;
        *(void *)(v52 + 8 * v13 + 32) = v12 | 0x4000000000000000;
        ++v58;
        ++v13;
        --v51;
      }
      while (v51);
    }
  }
  long long v112 = v99;
  long long v113 = v100;
  long long v114 = v101;
  int v115 = v102;
  long long v108 = v95;
  long long v109 = v96;
  long long v110 = v97;
  long long v111 = v98;
  long long v106 = v93;
  long long v107 = v94;
  specialized PINEMainCircuit.evaluate(measurement:jointRand:numOfShares:for:)(v83, v86, v79, v52, &v116);
  swift_bridgeObjectRelease();
  LODWORD(G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm) = v116;
  uint64_t v53 = *v81;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_110;
  }
LABEL_40:
  unint64_t v21 = v80;
  unint64_t v61 = *((void *)v53 + 2);
  unint64_t v60 = *((void *)v53 + 3);
  uint64_t v11 = v61 + 1;
  if (v61 >= v60 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v60 > 1), v61 + 1, 1, v53);
    uint64_t v53 = (char *)result;
  }
  *((void *)v53 + 2) = v11;
  *(_DWORD *)&v53[4 * v61 + 32] = G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm;
  *uint64_t v81 = v53;
  if ((v80 & 0x8000000000000000) == 0)
  {
    if (v80)
    {
      unint64_t G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = 0;
      unint64_t v86 = v85 & 0xC000000000000001;
      unint64_t v78 = v50;
      uint64_t v83 = v85 + 32;
      while (1)
      {
        if (G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm == v21) {
          goto LABEL_98;
        }
        if (v86)
        {
          uint64_t v62 = MEMORY[0x2612245F0](G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm, v85);
        }
        else
        {
          if (G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm >= *(void *)((v85 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_107:
            __break(1u);
            goto LABEL_108;
          }
          uint64_t v62 = swift_retain();
        }
        uint64_t v11 = *(void *)(v62 + 72);
        swift_release();
        if (__OFADD__(v11, 1)) {
          goto LABEL_99;
        }
        if (v11 + 1 < 0) {
          goto LABEL_100;
        }
        uint64_t v63 = 1 << -(char)__clz(v11);
        if (v11 == -1) {
          uint64_t v12 = 1;
        }
        else {
          uint64_t v12 = v63;
        }
        if (G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm) {
          goto LABEL_101;
        }
        unint64_t v79 = 0;
        LODWORD(v82) = *(_DWORD *)(v84 + 32);
        if (!v86) {
          break;
        }
        unint64_t G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = *(void *)(MEMORY[0x2612245F0](0, v85) + 56);
        swift_unknownObjectRelease();
        if ((G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm & 0x8000000000000000) != 0) {
          goto LABEL_103;
        }
        if (G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm) {
          goto LABEL_62;
        }
LABEL_86:
        unint64_t v21 = v80;
        int v75 = *(_DWORD *)(MEMORY[0x2612245F0](0, v85) + 32);
        swift_unknownObjectRelease();
LABEL_89:
        unint64_t v77 = *((void *)v53 + 2);
        unint64_t v76 = *((void *)v53 + 3);
        uint64_t v11 = v77 + 1;
        if (v77 >= v76 >> 1) {
          uint64_t v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v76 > 1), v77 + 1, 1, v53);
        }
        *((void *)v53 + 2) = v11;
        *(_DWORD *)&v53[4 * v77 + 32] = v75;
        unint64_t G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = 1;
        if (v21 == 1)
        {
          swift_bridgeObjectRelease();
          *uint64_t v81 = v53;
          return swift_unknownObjectRelease();
        }
      }
      uint64_t v64 = *(void *)v83;
      unint64_t G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = *(void *)(*(void *)v83 + 56);
      if ((G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm & 0x8000000000000000) != 0) {
        goto LABEL_107;
      }
      if (G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm)
      {
LABEL_62:
        if (v12 < 0) {
          goto LABEL_104;
        }
        unint64_t v65 = 0;
        uint64_t v11 = 4 * v12;
        do
        {
          if (v86)
          {
            uint64_t v66 = MEMORY[0x2612245F0](0, v85);
          }
          else
          {
            uint64_t v66 = *(void *)v83;
            swift_retain();
          }
          swift_beginAccess();
          uint64_t v67 = *(void *)(v66 + 16);
          if (v65 >= *(void *)(v67 + 16))
          {
            __break(1u);
LABEL_94:
            __break(1u);
LABEL_95:
            __break(1u);
LABEL_96:
            __break(1u);
            goto LABEL_97;
          }
          unint64_t v13 = *(void *)(v67 + 8 * v65 + 32);
          swift_bridgeObjectRetain();
          swift_release();
          uint64_t v68 = *(void *)(v13 + 16);
          if (v12 < v68 || v68 == 0) {
            goto LABEL_94;
          }
          uint64_t v70 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          *(void *)(v70 + 16) = v12;
          bzero((void *)(v70 + 32), 4 * v12);
          uint64_t v87 = (char *)v70;
          specialized inverseDiscreteFourierTransform<A, B, C>(input:size:output:)(v13, v12, &v87);
          unsigned int v71 = v87;
          unint64_t v21 = *((void *)v87 + 2);
          swift_bridgeObjectRelease();
          if (!v21) {
            goto LABEL_95;
          }
          uint64_t v72 = *((void *)v71 + 2);
          if (!v72) {
            goto LABEL_96;
          }
          ++v65;
          while (!*(_DWORD *)&v71[4 * v72 + 28])
          {
            if ((unint64_t)v72-- <= 1) {
              goto LABEL_80;
            }
          }
          if (v72 > 0)
          {
            specialized evaluateUsingHorner<A, B>(_:atInput:)((uint64_t)v71, v82, &v87);
            swift_bridgeObjectRelease();
            int v73 = (int)v87;
            goto LABEL_81;
          }
LABEL_80:
          swift_bridgeObjectRelease();
          int v73 = 0;
          LODWORD(v87) = 0;
LABEL_81:
          unint64_t v21 = *((void *)v53 + 2);
          unint64_t v74 = *((void *)v53 + 3);
          unint64_t v13 = v21 + 1;
          if (v21 >= v74 >> 1) {
            uint64_t v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v74 > 1), v21 + 1, 1, v53);
          }
          *((void *)v53 + 2) = v13;
          *(_DWORD *)&v53[4 * v21 + 32] = v73;
        }
        while (v65 != G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm);
        if (v86)
        {
          unint64_t v50 = v78;
          goto LABEL_86;
        }
        uint64_t v64 = *(void *)v83;
        unint64_t v50 = v78;
      }
      unint64_t v21 = v80;
      int v75 = *(_DWORD *)(v64 + 32);
      goto LABEL_89;
    }
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  __break(1u);
  return result;
}

{
  long long *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  long long v14;
  long long v15;
  long long v16;
  unint64_t G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm;
  unint64_t v18;
  unint64_t v19;
  long long v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t inited;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t i;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char **v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  long long v90;
  long long v91;
  long long v92;
  long long v93;
  long long v94;
  long long v95;
  long long v96;
  long long v97;
  long long v98;
  long long v99;
  long long v100;
  long long v101;
  long long v102;
  long long v103;
  long long v104;
  unint64_t v105;

  unint64_t v13 = *(void *)v9;
  uint64_t v14 = v9[3];
  uint64_t v92 = v9[2];
  long long v93 = v14;
  long long v15 = v9[5];
  long long v94 = v9[4];
  long long v95 = v15;
  long long v16 = v9[1];
  unint64_t v90 = *v9;
  uint64_t v91 = v16;
  if (*(void *)(a2 + 16) != v13)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    unint64_t v86 = 0xD00000000000001BLL;
    uint64_t v87 = 0x8000000260BFEB20;
    v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = 540877088;
    v27._object = (void *)0xE400000000000000;
    String.append(_:)(v27);
    unint64_t v85 = v13;
LABEL_14:
    v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    Swift::String v35 = v87;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v36 = v86;
    *(void *)(v36 + 8) = v35;
    *(unsigned char *)(v36 + 16) = 2;
    return swift_willThrow();
  }
  unint64_t G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = a6;
  long long v18 = a5;
  long long v19 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  uint64_t v12 = a4;
  uint64_t v11 = a3;
  uint64_t v82 = v10;
  uint64_t v83 = a8;
  unint64_t v80 = a2;
  uint64_t v81 = a7;
  unint64_t v78 = a1;
  if (v19 != specialized FullyLinearProof.proofLength.getter())
  {
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    unint64_t v86 = 0xD000000000000015;
    uint64_t v87 = 0x8000000260BFEB40;
    v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = 540877088;
    v29._object = (void *)0xE400000000000000;
    String.append(_:)(v29);
    unint64_t v85 = specialized FullyLinearProof.proofLength.getter();
    goto LABEL_14;
  }
  unint64_t v20 = v9[5];
  long long v97 = v9[4];
  long long v98 = v20;
  long long v96 = v9[3];
  unint64_t v21 = *(void *)(v81 + 16);
  unint64_t v79 = *((void *)&v96 + 1);
  unint64_t v76 = v96;
  unint64_t v77 = v20;
  specialized Gadget.wirePolynomialLength.getter();
  specialized Gadget.gadgetPolynomialLength.getter();
  if (v21 != 1)
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    unint64_t v86 = 0xD000000000000019;
    uint64_t v87 = 0x8000000260BFEB60;
    v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._countAndFlagsBits = 540877088;
    v31._object = (void *)0xE400000000000000;
    String.append(_:)(v31);
    specialized Gadget.wirePolynomialLength.getter();
    specialized Gadget.gadgetPolynomialLength.getter();
    unint64_t v85 = 1;
    goto LABEL_14;
  }
  unint64_t v22 = *((void *)v9 + 2);
  if (*(void *)(v83 + 16) != v22)
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    unint64_t v86 = 0xD000000000000019;
    uint64_t v87 = 0x8000000260BFEB80;
    v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._countAndFlagsBits = 540877088;
    v33._object = (void *)0xE400000000000000;
    String.append(_:)(v33);
    unint64_t v85 = v22;
    goto LABEL_14;
  }
  if (a9 < 1)
  {
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
    goto LABEL_104;
  }
  int v75 = a9;
  if ((G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_9:
    specialized _copyCollectionToContiguousArray<A>(_:)(v11, v12, v18, G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm);
    long long v24 = v23;
    uint64_t v25 = v76;
    goto LABEL_20;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  Swift::String v38 = swift_dynamicCastClass();
  if (!v38)
  {
    swift_unknownObjectRelease();
    Swift::String v38 = MEMORY[0x263F8EE78];
  }
  Swift::String v39 = *(void *)(v38 + 16);
  swift_release();
  if (v39 != v19)
  {
LABEL_104:
    swift_unknownObjectRelease();
    goto LABEL_9;
  }
  long long v24 = swift_dynamicCastClass();
  uint64_t v25 = v96;
  if (!v24)
  {
    swift_unknownObjectRelease();
    long long v24 = MEMORY[0x263F8EE78];
  }
LABEL_20:
  swift_unknownObjectRelease();
  unint64_t v40 = (2 * *(void *)(v24 + 16)) | 1;
  unint64_t v86 = v24;
  uint64_t v87 = v24 + 32;
  uint64_t v88 = 0;
  unint64_t v89 = v40;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_260BF9FF0;
  unint64_t v42 = specialized Gadget.wirePolynomialLength.getter();
  uint64_t v43 = specialized Gadget.gadgetPolynomialLength.getter();
  *(void *)(inited + 32) = v25;
  *(void *)(inited + 40) = v79;
  *(void *)(inited + 48) = v77;
  *(void *)(inited + 56) = v42;
  *(void *)(inited + 64) = v43;
  MEMORY[0x270FA5388](v43, v44);
  unint64_t G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay4VDAF16GadgetParametersVGG_AH05QueryG0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm(inited, (void (*)(uint64_t, _OWORD *))partial apply for specialized closure #1 in FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:));
  uint64_t v45 = v82;
  swift_setDeallocating();
  if (v82) {
    return swift_unknownObjectRelease();
  }
  if (G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm >> 62)
  {
LABEL_107:
    swift_bridgeObjectRetain();
    unint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v46 = *(void *)((G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm & 0xFFFFFFFFFFFFFF8)
                    + 0x10);
  }
  uint64_t v47 = MEMORY[0x263F8EE78];
  uint64_t v82 = G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm;
  unint64_t v77 = v46;
  if (v46)
  {
    unint64_t v85 = MEMORY[0x263F8EE78];
    uint64_t v48 = (char *)&v85;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v46 & ~(v46 >> 63), 0);
    if (v46 < 0)
    {
      __break(1u);
LABEL_109:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v48 + 2) + 1, 1, v48, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
      uint64_t v48 = (char *)result;
      goto LABEL_39;
    }
    uint64_t v47 = v85;
    uint64_t v49 = G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm;
    if ((G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v46; ++i)
      {
        uint64_t v12 = MEMORY[0x2612245F0](i, v49);
        unint64_t v85 = v47;
        uint64_t v52 = *(void *)(v47 + 16);
        uint64_t v51 = *(void *)(v47 + 24);
        if (v52 >= v51 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v51 > 1), v52 + 1, 1);
          uint64_t v49 = v82;
          uint64_t v47 = v85;
        }
        *(void *)(v47 + 16) = v52 + 1;
        *(void *)(v47 + 8 * v52 + 32) = v12 | 0x4000000000000000;
      }
    }
    else
    {
      uint64_t v53 = (uint64_t *)(G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm
                      + 32);
      unint64_t v54 = *(void *)(v85 + 16);
      do
      {
        uint64_t v12 = *v53;
        unint64_t v85 = v47;
        unint64_t v55 = *(void *)(v47 + 24);
        swift_retain();
        if (v54 >= v55 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v55 > 1), v54 + 1, 1);
          uint64_t v47 = v85;
        }
        *(void *)(v47 + 16) = v54 + 1;
        *(void *)(v47 + 8 * v54 + 32) = v12 | 0x4000000000000000;
        ++v53;
        ++v54;
        --v46;
      }
      while (v46);
    }
  }
  long long v101 = v92;
  int v102 = v93;
  long long v103 = v94;
  long long v104 = v95;
  long long v99 = v90;
  long long v100 = v91;
  specialized SumVectorType.evaluate(measurement:jointRand:numOfShares:for:)(v80, v83, v75, v47, &v105);
  swift_bridgeObjectRelease();
  unint64_t G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = v105;
  uint64_t v48 = *v78;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_109;
  }
LABEL_39:
  long long v18 = v77;
  unint64_t v57 = *((void *)v48 + 2);
  unint64_t v56 = *((void *)v48 + 3);
  uint64_t v11 = v57 + 1;
  if (v57 >= v56 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v56 > 1), v57 + 1, 1, v48, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
    uint64_t v48 = (char *)result;
  }
  *((void *)v48 + 2) = v11;
  *(void *)&v48[8 * v57 + 32] = G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm;
  *unint64_t v78 = v48;
  if ((v77 & 0x8000000000000000) == 0)
  {
    if (v77)
    {
      unint64_t G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = 0;
      uint64_t v83 = v82 & 0xC000000000000001;
      int v75 = v45;
      unint64_t v80 = v82 + 32;
      while (1)
      {
        if (G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm == v18) {
          goto LABEL_97;
        }
        if (v83)
        {
          uint64_t v58 = MEMORY[0x2612245F0](G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm, v82);
        }
        else
        {
          if (G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm >= *(void *)((v82 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_106:
            __break(1u);
            goto LABEL_107;
          }
          uint64_t v58 = swift_retain();
        }
        uint64_t v11 = *(void *)(v58 + 72);
        swift_release();
        if (__OFADD__(v11, 1)) {
          goto LABEL_98;
        }
        if (v11 + 1 < 0) {
          goto LABEL_99;
        }
        unint64_t v59 = 1 << -(char)__clz(v11);
        if (v11 == -1) {
          uint64_t v12 = 1;
        }
        else {
          uint64_t v12 = v59;
        }
        if (G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm) {
          goto LABEL_100;
        }
        unint64_t v76 = 0;
        unint64_t v79 = *(void *)(v81 + 32);
        if (!v83) {
          break;
        }
        unint64_t G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = *(void *)(MEMORY[0x2612245F0](0, v82) + 56);
        swift_unknownObjectRelease();
        if ((G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm & 0x8000000000000000) != 0) {
          goto LABEL_102;
        }
        if (G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm) {
          goto LABEL_61;
        }
LABEL_85:
        long long v18 = v77;
        uint64_t v72 = *(void *)(MEMORY[0x2612245F0](0, v82) + 32);
        swift_unknownObjectRelease();
LABEL_88:
        unint64_t v74 = *((void *)v48 + 2);
        int v73 = *((void *)v48 + 3);
        uint64_t v11 = v74 + 1;
        if (v74 >= v73 >> 1) {
          uint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v73 > 1), v74 + 1, 1, v48, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
        }
        *((void *)v48 + 2) = v11;
        *(void *)&v48[8 * v74 + 32] = v72;
        unint64_t G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = 1;
        if (v18 == 1)
        {
          swift_bridgeObjectRelease();
          *unint64_t v78 = v48;
          return swift_unknownObjectRelease();
        }
      }
      unint64_t v60 = *(void *)v80;
      unint64_t G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = *(void *)(*(void *)v80 + 56);
      if ((G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm & 0x8000000000000000) != 0) {
        goto LABEL_106;
      }
      if (G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm)
      {
LABEL_61:
        if (v12 < 0) {
          goto LABEL_103;
        }
        unint64_t v61 = 0;
        uint64_t v11 = 8 * v12;
        do
        {
          if (v83)
          {
            uint64_t v62 = MEMORY[0x2612245F0](0, v82);
          }
          else
          {
            uint64_t v62 = *(void *)v80;
            swift_retain();
          }
          swift_beginAccess();
          uint64_t v63 = *(void *)(v62 + 16);
          if (v61 >= *(void *)(v63 + 16))
          {
            __break(1u);
LABEL_93:
            __break(1u);
LABEL_94:
            __break(1u);
LABEL_95:
            __break(1u);
            goto LABEL_96;
          }
          uint64_t v64 = *(void *)(v63 + 8 * v61 + 32);
          swift_bridgeObjectRetain();
          swift_release();
          unint64_t v65 = *(void *)(v64 + 16);
          if (v12 < v65 || v65 == 0) {
            goto LABEL_93;
          }
          uint64_t v67 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          *(void *)(v67 + 16) = v12;
          bzero((void *)(v67 + 32), 8 * v12);
          uint64_t v84 = (char *)v67;
          specialized inverseDiscreteFourierTransform<A, B, C>(input:size:output:)(v64, v12, &v84);
          uint64_t v68 = v84;
          long long v18 = *((void *)v84 + 2);
          swift_bridgeObjectRelease();
          if (!v18) {
            goto LABEL_94;
          }
          unint64_t v69 = *((void *)v68 + 2);
          if (!v69) {
            goto LABEL_95;
          }
          ++v61;
          while (!*(void *)&v68[8 * v69 + 24])
          {
            if ((unint64_t)v69-- <= 1) {
              goto LABEL_79;
            }
          }
          if (v69 > 0)
          {
            specialized evaluateUsingHorner<A, B>(_:atInput:)((uint64_t)v68, v79, (unint64_t *)&v84);
            swift_bridgeObjectRelease();
            uint64_t v70 = v84;
            goto LABEL_80;
          }
LABEL_79:
          swift_bridgeObjectRelease();
          uint64_t v70 = 0;
          uint64_t v84 = 0;
LABEL_80:
          long long v18 = *((void *)v48 + 2);
          unsigned int v71 = *((void *)v48 + 3);
          if (v18 >= v71 >> 1) {
            uint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v71 > 1), v18 + 1, 1, v48, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
          }
          *((void *)v48 + 2) = v18 + 1;
          *(void *)&v48[8 * v18 + 32] = v70;
        }
        while (v61 != G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm);
        if (v83)
        {
          uint64_t v45 = v75;
          goto LABEL_85;
        }
        unint64_t v60 = *(void *)v80;
        uint64_t v45 = v75;
      }
      long long v18 = v77;
      uint64_t v72 = *(void *)(v60 + 32);
      goto LABEL_88;
    }
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t specialized FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(char **a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  unint64_t v13 = *((void *)v9 + 9);
  long long v14 = v9[7];
  long long v15 = v9[8];
  long long v16 = v9[5];
  long long v93 = v9[6];
  long long v94 = v14;
  long long v95 = v15;
  int v96 = *((_DWORD *)v9 + 36);
  long long v17 = v9[3];
  long long v89 = v9[2];
  long long v90 = v17;
  long long v91 = v9[4];
  long long v92 = v16;
  long long v18 = v9[1];
  long long v87 = *v9;
  long long v88 = v18;
  if (*(void *)(a2 + 16) != v13)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    unint64_t v83 = 0xD00000000000001BLL;
    unint64_t v84 = 0x8000000260BFEB20;
    v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = 540877088;
    v27._object = (void *)0xE400000000000000;
    String.append(_:)(v27);
    uint64_t v82 = v13;
    goto LABEL_10;
  }
  unint64_t v19 = a6;
  uint64_t v20 = a5;
  unint64_t v21 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
    goto LABEL_105;
  }
  uint64_t v11 = a4;
  uint64_t v12 = a3;
  unint64_t v13 = v10;
  int v75 = a1;
  uint64_t v76 = a2;
  uint64_t v79 = a7;
  unint64_t v80 = a8;
  if (v21 != specialized FullyLinearProof.proofLength.getter())
  {
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    unint64_t v83 = 0xD000000000000015;
    unint64_t v84 = 0x8000000260BFEB40;
    v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = 540877088;
    v29._object = (void *)0xE400000000000000;
    String.append(_:)(v29);
    uint64_t v82 = specialized FullyLinearProof.proofLength.getter();
    goto LABEL_10;
  }
  long long v22 = *(long long *)((char *)v9 + 24);
  long long v97 = *(long long *)((char *)v9 + 8);
  long long v98 = v22;
  long long v99 = *(long long *)((char *)v9 + 40);
  uint64_t v23 = *(void *)(v79 + 16);
  specialized Gadget.wirePolynomialLength.getter();
  specialized Gadget.gadgetPolynomialLength.getter();
  if (v23 != 1)
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    unint64_t v83 = 0xD000000000000019;
    unint64_t v84 = 0x8000000260BFEB60;
    v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._countAndFlagsBits = 540877088;
    v31._object = (void *)0xE400000000000000;
    String.append(_:)(v31);
    specialized Gadget.wirePolynomialLength.getter();
    specialized Gadget.gadgetPolynomialLength.getter();
    uint64_t v82 = 1;
    goto LABEL_10;
  }
  if (*(void *)(v80 + 16))
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    unint64_t v83 = 0xD000000000000019;
    unint64_t v84 = 0x8000000260BFEB80;
    v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._countAndFlagsBits = 540877088;
    v25._object = (void *)0xE400000000000000;
    String.append(_:)(v25);
    uint64_t v82 = 0;
LABEL_10:
    v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    unint64_t v33 = v84;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v34 = v83;
    *(void *)(v34 + 8) = v33;
    *(unsigned char *)(v34 + 16) = 2;
    return swift_willThrow();
  }
  if (a9 < 1) {
    goto LABEL_102;
  }
  if ((v19 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_14:
    specialized _copyCollectionToContiguousArray<A>(_:)(v12, (uint64_t)v11, v20, v19);
    uint64_t v37 = v36;
    goto LABEL_20;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v38 = swift_dynamicCastClass();
  if (!v38)
  {
    swift_unknownObjectRelease();
    uint64_t v38 = MEMORY[0x263F8EE78];
  }
  uint64_t v39 = *(void *)(v38 + 16);
  swift_release();
  if (v39 != v21)
  {
LABEL_105:
    swift_unknownObjectRelease();
    goto LABEL_14;
  }
  uint64_t v37 = swift_dynamicCastClass();
  if (!v37)
  {
    swift_unknownObjectRelease();
    uint64_t v37 = MEMORY[0x263F8EE78];
  }
LABEL_20:
  swift_unknownObjectRelease();
  long long v77 = v97;
  uint64_t v40 = *((void *)&v98 + 1);
  uint64_t v41 = (2 * *(void *)(v37 + 16)) | 1;
  unint64_t v83 = v37;
  unint64_t v84 = v37 + 32;
  uint64_t v85 = 0;
  uint64_t v86 = v41;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_260BF9FF0;
  uint64_t v43 = specialized Gadget.wirePolynomialLength.getter();
  uint64_t v44 = specialized Gadget.gadgetPolynomialLength.getter();
  *(_OWORD *)(inited + 32) = v77;
  *(void *)(inited + 48) = v40;
  *(void *)(inited + 56) = v43;
  *(void *)(inited + 64) = v44;
  MEMORY[0x270FA5388](v44, v45);
  unint64_t G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay4VDAF16GadgetParametersVGG_AH05QueryG0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm(inited, (void (*)(uint64_t, _OWORD *))partial apply for specialized closure #1 in FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:));
  unint64_t v47 = v13;
  swift_setDeallocating();
  if (v13) {
    return swift_unknownObjectRelease();
  }
  uint64_t v48 = (char *)G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm;
  if (G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm >> 62)
  {
LABEL_108:
    swift_bridgeObjectRetain();
    uint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v49 = *(void *)((G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm & 0xFFFFFFFFFFFFFF8)
                    + 0x10);
  }
  uint64_t v12 = MEMORY[0x263F8EE78];
  unint64_t v78 = v48;
  uint64_t v73 = v49;
  if (v49)
  {
    uint64_t v82 = MEMORY[0x263F8EE78];
    uint64_t v48 = (char *)&v82;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49 & ~(v49 >> 63), 0);
    if (v49 < 0)
    {
      __break(1u);
LABEL_110:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v48 + 2) + 1, 1, v48);
      uint64_t v48 = (char *)result;
      goto LABEL_40;
    }
    uint64_t v12 = v82;
    unint64_t v50 = v78;
    if (((unint64_t)v78 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v49; ++i)
      {
        uint64_t v20 = MEMORY[0x2612245F0](i, v50);
        uint64_t v82 = v12;
        unint64_t v53 = *(void *)(v12 + 16);
        unint64_t v52 = *(void *)(v12 + 24);
        if (v53 >= v52 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v52 > 1), v53 + 1, 1);
          unint64_t v50 = v78;
          uint64_t v12 = v82;
        }
        *(void *)(v12 + 16) = v53 + 1;
        *(void *)(v12 + 8 * v53 + 32) = v20 | 0x4000000000000000;
      }
    }
    else
    {
      unint64_t v54 = (uint64_t *)(v78 + 32);
      unint64_t v55 = *(void *)(v82 + 16);
      do
      {
        uint64_t v20 = *v54;
        uint64_t v82 = v12;
        unint64_t v56 = *(void *)(v12 + 24);
        swift_retain();
        if (v55 >= v56 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v56 > 1), v55 + 1, 1);
          uint64_t v12 = v82;
        }
        *(void *)(v12 + 16) = v55 + 1;
        *(void *)(v12 + 8 * v55 + 32) = v20 | 0x4000000000000000;
        ++v54;
        ++v55;
        --v49;
      }
      while (v49);
    }
    uint64_t v49 = v73;
  }
  long long v106 = v93;
  long long v107 = v94;
  long long v108 = v95;
  int v109 = v96;
  long long v102 = v89;
  long long v103 = v90;
  long long v104 = v91;
  long long v105 = v92;
  long long v100 = v87;
  long long v101 = v88;
  specialized PINENormEqualityCheckCircuit.evaluate(measurement:jointRand:numOfShares:for:)(v76, v80, v12, &v110);
  swift_bridgeObjectRelease();
  uint64_t v12 = v110;
  uint64_t v48 = *v75;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_110;
  }
LABEL_40:
  unint64_t v19 = *((void *)v48 + 2);
  unint64_t v57 = *((void *)v48 + 3);
  uint64_t v11 = (char *)(v19 + 1);
  if (v19 >= v57 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v57 > 1), v19 + 1, 1, v48);
    uint64_t v48 = (char *)result;
  }
  *((void *)v48 + 2) = v11;
  *(_DWORD *)&v48[4 * v19 + 32] = v12;
  *int v75 = v48;
  if ((v49 & 0x8000000000000000) == 0)
  {
    if (v49)
    {
      unint64_t v13 = 0;
      unint64_t v80 = (unint64_t)v78 & 0xC000000000000001;
      unint64_t v72 = v47;
      uint64_t v76 = (uint64_t)(v78 + 32);
      while (1)
      {
        if (v13 == v49) {
          goto LABEL_98;
        }
        if (v80)
        {
          uint64_t v58 = MEMORY[0x2612245F0](v13, v78);
        }
        else
        {
          if (v13 >= *(void *)(((unint64_t)v78 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_107:
            __break(1u);
            goto LABEL_108;
          }
          uint64_t v58 = swift_retain();
        }
        uint64_t v11 = *(char **)(v58 + 72);
        swift_release();
        if (__OFADD__(v11, 1)) {
          goto LABEL_99;
        }
        if (((unint64_t)(v11 + 1) & 0x8000000000000000) != 0) {
          goto LABEL_100;
        }
        uint64_t v59 = 1 << -(char)__clz((unint64_t)v11);
        if (v11 == (char *)-1) {
          uint64_t v20 = 1;
        }
        else {
          uint64_t v20 = v59;
        }
        if (v13) {
          goto LABEL_101;
        }
        unsigned int v74 = *(_DWORD *)(v79 + 32);
        if (!v80) {
          break;
        }
        uint64_t v12 = *(void *)(MEMORY[0x2612245F0](0, v78) + 56);
        swift_unknownObjectRelease();
        if (v12 < 0) {
          goto LABEL_103;
        }
        if (v12) {
          goto LABEL_62;
        }
LABEL_86:
        uint64_t v12 = *(unsigned int *)(MEMORY[0x2612245F0](0, v78) + 32);
        swift_unknownObjectRelease();
LABEL_89:
        unint64_t v19 = *((void *)v48 + 2);
        unint64_t v71 = *((void *)v48 + 3);
        uint64_t v11 = (char *)(v19 + 1);
        if (v19 >= v71 >> 1) {
          uint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v71 > 1), v19 + 1, 1, v48);
        }
        ++v13;
        *((void *)v48 + 2) = v11;
        *(_DWORD *)&v48[4 * v19 + 32] = v12;
        if (v13 == v49)
        {
          swift_bridgeObjectRelease();
          *int v75 = v48;
          return swift_unknownObjectRelease();
        }
      }
      unint64_t v60 = *(char **)v76;
      uint64_t v12 = *(void *)(*(void *)v76 + 56);
      if (v12 < 0) {
        goto LABEL_107;
      }
      if (v12)
      {
LABEL_62:
        if (v20 < 0) {
          goto LABEL_104;
        }
        unint64_t v19 = 0;
        unint64_t v13 = 4 * v20;
        do
        {
          if (v80)
          {
            uint64_t v11 = (char *)MEMORY[0x2612245F0](0, v78);
          }
          else
          {
            uint64_t v11 = *(char **)v76;
            swift_retain();
          }
          swift_beginAccess();
          uint64_t v61 = *((void *)v11 + 2);
          if (v19 >= *(void *)(v61 + 16))
          {
            __break(1u);
LABEL_94:
            __break(1u);
LABEL_95:
            __break(1u);
LABEL_96:
            __break(1u);
            goto LABEL_97;
          }
          uint64_t v62 = *(void *)(v61 + 8 * v19 + 32);
          swift_bridgeObjectRetain();
          swift_release();
          uint64_t v63 = *(void *)(v62 + 16);
          if (v20 < v63 || v63 == 0) {
            goto LABEL_94;
          }
          uint64_t v65 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          *(void *)(v65 + 16) = v20;
          bzero((void *)(v65 + 32), 4 * v20);
          uint64_t v81 = (char *)v65;
          specialized inverseDiscreteFourierTransform<A, B, C>(input:size:output:)(v62, v20, &v81);
          uint64_t v11 = v81;
          uint64_t v66 = *((void *)v81 + 2);
          swift_bridgeObjectRelease();
          if (!v66) {
            goto LABEL_95;
          }
          uint64_t v67 = *((void *)v11 + 2);
          if (!v67) {
            goto LABEL_96;
          }
          ++v19;
          while (!*(_DWORD *)&v11[4 * v67 + 28])
          {
            if ((unint64_t)v67-- <= 1) {
              goto LABEL_80;
            }
          }
          if (v67 > 0)
          {
            specialized evaluateUsingHorner<A, B>(_:atInput:)((uint64_t)v11, v74, &v81);
            swift_bridgeObjectRelease();
            int v68 = (int)v81;
            goto LABEL_81;
          }
LABEL_80:
          swift_bridgeObjectRelease();
          int v68 = 0;
          LODWORD(v81) = 0;
LABEL_81:
          unint64_t v70 = *((void *)v48 + 2);
          unint64_t v69 = *((void *)v48 + 3);
          if (v70 >= v69 >> 1) {
            uint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v69 > 1), v70 + 1, 1, v48);
          }
          *((void *)v48 + 2) = v70 + 1;
          *(_DWORD *)&v48[4 * v70 + 32] = v68;
        }
        while (v19 != v12);
        unint64_t v13 = 0;
        if (v80)
        {
          unint64_t v47 = v72;
          uint64_t v49 = v73;
          goto LABEL_86;
        }
        unint64_t v60 = *(char **)v76;
        unint64_t v47 = v72;
        uint64_t v49 = v73;
      }
      uint64_t v12 = *((unsigned int *)v60 + 8);
      goto LABEL_89;
    }
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t specialized FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(char **a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t (*a10)(void), uint64_t (*a11)(uint64_t, unint64_t, uint64_t, uint64_t), void (*a12)(uint64_t, _OWORD *), void (*a13)(BOOL, uint64_t, uint64_t), void (*a14)(uint64_t *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t), uint64_t *a15, uint64_t a16, void (*a17)(void, void, void), void (*a18)(uint64_t, _OWORD *))
{
  uint64_t v23 = *((void *)v18 + 9);
  long long v24 = v18[7];
  long long v25 = v18[8];
  long long v26 = v18[5];
  long long v112 = v18[6];
  long long v113 = v24;
  long long v114 = v25;
  uint64_t v115 = *((void *)v18 + 18);
  long long v27 = v18[3];
  long long v108 = v18[2];
  long long v109 = v27;
  long long v110 = v18[4];
  long long v111 = v26;
  long long v28 = v18[1];
  long long v106 = *v18;
  long long v107 = v28;
  if (*(void *)(a2 + 16) != v23)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    unint64_t v102 = 0xD00000000000001BLL;
    unint64_t v103 = 0x8000000260BFEB20;
    v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    v40._countAndFlagsBits = 540877088;
    v40._object = (void *)0xE400000000000000;
    String.append(_:)(v40);
    uint64_t v101 = v23;
LABEL_15:
    v48._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    unint64_t v49 = v103;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v50 = v102;
    *(void *)(v50 + 8) = v49;
    *(unsigned char *)(v50 + 16) = 2;
    return swift_willThrow();
  }
  uint64_t v29 = a6;
  uint64_t v30 = a5;
  unint64_t v31 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
    goto LABEL_104;
  }
  unint64_t v21 = a4;
  uint64_t v20 = a3;
  uint64_t v97 = a2;
  long long v98 = v19;
  unint64_t v99 = a8;
  long long v93 = a1;
  uint64_t v95 = a7;
  if (v31 != a10())
  {
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    unint64_t v102 = 0xD000000000000015;
    unint64_t v103 = 0x8000000260BFEB40;
    v41._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    v42._countAndFlagsBits = 540877088;
    v42._object = (void *)0xE400000000000000;
    String.append(_:)(v42);
    uint64_t v101 = a10();
    goto LABEL_15;
  }
  long long v32 = *(long long *)((char *)v18 + 40);
  long long v33 = *(long long *)((char *)v18 + 24);
  long long v116 = *(long long *)((char *)v18 + 8);
  long long v117 = v33;
  long long v118 = v32;
  uint64_t v34 = *(void *)(v95 + 16);
  long long v22 = (char *)*((void *)&v116 + 1);
  long long v94 = (uint64_t *)v116;
  unint64_t v96 = v32;
  specialized Gadget.wirePolynomialLength.getter();
  specialized Gadget.gadgetPolynomialLength.getter();
  if (v34 != 1)
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    unint64_t v102 = 0xD000000000000019;
    unint64_t v103 = 0x8000000260BFEB60;
    uint64_t v101 = v34;
    v43._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    v44._countAndFlagsBits = 540877088;
    v44._object = (void *)0xE400000000000000;
    String.append(_:)(v44);
    specialized Gadget.wirePolynomialLength.getter();
    specialized Gadget.gadgetPolynomialLength.getter();
    uint64_t v45 = 1;
LABEL_14:
    uint64_t v101 = v45;
    goto LABEL_15;
  }
  uint64_t v35 = *(void *)(v99 + 16);
  if (v35 != 3)
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    unint64_t v102 = 0xD000000000000019;
    unint64_t v103 = 0x8000000260BFEB80;
    uint64_t v101 = v35;
    v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    v47._countAndFlagsBits = 540877088;
    v47._object = (void *)0xE400000000000000;
    String.append(_:)(v47);
    uint64_t v45 = 3;
    goto LABEL_14;
  }
  if (a9 < 1)
  {
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
    goto LABEL_107;
  }
  uint64_t v92 = a9;
  uint64_t v36 = a12;
  if ((v29 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_9:
    uint64_t v37 = a11(v20, v21, v30, v29);
    uint64_t v38 = v94;
    goto LABEL_21;
  }
  long long v91 = a12;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v52 = swift_dynamicCastClass();
  if (!v52)
  {
    swift_unknownObjectRelease();
    uint64_t v52 = MEMORY[0x263F8EE78];
  }
  uint64_t v53 = *(void *)(v52 + 16);
  swift_release();
  if (v53 != v31)
  {
LABEL_107:
    swift_unknownObjectRelease();
    uint64_t v36 = v91;
    goto LABEL_9;
  }
  uint64_t v37 = swift_dynamicCastClass();
  uint64_t v38 = (uint64_t *)v116;
  uint64_t v36 = a12;
  if (!v37)
  {
    swift_unknownObjectRelease();
    uint64_t v37 = MEMORY[0x263F8EE78];
  }
LABEL_21:
  swift_unknownObjectRelease();
  uint64_t v54 = (2 * *(void *)(v37 + 16)) | 1;
  unint64_t v102 = v37;
  unint64_t v103 = v37 + 32;
  uint64_t v104 = 0;
  uint64_t v105 = v54;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_260BF9FF0;
  uint64_t v56 = specialized Gadget.wirePolynomialLength.getter();
  uint64_t v57 = specialized Gadget.gadgetPolynomialLength.getter();
  *(void *)(inited + 32) = v38;
  *(void *)(inited + 40) = v22;
  *(void *)(inited + 48) = v96;
  *(void *)(inited + 56) = v56;
  *(void *)(inited + 64) = v57;
  MEMORY[0x270FA5388](v57, v58);
  unint64_t G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay4VDAF16GadgetParametersVGG_AH05QueryG0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm(inited, v36);
  unint64_t v21 = (unint64_t)v98;
  swift_setDeallocating();
  if (v98) {
    return swift_unknownObjectRelease();
  }
  if (G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm >> 62)
  {
LABEL_110:
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v29 = *(void *)((G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm & 0xFFFFFFFFFFFFFF8)
                    + 0x10);
  }
  uint64_t v20 = MEMORY[0x263F8EE78];
  unint64_t v96 = G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm;
  uint64_t v90 = v29;
  if (v29)
  {
    uint64_t v101 = MEMORY[0x263F8EE78];
    a13(0, v29 & ~(v29 >> 63), 0);
    if (v29 < 0)
    {
      __break(1u);
LABEL_112:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v22 + 2) + 1, 1, v22, v89);
      long long v22 = (char *)result;
      goto LABEL_41;
    }
    unint64_t G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = v21;
    uint64_t v20 = v101;
    unint64_t v60 = v96;
    if ((v96 & 0xC000000000000001) != 0)
    {
      uint64_t v61 = 0;
      do
      {
        uint64_t v62 = MEMORY[0x2612245F0](v61, v60);
        uint64_t v101 = v20;
        unint64_t v64 = *(void *)(v20 + 16);
        unint64_t v63 = *(void *)(v20 + 24);
        uint64_t v30 = v64 + 1;
        if (v64 >= v63 >> 1)
        {
          a13(v63 > 1, v64 + 1, 1);
          unint64_t v60 = v96;
          uint64_t v20 = v101;
        }
        ++v61;
        *(void *)(v20 + 16) = v30;
        *(void *)(v20 + 8 * v64 + 32) = v62 | 0x4000000000000000;
      }
      while (v90 != v61);
    }
    else
    {
      uint64_t v30 = v96 + 32;
      unint64_t v65 = *(void *)(v101 + 16);
      uint64_t v66 = v29;
      do
      {
        uint64_t v67 = *(void *)v30;
        uint64_t v101 = v20;
        unint64_t v68 = *(void *)(v20 + 24);
        swift_retain();
        if (v65 >= v68 >> 1)
        {
          a13(v68 > 1, v65 + 1, 1);
          uint64_t v20 = v101;
        }
        *(void *)(v20 + 16) = v65 + 1;
        *(void *)(v20 + 8 * v65 + 32) = v67 | 0x4000000000000000;
        v30 += 8;
        ++v65;
        --v66;
      }
      while (v66);
    }
    unint64_t v21 = G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm;
    uint64_t v29 = v90;
  }
  long long v125 = v112;
  long long v126 = v113;
  long long v127 = v114;
  uint64_t v128 = v115;
  long long v121 = v108;
  long long v122 = v109;
  long long v123 = v110;
  long long v124 = v111;
  long long v119 = v106;
  long long v120 = v107;
  a14(&v129, v97, v99, v92, v20);
  if (v21)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  long long v89 = a15;
  swift_bridgeObjectRelease();
  uint64_t v20 = v129;
  long long v22 = *v93;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_112;
  }
LABEL_41:
  unint64_t v70 = *((void *)v22 + 2);
  unint64_t v69 = *((void *)v22 + 3);
  if (v70 >= v69 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v69 > 1), v70 + 1, 1, v22, v89);
    long long v22 = (char *)result;
  }
  *((void *)v22 + 2) = v70 + 1;
  *(void *)&v22[8 * v70 + 32] = v20;
  *long long v93 = v22;
  if ((v29 & 0x8000000000000000) == 0)
  {
    if (!v29)
    {
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease();
    }
    unint64_t v21 = 0;
    long long v91 = a18;
    unint64_t v99 = v96 & 0xC000000000000001;
    long long v94 = (uint64_t *)(v96 + 32);
    long long v98 = a17;
    uint64_t v97 = a16;
    while (1)
    {
      if (v21 == v29) {
        goto LABEL_100;
      }
      if (v99)
      {
        uint64_t v71 = MEMORY[0x2612245F0](v21, v96);
      }
      else
      {
        if (v21 >= *(void *)((v96 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_109:
          __break(1u);
          goto LABEL_110;
        }
        uint64_t v71 = swift_retain();
      }
      unint64_t v72 = *(void *)(v71 + 72);
      swift_release();
      if (__OFADD__(v72, 1)) {
        goto LABEL_101;
      }
      if (((v72 + 1) & 0x8000000000000000) != 0) {
        goto LABEL_102;
      }
      uint64_t v73 = 1 << -(char)__clz(v72);
      if (v72 == -1) {
        uint64_t v30 = 1;
      }
      else {
        uint64_t v30 = v73;
      }
      if (v21) {
        goto LABEL_103;
      }
      uint64_t v92 = *(void *)(v95 + 32);
      if (v99)
      {
        uint64_t v74 = *(void *)(MEMORY[0x2612245F0](0, v96) + 56);
        swift_unknownObjectRelease();
        if (v74 < 0) {
          goto LABEL_105;
        }
        if (!v74)
        {
          unint64_t v75 = v96;
LABEL_87:
          uint64_t v87 = *(void *)(MEMORY[0x2612245F0](0, v75) + 32);
          swift_unknownObjectRelease();
          goto LABEL_90;
        }
      }
      else
      {
        uint64_t v76 = *v94;
        uint64_t v74 = *(void *)(*v94 + 56);
        if (v74 < 0) {
          goto LABEL_109;
        }
        if (!v74) {
          goto LABEL_89;
        }
      }
      if (v30 < 0) {
        goto LABEL_106;
      }
      unint64_t v77 = 0;
      uint64_t v20 = 8 * v30;
      do
      {
        if (v99)
        {
          uint64_t v78 = MEMORY[0x2612245F0](0, v96);
        }
        else
        {
          uint64_t v78 = *v94;
          swift_retain();
        }
        swift_beginAccess();
        uint64_t v79 = *(void *)(v78 + 16);
        if (v77 >= *(void *)(v79 + 16))
        {
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
          goto LABEL_99;
        }
        uint64_t v29 = *(void *)(v79 + 8 * v77 + 32);
        swift_bridgeObjectRetain();
        swift_release();
        uint64_t v80 = *(void *)(v29 + 16);
        if (v30 < v80 || v80 == 0) {
          goto LABEL_96;
        }
        uint64_t v82 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v82 + 16) = v30;
        bzero((void *)(v82 + 32), 8 * v30);
        uint64_t v100 = v82;
        a17(v29, v30, &v100);
        uint64_t v83 = v100;
        unint64_t v21 = *(void *)(v100 + 16);
        swift_bridgeObjectRelease();
        if (!v21) {
          goto LABEL_97;
        }
        uint64_t v84 = *(void *)(v83 + 16);
        if (!v84) {
          goto LABEL_98;
        }
        ++v77;
        while (!*(void *)(v83 + 8 * v84 + 24))
        {
          if ((unint64_t)v84-- <= 1) {
            goto LABEL_81;
          }
        }
        if (v84 > 0)
        {
          ((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))a18)(&v100, v83, v92);
          swift_bridgeObjectRelease();
          uint64_t v85 = v100;
          goto LABEL_82;
        }
LABEL_81:
        swift_bridgeObjectRelease();
        uint64_t v85 = 0;
        uint64_t v100 = 0;
LABEL_82:
        unint64_t v21 = *((void *)v22 + 2);
        unint64_t v86 = *((void *)v22 + 3);
        uint64_t v29 = v21 + 1;
        if (v21 >= v86 >> 1) {
          long long v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v86 > 1), v21 + 1, 1, v22, v89);
        }
        *((void *)v22 + 2) = v29;
        *(void *)&v22[8 * v21 + 32] = v85;
      }
      while (v77 != v74);
      if (v99)
      {
        unint64_t v75 = v96;
        unint64_t v21 = 0;
        uint64_t v29 = v90;
        goto LABEL_87;
      }
      uint64_t v76 = *v94;
      unint64_t v21 = 0;
      uint64_t v29 = v90;
LABEL_89:
      uint64_t v87 = *(void *)(v76 + 32);
LABEL_90:
      unint64_t G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = *((void *)v22 + 2);
      unint64_t v88 = *((void *)v22 + 3);
      uint64_t v20 = G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm
          + 1;
      if (G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm >= v88 >> 1) {
        long long v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v88 > 1), G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm+ 1, 1, v22, v89);
      }
      ++v21;
      *((void *)v22 + 2) = v20;
      *(void *)&v22[8
                    * G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm
                    + 32] = v87;
      if (v21 == v29)
      {
        swift_bridgeObjectRelease();
        *long long v93 = v22;
        return swift_unknownObjectRelease();
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(char **a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t (*a10)(void), uint64_t (*a11)(uint64_t, unint64_t, uint64_t, uint64_t), char *a12, void (*a13)(BOOL, uint64_t, uint64_t), void (*a14)(uint64_t *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t), uint64_t *a15, uint64_t a16, void (*a17)(void, void, void), void (*a18)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v22 = *((void *)v18 + 9);
  long long v23 = v18[7];
  long long v24 = v18[8];
  long long v25 = v18[5];
  long long v107 = v18[6];
  long long v108 = v23;
  long long v109 = v24;
  uint64_t v110 = *((void *)v18 + 18);
  long long v26 = v18[3];
  long long v103 = v18[2];
  long long v104 = v26;
  long long v105 = v18[4];
  long long v106 = v25;
  long long v27 = v18[1];
  long long v101 = *v18;
  long long v102 = v27;
  if (*(void *)(a2 + 16) != v22)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    unint64_t v97 = 0xD00000000000001BLL;
    unint64_t v98 = 0x8000000260BFEB20;
    v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._countAndFlagsBits = 540877088;
    v36._object = (void *)0xE400000000000000;
    String.append(_:)(v36);
    uint64_t v96 = v22;
    goto LABEL_10;
  }
  uint64_t v28 = a6;
  uint64_t v29 = a5;
  unint64_t v30 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
    goto LABEL_106;
  }
  unint64_t v21 = a4;
  uint64_t v20 = a3;
  uint64_t v92 = a2;
  long long v93 = v19;
  unint64_t v94 = a8;
  unint64_t v88 = a1;
  uint64_t v89 = a7;
  if (v30 != a10())
  {
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    unint64_t v97 = 0xD000000000000015;
    unint64_t v98 = 0x8000000260BFEB40;
    v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    v38._countAndFlagsBits = 540877088;
    v38._object = (void *)0xE400000000000000;
    String.append(_:)(v38);
    uint64_t v96 = a10();
    goto LABEL_10;
  }
  long long v31 = *(long long *)((char *)v18 + 24);
  long long v111 = *(long long *)((char *)v18 + 8);
  long long v112 = v31;
  long long v113 = *(long long *)((char *)v18 + 40);
  uint64_t v32 = *(void *)(v89 + 16);
  specialized Gadget.wirePolynomialLength.getter();
  specialized Gadget.gadgetPolynomialLength.getter();
  if (v32 != 1)
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    unint64_t v97 = 0xD000000000000019;
    unint64_t v98 = 0x8000000260BFEB60;
    v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    v40._countAndFlagsBits = 540877088;
    v40._object = (void *)0xE400000000000000;
    String.append(_:)(v40);
    specialized Gadget.wirePolynomialLength.getter();
    specialized Gadget.gadgetPolynomialLength.getter();
    uint64_t v96 = 1;
    goto LABEL_10;
  }
  if (*(void *)(v94 + 16))
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    unint64_t v97 = 0xD000000000000019;
    unint64_t v98 = 0x8000000260BFEB80;
    v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._countAndFlagsBits = 540877088;
    v34._object = (void *)0xE400000000000000;
    String.append(_:)(v34);
    uint64_t v96 = 0;
LABEL_10:
    v41._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    unint64_t v42 = v98;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v43 = v97;
    *(void *)(v43 + 8) = v42;
    *(unsigned char *)(v43 + 16) = 2;
    return swift_willThrow();
  }
  uint64_t v22 = a9;
  if (a9 < 1) {
    goto LABEL_103;
  }
  uint64_t v45 = a12;
  if ((v28 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_14:
    uint64_t v46 = a11(v20, v21, v29, v28);
    goto LABEL_20;
  }
  unint64_t v86 = (uint64_t *)a9;
  uint64_t v22 = (uint64_t)a12;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v47 = swift_dynamicCastClass();
  if (!v47)
  {
    swift_unknownObjectRelease();
    uint64_t v47 = MEMORY[0x263F8EE78];
  }
  uint64_t v48 = *(void *)(v47 + 16);
  swift_release();
  if (v48 != v30)
  {
LABEL_106:
    swift_unknownObjectRelease();
    uint64_t v45 = (char *)v22;
    uint64_t v22 = (uint64_t)v86;
    goto LABEL_14;
  }
  uint64_t v46 = swift_dynamicCastClass();
  uint64_t v45 = a12;
  uint64_t v22 = a9;
  if (!v46)
  {
    swift_unknownObjectRelease();
    uint64_t v46 = MEMORY[0x263F8EE78];
  }
LABEL_20:
  swift_unknownObjectRelease();
  long long v90 = v111;
  uint64_t v49 = *((void *)&v112 + 1);
  uint64_t v50 = (2 * *(void *)(v46 + 16)) | 1;
  unint64_t v97 = v46;
  unint64_t v98 = v46 + 32;
  uint64_t v99 = 0;
  uint64_t v100 = v50;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_260BF9FF0;
  uint64_t v52 = specialized Gadget.wirePolynomialLength.getter();
  uint64_t v53 = specialized Gadget.gadgetPolynomialLength.getter();
  *(_OWORD *)(inited + 32) = v90;
  *(void *)(inited + 48) = v49;
  *(void *)(inited + 56) = v52;
  *(void *)(inited + 64) = v53;
  MEMORY[0x270FA5388](v53, v54);
  unint64_t G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay4VDAF16GadgetParametersVGG_AH05QueryG0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm(inited, (void (*)(uint64_t, _OWORD *))v45);
  unint64_t v21 = (unint64_t)v93;
  swift_setDeallocating();
  if (v93) {
    return swift_unknownObjectRelease();
  }
  if (G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm >> 62)
  {
LABEL_109:
    swift_bridgeObjectRetain();
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v28 = *(void *)((G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm & 0xFFFFFFFFFFFFFF8)
                    + 0x10);
  }
  uint64_t v20 = MEMORY[0x263F8EE78];
  unint64_t v91 = G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm;
  uint64_t v84 = v28;
  if (v28)
  {
    uint64_t v96 = MEMORY[0x263F8EE78];
    a13(0, v28 & ~(v28 >> 63), 0);
    if (v28 < 0)
    {
      __break(1u);
LABEL_111:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v45 + 2) + 1, 1, v45, v83);
      uint64_t v45 = (char *)result;
      goto LABEL_40;
    }
    uint64_t v87 = v22;
    unint64_t v56 = v21;
    uint64_t v20 = v96;
    unint64_t v57 = v91;
    if ((v91 & 0xC000000000000001) != 0)
    {
      uint64_t v58 = 0;
      do
      {
        uint64_t v59 = MEMORY[0x2612245F0](v58, v57);
        uint64_t v96 = v20;
        unint64_t v61 = *(void *)(v20 + 16);
        unint64_t v60 = *(void *)(v20 + 24);
        uint64_t v29 = v61 + 1;
        if (v61 >= v60 >> 1)
        {
          a13(v60 > 1, v61 + 1, 1);
          unint64_t v57 = v91;
          uint64_t v20 = v96;
        }
        ++v58;
        *(void *)(v20 + 16) = v29;
        *(void *)(v20 + 8 * v61 + 32) = v59 | 0x4000000000000000;
      }
      while (v84 != v58);
    }
    else
    {
      uint64_t v29 = v91 + 32;
      unint64_t v62 = *(void *)(v96 + 16);
      uint64_t v63 = v28;
      do
      {
        uint64_t v64 = *(void *)v29;
        uint64_t v96 = v20;
        unint64_t v65 = *(void *)(v20 + 24);
        swift_retain();
        if (v62 >= v65 >> 1)
        {
          a13(v65 > 1, v62 + 1, 1);
          uint64_t v20 = v96;
        }
        *(void *)(v20 + 16) = v62 + 1;
        *(void *)(v20 + 8 * v62 + 32) = v64 | 0x4000000000000000;
        v29 += 8;
        ++v62;
        --v63;
      }
      while (v63);
    }
    unint64_t v21 = v56;
    uint64_t v28 = v84;
    uint64_t v22 = v87;
  }
  long long v120 = v107;
  long long v121 = v108;
  long long v122 = v109;
  uint64_t v123 = v110;
  long long v116 = v103;
  long long v117 = v104;
  long long v118 = v105;
  long long v119 = v106;
  long long v114 = v101;
  long long v115 = v102;
  a14(&v124, v92, v94, v22, v20);
  if (v21)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  uint64_t v83 = a15;
  swift_bridgeObjectRelease();
  uint64_t v20 = v124;
  uint64_t v45 = *v88;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_111;
  }
LABEL_40:
  unint64_t v21 = *((void *)v45 + 2);
  unint64_t v66 = *((void *)v45 + 3);
  if (v21 >= v66 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v66 > 1), v21 + 1, 1, v45, v83);
    uint64_t v45 = (char *)result;
  }
  *((void *)v45 + 2) = v21 + 1;
  *(void *)&v45[8 * v21 + 32] = v20;
  *unint64_t v88 = v45;
  if ((v28 & 0x8000000000000000) == 0)
  {
    if (!v28)
    {
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease();
    }
    unint64_t G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = 0;
    unint64_t v94 = v91 & 0xC000000000000001;
    unint64_t v86 = (uint64_t *)(v91 + 32);
    long long v93 = a17;
    uint64_t v92 = a16;
    while (1)
    {
      if (G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm == v28) {
        goto LABEL_99;
      }
      if (v94)
      {
        uint64_t v67 = MEMORY[0x2612245F0](G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm, v91);
      }
      else
      {
        if (G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm >= *(void *)((v91 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_108:
          __break(1u);
          goto LABEL_109;
        }
        uint64_t v67 = swift_retain();
      }
      unint64_t v68 = *(void *)(v67 + 72);
      swift_release();
      if (__OFADD__(v68, 1)) {
        goto LABEL_100;
      }
      if (((v68 + 1) & 0x8000000000000000) != 0) {
        goto LABEL_101;
      }
      uint64_t v69 = 1 << -(char)__clz(v68);
      if (v68 == -1) {
        uint64_t v29 = 1;
      }
      else {
        uint64_t v29 = v69;
      }
      if (G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm) {
        goto LABEL_102;
      }
      uint64_t v85 = *(void *)(v89 + 32);
      if (v94)
      {
        uint64_t v70 = *(void *)(MEMORY[0x2612245F0](0, v91) + 56);
        swift_unknownObjectRelease();
        if (v70 < 0) {
          goto LABEL_104;
        }
        if (!v70)
        {
          unint64_t v71 = v91;
LABEL_86:
          uint64_t v81 = *(void *)(MEMORY[0x2612245F0](0, v71) + 32);
          swift_unknownObjectRelease();
          goto LABEL_89;
        }
      }
      else
      {
        uint64_t v72 = *v86;
        uint64_t v70 = *(void *)(*v86 + 56);
        if (v70 < 0) {
          goto LABEL_108;
        }
        if (!v70) {
          goto LABEL_88;
        }
      }
      if (v29 < 0) {
        goto LABEL_105;
      }
      unint64_t v21 = 0;
      uint64_t v20 = 8 * v29;
      do
      {
        if (v94)
        {
          uint64_t v22 = MEMORY[0x2612245F0](0, v91);
        }
        else
        {
          uint64_t v22 = *v86;
          swift_retain();
        }
        swift_beginAccess();
        uint64_t v73 = *(void *)(v22 + 16);
        if (v21 >= *(void *)(v73 + 16))
        {
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
          goto LABEL_98;
        }
        uint64_t v28 = *(void *)(v73 + 8 * v21 + 32);
        swift_bridgeObjectRetain();
        swift_release();
        uint64_t v74 = *(void *)(v28 + 16);
        if (v29 < v74 || v74 == 0) {
          goto LABEL_95;
        }
        uint64_t v76 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v76 + 16) = v29;
        bzero((void *)(v76 + 32), 8 * v29);
        uint64_t v95 = v76;
        a17(v28, v29, &v95);
        uint64_t v22 = v95;
        uint64_t v77 = *(void *)(v95 + 16);
        swift_bridgeObjectRelease();
        if (!v77) {
          goto LABEL_96;
        }
        uint64_t v78 = *(void *)(v22 + 16);
        if (!v78) {
          goto LABEL_97;
        }
        ++v21;
        while (!*(void *)(v22 + 8 * v78 + 24))
        {
          if ((unint64_t)v78-- <= 1) {
            goto LABEL_80;
          }
        }
        if (v78 > 0)
        {
          a18(&v95, v22, v85);
          swift_bridgeObjectRelease();
          uint64_t v22 = v95;
          goto LABEL_81;
        }
LABEL_80:
        swift_bridgeObjectRelease();
        uint64_t v22 = 0;
        uint64_t v95 = 0;
LABEL_81:
        unint64_t v80 = *((void *)v45 + 2);
        unint64_t v79 = *((void *)v45 + 3);
        uint64_t v28 = v80 + 1;
        if (v80 >= v79 >> 1) {
          uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v79 > 1), v80 + 1, 1, v45, v83);
        }
        *((void *)v45 + 2) = v28;
        *(void *)&v45[8 * v80 + 32] = v22;
      }
      while (v21 != v70);
      if (v94)
      {
        unint64_t v71 = v91;
        unint64_t G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = 0;
        uint64_t v28 = v84;
        goto LABEL_86;
      }
      uint64_t v72 = *v86;
      unint64_t G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm = 0;
      uint64_t v28 = v84;
LABEL_88:
      uint64_t v81 = *(void *)(v72 + 32);
LABEL_89:
      unint64_t v21 = *((void *)v45 + 2);
      unint64_t v82 = *((void *)v45 + 3);
      uint64_t v20 = v21 + 1;
      if (v21 >= v82 >> 1) {
        uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v82 > 1), v21 + 1, 1, v45, v83);
      }
      ++G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm;
      *((void *)v45 + 2) = v20;
      *(void *)&v45[8 * v21 + 32] = v81;
      if (G0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm == v28)
      {
        swift_bridgeObjectRelease();
        *unint64_t v88 = v45;
        return swift_unknownObjectRelease();
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized FullyLinearProof.decide<A>(verifier:)(int64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v10 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    goto LABEL_61;
  }
  unint64_t v6 = v4;
  unint64_t v5 = a4;
  unint64_t v8 = a3;
  uint64_t v9 = a2;
  int64_t v7 = a1;
  if (v10 != specialized FullyLinearProof.verifierLength.getter())
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 540877088;
    v13._object = (void *)0xE400000000000000;
    String.append(_:)(v13);
    uint64_t v45 = specialized FullyLinearProof.verifierLength.getter();
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    char v15 = 24;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v16 = 0xD000000000000018;
    *(void *)(v16 + 8) = 0x8000000260BFEA80;
    *(unsigned char *)(v16 + 16) = 2;
    swift_willThrow();
    return v15 & 1;
  }
  if (v5)
  {
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    uint64_t v17 = swift_dynamicCastClass();
    if (!v17)
    {
      swift_unknownObjectRelease();
      uint64_t v17 = MEMORY[0x263F8EE78];
    }
    uint64_t v18 = *(void *)(v17 + 16);
    swift_release();
    if (v18 != v10) {
      goto LABEL_65;
    }
    unint64_t v5 = swift_dynamicCastClass();
    if (!v5)
    {
      swift_unknownObjectRelease();
      unint64_t v5 = MEMORY[0x263F8EE78];
    }
    goto LABEL_12;
  }
  swift_unknownObjectRetain();
  while (1)
  {
    specialized _copyCollectionToContiguousArray<A>(_:)(v7, v9, v8, v5);
    unint64_t v5 = v11;
LABEL_12:
    swift_unknownObjectRelease();
    unint64_t v19 = *(void *)(v5 + 16);
    if (!v19) {
      goto LABEL_63;
    }
    uint64_t v9 = v5 + 32;
    if (*(void *)(v5 + 32))
    {
      swift_release();
      char v15 = 0;
      return v15 & 1;
    }
    long long v20 = *(_OWORD *)(v6 + 24);
    long long v42 = *(_OWORD *)(v6 + 8);
    long long v43 = v20;
    long long v44 = *(_OWORD *)(v6 + 40);
    unint64_t v21 = v42;
    long long v22 = v20;
    uint64_t v40 = *((void *)&v42 + 1);
    unint64_t v6 = v44;
    specialized Gadget.wirePolynomialLength.getter();
    uint64_t result = specialized Gadget.gadgetPolynomialLength.getter();
    if (!(void)v22) {
      break;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_260BF9FF0;
    uint64_t v25 = specialized Gadget.wirePolynomialLength.getter();
    uint64_t v26 = specialized Gadget.gadgetPolynomialLength.getter();
    *(void *)(inited + 32) = v21;
    *(void *)(inited + 40) = v40;
    *(void *)(inited + 48) = *((void *)&v22 + 1);
    *(void *)(inited + 56) = v25;
    *(void *)(inited + 64) = v26;
    uint64_t result = swift_bridgeObjectRelease();
    if ((v21 & 0x8000000000000000) != 0) {
      goto LABEL_67;
    }
    if (v19 <= v21) {
      goto LABEL_69;
    }
    int64_t v27 = v21 + 1;
    if (v21 + 1 == v19) {
      goto LABEL_69;
    }
    if (v21 + 1 >= v19) {
      goto LABEL_68;
    }
    unint64_t v8 = 0;
    uint64_t v28 = *(void *)(v9 + 8 * v27);
    if ((uint64_t)v22 < 1 || !v21)
    {
LABEL_50:
      char v15 = v8 == v28;
      swift_unknownObjectRelease();
      return v15 & 1;
    }
    unint64_t v8 = 0;
    int64_t v7 = 0;
    while (1)
    {
      int64_t v29 = v7;
      if (__OFADD__(v7, (void)v22)) {
        int64_t v7 = ((v7 + (uint64_t)v22) >> 63) ^ 0x8000000000000000;
      }
      else {
        v7 += v22;
      }
      BOOL v30 = __OFADD__(v29, 1);
      uint64_t v31 = v29 + 1;
      if (v30) {
        break;
      }
      uint64_t v32 = v27 - v31;
      if (__OFSUB__(v27, v31)) {
        goto LABEL_53;
      }
      if (v32 < 0 || (uint64_t v33 = v21 + 1, v32 >= (uint64_t)v22))
      {
        uint64_t v33 = v31 + v22;
        if (__OFADD__(v31, (void)v22)) {
          goto LABEL_60;
        }
      }
      if (v33 < v31) {
        goto LABEL_54;
      }
      if (v27 < v31) {
        goto LABEL_55;
      }
      if (v31 < 1) {
        goto LABEL_56;
      }
      if (v27 < v33) {
        goto LABEL_57;
      }
      if (v31 >= (unint64_t)v33) {
        goto LABEL_58;
      }
      uint64_t v34 = *(void *)(v6 + 16);
      if (!v34) {
        goto LABEL_59;
      }
      unint64_t v35 = *(void *)(v9 + 8 * v31);
      uint64_t v36 = v34 + 3;
      while (!*(void *)(v6 + 8 * v36))
      {
        unint64_t v37 = v36 - 3;
        --v36;
        if (v37 <= 1) {
          goto LABEL_24;
        }
      }
      specialized evaluateUsingHorner<A, B>(_:atInput:)(v6, v35, &v41);
      if (v41)
      {
        unint64_t v38 = 0xFFFEB00001 - v41;
        if (v41 > 0xFFFEB00001) {
          goto LABEL_62;
        }
        if (v8 >= v38)
        {
          v8 -= v38;
        }
        else
        {
          if (v38 > 0xFFFEB00001) {
            goto LABEL_64;
          }
          BOOL v39 = __CFADD__(v8, v41);
          v8 += v41;
          if (v39)
          {
            __break(1u);
            goto LABEL_50;
          }
        }
      }
LABEL_24:
      if (v7 >= (uint64_t)v21) {
        goto LABEL_50;
      }
    }
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    swift_unknownObjectRelease();
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  long long v20;
  unint64_t v21;
  long long v22;
  uint64_t result;
  uint64_t inited;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  int64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  unint64_t v41;
  long long v42;
  long long v43;
  long long v44;
  uint64_t v45;

  unint64_t v10 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    goto LABEL_61;
  }
  unint64_t v6 = v4;
  unint64_t v5 = a4;
  unint64_t v8 = a3;
  uint64_t v9 = a2;
  int64_t v7 = a1;
  if (v10 != specialized FullyLinearProof.verifierLength.getter())
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 540877088;
    v13._object = (void *)0xE400000000000000;
    String.append(_:)(v13);
    uint64_t v45 = specialized FullyLinearProof.verifierLength.getter();
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    char v15 = 24;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v16 = 0xD000000000000018;
    *(void *)(v16 + 8) = 0x8000000260BFEA80;
    *(unsigned char *)(v16 + 16) = 2;
    swift_willThrow();
    return v15 & 1;
  }
  if (v5)
  {
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    uint64_t v17 = swift_dynamicCastClass();
    if (!v17)
    {
      swift_unknownObjectRelease();
      uint64_t v17 = MEMORY[0x263F8EE78];
    }
    uint64_t v18 = *(void *)(v17 + 16);
    swift_release();
    if (v18 != v10) {
      goto LABEL_65;
    }
    unint64_t v5 = swift_dynamicCastClass();
    if (!v5)
    {
      swift_unknownObjectRelease();
      unint64_t v5 = MEMORY[0x263F8EE78];
    }
    goto LABEL_12;
  }
  swift_unknownObjectRetain();
  while (1)
  {
    specialized _copyCollectionToContiguousArray<A>(_:)(v7, v9, v8, v5);
    unint64_t v5 = v11;
LABEL_12:
    swift_unknownObjectRelease();
    unint64_t v19 = *(void *)(v5 + 16);
    if (!v19) {
      goto LABEL_63;
    }
    uint64_t v9 = v5 + 32;
    if (*(void *)(v5 + 32))
    {
      swift_release();
      char v15 = 0;
      return v15 & 1;
    }
    long long v20 = *(_OWORD *)(v6 + 24);
    long long v42 = *(_OWORD *)(v6 + 8);
    long long v43 = v20;
    long long v44 = *(_OWORD *)(v6 + 40);
    unint64_t v21 = v42;
    long long v22 = v20;
    uint64_t v40 = *((void *)&v42 + 1);
    unint64_t v6 = v44;
    specialized Gadget.wirePolynomialLength.getter();
    uint64_t result = specialized Gadget.gadgetPolynomialLength.getter();
    if (!(void)v22) {
      break;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_260BF9FF0;
    uint64_t v25 = specialized Gadget.wirePolynomialLength.getter();
    uint64_t v26 = specialized Gadget.gadgetPolynomialLength.getter();
    *(void *)(inited + 32) = v21;
    *(void *)(inited + 40) = v40;
    *(void *)(inited + 48) = *((void *)&v22 + 1);
    *(void *)(inited + 56) = v25;
    *(void *)(inited + 64) = v26;
    uint64_t result = swift_bridgeObjectRelease();
    if ((v21 & 0x8000000000000000) != 0) {
      goto LABEL_67;
    }
    if (v19 <= v21) {
      goto LABEL_69;
    }
    int64_t v27 = v21 + 1;
    if (v21 + 1 == v19) {
      goto LABEL_69;
    }
    if (v21 + 1 >= v19) {
      goto LABEL_68;
    }
    unint64_t v8 = 0;
    uint64_t v28 = *(void *)(v9 + 8 * v27);
    if ((uint64_t)v22 < 1 || !v21)
    {
LABEL_50:
      char v15 = v8 == v28;
      swift_unknownObjectRelease();
      return v15 & 1;
    }
    unint64_t v8 = 0;
    int64_t v7 = 0;
    while (1)
    {
      int64_t v29 = v7;
      if (__OFADD__(v7, (void)v22)) {
        int64_t v7 = ((v7 + (uint64_t)v22) >> 63) ^ 0x8000000000000000;
      }
      else {
        v7 += v22;
      }
      BOOL v30 = __OFADD__(v29, 1);
      uint64_t v31 = v29 + 1;
      if (v30) {
        break;
      }
      uint64_t v32 = v27 - v31;
      if (__OFSUB__(v27, v31)) {
        goto LABEL_53;
      }
      if (v32 < 0 || (uint64_t v33 = v21 + 1, v32 >= (uint64_t)v22))
      {
        uint64_t v33 = v31 + v22;
        if (__OFADD__(v31, (void)v22)) {
          goto LABEL_60;
        }
      }
      if (v33 < v31) {
        goto LABEL_54;
      }
      if (v27 < v31) {
        goto LABEL_55;
      }
      if (v31 < 1) {
        goto LABEL_56;
      }
      if (v27 < v33) {
        goto LABEL_57;
      }
      if (v31 >= (unint64_t)v33) {
        goto LABEL_58;
      }
      uint64_t v34 = *(void *)(v6 + 16);
      if (!v34) {
        goto LABEL_59;
      }
      unint64_t v35 = *(void *)(v9 + 8 * v31);
      uint64_t v36 = v34 + 3;
      while (!*(void *)(v6 + 8 * v36))
      {
        unint64_t v37 = v36 - 3;
        --v36;
        if (v37 <= 1) {
          goto LABEL_24;
        }
      }
      specialized evaluateUsingHorner<A, B>(_:atInput:)(v6, v35, &v41);
      if (v41)
      {
        unint64_t v38 = 0xFFFFFFFF00000001 - v41;
        if (v41 > 0xFFFFFFFF00000001) {
          goto LABEL_62;
        }
        if (v8 >= v38)
        {
          v8 -= v38;
        }
        else
        {
          if (v38 > 0xFFFFFFFF00000001) {
            goto LABEL_64;
          }
          BOOL v39 = __CFADD__(v8, v41);
          v8 += v41;
          if (v39)
          {
            __break(1u);
            goto LABEL_50;
          }
        }
      }
LABEL_24:
      if (v7 >= (uint64_t)v21) {
        goto LABEL_50;
      }
    }
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    swift_unknownObjectRelease();
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
  return result;
}

uint64_t specialized FullyLinearProof.decide<A>(verifier:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v10 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v5 = v4;
  unint64_t v6 = a4;
  uint64_t v8 = a3;
  unint64_t v9 = a2;
  uint64_t v7 = a1;
  if (v10 != specialized FullyLinearProof.verifierLength.getter())
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 540877088;
    v13._object = (void *)0xE400000000000000;
    String.append(_:)(v13);
    uint64_t v32 = specialized FullyLinearProof.verifierLength.getter();
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v15 = 0xD000000000000018;
    *(void *)(v15 + 8) = 0x8000000260BFEA80;
    *(unsigned char *)(v15 + 16) = 2;
    swift_willThrow();
    return v16 & 1;
  }
  if (v6)
  {
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    uint64_t v17 = swift_dynamicCastClass();
    if (!v17)
    {
      swift_unknownObjectRelease();
      uint64_t v17 = MEMORY[0x263F8EE78];
    }
    uint64_t v18 = *(void *)(v17 + 16);
    swift_release();
    if (v18 != v10) {
      goto LABEL_26;
    }
    unint64_t v6 = swift_dynamicCastClass();
    if (!v6)
    {
      swift_unknownObjectRelease();
      unint64_t v6 = MEMORY[0x263F8EE78];
    }
    goto LABEL_12;
  }
  swift_unknownObjectRetain();
  while (1)
  {
    specialized _copyCollectionToContiguousArray<A>(_:)(v7, v9, v8, v6);
    unint64_t v6 = v11;
LABEL_12:
    swift_unknownObjectRelease();
    unint64_t v9 = *(void *)(v6 + 16);
    if (v9) {
      break;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    swift_unknownObjectRelease();
  }
  if (*(_DWORD *)(v6 + 32))
  {
    swift_release();
LABEL_22:
    char v16 = 0;
    return v16 & 1;
  }
  long long v19 = *(_OWORD *)(v5 + 40);
  long long v20 = *(_OWORD *)(v5 + 24);
  long long v29 = *(_OWORD *)(v5 + 8);
  long long v30 = v20;
  long long v31 = v19;
  long long v21 = v29;
  uint64_t v27 = v19;
  specialized Gadget.wirePolynomialLength.getter();
  specialized Gadget.gadgetPolynomialLength.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_260BF9FF0;
  uint64_t v23 = specialized Gadget.wirePolynomialLength.getter();
  uint64_t v24 = specialized Gadget.gadgetPolynomialLength.getter();
  *(_OWORD *)(inited + 32) = v21;
  *(void *)(inited + 48) = v27;
  *(void *)(inited + 56) = v23;
  *(void *)(inited + 64) = v24;
  uint64_t result = swift_bridgeObjectRelease();
  if ((v21 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if (v9 <= (unint64_t)v21 || (void)v21 + 1 == v9) {
      goto LABEL_29;
    }
    if ((uint64_t)v21 + 1 < v9)
    {
      int v26 = *(_DWORD *)(v6 + 32 + 4 * (v21 + 1));
      specialized ParallelSum.evaluate<A>(at:)(v6 + 32, 1, 2 * v21 + 3, (unsigned int *)&v28);
      if (v28 != v26)
      {
        swift_unknownObjectRelease();
        goto LABEL_22;
      }
      swift_unknownObjectRelease();
      char v16 = 1;
      return v16 & 1;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

{
  _OWORD *v4;
  _OWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  long long v19;
  long long v20;
  uint64_t inited;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  long long v28;
  long long v29;
  long long v30;
  uint64_t v31;

  unint64_t v10 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v5 = v4;
  unint64_t v6 = a4;
  uint64_t v8 = a3;
  unint64_t v9 = a2;
  uint64_t v7 = a1;
  if (v10 != specialized FullyLinearProof.verifierLength.getter())
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 540877088;
    v13._object = (void *)0xE400000000000000;
    String.append(_:)(v13);
    long long v31 = specialized FullyLinearProof.verifierLength.getter();
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v15 = 0xD000000000000018;
    *(void *)(v15 + 8) = 0x8000000260BFEA80;
    *(unsigned char *)(v15 + 16) = 2;
    swift_willThrow();
    return v16 & 1;
  }
  if (v6)
  {
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    uint64_t v17 = swift_dynamicCastClass();
    if (!v17)
    {
      swift_unknownObjectRelease();
      uint64_t v17 = MEMORY[0x263F8EE78];
    }
    uint64_t v18 = *(void *)(v17 + 16);
    swift_release();
    if (v18 != v10) {
      goto LABEL_26;
    }
    unint64_t v6 = swift_dynamicCastClass();
    if (!v6)
    {
      swift_unknownObjectRelease();
      unint64_t v6 = MEMORY[0x263F8EE78];
    }
    goto LABEL_12;
  }
  swift_unknownObjectRetain();
  while (1)
  {
    specialized _copyCollectionToContiguousArray<A>(_:)(v7, v9, v8, v6);
    unint64_t v6 = v11;
LABEL_12:
    swift_unknownObjectRelease();
    unint64_t v9 = *(void *)(v6 + 16);
    if (v9) {
      break;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    swift_unknownObjectRelease();
  }
  if (*(void *)(v6 + 32))
  {
    swift_release();
LABEL_22:
    char v16 = 0;
    return v16 & 1;
  }
  long long v19 = v5[5];
  long long v29 = v5[4];
  long long v30 = v19;
  uint64_t v28 = v5[3];
  long long v20 = v28;
  int v26 = v19;
  specialized Gadget.wirePolynomialLength.getter();
  specialized Gadget.gadgetPolynomialLength.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_260BF9FF0;
  long long v22 = specialized Gadget.wirePolynomialLength.getter();
  uint64_t v23 = specialized Gadget.gadgetPolynomialLength.getter();
  *(_OWORD *)(inited + 32) = v20;
  *(void *)(inited + 48) = v26;
  *(void *)(inited + 56) = v22;
  *(void *)(inited + 64) = v23;
  uint64_t result = swift_bridgeObjectRelease();
  if ((v20 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if (v9 <= (unint64_t)v20 || (void)v20 + 1 == v9) {
      goto LABEL_29;
    }
    if ((uint64_t)v20 + 1 < v9)
    {
      uint64_t v25 = *(void *)(v6 + 32 + 8 * (v20 + 1));
      specialized ParallelSum.evaluate<A>(at:)(v6 + 32, 1, 2 * v20 + 3, &v27);
      if (v27 != v25)
      {
        swift_unknownObjectRelease();
        goto LABEL_22;
      }
      swift_unknownObjectRelease();
      char v16 = 1;
      return v16 & 1;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t specialized FullyLinearProof.decide<A>(verifier:)(int64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v10 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    goto LABEL_61;
  }
  uint64_t v6 = v4;
  unint64_t v5 = a4;
  uint64_t v8 = a3;
  uint64_t v9 = a2;
  int64_t v7 = a1;
  if (v10 != specialized FullyLinearProof.verifierLength.getter())
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 540877088;
    v13._object = (void *)0xE400000000000000;
    String.append(_:)(v13);
    uint64_t v45 = specialized FullyLinearProof.verifierLength.getter();
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    char v15 = 24;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v16 = 0xD000000000000018;
    *(void *)(v16 + 8) = 0x8000000260BFEA80;
    *(unsigned char *)(v16 + 16) = 2;
    swift_willThrow();
    return v15 & 1;
  }
  if (v5)
  {
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    uint64_t v17 = swift_dynamicCastClass();
    if (!v17)
    {
      swift_unknownObjectRelease();
      uint64_t v17 = MEMORY[0x263F8EE78];
    }
    uint64_t v18 = *(void *)(v17 + 16);
    swift_release();
    if (v18 != v10) {
      goto LABEL_65;
    }
    unint64_t v5 = swift_dynamicCastClass();
    if (!v5)
    {
      swift_unknownObjectRelease();
      unint64_t v5 = MEMORY[0x263F8EE78];
    }
    goto LABEL_12;
  }
  swift_unknownObjectRetain();
  while (1)
  {
    specialized _copyCollectionToContiguousArray<A>(_:)(v7, v9, v8, v5);
    unint64_t v5 = v11;
LABEL_12:
    swift_unknownObjectRelease();
    unint64_t v19 = *(void *)(v5 + 16);
    if (!v19) {
      goto LABEL_63;
    }
    uint64_t v9 = v5 + 32;
    if (*(_DWORD *)(v5 + 32))
    {
      swift_release();
      char v15 = 0;
      return v15 & 1;
    }
    long long v20 = *(_OWORD *)(v6 + 24);
    long long v42 = *(_OWORD *)(v6 + 8);
    long long v43 = v20;
    long long v44 = *(_OWORD *)(v6 + 40);
    unint64_t v21 = v42;
    long long v22 = v20;
    uint64_t v40 = *((void *)&v42 + 1);
    uint64_t v6 = v44;
    specialized Gadget.wirePolynomialLength.getter();
    uint64_t result = specialized Gadget.gadgetPolynomialLength.getter();
    if (!(void)v22) {
      break;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_260BF9FF0;
    uint64_t v25 = specialized Gadget.wirePolynomialLength.getter();
    uint64_t v26 = specialized Gadget.gadgetPolynomialLength.getter();
    *(void *)(inited + 32) = v21;
    *(void *)(inited + 40) = v40;
    *(void *)(inited + 48) = *((void *)&v22 + 1);
    *(void *)(inited + 56) = v25;
    *(void *)(inited + 64) = v26;
    uint64_t result = swift_bridgeObjectRelease();
    if ((v21 & 0x8000000000000000) != 0) {
      goto LABEL_67;
    }
    if (v19 <= v21) {
      goto LABEL_69;
    }
    int64_t v27 = v21 + 1;
    if (v21 + 1 == v19) {
      goto LABEL_69;
    }
    if (v21 + 1 >= v19) {
      goto LABEL_68;
    }
    LODWORD(v8) = 0;
    int v28 = *(_DWORD *)(v9 + 4 * v27);
    if ((uint64_t)v22 < 1 || !v21)
    {
LABEL_50:
      char v15 = v8 == v28;
      swift_unknownObjectRelease();
      return v15 & 1;
    }
    uint64_t v8 = 0;
    int64_t v7 = 0;
    while (1)
    {
      int64_t v29 = v7;
      if (__OFADD__(v7, (void)v22)) {
        int64_t v7 = ((v7 + (uint64_t)v22) >> 63) ^ 0x8000000000000000;
      }
      else {
        v7 += v22;
      }
      BOOL v30 = __OFADD__(v29, 1);
      uint64_t v31 = v29 + 1;
      if (v30) {
        break;
      }
      uint64_t v32 = v27 - v31;
      if (__OFSUB__(v27, v31)) {
        goto LABEL_53;
      }
      if (v32 < 0 || (uint64_t v33 = v21 + 1, v32 >= (uint64_t)v22))
      {
        uint64_t v33 = v31 + v22;
        if (__OFADD__(v31, (void)v22)) {
          goto LABEL_60;
        }
      }
      if (v33 < v31) {
        goto LABEL_54;
      }
      if (v27 < v31) {
        goto LABEL_55;
      }
      if (v31 < 1) {
        goto LABEL_56;
      }
      if (v27 < v33) {
        goto LABEL_57;
      }
      if (v31 >= (unint64_t)v33) {
        goto LABEL_58;
      }
      uint64_t v34 = *(void *)(v6 + 16);
      if (!v34) {
        goto LABEL_59;
      }
      unsigned int v35 = *(_DWORD *)(v9 + 4 * v31);
      uint64_t v36 = v34 + 7;
      while (!*(_DWORD *)(v6 + 4 * v36))
      {
        unint64_t v37 = v36 - 7;
        --v36;
        if (v37 <= 1) {
          goto LABEL_24;
        }
      }
      specialized evaluateUsingHorner<A, B>(_:atInput:)(v6, v35, &v41);
      if (v41)
      {
        unsigned int v38 = -1048575 - v41;
        if (v41 > 0xFFF00001) {
          goto LABEL_62;
        }
        if (v8 >= v38)
        {
          uint64_t v8 = v8 - v38;
        }
        else
        {
          if (v38 > 0xFFF00001) {
            goto LABEL_64;
          }
          BOOL v39 = __CFADD__(v8, v41);
          uint64_t v8 = (v8 + v41);
          if (v39)
          {
            __break(1u);
            goto LABEL_50;
          }
        }
      }
LABEL_24:
      if (v7 >= (uint64_t)v21) {
        goto LABEL_50;
      }
    }
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    swift_unknownObjectRelease();
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
  return result;
}

uint64_t specialized FullyLinearProof.decide<A>(verifier:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(void), uint64_t a6, void (*a7)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))
{
  void (*v33)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  long long v35;
  long long v36;
  long long v37;
  uint64_t v38;

  uint64_t v14 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v10 = a6;
  uint64_t v9 = v7;
  unint64_t v12 = a4;
  uint64_t v13 = a3;
  uint64_t v8 = a2;
  uint64_t v11 = a1;
  uint64_t v33 = a7;
  if (v14 != a5())
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 540877088;
    v17._object = (void *)0xE400000000000000;
    String.append(_:)(v17);
    unsigned int v38 = a5();
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v19 = 0xD000000000000018;
    *(void *)(v19 + 8) = 0x8000000260BFEA80;
    *(unsigned char *)(v19 + 16) = 2;
    swift_willThrow();
    return v20 & 1;
  }
  if (v12)
  {
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    uint64_t v21 = swift_dynamicCastClass();
    if (!v21)
    {
      swift_unknownObjectRelease();
      uint64_t v21 = MEMORY[0x263F8EE78];
    }
    uint64_t v22 = *(void *)(v21 + 16);
    swift_release();
    if (v22 != v14) {
      goto LABEL_26;
    }
    uint64_t v10 = swift_dynamicCastClass();
    if (!v10)
    {
      swift_unknownObjectRelease();
      uint64_t v10 = MEMORY[0x263F8EE78];
    }
    goto LABEL_12;
  }
  swift_unknownObjectRetain();
  while (1)
  {
    uint64_t v10 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))v10)(v11, v8, v13, v12);
LABEL_12:
    swift_unknownObjectRelease();
    unint64_t v23 = *(void *)(v10 + 16);
    if (v23) {
      break;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    swift_unknownObjectRelease();
  }
  if (*(void *)(v10 + 32))
  {
    swift_release();
LABEL_22:
    char v20 = 0;
    return v20 & 1;
  }
  long long v24 = *(_OWORD *)(v9 + 40);
  long long v25 = *(_OWORD *)(v9 + 24);
  unsigned int v35 = *(_OWORD *)(v9 + 8);
  uint64_t v36 = v25;
  unint64_t v37 = v24;
  long long v26 = v35;
  uint64_t v27 = v24;
  specialized Gadget.wirePolynomialLength.getter();
  specialized Gadget.gadgetPolynomialLength.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_260BF9FF0;
  uint64_t v29 = specialized Gadget.wirePolynomialLength.getter();
  uint64_t v30 = specialized Gadget.gadgetPolynomialLength.getter();
  *(_OWORD *)(inited + 32) = v26;
  *(void *)(inited + 48) = v27;
  *(void *)(inited + 56) = v29;
  *(void *)(inited + 64) = v30;
  uint64_t result = swift_bridgeObjectRelease();
  if ((v26 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if (v23 <= (unint64_t)v26 || (void)v26 + 1 == v23) {
      goto LABEL_29;
    }
    if ((uint64_t)v26 + 1 < v23)
    {
      uint64_t v32 = *(void *)(v10 + 32 + 8 * (v26 + 1));
      v33(&v34, v10, v10 + 32, 1, 2 * v26 + 3);
      if (v34 != v32)
      {
        swift_unknownObjectRelease();
        goto LABEL_22;
      }
      swift_unknownObjectRelease();
      char v20 = 1;
      return v20 & 1;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t specialized PINEPublicShare.init<A>(from:parameter:)@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  if (a4)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    void *v11 = 0;
    v11[1] = 0;
    return swift_willThrow();
  }
  if (result) {
    uint64_t v7 = a2 - result;
  }
  else {
    uint64_t v7 = 0;
  }
  if ((unint64_t)(a3 - 0x200000000000000) >> 58 == 63)
  {
    if (v7 == a3 << 6)
    {
      uint64_t result = specialized _copyCollectionToContiguousArray<A>(_:)(result, a2);
      uint64_t v8 = (2 * *(void *)(result + 16)) | 1;
      v18[0] = result;
      v18[1] = result + 32;
      v18[2] = 0;
      v18[3] = v8;
      if ((a3 & 0x8000000000000000) == 0)
      {
        uint64_t v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF4SeedVs5NeverOTg5072_s4VDAF15PINEPublicShareV4from9parameterACyxGqd___SiSgtKcSkRd__s5UInt8V7b12Rtd__lufcAA4E38VSiXEfU_AA19XofHmacSha256Aes128C_SWTG5s10ArraySliceVys0T0VGTf1cn_nTm(0, a3, v18);
        uint64_t v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF4SeedVs5NeverOTg5072_s4VDAF15PINEPublicShareV4from9parameterACyxGqd___SiSgtKcSkRd__s5UInt8V7b12Rtd__lufcAA4E38VSiXEfU_AA19XofHmacSha256Aes128C_SWTG5s10ArraySliceVys0T0VGTf1cn_nTm(0, a3, v18);
        uint64_t result = swift_unknownObjectRelease();
        *a5 = v9;
        a5[1] = v10;
        return result;
      }
      goto LABEL_13;
    }
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 2107936;
    v13._object = (void *)0xE300000000000000;
    String.append(_:)(v13);
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 0x203A746F67202CLL;
    v15._object = (void *)0xE700000000000000;
    String.append(_:)(v15);
    v18[4] = v7;
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *Swift::String v17 = 0xD000000000000033;
    v17[1] = 0x8000000260BFF270;
    return swift_willThrow();
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t specialized PINEPrepareMessage.init<A>(from:parameter:)@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (a1 && a2 - a1 == 64)
  {
    size_t v4 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
    uint64_t v5 = v4;
    uint64_t v6 = v4 + 32;
    unint64_t v7 = *(void *)(v4 + 16);
    if (v7 >= 0x20) {
      uint64_t v8 = 32;
    }
    else {
      uint64_t v8 = *(void *)(v4 + 16);
    }
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    uint64_t v9 = swift_dynamicCastClass();
    if (!v9)
    {
      swift_release();
      uint64_t v9 = MEMORY[0x263F8EE78];
    }
    uint64_t v10 = *(void *)(v9 + 16);
    swift_release();
    if (v10 == v8)
    {
      uint64_t v11 = swift_dynamicCastClass();
      if (!v11)
      {
        swift_release();
        uint64_t v11 = MEMORY[0x263F8EE78];
      }
    }
    else
    {
      swift_release();
      specialized _copyCollectionToContiguousArray<A>(_:)(v5, v6, 0, (2 * v8) | 1);
      uint64_t v11 = v21;
    }
    if (v7 - v8 >= 0x20) {
      unint64_t v12 = v8 + 32;
    }
    else {
      unint64_t v12 = v7;
    }
    if (v7 < v12)
    {
      __break(1u);
    }
    else
    {
      swift_unknownObjectRetain_n();
      uint64_t v13 = swift_dynamicCastClass();
      if (!v13)
      {
        swift_release();
        uint64_t v13 = MEMORY[0x263F8EE78];
      }
      uint64_t v14 = *(void *)(v13 + 16);
      swift_release();
      if (v14 == v12 - v8)
      {
        uint64_t v15 = swift_dynamicCastClass();
        if (!v15)
        {
          swift_release();
          uint64_t v15 = MEMORY[0x263F8EE78];
        }
        goto LABEL_20;
      }
    }
    swift_release();
    specialized _copyCollectionToContiguousArray<A>(_:)(v5, v6, v8, (2 * v12) | 1);
    uint64_t v15 = v22;
LABEL_20:
    uint64_t result = swift_release();
    *a3 = v11;
    a3[1] = v15;
    return result;
  }
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 0x203A746F67202CLL;
  v18._object = (void *)0xE700000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
  swift_allocError();
  *char v20 = 0xD000000000000032;
  v20[1] = 0x8000000260BFF1B0;
  return swift_willThrow();
}

uint64_t specialized PINE.splitSeedBytes<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v9 = a1;
  outlined copy of Data._Representation(a1, a2);
  uint64_t v10 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v9, a2);
  outlined consume of Data._Representation(v9, a2);
  uint64_t v11 = (2 * *(void *)(v10 + 16)) | 1;
  uint64_t v27 = (void *)v10;
  uint64_t v28 = v10 + 32;
  uint64_t v29 = 0;
  unint64_t v30 = v11;
  uint64_t v12 = *v2 - 1;
  if (__OFSUB__(*v2, 1))
  {
    __break(1u);
    goto LABEL_63;
  }
  if (v12 < 0)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  uint64_t v9 = 0;
  uint64_t v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF4SeedV16measurementShare_AI05proofG0AI24wraparoundJointRandBlindAI012verificationjkL0ts5NeverOTg5020_s4VDAF4PINEV14splite65Bytes33_96F6F895E25AE9C9B366289ACE02F486LLySayAA0D0V16measurementg26_AG05proofO0AG24wraparoundjkl117AG012verificationrsT0tG12helperShares_AG016leaderWraparoundrsT0AG0x12VerificationrsT0AG05provesD0tqd__SkRd__s5UInt8V7B89Rtd__lFAgH_AgigjgKtSiXEfU_AA7Field40V_SRySfGAA19XofHmacSha256Aes128C10Foundation4DataVTG5s10ArraySliceVys5UInt8VGTf1cn_nTm(0, v12, (uint64_t *)&v27);
  uint64_t v10 = v29;
  uint64_t v4 = v30;
  uint64_t v6 = v30 >> 1;
  unint64_t v14 = (v30 >> 1) - v29;
  if (__OFSUB__(v30 >> 1, v29))
  {
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  uint64_t v2 = v27;
  uint64_t v9 = v28;
  uint64_t v7 = v30 >> 1;
  if (v14 >= 0x20)
  {
    uint64_t v7 = v29 + 32;
    if (__OFADD__(v29, 32)) {
      goto LABEL_83;
    }
  }
  if (v7 < v29) {
    goto LABEL_65;
  }
  if (v6 < v29)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  if (v6 < v7)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  if (v7 < 0)
  {
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  uint64_t v3 = v30 >> 1;
  if (v14 >= 0x20)
  {
    uint64_t v3 = v29 + 32;
    if (__OFADD__(v29, 32)) {
      goto LABEL_84;
    }
    if (v6 < v3) {
      goto LABEL_81;
    }
  }
  if (v3 < v29) {
    goto LABEL_69;
  }
  uint64_t v26 = v13;
  uint64_t v29 = v3;
  unint64_t v5 = v30 & 1;
  if (v30)
  {
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    uint64_t v16 = swift_dynamicCastClass();
    if (!v16)
    {
      swift_unknownObjectRelease();
      uint64_t v16 = MEMORY[0x263F8EE78];
    }
    uint64_t v17 = *(void *)(v16 + 16);
    swift_release();
    if (__OFSUB__(v7, v10)) {
      goto LABEL_85;
    }
    if (v17 != v7 - v10) {
      goto LABEL_86;
    }
    uint64_t v10 = swift_dynamicCastClass();
    if (!v10)
    {
      swift_unknownObjectRelease();
      uint64_t v10 = MEMORY[0x263F8EE78];
    }
    goto LABEL_23;
  }
  swift_unknownObjectRetain();
  while (1)
  {
    uint64_t v4 = v4 & 1 | (2 * v7);
    specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v2, v9, v10, v4);
    uint64_t v10 = v15;
LABEL_23:
    swift_unknownObjectRelease();
    unint64_t v18 = v6 - v3;
    if (__OFSUB__(v6, v3))
    {
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
      goto LABEL_79;
    }
    uint64_t v7 = v6;
    if (v18 >= 0x20)
    {
      uint64_t v7 = v3 + 32;
      if (__OFADD__(v3, 32))
      {
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        swift_unknownObjectRelease();
LABEL_35:
        specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v2, v9, v3, v5 | (2 * v7));
        uint64_t v3 = v19;
        goto LABEL_42;
      }
    }
    if (v7 < v3) {
      goto LABEL_71;
    }
    if (v6 < v7) {
      goto LABEL_72;
    }
    if (v7 < 0) {
      goto LABEL_73;
    }
    uint64_t v4 = v6;
    if (v18 >= 0x20)
    {
      uint64_t v4 = v3 + 32;
      if (__OFADD__(v3, 32)) {
        goto LABEL_88;
      }
      if (v6 < v4) {
        goto LABEL_82;
      }
    }
    if (v4 < v3) {
      goto LABEL_74;
    }
    uint64_t v29 = v4;
    if (!v5)
    {
      swift_unknownObjectRetain();
      goto LABEL_35;
    }
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    uint64_t v20 = swift_dynamicCastClass();
    if (!v20)
    {
      swift_unknownObjectRelease();
      uint64_t v20 = MEMORY[0x263F8EE78];
    }
    uint64_t v21 = *(void *)(v20 + 16);
    swift_release();
    if (__OFSUB__(v7, v3)) {
      goto LABEL_89;
    }
    if (v21 != v7 - v3) {
      goto LABEL_90;
    }
    uint64_t v3 = swift_dynamicCastClass();
    if (!v3)
    {
      swift_unknownObjectRelease();
      uint64_t v3 = MEMORY[0x263F8EE78];
    }
LABEL_42:
    swift_unknownObjectRelease();
    unint64_t v22 = v6 - v4;
    if (__OFSUB__(v6, v4)) {
      goto LABEL_75;
    }
    uint64_t v7 = v6;
    if (v22 >= 0x20)
    {
      uint64_t v7 = v4 + 32;
      if (__OFADD__(v4, 32))
      {
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        swift_unknownObjectRelease();
LABEL_54:
        specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v2, v9, v4, v5 | (2 * v7));
        goto LABEL_61;
      }
    }
    if (v7 < v4) {
      goto LABEL_76;
    }
    if (v6 < v7) {
      goto LABEL_77;
    }
    if (v7 < 0) {
      goto LABEL_78;
    }
    if (v22 < 0x20) {
      goto LABEL_52;
    }
    if (__OFADD__(v4, 32)) {
      goto LABEL_92;
    }
    if (v6 >= v4 + 32) {
      break;
    }
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    swift_unknownObjectRelease();
  }
  uint64_t v6 = v4 + 32;
LABEL_52:
  if (v6 < v4) {
    goto LABEL_80;
  }
  if (!v5) {
    goto LABEL_54;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v23 = swift_dynamicCastClass();
  if (!v23)
  {
    swift_unknownObjectRelease();
    uint64_t v23 = MEMORY[0x263F8EE78];
  }
  uint64_t v24 = *(void *)(v23 + 16);
  swift_release();
  if (__OFSUB__(v7, v4)) {
    goto LABEL_93;
  }
  if (v24 != v7 - v4) {
    goto LABEL_94;
  }
  if (!swift_dynamicCastClass()) {
    swift_unknownObjectRelease();
  }
LABEL_61:
  swift_unknownObjectRelease();
  return v26;
}

unint64_t specialized PINECircuit.encodeMeasurementAndNormRangeCheck(raw:into:)(float *a1, uint64_t a2, char **a3)
{
  int64_t v8 = v3[9];
  unint64_t v9 = v3[11];
  unint64_t v10 = v3[12];
  uint64_t v11 = v3[13];
  unint64_t v12 = v3[14];
  uint64_t v44 = v11;
  unint64_t v45 = v9;
  uint64_t v13 = *a3;
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v8 > *((void *)v13 + 3) >> 1)
  {
    if (*((void *)v13 + 2) <= v8) {
      int64_t v15 = v8;
    }
    else {
      int64_t v15 = *((void *)v13 + 2);
    }
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 0, v13, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field40>);
  }
  *a3 = v13;
  if (v10 != a2)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    v46[0] = 0xD00000000000001DLL;
    v46[1] = 0x8000000260BFEEB0;
    v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._countAndFlagsBits = 0x746365707865202CLL;
    v32._object = (void *)0xEB000000003D6465;
    String.append(_:)(v32);
    unint64_t v47 = v10;
LABEL_43:
    v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    unint64_t v39 = v46[0];
    unint64_t v40 = v46[1];
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v41 = v39;
    *(void *)(v41 + 8) = v40;
    *(unsigned char *)(v41 + 16) = 1;
    return swift_willThrow();
  }
  unint64_t v43 = v12;
  unint64_t v16 = 0;
  if (a1 && a2)
  {
    uint64_t v17 = 4 * a2;
    while (1)
    {
      unint64_t result = specialized static FieldElement.integerFrom<A>(floatValue:fractionalBitCount:)(v45, *a1);
      if (v4) {
        return result;
      }
      unint64_t result = specialized FieldElement.init(_:)(result, v46);
      unint64_t v19 = v46[0];
      unint64_t v21 = *((void *)v13 + 2);
      unint64_t v20 = *((void *)v13 + 3);
      if (v21 >= v20 >> 1)
      {
        unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1, v13, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field40>);
        uint64_t v13 = (char *)result;
      }
      *((void *)v13 + 2) = v21 + 1;
      *(void *)&v13[8 * v21 + 32] = v19;
      *a3 = v13;
      uint64_t v22 = (v19 * (unsigned __int128)v19) >> 64;
      uint64_t v23 = (0xCFFE47FFFEAFFFFFLL * v19 * v19 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
      BOOL v24 = __CFADD__(-(uint64_t)(v19 * v19), v19 * v19);
      BOOL v25 = __CFADD__(v23, v22);
      uint64_t v26 = v23 + v22;
      if (v25) {
        break;
      }
      if (v26 == -1)
      {
        if (!v24)
        {
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
          return result;
        }
        uint64_t v27 = 0;
LABEL_22:
        BOOL v25 = __CFADD__(v27, 0xFFFFFF00014FFFFFLL);
        unint64_t v28 = v27 - 0xFFFEB00001;
        if (v25) {
          goto LABEL_48;
        }
        if (!v28) {
          goto LABEL_12;
        }
        goto LABEL_24;
      }
      unint64_t v28 = v26 + v24;
      if (v28 >= 0xFFFEB00001) {
        v28 -= 0xFFFEB00001;
      }
      if (!v28) {
        goto LABEL_12;
      }
LABEL_24:
      BOOL v25 = v28 <= 0xFFFEB00001;
      unint64_t v29 = 0xFFFEB00001 - v28;
      if (!v25) {
        goto LABEL_47;
      }
      if (v16 >= v29)
      {
        v16 -= v29;
      }
      else
      {
        BOOL v25 = v29 <= 0xFFFEB00001;
        unint64_t v30 = 0xFFFEB00001 - v29;
        if (!v25) {
          goto LABEL_49;
        }
        BOOL v25 = __CFADD__(v16, v30);
        v16 += v30;
        if (v25) {
          goto LABEL_50;
        }
      }
LABEL_12:
      ++a1;
      v17 -= 4;
      if (!v17) {
        goto LABEL_41;
      }
    }
    uint64_t v27 = v26 + v24;
    goto LABEL_22;
  }
LABEL_41:
  unint64_t v33 = specialized FieldElement.integerValue.getter(v16);
  unint64_t v34 = specialized FieldElement.integerValue.getter(v43);
  if (v34 < v33)
  {
    unint64_t v35 = v34;
    v46[0] = 0;
    v46[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    strcpy((char *)v46, "squared norm=");
    HIWORD(v46[1]) = -4864;
    unint64_t v47 = v33;
    v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._countAndFlagsBits = 0x6B63656863203E20;
    v37._object = (void *)0xEF3D646E756F6220;
    String.append(_:)(v37);
    unint64_t v47 = v35;
    goto LABEL_43;
  }
  specialized static PINECircuit.computeRangeCheck(_:lowerBound:upperBound:)(v46, &v47, v16, 0, v43);
  uint64_t v42 = v47;
  unint64_t result = specialized static FieldElement.encode(_:into:with:)(v46[0], a3, v44);
  if (!v4) {
    return specialized static FieldElement.encode(_:into:with:)(v42, a3, v44);
  }
  return result;
}

uint64_t specialized PINECircuit.encodeMeasurementAndNormRangeCheck(raw:into:)(float *a1, uint64_t a2, char **a3)
{
  int64_t v8 = *(void *)(v3 + 72);
  uint64_t v9 = *(void *)(v3 + 96);
  unint64_t v46 = *(void *)(v3 + 88);
  uint64_t v10 = *(void *)(v3 + 104);
  uint64_t v44 = *(unsigned int *)(v3 + 112);
  uint64_t v11 = *a3;
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v8 > *((void *)v11 + 3) >> 1)
  {
    if (*((void *)v11 + 2) <= v8) {
      int64_t v13 = v8;
    }
    else {
      int64_t v13 = *((void *)v11 + 2);
    }
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 0, v11);
  }
  *a3 = v11;
  if (v9 != a2)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    v47[0] = 0xD00000000000001DLL;
    v47[1] = 0x8000000260BFEEB0;
    v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30._countAndFlagsBits = 0x746365707865202CLL;
    v30._object = (void *)0xEB000000003D6465;
    String.append(_:)(v30);
    uint64_t v48 = v9;
LABEL_51:
    v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    uint64_t v36 = v47[1];
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v37 = v47[0];
    *(void *)(v37 + 8) = v36;
    *(unsigned char *)(v37 + 16) = 1;
    return swift_willThrow();
  }
  unint64_t v45 = (uint64_t *)a3;
  uint64_t v43 = v10;
  unsigned int v14 = 0;
  if (a1 && a2)
  {
    for (uint64_t i = 4 * a2; i; i -= 4)
    {
      uint64_t result = specialized static FieldElement.integerFrom<A>(floatValue:fractionalBitCount:)(v46, *a1);
      if (v4) {
        return result;
      }
      if (result >= 0xFFF00002) {
        goto LABEL_59;
      }
      if (result == -1048575)
      {
        unsigned int v17 = 0;
      }
      else
      {
        uint64_t v18 = 266338049 * result;
        uint64_t v19 = 4293918721 * (1048831 * result);
        BOOL v20 = __CFADD__(v19, v18);
        unint64_t v21 = (unint64_t)(v19 + v18) >> 32;
        if (v20)
        {
          unsigned int v17 = v21 + 0xFFFFF;
          if (v21 >= 0xFFF00001) {
            goto LABEL_58;
          }
        }
        else if (v21 >= 0xFFF00001)
        {
          unsigned int v17 = v21 + 0xFFFFF;
        }
        else
        {
          unsigned int v17 = v21;
        }
      }
      unint64_t v23 = *((void *)v11 + 2);
      unint64_t v22 = *((void *)v11 + 3);
      if (v23 >= v22 >> 1) {
        uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v23 + 1, 1, v11);
      }
      *((void *)v11 + 2) = v23 + 1;
      *(_DWORD *)&v11[4 * v23 + 32] = v17;
      *unint64_t v45 = (uint64_t)v11;
      unint64_t v24 = v17 * (unint64_t)v17;
      uint64_t v25 = 4293918721 * (-1048577 * v24);
      BOOL v20 = __CFADD__(v25, v24);
      unint64_t v26 = (v25 + v24) >> 32;
      if (v20)
      {
        BOOL v20 = __CFADD__(v26, 0xFFFFF);
        LODWORD(v26) = v26 + 0xFFFFF;
        if (v20) {
          goto LABEL_55;
        }
        if (!v26) {
          goto LABEL_12;
        }
      }
      else
      {
        if (v26 >= 0xFFF00001) {
          LODWORD(v26) = v26 + 0xFFFFF;
        }
        if (!v26) {
          goto LABEL_12;
        }
      }
      BOOL v20 = v26 <= 0xFFF00001;
      unsigned int v27 = -1048575 - v26;
      if (!v20)
      {
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        _StringGuts.grow(_:)(40);
        swift_bridgeObjectRelease();
        strcpy((char *)v47, "Integer(");
        v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v39);
        swift_bridgeObjectRelease();
        v40._object = (void *)0x8000000260BFEA10;
        v40._countAndFlagsBits = 0xD00000000000001BLL;
        String.append(_:)(v40);
        v41._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v41);
        swift_bridgeObjectRelease();
        v42._countAndFlagsBits = 41;
        v42._object = (void *)0xE100000000000000;
        String.append(_:)(v42);
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      if (v14 >= v27)
      {
        v14 -= v27;
      }
      else
      {
        BOOL v20 = v27 <= 0xFFF00001;
        unsigned int v28 = -1048575 - v27;
        if (!v20) {
          goto LABEL_56;
        }
        BOOL v20 = __CFADD__(v14, v28);
        v14 += v28;
        if (v20) {
          goto LABEL_57;
        }
      }
LABEL_12:
      ++a1;
    }
  }
  if (((v14 + 4293918721u * (unint64_t)(-1048577 * v14)) >> 32) >= 0xFFF00001) {
    unsigned int v31 = 0;
  }
  else {
    unsigned int v31 = (v14 + 4293918721u * (unint64_t)(-1048577 * v14)) >> 32;
  }
  if (((v44 + 4293918721u * (unint64_t)(-1048577 * v44)) >> 32) >= 0xFFF00001) {
    unsigned int v32 = 0;
  }
  else {
    unsigned int v32 = (v44 + 4293918721u * (unint64_t)(-1048577 * v44)) >> 32;
  }
  if (v32 < v31)
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    strcpy((char *)v47, "squared norm=");
    HIWORD(v47[1]) = -4864;
    v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._countAndFlagsBits = 0x6B63656863203E20;
    v34._object = (void *)0xEF3D646E756F6220;
    String.append(_:)(v34);
    LODWORD(v48) = v32;
    goto LABEL_51;
  }
  specialized static PINECircuit.computeRangeCheck(_:lowerBound:upperBound:)(v47, &v48, v14, 0, v44);
  uint64_t v38 = v48;
  uint64_t result = specialized static FieldElement.encode(_:into:with:)(LODWORD(v47[0]), v45, v43);
  if (!v4) {
    return specialized static FieldElement.encode(_:into:with:)(v38, v45, v43);
  }
  return result;
}

unint64_t specialized PINECircuit.encodeMeasurementAndNormRangeCheck(raw:into:)(float *a1, uint64_t a2, uint64_t *a3)
{
  int64_t v8 = v3[9];
  unint64_t v9 = v3[11];
  unint64_t v10 = v3[12];
  uint64_t v11 = v3[13];
  unint64_t v12 = v3[14];
  uint64_t v44 = v11;
  unint64_t v45 = v9;
  int64_t v13 = (char *)*a3;
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v8 > *((void *)v13 + 3) >> 1)
  {
    if (*((void *)v13 + 2) <= v8) {
      int64_t v15 = v8;
    }
    else {
      int64_t v15 = *((void *)v13 + 2);
    }
    int64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 0, v13, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
  }
  *a3 = (uint64_t)v13;
  if (v10 != a2)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    v46[0] = 0xD00000000000001DLL;
    v46[1] = 0x8000000260BFEEB0;
    v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._countAndFlagsBits = 0x746365707865202CLL;
    v32._object = (void *)0xEB000000003D6465;
    String.append(_:)(v32);
    unint64_t v47 = v10;
LABEL_43:
    v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    unint64_t v39 = v46[0];
    unint64_t v40 = v46[1];
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v41 = v39;
    *(void *)(v41 + 8) = v40;
    *(unsigned char *)(v41 + 16) = 1;
    return swift_willThrow();
  }
  unint64_t v43 = v12;
  unint64_t v16 = 0;
  if (a1 && a2)
  {
    uint64_t v17 = 4 * a2;
    while (1)
    {
      unint64_t result = specialized static FieldElement.integerFrom<A>(floatValue:fractionalBitCount:)(v45, *a1);
      if (v4) {
        return result;
      }
      unint64_t result = specialized FieldElement.init(_:)(result, v46);
      unint64_t v19 = v46[0];
      unint64_t v21 = *((void *)v13 + 2);
      unint64_t v20 = *((void *)v13 + 3);
      if (v21 >= v20 >> 1)
      {
        unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1, v13, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
        int64_t v13 = (char *)result;
      }
      *((void *)v13 + 2) = v21 + 1;
      *(void *)&v13[8 * v21 + 32] = v19;
      *a3 = (uint64_t)v13;
      uint64_t v22 = (v19 * (unsigned __int128)v19) >> 64;
      uint64_t v23 = (0xFFFFFFFEFFFFFFFFLL * v19 * v19 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      BOOL v24 = __CFADD__(-(uint64_t)(v19 * v19), v19 * v19);
      BOOL v25 = __CFADD__(v23, v22);
      uint64_t v26 = v23 + v22;
      if (v25) {
        break;
      }
      if (v26 != -1)
      {
        unint64_t v28 = v26 + v24;
        if (v28 >= 0xFFFFFFFF00000001) {
          v28 += 0xFFFFFFFFLL;
        }
        if (!v28) {
          goto LABEL_12;
        }
        goto LABEL_24;
      }
      if (v24)
      {
        uint64_t v27 = 0;
        goto LABEL_22;
      }
      unint64_t v29 = 0xFFFFFFFE00000003;
LABEL_26:
      if (v16 >= v29)
      {
        v16 -= v29;
      }
      else
      {
        BOOL v25 = v29 <= 0xFFFFFFFF00000001;
        unint64_t v30 = 0xFFFFFFFF00000001 - v29;
        if (!v25) {
          goto LABEL_48;
        }
        BOOL v25 = __CFADD__(v16, v30);
        v16 += v30;
        if (v25) {
          goto LABEL_49;
        }
      }
LABEL_12:
      ++a1;
      v17 -= 4;
      if (!v17) {
        goto LABEL_41;
      }
    }
    uint64_t v27 = v26 + v24;
LABEL_22:
    BOOL v25 = __CFADD__(v27, 0xFFFFFFFFLL);
    unint64_t v28 = v27 + 0xFFFFFFFFLL;
    if (v25) {
      goto LABEL_47;
    }
    if (!v28) {
      goto LABEL_12;
    }
LABEL_24:
    BOOL v25 = v28 <= 0xFFFFFFFF00000001;
    unint64_t v29 = 0xFFFFFFFF00000001 - v28;
    if (!v25)
    {
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      return result;
    }
    goto LABEL_26;
  }
LABEL_41:
  unint64_t v33 = specialized FieldElement.integerValue.getter(v16);
  unint64_t v34 = specialized FieldElement.integerValue.getter(v43);
  if (v34 < v33)
  {
    unint64_t v35 = v34;
    v46[0] = 0;
    v46[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    strcpy((char *)v46, "squared norm=");
    HIWORD(v46[1]) = -4864;
    unint64_t v47 = v33;
    v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._countAndFlagsBits = 0x6B63656863203E20;
    v37._object = (void *)0xEF3D646E756F6220;
    String.append(_:)(v37);
    unint64_t v47 = v35;
    goto LABEL_43;
  }
  specialized static PINECircuit.computeRangeCheck(_:lowerBound:upperBound:)(v46, &v47, v16, 0, v43);
  uint64_t v42 = v47;
  unint64_t result = specialized static FieldElement.encode(_:into:with:)(v46[0], a3, v44);
  if (!v4) {
    return specialized static FieldElement.encode(_:into:with:)(v42, a3, v44);
  }
  return result;
}

void *specialized PINECircuit.appendWraparoundCheck<A>(into:random:)(char **a1, uint64_t a2)
{
  unint64_t v8 = v2[12];
  if ((v8 & 0x8000000000000000) != 0)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  uint64_t v7 = a1;
  uint64_t v9 = (uint64_t)*a1;
  if (*((void *)*a1 + 2) < v8)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  uint64_t v4 = v2[16];
  if (v4 < 0)
  {
LABEL_62:
    __break(1u);
LABEL_63:
    swift_once();
    goto LABEL_6;
  }
  uint64_t v6 = (char *)v2[17];
  uint64_t v42 = v2[15];
  unint64_t v43 = v2[18];
  uint64_t v11 = (2 * v8) | 1;
  swift_bridgeObjectRetain();
  swift_retain();
  unint64_t v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF7Field40Vs5NeverOTg50171_s4VDAF11PINECircuitPAAE21wraparoundDotProducts_6randomSay1FQzGs10ArraySliceVyAGG_AA25WraparoundJointRandomnessCyqd__AGGtAA12VDAFProtocolRd__lFAGSiXEfU_AA15PINEMainCircuits3AA7E48VSRySfGG_AA4PINEVyAstA19XofHmacSha256Aes128CGTG5s0qR0VyAIGAG0vwX0CyAG4PINEVyAISRySfGAG19XofHmacSha256Aes128CGAIGTf1cn_nTf4ngg_nTm(0, v4, v9, v9 + 32, 0, v11, a2, (uint64_t)v45, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void *(*)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))specialized closure #1 in PINECircuit.wraparoundDotProducts<A>(_:random:));
  uint64_t v4 = v3;
  swift_release();
  uint64_t v41 = v5[2];
  if (!v41)
  {
    if (!v6) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
  uint64_t v12 = one-time initialization token for one;
  swift_bridgeObjectRetain();
  if (v12 != -1) {
    goto LABEL_63;
  }
LABEL_6:
  uint64_t v13 = 0;
  unsigned int v14 = 0;
  unint64_t v15 = v43;
  unint64_t v39 = static Field40.one - v43;
  unint64_t v40 = static Field40.one;
  uint64_t v36 = static Field40.one + 0xFFFEB00001 - v43;
  BOOL v16 = __CFADD__(static Field40.one, 0xFFFEB00001 - v43);
  BOOL v35 = v16;
  Swift::String v37 = v5;
  Swift::String v38 = v7;
  do
  {
    uint64_t v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    unint64_t v18 = v5[v13 + 4];
    unint64_t v19 = v39;
    if (v40 < v15)
    {
      if (v43 > 0xFFFEB00001) {
        goto LABEL_54;
      }
      unint64_t v19 = v36;
      if (v35) {
        goto LABEL_55;
      }
    }
    uint64_t v20 = v18 - v19;
    if (v18 < v19)
    {
      unint64_t v21 = 0xFFFEB00001 - v19;
      if (v19 > 0xFFFEB00001) {
        goto LABEL_56;
      }
      BOOL v22 = __CFADD__(v18, v21);
      uint64_t v20 = v18 + v21;
      if (v22) {
        goto LABEL_57;
      }
    }
    if (__CFADD__(-v20, v20)) {
      unint64_t v23 = ((0xCFFE47FFFEAFFFFFLL * v20 * (unsigned __int128)0xFFFEB00001uLL) >> 64) + 1;
    }
    else {
      unint64_t v23 = (0xCFFE47FFFEAFFFFFLL * v20 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
    }
    if (v23 >= 0xFFFEB00001) {
      unint64_t v24 = 0;
    }
    else {
      unint64_t v24 = v23;
    }
    unint64_t v25 = v15 - v19;
    if (v15 < v19)
    {
      BOOL v22 = v19 <= 0xFFFEB00001;
      unint64_t v26 = 0xFFFEB00001 - v19;
      if (!v22) {
        goto LABEL_58;
      }
      unint64_t v25 = v15 + v26;
      if (__CFADD__(v15, v26)) {
        goto LABEL_59;
      }
    }
    if (__CFADD__(-(uint64_t)v25, v25)) {
      unint64_t v27 = ((0xCFFE47FFFEAFFFFFLL * v25 * (unsigned __int128)0xFFFEB00001uLL) >> 64) + 1;
    }
    else {
      unint64_t v27 = (0xCFFE47FFFEAFFFFFLL * v25 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
    }
    if (v27 >= 0xFFFEB00001) {
      unint64_t v27 = 0;
    }
    unint64_t v29 = v27 >= v24 && (uint64_t)v14 < (uint64_t)v6;
    specialized static FieldElement.encode(_:into:with:)(v24, v7, v42);
    if (v4)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_51;
    }
    uint64_t v4 = (uint64_t)v6;
    specialized FieldElement.init(_:)(v29, (unint64_t *)&v44);
    unint64_t v5 = v44;
    uint64_t v6 = *v7;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v6 + 2) + 1, 1, v6, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field40>);
    }
    unint64_t v31 = *((void *)v6 + 2);
    unint64_t v30 = *((void *)v6 + 3);
    if (v31 >= v30 >> 1) {
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v31 + 1, 1, v6, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field40>);
    }
    *((void *)v6 + 2) = v31 + 1;
    *(void *)&v6[8 * v31 + 32] = v5;
    uint64_t v7 = v38;
    *Swift::String v38 = v6;
    BOOL v32 = __OFADD__(v14, v29);
    v14 += v29;
    if (v32) {
      goto LABEL_53;
    }
    ++v13;
    unint64_t v5 = v37;
    uint64_t v6 = (char *)v4;
    uint64_t v4 = 0;
    unint64_t v15 = v43;
  }
  while (v17 != v41);
  swift_bridgeObjectRelease();
  if (v14 != v6)
  {
LABEL_50:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v33 = 0xD000000000000023;
    *(void *)(v33 + 8) = 0x8000000260BFEE40;
    *(unsigned char *)(v33 + 16) = 4;
    swift_willThrow();
  }
LABEL_51:
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t specialized PINECircuit.appendWraparoundCheck<A>(into:random:)(uint64_t *a1, uint64_t a2)
{
  unint64_t v8 = *(void *)(v2 + 96);
  if ((v8 & 0x8000000000000000) != 0)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v7 = a1;
  uint64_t v9 = *a1;
  if (*(void *)(*a1 + 16) < v8)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v10 = *(void *)(v2 + 128);
  if (v10 < 0)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    swift_once();
    goto LABEL_6;
  }
  uint64_t v35 = *(void *)(v2 + 120);
  unint64_t v4 = *(void *)(v2 + 136);
  unsigned int v36 = *(_DWORD *)(v2 + 144);
  unint64_t v12 = (2 * v8) | 1;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF7Field32Vs5NeverOTg50171_s4VDAF11PINECircuitPAAE21wraparoundDotProducts_6randomSay1FQzGs10ArraySliceVyAGG_AA25WraparoundJointRandomnessCyqd__AGGtAA12VDAFProtocolRd__lFAGSiXEfU_AA15PINEMainCircuits3AA7E48VSRySfGG_AA4PINEVyAstA19XofHmacSha256Aes128CGTG5s0qR0VyAIGAG0vwX0CyAG4PINEVyAISRySfGAG19XofHmacSha256Aes128CGAIGTf1cn_nTf4ngg_n(0, v10, v9, v9 + 32, 0, v12, a2);
  uint64_t v6 = v3;
  swift_release();
  uint64_t v34 = *(void *)(v5 + 16);
  if (!v34)
  {
    if (!v4) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  uint64_t v13 = one-time initialization token for one;
  swift_bridgeObjectRetain();
  if (v13 != -1) {
    goto LABEL_35;
  }
LABEL_6:
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  unsigned int v16 = v36;
  unsigned int v32 = static Field32.one - v36;
  unsigned int v33 = static Field32.one;
  int v29 = static Field32.one + -1048575 - v36;
  BOOL v17 = __CFADD__(static Field32.one, -1048575 - v36);
  BOOL v28 = v17;
  uint64_t v30 = v5;
  unint64_t v31 = v7;
  do
  {
    uint64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    unsigned int v19 = v32;
    if (v33 < v16)
    {
      if (v36 > 0xFFF00001) {
        goto LABEL_30;
      }
      unsigned int v19 = v29;
      if (v28) {
        goto LABEL_31;
      }
    }
    unsigned int v20 = specialized static PINECircuit.computeRangeCheck(_:lowerBound:upperBound:)(&v38, &v37, *(_DWORD *)(v5 + 4 * v14 + 32), v19, v16);
    unint64_t v21 = v4;
    BOOL v22 = v15 < (uint64_t)v4;
    specialized static FieldElement.encode(_:into:with:)(v38, v7, v35);
    if (v6)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_27;
    }
    uint64_t v23 = v20 & v22;
    specialized FieldElement.init(_:)(v23, &v38);
    uint64_t v5 = v38;
    uint64_t v6 = *v7;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v6 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1, (char *)v6);
    }
    unint64_t v4 = *(void *)(v6 + 16);
    unint64_t v24 = *(void *)(v6 + 24);
    if (v4 >= v24 >> 1) {
      uint64_t v6 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v4 + 1, 1, (char *)v6);
    }
    *(void *)(v6 + 16) = v4 + 1;
    *(_DWORD *)(v6 + 4 * v4 + 32) = v5;
    uint64_t v7 = v31;
    uint64_t *v31 = v6;
    BOOL v25 = __OFADD__(v15, v23);
    v15 += v23;
    if (v25) {
      goto LABEL_29;
    }
    ++v14;
    uint64_t v5 = v30;
    unint64_t v4 = v21;
    uint64_t v6 = 0;
    unsigned int v16 = v36;
  }
  while (v18 != v34);
  swift_bridgeObjectRelease();
  if (v15 != v21)
  {
LABEL_26:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v26 = 0xD000000000000023;
    *(void *)(v26 + 8) = 0x8000000260BFEE40;
    *(unsigned char *)(v26 + 16) = 4;
    swift_willThrow();
  }
LABEL_27:
  swift_bridgeObjectRelease();
  return v5;
}

unint64_t specialized PINECircuit.appendWraparoundCheck<A>(into:random:)(uint64_t *a1, uint64_t a2)
{
  unint64_t v9 = v2[12];
  if ((v9 & 0x8000000000000000) != 0)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  unint64_t v8 = a1;
  uint64_t v10 = *a1;
  if (*(void *)(*a1 + 16) < v9)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  uint64_t v4 = v2[16];
  if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v42 = v2[15];
    int64_t v6 = v2[17];
    unint64_t v7 = v2[18];
    uint64_t v12 = (2 * v9) | 1;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t v5 = (unint64_t)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF7Field40Vs5NeverOTg50171_s4VDAF11PINECircuitPAAE21wraparoundDotProducts_6randomSay1FQzGs10ArraySliceVyAGG_AA25WraparoundJointRandomnessCyqd__AGGtAA12VDAFProtocolRd__lFAGSiXEfU_AA15PINEMainCircuits3AA7E48VSRySfGG_AA4PINEVyAstA19XofHmacSha256Aes128CGTG5s0qR0VyAIGAG0vwX0CyAG4PINEVyAISRySfGAG19XofHmacSha256Aes128CGAIGTf1cn_nTf4ngg_nTm(0, v4, v10, v10 + 32, 0, v12, a2, (uint64_t)v44, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void *(*)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))specialized closure #1 in PINECircuit.wraparoundDotProducts<A>(_:random:));
    uint64_t v4 = v3;
    swift_release();
    uint64_t v41 = *(void *)(v5 + 16);
    if (!v41)
    {
      if (v6) {
        goto LABEL_50;
      }
      goto LABEL_51;
    }
    uint64_t v13 = one-time initialization token for one;
    swift_bridgeObjectRetain();
    if (v13 == -1) {
      goto LABEL_6;
    }
    goto LABEL_63;
  }
LABEL_62:
  __break(1u);
LABEL_63:
  swift_once();
LABEL_6:
  uint64_t v14 = 0;
  int64_t v15 = 0;
  unint64_t v39 = static Field64.one - v7;
  unint64_t v40 = static Field64.one;
  BOOL v35 = v7 > 0xFFFFFFFF00000001;
  unint64_t v34 = static Field64.one + 0xFFFFFFFF00000001 - v7;
  BOOL v16 = __CFADD__(static Field64.one, 0xFFFFFFFF00000001 - v7);
  BOOL v33 = v16;
  int v37 = (void *)v5;
  unsigned int v38 = v8;
  unint64_t v36 = v7;
  do
  {
    uint64_t v17 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    unint64_t v18 = *(void *)(v5 + 8 * v14 + 32);
    unint64_t v19 = v39;
    if (v40 < v7)
    {
      if (v35) {
        goto LABEL_54;
      }
      unint64_t v19 = v34;
      if (v33) {
        goto LABEL_55;
      }
    }
    uint64_t v20 = v18 - v19;
    if (v18 < v19)
    {
      unint64_t v21 = 0xFFFFFFFF00000001 - v19;
      if (v19 > 0xFFFFFFFF00000001) {
        goto LABEL_56;
      }
      BOOL v22 = __CFADD__(v18, v21);
      uint64_t v20 = v18 + v21;
      if (v22) {
        goto LABEL_57;
      }
    }
    unint64_t v23 = (0xFFFFFFFEFFFFFFFFLL * v20 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
    if (!__CFADD__(-v20, v20)) {
      goto LABEL_21;
    }
    if (v23 <= 0xFFFFFFFEFFFFFFFFLL)
    {
      ++v23;
LABEL_21:
      unint64_t v24 = v7 - v19;
      if (v7 >= v19) {
        goto LABEL_27;
      }
      goto LABEL_24;
    }
    unint64_t v23 = 0;
    unint64_t v24 = v7 - v19;
    if (v7 >= v19) {
      goto LABEL_27;
    }
LABEL_24:
    BOOL v22 = v19 <= 0xFFFFFFFF00000001;
    unint64_t v25 = 0xFFFFFFFF00000001 - v19;
    if (!v22) {
      goto LABEL_58;
    }
    unint64_t v24 = v7 + v25;
    if (__CFADD__(v7, v25)) {
      goto LABEL_59;
    }
LABEL_27:
    unint64_t v26 = (0xFFFFFFFEFFFFFFFFLL * v24 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
    if (__CFADD__(-(uint64_t)v24, v24))
    {
      if (v26 > 0xFFFFFFFEFFFFFFFFLL) {
        unint64_t v26 = 0;
      }
      else {
        ++v26;
      }
    }
    unint64_t v28 = v26 >= v23 && v15 < v6;
    specialized static FieldElement.encode(_:into:with:)(v23, v8, v42);
    if (v4)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_51;
    }
    uint64_t v4 = v6;
    specialized FieldElement.init(_:)(v28, (unint64_t *)&v43);
    int64_t v6 = v43;
    unint64_t v7 = *v8;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v7 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1, (char *)v7, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
    }
    unint64_t v5 = *(void *)(v7 + 16);
    unint64_t v29 = *(void *)(v7 + 24);
    if (v5 >= v29 >> 1) {
      unint64_t v7 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v5 + 1, 1, (char *)v7, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
    }
    *(void *)(v7 + 16) = v5 + 1;
    *(void *)(v7 + 8 * v5 + 32) = v6;
    unint64_t v8 = v38;
    *unsigned int v38 = v7;
    BOOL v30 = __OFADD__(v15, v28);
    v15 += v28;
    if (v30) {
      goto LABEL_53;
    }
    ++v14;
    unint64_t v7 = v36;
    unint64_t v5 = (unint64_t)v37;
    int64_t v6 = v4;
    uint64_t v4 = 0;
  }
  while (v17 != v41);
  swift_bridgeObjectRelease();
  if (v15 != v6)
  {
LABEL_50:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v31 = 0xD000000000000023;
    *(void *)(v31 + 8) = 0x8000000260BFEE40;
    *(unsigned char *)(v31 + 16) = 4;
    swift_willThrow();
  }
LABEL_51:
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t specialized FullyLinearProof.proveRandLength.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  specialized Gadget.wirePolynomialLength.getter();
  specialized Gadget.gadgetPolynomialLength.getter();
  uint64_t v10 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0);
  uint64_t v2 = v10;
  unint64_t v4 = *(void *)(v10 + 16);
  unint64_t v3 = *(void *)(v10 + 24);
  unint64_t v5 = v4 + 1;
  if (v4 >= v3 >> 1)
  {
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1);
    uint64_t v2 = v10;
  }
  unint64_t v3 = 0;
  uint64_t v6 = 0;
  *(void *)(v2 + 16) = v5;
  *(void *)(v2 + 8 * v4 + 32) = v1;
  do
  {
    uint64_t v7 = *(void *)(v2 + 8 * v3 + 32);
    BOOL v8 = __OFADD__(v6, v7);
    v6 += v7;
    if (v8)
    {
      __break(1u);
      goto LABEL_7;
    }
    ++v3;
  }
  while (v5 != v3);
  swift_release();
  return v6;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v10;

  uint64_t v1 = *(void *)(v0 + 8);
  specialized Gadget.wirePolynomialLength.getter();
  specialized Gadget.gadgetPolynomialLength.getter();
  uint64_t v10 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0);
  uint64_t v2 = v10;
  unint64_t v4 = *(void *)(v10 + 16);
  unint64_t v3 = *(void *)(v10 + 24);
  unint64_t v5 = v4 + 1;
  if (v4 >= v3 >> 1)
  {
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1);
    uint64_t v2 = v10;
  }
  unint64_t v3 = 0;
  uint64_t v6 = 0;
  *(void *)(v2 + 16) = v5;
  *(void *)(v2 + 8 * v4 + 32) = v1;
  do
  {
    uint64_t v7 = *(void *)(v2 + 8 * v3 + 32);
    BOOL v8 = __OFADD__(v6, v7);
    v6 += v7;
    if (v8)
    {
      __break(1u);
      goto LABEL_7;
    }
    ++v3;
  }
  while (v5 != v3);
  swift_release();
  return v6;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v10;

  uint64_t v1 = *(void *)(v0 + 48);
  specialized Gadget.wirePolynomialLength.getter();
  specialized Gadget.gadgetPolynomialLength.getter();
  uint64_t v10 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0);
  uint64_t v2 = v10;
  unint64_t v4 = *(void *)(v10 + 16);
  unint64_t v3 = *(void *)(v10 + 24);
  unint64_t v5 = v4 + 1;
  if (v4 >= v3 >> 1)
  {
LABEL_7:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1);
    uint64_t v2 = v10;
  }
  unint64_t v3 = 0;
  uint64_t v6 = 0;
  *(void *)(v2 + 16) = v5;
  *(void *)(v2 + 8 * v4 + 32) = v1;
  do
  {
    uint64_t v7 = *(void *)(v2 + 8 * v3 + 32);
    BOOL v8 = __OFADD__(v6, v7);
    v6 += v7;
    if (v8)
    {
      __break(1u);
      goto LABEL_7;
    }
    ++v3;
  }
  while (v5 != v3);
  swift_release();
  return v6;
}

uint64_t specialized FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:)(char **a1, unint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v6 = *(void *)(v4 + 72);
  if (*(void *)(a2 + 16) != v6)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    unint64_t v87 = 0xD00000000000001BLL;
    unint64_t v88 = 0x8000000260BFEB20;
    v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._countAndFlagsBits = 540877088;
    v31._object = (void *)0xE400000000000000;
    String.append(_:)(v31);
    v86[0] = v6;
LABEL_19:
    v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    unint64_t v37 = v88;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v38 = v87;
    *(void *)(v38 + 8) = v37;
    *(unsigned char *)(v38 + 16) = 2;
    return swift_willThrow();
  }
  uint64_t v11 = *(void *)(a3 + 16);
  if (v11 != specialized FullyLinearProof.proveRandLength.getter())
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    unint64_t v87 = 0xD000000000000019;
    unint64_t v88 = 0x8000000260BFEE20;
    v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._countAndFlagsBits = 540877088;
    v33._object = (void *)0xE400000000000000;
    String.append(_:)(v33);
    v86[0] = specialized FullyLinearProof.proveRandLength.getter();
    goto LABEL_19;
  }
  if (a4[2] != 3)
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    unint64_t v87 = 0xD000000000000019;
    unint64_t v88 = 0x8000000260BFEB80;
    v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 540877088;
    v35._object = (void *)0xE400000000000000;
    String.append(_:)(v35);
    v86[0] = 3;
    goto LABEL_19;
  }
  unint64_t v77 = a2;
  unint64_t v82 = a4;
  unint64_t v79 = a1;
  unint64_t v87 = a3;
  unint64_t v88 = a3 + 32;
  uint64_t v89 = 0;
  uint64_t v90 = (2 * v11) | 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_260BF9FF0;
  long long v13 = *(_OWORD *)(v4 + 24);
  long long v91 = *(_OWORD *)(v4 + 8);
  long long v92 = v13;
  long long v93 = *(_OWORD *)(v4 + 40);
  uint64_t v14 = *((void *)&v91 + 1);
  uint64_t v81 = v13;
  uint64_t v15 = v93;
  uint64_t v16 = specialized Gadget.wirePolynomialLength.getter();
  uint64_t v17 = specialized Gadget.gadgetPolynomialLength.getter();
  uint64_t v80 = v91;
  *(void *)(inited + 32) = v91;
  *(void *)(inited + 40) = v14;
  *(void *)(inited + 48) = v15;
  *(void *)(inited + 56) = v16;
  *(void *)(inited + 64) = v17;
  swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay4VDAF16GadgetParametersVG_AF0E10WireInputsCyAF7Field40VGs5NeverOTg5096_s4VDAF16FullyLinearProofPAAE5prove4into11measurement0E4Rand05jointH0yqd__z_Say1FQzGA2KtKSmRd__7b15Qyd__AJRSlFAA16egh11CyAJGAA0K10f30VXEfU_AA15PINEMainCircuitVyAA7I18VSRySfGG_SayAVGTG5s10ArraySliceVyAMGTf1cn_nTm(inited, &v87);
  unint64_t v19 = v18;
  uint64_t v20 = v5;
  swift_setDeallocating();
  if (v19 >> 62) {
    goto LABEL_126;
  }
  for (uint64_t i = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10); ; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v22 = MEMORY[0x263F8EE78];
    unint64_t v23 = v79;
    uint64_t v78 = i;
    if (!i) {
      goto LABEL_20;
    }
    uint64_t v84 = MEMORY[0x263F8EE78];
    uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, i & ~(i >> 63), 0);
    uint64_t v25 = v78;
    if (v78 < 0) {
      break;
    }
    uint64_t v26 = 0;
    uint64_t v22 = v84;
    do
    {
      if ((v19 & 0xC000000000000001) != 0)
      {
        uint64_t v27 = MEMORY[0x2612245F0](v26, v19);
      }
      else
      {
        uint64_t v27 = *(void *)(v19 + 8 * v26 + 32);
        swift_retain();
      }
      uint64_t v84 = v22;
      unint64_t v29 = *(void *)(v22 + 16);
      unint64_t v28 = *(void *)(v22 + 24);
      if (v29 >= v28 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1);
        uint64_t v25 = v78;
        uint64_t v22 = v84;
      }
      ++v26;
      *(void *)(v22 + 16) = v29 + 1;
      *(void *)(v22 + 8 * v29 + 32) = v27;
    }
    while (v25 != v26);
    unint64_t v23 = v79;
LABEL_20:
    specialized PINEMainCircuit.evaluate(measurement:jointRand:numOfShares:for:)(v77, v82, 1uLL, v22, v86);
    if (v20)
    {
      swift_bridgeObjectRelease();
LABEL_22:
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease();
    }
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v39 = v78;
    if (v78 < 0) {
      goto LABEL_128;
    }
    if (!v78) {
      goto LABEL_22;
    }
    if (!v81) {
      goto LABEL_129;
    }
    uint64_t v40 = 0;
    unint64_t v82 = (void *)(v19 & 0xC000000000000001);
    while (1)
    {
      if (v40 == v39) {
        goto LABEL_116;
      }
      unint64_t v42 = specialized Gadget.wirePolynomialLength.getter();
      specialized Gadget.gadgetPolynomialLength.getter();
      if (v40) {
        goto LABEL_117;
      }
      specialized Gadget.wirePolynomialLength.getter();
      specialized Gadget.gadgetPolynomialLength.getter();
      if (v80 < 0) {
        goto LABEL_118;
      }
      unint64_t v77 = 0;
      if (v80) {
        break;
      }
      uint64_t v44 = (void *)MEMORY[0x263F8EE78];
LABEL_59:
      specialized Gadget.wirePolynomialLength.getter();
      uint64_t result = specialized Gadget.gadgetPolynomialLength.getter();
      uint64_t v20 = (char *)result;
      if (v81 < 1)
      {
        unint64_t v62 = &outlined read-only object #0 of specialized FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:);
      }
      else
      {
        uint64_t v61 = v44[2];
        unint64_t v62 = &outlined read-only object #0 of specialized FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:);
        if (v61)
        {
          int64_t v63 = 0;
          uint64_t v64 = v44 + 4;
          BOOL v65 = 1;
          while (1)
          {
            uint64_t v66 = v61 - v63;
            BOOL v67 = __OFSUB__(v61, v63);
            uint64_t v68 = v63 + v81;
            if (__OFADD__(v63, v81))
            {
              if (v67) {
                goto LABEL_114;
              }
              if (v66 < 0) {
                goto LABEL_130;
              }
              BOOL v69 = v66 < v81;
              int64_t v70 = v66 >= v81 ? v63 + v81 : v61;
              if (!v69) {
                goto LABEL_130;
              }
              uint64_t v68 = 0x7FFFFFFFFFFFFFFFLL;
              if (v70 < v63) {
                goto LABEL_108;
              }
            }
            else
            {
              if (v67) {
                goto LABEL_115;
              }
              if (v66 < 0)
              {
                int64_t v70 = v63 + v81;
                if (v68 < v63) {
                  goto LABEL_108;
                }
              }
              else
              {
                if (v66 >= v81) {
                  int64_t v70 = v63 + v81;
                }
                else {
                  int64_t v70 = v61;
                }
                if (v70 < v63) {
                  goto LABEL_108;
                }
              }
            }
            if (!v65) {
              goto LABEL_109;
            }
            if (v63 < 0) {
              break;
            }
            if (v61 < v70) {
              goto LABEL_111;
            }
            if (v63 >= (unint64_t)v70) {
              goto LABEL_112;
            }
            if (v63 + 1 >= (unint64_t)v70) {
              goto LABEL_113;
            }
            uint64_t v71 = v64[v63];
            uint64_t v72 = v64[v63 + 1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            specialized static Polynomial.* infix(_:_:)(v71, v72, &v85);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            specialized static Polynomial.+ infix(_:_:)((uint64_t)v62, (uint64_t)v85, (uint64_t *)&v83);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            unint64_t v62 = v83;
            BOOL v65 = v61 >= v68;
            int64_t v63 = v68;
            if (v68 >= v61) {
              goto LABEL_92;
            }
          }
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
          goto LABEL_124;
        }
      }
LABEL_92:
      swift_bridgeObjectRelease();
      int64_t v73 = v62[2];
      if (!v73) {
        goto LABEL_119;
      }
      uint64_t v40 = 1;
      unint64_t v74 = v62[2];
      unint64_t v23 = v79;
      while (!v62[v74 + 3])
      {
        if (v74-- <= 1)
        {
          unint64_t v74 = 0;
          goto LABEL_99;
        }
      }
      if ((v74 & 0x8000000000000000) != 0) {
        goto LABEL_120;
      }
      if (v73 < (uint64_t)v74) {
        goto LABEL_121;
      }
LABEL_99:
      specialized Array.append<A>(contentsOf:)((uint64_t)v62, (uint64_t)(v62 + 4), 0, (2 * v74) | 1, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field40>);
      BOOL v75 = __OFSUB__(v20, v74);
      unint64_t v76 = (unint64_t)&v20[-v74];
      if (v75) {
        goto LABEL_122;
      }
      if ((v76 & 0x8000000000000000) != 0) {
        goto LABEL_123;
      }
      if (v76)
      {
        uint64_t v41 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v41 + 16) = v76;
        bzero((void *)(v41 + 32), 8 * v76);
      }
      else
      {
        uint64_t v41 = MEMORY[0x263F8EE78];
      }
      specialized Array.append<A>(contentsOf:)(v41, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field40>);
      uint64_t v39 = v78;
      if (v78 == 1) {
        goto LABEL_22;
      }
    }
    if (v82 || *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      if ((v42 & 0x8000000000000000) != 0) {
        goto LABEL_125;
      }
      unint64_t v43 = 0;
      uint64_t v20 = *v23;
      uint64_t v44 = (void *)MEMORY[0x263F8EE78];
      while (1)
      {
        if (v82)
        {
          uint64_t v45 = MEMORY[0x2612245F0](0, v19);
        }
        else
        {
          uint64_t v45 = *(void *)(v19 + 32);
          swift_retain();
        }
        swift_beginAccess();
        uint64_t v46 = *(void *)(v45 + 32);
        if (v43 >= *(void *)(v46 + 16)) {
          break;
        }
        uint64_t v47 = *(void *)(v46 + 8 * v43 + 32);
        swift_bridgeObjectRetain();
        swift_release();
        if (*(void *)(v47 + 16) - 1 >= v42) {
          goto LABEL_104;
        }
        uint64_t v48 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v48 + 16) = v42;
        bzero((void *)(v48 + 32), 8 * v42);
        uint64_t v85 = (char *)v48;
        specialized inverseDiscreteFourierTransform<A, B, C>(input:size:output:)(v47, v42, &v85);
        uint64_t v49 = v85;
        uint64_t v50 = *((void *)v85 + 2);
        swift_bridgeObjectRelease();
        if (!v50) {
          goto LABEL_105;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v44[2] + 1, 1, v44, &demangling cache variable for type metadata for _ContiguousArrayStorage<Polynomial<Field40>>, &demangling cache variable for type metadata for Polynomial<Field40>);
        }
        unint64_t v52 = v44[2];
        unint64_t v51 = v44[3];
        if (v52 >= v51 >> 1) {
          uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v51 > 1), v52 + 1, 1, v44, &demangling cache variable for type metadata for _ContiguousArrayStorage<Polynomial<Field40>>, &demangling cache variable for type metadata for Polynomial<Field40>);
        }
        v44[2] = v52 + 1;
        v44[v52 + 4] = v49;
        if (v82)
        {
          uint64_t v53 = MEMORY[0x2612245F0](0, v19);
        }
        else
        {
          uint64_t v53 = *(void *)(v19 + 32);
          swift_retain();
        }
        swift_beginAccess();
        uint64_t v54 = *(void *)(v53 + 32);
        if (v43 >= *(void *)(v54 + 16)) {
          goto LABEL_106;
        }
        uint64_t v55 = *(void *)(v54 + 8 * v43 + 32);
        if (!*(void *)(v55 + 16)) {
          goto LABEL_107;
        }
        uint64_t v56 = *(void *)(v55 + 32);
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v20 + 2) + 1, 1, v20, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field40>);
        }
        unint64_t v58 = *((void *)v20 + 2);
        unint64_t v57 = *((void *)v20 + 3);
        uint64_t v59 = v80;
        if (v58 >= v57 >> 1)
        {
          unint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v57 > 1), v58 + 1, 1, v20, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field40>);
          uint64_t v59 = v80;
          uint64_t v20 = v60;
        }
        ++v43;
        *((void *)v20 + 2) = v58 + 1;
        *(void *)&v20[8 * v58 + 32] = v56;
        if (v59 == v43)
        {
          *unint64_t v79 = v20;
          goto LABEL_59;
        }
      }
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
      goto LABEL_110;
    }
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    ;
  }
  __break(1u);
LABEL_128:
  __break(1u);
LABEL_129:
  __break(1u);
LABEL_130:
  __break(1u);
  return result;
}

uint64_t specialized FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:)(char **a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v6 = *(void *)(v4 + 72);
  if (*(void *)(a2 + 16) != v6)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    unint64_t v94 = 0xD00000000000001BLL;
    unint64_t v95 = 0x8000000260BFEB20;
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 540877088;
    v15._object = (void *)0xE400000000000000;
    String.append(_:)(v15);
    v93[0] = v6;
    goto LABEL_7;
  }
  unint64_t v9 = a2;
  uint64_t v11 = *(void *)(a3 + 16);
  if (v11 != specialized FullyLinearProof.proveRandLength.getter())
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    unint64_t v94 = 0xD000000000000019;
    unint64_t v95 = 0x8000000260BFEE20;
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 540877088;
    v17._object = (void *)0xE400000000000000;
    String.append(_:)(v17);
    v93[0] = specialized FullyLinearProof.proveRandLength.getter();
    goto LABEL_7;
  }
  uint64_t v85 = a1;
  uint64_t v87 = v4;
  if (*(void *)(a4 + 16))
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    unint64_t v94 = 0xD000000000000019;
    unint64_t v95 = 0x8000000260BFEB80;
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 540877088;
    v13._object = (void *)0xE400000000000000;
    String.append(_:)(v13);
    v93[0] = 0;
LABEL_7:
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    unint64_t v19 = v95;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v20 = v94;
    *(void *)(v20 + 8) = v19;
    *(unsigned char *)(v20 + 16) = 2;
    return swift_willThrow();
  }
  unint64_t v91 = a4;
  unint64_t v94 = a3;
  unint64_t v95 = a3 + 32;
  uint64_t v96 = 0;
  uint64_t v97 = (2 * v11) | 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_260BF9FF0;
  long long v23 = *(_OWORD *)(v4 + 24);
  v98[0] = *(_OWORD *)(v4 + 8);
  v98[1] = v23;
  long long v99 = *(_OWORD *)(v4 + 40);
  unint64_t v100 = *((void *)&v98[0] + 1);
  uint64_t v24 = *(void *)&v98[0];
  uint64_t v25 = *((void *)&v23 + 1);
  uint64_t v86 = v23;
  uint64_t v26 = v99;
  uint64_t v27 = specialized Gadget.wirePolynomialLength.getter();
  uint64_t v28 = specialized Gadget.gadgetPolynomialLength.getter();
  uint64_t v90 = v24;
  unint64_t v29 = v100;
  *(void *)(inited + 32) = v24;
  *(void *)(inited + 40) = v29;
  *(void *)(inited + 48) = v25;
  *(void *)(inited + 56) = v27;
  *(void *)(inited + 64) = v28;
  swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay4VDAF16GadgetParametersVG_AF0E10WireInputsCyAF7Field40VGs5NeverOTg5096_s4VDAF16FullyLinearProofPAAE5prove4into11measurement0E4Rand05jointH0yqd__z_Say1FQzGA2KtKSmRd__7b15Qyd__AJRSlFAA16egh11CyAJGAA0K10f30VXEfU_AA15PINEMainCircuitVyAA7I18VSRySfGG_SayAVGTG5s10ArraySliceVyAMGTf1cn_nTm(inited, &v94);
  unint64_t v31 = v30;
  unint64_t v32 = v5;
  swift_setDeallocating();
  if (v31 >> 62) {
    goto LABEL_135;
  }
  for (uint64_t i = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10); ; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v34 = MEMORY[0x263F8EE78];
    uint64_t v35 = v86;
    unint64_t v100 = v31;
    uint64_t v88 = i;
    if (!i) {
      goto LABEL_20;
    }
    unint64_t v89 = v32;
    uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, i & ~(i >> 63), 0);
    uint64_t v36 = v88;
    if (v88 < 0) {
      break;
    }
    uint64_t v37 = 0;
    unint64_t v38 = v100;
    unint64_t v39 = v100 & 0xC000000000000001;
    do
    {
      if (v39)
      {
        uint64_t v36 = v88;
        uint64_t v40 = MEMORY[0x2612245F0](v37, v38);
      }
      else
      {
        uint64_t v40 = *(void *)(v38 + 8 * v37 + 32);
        swift_retain();
      }
      unint64_t v42 = *(void *)(v34 + 16);
      unint64_t v41 = *(void *)(v34 + 24);
      if (v42 >= v41 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v41 > 1), v42 + 1, 1);
        uint64_t v36 = v88;
        unint64_t v38 = v100;
      }
      ++v37;
      *(void *)(v34 + 16) = v42 + 1;
      *(void *)(v34 + 8 * v42 + 32) = v40;
    }
    while (v36 != v37);
    uint64_t v35 = v86;
    unint64_t v32 = v89;
LABEL_20:
    unint64_t v31 = v87;
    specialized PINENormEqualityCheckCircuit.evaluate(measurement:jointRand:numOfShares:for:)(v9, v91, v34, v93);
    if (v32)
    {
      swift_bridgeObjectRelease();
LABEL_22:
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease();
    }
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v43 = v88;
    if (v88 < 0) {
      goto LABEL_137;
    }
    if (!v88) {
      goto LABEL_22;
    }
    if (!v35) {
      goto LABEL_138;
    }
    uint64_t v44 = 0;
    unint64_t v91 = v100 & 0xC000000000000001;
    uint64_t v83 = v100 & 0xFFFFFFFFFFFFFF8;
    while (v44 != v43)
    {
      unint64_t v31 = (unint64_t)v98;
      unint64_t v32 = specialized Gadget.wirePolynomialLength.getter();
      specialized Gadget.gadgetPolynomialLength.getter();
      if (v44) {
        goto LABEL_125;
      }
      specialized Gadget.wirePolynomialLength.getter();
      specialized Gadget.gadgetPolynomialLength.getter();
      if (v90 < 0) {
        goto LABEL_126;
      }
      if (v90)
      {
        if (!v91 && !*(void *)(v83 + 16)) {
          goto LABEL_133;
        }
        if ((v32 & 0x8000000000000000) != 0) {
          goto LABEL_134;
        }
        unint64_t v47 = 0;
        uint64_t v48 = *v85;
        unint64_t v31 = 8 * v32;
        uint64_t v49 = (void *)MEMORY[0x263F8EE78];
        while (1)
        {
          if (v91)
          {
            unint64_t v9 = MEMORY[0x2612245F0](0, v100);
          }
          else
          {
            unint64_t v9 = *(void *)(v100 + 32);
            swift_retain();
          }
          swift_beginAccess();
          uint64_t v50 = *(void *)(v9 + 32);
          if (v47 >= *(void *)(v50 + 16)) {
            break;
          }
          uint64_t v51 = *(void *)(v50 + 8 * v47 + 32);
          swift_bridgeObjectRetain();
          swift_release();
          if (*(void *)(v51 + 16) - 1 >= v32) {
            goto LABEL_110;
          }
          uint64_t v52 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          *(void *)(v52 + 16) = v32;
          bzero((void *)(v52 + 32), 8 * v32);
          long long v92 = (char *)v52;
          specialized inverseDiscreteFourierTransform<A, B, C>(input:size:output:)(v51, v32, &v92);
          uint64_t v53 = v92;
          unint64_t v9 = *((void *)v92 + 2);
          swift_bridgeObjectRelease();
          if (!v9) {
            goto LABEL_111;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49[2] + 1, 1, v49, &demangling cache variable for type metadata for _ContiguousArrayStorage<Polynomial<Field40>>, &demangling cache variable for type metadata for Polynomial<Field40>);
          }
          unint64_t v9 = v49[2];
          unint64_t v54 = v49[3];
          if (v9 >= v54 >> 1) {
            uint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v54 > 1), v9 + 1, 1, v49, &demangling cache variable for type metadata for _ContiguousArrayStorage<Polynomial<Field40>>, &demangling cache variable for type metadata for Polynomial<Field40>);
          }
          v49[2] = v9 + 1;
          v49[v9 + 4] = v53;
          if (v91)
          {
            uint64_t v55 = MEMORY[0x2612245F0](0, v100);
          }
          else
          {
            uint64_t v55 = *(void *)(v100 + 32);
            swift_retain();
          }
          swift_beginAccess();
          uint64_t v56 = *(void *)(v55 + 32);
          if (v47 >= *(void *)(v56 + 16)) {
            goto LABEL_112;
          }
          uint64_t v57 = *(void *)(v56 + 8 * v47 + 32);
          if (!*(void *)(v57 + 16)) {
            goto LABEL_113;
          }
          uint64_t v58 = *(void *)(v57 + 32);
          swift_release();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v48 + 2) + 1, 1, v48, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field40>);
          }
          unint64_t v9 = *((void *)v48 + 2);
          unint64_t v59 = *((void *)v48 + 3);
          uint64_t v60 = v90;
          if (v9 >= v59 >> 1)
          {
            uint64_t v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v59 > 1), v9 + 1, 1, v48, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field40>);
            uint64_t v60 = v90;
            uint64_t v48 = v61;
          }
          ++v47;
          *((void *)v48 + 2) = v9 + 1;
          *(void *)&v48[8 * v9 + 32] = v58;
          if (v60 == v47)
          {
            uint64_t v35 = v86;
            *uint64_t v85 = v48;
            goto LABEL_59;
          }
        }
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
        goto LABEL_114;
      }
      uint64_t v49 = (void *)MEMORY[0x263F8EE78];
LABEL_59:
      specialized Gadget.wirePolynomialLength.getter();
      uint64_t v84 = specialized Gadget.gadgetPolynomialLength.getter();
      int64_t v62 = v49[2];
      outlined retain of PINENormEqualityCheckCircuit<Field32, UnsafeBufferPointer<Float>>(v87);
      unint64_t v31 = (unint64_t)&outlined read-only object #0 of specialized FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:);
      if (v35 >= 1 && v62)
      {
        int64_t v63 = 0;
        while (1)
        {
          int64_t v64 = v63;
          uint64_t v65 = v63 + v35;
          BOOL v66 = __OFADD__(v63, v35);
          if (__OFADD__(v63, v35)) {
            int64_t v63 = (v65 >> 63) ^ 0x8000000000000000;
          }
          else {
            v63 += v35;
          }
          uint64_t v67 = v49[2];
          unint64_t v68 = v67 - v64;
          if (__OFSUB__(v67, v64)) {
            break;
          }
          if ((v68 & 0x8000000000000000) == 0 && v68 < v35)
          {
            BOOL v66 = 0;
            uint64_t v65 = v49[2];
          }
          if (v66) {
            goto LABEL_121;
          }
          if (v65 < v64) {
            goto LABEL_115;
          }
          if (v67 < v64) {
            goto LABEL_116;
          }
          if (v64 < 0) {
            goto LABEL_117;
          }
          if (v67 < v65) {
            goto LABEL_118;
          }
          if (v64 >= (unint64_t)v65) {
            goto LABEL_119;
          }
          uint64_t v69 = *(void *)(v26 + 16);
          if (!v69) {
            goto LABEL_120;
          }
          unint64_t v32 = v49[v64 + 4];
          uint64_t v70 = v69 + 3;
          do
          {
            if (*(void *)(v26 + 8 * v70))
            {
              uint64_t v73 = *(void *)(v32 + 16);
              if (!v73) {
                goto LABEL_122;
              }
              uint64_t v74 = v73 + 3;
              while (!*(void *)(v32 + 8 * v74))
              {
                unint64_t v75 = v74 - 3;
                --v74;
                if (v75 <= 1)
                {
                  unint64_t v32 = *(void *)(v26 + 32);
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Field40>);
                  uint64_t v72 = (void *)swift_allocObject();
                  *((_OWORD *)v72 + 1) = xmmword_260BF9FF0;
                  *((void *)v72 + 4) = v32;
                  goto LABEL_62;
                }
              }
              while (!*(void *)(v32 + 8 * v73 + 24))
              {
                if (v73-- <= 1) {
                  goto LABEL_94;
                }
              }
              if (v73 <= 60)
              {
LABEL_94:
                outlined retain of PINENormEqualityCheckCircuit<Field32, UnsafeBufferPointer<Float>>(v87);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                specialized evaluateUsingHorner<A, B, C>(_:atInput:)(v26, v32);
                uint64_t v72 = v76;
                unint64_t v9 = v76[2];
                swift_bridgeObjectRelease();
                outlined release of PINENormEqualityCheckCircuit<Field32, UnsafeBufferPointer<Float>>(v87);
                uint64_t v35 = v86;
                if (v9) {
                  goto LABEL_63;
                }
                goto LABEL_123;
              }
              outlined retain of PINENormEqualityCheckCircuit<Field32, UnsafeBufferPointer<Float>>(v87);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              uint64_t v72 = (void *)specialized evaluateUsingDFT<A, B, C>(_:atInput:)(v26, v32);
              unint64_t v9 = *((void *)v72 + 2);
              swift_bridgeObjectRelease();
              outlined release of PINENormEqualityCheckCircuit<Field32, UnsafeBufferPointer<Float>>(v87);
              uint64_t v35 = v86;
              if (v9) {
                goto LABEL_63;
              }
              goto LABEL_132;
            }
            unint64_t v71 = v70 - 3;
            --v70;
          }
          while (v71 > 1);
          uint64_t v72 = &outlined read-only object #1 of specialized FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:);
LABEL_62:
          swift_bridgeObjectRetain();
LABEL_63:
          specialized static Polynomial.+ infix(_:_:)(v31, (uint64_t)v72, (uint64_t *)&v92);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v31 = (unint64_t)v92;
          if (v63 >= v62) {
            goto LABEL_98;
          }
        }
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
        break;
      }
LABEL_98:
      outlined release of PINENormEqualityCheckCircuit<Field32, UnsafeBufferPointer<Float>>(v87);
      swift_bridgeObjectRelease();
      int64_t v77 = *(void *)(v31 + 16);
      if (!v77) {
        goto LABEL_127;
      }
      uint64_t v44 = 1;
      uint64_t v78 = v31 + 32;
      unint64_t v79 = *(void *)(v31 + 16);
      while (!*(void *)(v31 + 8 * v79 + 24))
      {
        if (v79-- <= 1)
        {
          unint64_t v79 = 0;
          goto LABEL_105;
        }
      }
      if ((v79 & 0x8000000000000000) != 0) {
        goto LABEL_128;
      }
      if (v77 < (uint64_t)v79) {
        goto LABEL_129;
      }
LABEL_105:
      uint64_t v80 = v31;
      unint64_t v31 = (unint64_t)v85;
      specialized Array.append<A>(contentsOf:)(v80, v78, 0, (2 * v79) | 1, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field40>);
      BOOL v81 = __OFSUB__(v84, v79);
      unint64_t v82 = v84 - v79;
      if (v81) {
        goto LABEL_130;
      }
      if ((v82 & 0x8000000000000000) != 0) {
        goto LABEL_131;
      }
      if (v82)
      {
        uint64_t v45 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v45 + 16) = v82;
        bzero((void *)(v45 + 32), 8 * v82);
      }
      else
      {
        uint64_t v45 = MEMORY[0x263F8EE78];
      }
      uint64_t v46 = v45;
      unint64_t v31 = (unint64_t)v85;
      specialized Array.append<A>(contentsOf:)(v46, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field40>);
      uint64_t v43 = v88;
      if (v88 == 1) {
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    ;
  }
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v9;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t inited;
  long long v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t i;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  BOOL v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char **v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  int v92[6];
  char *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _OWORD v99[2];
  long long v100;
  unint64_t v101;

  uint64_t v6 = *(void *)(v4 + 72);
  if (*(void *)(a2 + 16) != v6)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    unint64_t v95 = 0xD00000000000001BLL;
    uint64_t v96 = 0x8000000260BFEB20;
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 540877088;
    v15._object = (void *)0xE400000000000000;
    String.append(_:)(v15);
    unint64_t v94 = v6;
    goto LABEL_7;
  }
  unint64_t v9 = a2;
  uint64_t v11 = *(void *)(a3 + 16);
  if (v11 != specialized FullyLinearProof.proveRandLength.getter())
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    unint64_t v95 = 0xD000000000000019;
    uint64_t v96 = 0x8000000260BFEE20;
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 540877088;
    v17._object = (void *)0xE400000000000000;
    String.append(_:)(v17);
    unint64_t v94 = specialized FullyLinearProof.proveRandLength.getter();
    goto LABEL_7;
  }
  uint64_t v85 = a1;
  if (*(void *)(a4 + 16))
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    unint64_t v95 = 0xD000000000000019;
    uint64_t v96 = 0x8000000260BFEB80;
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 540877088;
    v13._object = (void *)0xE400000000000000;
    String.append(_:)(v13);
    unint64_t v94 = 0;
LABEL_7:
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    unint64_t v19 = v96;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v20 = v95;
    *(void *)(v20 + 8) = v19;
    *(unsigned char *)(v20 + 16) = 2;
    return swift_willThrow();
  }
  unint64_t v91 = a4;
  unint64_t v95 = a3;
  uint64_t v96 = a3 + 32;
  uint64_t v97 = 0;
  unint64_t v98 = (2 * v11) | 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_260BF9FF0;
  long long v23 = *(_OWORD *)(v4 + 24);
  v99[0] = *(_OWORD *)(v4 + 8);
  v99[1] = v23;
  uint64_t v87 = v4;
  unint64_t v100 = *(_OWORD *)(v4 + 40);
  long long v101 = *((void *)&v99[0] + 1);
  uint64_t v24 = *(void *)&v99[0];
  uint64_t v25 = *((void *)&v23 + 1);
  uint64_t v86 = v23;
  uint64_t v26 = v100;
  uint64_t v27 = specialized Gadget.wirePolynomialLength.getter();
  uint64_t v28 = specialized Gadget.gadgetPolynomialLength.getter();
  uint64_t v90 = v24;
  unint64_t v29 = v101;
  *(void *)(inited + 32) = v24;
  *(void *)(inited + 40) = v29;
  *(void *)(inited + 48) = v25;
  *(void *)(inited + 56) = v27;
  *(void *)(inited + 64) = v28;
  swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay4VDAF16GadgetParametersVG_AF0E10WireInputsCyAF7Field32VGs5NeverOTg5096_s4VDAF16FullyLinearProofPAAE5prove4into11measurement0E4Rand05jointH0yqd__z_Say1FQzGA2KtKSmRd__7b15Qyd__AJRSlFAA16egh11CyAJGAA0K10f30VXEfU_AA15PINEMainCircuitVyAA7I18VSRySfGG_SayAVGTG5s10ArraySliceVyAMGTf1cn_nTm(inited, &v95);
  unint64_t v31 = v30;
  unint64_t v32 = v5;
  swift_setDeallocating();
  if (v31 >> 62) {
    goto LABEL_135;
  }
  for (uint64_t i = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10); ; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v34 = MEMORY[0x263F8EE78];
    uint64_t v35 = v86;
    long long v101 = v31;
    uint64_t v88 = i;
    if (!i) {
      goto LABEL_20;
    }
    unint64_t v89 = v32;
    unint64_t v94 = MEMORY[0x263F8EE78];
    uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, i & ~(i >> 63), 0);
    uint64_t v36 = v88;
    if (v88 < 0) {
      break;
    }
    uint64_t v37 = 0;
    uint64_t v34 = v94;
    unint64_t v38 = v101;
    unint64_t v39 = v101 & 0xC000000000000001;
    do
    {
      if (v39)
      {
        uint64_t v36 = v88;
        uint64_t v40 = MEMORY[0x2612245F0](v37, v38);
      }
      else
      {
        uint64_t v40 = *(void *)(v38 + 8 * v37 + 32);
        swift_retain();
      }
      unint64_t v94 = v34;
      unint64_t v42 = *(void *)(v34 + 16);
      unint64_t v41 = *(void *)(v34 + 24);
      if (v42 >= v41 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v41 > 1), v42 + 1, 1);
        uint64_t v36 = v88;
        unint64_t v38 = v101;
        uint64_t v34 = v94;
      }
      ++v37;
      *(void *)(v34 + 16) = v42 + 1;
      *(void *)(v34 + 8 * v42 + 32) = v40;
    }
    while (v36 != v37);
    uint64_t v35 = v86;
    unint64_t v32 = v89;
LABEL_20:
    unint64_t v31 = v87;
    specialized PINENormEqualityCheckCircuit.evaluate(measurement:jointRand:numOfShares:for:)(v9, v91, v34, v92);
    if (v32)
    {
      swift_bridgeObjectRelease();
LABEL_22:
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease();
    }
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v43 = v88;
    if (v88 < 0) {
      goto LABEL_137;
    }
    if (!v88) {
      goto LABEL_22;
    }
    if (!v35) {
      goto LABEL_138;
    }
    uint64_t v44 = 0;
    unint64_t v91 = v101 & 0xC000000000000001;
    uint64_t v83 = v101 & 0xFFFFFFFFFFFFFF8;
    while (v44 != v43)
    {
      unint64_t v31 = (unint64_t)v99;
      unint64_t v32 = specialized Gadget.wirePolynomialLength.getter();
      specialized Gadget.gadgetPolynomialLength.getter();
      if (v44) {
        goto LABEL_125;
      }
      specialized Gadget.wirePolynomialLength.getter();
      specialized Gadget.gadgetPolynomialLength.getter();
      if (v90 < 0) {
        goto LABEL_126;
      }
      if (v90)
      {
        if (!v91 && !*(void *)(v83 + 16)) {
          goto LABEL_133;
        }
        if ((v32 & 0x8000000000000000) != 0) {
          goto LABEL_134;
        }
        unint64_t v47 = 0;
        uint64_t v48 = *v85;
        unint64_t v31 = 4 * v32;
        uint64_t v49 = (void *)MEMORY[0x263F8EE78];
        while (1)
        {
          if (v91)
          {
            unint64_t v9 = MEMORY[0x2612245F0](0, v101);
          }
          else
          {
            unint64_t v9 = *(void *)(v101 + 32);
            swift_retain();
          }
          swift_beginAccess();
          uint64_t v50 = *(void *)(v9 + 32);
          if (v47 >= *(void *)(v50 + 16)) {
            break;
          }
          uint64_t v51 = *(void *)(v50 + 8 * v47 + 32);
          swift_bridgeObjectRetain();
          swift_release();
          if (*(void *)(v51 + 16) - 1 >= v32) {
            goto LABEL_110;
          }
          uint64_t v52 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          *(void *)(v52 + 16) = v32;
          bzero((void *)(v52 + 32), 4 * v32);
          long long v93 = (char *)v52;
          specialized inverseDiscreteFourierTransform<A, B, C>(input:size:output:)(v51, v32, &v93);
          uint64_t v53 = v93;
          unint64_t v9 = *((void *)v93 + 2);
          swift_bridgeObjectRelease();
          if (!v9) {
            goto LABEL_111;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49[2] + 1, 1, v49, &demangling cache variable for type metadata for _ContiguousArrayStorage<Polynomial<Field32>>, &demangling cache variable for type metadata for Polynomial<Field32>);
          }
          unint64_t v9 = v49[2];
          unint64_t v54 = v49[3];
          if (v9 >= v54 >> 1) {
            uint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v54 > 1), v9 + 1, 1, v49, &demangling cache variable for type metadata for _ContiguousArrayStorage<Polynomial<Field32>>, &demangling cache variable for type metadata for Polynomial<Field32>);
          }
          v49[2] = v9 + 1;
          v49[v9 + 4] = v53;
          if (v91)
          {
            uint64_t v55 = MEMORY[0x2612245F0](0, v101);
          }
          else
          {
            uint64_t v55 = *(void *)(v101 + 32);
            swift_retain();
          }
          swift_beginAccess();
          uint64_t v56 = *(void *)(v55 + 32);
          if (v47 >= *(void *)(v56 + 16)) {
            goto LABEL_112;
          }
          uint64_t v57 = *(void *)(v56 + 8 * v47 + 32);
          if (!*(void *)(v57 + 16)) {
            goto LABEL_113;
          }
          uint64_t v58 = *(_DWORD *)(v57 + 32);
          swift_release();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v48 + 2) + 1, 1, v48);
          }
          unint64_t v9 = *((void *)v48 + 2);
          unint64_t v59 = *((void *)v48 + 3);
          uint64_t v60 = v90;
          if (v9 >= v59 >> 1)
          {
            uint64_t v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v59 > 1), v9 + 1, 1, v48);
            uint64_t v60 = v90;
            uint64_t v48 = v61;
          }
          ++v47;
          *((void *)v48 + 2) = v9 + 1;
          *(_DWORD *)&v48[4 * v9 + 32] = v58;
          if (v60 == v47)
          {
            uint64_t v35 = v86;
            *uint64_t v85 = v48;
            goto LABEL_59;
          }
        }
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
        goto LABEL_114;
      }
      uint64_t v49 = (void *)MEMORY[0x263F8EE78];
LABEL_59:
      specialized Gadget.wirePolynomialLength.getter();
      uint64_t v84 = specialized Gadget.gadgetPolynomialLength.getter();
      int64_t v62 = v49[2];
      outlined retain of PINENormEqualityCheckCircuit<Field32, UnsafeBufferPointer<Float>>(v87);
      unint64_t v31 = (unint64_t)&outlined read-only object #0 of specialized FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:);
      if (v35 >= 1 && v62)
      {
        int64_t v63 = 0;
        while (1)
        {
          int64_t v64 = v63;
          uint64_t v65 = v63 + v35;
          BOOL v66 = __OFADD__(v63, v35);
          if (__OFADD__(v63, v35)) {
            int64_t v63 = (v65 >> 63) ^ 0x8000000000000000;
          }
          else {
            v63 += v35;
          }
          uint64_t v67 = v49[2];
          unint64_t v68 = v67 - v64;
          if (__OFSUB__(v67, v64)) {
            break;
          }
          if ((v68 & 0x8000000000000000) == 0 && v68 < v35)
          {
            BOOL v66 = 0;
            uint64_t v65 = v49[2];
          }
          if (v66) {
            goto LABEL_121;
          }
          if (v65 < v64) {
            goto LABEL_115;
          }
          if (v67 < v64) {
            goto LABEL_116;
          }
          if (v64 < 0) {
            goto LABEL_117;
          }
          if (v67 < v65) {
            goto LABEL_118;
          }
          if (v64 >= (unint64_t)v65) {
            goto LABEL_119;
          }
          uint64_t v69 = *(void *)(v26 + 16);
          if (!v69) {
            goto LABEL_120;
          }
          unint64_t v32 = v49[v64 + 4];
          uint64_t v70 = v69 + 7;
          do
          {
            if (*(_DWORD *)(v26 + 4 * v70))
            {
              uint64_t v73 = *(void *)(v32 + 16);
              if (!v73) {
                goto LABEL_122;
              }
              uint64_t v74 = v73 + 7;
              while (!*(_DWORD *)(v32 + 4 * v74))
              {
                unint64_t v75 = v74 - 7;
                --v74;
                if (v75 <= 1)
                {
                  unint64_t v32 = *(unsigned int *)(v26 + 32);
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Field32>);
                  uint64_t v72 = (void *)swift_allocObject();
                  *((_OWORD *)v72 + 1) = xmmword_260BF9FF0;
                  *((_DWORD *)v72 + 8) = v32;
                  goto LABEL_62;
                }
              }
              while (!*(_DWORD *)(v32 + 4 * v73 + 28))
              {
                if (v73-- <= 1) {
                  goto LABEL_94;
                }
              }
              if (v73 <= 60)
              {
LABEL_94:
                outlined retain of PINENormEqualityCheckCircuit<Field32, UnsafeBufferPointer<Float>>(v87);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                specialized evaluateUsingHorner<A, B, C>(_:atInput:)(v26, v32);
                uint64_t v72 = v76;
                unint64_t v9 = v76[2];
                swift_bridgeObjectRelease();
                outlined release of PINENormEqualityCheckCircuit<Field32, UnsafeBufferPointer<Float>>(v87);
                uint64_t v35 = v86;
                if (v9) {
                  goto LABEL_63;
                }
                goto LABEL_123;
              }
              outlined retain of PINENormEqualityCheckCircuit<Field32, UnsafeBufferPointer<Float>>(v87);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              uint64_t v72 = (void *)specialized evaluateUsingDFT<A, B, C>(_:atInput:)(v26, v32);
              unint64_t v9 = *((void *)v72 + 2);
              swift_bridgeObjectRelease();
              outlined release of PINENormEqualityCheckCircuit<Field32, UnsafeBufferPointer<Float>>(v87);
              uint64_t v35 = v86;
              if (v9) {
                goto LABEL_63;
              }
              goto LABEL_132;
            }
            unint64_t v71 = v70 - 7;
            --v70;
          }
          while (v71 > 1);
          uint64_t v72 = &outlined read-only object #1 of specialized FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:);
LABEL_62:
          swift_bridgeObjectRetain();
LABEL_63:
          specialized static Polynomial.+ infix(_:_:)(v31, (uint64_t)v72, (uint64_t *)&v93);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v31 = (unint64_t)v93;
          if (v63 >= v62) {
            goto LABEL_98;
          }
        }
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
        break;
      }
LABEL_98:
      outlined release of PINENormEqualityCheckCircuit<Field32, UnsafeBufferPointer<Float>>(v87);
      swift_bridgeObjectRelease();
      int64_t v77 = *(void *)(v31 + 16);
      if (!v77) {
        goto LABEL_127;
      }
      uint64_t v44 = 1;
      uint64_t v78 = v31 + 32;
      unint64_t v79 = *(void *)(v31 + 16);
      while (!*(_DWORD *)(v31 + 4 * v79 + 28))
      {
        if (v79-- <= 1)
        {
          unint64_t v79 = 0;
          goto LABEL_105;
        }
      }
      if ((v79 & 0x8000000000000000) != 0) {
        goto LABEL_128;
      }
      if (v77 < (uint64_t)v79) {
        goto LABEL_129;
      }
LABEL_105:
      uint64_t v80 = v31;
      unint64_t v31 = (unint64_t)v85;
      specialized Array.append<A>(contentsOf:)(v80, v78, 0, (2 * v79) | 1);
      BOOL v81 = __OFSUB__(v84, v79);
      unint64_t v82 = v84 - v79;
      if (v81) {
        goto LABEL_130;
      }
      if ((v82 & 0x8000000000000000) != 0) {
        goto LABEL_131;
      }
      if (v82)
      {
        uint64_t v45 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v45 + 16) = v82;
        bzero((void *)(v45 + 32), 4 * v82);
      }
      else
      {
        uint64_t v45 = MEMORY[0x263F8EE78];
      }
      uint64_t v46 = v45;
      unint64_t v31 = (unint64_t)v85;
      specialized Array.append<A>(contentsOf:)(v46);
      uint64_t v43 = v88;
      if (v88 == 1) {
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    ;
  }
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v9;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t inited;
  long long v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t i;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  int64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  BOOL v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char **v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93[3];
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _OWORD v98[2];
  long long v99;
  unint64_t v100;

  uint64_t v6 = *(void *)(v4 + 72);
  if (*(void *)(a2 + 16) != v6)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    unint64_t v94 = 0xD00000000000001BLL;
    unint64_t v95 = 0x8000000260BFEB20;
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 540877088;
    v15._object = (void *)0xE400000000000000;
    String.append(_:)(v15);
    v93[0] = v6;
    goto LABEL_7;
  }
  unint64_t v9 = a2;
  uint64_t v11 = *(void *)(a3 + 16);
  if (v11 != specialized FullyLinearProof.proveRandLength.getter())
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    unint64_t v94 = 0xD000000000000019;
    unint64_t v95 = 0x8000000260BFEE20;
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 540877088;
    v17._object = (void *)0xE400000000000000;
    String.append(_:)(v17);
    v93[0] = specialized FullyLinearProof.proveRandLength.getter();
    goto LABEL_7;
  }
  uint64_t v85 = a1;
  uint64_t v87 = v4;
  if (*(void *)(a4 + 16))
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    unint64_t v94 = 0xD000000000000019;
    unint64_t v95 = 0x8000000260BFEB80;
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 540877088;
    v13._object = (void *)0xE400000000000000;
    String.append(_:)(v13);
    v93[0] = 0;
LABEL_7:
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    unint64_t v19 = v95;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v20 = v94;
    *(void *)(v20 + 8) = v19;
    *(unsigned char *)(v20 + 16) = 2;
    return swift_willThrow();
  }
  unint64_t v91 = a4;
  unint64_t v94 = a3;
  unint64_t v95 = a3 + 32;
  uint64_t v96 = 0;
  uint64_t v97 = (2 * v11) | 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_260BF9FF0;
  long long v23 = *(_OWORD *)(v4 + 24);
  v98[0] = *(_OWORD *)(v4 + 8);
  v98[1] = v23;
  long long v99 = *(_OWORD *)(v4 + 40);
  unint64_t v100 = *((void *)&v98[0] + 1);
  uint64_t v24 = *(void *)&v98[0];
  uint64_t v25 = *((void *)&v23 + 1);
  uint64_t v86 = v23;
  uint64_t v26 = v99;
  uint64_t v27 = specialized Gadget.wirePolynomialLength.getter();
  uint64_t v28 = specialized Gadget.gadgetPolynomialLength.getter();
  uint64_t v90 = v24;
  unint64_t v29 = v100;
  *(void *)(inited + 32) = v24;
  *(void *)(inited + 40) = v29;
  *(void *)(inited + 48) = v25;
  *(void *)(inited + 56) = v27;
  *(void *)(inited + 64) = v28;
  swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay4VDAF16GadgetParametersVG_AF0E10WireInputsCyAF7Field64VGs5NeverOTg5096_s4VDAF16FullyLinearProofPAAE5prove4into11measurement0E4Rand05jointH0yqd__z_Say1FQzGA2KtKSmRd__7b15Qyd__AJRSlFAA16egh11CyAJGAA0K10f28VXEfU_AA13SumVectorTypeVyAA7I14VSWG_SayAVGTG5s10ArraySliceVyAMGTf1cn_n(inited, &v94);
  unint64_t v31 = v30;
  unint64_t v32 = v5;
  swift_setDeallocating();
  if (v31 >> 62) {
    goto LABEL_135;
  }
  for (uint64_t i = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10); ; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v34 = MEMORY[0x263F8EE78];
    uint64_t v35 = v86;
    unint64_t v100 = v31;
    uint64_t v88 = i;
    if (!i) {
      goto LABEL_20;
    }
    unint64_t v89 = v32;
    uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, i & ~(i >> 63), 0);
    uint64_t v36 = v88;
    if (v88 < 0) {
      break;
    }
    uint64_t v37 = 0;
    unint64_t v38 = v100;
    unint64_t v39 = v100 & 0xC000000000000001;
    do
    {
      if (v39)
      {
        uint64_t v36 = v88;
        uint64_t v40 = MEMORY[0x2612245F0](v37, v38);
      }
      else
      {
        uint64_t v40 = *(void *)(v38 + 8 * v37 + 32);
        swift_retain();
      }
      unint64_t v42 = *(void *)(v34 + 16);
      unint64_t v41 = *(void *)(v34 + 24);
      if (v42 >= v41 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v41 > 1), v42 + 1, 1);
        uint64_t v36 = v88;
        unint64_t v38 = v100;
      }
      ++v37;
      *(void *)(v34 + 16) = v42 + 1;
      *(void *)(v34 + 8 * v42 + 32) = v40;
    }
    while (v36 != v37);
    uint64_t v35 = v86;
    unint64_t v32 = v89;
LABEL_20:
    unint64_t v31 = v87;
    specialized PINENormEqualityCheckCircuit.evaluate(measurement:jointRand:numOfShares:for:)(v9, v91, v34, v93);
    if (v32)
    {
      swift_bridgeObjectRelease();
LABEL_22:
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease();
    }
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v43 = v88;
    if (v88 < 0) {
      goto LABEL_137;
    }
    if (!v88) {
      goto LABEL_22;
    }
    if (!v35) {
      goto LABEL_138;
    }
    uint64_t v44 = 0;
    unint64_t v91 = v100 & 0xC000000000000001;
    uint64_t v83 = v100 & 0xFFFFFFFFFFFFFF8;
    while (v44 != v43)
    {
      unint64_t v31 = (unint64_t)v98;
      unint64_t v32 = specialized Gadget.wirePolynomialLength.getter();
      specialized Gadget.gadgetPolynomialLength.getter();
      if (v44) {
        goto LABEL_125;
      }
      specialized Gadget.wirePolynomialLength.getter();
      specialized Gadget.gadgetPolynomialLength.getter();
      if (v90 < 0) {
        goto LABEL_126;
      }
      if (v90)
      {
        if (!v91 && !*(void *)(v83 + 16)) {
          goto LABEL_133;
        }
        if ((v32 & 0x8000000000000000) != 0) {
          goto LABEL_134;
        }
        unint64_t v47 = 0;
        uint64_t v48 = *v85;
        unint64_t v31 = 8 * v32;
        uint64_t v49 = (void *)MEMORY[0x263F8EE78];
        while (1)
        {
          if (v91)
          {
            unint64_t v9 = MEMORY[0x2612245F0](0, v100);
          }
          else
          {
            unint64_t v9 = *(void *)(v100 + 32);
            swift_retain();
          }
          swift_beginAccess();
          uint64_t v50 = *(void *)(v9 + 32);
          if (v47 >= *(void *)(v50 + 16)) {
            break;
          }
          uint64_t v51 = *(void *)(v50 + 8 * v47 + 32);
          swift_bridgeObjectRetain();
          swift_release();
          if (*(void *)(v51 + 16) - 1 >= v32) {
            goto LABEL_110;
          }
          uint64_t v52 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          *(void *)(v52 + 16) = v32;
          bzero((void *)(v52 + 32), 8 * v32);
          long long v92 = (char *)v52;
          specialized inverseDiscreteFourierTransform<A, B, C>(input:size:output:)(v51, v32, &v92);
          uint64_t v53 = v92;
          unint64_t v9 = *((void *)v92 + 2);
          swift_bridgeObjectRelease();
          if (!v9) {
            goto LABEL_111;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49[2] + 1, 1, v49, &demangling cache variable for type metadata for _ContiguousArrayStorage<Polynomial<Field64>>, &demangling cache variable for type metadata for Polynomial<Field64>);
          }
          unint64_t v9 = v49[2];
          unint64_t v54 = v49[3];
          if (v9 >= v54 >> 1) {
            uint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v54 > 1), v9 + 1, 1, v49, &demangling cache variable for type metadata for _ContiguousArrayStorage<Polynomial<Field64>>, &demangling cache variable for type metadata for Polynomial<Field64>);
          }
          v49[2] = v9 + 1;
          v49[v9 + 4] = v53;
          if (v91)
          {
            uint64_t v55 = MEMORY[0x2612245F0](0, v100);
          }
          else
          {
            uint64_t v55 = *(void *)(v100 + 32);
            swift_retain();
          }
          swift_beginAccess();
          uint64_t v56 = *(void *)(v55 + 32);
          if (v47 >= *(void *)(v56 + 16)) {
            goto LABEL_112;
          }
          uint64_t v57 = *(void *)(v56 + 8 * v47 + 32);
          if (!*(void *)(v57 + 16)) {
            goto LABEL_113;
          }
          uint64_t v58 = *(void *)(v57 + 32);
          swift_release();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v48 + 2) + 1, 1, v48, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
          }
          unint64_t v9 = *((void *)v48 + 2);
          unint64_t v59 = *((void *)v48 + 3);
          uint64_t v60 = v90;
          if (v9 >= v59 >> 1)
          {
            uint64_t v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v59 > 1), v9 + 1, 1, v48, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
            uint64_t v60 = v90;
            uint64_t v48 = v61;
          }
          ++v47;
          *((void *)v48 + 2) = v9 + 1;
          *(void *)&v48[8 * v9 + 32] = v58;
          if (v60 == v47)
          {
            uint64_t v35 = v86;
            *uint64_t v85 = v48;
            goto LABEL_59;
          }
        }
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
        goto LABEL_114;
      }
      uint64_t v49 = (void *)MEMORY[0x263F8EE78];
LABEL_59:
      specialized Gadget.wirePolynomialLength.getter();
      uint64_t v84 = specialized Gadget.gadgetPolynomialLength.getter();
      int64_t v62 = v49[2];
      outlined retain of PINENormEqualityCheckCircuit<Field32, UnsafeBufferPointer<Float>>(v87);
      unint64_t v31 = (unint64_t)&outlined read-only object #0 of specialized FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:);
      if (v35 >= 1 && v62)
      {
        int64_t v63 = 0;
        while (1)
        {
          int64_t v64 = v63;
          uint64_t v65 = v63 + v35;
          BOOL v66 = __OFADD__(v63, v35);
          if (__OFADD__(v63, v35)) {
            int64_t v63 = (v65 >> 63) ^ 0x8000000000000000;
          }
          else {
            v63 += v35;
          }
          uint64_t v67 = v49[2];
          unint64_t v68 = v67 - v64;
          if (__OFSUB__(v67, v64)) {
            break;
          }
          if ((v68 & 0x8000000000000000) == 0 && v68 < v35)
          {
            BOOL v66 = 0;
            uint64_t v65 = v49[2];
          }
          if (v66) {
            goto LABEL_121;
          }
          if (v65 < v64) {
            goto LABEL_115;
          }
          if (v67 < v64) {
            goto LABEL_116;
          }
          if (v64 < 0) {
            goto LABEL_117;
          }
          if (v67 < v65) {
            goto LABEL_118;
          }
          if (v64 >= (unint64_t)v65) {
            goto LABEL_119;
          }
          uint64_t v69 = *(void *)(v26 + 16);
          if (!v69) {
            goto LABEL_120;
          }
          unint64_t v32 = v49[v64 + 4];
          uint64_t v70 = v69 + 3;
          do
          {
            if (*(void *)(v26 + 8 * v70))
            {
              uint64_t v73 = *(void *)(v32 + 16);
              if (!v73) {
                goto LABEL_122;
              }
              uint64_t v74 = v73 + 3;
              while (!*(void *)(v32 + 8 * v74))
              {
                unint64_t v75 = v74 - 3;
                --v74;
                if (v75 <= 1)
                {
                  unint64_t v32 = *(void *)(v26 + 32);
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
                  uint64_t v72 = (void *)swift_allocObject();
                  *((_OWORD *)v72 + 1) = xmmword_260BF9FF0;
                  *((void *)v72 + 4) = v32;
                  goto LABEL_62;
                }
              }
              while (!*(void *)(v32 + 8 * v73 + 24))
              {
                if (v73-- <= 1) {
                  goto LABEL_94;
                }
              }
              if (v73 <= 60)
              {
LABEL_94:
                outlined retain of PINENormEqualityCheckCircuit<Field32, UnsafeBufferPointer<Float>>(v87);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                specialized evaluateUsingHorner<A, B, C>(_:atInput:)(v26, v32);
                uint64_t v72 = v76;
                unint64_t v9 = v76[2];
                swift_bridgeObjectRelease();
                outlined release of PINENormEqualityCheckCircuit<Field32, UnsafeBufferPointer<Float>>(v87);
                uint64_t v35 = v86;
                if (v9) {
                  goto LABEL_63;
                }
                goto LABEL_123;
              }
              outlined retain of PINENormEqualityCheckCircuit<Field32, UnsafeBufferPointer<Float>>(v87);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              uint64_t v72 = (void *)specialized evaluateUsingDFT<A, B, C>(_:atInput:)(v26, v32);
              unint64_t v9 = *((void *)v72 + 2);
              swift_bridgeObjectRelease();
              outlined release of PINENormEqualityCheckCircuit<Field32, UnsafeBufferPointer<Float>>(v87);
              uint64_t v35 = v86;
              if (v9) {
                goto LABEL_63;
              }
              goto LABEL_132;
            }
            unint64_t v71 = v70 - 3;
            --v70;
          }
          while (v71 > 1);
          uint64_t v72 = &outlined read-only object #1 of specialized FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:);
LABEL_62:
          swift_bridgeObjectRetain();
LABEL_63:
          specialized static Polynomial.+ infix(_:_:)(v31, (uint64_t)v72, (uint64_t *)&v92);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v31 = (unint64_t)v92;
          if (v63 >= v62) {
            goto LABEL_98;
          }
        }
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
        break;
      }
LABEL_98:
      outlined release of PINENormEqualityCheckCircuit<Field32, UnsafeBufferPointer<Float>>(v87);
      swift_bridgeObjectRelease();
      int64_t v77 = *(void *)(v31 + 16);
      if (!v77) {
        goto LABEL_127;
      }
      uint64_t v44 = 1;
      uint64_t v78 = v31 + 32;
      unint64_t v79 = *(void *)(v31 + 16);
      while (!*(void *)(v31 + 8 * v79 + 24))
      {
        if (v79-- <= 1)
        {
          unint64_t v79 = 0;
          goto LABEL_105;
        }
      }
      if ((v79 & 0x8000000000000000) != 0) {
        goto LABEL_128;
      }
      if (v77 < (uint64_t)v79) {
        goto LABEL_129;
      }
LABEL_105:
      uint64_t v80 = v31;
      unint64_t v31 = (unint64_t)v85;
      specialized Array.append<A>(contentsOf:)(v80, v78, 0, (2 * v79) | 1, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
      BOOL v81 = __OFSUB__(v84, v79);
      unint64_t v82 = v84 - v79;
      if (v81) {
        goto LABEL_130;
      }
      if ((v82 & 0x8000000000000000) != 0) {
        goto LABEL_131;
      }
      if (v82)
      {
        uint64_t v45 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v45 + 16) = v82;
        bzero((void *)(v45 + 32), 8 * v82);
      }
      else
      {
        uint64_t v45 = MEMORY[0x263F8EE78];
      }
      uint64_t v46 = v45;
      unint64_t v31 = (unint64_t)v85;
      specialized Array.append<A>(contentsOf:)(v46, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
      uint64_t v43 = v88;
      if (v88 == 1) {
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    ;
  }
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
  return result;
}

uint64_t specialized FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:)(char **a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v6 = *(void *)(v4 + 72);
  if (*(void *)(a2 + 16) != v6)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    unint64_t v86 = 0xD00000000000001BLL;
    unint64_t v87 = 0x8000000260BFEB20;
    v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._countAndFlagsBits = 540877088;
    v31._object = (void *)0xE400000000000000;
    String.append(_:)(v31);
    uint64_t v85 = v6;
LABEL_19:
    v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    unint64_t v37 = v87;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v38 = v86;
    *(void *)(v38 + 8) = v37;
    *(unsigned char *)(v38 + 16) = 2;
    return swift_willThrow();
  }
  uint64_t v11 = *(void *)(a3 + 16);
  if (v11 != specialized FullyLinearProof.proveRandLength.getter())
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    unint64_t v86 = 0xD000000000000019;
    unint64_t v87 = 0x8000000260BFEE20;
    v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._countAndFlagsBits = 540877088;
    v33._object = (void *)0xE400000000000000;
    String.append(_:)(v33);
    uint64_t v85 = specialized FullyLinearProof.proveRandLength.getter();
    goto LABEL_19;
  }
  if (*(void *)(a4 + 16) != 3)
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    unint64_t v86 = 0xD000000000000019;
    unint64_t v87 = 0x8000000260BFEB80;
    v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 540877088;
    v35._object = (void *)0xE400000000000000;
    String.append(_:)(v35);
    uint64_t v85 = 3;
    goto LABEL_19;
  }
  uint64_t v76 = a2;
  unint64_t v81 = a4;
  unint64_t v86 = a3;
  unint64_t v87 = a3 + 32;
  uint64_t v88 = 0;
  uint64_t v89 = (2 * v11) | 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_260BF9FF0;
  long long v13 = *(_OWORD *)(v4 + 24);
  long long v90 = *(_OWORD *)(v4 + 8);
  long long v91 = v13;
  long long v92 = *(_OWORD *)(v4 + 40);
  uint64_t v79 = v90;
  uint64_t v80 = v13;
  uint64_t v14 = v92;
  uint64_t v15 = specialized Gadget.wirePolynomialLength.getter();
  uint64_t v16 = specialized Gadget.gadgetPolynomialLength.getter();
  *(_OWORD *)(inited + 32) = v90;
  *(void *)(inited + 48) = v14;
  *(void *)(inited + 56) = v15;
  *(void *)(inited + 64) = v16;
  swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay4VDAF16GadgetParametersVG_AF0E10WireInputsCyAF7Field32VGs5NeverOTg5096_s4VDAF16FullyLinearProofPAAE5prove4into11measurement0E4Rand05jointH0yqd__z_Say1FQzGA2KtKSmRd__7b15Qyd__AJRSlFAA16egh11CyAJGAA0K10f30VXEfU_AA15PINEMainCircuitVyAA7I18VSRySfGG_SayAVGTG5s10ArraySliceVyAMGTf1cn_nTm(inited, &v86);
  unint64_t v18 = v17;
  uint64_t v19 = v5;
  swift_setDeallocating();
  uint64_t v78 = a1;
  if (v18 >> 62) {
    goto LABEL_126;
  }
  for (uint64_t i = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10); ; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v21 = v76;
    uint64_t v22 = MEMORY[0x263F8EE78];
    uint64_t v77 = i;
    uint64_t v23 = v81;
    if (!i) {
      goto LABEL_20;
    }
    uint64_t v85 = MEMORY[0x263F8EE78];
    uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, i & ~(i >> 63), 0);
    uint64_t v25 = v77;
    if (v77 < 0) {
      break;
    }
    uint64_t v26 = 0;
    uint64_t v22 = v85;
    do
    {
      if ((v18 & 0xC000000000000001) != 0)
      {
        uint64_t v27 = MEMORY[0x2612245F0](v26, v18);
      }
      else
      {
        uint64_t v27 = *(void *)(v18 + 8 * v26 + 32);
        swift_retain();
      }
      uint64_t v85 = v22;
      unint64_t v29 = *(void *)(v22 + 16);
      unint64_t v28 = *(void *)(v22 + 24);
      if (v29 >= v28 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1);
        uint64_t v25 = v77;
        uint64_t v22 = v85;
      }
      ++v26;
      *(void *)(v22 + 16) = v29 + 1;
      *(void *)(v22 + 8 * v29 + 32) = v27;
    }
    while (v25 != v26);
    uint64_t v23 = v81;
    uint64_t v21 = v76;
LABEL_20:
    specialized PINEMainCircuit.evaluate(measurement:jointRand:numOfShares:for:)(v21, v23, 1uLL, v22, v83);
    if (v19)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease();
    }
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v39 = v77;
    if (v77 < 0) {
      goto LABEL_128;
    }
    uint64_t v19 = (uint64_t)v78;
    if (!v77)
    {
LABEL_102:
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease();
    }
    if (!v80) {
      goto LABEL_129;
    }
    uint64_t v40 = 0;
    unint64_t v81 = v18 & 0xC000000000000001;
    while (1)
    {
      if (v40 == v39) {
        goto LABEL_116;
      }
      unint64_t v42 = specialized Gadget.wirePolynomialLength.getter();
      specialized Gadget.gadgetPolynomialLength.getter();
      if (v40) {
        goto LABEL_117;
      }
      specialized Gadget.wirePolynomialLength.getter();
      specialized Gadget.gadgetPolynomialLength.getter();
      if (v79 < 0) {
        goto LABEL_118;
      }
      uint64_t v76 = 0;
      if (v79) {
        break;
      }
      uint64_t v45 = (void *)MEMORY[0x263F8EE78];
LABEL_58:
      specialized Gadget.wirePolynomialLength.getter();
      uint64_t result = specialized Gadget.gadgetPolynomialLength.getter();
      uint64_t v60 = result;
      if (v80 < 1)
      {
        int64_t v62 = &outlined read-only object #0 of specialized FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:);
      }
      else
      {
        uint64_t v61 = v45[2];
        int64_t v62 = &outlined read-only object #0 of specialized FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:);
        if (v61)
        {
          int64_t v63 = 0;
          int64_t v64 = v45 + 4;
          BOOL v65 = 1;
          while (1)
          {
            uint64_t v66 = v61 - v63;
            BOOL v67 = __OFSUB__(v61, v63);
            uint64_t v68 = v63 + v80;
            if (__OFADD__(v63, v80))
            {
              if (v67) {
                goto LABEL_114;
              }
              if (v66 < 0) {
                goto LABEL_130;
              }
              BOOL v69 = v66 < v80;
              int64_t v70 = v66 >= v80 ? v63 + v80 : v61;
              if (!v69) {
                goto LABEL_130;
              }
              uint64_t v68 = 0x7FFFFFFFFFFFFFFFLL;
              if (v70 < v63) {
                goto LABEL_108;
              }
            }
            else
            {
              if (v67) {
                goto LABEL_115;
              }
              if (v66 < 0)
              {
                int64_t v70 = v63 + v80;
                if (v68 < v63) {
                  goto LABEL_108;
                }
              }
              else
              {
                if (v66 >= v80) {
                  int64_t v70 = v63 + v80;
                }
                else {
                  int64_t v70 = v61;
                }
                if (v70 < v63) {
                  goto LABEL_108;
                }
              }
            }
            if (!v65) {
              goto LABEL_109;
            }
            if (v63 < 0) {
              break;
            }
            if (v61 < v70) {
              goto LABEL_111;
            }
            if (v63 >= (unint64_t)v70) {
              goto LABEL_112;
            }
            if (v63 + 1 >= (unint64_t)v70) {
              goto LABEL_113;
            }
            uint64_t v71 = v64[v63];
            uint64_t v19 = v64[v63 + 1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            specialized static Polynomial.* infix(_:_:)(v71, v19, &v84);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            specialized static Polynomial.+ infix(_:_:)((uint64_t)v62, (uint64_t)v84, (uint64_t *)&v82);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            int64_t v62 = v82;
            BOOL v65 = v61 >= v68;
            int64_t v63 = v68;
            if (v68 >= v61) {
              goto LABEL_91;
            }
          }
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
          goto LABEL_124;
        }
      }
LABEL_91:
      swift_bridgeObjectRelease();
      int64_t v72 = v62[2];
      if (!v72) {
        goto LABEL_119;
      }
      uint64_t v40 = 1;
      unint64_t v73 = v62[2];
      uint64_t v19 = (uint64_t)v78;
      while (!*((_DWORD *)v62 + v73 + 7))
      {
        if (v73-- <= 1)
        {
          unint64_t v73 = 0;
          goto LABEL_98;
        }
      }
      if ((v73 & 0x8000000000000000) != 0) {
        goto LABEL_120;
      }
      if (v72 < (uint64_t)v73) {
        goto LABEL_121;
      }
LABEL_98:
      specialized Array.append<A>(contentsOf:)((uint64_t)v62, (uint64_t)(v62 + 4), 0, (2 * v73) | 1);
      BOOL v74 = __OFSUB__(v60, v73);
      unint64_t v75 = v60 - v73;
      if (v74) {
        goto LABEL_122;
      }
      if ((v75 & 0x8000000000000000) != 0) {
        goto LABEL_123;
      }
      if (v75)
      {
        uint64_t v41 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v41 + 16) = v75;
        bzero((void *)(v41 + 32), 4 * v75);
      }
      else
      {
        uint64_t v41 = MEMORY[0x263F8EE78];
      }
      specialized Array.append<A>(contentsOf:)(v41);
      uint64_t v39 = v77;
      if (v77 == 1) {
        goto LABEL_102;
      }
    }
    if (v81 || *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      if ((v42 & 0x8000000000000000) != 0) {
        goto LABEL_125;
      }
      unint64_t v43 = 0;
      uint64_t v44 = *(char **)v19;
      uint64_t v45 = (void *)MEMORY[0x263F8EE78];
      while (1)
      {
        if (v81)
        {
          uint64_t v46 = MEMORY[0x2612245F0](0, v18);
        }
        else
        {
          uint64_t v46 = *(void *)(v18 + 32);
          swift_retain();
        }
        swift_beginAccess();
        uint64_t v47 = *(void *)(v46 + 32);
        if (v43 >= *(void *)(v47 + 16)) {
          break;
        }
        uint64_t v48 = *(void *)(v47 + 8 * v43 + 32);
        swift_bridgeObjectRetain();
        swift_release();
        if (*(void *)(v48 + 16) - 1 >= v42) {
          goto LABEL_104;
        }
        uint64_t v49 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v49 + 16) = v42;
        bzero((void *)(v49 + 32), 4 * v42);
        uint64_t v84 = (char *)v49;
        specialized inverseDiscreteFourierTransform<A, B, C>(input:size:output:)(v48, v42, &v84);
        uint64_t v19 = (uint64_t)v84;
        uint64_t v50 = *((void *)v84 + 2);
        swift_bridgeObjectRelease();
        if (!v50) {
          goto LABEL_105;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45[2] + 1, 1, v45, &demangling cache variable for type metadata for _ContiguousArrayStorage<Polynomial<Field32>>, &demangling cache variable for type metadata for Polynomial<Field32>);
        }
        unint64_t v52 = v45[2];
        unint64_t v51 = v45[3];
        if (v52 >= v51 >> 1) {
          uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v51 > 1), v52 + 1, 1, v45, &demangling cache variable for type metadata for _ContiguousArrayStorage<Polynomial<Field32>>, &demangling cache variable for type metadata for Polynomial<Field32>);
        }
        v45[2] = v52 + 1;
        v45[v52 + 4] = v19;
        if (v81)
        {
          uint64_t v53 = MEMORY[0x2612245F0](0, v18);
        }
        else
        {
          uint64_t v53 = *(void *)(v18 + 32);
          swift_retain();
        }
        swift_beginAccess();
        uint64_t v54 = *(void *)(v53 + 32);
        if (v43 >= *(void *)(v54 + 16)) {
          goto LABEL_106;
        }
        uint64_t v55 = *(void *)(v54 + 8 * v43 + 32);
        if (!*(void *)(v55 + 16)) {
          goto LABEL_107;
        }
        uint64_t v19 = *(unsigned int *)(v55 + 32);
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v44 + 2) + 1, 1, v44);
        }
        unint64_t v57 = *((void *)v44 + 2);
        unint64_t v56 = *((void *)v44 + 3);
        uint64_t v58 = v79;
        if (v57 >= v56 >> 1)
        {
          unint64_t v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v56 > 1), v57 + 1, 1, v44);
          uint64_t v58 = v79;
          uint64_t v44 = v59;
        }
        ++v43;
        *((void *)v44 + 2) = v57 + 1;
        *(_DWORD *)&v44[4 * v57 + 32] = v19;
        if (v58 == v43)
        {
          *uint64_t v78 = v44;
          goto LABEL_58;
        }
      }
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
      goto LABEL_110;
    }
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    ;
  }
  __break(1u);
LABEL_128:
  __break(1u);
LABEL_129:
  __break(1u);
LABEL_130:
  __break(1u);
  return result;
}

uint64_t specialized FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:)(char **a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)v4;
  if (v6 != *(void *)v4)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    unint64_t v88 = 0xD00000000000001BLL;
    unint64_t v89 = 0x8000000260BFEB20;
    v87[0] = v6;
LABEL_17:
    v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._countAndFlagsBits = 540877088;
    v34._object = (void *)0xE400000000000000;
    String.append(_:)(v34);
    v87[0] = v7;
LABEL_19:
    v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    unint64_t v38 = v89;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v39 = v88;
    *(void *)(v39 + 8) = v38;
    *(unsigned char *)(v39 + 16) = 2;
    return swift_willThrow();
  }
  uint64_t v12 = *(void *)(a3 + 16);
  if (v12 != specialized FullyLinearProof.proveRandLength.getter())
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    unint64_t v88 = 0xD000000000000019;
    unint64_t v89 = 0x8000000260BFEE20;
    v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._countAndFlagsBits = 540877088;
    v36._object = (void *)0xE400000000000000;
    String.append(_:)(v36);
    v87[0] = specialized FullyLinearProof.proveRandLength.getter();
    goto LABEL_19;
  }
  unint64_t v83 = a2;
  uint64_t v80 = a1;
  uint64_t v13 = *(void *)(a4 + 16);
  uint64_t v7 = *(void *)(v4 + 16);
  if (v13 != v7)
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    unint64_t v88 = 0xD000000000000019;
    unint64_t v89 = 0x8000000260BFEB80;
    v87[0] = v13;
    goto LABEL_17;
  }
  uint64_t v78 = a4;
  unint64_t v88 = a3;
  unint64_t v89 = a3 + 32;
  uint64_t v90 = 0;
  uint64_t v91 = (2 * v12) | 1;
  long long v14 = *(_OWORD *)(v4 + 64);
  long long v92 = *(_OWORD *)(v4 + 48);
  long long v93 = v14;
  long long v94 = *(_OWORD *)(v4 + 80);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_260BF9FF0;
  uint64_t v16 = *((void *)&v92 + 1);
  uint64_t v82 = v93;
  uint64_t v17 = v94;
  uint64_t v18 = specialized Gadget.wirePolynomialLength.getter();
  uint64_t v19 = specialized Gadget.gadgetPolynomialLength.getter();
  uint64_t v81 = v92;
  *(void *)(inited + 32) = v92;
  *(void *)(inited + 40) = v16;
  *(void *)(inited + 48) = v17;
  *(void *)(inited + 56) = v18;
  *(void *)(inited + 64) = v19;
  swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay4VDAF16GadgetParametersVG_AF0E10WireInputsCyAF7Field64VGs5NeverOTg5096_s4VDAF16FullyLinearProofPAAE5prove4into11measurement0E4Rand05jointH0yqd__z_Say1FQzGA2KtKSmRd__7b15Qyd__AJRSlFAA16egh11CyAJGAA0K10f28VXEfU_AA13SumVectorTypeVyAA7I14VSWG_SayAVGTG5s10ArraySliceVyAMGTf1cn_n(inited, &v88);
  unint64_t v21 = v20;
  uint64_t v22 = v5;
  swift_setDeallocating();
  if (v21 >> 62) {
    goto LABEL_127;
  }
  for (uint64_t i = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10); ; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v24 = v80;
    uint64_t v25 = v83;
    uint64_t v26 = MEMORY[0x263F8EE78];
    uint64_t v79 = i;
    if (!i) {
      goto LABEL_21;
    }
    uint64_t v85 = MEMORY[0x263F8EE78];
    uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, i & ~(i >> 63), 0);
    uint64_t v28 = v79;
    if (v79 < 0) {
      break;
    }
    uint64_t v29 = 0;
    uint64_t v26 = v85;
    do
    {
      if ((v21 & 0xC000000000000001) != 0)
      {
        uint64_t v30 = MEMORY[0x2612245F0](v29, v21);
      }
      else
      {
        uint64_t v30 = *(void *)(v21 + 8 * v29 + 32);
        swift_retain();
      }
      uint64_t v85 = v26;
      unint64_t v32 = *(void *)(v26 + 16);
      unint64_t v31 = *(void *)(v26 + 24);
      if (v32 >= v31 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v32 + 1, 1);
        uint64_t v28 = v79;
        uint64_t v26 = v85;
      }
      ++v29;
      *(void *)(v26 + 16) = v32 + 1;
      *(void *)(v26 + 8 * v32 + 32) = v30;
    }
    while (v28 != v29);
    uint64_t v24 = v80;
    uint64_t v25 = v83;
LABEL_21:
    specialized SumVectorType.evaluate(measurement:jointRand:numOfShares:for:)(v25, v78, 1uLL, v26, v87);
    if (v22)
    {
      swift_bridgeObjectRelease();
LABEL_23:
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease();
    }
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v40 = v79;
    if (v79 < 0) {
      goto LABEL_129;
    }
    if (!v79) {
      goto LABEL_23;
    }
    if (!v82) {
      goto LABEL_130;
    }
    uint64_t v41 = 0;
    unint64_t v83 = v21 & 0xC000000000000001;
    while (1)
    {
      if (v41 == v40) {
        goto LABEL_117;
      }
      unint64_t v43 = specialized Gadget.wirePolynomialLength.getter();
      specialized Gadget.gadgetPolynomialLength.getter();
      if (v41) {
        goto LABEL_118;
      }
      specialized Gadget.wirePolynomialLength.getter();
      specialized Gadget.gadgetPolynomialLength.getter();
      if (v81 < 0) {
        goto LABEL_119;
      }
      uint64_t v78 = 0;
      if (v81) {
        break;
      }
      uint64_t v45 = (void *)MEMORY[0x263F8EE78];
LABEL_60:
      specialized Gadget.wirePolynomialLength.getter();
      uint64_t result = specialized Gadget.gadgetPolynomialLength.getter();
      uint64_t v22 = (char *)result;
      if (v82 < 1)
      {
        int64_t v63 = &outlined read-only object #0 of specialized FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:);
      }
      else
      {
        uint64_t v62 = v45[2];
        int64_t v63 = &outlined read-only object #0 of specialized FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:);
        if (v62)
        {
          int64_t v64 = 0;
          BOOL v65 = v45 + 4;
          BOOL v66 = 1;
          while (1)
          {
            uint64_t v67 = v62 - v64;
            BOOL v68 = __OFSUB__(v62, v64);
            uint64_t v69 = v64 + v82;
            if (__OFADD__(v64, v82))
            {
              if (v68) {
                goto LABEL_115;
              }
              if (v67 < 0) {
                goto LABEL_131;
              }
              BOOL v70 = v67 < v82;
              int64_t v71 = v67 >= v82 ? v64 + v82 : v62;
              if (!v70) {
                goto LABEL_131;
              }
              uint64_t v69 = 0x7FFFFFFFFFFFFFFFLL;
              if (v71 < v64) {
                goto LABEL_109;
              }
            }
            else
            {
              if (v68) {
                goto LABEL_116;
              }
              if (v67 < 0)
              {
                int64_t v71 = v64 + v82;
                if (v69 < v64) {
                  goto LABEL_109;
                }
              }
              else
              {
                if (v67 >= v82) {
                  int64_t v71 = v64 + v82;
                }
                else {
                  int64_t v71 = v62;
                }
                if (v71 < v64) {
                  goto LABEL_109;
                }
              }
            }
            if (!v66) {
              goto LABEL_110;
            }
            if (v64 < 0) {
              break;
            }
            if (v62 < v71) {
              goto LABEL_112;
            }
            if (v64 >= (unint64_t)v71) {
              goto LABEL_113;
            }
            if (v64 + 1 >= (unint64_t)v71) {
              goto LABEL_114;
            }
            uint64_t v72 = v65[v64];
            uint64_t v73 = v65[v64 + 1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            specialized static Polynomial.* infix(_:_:)(v72, v73, &v86);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            specialized static Polynomial.+ infix(_:_:)((uint64_t)v63, (uint64_t)v86, (uint64_t *)&v84);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            int64_t v63 = v84;
            BOOL v66 = v62 >= v69;
            int64_t v64 = v69;
            if (v69 >= v62) {
              goto LABEL_93;
            }
          }
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
          goto LABEL_125;
        }
      }
LABEL_93:
      swift_bridgeObjectRelease();
      int64_t v74 = v63[2];
      if (!v74) {
        goto LABEL_120;
      }
      uint64_t v41 = 1;
      unint64_t v75 = v63[2];
      uint64_t v24 = v80;
      while (!v63[v75 + 3])
      {
        if (v75-- <= 1)
        {
          unint64_t v75 = 0;
          goto LABEL_100;
        }
      }
      if ((v75 & 0x8000000000000000) != 0) {
        goto LABEL_121;
      }
      if (v74 < (uint64_t)v75) {
        goto LABEL_122;
      }
LABEL_100:
      specialized Array.append<A>(contentsOf:)((uint64_t)v63, (uint64_t)(v63 + 4), 0, (2 * v75) | 1, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
      BOOL v76 = __OFSUB__(v22, v75);
      unint64_t v77 = (unint64_t)&v22[-v75];
      if (v76) {
        goto LABEL_123;
      }
      if ((v77 & 0x8000000000000000) != 0) {
        goto LABEL_124;
      }
      if (v77)
      {
        uint64_t v42 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v42 + 16) = v77;
        bzero((void *)(v42 + 32), 8 * v77);
      }
      else
      {
        uint64_t v42 = MEMORY[0x263F8EE78];
      }
      specialized Array.append<A>(contentsOf:)(v42, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
      uint64_t v40 = v79;
      if (v79 == 1) {
        goto LABEL_23;
      }
    }
    if (v83 || *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      if ((v43 & 0x8000000000000000) != 0) {
        goto LABEL_126;
      }
      unint64_t v44 = 0;
      uint64_t v22 = *v24;
      uint64_t v45 = (void *)MEMORY[0x263F8EE78];
      while (1)
      {
        if (v83)
        {
          uint64_t v46 = MEMORY[0x2612245F0](0, v21);
        }
        else
        {
          uint64_t v46 = *(void *)(v21 + 32);
          swift_retain();
        }
        swift_beginAccess();
        uint64_t v47 = *(void *)(v46 + 32);
        if (v44 >= *(void *)(v47 + 16)) {
          break;
        }
        uint64_t v48 = *(void *)(v47 + 8 * v44 + 32);
        swift_bridgeObjectRetain();
        swift_release();
        if (*(void *)(v48 + 16) - 1 >= v43) {
          goto LABEL_105;
        }
        uint64_t v49 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v49 + 16) = v43;
        bzero((void *)(v49 + 32), 8 * v43);
        unint64_t v86 = (char *)v49;
        specialized inverseDiscreteFourierTransform<A, B, C>(input:size:output:)(v48, v43, &v86);
        uint64_t v50 = v86;
        uint64_t v51 = *((void *)v86 + 2);
        swift_bridgeObjectRelease();
        if (!v51) {
          goto LABEL_106;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45[2] + 1, 1, v45, &demangling cache variable for type metadata for _ContiguousArrayStorage<Polynomial<Field64>>, &demangling cache variable for type metadata for Polynomial<Field64>);
        }
        unint64_t v53 = v45[2];
        unint64_t v52 = v45[3];
        if (v53 >= v52 >> 1) {
          uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v52 > 1), v53 + 1, 1, v45, &demangling cache variable for type metadata for _ContiguousArrayStorage<Polynomial<Field64>>, &demangling cache variable for type metadata for Polynomial<Field64>);
        }
        v45[2] = v53 + 1;
        v45[v53 + 4] = v50;
        if (v83)
        {
          uint64_t v54 = MEMORY[0x2612245F0](0, v21);
        }
        else
        {
          uint64_t v54 = *(void *)(v21 + 32);
          swift_retain();
        }
        swift_beginAccess();
        uint64_t v55 = *(void *)(v54 + 32);
        if (v44 >= *(void *)(v55 + 16)) {
          goto LABEL_107;
        }
        uint64_t v56 = *(void *)(v55 + 8 * v44 + 32);
        if (!*(void *)(v56 + 16)) {
          goto LABEL_108;
        }
        uint64_t v57 = *(void *)(v56 + 32);
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v22 + 2) + 1, 1, v22, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
        }
        unint64_t v59 = *((void *)v22 + 2);
        unint64_t v58 = *((void *)v22 + 3);
        uint64_t v60 = v81;
        if (v59 >= v58 >> 1)
        {
          uint64_t v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v58 > 1), v59 + 1, 1, v22, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
          uint64_t v60 = v81;
          uint64_t v22 = v61;
        }
        ++v44;
        *((void *)v22 + 2) = v59 + 1;
        *(void *)&v22[8 * v59 + 32] = v57;
        if (v60 == v44)
        {
          *uint64_t v80 = v22;
          goto LABEL_60;
        }
      }
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
      goto LABEL_111;
    }
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    ;
  }
  __break(1u);
LABEL_129:
  __break(1u);
LABEL_130:
  __break(1u);
LABEL_131:
  __break(1u);
  return result;
}

uint64_t specialized FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:)(char **a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v6 = *(void *)(v4 + 72);
  if (*(void *)(a2 + 16) != v6)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    unint64_t v87 = 0xD00000000000001BLL;
    unint64_t v88 = 0x8000000260BFEB20;
    v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._countAndFlagsBits = 540877088;
    v31._object = (void *)0xE400000000000000;
    String.append(_:)(v31);
    v86[0] = v6;
LABEL_19:
    v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    unint64_t v37 = v88;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v38 = v87;
    *(void *)(v38 + 8) = v37;
    *(unsigned char *)(v38 + 16) = 2;
    return swift_willThrow();
  }
  uint64_t v11 = *(void *)(a3 + 16);
  if (v11 != specialized FullyLinearProof.proveRandLength.getter())
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    unint64_t v87 = 0xD000000000000019;
    unint64_t v88 = 0x8000000260BFEE20;
    v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._countAndFlagsBits = 540877088;
    v33._object = (void *)0xE400000000000000;
    String.append(_:)(v33);
    v86[0] = specialized FullyLinearProof.proveRandLength.getter();
    goto LABEL_19;
  }
  if (a4[2] != 3)
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    unint64_t v87 = 0xD000000000000019;
    unint64_t v88 = 0x8000000260BFEB80;
    v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 540877088;
    v35._object = (void *)0xE400000000000000;
    String.append(_:)(v35);
    v86[0] = 3;
    goto LABEL_19;
  }
  uint64_t v77 = a2;
  uint64_t v82 = a4;
  uint64_t v79 = a1;
  unint64_t v87 = a3;
  unint64_t v88 = a3 + 32;
  uint64_t v89 = 0;
  uint64_t v90 = (2 * v11) | 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_260BF9FF0;
  long long v13 = *(_OWORD *)(v4 + 24);
  long long v91 = *(_OWORD *)(v4 + 8);
  long long v92 = v13;
  long long v93 = *(_OWORD *)(v4 + 40);
  uint64_t v14 = *((void *)&v91 + 1);
  uint64_t v81 = v13;
  uint64_t v15 = v93;
  uint64_t v16 = specialized Gadget.wirePolynomialLength.getter();
  uint64_t v17 = specialized Gadget.gadgetPolynomialLength.getter();
  uint64_t v80 = v91;
  *(void *)(inited + 32) = v91;
  *(void *)(inited + 40) = v14;
  *(void *)(inited + 48) = v15;
  *(void *)(inited + 56) = v16;
  *(void *)(inited + 64) = v17;
  swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay4VDAF16GadgetParametersVG_AF0E10WireInputsCyAF7Field64VGs5NeverOTg5096_s4VDAF16FullyLinearProofPAAE5prove4into11measurement0E4Rand05jointH0yqd__z_Say1FQzGA2KtKSmRd__7b15Qyd__AJRSlFAA16egh11CyAJGAA0K10f28VXEfU_AA13SumVectorTypeVyAA7I14VSWG_SayAVGTG5s10ArraySliceVyAMGTf1cn_n(inited, &v87);
  unint64_t v19 = v18;
  unint64_t v20 = v5;
  swift_setDeallocating();
  if (v19 >> 62) {
    goto LABEL_126;
  }
  for (uint64_t i = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10); ; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v22 = MEMORY[0x263F8EE78];
    uint64_t v23 = v79;
    uint64_t v78 = i;
    if (!i) {
      goto LABEL_20;
    }
    uint64_t v84 = MEMORY[0x263F8EE78];
    uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, i & ~(i >> 63), 0);
    uint64_t v25 = v78;
    if (v78 < 0) {
      break;
    }
    uint64_t v26 = 0;
    uint64_t v22 = v84;
    do
    {
      if ((v19 & 0xC000000000000001) != 0)
      {
        uint64_t v27 = MEMORY[0x2612245F0](v26, v19);
      }
      else
      {
        uint64_t v27 = *(void *)(v19 + 8 * v26 + 32);
        swift_retain();
      }
      uint64_t v84 = v22;
      unint64_t v29 = *(void *)(v22 + 16);
      unint64_t v28 = *(void *)(v22 + 24);
      if (v29 >= v28 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1);
        uint64_t v25 = v78;
        uint64_t v22 = v84;
      }
      ++v26;
      *(void *)(v22 + 16) = v29 + 1;
      *(void *)(v22 + 8 * v29 + 32) = v27;
    }
    while (v25 != v26);
    uint64_t v23 = v79;
LABEL_20:
    specialized PINEMainCircuit.evaluate(measurement:jointRand:numOfShares:for:)(v77, v82, 1uLL, v22, v86);
    if (v20)
    {
      swift_bridgeObjectRelease();
LABEL_22:
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease();
    }
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v39 = v78;
    if (v78 < 0) {
      goto LABEL_128;
    }
    if (!v78) {
      goto LABEL_22;
    }
    if (!v81) {
      goto LABEL_129;
    }
    uint64_t v40 = 0;
    uint64_t v82 = (void *)(v19 & 0xC000000000000001);
    while (1)
    {
      if (v40 == v39) {
        goto LABEL_116;
      }
      unint64_t v42 = specialized Gadget.wirePolynomialLength.getter();
      specialized Gadget.gadgetPolynomialLength.getter();
      if (v40) {
        goto LABEL_117;
      }
      specialized Gadget.wirePolynomialLength.getter();
      specialized Gadget.gadgetPolynomialLength.getter();
      if (v80 < 0) {
        goto LABEL_118;
      }
      uint64_t v77 = 0;
      if (v80) {
        break;
      }
      unint64_t v44 = (void *)MEMORY[0x263F8EE78];
LABEL_59:
      specialized Gadget.wirePolynomialLength.getter();
      uint64_t result = specialized Gadget.gadgetPolynomialLength.getter();
      unint64_t v20 = (char *)result;
      if (v81 < 1)
      {
        uint64_t v62 = &outlined read-only object #0 of specialized FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:);
      }
      else
      {
        uint64_t v61 = v44[2];
        uint64_t v62 = &outlined read-only object #0 of specialized FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:);
        if (v61)
        {
          int64_t v63 = 0;
          int64_t v64 = v44 + 4;
          BOOL v65 = 1;
          while (1)
          {
            uint64_t v66 = v61 - v63;
            BOOL v67 = __OFSUB__(v61, v63);
            uint64_t v68 = v63 + v81;
            if (__OFADD__(v63, v81))
            {
              if (v67) {
                goto LABEL_114;
              }
              if (v66 < 0) {
                goto LABEL_130;
              }
              BOOL v69 = v66 < v81;
              int64_t v70 = v66 >= v81 ? v63 + v81 : v61;
              if (!v69) {
                goto LABEL_130;
              }
              uint64_t v68 = 0x7FFFFFFFFFFFFFFFLL;
              if (v70 < v63) {
                goto LABEL_108;
              }
            }
            else
            {
              if (v67) {
                goto LABEL_115;
              }
              if (v66 < 0)
              {
                int64_t v70 = v63 + v81;
                if (v68 < v63) {
                  goto LABEL_108;
                }
              }
              else
              {
                if (v66 >= v81) {
                  int64_t v70 = v63 + v81;
                }
                else {
                  int64_t v70 = v61;
                }
                if (v70 < v63) {
                  goto LABEL_108;
                }
              }
            }
            if (!v65) {
              goto LABEL_109;
            }
            if (v63 < 0) {
              break;
            }
            if (v61 < v70) {
              goto LABEL_111;
            }
            if (v63 >= (unint64_t)v70) {
              goto LABEL_112;
            }
            if (v63 + 1 >= (unint64_t)v70) {
              goto LABEL_113;
            }
            uint64_t v71 = v64[v63];
            uint64_t v72 = v64[v63 + 1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            specialized static Polynomial.* infix(_:_:)(v71, v72, &v85);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            specialized static Polynomial.+ infix(_:_:)((uint64_t)v62, (uint64_t)v85, (uint64_t *)&v83);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            uint64_t v62 = v83;
            BOOL v65 = v61 >= v68;
            int64_t v63 = v68;
            if (v68 >= v61) {
              goto LABEL_92;
            }
          }
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
          goto LABEL_124;
        }
      }
LABEL_92:
      swift_bridgeObjectRelease();
      int64_t v73 = v62[2];
      if (!v73) {
        goto LABEL_119;
      }
      uint64_t v40 = 1;
      unint64_t v74 = v62[2];
      uint64_t v23 = v79;
      while (!v62[v74 + 3])
      {
        if (v74-- <= 1)
        {
          unint64_t v74 = 0;
          goto LABEL_99;
        }
      }
      if ((v74 & 0x8000000000000000) != 0) {
        goto LABEL_120;
      }
      if (v73 < (uint64_t)v74) {
        goto LABEL_121;
      }
LABEL_99:
      specialized Array.append<A>(contentsOf:)((uint64_t)v62, (uint64_t)(v62 + 4), 0, (2 * v74) | 1, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
      BOOL v75 = __OFSUB__(v20, v74);
      unint64_t v76 = (unint64_t)&v20[-v74];
      if (v75) {
        goto LABEL_122;
      }
      if ((v76 & 0x8000000000000000) != 0) {
        goto LABEL_123;
      }
      if (v76)
      {
        uint64_t v41 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v41 + 16) = v76;
        bzero((void *)(v41 + 32), 8 * v76);
      }
      else
      {
        uint64_t v41 = MEMORY[0x263F8EE78];
      }
      specialized Array.append<A>(contentsOf:)(v41, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
      uint64_t v39 = v78;
      if (v78 == 1) {
        goto LABEL_22;
      }
    }
    if (v82 || *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      if ((v42 & 0x8000000000000000) != 0) {
        goto LABEL_125;
      }
      unint64_t v43 = 0;
      unint64_t v20 = *v23;
      unint64_t v44 = (void *)MEMORY[0x263F8EE78];
      while (1)
      {
        if (v82)
        {
          uint64_t v45 = MEMORY[0x2612245F0](0, v19);
        }
        else
        {
          uint64_t v45 = *(void *)(v19 + 32);
          swift_retain();
        }
        swift_beginAccess();
        uint64_t v46 = *(void *)(v45 + 32);
        if (v43 >= *(void *)(v46 + 16)) {
          break;
        }
        uint64_t v47 = *(void *)(v46 + 8 * v43 + 32);
        swift_bridgeObjectRetain();
        swift_release();
        if (*(void *)(v47 + 16) - 1 >= v42) {
          goto LABEL_104;
        }
        uint64_t v48 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v48 + 16) = v42;
        bzero((void *)(v48 + 32), 8 * v42);
        uint64_t v85 = (char *)v48;
        specialized inverseDiscreteFourierTransform<A, B, C>(input:size:output:)(v47, v42, &v85);
        uint64_t v49 = v85;
        uint64_t v50 = *((void *)v85 + 2);
        swift_bridgeObjectRelease();
        if (!v50) {
          goto LABEL_105;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v44[2] + 1, 1, v44, &demangling cache variable for type metadata for _ContiguousArrayStorage<Polynomial<Field64>>, &demangling cache variable for type metadata for Polynomial<Field64>);
        }
        unint64_t v52 = v44[2];
        unint64_t v51 = v44[3];
        if (v52 >= v51 >> 1) {
          unint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v51 > 1), v52 + 1, 1, v44, &demangling cache variable for type metadata for _ContiguousArrayStorage<Polynomial<Field64>>, &demangling cache variable for type metadata for Polynomial<Field64>);
        }
        v44[2] = v52 + 1;
        v44[v52 + 4] = v49;
        if (v82)
        {
          uint64_t v53 = MEMORY[0x2612245F0](0, v19);
        }
        else
        {
          uint64_t v53 = *(void *)(v19 + 32);
          swift_retain();
        }
        swift_beginAccess();
        uint64_t v54 = *(void *)(v53 + 32);
        if (v43 >= *(void *)(v54 + 16)) {
          goto LABEL_106;
        }
        uint64_t v55 = *(void *)(v54 + 8 * v43 + 32);
        if (!*(void *)(v55 + 16)) {
          goto LABEL_107;
        }
        uint64_t v56 = *(void *)(v55 + 32);
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v20 + 2) + 1, 1, v20, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
        }
        unint64_t v58 = *((void *)v20 + 2);
        unint64_t v57 = *((void *)v20 + 3);
        uint64_t v59 = v80;
        if (v58 >= v57 >> 1)
        {
          uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v57 > 1), v58 + 1, 1, v20, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
          uint64_t v59 = v80;
          unint64_t v20 = v60;
        }
        ++v43;
        *((void *)v20 + 2) = v58 + 1;
        *(void *)&v20[8 * v58 + 32] = v56;
        if (v59 == v43)
        {
          *uint64_t v79 = v20;
          goto LABEL_59;
        }
      }
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
      goto LABEL_110;
    }
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    ;
  }
  __break(1u);
LABEL_128:
  __break(1u);
LABEL_129:
  __break(1u);
LABEL_130:
  __break(1u);
  return result;
}

uint64_t specialized closure #5 in PINE.shard<A>(_:nonce:seedBytes:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HMAC<SHA256>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6, v8);
  uint64_t v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA256>);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t result = MEMORY[0x270FA5388](v11, v13);
  uint64_t v16 = (char *)v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v17 = a1 + 1;
  if (__OFADD__(a1, 1))
  {
    __break(1u);
    goto LABEL_14;
  }
  if ((v17 & 0x8000000000000000) != 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v17 > 0xFF)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (*(void *)(a2 + 16) <= a1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v26[0] = result;
  uint64_t v18 = *(void *)(a2 + 8 * a1 + 32);
  swift_bridgeObjectRetain();
  uint64_t v19 = specialized static PINE.domainSeparationTag(usage:)(1u);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t result = swift_initStackObject();
  *(_OWORD *)(result + 16) = xmmword_260BF9FE0;
  unint64_t v20 = *(void *)(a3 + 320);
  if ((v20 & 0x8000000000000000) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v20 > 0xFF)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v21 = result;
  *(unsigned char *)(result + 32) = v20;
  unint64_t v22 = *(void *)(a3 + 312);
  if ((v22 & 0x8000000000000000) != 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v22 > 0xFF)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  *(unsigned char *)(result + 33) = v22;
  *(unsigned char *)(result + 34) = v17;
  if (*(void *)(v18 + 16) != 32)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  type metadata accessor for XofHmacSha256Aes128(0);
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = XofHmacSha256Aes128.init(seedBytes:domainSeparationTag:binder:)(v18, v19, v21);
  if (!*(void *)(result + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream))
  {
    uint64_t v23 = result;
    uint64_t v24 = result + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_hmac;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v24, v6);
    HMAC.finalize()();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    uint64_t v25 = v26[0];
    HashedAuthenticationCode.withUnsafeBytes<A>(_:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v23;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t specialized PINE.inputSharesFrom(leaderMeasurementShare:leaderProofShare:leaderWraparoundJointRandBlind:leaderVerificationJointRandBlind:helperSeeds:)(uint64_t a1, unint64_t a2, uint64_t a3, int64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v13 = (_OWORD *)*v7;
  uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *v7 & ~((uint64_t)*v7 >> 63), 0, MEMORY[0x263F8EE78], a6, a7);
  unint64_t v15 = v14[2];
  unint64_t v16 = v14[3];
  int64_t v17 = v15 + 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  if (v15 >= v16 >> 1) {
    goto LABEL_12;
  }
  while (1)
  {
    v14[2] = v17;
    uint64_t v19 = &v14[6 * v15];
    v19[4] = a1;
    *((unsigned char *)v19 + 40) = 0;
    v19[6] = a2;
    *((unsigned char *)v19 + 56) = 0;
    v19[8] = a3;
    v19[9] = a4;
    a2 = (unint64_t)v13 - 1;
    if (__OFSUB__(v13, 1)) {
      break;
    }
    if ((a2 & 0x8000000000000000) != 0) {
      goto LABEL_14;
    }
    if (v13 == (_OWORD *)1) {
      return (uint64_t)v14;
    }
    a1 = *(void *)(a5 + 16);
    int64_t v17 = 48 * v15 + 80;
    a4 = v15 + 2;
    uint64_t v13 = (_OWORD *)(a5 + 48);
    while (a1)
    {
      unint64_t v15 = a4 - 1;
      a3 = *((void *)v13 - 2);
      a5 = *((void *)v13 - 1);
      long long v23 = *v13;
      unint64_t v16 = v14[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (a4 - 1 >= v16 >> 1) {
        uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), a4, 1, v14, a6, a7);
      }
      v14[2] = a4;
      unint64_t v20 = (char *)v14 + v17;
      *(void *)unint64_t v20 = a3;
      v20[8] = 1;
      *((void *)v20 + 2) = a5;
      v17 += 48;
      ++a4;
      v20[24] = 1;
      --a1;
      v13 += 2;
      *((_OWORD *)v20 + 2) = v23;
      if (!--a2) {
        return (uint64_t)v14;
      }
    }
    __break(1u);
LABEL_12:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17, 1, v14, a6, a7);
    uint64_t v14 = (void *)result;
  }
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t specialized inverseDiscreteFourierTransformFinish<A, B>(size:sizeInverse:output:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  if (*(void *)(*a3 + 16) < a1) {
    goto LABEL_75;
  }
  unint64_t v3 = a3;
  unint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    uint64_t v8 = *(void *)(v6 + 16);
    if (v8) {
      goto LABEL_4;
    }
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
    return result;
  }
LABEL_76:
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
  uint64_t v6 = result;
  uint64_t v8 = *(void *)(result + 16);
  if (!v8) {
    goto LABEL_77;
  }
LABEL_4:
  uint64_t v9 = (unint64_t *)(v6 + 32);
  unint64_t v10 = *(void *)(v6 + 32);
  uint64_t v11 = v10 * v4;
  uint64_t v12 = (v10 * (unsigned __int128)v4) >> 64;
  unint64_t v13 = 0xCFFE47FFFEAFFFFFLL * v10 * v4;
  uint64_t v14 = (v13 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
  LODWORD(v15) = __CFADD__(0xFFFEB00001 * v13, v11);
  uint64_t v16 = v14 + v12;
  if (__CFADD__(v14, v12))
  {
    uint64_t v17 = v16 + v15;
    BOOL v18 = __CFADD__(v17, 0xFFFFFF00014FFFFFLL);
    unint64_t v15 = v17 - 0xFFFEB00001;
    if (!v18) {
      goto LABEL_19;
    }
    __break(1u);
  }
  if (v16 == -1)
  {
    if (v15) {
      unint64_t v15 = 0xFFFFFF00014FFFFFLL;
    }
    else {
      unint64_t v15 = 0xFFFFFF00014FFFFELL;
    }
  }
  else
  {
    unint64_t v15 = v16 + v15;
    if (v15 >= 0xFFFEB00001) {
      v15 -= 0xFFFEB00001;
    }
  }
LABEL_19:
  *uint64_t v9 = v15;
  if (v5 >= 0) {
    uint64_t v19 = v5;
  }
  else {
    uint64_t v19 = v5 + 1;
  }
  if (v5 < -1) {
    goto LABEL_78;
  }
  uint64_t v20 = v19 >> 1;
  if (v20 >= v8) {
    goto LABEL_78;
  }
  unint64_t v21 = v9[v20];
  uint64_t v22 = (v21 * (unsigned __int128)v4) >> 64;
  unint64_t v23 = v21 * v4;
  uint64_t v24 = (0xCFFE47FFFEAFFFFFLL * v23 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
  LODWORD(v25) = __CFADD__(-(uint64_t)v23, v23);
  BOOL v18 = __CFADD__(v24, v22);
  uint64_t v26 = v24 + v22;
  if (v18)
  {
    uint64_t v27 = v26 + v25;
    BOOL v18 = __CFADD__(v27, 0xFFFFFF00014FFFFFLL);
    unint64_t v25 = v27 - 0xFFFEB00001;
    if (!v18) {
      goto LABEL_39;
    }
    __break(1u);
  }
  if (v26 == -1)
  {
    if (v25) {
      unint64_t v25 = 0xFFFFFF00014FFFFFLL;
    }
    else {
      unint64_t v25 = 0xFFFFFF00014FFFFELL;
    }
  }
  else
  {
    unint64_t v25 = v26 + v25;
    if (v25 >= 0xFFFEB00001) {
      v25 -= 0xFFFEB00001;
    }
  }
LABEL_39:
  v9[v20] = v25;
  *unint64_t v3 = v6;
  if (v5 >= 2 && (v5 & 0xFFFFFFFFFFFFFFFELL) != 2)
  {
    uint64_t v28 = 0;
    uint64_t v29 = v5 + 3;
    uint64_t v30 = v20 - 1;
    while (1)
    {
      unint64_t v33 = *(void *)(v6 + 16);
      if (v28 + 1 >= v33)
      {
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
        goto LABEL_76;
      }
      if (v29 - 4 >= v33) {
        goto LABEL_72;
      }
      uint64_t v34 = v6 + 8 * v28;
      unint64_t v35 = *(void *)(v34 + 40);
      unint64_t v36 = *(void *)(v6 + 8 * v29);
      uint64_t v37 = (v36 * (unsigned __int128)v4) >> 64;
      uint64_t v38 = v36 * v4;
      uint64_t v39 = (0xCFFE47FFFEAFFFFFLL * v38 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
      BOOL v40 = __CFADD__(-v38, v38);
      uint64_t v41 = v39 + v37;
      if (__CFADD__(v39, v37)) {
        goto LABEL_51;
      }
      if (v41 != -1)
      {
        unint64_t v44 = v41 + v40;
        if (v44 >= 0xFFFEB00001) {
          unint64_t v43 = v44 - 0xFFFEB00001;
        }
        else {
          unint64_t v43 = v44;
        }
        goto LABEL_59;
      }
      unint64_t v43 = 0xFFFFFF00014FFFFELL;
      if (v40) {
        break;
      }
LABEL_59:
      *(void *)(v34 + 40) = v43;
      uint64_t v45 = v35 * v4;
      uint64_t v46 = (v35 * (unsigned __int128)v4) >> 64;
      uint64_t result = (0xCFFE47FFFEAFFFFFLL * v45 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
      BOOL v47 = __CFADD__(-v45, v45);
      BOOL v18 = __CFADD__(result, v46);
      uint64_t v48 = result + v46;
      if (v18) {
        goto LABEL_42;
      }
      if (v48 != -1)
      {
        unint64_t v49 = v48 + v47;
        if (v49 >= 0xFFFEB00001) {
          unint64_t v32 = v49 - 0xFFFEB00001;
        }
        else {
          unint64_t v32 = v49;
        }
        goto LABEL_43;
      }
      unint64_t v32 = 0xFFFFFF00014FFFFELL;
      if (v47)
      {
        BOOL v47 = 1;
LABEL_42:
        unint64_t v31 = v47 + v48;
        unint64_t v32 = v31 - 0xFFFEB00001;
        if (v31 >= 0xFFFEB00001) {
          goto LABEL_73;
        }
      }
LABEL_43:
      *(void *)(v6 + 8 * v29--) = v32;
      if (v30 == ++v28)
      {
        *unint64_t v3 = v6;
        return result;
      }
    }
    BOOL v40 = 1;
LABEL_51:
    unint64_t v42 = v40 + v41;
    unint64_t v43 = v42 - 0xFFFEB00001;
    if (v42 >= 0xFFFEB00001) {
      goto LABEL_74;
    }
    goto LABEL_59;
  }
  return result;
}

{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  uint64_t v6 = *a3;
  if (*(void *)(*a3 + 16) < a1) {
    goto LABEL_80;
  }
  unint64_t v3 = a3;
  unint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    uint64_t v8 = *(void *)(v6 + 16);
    if (v8) {
      goto LABEL_4;
    }
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
    return result;
  }
LABEL_81:
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
  uint64_t v6 = result;
  uint64_t v8 = *(void *)(result + 16);
  if (!v8) {
    goto LABEL_82;
  }
LABEL_4:
  uint64_t v9 = (unint64_t *)(v6 + 32);
  unint64_t v10 = *(void *)(v6 + 32);
  uint64_t v11 = (v10 * (unsigned __int128)v4) >> 64;
  uint64_t v12 = (0xFFFFFFFEFFFFFFFFLL * v10 * v4 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  LODWORD(v13) = __CFADD__(-(uint64_t)(v10 * v4), v10 * v4);
  uint64_t v14 = v12 + v11;
  if (__CFADD__(v12, v11))
  {
    unint64_t v15 = v14 + v13;
    goto LABEL_10;
  }
  while (v14 == -1)
  {
    if ((v13 & 1) == 0)
    {
      unint64_t v13 = 4294967294;
      goto LABEL_20;
    }
    unint64_t v15 = 0;
LABEL_10:
    uint64_t v14 = 0xFFFFFFFFLL;
    uint64_t v16 = __CFADD__(v15, 0xFFFFFFFFLL);
    unint64_t v13 = v15 + 0xFFFFFFFFLL;
    if (!v16) {
      goto LABEL_20;
    }
    __break(1u);
  }
  unint64_t v13 = v14 + v13;
  if (v13 >= 0xFFFFFFFF00000001) {
    v13 += 0xFFFFFFFFLL;
  }
LABEL_20:
  *uint64_t v9 = v13;
  if (v5 >= 0) {
    uint64_t v17 = v5;
  }
  else {
    uint64_t v17 = v5 + 1;
  }
  if (v5 < -1) {
    goto LABEL_83;
  }
  BOOL v18 = v17 >> 1;
  if (v18 >= v8) {
    goto LABEL_83;
  }
  uint64_t v19 = v9[v18];
  uint64_t v20 = (v19 * (unsigned __int128)v4) >> 64;
  unint64_t v21 = (0xFFFFFFFEFFFFFFFFLL * v19 * v4 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  LODWORD(v22) = __CFADD__(-(uint64_t)(v19 * v4), v19 * v4);
  uint64_t v16 = __CFADD__(v21, v20);
  unint64_t v23 = v21 + v20;
  if (v16)
  {
    uint64_t v24 = v23 + v22;
    goto LABEL_31;
  }
  while (v23 == -1)
  {
    if ((v22 & 1) == 0)
    {
      uint64_t v22 = 4294967294;
      goto LABEL_41;
    }
    uint64_t v24 = 0;
LABEL_31:
    unint64_t v23 = 0xFFFFFFFFLL;
    uint64_t v16 = __CFADD__(v24, 0xFFFFFFFFLL);
    uint64_t v22 = v24 + 0xFFFFFFFFLL;
    if (!v16) {
      goto LABEL_41;
    }
    __break(1u);
  }
  uint64_t v22 = v23 + v22;
  if (v22 >= 0xFFFFFFFF00000001) {
    v22 += 0xFFFFFFFFLL;
  }
LABEL_41:
  v9[v18] = v22;
  *unint64_t v3 = v6;
  if (v5 >= 2 && (v5 & 0xFFFFFFFFFFFFFFFELL) != 2)
  {
    unint64_t v25 = 0;
    uint64_t v26 = v5 + 3;
    uint64_t v27 = v18 - 1;
    while (1)
    {
      unint64_t v31 = *(void *)(v6 + 16);
      if (v25 + 1 >= v31)
      {
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
        goto LABEL_81;
      }
      if (v26 - 4 >= v31) {
        goto LABEL_77;
      }
      unint64_t v32 = v6 + 8 * v25;
      unint64_t v33 = *(void *)(v32 + 40);
      uint64_t v34 = *(void *)(v6 + 8 * v26);
      unint64_t v35 = (v34 * (unsigned __int128)v4) >> 64;
      uint64_t result = (0xFFFFFFFEFFFFFFFFLL * v34 * v4 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      unint64_t v36 = __CFADD__(-(uint64_t)(v34 * v4), v34 * v4);
      uint64_t v37 = result + v35;
      if (!__CFADD__(result, v35))
      {
        if (v37 != -1)
        {
          uint64_t v39 = v37 + v36;
          if (v39 >= 0xFFFFFFFF00000001) {
            v39 += 0xFFFFFFFFLL;
          }
          goto LABEL_64;
        }
        if (!v36)
        {
          uint64_t v39 = 4294967294;
          goto LABEL_64;
        }
        unint64_t v36 = 1;
      }
      uint64_t v38 = v36 + v37;
      uint64_t v16 = __CFADD__(v38, 0xFFFFFFFFLL);
      uint64_t v39 = v38 + 0xFFFFFFFFLL;
      if (v16) {
        goto LABEL_79;
      }
LABEL_64:
      *(void *)(v32 + 40) = v39;
      BOOL v40 = (v33 * (unsigned __int128)v4) >> 64;
      uint64_t v41 = (0xFFFFFFFEFFFFFFFFLL * v33 * v4 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      uint64_t v28 = __CFADD__(-(uint64_t)(v33 * v4), v33 * v4);
      unint64_t v42 = v41 + v40;
      if (!__CFADD__(v41, v40))
      {
        if (v42 != -1)
        {
          uint64_t v30 = v42 + v28;
          if (v30 >= 0xFFFFFFFF00000001) {
            v30 += 0xFFFFFFFFLL;
          }
          goto LABEL_46;
        }
        if (!v28)
        {
          uint64_t v30 = 4294967294;
          goto LABEL_46;
        }
        uint64_t v28 = 1;
      }
      uint64_t v29 = v28 + v42;
      uint64_t v16 = __CFADD__(v29, 0xFFFFFFFFLL);
      uint64_t v30 = v29 + 0xFFFFFFFFLL;
      if (v16) {
        goto LABEL_78;
      }
LABEL_46:
      *(void *)(v6 + 8 * v26--) = v30;
      if (v27 == ++v25)
      {
        *unint64_t v3 = v6;
        return result;
      }
    }
  }
  return result;
}

uint64_t specialized inverseDiscreteFourierTransformFinish<A, B>(size:sizeInverse:output:)(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  if (*(void *)(*a3 + 16) < a1) {
    goto LABEL_48;
  }
  unint64_t v3 = a3;
  unsigned int v5 = a2;
  uint64_t v4 = a1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_49;
  }
  for (uint64_t i = *(void *)(v6 + 16); i; uint64_t i = *(void *)(result + 16))
  {
    uint64_t v9 = (_DWORD *)(v6 + 32);
    unint64_t v10 = *(unsigned int *)(v6 + 32) * (unint64_t)v5;
    uint64_t v11 = 4293918721 * (-1048577 * v10);
    BOOL v12 = __CFADD__(v11, v10);
    unint64_t v13 = (v11 + v10) >> 32;
    if (v12)
    {
      BOOL v12 = __CFADD__(v13, 0xFFFFF);
      LODWORD(v13) = v13 + 0xFFFFF;
      if (!v12) {
        goto LABEL_11;
      }
      __break(1u);
    }
    if (v13 >= 0xFFF00001) {
      LODWORD(v13) = v13 + 0xFFFFF;
    }
LABEL_11:
    *uint64_t v9 = v13;
    if (v4 >= 0) {
      uint64_t v14 = v4;
    }
    else {
      uint64_t v14 = v4 + 1;
    }
    if (v4 < -1) {
      goto LABEL_51;
    }
    uint64_t v15 = v14 >> 1;
    if (v14 >> 1 >= i) {
      goto LABEL_51;
    }
    unint64_t v16 = v9[v15] * (unint64_t)v5;
    uint64_t v17 = 4293918721 * (-1048577 * v16);
    BOOL v12 = __CFADD__(v17, v16);
    unint64_t v18 = (v17 + v16) >> 32;
    if (!v12) {
      goto LABEL_21;
    }
    BOOL v12 = __CFADD__(v18, 0xFFFFF);
    LODWORD(v18) = v18 + 0xFFFFF;
    if (v12)
    {
      __break(1u);
LABEL_21:
      if (v18 >= 0xFFF00001) {
        LODWORD(v18) = v18 + 0xFFFFF;
      }
    }
    v9[v15] = v18;
    *unint64_t v3 = v6;
    if (v4 < 2 || (v4 & 0xFFFFFFFFFFFFFFFELL) == 2) {
      return result;
    }
    uint64_t v19 = 0;
    uint64_t v20 = v4 + 7;
    uint64_t v21 = v15 - 1;
    while (1)
    {
      unint64_t v23 = *(void *)(v6 + 16);
      if (v19 + 1 >= v23) {
        break;
      }
      if (v20 - 8 >= v23) {
        goto LABEL_46;
      }
      uint64_t v24 = v6 + 4 * v19;
      unsigned int v25 = *(_DWORD *)(v24 + 36);
      unint64_t v26 = *(unsigned int *)(v6 + 4 * v20) * (unint64_t)v5;
      uint64_t result = 4293918721 * (-1048577 * v26);
      BOOL v12 = __CFADD__(result, v26);
      unint64_t v27 = (result + v26) >> 32;
      if (v12)
      {
        BOOL v12 = __CFADD__(v27, 0xFFFFF);
        LODWORD(v27) = v27 + 0xFFFFF;
        if (v12) {
          goto LABEL_47;
        }
      }
      else
      {
        uint64_t result = (v27 + 0xFFFFF);
        if (v27 >= 0xFFF00001) {
          LODWORD(v27) = v27 + 0xFFFFF;
        }
      }
      *(_DWORD *)(v24 + 36) = v27;
      unint64_t v28 = v25 * (unint64_t)v5;
      uint64_t v29 = 4293918721 * (-1048577 * v28);
      BOOL v12 = __CFADD__(v29, v28);
      unint64_t v22 = (v29 + v28) >> 32;
      if (v12)
      {
        BOOL v12 = __CFADD__(v22, 0xFFFFF);
        LODWORD(v22) = v22 + 0xFFFFF;
        if (v12)
        {
          __break(1u);
LABEL_43:
          *unint64_t v3 = v6;
          return result;
        }
      }
      else if (v22 >= 0xFFF00001)
      {
        LODWORD(v22) = v22 + 0xFFFFF;
      }
      *(_DWORD *)(v6 + 4 * v20--) = v22;
      if (v21 == ++v19) {
        goto LABEL_43;
      }
    }
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
    uint64_t v6 = result;
  }
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

uint64_t specialized static PINECircuit.computeRangeCheck(_:lowerBound:upperBound:)(unint64_t *a1, unint64_t *a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t result = a3 - a4;
  if (a3 < a4)
  {
    unint64_t v11 = 0xFFFEB00001 - a4;
    if (a4 > 0xFFFEB00001)
    {
      __break(1u);
    }
    else
    {
      uint64_t result = a3 + v11;
      if (!__CFADD__(a3, v11)) {
        goto LABEL_4;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
LABEL_4:
  unint64_t v12 = specialized FieldElement.integerValue.getter(result);
  *a1 = v12;
  uint64_t result = a5 - a3;
  if (a5 >= a3) {
    goto LABEL_7;
  }
  unint64_t v13 = 0xFFFEB00001 - a3;
  if (a3 > 0xFFFEB00001) {
    goto LABEL_13;
  }
  uint64_t result = a5 + v13;
  if (__CFADD__(a5, v13))
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
LABEL_7:
  *a2 = specialized FieldElement.integerValue.getter(result);
  uint64_t result = a5 - a4;
  if (a5 >= a4) {
    return specialized FieldElement.integerValue.getter(result) >= v12;
  }
  unint64_t v14 = 0xFFFEB00001 - a4;
  if (a4 > 0xFFFEB00001) {
    goto LABEL_15;
  }
  uint64_t result = a5 + v14;
  if (!__CFADD__(a5, v14)) {
    return specialized FieldElement.integerValue.getter(result) >= v12;
  }
LABEL_16:
  __break(1u);
  return result;
}

{
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  uint64_t result = a3 - a4;
  if (a3 < a4)
  {
    unint64_t v11 = 0xFFFFFFFF00000001 - a4;
    if (a4 > 0xFFFFFFFF00000001)
    {
      __break(1u);
    }
    else
    {
      uint64_t result = a3 + v11;
      if (!__CFADD__(a3, v11)) {
        goto LABEL_4;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
LABEL_4:
  unint64_t v12 = specialized FieldElement.integerValue.getter(result);
  *a1 = v12;
  uint64_t result = a5 - a3;
  if (a5 >= a3) {
    goto LABEL_7;
  }
  unint64_t v13 = 0xFFFFFFFF00000001 - a3;
  if (a3 > 0xFFFFFFFF00000001) {
    goto LABEL_13;
  }
  uint64_t result = a5 + v13;
  if (__CFADD__(a5, v13))
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
LABEL_7:
  *a2 = specialized FieldElement.integerValue.getter(result);
  uint64_t result = a5 - a4;
  if (a5 >= a4) {
    return specialized FieldElement.integerValue.getter(result) >= v12;
  }
  unint64_t v14 = 0xFFFFFFFF00000001 - a4;
  if (a4 > 0xFFFFFFFF00000001) {
    goto LABEL_15;
  }
  uint64_t result = a5 + v14;
  if (!__CFADD__(a5, v14)) {
    return specialized FieldElement.integerValue.getter(result) >= v12;
  }
LABEL_16:
  __break(1u);
  return result;
}

_DWORD *specialized static PINECircuit.computeRangeCheck(_:lowerBound:upperBound:)(_DWORD *result, _DWORD *a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  unsigned int v5 = a3 - a4;
  if (a3 < a4)
  {
    unsigned int v6 = -1048575 - a4;
    if (a4 > 0xFFF00001)
    {
      __break(1u);
    }
    else
    {
      unsigned int v5 = a3 + v6;
      if (!__CFADD__(a3, v6)) {
        goto LABEL_4;
      }
    }
    __break(1u);
    goto LABEL_19;
  }
LABEL_4:
  unint64_t v7 = (v5 + 4293918721u * (unint64_t)(-1048577 * v5)) >> 32;
  if (v7 >= 0xFFF00001) {
    LODWORD(v7) = 0;
  }
  *uint64_t result = v7;
  unsigned int v8 = a5 - a3;
  if (a5 < a3)
  {
    unsigned int v9 = -1048575 - a3;
    if (a3 <= 0xFFF00001)
    {
      BOOL v10 = __CFADD__(a5, v9);
      unsigned int v8 = a5 + v9;
      if (!v10) {
        goto LABEL_9;
      }
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
LABEL_9:
  unint64_t v11 = (0xFFF000FEFFFFFFFFLL * v8 + v8) >> 32;
  if (v11 >= 0xFFF00001) {
    LODWORD(v11) = 0;
  }
  *a2 = v11;
  unsigned int v12 = a5 - a4;
  if (a5 >= a4) {
    goto LABEL_14;
  }
  unsigned int v13 = -1048575 - a4;
  if (a4 > 0xFFF00001) {
    goto LABEL_21;
  }
  BOOL v10 = __CFADD__(a5, v13);
  unsigned int v12 = a5 + v13;
  if (v10)
  {
LABEL_22:
    __break(1u);
    return result;
  }
LABEL_14:
  unint64_t v14 = (0xFFF000FEFFFFFFFFLL * v12 + v12) >> 32;
  if (v14 >= 0xFFF00001) {
    LODWORD(v14) = 0;
  }
  return (_DWORD *)(v14 >= v7);
}

uint64_t specialized closure #1 in PINECircuit.wraparoundDotProducts<A>(_:random:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, unint64_t a3@<X4>, uint64_t a4@<X5>, unint64_t *a5@<X8>)
{
  int64_t v6 = a3 >> 1;
  if (a3 >> 1 == a2)
  {
    unint64_t v7 = 0;
LABEL_34:
    *(void *)(a4 + 40) = 0;
    *a5 = v7;
  }
  else
  {
    uint64_t v8 = a2;
    unint64_t v27 = a5;
    uint64_t result = swift_unknownObjectRetain();
    unint64_t v7 = 0;
    while (v8 < v6)
    {
      unint64_t v11 = *(void *)(a1 + 8 * v8);
      uint64_t v12 = *(void *)(a4 + 40);
      if (!v12)
      {
        uint64_t v13 = *(void *)(*(void *)(a4 + 32) + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream);
        if (!v13) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v13 + 24);
        swift_retain();
        if (v14 == 256)
        {
          SeedStreamAES128CTR.fillBuffer()();
          unint64_t v14 = *(void *)(v13 + 24);
        }
        uint64_t result = swift_beginAccess();
        if ((v14 & 0x8000000000000000) != 0) {
          goto LABEL_38;
        }
        uint64_t v15 = *(void *)(v13 + 16);
        if (v14 >= *(void *)(v15 + 16)) {
          goto LABEL_39;
        }
        uint64_t v16 = *(void *)(v13 + 24);
        BOOL v17 = __OFADD__(v16, 1);
        uint64_t v18 = v16 + 1;
        if (v17) {
          goto LABEL_40;
        }
        char v19 = *(unsigned char *)(v15 + v14 + 32);
        *(void *)(v13 + 24) = v18;
        uint64_t result = swift_release();
        *(unsigned char *)(a4 + 48) = v19;
        *(void *)(a4 + 40) = 8;
        uint64_t v12 = 8;
      }
      BOOL v17 = __OFSUB__(v12, 2);
      uint64_t v20 = v12 - 2;
      if (v17) {
        goto LABEL_36;
      }
      *(void *)(a4 + 40) = v20;
      unsigned __int8 v21 = *(unsigned char *)(a4 + 48);
      *(unsigned char *)(a4 + 48) = v21 >> 2;
      int v22 = v21 & 3;
      if (v22)
      {
        if (v22 == 3 && v11 != 0)
        {
          unint64_t v24 = 0xFFFEB00001 - v11;
          if (v11 > 0xFFFEB00001) {
            goto LABEL_41;
          }
          if (v7 >= v24)
          {
            v7 -= v24;
          }
          else
          {
            if (v24 > 0xFFFEB00001) {
              goto LABEL_44;
            }
            BOOL v25 = __CFADD__(v7, v11);
            v7 += v11;
            if (v25) {
              goto LABEL_45;
            }
          }
        }
      }
      else if (v7 >= v11)
      {
        v7 -= v11;
      }
      else
      {
        unint64_t v26 = 0xFFFEB00001 - v11;
        if (v11 > 0xFFFEB00001) {
          goto LABEL_42;
        }
        BOOL v25 = __CFADD__(v7, v26);
        v7 += v26;
        if (v25) {
          goto LABEL_43;
        }
      }
      if (v6 == ++v8)
      {
        uint64_t result = swift_unknownObjectRelease();
        a5 = v27;
        goto LABEL_34;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
  }
  return result;
}

{
  int64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unsigned __int8 v21;
  int v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t *v27;

  int64_t v6 = a3 >> 1;
  if (a3 >> 1 == a2)
  {
    unint64_t v7 = 0;
LABEL_34:
    *a5 = v7;
    *(void *)(a4 + 40) = 0;
  }
  else
  {
    uint64_t v8 = a2;
    unint64_t v27 = a5;
    uint64_t result = swift_unknownObjectRetain();
    unint64_t v7 = 0;
    while (v8 < v6)
    {
      unint64_t v11 = *(void *)(a1 + 8 * v8);
      uint64_t v12 = *(void *)(a4 + 40);
      if (!v12)
      {
        uint64_t v13 = *(void *)(*(void *)(a4 + 32) + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream);
        if (!v13) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v13 + 24);
        swift_retain();
        if (v14 == 256)
        {
          SeedStreamAES128CTR.fillBuffer()();
          unint64_t v14 = *(void *)(v13 + 24);
        }
        uint64_t result = swift_beginAccess();
        if ((v14 & 0x8000000000000000) != 0) {
          goto LABEL_38;
        }
        uint64_t v15 = *(void *)(v13 + 16);
        if (v14 >= *(void *)(v15 + 16)) {
          goto LABEL_39;
        }
        uint64_t v16 = *(void *)(v13 + 24);
        BOOL v17 = __OFADD__(v16, 1);
        uint64_t v18 = v16 + 1;
        if (v17) {
          goto LABEL_40;
        }
        char v19 = *(unsigned char *)(v15 + v14 + 32);
        *(void *)(v13 + 24) = v18;
        uint64_t result = swift_release();
        *(unsigned char *)(a4 + 48) = v19;
        *(void *)(a4 + 40) = 8;
        uint64_t v12 = 8;
      }
      BOOL v17 = __OFSUB__(v12, 2);
      uint64_t v20 = v12 - 2;
      if (v17) {
        goto LABEL_36;
      }
      *(void *)(a4 + 40) = v20;
      unsigned __int8 v21 = *(unsigned char *)(a4 + 48);
      *(unsigned char *)(a4 + 48) = v21 >> 2;
      int v22 = v21 & 3;
      if (v22)
      {
        if (v22 == 3 && v11 != 0)
        {
          unint64_t v24 = 0xFFFFFFFF00000001 - v11;
          if (v11 > 0xFFFFFFFF00000001) {
            goto LABEL_41;
          }
          if (v7 >= v24)
          {
            v7 -= v24;
          }
          else
          {
            if (v24 > 0xFFFFFFFF00000001) {
              goto LABEL_44;
            }
            BOOL v25 = __CFADD__(v7, v11);
            v7 += v11;
            if (v25) {
              goto LABEL_45;
            }
          }
        }
      }
      else if (v7 >= v11)
      {
        v7 -= v11;
      }
      else
      {
        unint64_t v26 = 0xFFFFFFFF00000001 - v11;
        if (v11 > 0xFFFFFFFF00000001) {
          goto LABEL_42;
        }
        BOOL v25 = __CFADD__(v7, v26);
        v7 += v26;
        if (v25) {
          goto LABEL_43;
        }
      }
      if (v6 == ++v8)
      {
        uint64_t result = swift_unknownObjectRelease();
        a5 = v27;
        goto LABEL_34;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
  }
  return result;
}

uint64_t specialized closure #1 in PINECircuit.wraparoundDotProducts<A>(_:random:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, unint64_t a3@<X4>, uint64_t a4@<X5>, unsigned int *a5@<X8>)
{
  int64_t v6 = a3 >> 1;
  if (a3 >> 1 == a2)
  {
    unsigned int v7 = 0;
LABEL_34:
    *(void *)(a4 + 40) = 0;
    *a5 = v7;
  }
  else
  {
    uint64_t v8 = a2;
    unint64_t v27 = a5;
    uint64_t result = swift_unknownObjectRetain();
    unsigned int v7 = 0;
    while (v8 < v6)
    {
      unsigned int v11 = *(_DWORD *)(a1 + 4 * v8);
      uint64_t v12 = *(void *)(a4 + 40);
      if (!v12)
      {
        uint64_t v13 = *(void *)(*(void *)(a4 + 32) + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream);
        if (!v13) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v13 + 24);
        swift_retain();
        if (v14 == 256)
        {
          SeedStreamAES128CTR.fillBuffer()();
          unint64_t v14 = *(void *)(v13 + 24);
        }
        uint64_t result = swift_beginAccess();
        if ((v14 & 0x8000000000000000) != 0) {
          goto LABEL_38;
        }
        uint64_t v15 = *(void *)(v13 + 16);
        if (v14 >= *(void *)(v15 + 16)) {
          goto LABEL_39;
        }
        uint64_t v16 = *(void *)(v13 + 24);
        BOOL v17 = __OFADD__(v16, 1);
        uint64_t v18 = v16 + 1;
        if (v17) {
          goto LABEL_40;
        }
        char v19 = *(unsigned char *)(v15 + v14 + 32);
        *(void *)(v13 + 24) = v18;
        uint64_t result = swift_release();
        *(unsigned char *)(a4 + 48) = v19;
        *(void *)(a4 + 40) = 8;
        uint64_t v12 = 8;
      }
      BOOL v17 = __OFSUB__(v12, 2);
      uint64_t v20 = v12 - 2;
      if (v17) {
        goto LABEL_36;
      }
      *(void *)(a4 + 40) = v20;
      unsigned __int8 v21 = *(unsigned char *)(a4 + 48);
      *(unsigned char *)(a4 + 48) = v21 >> 2;
      int v22 = v21 & 3;
      if (v22)
      {
        if (v22 == 3 && v11 != 0)
        {
          unsigned int v24 = -1048575 - v11;
          if (v11 > 0xFFF00001) {
            goto LABEL_41;
          }
          if (v7 >= v24)
          {
            v7 -= v24;
          }
          else
          {
            if (v24 > 0xFFF00001) {
              goto LABEL_44;
            }
            BOOL v25 = __CFADD__(v7, v11);
            v7 += v11;
            if (v25) {
              goto LABEL_45;
            }
          }
        }
      }
      else if (v7 >= v11)
      {
        v7 -= v11;
      }
      else
      {
        unsigned int v26 = -1048575 - v11;
        if (v11 > 0xFFF00001) {
          goto LABEL_42;
        }
        BOOL v25 = __CFADD__(v7, v26);
        v7 += v26;
        if (v25) {
          goto LABEL_43;
        }
      }
      if (v6 == ++v8)
      {
        uint64_t result = swift_unknownObjectRelease();
        a5 = v27;
        goto LABEL_34;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
  }
  return result;
}

uint64_t specialized PINENormEqualityCheckCircuit.evaluate(measurement:jointRand:numOfShares:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(v4 + 72);
  if (v6 != v7)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    *(void *)&long long v97 = 0xD00000000000001BLL;
    *((void *)&v97 + 1) = 0x8000000260BFEB20;
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 540877088;
    v11._object = (void *)0xE400000000000000;
    String.append(_:)(v11);
    unint64_t v107 = v7;
    goto LABEL_5;
  }
  if (*(void *)(a2 + 16))
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    *(void *)&long long v97 = 0xD000000000000019;
    *((void *)&v97 + 1) = 0x8000000260BFEB80;
    v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 540877088;
    v9._object = (void *)0xE400000000000000;
    String.append(_:)(v9);
    unint64_t v107 = 0;
LABEL_5:
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
LABEL_6:
    swift_bridgeObjectRelease();
    uint64_t v13 = *((void *)&v97 + 1);
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v14 = v97;
    *(void *)(v14 + 8) = v13;
    *(unsigned char *)(v14 + 16) = 2;
    return swift_willThrow();
  }
  uint64_t v16 = v4;
  uint64_t v92 = *(void *)(v4 + 64);
  uint64_t v20 = *(void *)(v4 + 96);
  uint64_t v93 = *(void *)(v4 + 104);
  uint64_t v111 = *(void *)(v4 + 120);
  uint64_t v94 = *(void *)(v4 + 128);
  unint64_t v21 = *(void *)(a3 + 16);
  long long v22 = *(_OWORD *)(v4 + 24);
  long long v108 = *(_OWORD *)(v4 + 8);
  long long v109 = v22;
  long long v110 = *(_OWORD *)(v4 + 40);
  specialized Gadget.wirePolynomialLength.getter();
  specialized Gadget.gadgetPolynomialLength.getter();
  if (v21 != 1)
  {
    long long v95 = v108;
    uint64_t v71 = *((void *)&v109 + 1);
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    *(void *)&long long v97 = 0x2064696C61766E49;
    *((void *)&v97 + 1) = 0xEF203A746E756F63;
    unint64_t v107 = v21;
    v72._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v72);
    swift_bridgeObjectRelease();
    v73._countAndFlagsBits = 540877088;
    v73._object = (void *)0xE400000000000000;
    String.append(_:)(v73);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
    uint64_t v74 = swift_allocObject();
    *(_OWORD *)(v74 + 16) = xmmword_260BF9FF0;
    uint64_t v75 = specialized Gadget.wirePolynomialLength.getter();
    uint64_t v76 = specialized Gadget.gadgetPolynomialLength.getter();
    *(_OWORD *)(v74 + 32) = v95;
    *(void *)(v74 + 48) = v71;
    *(void *)(v74 + 56) = v75;
    *(void *)(v74 + 64) = v76;
    v77._countAndFlagsBits = MEMORY[0x261224130](v74, &type metadata for GadgetParameters);
    String.append(_:)(v77);
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  uint64_t v82 = a4;
  specialized Collection.prefix(_:)(v20, a1, a1 + 32, 0, (2 * v6) | 1);
  uint64_t v87 = v23;
  int64_t v86 = v24;
  unint64_t v85 = v25;
  uint64_t v26 = specialized Collection.dropFirst(_:)(v20, a1, a1 + 32, 0, (2 * v6) | 1);
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v91 = specialized Collection.prefix(_:)(v92, v26, v27, v29, v31);
  uint64_t v90 = v33;
  uint64_t v89 = v34;
  uint64_t v88 = v35;
  uint64_t v36 = specialized Collection.dropFirst(_:)(v92, v26, v28, v30, v32);
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  specialized Collection.prefix(_:)(v94, v36, v37, v39, v41);
  specialized Collection.dropFirst(_:)(v94, v36, v38, v40, v42);
  swift_bridgeObjectRetain_n();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  specialized Collection.prefix(_:)(v93, v91, v90, v89, v88);
  uint64_t v44 = v43;
  uint64_t v84 = v45;
  unint64_t v83 = v46;
  uint64_t v47 = specialized Collection.dropFirst(_:)(v93, v91, v90, v89, v88);
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  specialized Collection.prefix(_:)(v93, v47, v48, v50, v52);
  uint64_t result = specialized Collection.dropFirst(_:)(v93, v47, v49, v51, v53);
  uint64_t v57 = v111 + 1;
  if (__OFADD__(v111, 1))
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v111 = v44;
  uint64_t v58 = v57 * v94;
  if ((unsigned __int128)(v57 * (__int128)v94) >> 64 != (v57 * v94) >> 63)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v59 = result;
  uint64_t v60 = v54;
  uint64_t v61 = v55;
  uint64_t v62 = v56;
  specialized Collection.prefix(_:)(v58, result, v54, v55, v56);
  specialized Collection.dropFirst(_:)(v58, v59, v60, v61, v62);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  uint64_t v63 = swift_unknownObjectRelease();
  long long v64 = *(_OWORD *)(v16 + 112);
  long long v105 = *(_OWORD *)(v16 + 128);
  uint64_t v106 = *(void *)(v16 + 144);
  unint64_t v65 = *(void *)(a3 + 32);
  long long v103 = *(_OWORD *)(v16 + 96);
  long long v104 = v64;
  long long v66 = *(_OWORD *)(v16 + 48);
  long long v99 = *(_OWORD *)(v16 + 32);
  long long v67 = *(_OWORD *)(v16 + 64);
  long long v68 = *(_OWORD *)(v16 + 80);
  long long v100 = v66;
  long long v101 = v67;
  long long v102 = v68;
  long long v69 = *(_OWORD *)(v16 + 16);
  long long v97 = *(_OWORD *)v16;
  long long v98 = v69;
  MEMORY[0x270FA5388](v63, v70);
  outlined copy of GadgetEvaluation<Field32>(v65);
  outlined retain of PINENormEqualityCheckCircuit<Field32, UnsafeBufferPointer<Float>>(v16);
  specialized ParallelSum.chunkEvaluateSum(_:for:_:)(v87, v86, v85, v65, (void (*)(uint64_t, uint64_t, int64_t, uint64_t, uint64_t *))partial apply for specialized closure #1 in PINENormEqualityCheckCircuit.evaluateNormEqualityCheck(inputVector:vBits:for:), &v107);
  if (v5)
  {
    outlined release of PINENormEqualityCheckCircuit<Field32, UnsafeBufferPointer<Float>>(v16);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease_n();
    outlined consume of GadgetEvaluation<Field32>(v65);
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  outlined release of PINENormEqualityCheckCircuit<Field32, UnsafeBufferPointer<Float>>(v16);
  swift_unknownObjectRetain();
  specialized FieldElement.init(inputVector:)(v111, v84, v83, &v96);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease_n();
  outlined consume of GadgetEvaluation<Field32>(v65);
  swift_unknownObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v78 = v96 - v107;
  if (v96 >= v107) {
    goto LABEL_18;
  }
  uint64_t v79 = 0xFFFEB00001 - v107;
  uint64_t v80 = v82;
  if (v107 <= 0xFFFEB00001)
  {
    BOOL v81 = __CFADD__(v96, v79);
    uint64_t v78 = v96 + v79;
    if (!v81) {
      goto LABEL_19;
    }
    __break(1u);
LABEL_18:
    uint64_t v80 = v82;
LABEL_19:
    *uint64_t v80 = v78;
    return result;
  }
LABEL_22:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v20;
  unint64_t v21;
  long long v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  long long v64;
  unint64_t v65;
  long long v66;
  long long v67;
  long long v68;
  long long v69;
  uint64_t v70;
  uint64_t v71;
  Swift::String v72;
  Swift::String v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  Swift::String v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  BOOL v81;
  void *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  long long v95;
  unint64_t v96;
  long long v97;
  long long v98;
  long long v99;
  long long v100;
  long long v101;
  long long v102;
  long long v103;
  long long v104;
  long long v105;
  uint64_t v106;
  unint64_t v107;
  long long v108;
  long long v109;
  long long v110;
  uint64_t v111;

  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(v4 + 72);
  if (v6 != v7)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    *(void *)&long long v97 = 0xD00000000000001BLL;
    *((void *)&v97 + 1) = 0x8000000260BFEB20;
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 540877088;
    v11._object = (void *)0xE400000000000000;
    String.append(_:)(v11);
    unint64_t v107 = v7;
    goto LABEL_5;
  }
  if (*(void *)(a2 + 16))
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    *(void *)&long long v97 = 0xD000000000000019;
    *((void *)&v97 + 1) = 0x8000000260BFEB80;
    v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 540877088;
    v9._object = (void *)0xE400000000000000;
    String.append(_:)(v9);
    unint64_t v107 = 0;
LABEL_5:
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
LABEL_6:
    swift_bridgeObjectRelease();
    uint64_t v13 = *((void *)&v97 + 1);
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v14 = v97;
    *(void *)(v14 + 8) = v13;
    *(unsigned char *)(v14 + 16) = 2;
    return swift_willThrow();
  }
  uint64_t v16 = v4;
  uint64_t v92 = *(void *)(v4 + 64);
  uint64_t v20 = *(void *)(v4 + 96);
  uint64_t v93 = *(void *)(v4 + 104);
  uint64_t v111 = *(void *)(v4 + 120);
  uint64_t v94 = *(void *)(v4 + 128);
  unint64_t v21 = *(void *)(a3 + 16);
  long long v22 = *(_OWORD *)(v4 + 24);
  long long v108 = *(_OWORD *)(v4 + 8);
  long long v109 = v22;
  long long v110 = *(_OWORD *)(v4 + 40);
  specialized Gadget.wirePolynomialLength.getter();
  specialized Gadget.gadgetPolynomialLength.getter();
  if (v21 != 1)
  {
    long long v95 = v108;
    uint64_t v71 = *((void *)&v109 + 1);
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    *(void *)&long long v97 = 0x2064696C61766E49;
    *((void *)&v97 + 1) = 0xEF203A746E756F63;
    unint64_t v107 = v21;
    v72._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v72);
    swift_bridgeObjectRelease();
    v73._countAndFlagsBits = 540877088;
    v73._object = (void *)0xE400000000000000;
    String.append(_:)(v73);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
    uint64_t v74 = swift_allocObject();
    *(_OWORD *)(v74 + 16) = xmmword_260BF9FF0;
    uint64_t v75 = specialized Gadget.wirePolynomialLength.getter();
    uint64_t v76 = specialized Gadget.gadgetPolynomialLength.getter();
    *(_OWORD *)(v74 + 32) = v95;
    *(void *)(v74 + 48) = v71;
    *(void *)(v74 + 56) = v75;
    *(void *)(v74 + 64) = v76;
    v77._countAndFlagsBits = MEMORY[0x261224130](v74, &type metadata for GadgetParameters);
    String.append(_:)(v77);
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  uint64_t v82 = a4;
  specialized Collection.prefix(_:)(v20, a1, a1 + 32, 0, (2 * v6) | 1);
  uint64_t v87 = v23;
  int64_t v86 = v24;
  unint64_t v85 = v25;
  uint64_t v26 = specialized Collection.dropFirst(_:)(v20, a1, a1 + 32, 0, (2 * v6) | 1);
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v91 = specialized Collection.prefix(_:)(v92, v26, v27, v29, v31);
  uint64_t v90 = v33;
  uint64_t v89 = v34;
  uint64_t v88 = v35;
  uint64_t v36 = specialized Collection.dropFirst(_:)(v92, v26, v28, v30, v32);
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  specialized Collection.prefix(_:)(v94, v36, v37, v39, v41);
  specialized Collection.dropFirst(_:)(v94, v36, v38, v40, v42);
  swift_bridgeObjectRetain_n();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  specialized Collection.prefix(_:)(v93, v91, v90, v89, v88);
  uint64_t v44 = v43;
  uint64_t v84 = v45;
  unint64_t v83 = v46;
  uint64_t v47 = specialized Collection.dropFirst(_:)(v93, v91, v90, v89, v88);
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  specialized Collection.prefix(_:)(v93, v47, v48, v50, v52);
  uint64_t result = specialized Collection.dropFirst(_:)(v93, v47, v49, v51, v53);
  uint64_t v57 = v111 + 1;
  if (__OFADD__(v111, 1))
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v111 = v44;
  uint64_t v58 = v57 * v94;
  if ((unsigned __int128)(v57 * (__int128)v94) >> 64 != (v57 * v94) >> 63)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v59 = result;
  uint64_t v60 = v54;
  uint64_t v61 = v55;
  uint64_t v62 = v56;
  specialized Collection.prefix(_:)(v58, result, v54, v55, v56);
  specialized Collection.dropFirst(_:)(v58, v59, v60, v61, v62);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  uint64_t v63 = swift_unknownObjectRelease();
  long long v64 = *(_OWORD *)(v16 + 112);
  long long v105 = *(_OWORD *)(v16 + 128);
  uint64_t v106 = *(void *)(v16 + 144);
  unint64_t v65 = *(void *)(a3 + 32);
  long long v103 = *(_OWORD *)(v16 + 96);
  long long v104 = v64;
  long long v66 = *(_OWORD *)(v16 + 48);
  long long v99 = *(_OWORD *)(v16 + 32);
  long long v67 = *(_OWORD *)(v16 + 64);
  long long v68 = *(_OWORD *)(v16 + 80);
  long long v100 = v66;
  long long v101 = v67;
  long long v102 = v68;
  long long v69 = *(_OWORD *)(v16 + 16);
  long long v97 = *(_OWORD *)v16;
  long long v98 = v69;
  MEMORY[0x270FA5388](v63, v70);
  outlined copy of GadgetEvaluation<Field32>(v65);
  outlined retain of PINENormEqualityCheckCircuit<Field32, UnsafeBufferPointer<Float>>(v16);
  specialized ParallelSum.chunkEvaluateSum(_:for:_:)(v87, v86, v85, v65, (void (*)(uint64_t, uint64_t, int64_t, uint64_t, uint64_t *))partial apply for specialized closure #1 in PINENormEqualityCheckCircuit.evaluateNormEqualityCheck(inputVector:vBits:for:), &v107);
  if (v5)
  {
    outlined release of PINENormEqualityCheckCircuit<Field32, UnsafeBufferPointer<Float>>(v16);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease_n();
    outlined consume of GadgetEvaluation<Field32>(v65);
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  outlined release of PINENormEqualityCheckCircuit<Field32, UnsafeBufferPointer<Float>>(v16);
  swift_unknownObjectRetain();
  specialized FieldElement.init(inputVector:)(v111, v84, v83, &v96);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease_n();
  outlined consume of GadgetEvaluation<Field32>(v65);
  swift_unknownObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v78 = v96 - v107;
  if (v96 >= v107) {
    goto LABEL_18;
  }
  uint64_t v79 = 0xFFFFFFFF00000001 - v107;
  uint64_t v80 = v82;
  if (v107 <= 0xFFFFFFFF00000001)
  {
    BOOL v81 = __CFADD__(v96, v79);
    uint64_t v78 = v96 + v79;
    if (!v81) {
      goto LABEL_19;
    }
    __break(1u);
LABEL_18:
    uint64_t v80 = v82;
LABEL_19:
    *uint64_t v80 = v78;
    return result;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t specialized PINENormEqualityCheckCircuit.evaluate(measurement:jointRand:numOfShares:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _DWORD *a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(v4 + 72);
  if (v6 != v7)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    *(void *)&long long v95 = 0xD00000000000001BLL;
    *((void *)&v95 + 1) = 0x8000000260BFEB20;
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 540877088;
    v11._object = (void *)0xE400000000000000;
    String.append(_:)(v11);
    uint64_t v105 = v7;
    goto LABEL_5;
  }
  if (*(void *)(a2 + 16))
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    *(void *)&long long v95 = 0xD000000000000019;
    *((void *)&v95 + 1) = 0x8000000260BFEB80;
    v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 540877088;
    v9._object = (void *)0xE400000000000000;
    String.append(_:)(v9);
    uint64_t v105 = 0;
LABEL_5:
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
LABEL_6:
    swift_bridgeObjectRelease();
    uint64_t v13 = *((void *)&v95 + 1);
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v14 = v95;
    *(void *)(v14 + 8) = v13;
    *(unsigned char *)(v14 + 16) = 2;
    return swift_willThrow();
  }
  uint64_t v16 = v4;
  uint64_t v19 = *(void *)(v4 + 64);
  uint64_t v20 = *(void *)(v4 + 96);
  uint64_t v91 = *(void *)(v4 + 104);
  uint64_t v109 = *(void *)(v4 + 120);
  uint64_t v92 = *(void *)(v4 + 128);
  uint64_t v21 = *(void *)(a3 + 16);
  long long v22 = *(_OWORD *)(v4 + 24);
  long long v106 = *(_OWORD *)(v4 + 8);
  long long v107 = v22;
  long long v108 = *(_OWORD *)(v4 + 40);
  specialized Gadget.wirePolynomialLength.getter();
  specialized Gadget.gadgetPolynomialLength.getter();
  if (v21 != 1)
  {
    long long v93 = v106;
    uint64_t v70 = *((void *)&v107 + 1);
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    *(void *)&long long v95 = 0x2064696C61766E49;
    *((void *)&v95 + 1) = 0xEF203A746E756F63;
    uint64_t v105 = v21;
    v71._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v71);
    swift_bridgeObjectRelease();
    v72._countAndFlagsBits = 540877088;
    v72._object = (void *)0xE400000000000000;
    String.append(_:)(v72);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
    uint64_t v73 = swift_allocObject();
    *(_OWORD *)(v73 + 16) = xmmword_260BF9FF0;
    uint64_t v74 = specialized Gadget.wirePolynomialLength.getter();
    uint64_t v75 = specialized Gadget.gadgetPolynomialLength.getter();
    *(_OWORD *)(v73 + 32) = v93;
    *(void *)(v73 + 48) = v70;
    *(void *)(v73 + 56) = v74;
    *(void *)(v73 + 64) = v75;
    v76._countAndFlagsBits = MEMORY[0x261224130](v73, &type metadata for GadgetParameters);
    String.append(_:)(v76);
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  specialized Collection.prefix(_:)(v20, a1, a1 + 32, 0, (2 * v6) | 1);
  uint64_t v85 = v23;
  int64_t v84 = v24;
  unint64_t v83 = v25;
  uint64_t v26 = specialized Collection.dropFirst(_:)(v20, a1, a1 + 32, 0, (2 * v6) | 1);
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v90 = specialized Collection.prefix(_:)(v19, v26, v27, v29, v31);
  uint64_t v88 = v33;
  uint64_t v87 = v34;
  uint64_t v86 = v35;
  uint64_t v36 = specialized Collection.dropFirst(_:)(v19, v26, v28, v30, v32);
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  specialized Collection.prefix(_:)(v92, v36, v37, v39, v41);
  specialized Collection.dropFirst(_:)(v92, v36, v38, v40, v42);
  swift_bridgeObjectRetain_n();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  specialized Collection.prefix(_:)(v91, v90, v88, v87, v86);
  uint64_t v82 = v43;
  uint64_t v81 = v44;
  unint64_t v80 = v45;
  uint64_t v46 = specialized Collection.dropFirst(_:)(v91, v90, v88, v87, v86);
  uint64_t v48 = v47;
  uint64_t v50 = v49;
  uint64_t v52 = v51;
  specialized Collection.prefix(_:)(v91, v46, v47, v49, v51);
  uint64_t result = specialized Collection.dropFirst(_:)(v91, v46, v48, v50, v52);
  uint64_t v56 = v109 + 1;
  if (__OFADD__(v109, 1))
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v57 = v56 * v92;
  if ((unsigned __int128)(v56 * (__int128)v92) >> 64 != (v56 * v92) >> 63)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v58 = result;
  uint64_t v59 = v53;
  uint64_t v60 = v54;
  uint64_t v61 = v55;
  specialized Collection.prefix(_:)(v57, result, v53, v54, v55);
  specialized Collection.dropFirst(_:)(v57, v58, v59, v60, v61);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  uint64_t v62 = swift_unknownObjectRelease();
  long long v63 = *(_OWORD *)(v16 + 112);
  long long v103 = *(_OWORD *)(v16 + 128);
  int v104 = *(_DWORD *)(v16 + 144);
  unint64_t v64 = *(void *)(a3 + 32);
  long long v101 = *(_OWORD *)(v16 + 96);
  long long v102 = v63;
  long long v65 = *(_OWORD *)(v16 + 48);
  long long v97 = *(_OWORD *)(v16 + 32);
  long long v66 = *(_OWORD *)(v16 + 64);
  long long v67 = *(_OWORD *)(v16 + 80);
  long long v98 = v65;
  long long v99 = v66;
  long long v100 = v67;
  long long v68 = *(_OWORD *)(v16 + 16);
  long long v95 = *(_OWORD *)v16;
  long long v96 = v68;
  MEMORY[0x270FA5388](v62, v69);
  outlined copy of GadgetEvaluation<Field32>(v64);
  outlined retain of PINENormEqualityCheckCircuit<Field32, UnsafeBufferPointer<Float>>(v16);
  specialized ParallelSum.chunkEvaluateSum(_:for:_:)(v85, v84, v83, v64, (void (*)(uint64_t, uint64_t, int64_t, uint64_t, uint64_t *))partial apply for specialized closure #1 in PINENormEqualityCheckCircuit.evaluateNormEqualityCheck(inputVector:vBits:for:), (unsigned int *)&v105);
  if (v5)
  {
    outlined release of PINENormEqualityCheckCircuit<Field32, UnsafeBufferPointer<Float>>(v16);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease_n();
    outlined consume of GadgetEvaluation<Field32>(v64);
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  outlined release of PINENormEqualityCheckCircuit<Field32, UnsafeBufferPointer<Float>>(v16);
  swift_unknownObjectRetain();
  specialized FieldElement.init(inputVector:)(v82, v81, v80, &v94);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease_n();
  outlined consume of GadgetEvaluation<Field32>(v64);
  swift_unknownObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  int v77 = v94 - v105;
  if (v94 >= v105) {
    goto LABEL_16;
  }
  int v78 = -1048575 - v105;
  if (v105 > 0xFFF00001) {
    goto LABEL_19;
  }
  BOOL v79 = __CFADD__(v94, v78);
  int v77 = v94 + v78;
  if (!v79)
  {
LABEL_16:
    *a4 = v77;
    return result;
  }
LABEL_20:
  __break(1u);
  return result;
}

double default argument 4 of PINEMainCircuit.init(l2NormBound:fractionalBitCount:measurementLength:chunkLength:alpha:wraparoundCheckCount:wraparoundCheckSuccessCount:)()
{
  return 8.7;
}

uint64_t default argument 5 of PINEMainCircuit.init(l2NormBound:fractionalBitCount:measurementLength:chunkLength:alpha:wraparoundCheckCount:wraparoundCheckSuccessCount:)()
{
  return 100;
}

uint64_t specialized PINEMainCircuit.evaluate(measurement:jointRand:numOfShares:for:)@<X0>(unint64_t a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 16);
  unint64_t v8 = *(void *)(v5 + 72);
  if (v7 != v8)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    *(void *)&long long v155 = 0xD00000000000001BLL;
    *((void *)&v155 + 1) = 0x8000000260BFEB20;
    v42._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    v43._countAndFlagsBits = 540877088;
    v43._object = (void *)0xE400000000000000;
    String.append(_:)(v43);
    unint64_t v159 = v8;
LABEL_11:
    v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v46);
LABEL_12:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_OWORD *)uint64_t v47 = v155;
    *(unsigned char *)(v47 + 16) = 2;
    return swift_willThrow();
  }
  if (a2[2] != 3)
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    *(void *)&long long v155 = 0xD000000000000019;
    *((void *)&v155 + 1) = 0x8000000260BFEB80;
    v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._countAndFlagsBits = 540877088;
    v45._object = (void *)0xE400000000000000;
    String.append(_:)(v45);
    unint64_t v159 = 3;
    goto LABEL_11;
  }
  unint64_t v10 = a1;
  uint64_t v148 = *(void *)(v5 + 64);
  uint64_t v146 = *(void *)(v5 + 96);
  uint64_t v142 = *(void *)(v5 + 104);
  uint64_t v143 = *(void *)(v5 + 120);
  uint64_t v150 = *(void *)(v5 + 128);
  unint64_t v11 = *(void *)(a4 + 16);
  long long v12 = *(_OWORD *)(v5 + 40);
  long long v13 = *(_OWORD *)(v5 + 24);
  long long v156 = *(_OWORD *)(v5 + 8);
  long long v157 = v13;
  long long v158 = v12;
  long long v14 = v156;
  uint64_t v15 = v12;
  specialized Gadget.wirePolynomialLength.getter();
  specialized Gadget.gadgetPolynomialLength.getter();
  if (v11 != 1)
  {
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    *(void *)&long long v155 = 0x2064696C61766E49;
    *((void *)&v155 + 1) = 0xEF203A746E756F63;
    unint64_t v159 = v11;
    v49._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v49);
    swift_bridgeObjectRelease();
    v50._countAndFlagsBits = 540877088;
    v50._object = (void *)0xE400000000000000;
    String.append(_:)(v50);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
    uint64_t v51 = swift_allocObject();
    *(_OWORD *)(v51 + 16) = xmmword_260BF9FF0;
    uint64_t v52 = specialized Gadget.wirePolynomialLength.getter();
    uint64_t v53 = specialized Gadget.gadgetPolynomialLength.getter();
    *(_OWORD *)(v51 + 32) = v14;
    *(void *)(v51 + 48) = v15;
    *(void *)(v51 + 56) = v52;
    *(void *)(v51 + 64) = v53;
    v54._countAndFlagsBits = MEMORY[0x261224130](v51, &type metadata for GadgetParameters);
    String.append(_:)(v54);
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  if ((a3 & 0x8000000000000000) != 0) {
    goto LABEL_125;
  }
  specialized FieldElement.init(_:)(a3, &v159);
  unint64_t v16 = v159;
  if (!v159) {
    goto LABEL_135;
  }
  unint64_t v17 = 0x1B7FFFEB0;
  unint64_t v18 = 0xFFFEAFFFFFLL;
  protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(0xFFFEAFFFFFLL, &v155);
  if (v155 == 0)
  {
LABEL_7:
    uint64_t v139 = a2[4];
    uint64_t v133 = a2[5];
    unint64_t v129 = a2[6];
    specialized Collection.prefix(_:)(v146, v10, v10 + 32, 0, (2 * v7) | 1);
    uint64_t v19 = specialized Collection.dropFirst(_:)(v146, v10, v10 + 32, 0, (2 * v7) | 1);
    uint64_t v21 = v20;
    uint64_t v23 = v22;
    uint64_t v25 = v24;
    uint64_t v145 = specialized Collection.prefix(_:)(v148, v19, v20, v22, v24);
    uint64_t v146 = v26;
    uint64_t v134 = v27;
    unint64_t v136 = v28;
    uint64_t v29 = specialized Collection.dropFirst(_:)(v148, v19, v21, v23, v25);
    uint64_t v31 = v30;
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v152 = specialized Collection.prefix(_:)(v150, v29, v30, v32, v34);
    uint64_t v131 = v37;
    uint64_t v132 = v36;
    uint64_t v130 = v38;
    uint64_t v39 = v33;
    unint64_t v16 = v134;
    specialized Collection.dropFirst(_:)(v150, v29, v31, v39, v35);
    swift_bridgeObjectRetain_n();
    uint64_t v40 = v145;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    unint64_t v41 = *(void *)(a4 + 32);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    outlined copy of GadgetEvaluation<Field32>(v41);
    unint64_t v10 = v136;
    specialized PINEMainCircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:)(v145, v134, v146, v136, v139, v17, v41, (unint64_t *)&v155);
    uint64_t v7 = v6;
    if (v6)
    {
      swift_unknownObjectRelease();
      swift_unknownObjectRelease_n();
      outlined consume of GadgetEvaluation<Field32>(v41);
      swift_unknownObjectRelease();
      return swift_unknownObjectRelease();
    }
LABEL_44:
    unint64_t v140 = v41;
    outlined consume of GadgetEvaluation<Field32>(v41);
    swift_unknownObjectRelease();
    unint64_t v69 = v10;
    specialized Collection.prefix(_:)(v142, v40, v16, v146, v10);
    uint64_t v71 = v70;
    uint64_t v138 = v72;
    unint64_t v128 = v73;
    uint64_t v74 = specialized Collection.dropFirst(_:)(v142, v40, v16, v146, v69);
    uint64_t v76 = v75;
    uint64_t v78 = v77;
    uint64_t v80 = v79;
    specialized Collection.prefix(_:)(v142, v74, v75, v77, v79);
    uint64_t v147 = v81;
    unint64_t v135 = v83;
    uint64_t v137 = v82;
    uint64_t v84 = specialized Collection.dropFirst(_:)(v142, v74, v76, v78, v80);
    uint64_t v88 = v143 + 1;
    if (__OFADD__(v143, 1)) {
      goto LABEL_126;
    }
    uint64_t v89 = v88 * v150;
    if ((unsigned __int128)(v88 * (__int128)v150) >> 64 != (v88 * v150) >> 63) {
      goto LABEL_127;
    }
    uint64_t v90 = v84;
    uint64_t v91 = v85;
    uint64_t v92 = v86;
    uint64_t v93 = v87;
    uint64_t v151 = specialized Collection.prefix(_:)(v89, v84, v85, v86, v87);
    uint64_t v126 = v95;
    uint64_t v127 = v94;
    uint64_t v125 = v96;
    specialized Collection.dropFirst(_:)(v89, v90, v91, v92, v93);
    swift_unknownObjectRetain();
    outlined copy of GadgetEvaluation<Field32>(v140);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    specialized PINEMainCircuit.evaluateNormRangeCheck(vBits:uBits:inverseNumOfShares:for:)(v71, v138, v128, v147, v137, v135, &v159, v17);
    if (v7)
    {
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease_n();
      outlined consume of GadgetEvaluation<Field32>(v140);
      swift_unknownObjectRelease();
      return swift_unknownObjectRelease();
    }
    outlined consume of GadgetEvaluation<Field32>(v140);
    outlined copy of GadgetEvaluation<Field32>(v140);
    specialized PINEMainCircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:)((uint64_t)&v154, &v153, v151, v127, v126, v125, v152, v132, v131, v130, v133, v17);
    outlined consume of GadgetEvaluation<Field32>(v140);
    swift_unknownObjectRelease();
    unint64_t v97 = v153;
    unint64_t v98 = v154;
    uint64_t v99 = (v159 * (unsigned __int128)v129) >> 64;
    uint64_t v100 = (0xCFFE47FFFEAFFFFFLL * v159 * v129 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
    uint64_t v101 = __CFADD__(-(uint64_t)(v159 * v129), v159 * v129);
    BOOL v60 = __CFADD__(v100, v99);
    unint64_t v102 = v100 + v99;
    if (v60) {
      goto LABEL_55;
    }
    while (v102 == -1)
    {
      if ((v101 & 1) == 0)
      {
        unint64_t v104 = v155;
        unint64_t v102 = 0xFFFFFF00014FFFFELL;
        goto LABEL_62;
      }
      uint64_t v101 = 1;
LABEL_55:
      unint64_t v103 = v101 + v102;
      LODWORD(v101) = 22020095;
      BOOL v60 = __CFADD__(v103, 0xFFFFFF00014FFFFFLL);
      unint64_t v102 = v103 - 0xFFFEB00001;
      if (!v60) {
        goto LABEL_61;
      }
      __break(1u);
    }
    v102 += v101;
    if (v102 >= 0xFFFEB00001) {
      v102 -= 0xFFFEB00001;
    }
LABEL_61:
    unint64_t v104 = v155;
    if (!v102) {
      goto LABEL_71;
    }
LABEL_62:
    BOOL v60 = v102 <= 0xFFFEB00001;
    unint64_t v105 = 0xFFFEB00001 - v102;
    if (!v60) {
      goto LABEL_128;
    }
    uint64_t v106 = v104 - v105;
    if (v104 < v105)
    {
      uint64_t v106 = 0xFFFEB00001;
      BOOL v60 = v105 <= 0xFFFEB00001;
      unint64_t v107 = 0xFFFEB00001 - v105;
      if (!v60) {
        goto LABEL_132;
      }
      BOOL v60 = __CFADD__(v104, v107);
      v104 += v107;
      if (!v60)
      {
LABEL_71:
        specialized FieldElement.pow(_:)(2, v129, &v154);
        uint64_t v108 = (v154 * (unsigned __int128)v98) >> 64;
        uint64_t v109 = (0xCFFE47FFFEAFFFFFLL * v154 * v98 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
        uint64_t v110 = __CFADD__(-(uint64_t)(v154 * v98), v154 * v98);
        BOOL v60 = __CFADD__(v109, v108);
        unint64_t v111 = v109 + v108;
        if (v60) {
          goto LABEL_76;
        }
        while (v111 == -1)
        {
          if ((v110 & 1) == 0)
          {
            unint64_t v111 = 0xFFFFFF00014FFFFELL;
            goto LABEL_83;
          }
          uint64_t v110 = 1;
LABEL_76:
          unint64_t v112 = v110 + v111;
          LODWORD(v110) = 22020095;
          BOOL v60 = __CFADD__(v112, 0xFFFFFF00014FFFFFLL);
          unint64_t v111 = v112 - 0xFFFEB00001;
          if (!v60) {
            goto LABEL_82;
          }
          __break(1u);
        }
        v111 += v110;
        if (v111 >= 0xFFFEB00001) {
          v111 -= 0xFFFEB00001;
        }
LABEL_82:
        if (!v111) {
          goto LABEL_92;
        }
LABEL_83:
        BOOL v60 = v111 <= 0xFFFEB00001;
        unint64_t v113 = 0xFFFEB00001 - v111;
        if (!v60) {
          goto LABEL_129;
        }
        uint64_t v114 = v104 - v113;
        if (v104 < v113)
        {
          uint64_t v114 = 0xFFFEB00001;
          BOOL v60 = v113 <= 0xFFFEB00001;
          unint64_t v115 = 0xFFFEB00001 - v113;
          if (!v60) {
            goto LABEL_133;
          }
          BOOL v60 = __CFADD__(v104, v115);
          v104 += v115;
          if (!v60)
          {
LABEL_92:
            specialized FieldElement.pow(_:)(3, v129, &v154);
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            uint64_t result = swift_unknownObjectRelease();
            uint64_t v116 = (v154 * (unsigned __int128)v97) >> 64;
            uint64_t v117 = (0xCFFE47FFFEAFFFFFLL * v154 * v97 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
            BOOL v118 = __CFADD__(-(uint64_t)(v154 * v97), v154 * v97);
            BOOL v60 = __CFADD__(v117, v116);
            uint64_t v119 = v117 + v116;
            if (!v60)
            {
              if (v119 != -1)
              {
                unint64_t v121 = v119 + v118;
                if (v121 >= 0xFFFEB00001) {
                  v121 -= 0xFFFEB00001;
                }
                if (!v121) {
                  goto LABEL_123;
                }
                goto LABEL_114;
              }
              if (!v118)
              {
                unint64_t v121 = 0xFFFFFF00014FFFFELL;
LABEL_114:
                BOOL v60 = v121 <= 0xFFFEB00001;
                unint64_t v122 = 0xFFFEB00001 - v121;
                if (!v60) {
                  goto LABEL_130;
                }
                uint64_t v123 = v104 - v122;
                if (v104 < v122)
                {
                  uint64_t v123 = 0xFFFEB00001;
                  BOOL v60 = v122 <= 0xFFFEB00001;
                  unint64_t v124 = 0xFFFEB00001 - v122;
                  if (!v60) {
                    goto LABEL_134;
                  }
                  BOOL v60 = __CFADD__(v104, v124);
                  v104 += v124;
                  if (!v60) {
                    goto LABEL_123;
                  }
                  __break(1u);
                }
                unint64_t v104 = v123;
LABEL_123:
                *a5 = v104;
                return result;
              }
              BOOL v118 = 1;
            }
            uint64_t v120 = v118 + v119;
            BOOL v60 = __CFADD__(v120, 0xFFFFFF00014FFFFFLL);
            unint64_t v121 = v120 - 0xFFFEB00001;
            if (v60) {
              goto LABEL_131;
            }
            if (!v121) {
              goto LABEL_123;
            }
            goto LABEL_114;
          }
          __break(1u);
        }
        unint64_t v104 = v114;
        goto LABEL_92;
      }
      __break(1u);
    }
    unint64_t v104 = v106;
    goto LABEL_71;
  }
  uint64_t v40 = 0xFFFEB00001;
  unint64_t v41 = 0xCFFE47FFFEAFFFFFLL;
  uint64_t v152 = 0xFFFFFF00014FFFFELL;
  while (1)
  {
    protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(v18 & 1, &v155);
    unint64_t v56 = *((void *)&v155 + 1) | v155;
    if (v155 == 0) {
      goto LABEL_37;
    }
    uint64_t v57 = (v16 * (unsigned __int128)v17) >> 64;
    uint64_t v58 = (0xCFFE47FFFEAFFFFFLL * v16 * v17 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
    BOOL v59 = __CFADD__(-(uint64_t)(v16 * v17), v16 * v17);
    BOOL v60 = __CFADD__(v58, v57);
    uint64_t v61 = v58 + v57;
    if (v60) {
      break;
    }
    if (v61 != -1)
    {
      unint64_t v56 = 0;
      unint64_t v63 = v61 + v59;
      if (v63 >= 0xFFFEB00001) {
        unint64_t v17 = v63 - 0xFFFEB00001;
      }
      else {
        unint64_t v17 = v63;
      }
      goto LABEL_37;
    }
    unint64_t v62 = 0;
    if (v59) {
      goto LABEL_27;
    }
    unint64_t v56 = 0;
    unint64_t v17 = 0xFFFFFF00014FFFFELL;
LABEL_37:
    uint64_t v64 = (__PAIR128__(v56, v16) * __PAIR128__(v56, v16)) >> 64;
    uint64_t v65 = (0xCFFE47FFFEAFFFFFLL * v16 * v16 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
    BOOL v66 = __CFADD__(-(uint64_t)(v16 * v16), v16 * v16);
    BOOL v60 = __CFADD__(v65, v64);
    uint64_t v67 = v65 + v64;
    if (v60)
    {
      unint64_t v68 = v67 + v66;
      unint64_t v16 = v68 - 0xFFFEB00001;
      if (v68 >= 0xFFFEB00001)
      {
        __break(1u);
        goto LABEL_44;
      }
    }
    else if (v67 == -1)
    {
      unint64_t v16 = 0xFFFFFF00014FFFFELL;
      if (v66) {
        unint64_t v16 = 0xFFFFFF00014FFFFFLL;
      }
    }
    else
    {
      unint64_t v55 = v67 + v66;
      if (v55 >= 0xFFFEB00001) {
        unint64_t v16 = v55 - 0xFFFEB00001;
      }
      else {
        unint64_t v16 = v55;
      }
    }
    v18 >>= 1;
    protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(v18, &v155);
    if (v155 == 0) {
      goto LABEL_7;
    }
  }
  unint64_t v62 = v61 + v59;
LABEL_27:
  unint64_t v17 = v62 - 0xFFFEB00001;
  if (v62 < 0xFFFEB00001)
  {
    unint64_t v56 = 0;
    goto LABEL_37;
  }
  __break(1u);
LABEL_125:
  __break(1u);
LABEL_126:
  __break(1u);
LABEL_127:
  __break(1u);
LABEL_128:
  __break(1u);
LABEL_129:
  __break(1u);
LABEL_130:
  __break(1u);
LABEL_131:
  __break(1u);
LABEL_132:
  __break(1u);
LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized PINEMainCircuit.evaluate(measurement:jointRand:numOfShares:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(v5 + 72);
  if (v7 != v8)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    *(void *)&long long v143 = 0xD00000000000001BLL;
    *((void *)&v143 + 1) = 0x8000000260BFEB20;
    v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._countAndFlagsBits = 540877088;
    v45._object = (void *)0xE400000000000000;
    String.append(_:)(v45);
    uint64_t v147 = v8;
LABEL_12:
    v48._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v48);
LABEL_13:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_OWORD *)uint64_t v49 = v143;
    *(unsigned char *)(v49 + 16) = 2;
    return swift_willThrow();
  }
  Swift::String v9 = (_DWORD *)a2;
  if (*(void *)(a2 + 16) != 3)
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    *(void *)&long long v143 = 0xD000000000000019;
    *((void *)&v143 + 1) = 0x8000000260BFEB80;
    v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    v47._countAndFlagsBits = 540877088;
    v47._object = (void *)0xE400000000000000;
    String.append(_:)(v47);
    uint64_t v147 = 3;
    goto LABEL_12;
  }
  uint64_t v11 = a1;
  uint64_t v132 = *(void *)(v5 + 96);
  uint64_t v135 = *(void *)(v5 + 64);
  uint64_t v129 = *(void *)(v5 + 104);
  uint64_t v130 = *(void *)(v5 + 120);
  uint64_t v139 = *(void *)(v5 + 128);
  uint64_t v136 = a4;
  uint64_t v12 = *(void *)(a4 + 16);
  long long v13 = *(_OWORD *)(v5 + 40);
  long long v14 = *(_OWORD *)(v5 + 24);
  long long v144 = *(_OWORD *)(v5 + 8);
  long long v145 = v14;
  long long v146 = v13;
  uint64_t v15 = *((void *)&v144 + 1);
  uint64_t v137 = v144;
  uint64_t v16 = v13;
  specialized Gadget.wirePolynomialLength.getter();
  specialized Gadget.gadgetPolynomialLength.getter();
  if (v12 != 1)
  {
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    *(void *)&long long v143 = 0x2064696C61766E49;
    *((void *)&v143 + 1) = 0xEF203A746E756F63;
    uint64_t v147 = v12;
    v51._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v51);
    swift_bridgeObjectRelease();
    v52._countAndFlagsBits = 540877088;
    v52._object = (void *)0xE400000000000000;
    String.append(_:)(v52);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
    uint64_t v53 = swift_allocObject();
    *(_OWORD *)(v53 + 16) = xmmword_260BF9FF0;
    uint64_t v54 = specialized Gadget.wirePolynomialLength.getter();
    uint64_t v55 = specialized Gadget.gadgetPolynomialLength.getter();
    *(void *)(v53 + 32) = v137;
    *(void *)(v53 + 40) = v15;
    *(void *)(v53 + 48) = v16;
    *(void *)(v53 + 56) = v54;
    *(void *)(v53 + 64) = v55;
    v56._countAndFlagsBits = MEMORY[0x261224130](v53, &type metadata for GadgetParameters);
    String.append(_:)(v56);
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  if ((a3 & 0x8000000000000000) != 0)
  {
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
  if (HIDWORD(a3))
  {
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  specialized FieldElement.init(_:)(a3, &v147);
  LODWORD(v17) = v147;
  if (!v147) {
    goto LABEL_100;
  }
  specialized static FixedWidthInteger._truncatingInit<A>(_:)(4293918719, &v143);
  unsigned int v18 = 0xFFFFF;
  if (v143 == 0)
  {
LABEL_8:
    int v126 = v9[8];
    int v121 = v9[9];
    unsigned int v117 = v9[10];
    specialized Collection.prefix(_:)(v132, v11, v11 + 32, 0, (2 * v7) | 1);
    uint64_t v19 = specialized Collection.dropFirst(_:)(v132, v11, v11 + 32, 0, (2 * v7) | 1);
    uint64_t v21 = v20;
    uint64_t v23 = v22;
    uint64_t v25 = v24;
    uint64_t v138 = specialized Collection.prefix(_:)(v135, v19, v20, v22, v24);
    uint64_t v122 = v26;
    unint64_t v124 = v27;
    uint64_t v133 = v28;
    uint64_t v29 = specialized Collection.dropFirst(_:)(v135, v19, v21, v23, v25);
    uint64_t v31 = v30;
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v36 = specialized Collection.prefix(_:)(v139, v29, v30, v32, v34);
    uint64_t v119 = v38;
    uint64_t v120 = v37;
    uint64_t v118 = v39;
    uint64_t v40 = v31;
    uint64_t v41 = v36;
    specialized Collection.dropFirst(_:)(v139, v29, v40, v33, v35);
    uint64_t v11 = v122;
    swift_bridgeObjectRetain_n();
    uint64_t v42 = v138;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    Swift::String v9 = *(_DWORD **)(v136 + 32);
    swift_unknownObjectRetain();
    uint64_t v136 = v41;
    swift_unknownObjectRetain();
    outlined copy of GadgetEvaluation<Field32>((unint64_t)v9);
    uint64_t v43 = v133;
    unint64_t v17 = v124;
    specialized PINEMainCircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:)(v138, v122, v133, v124, v126, v18, (unint64_t)v9, (unsigned int *)&v143);
    uint64_t v7 = v6;
    if (!v6) {
      goto LABEL_32;
    }
    swift_unknownObjectRelease();
    swift_unknownObjectRelease_n();
    outlined consume of GadgetEvaluation<Field32>((unint64_t)v9);
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  uint64_t v43 = 4293918719;
  uint64_t v42 = 4293918719;
  while (1)
  {
    specialized static FixedWidthInteger._truncatingInit<A>(_:)(v42 & 1, &v143);
    if (v143 != 0)
    {
      unint64_t v57 = v17 * (unint64_t)v18;
      uint64_t v58 = 4293918721 * (-1048577 * v57);
      BOOL v59 = __CFADD__(v58, v57);
      unint64_t v60 = (v58 + v57) >> 32;
      if (v59)
      {
        unsigned int v18 = v60 + 0xFFFFF;
        if (v60 >= 0xFFF00001)
        {
          __break(1u);
          goto LABEL_90;
        }
      }
      else if (v60 >= 0xFFF00001)
      {
        unsigned int v18 = v60 + 0xFFFFF;
      }
      else
      {
        unsigned int v18 = v60;
      }
    }
    unint64_t v61 = v17 * (unint64_t)v17;
    uint64_t v62 = 4293918721 * (-1048577 * v61);
    BOOL v59 = __CFADD__(v62, v61);
    unint64_t v63 = (v62 + v61) >> 32;
    if (!v59)
    {
      if (v63 >= 0xFFF00001) {
        LODWORD(v17) = v63 + 0xFFFFF;
      }
      else {
        LODWORD(v17) = v63;
      }
      goto LABEL_19;
    }
    unint64_t v17 = (v63 + 0xFFFFF);
    if (v63 >= 0xFFF00001) {
      break;
    }
LABEL_19:
    uint64_t v42 = v42 >> 1;
    specialized static FixedWidthInteger._truncatingInit<A>(_:)(v42, &v143);
    if (v143 == 0) {
      goto LABEL_8;
    }
  }
  __break(1u);
LABEL_32:
  unint64_t v116 = (unint64_t)v9;
  outlined consume of GadgetEvaluation<Field32>((unint64_t)v9);
  swift_unknownObjectRelease();
  specialized Collection.prefix(_:)(v129, v42, v11, v43, v17);
  uint64_t v127 = v64;
  unint64_t v114 = v66;
  uint64_t v115 = v65;
  uint64_t v67 = specialized Collection.dropFirst(_:)(v129, v42, v11, v43, v17);
  uint64_t v69 = v68;
  uint64_t v71 = v70;
  uint64_t v73 = v72;
  specialized Collection.prefix(_:)(v129, v67, v68, v70, v72);
  uint64_t v75 = v74;
  uint64_t v134 = v76;
  unint64_t v125 = v77;
  uint64_t v78 = specialized Collection.dropFirst(_:)(v129, v67, v69, v71, v73);
  uint64_t v82 = v130 + 1;
  if (__OFADD__(v130, 1)) {
    goto LABEL_92;
  }
  uint64_t v131 = v75;
  uint64_t v83 = v82 * v139;
  if ((unsigned __int128)(v82 * (__int128)v139) >> 64 != (v82 * v139) >> 63)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  uint64_t v84 = v78;
  uint64_t v85 = v80;
  uint64_t v86 = v81;
  uint64_t v87 = v79;
  uint64_t v140 = specialized Collection.prefix(_:)(v83, v78, v79, v80, v81);
  uint64_t v123 = v88;
  uint64_t v112 = v90;
  uint64_t v113 = v89;
  specialized Collection.dropFirst(_:)(v83, v84, v87, v85, v86);
  swift_unknownObjectRetain();
  outlined copy of GadgetEvaluation<Field32>(v116);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  specialized PINEMainCircuit.evaluateNormRangeCheck(vBits:uBits:inverseNumOfShares:for:)(v127, v115, v114, v131, v134, v125, &v147, v18);
  if (v7)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease_n();
    outlined consume of GadgetEvaluation<Field32>(v116);
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  outlined consume of GadgetEvaluation<Field32>(v116);
  outlined copy of GadgetEvaluation<Field32>(v116);
  specialized PINEMainCircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:)((uint64_t)&v142, &v141, v140, v123, v113, v112, v136, v120, v119, v118, v121, v18);
  outlined consume of GadgetEvaluation<Field32>(v116);
  swift_unknownObjectRelease();
  unsigned int v92 = v141;
  unsigned int v91 = v142;
  unint64_t v93 = v147 * (unint64_t)v117;
  uint64_t v94 = 4293918721 * (-1048577 * v93);
  BOOL v59 = __CFADD__(v94, v93);
  unint64_t v95 = (v94 + v93) >> 32;
  if (v59)
  {
    BOOL v59 = __CFADD__(v95, 0xFFFFF);
    LODWORD(v95) = v95 + 0xFFFFF;
    if (v59)
    {
      __break(1u);
      goto LABEL_43;
    }
  }
  else
  {
LABEL_43:
    if (v95 >= 0xFFF00001) {
      LODWORD(v95) = v95 + 0xFFFFF;
    }
  }
  unsigned int v96 = v143;
  if (!v95) {
    goto LABEL_55;
  }
  BOOL v59 = v95 <= 0xFFF00001;
  unsigned int v97 = -1048575 - v95;
  if (!v59)
  {
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  int v98 = v143 - v97;
  if (v143 >= v97)
  {
LABEL_54:
    unsigned int v96 = v98;
    goto LABEL_55;
  }
  int v98 = -1048575;
  BOOL v59 = v97 <= 0xFFF00001;
  unsigned int v99 = -1048575 - v97;
  if (!v59)
  {
LABEL_97:
    __break(1u);
    goto LABEL_98;
  }
  unsigned int v96 = v143 + v99;
  if (__CFADD__(v143, v99))
  {
    __break(1u);
    goto LABEL_54;
  }
LABEL_55:
  specialized FieldElement.pow(_:)(2, v117, &v142);
  unint64_t v100 = v142 * (unint64_t)v91;
  uint64_t v101 = 4293918721 * (-1048577 * v100);
  BOOL v59 = __CFADD__(v101, v100);
  unint64_t v102 = (v101 + v100) >> 32;
  if (!v59) {
    goto LABEL_60;
  }
  BOOL v59 = __CFADD__(v102, 0xFFFFF);
  LODWORD(v102) = v102 + 0xFFFFF;
  if (v59)
  {
    __break(1u);
LABEL_60:
    if (v102 >= 0xFFF00001) {
      LODWORD(v102) = v102 + 0xFFFFF;
    }
  }
  if (!v102) {
    goto LABEL_72;
  }
  BOOL v59 = v102 <= 0xFFF00001;
  unsigned int v103 = -1048575 - v102;
  if (!v59)
  {
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
    goto LABEL_97;
  }
  int v104 = v96 - v103;
  if (v96 >= v103)
  {
LABEL_71:
    unsigned int v96 = v104;
    goto LABEL_72;
  }
  int v104 = -1048575;
  BOOL v59 = v103 <= 0xFFF00001;
  unsigned int v105 = -1048575 - v103;
  if (!v59)
  {
LABEL_98:
    __break(1u);
    goto LABEL_99;
  }
  BOOL v59 = __CFADD__(v96, v105);
  v96 += v105;
  if (v59)
  {
    __break(1u);
    goto LABEL_71;
  }
LABEL_72:
  specialized FieldElement.pow(_:)(3, v117, &v142);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  unint64_t v106 = v142 * (unint64_t)v92;
  uint64_t v107 = 4293918721 * (-1048577 * v106);
  BOOL v59 = __CFADD__(v107, v106);
  unint64_t v108 = (v107 + v106) >> 32;
  if (!v59) {
    goto LABEL_77;
  }
  BOOL v59 = __CFADD__(v108, 0xFFFFF);
  LODWORD(v108) = v108 + 0xFFFFF;
  if (v59)
  {
    __break(1u);
LABEL_77:
    if (v108 >= 0xFFF00001) {
      LODWORD(v108) = v108 + 0xFFFFF;
    }
  }
  if (!v108) {
    goto LABEL_89;
  }
  BOOL v59 = v108 <= 0xFFF00001;
  unsigned int v109 = -1048575 - v108;
  if (!v59) {
    goto LABEL_96;
  }
  int v110 = v96 - v109;
  if (v96 >= v109) {
    goto LABEL_88;
  }
  int v110 = -1048575;
  BOOL v59 = v109 <= 0xFFF00001;
  unsigned int v111 = -1048575 - v109;
  if (v59)
  {
    BOOL v59 = __CFADD__(v96, v111);
    v96 += v111;
    if (!v59) {
      goto LABEL_89;
    }
    __break(1u);
LABEL_88:
    unsigned int v96 = v110;
LABEL_89:
    *a5 = v96;
    return result;
  }
LABEL_99:
  __break(1u);
LABEL_100:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized PINEMainCircuit.evaluate(measurement:jointRand:numOfShares:for:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 16);
  unint64_t v8 = *(void *)(v5 + 72);
  if (v7 != v8)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    *(void *)&long long v154 = 0xD00000000000001BLL;
    *((void *)&v154 + 1) = 0x8000000260BFEB20;
    v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    v40._countAndFlagsBits = 540877088;
    v40._object = (void *)0xE400000000000000;
    String.append(_:)(v40);
    unint64_t v158 = v8;
LABEL_12:
    v43._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v43);
LABEL_13:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_OWORD *)uint64_t v44 = v154;
    *(unsigned char *)(v44 + 16) = 2;
    return swift_willThrow();
  }
  if (a2[2] != 3)
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    *(void *)&long long v154 = 0xD000000000000019;
    *((void *)&v154 + 1) = 0x8000000260BFEB80;
    v41._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    v42._countAndFlagsBits = 540877088;
    v42._object = (void *)0xE400000000000000;
    String.append(_:)(v42);
    unint64_t v158 = 3;
    goto LABEL_12;
  }
  uint64_t v142 = *(void *)(v5 + 96);
  uint64_t v144 = *(void *)(v5 + 64);
  uint64_t v139 = *(void *)(v5 + 104);
  uint64_t v140 = *(void *)(v5 + 120);
  uint64_t v150 = *(void *)(v5 + 128);
  unint64_t v12 = *(void *)(a4 + 16);
  long long v13 = *(_OWORD *)(v5 + 40);
  long long v14 = *(_OWORD *)(v5 + 24);
  long long v155 = *(_OWORD *)(v5 + 8);
  long long v156 = v14;
  long long v157 = v13;
  long long v15 = v155;
  uint64_t v148 = v13;
  specialized Gadget.wirePolynomialLength.getter();
  specialized Gadget.gadgetPolynomialLength.getter();
  if (v12 != 1)
  {
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    *(void *)&long long v154 = 0x2064696C61766E49;
    *((void *)&v154 + 1) = 0xEF203A746E756F63;
    unint64_t v158 = v12;
    v45._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    v46._countAndFlagsBits = 540877088;
    v46._object = (void *)0xE400000000000000;
    String.append(_:)(v46);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
    uint64_t v47 = swift_allocObject();
    *(_OWORD *)(v47 + 16) = xmmword_260BF9FF0;
    uint64_t v48 = specialized Gadget.wirePolynomialLength.getter();
    uint64_t v49 = specialized Gadget.gadgetPolynomialLength.getter();
    *(_OWORD *)(v47 + 32) = v15;
    *(void *)(v47 + 48) = v148;
    *(void *)(v47 + 56) = v48;
    *(void *)(v47 + 64) = v49;
    v50._countAndFlagsBits = MEMORY[0x261224130](v47, &type metadata for GadgetParameters);
    String.append(_:)(v50);
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  if ((a3 & 0x8000000000000000) != 0) {
    goto LABEL_123;
  }
  specialized FieldElement.init(_:)(a3, &v158);
  unint64_t v16 = v158;
  if (!v158) {
    goto LABEL_133;
  }
  protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(0xFFFFFFFEFFFFFFFFLL, &v154);
  if (v154 == 0)
  {
    unint64_t v17 = 0xFFFFFFFFLL;
LABEL_8:
    uint64_t v136 = a2[4];
    uint64_t v130 = a2[5];
    uint64_t v126 = a2[6];
    specialized Collection.prefix(_:)(v142, a1, a1 + 32, 0, (2 * v7) | 1);
    uint64_t v18 = specialized Collection.dropFirst(_:)(v142, a1, a1 + 32, 0, (2 * v7) | 1);
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    uint64_t v24 = v23;
    uint64_t v143 = specialized Collection.prefix(_:)(v144, v18, v19, v21, v23);
    uint64_t v131 = v25;
    uint64_t v149 = v26;
    unint64_t v133 = v27;
    uint64_t v28 = specialized Collection.dropFirst(_:)(v144, v18, v20, v22, v24);
    uint64_t v30 = v29;
    uint64_t v32 = v31;
    uint64_t v34 = v33;
    uint64_t v145 = specialized Collection.prefix(_:)(v150, v28, v29, v31, v33);
    uint64_t v128 = v36;
    uint64_t v129 = v35;
    uint64_t v127 = v37;
    specialized Collection.dropFirst(_:)(v150, v28, v30, v32, v34);
    swift_bridgeObjectRetain_n();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    unint64_t v38 = *(void *)(a4 + 32);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    outlined copy of GadgetEvaluation<Field32>(v38);
    specialized PINEMainCircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:)(v143, v131, v149, v133, v136, v17, v38, (unint64_t *)&v154);
    if (v6)
    {
      swift_unknownObjectRelease();
      swift_unknownObjectRelease_n();
      outlined consume of GadgetEvaluation<Field32>(v38);
      swift_unknownObjectRelease();
      return swift_unknownObjectRelease();
    }
    unint64_t v147 = v38;
    outlined consume of GadgetEvaluation<Field32>(v38);
    swift_unknownObjectRelease();
    specialized Collection.prefix(_:)(v139, v143, v131, v149, v133);
    uint64_t v67 = v66;
    unint64_t v135 = v69;
    uint64_t v137 = v68;
    uint64_t v70 = specialized Collection.dropFirst(_:)(v139, v143, v131, v149, v133);
    uint64_t v72 = v71;
    uint64_t v74 = v73;
    uint64_t v76 = v75;
    specialized Collection.prefix(_:)(v139, v70, v71, v73, v75);
    uint64_t v132 = v78;
    uint64_t v134 = v77;
    unint64_t v125 = v79;
    uint64_t v80 = specialized Collection.dropFirst(_:)(v139, v70, v72, v74, v76);
    uint64_t v84 = v140 + 1;
    if (__OFADD__(v140, 1)) {
      goto LABEL_124;
    }
    uint64_t v85 = v84 * v150;
    if ((unsigned __int128)(v84 * (__int128)v150) >> 64 != (v84 * v150) >> 63) {
      goto LABEL_125;
    }
    uint64_t v86 = v80;
    uint64_t v87 = v82;
    uint64_t v88 = v83;
    uint64_t v89 = v67;
    uint64_t v90 = v81;
    uint64_t v151 = specialized Collection.prefix(_:)(v85, v80, v81, v82, v83);
    uint64_t v141 = v91;
    uint64_t v123 = v93;
    uint64_t v124 = v92;
    specialized Collection.dropFirst(_:)(v85, v86, v90, v87, v88);
    swift_unknownObjectRetain();
    outlined copy of GadgetEvaluation<Field32>(v147);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    specialized PINEMainCircuit.evaluateNormRangeCheck(vBits:uBits:inverseNumOfShares:for:)(v89, v137, v135, v134, v132, v125, &v158, v17);
    outlined consume of GadgetEvaluation<Field32>(v147);
    outlined copy of GadgetEvaluation<Field32>(v147);
    specialized PINEMainCircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:)((uint64_t)&v153, &v152, v151, v141, v124, v123, v145, v129, v128, v127, v130, v17);
    outlined consume of GadgetEvaluation<Field32>(v147);
    swift_unknownObjectRelease();
    unint64_t v95 = v152;
    unint64_t v96 = v153;
    uint64_t v97 = (v158 * (unsigned __int128)(unint64_t)v126) >> 64;
    uint64_t v98 = (0xFFFFFFFEFFFFFFFFLL * v158 * v126 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
    uint64_t v99 = __CFADD__(-(uint64_t)(v158 * v126), v158 * v126);
    unint64_t v100 = v98 + v97;
    if (__CFADD__(v98, v97)) {
      goto LABEL_53;
    }
    while (v100 == -1)
    {
      if ((v99 & 1) == 0)
      {
        unint64_t v102 = v154;
        unint64_t v100 = 4294967294;
        goto LABEL_60;
      }
      uint64_t v99 = 1;
LABEL_53:
      unint64_t v101 = v99 + v100;
      LODWORD(v99) = -1;
      BOOL v57 = __CFADD__(v101, 0xFFFFFFFFLL);
      unint64_t v100 = v101 + 0xFFFFFFFF;
      if (!v57) {
        goto LABEL_59;
      }
      __break(1u);
    }
    v100 += v99;
    if (v100 >= 0xFFFFFFFF00000001) {
      v100 += 0xFFFFFFFFLL;
    }
LABEL_59:
    unint64_t v102 = v154;
    if (!v100) {
      goto LABEL_69;
    }
LABEL_60:
    BOOL v57 = v100 <= 0xFFFFFFFF00000001;
    unint64_t v103 = 0xFFFFFFFF00000001 - v100;
    if (!v57) {
      goto LABEL_126;
    }
    unint64_t v104 = v102 - v103;
    if (v102 < v103)
    {
      unint64_t v104 = 0xFFFFFFFF00000001;
      BOOL v57 = v103 <= 0xFFFFFFFF00000001;
      unint64_t v105 = 0xFFFFFFFF00000001 - v103;
      if (!v57) {
        goto LABEL_130;
      }
      BOOL v57 = __CFADD__(v102, v105);
      v102 += v105;
      if (!v57)
      {
LABEL_69:
        specialized FieldElement.pow(_:)(2, v126, (uint64_t *)&v153);
        uint64_t v106 = (v153 * (unsigned __int128)v96) >> 64;
        uint64_t v107 = (0xFFFFFFFEFFFFFFFFLL * v153 * v96 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
        BOOL v108 = __CFADD__(-(uint64_t)(v153 * v96), v153 * v96);
        uint64_t v109 = v107 + v106;
        if (!__CFADD__(v107, v106))
        {
          if (v109 != -1)
          {
            unint64_t v111 = v109 + v108;
            if (v111 >= 0xFFFFFFFF00000001) {
              v111 += 0xFFFFFFFFLL;
            }
            if (!v111) {
              goto LABEL_97;
            }
            goto LABEL_88;
          }
          if (!v108)
          {
            unint64_t v111 = 4294967294;
            goto LABEL_88;
          }
          BOOL v108 = 1;
        }
        uint64_t v110 = v108 + v109;
        BOOL v57 = __CFADD__(v110, 0xFFFFFFFFLL);
        unint64_t v111 = v110 + 0xFFFFFFFFLL;
        if (v57) {
          goto LABEL_129;
        }
        if (!v111) {
          goto LABEL_97;
        }
LABEL_88:
        BOOL v57 = v111 <= 0xFFFFFFFF00000001;
        unint64_t v112 = 0xFFFFFFFF00000001 - v111;
        if (!v57) {
          goto LABEL_127;
        }
        unint64_t v113 = v102 - v112;
        if (v102 < v112)
        {
          unint64_t v113 = 0xFFFFFFFF00000001;
          BOOL v57 = v112 <= 0xFFFFFFFF00000001;
          unint64_t v114 = 0xFFFFFFFF00000001 - v112;
          if (!v57) {
            goto LABEL_131;
          }
          BOOL v57 = __CFADD__(v102, v114);
          v102 += v114;
          if (!v57)
          {
LABEL_97:
            specialized FieldElement.pow(_:)(3, v126, (uint64_t *)&v153);
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            uint64_t result = swift_unknownObjectRelease();
            uint64_t v115 = (v153 * (unsigned __int128)v95) >> 64;
            uint64_t v116 = (0xFFFFFFFEFFFFFFFFLL * v153 * v95 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
            uint64_t v117 = __CFADD__(-(uint64_t)(v153 * v95), v153 * v95);
            unint64_t v118 = v116 + v115;
            if (__CFADD__(v116, v115)) {
              goto LABEL_102;
            }
            while (v118 == -1)
            {
              if ((v117 & 1) == 0)
              {
                unint64_t v118 = 4294967294;
                goto LABEL_109;
              }
              uint64_t v117 = 1;
LABEL_102:
              unint64_t v119 = v117 + v118;
              LODWORD(v117) = -1;
              BOOL v57 = __CFADD__(v119, 0xFFFFFFFFLL);
              unint64_t v118 = v119 + 0xFFFFFFFF;
              if (!v57) {
                goto LABEL_108;
              }
              __break(1u);
            }
            v118 += v117;
            if (v118 >= 0xFFFFFFFF00000001) {
              v118 += 0xFFFFFFFFLL;
            }
LABEL_108:
            if (!v118) {
              goto LABEL_118;
            }
LABEL_109:
            BOOL v57 = v118 <= 0xFFFFFFFF00000001;
            unint64_t v120 = 0xFFFFFFFF00000001 - v118;
            if (!v57) {
              goto LABEL_128;
            }
            unint64_t v121 = v102 - v120;
            if (v102 < v120)
            {
              unint64_t v121 = 0xFFFFFFFF00000001;
              BOOL v57 = v120 <= 0xFFFFFFFF00000001;
              unint64_t v122 = 0xFFFFFFFF00000001 - v120;
              if (!v57) {
                goto LABEL_132;
              }
              BOOL v57 = __CFADD__(v102, v122);
              v102 += v122;
              if (!v57) {
                goto LABEL_118;
              }
              __break(1u);
            }
            unint64_t v102 = v121;
LABEL_118:
            *a5 = v102;
            return result;
          }
          __break(1u);
        }
        unint64_t v102 = v113;
        goto LABEL_97;
      }
      __break(1u);
    }
    unint64_t v102 = v104;
    goto LABEL_69;
  }
  unint64_t v51 = 0xFFFFFFFEFFFFFFFFLL;
  unint64_t v17 = 0xFFFFFFFFLL;
  while (1)
  {
    protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(v51 & 1, &v154);
    unint64_t v53 = *((void *)&v154 + 1) | v154;
    if (v154 == 0) {
      goto LABEL_38;
    }
    uint64_t v54 = (v16 * (unsigned __int128)v17) >> 64;
    uint64_t v55 = (0xFFFFFFFEFFFFFFFFLL * v16 * v17 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
    BOOL v56 = __CFADD__(-(uint64_t)(v16 * v17), v16 * v17);
    BOOL v57 = __CFADD__(v55, v54);
    uint64_t v58 = v55 + v54;
    if (v57)
    {
      unint64_t v59 = v58 + v56;
    }
    else
    {
      if (v58 != -1)
      {
        unint64_t v53 = 0;
        unint64_t v60 = v58 + v56;
        if (v60 >= 0xFFFFFFFF00000001) {
          unint64_t v17 = v60 + 0xFFFFFFFF;
        }
        else {
          unint64_t v17 = v60;
        }
        goto LABEL_38;
      }
      unint64_t v59 = 0;
      if (!v56)
      {
        unint64_t v53 = 0;
        unint64_t v17 = 4294967294;
        goto LABEL_38;
      }
    }
    unint64_t v17 = v59 + 0xFFFFFFFF;
    if (v59 >= 0xFFFFFFFF00000001) {
      goto LABEL_122;
    }
    unint64_t v53 = 0;
LABEL_38:
    uint64_t v61 = (__PAIR128__(v53, v16) * __PAIR128__(v53, v16)) >> 64;
    uint64_t v62 = (0xFFFFFFFEFFFFFFFFLL * v16 * v16 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
    BOOL v63 = __CFADD__(-(uint64_t)(v16 * v16), v16 * v16);
    BOOL v57 = __CFADD__(v62, v61);
    uint64_t v64 = v62 + v61;
    if (!v57)
    {
      if (v64 == -1)
      {
        if (v63) {
          unint64_t v16 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v16 = 4294967294;
        }
      }
      else
      {
        unint64_t v52 = v64 + v63;
        if (v52 >= 0xFFFFFFFF00000001) {
          unint64_t v16 = v52 + 0xFFFFFFFF;
        }
        else {
          unint64_t v16 = v52;
        }
      }
      goto LABEL_20;
    }
    unint64_t v65 = v64 + v63;
    unint64_t v16 = v65 + 0xFFFFFFFF;
    if (v65 >= 0xFFFFFFFF00000001) {
      break;
    }
LABEL_20:
    v51 >>= 1;
    protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(v51, &v154);
    if (v154 == 0) {
      goto LABEL_8;
    }
  }
  __break(1u);
LABEL_122:
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  __break(1u);
LABEL_125:
  __break(1u);
LABEL_126:
  __break(1u);
LABEL_127:
  __break(1u);
LABEL_128:
  __break(1u);
LABEL_129:
  __break(1u);
LABEL_130:
  __break(1u);
LABEL_131:
  __break(1u);
LABEL_132:
  __break(1u);
LABEL_133:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized PINEMainCircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, unint64_t *a8@<X8>)
{
  long long v14 = *(_OWORD *)(v8 + 24);
  long long v27 = *(_OWORD *)(v8 + 8);
  long long v28 = v14;
  long long v29 = *(_OWORD *)(v8 + 40);
  long long v15 = *(_OWORD *)(v8 + 112);
  long long v16 = *(_OWORD *)(v8 + 128);
  long long v17 = *(_OWORD *)(v8 + 80);
  v23[6] = *(_OWORD *)(v8 + 96);
  v23[7] = v15;
  v23[8] = v16;
  long long v18 = *(_OWORD *)(v8 + 48);
  long long v19 = *(_OWORD *)(v8 + 64);
  v23[2] = *(_OWORD *)(v8 + 32);
  v23[3] = v18;
  uint64_t v25 = a6;
  uint64_t v26 = a5;
  uint64_t v24 = *(void *)(v8 + 144);
  v23[4] = v19;
  v23[5] = v17;
  long long v20 = *(_OWORD *)(v8 + 16);
  v23[0] = *(_OWORD *)v8;
  v23[1] = v20;
  if (one-time initialization token for one != -1) {
    a1 = swift_once();
  }
  uint64_t v22 = static Field40.one;
  MEMORY[0x270FA5388](a1, a2);
  v21[2] = &v22;
  v21[3] = &v25;
  v21[4] = &v26;
  v21[5] = v23;
  specialized ParallelSum.chunkEvaluateSum(_:for:_:)(a2, a3, a4, a7, (unint64_t *)partial apply for specialized closure #1 in PINEMainCircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:), (uint64_t)v21, a8);
}

{
  uint64_t v8;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  void v21[7];
  uint64_t v22;
  _OWORD v23[9];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  long long v27;
  long long v28;
  long long v29;

  long long v14 = *(_OWORD *)(v8 + 24);
  long long v27 = *(_OWORD *)(v8 + 8);
  long long v28 = v14;
  long long v29 = *(_OWORD *)(v8 + 40);
  long long v15 = *(_OWORD *)(v8 + 112);
  long long v16 = *(_OWORD *)(v8 + 128);
  long long v17 = *(_OWORD *)(v8 + 80);
  v23[6] = *(_OWORD *)(v8 + 96);
  v23[7] = v15;
  v23[8] = v16;
  long long v18 = *(_OWORD *)(v8 + 48);
  long long v19 = *(_OWORD *)(v8 + 64);
  v23[2] = *(_OWORD *)(v8 + 32);
  v23[3] = v18;
  uint64_t v25 = a6;
  uint64_t v26 = a5;
  uint64_t v24 = *(void *)(v8 + 144);
  v23[4] = v19;
  v23[5] = v17;
  long long v20 = *(_OWORD *)(v8 + 16);
  v23[0] = *(_OWORD *)v8;
  v23[1] = v20;
  if (one-time initialization token for one != -1) {
    a1 = swift_once();
  }
  uint64_t v22 = static Field64.one;
  MEMORY[0x270FA5388](a1, a2);
  v21[2] = &v22;
  v21[3] = &v25;
  v21[4] = &v26;
  v21[5] = v23;
  specialized ParallelSum.chunkEvaluateSum(_:for:_:)(a2, a3, a4, a7, (unint64_t *)partial apply for specialized closure #1 in PINEMainCircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:), (uint64_t)v21, a8);
}

void specialized PINEMainCircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, unint64_t a7@<X6>, unsigned int *a8@<X8>)
{
  long long v14 = *(_OWORD *)(v8 + 24);
  long long v27 = *(_OWORD *)(v8 + 8);
  long long v28 = v14;
  long long v29 = *(_OWORD *)(v8 + 40);
  long long v15 = *(_OWORD *)(v8 + 112);
  long long v16 = *(_OWORD *)(v8 + 128);
  long long v17 = *(_OWORD *)(v8 + 80);
  v23[6] = *(_OWORD *)(v8 + 96);
  v23[7] = v15;
  v23[8] = v16;
  long long v18 = *(_OWORD *)(v8 + 48);
  long long v19 = *(_OWORD *)(v8 + 64);
  v23[2] = *(_OWORD *)(v8 + 32);
  v23[3] = v18;
  v23[4] = v19;
  int v25 = a6;
  int v26 = a5;
  int v24 = *(_DWORD *)(v8 + 144);
  v23[5] = v17;
  long long v20 = *(_OWORD *)(v8 + 16);
  v23[0] = *(_OWORD *)v8;
  v23[1] = v20;
  if (one-time initialization token for one != -1) {
    a1 = swift_once();
  }
  int v22 = static Field32.one;
  MEMORY[0x270FA5388](a1, a2);
  v21[2] = &v22;
  v21[3] = &v25;
  v21[4] = &v26;
  v21[5] = v23;
  specialized ParallelSum.chunkEvaluateSum(_:for:_:)(a2, a3, a4, a7, (unsigned int *)partial apply for specialized closure #1 in PINEMainCircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:), (uint64_t)v21, a8);
}

uint64_t specialized PINEMainCircuit.evaluateNormRangeCheck(vBits:uBits:inverseNumOfShares:for:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, unint64_t a6@<X7>, unint64_t *a7@<X8>, unint64_t a8)
{
  swift_unknownObjectRetain();
  uint64_t result = specialized FieldElement.init(inputVector:)(a1, a2, a3, &v31);
  if (!v9)
  {
    swift_unknownObjectRetain();
    uint64_t result = specialized FieldElement.init(inputVector:)(a4, a5, a6, &v30);
    unint64_t v18 = v31;
    if (!v30) {
      goto LABEL_11;
    }
    unint64_t v19 = 0xFFFEB00001 - v30;
    if (v30 > 0xFFFEB00001)
    {
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    unint64_t v20 = v31 - v19;
    if (v31 < v19)
    {
      if (v19 > 0xFFFEB00001)
      {
LABEL_36:
        __break(1u);
        return result;
      }
      unint64_t v18 = v31 + v30;
      if (!__CFADD__(v31, v30))
      {
LABEL_11:
        unint64_t v21 = *(void *)(v8 + 112);
        uint64_t v22 = (v21 * (unsigned __int128)a8) >> 64;
        uint64_t v23 = (0xCFFE47FFFEAFFFFFLL * v21 * a8 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
        BOOL v24 = __CFADD__(-(uint64_t)(v21 * a8), v21 * a8);
        unint64_t v25 = v23 + v22;
        if (__CFADD__(v23, v22))
        {
          if (!v24)
          {
LABEL_25:
            unint64_t v27 = v25 - 0xFFFEB00001;
            if (v25 >= 0xFFFEB00001) {
              goto LABEL_33;
            }
            unint64_t v28 = v18 - v27;
            if (v18 >= v27) {
              goto LABEL_29;
            }
            goto LABEL_27;
          }
        }
        else
        {
          if (v25 != -1)
          {
            unint64_t v26 = v25 + v24;
            unint64_t v27 = v26 - 0xFFFEB00001;
            if (v26 < 0xFFFEB00001) {
              unint64_t v27 = v26;
            }
            unint64_t v28 = v18 - v27;
            if (v18 >= v27) {
              goto LABEL_29;
            }
            goto LABEL_27;
          }
          if (!v24)
          {
            unint64_t v27 = 0xFFFFFF00014FFFFELL;
            unint64_t v28 = v18 + 0xFFFEB00002;
            if (v18 >= 0xFFFFFF00014FFFFELL)
            {
LABEL_29:
              *a7 = v28;
              return result;
            }
LABEL_27:
            unint64_t v29 = 0xFFFEB00001 - v27;
            if (v27 > 0xFFFEB00001)
            {
LABEL_34:
              __break(1u);
              goto LABEL_35;
            }
            unint64_t v28 = v18 + v29;
            if (__CFADD__(v18, v29))
            {
LABEL_35:
              __break(1u);
              goto LABEL_36;
            }
            goto LABEL_29;
          }
        }
        ++v25;
        goto LABEL_25;
      }
      __break(1u);
    }
    unint64_t v18 = v20;
    goto LABEL_11;
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;

  swift_unknownObjectRetain();
  uint64_t result = specialized FieldElement.init(inputVector:)(a1, a2, a3, &v31);
  if (!v9)
  {
    swift_unknownObjectRetain();
    uint64_t result = specialized FieldElement.init(inputVector:)(a4, a5, a6, &v30);
    unint64_t v18 = v31;
    if (!v30) {
      goto LABEL_11;
    }
    unint64_t v19 = 0xFFFFFFFF00000001 - v30;
    if (v30 > 0xFFFFFFFF00000001)
    {
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    unint64_t v20 = v31 - v19;
    if (v31 < v19)
    {
      unint64_t v20 = 0xFFFFFFFF00000001;
      if (v19 > 0xFFFFFFFF00000001)
      {
LABEL_37:
        __break(1u);
        return result;
      }
      unint64_t v18 = v31 + v30;
      if (!__CFADD__(v31, v30))
      {
LABEL_11:
        unint64_t v21 = *(void *)(v8 + 112);
        uint64_t v22 = (v21 * (unsigned __int128)a8) >> 64;
        uint64_t v23 = (0xFFFFFFFEFFFFFFFFLL * v21 * a8 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
        BOOL v24 = __CFADD__(-(uint64_t)(v21 * a8), v21 * a8);
        unint64_t v25 = v23 + v22;
        if (__CFADD__(v23, v22))
        {
          if (!v24)
          {
LABEL_25:
            unint64_t v28 = __CFADD__(v25, 0xFFFFFFFFLL);
            unint64_t v26 = v25 + 0xFFFFFFFFLL;
            if (v28) {
              goto LABEL_34;
            }
            unint64_t v27 = v18 - v26;
            if (v18 >= v26) {
              goto LABEL_30;
            }
            goto LABEL_27;
          }
        }
        else
        {
          if (v25 != -1)
          {
            unint64_t v26 = v25 + v24;
            if (v26 >= 0xFFFFFFFF00000001) {
              v26 += 0xFFFFFFFFLL;
            }
            unint64_t v27 = v18 - v26;
            if (v18 >= v26) {
              goto LABEL_30;
            }
            goto LABEL_27;
          }
          if (!v24)
          {
            unint64_t v26 = 4294967294;
            unint64_t v27 = v18 - 4294967294u;
            if (v18 >= 0xFFFFFFFE)
            {
LABEL_30:
              *a7 = v27;
              return result;
            }
LABEL_27:
            unint64_t v28 = v26 <= 0xFFFFFFFF00000001;
            unint64_t v29 = 0xFFFFFFFF00000001 - v26;
            if (!v28) {
              goto LABEL_35;
            }
            unint64_t v27 = v18 + v29;
            if (__CFADD__(v18, v29))
            {
LABEL_36:
              __break(1u);
              goto LABEL_37;
            }
            goto LABEL_30;
          }
        }
        ++v25;
        goto LABEL_25;
      }
      __break(1u);
    }
    unint64_t v18 = v20;
    goto LABEL_11;
  }
  return result;
}

uint64_t specialized PINEMainCircuit.evaluateNormRangeCheck(vBits:uBits:inverseNumOfShares:for:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, unint64_t a6@<X7>, _DWORD *a7@<X8>, unsigned int a8)
{
  swift_unknownObjectRetain();
  uint64_t result = specialized FieldElement.init(inputVector:)(a1, a2, a3, &v28);
  if (!v9)
  {
    swift_unknownObjectRetain();
    uint64_t result = specialized FieldElement.init(inputVector:)(a4, a5, a6, &v27);
    unsigned int v18 = v28;
    if (!v27) {
      goto LABEL_11;
    }
    unsigned int v19 = -1048575 - v27;
    if (v27 > 0xFFF00001)
    {
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    int v20 = v28 - v19;
    if (v28 < v19)
    {
      int v20 = -1048575;
      if (v19 > 0xFFF00001)
      {
LABEL_27:
        __break(1u);
        return result;
      }
      unsigned int v18 = v28 + v27;
      if (!__CFADD__(v28, v27))
      {
LABEL_11:
        unint64_t v21 = *(unsigned int *)(v8 + 112) * (unint64_t)a8;
        uint64_t v22 = 4293918721 * (-1048577 * v21);
        BOOL v23 = __CFADD__(v22, v21);
        unint64_t v24 = (v22 + v21) >> 32;
        if (v23)
        {
          BOOL v23 = __CFADD__(v24, 0xFFFFF);
          LODWORD(v24) = v24 + 0xFFFFF;
          if (v23) {
            goto LABEL_24;
          }
          int v25 = v18 - v24;
          if (v18 >= v24) {
            goto LABEL_22;
          }
        }
        else
        {
          if (v24 >= 0xFFF00001) {
            LODWORD(v24) = v24 + 0xFFFFF;
          }
          int v25 = v18 - v24;
          if (v18 >= v24)
          {
LABEL_22:
            *a7 = v25;
            return result;
          }
        }
        BOOL v23 = v24 <= 0xFFF00001;
        int v26 = -1048575 - v24;
        if (!v23) {
          goto LABEL_25;
        }
        int v25 = v18 + v26;
        if (__CFADD__(v18, v26))
        {
LABEL_26:
          __break(1u);
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      __break(1u);
    }
    unsigned int v18 = v20;
    goto LABEL_11;
  }
  return result;
}

void specialized PINEMainCircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:)(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  Swift::String v42 = a2;
  Swift::String v43 = (void *)a1;
  uint64_t v57 = a11;
  unint64_t v53 = a12;
  unint64_t v19 = *(void *)(v12 + 144);
  long long v20 = *(_OWORD *)(v12 + 112);
  v50[6] = *(_OWORD *)(v12 + 96);
  v50[7] = v20;
  long long v51 = *(_OWORD *)(v12 + 128);
  unint64_t v52 = v19;
  long long v21 = *(_OWORD *)(v12 + 48);
  v50[2] = *(_OWORD *)(v12 + 32);
  v50[3] = v21;
  long long v22 = *(_OWORD *)(v12 + 80);
  v50[4] = *(_OWORD *)(v12 + 64);
  v50[5] = v22;
  long long v23 = *(_OWORD *)(v12 + 16);
  v50[0] = *(_OWORD *)v12;
  v50[1] = v23;
  if (one-time initialization token for one != -1)
  {
    v41[15] = v13;
    a1 = swift_once();
  }
  uint64_t v48 = 0;
  uint64_t v49 = static Field40.one;
  unint64_t v24 = static Field40.one - v19;
  if (static Field40.one < v19)
  {
    unint64_t v25 = 0xFFFEB00001 - v19;
    if (v19 > 0xFFFEB00001)
    {
      __break(1u);
    }
    else
    {
      BOOL v26 = __CFADD__(static Field40.one, v25);
      unint64_t v24 = static Field40.one + v25;
      if (!v26) {
        goto LABEL_6;
      }
    }
    __break(1u);
    goto LABEL_36;
  }
LABEL_6:
  long long v27 = *(_OWORD *)(v12 + 24);
  long long v54 = *(_OWORD *)(v12 + 8);
  long long v55 = v27;
  long long v56 = *(_OWORD *)(v12 + 40);
  unint64_t v46 = 0;
  unint64_t v47 = v24;
  MEMORY[0x270FA5388](a1, a2);
  v41[2] = a3;
  v41[3] = a4;
  v41[4] = a5;
  v41[5] = a6;
  v41[6] = &v48;
  v41[7] = v50;
  v41[8] = &v47;
  v41[9] = &v53;
  v41[10] = &v49;
  v41[11] = &v46;
  v41[12] = &v57;
  specialized ParallelSum.chunkEvaluateSum(_:for:_:)(a8, v28, v29, v30, (unint64_t *)partial apply for specialized closure #1 in PINEMainCircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:), (uint64_t)v41, &v45);
  if (v13) {
    return;
  }
  unint64_t v31 = v46;
  *Swift::String v43 = v45;
  unint64_t v32 = *((void *)&v51 + 1);
  if ((*((void *)&v51 + 1) & 0x8000000000000000) != 0)
  {
    unint64_t v33 = -*((void *)&v51 + 1);
    if (__OFSUB__(0, *((void *)&v51 + 1)))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if ((v33 & 0x8000000000000000) != 0)
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    unint64_t v32 = *((void *)&v51 + 1) + 0xFFFEB00001;
    if (v33 > 0xFFFEB00001)
    {
LABEL_41:
      __break(1u);
      return;
    }
  }
  specialized FieldElement.init(_:)(v32, &v44);
  uint64_t v34 = (v53 * (unsigned __int128)v44) >> 64;
  uint64_t v35 = (0xCFFE47FFFEAFFFFFLL * v53 * v44 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
  BOOL v36 = __CFADD__(-(uint64_t)(v53 * v44), v53 * v44);
  uint64_t v37 = v35 + v34;
  if (__CFADD__(v35, v34))
  {
    if (!v36)
    {
LABEL_25:
      BOOL v26 = __CFADD__(v37, 0xFFFFFF00014FFFFFLL);
      unint64_t v38 = v37 - 0xFFFEB00001;
      if (!v26)
      {
        unint64_t v39 = v31 - v38;
        if (v31 >= v38) {
          goto LABEL_30;
        }
        goto LABEL_27;
      }
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
LABEL_24:
    ++v37;
    goto LABEL_25;
  }
  if (v37 == -1)
  {
    if (!v36)
    {
      unint64_t v38 = 0xFFFFFF00014FFFFELL;
      unint64_t v39 = v31 + 0xFFFEB00002;
      if (v31 >= 0xFFFFFF00014FFFFELL) {
        goto LABEL_30;
      }
      goto LABEL_27;
    }
    goto LABEL_24;
  }
  unint64_t v38 = v37 + v36;
  if (v38 >= 0xFFFEB00001) {
    v38 -= 0xFFFEB00001;
  }
  unint64_t v39 = v31 - v38;
  if (v31 >= v38) {
    goto LABEL_30;
  }
LABEL_27:
  BOOL v26 = v38 <= 0xFFFEB00001;
  unint64_t v40 = 0xFFFEB00001 - v38;
  if (!v26) {
    goto LABEL_37;
  }
  unint64_t v39 = v31 + v40;
  if (__CFADD__(v31, v40))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
LABEL_30:
  *Swift::String v42 = v39;
}

{
  uint64_t v12;
  uint64_t v13;
  unint64_t v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  long long v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void v40[16];
  unint64_t *v41;
  void *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD v49[8];
  long long v50;
  unint64_t v51;
  unint64_t v52;
  long long v53;
  long long v54;
  long long v55;
  uint64_t v56;

  Swift::String v41 = a2;
  Swift::String v42 = (void *)a1;
  long long v56 = a11;
  unint64_t v52 = a12;
  unint64_t v19 = *(void *)(v12 + 144);
  long long v20 = *(_OWORD *)(v12 + 112);
  v49[6] = *(_OWORD *)(v12 + 96);
  v49[7] = v20;
  Swift::String v50 = *(_OWORD *)(v12 + 128);
  long long v51 = v19;
  long long v21 = *(_OWORD *)(v12 + 48);
  v49[2] = *(_OWORD *)(v12 + 32);
  v49[3] = v21;
  long long v22 = *(_OWORD *)(v12 + 80);
  v49[4] = *(_OWORD *)(v12 + 64);
  v49[5] = v22;
  long long v23 = *(_OWORD *)(v12 + 16);
  v49[0] = *(_OWORD *)v12;
  v49[1] = v23;
  if (one-time initialization token for one != -1)
  {
    v40[15] = v13;
    a1 = swift_once();
  }
  unint64_t v47 = 0;
  uint64_t v48 = static Field64.one;
  unint64_t v24 = static Field64.one - v19;
  if (static Field64.one < v19)
  {
    unint64_t v25 = 0xFFFFFFFF00000001 - v19;
    if (v19 > 0xFFFFFFFF00000001)
    {
      __break(1u);
    }
    else
    {
      BOOL v26 = __CFADD__(static Field64.one, v25);
      unint64_t v24 = static Field64.one + v25;
      if (!v26) {
        goto LABEL_6;
      }
    }
    __break(1u);
    goto LABEL_36;
  }
LABEL_6:
  long long v27 = *(_OWORD *)(v12 + 24);
  unint64_t v53 = *(_OWORD *)(v12 + 8);
  long long v54 = v27;
  long long v55 = *(_OWORD *)(v12 + 40);
  unint64_t v45 = 0;
  unint64_t v46 = v24;
  MEMORY[0x270FA5388](a1, a2);
  v40[2] = a3;
  v40[3] = a4;
  v40[4] = a5;
  v40[5] = a6;
  v40[6] = &v47;
  v40[7] = v49;
  v40[8] = &v46;
  v40[9] = &v52;
  v40[10] = &v48;
  v40[11] = &v45;
  v40[12] = &v56;
  specialized ParallelSum.chunkEvaluateSum(_:for:_:)(a8, v28, v29, v30, (unint64_t *)partial apply for specialized closure #1 in PINEMainCircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:), (uint64_t)v40, &v44);
  if (v13) {
    return;
  }
  unint64_t v31 = v45;
  *Swift::String v42 = v44;
  unint64_t v32 = *((void *)&v50 + 1);
  if ((*((void *)&v50 + 1) & 0x8000000000000000) != 0)
  {
    if (__OFSUB__(0, *((void *)&v50 + 1)))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if ((-*((void *)&v50 + 1) & 0x8000000000000000) != 0)
    {
LABEL_40:
      __break(1u);
      return;
    }
    unint64_t v32 = *((void *)&v50 + 1) - 0xFFFFFFFFLL;
  }
  specialized FieldElement.init(_:)(v32, &v43);
  unint64_t v33 = (v52 * (unsigned __int128)v43) >> 64;
  uint64_t v34 = (0xFFFFFFFEFFFFFFFFLL * v52 * v43 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  uint64_t v35 = __CFADD__(-(uint64_t)(v52 * v43), v52 * v43);
  BOOL v36 = v34 + v33;
  if (__CFADD__(v34, v33))
  {
    if (!v35)
    {
LABEL_25:
      BOOL v26 = __CFADD__(v36, 0xFFFFFFFFLL);
      uint64_t v37 = v36 + 0xFFFFFFFFLL;
      if (!v26)
      {
        unint64_t v38 = v31 - v37;
        if (v31 >= v37) {
          goto LABEL_30;
        }
        goto LABEL_27;
      }
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
LABEL_24:
    ++v36;
    goto LABEL_25;
  }
  if (v36 == -1)
  {
    if (!v35)
    {
      uint64_t v37 = 4294967294;
      unint64_t v38 = v31 - 4294967294u;
      if (v31 >= 0xFFFFFFFE) {
        goto LABEL_30;
      }
      goto LABEL_27;
    }
    goto LABEL_24;
  }
  uint64_t v37 = v36 + v35;
  if (v37 >= 0xFFFFFFFF00000001) {
    v37 += 0xFFFFFFFFLL;
  }
  unint64_t v38 = v31 - v37;
  if (v31 >= v37) {
    goto LABEL_30;
  }
LABEL_27:
  BOOL v26 = v37 <= 0xFFFFFFFF00000001;
  unint64_t v39 = 0xFFFFFFFF00000001 - v37;
  if (!v26) {
    goto LABEL_37;
  }
  unint64_t v38 = v31 + v39;
  if (__CFADD__(v31, v39))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
LABEL_30:
  uint64_t *v41 = v38;
}

void specialized PINEMainCircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:)(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned int a12)
{
  Swift::String v41 = a2;
  Swift::String v42 = (_DWORD *)a1;
  unsigned int v55 = a12;
  int v56 = a11;
  unsigned int v19 = *(_DWORD *)(v12 + 144);
  long long v20 = *(_OWORD *)(v12 + 112);
  v49[6] = *(_OWORD *)(v12 + 96);
  v49[7] = v20;
  long long v50 = *(_OWORD *)(v12 + 128);
  unsigned int v51 = v19;
  long long v21 = *(_OWORD *)(v12 + 48);
  v49[2] = *(_OWORD *)(v12 + 32);
  long long v22 = *(_OWORD *)(v12 + 64);
  long long v23 = *(_OWORD *)(v12 + 80);
  v49[3] = v21;
  v49[4] = v22;
  v49[5] = v23;
  long long v24 = *(_OWORD *)(v12 + 16);
  v49[0] = *(_OWORD *)v12;
  v49[1] = v24;
  if (one-time initialization token for one != -1) {
    a1 = swift_once();
  }
  int v48 = static Field32.one;
  uint64_t v47 = 0;
  unsigned int v25 = static Field32.one - v19;
  if (static Field32.one < v19)
  {
    unsigned int v26 = -1048575 - v19;
    if (v19 > 0xFFF00001)
    {
      __break(1u);
    }
    else
    {
      BOOL v27 = __CFADD__(static Field32.one, v26);
      unsigned int v25 = static Field32.one + v26;
      if (!v27) {
        goto LABEL_6;
      }
    }
    __break(1u);
    goto LABEL_29;
  }
LABEL_6:
  long long v28 = *(_OWORD *)(v12 + 24);
  long long v52 = *(_OWORD *)(v12 + 8);
  long long v53 = v28;
  long long v54 = *(_OWORD *)(v12 + 40);
  unsigned int v46 = v25;
  unsigned int v45 = 0;
  MEMORY[0x270FA5388](a1, a2);
  v40[2] = a3;
  v40[3] = a4;
  v40[4] = a5;
  v40[5] = a6;
  v40[6] = &v47;
  v40[7] = v49;
  v40[8] = &v46;
  v40[9] = &v55;
  v40[10] = &v48;
  v40[11] = &v45;
  v40[12] = &v56;
  specialized ParallelSum.chunkEvaluateSum(_:for:_:)(a8, v29, v30, v31, (unsigned int *)partial apply for specialized closure #1 in PINEMainCircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:), (uint64_t)v40, &v44);
  if (v13) {
    return;
  }
  *Swift::String v42 = v44;
  unsigned int v32 = v45;
  uint64_t v33 = *((void *)&v50 + 1);
  if ((*((void *)&v50 + 1) & 0x8000000000000000) == 0)
  {
    if (!HIDWORD(*((void *)&v50 + 1))) {
      goto LABEL_14;
    }
    __break(1u);
  }
  unint64_t v34 = -v33;
  if (__OFSUB__(0, v33))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if ((v34 & 0x8000000000000000) != 0)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (HIDWORD(v34))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v33 = (v33 - 0xFFFFF);
  if (v34 > 0xFFF00001)
  {
LABEL_35:
    __break(1u);
    return;
  }
LABEL_14:
  specialized FieldElement.init(_:)(v33, &v43);
  unint64_t v35 = v55 * (unint64_t)v43;
  uint64_t v36 = 4293918721 * (-1048577 * v35);
  BOOL v27 = __CFADD__(v36, v35);
  unint64_t v37 = (v36 + v35) >> 32;
  if (!v27)
  {
    if (v37 >= 0xFFF00001) {
      LODWORD(v37) = v37 + 0xFFFFF;
    }
    int v38 = v32 - v37;
    if (v32 < v37) {
      goto LABEL_22;
    }
    goto LABEL_25;
  }
  BOOL v27 = __CFADD__(v37, 0xFFFFF);
  LODWORD(v37) = v37 + 0xFFFFF;
  if (v27)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  int v38 = v32 - v37;
  if (v32 < v37)
  {
LABEL_22:
    BOOL v27 = v37 <= 0xFFF00001;
    int v39 = -1048575 - v37;
    if (!v27) {
      goto LABEL_30;
    }
    int v38 = v32 + v39;
    if (__CFADD__(v32, v39))
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
  }
LABEL_25:
  _DWORD *v41 = v38;
}

uint64_t specialized SumVectorType.evaluate(measurement:jointRand:numOfShares:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  unint64_t v7 = *(void *)(a1 + 16);
  unint64_t v8 = *(void *)v5;
  if (v7 != *(void *)v5)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    *(void *)&long long v55 = 0xD00000000000001BLL;
    *((void *)&v55 + 1) = 0x8000000260BFEB20;
    unint64_t v59 = v7;
LABEL_12:
    v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._countAndFlagsBits = 540877088;
    v25._object = (void *)0xE400000000000000;
    String.append(_:)(v25);
    unint64_t v59 = v8;
    v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v26);
LABEL_13:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_OWORD *)uint64_t v27 = v55;
    *(unsigned char *)(v27 + 16) = 2;
    return swift_willThrow();
  }
  uint64_t v9 = v5;
  unint64_t v11 = *(void *)(a2 + 16);
  unint64_t v8 = *(void *)(v5 + 16);
  if (v11 != v8)
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    *(void *)&long long v55 = 0xD000000000000019;
    *((void *)&v55 + 1) = 0x8000000260BFEB80;
    unint64_t v59 = v11;
    goto LABEL_12;
  }
  uint64_t v52 = v6;
  unint64_t v53 = v11;
  uint64_t v50 = a4;
  unsigned int v51 = a5;
  unint64_t v14 = *(void *)(a4 + 16);
  long long v15 = *(_OWORD *)(v5 + 80);
  long long v57 = *(_OWORD *)(v5 + 64);
  long long v58 = v15;
  long long v56 = *(_OWORD *)(v5 + 48);
  uint64_t v16 = *((void *)&v56 + 1);
  uint64_t v54 = v56;
  uint64_t v17 = v15;
  specialized Gadget.wirePolynomialLength.getter();
  specialized Gadget.gadgetPolynomialLength.getter();
  if (v14 != 1)
  {
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    *(void *)&long long v55 = 0x2064696C61766E49;
    *((void *)&v55 + 1) = 0xEF203A746E756F63;
    unint64_t v59 = v14;
    v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = 540877088;
    v29._object = (void *)0xE400000000000000;
    String.append(_:)(v29);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_260BF9FF0;
    uint64_t v31 = specialized Gadget.wirePolynomialLength.getter();
    uint64_t v32 = specialized Gadget.gadgetPolynomialLength.getter();
    *(void *)(v30 + 32) = v54;
    *(void *)(v30 + 40) = v16;
    *(void *)(v30 + 48) = v17;
    *(void *)(v30 + 56) = v31;
    *(void *)(v30 + 64) = v32;
    v33._countAndFlagsBits = MEMORY[0x261224130](v30, &type metadata for GadgetParameters);
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  if ((a3 & 0x8000000000000000) != 0) {
    goto LABEL_47;
  }
  specialized FieldElement.init(_:)(a3, &v59);
  unint64_t v18 = v59;
  if (!v59) {
    goto LABEL_49;
  }
  uint64_t v19 = protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(0xFFFFFFFEFFFFFFFFLL, &v55);
  if (v55 == 0)
  {
    uint64_t v21 = 0xFFFFFFFFLL;
LABEL_8:
    *(void *)&long long v55 = v21;
    if (!v53) {
      goto LABEL_48;
    }
    unint64_t v59 = *(void *)(a2 + 32);
    unint64_t v22 = *(void *)(v50 + 32);
    MEMORY[0x270FA5388](v19, v20);
    v49[2] = &v59;
    v49[3] = &v55;
    v49[4] = a2;
    v49[5] = v9;
    swift_bridgeObjectRetain();
    outlined copy of GadgetEvaluation<Field32>(v22);
    specialized ParallelSum.chunkEvaluateSum(_:for:_:)(a1 + 32, 0, (2 * v7) | 1, v22, (unint64_t *)partial apply for specialized closure #1 in SumVectorType.evaluate(measurement:jointRand:numOfShares:for:), (uint64_t)v49, v51);
    outlined consume of GadgetEvaluation<Field32>(v22);
    return swift_bridgeObjectRelease();
  }
  unint64_t v34 = 0xFFFFFFFEFFFFFFFFLL;
  uint64_t v21 = 0xFFFFFFFFLL;
  while (1)
  {
    protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(v34 & 1, &v55);
    unint64_t v36 = *((void *)&v55 + 1) | v55;
    if (v55 == 0) {
      goto LABEL_38;
    }
    uint64_t v37 = (v18 * (unsigned __int128)(unint64_t)v21) >> 64;
    uint64_t v38 = (0xFFFFFFFEFFFFFFFFLL * v18 * v21 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
    BOOL v39 = __CFADD__(-(uint64_t)(v18 * v21), v18 * v21);
    BOOL v40 = __CFADD__(v38, v37);
    uint64_t v41 = v38 + v37;
    if (v40)
    {
      unint64_t v42 = v41 + v39;
    }
    else
    {
      if (v41 != -1)
      {
        unint64_t v36 = 0;
        unint64_t v43 = v41 + v39;
        if (v43 >= 0xFFFFFFFF00000001) {
          uint64_t v21 = v43 + 0xFFFFFFFF;
        }
        else {
          uint64_t v21 = v43;
        }
        goto LABEL_38;
      }
      unint64_t v42 = 0;
      if (!v39)
      {
        unint64_t v36 = 0;
        uint64_t v21 = 4294967294;
        goto LABEL_38;
      }
    }
    uint64_t v21 = v42 + 0xFFFFFFFF;
    if (v42 >= 0xFFFFFFFF00000001) {
      goto LABEL_46;
    }
    unint64_t v36 = 0;
LABEL_38:
    uint64_t v44 = (__PAIR128__(v36, v18) * __PAIR128__(v36, v18)) >> 64;
    uint64_t v45 = (0xFFFFFFFEFFFFFFFFLL * v18 * v18 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
    BOOL v46 = __CFADD__(-(uint64_t)(v18 * v18), v18 * v18);
    BOOL v40 = __CFADD__(v45, v44);
    uint64_t v47 = v45 + v44;
    if (!v40)
    {
      if (v47 == -1)
      {
        if (v46) {
          unint64_t v18 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v18 = 4294967294;
        }
      }
      else
      {
        unint64_t v35 = v47 + v46;
        if (v35 >= 0xFFFFFFFF00000001) {
          unint64_t v18 = v35 + 0xFFFFFFFF;
        }
        else {
          unint64_t v18 = v35;
        }
      }
      goto LABEL_20;
    }
    unint64_t v48 = v47 + v46;
    unint64_t v18 = v48 + 0xFFFFFFFF;
    if (v48 >= 0xFFFFFFFF00000001) {
      break;
    }
LABEL_20:
    v34 >>= 1;
    uint64_t v19 = protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128(v34, &v55);
    if (v55 == 0) {
      goto LABEL_8;
    }
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized QueryGadget.init<A, B>(gadgetPolynomialCoefficients:proveRand:queryRand:parameters:)(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, unint64_t a9, unint64_t a10)
{
  unint64_t v17 = a10;
  *(void *)(v10 + 48) = 0;
  uint64_t v43 = *(void *)(a10 + 24);
  uint64_t v18 = specialized FixedWidthInteger.nextPowerOfTwo.getter(*(void *)(a10 + 32));
  long long v19 = *(_OWORD *)(a10 + 16);
  *(_OWORD *)(v10 + 56) = *(_OWORD *)a10;
  *(_OWORD *)(v10 + 72) = v19;
  *(void *)(v10 + 88) = *(void *)(a10 + 32);
  unint64_t v20 = *(void *)(a10 + 16);
  uint64_t v21 = v20 + 1;
  if (__OFADD__(v20, 1))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v21 < 0)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  int64_t v11 = v18;
  unint64_t v44 = a1;
  unint64_t v45 = a4;
  if (v20 == -1)
  {
    unint64_t v22 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    unint64_t v22 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    v22[2] = v21;
    bzero(v22 + 4, 8 * v20 + 8);
  }
  long long v23 = specialized Array.init(repeating:count:)(v22, *(void *)a10, &demangling cache variable for type metadata for [Field40]);
  *(void *)(v10 + 16) = v23;
  Swift::String v24 = (void **)(v10 + 16);
  uint64_t v21 = v23[2];
  if (v21)
  {
    int64_t v25 = a8 >> 1;
    swift_beginAccess();
    unint64_t v20 = 0;
    if (a7 <= v25) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = a7;
    }
    unint64_t v17 = v26 - a7;
    uint64_t v27 = a6 + 8 * a7;
    while (v17 != v20)
    {
      uint64_t v28 = *(void *)(v27 + 8 * v20);
      Swift::String v29 = *v24;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      void *v24 = v29;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        Swift::String v29 = specialized _ArrayBuffer._consumeAndCreateNew()(v29);
        void *v24 = v29;
      }
      if (v20 >= v29[2]) {
        goto LABEL_45;
      }
      uint64_t v31 = &v29[v20];
      uint64_t v32 = (char *)v31[4];
      char v33 = swift_isUniquelyReferenced_nonNull_native();
      v31[4] = v32;
      if (v33)
      {
        if (!*((void *)v32 + 2)) {
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v32);
        v31[4] = v32;
        if (!*((void *)v32 + 2))
        {
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
      }
      ++v20;
      *((void *)v32 + 4) = v28;
      if (v21 == v20) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
LABEL_21:
  unint64_t v17 = v45;
  if (v45)
  {
    type metadata accessor for __ContiguousArrayStorageBase();
    unint64_t v20 = v44;
    swift_unknownObjectRetain_n();
    uint64_t v35 = swift_dynamicCastClass();
    uint64_t v21 = a3;
    if (!v35)
    {
      swift_unknownObjectRelease();
      uint64_t v35 = MEMORY[0x263F8EE78];
    }
    uint64_t v36 = *(void *)(v35 + 16);
    swift_release();
    if (__OFSUB__(v45 >> 1, a3)) {
      goto LABEL_52;
    }
    if (v36 != (v45 >> 1) - a3) {
      goto LABEL_53;
    }
    unint64_t v17 = swift_dynamicCastClass();
    if (!v17)
    {
      swift_unknownObjectRelease();
      unint64_t v17 = MEMORY[0x263F8EE78];
    }
    goto LABEL_30;
  }
  unint64_t v20 = v44;
  swift_unknownObjectRetain();
  uint64_t v21 = a3;
  while (1)
  {
    specialized _copyCollectionToContiguousArray<A>(_:)(v20, a2, v21, v17);
    unint64_t v17 = v34;
LABEL_30:
    swift_unknownObjectRelease();
    if (!*(void *)(v17 + 16))
    {
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    if (v11 < 0) {
      goto LABEL_49;
    }
    if (v11)
    {
      uint64_t v37 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v37 + 16) = v11;
      bzero((void *)(v37 + 32), 8 * v11);
    }
    else
    {
      uint64_t v37 = MEMORY[0x263F8EE78];
    }
    uint64_t v47 = (char *)v37;
    uint64_t v38 = swift_bridgeObjectRetain();
    specialized discreteFourierTransform<A, B, C>(input:size:output:)(v38, v11, &v47);
    swift_unknownObjectRelease();
    swift_release();
    *(void *)(v10 + 24) = v47;
    swift_unknownObjectRelease();
    if (!v43) {
      goto LABEL_50;
    }
    *(void *)(v10 + 40) = v11 / v43;
    uint64_t v39 = *(void *)(v17 + 16);
    if (v39) {
      break;
    }
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    swift_unknownObjectRelease();
  }
  while (!*(void *)(v17 + 8 * v39 + 24))
  {
    if ((unint64_t)v39-- <= 1) {
      goto LABEL_42;
    }
  }
  if (v39 > 0)
  {
    specialized evaluateUsingHorner<A, B>(_:atInput:)(v17, a9, (unint64_t *)&v47);
    swift_release();
    BOOL v40 = v47;
    goto LABEL_43;
  }
LABEL_42:
  swift_release();
  BOOL v40 = 0;
LABEL_43:
  *(void *)(v10 + 32) = v40;
  return v10;
}

uint64_t specialized QueryGadget.init<A, B>(gadgetPolynomialCoefficients:proveRand:queryRand:parameters:)(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, unsigned int a9, uint64_t a10)
{
  uint64_t v17 = a10;
  *(void *)(v10 + 48) = 0;
  uint64_t v43 = *(void *)(a10 + 24);
  uint64_t v18 = specialized FixedWidthInteger.nextPowerOfTwo.getter(*(void *)(a10 + 32));
  long long v19 = *(_OWORD *)(a10 + 16);
  *(_OWORD *)(v10 + 56) = *(_OWORD *)a10;
  *(_OWORD *)(v10 + 72) = v19;
  *(void *)(v10 + 88) = *(void *)(a10 + 32);
  unint64_t v20 = *(void *)(a10 + 16);
  uint64_t v21 = v20 + 1;
  if (__OFADD__(v20, 1))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v21 < 0)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  int64_t v11 = v18;
  unint64_t v44 = a1;
  unint64_t v45 = a4;
  if (v20 == -1)
  {
    unint64_t v22 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    unint64_t v22 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    v22[2] = v21;
    bzero(v22 + 4, 4 * v20 + 4);
  }
  long long v23 = specialized Array.init(repeating:count:)(v22, *(void *)a10, &demangling cache variable for type metadata for [Field32]);
  *(void *)(v10 + 16) = v23;
  Swift::String v24 = (void **)(v10 + 16);
  uint64_t v21 = v23[2];
  if (v21)
  {
    int64_t v25 = a8 >> 1;
    swift_beginAccess();
    unint64_t v20 = 0;
    if (a7 <= v25) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = a7;
    }
    uint64_t v17 = v26 - a7;
    uint64_t v27 = a6 + 4 * a7;
    while (v17 != v20)
    {
      int v28 = *(_DWORD *)(v27 + 4 * v20);
      Swift::String v29 = *v24;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      void *v24 = v29;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        Swift::String v29 = specialized _ArrayBuffer._consumeAndCreateNew()(v29);
        void *v24 = v29;
      }
      if (v20 >= v29[2]) {
        goto LABEL_45;
      }
      uint64_t v31 = &v29[v20];
      uint64_t v32 = (char *)v31[4];
      char v33 = swift_isUniquelyReferenced_nonNull_native();
      v31[4] = v32;
      if (v33)
      {
        if (!*((void *)v32 + 2)) {
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v32);
        v31[4] = v32;
        if (!*((void *)v32 + 2))
        {
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
      }
      ++v20;
      *((_DWORD *)v32 + 8) = v28;
      if (v21 == v20) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
LABEL_21:
  uint64_t v17 = v45;
  if (v45)
  {
    type metadata accessor for __ContiguousArrayStorageBase();
    unint64_t v20 = v44;
    swift_unknownObjectRetain_n();
    uint64_t v35 = swift_dynamicCastClass();
    uint64_t v21 = a3;
    if (!v35)
    {
      swift_unknownObjectRelease();
      uint64_t v35 = MEMORY[0x263F8EE78];
    }
    uint64_t v36 = *(void *)(v35 + 16);
    swift_release();
    if (__OFSUB__(v45 >> 1, a3)) {
      goto LABEL_52;
    }
    if (v36 != (v45 >> 1) - a3) {
      goto LABEL_53;
    }
    uint64_t v17 = swift_dynamicCastClass();
    if (!v17)
    {
      swift_unknownObjectRelease();
      uint64_t v17 = MEMORY[0x263F8EE78];
    }
    goto LABEL_30;
  }
  unint64_t v20 = v44;
  swift_unknownObjectRetain();
  uint64_t v21 = a3;
  while (1)
  {
    specialized _copyCollectionToContiguousArray<A>(_:)(v20, a2, v21, v17);
    uint64_t v17 = v34;
LABEL_30:
    swift_unknownObjectRelease();
    if (!*(void *)(v17 + 16))
    {
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    if (v11 < 0) {
      goto LABEL_49;
    }
    if (v11)
    {
      uint64_t v37 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v37 + 16) = v11;
      bzero((void *)(v37 + 32), 4 * v11);
    }
    else
    {
      uint64_t v37 = MEMORY[0x263F8EE78];
    }
    uint64_t v47 = (char *)v37;
    uint64_t v38 = swift_bridgeObjectRetain();
    specialized discreteFourierTransform<A, B, C>(input:size:output:)(v38, v11, &v47);
    swift_unknownObjectRelease();
    swift_release();
    *(void *)(v10 + 24) = v47;
    swift_unknownObjectRelease();
    if (!v43) {
      goto LABEL_50;
    }
    *(void *)(v10 + 40) = v11 / v43;
    uint64_t v39 = *(void *)(v17 + 16);
    if (v39) {
      break;
    }
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    swift_unknownObjectRelease();
  }
  while (!*(_DWORD *)(v17 + 4 * v39 + 28))
  {
    if ((unint64_t)v39-- <= 1) {
      goto LABEL_42;
    }
  }
  if (v39 > 0)
  {
    specialized evaluateUsingHorner<A, B>(_:atInput:)(v17, a9, &v47);
    swift_release();
    int v40 = (int)v47;
    goto LABEL_43;
  }
LABEL_42:
  swift_release();
  int v40 = 0;
LABEL_43:
  *(_DWORD *)(v10 + 32) = v40;
  return v10;
}

uint64_t specialized QueryGadget.init<A, B>(gadgetPolynomialCoefficients:proveRand:queryRand:parameters:)(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, unint64_t a9, uint64_t a10)
{
  uint64_t v17 = a10;
  *(void *)(v10 + 48) = 0;
  uint64_t v43 = *(void *)(a10 + 24);
  uint64_t v18 = specialized FixedWidthInteger.nextPowerOfTwo.getter(*(void *)(a10 + 32));
  long long v19 = *(_OWORD *)(a10 + 16);
  *(_OWORD *)(v10 + 56) = *(_OWORD *)a10;
  *(_OWORD *)(v10 + 72) = v19;
  *(void *)(v10 + 88) = *(void *)(a10 + 32);
  unint64_t v20 = *(void *)(a10 + 16);
  uint64_t v21 = v20 + 1;
  if (__OFADD__(v20, 1))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v21 < 0)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  int64_t v11 = v18;
  unint64_t v44 = a1;
  unint64_t v45 = a4;
  if (v20 == -1)
  {
    unint64_t v22 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    unint64_t v22 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    v22[2] = v21;
    bzero(v22 + 4, 8 * v20 + 8);
  }
  long long v23 = specialized Array.init(repeating:count:)(v22, *(void *)a10, &demangling cache variable for type metadata for [Field64]);
  *(void *)(v10 + 16) = v23;
  Swift::String v24 = (void **)(v10 + 16);
  uint64_t v21 = v23[2];
  if (v21)
  {
    int64_t v25 = a8 >> 1;
    swift_beginAccess();
    unint64_t v20 = 0;
    if (a7 <= v25) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = a7;
    }
    uint64_t v17 = v26 - a7;
    uint64_t v27 = a6 + 8 * a7;
    while (v17 != v20)
    {
      uint64_t v28 = *(void *)(v27 + 8 * v20);
      Swift::String v29 = *v24;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      void *v24 = v29;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        Swift::String v29 = specialized _ArrayBuffer._consumeAndCreateNew()(v29);
        void *v24 = v29;
      }
      if (v20 >= v29[2]) {
        goto LABEL_45;
      }
      uint64_t v31 = &v29[v20];
      uint64_t v32 = (char *)v31[4];
      char v33 = swift_isUniquelyReferenced_nonNull_native();
      v31[4] = v32;
      if (v33)
      {
        if (!*((void *)v32 + 2)) {
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v32);
        v31[4] = v32;
        if (!*((void *)v32 + 2))
        {
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
      }
      ++v20;
      *((void *)v32 + 4) = v28;
      if (v21 == v20) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
LABEL_21:
  uint64_t v17 = v45;
  if (v45)
  {
    type metadata accessor for __ContiguousArrayStorageBase();
    unint64_t v20 = v44;
    swift_unknownObjectRetain_n();
    uint64_t v35 = swift_dynamicCastClass();
    uint64_t v21 = a3;
    if (!v35)
    {
      swift_unknownObjectRelease();
      uint64_t v35 = MEMORY[0x263F8EE78];
    }
    uint64_t v36 = *(void *)(v35 + 16);
    swift_release();
    if (__OFSUB__(v45 >> 1, a3)) {
      goto LABEL_52;
    }
    if (v36 != (v45 >> 1) - a3) {
      goto LABEL_53;
    }
    uint64_t v17 = swift_dynamicCastClass();
    if (!v17)
    {
      swift_unknownObjectRelease();
      uint64_t v17 = MEMORY[0x263F8EE78];
    }
    goto LABEL_30;
  }
  unint64_t v20 = v44;
  swift_unknownObjectRetain();
  uint64_t v21 = a3;
  while (1)
  {
    specialized _copyCollectionToContiguousArray<A>(_:)(v20, a2, v21, v17);
    uint64_t v17 = v34;
LABEL_30:
    swift_unknownObjectRelease();
    if (!*(void *)(v17 + 16))
    {
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    if (v11 < 0) {
      goto LABEL_49;
    }
    if (v11)
    {
      uint64_t v37 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v37 + 16) = v11;
      bzero((void *)(v37 + 32), 8 * v11);
    }
    else
    {
      uint64_t v37 = MEMORY[0x263F8EE78];
    }
    uint64_t v47 = (char *)v37;
    uint64_t v38 = swift_bridgeObjectRetain();
    specialized discreteFourierTransform<A, B, C>(input:size:output:)(v38, v11, &v47);
    swift_unknownObjectRelease();
    swift_release();
    *(void *)(v10 + 24) = v47;
    swift_unknownObjectRelease();
    if (!v43) {
      goto LABEL_50;
    }
    *(void *)(v10 + 40) = v11 / v43;
    uint64_t v39 = *(void *)(v17 + 16);
    if (v39) {
      break;
    }
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    swift_unknownObjectRelease();
  }
  while (!*(void *)(v17 + 8 * v39 + 24))
  {
    if ((unint64_t)v39-- <= 1) {
      goto LABEL_42;
    }
  }
  if (v39 > 0)
  {
    specialized evaluateUsingHorner<A, B>(_:atInput:)(v17, a9, (unint64_t *)&v47);
    swift_release();
    int v40 = v47;
    goto LABEL_43;
  }
LABEL_42:
  swift_release();
  int v40 = 0;
LABEL_43:
  *(void *)(v10 + 32) = v40;
  return v10;
}

uint64_t specialized QueryGadget.evaluate<A>(at:)@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v5 = v2 + 6;
  uint64_t result = swift_beginAccess();
  uint64_t v7 = v2[6];
  BOOL v8 = __OFADD__(v7, 1);
  unint64_t v9 = v7 + 1;
  if (v8)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  *uint64_t v5 = v9;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    unint64_t v22 = a2;
    int64_t v11 = v2 + 2;
    uint64_t v12 = a1 + 32;
    swift_beginAccess();
    unint64_t v13 = 0;
    while (1)
    {
      unint64_t v14 = *v5;
      int v15 = *(_DWORD *)(v12 + 4 * v13);
      uint64_t v16 = (void *)*v11;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      uint64_t *v11 = (uint64_t)v16;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v16);
        uint64_t v16 = (void *)result;
        uint64_t *v11 = result;
      }
      if (v13 >= v16[2]) {
        break;
      }
      uint64_t v17 = &v16[v13];
      uint64_t v18 = v17[4];
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      v17[4] = v18;
      if (result)
      {
        if ((v14 & 0x8000000000000000) != 0) {
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v18);
        uint64_t v18 = result;
        v17[4] = result;
        if ((v14 & 0x8000000000000000) != 0)
        {
LABEL_13:
          __break(1u);
LABEL_14:
          unint64_t v9 = *v5;
          a2 = v22;
          goto LABEL_15;
        }
      }
      if (v14 >= *(void *)(v18 + 16)) {
        goto LABEL_20;
      }
      ++v13;
      *(_DWORD *)(v18 + 4 * v14 + 32) = v15;
      if (v10 == v13) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_15:
  uint64_t v19 = v2[5];
  unint64_t v20 = v9 * v19;
  if ((unsigned __int128)((uint64_t)v9 * (__int128)v19) >> 64 != (uint64_t)(v9 * v19) >> 63)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t result = swift_beginAccess();
  if ((v20 & 0x8000000000000000) != 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v21 = v2[3];
  if (v20 < *(void *)(v21 + 16))
  {
    *a2 = *(_DWORD *)(v21 + 4 * v20 + 32);
    return result;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t specialized QueryGadget.evaluate<A>(at:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t (*a3)(uint64_t)@<X2>, void *a4@<X8>)
{
  unint64_t v9 = v4 + 6;
  uint64_t result = swift_beginAccess();
  uint64_t v11 = v4[6];
  BOOL v12 = __OFADD__(v11, 1);
  unint64_t v13 = v11 + 1;
  if (v12)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  *unint64_t v9 = v13;
  uint64_t v14 = *(void *)(a1 + 16);
  if (v14)
  {
    uint64_t v26 = a2;
    uint64_t v27 = a3;
    uint64_t v28 = a4;
    int v15 = v4 + 2;
    uint64_t v16 = a1 + 32;
    swift_beginAccess();
    unint64_t v17 = 0;
    while (1)
    {
      unint64_t v18 = *v9;
      uint64_t v19 = *(void *)(v16 + 8 * v17);
      uint64_t v20 = *v15;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      uint64_t *v15 = v20;
      if ((result & 1) == 0)
      {
        uint64_t result = v26(v20);
        uint64_t v20 = result;
        uint64_t *v15 = result;
      }
      if (v17 >= *(void *)(v20 + 16)) {
        break;
      }
      uint64_t v21 = v20 + 8 * v17;
      uint64_t v22 = *(void *)(v21 + 32);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v21 + 32) = v22;
      if (result)
      {
        if ((v18 & 0x8000000000000000) != 0) {
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t result = v27(v22);
        uint64_t v22 = result;
        *(void *)(v21 + 32) = result;
        if ((v18 & 0x8000000000000000) != 0)
        {
LABEL_13:
          __break(1u);
LABEL_14:
          unint64_t v13 = *v9;
          a4 = v28;
          goto LABEL_15;
        }
      }
      if (v18 >= *(void *)(v22 + 16)) {
        goto LABEL_20;
      }
      ++v17;
      *(void *)(v22 + 8 * v18 + 32) = v19;
      if (v14 == v17) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_15:
  uint64_t v23 = v4[5];
  unint64_t v24 = v13 * v23;
  if ((unsigned __int128)((uint64_t)v13 * (__int128)v23) >> 64 != (uint64_t)(v13 * v23) >> 63)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t result = swift_beginAccess();
  if ((v24 & 0x8000000000000000) != 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v25 = v4[3];
  if (v24 < *(void *)(v25 + 16))
  {
    *a4 = *(void *)(v25 + 8 * v24 + 32);
    return result;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t specialized PINEPublicShare.encodedLength.getter(uint64_t result, uint64_t a2)
{
  int64_t v3 = *(void *)(result + 16);
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v5 = result;
    uint64_t v25 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v6 = 0;
    uint64_t v4 = v25;
    unint64_t v7 = *(void *)(v25 + 16);
    do
    {
      uint64_t v8 = *(void *)(*(void *)(v5 + 8 * v6 + 32) + 16);
      unint64_t v9 = *(void *)(v25 + 24);
      if (v7 >= v9 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v7 + 1, 1);
      }
      ++v6;
      *(void *)(v25 + 16) = v7 + 1;
      *(void *)(v25 + 8 * v7++ + 32) = v8;
    }
    while (v3 != v6);
    uint64_t result = swift_bridgeObjectRelease();
  }
  uint64_t v10 = *(void *)(v4 + 16);
  if (v10)
  {
    uint64_t v11 = 0;
    BOOL v12 = (uint64_t *)(v4 + 32);
    while (1)
    {
      uint64_t v13 = *v12++;
      BOOL v14 = __OFADD__(v11, v13);
      v11 += v13;
      if (v14) {
        break;
      }
      if (!--v10) {
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v11 = 0;
LABEL_13:
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v15 = *(void *)(a2 + 16);
  uint64_t v16 = MEMORY[0x263F8EE78];
  if (v15)
  {
    uint64_t v26 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15, 0);
    uint64_t v17 = 0;
    uint64_t v16 = v26;
    unint64_t v18 = *(void *)(v26 + 16);
    do
    {
      uint64_t v19 = *(void *)(*(void *)(a2 + 8 * v17 + 32) + 16);
      unint64_t v20 = *(void *)(v26 + 24);
      if (v18 >= v20 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v18 + 1, 1);
      }
      ++v17;
      *(void *)(v26 + 16) = v18 + 1;
      *(void *)(v26 + 8 * v18++ + 32) = v19;
    }
    while (v15 != v17);
    uint64_t result = swift_bridgeObjectRelease();
  }
  uint64_t v21 = *(void *)(v16 + 16);
  if (v21)
  {
    uint64_t v22 = 0;
    uint64_t v23 = (uint64_t *)(v16 + 32);
    while (1)
    {
      uint64_t v24 = *v23++;
      BOOL v14 = __OFADD__(v22, v24);
      v22 += v24;
      if (v14) {
        break;
      }
      if (!--v21) {
        goto LABEL_25;
      }
    }
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    return result;
  }
  uint64_t v22 = 0;
LABEL_25:
  swift_bridgeObjectRelease();
  uint64_t result = v11 + v22;
  if (__OFADD__(v11, v22)) {
    goto LABEL_29;
  }
  return result;
}

void specialized PINEPublicShare.encode<A>(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    uint64_t v6 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8]);
    swift_bridgeObjectRetain();
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(a2 + 8 * v7++ + 32);
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
      uint64_t v15 = v6;
      v13[0] = v8;
      __swift_project_boxed_opaque_existential_1(v13, v14);
      swift_bridgeObjectRetain_n();
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      swift_bridgeObjectRelease();
    }
    while (v4 != v7);
    swift_bridgeObjectRelease();
  }
  uint64_t v9 = *(void *)(a3 + 16);
  if (v9)
  {
    uint64_t v10 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A], &demangling cache variable for type metadata for [UInt8]);
    swift_bridgeObjectRetain();
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = *(void *)(a3 + 8 * v11++ + 32);
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
      uint64_t v15 = v10;
      v13[0] = v12;
      __swift_project_boxed_opaque_existential_1(v13, v14);
      swift_bridgeObjectRetain_n();
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      swift_bridgeObjectRelease();
    }
    while (v9 != v11);
    swift_bridgeObjectRelease();
  }
}

char *specialized PINEPublicShare.encode<A>(into:)(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v5 = *(void *)(a2 + 16);
  if (!v5)
  {
LABEL_19:
    uint64_t v18 = *(void *)(a3 + 16);
    if (!v18) {
      return result;
    }
    uint64_t result = (char *)swift_bridgeObjectRetain();
    uint64_t v19 = 0;
    unint64_t v20 = *(char **)v4;
    while (1)
    {
      uint64_t v21 = *(void *)(a3 + 8 * v19 + 32);
      int64_t v22 = *(void *)(v21 + 16);
      int64_t v23 = *((void *)v20 + 2);
      int64_t v24 = v23 + v22;
      if (__OFADD__(v23, v22)) {
        goto LABEL_40;
      }
      swift_bridgeObjectRetain();
      uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
      if (result && v24 <= *((void *)v20 + 3) >> 1)
      {
        if (*(void *)(v21 + 16)) {
          goto LABEL_32;
        }
      }
      else
      {
        if (v23 <= v24) {
          int64_t v25 = v23 + v22;
        }
        else {
          int64_t v25 = v23;
        }
        uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v25, 1, v20);
        unint64_t v20 = result;
        if (*(void *)(v21 + 16))
        {
LABEL_32:
          uint64_t v26 = *((void *)v20 + 2);
          if ((*((void *)v20 + 3) >> 1) - v26 < v22) {
            goto LABEL_43;
          }
          uint64_t result = (char *)memcpy(&v20[v26 + 32], (const void *)(v21 + 32), v22);
          if (v22)
          {
            uint64_t v27 = *((void *)v20 + 2);
            BOOL v16 = __OFADD__(v27, v22);
            uint64_t v28 = v27 + v22;
            if (v16) {
              goto LABEL_45;
            }
            *((void *)v20 + 2) = v28;
          }
          goto LABEL_22;
        }
      }
      if (v22) {
        goto LABEL_41;
      }
LABEL_22:
      ++v19;
      uint64_t result = (char *)swift_bridgeObjectRelease();
      if (v18 == v19)
      {
        uint64_t result = (char *)swift_bridgeObjectRelease();
        *(void *)uint64_t v4 = v20;
        return result;
      }
    }
  }
  uint64_t result = (char *)swift_bridgeObjectRetain();
  uint64_t v7 = 0;
  uint64_t v8 = *(char **)v4;
  while (1)
  {
    uint64_t v9 = *(void *)(a2 + 8 * v7 + 32);
    int64_t v10 = *(void *)(v9 + 16);
    int64_t v11 = *((void *)v8 + 2);
    int64_t v12 = v11 + v10;
    if (__OFADD__(v11, v10)) {
      break;
    }
    swift_bridgeObjectRetain();
    uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
    if (result && v12 <= *((void *)v8 + 3) >> 1)
    {
      if (*(void *)(v9 + 16)) {
        goto LABEL_14;
      }
    }
    else
    {
      if (v11 <= v12) {
        int64_t v13 = v11 + v10;
      }
      else {
        int64_t v13 = v11;
      }
      uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v13, 1, v8);
      uint64_t v8 = result;
      if (*(void *)(v9 + 16))
      {
LABEL_14:
        uint64_t v14 = *((void *)v8 + 2);
        if ((*((void *)v8 + 3) >> 1) - v14 < v10) {
          goto LABEL_42;
        }
        uint64_t result = (char *)memcpy(&v8[v14 + 32], (const void *)(v9 + 32), v10);
        if (v10)
        {
          uint64_t v15 = *((void *)v8 + 2);
          BOOL v16 = __OFADD__(v15, v10);
          uint64_t v17 = v15 + v10;
          if (v16) {
            goto LABEL_44;
          }
          *((void *)v8 + 2) = v17;
        }
        goto LABEL_4;
      }
    }
    if (v10) {
      goto LABEL_39;
    }
LABEL_4:
    ++v7;
    uint64_t result = (char *)swift_bridgeObjectRelease();
    if (v5 == v7)
    {
      uint64_t result = (char *)swift_bridgeObjectRelease();
      *(void *)uint64_t v4 = v8;
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

uint64_t specialized PINEPrepareShare.encodedLength.getter(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3) {
    uint64_t v4 = 5;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = v4 * v3;
  if ((unsigned __int128)(v4 * (__int128)v3) >> 64 != (v4 * v3) >> 63)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v6 = *(void *)(a2 + 16);
  BOOL v7 = __OFADD__(v5, v6);
  uint64_t v8 = v5 + v6;
  if (v7)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t result = v8 + v9;
  if (__OFADD__(v8, v9)) {
LABEL_10:
  }
    __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v3 = *(void *)(result + 16);
  uint64_t v4 = 4 * (v3 != 0);
  uint64_t v5 = v4 * v3;
  if ((unsigned __int128)(v4 * (__int128)v3) >> 64 != (v4 * v3) >> 63)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v6 = *(void *)(a2 + 16);
  BOOL v7 = __OFADD__(v5, v6);
  uint64_t v8 = v5 + v6;
  if (v7)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t result = v8 + v9;
  if (__OFADD__(v8, v9)) {
LABEL_7:
  }
    __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v3 = *(void *)(result + 16);
  uint64_t v4 = 8 * (v3 != 0);
  uint64_t v5 = v4 * v3;
  if ((unsigned __int128)(v4 * (__int128)v3) >> 64 != (v4 * v3) >> 63)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v6 = *(void *)(a2 + 16);
  BOOL v7 = __OFADD__(v5, v6);
  uint64_t v8 = v5 + v6;
  if (v7)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t result = v8 + v9;
  if (__OFADD__(v8, v9)) {
LABEL_7:
  }
    __break(1u);
  return result;
}

uint64_t specialized PINEPrepareShare.encode<A>(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized PINEPrepareShare.encode<A>(into:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))specialized FieldElement.encode<A>(into:));
}

uint64_t specialized PINEPrepareShare.encode<A>(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v6; ++i)
    {
      uint64_t v10 = *(void *)(a2 + 8 * i + 32);
      a5(a1, v10);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v11);
  uint64_t v12 = swift_bridgeObjectRetain();
  return specialized Array.append<A>(contentsOf:)(v12);
}

BOOL specialized static FixedWidthInteger._convert<A>(from:)(uint64_t a1, float a2)
{
  int v3 = (LODWORD(a2) >> 23);
  unint64_t v4 = LODWORD(a2) & 0x7FFFFF;
  char v5 = v3 | LOBYTE(a2);
  if (!(v3 | v4))
  {
    uint64_t v7 = 0;
    BOOL result = 1;
    goto LABEL_23;
  }
  BOOL result = 0;
  uint64_t v7 = 0;
  char v5 = 1;
  if (v3 != 255 && a2 > -1.0)
  {
    uint64_t v8 = Float.exponent.getter();
    if (v8 > 63)
    {
      uint64_t v7 = 0;
      BOOL result = 0;
      char v5 = 1;
      goto LABEL_23;
    }
    uint64_t v9 = v8;
    uint64_t v10 = Float.significandWidth.getter();
    uint64_t v11 = v10 + __clz(__rbit32(v4));
    uint64_t v12 = v9 - v11;
    if (__OFSUB__(v9, v11))
    {
      __break(1u);
    }
    else
    {
      if (v11 <= 63)
      {
        if (v12 < -64 || v12 > 64)
        {
LABEL_9:
          uint64_t v13 = 0;
          uint64_t v14 = 0;
          if ((v9 & 0x8000000000000000) == 0) {
            goto LABEL_21;
          }
          goto LABEL_22;
        }
        if (v12 < 0)
        {
          if ((unint64_t)v12 <= 0xFFFFFFFFFFFFFFC0) {
            goto LABEL_9;
          }
          uint64_t v13 = v4 >> (v11 - v9);
        }
        else
        {
          if ((unint64_t)v12 >= 0x40) {
            goto LABEL_9;
          }
          uint64_t v13 = v4 << v12;
        }
LABEL_19:
        if ((v9 & 0x8000000000000000) == 0)
        {
LABEL_21:
          uint64_t v14 = 1 << v9;
          goto LABEL_22;
        }
        uint64_t v14 = 0;
LABEL_22:
        char v5 = 0;
        uint64_t v7 = v13 | v14;
        BOOL result = v9 >= v10;
        goto LABEL_23;
      }
      if ((unint64_t)(v12 - 33) < 0xFFFFFFFFFFFFFFBFLL)
      {
LABEL_12:
        uint64_t v13 = 0;
        goto LABEL_19;
      }
      if ((v12 & 0x8000000000000000) == 0)
      {
        if ((unint64_t)v12 < 0x20)
        {
          uint64_t v13 = (v4 << v12);
          goto LABEL_19;
        }
        goto LABEL_12;
      }
    }
    if ((unint64_t)v12 > 0xFFFFFFFFFFFFFFE0)
    {
      uint64_t v13 = v4 >> (v11 - v9);
      goto LABEL_19;
    }
    goto LABEL_12;
  }
LABEL_23:
  *(void *)a1 = v7;
  *(unsigned char *)(a1 + 8) = v5;
  return result;
}

{
  int v3;
  unsigned int v4;
  int v5;
  char v6;
  BOOL result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;

  int v3 = (LODWORD(a2) >> 23);
  unint64_t v4 = LODWORD(a2) & 0x7FFFFF;
  char v5 = v3 | LODWORD(a2) & 0x7FFFFF;
  if (v5)
  {
    char v5 = 0;
    uint64_t v6 = 1;
    if (v3 == 255)
    {
      BOOL result = 0;
    }
    else
    {
      BOOL result = 0;
      if (a2 > -1.0)
      {
        uint64_t v8 = Float.exponent.getter();
        if (v8 <= 31)
        {
          uint64_t v9 = v8;
          uint64_t v10 = Float.significandWidth.getter();
          uint64_t v11 = v10 + __clz(__rbit32(v4));
          uint64_t v12 = v9 - v11;
          if (__OFSUB__(v9, v11))
          {
            __break(1u);
          }
          else
          {
            if (v11 > 31)
            {
              if (v12 < -32 || v12 > 32) {
                goto LABEL_13;
              }
            }
            else if (v12 < -32 || v12 > 32)
            {
              goto LABEL_13;
            }
            if ((v12 & 0x8000000000000000) == 0)
            {
              if ((unint64_t)v12 < 0x20)
              {
                uint64_t v13 = v4 << v12;
                if (v9 < 0)
                {
LABEL_18:
                  uint64_t v14 = 0;
                  goto LABEL_25;
                }
LABEL_24:
                uint64_t v14 = 1 << v9;
                goto LABEL_25;
              }
              goto LABEL_13;
            }
          }
          if ((unint64_t)v12 > 0xFFFFFFFFFFFFFFE0)
          {
            uint64_t v13 = v4 >> (v11 - v9);
            if (v9 < 0) {
              goto LABEL_18;
            }
            goto LABEL_24;
          }
LABEL_13:
          uint64_t v13 = 0;
          uint64_t v14 = 0;
          if (v9 < 0)
          {
LABEL_25:
            uint64_t v6 = 0;
            char v5 = v13 | v14;
            BOOL result = v9 >= v10;
            goto LABEL_26;
          }
          goto LABEL_24;
        }
        char v5 = 0;
        BOOL result = 0;
        uint64_t v6 = 1;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    BOOL result = 1;
  }
LABEL_26:
  *(_DWORD *)a1 = v5;
  *(unsigned char *)(a1 + 4) = v6;
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Seed>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Field32>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3, char *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field40>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *a1, int64_t a2, char a3, void *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Field40]>, &demangling cache variable for type metadata for [Field40]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Field32]>, &demangling cache variable for type metadata for [Field32]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Field64]>, &demangling cache variable for type metadata for [Field64]);
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    size_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    size_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if (v6)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9]) {
      memmove(v14, v15, 8 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 8 * v9);
  }
  swift_bridgeObjectRelease();
  return v11;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v13 = (void *)swift_allocObject();
    int64_t v14 = _swift_stdlib_malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 25;
    }
    v13[2] = v11;
    void v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
  }
  if (v8)
  {
    if (v13 != a4 || v13 + 4 >= &a4[v11 + 4]) {
      memmove(v13 + 4, a4 + 4, 8 * v11);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v13;
}

{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  size_t v14;

  char v8 = (char)result;
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v13 = (void *)swift_allocObject();
    int64_t v14 = _swift_stdlib_malloc_size(v13);
    v13[2] = v11;
    void v13[3] = 2 * ((uint64_t)(v14 - 32) / 48);
  }
  else
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
  }
  if (v8)
  {
    if (v13 != a4 || v13 + 4 >= &a4[6 * v11 + 4]) {
      memmove(v13 + 4, a4 + 4, 48 * v11);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v13;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prio3InputShare<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>>);
    int64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prio3InputShare<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(void *a1, int64_t a2, char a3)
{
  BOOL result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *int v3 = result;
  return result;
}

{
  void **v3;
  void *result;

  BOOL result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetEvaluation<Field40>>, &demangling cache variable for type metadata for GadgetEvaluation<Field40>);
  *int v3 = result;
  return result;
}

{
  void **v3;
  void *result;

  BOOL result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *int v3 = result;
  return result;
}

{
  void **v3;
  void *result;

  BOOL result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetEvaluation<Field32>>, &demangling cache variable for type metadata for GadgetEvaluation<Field32>);
  *int v3 = result;
  return result;
}

{
  void **v3;
  void *result;

  BOOL result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetEvaluation<Field64>>, &demangling cache variable for type metadata for GadgetEvaluation<Field64>);
  *int v3 = result;
  return result;
}

{
  void **v3;
  void *result;

  BOOL result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *int v3 = result;
  return result;
}

char *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3)
{
  BOOL result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  *int v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  BOOL result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *int v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  BOOL result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *int v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  BOOL result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *int v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  BOOL result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field40>);
  *int v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  BOOL result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *int v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  BOOL result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
  *int v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  BOOL result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *int v3 = result;
  return result;
}

{
  char **v3;
  char *result;

  BOOL result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
  *int v3 = result;
  return result;
}

void *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(measurementShare: Seed, proofShare: Seed, wraparoundJointRandBlind: Seed, verificationJointRandBlind: Seed)>);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[4 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (measurementShare: Seed, proofShare: Seed, wraparoundJointRandBlind: Seed, verificationJointRandBlind: Seed));
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[UInt8]>);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(measurementShare: Seed, proofShare: Seed, jointRandBlind: Seed?)>);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x263F8EE78];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[3 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (measurementShare: Seed, proofShare: Seed, jointRandBlind: Seed?));
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Seed>);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Field32>);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    int64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  int64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_release();
  return v10;
}

void *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v13 = (void *)swift_allocObject();
    int64_t v14 = _swift_stdlib_malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 25;
    }
    v13[2] = v11;
    void v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
  }
  if (v8)
  {
    if (v13 != a4 || v13 + 4 >= &a4[v11 + 4]) {
      memmove(v13 + 4, a4 + 4, 8 * v11);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v13;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    uint64_t v11 = (char *)MEMORY[0x263F8EE78];
  }
  int64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if (v6)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9]) {
      memmove(v14, v15, 8 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 8 * v9);
  }
  swift_release();
  return v11;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Data.Iterator();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4, v6);
  int64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (void *)MEMORY[0x263F8EE78];
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_12;
      }
      uint64_t v10 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (v10)
      {
        if (v10 >= 1)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
          uint64_t v9 = (void *)swift_allocObject();
          size_t v13 = _swift_stdlib_malloc_size(v9);
          void v9[2] = v10;
          v9[3] = 2 * v13 - 64;
        }
        outlined copy of Data._Representation(a1, a2);
        uint64_t v14 = Data._copyContents(initializing:)();
        outlined consume of Data._Representation(a1, a2);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
        if (v14 != v10)
        {
          __break(1u);
LABEL_12:
          __break(1u);
LABEL_13:
          __break(1u);
          JUMPOUT(0x260B74774);
        }
      }
      return v9;
    case 2uLL:
      uint64_t v12 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 24);
      uint64_t v10 = v11 - v12;
      if (!__OFSUB__(v11, v12)) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      return v9;
    default:
      uint64_t v10 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

void specialized closure #1 in Array<A>.init<A>(from:parameter:)(void *a1@<X1>, uint64_t a2@<X2>, void *a3@<X4>, _DWORD *a4@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v9 = a1[3];
  specialized Collection.prefix(_:)(a2, *a1, v7, v8, v9);
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  unint64_t v20 = v14;
  *a1 = specialized Collection.dropFirst(_:)(a2, v6, v7, v8, v9);
  a1[1] = v15;
  a1[2] = v16;
  a1[3] = v17;
  swift_unknownObjectRetain();
  specialized FieldElement.init<A>(bytes:mask:)(v11, v13, v20, 0xFFFFFFFF, &v22);
  if (v21) {
    *a3 = v21;
  }
  else {
    *a4 = v22;
  }
}

void *specialized closure #1 in Array<A>.init<A>(from:parameter:)@<X0>(void *a1@<X1>, uint64_t a2@<X2>, void *a3@<X4>, void *(*a4)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X5>, void *a5@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v10 = a1[2];
  uint64_t v9 = a1[3];
  uint64_t v11 = specialized Collection.prefix(_:)(a2, *a1, v8, v10, v9);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v23 = v16;
  *a1 = specialized Collection.dropFirst(_:)(a2, v7, v8, v10, v9);
  a1[1] = v17;
  a1[2] = v18;
  a1[3] = v19;
  swift_unknownObjectRetain();
  uint64_t result = a4(&v26, v11, v13, v15, v23, -1);
  if (v24) {
    *a3 = v24;
  }
  else {
    *a5 = v26;
  }
  return result;
}

uint64_t specialized closure #1 in VerificationJointRandomness.xof.getter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HMAC<SHA256>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA256>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7, v9);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = specialized VerificationJointRandomness.seed.getter(&lazy protocol witness table cache variable for type VerificationJointRandomness<PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field40> and conformance VerificationJointRandomness<A, B>, &demangling cache variable for type metadata for VerificationJointRandomness<PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>, Field40>);
  uint64_t v13 = specialized static PINE.domainSeparationTag(usage:)(2u);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t result = swift_initStackObject();
  *(_OWORD *)(result + 16) = xmmword_260BF9FF0;
  unint64_t v15 = *(void *)(a1 + 48);
  if ((v15 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v15 > 0xFF)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v16 = result;
  *(unsigned char *)(result + 32) = v15;
  if (*(void *)(v12 + 16) != 32)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v20[0] = v7;
  type metadata accessor for XofHmacSha256Aes128(0);
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = XofHmacSha256Aes128.init(seedBytes:domainSeparationTag:binder:)(v12, v13, v16);
  if (!*(void *)(result + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream))
  {
    uint64_t v17 = result;
    uint64_t v18 = result + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_hmac;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v18, v2);
    HMAC.finalize()();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    uint64_t v19 = v20[0];
    HashedAuthenticationCode.withUnsafeBytes<A>(_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v17;
  }
LABEL_9:
  __break(1u);
  return result;
}

unint64_t specialized discreteFourierTransform<A, B, C>(input:size:output:)(uint64_t a1, int64_t a2, unint64_t a3, int64_t a4, unint64_t *a5)
{
  specialized static BitReversal.indicesFor(_:)(a4);
  if (a4 < 0) {
    goto LABEL_109;
  }
  uint64_t v14 = v13;
  if (!a4)
  {
    swift_bridgeObjectRelease();
    a3 = *a5;
LABEL_21:
    int64_t v7 = __clz(__rbit64(a4));
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v65 = a5;
    if ((result & 1) == 0) {
      goto LABEL_110;
    }
    goto LABEL_22;
  }
  if ((unint64_t)(a4 - 1) >= *(void *)(v13 + 16))
  {
    __break(1u);
    goto LABEL_112;
  }
  int64_t v5 = a3 >> 1;
  uint64_t v6 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
LABEL_112:
    __break(1u);
    goto LABEL_113;
  }
  a3 = *a5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_113:
  }
    a3 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(a3);
  unint64_t v15 = 0;
  while (1)
  {
    uint64_t v17 = *(void *)(v14 + 8 * v15 + 32);
    if (v17 >= v6)
    {
      if (v15 >= *(void *)(a3 + 16)) {
        goto LABEL_101;
      }
      uint64_t v16 = 0;
      goto LABEL_9;
    }
    BOOL v18 = __OFADD__(a2, v17);
    int64_t v19 = a2 + v17;
    if (v18) {
      goto LABEL_102;
    }
    if (v19 < a2 || v19 >= v5) {
      break;
    }
    if (v15 >= *(void *)(a3 + 16)) {
      goto LABEL_104;
    }
    uint64_t v16 = *(void *)(a1 + 8 * v19);
LABEL_9:
    *(void *)(a3 + 8 * v15++ + 32) = v16;
    if (a4 == v15)
    {
      swift_bridgeObjectRelease();
      *a5 = a3;
      goto LABEL_21;
    }
  }
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
  while (2)
  {
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(a3);
    a3 = result;
LABEL_22:
    uint64_t v22 = 0;
    unint64_t v23 = a3 + 32;
    unint64_t v24 = 0x26A8DB000uLL;
    int64_t v25 = &one-time initialization token for roots;
    unint64_t v26 = 0x26A8DB000uLL;
    uint64_t v27 = &unk_26A8DD000;
    uint64_t v28 = 1;
LABEL_23:
    unint64_t v29 = v28;
    if (v28 < v7)
    {
      ++v28;
      goto LABEL_27;
    }
    if ((v28 != v7) | v22 & 1)
    {
LABEL_96:
      *unint64_t v65 = a3;
    }
    else
    {
      uint64_t v22 = 1;
      uint64_t v28 = v7;
LABEL_27:
      if (*(void *)(v24 + 4016) != -1)
      {
        uint64_t v60 = v22;
        unint64_t result = swift_once();
        unint64_t v26 = 0x26A8DB000;
        int64_t v25 = (void *)&one-time initialization token for roots;
        unint64_t v24 = 0x26A8DB000;
        uint64_t v22 = v60;
        uint64_t v27 = (void *)&unk_26A8DD000;
      }
      unint64_t v30 = v25[330];
      if (*(void *)(v26 + 4080) != -1)
      {
        unsigned int v64 = v22;
        unint64_t result = swift_once();
        unint64_t v26 = 0x26A8DB000;
        int64_t v25 = (void *)&one-time initialization token for roots;
        unint64_t v24 = 0x26A8DB000;
        uint64_t v22 = v64;
        uint64_t v27 = (void *)&unk_26A8DD000;
      }
      uint64_t v31 = v27[224];
      if ((int64_t)v29 < *(void *)(v31 + 16))
      {
        if ((v29 & 0x8000000000000000) != 0) {
          continue;
        }
        if (v29 >= 0x40) {
          uint64_t v32 = 0;
        }
        else {
          uint64_t v32 = 1 << v29;
        }
        if (v32 < 0) {
          goto LABEL_107;
        }
        if ((unint64_t)v32 < 2) {
          goto LABEL_23;
        }
        uint64_t v33 = a4 / (1 << v29);
        if (v33 < 0) {
          goto LABEL_108;
        }
        uint64_t v34 = 0;
        unint64_t v35 = *(void *)(v31 + 8 * v29 + 32);
        uint64_t v36 = v32 >> 1;
        while (2)
        {
          if (v34 == ((v32 >> 1) & ~(v32 >> 63))) {
            goto LABEL_100;
          }
          if (v33)
          {
            for (uint64_t i = 0; v33 != i; ++i)
            {
              uint64_t v41 = v32 * i;
              if ((unsigned __int128)(v32 * (__int128)i) >> 64 != (v32 * i) >> 63)
              {
                __break(1u);
LABEL_89:
                __break(1u);
LABEL_90:
                __break(1u);
LABEL_91:
                __break(1u);
LABEL_92:
                __break(1u);
LABEL_93:
                __break(1u);
LABEL_94:
                __break(1u);
LABEL_95:
                __break(1u);
                goto LABEL_96;
              }
              unint64_t v42 = v41 + v34;
              if (__OFADD__(v41, v34)) {
                goto LABEL_89;
              }
              if ((v42 & 0x8000000000000000) != 0) {
                goto LABEL_90;
              }
              unint64_t v43 = *(void *)(a3 + 16);
              if (v42 >= v43) {
                goto LABEL_91;
              }
              unint64_t v44 = v42 + v36;
              if (__OFADD__(v42, v36)) {
                goto LABEL_92;
              }
              if (v44 >= v43) {
                goto LABEL_93;
              }
              unint64_t v45 = *(void *)(v23 + 8 * v42);
              unint64_t v46 = *(void *)(v23 + 8 * v44);
              uint64_t v47 = (v46 * (unsigned __int128)v30) >> 64;
              unint64_t v48 = v46 * v30;
              uint64_t v49 = (0xCFFE47FFFEAFFFFFLL * v48 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
              BOOL v50 = __CFADD__(-(uint64_t)v48, v48);
              uint64_t v51 = v49 + v47;
              if (!__CFADD__(v49, v47))
              {
                if (v51 != -1)
                {
                  unint64_t result = v51 + v50;
                  if (result >= 0xFFFEB00001) {
                    result -= 0xFFFEB00001;
                  }
                  if (!result) {
                    goto LABEL_46;
                  }
                  goto LABEL_61;
                }
                if (!v50)
                {
                  unint64_t result = 0xFFFFFF00014FFFFELL;
                  goto LABEL_94;
                }
                BOOL v50 = 1;
              }
              uint64_t v52 = v50 + v51;
              BOOL v53 = __CFADD__(v52, 0xFFFFFF00014FFFFFLL);
              unint64_t result = v52 - 0xFFFEB00001;
              if (v53) {
                goto LABEL_95;
              }
              if (!result) {
                goto LABEL_46;
              }
LABEL_61:
              unint64_t v54 = 0xFFFEB00001 - result;
              if (result > 0xFFFEB00001) {
                goto LABEL_94;
              }
              uint64_t v55 = v45 - v54;
              if (v45 < v54)
              {
                if (v54 > 0xFFFEB00001)
                {
                  __break(1u);
LABEL_98:
                  __break(1u);
LABEL_99:
                  __break(1u);
LABEL_100:
                  __break(1u);
LABEL_101:
                  __break(1u);
LABEL_102:
                  __break(1u);
                  goto LABEL_103;
                }
                uint64_t v55 = v45 + result;
                if (__CFADD__(v45, result)) {
                  goto LABEL_99;
                }
              }
              *(void *)(v23 + 8 * v42) = v55;
              if (v45 >= result)
              {
LABEL_46:
                uint64_t v40 = v45 - result;
                goto LABEL_47;
              }
              uint64_t v40 = v45 + v54;
              if (__CFADD__(v45, v54)) {
                goto LABEL_98;
              }
LABEL_47:
              *(void *)(v23 + 8 * v44) = v40;
            }
          }
          uint64_t v56 = (v30 * (unsigned __int128)v35) >> 64;
          uint64_t v57 = (0xCFFE47FFFEAFFFFFLL * v30 * v35 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
          BOOL v37 = __CFADD__(-(uint64_t)(v30 * v35), v30 * v35);
          uint64_t v58 = v57 + v56;
          if (!__CFADD__(v57, v56))
          {
            if (v58 != -1)
            {
              unint64_t v59 = v58 + v37;
              if (v59 >= 0xFFFEB00001) {
                unint64_t v30 = v59 - 0xFFFEB00001;
              }
              else {
                unint64_t v30 = v59;
              }
              goto LABEL_42;
            }
            if (!v37)
            {
              unint64_t v30 = 0xFFFFFF00014FFFFELL;
              goto LABEL_42;
            }
            BOOL v37 = 1;
          }
          unint64_t v38 = v37 + v58;
          unint64_t v30 = v38 - 0xFFFEB00001;
          if (v38 >= 0xFFFEB00001) {
            goto LABEL_105;
          }
LABEL_42:
          if (++v34 == v36)
          {
            unint64_t v26 = 0x26A8DB000;
            goto LABEL_23;
          }
          continue;
        }
      }
      _StringGuts.grow(_:)(26);
      dispatch thunk of CustomStringConvertible.description.getter();
      swift_bridgeObjectRelease();
      v61._countAndFlagsBits = 2112544;
      v61._object = (void *)0xE300000000000000;
      String.append(_:)(v61);
      v62._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v62);
      swift_bridgeObjectRelease();
      v63._object = (void *)0x8000000260BFEBE0;
      v63._countAndFlagsBits = 0xD000000000000013;
      String.append(_:)(v63);
      unint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    return result;
  }
}

{
  int64_t v5;
  int64_t v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  int64_t v17;
  int v19;
  unint64_t result;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  Swift::String v51;
  Swift::String v52;
  Swift::String v53;
  unsigned int v54;
  unint64_t *v55;

  specialized static BitReversal.indicesFor(_:)(a4);
  if (a4 < 0) {
    goto LABEL_98;
  }
  uint64_t v13 = v12;
  if (!a4)
  {
    swift_bridgeObjectRelease();
    a3 = *a5;
LABEL_21:
    int64_t v5 = __clz(__rbit64(a4));
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v55 = a5;
    if ((result & 1) == 0) {
      goto LABEL_99;
    }
    goto LABEL_22;
  }
  if ((unint64_t)(a4 - 1) >= *(void *)(v12 + 16))
  {
    __break(1u);
    goto LABEL_101;
  }
  int64_t v5 = a3 >> 1;
  uint64_t v6 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  a3 = *a5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_102:
  }
    a3 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(a3);
  uint64_t v14 = 0;
  while (1)
  {
    unint64_t v15 = *(void *)(v13 + 8 * v14 + 32);
    if (v15 >= v6)
    {
      if (v14 >= *(void *)(a3 + 16)) {
        goto LABEL_90;
      }
      int64_t v19 = 0;
      goto LABEL_7;
    }
    uint64_t v16 = __OFADD__(a2, v15);
    uint64_t v17 = a2 + v15;
    if (v16) {
      goto LABEL_91;
    }
    if (v17 < a2 || v17 >= v5) {
      break;
    }
    if (v14 >= *(void *)(a3 + 16)) {
      goto LABEL_93;
    }
    int64_t v19 = *(_DWORD *)(a1 + 4 * v17);
LABEL_7:
    *(_DWORD *)(a3 + 4 * v14++ + 32) = v19;
    if (a4 == v14)
    {
      swift_bridgeObjectRelease();
      *a5 = a3;
      goto LABEL_21;
    }
  }
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(a3);
  a3 = result;
LABEL_22:
  uint64_t v21 = 0;
  uint64_t v22 = a3 + 32;
  unint64_t v23 = 0x26A8DB000uLL;
  unint64_t v24 = &one-time initialization token for roots;
  int64_t v25 = 0x26A8DB000uLL;
  unint64_t v26 = &unk_26A8DD000;
  uint64_t v27 = 1;
  while (1)
  {
LABEL_23:
    uint64_t v28 = v27;
    if (v27 >= v5)
    {
      if ((v27 != v5) | v21 & 1)
      {
LABEL_86:
        *uint64_t v55 = a3;
        return result;
      }
      uint64_t v21 = 1;
      uint64_t v27 = v5;
    }
    else
    {
      ++v27;
    }
    if (*(void *)(v23 + 4000) != -1)
    {
      BOOL v50 = v21;
      unint64_t result = swift_once();
      int64_t v25 = 0x26A8DB000;
      unint64_t v24 = (_DWORD *)&one-time initialization token for roots;
      unint64_t v23 = 0x26A8DB000;
      uint64_t v21 = v50;
      unint64_t v26 = (void *)&unk_26A8DD000;
    }
    unint64_t v29 = v24[658];
    if (*(void *)(v25 + 4072) != -1)
    {
      unint64_t v54 = v21;
      unint64_t result = swift_once();
      int64_t v25 = 0x26A8DB000;
      unint64_t v24 = (_DWORD *)&one-time initialization token for roots;
      unint64_t v23 = 0x26A8DB000;
      uint64_t v21 = v54;
      unint64_t v26 = (void *)&unk_26A8DD000;
    }
    unint64_t v30 = v26[223];
    if ((int64_t)v28 >= *(void *)(v30 + 16)) {
      break;
    }
    if ((v28 & 0x8000000000000000) != 0) {
      goto LABEL_95;
    }
    if (v28 >= 0x40) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = 1 << v28;
    }
    if (v31 < 0) {
      goto LABEL_96;
    }
    if ((unint64_t)v31 >= 2)
    {
      uint64_t v32 = a4 / (1 << v28);
      if (v32 < 0) {
        goto LABEL_97;
      }
      uint64_t v33 = 0;
      uint64_t v34 = *(_DWORD *)(v30 + 4 * v28 + 32);
      unint64_t v35 = v31 >> 1;
      while (1)
      {
        if (v33 == ((v31 >> 1) & ~(v31 >> 63))) {
          goto LABEL_89;
        }
        if (v32) {
          break;
        }
LABEL_72:
        uint64_t v47 = v29 * (unint64_t)v34;
        unint64_t v48 = 4293918721 * (-1048577 * v47);
        unint64_t v42 = __CFADD__(v48, v47);
        uint64_t v49 = (v48 + v47) >> 32;
        if (v42)
        {
          unint64_t v29 = v49 + 0xFFFFF;
          if (v49 >= 0xFFF00001) {
            goto LABEL_94;
          }
        }
        else if (v49 >= 0xFFF00001)
        {
          unint64_t v29 = v49 + 0xFFFFF;
        }
        else
        {
          unint64_t v29 = v49;
        }
        if (++v33 == v35)
        {
          int64_t v25 = 0x26A8DB000;
          goto LABEL_23;
        }
      }
      uint64_t v36 = 0;
      while (2)
      {
        BOOL v37 = v31 * v36;
        if ((unsigned __int128)(v31 * (__int128)v36) >> 64 != (v31 * v36) >> 63)
        {
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
          __break(1u);
LABEL_85:
          __break(1u);
          goto LABEL_86;
        }
        unint64_t v38 = v37 + v33;
        if (__OFADD__(v37, v33)) {
          goto LABEL_78;
        }
        if ((v38 & 0x8000000000000000) != 0) {
          goto LABEL_79;
        }
        unint64_t result = *(void *)(a3 + 16);
        if (v38 >= result) {
          goto LABEL_80;
        }
        uint64_t v39 = v38 + v35;
        if (__OFADD__(v38, v35)) {
          goto LABEL_81;
        }
        if (v39 >= result) {
          goto LABEL_82;
        }
        unint64_t result = *(unsigned int *)(v22 + 4 * v38);
        uint64_t v40 = *(unsigned int *)(v22 + 4 * v39) * (unint64_t)v29;
        uint64_t v41 = 4293918721 * (-1048577 * v40);
        unint64_t v42 = __CFADD__(v41, v40);
        unint64_t v43 = (v41 + v40) >> 32;
        if (v42)
        {
          unint64_t v42 = __CFADD__(v43, 0xFFFFF);
          LODWORD(v43) = v43 + 0xFFFFF;
          if (v42) {
            goto LABEL_84;
          }
          if (v43) {
            goto LABEL_58;
          }
LABEL_67:
          unint64_t v45 = *(_DWORD *)(v22 + 4 * v38);
        }
        else
        {
          if (v43 >= 0xFFF00001) {
            LODWORD(v43) = v43 + 0xFFFFF;
          }
          if (!v43) {
            goto LABEL_67;
          }
LABEL_58:
          unint64_t v44 = -1048575 - v43;
          if (v43 > 0xFFF00001) {
            goto LABEL_83;
          }
          unint64_t v45 = result - v44;
          if (result < v44)
          {
            if (v44 > 0xFFF00001)
            {
              __break(1u);
LABEL_88:
              __break(1u);
LABEL_89:
              __break(1u);
LABEL_90:
              __break(1u);
LABEL_91:
              __break(1u);
              goto LABEL_92;
            }
            unint64_t v45 = result + v43;
            if (__CFADD__(result, v43)) {
              goto LABEL_88;
            }
          }
        }
        *(_DWORD *)(v22 + 4 * v38) = v45;
        unint64_t v46 = result - v43;
        if (result < v43)
        {
          unint64_t v46 = result + -1048575 - v43;
          if (__CFADD__(result, -1048575 - v43)) {
            goto LABEL_85;
          }
        }
        ++v36;
        *(_DWORD *)(v22 + 4 * v39) = v46;
        if (v32 == v36) {
          goto LABEL_72;
        }
        continue;
      }
    }
  }
  _StringGuts.grow(_:)(26);
  dispatch thunk of CustomStringConvertible.description.getter();
  swift_bridgeObjectRelease();
  v51._countAndFlagsBits = 2112544;
  v51._object = (void *)0xE300000000000000;
  String.append(_:)(v51);
  v52._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v52);
  swift_bridgeObjectRelease();
  v53._object = (void *)0x8000000260BFEBE0;
  v53._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v53);
  unint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  int64_t v5;
  int64_t v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int64_t v18;
  unint64_t result;
  char v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  Swift::String v59;
  Swift::String v60;
  Swift::String v61;
  unint64_t *v62;

  specialized static BitReversal.indicesFor(_:)(a4);
  if (a4 < 0) {
    goto LABEL_108;
  }
  uint64_t v13 = v12;
  if (!a4)
  {
    swift_bridgeObjectRelease();
    a3 = *a5;
LABEL_21:
    int64_t v5 = __clz(__rbit64(a4));
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    Swift::String v62 = a5;
    if ((result & 1) == 0) {
      goto LABEL_109;
    }
    goto LABEL_22;
  }
  if ((unint64_t)(a4 - 1) >= *(void *)(v12 + 16))
  {
    __break(1u);
    goto LABEL_111;
  }
  int64_t v5 = a3 >> 1;
  uint64_t v6 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
LABEL_111:
    __break(1u);
    goto LABEL_112;
  }
  a3 = *a5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_112:
  }
    a3 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(a3);
  uint64_t v14 = 0;
  while (1)
  {
    uint64_t v16 = *(void *)(v13 + 8 * v14 + 32);
    if (v16 < v6) {
      break;
    }
    if (v14 >= *(void *)(a3 + 16)) {
      goto LABEL_100;
    }
    unint64_t v15 = 0;
LABEL_9:
    *(void *)(a3 + 8 * v14++ + 32) = v15;
    if (a4 == v14)
    {
      swift_bridgeObjectRelease();
      *a5 = a3;
      goto LABEL_21;
    }
  }
  uint64_t v17 = __OFADD__(a2, v16);
  BOOL v18 = a2 + v16;
  if (v17) {
    goto LABEL_101;
  }
  if (v18 >= a2 && v18 < v5)
  {
    if (v14 >= *(void *)(a3 + 16)) {
      goto LABEL_103;
    }
    unint64_t v15 = *(void *)(a1 + 8 * v18);
    goto LABEL_9;
  }
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
  while (2)
  {
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(a3);
    a3 = result;
LABEL_22:
    uint64_t v21 = 0;
    uint64_t v22 = a3 + 32;
    unint64_t v23 = 0x26A8DB000uLL;
    unint64_t v24 = &one-time initialization token for roots;
    int64_t v25 = 0x26A8DB000uLL;
    unint64_t v26 = &unk_26A8DD000;
    uint64_t v27 = 1;
LABEL_23:
    uint64_t v28 = v27;
    if (v27 >= v5)
    {
      if ((v27 != v5) | v21 & 1)
      {
LABEL_95:
        *Swift::String v62 = a3;
        return result;
      }
      uint64_t v21 = 1;
      uint64_t v27 = v5;
    }
    else
    {
      ++v27;
    }
    if (*(void *)(v23 + 4032) != -1)
    {
      uint64_t v58 = v26;
      unint64_t result = swift_once();
      int64_t v25 = 0x26A8DB000;
      unint64_t v24 = (void *)&one-time initialization token for roots;
      unint64_t v23 = 0x26A8DB000;
      unint64_t v26 = v58;
    }
    unint64_t v29 = v24[332];
    if (*(void *)(v25 + 4088) != -1)
    {
      unint64_t result = swift_once();
      int64_t v25 = 0x26A8DB000;
      unint64_t v24 = (void *)&one-time initialization token for roots;
      unint64_t v23 = 0x26A8DB000;
      unint64_t v26 = (void *)&unk_26A8DD000;
    }
    unint64_t v30 = v26[225];
    if ((int64_t)v28 < *(void *)(v30 + 16))
    {
      if ((v28 & 0x8000000000000000) != 0) {
        continue;
      }
      if (v28 >= 0x40) {
        uint64_t v31 = 0;
      }
      else {
        uint64_t v31 = 1 << v28;
      }
      if (v31 < 0) {
        goto LABEL_106;
      }
      if ((unint64_t)v31 < 2) {
        goto LABEL_23;
      }
      uint64_t v32 = a4 / (1 << v28);
      if (v32 < 0) {
        goto LABEL_107;
      }
      uint64_t v33 = 0;
      uint64_t v34 = *(void *)(v30 + 8 * v28 + 32);
      unint64_t v35 = v31 >> 1;
      while (2)
      {
        if (v33 == ((v31 >> 1) & ~(v31 >> 63))) {
          goto LABEL_99;
        }
        if (v32)
        {
          unint64_t v38 = 0;
          while (1)
          {
            uint64_t v40 = v31 * v38;
            if ((unsigned __int128)(v31 * (__int128)v38) >> 64 != (v31 * v38) >> 63)
            {
              __break(1u);
LABEL_88:
              __break(1u);
LABEL_89:
              __break(1u);
LABEL_90:
              __break(1u);
LABEL_91:
              __break(1u);
LABEL_92:
              __break(1u);
LABEL_93:
              __break(1u);
LABEL_94:
              __break(1u);
              goto LABEL_95;
            }
            uint64_t v41 = v40 + v33;
            if (__OFADD__(v40, v33)) {
              goto LABEL_88;
            }
            if ((v41 & 0x8000000000000000) != 0) {
              goto LABEL_89;
            }
            unint64_t v42 = *(void *)(a3 + 16);
            if (v41 >= v42) {
              goto LABEL_90;
            }
            unint64_t v43 = v41 + v35;
            if (__OFADD__(v41, v35)) {
              goto LABEL_91;
            }
            if (v43 >= v42) {
              goto LABEL_92;
            }
            unint64_t v44 = *(void *)(v22 + 8 * v41);
            unint64_t v45 = *(void *)(v22 + 8 * v43);
            unint64_t v46 = (v45 * (unsigned __int128)(unint64_t)v29) >> 64;
            uint64_t v47 = (0xFFFFFFFEFFFFFFFFLL * v45 * v29 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
            unint64_t v48 = __CFADD__(-(uint64_t)(v45 * v29), v45 * v29);
            uint64_t v49 = v47 + v46;
            if (__CFADD__(v47, v46)) {
              goto LABEL_59;
            }
            if (v49 == -1) {
              break;
            }
            unint64_t result = v49 + v48;
            if (result >= 0xFFFFFFFF00000001) {
              result += 0xFFFFFFFFLL;
            }
            if (!result) {
              goto LABEL_46;
            }
LABEL_61:
            uint64_t v52 = 0xFFFFFFFF00000001 - result;
            if (result > 0xFFFFFFFF00000001) {
              goto LABEL_93;
            }
LABEL_62:
            BOOL v53 = v44 - v52;
            if (v44 < v52)
            {
              unint64_t v54 = 0xFFFFFFFF00000001 - v52;
              if (v52 > 0xFFFFFFFF00000001)
              {
                __break(1u);
LABEL_97:
                __break(1u);
LABEL_98:
                __break(1u);
LABEL_99:
                __break(1u);
LABEL_100:
                __break(1u);
LABEL_101:
                __break(1u);
                goto LABEL_102;
              }
              uint64_t v51 = __CFADD__(v44, v54);
              BOOL v53 = v44 + v54;
              if (v51) {
                goto LABEL_98;
              }
            }
            *(void *)(v22 + 8 * v41) = v53;
            if (v44 >= result)
            {
LABEL_46:
              uint64_t v39 = v44 - result;
              goto LABEL_47;
            }
            uint64_t v39 = v44 + v52;
            if (__CFADD__(v44, v52)) {
              goto LABEL_97;
            }
LABEL_47:
            ++v38;
            *(void *)(v22 + 8 * v43) = v39;
            if (v32 == v38) {
              goto LABEL_77;
            }
          }
          if (!v48)
          {
            unint64_t result = 4294967294;
            uint64_t v52 = 0xFFFFFFFE00000003;
            goto LABEL_62;
          }
          unint64_t v48 = 1;
LABEL_59:
          BOOL v50 = v48 + v49;
          uint64_t v51 = __CFADD__(v50, 0xFFFFFFFFLL);
          unint64_t result = v50 + 0xFFFFFFFFLL;
          if (v51) {
            goto LABEL_94;
          }
          if (!result) {
            goto LABEL_46;
          }
          goto LABEL_61;
        }
LABEL_77:
        uint64_t v55 = ((unint64_t)v29 * (unsigned __int128)v34) >> 64;
        unint64_t result = (0xFFFFFFFEFFFFFFFFLL * v29 * v34 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
        uint64_t v36 = __CFADD__(-(uint64_t)(v29 * v34), v29 * v34);
        uint64_t v56 = result + v55;
        if (!__CFADD__(result, v55))
        {
          if (v56 != -1)
          {
            uint64_t v57 = v56 + v36;
            if (v57 >= 0xFFFFFFFF00000001) {
              unint64_t v29 = v57 + 0xFFFFFFFF;
            }
            else {
              unint64_t v29 = v57;
            }
            goto LABEL_42;
          }
          if (!v36)
          {
            unint64_t v29 = 4294967294;
            goto LABEL_42;
          }
          uint64_t v36 = 1;
        }
        BOOL v37 = v36 + v56;
        unint64_t v29 = v37 + 0xFFFFFFFF;
        if (v37 >= 0xFFFFFFFF00000001) {
          goto LABEL_104;
        }
LABEL_42:
        if (++v33 == v35) {
          goto LABEL_23;
        }
        continue;
      }
    }
    break;
  }
  _StringGuts.grow(_:)(26);
  dispatch thunk of CustomStringConvertible.description.getter();
  swift_bridgeObjectRelease();
  v59._countAndFlagsBits = 2112544;
  v59._object = (void *)0xE300000000000000;
  String.append(_:)(v59);
  v60._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v60);
  swift_bridgeObjectRelease();
  v61._object = (void *)0x8000000260BFEBE0;
  v61._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v61);
  unint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized convolveUsingDFT<A, B, C, D>(_:withKernel:result:)(uint64_t result, int64_t a2, unint64_t a3, uint64_t a4, int64_t a5, char *a6, char **a7)
{
  unint64_t v15 = a3 >> 1;
  unint64_t v16 = (unint64_t)a6 >> 1;
  if (a3 >> 1 != a2 && v16 != a5)
  {
    BOOL v19 = __OFSUB__(v15, a2);
    unint64_t v20 = v15 - a2;
    if (v19) {
      goto LABEL_50;
    }
    int64_t v10 = a5;
    BOOL v19 = __OFSUB__(v16, a5);
    unint64_t v21 = v16 - a5;
    if (v19) {
      goto LABEL_51;
    }
    BOOL v19 = __OFADD__(v20, v21);
    unint64_t v22 = v20 + v21;
    if (v19) {
      goto LABEL_52;
    }
    uint64_t v13 = result;
    if (__OFSUB__(v22, 1)) {
      goto LABEL_53;
    }
    int64_t v7 = a7;
    uint64_t v9 = a6;
    uint64_t v11 = a4;
    unint64_t v12 = a3;
    uint64_t v23 = specialized FixedWidthInteger.nextPowerOfTwo.getter(v22 - 1);
    uint64_t v14 = *v7;
    if (*((void *)*v7 + 2) < v23) {
      goto LABEL_54;
    }
    uint64_t v8 = v23;
    if (v23 < 0) {
      goto LABEL_55;
    }
    if (v23)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_56;
      }
      while (1)
      {
        unint64_t v24 = *((void *)v14 + 2);
        unint64_t v25 = v8 - 1;
        if (v24 < v8 - 1) {
          unint64_t v25 = *((void *)v14 + 2);
        }
        if (v25 > 3)
        {
          unint64_t v27 = v25 + 1;
          uint64_t v28 = v27 & 3;
          if ((v27 & 3) == 0) {
            uint64_t v28 = 4;
          }
          unint64_t v26 = v27 - v28;
          unint64_t v29 = v14 + 48;
          unint64_t v30 = v26;
          do
          {
            *(v29 - 1) = 0uLL;
            _OWORD *v29 = 0uLL;
            v29 += 2;
            v30 -= 4;
          }
          while (v30);
        }
        else
        {
          unint64_t v26 = 0;
        }
        while (v26 < v24)
        {
          *(void *)&v14[8 * v26++ + 32] = 0;
          if (v8 == v26)
          {
            *int64_t v7 = v14;
            if (v8 <= 0)
            {
              uint64_t v14 = (char *)(8 * v8);
              uint64_t v32 = MEMORY[0x263F8EE78];
              bzero((void *)(MEMORY[0x263F8EE78] + 32), 8 * v8);
              unint64_t v45 = (char *)v32;
            }
            else
            {
              uint64_t v31 = static Array._allocateBufferUninitialized(minimumCapacity:)();
              *(void *)(v31 + 16) = v8;
              uint64_t v14 = (char *)(8 * v8);
              bzero((void *)(v31 + 32), 8 * v8);
              unint64_t v45 = (char *)v31;
              uint64_t v32 = static Array._allocateBufferUninitialized(minimumCapacity:)();
              *(void *)(v32 + 16) = v8;
            }
            bzero((void *)(v32 + 32), (size_t)v14);
            int64_t v44 = v32;
            specialized discreteFourierTransform<A, B, C>(input:size:output:)(v13, a2, v12, v8, (unint64_t *)&v45);
            specialized discreteFourierTransform<A, B, C>(input:size:output:)(v11, v10, (unint64_t)v9, v8, (unint64_t *)&v44);
            int64_t v10 = v44;
            uint64_t v9 = v45;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v9);
            }
            unint64_t v33 = 0;
            while (1)
            {
              if (v33 >= *(void *)(v10 + 16)) {
                goto LABEL_47;
              }
              if (v33 >= *((void *)v9 + 2)) {
                goto LABEL_48;
              }
              uint64_t v36 = &v9[8 * v33];
              unint64_t v37 = *((void *)v36 + 4);
              unint64_t v38 = *(void *)(v10 + 8 * v33 + 32);
              uint64_t v39 = (v37 * (unsigned __int128)v38) >> 64;
              uint64_t v40 = (0xCFFE47FFFEAFFFFFLL * v37 * v38 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
              BOOL v41 = __CFADD__(-(uint64_t)(v37 * v38), v37 * v38);
              uint64_t v42 = v40 + v39;
              if (__CFADD__(v40, v39)) {
                goto LABEL_32;
              }
              if (v42 == -1)
              {
                unint64_t v35 = 0xFFFFFF00014FFFFELL;
                if (v41)
                {
                  BOOL v41 = 1;
LABEL_32:
                  unint64_t v34 = v41 + v42;
                  unint64_t v35 = v34 - 0xFFFEB00001;
                  if (v34 >= 0xFFFEB00001) {
                    goto LABEL_49;
                  }
                }
              }
              else
              {
                unint64_t v43 = v42 + v41;
                if (v43 >= 0xFFFEB00001) {
                  unint64_t v35 = v43 - 0xFFFEB00001;
                }
                else {
                  unint64_t v35 = v43;
                }
              }
              ++v33;
              *((void *)v36 + 4) = v35;
              if (v8 == v33) {
                goto LABEL_18;
              }
            }
          }
        }
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v14);
      }
    }
    int64_t v44 = MEMORY[0x263F8EE78];
    unint64_t v45 = (char *)MEMORY[0x263F8EE78];
    specialized discreteFourierTransform<A, B, C>(input:size:output:)(v13, a2, v12, 0, (unint64_t *)&v45);
    specialized discreteFourierTransform<A, B, C>(input:size:output:)(v11, v10, (unint64_t)v9, 0, (unint64_t *)&v44);
    uint64_t v9 = v45;
LABEL_18:
    specialized inverseDiscreteFourierTransform<A, B, C>(input:size:output:)((uint64_t)v9, v8, v7);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  char **v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  BOOL v39;
  int64_t v40;
  char *v41;

  unint64_t v15 = a3 >> 1;
  unint64_t v16 = (unint64_t)a6 >> 1;
  if (a3 >> 1 != a2 && v16 != a5)
  {
    BOOL v19 = __OFSUB__(v15, a2);
    unint64_t v20 = v15 - a2;
    if (v19) {
      goto LABEL_45;
    }
    int64_t v10 = a5;
    BOOL v19 = __OFSUB__(v16, a5);
    unint64_t v21 = v16 - a5;
    if (v19) {
      goto LABEL_46;
    }
    BOOL v19 = __OFADD__(v20, v21);
    unint64_t v22 = v20 + v21;
    if (v19) {
      goto LABEL_47;
    }
    uint64_t v13 = result;
    if (__OFSUB__(v22, 1)) {
      goto LABEL_48;
    }
    int64_t v7 = a7;
    uint64_t v9 = a6;
    uint64_t v11 = a4;
    unint64_t v12 = a3;
    uint64_t v23 = specialized FixedWidthInteger.nextPowerOfTwo.getter(v22 - 1);
    uint64_t v14 = *v7;
    if (*((void *)*v7 + 2) < v23) {
      goto LABEL_49;
    }
    uint64_t v8 = v23;
    if (v23 < 0) {
      goto LABEL_50;
    }
    if (v23)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_51;
      }
      while (1)
      {
        unint64_t v24 = *((void *)v14 + 2);
        unint64_t v25 = v8 - 1;
        if (v24 < v8 - 1) {
          unint64_t v25 = *((void *)v14 + 2);
        }
        if (v25 > 7)
        {
          unint64_t v27 = v25 + 1;
          uint64_t v28 = v27 & 7;
          if ((v27 & 7) == 0) {
            uint64_t v28 = 8;
          }
          unint64_t v26 = v27 - v28;
          unint64_t v29 = v14 + 48;
          unint64_t v30 = v26;
          do
          {
            *(v29 - 1) = 0uLL;
            _OWORD *v29 = 0uLL;
            v29 += 2;
            v30 -= 8;
          }
          while (v30);
        }
        else
        {
          unint64_t v26 = 0;
        }
        while (v26 < v24)
        {
          *(_DWORD *)&v14[4 * v26++ + 32] = 0;
          if (v8 == v26)
          {
            *int64_t v7 = v14;
            if (v8 <= 0)
            {
              uint64_t v14 = (char *)(4 * v8);
              uint64_t v32 = MEMORY[0x263F8EE78];
              bzero((void *)(MEMORY[0x263F8EE78] + 32), 4 * v8);
              BOOL v41 = (char *)v32;
            }
            else
            {
              uint64_t v31 = static Array._allocateBufferUninitialized(minimumCapacity:)();
              *(void *)(v31 + 16) = v8;
              uint64_t v14 = (char *)(4 * v8);
              bzero((void *)(v31 + 32), 4 * v8);
              BOOL v41 = (char *)v31;
              uint64_t v32 = static Array._allocateBufferUninitialized(minimumCapacity:)();
              *(void *)(v32 + 16) = v8;
            }
            bzero((void *)(v32 + 32), (size_t)v14);
            uint64_t v40 = v32;
            specialized discreteFourierTransform<A, B, C>(input:size:output:)(v13, a2, v12, v8, (unint64_t *)&v41);
            specialized discreteFourierTransform<A, B, C>(input:size:output:)(v11, v10, (unint64_t)v9, v8, (unint64_t *)&v40);
            int64_t v10 = v40;
            uint64_t v9 = v41;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v9);
            }
            unint64_t v33 = 0;
            unint64_t v34 = *(void *)(v10 + 16);
            while (1)
            {
              if (v34 == v33) {
                goto LABEL_43;
              }
              if (v33 >= *((void *)v9 + 2)) {
                goto LABEL_44;
              }
              uint64_t v36 = &v9[4 * v33];
              unint64_t v37 = *((unsigned int *)v36 + 8) * (unint64_t)*(unsigned int *)(v10 + 4 * v33 + 32);
              unint64_t v38 = 4293918721 * (-1048577 * v37);
              uint64_t v39 = __CFADD__(v38, v37);
              unint64_t v35 = (v38 + v37) >> 32;
              if (v39)
              {
                uint64_t v39 = __CFADD__(v35, 0xFFFFF);
                LODWORD(v35) = v35 + 0xFFFFF;
                if (v39)
                {
                  __break(1u);
                  goto LABEL_42;
                }
              }
              else if (v35 >= 0xFFF00001)
              {
                LODWORD(v35) = v35 + 0xFFFFF;
              }
              ++v33;
              *((_DWORD *)v36 + 8) = v35;
              if (v8 == v33) {
                goto LABEL_18;
              }
            }
          }
        }
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v14);
      }
    }
    uint64_t v40 = MEMORY[0x263F8EE78];
    BOOL v41 = (char *)MEMORY[0x263F8EE78];
    specialized discreteFourierTransform<A, B, C>(input:size:output:)(v13, a2, v12, 0, (unint64_t *)&v41);
    specialized discreteFourierTransform<A, B, C>(input:size:output:)(v11, v10, (unint64_t)v9, 0, (unint64_t *)&v40);
    uint64_t v9 = v41;
LABEL_18:
    specialized inverseDiscreteFourierTransform<A, B, C>(input:size:output:)((uint64_t)v9, v8, v7);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  char **v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  BOOL v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  char *v45;

  unint64_t v15 = a3 >> 1;
  unint64_t v16 = (unint64_t)a6 >> 1;
  if (a3 >> 1 != a2 && v16 != a5)
  {
    BOOL v19 = __OFSUB__(v15, a2);
    unint64_t v20 = v15 - a2;
    if (v19) {
      goto LABEL_51;
    }
    int64_t v10 = a5;
    BOOL v19 = __OFSUB__(v16, a5);
    unint64_t v21 = v16 - a5;
    if (v19) {
      goto LABEL_52;
    }
    BOOL v19 = __OFADD__(v20, v21);
    unint64_t v22 = v20 + v21;
    if (v19) {
      goto LABEL_53;
    }
    uint64_t v13 = result;
    if (__OFSUB__(v22, 1)) {
      goto LABEL_54;
    }
    int64_t v7 = a7;
    uint64_t v9 = a6;
    uint64_t v11 = a4;
    unint64_t v12 = a3;
    uint64_t v23 = specialized FixedWidthInteger.nextPowerOfTwo.getter(v22 - 1);
    uint64_t v14 = *v7;
    if (*((void *)*v7 + 2) < v23) {
      goto LABEL_55;
    }
    uint64_t v8 = v23;
    if (v23 < 0) {
      goto LABEL_56;
    }
    if (v23)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_57;
      }
      while (1)
      {
        unint64_t v24 = *((void *)v14 + 2);
        unint64_t v25 = v8 - 1;
        if (v24 < v8 - 1) {
          unint64_t v25 = *((void *)v14 + 2);
        }
        if (v25 > 3)
        {
          unint64_t v27 = v25 + 1;
          uint64_t v28 = v27 & 3;
          if ((v27 & 3) == 0) {
            uint64_t v28 = 4;
          }
          unint64_t v26 = v27 - v28;
          unint64_t v29 = v14 + 48;
          unint64_t v30 = v26;
          do
          {
            *(v29 - 1) = 0uLL;
            _OWORD *v29 = 0uLL;
            v29 += 2;
            v30 -= 4;
          }
          while (v30);
        }
        else
        {
          unint64_t v26 = 0;
        }
        while (v26 < v24)
        {
          *(void *)&v14[8 * v26++ + 32] = 0;
          if (v8 == v26)
          {
            *int64_t v7 = v14;
            if (v8 <= 0)
            {
              uint64_t v14 = (char *)(8 * v8);
              uint64_t v32 = MEMORY[0x263F8EE78];
              bzero((void *)(MEMORY[0x263F8EE78] + 32), 8 * v8);
              unint64_t v45 = (char *)v32;
            }
            else
            {
              uint64_t v31 = static Array._allocateBufferUninitialized(minimumCapacity:)();
              *(void *)(v31 + 16) = v8;
              uint64_t v14 = (char *)(8 * v8);
              bzero((void *)(v31 + 32), 8 * v8);
              unint64_t v45 = (char *)v31;
              uint64_t v32 = static Array._allocateBufferUninitialized(minimumCapacity:)();
              *(void *)(v32 + 16) = v8;
            }
            bzero((void *)(v32 + 32), (size_t)v14);
            int64_t v44 = v32;
            specialized discreteFourierTransform<A, B, C>(input:size:output:)(v13, a2, v12, v8, (unint64_t *)&v45);
            specialized discreteFourierTransform<A, B, C>(input:size:output:)(v11, v10, (unint64_t)v9, v8, (unint64_t *)&v44);
            int64_t v10 = v44;
            uint64_t v9 = v45;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v9);
            }
            unint64_t v33 = 0;
            while (1)
            {
              if (v33 >= *(void *)(v10 + 16)) {
                goto LABEL_48;
              }
              if (v33 >= *((void *)v9 + 2)) {
                goto LABEL_49;
              }
              unint64_t v38 = &v9[8 * v33];
              uint64_t v39 = *((void *)v38 + 4);
              uint64_t v40 = *(void *)(v10 + 8 * v33 + 32);
              BOOL v41 = (v39 * (unsigned __int128)v40) >> 64;
              uint64_t v42 = (0xFFFFFFFEFFFFFFFFLL * v39 * v40 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
              unint64_t v34 = __CFADD__(-(uint64_t)(v39 * v40), v39 * v40);
              unint64_t v43 = v42 + v41;
              if (__CFADD__(v42, v41)) {
                goto LABEL_33;
              }
              if (v43 == -1)
              {
                if (v34)
                {
                  unint64_t v34 = 1;
LABEL_33:
                  unint64_t v35 = v34 + v43;
                  uint64_t v36 = __CFADD__(v35, 0xFFFFFFFFLL);
                  unint64_t v37 = v35 + 0xFFFFFFFFLL;
                  if (v36) {
                    goto LABEL_50;
                  }
                  goto LABEL_34;
                }
                unint64_t v37 = 4294967294;
              }
              else
              {
                unint64_t v37 = v43 + v34;
                if (v37 >= 0xFFFFFFFF00000001) {
                  v37 += 0xFFFFFFFFLL;
                }
              }
LABEL_34:
              ++v33;
              *((void *)v38 + 4) = v37;
              if (v8 == v33) {
                goto LABEL_18;
              }
            }
          }
        }
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v14);
      }
    }
    int64_t v44 = MEMORY[0x263F8EE78];
    unint64_t v45 = (char *)MEMORY[0x263F8EE78];
    specialized discreteFourierTransform<A, B, C>(input:size:output:)(v13, a2, v12, 0, (unint64_t *)&v45);
    specialized discreteFourierTransform<A, B, C>(input:size:output:)(v11, v10, (unint64_t)v9, 0, (unint64_t *)&v44);
    uint64_t v9 = v45;
LABEL_18:
    specialized inverseDiscreteFourierTransform<A, B, C>(input:size:output:)((uint64_t)v9, v8, v7);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized convolveDirectly<A, B, C, D>(_:withKernel:result:)(uint64_t result, int64_t a2, unint64_t a3, int64_t a4, uint64_t a5, unint64_t a6, uint64_t *a7)
{
  int64_t v49 = a3 >> 1;
  int64_t v12 = a6 >> 1;
  if (a3 >> 1 != a2 && v12 != a5)
  {
    int64_t v14 = a2;
    unint64_t v15 = v49 - a2;
    if (__OFSUB__(v49, a2)) {
      goto LABEL_81;
    }
    uint64_t v9 = a5;
    unint64_t v10 = v12 - a5;
    if (__OFSUB__(v12, a5)) {
      goto LABEL_82;
    }
    unint64_t v16 = (char *)(v15 + v10);
    if (__OFADD__(v15, v10)) {
      goto LABEL_83;
    }
    BOOL v17 = __OFSUB__(v16, 1);
    BOOL v18 = v16 - 1;
    if (v17) {
      goto LABEL_84;
    }
    uint64_t v8 = *a7;
    if (*(void *)(*a7 + 16) < (uint64_t)v18) {
      goto LABEL_85;
    }
    if (((unint64_t)v18 & 0x8000000000000000) != 0) {
      goto LABEL_86;
    }
    int64_t v11 = a4;
    uint64_t v7 = result;
    if (!v18) {
      goto LABEL_28;
    }
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0) {
      goto LABEL_88;
    }
    while (1)
    {
      unint64_t v19 = *(void *)(v8 + 16);
      unint64_t v20 = v12 + v49 - (v9 + v14) - 2;
      if (v20 >= v19) {
        unint64_t v20 = *(void *)(v8 + 16);
      }
      if (v20 > 3)
      {
        unint64_t v22 = v20 + 1;
        uint64_t v23 = v22 & 3;
        if ((v22 & 3) == 0) {
          uint64_t v23 = 4;
        }
        unint64_t v21 = v22 - v23;
        unint64_t v24 = (_OWORD *)(v8 + 48);
        unint64_t v25 = v21;
        do
        {
          *(v24 - 1) = 0uLL;
          _OWORD *v24 = 0uLL;
          v24 += 2;
          v25 -= 4;
        }
        while (v25);
      }
      else
      {
        unint64_t v21 = 0;
      }
      uint64_t v26 = v21 + v9 + v14 - v12 - v49 + 1;
      do
      {
        if (v21 >= v19) {
          goto LABEL_76;
        }
        uint64_t v27 = v8 + 8 * v21++;
        *(void *)(v27 + 32) = 0;
        BOOL v28 = __CFADD__(v26++, 1);
      }
      while (!v28);
      *a7 = v8;
LABEL_28:
      if ((v15 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_87:
      __break(1u);
LABEL_88:
      unint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v8);
      uint64_t v8 = result;
    }
    if (!v15) {
      return result;
    }
    if ((v10 & 0x8000000000000000) == 0)
    {
      uint64_t v29 = 0;
      if (v9 <= v12) {
        int64_t v30 = v12;
      }
      else {
        int64_t v30 = v9;
      }
      int64_t v45 = v30 - v9;
      int64_t v43 = v14;
      int64_t v44 = (void *)(v11 + 8 * v9);
      uint64_t v9 = 4;
      int64_t v12 = 0xCFFE47FFFEAFFFFFLL;
      BOOL v41 = (void *)v10;
      unint64_t v42 = v15;
      while (1)
      {
        if (v29 == v15) {
          goto LABEL_77;
        }
        if (v10) {
          break;
        }
LABEL_36:
        ++v29;
        ++v9;
        if (v29 == v15) {
          return result;
        }
      }
      int64_t v11 = v14 + v29;
      if (__OFADD__(v14, v29)) {
        goto LABEL_78;
      }
      if (v11 < v14)
      {
LABEL_79:
        __break(1u);
        goto LABEL_80;
      }
      uint64_t v47 = v9;
      uint64_t v48 = v29;
      int64_t v14 = v10;
      unint64_t v10 = (unint64_t)v44;
      int64_t v31 = v45;
      if (v11 >= v49)
      {
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
        goto LABEL_87;
      }
      while (1)
      {
        if (!v31)
        {
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
          goto LABEL_79;
        }
        unint64_t v33 = *(void *)(v7 + 8 * v11);
        uint64_t v34 = (*(unint64_t *)v10 * (unsigned __int128)v33) >> 64;
        uint64_t v35 = (0xCFFE47FFFEAFFFFFLL * *(void *)v10 * v33 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
        BOOL v36 = __CFADD__(-(uint64_t)(*(void *)v10 * v33), *(void *)v10 * v33);
        uint64_t v37 = v35 + v34;
        if (!__CFADD__(v35, v34))
        {
          if (v37 != -1)
          {
            unint64_t v39 = v37 + v36;
            if (v39 >= 0xFFFEB00001) {
              unint64_t v15 = v39 - 0xFFFEB00001;
            }
            else {
              unint64_t v15 = v39;
            }
            goto LABEL_60;
          }
          if (!v36)
          {
            unint64_t v15 = 0xFFFFFF00014FFFFELL;
            goto LABEL_60;
          }
          BOOL v36 = 1;
        }
        unint64_t v38 = v36 + v37;
        unint64_t v15 = v38 - 0xFFFEB00001;
        if (v38 >= 0xFFFEB00001) {
          goto LABEL_73;
        }
LABEL_60:
        unint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          unint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v8);
          uint64_t v8 = result;
        }
        if ((unint64_t)(v9 - 4) >= *(void *)(v8 + 16)) {
          goto LABEL_71;
        }
        unint64_t v32 = *(void *)(v8 + 8 * v9);
        if (v15)
        {
          unint64_t v40 = 0xFFFEB00001 - v15;
          if (v15 > 0xFFFEB00001) {
            goto LABEL_72;
          }
          if (v32 >= v40)
          {
            v32 -= v40;
          }
          else
          {
            if (v40 > 0xFFFEB00001) {
              goto LABEL_74;
            }
            BOOL v28 = __CFADD__(v32, v15);
            v32 += v15;
            if (v28) {
              goto LABEL_75;
            }
          }
        }
        *(void *)(v8 + 8 * v9) = v32;
        --v31;
        v10 += 8;
        ++v9;
        if (!--v14)
        {
          uint64_t v9 = v47;
          *a7 = v8;
          unint64_t v15 = v42;
          int64_t v14 = v43;
          unint64_t v10 = (unint64_t)v41;
          uint64_t v29 = v48;
          goto LABEL_36;
        }
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized convolveDirectly<A, B, C, D>(_:withKernel:result:)(uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t *a5)
{
  int64_t v40 = a3 >> 1;
  if (a3 >> 1 == a2) {
    return result;
  }
  unint64_t v8 = a4;
  uint64_t v39 = *(void *)(a4 + 16);
  if (!v39) {
    return result;
  }
  uint64_t v9 = v40 - a2;
  if (__OFSUB__(v40, a2)) {
    goto LABEL_65;
  }
  uint64_t v10 = v9 + v39;
  if (__OFADD__(v9, v39)) {
    goto LABEL_66;
  }
  BOOL v11 = __OFSUB__(v10, 1);
  uint64_t v12 = v10 - 1;
  if (v11) {
    goto LABEL_67;
  }
  unint64_t v5 = (unint64_t)a5;
  uint64_t v7 = *a5;
  if (*(void *)(*a5 + 16) < v12) {
    goto LABEL_68;
  }
  if (v12 < 0) {
    goto LABEL_69;
  }
  uint64_t v6 = result;
  if (!v12) {
    goto LABEL_21;
  }
  unint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_71;
  }
  while (1)
  {
    unint64_t v13 = *(void *)(v7 + 16);
    unint64_t v14 = v39 + v40 - a2 - 2;
    if (v13 < v14) {
      unint64_t v14 = *(void *)(v7 + 16);
    }
    if (v14 > 3)
    {
      unint64_t v16 = v14 + 1;
      uint64_t v17 = v16 & 3;
      if ((v16 & 3) == 0) {
        uint64_t v17 = 4;
      }
      unint64_t v15 = v16 - v17;
      BOOL v18 = (_OWORD *)(v7 + 48);
      unint64_t v19 = v15;
      do
      {
        *(v18 - 1) = 0uLL;
        *BOOL v18 = 0uLL;
        v18 += 2;
        v19 -= 4;
      }
      while (v19);
    }
    else
    {
      unint64_t v15 = 0;
    }
    do
    {
      if (v15 >= v13)
      {
LABEL_62:
        __break(1u);
        goto LABEL_63;
      }
      uint64_t v20 = v7 + 8 * v15++;
      *(void *)(v20 + 32) = 0;
    }
    while (a2 - v39 - v40 + v15 != -1);
    *(void *)unint64_t v5 = v7;
LABEL_21:
    if ((v9 & 0x8000000000000000) == 0) {
      break;
    }
LABEL_70:
    __break(1u);
LABEL_71:
    unint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
    uint64_t v7 = result;
  }
  if (!v9) {
    return result;
  }
  BOOL v36 = (void *)v5;
  uint64_t v37 = v9;
  uint64_t v21 = 0;
  unint64_t v38 = (unint64_t *)(v8 + 32);
  uint64_t v22 = 4;
  unint64_t v8 = 0xCFFE47FFFEAFFFFFLL;
  while (2)
  {
    if (__OFADD__(v21, 1))
    {
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    uint64_t v23 = v21 + a2;
    if (v21 + a2 >= v40 || v21 >= v9)
    {
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
    uint64_t v42 = v21 + 1;
    uint64_t v43 = v22;
    uint64_t v44 = v21 + 1;
    unint64_t v24 = v38;
    uint64_t v9 = v39;
    do
    {
      unint64_t v26 = *(void *)(v6 + 8 * v23);
      unint64_t v27 = *v24++;
      uint64_t v28 = (v27 * (unsigned __int128)v26) >> 64;
      uint64_t v29 = (0xCFFE47FFFEAFFFFFLL * v27 * v26 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
      BOOL v30 = __CFADD__(-(uint64_t)(v27 * v26), v27 * v26);
      uint64_t v31 = v29 + v28;
      if (!__CFADD__(v29, v28))
      {
        if (v31 != -1)
        {
          unint64_t v33 = v31 + v30;
          if (v33 >= 0xFFFEB00001) {
            unint64_t v5 = v33 - 0xFFFEB00001;
          }
          else {
            unint64_t v5 = v33;
          }
          goto LABEL_45;
        }
        if (!v30)
        {
          unint64_t v5 = 0xFFFFFF00014FFFFELL;
          goto LABEL_45;
        }
        BOOL v30 = 1;
      }
      unint64_t v32 = v30 + v31;
      unint64_t v5 = v32 - 0xFFFEB00001;
      if (v32 >= 0xFFFEB00001) {
        goto LABEL_59;
      }
LABEL_45:
      unint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        unint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
        uint64_t v7 = result;
      }
      if ((unint64_t)(v22 - 4) >= *(void *)(v7 + 16))
      {
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }
      unint64_t v25 = *(void *)(v7 + 8 * v22);
      if (v5)
      {
        unint64_t v34 = 0xFFFEB00001 - v5;
        if (v5 > 0xFFFEB00001) {
          goto LABEL_58;
        }
        if (v25 >= v34)
        {
          v25 -= v34;
        }
        else
        {
          if (v34 > 0xFFFEB00001) {
            goto LABEL_60;
          }
          BOOL v35 = __CFADD__(v25, v5);
          v25 += v5;
          if (v35) {
            goto LABEL_61;
          }
        }
      }
      *(void *)(v7 + 8 * v22++) = v25;
      --v9;
    }
    while (v9);
    uint64_t v22 = v43 + 1;
    uint64_t v9 = v37;
    uint64_t v21 = v44;
    if (v42 != v37) {
      continue;
    }
    break;
  }
  *BOOL v36 = v7;
  return result;
}

{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  BOOL v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v43;
  uint64_t v44;

  BOOL v41 = a3 >> 1;
  if (a3 >> 1 == a2) {
    return result;
  }
  unint64_t v8 = a4;
  int64_t v40 = *(void *)(a4 + 16);
  if (!v40) {
    return result;
  }
  uint64_t v9 = v41 - a2;
  if (__OFSUB__(v41, a2)) {
    goto LABEL_65;
  }
  uint64_t v10 = v9 + v40;
  if (__OFADD__(v9, v40)) {
    goto LABEL_66;
  }
  BOOL v11 = __OFSUB__(v10, 1);
  uint64_t v12 = v10 - 1;
  if (v11) {
    goto LABEL_67;
  }
  unint64_t v5 = a5;
  uint64_t v7 = *a5;
  if (*(void *)(*a5 + 16) < v12) {
    goto LABEL_68;
  }
  if (v12 < 0) {
    goto LABEL_69;
  }
  uint64_t v6 = result;
  if (!v12) {
    goto LABEL_21;
  }
  unint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_71;
  }
  while (1)
  {
    unint64_t v13 = *(void *)(v7 + 16);
    unint64_t v14 = v40 + v41 - a2 - 2;
    if (v13 < v14) {
      unint64_t v14 = *(void *)(v7 + 16);
    }
    if (v14 > 3)
    {
      unint64_t v16 = v14 + 1;
      uint64_t v17 = v16 & 3;
      if ((v16 & 3) == 0) {
        uint64_t v17 = 4;
      }
      unint64_t v15 = v16 - v17;
      BOOL v18 = (_OWORD *)(v7 + 48);
      unint64_t v19 = v15;
      do
      {
        *(v18 - 1) = 0uLL;
        *BOOL v18 = 0uLL;
        v18 += 2;
        v19 -= 4;
      }
      while (v19);
    }
    else
    {
      unint64_t v15 = 0;
    }
    do
    {
      if (v15 >= v13)
      {
LABEL_62:
        __break(1u);
        goto LABEL_63;
      }
      uint64_t v20 = v7 + 8 * v15++;
      *(void *)(v20 + 32) = 0;
    }
    while (a2 - v40 - v41 + v15 != -1);
    *unint64_t v5 = v7;
LABEL_21:
    if ((v9 & 0x8000000000000000) == 0) {
      break;
    }
LABEL_70:
    __break(1u);
LABEL_71:
    unint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
    uint64_t v7 = result;
  }
  if (!v9) {
    return result;
  }
  uint64_t v37 = v5;
  unint64_t v38 = v9;
  uint64_t v21 = 0;
  uint64_t v39 = (uint64_t *)(v8 + 32);
  uint64_t v22 = 4;
  unint64_t v8 = 0xFFFFFFFF00000001;
  while (2)
  {
    if (__OFADD__(v21, 1))
    {
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    uint64_t v23 = v21 + a2;
    if (v21 + a2 >= v41 || v21 >= v9)
    {
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
    uint64_t v43 = v21 + 1;
    uint64_t v44 = v21 + 1;
    unint64_t v5 = v39;
    uint64_t v9 = v40;
    unint64_t v24 = v22;
    do
    {
      unint64_t v26 = *(void *)(v6 + 8 * v23);
      unint64_t v27 = *v5++;
      uint64_t v28 = (v27 * (unsigned __int128)v26) >> 64;
      uint64_t v29 = (0xFFFFFFFEFFFFFFFFLL * v27 * v26 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      BOOL v30 = __CFADD__(-(uint64_t)(v27 * v26), v27 * v26);
      uint64_t v31 = v29 + v28;
      if (!__CFADD__(v29, v28))
      {
        if (v31 != -1)
        {
          unint64_t v34 = v31 + v30;
          if (v34 >= 0xFFFFFFFF00000001) {
            unint64_t v33 = v34 + 0xFFFFFFFF;
          }
          else {
            unint64_t v33 = v34;
          }
          goto LABEL_45;
        }
        if (!v30)
        {
          unint64_t v33 = 4294967294;
          goto LABEL_45;
        }
        BOOL v30 = 1;
      }
      unint64_t v32 = v30 + v31;
      unint64_t v33 = v32 + 0xFFFFFFFF;
      if (v32 >= 0xFFFFFFFF00000001) {
        goto LABEL_59;
      }
LABEL_45:
      unint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        unint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
        uint64_t v7 = result;
      }
      if ((unint64_t)(v24 - 4) >= *(void *)(v7 + 16))
      {
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }
      unint64_t v25 = *(void *)(v7 + 8 * v24);
      if (v33)
      {
        BOOL v35 = 0xFFFFFFFF00000001 - v33;
        if (v33 > 0xFFFFFFFF00000001) {
          goto LABEL_58;
        }
        if (v25 >= v35)
        {
          v25 -= v35;
        }
        else
        {
          if (v35 > 0xFFFFFFFF00000001) {
            goto LABEL_60;
          }
          BOOL v36 = __CFADD__(v25, v33);
          v25 += v33;
          if (v36) {
            goto LABEL_61;
          }
        }
      }
      *(void *)(v7 + 8 * v24++) = v25;
      --v9;
    }
    while (v9);
    ++v22;
    uint64_t v9 = v38;
    uint64_t v21 = v44;
    if (v43 != v38) {
      continue;
    }
    break;
  }
  *uint64_t v37 = v7;
  return result;
}

uint64_t specialized Data.init(capacity:)(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result < 15)
    {
      return 0;
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(capacity:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        unint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t outlined retain of PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of PINEInputShare<Field40, XofHmacSha256Aes128>(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of PrepareTransition<PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t result = swift_bridgeObjectRelease();
  if ((a8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Prio3Error and conformance Prio3Error()
{
  unint64_t result = lazy protocol witness table cache variable for type Prio3Error and conformance Prio3Error;
  if (!lazy protocol witness table cache variable for type Prio3Error and conformance Prio3Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prio3Error and conformance Prio3Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Prio3Error and conformance Prio3Error;
  if (!lazy protocol witness table cache variable for type Prio3Error and conformance Prio3Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prio3Error and conformance Prio3Error);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF7Field32Vs5NeverOTg50171_s4VDAF11PINECircuitPAAE21wraparoundDotProducts_6randomSay1FQzGs10ArraySliceVyAGG_AA25WraparoundJointRandomnessCyqd__AGGtAA12VDAFProtocolRd__lFAGSiXEfU_AA15PINEMainCircuits3AA7E48VSRySfGG_AA4PINEVyAstA19XofHmacSha256Aes128CGTG5s0qR0VyAIGAG0vwX0CyAG4PINEVyAISRySfGAG19XofHmacSha256Aes128CGAIGTf1cn_nTf4ngg_n(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t v8 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v9 = v7;
  uint64_t v10 = MEMORY[0x263F8EE78];
  if (!v8) {
    return v10;
  }
  uint64_t v12 = result;
  uint64_t v23 = MEMORY[0x263F8EE78];
  unint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8 & ~(v8 >> 63), 0);
  if ((v8 & 0x8000000000000000) == 0)
  {
    uint64_t v10 = v23;
    if (a2 <= v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = a2;
    }
    uint64_t v14 = v12;
    while (a2 != v14)
    {
      unint64_t result = specialized closure #1 in PINECircuit.wraparoundDotProducts<A>(_:random:)(a4, a5, a6, a7, &v22);
      if (v9)
      {
        swift_release();
        return v10;
      }
      uint64_t v9 = 0;
      unsigned int v15 = v22;
      uint64_t v23 = v10;
      unint64_t v17 = *(void *)(v10 + 16);
      unint64_t v16 = *(void *)(v10 + 24);
      if (v17 >= v16 >> 1)
      {
        unint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1);
        uint64_t v10 = v23;
      }
      *(void *)(v10 + 16) = v17 + 1;
      *(_DWORD *)(v10 + 4 * v17 + 32) = v15;
      if (a2 < v12) {
        goto LABEL_19;
      }
      if (v13 == v14) {
        goto LABEL_20;
      }
      if (a2 == ++v14) {
        return v10;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t specialized convolveDirectly<A, B, C, D>(_:withKernel:result:)(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t *a7)
{
  int64_t v45 = a3 >> 1;
  uint64_t v12 = a6 >> 1;
  if (a3 >> 1 != a2 && v12 != a5)
  {
    uint64_t v14 = a2;
    unint64_t v15 = v45 - a2;
    if (__OFSUB__(v45, a2)) {
      goto LABEL_74;
    }
    uint64_t v9 = a5;
    uint64_t v11 = v12 - a5;
    if (__OFSUB__(v12, a5)) {
      goto LABEL_75;
    }
    unint64_t v16 = (char *)(v15 + v11);
    if (__OFADD__(v15, v11)) {
      goto LABEL_76;
    }
    BOOL v17 = __OFSUB__(v16, 1);
    BOOL v18 = v16 - 1;
    if (v17) {
      goto LABEL_77;
    }
    uint64_t v8 = *a7;
    if (*(void *)(*a7 + 16) < (uint64_t)v18) {
      goto LABEL_78;
    }
    if (((unint64_t)v18 & 0x8000000000000000) != 0) {
      goto LABEL_79;
    }
    uint64_t v10 = a4;
    uint64_t v7 = result;
    if (!v18) {
      goto LABEL_28;
    }
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0) {
      goto LABEL_81;
    }
    while (1)
    {
      unint64_t v19 = *(void *)(v8 + 16);
      unint64_t v20 = v12 + v45 - (v9 + v14) - 2;
      if (v20 >= v19) {
        unint64_t v20 = *(void *)(v8 + 16);
      }
      if (v20 > 7)
      {
        unint64_t v22 = v20 + 1;
        uint64_t v23 = v22 & 7;
        if ((v22 & 7) == 0) {
          uint64_t v23 = 8;
        }
        unint64_t v21 = v22 - v23;
        unint64_t v24 = (_OWORD *)(v8 + 48);
        unint64_t v25 = v21;
        do
        {
          *(v24 - 1) = 0uLL;
          _OWORD *v24 = 0uLL;
          v24 += 2;
          v25 -= 8;
        }
        while (v25);
      }
      else
      {
        unint64_t v21 = 0;
      }
      uint64_t v26 = v21 + v9 + v14 - v12 - v45 + 1;
      do
      {
        if (v21 >= v19)
        {
LABEL_69:
          __break(1u);
          goto LABEL_70;
        }
        uint64_t v27 = v8 + 4 * v21++;
        *(_DWORD *)(v27 + 32) = 0;
        BOOL v28 = __CFADD__(v26++, 1);
      }
      while (!v28);
      *a7 = v8;
LABEL_28:
      if ((v15 & 0x8000000000000000) == 0)
      {
        if (!v15) {
          return result;
        }
        if (v11 < 0)
        {
          __break(1u);
          return result;
        }
        uint64_t v29 = 0;
        if (v9 <= v12) {
          uint64_t v30 = v12;
        }
        else {
          uint64_t v30 = v9;
        }
        uint64_t v41 = v30 - v9;
        uint64_t v39 = v14;
        int64_t v40 = (unsigned int *)(v10 + 4 * v9);
        uint64_t v12 = 8;
        uint64_t v10 = 4293918721;
        uint64_t v37 = v11;
        unint64_t v38 = (unsigned int *)v15;
        while (v29 != (unsigned int *)v15)
        {
          if (v11)
          {
            uint64_t v44 = v29;
            uint64_t v31 = (uint64_t)v29 + v14;
            if (__OFADD__(v14, v29)) {
              goto LABEL_71;
            }
            if (v31 < v14) {
              goto LABEL_72;
            }
            uint64_t v14 = v11;
            uint64_t v43 = v12;
            unint64_t v15 = (unint64_t)v40;
            uint64_t v11 = v41;
            if (v31 >= v45) {
              goto LABEL_73;
            }
            while (v11)
            {
              unint64_t v33 = *(unsigned int *)v15 * (unint64_t)*(unsigned int *)(v7 + 4 * v31);
              uint64_t v34 = 4293918721 * (-1048577 * v33);
              BOOL v28 = __CFADD__(v34, v33);
              unint64_t v35 = (v34 + v33) >> 32;
              if (v28)
              {
                uint64_t v9 = (v35 + 0xFFFFF);
                if (v35 >= 0xFFF00001) {
                  goto LABEL_66;
                }
              }
              else if (v35 >= 0xFFF00001)
              {
                uint64_t v9 = (v35 + 0xFFFFF);
              }
              else
              {
                uint64_t v9 = v35;
              }
              unint64_t result = swift_isUniquelyReferenced_nonNull_native();
              if ((result & 1) == 0)
              {
                unint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v8);
                uint64_t v8 = result;
              }
              if ((unint64_t)(v12 - 8) >= *(void *)(v8 + 16)) {
                goto LABEL_64;
              }
              unsigned int v32 = *(_DWORD *)(v8 + 4 * v12);
              if (v9)
              {
                unsigned int v36 = -1048575 - v9;
                if (v9 > 0xFFF00001) {
                  goto LABEL_65;
                }
                if (v32 >= v36)
                {
                  v32 -= v36;
                }
                else
                {
                  if (v36 > 0xFFF00001) {
                    goto LABEL_67;
                  }
                  BOOL v28 = __CFADD__(v32, v9);
                  v32 += v9;
                  if (v28) {
                    goto LABEL_68;
                  }
                }
              }
              *(_DWORD *)(v8 + 4 * v12) = v32;
              --v11;
              v15 += 4;
              ++v12;
              if (!--v14)
              {
                uint64_t v12 = v43;
                *a7 = v8;
                unint64_t v15 = (unint64_t)v38;
                uint64_t v14 = v39;
                uint64_t v11 = v37;
                uint64_t v29 = v44;
                goto LABEL_36;
              }
            }
            __break(1u);
LABEL_64:
            __break(1u);
LABEL_65:
            __break(1u);
LABEL_66:
            __break(1u);
LABEL_67:
            __break(1u);
LABEL_68:
            __break(1u);
            goto LABEL_69;
          }
LABEL_36:
          uint64_t v29 = (unsigned int *)((char *)v29 + 1);
          ++v12;
          if (v29 == (unsigned int *)v15) {
            return result;
          }
        }
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
      }
      __break(1u);
LABEL_81:
      unint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v8);
      uint64_t v8 = result;
    }
  }
  return result;
}

uint64_t specialized closure #1 in PINE.splitSeedBytes<A>(_:)(uint64_t *a1)
{
  uint64_t v5 = a1[2];
  unint64_t v6 = a1[3];
  int64_t v7 = v6 >> 1;
  unint64_t v8 = (v6 >> 1) - v5;
  if (__OFSUB__(v6 >> 1, v5))
  {
    __break(1u);
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  uint64_t v1 = (unint64_t *)a1;
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  unint64_t v4 = v6 >> 1;
  if (v8 >= 0x20)
  {
    unint64_t v4 = v5 + 32;
    if (__OFADD__(v5, 32)) {
      goto LABEL_114;
    }
  }
  if ((uint64_t)v4 < v5) {
    goto LABEL_87;
  }
  if (v7 < v5)
  {
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  if (v7 < (uint64_t)v4)
  {
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
  if (v8 < 0x20) {
    goto LABEL_12;
  }
  if (__OFADD__(v5, 32)) {
    goto LABEL_115;
  }
  if (v7 < v5 + 32)
  {
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  int64_t v7 = v5 + 32;
LABEL_12:
  if (v7 < v5)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  a1[2] = v7;
  if (v6)
  {
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    uint64_t v10 = swift_dynamicCastClass();
    if (!v10)
    {
      swift_unknownObjectRelease();
      uint64_t v10 = MEMORY[0x263F8EE78];
    }
    uint64_t v11 = *(void *)(v10 + 16);
    swift_release();
    if (__OFSUB__(v4, v5)) {
      goto LABEL_116;
    }
    if (v11 != v4 - v5) {
      goto LABEL_117;
    }
    uint64_t v5 = swift_dynamicCastClass();
    if (!v5)
    {
      swift_unknownObjectRelease();
      uint64_t v5 = MEMORY[0x263F8EE78];
    }
    goto LABEL_22;
  }
  swift_unknownObjectRetain();
  while (1)
  {
    unint64_t v6 = v6 & 1 | (2 * v4);
    specialized _copyCollectionToContiguousArray<A>(_:)(v2, v3, v5, v6);
    uint64_t v5 = v9;
LABEL_22:
    swift_unknownObjectRelease();
    uint64_t v2 = v1[2];
    unint64_t v3 = v1[3];
    int64_t v12 = v3 >> 1;
    unint64_t v13 = (v3 >> 1) - v2;
    if (__OFSUB__(v3 >> 1, v2))
    {
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
      goto LABEL_113;
    }
    unint64_t v6 = *v1;
    uint64_t v14 = v1[1];
    int64_t v15 = v3 >> 1;
    if (v13 >= 0x20)
    {
      int64_t v15 = v2 + 32;
      if (__OFADD__(v2, 32))
      {
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
LABEL_121:
        swift_unknownObjectRelease();
LABEL_36:
        unint64_t v3 = v3 & 1 | (2 * v15);
        specialized _copyCollectionToContiguousArray<A>(_:)(v6, v14, v2, v3);
        goto LABEL_43;
      }
    }
    if (v15 < v2) {
      goto LABEL_94;
    }
    if (v12 < v2) {
      goto LABEL_95;
    }
    if (v12 < v15) {
      goto LABEL_96;
    }
    if (v15 < 0) {
      goto LABEL_97;
    }
    if (v13 >= 0x20)
    {
      if (__OFADD__(v2, 32)) {
        goto LABEL_119;
      }
      if (v12 < v2 + 32) {
        goto LABEL_98;
      }
      int64_t v12 = v2 + 32;
    }
    if (v12 < v2) {
      goto LABEL_99;
    }
    v1[2] = v12;
    if ((v3 & 1) == 0)
    {
      swift_unknownObjectRetain();
      goto LABEL_36;
    }
    unint64_t v4 = type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    uint64_t v16 = swift_dynamicCastClass();
    if (!v16)
    {
      swift_unknownObjectRelease();
      uint64_t v16 = MEMORY[0x263F8EE78];
    }
    uint64_t v17 = *(void *)(v16 + 16);
    swift_release();
    if (__OFSUB__(v15, v2)) {
      goto LABEL_120;
    }
    if (v17 != v15 - v2) {
      goto LABEL_121;
    }
    if (!swift_dynamicCastClass()) {
      swift_unknownObjectRelease();
    }
LABEL_43:
    swift_unknownObjectRelease();
    unint64_t v6 = v1[2];
    unint64_t v18 = v1[3];
    int64_t v19 = v18 >> 1;
    unint64_t v20 = (v18 >> 1) - v6;
    if (__OFSUB__(v18 >> 1, v6)) {
      goto LABEL_100;
    }
    unint64_t v3 = *v1;
    uint64_t v21 = v1[1];
    int64_t v22 = v18 >> 1;
    if (v20 >= 0x20)
    {
      int64_t v22 = v6 + 32;
      if (__OFADD__(v6, 32))
      {
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        swift_unknownObjectRelease();
        uint64_t v5 = v2;
        uint64_t v21 = v34;
LABEL_57:
        specialized _copyCollectionToContiguousArray<A>(_:)(v3, v21, v6, v18 & 1 | (2 * v22));
        LOBYTE(v6) = v23;
        goto LABEL_64;
      }
    }
    if (v22 < (uint64_t)v6) {
      goto LABEL_101;
    }
    if (v19 < (uint64_t)v6) {
      goto LABEL_102;
    }
    if (v19 < v22) {
      goto LABEL_103;
    }
    if (v22 < 0) {
      goto LABEL_104;
    }
    if (v20 >= 0x20)
    {
      if (__OFADD__(v6, 32)) {
        goto LABEL_123;
      }
      if (v19 < (uint64_t)(v6 + 32)) {
        goto LABEL_105;
      }
      int64_t v19 = v6 + 32;
    }
    if (v19 < (uint64_t)v6) {
      goto LABEL_106;
    }
    v1[2] = v19;
    if ((v18 & 1) == 0)
    {
      swift_unknownObjectRetain();
      goto LABEL_57;
    }
    uint64_t v34 = v21;
    uint64_t v2 = v5;
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    uint64_t v24 = swift_dynamicCastClass();
    if (!v24)
    {
      swift_unknownObjectRelease();
      uint64_t v24 = MEMORY[0x263F8EE78];
    }
    uint64_t v25 = *(void *)(v24 + 16);
    swift_release();
    if (__OFSUB__(v22, v6)) {
      goto LABEL_124;
    }
    if (v25 != v22 - v6) {
      goto LABEL_125;
    }
    unint64_t v6 = swift_dynamicCastClass();
    uint64_t v5 = v2;
    if (!v6)
    {
      swift_unknownObjectRelease();
      LOBYTE(v6) = MEMORY[0x263F8EE78];
    }
LABEL_64:
    swift_unknownObjectRelease();
    uint64_t v26 = v1[2];
    unint64_t v4 = v1[3];
    uint64_t v27 = v4 >> 1;
    unint64_t v28 = (v4 >> 1) - v26;
    if (__OFSUB__(v4 >> 1, v26)) {
      goto LABEL_107;
    }
    unint64_t v3 = *v1;
    uint64_t v29 = v1[1];
    uint64_t v30 = v4 >> 1;
    if (v28 >= 0x20)
    {
      uint64_t v30 = v26 + 32;
      if (__OFADD__(v26, 32))
      {
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        swift_unknownObjectRelease();
        uint64_t v5 = v2;
        uint64_t v29 = v34;
LABEL_78:
        specialized _copyCollectionToContiguousArray<A>(_:)(v3, v29, v26, v4 & 1 | (2 * v30));
        goto LABEL_85;
      }
    }
    if (v30 < v26) {
      goto LABEL_108;
    }
    if (v27 < v26) {
      goto LABEL_109;
    }
    if (v27 < v30) {
      goto LABEL_110;
    }
    if (v30 < 0) {
      goto LABEL_111;
    }
    if (v28 >= 0x20)
    {
      if (__OFADD__(v26, 32)) {
        goto LABEL_127;
      }
      if (v27 < v26 + 32) {
        goto LABEL_112;
      }
      uint64_t v27 = v26 + 32;
    }
    if (v27 >= v26) {
      break;
    }
LABEL_113:
    __break(1u);
LABEL_114:
    __break(1u);
LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
LABEL_117:
    swift_unknownObjectRelease();
  }
  v1[2] = v27;
  if ((v4 & 1) == 0)
  {
    swift_unknownObjectRetain();
    goto LABEL_78;
  }
  uint64_t v34 = v29;
  uint64_t v2 = v5;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v31 = swift_dynamicCastClass();
  if (!v31)
  {
    swift_unknownObjectRelease();
    uint64_t v31 = MEMORY[0x263F8EE78];
  }
  uint64_t v32 = *(void *)(v31 + 16);
  swift_release();
  if (__OFSUB__(v30, v26)) {
    goto LABEL_128;
  }
  if (v32 != v30 - v26) {
    goto LABEL_129;
  }
  uint64_t v5 = v2;
  if (!swift_dynamicCastClass()) {
    swift_unknownObjectRelease();
  }
LABEL_85:
  swift_unknownObjectRelease();
  return v5;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF7Field40Vs5NeverOTg50171_s4VDAF11PINECircuitPAAE21wraparoundDotProducts_6randomSay1FQzGs10ArraySliceVyAGG_AA25WraparoundJointRandomnessCyqd__AGGtAA12VDAFProtocolRd__lFAGSiXEfU_AA15PINEMainCircuits3AA7E48VSRySfGG_AA4PINEVyAstA19XofHmacSha256Aes128CGTG5s0qR0VyAIGAG0vwX0CyAG4PINEVyAISRySfGAG19XofHmacSha256Aes128CGAIGTf1cn_nTf4ngg_nTm(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(BOOL, uint64_t, uint64_t), void *(*a10)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))
{
  uint64_t v11 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v10;
  uint64_t v13 = MEMORY[0x263F8EE78];
  if (!v11) {
    return (void *)v13;
  }
  int64_t v15 = result;
  uint64_t v28 = MEMORY[0x263F8EE78];
  unint64_t result = (void *)a9(0, v11 & ~(v11 >> 63), 0);
  if ((v11 & 0x8000000000000000) == 0)
  {
    uint64_t v13 = v28;
    if (a2 <= (uint64_t)v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = (void *)a2;
    }
    uint64_t v17 = v15;
    while ((void *)a2 != v17)
    {
      unint64_t result = a10(&v27, v17, a3, a4, a5, a6, a7, v26);
      if (v12)
      {
        swift_release();
        return (void *)v13;
      }
      uint64_t v12 = 0;
      uint64_t v18 = v27;
      uint64_t v28 = v13;
      unint64_t v20 = *(void *)(v13 + 16);
      unint64_t v19 = *(void *)(v13 + 24);
      if (v20 >= v19 >> 1)
      {
        unint64_t result = (void *)a9(v19 > 1, v20 + 1, 1);
        uint64_t v13 = v28;
      }
      *(void *)(v13 + 16) = v20 + 1;
      *(void *)(v13 + 8 * v20 + 32) = v18;
      if (a2 < (uint64_t)v15) {
        goto LABEL_19;
      }
      if (v16 == v17) {
        goto LABEL_20;
      }
      uint64_t v17 = (void *)((char *)v17 + 1);
      if ((void *)a2 == v17) {
        return (void *)v13;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t specialized convolveDirectly<A, B, C, D>(_:withKernel:result:)(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, int64_t a5, unint64_t a6, uint64_t *a7)
{
  int64_t v51 = a3 >> 1;
  uint64_t v12 = a6 >> 1;
  if (a3 >> 1 != a2 && v12 != a5)
  {
    uint64_t v14 = a2;
    uint64_t v15 = v51 - a2;
    if (__OFSUB__(v51, a2)) {
      goto LABEL_81;
    }
    int64_t v9 = a5;
    uint64_t v11 = v12 - a5;
    if (__OFSUB__(v12, a5)) {
      goto LABEL_82;
    }
    uint64_t v16 = v15 + v11;
    if (__OFADD__(v15, v11)) {
      goto LABEL_83;
    }
    BOOL v17 = __OFSUB__(v16, 1);
    uint64_t v18 = v16 - 1;
    if (v17) {
      goto LABEL_84;
    }
    uint64_t v8 = *a7;
    if (*(void *)(*a7 + 16) < v18) {
      goto LABEL_85;
    }
    if (v18 < 0) {
      goto LABEL_86;
    }
    uint64_t v10 = a4;
    uint64_t v7 = result;
    if (!v18) {
      goto LABEL_28;
    }
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0) {
      goto LABEL_88;
    }
    while (1)
    {
      unint64_t v19 = *(void *)(v8 + 16);
      unint64_t v20 = v12 + v51 - (v9 + v14) - 2;
      if (v20 >= v19) {
        unint64_t v20 = *(void *)(v8 + 16);
      }
      if (v20 > 3)
      {
        unint64_t v22 = v20 + 1;
        uint64_t v23 = v22 & 3;
        if ((v22 & 3) == 0) {
          uint64_t v23 = 4;
        }
        unint64_t v21 = v22 - v23;
        uint64_t v24 = (_OWORD *)(v8 + 48);
        unint64_t v25 = v21;
        do
        {
          *(v24 - 1) = 0uLL;
          _OWORD *v24 = 0uLL;
          v24 += 2;
          v25 -= 4;
        }
        while (v25);
      }
      else
      {
        unint64_t v21 = 0;
      }
      uint64_t v26 = v21 + v9 + v14 - v12 - v51 + 1;
      do
      {
        if (v21 >= v19) {
          goto LABEL_76;
        }
        uint64_t v27 = v8 + 8 * v21++;
        *(void *)(v27 + 32) = 0;
        BOOL v28 = __CFADD__(v26++, 1);
      }
      while (!v28);
      *a7 = v8;
LABEL_28:
      if ((v15 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_87:
      __break(1u);
LABEL_88:
      unint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v8);
      uint64_t v8 = result;
    }
    if (!v15) {
      return result;
    }
    if ((v11 & 0x8000000000000000) == 0)
    {
      uint64_t v29 = 0;
      if (v9 <= v12) {
        uint64_t v30 = v12;
      }
      else {
        uint64_t v30 = v9;
      }
      uint64_t v47 = v30 - v9;
      uint64_t v45 = v14;
      unint64_t v46 = (void *)(v10 + 8 * v9);
      uint64_t v31 = 4;
      int64_t v9 = 0xFFFFFFFF00000001;
      uint64_t v12 = 0xFFFFFFFFLL;
      uint64_t v43 = v11;
      uint64_t v44 = v15;
      while (1)
      {
        if (v29 == v15) {
          goto LABEL_77;
        }
        if (v11) {
          break;
        }
LABEL_36:
        ++v29;
        ++v31;
        if (v29 == v15) {
          return result;
        }
      }
      uint64_t v10 = v14 + v29;
      if (__OFADD__(v14, v29)) {
        goto LABEL_78;
      }
      if (v10 < v14)
      {
LABEL_79:
        __break(1u);
        goto LABEL_80;
      }
      uint64_t v49 = v31;
      uint64_t v50 = v29;
      uint64_t v15 = v31;
      uint64_t v32 = v46;
      uint64_t v14 = v47;
      if (v10 >= v51)
      {
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
        goto LABEL_87;
      }
      while (1)
      {
        if (!v14)
        {
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
          goto LABEL_79;
        }
        unint64_t v34 = *(void *)(v7 + 8 * v10);
        uint64_t v35 = ((unint64_t)*v32 * (unsigned __int128)v34) >> 64;
        uint64_t v36 = (0xFFFFFFFEFFFFFFFFLL * *v32 * v34 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
        BOOL v37 = __CFADD__(-(uint64_t)(*v32 * v34), *v32 * v34);
        uint64_t v38 = v36 + v35;
        if (!__CFADD__(v36, v35))
        {
          if (v38 != -1)
          {
            unint64_t v41 = v38 + v37;
            if (v41 >= 0xFFFFFFFF00000001) {
              unint64_t v40 = v41 + 0xFFFFFFFF;
            }
            else {
              unint64_t v40 = v41;
            }
            goto LABEL_60;
          }
          if (!v37)
          {
            unint64_t v40 = 4294967294;
            goto LABEL_60;
          }
          BOOL v37 = 1;
        }
        unint64_t v39 = v37 + v38;
        unint64_t v40 = v39 + 0xFFFFFFFF;
        if (v39 >= 0xFFFFFFFF00000001) {
          goto LABEL_73;
        }
LABEL_60:
        unint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          unint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v8);
          uint64_t v8 = result;
        }
        if ((unint64_t)(v15 - 4) >= *(void *)(v8 + 16)) {
          goto LABEL_71;
        }
        unint64_t v33 = *(void *)(v8 + 8 * v15);
        if (v40)
        {
          unint64_t v42 = 0xFFFFFFFF00000001 - v40;
          if (v40 > 0xFFFFFFFF00000001) {
            goto LABEL_72;
          }
          if (v33 >= v42)
          {
            v33 -= v42;
          }
          else
          {
            if (v42 > 0xFFFFFFFF00000001) {
              goto LABEL_74;
            }
            BOOL v28 = __CFADD__(v33, v40);
            v33 += v40;
            if (v28) {
              goto LABEL_75;
            }
          }
        }
        *(void *)(v8 + 8 * v15) = v33;
        --v14;
        ++v32;
        ++v15;
        if (!--v11)
        {
          *a7 = v8;
          uint64_t v15 = v44;
          uint64_t v14 = v45;
          uint64_t v11 = v43;
          uint64_t v31 = v49;
          uint64_t v29 = v50;
          goto LABEL_36;
        }
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized closure #1 in PINEPublicShare.init<A>(from:parameter:)(uint64_t *a1)
{
  uint64_t v4 = a1[2];
  unint64_t v5 = a1[3];
  uint64_t v6 = v5 >> 1;
  unint64_t v7 = (v5 >> 1) - v4;
  if (__OFSUB__(v5 >> 1, v4))
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = v5 >> 1;
  if (v7 >= 0x20)
  {
    uint64_t v3 = v4 + 32;
    if (__OFADD__(v4, 32)) {
      goto LABEL_30;
    }
  }
  if (v3 < v4) {
    goto LABEL_24;
  }
  if (v6 < v4)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v6 < v3)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v3 < 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v7 < 0x20) {
    goto LABEL_12;
  }
  if (__OFADD__(v4, 32))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (v6 < v4 + 32)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v6 = v4 + 32;
LABEL_12:
  if (v6 < v4)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  a1[2] = v6;
  if ((v5 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_15:
    specialized _copyCollectionToContiguousArray<A>(_:)(v1, v2, v4, v5 & 1 | (2 * v3));
    uint64_t v9 = v8;
    goto LABEL_22;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v10 = swift_dynamicCastClass();
  if (!v10)
  {
    swift_unknownObjectRelease();
    uint64_t v10 = MEMORY[0x263F8EE78];
  }
  uint64_t v11 = *(void *)(v10 + 16);
  swift_release();
  if (__OFSUB__(v3, v4)) {
    goto LABEL_32;
  }
  if (v11 != v3 - v4)
  {
LABEL_33:
    swift_unknownObjectRelease();
    goto LABEL_15;
  }
  uint64_t v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    uint64_t v9 = MEMORY[0x263F8EE78];
  }
LABEL_22:
  swift_unknownObjectRelease();
  return v9;
}

int64_t specialized static VDAFProtocol.decodeProofShare<A>(_:aggregatorID:count:makeXOF:)(int64_t a1, char a2, int64_t a3, uint64_t (*a4)(int64_t))
{
  int64_t v5 = a1;
  if (a2)
  {
    uint64_t v6 = a4(a1);
    int64_t v5 = specialized static FieldElement.randomVector<A>(count:using:)(a3, v6);
    swift_release();
  }
  else if (*(void *)(a1 + 16) == a3)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(51);
    v7._object = (void *)0x8000000260BFECA0;
    v7._countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v7);
    v8._countAndFlagsBits = 0xD000000000000027;
    v8._object = (void *)0x8000000260BFECC0;
    String.append(_:)(v8);
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 0x3D746F67202CLL;
    v10._object = (void *)0xE600000000000000;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    int64_t v5 = 0;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v12 = 0;
    *(void *)(v12 + 8) = 0xE000000000000000;
    *(unsigned char *)(v12 + 16) = 1;
    swift_willThrow();
  }
  return v5;
}

unint64_t specialized static VDAFProtocol.decodeProofShare<A>(_:aggregatorID:count:makeXOF:)(unint64_t a1, char a2, unint64_t a3, uint64_t (*a4)(unint64_t), uint64_t a5, void (*a6)(BOOL, unint64_t, uint64_t), void (*a7)(uint64_t *__return_ptr, uint64_t))
{
  unint64_t v8 = a1;
  if (a2)
  {
    uint64_t v11 = a4(a1);
    unint64_t v8 = specialized static FieldElement.randomVector<A>(count:using:)(a3, v11, a6, a7);
    swift_release();
  }
  else if (*(void *)(a1 + 16) == a3)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(51);
    v12._object = (void *)0x8000000260BFECA0;
    v12._countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v12);
    v13._countAndFlagsBits = 0xD000000000000027;
    v13._object = (void *)0x8000000260BFECC0;
    String.append(_:)(v13);
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 0x3D746F67202CLL;
    v15._object = (void *)0xE600000000000000;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    unint64_t v8 = 0;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v17 = 0;
    *(void *)(v17 + 8) = 0xE000000000000000;
    *(unsigned char *)(v17 + 16) = 1;
    swift_willThrow();
  }
  return v8;
}

uint64_t specialized PINECircuit.decode<A>(data:numOfMeasurements:into:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3 != *(void *)(v2 + 96))
  {
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    unint64_t v21 = 0xD000000000000016;
    unint64_t v22 = 0x8000000260BFE7F0;
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 540877088;
    v16._object = (void *)0xE400000000000000;
    String.append(_:)(v16);
LABEL_25:
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v20 = v21;
    *(void *)(v20 + 8) = v22;
    *(unsigned char *)(v20 + 16) = 2;
    return swift_willThrow();
  }
  if (*(void *)(a2 + 8) != v3)
  {
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    unint64_t v21 = 0xD000000000000010;
    unint64_t v22 = 0x8000000260BFE810;
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 540877088;
    v18._object = (void *)0xE400000000000000;
    String.append(_:)(v18);
    goto LABEL_25;
  }
  if (v3)
  {
    unint64_t v4 = *(void *)(v2 + 88);
    int64_t v5 = *(float **)a2;
    uint64_t v6 = (uint64_t *)(result + 32);
    uint64_t v7 = 1 << v4;
    if (v4 >= 0x40) {
      uint64_t v7 = 0;
    }
    unint64_t v8 = 1uLL >> -(char)v4;
    if (v4 - 65 >= 0xFFFFFFFFFFFFFF7FLL) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = 0;
    }
    if (v4 <= 0xFFFFFFFFFFFFFFC0) {
      unint64_t v8 = 0;
    }
    do
    {
      uint64_t v10 = *v6++;
      unint64_t v11 = (0xCFFE47FFFEAFFFFFLL * v10 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
      if (__CFADD__(-v10, v10)) {
        unint64_t v12 = v11 + 1;
      }
      else {
        unint64_t v12 = v11;
      }
      if (v12 >= 0xFFFEB00001) {
        unint64_t v12 = 0;
      }
      float v13 = -(float)(0xFFFEB00001 - v12);
      if (v12 <= 0x7FFF580000) {
        float v13 = (float)v12;
      }
      if (v4 <= 0xFFFFFFFFFFFFFFBFLL) {
        uint64_t v14 = v9;
      }
      else {
        uint64_t v14 = v8;
      }
      *v5++ = v13 / (float)v14;
      --v3;
    }
    while (v3);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  float *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  uint64_t v3 = *(void *)(result + 16);
  if (v3 != *(void *)(v2 + 96))
  {
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    uint64_t v20 = 0xD000000000000016;
    unint64_t v21 = 0x8000000260BFE7F0;
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 540877088;
    v15._object = (void *)0xE400000000000000;
    String.append(_:)(v15);
LABEL_26:
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)Swift::String v19 = v20;
    *(void *)(v19 + 8) = v21;
    *(unsigned char *)(v19 + 16) = 2;
    return swift_willThrow();
  }
  if (*(void *)(a2 + 8) != v3)
  {
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    uint64_t v20 = 0xD000000000000010;
    unint64_t v21 = 0x8000000260BFE810;
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 540877088;
    v17._object = (void *)0xE400000000000000;
    String.append(_:)(v17);
    goto LABEL_26;
  }
  if (v3)
  {
    unint64_t v4 = *(void *)(v2 + 88);
    int64_t v5 = *(float **)a2;
    uint64_t v6 = (uint64_t *)(result + 32);
    uint64_t v7 = 1 << v4;
    if (v4 >= 0x40) {
      uint64_t v7 = 0;
    }
    unint64_t v8 = 1uLL >> -(char)v4;
    if (v4 - 65 >= 0xFFFFFFFFFFFFFF7FLL) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = 0;
    }
    if (v4 <= 0xFFFFFFFFFFFFFFC0) {
      unint64_t v8 = 0;
    }
    do
    {
      float v13 = *v6++;
      uint64_t v10 = (0xFFFFFFFEFFFFFFFFLL * v13 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      if (__CFADD__(-v13, v13))
      {
        if (v10 > 0xFFFFFFFEFFFFFFFFLL)
        {
          uint64_t v10 = 0;
          goto LABEL_13;
        }
        ++v10;
      }
      if (v10 >= 0x7FFFFFFF80000001)
      {
        unint64_t v11 = -(float)(0xFFFFFFFF00000001 - v10);
        goto LABEL_14;
      }
LABEL_13:
      unint64_t v11 = (float)v10;
LABEL_14:
      if (v4 <= 0xFFFFFFFFFFFFFFBFLL) {
        unint64_t v12 = v9;
      }
      else {
        unint64_t v12 = v8;
      }
      *v5++ = v11 / (float)v12;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t specialized PINE.unshard<A, B>(_:numOfMeasurements:into:parameter:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 16);
  if (!v3) {
    goto LABEL_29;
  }
  long long v4 = *(_OWORD *)(v2 + 104);
  uint64_t v5 = *(void *)(v2 + 104);
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_30:
    __break(1u);
  }
  else
  {
    uint64_t v6 = result;
    if ((void)v4)
    {
      uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v8 + 16) = v5;
      bzero((void *)(v8 + 32), 8 * v5);
    }
    else
    {
      uint64_t v8 = MEMORY[0x263F8EE78];
    }
    unint64_t result = swift_bridgeObjectRetain();
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        goto LABEL_28;
      }
      uint64_t v11 = *(void *)(v6 + 32 + 8 * v9);
      uint64_t v12 = *(void *)(v8 + 16);
      if (v12 != *(void *)(v11 + 16))
      {
LABEL_24:
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(28);
        swift_bridgeObjectRelease();
        v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        v20._countAndFlagsBits = 540877088;
        v20._object = (void *)0xE400000000000000;
        String.append(_:)(v20);
        v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v21);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
        swift_allocError();
        *(void *)uint64_t v22 = 0xD000000000000020;
        *(void *)(v22 + 8) = 0x8000000260BFF130;
        *(unsigned char *)(v22 + 16) = 1;
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      if (v12)
      {
        unint64_t result = swift_bridgeObjectRetain();
        uint64_t v13 = 4;
        while (1)
        {
          unint64_t v15 = *(void *)(v11 + 8 * v13);
          unint64_t v14 = *(void *)(v8 + 8 * v13);
          if (v15)
          {
            BOOL v16 = v15 <= 0xFFFEB00001;
            unint64_t v17 = 0xFFFEB00001 - v15;
            if (!v16)
            {
              __break(1u);
LABEL_27:
              __break(1u);
LABEL_28:
              __break(1u);
LABEL_29:
              __break(1u);
              goto LABEL_30;
            }
            if (v14 >= v17)
            {
              v14 -= v17;
            }
            else
            {
              BOOL v16 = v17 <= 0xFFFEB00001;
              unint64_t v18 = 0xFFFEB00001 - v17;
              if (!v16) {
                goto LABEL_27;
              }
              BOOL v16 = __CFADD__(v14, v18);
              v14 += v18;
              if (v16)
              {
                __break(1u);
                goto LABEL_24;
              }
            }
          }
          *(void *)(v8 + 8 * v13++) = v14;
          if (v13 - v12 == 4)
          {
            unint64_t result = swift_bridgeObjectRelease();
            break;
          }
        }
      }
      uint64_t v9 = v10;
    }
    while (v10 != v3);
    swift_bridgeObjectRelease();
    specialized PINECircuit.decode<A>(data:numOfMeasurements:into:)(v8, a2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;

  uint64_t v3 = *(void *)(result + 16);
  if (!v3) {
    goto LABEL_29;
  }
  long long v4 = *(_OWORD *)(v2 + 104);
  uint64_t v5 = *(void *)(v2 + 104);
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_30:
    __break(1u);
  }
  else
  {
    uint64_t v6 = result;
    if ((void)v4)
    {
      uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v8 + 16) = v5;
      bzero((void *)(v8 + 32), 8 * v5);
    }
    else
    {
      uint64_t v8 = MEMORY[0x263F8EE78];
    }
    unint64_t result = swift_bridgeObjectRetain();
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        goto LABEL_28;
      }
      uint64_t v11 = *(void *)(v6 + 32 + 8 * v9);
      uint64_t v12 = *(void *)(v8 + 16);
      if (v12 != *(void *)(v11 + 16))
      {
LABEL_24:
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(28);
        swift_bridgeObjectRelease();
        v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        v20._countAndFlagsBits = 540877088;
        v20._object = (void *)0xE400000000000000;
        String.append(_:)(v20);
        v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v21);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
        swift_allocError();
        *(void *)uint64_t v22 = 0xD000000000000020;
        *(void *)(v22 + 8) = 0x8000000260BFE7C0;
        *(unsigned char *)(v22 + 16) = 1;
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      if (v12)
      {
        unint64_t result = swift_bridgeObjectRetain();
        uint64_t v13 = 4;
        while (1)
        {
          unint64_t v15 = *(void *)(v11 + 8 * v13);
          unint64_t v14 = *(void *)(v8 + 8 * v13);
          if (v15)
          {
            BOOL v16 = v15 <= 0xFFFFFFFF00000001;
            unint64_t v17 = 0xFFFFFFFF00000001 - v15;
            if (!v16)
            {
              __break(1u);
LABEL_27:
              __break(1u);
LABEL_28:
              __break(1u);
LABEL_29:
              __break(1u);
              goto LABEL_30;
            }
            if (v14 >= v17)
            {
              v14 -= v17;
            }
            else
            {
              BOOL v16 = v17 <= 0xFFFFFFFF00000001;
              unint64_t v18 = 0xFFFFFFFF00000001 - v17;
              if (!v16) {
                goto LABEL_27;
              }
              BOOL v16 = __CFADD__(v14, v18);
              v14 += v18;
              if (v16)
              {
                __break(1u);
                goto LABEL_24;
              }
            }
          }
          *(void *)(v8 + 8 * v13++) = v14;
          if (v13 - v12 == 4)
          {
            unint64_t result = swift_bridgeObjectRelease();
            break;
          }
        }
      }
      uint64_t v9 = v10;
    }
    while (v10 != v3);
    swift_bridgeObjectRelease();
    specialized PINECircuit.decode<A>(data:numOfMeasurements:into:)(v8, a2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void type metadata accessor for os_unfair_lock_s()
{
  if (!lazy cache variable for type metadata for os_unfair_lock_s)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for os_unfair_lock_s);
    }
  }
}

uint64_t specialized PINECircuit.decode<A>(data:numOfMeasurements:into:)(uint64_t result, float32x2_t **a2)
{
  uint64_t v3 = *(float32x2_t **)(result + 16);
  if (v3 != *(float32x2_t **)(v2 + 96))
  {
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    unint64_t v36 = 0xD000000000000016;
    unint64_t v37 = 0x8000000260BFE7F0;
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 540877088;
    v11._object = (void *)0xE400000000000000;
    String.append(_:)(v11);
LABEL_17:
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v15 = v36;
    *(void *)(v15 + 8) = v37;
    *(unsigned char *)(v15 + 16) = 2;
    return swift_willThrow();
  }
  if (a2[1] != v3)
  {
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    unint64_t v36 = 0xD000000000000010;
    unint64_t v37 = 0x8000000260BFE810;
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 540877088;
    v13._object = (void *)0xE400000000000000;
    String.append(_:)(v13);
    goto LABEL_17;
  }
  if (!v3) {
    return result;
  }
  uint64_t v4 = 0;
  unint64_t v5 = *(void *)(v2 + 88);
  uint64_t v6 = *a2;
  uint64_t v7 = 1 << v5;
  if (v5 >= 0x40) {
    uint64_t v7 = 0;
  }
  if (v5 - 65 >= 0xFFFFFFFFFFFFFF7FLL) {
    unint64_t v8 = v7;
  }
  else {
    unint64_t v8 = 0;
  }
  if (v5 <= 0xFFFFFFFFFFFFFFC0) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = 1uLL >> -(char)v5;
  }
  if (v3 != (float32x2_t *)1)
  {
    if ((unint64_t)&v6[-4] - result >= 8)
    {
      BOOL v16 = (uint32x2_t *)(result + 32);
      uint64_t v4 = (unint64_t)v3 & 0x7FFFFFFFFFFFFFFELL;
      int32x2_t v17 = vdup_n_s32(v5 > 0xFFFFFFFFFFFFFFBFLL);
      v18.i64[0] = v17.u32[0];
      v18.i64[1] = v17.u32[1];
      float32x2_t v19 = vcvt_f32_f64(vcvtq_f64_s64((int64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v18, 0x3FuLL)), (int8x16_t)vdupq_n_s64(v9), (int8x16_t)vdupq_n_s64(v8))));
      int32x2_t v20 = vdup_n_s32(0xFFF00001);
      uint32x2_t v21 = (uint32x2_t)vdup_n_s32(0x7FF80000u);
      uint64_t v22 = (unint64_t)v3 & 0x7FFFFFFFFFFFFFFELL;
      uint64_t v23 = *a2;
      do
      {
        uint32x2_t v24 = *v16++;
        v25.i64[0] = v24.u32[0];
        v25.i64[1] = v24.u32[1];
        int8x8_t v26 = (int8x8_t)vaddhn_s64((int64x2_t)vmull_u32((uint32x2_t)vmovn_s64((int64x2_t)vmull_u32(v24, (uint32x2_t)0x10000000100000)), (uint32x2_t)v20), v25);
        int32x2_t v27 = (int32x2_t)vand_s8(v26, (int8x8_t)vcgt_u32((uint32x2_t)v20, (uint32x2_t)v26));
        *v23++ = vdiv_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)v27, v21), (int8x8_t)vneg_f32(vcvt_f32_u32((uint32x2_t)vsub_s32(v20, v27))), (int8x8_t)vcvt_f32_u32((uint32x2_t)v27)), v19);
        v22 -= 2;
      }
      while (v22);
      if (v3 == (float32x2_t *)v4) {
        return result;
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
  }
  uint64_t v28 = (uint64_t)v3 - v4;
  uint64_t v29 = 4 * v4;
  uint64_t v30 = (float *)((char *)v6 + v29);
  uint64_t v31 = (unsigned int *)(v29 + result + 32);
  do
  {
    unsigned int v32 = *v31++;
    unint64_t result = 4293918721;
    unint64_t v33 = (v32 + 4293918721u * (unint64_t)(-1048577 * v32)) >> 32;
    if (v33 >= 0xFFF00001) {
      LODWORD(v33) = 0;
    }
    float v34 = -(float)(-1048575 - v33);
    if (v33 <= 0x7FF80000) {
      float v34 = (float)v33;
    }
    if (v5 <= 0xFFFFFFFFFFFFFFBFLL) {
      uint64_t v35 = v8;
    }
    else {
      uint64_t v35 = v9;
    }
    *v30++ = v34 / (float)v35;
    --v28;
  }
  while (v28);
  return result;
}

uint64_t specialized PINE.unshard<A, B>(_:numOfMeasurements:into:parameter:)(uint64_t result, float32x2_t **a2)
{
  uint64_t v3 = *(void *)(result + 16);
  if (!v3) {
    goto LABEL_29;
  }
  long long v4 = *(_OWORD *)(v2 + 104);
  uint64_t v5 = *(void *)(v2 + 104);
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_30:
    __break(1u);
  }
  else
  {
    uint64_t v6 = result;
    if ((void)v4)
    {
      uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v8 + 16) = v5;
      bzero((void *)(v8 + 32), 4 * v5);
    }
    else
    {
      uint64_t v8 = MEMORY[0x263F8EE78];
    }
    unint64_t result = swift_bridgeObjectRetain();
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        goto LABEL_28;
      }
      uint64_t v11 = *(void *)(v6 + 32 + 8 * v9);
      uint64_t v12 = *(void *)(v8 + 16);
      if (v12 != *(void *)(v11 + 16))
      {
LABEL_24:
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(28);
        swift_bridgeObjectRelease();
        v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        v20._countAndFlagsBits = 540877088;
        v20._object = (void *)0xE400000000000000;
        String.append(_:)(v20);
        v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v21);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
        swift_allocError();
        *(void *)uint64_t v22 = 0xD000000000000020;
        *(void *)(v22 + 8) = 0x8000000260BFF030;
        *(unsigned char *)(v22 + 16) = 1;
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      if (v12)
      {
        unint64_t result = swift_bridgeObjectRetain();
        uint64_t v13 = 8;
        while (1)
        {
          unsigned int v15 = *(_DWORD *)(v11 + 4 * v13);
          unsigned int v14 = *(_DWORD *)(v8 + 4 * v13);
          if (v15)
          {
            BOOL v16 = v15 <= 0xFFF00001;
            unsigned int v17 = -1048575 - v15;
            if (!v16)
            {
              __break(1u);
LABEL_27:
              __break(1u);
LABEL_28:
              __break(1u);
LABEL_29:
              __break(1u);
              goto LABEL_30;
            }
            if (v14 >= v17)
            {
              v14 -= v17;
            }
            else
            {
              BOOL v16 = v17 <= 0xFFF00001;
              unsigned int v18 = -1048575 - v17;
              if (!v16) {
                goto LABEL_27;
              }
              BOOL v16 = __CFADD__(v14, v18);
              v14 += v18;
              if (v16)
              {
                __break(1u);
                goto LABEL_24;
              }
            }
          }
          *(_DWORD *)(v8 + 4 * v13++) = v14;
          if (v13 - v12 == 8)
          {
            unint64_t result = swift_bridgeObjectRelease();
            break;
          }
        }
      }
      uint64_t v9 = v10;
    }
    while (v10 != v3);
    swift_bridgeObjectRelease();
    specialized PINECircuit.decode<A>(data:numOfMeasurements:into:)(v8, a2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError()
{
  unint64_t result = lazy protocol witness table cache variable for type FieldElementError and conformance FieldElementError;
  if (!lazy protocol witness table cache variable for type FieldElementError and conformance FieldElementError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FieldElementError and conformance FieldElementError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FieldElementError and conformance FieldElementError;
  if (!lazy protocol witness table cache variable for type FieldElementError and conformance FieldElementError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FieldElementError and conformance FieldElementError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError()
{
  unint64_t result = lazy protocol witness table cache variable for type FLPTypeError and conformance FLPTypeError;
  if (!lazy protocol witness table cache variable for type FLPTypeError and conformance FLPTypeError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FLPTypeError and conformance FLPTypeError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FLPTypeError and conformance FLPTypeError;
  if (!lazy protocol witness table cache variable for type FLPTypeError and conformance FLPTypeError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FLPTypeError and conformance FLPTypeError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VDAFError and conformance VDAFError()
{
  unint64_t result = lazy protocol witness table cache variable for type VDAFError and conformance VDAFError;
  if (!lazy protocol witness table cache variable for type VDAFError and conformance VDAFError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VDAFError and conformance VDAFError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VDAFError and conformance VDAFError;
  if (!lazy protocol witness table cache variable for type VDAFError and conformance VDAFError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VDAFError and conformance VDAFError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError()
{
  unint64_t result = lazy protocol witness table cache variable for type VDAFCodableError and conformance VDAFCodableError;
  if (!lazy protocol witness table cache variable for type VDAFCodableError and conformance VDAFCodableError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VDAFCodableError and conformance VDAFCodableError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VDAFCodableError and conformance VDAFCodableError;
  if (!lazy protocol witness table cache variable for type VDAFCodableError and conformance VDAFCodableError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VDAFCodableError and conformance VDAFCodableError);
  }
  return result;
}

uint64_t specialized decodeInteger<A, B>(from:encodedLength:)(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (__OFSUB__(a3 >> 1, a2)) {
    goto LABEL_25;
  }
  if ((a3 >> 1) - a2 != a4)
  {
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 0x3D746F67202CLL;
    v13._object = (void *)0xE600000000000000;
    String.append(_:)(v13);
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    void *v15 = 0xD00000000000001DLL;
    v15[1] = 0x8000000260BFEA30;
    return swift_willThrow();
  }
  if (a4 < 0) {
    goto LABEL_26;
  }
  if (!a4) {
    return 0;
  }
  uint64_t v4 = result;
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  BOOL v8 = 0;
  unint64_t result = 0;
  uint64_t v9 = v4 + a2;
  while (a2 + v7 < (uint64_t)(a3 >> 1) && !v8)
  {
    if (v5 <= -65 || v5 > 64) {
      goto LABEL_14;
    }
    unint64_t v10 = *(unsigned __int8 *)(v9 + v7);
    if (v5 < 0)
    {
      if ((unint64_t)v5 <= 0xFFFFFFFFFFFFFFC0) {
        goto LABEL_14;
      }
      unint64_t v11 = v10 >> (v6 & 0x38);
      goto LABEL_13;
    }
    if ((unint64_t)v5 < 0x40)
    {
      unint64_t v11 = v10 << (v5 & 0x38);
LABEL_13:
      result |= v11;
    }
LABEL_14:
    if (a4 - 1 == v7) {
      return result;
    }
    BOOL v8 = ++v7 >= a4;
    v6 -= 8;
    v5 += 8;
    if (__OFADD__(v7, 1)) {
      goto LABEL_24;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v10;
  unsigned int v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  void *v15;

  if (__OFSUB__(a3 >> 1, a2)) {
    goto LABEL_27;
  }
  if ((a3 >> 1) - a2 != a4)
  {
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 0x3D746F67202CLL;
    v13._object = (void *)0xE600000000000000;
    String.append(_:)(v13);
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    void *v15 = 0xD00000000000001DLL;
    v15[1] = 0x8000000260BFEA30;
    return swift_willThrow();
  }
  if (a4 < 0) {
    goto LABEL_28;
  }
  if (!a4) {
    return 0;
  }
  uint64_t v4 = result;
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  unint64_t result = 0;
  BOOL v8 = v4 + a2;
  while (a2 + v7 >= a2 && a2 + v7 < (uint64_t)(a3 >> 1))
  {
    if (v5 < -32 || v5 > 32) {
      goto LABEL_17;
    }
    unint64_t v10 = *(unsigned __int8 *)(v8 + v7);
    if (v5 < 0)
    {
      if ((unint64_t)v5 <= 0xFFFFFFFFFFFFFFE0) {
        goto LABEL_17;
      }
      unint64_t v11 = v10 >> (v6 & 0x18);
      goto LABEL_16;
    }
    if ((unint64_t)v5 < 0x20)
    {
      unint64_t v11 = v10 << (v5 & 0x18);
LABEL_16:
      unint64_t result = v11 | result;
    }
LABEL_17:
    if (a4 - 1 == v7) {
      return result;
    }
    ++v7;
    v6 -= 8;
    v5 += 8;
    if (__OFADD__(a2, v7)) {
      goto LABEL_26;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in XofHmacSha256Aes128.finalize()(uint64_t a1, uint64_t a2)
{
  return closure #1 in XofHmacSha256Aes128.finalize()(a1, a2, v2);
}

uint64_t partial apply for specialized closure #1 in PINE.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:)(uint64_t a1)
{
  uint64_t v3 = *(const void **)(v1 + 16);
  unint64_t v4 = *(void *)(v1 + 24);
  memcpy(__dst, v3, sizeof(__dst));
  return specialized closure #1 in PINE.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:)(a1, (uint64_t)__dst, v4, (uint64_t (*)(uint64_t))specialized static PINE.domainSeparationTag(usage:));
}

{
  uint64_t v1;
  const void *v3;
  unint64_t v4;
  unsigned char __dst[328];

  uint64_t v3 = *(const void **)(v1 + 16);
  unint64_t v4 = *(void *)(v1 + 24);
  memcpy(__dst, v3, sizeof(__dst));
  return specialized closure #1 in PINE.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:)(a1, (uint64_t)__dst, v4, (uint64_t (*)(uint64_t))specialized static PINE.domainSeparationTag(usage:));
}

{
  uint64_t v1;
  const void *v3;
  unint64_t v4;
  unsigned char __dst[328];

  uint64_t v3 = *(const void **)(v1 + 16);
  unint64_t v4 = *(void *)(v1 + 24);
  memcpy(__dst, v3, sizeof(__dst));
  return specialized closure #1 in PINE.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:)(a1, (uint64_t)__dst, v4, (uint64_t (*)(uint64_t))specialized static PINE.domainSeparationTag(usage:));
}

uint64_t partial apply for specialized closure #1 in PINEMainCircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return partial apply for specialized closure #1 in PINEMainCircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:)(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *, void, void, uint64_t, uint64_t, void))specialized closure #1 in PINEMainCircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:));
}

{
  return partial apply for specialized closure #1 in PINEMainCircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:)(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *, void, void, uint64_t, uint64_t, void))specialized closure #1 in PINEMainCircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:));
}

unint64_t specialized static VDAFProtocol.decodeProofShare<A>(_:aggregatorID:count:makeXOF:)(unint64_t a1, char a2, unint64_t a3, uint64_t (*a4)(unint64_t), uint64_t a5)
{
  return specialized static VDAFProtocol.decodeProofShare<A>(_:aggregatorID:count:makeXOF:)(a1, a2, a3, a4, a5, (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t *__return_ptr, uint64_t))specialized static FieldElement.randomElement<A>(using:));
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay4VDAF16GadgetParametersVGG_AH05QueryG0CyAH7Field40VGsAE_pTg5011_sSi4VDAF16gh5VAA05i32B0Cy1FAA16FullyLinearProofPQzGs5c65_pIgynozo_Si6offset_AC7elementtAJsAK_pIegnrzr_AaGRzSmRd__SkRd_0_7b53Qyd__AFRtzANQyd_0_AORSr_0_lTRAA15PINEMainCircuitVyAA7J36VSRySfGG_SayAUGs10ArraySliceVyAUGTG5SiAjQsAE_pIgynozo_Tf1cn_nTf4ng_nTm(uint64_t a1, void (*a2)(uint64_t, _OWORD *))
{
  uint64_t v13 = MEMORY[0x263F8EE78];
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v5 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (void *)(a1 + 64);
    while (1)
    {
      uint64_t v8 = *v7;
      long long v9 = *((_OWORD *)v7 - 1);
      v11[0] = *((_OWORD *)v7 - 2);
      v11[1] = v9;
      uint64_t v12 = v8;
      a2(v6, v11);
      if (v2) {
        break;
      }
      ++v6;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v7 += 5;
      if (v5 == v6) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    return v13;
  }
}

void specialized closure #1 in PINENormEqualityCheckCircuit.evaluateNormEqualityCheck(inputVector:vBits:for:)(uint64_t a1, uint64_t a2, unint64_t a3, char **a4, char *a5)
{
  int64_t v10 = a3 >> 1;
  uint64_t v11 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v11 < 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v7 = a5;
  uint64_t v5 = a4;
  uint64_t v6 = a2;
  if (!v11) {
    goto LABEL_14;
  }
  long long v9 = *a4;
  if ((unint64_t)(v11 - 1) >= *((void *)*a4 + 2)) {
    goto LABEL_31;
  }
  uint64_t v8 = a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_32;
  }
  while (1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = v6 <= v10 ? v10 : v6;
    uint64_t v14 = v13 - v6;
    do
    {
      if (__OFADD__(v6, v12))
      {
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      if (v14 == v12) {
        goto LABEL_27;
      }
      *(void *)&v9[8 * v12 + 32] = *(void *)(v8 + 8 * (v6 + v12));
      ++v12;
    }
    while (v11 != v12);
    *uint64_t v5 = v9;
LABEL_14:
    uint64_t v8 = *((void *)v7 + 6);
    if (v8 >= v11) {
      break;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    long long v9 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v9);
  }
  if (v11 != v8)
  {
    if (v11 < v8)
    {
      uint64_t v7 = *v5;
      uint64_t v15 = *((void *)*v5 + 2);
      if (v11 < v15 && v8 <= v15)
      {
        if (swift_isUniquelyReferenced_nonNull_native())
        {
LABEL_24:
          bzero(&v7[8 * v10 + 32 + -8 * v6], 8 * (v8 + v6 - v10));
          *uint64_t v5 = v7;
          return;
        }
LABEL_34:
        uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v7);
        goto LABEL_24;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_34;
  }
}

{
  char **v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  int64_t v10 = a3 >> 1;
  uint64_t v11 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v11 < 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v7 = a5;
  uint64_t v5 = a4;
  uint64_t v6 = a2;
  if (!v11) {
    goto LABEL_14;
  }
  long long v9 = *a4;
  if ((unint64_t)(v11 - 1) >= *((void *)*a4 + 2)) {
    goto LABEL_31;
  }
  uint64_t v8 = a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_32;
  }
  while (1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = v6 <= v10 ? v10 : v6;
    uint64_t v14 = v13 - v6;
    do
    {
      if (__OFADD__(v6, v12))
      {
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      if (v14 == v12) {
        goto LABEL_27;
      }
      *(_DWORD *)&v9[4 * v12 + 32] = *(_DWORD *)(v8 + 4 * (v6 + v12));
      ++v12;
    }
    while (v11 != v12);
    *uint64_t v5 = v9;
LABEL_14:
    uint64_t v8 = *((void *)v7 + 6);
    if (v8 >= v11) {
      break;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    long long v9 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v9);
  }
  if (v11 != v8)
  {
    if (v11 < v8)
    {
      uint64_t v7 = *v5;
      uint64_t v15 = *((void *)*v5 + 2);
      if (v11 < v15 && v8 <= v15)
      {
        if (swift_isUniquelyReferenced_nonNull_native())
        {
LABEL_24:
          bzero(&v7[4 * v10 + 32 + -4 * v6], 4 * (v8 + v6 - v10));
          *uint64_t v5 = v7;
          return;
        }
LABEL_34:
        uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v7);
        goto LABEL_24;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_34;
  }
}

uint64_t specialized closure #1 in PINENormEqualityCheckCircuit.evaluateNormEqualityCheck(inputVector:vBits:for:)(uint64_t result, uint64_t a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  int64_t v10 = a3 >> 1;
  int64_t v11 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2)) {
    goto LABEL_28;
  }
  if (v11 < 0) {
    goto LABEL_29;
  }
  uint64_t v6 = a5;
  uint64_t v5 = a4;
  if (!v11) {
    goto LABEL_14;
  }
  uint64_t v9 = *a4;
  if ((unint64_t)(v11 - 1) >= *(void *)(*a4 + 16)) {
    goto LABEL_31;
  }
  uint64_t v7 = a2;
  uint64_t v8 = result;
  unint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_32;
  }
  while (1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = v7 <= v10 ? v10 : v7;
    uint64_t v14 = v13 - v7;
    do
    {
      if (__OFADD__(v7, v12))
      {
        __break(1u);
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
      if (v14 == v12) {
        goto LABEL_25;
      }
      *(void *)(v9 + 8 * v12 + 32) = *(void *)(v8 + 8 * (v7 + v12));
      ++v12;
    }
    while (v11 != v12);
    *uint64_t v5 = v9;
LABEL_14:
    uint64_t v7 = *(void *)(v6 + 48);
    if (v7 >= v11) {
      break;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    unint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v9);
    uint64_t v9 = result;
  }
  if (v11 != v7)
  {
    if (v11 < v7)
    {
      uint64_t v6 = *v5;
      unint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result) {
        goto LABEL_19;
      }
    }
    else
    {
      __break(1u);
    }
    unint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
    uint64_t v6 = result;
LABEL_19:
    while ((v11 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v11 >= *(void *)(v6 + 16)) {
        goto LABEL_27;
      }
      *(void *)(v6 + 8 * v11++ + 32) = 0;
      if (v7 == v11)
      {
        *uint64_t v5 = v6;
        return result;
      }
    }
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  return result;
}

uint64_t specialized closure #1 in PINEMainCircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:)(uint64_t result, uint64_t a2, unint64_t a3, char **a4, unint64_t *a5, void *a6, uint64_t a7, uint64_t a8)
{
  int64_t v16 = a3 >> 1;
  uint64_t v17 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  if (v17 < 0)
  {
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  uint64_t v14 = v8;
  uint64_t v10 = a8;
  uint64_t v9 = a2;
  if (!v17) {
    goto LABEL_44;
  }
  int64_t v11 = a7;
  uint64_t v12 = a6;
  uint64_t v13 = a5;
  uint64_t v15 = result;
  unint64_t v46 = v8;
  uint64_t v45 = a4;
  uint64_t v14 = *a4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_71;
  }
  while (2)
  {
    unint64_t v18 = 0;
    Swift::String v19 = (unint64_t *)(v14 + 40);
    uint64_t v20 = 0xFFFEB00001 - (void)v12;
    if (v9 <= v16) {
      uint64_t v21 = v16;
    }
    else {
      uint64_t v21 = v9;
    }
    uint64_t v22 = v21 - v9;
    uint64_t v23 = (unint64_t *)(v15 + 8 * v9);
    uint64_t v24 = v17;
    do
    {
      if (!v22)
      {
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }
      unint64_t v28 = *v23;
      uint64_t v29 = (*v13 * (unsigned __int128)*v23) >> 64;
      unint64_t v30 = *v13 * *v23;
      uint64_t v31 = (0xCFFE47FFFEAFFFFFLL * v30 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
      BOOL v32 = __CFADD__(-(uint64_t)v30, v30);
      uint64_t v33 = v31 + v29;
      if (!__CFADD__(v31, v29))
      {
        if (v33 != -1)
        {
          unint64_t v35 = v33 + v32;
          if (v35 >= 0xFFFEB00001) {
            v35 -= 0xFFFEB00001;
          }
          goto LABEL_28;
        }
        if (!v32)
        {
          unint64_t v35 = 0xFFFFFF00014FFFFELL;
          goto LABEL_28;
        }
        BOOL v32 = 1;
      }
      uint64_t v34 = v32 + v33;
      BOOL v26 = __CFADD__(v34, 0xFFFFFF00014FFFFFLL);
      unint64_t v35 = v34 - 0xFFFEB00001;
      if (v26) {
        goto LABEL_65;
      }
LABEL_28:
      if (v18 >= *((void *)v14 + 2)) {
        goto LABEL_58;
      }
      *(v19 - 1) = v35;
      unint64_t v36 = v28 - (void)v12;
      if (v28 < (unint64_t)v12)
      {
        if ((unint64_t)v12 > 0xFFFEB00001) {
          goto LABEL_66;
        }
        unint64_t v36 = v28 + v20;
        if (__CFADD__(v28, v20)) {
          goto LABEL_67;
        }
      }
      if (v18 + 1 >= *((void *)v14 + 2)) {
        goto LABEL_59;
      }
      *Swift::String v19 = v36;
      uint64_t v37 = (*v13 * (unsigned __int128)(unint64_t)v11) >> 64;
      unint64_t v38 = *v13 * v11;
      uint64_t v39 = (0xCFFE47FFFEAFFFFFLL * v38 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
      unint64_t result = __CFADD__(-(uint64_t)v38, v38);
      uint64_t v40 = v39 + v37;
      if (!__CFADD__(v39, v37))
      {
        if (v40 != -1)
        {
          unint64_t v27 = v40 + result;
          unint64_t result = v27 - 0xFFFEB00001;
          if (v27 >= 0xFFFEB00001) {
            v27 -= 0xFFFEB00001;
          }
          goto LABEL_11;
        }
        if ((result & 1) == 0)
        {
          unint64_t v27 = 0xFFFFFF00014FFFFELL;
          goto LABEL_11;
        }
        unint64_t result = 1;
      }
      uint64_t v25 = result + v40;
      BOOL v26 = __CFADD__(v25, 0xFFFFFF00014FFFFFLL);
      unint64_t v27 = v25 - 0xFFFEB00001;
      if (v26) {
        goto LABEL_64;
      }
LABEL_11:
      --v22;
      *uint64_t v13 = v27;
      ++v23;
      v18 += 2;
      v19 += 2;
      --v24;
    }
    while (v24);
    a4 = v45;
    *uint64_t v45 = v14;
    uint64_t v14 = v46;
LABEL_44:
    int64_t v11 = *(void *)(v10 + 48);
    if (v11 < v17)
    {
LABEL_70:
      __break(1u);
LABEL_71:
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v14);
      continue;
    }
    break;
  }
  if (v17 != v11)
  {
    if (v17 >= v11)
    {
      __break(1u);
      goto LABEL_72;
    }
    uint64_t v12 = a4;
    uint64_t v10 = (uint64_t)*a4;
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_72:
      unint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v10);
      uint64_t v10 = result;
    }
    uint64_t v41 = v17 + 0x4000000000000000;
    unint64_t v42 = 2 * v16 - 2 * v9;
    uint64_t v43 = (void *)(v10 - 16 * v9 + 16 * v16 + 40);
    uint64_t v44 = v11 + v9 - v16;
    while ((v41 & 0x8000000000000000) == 0)
    {
      if ((v42 & 0x8000000000000000) != 0) {
        goto LABEL_61;
      }
      if (v42 >= *(void *)(v10 + 16)) {
        goto LABEL_62;
      }
      *(v43 - 1) = 0;
      if (v42 + 1 >= *(void *)(v10 + 16)) {
        goto LABEL_63;
      }
      *uint64_t v43 = 0;
      v43 += 2;
      ++v41;
      v42 += 2;
      if (!--v44)
      {
        *uint64_t v12 = v10;
        return result;
      }
    }
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  return result;
}

{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  void *v12;
  unint64_t *v13;
  char *v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  char **v45;
  char *v46;

  int64_t v16 = a3 >> 1;
  uint64_t v17 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  if (v17 < 0)
  {
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  uint64_t v14 = v8;
  uint64_t v10 = a8;
  uint64_t v9 = a2;
  if (!v17) {
    goto LABEL_44;
  }
  int64_t v11 = a7;
  uint64_t v12 = a6;
  uint64_t v13 = a5;
  uint64_t v15 = result;
  unint64_t v46 = v8;
  uint64_t v45 = a4;
  uint64_t v14 = *a4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_71;
  }
  while (2)
  {
    unint64_t v18 = 0;
    Swift::String v19 = (unint64_t *)(v14 + 40);
    uint64_t v20 = 0xFFFFFFFF00000001 - (void)v12;
    if (v9 <= v16) {
      uint64_t v21 = v16;
    }
    else {
      uint64_t v21 = v9;
    }
    uint64_t v22 = v21 - v9;
    uint64_t v23 = (unint64_t *)(v15 + 8 * v9);
    uint64_t v24 = v17;
    do
    {
      if (!v22)
      {
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }
      uint64_t v29 = *v23;
      unint64_t v30 = (*v13 * (unsigned __int128)*v23) >> 64;
      uint64_t v31 = *v13 * *v23;
      BOOL v32 = (0xFFFFFFFEFFFFFFFFLL * v31 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      uint64_t v33 = __CFADD__(-(uint64_t)v31, v31);
      uint64_t v34 = v32 + v30;
      if (!__CFADD__(v32, v30))
      {
        if (v34 != -1)
        {
          unint64_t v36 = v34 + v33;
          if (v36 >= 0xFFFFFFFF00000001) {
            v36 += 0xFFFFFFFFLL;
          }
          goto LABEL_28;
        }
        if (!v33)
        {
          unint64_t v36 = 4294967294;
          goto LABEL_28;
        }
        uint64_t v33 = 1;
      }
      unint64_t v35 = v33 + v34;
      unint64_t v27 = __CFADD__(v35, 0xFFFFFFFFLL);
      unint64_t v36 = v35 + 0xFFFFFFFFLL;
      if (v27) {
        goto LABEL_65;
      }
LABEL_28:
      if (v18 >= *((void *)v14 + 2)) {
        goto LABEL_58;
      }
      *(v19 - 1) = v36;
      uint64_t v37 = v29 - (void)v12;
      if (v29 < (unint64_t)v12)
      {
        if ((unint64_t)v12 > 0xFFFFFFFF00000001) {
          goto LABEL_66;
        }
        uint64_t v37 = v29 + v20;
        if (__CFADD__(v29, v20)) {
          goto LABEL_67;
        }
      }
      if (v18 + 1 >= *((void *)v14 + 2)) {
        goto LABEL_59;
      }
      *Swift::String v19 = v37;
      unint64_t result = (*v13 * (unsigned __int128)(unint64_t)v11) >> 64;
      unint64_t v38 = *v13 * v11;
      uint64_t v39 = (0xFFFFFFFEFFFFFFFFLL * v38 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      uint64_t v25 = __CFADD__(-(uint64_t)v38, v38);
      uint64_t v40 = v39 + result;
      if (!__CFADD__(v39, result))
      {
        if (v40 != -1)
        {
          unint64_t v28 = v40 + v25;
          if (v28 >= 0xFFFFFFFF00000001) {
            v28 += 0xFFFFFFFFLL;
          }
          goto LABEL_11;
        }
        if (!v25)
        {
          unint64_t v28 = 4294967294;
          goto LABEL_11;
        }
        uint64_t v25 = 1;
      }
      BOOL v26 = v25 + v40;
      unint64_t v27 = __CFADD__(v26, 0xFFFFFFFFLL);
      unint64_t v28 = v26 + 0xFFFFFFFFLL;
      if (v27) {
        goto LABEL_64;
      }
LABEL_11:
      --v22;
      *uint64_t v13 = v28;
      ++v23;
      v18 += 2;
      v19 += 2;
      --v24;
    }
    while (v24);
    a4 = v45;
    *uint64_t v45 = v14;
    uint64_t v14 = v46;
LABEL_44:
    int64_t v11 = *(void *)(v10 + 48);
    if (v11 < v17)
    {
LABEL_70:
      __break(1u);
LABEL_71:
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v14);
      continue;
    }
    break;
  }
  if (v17 != v11)
  {
    if (v17 >= v11)
    {
      __break(1u);
      goto LABEL_72;
    }
    uint64_t v12 = a4;
    uint64_t v10 = (uint64_t)*a4;
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_72:
      unint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v10);
      uint64_t v10 = result;
    }
    uint64_t v41 = v17 + 0x4000000000000000;
    unint64_t v42 = 2 * v16 - 2 * v9;
    uint64_t v43 = (void *)(v10 - 16 * v9 + 16 * v16 + 40);
    uint64_t v44 = v11 + v9 - v16;
    while ((v41 & 0x8000000000000000) == 0)
    {
      if ((v42 & 0x8000000000000000) != 0) {
        goto LABEL_61;
      }
      if (v42 >= *(void *)(v10 + 16)) {
        goto LABEL_62;
      }
      *(v43 - 1) = 0;
      if (v42 + 1 >= *(void *)(v10 + 16)) {
        goto LABEL_63;
      }
      *uint64_t v43 = 0;
      v43 += 2;
      ++v41;
      v42 += 2;
      if (!--v44)
      {
        *uint64_t v12 = v10;
        return result;
      }
    }
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  return result;
}

uint64_t specialized closure #1 in PINEMainCircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:)(uint64_t result, uint64_t a2, unint64_t a3, char **a4, _DWORD *a5, int a6, unsigned int a7, uint64_t a8)
{
  int64_t v16 = a3 >> 1;
  uint64_t v17 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if (v17 < 0)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  uint64_t v13 = v8;
  uint64_t v10 = a8;
  uint64_t v9 = a2;
  if (!v17) {
    goto LABEL_31;
  }
  unsigned int v15 = a7;
  LODWORD(v11) = a6;
  uint64_t v12 = a5;
  uint64_t v14 = result;
  uint64_t v41 = v8;
  uint64_t v40 = a4;
  uint64_t v13 = *a4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_57;
  }
  while (2)
  {
    unint64_t v18 = 0;
    Swift::String v19 = v13 + 36;
    int v20 = -1048575 - v11;
    if (v9 <= v16) {
      uint64_t v21 = v16;
    }
    else {
      uint64_t v21 = v9;
    }
    uint64_t v22 = v21 - v9;
    uint64_t v23 = (unsigned int *)(v14 + 4 * v9);
    uint64_t v24 = v17;
    while (1)
    {
      if (!v22)
      {
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      unsigned int v25 = *v23;
      unint64_t v26 = *v12 * (unint64_t)*v23;
      uint64_t v27 = 4293918721 * (-1048577 * v26);
      BOOL v28 = __CFADD__(v27, v26);
      unint64_t v29 = (v27 + v26) >> 32;
      if (v28)
      {
        int v30 = v29 + 0xFFFFF;
        if (v29 >= 0xFFF00001) {
          goto LABEL_51;
        }
      }
      else
      {
        int v30 = v29 + 0xFFFFF;
        if (v29 < 0xFFF00001) {
          int v30 = v29;
        }
      }
      unint64_t v31 = *((void *)v13 + 2);
      if (v18 >= v31) {
        goto LABEL_45;
      }
      *(v19 - 1) = v30;
      int v32 = v25 - v11;
      if (v25 < v11)
      {
        if (v11 > 0xFFF00001) {
          goto LABEL_52;
        }
        int v32 = v25 + v20;
        if (__CFADD__(v25, v20)) {
          goto LABEL_53;
        }
      }
      if (v18 + 1 >= v31) {
        goto LABEL_46;
      }
      *Swift::String v19 = v32;
      unint64_t v33 = *v12 * (unint64_t)v15;
      uint64_t v34 = 4293918721 * (-1048577 * v33);
      BOOL v28 = __CFADD__(v34, v33);
      unint64_t result = (v34 + v33) >> 32;
      if (!v28)
      {
        if (result >= 0xFFF00001) {
          unint64_t result = (result + 0xFFFFF);
        }
        else {
          unint64_t result = result;
        }
        goto LABEL_12;
      }
      BOOL v28 = __CFADD__(result, 0xFFFFF);
      unint64_t result = (result + 0xFFFFF);
      if (v28) {
        break;
      }
LABEL_12:
      --v22;
      *uint64_t v12 = result;
      ++v23;
      v18 += 2;
      v19 += 2;
      if (!--v24) {
        goto LABEL_30;
      }
    }
    __break(1u);
LABEL_30:
    a4 = v40;
    unsigned int *v40 = v13;
    uint64_t v13 = v41;
LABEL_31:
    uint64_t v11 = *(void *)(v10 + 48);
    if (v11 < v17)
    {
LABEL_56:
      __break(1u);
LABEL_57:
      uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v13);
      continue;
    }
    break;
  }
  if (v17 != v11)
  {
    if (v17 >= v11)
    {
      __break(1u);
      goto LABEL_58;
    }
    uint64_t v12 = a4;
    uint64_t v10 = (uint64_t)*a4;
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_58:
      unint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v10);
      uint64_t v10 = result;
    }
    uint64_t v35 = v17 + 0x4000000000000000;
    unint64_t v36 = 2 * v16 - 2 * v9;
    uint64_t v37 = (_DWORD *)(v10 - 8 * v9 + 8 * v16 + 36);
    uint64_t v38 = v11 + v9 - v16;
    while ((v35 & 0x8000000000000000) == 0)
    {
      if ((v36 & 0x8000000000000000) != 0) {
        goto LABEL_48;
      }
      unint64_t v39 = *(void *)(v10 + 16);
      if (v36 >= v39) {
        goto LABEL_49;
      }
      *(v37 - 1) = 0;
      if (v36 + 1 >= v39) {
        goto LABEL_50;
      }
      *uint64_t v37 = 0;
      v37 += 2;
      ++v35;
      v36 += 2;
      if (!--v38)
      {
        *(void *)uint64_t v12 = v10;
        return result;
      }
    }
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  return result;
}

uint64_t specialized closure #1 in PINEMainCircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:)(uint64_t result, void *a2, unint64_t a3, uint64_t **a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t *a9, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t *a13, unint64_t *a14, unint64_t a15)
{
  uint64_t v21 = a3 >> 1;
  int64_t v22 = (a3 >> 1) - (void)a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
LABEL_141:
    __break(1u);
    goto LABEL_142;
  }
  if (v22 < 0)
  {
LABEL_142:
    __break(1u);
    goto LABEL_143;
  }
  int64_t v16 = (uint64_t *)a4;
  uint64_t v20 = (uint64_t)a2;
  uint64_t v23 = a10;
  if (!v22)
  {
LABEL_98:
    uint64_t v67 = *(void *)(v23 + 48);
    if (v67 < v22)
    {
LABEL_143:
      __break(1u);
      goto LABEL_144;
    }
    if (v22 == v67) {
      return result;
    }
    if (v22 < v67)
    {
      uint64_t v17 = *v16;
      unint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result)
      {
LABEL_103:
        uint64_t v68 = v22 + 0x4000000000000000;
        unint64_t v69 = 2 * v21 - 2 * v20;
        uint64_t v70 = (void *)(v17 - 16 * v20 + 16 * v21 + 40);
        uint64_t v71 = (char *)(v67 + v20 - v21);
        while ((v68 & 0x8000000000000000) == 0)
        {
          if ((v69 & 0x8000000000000000) != 0) {
            goto LABEL_113;
          }
          if (v69 >= *(void *)(v17 + 16)) {
            goto LABEL_114;
          }
          *(v70 - 1) = 0;
          if (v69 + 1 >= *(void *)(v17 + 16)) {
            goto LABEL_115;
          }
          *uint64_t v70 = 0;
          v70 += 2;
          ++v68;
          v69 += 2;
          if (!--v71)
          {
            *int64_t v16 = v17;
            return result;
          }
        }
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
        goto LABEL_141;
      }
    }
    else
    {
      __break(1u);
    }
    unint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v17);
    uint64_t v17 = result;
    goto LABEL_103;
  }
  uint64_t v82 = *(void *)(a10 + 120);
  uint64_t v84 = v82 + 1;
  if (__OFADD__(v82, 1))
  {
LABEL_144:
    __break(1u);
    goto LABEL_145;
  }
  unint64_t v19 = a8;
  uint64_t v76 = result;
  uint64_t v90 = v15;
  uint64_t v83 = a7;
  uint64_t v88 = a14;
  uint64_t v80 = a13;
  unint64_t v18 = a11;
  uint64_t v17 = a12;
  uint64_t v85 = a9;
  int64_t v16 = *a4;
  uint64_t v75 = (uint64_t *)a4;
  unint64_t v77 = (a3 >> 1) - (void)a2;
  uint64_t v72 = a10;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
LABEL_145:
    uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v16);
    goto LABEL_7;
  }
  uint64_t v24 = (char *)v16;
LABEL_7:
  unint64_t v25 = 0;
  int64_t v16 = (uint64_t *)(v24 + 40);
  unint64_t v81 = v19 & 1;
  int64_t v26 = v19 >> 1;
  uint64_t v27 = v17 * v18;
  uint64_t v28 = ((unint64_t)v17 * (unsigned __int128)v18) >> 64;
  uint64_t v29 = -(uint64_t)(v17 * v18);
  uint64_t v30 = (0xCFFE47FFFEAFFFFFLL * v17 * v18 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
  uint64_t v86 = v30 + v28;
  BOOL v31 = __CFADD__(v30, v28);
  BOOL v79 = v31;
  BOOL v32 = __CFADD__(v29, v27);
  BOOL v33 = __CFADD__(v29, v27);
  BOOL v87 = v33;
  unint64_t v34 = v28 + v32 + v30;
  if (v34 >= 0xFFFEB00001) {
    v34 -= 0xFFFEB00001;
  }
  unint64_t v78 = v34;
  uint64_t v73 = v21;
  uint64_t v74 = (void *)v20;
  if (v20 <= v21) {
    uint64_t v35 = v21;
  }
  else {
    uint64_t v35 = v20;
  }
  uint64_t v21 = v35 - v20;
  unint64_t v18 = v77;
  uint64_t v20 = v76 + 8 * v20;
  unint64_t v36 = v85;
  while (1)
  {
    if (!v18) {
      goto LABEL_116;
    }
    uint64_t v37 = *v36;
    uint64_t v38 = v37 * v84;
    if ((unsigned __int128)(v37 * (__int128)v84) >> 64 != (v37 * v84) >> 63) {
      goto LABEL_117;
    }
    uint64_t v39 = v83 + v38;
    if (__OFADD__(v83, v38)) {
      goto LABEL_118;
    }
    uint64_t v17 = v39 + v82;
    if (__OFADD__(v39, v82)) {
      goto LABEL_119;
    }
    if (v17 < v39) {
      goto LABEL_120;
    }
    if (v26 < v39) {
      goto LABEL_121;
    }
    if (v39 < v83) {
      goto LABEL_122;
    }
    if (v26 < v17) {
      goto LABEL_123;
    }
    if (v17 < 0) {
      goto LABEL_124;
    }
    unint64_t v19 = v81 | (2 * v17);
    swift_unknownObjectRetain();
    unint64_t result = specialized FieldElement.init(inputVector:)(a6, v39, v19, &v91);
    if (v90) {
      break;
    }
    uint64_t v40 = v87;
    if (!v79)
    {
      unint64_t v42 = v78;
      if (v86 != -1) {
        goto LABEL_34;
      }
      if (!v87) {
        goto LABEL_130;
      }
      uint64_t v40 = 1;
    }
    uint64_t v41 = v40 + v86;
    BOOL v32 = __CFADD__(v41, 0xFFFFFF00014FFFFFLL);
    unint64_t v42 = v41 - 0xFFFEB00001;
    if (v32) {
      goto LABEL_132;
    }
LABEL_34:
    unint64_t v43 = v91;
    if (v42)
    {
      BOOL v32 = v42 <= 0xFFFEB00001;
      unint64_t v44 = 0xFFFEB00001 - v42;
      if (!v32) {
        goto LABEL_130;
      }
      if (v91 >= v44)
      {
        unint64_t v43 = v91 - v44;
      }
      else
      {
        BOOL v32 = v44 <= 0xFFFEB00001;
        unint64_t v45 = 0xFFFEB00001 - v44;
        if (!v32) {
          goto LABEL_137;
        }
        unint64_t v43 = v91 + v45;
        if (__CFADD__(v91, v45)) {
          goto LABEL_138;
        }
      }
    }
    if (v17 >= v26) {
      goto LABEL_125;
    }
    if (!v21) {
      goto LABEL_126;
    }
    unint64_t v46 = *(void *)(a6 + 8 * v17);
    uint64_t v47 = *(void *)v20;
    unint64_t v48 = *(void *)v20 - v43;
    if (*(void *)v20 < v43)
    {
      BOOL v32 = v43 <= 0xFFFEB00001;
      unint64_t v49 = 0xFFFEB00001 - v43;
      if (!v32) {
        goto LABEL_135;
      }
      unint64_t v48 = v47 + v49;
      if (__CFADD__(v47, v49)) {
        goto LABEL_136;
      }
    }
    unint64_t v50 = *v80 * v48;
    uint64_t v51 = (*v80 * (unsigned __int128)v48) >> 64;
    uint64_t v52 = (0xCFFE47FFFEAFFFFFLL * v50 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
    BOOL v53 = __CFADD__(-(uint64_t)v50, v50);
    BOOL v32 = __CFADD__(v52, v51);
    uint64_t v54 = v52 + v51;
    if (!v32)
    {
      if (v54 != -1)
      {
        unint64_t v56 = v54 + v53;
        if (v56 >= 0xFFFEB00001) {
          v56 -= 0xFFFEB00001;
        }
        goto LABEL_68;
      }
      if (!v53)
      {
        unint64_t v56 = 0xFFFFFF00014FFFFELL;
        goto LABEL_68;
      }
      BOOL v53 = 1;
    }
    uint64_t v55 = v53 + v54;
    BOOL v32 = __CFADD__(v55, 0xFFFFFF00014FFFFFLL);
    unint64_t v56 = v55 - 0xFFFEB00001;
    if (v32) {
      goto LABEL_133;
    }
LABEL_68:
    if (v25 >= *((void *)v24 + 2)) {
      goto LABEL_127;
    }
    *(v16 - 1) = v56;
    if (v25 + 1 >= *((void *)v24 + 2)) {
      goto LABEL_128;
    }
    *int64_t v16 = v46;
    unint64_t v57 = *v88;
    if (v46)
    {
      BOOL v32 = v46 <= 0xFFFEB00001;
      unint64_t v58 = 0xFFFEB00001 - v46;
      if (!v32) {
        goto LABEL_131;
      }
      if (v57 >= v58)
      {
        v57 -= v58;
      }
      else
      {
        BOOL v32 = v58 <= 0xFFFEB00001;
        unint64_t v59 = 0xFFFEB00001 - v58;
        if (!v32) {
          goto LABEL_139;
        }
        BOOL v32 = __CFADD__(v57, v59);
        v57 += v59;
        if (v32) {
          goto LABEL_140;
        }
      }
    }
    *uint64_t v88 = v57;
    uint64_t v60 = (*v80 * (unsigned __int128)a15) >> 64;
    unint64_t v61 = *v80 * a15;
    uint64_t v62 = (0xCFFE47FFFEAFFFFFLL * v61 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
    BOOL v63 = __CFADD__(-(uint64_t)v61, v61);
    uint64_t v64 = v62 + v60;
    if (__CFADD__(v62, v60)) {
      goto LABEL_85;
    }
    if (v64 == -1)
    {
      if (v63)
      {
        BOOL v63 = 1;
LABEL_85:
        uint64_t v65 = v63 + v64;
        BOOL v32 = __CFADD__(v65, 0xFFFFFF00014FFFFFLL);
        unint64_t v66 = v65 - 0xFFFEB00001;
        if (v32) {
          goto LABEL_134;
        }
        goto LABEL_95;
      }
      unint64_t v66 = 0xFFFFFF00014FFFFELL;
    }
    else
    {
      unint64_t v66 = v64 + v63;
      if (v66 >= 0xFFFEB00001) {
        v66 -= 0xFFFEB00001;
      }
    }
LABEL_95:
    *uint64_t v80 = v66;
    unint64_t v36 = v85;
    if (__OFADD__(*v85, 1)) {
      goto LABEL_129;
    }
    --v21;
    ++*v85;
    v20 += 8;
    v25 += 2;
    v16 += 2;
    if (!--v18)
    {
      uint64_t v20 = (uint64_t)v74;
      int64_t v16 = v75;
      *uint64_t v75 = (uint64_t)v24;
      uint64_t v23 = v72;
      uint64_t v21 = v73;
      int64_t v22 = v77;
      goto LABEL_98;
    }
  }
  *uint64_t v75 = (uint64_t)v24;
  return result;
}

{
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  BOOL v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  BOOL v87;
  unint64_t *v88;
  uint64_t v90;
  unint64_t v91;

  uint64_t v21 = a3 >> 1;
  int64_t v22 = (a3 >> 1) - (void)a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
LABEL_142:
    __break(1u);
    goto LABEL_143;
  }
  if (v22 < 0)
  {
LABEL_143:
    __break(1u);
    goto LABEL_144;
  }
  int64_t v16 = (uint64_t *)a4;
  uint64_t v20 = (uint64_t)a2;
  uint64_t v23 = a10;
  if (!v22)
  {
LABEL_99:
    uint64_t v67 = *(void *)(v23 + 48);
    if (v67 < v22)
    {
LABEL_144:
      __break(1u);
      goto LABEL_145;
    }
    if (v22 == v67) {
      return result;
    }
    if (v22 < v67)
    {
      uint64_t v17 = *v16;
      unint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result)
      {
LABEL_104:
        uint64_t v68 = v22 + 0x4000000000000000;
        unint64_t v69 = 2 * v21 - 2 * v20;
        uint64_t v70 = (void *)(v17 - 16 * v20 + 16 * v21 + 40);
        uint64_t v71 = (char *)(v67 + v20 - v21);
        while ((v68 & 0x8000000000000000) == 0)
        {
          if ((v69 & 0x8000000000000000) != 0) {
            goto LABEL_114;
          }
          if (v69 >= *(void *)(v17 + 16)) {
            goto LABEL_115;
          }
          *(v70 - 1) = 0;
          if (v69 + 1 >= *(void *)(v17 + 16)) {
            goto LABEL_116;
          }
          *uint64_t v70 = 0;
          v70 += 2;
          ++v68;
          v69 += 2;
          if (!--v71)
          {
            *int64_t v16 = v17;
            return result;
          }
        }
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
        goto LABEL_142;
      }
    }
    else
    {
      __break(1u);
    }
    unint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v17);
    uint64_t v17 = result;
    goto LABEL_104;
  }
  uint64_t v82 = *(void *)(a10 + 120);
  uint64_t v84 = v82 + 1;
  if (__OFADD__(v82, 1))
  {
LABEL_145:
    __break(1u);
    goto LABEL_146;
  }
  unint64_t v19 = a8;
  uint64_t v76 = result;
  uint64_t v90 = v15;
  uint64_t v83 = a7;
  uint64_t v88 = a14;
  uint64_t v80 = a13;
  unint64_t v18 = a11;
  uint64_t v17 = a12;
  uint64_t v85 = a9;
  int64_t v16 = *a4;
  uint64_t v75 = (uint64_t *)a4;
  unint64_t v77 = (a3 >> 1) - (void)a2;
  uint64_t v72 = a10;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
LABEL_146:
    unint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v16);
    goto LABEL_7;
  }
  unint64_t result = (uint64_t)v16;
LABEL_7:
  uint64_t v24 = 0;
  unint64_t v25 = (unint64_t *)(result + 40);
  unint64_t v81 = v19 & 1;
  int64_t v26 = v19 >> 1;
  uint64_t v27 = v17 * v18;
  uint64_t v28 = ((unint64_t)v17 * (unsigned __int128)v18) >> 64;
  uint64_t v29 = -(uint64_t)(v17 * v18);
  uint64_t v30 = (0xFFFFFFFEFFFFFFFFLL * v17 * v18 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  uint64_t v86 = v30 + v28;
  BOOL v31 = __CFADD__(v30, v28);
  BOOL v79 = v31;
  BOOL v32 = __CFADD__(v29, v27);
  BOOL v33 = __CFADD__(v29, v27);
  BOOL v87 = v33;
  unint64_t v34 = v28 + v32 + v30;
  if (v34 >= 0xFFFFFFFF00000001) {
    v34 += 0xFFFFFFFFLL;
  }
  unint64_t v78 = v34;
  uint64_t v73 = v21;
  uint64_t v74 = (void *)v20;
  if (v20 <= v21) {
    uint64_t v35 = v21;
  }
  else {
    uint64_t v35 = v20;
  }
  uint64_t v21 = v35 - v20;
  unint64_t v18 = v77;
  uint64_t v20 = v76 + 8 * v20;
  unint64_t v36 = v85;
  while (1)
  {
    if (!v18) {
      goto LABEL_117;
    }
    uint64_t v37 = *v36;
    uint64_t v38 = v37 * v84;
    if ((unsigned __int128)(v37 * (__int128)v84) >> 64 != (v37 * v84) >> 63) {
      goto LABEL_118;
    }
    uint64_t v39 = v83 + v38;
    if (__OFADD__(v83, v38)) {
      goto LABEL_119;
    }
    uint64_t v17 = v39 + v82;
    if (__OFADD__(v39, v82)) {
      goto LABEL_120;
    }
    if (v17 < v39) {
      goto LABEL_121;
    }
    if (v26 < v39) {
      goto LABEL_122;
    }
    if (v39 < v83) {
      goto LABEL_123;
    }
    if (v26 < v17) {
      goto LABEL_124;
    }
    if (v17 < 0) {
      goto LABEL_125;
    }
    int64_t v16 = (uint64_t *)result;
    unint64_t v19 = v81 | (2 * v17);
    swift_unknownObjectRetain();
    unint64_t result = specialized FieldElement.init(inputVector:)(a6, v39, v19, &v91);
    if (v90) {
      break;
    }
    uint64_t v40 = v87;
    if (v79) {
      goto LABEL_30;
    }
    unint64_t v42 = v78;
    if (v86 == -1)
    {
      if (!v87)
      {
        unint64_t v43 = v91;
        unint64_t v44 = 0xFFFFFFFE00000003;
        goto LABEL_37;
      }
      uint64_t v40 = 1;
LABEL_30:
      uint64_t v41 = v40 + v86;
      BOOL v32 = __CFADD__(v41, 0xFFFFFFFFLL);
      unint64_t v42 = v41 + 0xFFFFFFFFLL;
      if (v32) {
        goto LABEL_133;
      }
    }
    unint64_t v43 = v91;
    if (!v42) {
      goto LABEL_44;
    }
    BOOL v32 = v42 <= 0xFFFFFFFF00000001;
    unint64_t v44 = 0xFFFFFFFF00000001 - v42;
    if (!v32) {
      goto LABEL_131;
    }
LABEL_37:
    if (v43 >= v44)
    {
      v43 -= v44;
    }
    else
    {
      BOOL v32 = v44 <= 0xFFFFFFFF00000001;
      unint64_t v45 = 0xFFFFFFFF00000001 - v44;
      if (!v32) {
        goto LABEL_138;
      }
      BOOL v32 = __CFADD__(v43, v45);
      v43 += v45;
      if (v32) {
        goto LABEL_139;
      }
    }
LABEL_44:
    if (v17 >= v26) {
      goto LABEL_126;
    }
    if (!v21) {
      goto LABEL_127;
    }
    unint64_t v46 = *(void *)(a6 + 8 * v17);
    uint64_t v47 = *(void *)v20;
    unint64_t v48 = *(void *)v20 - v43;
    if (*(void *)v20 < v43)
    {
      BOOL v32 = v43 <= 0xFFFFFFFF00000001;
      unint64_t v49 = 0xFFFFFFFF00000001 - v43;
      if (!v32) {
        goto LABEL_136;
      }
      unint64_t v48 = v47 + v49;
      if (__CFADD__(v47, v49)) {
        goto LABEL_137;
      }
    }
    unint64_t v50 = *v80 * v48;
    uint64_t v51 = (*v80 * (unsigned __int128)v48) >> 64;
    uint64_t v52 = (0xFFFFFFFEFFFFFFFFLL * v50 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
    BOOL v53 = __CFADD__(-(uint64_t)v50, v50);
    uint64_t v54 = v52 + v51;
    if (__CFADD__(v52, v51))
    {
      unint64_t result = (uint64_t)v16;
    }
    else
    {
      unint64_t result = (uint64_t)v16;
      if (v54 != -1)
      {
        unint64_t v56 = v54 + v53;
        if (v56 >= 0xFFFFFFFF00000001) {
          v56 += 0xFFFFFFFFLL;
        }
        goto LABEL_69;
      }
      if (!v53)
      {
        unint64_t v56 = 4294967294;
        goto LABEL_69;
      }
      BOOL v53 = 1;
    }
    uint64_t v55 = v53 + v54;
    BOOL v32 = __CFADD__(v55, 0xFFFFFFFFLL);
    unint64_t v56 = v55 + 0xFFFFFFFFLL;
    if (v32) {
      goto LABEL_134;
    }
LABEL_69:
    if (v24 >= *(void *)(result + 16)) {
      goto LABEL_128;
    }
    *(v25 - 1) = v56;
    if (v24 + 1 >= *(void *)(result + 16)) {
      goto LABEL_129;
    }
    *unint64_t v25 = v46;
    unint64_t v57 = *v88;
    if (v46)
    {
      BOOL v32 = v46 <= 0xFFFFFFFF00000001;
      unint64_t v58 = 0xFFFFFFFF00000001 - v46;
      if (!v32) {
        goto LABEL_132;
      }
      if (v57 >= v58)
      {
        v57 -= v58;
      }
      else
      {
        BOOL v32 = v58 <= 0xFFFFFFFF00000001;
        unint64_t v59 = 0xFFFFFFFF00000001 - v58;
        if (!v32) {
          goto LABEL_140;
        }
        BOOL v32 = __CFADD__(v57, v59);
        v57 += v59;
        if (v32) {
          goto LABEL_141;
        }
      }
    }
    *uint64_t v88 = v57;
    uint64_t v60 = (*v80 * (unsigned __int128)a15) >> 64;
    unint64_t v61 = *v80 * a15;
    uint64_t v62 = (0xFFFFFFFEFFFFFFFFLL * v61 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
    BOOL v63 = __CFADD__(-(uint64_t)v61, v61);
    uint64_t v64 = v62 + v60;
    if (__CFADD__(v62, v60)) {
      goto LABEL_86;
    }
    if (v64 == -1)
    {
      if (v63)
      {
        BOOL v63 = 1;
LABEL_86:
        uint64_t v65 = v63 + v64;
        BOOL v32 = __CFADD__(v65, 0xFFFFFFFFLL);
        unint64_t v66 = v65 + 0xFFFFFFFFLL;
        if (v32) {
          goto LABEL_135;
        }
        goto LABEL_96;
      }
      unint64_t v66 = 4294967294;
    }
    else
    {
      unint64_t v66 = v64 + v63;
      if (v66 >= 0xFFFFFFFF00000001) {
        v66 += 0xFFFFFFFFLL;
      }
    }
LABEL_96:
    *uint64_t v80 = v66;
    unint64_t v36 = v85;
    if (__OFADD__(*v85, 1)) {
      goto LABEL_130;
    }
    --v21;
    ++*v85;
    v20 += 8;
    v24 += 2;
    v25 += 2;
    if (!--v18)
    {
      uint64_t v20 = (uint64_t)v74;
      int64_t v16 = v75;
      *uint64_t v75 = result;
      uint64_t v23 = v72;
      uint64_t v21 = v73;
      int64_t v22 = v77;
      goto LABEL_99;
    }
  }
  *uint64_t v75 = (uint64_t)v16;
  return result;
}

uint64_t specialized closure #1 in PINEMainCircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:)(uint64_t result, uint64_t a2, unint64_t a3, char **a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t *a9, uint64_t a10, int a11, int a12, _DWORD *a13, unsigned int *a14, unsigned int a15)
{
  uint64_t v66 = a3 >> 1;
  uint64_t v21 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
LABEL_118:
    __break(1u);
    goto LABEL_119;
  }
  if (v21 < 0)
  {
LABEL_119:
    __break(1u);
    goto LABEL_120;
  }
  uint64_t v15 = v17;
  int64_t v22 = (uint64_t *)a4;
  uint64_t v19 = a2;
  uint64_t v23 = a10;
  if (!v21)
  {
LABEL_75:
    uint64_t v16 = *(void *)(v23 + 48);
    if (v16 < v21)
    {
LABEL_120:
      __break(1u);
      goto LABEL_121;
    }
    if (v21 == v16) {
      return result;
    }
    if (v21 < v16)
    {
      uint64_t v18 = v19;
      uint64_t v19 = *v22;
      unint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result)
      {
LABEL_80:
        uint64_t v56 = v21 + 0x4000000000000000;
        unint64_t v57 = 2 * v66 - 2 * v18;
        unint64_t v58 = (_DWORD *)(v19 - 8 * v18 + 8 * v66 + 36);
        uint64_t v59 = v16 + v18 - v66;
        while ((v56 & 0x8000000000000000) == 0)
        {
          if ((v57 & 0x8000000000000000) != 0) {
            goto LABEL_90;
          }
          unint64_t v60 = *(void *)(v19 + 16);
          if (v57 >= v60) {
            goto LABEL_91;
          }
          *(v58 - 1) = 0;
          if (v57 + 1 >= v60) {
            goto LABEL_92;
          }
          *unint64_t v58 = 0;
          v58 += 2;
          ++v56;
          v57 += 2;
          if (!--v59)
          {
            *int64_t v22 = v19;
            return result;
          }
        }
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
        goto LABEL_118;
      }
    }
    else
    {
      __break(1u);
    }
    unint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v19);
    uint64_t v19 = result;
    goto LABEL_80;
  }
  uint64_t v75 = *(void *)(a10 + 120);
  uint64_t v77 = v75 + 1;
  if (__OFADD__(v75, 1))
  {
LABEL_121:
    __break(1u);
    goto LABEL_122;
  }
  unint64_t v20 = a8;
  uint64_t v76 = a7;
  unsigned int v71 = a15;
  uint64_t v80 = a14;
  uint64_t v73 = a13;
  LODWORD(v18) = a11;
  LODWORD(v16) = a12;
  unint64_t v78 = a9;
  BOOL v79 = *a4;
  BOOL v63 = (uint64_t *)a4;
  uint64_t v64 = result;
  uint64_t v65 = (a3 >> 1) - a2;
  uint64_t v61 = a10;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_122:
  }
    BOOL v79 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v79);
  unint64_t v24 = 0;
  unint64_t v25 = v16 * (unint64_t)v18;
  uint64_t v26 = 4293918721 * (-1048577 * v25);
  unint64_t v27 = (v26 + v25) >> 32;
  unsigned int v28 = v27 + 0xFFFFF;
  if (v27 >= 0xFFF00001) {
    unsigned int v29 = v27 + 0xFFFFF;
  }
  else {
    unsigned int v29 = (v26 + v25) >> 32;
  }
  BOOL v30 = __CFADD__(v26, v25);
  BOOL v31 = (unsigned int *)(v79 + 36);
  unint64_t v74 = v20 & 1;
  int64_t v32 = v20 >> 1;
  BOOL v33 = __CFADD__(v26, v25);
  if (!v30) {
    unsigned int v28 = v29;
  }
  uint64_t v34 = v66;
  if (v19 > v66) {
    uint64_t v34 = v19;
  }
  uint64_t v18 = v34 - v19;
  if (v27 <= 0xFFF00000) {
    BOOL v33 = 0;
  }
  BOOL v82 = v33;
  unsigned int v72 = v28;
  unsigned int v69 = -1048575 - v28;
  BOOL v70 = v28 > 0xFFF00001;
  unsigned int v67 = v28;
  BOOL v68 = -1048575 - v28 > 0xFFF00001;
  uint64_t v62 = v19;
  uint64_t v16 = v65;
  uint64_t v19 = v64 + 4 * v19;
  uint64_t v35 = v78;
  while (1)
  {
    if (!v16) {
      goto LABEL_93;
    }
    uint64_t v36 = *v35;
    uint64_t v37 = v36 * v77;
    if ((unsigned __int128)(v36 * (__int128)v77) >> 64 != (v36 * v77) >> 63) {
      goto LABEL_94;
    }
    uint64_t v38 = v76 + v37;
    if (__OFADD__(v76, v37)) {
      goto LABEL_95;
    }
    uint64_t v39 = v38 + v75;
    if (__OFADD__(v38, v75)) {
      goto LABEL_96;
    }
    if (v39 < v38) {
      goto LABEL_97;
    }
    if (v32 < v38) {
      goto LABEL_98;
    }
    if (v38 < v76) {
      goto LABEL_99;
    }
    if (v32 < v39) {
      goto LABEL_100;
    }
    if (v39 < 0) {
      goto LABEL_101;
    }
    unint64_t v20 = v74 | (2 * v39);
    swift_unknownObjectRetain();
    unint64_t result = specialized FieldElement.init(inputVector:)(a6, v38, v20, &v83);
    if (v15) {
      break;
    }
    if (v82) {
      goto LABEL_109;
    }
    unsigned int v40 = v83;
    if (!v72)
    {
      uint64_t v41 = v73;
LABEL_38:
      if (v39 >= v32) {
        goto LABEL_102;
      }
      goto LABEL_41;
    }
    uint64_t v41 = v73;
    if (v70) {
      goto LABEL_107;
    }
    if (v83 < v69)
    {
      if (v68) {
        goto LABEL_114;
      }
      unsigned int v40 = v83 + v67;
      if (__CFADD__(v83, v67)) {
        goto LABEL_115;
      }
      goto LABEL_38;
    }
    unsigned int v40 = v83 - v69;
    if (v39 >= v32) {
      goto LABEL_102;
    }
LABEL_41:
    if (!v18) {
      goto LABEL_103;
    }
    unsigned int v42 = *(_DWORD *)(a6 + 4 * v39);
    int v43 = *(_DWORD *)v19;
    unsigned int v44 = *(_DWORD *)v19 - v40;
    if (*(_DWORD *)v19 < v40)
    {
      BOOL v30 = v40 <= 0xFFF00001;
      unsigned int v45 = -1048575 - v40;
      if (!v30) {
        goto LABEL_110;
      }
      unsigned int v44 = v43 + v45;
      if (__CFADD__(v43, v45)) {
        goto LABEL_111;
      }
    }
    unint64_t v46 = *v41 * (unint64_t)v44;
    uint64_t v47 = 4293918721 * (-1048577 * v46);
    BOOL v30 = __CFADD__(v47, v46);
    unint64_t v48 = (v47 + v46) >> 32;
    if (v30)
    {
      BOOL v30 = __CFADD__(v48, 0xFFFFF);
      LODWORD(v48) = v48 + 0xFFFFF;
      if (v30) {
        goto LABEL_112;
      }
    }
    else if (v48 >= 0xFFF00001)
    {
      LODWORD(v48) = v48 + 0xFFFFF;
    }
    unint64_t v49 = *((void *)v79 + 2);
    if (v24 >= v49) {
      goto LABEL_104;
    }
    *(v31 - 1) = v48;
    if (v24 + 1 >= v49) {
      goto LABEL_105;
    }
    unsigned int *v31 = v42;
    unsigned int v50 = *v80;
    if (v42)
    {
      BOOL v30 = v42 <= 0xFFF00001;
      unsigned int v51 = -1048575 - v42;
      if (!v30) {
        goto LABEL_108;
      }
      if (v50 >= v51)
      {
        v50 -= v51;
      }
      else
      {
        BOOL v30 = v51 <= 0xFFF00001;
        unsigned int v52 = -1048575 - v51;
        if (!v30) {
          goto LABEL_116;
        }
        BOOL v30 = __CFADD__(v50, v52);
        v50 += v52;
        if (v30) {
          goto LABEL_117;
        }
      }
    }
    *uint64_t v80 = v50;
    unint64_t v53 = *v41 * (unint64_t)v71;
    uint64_t v54 = 4293918721 * (-1048577 * v53);
    BOOL v30 = __CFADD__(v54, v53);
    unint64_t v55 = (v54 + v53) >> 32;
    if (v30)
    {
      BOOL v30 = __CFADD__(v55, 0xFFFFF);
      LODWORD(v55) = v55 + 0xFFFFF;
      if (v30) {
        goto LABEL_113;
      }
    }
    else if (v55 >= 0xFFF00001)
    {
      LODWORD(v55) = v55 + 0xFFFFF;
    }
    _DWORD *v41 = v55;
    uint64_t v35 = v78;
    if (__OFADD__(*v78, 1)) {
      goto LABEL_106;
    }
    --v18;
    ++*v78;
    v19 += 4;
    v24 += 2;
    v31 += 2;
    if (!--v16)
    {
      uint64_t v19 = v62;
      int64_t v22 = v63;
      *BOOL v63 = (uint64_t)v79;
      uint64_t v21 = v65;
      uint64_t v23 = v61;
      goto LABEL_75;
    }
  }
  *BOOL v63 = (uint64_t)v79;
  return result;
}

uint64_t partial apply for specialized closure #1 in PINEMainCircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return partial apply for specialized closure #1 in PINEMainCircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:)(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *))specialized closure #1 in PINEMainCircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:));
}

{
  return partial apply for specialized closure #1 in PINEMainCircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:)(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *))specialized closure #1 in PINEMainCircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:));
}

uint64_t specialized closure #1 in SumVectorType.evaluate(measurement:jointRand:numOfShares:for:)(uint64_t result, uint64_t a2, unint64_t a3, char **a4, unint64_t *a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int64_t v16 = a3 >> 1;
  uint64_t v17 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  if (v17 < 0)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  uint64_t v13 = v8;
  uint64_t v11 = a8;
  unint64_t v10 = a6;
  uint64_t v9 = a2;
  if (!v17) {
    goto LABEL_45;
  }
  uint64_t v15 = a7;
  if (!*(void *)(a7 + 16)) {
    goto LABEL_76;
  }
  uint64_t v12 = a5;
  uint64_t v14 = (void *)result;
  unint64_t v48 = v8;
  uint64_t v47 = a4;
  uint64_t v13 = *a4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_77;
  }
  while (2)
  {
    unint64_t v18 = 0;
    uint64_t v19 = v13 + 40;
    unint64_t v20 = *(void *)(v15 + 32);
    unint64_t v21 = 0xFFFFFFFF00000001 - v10;
    if (v9 <= v16) {
      uint64_t v22 = v16;
    }
    else {
      uint64_t v22 = v9;
    }
    uint64_t v23 = v22 - v9;
    unint64_t v24 = &v14[v9];
    uint64_t v25 = v17;
    do
    {
      if (!v23)
      {
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
        goto LABEL_64;
      }
      unint64_t v29 = *v24;
      uint64_t v30 = (*v12 * (unsigned __int128)*v24) >> 64;
      unint64_t v31 = *v12 * *v24;
      uint64_t v32 = (0xFFFFFFFEFFFFFFFFLL * v31 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      BOOL v33 = __CFADD__(-(uint64_t)v31, v31);
      uint64_t v34 = v32 + v30;
      if (!__CFADD__(v32, v30))
      {
        if (v34 != -1)
        {
          unint64_t v36 = v34 + v33;
          if (v36 >= 0xFFFFFFFF00000001) {
            v36 += 0xFFFFFFFFLL;
          }
          goto LABEL_29;
        }
        if (!v33)
        {
          unint64_t v36 = 4294967294;
          goto LABEL_29;
        }
        BOOL v33 = 1;
      }
      uint64_t v35 = v33 + v34;
      BOOL v27 = __CFADD__(v35, 0xFFFFFFFFLL);
      unint64_t v36 = v35 + 0xFFFFFFFFLL;
      if (v27) {
        goto LABEL_69;
      }
LABEL_29:
      if (v18 >= *((void *)v13 + 2)) {
        goto LABEL_62;
      }
      *(v19 - 1) = v36;
      uint64_t v37 = v29 - v10;
      if (v29 < v10)
      {
        if (v10 > 0xFFFFFFFF00000001) {
          goto LABEL_70;
        }
        uint64_t v37 = v29 + v21;
        if (__CFADD__(v29, v21)) {
          goto LABEL_71;
        }
      }
      if (v18 + 1 >= *((void *)v13 + 2)) {
        goto LABEL_63;
      }
      *uint64_t v19 = v37;
      uint64_t v38 = (*v12 * (unsigned __int128)v20) >> 64;
      unint64_t v39 = *v12 * v20;
      uint64_t v40 = (0xFFFFFFFEFFFFFFFFLL * v39 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      unint64_t result = __CFADD__(-(uint64_t)v39, v39);
      uint64_t v41 = v40 + v38;
      if (!__CFADD__(v40, v38))
      {
        if (v41 != -1)
        {
          unint64_t v28 = v41 + result;
          unint64_t result = v28 + 0xFFFFFFFF;
          if (v28 >= 0xFFFFFFFF00000001) {
            v28 += 0xFFFFFFFFLL;
          }
          goto LABEL_12;
        }
        if ((result & 1) == 0)
        {
          unint64_t v28 = 4294967294;
          goto LABEL_12;
        }
        unint64_t result = 1;
      }
      uint64_t v26 = result + v41;
      BOOL v27 = __CFADD__(v26, 0xFFFFFFFFLL);
      unint64_t v28 = v26 + 0xFFFFFFFFLL;
      if (v27) {
        goto LABEL_68;
      }
LABEL_12:
      --v23;
      *uint64_t v12 = v28;
      ++v24;
      v18 += 2;
      v19 += 2;
      --v25;
    }
    while (v25);
    a4 = v47;
    char *v47 = v13;
    uint64_t v13 = v48;
LABEL_45:
    uint64_t v12 = *(unint64_t **)(v11 + 88);
    if ((uint64_t)v12 < v17)
    {
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v13);
      continue;
    }
    break;
  }
  if ((unint64_t *)v17 != v12)
  {
    if (v17 >= (uint64_t)v12)
    {
      __break(1u);
      goto LABEL_78;
    }
    uint64_t v14 = a4;
    uint64_t v11 = (uint64_t)*a4;
    unint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_78:
      unint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v11);
      uint64_t v11 = result;
    }
    unint64_t v42 = 0xFFFFFFFF00000001 - v10;
    if (!v10) {
      unint64_t v42 = 0;
    }
    uint64_t v43 = v17 + 0x4000000000000000;
    unint64_t v44 = 2 * v16 - 2 * v9;
    unsigned int v45 = (unint64_t *)(v11 - 16 * v9 + 16 * v16 + 40);
    unint64_t v46 = (char *)v12 + v9 - v16;
    while ((v43 & 0x8000000000000000) == 0)
    {
      if ((v44 & 0x8000000000000000) != 0) {
        goto LABEL_65;
      }
      if (v44 >= *(void *)(v11 + 16)) {
        goto LABEL_66;
      }
      *(v45 - 1) = 0;
      if (v10 > 0xFFFFFFFF00000001) {
        goto LABEL_72;
      }
      if (v44 + 1 >= *(void *)(v11 + 16)) {
        goto LABEL_67;
      }
      *unsigned int v45 = v42;
      v45 += 2;
      ++v43;
      v44 += 2;
      if (!--v46)
      {
        *uint64_t v14 = v11;
        return result;
      }
    }
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  return result;
}

uint64_t specialized closure #1 in FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(unint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (*(void *)(a3 + 16) <= a1)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v4 = a2;
  uint64_t v7 = a2[3];
  if ((v7 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = a4;
    unint64_t v5 = *(void *)(a3 + 8 * a1 + 32);
    specialized FieldElement.pow(_:)(a2[3], v5, &v49);
    if (one-time initialization token for one == -1) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  __break(1u);
LABEL_11:
  swift_once();
LABEL_5:
  if (v49 == static Field40.one)
  {
    unint64_t v49 = 0;
    unint64_t v50 = 0xE000000000000000;
    _StringGuts.grow(_:)(51);
    v8._countAndFlagsBits = 0xD00000000000001ALL;
    v8._object = (void *)0x8000000260BFEC40;
    String.append(_:)(v8);
    v9._countAndFlagsBits = specialized FieldElement.description.getter(v5);
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 544434464;
    v10._object = (void *)0xE400000000000000;
    String.append(_:)(v10);
    uint64_t v51 = v7;
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._object = (void *)0x8000000260BFEC60;
    v12._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v12);
    unint64_t v13 = v49;
    unint64_t v14 = v50;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v15 = v13;
    *(void *)(v15 + 8) = v14;
    *(unsigned char *)(v15 + 16) = 3;
    return swift_willThrow();
  }
  else
  {
    uint64_t v17 = *v4;
    uint64_t v19 = *v6;
    uint64_t v18 = v6[1];
    uint64_t v20 = v6[2];
    uint64_t v21 = v6[3];
    uint64_t v22 = specialized Collection.prefix(_:)(*v4, *v6, v18, v20, v21);
    uint64_t v47 = v23;
    uint64_t v48 = v22;
    unint64_t v45 = v25;
    uint64_t v46 = v24;
    uint64_t v26 = specialized Collection.dropFirst(_:)(v17, v19, v18, v20, v21);
    uint64_t v28 = v27;
    uint64_t v30 = v29;
    uint64_t v32 = v31;
    uint64_t *v6 = v26;
    v6[1] = v27;
    v6[2] = v29;
    v6[3] = v31;
    uint64_t v33 = v4[4];
    uint64_t v34 = specialized Collection.prefix(_:)(v33, v26, v27, v29, v31);
    uint64_t v43 = v35;
    unint64_t v44 = v34;
    unint64_t v41 = v37;
    uint64_t v42 = v36;
    uint64_t *v6 = specialized Collection.dropFirst(_:)(v33, v26, v28, v30, v32);
    v6[1] = v38;
    v6[2] = v39;
    v6[3] = v40;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryGadget<Field40>);
    swift_allocObject();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    return specialized QueryGadget.init<A, B>(gadgetPolynomialCoefficients:proveRand:queryRand:parameters:)(v44, v43, v42, v41, v48, v47, v46, v45, v5, (unint64_t)v4);
  }
}

{
  void *v4;
  unsigned int v5;
  uint64_t *v6;
  unint64_t v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*(void *)(a3 + 16) <= a1)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v4 = a2;
  uint64_t v7 = a2[3];
  if ((v7 & 0x8000000000000000) != 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (!HIDWORD(v7))
  {
    uint64_t v6 = a4;
    unint64_t v5 = *(_DWORD *)(a3 + 4 * a1 + 32);
    specialized FieldElement.pow(_:)(a2[3], v5, (unsigned int *)&v49);
    if (one-time initialization token for one == -1) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  __break(1u);
LABEL_13:
  swift_once();
LABEL_6:
  if (v49 == static Field32.one)
  {
    unint64_t v49 = 0;
    unint64_t v50 = 0xE000000000000000;
    _StringGuts.grow(_:)(51);
    v8._countAndFlagsBits = 0xD00000000000001ALL;
    v8._object = (void *)0x8000000260BFEC40;
    String.append(_:)(v8);
    v9._countAndFlagsBits = specialized FieldElement.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 544434464;
    v10._object = (void *)0xE400000000000000;
    String.append(_:)(v10);
    uint64_t v51 = v7;
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._object = (void *)0x8000000260BFEC60;
    v12._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v12);
    unint64_t v13 = v49;
    unint64_t v14 = v50;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v15 = v13;
    *(void *)(v15 + 8) = v14;
    *(unsigned char *)(v15 + 16) = 3;
    return swift_willThrow();
  }
  else
  {
    uint64_t v17 = *v4;
    uint64_t v19 = *v6;
    uint64_t v18 = v6[1];
    uint64_t v20 = v6[2];
    uint64_t v21 = v6[3];
    uint64_t v22 = specialized Collection.prefix(_:)(*v4, *v6, v18, v20, v21);
    uint64_t v47 = v23;
    uint64_t v48 = v22;
    unint64_t v45 = v25;
    uint64_t v46 = v24;
    uint64_t v26 = specialized Collection.dropFirst(_:)(v17, v19, v18, v20, v21);
    uint64_t v28 = v27;
    uint64_t v30 = v29;
    uint64_t v32 = v31;
    uint64_t *v6 = v26;
    v6[1] = v27;
    v6[2] = v29;
    v6[3] = v31;
    uint64_t v33 = v4[4];
    uint64_t v34 = specialized Collection.prefix(_:)(v33, v26, v27, v29, v31);
    uint64_t v43 = v35;
    unint64_t v44 = v34;
    unint64_t v41 = v37;
    uint64_t v42 = v36;
    uint64_t *v6 = specialized Collection.dropFirst(_:)(v33, v26, v28, v30, v32);
    v6[1] = v38;
    v6[2] = v39;
    v6[3] = v40;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryGadget<Field32>);
    swift_allocObject();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    return specialized QueryGadget.init<A, B>(gadgetPolynomialCoefficients:proveRand:queryRand:parameters:)(v44, v43, v42, v41, v48, v47, v46, v45, v5, (uint64_t)v4);
  }
}

{
  void *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (*(void *)(a3 + 16) <= a1)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v4 = a2;
  uint64_t v7 = a2[3];
  if ((v7 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = a4;
    unint64_t v5 = *(void *)(a3 + 8 * a1 + 32);
    specialized FieldElement.pow(_:)(a2[3], v5, &v49);
    if (one-time initialization token for one == -1) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  __break(1u);
LABEL_11:
  swift_once();
LABEL_5:
  if (v49 == static Field64.one)
  {
    unint64_t v49 = 0;
    unint64_t v50 = 0xE000000000000000;
    _StringGuts.grow(_:)(51);
    v8._countAndFlagsBits = 0xD00000000000001ALL;
    v8._object = (void *)0x8000000260BFEC40;
    String.append(_:)(v8);
    v9._countAndFlagsBits = specialized FieldElement.description.getter(v5);
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 544434464;
    v10._object = (void *)0xE400000000000000;
    String.append(_:)(v10);
    uint64_t v51 = v7;
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._object = (void *)0x8000000260BFEC60;
    v12._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v12);
    unint64_t v13 = v49;
    unint64_t v14 = v50;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v15 = v13;
    *(void *)(v15 + 8) = v14;
    *(unsigned char *)(v15 + 16) = 3;
    return swift_willThrow();
  }
  else
  {
    uint64_t v17 = *v4;
    uint64_t v19 = *v6;
    uint64_t v18 = v6[1];
    uint64_t v20 = v6[2];
    uint64_t v21 = v6[3];
    uint64_t v22 = specialized Collection.prefix(_:)(*v4, *v6, v18, v20, v21);
    uint64_t v47 = v23;
    uint64_t v48 = v22;
    unint64_t v45 = v25;
    uint64_t v46 = v24;
    uint64_t v26 = specialized Collection.dropFirst(_:)(v17, v19, v18, v20, v21);
    uint64_t v28 = v27;
    uint64_t v30 = v29;
    uint64_t v32 = v31;
    uint64_t *v6 = v26;
    v6[1] = v27;
    v6[2] = v29;
    v6[3] = v31;
    uint64_t v33 = v4[4];
    uint64_t v34 = specialized Collection.prefix(_:)(v33, v26, v27, v29, v31);
    uint64_t v43 = v35;
    unint64_t v44 = v34;
    unint64_t v41 = v37;
    uint64_t v42 = v36;
    uint64_t *v6 = specialized Collection.dropFirst(_:)(v33, v26, v28, v30, v32);
    v6[1] = v38;
    v6[2] = v39;
    v6[3] = v40;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryGadget<Field64>);
    swift_allocObject();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    return specialized QueryGadget.init<A, B>(gadgetPolynomialCoefficients:proveRand:queryRand:parameters:)(v44, v43, v42, v41, v48, v47, v46, v45, v5, (uint64_t)v4);
  }
}

uint64_t partial apply for specialized closure #1 in PINENormEqualityCheckCircuit.evaluateNormEqualityCheck(inputVector:vBits:for:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  uint64_t v6 = *(void *)(v5 + 16);
  long long v7 = *(_OWORD *)(v6 + 112);
  v12[6] = *(_OWORD *)(v6 + 96);
  v12[7] = v7;
  v12[8] = *(_OWORD *)(v6 + 128);
  uint64_t v13 = *(void *)(v6 + 144);
  long long v8 = *(_OWORD *)(v6 + 48);
  v12[2] = *(_OWORD *)(v6 + 32);
  v12[3] = v8;
  long long v9 = *(_OWORD *)(v6 + 80);
  v12[4] = *(_OWORD *)(v6 + 64);
  v12[5] = v9;
  long long v10 = *(_OWORD *)(v6 + 16);
  v12[0] = *(_OWORD *)v6;
  v12[1] = v10;
  return specialized closure #1 in PINENormEqualityCheckCircuit.evaluateNormEqualityCheck(inputVector:vBits:for:)(a2, a3, a4, a5, (uint64_t)v12);
}

void *partial apply for specialized closure #1 in Array<A>.init<A>(from:parameter:)@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  return specialized closure #1 in Array<A>.init<A>(from:parameter:)(*(void **)(v2 + 16), *(void *)(v2 + 24), a1, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized FieldElement.init<A>(bytes:mask:), a2);
}

{
  uint64_t v2;

  return specialized closure #1 in Array<A>.init<A>(from:parameter:)(*(void **)(v2 + 16), *(void *)(v2 + 24), a1, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized FieldElement.init<A>(bytes:mask:), a2);
}

{
  return partial apply for specialized closure #1 in Array<A>.init<A>(from:parameter:)(a1, a2);
}

{
  return partial apply for specialized closure #1 in Array<A>.init<A>(from:parameter:)(a1, a2);
}

uint64_t partial apply for specialized closure #1 in FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 24);
  unint64_t v4 = *(uint64_t **)(v2 + 32);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  uint64_t v8 = *(void *)(a2 + 32);
  return specialized closure #1 in FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(a1, v7, v3, v4);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  long long v5;
  _OWORD v7[2];
  uint64_t v8;

  uint64_t v3 = *(void *)(v2 + 24);
  unint64_t v4 = *(uint64_t **)(v2 + 32);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  uint64_t v8 = *(void *)(a2 + 32);
  return specialized closure #1 in FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(a1, v7, v3, v4);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  long long v5;
  _OWORD v7[2];
  uint64_t v8;

  uint64_t v3 = *(void *)(v2 + 24);
  unint64_t v4 = *(uint64_t **)(v2 + 32);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  uint64_t v8 = *(void *)(a2 + 32);
  return specialized closure #1 in FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(a1, v7, v3, v4);
}

{
  return partial apply for specialized closure #1 in FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(a1, a2);
}

{
  return partial apply for specialized closure #1 in FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(a1, a2);
}

{
  return partial apply for specialized closure #1 in FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(a1, a2);
}

uint64_t partial apply for specialized closure #1 in SumVectorType.evaluate(measurement:jointRand:numOfShares:for:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char **a5)
{
  return specialized closure #1 in SumVectorType.evaluate(measurement:jointRand:numOfShares:for:)(a2, a3, a4, a5, *(unint64_t **)(v5 + 16), **(void **)(v5 + 24), *(void *)(v5 + 32), *(void *)(v5 + 40));
}

void partial apply for specialized closure #1 in Array<A>.init<A>(from:parameter:)(void *a1@<X1>, _DWORD *a2@<X8>)
{
  specialized closure #1 in Array<A>.init<A>(from:parameter:)(*(void **)(v2 + 16), *(void *)(v2 + 24), a1, a2);
}

{
  partial apply for specialized closure #1 in Array<A>.init<A>(from:parameter:)(a1, a2);
}

unint64_t outlined copy of GadgetEvaluation<Field32>(unint64_t result)
{
  if ((result >> 62) <= 1) {
    return swift_retain();
  }
  return result;
}

unint64_t outlined consume of GadgetEvaluation<Field32>(unint64_t result)
{
  if ((result >> 62) <= 1) {
    return swift_release();
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in PINEMainCircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char **a5)
{
  uint64_t v7 = v5[2];
  uint64_t v8 = v5[3];
  uint64_t v9 = v5[4];
  unint64_t v10 = v5[5];
  Swift::String v11 = (uint64_t *)v5[6];
  uint64_t v12 = v5[7];
  uint64_t v13 = (int *)v5[8];
  unint64_t v14 = (int *)v5[9];
  uint64_t v15 = (_DWORD *)v5[10];
  int64_t v16 = (unsigned int *)v5[11];
  uint64_t v17 = (unsigned int *)v5[12];
  long long v18 = *(_OWORD *)(v12 + 112);
  v23[6] = *(_OWORD *)(v12 + 96);
  v23[7] = v18;
  v23[8] = *(_OWORD *)(v12 + 128);
  int v24 = *(_DWORD *)(v12 + 144);
  long long v19 = *(_OWORD *)(v12 + 48);
  v23[2] = *(_OWORD *)(v12 + 32);
  v23[3] = v19;
  long long v20 = *(_OWORD *)(v12 + 80);
  v23[4] = *(_OWORD *)(v12 + 64);
  v23[5] = v20;
  long long v21 = *(_OWORD *)(v12 + 16);
  v23[0] = *(_OWORD *)v12;
  v23[1] = v21;
  return specialized closure #1 in PINEMainCircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:)(a2, a3, a4, a5, v7, v8, v9, v10, v11, (uint64_t)v23, *v13, *v14, v15, v16, *v17);
}

uint64_t partial apply for specialized closure #1 in PINEMainCircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char **a5)
{
  uint64_t v7 = *(_DWORD **)(v5 + 16);
  uint64_t v8 = *(void *)(v5 + 40);
  int v9 = **(_DWORD **)(v5 + 24);
  unsigned int v10 = **(_DWORD **)(v5 + 32);
  long long v11 = *(_OWORD *)(v8 + 112);
  v16[6] = *(_OWORD *)(v8 + 96);
  v16[7] = v11;
  v16[8] = *(_OWORD *)(v8 + 128);
  int v17 = *(_DWORD *)(v8 + 144);
  long long v12 = *(_OWORD *)(v8 + 48);
  v16[2] = *(_OWORD *)(v8 + 32);
  v16[3] = v12;
  long long v13 = *(_OWORD *)(v8 + 80);
  v16[4] = *(_OWORD *)(v8 + 64);
  v16[5] = v13;
  long long v14 = *(_OWORD *)(v8 + 16);
  v16[0] = *(_OWORD *)v8;
  v16[1] = v14;
  return specialized closure #1 in PINEMainCircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:)(a2, a3, a4, a5, v7, v9, v10, (uint64_t)v16);
}

void partial apply for specialized closure #1 in PINENormEqualityCheckCircuit.evaluateNormEqualityCheck(inputVector:vBits:for:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char **a5)
{
  uint64_t v6 = *(void *)(v5 + 16);
  long long v7 = *(_OWORD *)(v6 + 112);
  v11[6] = *(_OWORD *)(v6 + 96);
  v11[7] = v7;
  v11[8] = *(_OWORD *)(v6 + 128);
  int v12 = *(_DWORD *)(v6 + 144);
  long long v8 = *(_OWORD *)(v6 + 48);
  _OWORD v11[2] = *(_OWORD *)(v6 + 32);
  void v11[3] = v8;
  long long v9 = *(_OWORD *)(v6 + 80);
  v11[4] = *(_OWORD *)(v6 + 64);
  v11[5] = v9;
  long long v10 = *(_OWORD *)(v6 + 16);
  v11[0] = *(_OWORD *)v6;
  v11[1] = v10;
  specialized closure #1 in PINENormEqualityCheckCircuit.evaluateNormEqualityCheck(inputVector:vBits:for:)(a2, a3, a4, a5, (char *)v11);
}

{
  uint64_t v5;
  uint64_t v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  _OWORD v11[9];
  uint64_t v12;

  uint64_t v6 = *(void *)(v5 + 16);
  long long v7 = *(_OWORD *)(v6 + 112);
  v11[6] = *(_OWORD *)(v6 + 96);
  v11[7] = v7;
  v11[8] = *(_OWORD *)(v6 + 128);
  int v12 = *(void *)(v6 + 144);
  long long v8 = *(_OWORD *)(v6 + 48);
  _OWORD v11[2] = *(_OWORD *)(v6 + 32);
  void v11[3] = v8;
  long long v9 = *(_OWORD *)(v6 + 80);
  v11[4] = *(_OWORD *)(v6 + 64);
  v11[5] = v9;
  long long v10 = *(_OWORD *)(v6 + 16);
  v11[0] = *(_OWORD *)v6;
  v11[1] = v10;
  specialized closure #1 in PINENormEqualityCheckCircuit.evaluateNormEqualityCheck(inputVector:vBits:for:)(a2, a3, a4, a5, (char *)v11);
}

uint64_t outlined retain of PINENormEqualityCheckCircuit<Field32, UnsafeBufferPointer<Float>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of PINENormEqualityCheckCircuit<Field32, UnsafeBufferPointer<Float>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of PINE<Field32, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type _UInt128 and conformance _UInt128()
{
  unint64_t result = lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128;
  if (!lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128;
  if (!lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128;
  if (!lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128;
  if (!lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128;
  if (!lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128;
  if (!lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128;
  if (!lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128;
  if (!lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128;
  if (!lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128;
  if (!lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128;
  if (!lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128;
  if (!lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128;
  if (!lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128 and conformance _UInt128);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [UInt8] and conformance <A> [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in PINEMainCircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *, void, void, uint64_t, uint64_t, void))
{
  uint64_t v9 = v6[2];
  uint64_t v10 = v6[3];
  uint64_t v11 = v6[4];
  uint64_t v12 = v6[5];
  uint64_t v13 = v6[6];
  uint64_t v14 = v6[7];
  uint64_t v15 = (void *)v6[8];
  int64_t v16 = (void *)v6[9];
  uint64_t v17 = v6[10];
  uint64_t v18 = v6[11];
  long long v19 = (void *)v6[12];
  long long v20 = *(_OWORD *)(v14 + 112);
  v25[6] = *(_OWORD *)(v14 + 96);
  v25[7] = v20;
  v25[8] = *(_OWORD *)(v14 + 128);
  uint64_t v26 = *(void *)(v14 + 144);
  long long v21 = *(_OWORD *)(v14 + 48);
  v25[2] = *(_OWORD *)(v14 + 32);
  v25[3] = v21;
  long long v22 = *(_OWORD *)(v14 + 80);
  v25[4] = *(_OWORD *)(v14 + 64);
  v25[5] = v22;
  long long v23 = *(_OWORD *)(v14 + 16);
  v25[0] = *(_OWORD *)v14;
  v25[1] = v23;
  return a6(a2, a3, a4, a5, v9, v10, v11, v12, v13, v25, *v15, *v16, v17, v18, *v19);
}

uint64_t partial apply for specialized closure #1 in PINEMainCircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *))
{
  uint64_t v9 = *(void *)(v6 + 16);
  uint64_t v10 = *(void *)(v6 + 40);
  uint64_t v11 = **(void **)(v6 + 24);
  uint64_t v12 = **(void **)(v6 + 32);
  long long v13 = *(_OWORD *)(v10 + 112);
  v18[6] = *(_OWORD *)(v10 + 96);
  v18[7] = v13;
  v18[8] = *(_OWORD *)(v10 + 128);
  uint64_t v19 = *(void *)(v10 + 144);
  long long v14 = *(_OWORD *)(v10 + 48);
  v18[2] = *(_OWORD *)(v10 + 32);
  v18[3] = v14;
  long long v15 = *(_OWORD *)(v10 + 80);
  v18[4] = *(_OWORD *)(v10 + 64);
  uint64_t v18[5] = v15;
  long long v16 = *(_OWORD *)(v10 + 16);
  v18[0] = *(_OWORD *)v10;
  v18[1] = v16;
  return a6(a2, a3, a4, a5, v9, v11, v12, v18);
}

uint64_t FixedWidthInteger.isPositiveAndPowerOfTwo.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v54 = *(void *)(*(void *)(a2 + 8) + 24);
  uint64_t v5 = *(void *)(v54 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = MEMORY[0x270FA5388](AssociatedTypeWitness, v7);
  unint64_t v58 = (char *)v52 - v9;
  uint64_t v10 = *(void *)(a1 - 8);
  uint64_t v57 = v10;
  uint64_t v12 = MEMORY[0x270FA5388](v8, v11);
  unint64_t v53 = (char *)v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12, v14);
  uint64_t v17 = (char *)v52 - v16;
  uint64_t v19 = MEMORY[0x270FA5388](v15, v18);
  uint64_t v56 = (char *)v52 - v20;
  uint64_t v22 = MEMORY[0x270FA5388](v19, v21);
  uint64_t v59 = (char *)v52 - v23;
  MEMORY[0x270FA5388](v22, v24);
  uint64_t v26 = (char *)v52 - v25;
  char v27 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v28 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v55 = v5;
  if (v27)
  {
    if (v28 >= 65)
    {
LABEL_3:
      uint64_t v61 = 0;
      lazy protocol witness table accessor for type Int and conformance Int();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v29 = dispatch thunk of static Comparable.< infix(_:_:)();
      unint64_t v60 = *(void (**)(char *, uint64_t))(v10 + 8);
      v60(v26, a1);
      goto LABEL_6;
    }
  }
  else if (v28 > 63)
  {
    goto LABEL_3;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v26, v2, a1);
  uint64_t v30 = dispatch thunk of BinaryInteger._lowWord.getter();
  unint64_t v60 = *(void (**)(char *, uint64_t))(v10 + 8);
  v60(v26, a1);
  char v29 = v30 > 0;
LABEL_6:
  uint64_t v31 = v59;
  uint64_t v33 = *(void (**)(void, void, void))(v10 + 16);
  uint64_t v32 = v10 + 16;
  uint64_t v34 = v3;
  uint64_t v35 = v33;
  v33(v59, v34, a1);
  if ((v29 & 1) == 0)
  {
    v60(v31, a1);
    char v40 = 0;
    return v40 & 1;
  }
  v52[0] = v35;
  v52[1] = v32;
  v52[2] = swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  uint64_t v36 = v60;
  v60(v17, a1);
  unint64_t v37 = v56;
  dispatch thunk of static BinaryInteger.& infix(_:_:)();
  v36(v26, a1);
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
  {
    char v41 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v42 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v41)
    {
      if (v42 <= 64)
      {
        dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        uint64_t v43 = v56;
        char v44 = dispatch thunk of static Comparable.>= infix(_:_:)();
        v60(v26, a1);
        unint64_t v45 = v53;
        ((void (*)(char *, char *, uint64_t))v52[0])(v53, v43, a1);
        char v40 = (v44 & 1) != 0 && dispatch thunk of BinaryInteger._lowWord.getter() == 0;
        unint64_t v49 = v45;
        goto LABEL_22;
      }
    }
    else if (v42 < 64)
    {
      uint64_t v47 = v56;
      uint64_t v38 = dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t v39 = v47;
      goto LABEL_18;
    }
    uint64_t v61 = 0;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    uint64_t v43 = v56;
    char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
    unint64_t v49 = v26;
LABEL_22:
    unint64_t v50 = v60;
    v60(v49, a1);
    v50(v43, a1);
    v50(v59, a1);
    return v40 & 1;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
  {
    uint64_t v38 = dispatch thunk of BinaryInteger._lowWord.getter();
    uint64_t v39 = v37;
LABEL_18:
    uint64_t v48 = v60;
    v60(v39, a1);
    v48(v59, a1);
    char v40 = v38 == 0;
    return v40 & 1;
  }
  uint64_t v61 = 0;
  lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v46 = v60;
  v60(v26, a1);
  v46(v37, a1);
  v46(v59, a1);
  return v40 & 1;
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t FixedWidthInteger.nextPowerOfTwo.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v66 = a3;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v59 = *(void *)(v5 + 24);
  uint64_t v60 = a2;
  uint64_t v6 = *(void *)(v59 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = MEMORY[0x270FA5388](AssociatedTypeWitness, v7);
  BOOL v63 = (char *)&v56 - v9;
  uint64_t v10 = *(void *)(a1 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v8, v11);
  uint64_t v57 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12, v14);
  unint64_t v58 = (char *)&v56 - v16;
  uint64_t v18 = MEMORY[0x270FA5388](v15, v17);
  uint64_t v56 = (char *)&v56 - v19;
  uint64_t v21 = MEMORY[0x270FA5388](v18, v20);
  uint64_t v23 = (char *)&v56 - v22;
  uint64_t v25 = MEMORY[0x270FA5388](v21, v24);
  char v27 = (char *)&v56 - v26;
  MEMORY[0x270FA5388](v25, v28);
  uint64_t v30 = (char *)&v56 - v29;
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v65 = v3;
  uint64_t v61 = v31;
  v31((char *)&v56 - v29, v3, a1);
  char v32 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v62 = v6;
  if (v32)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
    {
LABEL_9:
      uint64_t v67 = 0;
      lazy protocol witness table accessor for type Int and conformance Int();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v40 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v34 = *(void (**)(char *, uint64_t))(v10 + 8);
      v34(v27, a1);
      v34(v30, a1);
      if ((v40 & 1) == 0) {
        goto LABEL_17;
      }
      __break(1u);
      goto LABEL_11;
    }
    uint64_t v33 = dispatch thunk of BinaryInteger._lowWord.getter();
    uint64_t v34 = *(void (**)(char *, uint64_t))(v10 + 8);
    v34(v30, a1);
    if ((v33 & 0x8000000000000000) == 0) {
      goto LABEL_17;
    }
    __break(1u);
  }
  char v35 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v36 = dispatch thunk of BinaryInteger.bitWidth.getter();
  BOOL v38 = __OFSUB__(v36, 64);
  BOOL v37 = v36 - 64 < 0;
  if (v35)
  {
    if (v36 <= 64) {
      goto LABEL_15;
    }
    uint64_t v67 = 0;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v39 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v34 = *(void (**)(char *, uint64_t))(v10 + 8);
    v34(v27, a1);
    v34(v30, a1);
    if ((v39 & 1) == 0) {
      goto LABEL_17;
    }
    __break(1u);
    goto LABEL_9;
  }
LABEL_11:
  if (v37 == v38)
  {
    uint64_t v34 = *(void (**)(char *, uint64_t))(v10 + 8);
    v34(v30, a1);
    goto LABEL_17;
  }
  uint64_t v41 = dispatch thunk of BinaryInteger._lowWord.getter();
  uint64_t v34 = *(void (**)(char *, uint64_t))(v10 + 8);
  v34(v30, a1);
  if ((v41 & 0x8000000000000000) == 0)
  {
LABEL_17:
    if (dispatch thunk of static BinaryInteger.isSigned.getter())
    {
      uint64_t v45 = v65;
      if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
      {
LABEL_26:
        v61(v27, v45, a1);
        uint64_t v51 = dispatch thunk of BinaryInteger._lowWord.getter();
        v34(v27, a1);
        if (v51) {
          goto LABEL_27;
        }
        goto LABEL_29;
      }
    }
    else
    {
      char v46 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v45 = v65;
      uint64_t v47 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if (v46)
      {
        if (v47 <= 64)
        {
          swift_getAssociatedConformanceWitness();
          dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
          dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
          char v48 = dispatch thunk of static Comparable.>= infix(_:_:)();
          v34(v27, a1);
          unint64_t v49 = v56;
          v61(v56, v45, a1);
          if ((v48 & 1) == 0)
          {
            v34(v49, a1);
            goto LABEL_27;
          }
          uint64_t v50 = dispatch thunk of BinaryInteger._lowWord.getter();
          v34(v49, a1);
          if (v50)
          {
LABEL_27:
            uint64_t v67 = 1;
            lazy protocol witness table accessor for type Int and conformance Int();
            dispatch thunk of BinaryInteger.init<A>(_:)();
            swift_getAssociatedConformanceWitness();
            dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
            uint64_t v65 = v5;
            unsigned int v52 = v57;
            dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
            unint64_t v53 = v58;
            dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
            v34(v52, a1);
            uint64_t v54 = FixedWidthInteger.bitLength.getter();
            v34(v53, a1);
            uint64_t v67 = v54;
            dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)();
            return ((uint64_t (*)(char *, uint64_t))v34)(v27, a1);
          }
          goto LABEL_29;
        }
      }
      else if (v47 < 64)
      {
        goto LABEL_26;
      }
    }
    uint64_t v67 = 0;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v55 = dispatch thunk of static Equatable.== infix(_:_:)();
    v34(v27, a1);
    if ((v55 & 1) == 0) {
      goto LABEL_27;
    }
LABEL_29:
    uint64_t v67 = 1;
    lazy protocol witness table accessor for type Int and conformance Int();
    return dispatch thunk of BinaryInteger.init<A>(_:)();
  }
  __break(1u);
LABEL_15:
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  char v42 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v34 = *(void (**)(char *, uint64_t))(v10 + 8);
  v34(v27, a1);
  v61(v23, (uint64_t)v30, a1);
  if (v42)
  {
    v34(v23, a1);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v34)(v30, a1);
  }
  else
  {
    uint64_t v43 = dispatch thunk of BinaryInteger._lowWord.getter();
    v34(v23, a1);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v34)(v30, a1);
    if ((v43 & 0x8000000000000000) == 0) {
      goto LABEL_17;
    }
  }
  __break(1u);
  return result;
}

uint64_t FixedWidthInteger.bitLength.getter()
{
  uint64_t v0 = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
  uint64_t v1 = dispatch thunk of FixedWidthInteger.leadingZeroBitCount.getter();
  BOOL v2 = __OFSUB__(v0, v1);
  uint64_t result = v0 - v1;
  if (v2) {
    __break(1u);
  }
  return result;
}

uint64_t FixedWidthInteger.bigEndianBytes.getter(uint64_t a1, uint64_t a2)
{
  v9[3] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of FixedWidthInteger.bigEndian.getter();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v5, (uint64_t)implicit closure #1 in FixedWidthInteger.bigEndianBytes.getter, 0, a1, MEMORY[0x263F8E628], v6, MEMORY[0x263F8E658], v7);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, a1);
  return v9[2];
}

size_t implicit closure #1 in FixedWidthInteger.bigEndianBytes.getter@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, size_t *a3@<X8>)
{
  size_t result = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t _ss15withUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = MEMORY[0x270FA5388]();
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v16(v12, v12 + *(void *)(*(void *)(v15 - 8) + 64), v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

uint64_t FixedWidthInteger.divideAndRoundUp(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v38 = a4;
  uint64_t v6 = *(void *)(a3 + 8);
  uint64_t v36 = *(void *)(*(void *)(v6 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = MEMORY[0x270FA5388](AssociatedTypeWitness, v7);
  char v35 = (char *)&v33 - v9;
  uint64_t v10 = *(void *)(a2 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v8, v11);
  uint64_t v34 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12, v14);
  uint64_t v17 = (char *)&v33 - v16;
  uint64_t v19 = MEMORY[0x270FA5388](v15, v18);
  char v39 = (char *)&v33 - v20;
  MEMORY[0x270FA5388](v19, v21);
  uint64_t v23 = (char *)&v33 - v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v33 - v22, a1, a2);
  char v24 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v40 = v6;
  uint64_t v25 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if (v24)
  {
    if (v25 > 64) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v32 = dispatch thunk of BinaryInteger._lowWord.getter();
    uint64_t v28 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
    uint64_t result = v28(v23, a2);
    if (v32 > 0) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  if (v25 <= 63) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v41 = 0;
  lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v26 = v39;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  char v27 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v28 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
  v28(v26, a2);
  uint64_t result = v28(v23, a2);
  if (v27)
  {
LABEL_4:
    dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    uint64_t v30 = v34;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    uint64_t v31 = v39;
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    v28(v30, a2);
    v28(v17, a2);
    dispatch thunk of static BinaryInteger./ infix(_:_:)();
    return v28(v31, a2);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t static FixedWidthInteger.randomVector(in:count:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static FixedWidthInteger.randomVector(in:count:)(a1, a2, a3, a4, (void (*)(char *, char *))partial apply for closure #1 in static FixedWidthInteger.randomVector(in:count:));
}

{
  return static FixedWidthInteger.randomVector(in:count:)(a1, a2, a3, a4, (void (*)(char *, char *))partial apply for closure #1 in static FixedWidthInteger.randomVector(in:count:));
}

uint64_t partial apply for closure #1 in static FixedWidthInteger.randomVector(in:count:)()
{
  return static FixedWidthInteger.random(in:)();
}

{
  return static FixedWidthInteger.random(in:)();
}

unint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    lazy protocol witness table accessor for type Int and conformance Int();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
  }
  return result;
}

uint64_t static FixedWidthInteger.randomVector(in:count:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *, char *))
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v13[8] = 0;
    v13[9] = a2;
    uint64_t v7 = MEMORY[0x270FA5388](result, a2);
    v13[2] = v8;
    void v13[3] = v9;
    v13[4] = v7;
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
    unint64_t v11 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(a5, (uint64_t)v13, v10, a3, MEMORY[0x263F8E628], v11, MEMORY[0x263F8E658], v12);
  }
  return result;
}

uint64_t static FixedWidthInteger.randomVector(count:)(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v8[6] = 0;
    v8[7] = result;
    MEMORY[0x270FA5388](result, a2);
    v8[2] = v3;
    v8[3] = v4;
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
    unint64_t v6 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in static FixedWidthInteger.randomVector(count:), (uint64_t)v8, v5, a2, MEMORY[0x263F8E628], v6, MEMORY[0x263F8E658], v7);
  }
  return result;
}

uint64_t closure #1 in static FixedWidthInteger.randomVector(count:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v52 = a3;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v7 = MEMORY[0x270FA5388](TupleTypeMetadata2, v6);
  uint64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v7, v10);
  uint64_t v13 = (char *)&v44 - v12;
  uint64_t v14 = *(void **)(a1 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v11, v15);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16, v19);
  uint64_t v21 = (char *)&v44 - v20;
  uint64_t v22 = type metadata accessor for ClosedRange();
  uint64_t v50 = *(void *)(v22 - 8);
  uint64_t v51 = v22;
  uint64_t v24 = MEMORY[0x270FA5388](v22, v23);
  char v48 = (char *)&v44 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24, v26);
  unint64_t v49 = (char *)&v44 - v27;
  dispatch thunk of static FixedWidthInteger.min.getter();
  dispatch thunk of static FixedWidthInteger.max.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v29 = v9;
    uint64_t v30 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v31 = v18;
    uint64_t v32 = TupleTypeMetadata2;
    uint64_t v46 = TupleTypeMetadata2;
    uint64_t v47 = a2;
    uint64_t v33 = v13;
    unint64_t v53 = v13;
    uint64_t v34 = &v13[v30];
    char v35 = (void (*)(char *, char *, uint64_t))v14[4];
    v35(v33, v21, a1);
    uint64_t v36 = v34;
    uint64_t v45 = v34;
    v35(v34, v31, a1);
    BOOL v37 = &v29[*(int *)(v32 + 48)];
    uint64_t v38 = (void (*)(char *, char *, uint64_t))v14[2];
    v38(v29, v53, a1);
    v38(v37, v36, a1);
    char v39 = v48;
    v35(v48, v29, a1);
    char v44 = (void (*)(char *, uint64_t))v14[1];
    v44(v37, a1);
    uint64_t v40 = &v29[*(int *)(v46 + 48)];
    v35(v29, v53, a1);
    v35(v40, v45, a1);
    uint64_t v41 = v51;
    v35(&v39[*(int *)(v51 + 36)], v40, a1);
    v44(v29, a1);
    uint64_t v42 = v50;
    uint64_t v43 = v49;
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v49, v39, v41);
    static FixedWidthInteger.random(in:)();
    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v43, v41);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t partial apply for closure #1 in static FixedWidthInteger.randomVector(count:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in static FixedWidthInteger.randomVector(count:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

Swift::UInt64 __swiftcall UInt64.init(_:)(Swift::tuple_high_UInt32_low_UInt32 a1)
{
  return a1.low | (__PAIR64__(v1, a1.high) << 32);
}

uint64_t Seed.init<A>(length:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = specialized Seed.init<A>(length:using:)(a1, a2, a3, a4);
  swift_unknownObjectRelease();
  return v4;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Seed(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t Seed.init<A>(from:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = specialized Seed.init<A>(from:parameter:)(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
  return v5;
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance Seed@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6 = specialized Seed.init<A>(from:parameter:)(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  *a3 = v6;
  return result;
}

uint64_t Seed.encodedLength.getter(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t Seed.encode<A>(into:)()
{
  return dispatch thunk of RangeReplaceableCollection.append<A>(contentsOf:)();
}

uint64_t protocol witness for VDAFEncodable.encodedLength.getter in conformance Seed()
{
  return *(void *)(*(void *)v0 + 16);
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance Seed()
{
  return Seed.encode<A>(into:)();
}

uint64_t specialized Seed.init<A>(length:using:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result >= 1) {
    return (*(uint64_t (**)(void))(a4 + 40))();
  }
  __break(1u);
  return result;
}

uint64_t specialized Seed.init<A>(from:parameter:)(uint64_t a1)
{
  MEMORY[0x270FA5388](a1, a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  return Array.init<A>(_:)();
}

unint64_t lazy protocol witness table accessor for type [UInt8] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [UInt8] and conformance [A];
  if (!lazy protocol witness table cache variable for type [UInt8] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance [A]);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type [UInt8] and conformance [A];
  if (!lazy protocol witness table cache variable for type [UInt8] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance [A]);
  }
  return result;
}

ValueMetadata *type metadata accessor for Seed()
{
  return &type metadata for Seed;
}

uint64_t encodeInteger<A, B>(_:into:encodedLength:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v64 = a4;
  uint64_t v65 = a6;
  uint64_t v63 = a2;
  uint64_t v10 = *(void *)(a7 + 8);
  uint64_t v11 = *(void *)(*(void *)(v10 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = MEMORY[0x270FA5388](AssociatedTypeWitness, v13);
  uint64_t v16 = (char *)&v58 - v15;
  uint64_t v17 = *(void *)(a5 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v14, v18);
  uint64_t v59 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v19, v21);
  uint64_t v66 = (char *)&v58 - v23;
  uint64_t v25 = MEMORY[0x270FA5388](v22, v24);
  uint64_t v27 = (char *)&v58 - v26;
  uint64_t v29 = MEMORY[0x270FA5388](v25, v28);
  uint64_t v60 = (char *)&v58 - v30;
  MEMORY[0x270FA5388](v29, v31);
  uint64_t v33 = (char *)&v58 - v32;
  uint64_t v61 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 16);
  uint64_t v62 = v17 + 16;
  uint64_t result = v61((char *)&v58 - v32, a1, a5);
  if (a3 < 0) {
    goto LABEL_23;
  }
  uint64_t v67 = v33;
  if (!a3)
  {
    char v44 = *(void (**)(char *, uint64_t))(v17 + 8);
    return ((uint64_t (*)(char *, uint64_t))v44)(v67, a5);
  }
  uint64_t v73 = a3;
  BOOL v70 = v16;
  uint64_t v71 = v11;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v36 = v10;
  BOOL v37 = (void (**)(char *, uint64_t))(v17 + 8);
  BOOL v68 = (void (**)(char *, char *, uint64_t))(v17 + 32);
  uint64_t v69 = AssociatedConformanceWitness;
  uint64_t v58 = (v17 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v38 = v60;
  uint64_t v72 = AssociatedTypeWitness;
  while (1)
  {
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    dispatch thunk of static BinaryInteger.& infix(_:_:)();
    uint64_t v45 = *v37;
    (*v37)(v27, a5);
    if (dispatch thunk of static BinaryInteger.isSigned.getter())
    {
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      char v46 = dispatch thunk of static Comparable.>= infix(_:_:)();
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v45)(v27, a5);
      if ((v46 & 1) == 0) {
        break;
      }
    }
    uint64_t v47 = v36;
    char v48 = v45;
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 8) {
      goto LABEL_5;
    }
    unint64_t v49 = v38;
    v61(v66, (uint64_t)v38, a5);
    unsigned __int8 v76 = -1;
    char v50 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v51 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v50)
    {
      if (v51 > 8) {
        goto LABEL_4;
      }
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      uint64_t v52 = v66;
      char v53 = dispatch thunk of static Comparable.> infix(_:_:)();
      v48(v27, a5);
      LODWORD(v60) = v76;
      uint64_t v54 = v59;
      (*v68)(v59, v52, a5);
      if ((v53 & 1) == 0)
      {
        v48(v54, a5);
        uint64_t v38 = v49;
        goto LABEL_5;
      }
      unsigned __int8 v55 = dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v48)(v54, a5);
      unsigned int v56 = v60;
    }
    else
    {
      if (v51 >= 9)
      {
LABEL_4:
        lazy protocol witness table accessor for type UInt8 and conformance UInt8();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        char v39 = v66;
        char v40 = dispatch thunk of static Comparable.< infix(_:_:)();
        v48(v27, a5);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v48)(v39, a5);
        uint64_t v38 = v49;
        if (v40) {
          goto LABEL_22;
        }
        goto LABEL_5;
      }
      uint64_t v57 = v66;
      unsigned __int8 v55 = dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v48)(v57, a5);
      unsigned int v56 = v76;
    }
    uint64_t v38 = v49;
    if (v56 < v55) {
      goto LABEL_22;
    }
LABEL_5:
    char v41 = dispatch thunk of BinaryInteger._lowWord.getter();
    v48(v38, a5);
    char v75 = v41;
    dispatch thunk of RangeReplaceableCollection.append(_:)();
    uint64_t v74 = 8;
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v42 = v67;
    dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)();
    v48(v42, a5);
    (*v68)(v42, v27, a5);
    BOOL v43 = v73-- == 1;
    char v44 = v48;
    uint64_t v36 = v47;
    if (v43) {
      return ((uint64_t (*)(char *, uint64_t))v44)(v67, a5);
    }
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt8 and conformance UInt8()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt8 and conformance UInt8;
  if (!lazy protocol witness table cache variable for type UInt8 and conformance UInt8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt8 and conformance UInt8);
  }
  return result;
}

uint64_t decodeInteger<A, B>(from:encodedLength:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v65 = a7;
  uint64_t v66 = a6;
  uint64_t v13 = *(void *)(*(void *)(a5 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v57 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v15 = MEMORY[0x270FA5388](AssociatedTypeWitness, v14);
  unsigned __int8 v55 = (char *)v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15, v17);
  uint64_t v63 = (char *)v54 - v19;
  unsigned int v56 = *(void (***)(char *, uint64_t))(a4 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v18, v20);
  uint64_t v62 = (char *)v54 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21, v23);
  uint64_t v25 = (char *)v54 - v24;
  if (dispatch thunk of Collection.count.getter() == a2)
  {
    uint64_t v26 = *(void *)(v66 + 8);
    uint64_t v60 = a5;
    uint64_t v61 = v26;
    uint64_t result = dispatch thunk of static AdditiveArithmetic.zero.getter();
    if (a2 < 0)
    {
      __break(1u);
    }
    else
    {
      v54[1] = v7;
      uint64_t v28 = v55;
      if (a2)
      {
        uint64_t v29 = a3;
        uint64_t v30 = a1;
        unint64_t v31 = 0;
        uint64_t v32 = 0;
        ++v56;
        ++v57;
        uint64_t v58 = a4;
        uint64_t v59 = a2;
        BOOL v68 = v25;
        uint64_t v69 = v29;
        uint64_t v67 = v13;
        uint64_t v33 = v56;
        do
        {
          uint64_t v66 = v32 + 1;
          uint64_t v34 = v30;
          dispatch thunk of Collection.startIndex.getter();
          char v35 = v63;
          dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
          uint64_t v36 = *v57;
          BOOL v37 = v28;
          uint64_t v38 = v28;
          uint64_t v39 = AssociatedTypeWitness;
          (*v57)(v37, AssociatedTypeWitness);
          char v40 = (void (*)(unint64_t *, void))dispatch thunk of Collection.subscript.read();
          char v42 = *v41;
          v40(&v70, 0);
          BOOL v43 = v35;
          uint64_t v44 = v58;
          uint64_t v45 = v39;
          uint64_t v28 = v38;
          v36(v43, v45);
          LOBYTE(v70) = v42;
          lazy protocol witness table accessor for type UInt8 and conformance UInt8();
          char v46 = v62;
          dispatch thunk of BinaryInteger.init<A>(_:)();
          unint64_t v70 = v31;
          lazy protocol witness table accessor for type Int and conformance Int();
          dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)();
          uint64_t v47 = *v33;
          (*v33)(v46, v44);
          dispatch thunk of static BinaryInteger.|= infix(_:_:)();
          uint64_t v30 = v34;
          v47(v68, v44);
          uint64_t result = v69;
          v31 += 8;
          uint64_t v32 = v66;
        }
        while (v59 != v66);
      }
    }
  }
  else
  {
    unint64_t v70 = 0;
    unint64_t v71 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    unint64_t v70 = 0xD00000000000001DLL;
    unint64_t v71 = 0x8000000260BFEA30;
    uint64_t v72 = a2;
    v48._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    v49._countAndFlagsBits = 0x3D746F67202CLL;
    v49._object = (void *)0xE600000000000000;
    String.append(_:)(v49);
    uint64_t v72 = dispatch thunk of Collection.count.getter();
    v50._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v50);
    swift_bridgeObjectRelease();
    unint64_t v51 = v70;
    unint64_t v52 = v71;
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *char v53 = v51;
    v53[1] = v52;
    return swift_willThrow();
  }
  return result;
}

uint64_t VDAFCodableFixedWidthInteger.encodedLength.getter()
{
  return dispatch thunk of BinaryInteger.bitWidth.getter() / 8;
}

uint64_t VDAFCodableFixedWidthInteger.encode<A>(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)(a4 + 24) + 16))(a2);
  uint64_t v12 = *(void *)(a4 + 8);

  return encodeInteger<A, B>(_:into:encodedLength:)(v5, a1, v11, a3, a2, a5, v12);
}

uint64_t VDAFCodableFixedWidthInteger.init<A>(from:parameter:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v32 = a6;
  uint64_t v31 = a4;
  uint64_t v30 = a7;
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v29 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11, v13);
  uint64_t v16 = (char *)&v27 - v15;
  MEMORY[0x270FA5388](v14, v17);
  uint64_t v19 = (char *)&v27 - v18;
  uint64_t v21 = *(void *)(v20 + 8);
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)(a5 + 24) + 16))(a3);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v10 + 8);
  v28(v16, a3);
  uint64_t v34 = a1;
  uint64_t v23 = a1;
  uint64_t v24 = v31;
  uint64_t v25 = v33;
  decodeInteger<A, B>(from:encodedLength:)(v23, v22, v31, a3, v32, v21, (uint64_t)v19);
  if (v25) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v34, v24);
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v29, v19, a3);
  dispatch thunk of BinaryInteger.init<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v34, v24);
  return ((uint64_t (*)(char *, uint64_t))v28)(v19, a3);
}

uint64_t Array<A>.init<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v46 = a1;
  uint64_t v43 = *(void *)(a4 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v11 = MEMORY[0x270FA5388](v9 - 8, v10);
  uint64_t v13 = (char *)&v40 - v12;
  uint64_t v45 = *(void *)(a3 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v11, v14);
  uint64_t v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v15, v19);
  uint64_t v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)(a4 + 24) + 16))(a2);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v21, a2);
  uint64_t v44 = a5;
  uint64_t v23 = dispatch thunk of Collection.count.getter();
  if (v22 == -1) {
    goto LABEL_5;
  }
  if (v22) {
    goto LABEL_7;
  }
  if (!v23)
  {
    dispatch thunk of Collection.count.getter();
    __break(1u);
LABEL_5:
    uint64_t v23 = dispatch thunk of Collection.count.getter();
    if (v23 != 0x8000000000000000) {
      goto LABEL_10;
    }
    __break(1u);
LABEL_7:
    if (v23 % v22) {
      goto LABEL_8;
    }
    uint64_t v23 = dispatch thunk of Collection.count.getter();
LABEL_10:
    uint64_t v34 = v45;
    char v35 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    uint64_t v40 = v23 / v22;
    v35(v17, v46, a3);
    uint64_t v36 = TupleTypeMetadata3;
    uint64_t v37 = *(int *)(TupleTypeMetadata3 + 48);
    uint64_t v38 = *(int *)(TupleTypeMetadata3 + 64);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v13, 1, 1);
    *(void *)&v13[v37] = v40;
    *(void *)&v13[v38] = v22;
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v13, 0, 1, v36);
    uint64_t v31 = Array<A>.init<A>(from:parameter:)((uint64_t)v17, (uint64_t)v13, a2, a3, v43, v44);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v46, a3);
    return v31;
  }
LABEL_8:
  uint64_t v47 = 0;
  unint64_t v48 = 0xE000000000000000;
  _StringGuts.grow(_:)(69);
  type metadata accessor for Array();
  v24._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._object = (void *)0x8000000260BFE950;
  v25._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v25);
  uint64_t v26 = v46;
  uint64_t v49 = dispatch thunk of Collection.count.getter();
  v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = 0xD00000000000002ELL;
  v28._object = (void *)0x8000000260BFE970;
  String.append(_:)(v28);
  uint64_t v49 = v22;
  v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 41;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  uint64_t v31 = v47;
  unint64_t v32 = v48;
  lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
  swift_allocError();
  *uint64_t v33 = v31;
  v33[1] = v32;
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v26, a3);
  return v31;
}

{
  uint64_t TupleTypeMetadata3;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t AssociatedTypeWitness;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;

  uint64_t v46 = *(void *)(a4 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v13 = MEMORY[0x270FA5388](v11 - 8, v12);
  uint64_t v15 = (char *)&v40 - v14;
  unint64_t v48 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v13, v16);
  uint64_t v44 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = a5;
  Swift::String v50 = a3;
  uint64_t v18 = dispatch thunk of Collection.count.getter();
  uint64_t v49 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 64);
  uint64_t v19 = v49(a2, a4);
  if (v19 != -1)
  {
    if (v19) {
      v18 %= v19;
    }
    if (v18)
    {
      unint64_t v51 = 0;
      unint64_t v52 = 0xE000000000000000;
      _StringGuts.grow(_:)(69);
      type metadata accessor for Array();
      v20._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      v21._object = (void *)0x8000000260BFE950;
      v21._countAndFlagsBits = 0xD000000000000010;
      String.append(_:)(v21);
      uint64_t v22 = v50;
      char v53 = dispatch thunk of Collection.count.getter();
      v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      v24._countAndFlagsBits = 0xD00000000000002ELL;
      v24._object = (void *)0x8000000260BFE970;
      String.append(_:)(v24);
      char v53 = v49(a2, a4);
      v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      v26._countAndFlagsBits = 41;
      v26._object = (void *)0xE100000000000000;
      String.append(_:)(v26);
      Swift::String v27 = v51;
      Swift::String v28 = v52;
      lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
      swift_allocError();
      *(void *)Swift::String v29 = v27;
      *(void *)(v29 + 8) = v28;
      *(unsigned char *)(v29 + 16) = 0;
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(a1, v22);
      return v27;
    }
  }
  Swift::String v30 = dispatch thunk of Collection.count.getter();
  uint64_t result = v49(a2, a4);
  if (result)
  {
    if (v30 != 0x8000000000000000 || result != -1)
    {
      char v42 = a4;
      uint64_t v43 = a1;
      uint64_t v33 = v48;
      uint64_t v34 = v30 / result;
      char v35 = (uint64_t)v44;
      uint64_t v36 = a1;
      uint64_t v37 = v50;
      (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v44, v36, v50);
      uint64_t v38 = *(int *)(TupleTypeMetadata3 + 48);
      char v41 = *(int *)(TupleTypeMetadata3 + 64);
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v15, 1, 1);
      *(void *)&v15[v38] = v34;
      uint64_t v39 = v49(a2, v42);
      *(void *)&v15[v41] = v39;
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata3 - 8) + 56))(v15, 0, 1, TupleTypeMetadata3);
      Swift::String v27 = Array<A>.init<A>(from:parameter:)(v35, (uint64_t)v15, a2, v37, v46, v47);
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v43, v37);
      return v27;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t instantiation function for generic protocol witness table for UInt32(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt32 and conformance UInt32()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance UInt32@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  unint64_t v10 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  return VDAFCodableFixedWidthInteger.init<A>(from:parameter:)(a1, v11, a4, a2, v10, a3, a5);
}

uint64_t protocol witness for VDAFEncodable.encodedLength.getter in conformance UInt32()
{
  return 4;
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance UInt32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();

  return VDAFCodableFixedWidthInteger.encode<A>(into:)(a1, a4, a2, v8, a3);
}

unint64_t instantiation function for generic protocol witness table for UInt64(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type UInt64 and conformance UInt64();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt64 and conformance UInt64()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }
  return result;
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance UInt64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  unint64_t v10 = lazy protocol witness table accessor for type UInt64 and conformance UInt64();
  return VDAFCodableFixedWidthInteger.init<A>(from:parameter:)(a1, v11, a4, a2, v10, a3, a5);
}

uint64_t protocol witness for VDAFEncodable.encodedLength.getter in conformance UInt64()
{
  return 8;
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance UInt64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = lazy protocol witness table accessor for type UInt64 and conformance UInt64();

  return VDAFCodableFixedWidthInteger.encode<A>(into:)(a1, a4, a2, v8, a3);
}

unint64_t instantiation function for generic protocol witness table for _UInt128(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance _UInt128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  unint64_t v10 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
  return VDAFCodableFixedWidthInteger.init<A>(from:parameter:)(a1, v11, a4, a2, v10, a3, a5);
}

uint64_t protocol witness for VDAFEncodable.encodedLength.getter in conformance _UInt128()
{
  return 16;
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance _UInt128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();

  return VDAFCodableFixedWidthInteger.encode<A>(into:)(a1, a4, a2, v8, a3);
}

uint64_t AggregateShare.init<A>(from:parameter:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v17);
  uint64_t v18 = Array<A>.init<A>(from:)((uint64_t)v16, a3, a4, a5, a6);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, a4);
  if (!v7) {
    *a7 = v18;
  }
  return result;
}

uint64_t AggregateShare.share.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AggregateShare.share.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*AggregateShare.share.modify())()
{
  return AggregateShare.share.modify;
}

uint64_t AggregateShare.init(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t static AggregateShare.== infix(_:_:)()
{
  return static Array<A>.== infix(_:_:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AggregateShare<A>()
{
  return static AggregateShare.== infix(_:_:)();
}

uint64_t static AggregateShare.+= infix(_:_:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a2;
  uint64_t v6 = type metadata accessor for Array();
  return Array<A>.elementwiseAdd(_:)(v5, v6, a4);
}

uint64_t AggregateShare.accumulate(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  uint64_t v3 = type metadata accessor for Array();
  uint64_t v4 = swift_bridgeObjectRetain();
  Array<A>.elementwiseAdd(_:)(v4, v3, v2);
  return swift_bridgeObjectRelease();
}

void *AggregateShare.init(_:)@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for static AggregatableProtocol.+= infix(_:_:) in conformance AggregateShare<A>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return static AggregateShare.+= infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t protocol witness for AggregatableProtocol.accumulate(_:) in conformance AggregateShare<A>(uint64_t a1, uint64_t a2)
{
  return AggregateShare.accumulate(_:)(a1, a2);
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance AggregateShare<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  return AggregateShare.init<A>(from:parameter:)(a1, a2, *(void *)(a5 + 16), a3, *(void *)(a5 + 24), a4, a6);
}

uint64_t AggregateShare.encodedLength.getter(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = MEMORY[0x2612241C0](v3, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 64))(v4);
  uint64_t result = v5 * v6;
  if ((unsigned __int128)(v5 * (__int128)v6) >> 64 != (v5 * v6) >> 63) {
    __break(1u);
  }
  return result;
}

uint64_t AggregateShare.encode<A>(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  return Collection<>.encode<A>(into:)(a1, v8, a3, WitnessTable, a4, *(void *)(*(void *)(a2 + 24) + 40));
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance AggregateShare<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AggregateShare.encode<A>(into:)(a1, a4, a2, a3);
}

uint64_t dispatch thunk of static AggregatableProtocol.+= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of AggregatableProtocol.accumulate(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of AggregatableProtocol.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t type metadata instantiation function for AggregateShare(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 24);
}

uint64_t type metadata accessor for AggregateShare()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

int64_t specialized static FixedWidthInteger.randomVector(count:)(int64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    int64_t v1 = result;
    uint64_t v2 = MEMORY[0x263F8EE78];
    if (result)
    {
      uint64_t v7 = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, result, 0);
      uint64_t v2 = v7;
      do
      {
        uint64_t v6 = 0;
        MEMORY[0x261224CB0](&v6, 8);
        char v3 = v6;
        uint64_t v7 = v2;
        unint64_t v5 = *(void *)(v2 + 16);
        unint64_t v4 = *(void *)(v2 + 24);
        if (v5 >= v4 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v5 + 1, 1);
          uint64_t v2 = v7;
        }
        *(void *)(v2 + 16) = v5 + 1;
        *(unsigned char *)(v2 + v5 + 32) = v3;
        --v1;
      }
      while (v1);
    }
    return v2;
  }
  return result;
}

uint64_t protocol witness for Error._domain.getter in conformance VDAFError()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t protocol witness for Error._code.getter in conformance VDAFError()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t protocol witness for Error._userInfo.getter in conformance VDAFError()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance VDAFError()
{
  return MEMORY[0x270F9FB30]();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance VDAFError(uint64_t a1, uint64_t a2)
{
  return specialized static VDAFErrorProtocol.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned __int8 *)(a2 + 16));
}

uint64_t static VDAFErrorProtocol.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = VDAFErrorProtocol.value.getter(a3);
  uint64_t v6 = v5;
  uint64_t v7 = VDAFErrorProtocol.value.getter(a3);
  if (v6)
  {
    if (v8)
    {
      if (v4 == v7 && v6 == v8)
      {
        swift_bridgeObjectRelease();
        char v9 = 1;
      }
      else
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      char v9 = 0;
    }
  }
  else
  {
    if (!v8)
    {
      char v9 = 1;
      return v9 & 1;
    }
    char v9 = 0;
  }
  swift_bridgeObjectRelease();
  return v9 & 1;
}

VDAF::VDAFCodepoint_optional __swiftcall VDAFCodepoint.init(rawValue:)(Swift::UInt32 rawValue)
{
  if ((int)rawValue > -2)
  {
    char v2 = 1;
    switch(rawValue)
    {
      case 0xFFFFFFFF:
        *int64_t v1 = 13;
        break;
      case 0u:
        char v2 = 0;
        goto LABEL_17;
      case 1u:
LABEL_17:
        *int64_t v1 = v2;
        break;
      case 2u:
        *int64_t v1 = 2;
        break;
      case 3u:
        *int64_t v1 = 3;
        break;
      default:
        if (rawValue == 4096) {
          *int64_t v1 = 4;
        }
        else {
LABEL_20:
        }
          *int64_t v1 = 14;
        break;
    }
  }
  else
  {
    switch(rawValue)
    {
      case 0xFFFF1000:
        *int64_t v1 = 6;
        break;
      case 0xFFFF1001:
        *int64_t v1 = 7;
        break;
      case 0xFFFF1002:
        *int64_t v1 = 8;
        break;
      case 0xFFFF1003:
        *int64_t v1 = 9;
        break;
      case 0xFFFF1004:
        *int64_t v1 = 10;
        break;
      case 0xFFFF1005:
        *int64_t v1 = 11;
        break;
      case 0xFFFF1006:
        *int64_t v1 = 12;
        break;
      default:
        if (rawValue != -65536) {
          goto LABEL_20;
        }
        *int64_t v1 = 5;
        break;
    }
  }
  return (VDAF::VDAFCodepoint_optional)rawValue;
}

uint64_t VDAFCodepoint.rawValue.getter()
{
  return dword_260BFA518[*v0];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance VDAFCodepoint(char *a1, char *a2)
{
  return dword_260BFA518[*a1] == dword_260BFA518[*a2];
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance VDAFCodepoint()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(dword_260BFA518[v1]);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance VDAFCodepoint()
{
  Hasher._combine(_:)(dword_260BFA518[*v0]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance VDAFCodepoint()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(dword_260BFA518[v1]);
  return Hasher._finalize()();
}

VDAF::VDAFCodepoint_optional protocol witness for RawRepresentable.init(rawValue:) in conformance VDAFCodepoint(Swift::UInt32 *a1)
{
  return VDAFCodepoint.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance VDAFCodepoint(_DWORD *a1@<X8>)
{
  *a1 = dword_260BFA518[*v1];
}

char *static VDAFProtocol.domainSeparationTag(usage:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return static VDAFProtocol.domainSeparationTag(usage:)(a1, a2, a3);
}

{
  int v5;
  char *v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  size_t v12;
  size_t v13;
  unsigned int v15;
  int v16;
  char *v17;
  uint64_t v18;

  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a1;
  uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 8, 0, MEMORY[0x263F8EE78]);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 224))(a2, a3);
  char v9 = *((void *)v6 + 2);
  uint64_t v8 = *((void *)v6 + 3);
  unint64_t v10 = v8 >> 1;
  uint64_t v11 = v9 + 1;
  if (v8 >> 1 <= v9)
  {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1, v6);
    uint64_t v8 = *((void *)v6 + 3);
    unint64_t v10 = v8 >> 1;
  }
  *((void *)v6 + 2) = v11;
  v6[v9 + 32] = v7;
  if (v10 < (uint64_t)(v9 + 2)) {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 2, 1, v6);
  }
  *((void *)v6 + 2) = v9 + 2;
  v6[v11 + 32] = 0;
  uint64_t v17 = v6;
  (*(void (**)(char *__return_ptr, uint64_t, uint64_t))(a3 + 208))((char *)&v16 + 3, a2, a3);
  uint64_t v15 = bswap32(dword_260BFA518[SHIBYTE(v16)]);
  uint64_t v12 = specialized _copyCollectionToContiguousArray<A>(_:)((size_t)&v15, (unint64_t)&v16);
  specialized Array.append<A>(contentsOf:)(v12);
  LOWORD(v15) = __rev16(v5 + 1);
  uint64_t v13 = specialized _copyCollectionToContiguousArray<A>(_:)((size_t)&v15, (unint64_t)&v15 + 2);
  specialized Array.append<A>(contentsOf:)(v13);
  return v17;
}

uint64_t VDAFErrorProtocol.value.getter(uint64_t a1)
{
  MEMORY[0x270FA5388](a1, v1);
  (*(void (**)(char *))(v3 + 16))((char *)v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8[2] = String.init<A>(describing:)();
  v8[3] = v4;
  v8[0] = 40;
  v8[1] = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v5 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v5 + 16))
  {
    uint64_t v6 = *(void *)(v5 + 32);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v6 = 0;
  }
  swift_bridgeObjectRelease();
  return v6;
}

Swift::Bool __swiftcall VDAFProtocol.isValidAggregatorID(_:)(Swift::Int a1)
{
  Swift::Int v3 = (*(uint64_t (**)())(v1 + 232))();
  if (v3 < 0) {
    __break(1u);
  }
  else {
    LOBYTE(v3) = a1 >= 0 && v3 > a1;
  }
  return v3;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> VDAFProtocol.assertValidAggregatorID(_:)(Swift::Int a1)
{
  Swift::Int v3 = (*(uint64_t (**)())(v1 + 232))();
  if (v3 < 0)
  {
    __break(1u);
  }
  else if (a1 < 0 || v3 <= a1)
  {
    uint64_t v4 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v6 = v5;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v7 = v4;
    *(void *)(v7 + 8) = v6;
    *(unsigned char *)(v7 + 16) = 0;
    swift_willThrow();
  }
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> VDAFProtocol.isLeaderAggregatorID(_:)(Swift::Int a1)
{
  return a1 == 0;
}

uint64_t Client.shard(_:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5);
  int64_t v16 = specialized static FixedWidthInteger.randomVector(count:)(v9);
  unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int64_t *, uint64_t, unint64_t, uint64_t, uint64_t))(a5 + 24);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  unint64_t v12 = lazy protocol witness table accessor for type [UInt8] and conformance [A]();
  uint64_t v13 = v10(a1, a2, a3, &v16, v11, v12, a4, a5);
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t Aggregator.prepareMessageFrom(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v18 = a1;
  v17[1] = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17[0] = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness, v8);
  unint64_t v10 = (char *)v17 - v9;
  uint64_t v19 = MEMORY[0x263F8EE78];
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unint64_t v12 = *(uint64_t (**)(uint64_t *, uint64_t, unint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                         + 16);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  unint64_t v14 = lazy protocol witness table accessor for type [UInt8] and conformance [A]();
  uint64_t result = v12(&v19, v13, v14, AssociatedTypeWitness, AssociatedConformanceWitness);
  if (!v4)
  {
    uint64_t v16 = v17[0];
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(a3 + 136))(v18, v10, a2, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v10, AssociatedTypeWitness);
  }
  return result;
}

size_t specialized _copyCollectionToContiguousArray<A>(_:)(size_t result, unint64_t a2)
{
  if (!result) {
    return MEMORY[0x263F8EE78];
  }
  Swift::Int v3 = (const void *)result;
  int64_t v4 = a2 - result;
  if (a2 == result) {
    return MEMORY[0x263F8EE78];
  }
  if (v4 < 1)
  {
    uint64_t v5 = (void *)MEMORY[0x263F8EE78];
    if (!a2) {
      goto LABEL_13;
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v5 = (void *)swift_allocObject();
    uint64_t result = _swift_stdlib_malloc_size(v5);
    v5[2] = v4;
    v5[3] = 2 * result - 64;
    if (!a2) {
      goto LABEL_13;
    }
  }
  if ((unint64_t)v3 < a2)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      memmove(v5 + 4, v3, v4);
      return (size_t)v5;
    }
    __break(1u);
  }
LABEL_13:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t specialized VDAFProtocol.domainSeparationTag(usage:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v4 = *a1;
  return (*(uint64_t (**)(char *))(a3 + 240))(&v4);
}

unint64_t instantiation function for generic protocol witness table for VDAFError(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
  unint64_t result = lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type VDAFCodepoint and conformance VDAFCodepoint()
{
  unint64_t result = lazy protocol witness table cache variable for type VDAFCodepoint and conformance VDAFCodepoint;
  if (!lazy protocol witness table cache variable for type VDAFCodepoint and conformance VDAFCodepoint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VDAFCodepoint and conformance VDAFCodepoint);
  }
  return result;
}

uint64_t outlined copy of VDAFError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 4u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for VDAFError(uint64_t a1)
{
  return outlined consume of VDAFError(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t outlined consume of VDAFError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 4u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for VDAFError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of VDAFError(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for VDAFError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of VDAFError(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of VDAFError(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for VDAFError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of VDAFError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for VDAFError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for VDAFError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 252;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for VDAFError(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for VDAFError(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for VDAFError()
{
  return &type metadata for VDAFError;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for VDAFCodepoint(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 13;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v8 = v6 - 14;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for VDAFCodepoint(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *__n128 result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x260B81CC0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 13;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for VDAFCodepoint(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for VDAFCodepoint(unsigned char *result, char a2)
{
  *__n128 result = a2;
  return result;
}

ValueMetadata *type metadata accessor for VDAFCodepoint()
{
  return &type metadata for VDAFCodepoint;
}

uint64_t dispatch thunk of static VDAFProtocol.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 208))();
}

uint64_t dispatch thunk of static VDAFProtocol.nonceSize.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 216))();
}

uint64_t dispatch thunk of static VDAFProtocol.version.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 224))();
}

uint64_t dispatch thunk of VDAFProtocol.numOfAggregators.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 232))();
}

uint64_t dispatch thunk of static VDAFProtocol.domainSeparationTag(usage:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 240))();
}

uint64_t dispatch thunk of Client.randomSizeForShard.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of Client.shard<A>(_:nonce:seedBytes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 24))();
}

uint64_t type metadata completion function for PrepareTransition()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v4[4] = v4;
      uint64_t result = swift_getAssociatedTypeWitness();
      if (v3 <= 0x3F)
      {
        v4[5] = *(void *)(result - 8) + 64;
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for PrepareTransition(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v22 = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(v22 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = v5 + v7;
  unint64_t v9 = (v8 & ~(unint64_t)v7) + *(void *)(v6 + 64);
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  if (*(void *)(v11 + 64) <= v9) {
    unint64_t v12 = v9;
  }
  else {
    unint64_t v12 = *(void *)(*(void *)(v10 - 8) + 64);
  }
  uint64_t v13 = (*(unsigned char *)(v4 + 80) | v7 | *(unsigned char *)(v11 + 80));
  if (v13 <= 7
    && v12 + 1 <= 0x18
    && ((*(_DWORD *)(v4 + 80) | v7 | *(_DWORD *)(v11 + 80)) & 0x100000) == 0)
  {
    unsigned int v17 = a2[v12];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v12 <= 3) {
        uint64_t v19 = v12;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          if (v12 >= 4) {
            goto LABEL_26;
          }
          goto LABEL_22;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          if (v12 >= 4) {
            goto LABEL_26;
          }
          goto LABEL_22;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v12 < 4) {
            goto LABEL_22;
          }
          goto LABEL_26;
        case 4:
          int v20 = *(_DWORD *)a2;
          if (v12 < 4)
          {
LABEL_22:
            unsigned int v17 = (v20 | (v18 << (8 * v12))) + 2;
            break;
          }
LABEL_26:
          if (v20 != -1) {
            goto LABEL_27;
          }
          goto LABEL_24;
        default:
          break;
      }
    }
    if (v17 == 1)
    {
LABEL_24:
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v11 + 16))(a1, a2, v10);
      *((unsigned char *)a1 + v12) = 1;
    }
    else
    {
LABEL_27:
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v4 + 16))(a1, a2, AssociatedTypeWitness);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((unint64_t)a1 + v8) & ~(unint64_t)v7, (unint64_t)&a2[v8] & ~(unint64_t)v7, v22);
      *((unsigned char *)a1 + v12) = 0;
    }
  }
  else
  {
    uint64_t v16 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v16 + ((v13 + 16) & ~v13));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for PrepareTransition(unsigned __int8 *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(v5 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v7 = v4 + v6;
  unint64_t v8 = (v7 & ~v6) + *(void *)(v20 + 64);
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(v9 - 8);
  unint64_t v11 = *(void *)(v10 + 64);
  if (v11 <= v8) {
    unint64_t v11 = v8;
  }
  unsigned int v12 = a1[v11];
  unsigned int v13 = v12 - 2;
  if (v12 >= 2)
  {
    if (v11 <= 3) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *a1;
        goto LABEL_12;
      case 2:
        int v15 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v15 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v15 = *(_DWORD *)a1;
LABEL_12:
        int v16 = (v15 | (v13 << (8 * v11))) + 2;
        unsigned int v12 = v15 + 2;
        if (v11 < 4) {
          unsigned int v12 = v16;
        }
        break;
      default:
        break;
    }
  }
  if (v12 == 1)
  {
    unsigned int v17 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v10 + 8);
    return v17(a1, v9);
  }
  else
  {
    (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness, v10);
    uint64_t v19 = *(uint64_t (**)(unint64_t, uint64_t))(v20 + 8);
    return v19((unint64_t)&a1[v7] & ~v6, v5);
  }
}

uint64_t initializeWithCopy for PrepareTransition(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = v5 + v8;
  unint64_t v10 = (v9 & ~v8) + *(void *)(v7 + 64);
  uint64_t v11 = swift_getAssociatedTypeWitness();
  if (*(void *)(*(void *)(v11 - 8) + 64) <= v10) {
    unint64_t v12 = v10;
  }
  else {
    unint64_t v12 = *(void *)(*(void *)(v11 - 8) + 64);
  }
  unsigned int v13 = a2[v12];
  unsigned int v14 = v13 - 2;
  if (v13 >= 2)
  {
    if (v12 <= 3) {
      uint64_t v15 = v12;
    }
    else {
      uint64_t v15 = 4;
    }
    switch(v15)
    {
      case 1:
        int v16 = *a2;
        goto LABEL_13;
      case 2:
        int v16 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v16 = *(_DWORD *)a2;
LABEL_13:
        int v17 = (v16 | (v14 << (8 * v12))) + 2;
        unsigned int v13 = v16 + 2;
        if (v12 < 4) {
          unsigned int v13 = v17;
        }
        break;
      default:
        break;
    }
  }
  if (v13 == 1)
  {
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
    char v18 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v4 + 16))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16))((v9 + a1) & ~v8, (unint64_t)&a2[v9] & ~v8, v6);
    char v18 = 0;
  }
  *(unsigned char *)(a1 + v12) = v18;
  return a1;
}

unsigned __int8 *assignWithCopy for PrepareTransition(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v25 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v26 = AssociatedTypeWitness;
    uint64_t v5 = *(void *)(v25 + 64);
    uint64_t v6 = swift_getAssociatedTypeWitness();
    uint64_t v7 = *(void *)(v6 - 8);
    uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
    uint64_t v9 = v5 + v8;
    unint64_t v10 = (v9 & ~v8) + *(void *)(v7 + 64);
    uint64_t v11 = swift_getAssociatedTypeWitness();
    uint64_t v12 = *(void *)(v11 - 8);
    if (*(void *)(v12 + 64) <= v10) {
      unint64_t v13 = v10;
    }
    else {
      unint64_t v13 = *(void *)(*(void *)(v11 - 8) + 64);
    }
    unsigned int v14 = a1[v13];
    unsigned int v15 = v14 - 2;
    if (v14 >= 2)
    {
      if (v13 <= 3) {
        uint64_t v16 = v13;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a1;
          if (v13 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 2:
          int v17 = *(unsigned __int16 *)a1;
          if (v13 >= 4) {
            goto LABEL_17;
          }
          goto LABEL_15;
        case 3:
          int v17 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v13 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 4:
          int v17 = *(_DWORD *)a1;
          if (v13 < 4) {
LABEL_15:
          }
            unsigned int v14 = (v17 | (v15 << (8 * v13))) + 2;
          else {
LABEL_17:
          }
            unsigned int v14 = v17 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v18 = ~v8;
    if (v14 == 1)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v12 + 8))(a1, v11);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v25 + 8))(a1, v26);
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))((unint64_t)&a1[v9] & v18, v6);
    }
    unsigned int v19 = a2[v13];
    unsigned int v20 = v19 - 2;
    if (v19 >= 2)
    {
      if (v13 <= 3) {
        uint64_t v21 = v13;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *a2;
          if (v13 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          if (v13 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v13 < 4) {
            goto LABEL_31;
          }
          goto LABEL_35;
        case 4:
          int v22 = *(_DWORD *)a2;
          if (v13 < 4)
          {
LABEL_31:
            unsigned int v19 = (v22 | (v20 << (8 * v13))) + 2;
            break;
          }
LABEL_35:
          if (v22 != -1) {
            goto LABEL_36;
          }
          goto LABEL_33;
        default:
          break;
      }
    }
    if (v19 == 1)
    {
LABEL_33:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v12 + 16))(a1, a2, v11);
      char v23 = 1;
    }
    else
    {
LABEL_36:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v25 + 16))(a1, a2, v26);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))((unint64_t)&a1[v9] & v18, (unint64_t)&a2[v9] & v18, v6);
      char v23 = 0;
    }
    a1[v13] = v23;
  }
  return a1;
}

uint64_t initializeWithTake for PrepareTransition(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = v5 + v8;
  unint64_t v10 = (v9 & ~v8) + *(void *)(v7 + 64);
  uint64_t v11 = swift_getAssociatedTypeWitness();
  if (*(void *)(*(void *)(v11 - 8) + 64) <= v10) {
    unint64_t v12 = v10;
  }
  else {
    unint64_t v12 = *(void *)(*(void *)(v11 - 8) + 64);
  }
  unsigned int v13 = a2[v12];
  unsigned int v14 = v13 - 2;
  if (v13 >= 2)
  {
    if (v12 <= 3) {
      uint64_t v15 = v12;
    }
    else {
      uint64_t v15 = 4;
    }
    switch(v15)
    {
      case 1:
        int v16 = *a2;
        goto LABEL_13;
      case 2:
        int v16 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v16 = *(_DWORD *)a2;
LABEL_13:
        int v17 = (v16 | (v14 << (8 * v12))) + 2;
        unsigned int v13 = v16 + 2;
        if (v12 < 4) {
          unsigned int v13 = v17;
        }
        break;
      default:
        break;
    }
  }
  if (v13 == 1)
  {
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
    char v18 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v4 + 32))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 32))((v9 + a1) & ~v8, (unint64_t)&a2[v9] & ~v8, v6);
    char v18 = 0;
  }
  *(unsigned char *)(a1 + v12) = v18;
  return a1;
}

unsigned __int8 *assignWithTake for PrepareTransition(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v25 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v26 = AssociatedTypeWitness;
    uint64_t v5 = *(void *)(v25 + 64);
    uint64_t v6 = swift_getAssociatedTypeWitness();
    uint64_t v7 = *(void *)(v6 - 8);
    uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
    uint64_t v9 = v5 + v8;
    unint64_t v10 = (v9 & ~v8) + *(void *)(v7 + 64);
    uint64_t v11 = swift_getAssociatedTypeWitness();
    uint64_t v12 = *(void *)(v11 - 8);
    if (*(void *)(v12 + 64) <= v10) {
      unint64_t v13 = v10;
    }
    else {
      unint64_t v13 = *(void *)(*(void *)(v11 - 8) + 64);
    }
    unsigned int v14 = a1[v13];
    unsigned int v15 = v14 - 2;
    if (v14 >= 2)
    {
      if (v13 <= 3) {
        uint64_t v16 = v13;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a1;
          if (v13 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 2:
          int v17 = *(unsigned __int16 *)a1;
          if (v13 >= 4) {
            goto LABEL_17;
          }
          goto LABEL_15;
        case 3:
          int v17 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v13 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 4:
          int v17 = *(_DWORD *)a1;
          if (v13 < 4) {
LABEL_15:
          }
            unsigned int v14 = (v17 | (v15 << (8 * v13))) + 2;
          else {
LABEL_17:
          }
            unsigned int v14 = v17 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v18 = ~v8;
    if (v14 == 1)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v12 + 8))(a1, v11);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v25 + 8))(a1, v26);
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))((unint64_t)&a1[v9] & v18, v6);
    }
    unsigned int v19 = a2[v13];
    unsigned int v20 = v19 - 2;
    if (v19 >= 2)
    {
      if (v13 <= 3) {
        uint64_t v21 = v13;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *a2;
          if (v13 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          if (v13 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v13 < 4) {
            goto LABEL_31;
          }
          goto LABEL_35;
        case 4:
          int v22 = *(_DWORD *)a2;
          if (v13 < 4)
          {
LABEL_31:
            unsigned int v19 = (v22 | (v20 << (8 * v13))) + 2;
            break;
          }
LABEL_35:
          if (v22 != -1) {
            goto LABEL_36;
          }
          goto LABEL_33;
        default:
          break;
      }
    }
    if (v19 == 1)
    {
LABEL_33:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v12 + 32))(a1, a2, v11);
      char v23 = 1;
    }
    else
    {
LABEL_36:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v25 + 32))(a1, a2, v26);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))((unint64_t)&a1[v9] & v18, (unint64_t)&a2[v9] & v18, v6);
      char v23 = 0;
    }
    a1[v13] = v23;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for PrepareTransition(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  uint64_t v5 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v6 = ((v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(void *)(v5 + 64);
  unint64_t v7 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v7 <= v6) {
    unint64_t v8 = v6;
  }
  else {
    unint64_t v8 = v7;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_23;
  }
  unint64_t v9 = v8 + 1;
  char v10 = 8 * (v8 + 1);
  if ((v8 + 1) <= 3)
  {
    unsigned int v13 = ((a2 + ~(-1 << v10) - 254) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      unsigned int v15 = *((unsigned __int8 *)a1 + v8);
      if (v15 >= 2) {
        return (v15 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v9 | v14) + 255;
}

void storeEnumTagSinglePayload for PrepareTransition(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v8 = ((v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + *(void *)(v7 + 64);
  unint64_t v9 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v9 <= v8) {
    unint64_t v9 = v8;
  }
  size_t v10 = v9 + 1;
  if (a3 < 0xFF)
  {
    int v11 = 0;
  }
  else if (v10 <= 3)
  {
    unsigned int v14 = ((a3 + ~(-1 << (8 * v10)) - 254) >> (8 * v10)) + 1;
    if (HIWORD(v14))
    {
      int v11 = 4;
    }
    else if (v14 >= 0x100)
    {
      int v11 = 2;
    }
    else
    {
      int v11 = v14 > 1;
    }
  }
  else
  {
    int v11 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v12 = a2 - 255;
    if (v10 < 4)
    {
      int v13 = (v12 >> (8 * v10)) + 1;
      if (v9 != -1)
      {
        int v15 = v12 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v9 + 1);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v10] = v13;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v13;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x260B83614);
      case 4:
        *(_DWORD *)&a1[v10] = v13;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v11)
    {
      case 1:
        a1[v10] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v9] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for PrepareTransition(unsigned __int8 *a1)
{
  uint64_t v2 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  uint64_t v3 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v4 = ((v2 + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + *(void *)(v3 + 64);
  unint64_t v5 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v5 <= v4) {
    unint64_t v5 = v4;
  }
  uint64_t result = a1[v5];
  if (result >= 2)
  {
    if (v5 <= 3) {
      uint64_t v7 = v5;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_12;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v9 = (v8 | ((result - 2) << (8 * v5))) + 2;
        unsigned int v10 = v8 + 2;
        if (v5 >= 4) {
          uint64_t result = v10;
        }
        else {
          uint64_t result = v9;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void destructiveInjectEnumTag for PrepareTransition(unsigned char *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v5 = v4;
  if (a2 > 1)
  {
    uint64_t v8 = *(void *)(v4 + 64);
    uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness() - 8);
    unint64_t v10 = ((v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
        + *(void *)(v9 + 64);
    size_t v11 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
    if (v11 <= v10) {
      size_t v12 = v10;
    }
    else {
      size_t v12 = v11;
    }
    unsigned int v13 = a2 - 2;
    if (v12 < 4)
    {
      unsigned int v14 = v13 >> (8 * v12);
      int v15 = v13 & ~(-1 << (8 * v12));
      a1[v12] = v14 + 2;
      bzero(a1, v12);
      if (v12 == 3)
      {
        *(_WORD *)a1 = v15;
        a1[2] = BYTE2(v15);
      }
      else if (v12 == 2)
      {
        *(_WORD *)a1 = v15;
      }
      else
      {
        *a1 = v15;
      }
    }
    else
    {
      a1[v12] = 2;
      bzero(a1, v12);
      *(_DWORD *)a1 = v13;
    }
  }
  else
  {
    uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
    unint64_t v7 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
    if (v7 <= ((*(void *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
             + *(void *)(v6 + 64))
      unint64_t v7 = ((*(void *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
         + *(void *)(v6 + 64);
    a1[v7] = a2;
  }
}

uint64_t type metadata accessor for PrepareTransition()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t dispatch thunk of static Aggregator.numOfRounds.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of Aggregator.verifyKeyLength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t dispatch thunk of Aggregator.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a10 + 128))(a1, a2);
}

uint64_t dispatch thunk of Aggregator.prepareMessageFrom(_:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 136))();
}

uint64_t dispatch thunk of Aggregator.prepareNext(state:message:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 144))();
}

uint64_t dispatch thunk of Aggregator.aggregate<A>(_:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 152))();
}

uint64_t dispatch thunk of Aggregator.isValid(parameter:previousParameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 160))();
}

uint64_t dispatch thunk of Aggregator.inputShare<A>(from:aggregatorID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 168))();
}

uint64_t dispatch thunk of Aggregator.publicShare<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 176))();
}

uint64_t dispatch thunk of Aggregator.prepareState<A>(from:aggregatorID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 184))();
}

uint64_t dispatch thunk of Aggregator.prepareShare<A>(from:aggregatorID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 192))();
}

uint64_t dispatch thunk of Aggregator.prepareMessage<A>(from:aggregatorID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 200))();
}

uint64_t dispatch thunk of Aggregator.outputShare<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 208))();
}

uint64_t dispatch thunk of Collector.unshard<A>(_:numOfMeasurements:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 16))();
}

uint64_t dispatch thunk of Collector.aggregateShare<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

void static VerificationJointRandomness.partUsage.getter(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

void static VerificationJointRandomness.seedUsage.getter(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

void static VerificationJointRandomness.randomnessUsage.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t VerificationJointRandomness.parts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t VerificationJointRandomness.seed.getter()
{
  unint64_t v1 = v0;
  if (v0[3])
  {
    uint64_t v2 = v0[3];
  }
  else
  {
    uint64_t v3 = *v0;
    uint64_t v4 = v1[2];
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v2 = static JointRandomness.jointRandSeed(parts:)(v4, v3, WitnessTable);
    v1[3] = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t VerificationJointRandomness.seed.setter(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*VerificationJointRandomness.seed.modify(uint64_t *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = VerificationJointRandomness.seed.getter();
  return VerificationJointRandomness.seed.modify;
}

uint64_t VerificationJointRandomness.seed.modify(void *a1)
{
  *(void *)(a1[1] + 24) = *a1;
  return swift_bridgeObjectRelease();
}

uint64_t VerificationJointRandomness.xof.getter()
{
  if (v0[4])
  {
    uint64_t v1 = v0[4];
  }
  else
  {
    uint64_t v1 = closure #1 in VerificationJointRandomness.xof.getter(v0);
    v0[4] = v1;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRetain();
  return v1;
}

uint64_t VerificationJointRandomness.xof.setter(uint64_t a1)
{
  *(void *)(v1 + 32) = a1;
  return swift_unknownObjectRelease();
}

uint64_t closure #1 in VerificationJointRandomness.xof.getter(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 96);
  uint64_t v3 = *(void *)(*a1 + 80);
  uint64_t v4 = VerificationJointRandomness.seed.getter();
  char v12 = 2;
  uint64_t v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 240))(&v12, v3, v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_260BF9FF0;
  unint64_t v7 = a1[6];
  if ((v7 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v7 <= 0xFF)
  {
    uint64_t v8 = result;
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    *(unsigned char *)(v8 + 32) = v7;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v11 = static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(v4, v5, v8, AssociatedTypeWitness, AssociatedConformanceWitness);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t (*VerificationJointRandomness.xof.modify(uint64_t *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = VerificationJointRandomness.xof.getter();
  return VerificationJointRandomness.xof.modify;
}

uint64_t VerificationJointRandomness.xof.modify(void *a1)
{
  *(void *)(a1[1] + 32) = *a1;
  return swift_unknownObjectRelease();
}

uint64_t VerificationJointRandomness.count.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t VerificationJointRandomness.numOfProofs.getter()
{
  return *(void *)(v0 + 48);
}

void *VerificationJointRandomness.__allocating_init(count:numOfProofs:parts:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (void *)swift_allocObject();
  result[4] = 0;
  result[5] = a1;
  result[6] = a2;
  result[2] = a3;
  result[3] = 0;
  return result;
}

void *VerificationJointRandomness.init(count:numOfProofs:parts:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = 0;
  v3[5] = a1;
  v3[6] = a2;
  v3[2] = a3;
  v3[3] = 0;
  return v3;
}

uint64_t VerificationJointRandomness.next()()
{
  uint64_t v1 = *(void *)(*v0 + 88);
  uint64_t v2 = v0[5];
  uint64_t v3 = VerificationJointRandomness.xof.getter();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v4 = static FieldElement.randomVector<A>(count:using:)(v2, v3, v1);
  swift_unknownObjectRelease();
  return v4;
}

uint64_t VerificationJointRandomness.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t VerificationJointRandomness.__deallocating_deinit()
{
  VerificationJointRandomness.deinit();

  return swift_deallocClassInstance();
}

uint64_t associated type witness table accessor for JointRandomness.F : FieldElement in VerificationJointRandomness<A, B>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 104);
}

uint64_t associated type witness table accessor for JointRandomness.VDAF : VDAFProtocol in VerificationJointRandomness<A, B>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 96);
}

void protocol witness for static JointRandomness.partUsage.getter in conformance VerificationJointRandomness<A, B>(unsigned char *a1@<X8>)
{
}

void protocol witness for static JointRandomness.seedUsage.getter in conformance VerificationJointRandomness<A, B>(unsigned char *a1@<X8>)
{
}

void protocol witness for static JointRandomness.randomnessUsage.getter in conformance VerificationJointRandomness<A, B>(unsigned char *a1@<X8>)
{
}

uint64_t protocol witness for JointRandomness.parts.getter in conformance VerificationJointRandomness<A, B>()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for JointRandomness.seed.getter in conformance VerificationJointRandomness<A, B>()
{
  return VerificationJointRandomness.seed.getter();
}

uint64_t protocol witness for JointRandomness.xof.getter in conformance VerificationJointRandomness<A, B>()
{
  return VerificationJointRandomness.xof.getter();
}

uint64_t protocol witness for JointRandomness.next() in conformance VerificationJointRandomness<A, B>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = VerificationJointRandomness.next()();
  *a1 = result;
  return result;
}

uint64_t sub_260B842E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = VerificationJointRandomness.seed.getter();
  *a1 = result;
  return result;
}

uint64_t sub_260B8430C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, MEMORY[0x263F8EEA8], VerificationJointRandomness.seed.setter);
}

uint64_t sub_260B84338()
{
  return 32;
}

__n128 sub_260B84344(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_260B84350@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = VerificationJointRandomness.xof.getter();
  *a1 = result;
  return result;
}

uint64_t sub_260B8437C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, MEMORY[0x263F8EEF0], VerificationJointRandomness.xof.setter);
}

uint64_t keypath_setTm(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(uint64_t))
{
  uint64_t v7 = a5(*a1);
  return a6(v7);
}

uint64_t sub_260B843E0()
{
  return 32;
}

__n128 sub_260B843EC(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t type metadata instantiation function for VerificationJointRandomness()
{
  return MEMORY[0x270FA01A0]();
}

uint64_t type metadata completion function for VerificationJointRandomness()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for VerificationJointRandomness()
{
  return swift_getGenericMetadata();
}

uint64_t method lookup function for VerificationJointRandomness(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VerificationJointRandomness);
}

uint64_t dispatch thunk of VerificationJointRandomness.__allocating_init(count:numOfProofs:parts:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t RandomAccessCollection<>.popFirst(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v2, a2);
  Collection.prefix(_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v6, v2, a2);
  return Collection.dropFirst(_:)();
}

BOOL specialized SignedInteger<>.isMultiple(of:)(unint64_t a1, uint64_t a2, unint64_t a3, int64_t a4)
{
  if (!(a2 | a1)) {
    return (a4 | a3) == 0;
  }
  if (a2 == -1 && a1 == -1) {
    return 1;
  }
  _Int128.quotientAndRemainder(dividingBy:)(a1, a2, a3, a4);
  return !v6 && v5 == 0;
}

uint64_t _UInt128.low.getter()
{
  return *(void *)v0;
}

uint64_t _UInt128.low.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_UInt128.low.modify())()
{
  return AggregateShare.share.modify;
}

uint64_t _UInt128.high.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t _UInt128.high.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*_UInt128.high.modify())()
{
  return AggregateShare.share.modify;
}

uint64_t _UInt128.init(high:low:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a2;
  a3[1] = result;
  return result;
}

void _UInt128.init()(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t _UInt128.init(bitPattern:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

double static _UInt128.one.getter@<D0>(_OWORD *a1@<X8>)
{
  *(void *)&double result = 1;
  *a1 = xmmword_260BFA5F0;
  return result;
}

uint64_t _UInt128.description.getter()
{
  lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
  v0._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 30768;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _UInt128()
{
  lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
  v0._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 30768;
}

uint64_t _UInt128.debugDescription.getter()
{
  lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
  v0._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 30768;
}

BOOL static _UInt128.== infix(_:_:)(void *a1, void *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

BOOL static _UInt128.< infix(_:_:)(void *a1, void *a2)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = a2[1];
  BOOL v4 = v2 == v3;
  BOOL v5 = v2 < v3;
  if (v4) {
    return *a1 < *a2;
  }
  else {
    return v5;
  }
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance _UInt128(void *a1, void *a2)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = a2[1];
  BOOL v4 = v2 == v3;
  BOOL v5 = v2 < v3;
  if (v4) {
    return *a1 < *a2;
  }
  else {
    return v5;
  }
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance _UInt128(void *a1, void *a2)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = a2[1];
  BOOL v4 = v3 == v2;
  BOOL v5 = v3 >= v2;
  if (v4) {
    return *a2 >= *a1;
  }
  else {
    return v5;
  }
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance _UInt128(void *a1, void *a2)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = a2[1];
  BOOL v4 = v2 == v3;
  BOOL v5 = v2 >= v3;
  if (v4) {
    return *a1 >= *a2;
  }
  else {
    return v5;
  }
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance _UInt128(void *a1, void *a2)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = a2[1];
  BOOL v4 = v3 == v2;
  BOOL v5 = v3 < v2;
  if (v4) {
    return *a2 < *a1;
  }
  else {
    return v5;
  }
}

void _UInt128.hash(into:)()
{
  Swift::UInt64 v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int _UInt128.hashValue.getter()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance _UInt128()
{
  Swift::UInt64 v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

uint64_t _UInt128.components.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t (*_UInt128.components.modify(int8x16_t *a1))()
{
  a1[1].i64[0] = (uint64_t)v1;
  *a1 = vextq_s8(*v1, *v1, 8uLL);
  return _UInt128.components.modify;
}

unint64_t *static _UInt128.- infix(_:_:)@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = *result;
  unint64_t v3 = result[1];
  unint64_t v6 = *a2;
  unint64_t v5 = a2[1];
  BOOL v7 = v3 >= v5;
  unint64_t v8 = v3 - v5;
  char v9 = !v7;
  BOOL v7 = v4 >= v6;
  unint64_t v10 = v4 - v6;
  if (v7)
  {
    if ((v9 & 1) == 0)
    {
      *a3 = v10;
      a3[1] = v8;
      return result;
    }
  }
  else
  {
    if (!v8) {
      char v9 = 1;
    }
    if ((v9 & 1) == 0)
    {
      *a3 = v10;
      a3[1] = v8 - 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

unint64_t _UInt128.subtractingReportingOverflow(_:)(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  unint64_t v5 = *v2;
  unint64_t v6 = v2[1];
  BOOL v7 = v6 >= v4;
  unint64_t v8 = v6 - v4;
  int v9 = !v7;
  BOOL v7 = v5 >= v3;
  unint64_t v10 = v5 - v3;
  LODWORD(v3) = v5 < v3;
  if (v7)
  {
    if (v9)
    {
      unint64_t v3 = 1;
      unint64_t v11 = v8;
      goto LABEL_13;
    }
    unint64_t v11 = v8;
  }
  else
  {
    unint64_t v11 = v8 - 1;
    if (v9)
    {
      unint64_t v3 = 1;
      goto LABEL_13;
    }
  }
  if (v8) {
    unint64_t v3 = 0;
  }
  else {
    unint64_t v3 = v3;
  }
LABEL_13:
  *a1 = v10;
  a1[1] = v11;
  return v3;
}

unint64_t *static _UInt128.-= infix(_:_:)(unint64_t *result, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unint64_t v2 = a2[1];
  unint64_t v5 = *result;
  unint64_t v4 = result[1];
  BOOL v6 = v4 >= v2;
  unint64_t v7 = v4 - v2;
  char v8 = !v6;
  BOOL v6 = v5 >= v3;
  unint64_t v9 = v5 - v3;
  if (v6)
  {
    if ((v8 & 1) == 0)
    {
      *double result = v9;
      result[1] = v7;
      return result;
    }
  }
  else
  {
    if (!v7) {
      char v8 = 1;
    }
    if ((v8 & 1) == 0)
    {
      *double result = v9;
      result[1] = v7 - 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

void *static _UInt128.+ infix(_:_:)@<X0>(void *result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  BOOL v5 = __CFADD__(*result, *a2);
  BOOL v6 = __CFADD__(v3, v4);
  uint64_t v7 = v3 + v4;
  if (v6 || (v5 ? (BOOL v8 = v7 == -1) : (BOOL v8 = 0), v8))
  {
    __break(1u);
  }
  else
  {
    *a3 = *result + *a2;
    a3[1] = v7 + v5;
  }
  return result;
}

uint64_t _UInt128.addingReportingOverflow(_:)(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = v2[1];
  BOOL v5 = __CFADD__(*v2, *a2);
  BOOL v6 = __CFADD__(v4, v3);
  uint64_t v7 = v4 + v3;
  if (v6)
  {
    uint64_t v8 = 1;
    if (v5)
    {
LABEL_12:
      uint64_t v9 = 1;
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v8 = v7 == -1 && v5;
    if (v5) {
      goto LABEL_12;
    }
  }
  uint64_t v9 = 0;
LABEL_13:
  *a1 = *v2 + *a2;
  a1[1] = v9 + v7;
  return v8;
}

void *static _UInt128.+= infix(_:_:)(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  uint64_t v3 = result[1];
  BOOL v4 = __CFADD__(*result, *a2);
  BOOL v5 = __CFADD__(v3, v2);
  uint64_t v6 = v3 + v2;
  if (v5 || (v4 ? (BOOL v7 = v6 == -1) : (BOOL v7 = 0), v7))
  {
    __break(1u);
  }
  else
  {
    *result += *a2;
    result[1] = v6 + v4;
  }
  return result;
}

void *protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance _UInt128@<X0>(void *result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  BOOL v5 = __CFADD__(*result, *a2);
  BOOL v6 = __CFADD__(v3, v4);
  uint64_t v7 = v3 + v4;
  if (v6 || (v5 ? (BOOL v8 = v7 == -1) : (BOOL v8 = 0), v8))
  {
    __break(1u);
  }
  else
  {
    *a3 = *result + *a2;
    a3[1] = v7 + v5;
  }
  return result;
}

void *protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance _UInt128(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  uint64_t v3 = result[1];
  BOOL v4 = __CFADD__(*result, *a2);
  BOOL v5 = __CFADD__(v3, v2);
  uint64_t v6 = v3 + v2;
  if (v5 || (v4 ? (BOOL v7 = v6 == -1) : (BOOL v7 = 0), v7))
  {
    __break(1u);
  }
  else
  {
    *result += *a2;
    result[1] = v6 + v4;
  }
  return result;
}

unint64_t *protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance _UInt128@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = *result;
  unint64_t v3 = result[1];
  unint64_t v6 = *a2;
  unint64_t v5 = a2[1];
  BOOL v7 = v3 >= v5;
  unint64_t v8 = v3 - v5;
  char v9 = !v7;
  BOOL v7 = v4 >= v6;
  unint64_t v10 = v4 - v6;
  if (v7)
  {
    if ((v9 & 1) == 0)
    {
      *a3 = v10;
      a3[1] = v8;
      return result;
    }
  }
  else
  {
    if (!v8) {
      char v9 = 1;
    }
    if ((v9 & 1) == 0)
    {
      *a3 = v10;
      a3[1] = v8 - 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

unint64_t *protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance _UInt128(unint64_t *result, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unint64_t v2 = a2[1];
  unint64_t v5 = *result;
  unint64_t v4 = result[1];
  BOOL v6 = v4 >= v2;
  unint64_t v7 = v4 - v2;
  char v8 = !v6;
  BOOL v6 = v5 >= v3;
  unint64_t v9 = v5 - v3;
  if (v6)
  {
    if ((v8 & 1) == 0)
    {
      *double result = v9;
      result[1] = v7;
      return result;
    }
  }
  else
  {
    if (!v7) {
      char v8 = 1;
    }
    if ((v8 & 1) == 0)
    {
      *double result = v9;
      result[1] = v7 - 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

__n128 _UInt128.magnitude.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  return result;
}

__n128 _UInt128.init(_:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t _UInt128.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1, a2);
  unint64_t v10 = (char *)&v15[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a2);
  uint64_t result = _UInt128.init<A>(exactly:)(v10, a2, a3, v15);
  if (v16 == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v13 = v15[0];
    uint64_t v12 = v15[1];
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1, a2);
    *a4 = v13;
    a4[1] = v12;
  }
  return result;
}

uint64_t _UInt128.init<A>(exactly:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  long long v187 = a4;
  unint64_t v7 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t v175 = *(void *)(swift_getAssociatedConformanceWitness() + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness, v8);
  uint64_t v173 = (char *)&v163 - v9;
  unint64_t v10 = (void (*)(char *, uint64_t))swift_checkMetadataState();
  uint64_t v188 = *((void *)v10 - 1);
  uint64_t v12 = MEMORY[0x270FA5388](v10, v11);
  uint64_t v169 = (char *)&v163 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12, v14);
  unint64_t v180 = (char *)&v163 - v16;
  uint64_t v18 = MEMORY[0x270FA5388](v15, v17);
  uint64_t v182 = (char *)&v163 - v19;
  uint64_t v21 = MEMORY[0x270FA5388](v18, v20);
  char v23 = (char *)&v163 - v22;
  MEMORY[0x270FA5388](v21, v24);
  unint64_t v190 = v7;
  uint64_t v191 = (char *)&v163 - v25;
  uint64_t v179 = *(void *)(v7 + 16);
  uint64_t v178 = swift_getAssociatedTypeWitness();
  uint64_t v27 = MEMORY[0x270FA5388](v178, v26);
  uint64_t v177 = (char *)&v163 - v28;
  uint64_t v30 = MEMORY[0x270FA5388](v27, v29);
  long long v168 = (char *)&v163 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = MEMORY[0x270FA5388](v30, v32);
  uint64_t v172 = (char *)&v163 - v34;
  uint64_t v36 = MEMORY[0x270FA5388](v33, v35);
  long long v167 = (char *)&v163 - v37;
  uint64_t v39 = MEMORY[0x270FA5388](v36, v38);
  v171 = (char *)&v163 - v40;
  uint64_t v42 = MEMORY[0x270FA5388](v39, v41);
  unint64_t v181 = (char *)&v163 - v43;
  uint64_t v45 = MEMORY[0x270FA5388](v42, v44);
  int64_t v170 = (char *)&v163 - v46;
  uint64_t v48 = MEMORY[0x270FA5388](v45, v47);
  unint64_t v176 = (char *)&v163 - v49;
  uint64_t v51 = MEMORY[0x270FA5388](v48, v50);
  uint64_t v184 = (char *)&v163 - v52;
  uint64_t v54 = MEMORY[0x270FA5388](v51, v53);
  v183 = (char *)&v163 - v55;
  uint64_t v57 = MEMORY[0x270FA5388](v54, v56);
  uint64_t v59 = (char *)&v163 - v58;
  uint64_t v61 = MEMORY[0x270FA5388](v57, v60);
  uint64_t v63 = (char *)&v163 - v62;
  MEMORY[0x270FA5388](v61, v64);
  uint64_t v66 = (char *)&v163 - v65;
  uint64_t v192 = v67;
  uint64_t v69 = v67 + 16;
  BOOL v68 = *(void (**)(char *, char *, uint64_t))(v67 + 16);
  v194 = a1;
  long long v186 = v68;
  v68((char *)&v163 - v65, a1, a2);
  char v70 = dispatch thunk of static BinaryInteger.isSigned.getter();
  long long v189 = v63;
  v193 = (void (*)(char *, void *))a3;
  if (v70)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
    {
      unint64_t v195 = 0;
      lazy protocol witness table accessor for type Int and conformance Int();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v76 = dispatch thunk of static Comparable.< infix(_:_:)();
      char v75 = *(void (**)(char *, uint64_t))(v192 + 8);
      v75(v63, a2);
      v75(v66, a2);
      if (v76) {
        goto LABEL_13;
      }
      goto LABEL_17;
    }
  }
  else
  {
    char v71 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v72 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v71)
    {
      if (v72 <= 64)
      {
        swift_getAssociatedConformanceWitness();
        uint64_t v165 = v69;
        dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        uint64_t v80 = v189;
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        char v81 = dispatch thunk of static Comparable.< infix(_:_:)();
        BOOL v82 = *(void (**)(char *, uint64_t))(v192 + 8);
        v82(v80, a2);
        uint64_t v83 = v165;
        v186(v59, v66, a2);
        if (v81)
        {
          v82(v59, a2);
          v82(v66, a2);
          uint64_t result = ((uint64_t (*)(char *, uint64_t))v82)(v194, a2);
          goto LABEL_14;
        }
        uint64_t v119 = dispatch thunk of BinaryInteger._lowWord.getter();
        v82(v59, a2);
        v82(v66, a2);
        char v75 = v82;
        uint64_t v69 = v83;
        if ((v119 & 0x8000000000000000) == 0) {
          goto LABEL_17;
        }
      }
      else
      {
        unint64_t v195 = 0;
        lazy protocol witness table accessor for type Int and conformance Int();
        uint64_t v73 = v189;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        char v74 = dispatch thunk of static Comparable.< infix(_:_:)();
        char v75 = *(void (**)(char *, uint64_t))(v192 + 8);
        v75(v73, a2);
        v75(v66, a2);
        if ((v74 & 1) == 0) {
          goto LABEL_17;
        }
      }
LABEL_13:
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v75)(v194, a2);
LABEL_14:
      BOOL v79 = v187;
      *long long v187 = 0;
      v79[1] = 0;
      *((unsigned char *)v79 + 16) = 1;
      return result;
    }
    if (v72 >= 64)
    {
      char v75 = *(void (**)(char *, uint64_t))(v192 + 8);
      v75(v66, a2);
      goto LABEL_17;
    }
  }
  uint64_t v77 = dispatch thunk of BinaryInteger._lowWord.getter();
  char v75 = *(void (**)(char *, uint64_t))(v192 + 8);
  v75(v66, a2);
  if (v77 < 0) {
    goto LABEL_13;
  }
LABEL_17:
  v185 = v75;
  uint64_t v84 = v191;
  dispatch thunk of Numeric.magnitude.getter();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  char v85 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v86 = v188;
  BOOL v87 = *(void (**)(char *, char *, void (*)(char *, uint64_t)))(v188 + 16);
  v87(v23, v84, v10);
  if ((v85 & 1) == 0)
  {
    uint64_t v164 = *(void (**)(char *, void *))(v86 + 8);
    v164(v23, v10);
    goto LABEL_22;
  }
  uint64_t v165 = v69;
  swift_getAssociatedConformanceWitness();
  uint64_t v88 = v23;
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  uint64_t v89 = v182;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  swift_getAssociatedConformanceWitness();
  char v90 = dispatch thunk of static Comparable.< infix(_:_:)();
  unint64_t v91 = *(void (**)(char *, void *))(v86 + 8);
  v91(v89, v10);
  v91(v88, v10);
  if ((v90 & 1) == 0)
  {
    uint64_t v164 = v91;
    uint64_t v69 = v165;
LABEL_22:
    uint64_t v93 = v191;
    uint64_t v94 = dispatch thunk of BinaryInteger.bitWidth.getter();
    unint64_t v95 = v180;
    v87(v180, v93, v10);
    if (v94 <= 63)
    {
      unint64_t v96 = v95;
      uint64_t v97 = v164;
      v164(v96, v10);
      goto LABEL_24;
    }
    unint64_t v195 = -1;
    char v106 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v107 = dispatch thunk of BinaryInteger.bitWidth.getter();
    uint64_t v92 = v193;
    if (v106)
    {
      if (v107 <= 64)
      {
        uint64_t v165 = v69;
        swift_getAssociatedConformanceWitness();
        dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        BOOL v108 = v182;
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        swift_getAssociatedConformanceWitness();
        char v109 = dispatch thunk of static Comparable.> infix(_:_:)();
        uint64_t v110 = v188;
        unint64_t v111 = v108;
        uint64_t v92 = v164;
        v164(v111, v10);
        uint64_t v182 = (char *)v195;
        unint64_t v112 = (unint64_t)v169;
        (*(void (**)(char *, char *, void (*)(char *, uint64_t)))(v110 + 32))(v169, v95, v10);
        if ((v109 & 1) == 0)
        {
LABEL_53:
          v92((char *)v112, v10);
          uint64_t v97 = v92;
          goto LABEL_24;
        }
        unint64_t v113 = dispatch thunk of BinaryInteger._lowWord.getter();
        unint64_t v114 = v112;
        uint64_t v115 = v92;
        v92((char *)v114, v10);
        uint64_t v92 = v193;
        uint64_t v97 = v115;
        if ((unint64_t)v182 >= v113)
        {
LABEL_24:
          uint64_t v98 = v191;
          uint64_t v99 = dispatch thunk of BinaryInteger._lowWord.getter();
          v97(v98, v10);
          unint64_t v100 = v189;
          dispatch thunk of static AdditiveArithmetic.zero.getter();
          unint64_t v101 = v194;
          uint64_t v102 = dispatch thunk of static Comparable.< infix(_:_:)();
          unint64_t v103 = (uint64_t (*)(uint64_t, uint64_t))v185;
          v185(v100, a2);
          uint64_t v104 = v102 << 63 >> 63;
          if (v102) {
            uint64_t v105 = -v99;
          }
          else {
            uint64_t v105 = v99;
          }
          uint64_t result = v103((uint64_t)v101, a2);
          goto LABEL_73;
        }
LABEL_39:
        v97(v191, v10);
        goto LABEL_40;
      }
    }
    else if (v107 < 65)
    {
      unint64_t v120 = dispatch thunk of BinaryInteger._lowWord.getter();
      unint64_t v121 = v95;
      uint64_t v97 = v164;
      v164(v121, v10);
      if (v195 >= v120) {
        goto LABEL_24;
      }
      goto LABEL_39;
    }
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    uint64_t v116 = v182;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    swift_getAssociatedConformanceWitness();
    LODWORD(v175) = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v117 = v116;
    unint64_t v118 = v164;
    v164(v117, v10);
    v118(v95, v10);
    uint64_t v97 = v118;
    if ((v175 & 1) == 0) {
      goto LABEL_24;
    }
    goto LABEL_39;
  }
  v91(v191, v10);
  uint64_t v92 = v193;
LABEL_40:
  unint64_t v122 = v176;
  unint64_t v195 = -1;
  unint64_t v123 = lazy protocol witness table accessor for type UInt64 and conformance UInt64();
  unint64_t v10 = (void (*)(char *, uint64_t))v189;
  unint64_t v190 = v123;
  dispatch thunk of BinaryInteger.init<A>(_:)();
  uint64_t v124 = v183;
  dispatch thunk of static BinaryInteger.& infix(_:_:)();
  unint64_t v125 = v185;
  v185((char *)v10, a2);
  unint64_t v195 = 64;
  lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)();
  v186(v122, v124, a2);
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0
    || (swift_getAssociatedConformanceWitness(),
        dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(),
        unint64_t v122 = v176,
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(),
        char v126 = dispatch thunk of static Comparable.>= infix(_:_:)(),
        uint64_t result = ((uint64_t (*)(void, uint64_t))v125)(v10, a2),
        (v126 & 1) != 0))
  {
    uint64_t v127 = dispatch thunk of BinaryInteger.bitWidth.getter();
    uint64_t v128 = v171;
    if (v127 < 64) {
      goto LABEL_55;
    }
    uint64_t v129 = v170;
    v186(v170, v122, a2);
    unint64_t v195 = -1;
    char v130 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v131 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v130)
    {
      if (v131 <= 64)
      {
        swift_getAssociatedConformanceWitness();
        dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        uint64_t v132 = v189;
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        char v133 = dispatch thunk of static Comparable.> infix(_:_:)();
        uint64_t v134 = v132;
        unint64_t v10 = v185;
        v185(v134, a2);
        unint64_t v135 = v195;
        uint64_t v136 = v167;
        (*(void (**)(char *, char *, uint64_t))(v192 + 32))(v167, v129, a2);
        if (v133)
        {
          unint64_t v112 = dispatch thunk of BinaryInteger._lowWord.getter();
          v10(v136, a2);
          unint64_t v122 = v176;
          if (v135 < v112) {
            goto LABEL_52;
          }
        }
        else
        {
          v10(v136, a2);
          unint64_t v122 = v176;
        }
        goto LABEL_55;
      }
    }
    else if (v131 < 65)
    {
      unint64_t v112 = dispatch thunk of BinaryInteger._lowWord.getter();
      v185(v129, a2);
      if (v195 < v112)
      {
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
LABEL_55:
      uint64_t v191 = (char *)dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t v139 = v185;
      v185(v122, a2);
      uint64_t v140 = v181;
      uint64_t v141 = v184;
      uint64_t v142 = v186;
      v186(v181, v184, a2);
      char v143 = dispatch thunk of static BinaryInteger.isSigned.getter();
      v142(v128, v140, a2);
      if (v143)
      {
        swift_getAssociatedConformanceWitness();
        dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        uint64_t v144 = v189;
        uint64_t v140 = v181;
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        char v145 = dispatch thunk of static Comparable.< infix(_:_:)();
        v139(v144, a2);
        uint64_t v141 = v184;
        v139(v128, a2);
        if (v145) {
          goto LABEL_70;
        }
      }
      else
      {
        v139(v128, a2);
      }
      uint64_t v146 = dispatch thunk of BinaryInteger.bitWidth.getter();
      unint64_t v147 = v172;
      v186(v172, v140, a2);
      if (v146 <= 63)
      {
        uint64_t v139 = v185;
        v185(v147, a2);
LABEL_72:
        uint64_t v104 = dispatch thunk of BinaryInteger._lowWord.getter();
        v139(v140, a2);
        v139(v194, a2);
        v139(v141, a2);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v139)(v183, a2);
        uint64_t v105 = (uint64_t)v191;
LABEL_73:
        uint64_t v162 = v187;
        *long long v187 = v105;
        v162[1] = v104;
        *((unsigned char *)v162 + 16) = 0;
        return result;
      }
      unint64_t v195 = -1;
      char v148 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v149 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if (v148)
      {
        if (v149 <= 64)
        {
          swift_getAssociatedConformanceWitness();
          dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
          uint64_t v150 = v189;
          dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
          uint64_t v151 = v172;
          char v152 = dispatch thunk of static Comparable.> infix(_:_:)();
          uint64_t v139 = v185;
          v185(v150, a2);
          unint64_t v153 = v195;
          (*(void (**)(char *, char *, uint64_t))(v192 + 32))(v168, v151, a2);
          if ((v152 & 1) == 0)
          {
            v139(v168, a2);
            uint64_t v140 = v181;
            goto LABEL_72;
          }
          long long v154 = v168;
          unint64_t v155 = dispatch thunk of BinaryInteger._lowWord.getter();
          v139(v154, a2);
          BOOL v156 = v153 >= v155;
LABEL_69:
          uint64_t v140 = v181;
          if (v156) {
            goto LABEL_72;
          }
LABEL_70:
          v139(v140, a2);
          v139(v194, a2);
          v139(v141, a2);
          uint64_t result = ((uint64_t (*)(char *, uint64_t))v139)(v183, a2);
          goto LABEL_14;
        }
      }
      else if (v149 < 65)
      {
        long long v160 = v172;
        unint64_t v161 = dispatch thunk of BinaryInteger._lowWord.getter();
        uint64_t v139 = v185;
        v185(v160, a2);
        BOOL v156 = v195 >= v161;
        goto LABEL_69;
      }
      long long v157 = v189;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      unint64_t v158 = v172;
      char v159 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v139 = v185;
      v185(v157, a2);
      v139(v158, a2);
      uint64_t v140 = v181;
      if ((v159 & 1) == 0) {
        goto LABEL_72;
      }
      goto LABEL_70;
    }
    uint64_t v137 = v189;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    unint64_t v112 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v138 = v137;
    unint64_t v10 = v185;
    v185(v138, a2);
    v10(v129, a2);
    if (v112) {
      goto LABEL_52;
    }
    goto LABEL_55;
  }
  __break(1u);
  return result;
}

uint64_t static _UInt128.isSigned.getter()
{
  return 0;
}

unint64_t *static _UInt128.* infix(_:_:)@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, void *a3@<X8>)
{
  unint64_t v3 = *result;
  unint64_t v4 = result[1];
  unint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  BOOL v7 = !is_mul_ok(v4, *a2);
  unint64_t v8 = v4 * *a2;
  BOOL v9 = !is_mul_ok(*result, v6);
  BOOL v10 = __CFADD__(v8, *result * v6);
  unint64_t v11 = v8 + *result * v6;
  char v12 = v10;
  uint64_t v13 = (v5 * (unsigned __int128)v3) >> 64;
  BOOL v10 = __CFADD__(v11, v13);
  uint64_t v14 = v11 + v13;
  char v15 = v10;
  if (v6) {
    BOOL v16 = v4 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16 || v7 || v9 || (v12 & 1) != 0 || (v15 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    *a3 = v5 * v3;
    a3[1] = v14;
  }
  return result;
}

uint64_t _UInt128.multipliedReportingOverflow(by:)(uint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  unint64_t v3 = a2[1];
  unint64_t v6 = *v2;
  unint64_t v5 = v2[1];
  unint64_t v7 = v5 * *a2;
  unint64_t v8 = *v2 * v3;
  if (v5) {
    BOOL v9 = v3 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  LODWORD(v12) = !v9 || (v5 * (unsigned __int128)*a2) >> 64 != 0 || (*v2 * (unsigned __int128)v3) >> 64 != 0;
  BOOL v13 = __CFADD__(v7, v8);
  unint64_t v14 = v7 + v8;
  uint64_t v15 = v6 * v4;
  uint64_t v16 = (v6 * (unsigned __int128)v4) >> 64;
  if (v13) {
    LODWORD(v12) = 1;
  }
  BOOL v13 = __CFADD__(v14, v16);
  uint64_t v17 = v14 + v16;
  if (v13) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = v12;
  }
  *a1 = v15;
  a1[1] = v17;
  return v12;
}

__n128 protocol witness for Numeric.magnitude.getter in conformance _UInt128@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  return result;
}

void *protocol witness for ExpressibleByIntegerLiteral.init(integerLiteral:) in conformance _UInt128@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if ((*result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    *a2 = *result;
    a2[1] = 0;
  }
  return result;
}

uint64_t _UInt128.init(integerLiteral:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    *a2 = result;
    a2[1] = 0;
  }
  return result;
}

__n128 _UInt128.Words._value.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  return result;
}

__n128 _UInt128.Words._value.setter(__n128 *a1)
{
  __n128 result = *a1;
  *Swift::UInt64 v1 = *a1;
  return result;
}

uint64_t (*_UInt128.Words._value.modify())()
{
  return AggregateShare.share.modify;
}

__n128 _UInt128.Words.init(_:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t _UInt128.Words.count.getter()
{
  return 2;
}

uint64_t _UInt128.Words.startIndex.getter()
{
  return 0;
}

uint64_t _UInt128.Words.endIndex.getter()
{
  return 2;
}

uint64_t _UInt128.Words.indices.getter()
{
  return 0;
}

Swift::Int __swiftcall _UInt128.Words.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall _UInt128.Words.index(before:)(Swift::Int before)
{
  BOOL v1 = __OFSUB__(before, 1);
  Swift::Int result = before - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

unint64_t _UInt128.Words.subscript.getter(unint64_t result)
{
  if (result > 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = v1 + 8;
    if (!result) {
      uint64_t v2 = v1;
    }
    return *(void *)v2;
  }
  return result;
}

uint64_t static _UInt128.bitWidth.getter()
{
  return 128;
}

unint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance _UInt128.Words@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

void protocol witness for Collection.startIndex.getter in conformance _UInt128.Words(void *a1@<X8>)
{
  *a1 = 0;
}

void protocol witness for Collection.endIndex.getter in conformance _UInt128.Words(void *a1@<X8>)
{
  *a1 = 2;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance _UInt128.Words(unint64_t *a1, unint64_t *a2))()
{
  *a1 = _UInt128.Words.subscript.getter(*a2);
  return AggregateShare.share.modify;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance _UInt128.Words@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result < 0 || (uint64_t v4 = result[1], v4 > 2))
  {
    __break(1u);
  }
  else
  {
    *(_OWORD *)(a2 + 16) = *v2;
    *(void *)a2 = v3;
    *(void *)(a2 + 8) = v4;
  }
  return result;
}

double protocol witness for Collection.indices.getter in conformance _UInt128.Words@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = xmmword_260BFA600;
  return result;
}

uint64_t protocol witness for Collection.isEmpty.getter in conformance _UInt128.Words()
{
  return 0;
}

uint64_t protocol witness for Collection.count.getter in conformance _UInt128.Words()
{
  return 2;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _UInt128.Words()
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(*v0, v0[1]);
}

void *protocol witness for Sequence._copyContents(initializing:) in conformance _UInt128.Words(void *a1, void *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3, v3[1]);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance _UInt128.Words()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t _UInt128._lowWord.getter()
{
  return *(void *)v0;
}

__n128 _UInt128.words.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  return result;
}

void static _UInt128.max.getter(void *a1@<X8>)
{
  *a1 = -1;
  a1[1] = -1;
}

void static _UInt128.min.getter(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t specialized _wideAddReportingOverflow22<A>(_:_:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  BOOL v10 = __CFADD__(a5, a9);
  uint64_t v11 = a6 + a10;
  if (!__CFADD__(a6, a10))
  {
    unsigned int v12 = v11 == -1 && v10;
    if (v10) {
      goto LABEL_12;
    }
LABEL_7:
    uint64_t v13 = 0;
    goto LABEL_13;
  }
  unsigned int v12 = 1;
  if (!v10) {
    goto LABEL_7;
  }
LABEL_12:
  uint64_t v13 = 1;
LABEL_13:
  uint64_t v14 = a3 + a7;
  BOOL v15 = __CFADD__(a3, a7);
  uint64_t v16 = a4 + a8;
  if (__CFADD__(a4, a8))
  {
    uint64_t v17 = v16 + v15;
    uint64_t v18 = 1;
  }
  else
  {
    if (v16 != -1)
    {
      uint64_t v17 = v16 + v15;
      goto LABEL_24;
    }
    if (!v15)
    {
      uint64_t v17 = -1;
LABEL_24:
      if ((v17 & v14) == 0xFFFFFFFFFFFFFFFFLL) {
        uint64_t v18 = v12;
      }
      else {
        uint64_t v18 = 0;
      }
      goto LABEL_27;
    }
    uint64_t v17 = 0;
    uint64_t v18 = 1;
  }
LABEL_27:
  BOOL v19 = __CFADD__(v14, v12);
  uint64_t v20 = v14 + v12;
  if (v19) {
    uint64_t v21 = v17 + 1;
  }
  else {
    uint64_t v21 = v17;
  }
  *a1 = v20;
  a1[1] = v21;
  *a2 = a5 + a9;
  a2[1] = v13 + v11;
  return v18;
}

uint64_t _UInt128.multipliedReportingOverflow(by:)(void *a1, unint64_t a2)
{
  unint64_t v3 = v2[1];
  BOOL v4 = !is_mul_ok(v3, a2);
  unint64_t v5 = v3 * a2;
  uint64_t v6 = (*v2 * (unsigned __int128)a2) >> 64;
  BOOL v7 = __CFADD__(v5, v6);
  uint64_t v8 = v5 + v6;
  uint64_t v9 = v7 || v4;
  *a1 = *v2 * a2;
  a1[1] = v8;
  return v9;
}

unint64_t _UInt128.multiplied(by:)@<X0>(unint64_t result@<X0>, void *a2@<X8>)
{
  unint64_t v3 = v2[1];
  BOOL v4 = !is_mul_ok(v3, result);
  unint64_t v5 = v3 * result;
  uint64_t v6 = (*v2 * (unsigned __int128)result) >> 64;
  BOOL v7 = __CFADD__(v5, v6);
  uint64_t v8 = v5 + v6;
  char v9 = v7;
  if (v4 || (v9 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    *a2 = *v2 * result;
    a2[1] = v8;
  }
  return result;
}

uint64_t _UInt128.quotientAndRemainder(dividingBy:)(void *a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t result = specialized _wideDivide22<A>(_:by:)(&v11, &v10, &v9, v3[1], *v3, a3[1], *a3);
  unint64_t v7 = v10;
  unint64_t v8 = v9;
  *a1 = v11;
  a1[1] = result;
  *a2 = v8;
  a2[1] = v7;
  return result;
}

uint64_t specialized _wideDivide22<A>(_:by:)(uint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  if (a6 | a7)
  {
    unint64_t v7 = a7;
    unint64_t v8 = a5;
    BOOL v12 = a7 < a5;
    if (a6 != a4) {
      BOOL v12 = a6 < a4;
    }
    if (!v12)
    {
      BOOL v16 = a4 < a6;
      unint64_t v17 = 0;
      if (a6 == a4) {
        BOOL v16 = a5 < a7;
      }
      if (v16)
      {
        *a1 = 0;
        *a2 = a4;
        *a3 = a5;
      }
      else
      {
        *a1 = 1;
        *a2 = 0;
        *a3 = 0;
      }
      return v17;
    }
    if (a4)
    {
      if (a6)
      {
        unint64_t v13 = __clz(a6);
        if (v13)
        {
          a6 = (a7 >> -(char)v13) | (a6 << v13);
          unint64_t v7 = a7 << v13;
          unint64_t v14 = (a5 >> (0x80 - v13)) | (a4 << v13);
          if (((0x80 - (_BYTE)v13) & 0x7F) == 0) {
            unint64_t v14 = a5;
          }
          if (((0x80 - (_BYTE)v13) & 0x7Fu) <= 0x3FuLL) {
            unint64_t v15 = v14;
          }
          else {
            unint64_t v15 = a4 >> (0x80 - v13);
          }
          a4 = (a5 >> (-(char)v13 & 0x3F)) | (a4 << v13);
          unint64_t v8 = a5 << v13;
        }
        else
        {
          unint64_t v15 = 0;
        }
        uint64_t v19 = specialized _wideDivide32<A>(_:by:)((uint64_t)&v24, &v23, v15, a4, v8, a6, v7);
        unint64_t v17 = 0;
        unint64_t v21 = v23;
        unint64_t v20 = v24;
        *a1 = v19;
        if (v13)
        {
          unint64_t v21 = (v21 >> v13) | (v20 << -(char)v13);
          v20 >>= v13;
        }
        *a3 = v21;
        *a2 = v20;
        return v17;
      }
      if (a7)
      {
        unint64_t v17 = a4 / a7;
        if (a4 % a7) {
          uint64_t v18 = __udivti3();
        }
        else {
          uint64_t v18 = a5 / a7;
        }
        *a1 = v18;
        *a3 = v8 - v18 * v7;
        goto LABEL_29;
      }
    }
    else
    {
      if (a7)
      {
        unint64_t v17 = 0;
        *a3 = a5 % a7;
        *a1 = a5 / a7;
LABEL_29:
        *a2 = 0;
        return v17;
      }
      __break(1u);
    }
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

BOOL _UInt128.dividedReportingOverflow(by:)(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = a2[1];
  unint64_t v6 = *v2;
  unint64_t v5 = v2[1];
  unint64_t v7 = v4 | *a2;
  BOOL v8 = v7 == 0;
  if (v7)
  {
    unint64_t v5 = specialized _wideDivide22<A>(_:by:)((uint64_t *)&v12, &v11, &v10, v5, v6, v4, *a2);
    unint64_t v6 = v12;
  }
  *a1 = v6;
  a1[1] = v5;
  return v8;
}

BOOL _UInt128.remainderReportingOverflow(dividingBy:)(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = a2[1];
  unint64_t v6 = *v2;
  unint64_t v5 = v2[1];
  unint64_t v7 = v4 | *a2;
  BOOL v8 = v7 == 0;
  if (v7)
  {
    specialized _wideDivide22<A>(_:by:)(&v12, &v11, &v10, v5, v6, v4, *a2);
    unint64_t v6 = v10;
    unint64_t v5 = v11;
  }
  *a1 = v6;
  a1[1] = v5;
  return v8;
}

_OWORD *_UInt128.multipliedFullWidth(by:)(_OWORD *result, void *a2, unint64_t *a3)
{
  uint64_t v4 = *a3;
  unint64_t v5 = a3[1];
  unint64_t v6 = *v3;
  unint64_t v7 = v3[1];
  uint64_t v8 = (v7 * (unsigned __int128)*a3) >> 64;
  unint64_t v9 = *v3 * v5;
  unint64_t v10 = (*(_OWORD *)v3 * *a3) >> 64;
  uint64_t v11 = __CFADD__((*v3 * (unsigned __int128)*a3) >> 64, v7 * *a3);
  BOOL v12 = __CFADD__(v10, v9);
  unint64_t v13 = v10 + v9;
  unint64_t v14 = (v7 * (unsigned __int128)v5) >> 64;
  unint64_t v15 = v7 * v5;
  uint64_t v16 = (v6 * (unsigned __int128)v5) >> 64;
  BOOL v18 = v12;
  BOOL v12 = __CFADD__(v12, v15);
  unint64_t v17 = v18 + v15;
  v12 |= __CFADD__(v11, v17);
  v17 += v11;
  uint64_t v19 = v12;
  BOOL v12 = __CFADD__(v8, v16);
  unint64_t v20 = v8 + v16;
  if (v12) {
    unint64_t v21 = v14 + 1;
  }
  else {
    unint64_t v21 = v14;
  }
  *uint64_t result = __PAIR128__(v21, v20) + __PAIR128__(v19, v17);
  *a2 = v6 * v4;
  a2[1] = v13;
  return result;
}

uint64_t _UInt128.dividingFullWidth(_:)(void *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t result = specialized _wideDivide42<A>(_:by:)(&v12, &v11, &v10, a3[1], *a3, a4[1], *a4, v4[1], *v4);
  unint64_t v8 = v11;
  unint64_t v9 = v10;
  *a1 = v12;
  a1[1] = result;
  *a2 = v9;
  a2[1] = v8;
  return result;
}

uint64_t specialized _wideDivide42<A>(_:by:)(uint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8, unint64_t a9)
{
  unint64_t v9 = a9;
  if (!(a8 | a9)) {
    goto LABEL_46;
  }
  unint64_t v10 = a8;
  BOOL v12 = a9 >= a5;
  if (a8 != a4) {
    BOOL v12 = a8 >= a4;
  }
  if (!v12) {
    goto LABEL_46;
  }
  unint64_t v13 = a7;
  unint64_t v14 = a6;
  if (a4 | a5)
  {
    if (a8)
    {
      unint64_t v19 = __clz(a8);
      if (v19)
      {
        char v20 = 0x80 - v19;
        unint64_t v21 = (a5 >> -(char)v19) | (a4 << v19);
        unint64_t v22 = (128 - v19) & 0x7F;
        unint64_t v23 = a6 << v19;
        if (v22 > 0x3F)
        {
          unint64_t v28 = a6 >> v20;
        }
        else
        {
          unint64_t v24 = (a7 >> v20) | v23;
          unint64_t v25 = a6 >> v20;
          BOOL v26 = v22 == 0;
          if (v22) {
            unint64_t v27 = v25;
          }
          else {
            unint64_t v27 = a6;
          }
          if (v26) {
            unint64_t v28 = a7;
          }
          else {
            unint64_t v28 = v24;
          }
          v21 |= v27;
        }
        unint64_t v10 = (a9 >> -(char)v19) | (a8 << v19);
        unint64_t v9 = a9 << v19;
        unint64_t v33 = v28 | (a5 << v19);
        unint64_t v14 = (a7 >> (-(char)v19 & 0x3F)) | v23;
        unint64_t v13 = a7 << v19;
        if (v21) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v33 = a7 | a5;
        unint64_t v21 = a6 | a4;
        if (a6 | a4) {
          goto LABEL_34;
        }
      }
      BOOL v34 = v14 < v9;
      if (v33 != v10) {
        BOOL v34 = v33 < v10;
      }
      if (v34)
      {
        uint64_t v35 = specialized _wideDivide32<A>(_:by:)((uint64_t)&v43, &v42, v33, v14, v13, v10, v9);
        uint64_t v30 = 0;
        unint64_t v37 = v42;
        unint64_t v36 = v43;
        *a1 = v35;
        unint64_t v38 = (v37 >> v19) | (v36 << -(char)v19);
        BOOL v39 = v19 == 0;
        unint64_t v40 = v36 >> v19;
LABEL_35:
        if (!v39)
        {
          unint64_t v37 = v38;
          unint64_t v36 = v40;
        }
        *a3 = v37;
        *a2 = v36;
        return v30;
      }
LABEL_34:
      uint64_t v30 = specialized _wideDivide32<A>(_:by:)((uint64_t)&v43, &v42, v21, v33, v14, v10, v9);
      uint64_t v41 = specialized _wideDivide32<A>(_:by:)((uint64_t)&v43, &v42, v43, v42, v13, v10, v9);
      unint64_t v37 = v42;
      unint64_t v36 = v43;
      *a1 = v41;
      unint64_t v38 = (v37 >> v19) | (v36 << -(char)v19);
      unint64_t v40 = v36 >> v19;
      BOOL v39 = v19 == 0;
      goto LABEL_35;
    }
    if (!a9)
    {
      __break(1u);
      goto LABEL_44;
    }
    if (a4 % a9)
    {
      unint64_t v29 = __umodti3();
      if (v29) {
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v29 = a5 % a9;
      if (a5 % a9)
      {
LABEL_22:
        if (v29 < a9)
        {
          uint64_t v30 = __udivti3();
          unint64_t v31 = v14 - v30 * a9;
          if (v31) {
            goto LABEL_24;
          }
          goto LABEL_40;
        }
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
    }
    uint64_t v30 = v14 / a9;
    unint64_t v31 = v14 % a9;
    if (v14 % a9)
    {
LABEL_24:
      if (v31 < a9)
      {
        uint64_t v32 = __udivti3();
LABEL_41:
        *a3 = v13 - v32 * a9;
        *a1 = v32;
        *a2 = 0;
        return v30;
      }
      goto LABEL_45;
    }
LABEL_40:
    uint64_t v32 = v13 / a9;
    goto LABEL_41;
  }

  return specialized _wideDivide22<A>(_:by:)(a1, a2, a3, a6, a7, a8, a9);
}

int8x16_t static _UInt128.&= infix(_:_:)(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t result = vandq_s8(*a1, *a2);
  *a1 = result;
  return result;
}

int8x16_t static _UInt128.|= infix(_:_:)(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t result = vorrq_s8(*a1, *a2);
  *a1 = result;
  return result;
}

int8x16_t static _UInt128.^= infix(_:_:)(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t result = veorq_s8(*a1, *a2);
  *a1 = result;
  return result;
}

uint64_t *static _UInt128.<<= infix(_:_:)(uint64_t *result, unint64_t *a2)
{
  if (a2[1] || (unint64_t v2 = *a2, *a2 >= 0x80))
  {
    *int8x16_t result = 0;
    result[1] = 0;
  }
  else
  {
    uint64_t v3 = *result;
    uint64_t v4 = result[1];
    if (v2)
    {
      uint64_t v4 = (v4 << v2) | ((unint64_t)*result >> -(char)v2);
      uint64_t v3 = *result << v2;
    }
    BOOL v5 = v2 > 0x3F;
    if (v2 <= 0x3F) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = *result << v2;
    }
    if (v5) {
      uint64_t v3 = 0;
    }
    *int8x16_t result = v3;
    result[1] = v6;
  }
  return result;
}

uint64_t *static _UInt128.>>= infix(_:_:)(uint64_t *result, unint64_t *a2)
{
  if (a2[1] || (unint64_t v2 = *a2, *a2 >= 0x80))
  {
    *int8x16_t result = 0;
    result[1] = 0;
  }
  else
  {
    unint64_t v3 = *result;
    unint64_t v4 = result[1];
    unint64_t v5 = v4 >> v2;
    uint64_t v6 = (v4 << -(char)v2) | ((unint64_t)*result >> v2);
    if (v2)
    {
      v4 >>= v2;
      unint64_t v3 = v6;
    }
    BOOL v7 = v2 >= 0x3F;
    BOOL v8 = v2 == 63;
    if (v2 <= 0x3F) {
      unint64_t v9 = v4;
    }
    else {
      unint64_t v9 = 0;
    }
    if (!v8 && v7) {
      unint64_t v3 = v5;
    }
    *int8x16_t result = v3;
    result[1] = v9;
  }
  return result;
}

uint64_t *static _UInt128.&<< infix(_:_:)@<X0>(uint64_t *result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = result[1];
  unint64_t v5 = *a2 & 0x7FLL;
  if (v5)
  {
    uint64_t v4 = (v4 << *a2) | ((unint64_t)*result >> -(char)*a2);
    uint64_t v3 = *result << *a2;
  }
  if (v5 > 0x3F)
  {
    uint64_t v4 = *result << *a2;
    uint64_t v3 = 0;
  }
  *a3 = v3;
  a3[1] = v4;
  return result;
}

uint64_t *static _UInt128.&>> infix(_:_:)@<X0>(uint64_t *result@<X0>, void *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3 = *result;
  unint64_t v4 = result[1];
  unint64_t v5 = *a2 & 0x7FLL;
  unint64_t v6 = v4 >> *a2;
  uint64_t v7 = ((unint64_t)*result >> *a2) | (v4 << -(char)*a2);
  if (v5)
  {
    v4 >>= *a2;
    unint64_t v3 = v7;
  }
  if (v5 > 0x3F)
  {
    unint64_t v4 = 0;
    unint64_t v3 = v6;
  }
  *a3 = v3;
  a3[1] = v4;
  return result;
}

unint64_t *static _UInt128./ infix(_:_:)@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, void *a3@<X8>)
{
  if (*(_OWORD *)a2 == 0)
  {
    __break(1u);
  }
  else
  {
    int8x16_t result = (unint64_t *)specialized _wideDivide22<A>(_:by:)(&v6, &v5, &v4, result[1], *result, a2[1], *a2);
    *a3 = v6;
    a3[1] = result;
  }
  return result;
}

unint64_t *static _UInt128.% infix(_:_:)@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, void *a3@<X8>)
{
  if (*(_OWORD *)a2 == 0)
  {
    __break(1u);
  }
  else
  {
    int8x16_t result = (unint64_t *)specialized _wideDivide22<A>(_:by:)(&v7, &v6, &v5, result[1], *result, a2[1], *a2);
    unint64_t v4 = v6;
    *a3 = v5;
    a3[1] = v4;
  }
  return result;
}

uint64_t _UInt128.init(_truncatingBits:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  a2[1] = 0;
  return result;
}

unint64_t _UInt128.leadingZeroBitCount.getter()
{
  unint64_t v1 = v0[1];
  if (v1) {
    return __clz(v1);
  }
  else {
    return __clz(*v0) + 64;
  }
}

unint64_t _UInt128.trailingZeroBitCount.getter()
{
  if (*v0) {
    return __clz(__rbit64(*v0));
  }
  else {
    return __clz(__rbit64(v0[1])) + 64;
  }
}

uint64_t _UInt128.nonzeroBitCount.getter()
{
  return vaddvq_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*v0)))));
}

int8x16_t _UInt128.byteSwapped.getter@<Q0>(int8x16_t *a1@<X8>)
{
  int8x16_t v2 = vrev64q_s8(*v1);
  int8x16_t result = vextq_s8(v2, v2, 8uLL);
  *a1 = result;
  return result;
}

uint64_t protocol witness for static FixedWidthInteger.bitWidth.getter in conformance _UInt128()
{
  return 128;
}

void protocol witness for static FixedWidthInteger.max.getter in conformance _UInt128(void *a1@<X8>)
{
  *a1 = -1;
  a1[1] = -1;
}

void protocol witness for static FixedWidthInteger.min.getter in conformance _UInt128(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t protocol witness for FixedWidthInteger.addingReportingOverflow(_:) in conformance _UInt128(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = v2[1];
  BOOL v5 = __CFADD__(*v2, *a2);
  BOOL v6 = __CFADD__(v4, v3);
  uint64_t v7 = v4 + v3;
  if (v6)
  {
    uint64_t v8 = 1;
    if (v5)
    {
LABEL_12:
      uint64_t v9 = 1;
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v8 = v7 == -1 && v5;
    if (v5) {
      goto LABEL_12;
    }
  }
  uint64_t v9 = 0;
LABEL_13:
  *a1 = *v2 + *a2;
  a1[1] = v9 + v7;
  return v8;
}

unint64_t protocol witness for FixedWidthInteger.subtractingReportingOverflow(_:) in conformance _UInt128(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  unint64_t v5 = *v2;
  unint64_t v6 = v2[1];
  BOOL v7 = v6 >= v4;
  unint64_t v8 = v6 - v4;
  int v9 = !v7;
  BOOL v7 = v5 >= v3;
  unint64_t v10 = v5 - v3;
  LODWORD(v3) = v5 < v3;
  if (v7)
  {
    if (v9)
    {
      unint64_t v3 = 1;
      unint64_t v11 = v8;
      goto LABEL_13;
    }
    unint64_t v11 = v8;
  }
  else
  {
    unint64_t v11 = v8 - 1;
    if (v9)
    {
      unint64_t v3 = 1;
      goto LABEL_13;
    }
  }
  if (v8) {
    unint64_t v3 = 0;
  }
  else {
    unint64_t v3 = v3;
  }
LABEL_13:
  *a1 = v10;
  a1[1] = v11;
  return v3;
}

uint64_t protocol witness for FixedWidthInteger.dividingFullWidth(_:) in conformance _UInt128(void *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t result = specialized _wideDivide42<A>(_:by:)(&v12, &v11, &v10, a3[1], *a3, a4[1], *a4, v4[1], *v4);
  unint64_t v8 = v11;
  unint64_t v9 = v10;
  *a1 = v12;
  a1[1] = result;
  *a2 = v9;
  a2[1] = v8;
  return result;
}

uint64_t protocol witness for FixedWidthInteger.init(_truncatingBits:) in conformance _UInt128@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  a2[1] = 0;
  return result;
}

int8x16_t protocol witness for FixedWidthInteger.init(bigEndian:) in conformance _UInt128@<Q0>(int8x16_t *a1@<X0>, int8x16_t *a2@<X8>)
{
  int8x16_t v2 = vrev64q_s8(*a1);
  int8x16_t result = vextq_s8(v2, v2, 8uLL);
  *a2 = result;
  return result;
}

int8x16_t protocol witness for FixedWidthInteger.byteSwapped.getter in conformance _UInt128@<Q0>(int8x16_t *a1@<X8>)
{
  int8x16_t v2 = vrev64q_s8(*v1);
  int8x16_t result = vextq_s8(v2, v2, 8uLL);
  *a1 = result;
  return result;
}

uint64_t protocol witness for static FixedWidthInteger.&* infix(_:_:) in conformance _UInt128@<X0>(long long *a1@<X0>, uint64_t *a2@<X8>)
{
  long long v3 = *a1;
  return _UInt128.multipliedReportingOverflow(by:)(a2, (unint64_t *)&v3);
}

uint64_t protocol witness for BinaryInteger.init<A>(exactly:) in conformance _UInt128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();

  return MEMORY[0x270F9EEA8](a1, a4, a2, v8, a3);
}

uint64_t protocol witness for BinaryInteger.init<A>(_:) in conformance _UInt128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return protocol witness for BinaryInteger.init<A>(_:) in conformance _UInt128(a1, a2, (void (*)(void))lazy protocol witness table accessor for type _UInt128 and conformance _UInt128, a3);
}

double protocol witness for BinaryInteger.init<A>(truncatingIfNeeded:) in conformance _UInt128@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  return protocol witness for BinaryInteger.init<A>(truncatingIfNeeded:) in conformance _UInt128(a1, a2, a3, a4, (uint64_t (*)(void))lazy protocol witness table accessor for type _UInt128 and conformance _UInt128, a5);
}

uint64_t protocol witness for BinaryInteger.init<A>(clamping:) in conformance _UInt128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();

  return MEMORY[0x270F9EEB8](a1, a4, a2, v8, a3);
}

uint64_t protocol witness for BinaryInteger._lowWord.getter in conformance _UInt128()
{
  return *(void *)v0;
}

unint64_t protocol witness for BinaryInteger._binaryLogarithm() in conformance _UInt128()
{
  unint64_t v1 = v0[1];
  if (v1) {
    return __clz(v1) ^ 0x7F;
  }
  if (*v0) {
    return (__clz(*v0) | 0x40) ^ 0x7F;
  }
  __break(1u);
  return result;
}

void *protocol witness for static BinaryInteger.~ prefix(_:) in conformance _UInt128@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[1];
  uint64_t v3 = -v2;
  BOOL v4 = v2 != 0;
  uint64_t v5 = -*result;
  if (*result)
  {
    uint64_t v6 = v3 - 1;
    uint64_t v7 = v5 - 1;
LABEL_5:
    *a2 = v7;
    a2[1] = v6;
    return result;
  }
  uint64_t v6 = v3;
  if (v4)
  {
    uint64_t v6 = v3;
    uint64_t v7 = v5 - 1;
    if (*result) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v7 = v5 - 1;
    if (*result) {
      goto LABEL_5;
    }
  }
  *a2 = v7;
  a2[1] = v6 - 1;
  return result;
}

int8x16_t protocol witness for static BinaryInteger.& infix(_:_:) in conformance _UInt128@<Q0>(int8x16_t *a1@<X0>, int8x16_t *a2@<X1>, int8x16_t *a3@<X8>)
{
  int8x16_t result = vandq_s8(*a2, *a1);
  *a3 = result;
  return result;
}

int8x16_t protocol witness for static BinaryInteger.| infix(_:_:) in conformance _UInt128@<Q0>(int8x16_t *a1@<X0>, int8x16_t *a2@<X1>, int8x16_t *a3@<X8>)
{
  int8x16_t result = vorrq_s8(*a2, *a1);
  *a3 = result;
  return result;
}

int8x16_t protocol witness for static BinaryInteger.^ infix(_:_:) in conformance _UInt128@<Q0>(int8x16_t *a1@<X0>, int8x16_t *a2@<X1>, int8x16_t *a3@<X8>)
{
  int8x16_t result = veorq_s8(*a2, *a1);
  *a3 = result;
  return result;
}

double protocol witness for static BinaryInteger.>> infix<A>(_:_:) in conformance _UInt128@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  return protocol witness for static BinaryInteger.>> infix<A>(_:_:) in conformance _UInt128(a1, a2, a3, a4, (void (*)(double *__return_ptr, void *, unint64_t *))static _UInt128.&<< infix(_:_:), (void (*)(double *__return_ptr, void *, unint64_t *))static _UInt128.&>> infix(_:_:), a5);
}

uint64_t protocol witness for static BinaryInteger.>>= infix<A>(_:_:) in conformance _UInt128(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v83 = a1;
  uint64_t v80 = *(void *)(*(void *)(a4 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = MEMORY[0x270FA5388](AssociatedTypeWitness, v6);
  unint64_t v78 = (char *)&v73 - v8;
  uint64_t v84 = *(void *)(a3 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v7, v9);
  uint64_t v12 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v10, v13);
  uint64_t v77 = (char *)&v73 - v15;
  uint64_t v17 = MEMORY[0x270FA5388](v14, v16);
  char v81 = (char *)&v73 - v18;
  uint64_t v20 = MEMORY[0x270FA5388](v17, v19);
  unint64_t v22 = (char *)&v73 - v21;
  uint64_t v24 = MEMORY[0x270FA5388](v20, v23);
  BOOL v26 = (char *)&v73 - v25;
  uint64_t v28 = MEMORY[0x270FA5388](v24, v27);
  uint64_t v30 = (char *)&v73 - v29;
  uint64_t v32 = MEMORY[0x270FA5388](v28, v31);
  BOOL v82 = (char *)&v73 - v33;
  MEMORY[0x270FA5388](v32, v34);
  unint64_t v36 = (char *)&v73 - v35;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
  {
    char v37 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v38 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v37 & 1) == 0)
    {
      if (v38 >= 64) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
    if (v38 <= 64)
    {
      char v75 = v26;
      char v76 = v22;
      swift_getAssociatedConformanceWitness();
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      char v54 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v55 = v84;
      uint64_t v56 = *(void (**)(char *, uint64_t))(v84 + 8);
      v56(v36, a3);
      (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v12, a2, a3);
      if (v54)
      {
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v56)(v12, a3);
        goto LABEL_26;
      }
      uint64_t v57 = dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v56)(v12, a3);
      BOOL v26 = v75;
      unint64_t v22 = v76;
      if (v57 < -128) {
        goto LABEL_26;
      }
      goto LABEL_10;
    }
LABEL_6:
    unint64_t v88 = -128;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v39 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v84 + 8))(v36, a3);
    if (v39) {
      goto LABEL_26;
    }
    goto LABEL_10;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64) {
    goto LABEL_6;
  }
LABEL_9:
  uint64_t result = dispatch thunk of BinaryInteger._lowWord.getter();
  if (result < -128) {
    goto LABEL_26;
  }
LABEL_10:
  char v41 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v42 = dispatch thunk of BinaryInteger.bitWidth.getter();
  char v75 = v26;
  char v76 = v22;
  if (v41)
  {
    if (v42 > 64) {
      goto LABEL_12;
    }
  }
  else if (v42 >= 64)
  {
LABEL_12:
    unint64_t v88 = 128;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v43 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v84 + 8))(v36, a3);
    if (v43) {
      goto LABEL_26;
    }
    goto LABEL_16;
  }
  uint64_t result = dispatch thunk of BinaryInteger._lowWord.getter();
  if (result > 128) {
    goto LABEL_26;
  }
LABEL_16:
  uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v84 + 16);
  uint64_t v45 = v82;
  v44(v82, a2, a3);
  char v46 = dispatch thunk of static BinaryInteger.isSigned.getter();
  char v74 = (void (*)(char *, char *, uint64_t))v44;
  v44(v30, (uint64_t)v45, a3);
  if (v46)
  {
    uint64_t v47 = dispatch thunk of BinaryInteger.bitWidth.getter();
    unint64_t v48 = v84 + 8;
    uint64_t v49 = *(void (**)(char *, uint64_t))(v84 + 8);
    v49(v30, a3);
    uint64_t v50 = v76;
    if (v47 > 64)
    {
      unint64_t v73 = v48;
      uint64_t v51 = (void (*)(char *, char *, uint64_t))v75;
      v74(v75, v82, a3);
      unint64_t v88 = 0x8000000000000000;
      char v52 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v53 = v81;
      if (v52)
      {
        if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
        {
LABEL_33:
          dispatch thunk of BinaryInteger._lowWord.getter();
LABEL_34:
          v49((char *)v51, a3);
          goto LABEL_35;
        }
      }
      else
      {
        char v58 = dispatch thunk of static BinaryInteger.isSigned.getter();
        uint64_t v59 = dispatch thunk of BinaryInteger.bitWidth.getter();
        BOOL v61 = __OFSUB__(v59, 64);
        BOOL v60 = v59 - 64 < 0;
        if ((v58 & 1) == 0) {
          goto LABEL_31;
        }
        if (v59 <= 64)
        {
          swift_getAssociatedConformanceWitness();
          dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
          dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
          LODWORD(v80) = dispatch thunk of static Comparable.< infix(_:_:)();
          unint64_t v68 = v73;
          v49(v36, a3);
          uint64_t v69 = v77;
          (*(void (**)(char *, void, uint64_t))(v84 + 32))(v77, v51, a3);
          if (v80) {
            goto LABEL_55;
          }
          dispatch thunk of BinaryInteger._lowWord.getter();
          v49(v69, a3);
          goto LABEL_35;
        }
      }
      lazy protocol witness table accessor for type Int and conformance Int();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v62 = dispatch thunk of static Comparable.< infix(_:_:)();
      v49(v36, a3);
      v49((char *)v51, a3);
      uint64_t v51 = v74;
      if ((v62 & 1) == 0) {
        goto LABEL_36;
      }
      __break(1u);
LABEL_31:
      if (v60 == v61) {
        goto LABEL_34;
      }
      goto LABEL_33;
    }
    uint64_t v53 = v81;
  }
  else
  {
    uint64_t v49 = *(void (**)(char *, uint64_t))(v84 + 8);
    v49(v30, a3);
    uint64_t v53 = v81;
    uint64_t v50 = v76;
  }
LABEL_35:
  uint64_t v51 = v74;
LABEL_36:
  uint64_t v63 = v82;
  uint64_t v64 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v51(v50, v63, a3);
  if (v64 >= 65)
  {
    v49(v50, a3);
    goto LABEL_38;
  }
  uint64_t v67 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v49(v50, a3);
  if (v67 == 64 && (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
  {
LABEL_38:
    v51(v53, v82, a3);
    unint64_t v88 = 0x7FFFFFFFFFFFFFFFLL;
    char v65 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v66 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v65)
    {
      if (v66 > 64)
      {
        lazy protocol witness table accessor for type Int and conformance Int();
LABEL_47:
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        unint64_t v68 = dispatch thunk of static Comparable.< infix(_:_:)();
        uint64_t v69 = (char *)(v84 + 8);
        v49(v36, a3);
        v49(v53, a3);
        if ((v68 & 1) == 0) {
          goto LABEL_48;
        }
        __break(1u);
LABEL_55:
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v49)(v69, a3);
        __break(1u);
LABEL_56:
        if (v68 > 0xFFFFFFFFFFFFFF80)
        {
          unint64_t v85 = -(uint64_t)v68;
          uint64_t v86 = 0;
          uint64_t result = (uint64_t)static _UInt128.&<< infix(_:_:)((uint64_t *)&v87, &v85, &v88);
          goto LABEL_51;
        }
        goto LABEL_26;
      }
    }
    else if (v66 >= 64)
    {
      *(void *)&long long v87 = 0x7FFFFFFFFFFFFFFFLL;
      lazy protocol witness table accessor for type Int and conformance Int();
      goto LABEL_47;
    }
    dispatch thunk of BinaryInteger._lowWord.getter();
    v49(v53, a3);
  }
LABEL_48:
  char v70 = v82;
  unint64_t v68 = dispatch thunk of BinaryInteger._lowWord.getter();
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v49)(v70, a3);
  long long v87 = *v83;
  if ((v68 & 0x8000000000000000) != 0) {
    goto LABEL_56;
  }
  if (v68 < 0x80)
  {
    unint64_t v85 = v68;
    uint64_t v86 = 0;
    uint64_t result = (uint64_t)static _UInt128.&>> infix(_:_:)((uint64_t *)&v87, &v85, &v88);
    goto LABEL_51;
  }
LABEL_26:
  unint64_t v88 = 0;
  uint64_t v89 = 0;
LABEL_51:
  uint64_t v71 = v89;
  uint64_t v72 = v83;
  *(void *)uint64_t v83 = v88;
  *((void *)v72 + 1) = v71;
  return result;
}

double protocol witness for static BinaryInteger.<< infix<A>(_:_:) in conformance _UInt128@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  return protocol witness for static BinaryInteger.>> infix<A>(_:_:) in conformance _UInt128(a1, a2, a3, a4, (void (*)(double *__return_ptr, void *, unint64_t *))static _UInt128.&>> infix(_:_:), (void (*)(double *__return_ptr, void *, unint64_t *))static _UInt128.&<< infix(_:_:), a5);
}

double protocol witness for static BinaryInteger.>> infix<A>(_:_:) in conformance _UInt128@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(double *__return_ptr, void *, unint64_t *)@<X6>, void (*a6)(double *__return_ptr, void *, unint64_t *)@<X7>, _OWORD *a7@<X8>)
{
  void (*v93)(double *__return_ptr, void *, unint64_t *);
  char *v94;
  char *v95;
  char *v96;
  uint64_t AssociatedTypeWitness;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(double *__return_ptr, void *, unint64_t *);
  char *v101;
  char *v102;
  char *v103;
  _OWORD *v104;
  unint64_t v105;
  uint64_t v106;
  void v107[2];
  double v108[4];

  unint64_t v100 = a6;
  uint64_t v93 = a5;
  uint64_t v104 = a7;
  uint64_t v98 = *(void *)(*(void *)(a4 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = MEMORY[0x270FA5388](AssociatedTypeWitness, v10);
  unint64_t v96 = (char *)&v89 - v12;
  uint64_t v13 = *(void *)(a3 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v11, v14);
  uint64_t v17 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v15, v18);
  uint64_t v94 = (char *)&v89 - v20;
  uint64_t v22 = MEMORY[0x270FA5388](v19, v21);
  uint64_t v102 = (char *)&v89 - v23;
  uint64_t v25 = MEMORY[0x270FA5388](v22, v24);
  uint64_t v27 = (char *)&v89 - v26;
  uint64_t v29 = MEMORY[0x270FA5388](v25, v28);
  unint64_t v95 = (char *)&v89 - v30;
  uint64_t v32 = MEMORY[0x270FA5388](v29, v31);
  unint64_t v101 = (char *)&v89 - v33;
  uint64_t v35 = MEMORY[0x270FA5388](v32, v34);
  char v37 = (char *)&v89 - v36;
  MEMORY[0x270FA5388](v35, v38);
  unint64_t v103 = (char *)&v89 - v39;
  uint64_t v40 = *a1;
  uint64_t v99 = a1[1];
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
    {
      v108[0] = NAN;
      lazy protocol witness table accessor for type Int and conformance Int();
      char v41 = v103;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v42 = dispatch thunk of static Comparable.< infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v41, a3);
      if (v42) {
        goto LABEL_38;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v92 = v37;
    uint64_t v43 = v13;
    char v44 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v45 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v44)
    {
      if (v45 <= 64)
      {
        uint64_t v89 = v27;
        uint64_t v91 = v40;
        swift_getAssociatedConformanceWitness();
        dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        unint64_t v73 = v103;
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        char v74 = dispatch thunk of static Comparable.< infix(_:_:)();
        char v75 = *(void (**)(char *, uint64_t))(v43 + 8);
        v75(v73, a3);
        (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v17, a2, a3);
        if (v74)
        {
          v75(v17, a3);
          goto LABEL_38;
        }
        uint64_t v77 = dispatch thunk of BinaryInteger._lowWord.getter();
        v75(v17, a3);
        uint64_t v13 = v43;
        uint64_t v40 = v91;
        char v37 = v92;
        uint64_t v27 = v89;
        if (v77 < -128) {
          goto LABEL_38;
        }
      }
      else
      {
        v108[0] = NAN;
        lazy protocol witness table accessor for type Int and conformance Int();
        char v46 = v103;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        char v47 = dispatch thunk of static Comparable.< infix(_:_:)();
        uint64_t v13 = v43;
        (*(void (**)(char *, uint64_t))(v43 + 8))(v46, a3);
        char v37 = v92;
        if (v47) {
          goto LABEL_38;
        }
      }
      goto LABEL_11;
    }
    uint64_t v13 = v43;
    char v37 = v92;
    if (v45 >= 64) {
      goto LABEL_11;
    }
  }
  if (dispatch thunk of BinaryInteger._lowWord.getter() < -128) {
    goto LABEL_38;
  }
LABEL_11:
  char v48 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v49 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if (v48)
  {
    if (v49 > 64) {
      goto LABEL_13;
    }
  }
  else if (v49 >= 64)
  {
LABEL_13:
    *(void *)&v108[0] = 128;
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v50 = v103;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v51 = dispatch thunk of static Comparable.< infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v50, a3);
    if (v51) {
      goto LABEL_38;
    }
    goto LABEL_17;
  }
  if (dispatch thunk of BinaryInteger._lowWord.getter() > 128) {
    goto LABEL_38;
  }
LABEL_17:
  uint64_t v91 = v40;
  char v52 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v52(v37, a2, a3);
  char v53 = dispatch thunk of static BinaryInteger.isSigned.getter();
  char v54 = v101;
  v52(v101, (uint64_t)v37, a3);
  uint64_t v90 = v13;
  if ((v53 & 1) == 0)
  {
    uint64_t v56 = *(void (**)(char *, uint64_t))(v13 + 8);
    v56(v54, a3);
    goto LABEL_24;
  }
  uint64_t v55 = dispatch thunk of BinaryInteger.bitWidth.getter();
  char v58 = *(void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v57 = (char *)(v13 + 8);
  uint64_t v56 = v58;
  v58(v54, a3);
  if (v55 <= 64) {
    goto LABEL_24;
  }
  unint64_t v101 = v57;
  uint64_t v59 = v95;
  v52(v95, (uint64_t)v37, a3);
  v108[0] = -0.0;
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64) {
      goto LABEL_49;
    }
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v92 = (char *)v52;
    BOOL v60 = v59;
    uint64_t v59 = v27;
    BOOL v61 = v103;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v62 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v63 = v61;
    uint64_t v27 = v59;
    v56(v63, a3);
    uint64_t v64 = v60;
    char v52 = (void (*)(char *, uint64_t, uint64_t))v92;
    uint64_t v65 = ((uint64_t (*)(char *, uint64_t))v56)(v64, a3);
    if ((v62 & 1) == 0) {
      goto LABEL_24;
    }
    goto LABEL_47;
  }
  char v83 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v65 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v83 & 1) == 0) {
    goto LABEL_48;
  }
  uint64_t v92 = (char *)v52;
  uint64_t v59 = v27;
  if (v65 > 64)
  {
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v84 = v103;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    unint64_t v85 = v95;
    char v86 = dispatch thunk of static Comparable.< infix(_:_:)();
    v56(v84, a3);
    uint64_t v65 = ((uint64_t (*)(char *, uint64_t))v56)(v85, a3);
    uint64_t v27 = v59;
    char v52 = (void (*)(char *, uint64_t, uint64_t))v92;
    if ((v86 & 1) == 0) {
      goto LABEL_24;
    }
LABEL_47:
    __break(1u);
LABEL_48:
    if (v65 >= 64)
    {
LABEL_50:
      v56(v59, a3);
      goto LABEL_24;
    }
LABEL_49:
    dispatch thunk of BinaryInteger._lowWord.getter();
    goto LABEL_50;
  }
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  long long v87 = v103;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  unint64_t v88 = v95;
  unint64_t v80 = dispatch thunk of static Comparable.< infix(_:_:)();
  v56(v87, a3);
  char v81 = v94;
  (*(void (**)(char *, char *, uint64_t))(v90 + 32))(v94, v88, a3);
  if (v80) {
    goto LABEL_54;
  }
  dispatch thunk of BinaryInteger._lowWord.getter();
  v56(v81, a3);
  uint64_t v27 = v59;
  char v52 = (void (*)(char *, uint64_t, uint64_t))v92;
LABEL_24:
  uint64_t v66 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v52(v27, (uint64_t)v37, a3);
  if (v66 >= 65)
  {
    uint64_t v67 = v27;
    uint64_t v68 = v90;
    v56(v67, a3);
    goto LABEL_26;
  }
  uint64_t v71 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v72 = v27;
  uint64_t v68 = v90;
  v56(v72, a3);
  if (v71 == 64 && (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
  {
LABEL_26:
    v52(v102, (uint64_t)v37, a3);
    v108[0] = NAN;
    char v69 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v70 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v69)
    {
      if (v70 > 64)
      {
        lazy protocol witness table accessor for type Int and conformance Int();
LABEL_39:
        unint64_t v78 = v103;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        BOOL v79 = v102;
        unint64_t v80 = dispatch thunk of static Comparable.< infix(_:_:)();
        char v81 = (char *)(v68 + 8);
        v56(v78, a3);
        v56(v79, a3);
        if ((v80 & 1) == 0) {
          goto LABEL_40;
        }
        __break(1u);
LABEL_54:
        v56(v81, a3);
        __break(1u);
LABEL_55:
        if (v80 > 0xFFFFFFFFFFFFFF80)
        {
          uint64_t v105 = -(uint64_t)v80;
          char v106 = 0;
          v93(v108, v107, &v105);
          goto LABEL_43;
        }
        goto LABEL_38;
      }
    }
    else if (v70 >= 64)
    {
      v107[0] = 0x7FFFFFFFFFFFFFFFLL;
      lazy protocol witness table accessor for type Int and conformance Int();
      goto LABEL_39;
    }
    char v76 = v102;
    dispatch thunk of BinaryInteger._lowWord.getter();
    v56(v76, a3);
  }
LABEL_40:
  unint64_t v80 = dispatch thunk of BinaryInteger._lowWord.getter();
  v56(v37, a3);
  v107[0] = v91;
  v107[1] = v99;
  if ((v80 & 0x8000000000000000) != 0) {
    goto LABEL_55;
  }
  if (v80 < 0x80)
  {
    uint64_t v105 = v80;
    char v106 = 0;
    v100(v108, v107, &v105);
    goto LABEL_43;
  }
LABEL_38:
  *(_OWORD *)BOOL v108 = 0uLL;
LABEL_43:
  double result = v108[0];
  *uint64_t v104 = *(_OWORD *)v108;
  return result;
}

uint64_t protocol witness for static BinaryInteger.<<= infix<A>(_:_:) in conformance _UInt128(_OWORD *a1, uint64_t a2, char *a3, uint64_t a4)
{
  long long v87 = a1;
  uint64_t v85 = *(void *)(*(void *)(a4 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = MEMORY[0x270FA5388](AssociatedTypeWitness, v6);
  char v83 = (char *)&v75 - v8;
  uint64_t v88 = *((void *)a3 - 1);
  uint64_t v10 = MEMORY[0x270FA5388](v7, v9);
  uint64_t v12 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v10, v13);
  char v81 = (char *)&v75 - v15;
  uint64_t v17 = MEMORY[0x270FA5388](v14, v16);
  uint64_t v19 = (char *)&v75 - v18;
  uint64_t v21 = MEMORY[0x270FA5388](v17, v20);
  char v86 = (char *)&v75 - v22;
  uint64_t v24 = MEMORY[0x270FA5388](v21, v23);
  BOOL v82 = (char *)&v75 - v25;
  uint64_t v27 = MEMORY[0x270FA5388](v24, v26);
  uint64_t v29 = (char *)&v75 - v28;
  uint64_t v31 = MEMORY[0x270FA5388](v27, v30);
  uint64_t v33 = (char *)&v75 - v32;
  MEMORY[0x270FA5388](v31, v34);
  uint64_t v36 = (char *)&v75 - v35;
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
    {
      uint64_t result = dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t v38 = v88;
      if (result < -128) {
        goto LABEL_21;
      }
      goto LABEL_15;
    }
LABEL_7:
    int64_t v92 = -128;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v41 = dispatch thunk of static Comparable.< infix(_:_:)();
    uint64_t v38 = v88;
    uint64_t result = (*(uint64_t (**)(char *, char *))(v88 + 8))(v36, a3);
    if (v41) {
      goto LABEL_21;
    }
    goto LABEL_15;
  }
  char v39 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v40 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v39 & 1) == 0)
  {
    uint64_t v38 = v88;
    if (v40 < 64)
    {
      uint64_t result = dispatch thunk of BinaryInteger._lowWord.getter();
      if (result < -128) {
        goto LABEL_21;
      }
    }
    goto LABEL_15;
  }
  if (v40 > 64) {
    goto LABEL_7;
  }
  unint64_t v80 = v19;
  uint64_t v77 = v33;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  char v42 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v43 = v88;
  char v44 = *(void (**)(char *, char *))(v88 + 8);
  v44(v36, a3);
  (*(void (**)(char *, uint64_t, char *))(v43 + 16))(v12, a2, a3);
  if (v42)
  {
    uint64_t result = ((uint64_t (*)(char *, char *))v44)(v12, a3);
    goto LABEL_21;
  }
  uint64_t v45 = dispatch thunk of BinaryInteger._lowWord.getter();
  uint64_t result = ((uint64_t (*)(char *, char *))v44)(v12, a3);
  uint64_t v33 = v77;
  uint64_t v38 = v88;
  uint64_t v19 = v80;
  if (v45 < -128) {
    goto LABEL_21;
  }
LABEL_15:
  char v46 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v47 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if (v46)
  {
    if (v47 > 64) {
      goto LABEL_17;
    }
LABEL_20:
    uint64_t result = dispatch thunk of BinaryInteger._lowWord.getter();
    if (result > 128) {
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  if (v47 < 64) {
    goto LABEL_20;
  }
LABEL_17:
  int64_t v92 = 128;
  lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  char v48 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t result = (*(uint64_t (**)(char *, char *))(v38 + 8))(v36, a3);
  if (v48) {
    goto LABEL_21;
  }
LABEL_22:
  unint64_t v78 = v36;
  unint64_t v80 = v19;
  uint64_t v49 = *(void (**)(char *, uint64_t, char *))(v38 + 16);
  v49(v33, a2, a3);
  char v50 = dispatch thunk of static BinaryInteger.isSigned.getter();
  BOOL v79 = (void (*)(char *, char *, char *))v49;
  v49(v29, (uint64_t)v33, a3);
  if ((v50 & 1) == 0)
  {
    char v52 = *(void (**)(char *, char *))(v38 + 8);
    v52(v29, a3);
    goto LABEL_28;
  }
  uint64_t v51 = dispatch thunk of BinaryInteger.bitWidth.getter();
  char v52 = *(void (**)(char *, char *))(v38 + 8);
  v52(v29, a3);
  if (v51 <= 64)
  {
LABEL_28:
    uint64_t v55 = v86;
    uint64_t v56 = v78;
    goto LABEL_29;
  }
  char v76 = (char *)(v38 + 8);
  char v53 = v82;
  v79(v82, v33, a3);
  int64_t v92 = 0x8000000000000000;
  char v54 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v55 = v86;
  uint64_t v56 = v78;
  if ((v54 & 1) == 0)
  {
    char v67 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v68 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v67 & 1) == 0)
    {
      if (v68 >= 64)
      {
        v52(v53, a3);
        goto LABEL_29;
      }
      goto LABEL_51;
    }
    if (v68 <= 64) {
      goto LABEL_53;
    }
LABEL_47:
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v69 = dispatch thunk of static Comparable.< infix(_:_:)();
    v52(v56, a3);
    v52(v53, a3);
    if (v69) {
      goto LABEL_52;
    }
    goto LABEL_29;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64) {
    goto LABEL_47;
  }
LABEL_51:
  uint64_t v70 = dispatch thunk of BinaryInteger._lowWord.getter();
  v52(v53, a3);
  if (v70 < v92)
  {
LABEL_52:
    do
    {
      __break(1u);
LABEL_53:
      uint64_t v77 = v33;
      swift_getAssociatedConformanceWitness();
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      uint64_t v71 = v53;
      unint64_t v64 = dispatch thunk of static Comparable.< infix(_:_:)();
      char v53 = v76;
      v52(v56, a3);
      char v62 = v81;
      (*(void (**)(char *, char *, char *))(v88 + 32))(v81, v71, a3);
      if (v64) {
        goto LABEL_58;
      }
      int64_t v72 = v92;
      uint64_t v73 = dispatch thunk of BinaryInteger._lowWord.getter();
      v52(v62, a3);
      BOOL v74 = v73 < v72;
      uint64_t v33 = v77;
    }
    while (v74);
  }
LABEL_29:
  uint64_t v57 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v79(v55, v33, a3);
  if (v57 < 65)
  {
    uint64_t v60 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v52(v55, a3);
    if (v60 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
      goto LABEL_41;
    }
  }
  else
  {
    v52(v55, a3);
  }
  v79(v80, v33, a3);
  int64_t v92 = 0x7FFFFFFFFFFFFFFFLL;
  char v58 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v59 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if (v58)
  {
    if (v59 > 64)
    {
      lazy protocol witness table accessor for type Int and conformance Int();
      goto LABEL_40;
    }
  }
  else if (v59 >= 64)
  {
    *(void *)&long long v91 = 0x7FFFFFFFFFFFFFFFLL;
    lazy protocol witness table accessor for type Int and conformance Int();
LABEL_40:
    char v62 = a3;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    uint64_t v63 = v80;
    unint64_t v64 = dispatch thunk of static Comparable.< infix(_:_:)();
    v52(v56, a3);
    v52(v63, a3);
    if (v64)
    {
      __break(1u);
LABEL_58:
      uint64_t result = ((uint64_t (*)(char *, char *))v52)(v62, a3);
      __break(1u);
LABEL_59:
      if (v64 > 0xFFFFFFFFFFFFFF80)
      {
        unint64_t v89 = -(uint64_t)v64;
        uint64_t v90 = 0;
        uint64_t result = (uint64_t)static _UInt128.&>> infix(_:_:)((uint64_t *)&v91, &v89, (unint64_t *)&v92);
        goto LABEL_44;
      }
      goto LABEL_21;
    }
    goto LABEL_41;
  }
  BOOL v61 = v80;
  dispatch thunk of BinaryInteger._lowWord.getter();
  v52(v61, a3);
LABEL_41:
  unint64_t v64 = dispatch thunk of BinaryInteger._lowWord.getter();
  uint64_t result = ((uint64_t (*)(char *, char *))v52)(v33, a3);
  long long v91 = *v87;
  if ((v64 & 0x8000000000000000) != 0) {
    goto LABEL_59;
  }
  if (v64 < 0x80)
  {
    unint64_t v89 = v64;
    uint64_t v90 = 0;
    uint64_t result = (uint64_t)static _UInt128.&<< infix(_:_:)((uint64_t *)&v91, &v89, &v92);
    goto LABEL_44;
  }
LABEL_21:
  int64_t v92 = 0;
  uint64_t v93 = 0;
LABEL_44:
  uint64_t v65 = v93;
  uint64_t v66 = v87;
  *(void *)long long v87 = v92;
  *((void *)v66 + 1) = v65;
  return result;
}

uint64_t protocol witness for BinaryInteger.quotientAndRemainder(dividingBy:) in conformance _UInt128(void *a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t result = specialized _wideDivide22<A>(_:by:)(&v11, &v10, &v9, v3[1], *v3, a3[1], *a3);
  unint64_t v7 = v10;
  unint64_t v8 = v9;
  *a1 = v11;
  a1[1] = result;
  *a2 = v8;
  a2[1] = v7;
  return result;
}

BOOL protocol witness for BinaryInteger.isMultiple(of:) in conformance _UInt128(unint64_t *a1)
{
  return specialized BinaryInteger.isMultiple(of:)(*a1, a1[1], *v1, v1[1]);
}

BOOL specialized BinaryInteger.isMultiple(of:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if (!(a2 | a1)) {
    return (a4 | a3) == 0;
  }
  v9[1] = v4;
  void v9[2] = v5;
  specialized _wideDivide22<A>(_:by:)(v9, &v8, &v7, a4, a3, a2, a1);
  return !v8 && v7 == 0;
}

void protocol witness for BinaryInteger.signum() in conformance _UInt128(void *a1@<X8>)
{
  *a1 = *v1 != 0;
  a1[1] = 0;
}

BOOL specialized BinaryInteger.signum()(uint64_t a1, unint64_t a2)
{
  if (a2) {
    BOOL v2 = (uint64_t)a2 > 0;
  }
  else {
    BOOL v2 = a1 != 0;
  }
  return v2 - (a2 >> 63);
}

unint64_t protocol witness for LosslessStringConvertible.init(_:) in conformance _UInt128@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = HIBYTE(a2) & 0xF;
  uint64_t v6 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v7)
  {
    uint64_t result = swift_bridgeObjectRelease();
LABEL_83:
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 16) = 1;
    return result;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    specialized _parseInteger<A, B>(ascii:radix:)(result, a2, 10, (uint64_t)&v52);
    uint64_t result = swift_bridgeObjectRelease();
    if ((v53 & 1) == 0) {
      goto LABEL_78;
    }
    goto LABEL_83;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0) {
      uint64_t v8 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      uint64_t v8 = _StringObject.sharedUTF8.getter();
    }
    specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v8, v6, 10, (uint64_t)&v49);
LABEL_77:
    char v43 = v51;
    unint64_t v45 = v49;
    unint64_t v44 = v50;
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)&long long v52 = v45;
    *((void *)&v52 + 1) = v44;
    if ((v43 & 1) == 0)
    {
LABEL_78:
      *(_OWORD *)a3 = v52;
      *(unsigned char *)(a3 + 16) = 0;
      return result;
    }
    goto LABEL_83;
  }
  v48[0] = result;
  v48[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (v5)
    {
      if (v5 != 1)
      {
        uint64_t v23 = (result >> 8) - 48;
        if (v23 < 0xAu)
        {
          uint64_t v24 = (unsigned __int8 *)v48 + 2;
          specialized static FixedWidthInteger._truncatingInit<A>(_:)(v23, &v46);
          BOOL v25 = 0;
          uint64_t v26 = 0;
          uint64_t v27 = 0;
          uint64_t v28 = v46;
          unint64_t v29 = v47;
          uint64_t v30 = v5 - 2;
          while (1)
          {
            unint64_t v17 = v27 + v28;
            BOOL v31 = __CFADD__(v27, v28);
            unint64_t v19 = v26 + v29;
            if (__CFADD__(v26, v29)) {
              break;
            }
            if (v19 == -1)
            {
              if (v31 || v25) {
                goto LABEL_76;
              }
              unint64_t v19 = -1;
            }
            else if (v31)
            {
              if (v25) {
                goto LABEL_76;
              }
              ++v19;
            }
            else if (v25)
            {
              goto LABEL_76;
            }
            if (!v30)
            {
LABEL_33:
              unint64_t v49 = v17;
LABEL_80:
              unint64_t v50 = v19;
              char v51 = 0;
              goto LABEL_77;
            }
            uint64_t v32 = *v24 - 48;
            if (v32 < 0xA)
            {
              ++v24;
              specialized static FixedWidthInteger._truncatingInit<A>(_:)(v32, &v46);
              uint64_t v28 = v46;
              unint64_t v29 = v47;
              BOOL v33 = !is_mul_ok(v19, 0xAuLL);
              uint64_t v27 = 10 * v17;
              uint64_t v26 = (__PAIR128__(v19, v17) * 0xA) >> 64;
              BOOL v25 = __CFADD__((v17 * (unsigned __int128)0xAuLL) >> 64, 10 * v19);
              --v30;
              if (!v33) {
                continue;
              }
            }
            goto LABEL_76;
          }
        }
      }
      goto LABEL_76;
    }
  }
  else
  {
    if (result != 45)
    {
      if (v5 && (result - 48) <= 9u)
      {
        unint64_t v34 = 0;
        unint64_t v19 = 0;
        uint64_t v35 = v5 - 1;
        uint64_t v36 = (unsigned __int8 *)v48 + 1;
        while (1)
        {
          specialized static FixedWidthInteger._truncatingInit<A>(_:)((result - 48), &v46);
          BOOL v37 = !is_mul_ok(v19, 0xAuLL);
          uint64_t v38 = (__PAIR128__(v19, v34) * 0xA) >> 64;
          BOOL v39 = __CFADD__((v34 * (unsigned __int128)0xAuLL) >> 64, 10 * v19);
          if (v37) {
            break;
          }
          BOOL v40 = __CFADD__(10 * v34, v46);
          unint64_t v34 = 10 * v34 + v46;
          BOOL v41 = v40;
          unint64_t v19 = v38 + v47;
          if (__CFADD__(v38, v47)) {
            break;
          }
          if (v19 == -1)
          {
            if (v41 || v39) {
              goto LABEL_76;
            }
            unint64_t v19 = -1;
          }
          else if (v41)
          {
            if (v39) {
              goto LABEL_76;
            }
            ++v19;
          }
          else if (v39)
          {
            goto LABEL_76;
          }
          if (!v35)
          {
            unint64_t v49 = v34;
            goto LABEL_80;
          }
          int v42 = *v36++;
          LODWORD(result) = v42;
          --v35;
          if ((v42 - 48) >= 0xA) {
            goto LABEL_76;
          }
        }
      }
      goto LABEL_76;
    }
    if (v5)
    {
      if (v5 != 1)
      {
        uint64_t v9 = (result >> 8) - 48;
        if (v9 < 0xAu)
        {
          unint64_t v10 = (unsigned __int8 *)v48 + 2;
          specialized static FixedWidthInteger._truncatingInit<A>(_:)(v9, &v46);
          BOOL v11 = 0;
          unint64_t v12 = 0;
          unint64_t v13 = 0;
          unint64_t v14 = v46;
          unint64_t v15 = v47;
          uint64_t v16 = v5 - 2;
          while (1)
          {
            unint64_t v17 = v13 - v14;
            BOOL v18 = v13 < v14;
            unint64_t v19 = v12 - v15;
            BOOL v20 = v12 < v15;
            if (v18) {
              break;
            }
            if (v12 < v15) {
              goto LABEL_76;
            }
            if (v19) {
              goto LABEL_23;
            }
            if (v11) {
              goto LABEL_76;
            }
            unint64_t v19 = 0;
            if (!v16) {
              goto LABEL_33;
            }
LABEL_25:
            uint64_t v21 = *v10 - 48;
            if (v21 < 0xA)
            {
              ++v10;
              specialized static FixedWidthInteger._truncatingInit<A>(_:)(v21, &v46);
              unint64_t v14 = v46;
              unint64_t v15 = v47;
              BOOL v22 = !is_mul_ok(v19, 0xAuLL);
              unint64_t v13 = 10 * v17;
              unint64_t v12 = (__PAIR128__(v19, v17) * 0xA) >> 64;
              BOOL v11 = __CFADD__((v17 * (unsigned __int128)0xAuLL) >> 64, 10 * v19);
              --v16;
              if (!v22) {
                continue;
              }
            }
            goto LABEL_76;
          }
          if (!v19) {
            BOOL v20 = 1;
          }
          if (v20) {
            goto LABEL_76;
          }
          --v19;
LABEL_23:
          if (v11) {
            goto LABEL_76;
          }
          if (!v16) {
            goto LABEL_33;
          }
          goto LABEL_25;
        }
      }
LABEL_76:
      unint64_t v49 = 0;
      unint64_t v50 = 0;
      char v51 = 1;
      goto LABEL_77;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t *protocol witness for Strideable.distance(to:) in conformance _UInt128@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3 = *result;
  unint64_t v4 = result[1];
  unint64_t v6 = *v2;
  unint64_t v5 = v2[1];
  BOOL v7 = *result < *v2;
  if (v4 != v5) {
    BOOL v7 = v4 < v5;
  }
  if (v7)
  {
    BOOL v8 = v6 >= v3;
    unint64_t v3 = v6 - v3;
    unint64_t v6 = !v8;
    BOOL v8 = v5 >= v4;
    unint64_t v4 = v5 - v4;
    if (!v8) {
      goto LABEL_28;
    }
    if (v4)
    {
      if (v4 != v6 || (v3 & 0x8000000000000000) != 0)
      {
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
    }
    else
    {
      if (v6)
      {
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      if ((v3 & 0x8000000000000000) != 0) {
        goto LABEL_12;
      }
    }
    *a2 = -(uint64_t)v3;
    return result;
  }
LABEL_13:
  BOOL v8 = v3 >= v6;
  unint64_t v9 = v3 - v6;
  uint64_t v10 = !v8;
  BOOL v8 = v4 >= v5;
  unint64_t v11 = v4 - v5;
  if (!v8) {
    goto LABEL_29;
  }
  if (v11)
  {
    if (v11 == v10 && (v9 & 0x8000000000000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_27;
  }
  if ((v10 & 1) == 0)
  {
    if ((v9 & 0x8000000000000000) == 0)
    {
LABEL_21:
      *a2 = v9;
      return result;
    }
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
LABEL_31:
  __break(1u);
  return result;
}

unint64_t *protocol witness for Strideable.advanced(by:) in conformance _UInt128@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3 = *result;
  unint64_t v5 = *v2;
  unint64_t v4 = v2[1];
  if ((*result & 0x8000000000000000) == 0)
  {
    BOOL v6 = __CFADD__(v5, v3);
    v3 += v5;
    unint64_t v5 = v6;
    if (!v6 || v4 != -1) {
      goto LABEL_17;
    }
    __break(1u);
  }
  unint64_t v8 = -(uint64_t)v3;
  BOOL v6 = v5 >= v8;
  unint64_t v3 = v5 - v8;
  uint64_t v9 = !v6;
  if (v4 || (v9 & 1) == 0)
  {
    unint64_t v5 = v9 << 63 >> 63;
LABEL_17:
    *a2 = v3;
    a2[1] = v4 + v5;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for static Strideable._step(after:from:by:) in conformance _UInt128(uint64_t a1, uint64_t a2, char a3, void *a4, void *a5, void *a6, uint64_t a7, uint64_t a8)
{
  return protocol witness for static Strideable._step(after:from:by:) in conformance _UInt128(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void))specialized static Strideable<>._step(after:from:by:));
}

uint64_t *specialized static Strideable<>._step(after:from:by:)(uint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a8 < 0)
  {
    unint64_t v11 = -a8;
    if (__OFSUB__(0, a8))
    {
      __break(1u);
    }
    else if ((v11 & 0x8000000000000000) == 0)
    {
      BOOL v8 = a5 == 0;
      BOOL v12 = a4 >= v11;
      uint64_t v9 = a4 + a8;
      uint64_t v13 = !v12;
      uint64_t v10 = v13 << 63 >> 63;
      if (v12) {
        BOOL v8 = 0;
      }
      goto LABEL_15;
    }
    __break(1u);
    return result;
  }
  BOOL v8 = a5 == -1;
  uint64_t v9 = a4 + a8;
  uint64_t v10 = __CFADD__(a4, a8);
  if (!__CFADD__(a4, a8)) {
    BOOL v8 = 0;
  }
LABEL_15:
  uint64_t v14 = v10 + a5;
  if (v8) {
    uint64_t v15 = ~a8 >> 63;
  }
  else {
    uint64_t v15 = v9;
  }
  if (v8) {
    uint64_t v14 = ~a8 >> 63;
  }
  unint64_t v16 = 0x8000000000000000;
  if (!v8) {
    unint64_t v16 = 0;
  }
  *uint64_t result = v15;
  result[1] = v14;
  return (uint64_t *)v16;
}

uint64_t _Int128.low.setter(uint64_t result)
{
  *unint64_t v1 = result;
  return result;
}

uint64_t (*_Int128.low.modify())()
{
  return AggregateShare.share.modify;
}

uint64_t _Int128.high.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _Int128.high.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*_Int128.high.modify())()
{
  return AggregateShare.share.modify;
}

uint64_t _Int128.init(high:low:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _Int128.init()()
{
  return 0;
}

uint64_t _Int128.init(bitPattern:)(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t static _Int128.zero.getter()
{
  return 0;
}

uint64_t static _Int128.one.getter()
{
  return 1;
}

uint64_t _Int128.description.getter()
{
  return String.init<A>(_:radix:uppercase:)();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _Int128()
{
  return String.init<A>(_:radix:uppercase:)();
}

uint64_t _Int128.debugDescription.getter()
{
  return String.init<A>(_:radix:uppercase:)();
}

BOOL static _Int128.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4 && a1 == a3;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _Int128(void *a1, void *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

BOOL static _Int128.< infix(_:_:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a2 == a4) {
    return a1 < a3;
  }
  else {
    return a2 < a4;
  }
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance _Int128(void *a1, void *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  BOOL v4 = v2 == v3;
  BOOL v5 = v2 < v3;
  if (v4) {
    return *a1 < *a2;
  }
  else {
    return v5;
  }
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance _Int128(void *a1, void *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  BOOL v4 = v3 == v2;
  BOOL v5 = v3 >= v2;
  if (v4) {
    return *a2 >= *a1;
  }
  else {
    return v5;
  }
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance _Int128(void *a1, void *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  BOOL v4 = v2 == v3;
  BOOL v5 = v2 >= v3;
  if (v4) {
    return *a1 >= *a2;
  }
  else {
    return v5;
  }
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance _Int128(void *a1, void *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  BOOL v4 = v3 == v2;
  BOOL v5 = v3 < v2;
  if (v4) {
    return *a2 < *a1;
  }
  else {
    return v5;
  }
}

void _Int128.hash(into:)(int a1, Swift::UInt64 a2, Swift::UInt64 a3)
{
}

Swift::Int _Int128.hashValue.getter(Swift::UInt64 a1, Swift::UInt64 a2)
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _UInt128()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _UInt128()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t _Int128.components.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _Int128.components.setter(uint64_t result, uint64_t a2)
{
  void *v2 = a2;
  v2[1] = result;
  return result;
}

int8x16_t (*_Int128.components.modify(int8x16_t *a1))(int8x16_t *a1)
{
  a1[1].i64[0] = (uint64_t)v1;
  *a1 = vextq_s8(*v1, *v1, 8uLL);
  return _Int128.components.modify;
}

int8x16_t _Int128.components.modify(int8x16_t *a1)
{
  int8x16_t result = vextq_s8(*a1, *a1, 8uLL);
  *(int8x16_t *)a1[1].i64[0] = result;
  return result;
}

unint64_t static _Int128.- infix(_:_:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  BOOL v4 = __OFSUB__(a2, a4);
  uint64_t v5 = a2 - a4;
  char v6 = v4;
  BOOL v7 = a1 >= a3;
  unint64_t result = a1 - a3;
  if (v7)
  {
    if ((v6 & 1) == 0) {
      return result;
    }
    goto LABEL_10;
  }
  if (v5 == 0x8000000000000000) {
    char v6 = 1;
  }
  if (v6) {
LABEL_10:
  }
    __break(1u);
  return result;
}

uint64_t _Int128.subtractingReportingOverflow(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3 - a1;
}

unint64_t *static _Int128.-= infix(_:_:)(unint64_t *result, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = *result;
  unint64_t v3 = result[1];
  BOOL v5 = __OFSUB__(v3, a3);
  unint64_t v6 = v3 - a3;
  char v7 = v5;
  BOOL v8 = v4 >= a2;
  unint64_t v9 = v4 - a2;
  if (v8)
  {
    if ((v7 & 1) == 0)
    {
      *unint64_t result = v9;
      result[1] = v6;
      return result;
    }
  }
  else
  {
    if (v6 == 0x8000000000000000) {
      char v7 = 1;
    }
    if ((v7 & 1) == 0)
    {
      *unint64_t result = v9;
      result[1] = v6 - 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t static _Int128.+ infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v4 = __CFADD__(a1, a3);
  uint64_t result = a1 + a3;
  int v6 = v4;
  if (__OFADD__(a2, a4) || v6 && a2 + a4 == 0x7FFFFFFFFFFFFFFFLL) {
    __break(1u);
  }
  return result;
}

uint64_t _Int128.addingReportingOverflow(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3 + a1;
}

void *static _Int128.+= infix(_:_:)(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result[1];
  BOOL v4 = __CFADD__(*result, a2);
  BOOL v5 = __OFADD__(v3, a3);
  uint64_t v6 = v3 + a3;
  if (v5 || (v4 ? (BOOL v7 = v6 == 0x7FFFFFFFFFFFFFFFLL) : (BOOL v7 = 0), v7))
  {
    __break(1u);
  }
  else
  {
    *result += a2;
    result[1] = v6 + v4;
  }
  return result;
}

void *protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance _Int128@<X0>(void *result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  BOOL v5 = __CFADD__(*result, *a2);
  BOOL v6 = __OFADD__(v3, v4);
  uint64_t v7 = v3 + v4;
  if (v6 || (v5 ? (BOOL v8 = v7 == 0x7FFFFFFFFFFFFFFFLL) : (BOOL v8 = 0), v8))
  {
    __break(1u);
  }
  else
  {
    *a3 = *result + *a2;
    a3[1] = v7 + v5;
  }
  return result;
}

void *protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance _Int128(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  uint64_t v3 = result[1];
  BOOL v4 = __CFADD__(*result, *a2);
  BOOL v5 = __OFADD__(v3, v2);
  uint64_t v6 = v3 + v2;
  if (v5 || (v4 ? (BOOL v7 = v6 == 0x7FFFFFFFFFFFFFFFLL) : (BOOL v7 = 0), v7))
  {
    __break(1u);
  }
  else
  {
    *result += *a2;
    result[1] = v6 + v4;
  }
  return result;
}

unint64_t *protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance _Int128@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = *result;
  unint64_t v3 = result[1];
  unint64_t v6 = *a2;
  unint64_t v5 = a2[1];
  BOOL v7 = __OFSUB__(v3, v5);
  unint64_t v8 = v3 - v5;
  char v9 = v7;
  BOOL v10 = v4 >= v6;
  unint64_t v11 = v4 - v6;
  if (v10)
  {
    if ((v9 & 1) == 0)
    {
      *a3 = v11;
      a3[1] = v8;
      return result;
    }
  }
  else
  {
    if (v8 == 0x8000000000000000) {
      char v9 = 1;
    }
    if ((v9 & 1) == 0)
    {
      *a3 = v11;
      a3[1] = v8 - 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

unint64_t *protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance _Int128(unint64_t *result, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unint64_t v2 = a2[1];
  unint64_t v5 = *result;
  unint64_t v4 = result[1];
  BOOL v6 = __OFSUB__(v4, v2);
  unint64_t v7 = v4 - v2;
  char v8 = v6;
  BOOL v9 = v5 >= v3;
  unint64_t v10 = v5 - v3;
  if (v9)
  {
    if ((v8 & 1) == 0)
    {
      *uint64_t result = v10;
      result[1] = v7;
      return result;
    }
  }
  else
  {
    if (v7 == 0x8000000000000000) {
      char v8 = 1;
    }
    if ((v8 & 1) == 0)
    {
      *uint64_t result = v10;
      result[1] = v7 - 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

unint64_t _Int128.magnitude.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = -(uint64_t)result;
  uint64_t v5 = (unsigned __int128)-(__int128)__PAIR128__(v3, result) >> 64;
  if (a2 >= 0)
  {
    uint64_t v4 = result;
    uint64_t v5 = a2;
  }
  *a3 = v4;
  a3[1] = v5;
  return result;
}

void *_Int128.init(_:)(void *result)
{
  if ((result[1] & 0x8000000000000000) == 0) {
    return (void *)*result;
  }
  __break(1u);
  return result;
}

uint64_t _Int128.init<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = specialized _Int128.init<A>(_:)(a1, a2, a3);
  (*(void (**)(uint64_t, unint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  return v5;
}

uint64_t _Int128.init<A>(exactly:)(char *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v177 = a3;
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v156 = *(void *)(v5 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = MEMORY[0x270FA5388](AssociatedTypeWitness, v6);
  long long v157 = (char *)&v147 - v8;
  uint64_t v170 = *(void *)(a2 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v7, v9);
  uint64_t v149 = (char *)&v147 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v10, v12);
  uint64_t v151 = (char *)&v147 - v14;
  uint64_t v16 = MEMORY[0x270FA5388](v13, v15);
  char v159 = (char *)&v147 - v17;
  uint64_t v19 = MEMORY[0x270FA5388](v16, v18);
  unint64_t v158 = (char *)&v147 - v20;
  uint64_t v22 = MEMORY[0x270FA5388](v19, v21);
  uint64_t v163 = (char *)&v147 - v23;
  uint64_t v25 = MEMORY[0x270FA5388](v22, v24);
  uint64_t v150 = (char *)&v147 - v26;
  uint64_t v28 = MEMORY[0x270FA5388](v25, v27);
  unint64_t v161 = (char *)&v147 - v29;
  uint64_t v31 = MEMORY[0x270FA5388](v28, v30);
  uint64_t v165 = (char *)&v147 - v32;
  uint64_t v34 = MEMORY[0x270FA5388](v31, v33);
  long long v154 = (char *)&v147 - v35;
  uint64_t v37 = MEMORY[0x270FA5388](v34, v36);
  uint64_t v162 = (char *)&v147 - v38;
  uint64_t v40 = MEMORY[0x270FA5388](v37, v39);
  uint64_t v172 = (char *)&v147 - v41;
  uint64_t v43 = MEMORY[0x270FA5388](v40, v42);
  unint64_t v176 = (char *)&v147 - v44;
  MEMORY[0x270FA5388](v43, v45);
  long long v168 = (char *)&v147 - v46;
  swift_getAssociatedTypeWitness();
  uint64_t v169 = *(char **)(swift_getAssociatedConformanceWitness() + 16);
  uint64_t v47 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v47, v48);
  unint64_t v50 = (char *)&v147 - v49;
  char v51 = (void (*)(char *, char *, unint64_t))v5;
  unint64_t v52 = swift_checkMetadataState();
  uint64_t v53 = *(void *)(v52 - 8);
  uint64_t v55 = MEMORY[0x270FA5388](v52, v54);
  unint64_t v153 = (char *)&v147 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = MEMORY[0x270FA5388](v55, v57);
  v171 = (char *)&v147 - v59;
  uint64_t v61 = MEMORY[0x270FA5388](v58, v60);
  uint64_t v63 = (char *)&v147 - v62;
  uint64_t v65 = MEMORY[0x270FA5388](v61, v64);
  char v67 = (char *)&v147 - v66;
  MEMORY[0x270FA5388](v65, v68);
  uint64_t v70 = (char *)&v147 - v69;
  v174 = v51;
  uint64_t v175 = a1;
  dispatch thunk of Numeric.magnitude.getter();
  unint64_t v173 = a2;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  LOBYTE(a1) = dispatch thunk of static BinaryInteger.isSigned.getter();
  long long v166 = *(void (**)(char *, char *, unint64_t))(v53 + 16);
  v166(v67, v70, v52);
  long long v160 = v63;
  uint64_t v167 = v47;
  char v152 = v50;
  if ((a1 & 1) == 0)
  {
    uint64_t v75 = v53;
    unint64_t v78 = *(char **)(v53 + 8);
    ((void (*)(char *, unint64_t))v78)(v67, v52);
    goto LABEL_6;
  }
  char v148 = v70;
  uint64_t v164 = AssociatedConformanceWitness;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  unint64_t v72 = v173;
  swift_getAssociatedConformanceWitness();
  char v73 = dispatch thunk of static Comparable.< infix(_:_:)();
  BOOL v74 = v63;
  uint64_t v75 = v53;
  char v76 = *(void (**)(char *, unint64_t))(v53 + 8);
  v76(v74, v52);
  v76(v67, v52);
  if ((v73 & 1) == 0)
  {
    uint64_t AssociatedConformanceWitness = v164;
    unint64_t v78 = (char *)v76;
    uint64_t v70 = v148;
LABEL_6:
    uint64_t v79 = dispatch thunk of BinaryInteger.bitWidth.getter();
    unint64_t v80 = v171;
    v166(v171, v70, v52);
    if (v79 <= 63)
    {
      ((void (*)(char *, unint64_t))v78)(v80, v52);
      char v81 = v175;
      uint64_t v77 = v176;
      unint64_t v72 = v173;
      goto LABEL_8;
    }
    uint64_t v169 = v78;
    unint64_t v179 = -1;
    char v86 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v164 = AssociatedConformanceWitness;
    uint64_t v87 = dispatch thunk of BinaryInteger.bitWidth.getter();
    uint64_t v88 = v75;
    if (v86)
    {
      unint64_t v89 = v160;
      if (v87 <= 64)
      {
        swift_getAssociatedConformanceWitness();
        dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        unint64_t v72 = v173;
        swift_getAssociatedConformanceWitness();
        uint64_t v90 = v89;
        long long v91 = v171;
        LODWORD(v167) = dispatch thunk of static Comparable.> infix(_:_:)();
        int64_t v92 = v90;
        uint64_t v93 = v169;
        ((void (*)(char *, unint64_t))v169)(v92, v52);
        unint64_t v94 = v179;
        unint64_t v95 = (unint64_t)v153;
        (*(void (**)(char *, char *, unint64_t))(v88 + 32))(v153, v91, v52);
        if ((v167 & 1) == 0)
        {
LABEL_35:
          ((void (*)(unint64_t, unint64_t))v93)(v95, v52);
          char v81 = v175;
          uint64_t v77 = v176;
          unint64_t v78 = v93;
          goto LABEL_8;
        }
        unint64_t v96 = dispatch thunk of BinaryInteger._lowWord.getter();
        ((void (*)(unint64_t, unint64_t))v93)(v95, v52);
        BOOL v97 = v94 >= v96;
        char v81 = v175;
        uint64_t v77 = v176;
        unint64_t v78 = v93;
        if (v97)
        {
LABEL_8:
          uint64_t v82 = dispatch thunk of BinaryInteger._lowWord.getter();
          ((void (*)(char *, unint64_t))v78)(v70, v52);
          dispatch thunk of static AdditiveArithmetic.zero.getter();
          char v83 = dispatch thunk of static Comparable.< infix(_:_:)();
          uint64_t v84 = *(void (**)(char *, unint64_t))(v170 + 8);
          v84(v77, v72);
          if (v83) {
            uint64_t v85 = -v82;
          }
          else {
            uint64_t v85 = v82;
          }
          v84(v81, v72);
          return v85;
        }
LABEL_21:
        ((void (*)(char *, unint64_t))v78)(v70, v52);
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v89 = v160;
      if (v87 < 65)
      {
        unint64_t v101 = v171;
        unint64_t v102 = dispatch thunk of BinaryInteger._lowWord.getter();
        unint64_t v78 = v169;
        ((void (*)(char *, unint64_t))v169)(v101, v52);
        char v81 = v175;
        uint64_t v77 = v176;
        unint64_t v72 = v173;
        if (v179 >= v102) {
          goto LABEL_8;
        }
        goto LABEL_21;
      }
    }
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    unint64_t v98 = v173;
    swift_getAssociatedConformanceWitness();
    uint64_t v99 = v171;
    char v100 = dispatch thunk of static Comparable.< infix(_:_:)();
    unint64_t v78 = v169;
    ((void (*)(char *, unint64_t))v169)(v89, v52);
    ((void (*)(char *, unint64_t))v78)(v99, v52);
    unint64_t v72 = v98;
    char v81 = v175;
    uint64_t v77 = v176;
    if ((v100 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
  v76(v148, v52);
  uint64_t v77 = v176;
LABEL_22:
  unint64_t v179 = -1;
  unint64_t v173 = lazy protocol witness table accessor for type UInt64 and conformance UInt64();
  dispatch thunk of BinaryInteger.init<A>(_:)();
  unint64_t v103 = v168;
  dispatch thunk of static BinaryInteger.& infix(_:_:)();
  uint64_t v104 = v170;
  uint64_t v70 = *(char **)(v170 + 8);
  ((void (*)(char *, unint64_t))v70)(v77, v72);
  unint64_t v179 = 64;
  lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)();
  uint64_t v105 = v77;
  char v106 = v162;
  v174 = *(void (**)(char *, char *, unint64_t))(v104 + 16);
  v174(v162, v103, v72);
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0
    || (swift_getAssociatedConformanceWitness(),
        dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(),
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(),
        char v107 = dispatch thunk of static Comparable.>= infix(_:_:)(),
        uint64_t result = ((uint64_t (*)(char *, unint64_t))v70)(v105, v72),
        (v107 & 1) != 0))
  {
    uint64_t v109 = dispatch thunk of BinaryInteger.bitWidth.getter();
    uint64_t v93 = v163;
    if (v109 < 64) {
      goto LABEL_37;
    }
    unint64_t v52 = (unint64_t)v154;
    v174(v154, v106, v72);
    unint64_t v179 = -1;
    char v110 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v111 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v110)
    {
      if (v111 <= 64)
      {
        swift_getAssociatedConformanceWitness();
        dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        unint64_t v112 = v52;
        unint64_t v113 = v176;
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        char v114 = dispatch thunk of static Comparable.> infix(_:_:)();
        ((void (*)(char *, unint64_t))v70)(v113, v72);
        unint64_t v52 = v179;
        uint64_t v115 = v150;
        (*(void (**)(char *, unint64_t, unint64_t))(v170 + 32))(v150, v112, v72);
        if (v114)
        {
          unint64_t v95 = dispatch thunk of BinaryInteger._lowWord.getter();
          ((void (*)(char *, unint64_t))v70)(v115, v72);
          uint64_t v93 = v163;
          if (v52 < v95) {
            goto LABEL_34;
          }
        }
        else
        {
          ((void (*)(char *, unint64_t))v70)(v115, v72);
          uint64_t v93 = v163;
        }
        goto LABEL_37;
      }
    }
    else if (v111 < 65)
    {
      unint64_t v95 = dispatch thunk of BinaryInteger._lowWord.getter();
      ((void (*)(unint64_t, unint64_t))v70)(v52, v72);
      if (v179 < v95)
      {
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
LABEL_37:
      unint64_t v173 = dispatch thunk of BinaryInteger._lowWord.getter();
      ((void (*)(char *, unint64_t))v70)(v106, v72);
      uint64_t v117 = v165;
      unint64_t v118 = v174;
      v174(v165, v172, v72);
      char v119 = dispatch thunk of static BinaryInteger.isSigned.getter();
      unint64_t v120 = v161;
      v118(v161, v117, v72);
      if (v119)
      {
        uint64_t v121 = dispatch thunk of BinaryInteger.bitWidth.getter();
        ((void (*)(char *, unint64_t))v70)(v120, v72);
        v118(v93, v117, v72);
        if (v121 >= 65)
        {
          unint64_t v179 = 0x8000000000000000;
          if (dispatch thunk of static BinaryInteger.isSigned.getter())
          {
            if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
            {
              lazy protocol witness table accessor for type Int64 and conformance Int64();
              unint64_t v122 = v93;
              unint64_t v123 = v176;
              dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
              goto LABEL_61;
            }
            goto LABEL_64;
          }
          char v136 = dispatch thunk of static BinaryInteger.isSigned.getter();
          uint64_t v137 = dispatch thunk of BinaryInteger.bitWidth.getter();
          if (v136)
          {
            uint64_t v117 = v165;
            if (v137 <= 64)
            {
              swift_getAssociatedConformanceWitness();
              dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
              uint64_t v140 = v176;
              dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
              uint64_t v141 = v163;
              char v142 = dispatch thunk of static Comparable.< infix(_:_:)();
              ((void (*)(char *, unint64_t))v70)(v140, v72);
              char v143 = v149;
              (*(void (**)(char *, char *, unint64_t))(v170 + 32))(v149, v141, v72);
              if (v142)
              {
                ((void (*)(char *, unint64_t))v70)(v143, v72);
                goto LABEL_70;
              }
              int64_t v144 = v179;
              uint64_t v145 = dispatch thunk of BinaryInteger._lowWord.getter();
              ((void (*)(char *, unint64_t))v70)(v143, v72);
              BOOL v146 = v145 < v144;
              uint64_t v117 = v165;
              if (v146) {
                goto LABEL_70;
              }
LABEL_44:
              uint64_t v124 = dispatch thunk of BinaryInteger.bitWidth.getter();
              unint64_t v125 = v158;
              v118(v158, v117, v72);
              if (v124 >= 65)
              {
                ((void (*)(char *, unint64_t))v70)(v125, v72);
                char v126 = v159;
                v118(v159, v117, v72);
LABEL_48:
                unint64_t v179 = 0x7FFFFFFFFFFFFFFFLL;
                char v129 = dispatch thunk of static BinaryInteger.isSigned.getter();
                uint64_t v130 = dispatch thunk of BinaryInteger.bitWidth.getter();
                if (v129)
                {
                  uint64_t v131 = v176;
                  if (v130 > 64)
                  {
                    lazy protocol witness table accessor for type Int64 and conformance Int64();
                    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
                    char v132 = dispatch thunk of static Comparable.< infix(_:_:)();
                    ((void (*)(char *, unint64_t))v70)(v131, v72);
                    char v133 = v126;
                    goto LABEL_56;
                  }
                }
                else
                {
                  uint64_t v134 = v176;
                  if (v130 > 63)
                  {
                    uint64_t v178 = 0x7FFFFFFFFFFFFFFFLL;
                    (*(void (**)(char *, char *, unint64_t))(v170 + 32))(v176, v126, v72);
                    lazy protocol witness table accessor for type Int64 and conformance Int64();
                    unint64_t v135 = v151;
                    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
                    char v132 = dispatch thunk of static Comparable.< infix(_:_:)();
                    ((void (*)(char *, unint64_t))v70)(v135, v72);
                    char v133 = v134;
LABEL_56:
                    ((void (*)(char *, unint64_t))v70)(v133, v72);
                    uint64_t v117 = v165;
                    if ((v132 & 1) == 0) {
                      goto LABEL_57;
                    }
LABEL_70:
                    ((void (*)(char *, unint64_t))v70)(v117, v72);
                    ((void (*)(char *, unint64_t))v70)(v175, v72);
                    ((void (*)(char *, unint64_t))v70)(v172, v72);
                    ((void (*)(char *, unint64_t))v70)(v168, v72);
                    return 0;
                  }
                }
                dispatch thunk of BinaryInteger._lowWord.getter();
                ((void (*)(char *, unint64_t))v70)(v126, v72);
                uint64_t v117 = v165;
LABEL_57:
                dispatch thunk of BinaryInteger._lowWord.getter();
                ((void (*)(char *, unint64_t))v70)(v117, v72);
                ((void (*)(char *, unint64_t))v70)(v175, v72);
                ((void (*)(char *, unint64_t))v70)(v172, v72);
                ((void (*)(char *, unint64_t))v70)(v168, v72);
                return v173;
              }
              uint64_t v127 = dispatch thunk of BinaryInteger.bitWidth.getter();
              ((void (*)(char *, unint64_t))v70)(v125, v72);
              if (v127 == 64)
              {
                char v128 = dispatch thunk of static BinaryInteger.isSigned.getter();
                char v126 = v159;
                v118(v159, v117, v72);
                if ((v128 & 1) == 0) {
                  goto LABEL_48;
                }
              }
              else
              {
                char v126 = v159;
                v118(v159, v117, v72);
              }
              ((void (*)(char *, unint64_t))v70)(v126, v72);
              goto LABEL_57;
            }
            lazy protocol witness table accessor for type Int64 and conformance Int64();
            unint64_t v123 = v176;
            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
            unint64_t v122 = v163;
LABEL_61:
            char v138 = dispatch thunk of static Comparable.< infix(_:_:)();
            ((void (*)(char *, unint64_t))v70)(v123, v72);
            ((void (*)(char *, unint64_t))v70)(v122, v72);
            if (v138) {
              goto LABEL_70;
            }
            goto LABEL_44;
          }
          uint64_t v117 = v165;
          if (v137 < 64)
          {
LABEL_64:
            uint64_t v139 = dispatch thunk of BinaryInteger._lowWord.getter();
            ((void (*)(char *, unint64_t))v70)(v93, v72);
            if (v139 < (uint64_t)v179) {
              goto LABEL_70;
            }
            goto LABEL_44;
          }
        }
      }
      else
      {
        ((void (*)(char *, unint64_t))v70)(v120, v72);
        v118(v93, v117, v72);
      }
      ((void (*)(char *, unint64_t))v70)(v93, v72);
      goto LABEL_44;
    }
    uint64_t v116 = v176;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    unint64_t v95 = dispatch thunk of static Comparable.< infix(_:_:)();
    ((void (*)(char *, unint64_t))v70)(v116, v72);
    ((void (*)(unint64_t, unint64_t))v70)(v52, v72);
    if (v95) {
      goto LABEL_34;
    }
    goto LABEL_37;
  }
  __break(1u);
  return result;
}

uint64_t static _Int128.isSigned.getter()
{
  return 1;
}

unint64_t static _Int128.* infix(_:_:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t result = _Int128.multipliedReportingOverflow(by:)(a3, a4, a1, a2);
  if (v5) {
    __break(1u);
  }
  return result;
}

unint64_t _Int128.multipliedReportingOverflow(by:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = (unint64_t)a4 >> 63;
    if (!a2)
    {
      LODWORD(v7) = 0;
      goto LABEL_6;
    }
  }
  else
  {
    LODWORD(v6) = 0;
    LODWORD(v7) = 0;
    if (!a2) {
      goto LABEL_6;
    }
  }
  unint64_t v7 = (unint64_t)a2 >> 63;
LABEL_6:
  int v8 = v7 ^ v6;
  unint64_t v9 = -(uint64_t)a3;
  unint64_t v10 = (unsigned __int128)-(__int128)__PAIR128__(v4, a3) >> 64;
  if (a4 < 0)
  {
    unint64_t v11 = v10;
  }
  else
  {
    unint64_t v9 = a3;
    unint64_t v11 = a4;
  }
  unint64_t v12 = (unsigned __int128)-(__int128)__PAIR128__(v5, a1) >> 64;
  if (a2 >= 0) {
    unint64_t v13 = a1;
  }
  else {
    unint64_t v13 = -(uint64_t)a1;
  }
  if (a2 >= 0) {
    unint64_t v14 = a2;
  }
  else {
    unint64_t v14 = v12;
  }
  BOOL v15 = !is_mul_ok(v11, v13);
  BOOL v16 = !is_mul_ok(v9, v14);
  BOOL v17 = __CFADD__(v11 * v13, v9 * v14);
  unint64_t result = v9 * v13;
  if (v11 && v14 || v15 || v16 || v17)
  {
    if (!v8) {
      return result;
    }
    return -(uint64_t)result;
  }
  if (v8) {
    return -(uint64_t)result;
  }
  return result;
}

unint64_t static _Int128.*= infix(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t result = _Int128.multipliedReportingOverflow(by:)(a2, a3, *(void *)a1, *(void *)(a1 + 8));
  if (v6)
  {
    __break(1u);
  }
  else
  {
    *(void *)a1 = result;
    *(void *)(a1 + 8) = v5;
  }
  return result;
}

uint64_t protocol witness for Numeric.init<A>(exactly:) in conformance _Int128@<X0>(char *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = _Int128.init<A>(exactly:)(a1, a2, a3);
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v6;
  *(unsigned char *)(a4 + 16) = v7 & 1;
  return result;
}

void protocol witness for Numeric.magnitude.getter in conformance _Int128(void *a1@<X8>)
{
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  uint64_t v5 = (unsigned __int128)-(__int128)__PAIR128__(v1, *v2) >> 64;
  if (v4 < 0)
  {
    uint64_t v3 = -*v2;
    uint64_t v4 = v5;
  }
  *a1 = v3;
  a1[1] = v4;
}

unint64_t protocol witness for static Numeric.* infix(_:_:) in conformance _Int128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result = _Int128.multipliedReportingOverflow(by:)(*(void *)a2, *(void *)(a2 + 8), *(void *)a1, *(void *)(a1 + 8));
  if (v6)
  {
    __break(1u);
  }
  else
  {
    *a3 = result;
    a3[1] = v5;
  }
  return result;
}

unint64_t protocol witness for static Numeric.*= infix(_:_:) in conformance _Int128(uint64_t a1, uint64_t a2)
{
  unint64_t result = _Int128.multipliedReportingOverflow(by:)(*(void *)a2, *(void *)(a2 + 8), *(void *)a1, *(void *)(a1 + 8));
  if (v5)
  {
    __break(1u);
  }
  else
  {
    *(void *)a1 = result;
    *(void *)(a1 + 8) = v4;
  }
  return result;
}

uint64_t *protocol witness for ExpressibleByIntegerLiteral.init(integerLiteral:) in conformance _Int128@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = *result >> 63;
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t _Int128.Words._value.setter(uint64_t result, uint64_t a2)
{
  void *v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t (*_Int128.Words._value.modify())()
{
  return AggregateShare.share.modify;
}

uint64_t _Int128.Words.count.getter()
{
  return 2;
}

uint64_t _Int128.Words.startIndex.getter()
{
  return 0;
}

uint64_t _Int128.Words.indices.getter()
{
  return 0;
}

Swift::Int __swiftcall _Int128.Words.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall _Int128.Words.index(before:)(Swift::Int before)
{
  BOOL v1 = __OFSUB__(before, 1);
  Swift::Int result = before - 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

unint64_t _Int128.Words.subscript.getter(unint64_t result, uint64_t a2, uint64_t a3)
{
  if (result > 1)
  {
    __break(1u);
  }
  else if (result)
  {
    return a3;
  }
  else
  {
    return a2;
  }
  return result;
}

uint64_t static _Int128.bitWidth.getter()
{
  return 128;
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance _Int128.Words@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFSUB__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result - 1;
  }
  return result;
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance _Int128.Words(void *result)
{
  if (__OFSUB__(*result, 1)) {
    __break(1u);
  }
  else {
    --*result;
  }
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance _Int128.Words(unint64_t *a1, unint64_t *a2))()
{
  *a1 = _Int128.Words.subscript.getter(*a2, *v2, v2[1]);
  return AggregateShare.share.modify;
}

void *protocol witness for Collection.subscript.getter in conformance _Int128.Words@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  if ((*result & 0x8000000000000000) != 0 || (uint64_t v3 = result[1], v3 > 2))
  {
    __break(1u);
  }
  else
  {
    *(void *)a2 = *result;
    *(void *)(a2 + 8) = v3;
    *(_OWORD *)(a2 + 16) = *v2;
  }
  return result;
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance _Int128.Words(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance _UInt128.Words@<X0>(void *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if (v3 <= 2)
  {
    *a3 = v3;
    return result;
  }
  __break(1u);
  return result;
}

void *protocol witness for RandomAccessCollection.distance(from:to:) in conformance _UInt128.Words(void *result, unint64_t *a2)
{
  unint64_t v2 = *a2;
  if (*result <= 2uLL && v2 <= 2) {
    return (void *)(v2 - *result);
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance _UInt128.Words(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = a2[1];
  if (*result >= *a2)
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }
  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }
  if (v4 == v5) {
    __break(1u);
  }
  return result;
}

void *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance _UInt128.Words(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < *result) {
    __break(1u);
  }
  return result;
}

{
  if (*result < *a2 || a2[1] < result[1]) {
    __break(1u);
  }
  return result;
}

void *protocol witness for Collection.index(after:) in conformance _Int128.Words@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1;
  }
  return result;
}

void *protocol witness for Collection.formIndex(after:) in conformance _Int128.Words(void *result)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance _Int128.Words@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = 0;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _Int128.Words()
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(*v0, v0[1]);
}

void *protocol witness for Sequence._copyContents(initializing:) in conformance _Int128.Words(void *a1, void *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3, v3[1]);
}

uint64_t static _Int128.max.getter()
{
  return -1;
}

uint64_t static _Int128.min.getter()
{
  return 0;
}

uint64_t _Int128.multipliedReportingOverflow(by:)(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = -(uint64_t)a2;
  unint64_t v5 = (unsigned __int128)-(__int128)__PAIR128__(v3, a2) >> 64;
  if (a3 >= 0)
  {
    uint64_t v4 = a2;
    unint64_t v5 = a3;
  }
  uint64_t v6 = (v5 * (unsigned __int128)a1) >> 64;
  uint64_t result = v4 * a1;
  if (v6)
  {
    if ((a3 & 0x8000000000000000) == 0) {
      return result;
    }
    return -result;
  }
  else
  {
    if ((a3 & 0x8000000000000000) == 0) {
      return result;
    }
    return -result;
  }
}

uint64_t _Int128.multiplied(by:)(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result = _Int128.multipliedReportingOverflow(by:)(a1, a2, a3);
  if (v4) {
    __break(1u);
  }
  return result;
}

uint64_t _Int128.quotientAndRemainder(dividingBy:)(unint64_t a1, uint64_t a2, unint64_t a3, int64_t a4)
{
  int64_t v5 = a4;
  int64_t v6 = (unsigned __int128)-(__int128)__PAIR128__(v4, a3) >> 64;
  int v7 = a4 < 0;
  if (a4 >= 0) {
    unint64_t v8 = a3;
  }
  else {
    unint64_t v8 = -(uint64_t)a3;
  }
  if (a4 < 0) {
    a4 = v6;
  }
  unint64_t v9 = (unsigned __int128)-(__int128)__PAIR128__(v6, a1) >> 64;
  int v10 = a2 < 0;
  if (a2 >= 0) {
    unint64_t v11 = a1;
  }
  else {
    unint64_t v11 = -(uint64_t)a1;
  }
  if (a2 >= 0) {
    unint64_t v12 = a2;
  }
  else {
    unint64_t v12 = v9;
  }
  uint64_t v13 = specialized _wideDivide22<A>(_:by:)(&v19, &v18, &v17, a4, v8, v12, v11);
  unint64_t v15 = v18;
  uint64_t result = v19;
  if (v10 == v7)
  {
    if (v13 < 0)
    {
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      return result;
    }
    if ((v5 & 0x8000000000000000) == 0) {
      goto LABEL_19;
    }
LABEL_26:
    if ((v15 & 0x8000000000000000) == 0) {
      return result;
    }
    goto LABEL_29;
  }
  if (v13 != 0x8000000000000000 || v19) {
    goto LABEL_21;
  }
  uint64_t v13 = 0x8000000000000000;
  if (v5 < 0) {
    goto LABEL_26;
  }
LABEL_19:
  while ((v15 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_21:
    if (v13 < 0) {
      goto LABEL_30;
    }
    BOOL v16 = result == 0;
    uint64_t result = -result;
    if (v16) {
      uint64_t v13 = -v13;
    }
    else {
      uint64_t v13 = ~v13;
    }
    if (v5 < 0) {
      goto LABEL_26;
    }
  }
  return result;
}

uint64_t _Int128.dividedReportingOverflow(by:)(unint64_t a1, uint64_t a2, unint64_t a3, int64_t a4)
{
  unint64_t v4 = a3;
  if (a2 != -1)
  {
    if (!a2 && !a1) {
      return v4;
    }
    return _Int128.quotientAndRemainder(dividingBy:)(a1, a2, a3, a4);
  }
  if (a1 != -1 || a4 != 0x8000000000000000 || a3) {
    return _Int128.quotientAndRemainder(dividingBy:)(a1, a2, a3, a4);
  }
  return v4;
}

unint64_t _Int128.remainderReportingOverflow(dividingBy:)(unint64_t a1, uint64_t a2, unint64_t a3, int64_t a4)
{
  if (a2 != -1)
  {
    if (!a2 && !a1) {
      return a3;
    }
LABEL_8:
    _Int128.quotientAndRemainder(dividingBy:)(a1, a2, a3, a4);
    return a3;
  }
  if (a1 != -1 || a4 != 0x8000000000000000 || a3) {
    goto LABEL_8;
  }
  return a3;
}

uint64_t _Int128.multipliedFullWidth(by:)(uint64_t *a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  if (a5)
  {
    if (a3)
    {
      BOOL v6 = ((a5 ^ a3) & 0x8000000000000000) == 0;
      if ((a5 & 0x8000000000000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
    if ((a5 & 0x8000000000000000) != 0)
    {
      BOOL v6 = 0;
LABEL_11:
      BOOL v19 = a4 == 0;
      a4 = -(uint64_t)a4;
      a5 = -(uint64_t)(a5 + !v19);
LABEL_12:
      uint64_t v8 = (unsigned __int128)-(__int128)__PAIR128__(v5, a2) >> 64;
      if (a3 >= 0)
      {
        uint64_t v7 = a3;
      }
      else
      {
        a2 = -(uint64_t)a2;
        uint64_t v7 = v8;
      }
      goto LABEL_15;
    }
    uint64_t v7 = 0;
    BOOL v6 = 1;
  }
  else
  {
    if (a3)
    {
      a5 = 0;
      BOOL v6 = a3 >= 0;
      goto LABEL_12;
    }
    uint64_t v7 = 0;
    a5 = 0;
    BOOL v6 = 1;
  }
LABEL_15:
  uint64_t v9 = (__PAIR128__(v7, a2) * __PAIR128__(a5, a4)) >> 64;
  BOOL v10 = __CFADD__((__PAIR128__(a5, a4) * a2) >> 64, a4 * v7);
  uint64_t v11 = a4 * a2;
  uint64_t v12 = ((a5 * (unsigned __int128)a2) >> 64)
      + ((a4 * (unsigned __int128)(unint64_t)v7) >> 64)
      + v10
      + __CFADD__((a4 * (unsigned __int128)a2) >> 64, a5 * a2)
      + a5 * v7;
  if (!v6)
  {
    uint64_t v13 = -v12 - 1;
    BOOL v19 = v11 == 0;
    uint64_t v14 = -v11;
    if (v19) {
      uint64_t v15 = -v9;
    }
    else {
      uint64_t v15 = ~v9;
    }
    BOOL v19 = v14 != 0;
    uint64_t v16 = v14 - 1;
    uint64_t v17 = !v19;
    uint64_t v18 = v17 << 63 >> 63;
    LODWORD(v17) = v15 - v17 == -1;
    BOOL v19 = __CFADD__(v16, 1);
    uint64_t v11 = v16 + 1;
    if (v19) {
      uint64_t v17 = v17;
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v9 = v18 + v19 + v15;
    uint64_t v12 = v13 + v17;
  }
  *a1 = v11;
  a1[1] = v9;
  return v12;
}

uint64_t _Int128.dividingFullWidth(_:)(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  specialized _wideMagnitude22<A>(_:)(v18, v17, a1, a2, *a3, a3[1]);
  unint64_t v8 = -(uint64_t)a4;
  unint64_t v10 = (unsigned __int128)-(__int128)__PAIR128__(v9, a4) >> 64;
  if (a5 < 0)
  {
    unint64_t v11 = v10;
  }
  else
  {
    unint64_t v8 = a4;
    unint64_t v11 = a5;
  }
  uint64_t v12 = specialized _wideDivide42<A>(_:by:)(v18, v17, &v16, v18[1], v18[0], v17[1], v17[0], v11, v8);
  uint64_t result = v18[0];
  unint64_t v14 = v17[0];
  if (a2 < 0 != a5 < 0)
  {
    if (v12 == 0x8000000000000000 && v18[0] == 0) {
      goto LABEL_16;
    }
    if (v12 < 0) {
      goto LABEL_21;
    }
    uint64_t result = -v18[0];
    if ((a2 & 0x8000000000000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_17;
  }
  if (v12 < 0)
  {
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    return result;
  }
  if (a2 < 0)
  {
LABEL_17:
    if ((v14 & 0x8000000000000000) == 0) {
      return result;
    }
    goto LABEL_20;
  }
LABEL_14:
  while ((v14 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_16:
    uint64_t result = 0;
    if (a2 < 0) {
      goto LABEL_17;
    }
  }
  return result;
}

void *specialized _wideMagnitude22<A>(_:)(void *result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4 < 0)
  {
    unint64_t v6 = -a4;
    if (a3) {
      unint64_t v6 = ~a4;
    }
    unsigned long long v7 = __PAIR128__(v6, -a3) - 1;
    unint64_t v8 = -a6;
    if (a5) {
      unint64_t v8 = ~a6;
    }
    return (void *)specialized _wideAddReportingOverflow22<A>(_:_:)(result, a2, v7, *((uint64_t *)&v7 + 1), -a5 - 1, (__PAIR128__(v8, -a5) - 1) >> 64, 0, 0, 1, 0);
  }
  else
  {
    *uint64_t result = a3;
    result[1] = a4;
    *a2 = a5;
    a2[1] = a6;
  }
  return result;
}

void *static _Int128.&= infix(_:_:)(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result[1] & a3;
  *result &= a2;
  result[1] = v3;
  return result;
}

void *static _Int128.|= infix(_:_:)(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result[1] | a3;
  *result |= a2;
  result[1] = v3;
  return result;
}

void *static _Int128.^= infix(_:_:)(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result[1] ^ a3;
  *result ^= a2;
  result[1] = v3;
  return result;
}

uint64_t *static _Int128.<<= infix(_:_:)(uint64_t *result, unint64_t a2, uint64_t a3)
{
  if (!a3)
  {
    if (a2 < 0x80)
    {
      uint64_t v8 = *result;
      unint64_t v9 = result[1];
      if (a2)
      {
        unint64_t v9 = (v9 << a2) | ((unint64_t)*result >> -(char)a2);
        uint64_t v8 = *result << a2;
      }
      if (a2 > 0x3F)
      {
        unint64_t v9 = *result << a2;
        uint64_t v8 = 0;
      }
      *uint64_t result = v8;
      result[1] = v9;
      return result;
    }
LABEL_18:
    *uint64_t result = 0;
    result[1] = 0;
    return result;
  }
  if ((a3 & 0x8000000000000000) == 0) {
    goto LABEL_18;
  }
  BOOL v3 = __OFSUB__(0, a3);
  uint64_t v4 = -a3;
  char v5 = v3;
  BOOL v6 = a2 == 0;
  unint64_t v7 = -(uint64_t)a2;
  if (v6)
  {
    if ((v5 & 1) == 0) {
      return static _Int128.>>= infix(_:_:)(result, v7, v4);
    }
  }
  else
  {
    if (v4 == 0x8000000000000000) {
      char v5 = 1;
    }
    if ((v5 & 1) == 0) {
      return static _Int128.>>= infix(_:_:)(result, v7, --v4);
    }
  }
  __break(1u);
  return result;
}

uint64_t *static _Int128.>>= infix(_:_:)(uint64_t *result, unint64_t a2, uint64_t a3)
{
  if (!a3)
  {
    if (a2 < 0x80)
    {
      uint64_t v8 = *result;
      uint64_t v9 = result[1];
      uint64_t v10 = v9 >> 63;
      uint64_t v11 = v9 >> a2;
      uint64_t v12 = (v9 << -(char)a2) | ((unint64_t)*result >> a2);
      if (a2)
      {
        v9 >>= a2;
        uint64_t v8 = v12;
      }
      if (a2 > 0x3F)
      {
        uint64_t v9 = v10;
        uint64_t v8 = v11;
      }
      *uint64_t result = v8;
      result[1] = v9;
      return result;
    }
LABEL_18:
    uint64_t v13 = result[1] >> 63;
    *uint64_t result = v13;
    result[1] = v13;
    return result;
  }
  if ((a3 & 0x8000000000000000) == 0) {
    goto LABEL_18;
  }
  BOOL v3 = __OFSUB__(0, a3);
  uint64_t v4 = -a3;
  char v5 = v3;
  BOOL v6 = a2 == 0;
  uint64_t v7 = -(uint64_t)a2;
  if (v6)
  {
    if ((v5 & 1) == 0) {
      return (uint64_t *)static _Int128.<<= infix(_:_:)(result, v7, v4);
    }
  }
  else
  {
    if (v4 == 0x8000000000000000) {
      char v5 = 1;
    }
    if ((v5 & 1) == 0) {
      return (uint64_t *)static _Int128.<<= infix(_:_:)(result, v7, --v4);
    }
  }
  __break(1u);
  return result;
}

unint64_t static _Int128./ infix(_:_:)(unint64_t result, int64_t a2, unint64_t a3, uint64_t a4)
{
  if (a4 == -1)
  {
    if (a3 == -1 && a2 == 0x8000000000000000 && !result) {
      goto LABEL_9;
    }
    return _Int128.quotientAndRemainder(dividingBy:)(a3, a4, result, a2);
  }
  if (a4 || a3) {
    return _Int128.quotientAndRemainder(dividingBy:)(a3, a4, result, a2);
  }
LABEL_9:
  __break(1u);
  return result;
}

unint64_t static _Int128.% infix(_:_:)(unint64_t result, int64_t a2, unint64_t a3, uint64_t a4)
{
  if (a4 == -1)
  {
    if (a3 == -1 && a2 == 0x8000000000000000 && !result) {
      goto LABEL_9;
    }
LABEL_8:
    _Int128.quotientAndRemainder(dividingBy:)(a3, a4, result, a2);
    return v4;
  }
  if (a4 || a3) {
    goto LABEL_8;
  }
LABEL_9:
  __break(1u);
  return result;
}

unint64_t _Int128.leadingZeroBitCount.getter(unint64_t a1, unint64_t a2)
{
  unint64_t v2 = __clz(a2);
  unint64_t v3 = __clz(a1) + 64;
  if (a2) {
    return v2;
  }
  else {
    return v3;
  }
}

unint64_t _Int128.trailingZeroBitCount.getter(unint64_t a1, unint64_t a2)
{
  unint64_t v2 = __clz(__rbit64(a1));
  unint64_t v3 = __clz(__rbit64(a2)) + 64;
  if (a1) {
    return v2;
  }
  else {
    return v3;
  }
}

uint64_t _Int128.nonzeroBitCount.getter(uint64_t a1, uint64_t a2)
{
  uint8x8_t v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  uint64_t v3 = v2.u32[0];
  uint8x8_t v4 = (uint8x8_t)vcnt_s8((int8x8_t)a1);
  v4.i16[0] = vaddlv_u8(v4);
  return v3 + v4.u32[0];
}

unint64_t _Int128.byteSwapped.getter(uint64_t a1, unint64_t a2)
{
  return bswap64(a2);
}

double protocol witness for static FixedWidthInteger.max.getter in conformance _Int128@<D0>(_OWORD *a1@<X8>)
{
  double result = NAN;
  *a1 = xmmword_260BFA610;
  return result;
}

double protocol witness for static FixedWidthInteger.min.getter in conformance _Int128@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = xmmword_260BFA620;
  return result;
}

uint64_t protocol witness for FixedWidthInteger.addingReportingOverflow(_:) in conformance _Int128(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = v2[1];
  BOOL v5 = __CFADD__(*v2, *a2);
  BOOL v6 = __OFADD__(v4, v3);
  uint64_t v7 = v4 + v3;
  if (v6)
  {
    uint64_t v8 = 1;
    if (v5)
    {
LABEL_12:
      uint64_t v9 = 1;
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v8 = v7 == 0x7FFFFFFFFFFFFFFFLL && v5;
    if (v5) {
      goto LABEL_12;
    }
  }
  uint64_t v9 = 0;
LABEL_13:
  *a1 = *v2 + *a2;
  a1[1] = v9 + v7;
  return v8;
}

unint64_t protocol witness for FixedWidthInteger.subtractingReportingOverflow(_:) in conformance _Int128(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  unint64_t v5 = *v2;
  unint64_t v6 = v2[1];
  BOOL v7 = __OFSUB__(v6, v4);
  unint64_t v8 = v6 - v4;
  int v9 = v7;
  BOOL v10 = v5 >= v3;
  unint64_t v11 = v5 - v3;
  LODWORD(v3) = v5 < v3;
  if (v10)
  {
    if (v9)
    {
      unint64_t v3 = 1;
      unint64_t v12 = v8;
      goto LABEL_13;
    }
    unint64_t v12 = v8;
  }
  else
  {
    unint64_t v12 = v8 - 1;
    if (v9)
    {
      unint64_t v3 = 1;
      goto LABEL_13;
    }
  }
  if (v8 == 0x8000000000000000) {
    unint64_t v3 = v3;
  }
  else {
    unint64_t v3 = 0;
  }
LABEL_13:
  *a1 = v11;
  a1[1] = v12;
  return v3;
}

uint64_t protocol witness for FixedWidthInteger.multipliedReportingOverflow(by:) in conformance _Int128(unint64_t *a1, uint64_t a2)
{
  *a1 = _Int128.multipliedReportingOverflow(by:)(*(void *)a2, *(void *)(a2 + 8), *(void *)v2, *(void *)(v2 + 8));
  a1[1] = v4;
  return v5 & 1;
}

uint64_t protocol witness for FixedWidthInteger.dividedReportingOverflow(by:) in conformance _Int128(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  unint64_t v6 = *v2;
  int64_t v7 = v2[1];
  if (v5 == -1)
  {
    if (v4 == -1 && v7 == 0x8000000000000000 && v6 == 0)
    {
      unint64_t v6 = 0;
      uint64_t result = 1;
      int64_t v7 = 0x8000000000000000;
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  if (v5) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = v4 == 0;
  }
  if (!v8)
  {
LABEL_15:
    unint64_t v6 = _Int128.quotientAndRemainder(dividingBy:)(v4, v5, v6, v7);
    int64_t v7 = v12;
    uint64_t result = 0;
    goto LABEL_16;
  }
  uint64_t result = 1;
LABEL_16:
  *a1 = v6;
  a1[1] = v7;
  return result;
}

uint64_t protocol witness for FixedWidthInteger.remainderReportingOverflow(dividingBy:) in conformance _Int128(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  unint64_t v6 = *v2;
  int64_t v7 = v2[1];
  if (v5 == -1)
  {
    if (v4 != -1 || v7 != 0x8000000000000000 || v6 != 0) {
      goto LABEL_15;
    }
    unint64_t v6 = 0;
    int64_t v7 = 0;
LABEL_17:
    uint64_t result = 1;
    goto LABEL_18;
  }
  if (v5) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = v4 == 0;
  }
  if (v8) {
    goto LABEL_17;
  }
LABEL_15:
  _Int128.quotientAndRemainder(dividingBy:)(v4, v5, v6, v7);
  uint64_t result = 0;
LABEL_18:
  *a1 = v6;
  a1[1] = v7;
  return result;
}

uint64_t protocol witness for FixedWidthInteger.multipliedFullWidth(by:) in conformance _Int128(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = _Int128.multipliedFullWidth(by:)(a2, *(void *)a3, *(void *)(a3 + 8), *v3, v3[1]);
  *a1 = result;
  a1[1] = v6;
  return result;
}

uint64_t protocol witness for FixedWidthInteger.dividingFullWidth(_:) in conformance _Int128(uint64_t *a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result = _Int128.dividingFullWidth(_:)(*a3, a3[1], a4, *(void *)v4, *(void *)(v4 + 8));
  *a1 = result;
  a1[1] = v8;
  *a2 = v9;
  a2[1] = v10;
  return result;
}

uint64_t protocol witness for FixedWidthInteger.nonzeroBitCount.getter in conformance _Int128()
{
  return vaddvq_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*v0)))));
}

unint64_t protocol witness for FixedWidthInteger.leadingZeroBitCount.getter in conformance _Int128()
{
  unint64_t v1 = v0[1];
  if (v1) {
    return __clz(v1);
  }
  else {
    return __clz(*v0) + 64;
  }
}

__n128 protocol witness for FixedWidthInteger.init(littleEndian:) in conformance _Int128@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t protocol witness for static FixedWidthInteger.&>> infix(_:_:) in conformance _Int128@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  return protocol witness for static FixedWidthInteger.&>> infix(_:_:) in conformance _Int128(a1, a2, (uint64_t (*)(void, void, void))specialized static _Int128.&>> infix(_:_:), a3);
}

uint64_t *protocol witness for static FixedWidthInteger.&>>= infix(_:_:) in conformance _Int128(uint64_t *a1, void *a2)
{
  return specialized static _Int128.&>>= infix(_:_:)(a1, *a2);
}

uint64_t protocol witness for static FixedWidthInteger.&<< infix(_:_:) in conformance _Int128@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  return protocol witness for static FixedWidthInteger.&>> infix(_:_:) in conformance _Int128(a1, a2, (uint64_t (*)(void, void, void))specialized static _Int128.&<< infix(_:_:), a3);
}

uint64_t protocol witness for static FixedWidthInteger.&>> infix(_:_:) in conformance _Int128@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t (*a3)(void, void, void)@<X4>, uint64_t *a4@<X8>)
{
  uint64_t result = a3(*a1, a1[1], *a2);
  *a4 = result;
  a4[1] = v6;
  return result;
}

uint64_t *protocol witness for static FixedWidthInteger.&<<= infix(_:_:) in conformance _Int128(uint64_t *a1, void *a2)
{
  return specialized static _Int128.&<<= infix(_:_:)(a1, *a2);
}

unint64_t protocol witness for static FixedWidthInteger.&* infix(_:_:) in conformance _Int128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result = _Int128.multipliedReportingOverflow(by:)(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8));
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t protocol witness for static BinaryInteger.isSigned.getter in conformance _Int128()
{
  return 1;
}

uint64_t protocol witness for BinaryInteger.init<A>(exactly:) in conformance _Int128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = lazy protocol witness table accessor for type _Int128 and conformance _Int128();

  return MEMORY[0x270F9EEA8](a1, a4, a2, v8, a3);
}

uint64_t protocol witness for BinaryInteger.init<A>(_:) in conformance _Int128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return protocol witness for BinaryInteger.init<A>(_:) in conformance _UInt128(a1, a2, (void (*)(void))lazy protocol witness table accessor for type _Int128 and conformance _Int128, a3);
}

uint64_t protocol witness for BinaryInteger.init<A>(_:) in conformance _UInt128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(void)@<X5>, _OWORD *a4@<X8>)
{
  a3();
  static FixedWidthInteger._convert<A>(from:)();
  if (v13)
  {
    _StringGuts.grow(_:)(80);
    v8._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._object = (void *)0x8000000260BFEF90;
    v9._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v9);
    v10._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 0xD00000000000002ELL;
    v11._object = (void *)0x8000000260BFEFB0;
    String.append(_:)(v11);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
    *a4 = v12;
  }
  return result;
}

uint64_t protocol witness for BinaryInteger.init<A>(_:) in conformance _Int128@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = specialized _Int128.init<A>(_:)(a1, a2, a3);
  uint64_t v9 = v8;
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  *a4 = v7;
  a4[1] = v9;
  return result;
}

double protocol witness for BinaryInteger.init<A>(truncatingIfNeeded:) in conformance _Int128@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  return protocol witness for BinaryInteger.init<A>(truncatingIfNeeded:) in conformance _UInt128(a1, a2, a3, a4, (uint64_t (*)(void))lazy protocol witness table accessor for type _Int128 and conformance _Int128, a5);
}

double protocol witness for BinaryInteger.init<A>(truncatingIfNeeded:) in conformance _UInt128@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(void)@<X5>, _OWORD *a6@<X8>)
{
  uint64_t v11 = a5();
  static FixedWidthInteger._truncatingInit<A>(_:)(a1, a4, a2, v11, a3, (uint64_t)&v13);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  double result = *(double *)&v13;
  *a6 = v13;
  return result;
}

uint64_t protocol witness for BinaryInteger.init<A>(clamping:) in conformance _Int128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = lazy protocol witness table accessor for type _Int128 and conformance _Int128();

  return MEMORY[0x270F9EEB8](a1, a4, a2, v8, a3);
}

unint64_t protocol witness for BinaryInteger._binaryLogarithm() in conformance _Int128()
{
  int64_t v1 = v0[1];
  if (v1)
  {
    if (v1 >= 1) {
      return __clz(v1) ^ 0x7F;
    }
    __break(1u);
  }
  else if (*v0)
  {
    return (__clz(*v0) | 0x40) ^ 0x7F;
  }
  __break(1u);
  return result;
}

unint64_t protocol witness for BinaryInteger.trailingZeroBitCount.getter in conformance _Int128()
{
  if (*v0) {
    return __clz(__rbit64(*v0));
  }
  else {
    return __clz(__rbit64(v0[1])) + 64;
  }
}

unint64_t protocol witness for static BinaryInteger./ infix(_:_:) in conformance _Int128@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = *a1;
  int64_t v5 = a1[1];
  unint64_t result = *a2;
  uint64_t v7 = a2[1];
  if (v7 == -1)
  {
    if (result != -1 || v5 != 0x8000000000000000 || v4 != 0) {
      goto LABEL_6;
    }
  }
  else
  {
    if (v7) {
      BOOL v8 = 0;
    }
    else {
      BOOL v8 = result == 0;
    }
    if (!v8)
    {
LABEL_6:
      unint64_t result = _Int128.quotientAndRemainder(dividingBy:)(result, v7, v4, v5);
      *a3 = result;
      a3[1] = v9;
      return result;
    }
  }
  __break(1u);
  return result;
}

unint64_t *protocol witness for static BinaryInteger./= infix(_:_:) in conformance _Int128(unint64_t *a1, uint64_t a2)
{
  return specialized static _Int128./= infix(_:_:)(a1, *(void *)a2, *(void *)(a2 + 8));
}

unint64_t protocol witness for static BinaryInteger.% infix(_:_:) in conformance _Int128@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = *a1;
  int64_t v5 = a1[1];
  unint64_t result = *a2;
  uint64_t v7 = a2[1];
  if (v7 == -1)
  {
    if (result != -1 || v5 != 0x8000000000000000 || v4 != 0) {
      goto LABEL_6;
    }
  }
  else
  {
    if (v7) {
      BOOL v8 = 0;
    }
    else {
      BOOL v8 = result == 0;
    }
    if (!v8)
    {
LABEL_6:
      unint64_t result = _Int128.quotientAndRemainder(dividingBy:)(result, v7, v4, v5);
      *a3 = v9;
      a3[1] = v10;
      return result;
    }
  }
  __break(1u);
  return result;
}

unint64_t *protocol witness for static BinaryInteger.%= infix(_:_:) in conformance _Int128(unint64_t *a1, uint64_t a2)
{
  return specialized static _Int128.%= infix(_:_:)(a1, *(void *)a2, *(void *)(a2 + 8));
}

void *protocol witness for static BinaryInteger.~ prefix(_:) in conformance _Int128@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[1];
  if (*result) {
    uint64_t v3 = ~v2;
  }
  else {
    uint64_t v3 = -v2;
  }
  BOOL v4 = *result == 0;
  *a2 = -*result - 1;
  a2[1] = v3 - v4;
  return result;
}

int8x16_t protocol witness for static BinaryInteger.&= infix(_:_:) in conformance _Int128(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t result = vandq_s8(*a1, *a2);
  *a1 = result;
  return result;
}

int8x16_t protocol witness for static BinaryInteger.|= infix(_:_:) in conformance _Int128(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t result = vorrq_s8(*a1, *a2);
  *a1 = result;
  return result;
}

int8x16_t protocol witness for static BinaryInteger.^= infix(_:_:) in conformance _Int128(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t result = veorq_s8(*a1, *a2);
  *a1 = result;
  return result;
}

uint64_t protocol witness for static BinaryInteger.>> infix<A>(_:_:) in conformance _Int128@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  BOOL v97 = a5;
  uint64_t v94 = *(void *)(*(void *)(a4 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = MEMORY[0x270FA5388](AssociatedTypeWitness, v8);
  int64_t v92 = (char *)&v86 - v10;
  uint64_t v99 = *(void *)(a3 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v9, v11);
  unint64_t v14 = (char *)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v12, v15);
  uint64_t v90 = (char *)&v86 - v17;
  uint64_t v19 = MEMORY[0x270FA5388](v16, v18);
  unint64_t v96 = (char *)&v86 - v20;
  uint64_t v22 = MEMORY[0x270FA5388](v19, v21);
  unint64_t v95 = (char *)&v86 - v23;
  uint64_t v25 = MEMORY[0x270FA5388](v22, v24);
  long long v91 = (char *)&v86 - v26;
  uint64_t v28 = MEMORY[0x270FA5388](v25, v27);
  uint64_t v30 = (char *)&v86 - v29;
  uint64_t v32 = MEMORY[0x270FA5388](v28, v31);
  unint64_t v98 = (char *)&v86 - v33;
  MEMORY[0x270FA5388](v32, v34);
  uint64_t v36 = (char *)&v86 - v35;
  unint64_t v37 = *a1;
  uint64_t v38 = a1[1];
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64) {
      goto LABEL_9;
    }
    goto LABEL_6;
  }
  char v39 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v40 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v39 & 1) == 0)
  {
    if (v40 >= 64) {
      goto LABEL_10;
    }
LABEL_9:
    if (dispatch thunk of BinaryInteger._lowWord.getter() >= -128) {
      goto LABEL_10;
    }
LABEL_37:
    specialized static _Int128.&>> infix(_:_:)(v37, v38, 127);
LABEL_38:
    uint64_t result = 0;
    uint64_t v70 = 0;
    goto LABEL_44;
  }
  if (v40 > 64)
  {
LABEL_6:
    unint64_t v101 = -128;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v41 = dispatch thunk of static Comparable.< infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v99 + 8))(v36, a3);
    if ((v41 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_37;
  }
  unint64_t v88 = v37;
  uint64_t v89 = v38;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  char v64 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v65 = v99;
  uint64_t v66 = *(void (**)(char *, uint64_t))(v99 + 8);
  v66(v36, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v14, a2, a3);
  if (v64)
  {
    v66(v14, a3);
    unint64_t v37 = v88;
    uint64_t v38 = v89;
    goto LABEL_37;
  }
  uint64_t v68 = dispatch thunk of BinaryInteger._lowWord.getter();
  v66(v14, a3);
  unint64_t v37 = v88;
  uint64_t v38 = v89;
  if (v68 < -128) {
    goto LABEL_37;
  }
LABEL_10:
  char v42 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v43 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if (v42)
  {
    if (v43 > 64) {
      goto LABEL_12;
    }
  }
  else if (v43 >= 64)
  {
LABEL_12:
    unint64_t v101 = 128;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v44 = dispatch thunk of static Comparable.< infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v99 + 8))(v36, a3);
    if ((v44 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_20:
    unint64_t v55 = v37;
    uint64_t v56 = v38;
    char v57 = 127;
LABEL_43:
    uint64_t result = specialized static _Int128.&>> infix(_:_:)(v55, v56, v57);
    goto LABEL_44;
  }
  if (dispatch thunk of BinaryInteger._lowWord.getter() > 128) {
    goto LABEL_20;
  }
LABEL_13:
  char v86 = v36;
  unint64_t v88 = v37;
  uint64_t v89 = v38;
  uint64_t v45 = v98;
  uint64_t v46 = v99;
  uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t))(v99 + 16);
  v47(v98, a2, a3);
  char v48 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v87 = (void (*)(char *, char *, uint64_t))v47;
  v47(v30, (uint64_t)v45, a3);
  if ((v48 & 1) == 0)
  {
    unint64_t v50 = *(void (**)(char *, uint64_t))(v46 + 8);
    v50(v30, a3);
    goto LABEL_22;
  }
  uint64_t v49 = dispatch thunk of BinaryInteger.bitWidth.getter();
  unint64_t v50 = *(void (**)(char *, uint64_t))(v46 + 8);
  v50(v30, a3);
  if (v49 <= 64)
  {
LABEL_22:
    uint64_t v53 = v89;
    uint64_t v54 = v86;
    goto LABEL_23;
  }
  char v51 = v91;
  v87(v91, v98, a3);
  unint64_t v101 = 0x8000000000000000;
  char v52 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v53 = v89;
  uint64_t v54 = v86;
  if ((v52 & 1) == 0)
  {
    char v78 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v79 = dispatch thunk of BinaryInteger.bitWidth.getter();
    BOOL v81 = __OFSUB__(v79, 64);
    BOOL v80 = v79 - 64 < 0;
    if ((v78 & 1) == 0) {
      goto LABEL_50;
    }
    if (v79 <= 64)
    {
      swift_getAssociatedConformanceWitness();
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      uint64_t v84 = v91;
      unint64_t v72 = dispatch thunk of static Comparable.< infix(_:_:)();
      v50(v54, a3);
      char v73 = v90;
      (*(void (**)(char *, char *, uint64_t))(v99 + 32))(v90, v84, a3);
      if (v72) {
        goto LABEL_58;
      }
      dispatch thunk of BinaryInteger._lowWord.getter();
      char v83 = v73;
      goto LABEL_54;
    }
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v51 = v91;
LABEL_48:
    char v82 = dispatch thunk of static Comparable.< infix(_:_:)();
    v50(v54, a3);
    v50(v51, a3);
    if ((v82 & 1) == 0) {
      goto LABEL_23;
    }
    __break(1u);
LABEL_50:
    char v51 = v91;
    if (v80 == v81) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
  {
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    goto LABEL_48;
  }
LABEL_52:
  dispatch thunk of BinaryInteger._lowWord.getter();
LABEL_53:
  char v83 = v51;
LABEL_54:
  v50(v83, a3);
LABEL_23:
  uint64_t v58 = v98;
  uint64_t v59 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v60 = v95;
  v87(v95, v58, a3);
  if (v59 >= 65)
  {
    v50(v60, a3);
    goto LABEL_25;
  }
  uint64_t v63 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v50(v60, a3);
  if (v63 == 64 && (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
  {
LABEL_25:
    v87(v96, v98, a3);
    unint64_t v101 = 0x7FFFFFFFFFFFFFFFLL;
    char v61 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v62 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v61)
    {
      if (v62 > 64)
      {
        lazy protocol witness table accessor for type Int and conformance Int();
LABEL_39:
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        uint64_t v71 = v96;
        unint64_t v72 = dispatch thunk of static Comparable.< infix(_:_:)();
        char v73 = (char *)(v99 + 8);
        v50(v54, a3);
        v50(v71, a3);
        if ((v72 & 1) == 0) {
          goto LABEL_40;
        }
        __break(1u);
LABEL_58:
        v50(v73, a3);
        __break(1u);
LABEL_59:
        if (v72 > 0xFFFFFFFFFFFFFF80)
        {
          specialized static FixedWidthInteger._truncatingInit<A>(_:)();
          uint64_t result = specialized static _Int128.&<< infix(_:_:)(v88, v53, v85);
          goto LABEL_44;
        }
        goto LABEL_38;
      }
    }
    else if (v62 >= 64)
    {
      uint64_t v100 = 0x7FFFFFFFFFFFFFFFLL;
      lazy protocol witness table accessor for type Int and conformance Int();
      goto LABEL_39;
    }
    char v67 = v96;
    dispatch thunk of BinaryInteger._lowWord.getter();
    v50(v67, a3);
  }
LABEL_40:
  BOOL v74 = v98;
  unint64_t v72 = dispatch thunk of BinaryInteger._lowWord.getter();
  v50(v74, a3);
  unint64_t v75 = v88;
  uint64_t result = specialized static _Int128.&>> infix(_:_:)(v88, v53, 127);
  if ((v72 & 0x8000000000000000) != 0) {
    goto LABEL_59;
  }
  if (v72 < 0x80)
  {
    specialized static FixedWidthInteger._truncatingInit<A>(_:)();
    char v57 = v76;
    unint64_t v55 = v75;
    uint64_t v56 = v53;
    goto LABEL_43;
  }
LABEL_44:
  uint64_t v77 = v97;
  *BOOL v97 = result;
  v77[1] = v70;
  return result;
}

uint64_t protocol witness for static BinaryInteger.>>= infix<A>(_:_:) in conformance _Int128(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v85 = *(char **)(*(void *)(a4 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = MEMORY[0x270FA5388](AssociatedTypeWitness, v7);
  char v83 = (char *)&v78 - v9;
  uint64_t v89 = *(void *)(a3 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v8, v10);
  uint64_t v13 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v11, v14);
  BOOL v81 = (char *)&v78 - v16;
  uint64_t v18 = MEMORY[0x270FA5388](v15, v17);
  uint64_t v87 = (char *)&v78 - v19;
  uint64_t v21 = MEMORY[0x270FA5388](v18, v20);
  uint64_t v23 = (char *)&v78 - v22;
  uint64_t v25 = MEMORY[0x270FA5388](v21, v24);
  char v82 = (char *)&v78 - v26;
  uint64_t v28 = MEMORY[0x270FA5388](v25, v27);
  uint64_t v30 = (char *)&v78 - v29;
  uint64_t v32 = MEMORY[0x270FA5388](v28, v31);
  unint64_t v88 = (char *)&v78 - v33;
  MEMORY[0x270FA5388](v32, v34);
  uint64_t v36 = (char *)&v78 - v35;
  char v37 = dispatch thunk of static BinaryInteger.isSigned.getter();
  char v86 = v23;
  if (v37)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
    {
LABEL_9:
      if (dispatch thunk of BinaryInteger._lowWord.getter() < -128)
      {
LABEL_10:
        unint64_t v40 = -128;
        goto LABEL_49;
      }
      goto LABEL_14;
    }
  }
  else
  {
    char v38 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v39 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v38 & 1) == 0)
    {
      if (v39 >= 64) {
        goto LABEL_14;
      }
      goto LABEL_9;
    }
    if (v39 <= 64)
    {
      BOOL v80 = a1;
      swift_getAssociatedConformanceWitness();
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      char v42 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v43 = v89;
      char v44 = *(void (**)(char *, uint64_t))(v89 + 8);
      v44(v36, a3);
      (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v13, a2, a3);
      if (v42)
      {
        v44(v13, a3);
        unint64_t v40 = -128;
        a1 = v80;
        goto LABEL_49;
      }
      uint64_t v45 = dispatch thunk of BinaryInteger._lowWord.getter();
      v44(v13, a3);
      a1 = v80;
      if (v45 < -128) {
        goto LABEL_10;
      }
      goto LABEL_14;
    }
  }
  unint64_t v40 = -128;
  unint64_t v91 = -128;
  lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  char v41 = dispatch thunk of static Comparable.< infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v89 + 8))(v36, a3);
  if (v41)
  {
LABEL_49:
    unint64_t v70 = *a1;
    uint64_t v71 = a1[1];
    uint64_t result = specialized static _Int128.&>> infix(_:_:)(*a1, v71, 127);
    if ((v40 & 0x8000000000000000) == 0)
    {
      if (v40 < 0x80)
      {
        specialized static FixedWidthInteger._truncatingInit<A>(_:)();
        uint64_t result = specialized static _Int128.&>> infix(_:_:)(v70, v71, v74);
      }
      goto LABEL_52;
    }
    if (v40 > 0xFFFFFFFFFFFFFF80)
    {
      specialized static FixedWidthInteger._truncatingInit<A>(_:)();
      uint64_t result = specialized static _Int128.&<< infix(_:_:)(v70, v71, v77);
LABEL_52:
      *a1 = result;
      a1[1] = v73;
      return result;
    }
LABEL_58:
    uint64_t result = 0;
    unint64_t v73 = 0;
    goto LABEL_52;
  }
LABEL_14:
  char v46 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v47 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if (v46)
  {
    if (v47 > 64) {
      goto LABEL_16;
    }
  }
  else if (v47 >= 64)
  {
LABEL_16:
    unint64_t v40 = 128;
    unint64_t v91 = 128;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v48 = dispatch thunk of static Comparable.< infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v89 + 8))(v36, a3);
    if (v48) {
      goto LABEL_49;
    }
    goto LABEL_21;
  }
  if (dispatch thunk of BinaryInteger._lowWord.getter() > 128)
  {
    unint64_t v40 = 128;
    goto LABEL_49;
  }
LABEL_21:
  uint64_t v49 = v88;
  unint64_t v50 = *(unint64_t **)(v89 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v50)(v88, a2, a3);
  char v51 = dispatch thunk of static BinaryInteger.isSigned.getter();
  BOOL v80 = v50;
  ((void (*)(char *, char *, uint64_t))v50)(v30, v49, a3);
  if ((v51 & 1) == 0)
  {
    uint64_t v59 = v30;
    char v57 = *(void (**)(char *, uint64_t))(v89 + 8);
    v57(v59, a3);
    uint64_t v53 = v87;
    goto LABEL_36;
  }
  uint64_t v52 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v53 = (char *)(v89 + 8);
  uint64_t v54 = *(void (**)(char *, uint64_t))(v89 + 8);
  v54(v30, a3);
  if (v52 <= 64)
  {
    char v57 = v54;
    uint64_t v53 = v87;
    goto LABEL_36;
  }
  unint64_t v55 = v82;
  ((void (*)(char *, char *, uint64_t))v80)(v82, v88, a3);
  unint64_t v91 = 0x8000000000000000;
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    char v85 = v53;
    uint64_t v56 = dispatch thunk of BinaryInteger.bitWidth.getter();
    uint64_t v53 = v87;
    if (v56 < 64) {
      goto LABEL_34;
    }
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    LODWORD(AssociatedTypeWitness) = dispatch thunk of static Comparable.< infix(_:_:)();
    v54(v36, a3);
    char v57 = v54;
    uint64_t v58 = ((uint64_t (*)(char *, uint64_t))v54)(v55, a3);
    if ((AssociatedTypeWitness & 1) == 0) {
      goto LABEL_36;
    }
    goto LABEL_32;
  }
  char v60 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v58 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v60 & 1) == 0) {
    goto LABEL_33;
  }
  if (v58 > 64)
  {
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v61 = dispatch thunk of static Comparable.< infix(_:_:)();
    v54(v36, a3);
    char v57 = v54;
    uint64_t v58 = ((uint64_t (*)(char *, uint64_t))v54)(v55, a3);
    uint64_t v53 = v87;
    if ((v61 & 1) == 0) {
      goto LABEL_36;
    }
LABEL_32:
    __break(1u);
LABEL_33:
    char v85 = v53;
    uint64_t v53 = v87;
    if (v58 >= 64)
    {
LABEL_35:
      char v57 = v54;
      v54(v55, a3);
      goto LABEL_36;
    }
LABEL_34:
    dispatch thunk of BinaryInteger._lowWord.getter();
    goto LABEL_35;
  }
  swift_getAssociatedConformanceWitness();
  uint64_t v79 = v54;
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  char v57 = v79;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  char v75 = dispatch thunk of static Comparable.< infix(_:_:)();
  v57(v36, a3);
  char v76 = v81;
  (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v81, v55, a3);
  uint64_t v53 = v87;
  if ((v75 & 1) == 0)
  {
    dispatch thunk of BinaryInteger._lowWord.getter();
    v57(v76, a3);
LABEL_36:
    uint64_t v62 = v88;
    uint64_t v63 = dispatch thunk of BinaryInteger.bitWidth.getter();
    char v64 = v86;
    ((void (*)(char *, char *, uint64_t))v80)(v86, v62, a3);
    if (v63 < 65)
    {
      uint64_t v67 = dispatch thunk of BinaryInteger.bitWidth.getter();
      v57(v64, a3);
      if (v67 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
        goto LABEL_48;
      }
    }
    else
    {
      v57(v64, a3);
    }
    ((void (*)(char *, char *, uint64_t))v80)(v53, v88, a3);
    unint64_t v91 = 0x7FFFFFFFFFFFFFFFLL;
    char v65 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v66 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v65)
    {
      if (v66 > 64)
      {
        lazy protocol witness table accessor for type Int and conformance Int();
        goto LABEL_47;
      }
    }
    else if (v66 >= 64)
    {
      uint64_t v90 = 0x7FFFFFFFFFFFFFFFLL;
      lazy protocol witness table accessor for type Int and conformance Int();
LABEL_47:
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v68 = dispatch thunk of static Comparable.< infix(_:_:)();
      v57(v36, a3);
      v57(v53, a3);
      if (v68)
      {
        __break(1u);
        goto LABEL_58;
      }
      goto LABEL_48;
    }
    dispatch thunk of BinaryInteger._lowWord.getter();
    v57(v53, a3);
LABEL_48:
    uint64_t v69 = v88;
    unint64_t v40 = dispatch thunk of BinaryInteger._lowWord.getter();
    v57(v69, a3);
    goto LABEL_49;
  }
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v57)(v76, a3);
  __break(1u);
  return result;
}

uint64_t protocol witness for static BinaryInteger.<< infix<A>(_:_:) in conformance _Int128@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v94 = a5;
  uint64_t v91 = *(void *)(*(void *)(a4 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = MEMORY[0x270FA5388](AssociatedTypeWitness, v8);
  uint64_t v89 = (char *)&v83 - v10;
  uint64_t v96 = *(void *)(a3 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v9, v11);
  uint64_t v14 = (char *)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v12, v15);
  uint64_t v87 = (char *)&v83 - v17;
  uint64_t v19 = MEMORY[0x270FA5388](v16, v18);
  uint64_t v93 = (char *)&v83 - v20;
  uint64_t v22 = MEMORY[0x270FA5388](v19, v21);
  int64_t v92 = (char *)&v83 - v23;
  uint64_t v25 = MEMORY[0x270FA5388](v22, v24);
  unint64_t v88 = (char *)&v83 - v26;
  uint64_t v28 = MEMORY[0x270FA5388](v25, v27);
  uint64_t v30 = (char *)&v83 - v29;
  uint64_t v32 = MEMORY[0x270FA5388](v28, v31);
  unint64_t v95 = (char *)&v83 - v33;
  MEMORY[0x270FA5388](v32, v34);
  uint64_t v36 = (char *)&v83 - v35;
  unint64_t v37 = *a1;
  uint64_t v38 = a1[1];
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64) {
      goto LABEL_9;
    }
    goto LABEL_6;
  }
  char v39 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v40 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v39 & 1) == 0)
  {
    if (v40 >= 64) {
      goto LABEL_10;
    }
LABEL_9:
    if (dispatch thunk of BinaryInteger._lowWord.getter() >= -128) {
      goto LABEL_10;
    }
LABEL_38:
    uint64_t result = specialized static _Int128.&>> infix(_:_:)(v37, v38, 127);
    goto LABEL_43;
  }
  if (v40 > 64)
  {
LABEL_6:
    unint64_t v98 = -128;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v41 = dispatch thunk of static Comparable.< infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v96 + 8))(v36, a3);
    if ((v41 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_38;
  }
  unint64_t v85 = v37;
  uint64_t v86 = v38;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  char v63 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v64 = v96;
  char v65 = *(void (**)(char *, uint64_t))(v96 + 8);
  v65(v36, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v14, a2, a3);
  if (v63)
  {
    v65(v14, a3);
    unint64_t v37 = v85;
    uint64_t v38 = v86;
    goto LABEL_38;
  }
  uint64_t v67 = dispatch thunk of BinaryInteger._lowWord.getter();
  v65(v14, a3);
  unint64_t v37 = v85;
  uint64_t v38 = v86;
  if (v67 < -128) {
    goto LABEL_38;
  }
LABEL_10:
  char v42 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v43 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if (v42)
  {
    if (v43 > 64) {
      goto LABEL_12;
    }
  }
  else if (v43 >= 64)
  {
LABEL_12:
    unint64_t v98 = 128;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v44 = dispatch thunk of static Comparable.< infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v96 + 8))(v36, a3);
    if ((v44 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_20:
    specialized static _Int128.&>> infix(_:_:)(v37, v38, 127);
LABEL_21:
    uint64_t result = 0;
    uint64_t v56 = 0;
    goto LABEL_43;
  }
  if (dispatch thunk of BinaryInteger._lowWord.getter() > 128) {
    goto LABEL_20;
  }
LABEL_13:
  char v83 = v36;
  unint64_t v85 = v37;
  uint64_t v86 = v38;
  uint64_t v45 = v95;
  uint64_t v46 = v96;
  uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t))(v96 + 16);
  v47(v95, a2, a3);
  char v48 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v84 = (void (*)(char *, char *, uint64_t))v47;
  v47(v30, (uint64_t)v45, a3);
  if ((v48 & 1) == 0)
  {
    unint64_t v50 = *(void (**)(char *, uint64_t))(v46 + 8);
    v50(v30, a3);
    goto LABEL_23;
  }
  uint64_t v49 = dispatch thunk of BinaryInteger.bitWidth.getter();
  unint64_t v50 = *(void (**)(char *, uint64_t))(v46 + 8);
  v50(v30, a3);
  if (v49 <= 64)
  {
LABEL_23:
    uint64_t v53 = v86;
    uint64_t v54 = v83;
    goto LABEL_24;
  }
  char v51 = v88;
  v84(v88, v95, a3);
  unint64_t v98 = 0x8000000000000000;
  char v52 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v53 = v86;
  uint64_t v54 = v83;
  if ((v52 & 1) == 0)
  {
    char v75 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v76 = dispatch thunk of BinaryInteger.bitWidth.getter();
    BOOL v78 = __OFSUB__(v76, 64);
    BOOL v77 = v76 - 64 < 0;
    if ((v75 & 1) == 0) {
      goto LABEL_49;
    }
    if (v76 <= 64)
    {
      swift_getAssociatedConformanceWitness();
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      BOOL v81 = v88;
      unint64_t v69 = dispatch thunk of static Comparable.< infix(_:_:)();
      v50(v54, a3);
      unint64_t v70 = v87;
      (*(void (**)(char *, char *, uint64_t))(v96 + 32))(v87, v81, a3);
      if (v69) {
        goto LABEL_57;
      }
      dispatch thunk of BinaryInteger._lowWord.getter();
      BOOL v80 = v70;
      goto LABEL_53;
    }
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v51 = v88;
LABEL_47:
    char v79 = dispatch thunk of static Comparable.< infix(_:_:)();
    v50(v54, a3);
    v50(v51, a3);
    if ((v79 & 1) == 0) {
      goto LABEL_24;
    }
    __break(1u);
LABEL_49:
    char v51 = v88;
    if (v77 == v78) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
  {
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    goto LABEL_47;
  }
LABEL_51:
  dispatch thunk of BinaryInteger._lowWord.getter();
LABEL_52:
  BOOL v80 = v51;
LABEL_53:
  v50(v80, a3);
LABEL_24:
  char v57 = v95;
  uint64_t v58 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v59 = v92;
  v84(v92, v57, a3);
  if (v58 >= 65)
  {
    v50(v59, a3);
    goto LABEL_26;
  }
  uint64_t v62 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v50(v59, a3);
  if (v62 == 64 && (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
  {
LABEL_26:
    v84(v93, v95, a3);
    unint64_t v98 = 0x7FFFFFFFFFFFFFFFLL;
    char v60 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v61 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v60)
    {
      if (v61 > 64)
      {
        lazy protocol witness table accessor for type Int and conformance Int();
LABEL_39:
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        char v68 = v93;
        unint64_t v69 = dispatch thunk of static Comparable.< infix(_:_:)();
        unint64_t v70 = (char *)(v96 + 8);
        v50(v54, a3);
        v50(v68, a3);
        if ((v69 & 1) == 0) {
          goto LABEL_40;
        }
        __break(1u);
LABEL_57:
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v50)(v70, a3);
        __break(1u);
        goto LABEL_58;
      }
    }
    else if (v61 >= 64)
    {
      uint64_t v97 = 0x7FFFFFFFFFFFFFFFLL;
      lazy protocol witness table accessor for type Int and conformance Int();
      goto LABEL_39;
    }
    uint64_t v66 = v93;
    dispatch thunk of BinaryInteger._lowWord.getter();
    v50(v66, a3);
  }
LABEL_40:
  uint64_t v71 = v95;
  unint64_t v69 = dispatch thunk of BinaryInteger._lowWord.getter();
  v50(v71, a3);
  uint64_t v72 = v85;
  uint64_t result = specialized static _Int128.&>> infix(_:_:)(v85, v53, 127);
  if ((v69 & 0x8000000000000000) == 0)
  {
    if (v69 < 0x80)
    {
      specialized static FixedWidthInteger._truncatingInit<A>(_:)();
      uint64_t result = specialized static _Int128.&<< infix(_:_:)(v72, v53, v73);
      goto LABEL_43;
    }
    goto LABEL_21;
  }
LABEL_58:
  if (v69 > 0xFFFFFFFFFFFFFF80)
  {
    specialized static FixedWidthInteger._truncatingInit<A>(_:)();
    uint64_t result = specialized static _Int128.&>> infix(_:_:)(v85, v53, v82);
  }
LABEL_43:
  char v74 = v94;
  *uint64_t v94 = result;
  v74[1] = v56;
  return result;
}

uint64_t protocol witness for static BinaryInteger.<<= infix<A>(_:_:) in conformance _Int128(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v91 = *(void *)(*(void *)(a4 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = MEMORY[0x270FA5388](AssociatedTypeWitness, v7);
  uint64_t v89 = (char *)v85 - v9;
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v8, v11);
  uint64_t v14 = (char *)v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v12, v15);
  uint64_t v87 = (char *)v85 - v17;
  uint64_t v19 = MEMORY[0x270FA5388](v16, v18);
  int64_t v92 = (char *)v85 - v20;
  uint64_t v22 = MEMORY[0x270FA5388](v19, v21);
  uint64_t v93 = (char *)v85 - v23;
  uint64_t v25 = MEMORY[0x270FA5388](v22, v24);
  unint64_t v88 = (char *)v85 - v26;
  uint64_t v28 = MEMORY[0x270FA5388](v25, v27);
  uint64_t v30 = (char *)v85 - v29;
  uint64_t v32 = MEMORY[0x270FA5388](v28, v31);
  uint64_t v34 = (char *)v85 - v33;
  MEMORY[0x270FA5388](v32, v35);
  unint64_t v37 = (char *)v85 - v36;
  char v38 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v94 = a1;
  uint64_t v95 = v10;
  if ((v38 & 1) == 0)
  {
    char v41 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v42 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v41)
    {
      if (v42 > 64)
      {
        unint64_t v39 = -128;
        int64_t v97 = -128;
        lazy protocol witness table accessor for type Int and conformance Int();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        char v43 = dispatch thunk of static Comparable.< infix(_:_:)();
        (*(void (**)(char *, uint64_t))(v95 + 8))(v37, a3);
        if (v43) {
          goto LABEL_44;
        }
        goto LABEL_11;
      }
      uint64_t v86 = v34;
      swift_getAssociatedConformanceWitness();
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      char v66 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v67 = v95;
      char v68 = *(void (**)(char *, uint64_t))(v95 + 8);
      v68(v37, a3);
      (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v14, a2, a3);
      if (v66)
      {
        v68(v14, a3);
      }
      else
      {
        uint64_t v69 = dispatch thunk of BinaryInteger._lowWord.getter();
        v68(v14, a3);
        uint64_t v34 = v86;
        if (v69 >= -128) {
          goto LABEL_11;
        }
      }
LABEL_41:
      unint64_t v39 = -128;
      goto LABEL_44;
    }
    if (v42 >= 64) {
      goto LABEL_11;
    }
LABEL_10:
    if (dispatch thunk of BinaryInteger._lowWord.getter() >= -128) {
      goto LABEL_11;
    }
    goto LABEL_41;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64) {
    goto LABEL_10;
  }
  unint64_t v39 = -128;
  int64_t v97 = -128;
  lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  char v40 = dispatch thunk of static Comparable.< infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v37, a3);
  if (v40) {
    goto LABEL_44;
  }
LABEL_11:
  char v44 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v45 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if (v44)
  {
    if (v45 > 64) {
      goto LABEL_13;
    }
LABEL_16:
    uint64_t v48 = dispatch thunk of BinaryInteger._lowWord.getter();
    uint64_t v47 = v95;
    if (v48 <= 128) {
      goto LABEL_18;
    }
    unint64_t v39 = 128;
    goto LABEL_44;
  }
  if (v45 < 64) {
    goto LABEL_16;
  }
LABEL_13:
  unint64_t v39 = 128;
  int64_t v97 = 128;
  lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  char v46 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v47 = v95;
  (*(void (**)(char *, uint64_t))(v95 + 8))(v37, a3);
  if ((v46 & 1) == 0)
  {
LABEL_18:
    uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t))(v47 + 16);
    v49(v34, a2, a3);
    char v50 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v49(v30, (uint64_t)v34, a3);
    if ((v50 & 1) == 0)
    {
      uint64_t v53 = *(void (**)(char *, uint64_t))(v47 + 8);
      uint64_t v59 = v30;
      uint64_t v60 = a3;
LABEL_25:
      v53(v59, v60);
      goto LABEL_26;
    }
    uint64_t v51 = dispatch thunk of BinaryInteger.bitWidth.getter();
    uint64_t v54 = *(void (**)(char *, uint64_t))(v47 + 8);
    uint64_t v52 = v47 + 8;
    uint64_t v53 = v54;
    v54(v30, a3);
    if (v51 <= 64)
    {
LABEL_26:
      char v57 = v93;
      goto LABEL_27;
    }
    v85[1] = v52;
    uint64_t v55 = (uint64_t)v88;
    v49(v88, (uint64_t)v34, a3);
    int64_t v97 = 0x8000000000000000;
    if (dispatch thunk of static BinaryInteger.isSigned.getter())
    {
      uint64_t v56 = dispatch thunk of BinaryInteger.bitWidth.getter();
      char v57 = v93;
      if (v56 < 64)
      {
        uint64_t v58 = dispatch thunk of BinaryInteger._lowWord.getter();
        v53((char *)v55, a3);
        if (v58 >= v97) {
          goto LABEL_27;
        }
        goto LABEL_60;
      }
      lazy protocol witness table accessor for type Int and conformance Int();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      LODWORD(v91) = dispatch thunk of static Comparable.< infix(_:_:)();
      v53(v37, a3);
      v53((char *)v55, a3);
      if (v91)
      {
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
    }
    else
    {
      char v77 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v78 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if (v77)
      {
        if (v78 > 64)
        {
          lazy protocol witness table accessor for type Int and conformance Int();
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          char v79 = dispatch thunk of static Comparable.< infix(_:_:)();
          v53(v37, a3);
          v53((char *)v55, a3);
          char v57 = v93;
          if (v79) {
            goto LABEL_60;
          }
          goto LABEL_27;
        }
        uint64_t v86 = v34;
        swift_getAssociatedConformanceWitness();
        dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        char v82 = dispatch thunk of static Comparable.< infix(_:_:)();
        v53(v37, a3);
        uint64_t v70 = (uint64_t)v87;
        (*(void (**)(char *, uint64_t, uint64_t))(v95 + 32))(v87, v55, a3);
        if (v82) {
          goto LABEL_66;
        }
        int64_t v83 = v97;
        uint64_t v55 = dispatch thunk of BinaryInteger._lowWord.getter();
        v53((char *)v70, a3);
        BOOL v81 = v55 < v83;
        uint64_t v34 = v86;
      }
      else
      {
        if (v78 >= 64)
        {
LABEL_61:
          uint64_t v59 = (char *)v55;
          uint64_t v60 = a3;
          goto LABEL_25;
        }
        uint64_t v80 = dispatch thunk of BinaryInteger._lowWord.getter();
        v53((char *)v55, a3);
        BOOL v81 = v80 < v97;
      }
      char v57 = v93;
      if (v81) {
        goto LABEL_60;
      }
    }
LABEL_27:
    uint64_t v61 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v49(v57, (uint64_t)v34, a3);
    if (v61 < 65)
    {
      uint64_t v65 = dispatch thunk of BinaryInteger.bitWidth.getter();
      v53(v57, a3);
      if (v65 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
        goto LABEL_43;
      }
    }
    else
    {
      v53(v57, a3);
    }
    uint64_t v62 = v92;
    v49(v92, (uint64_t)v34, a3);
    int64_t v97 = 0x7FFFFFFFFFFFFFFFLL;
    char v63 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v64 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v63)
    {
      if (v64 > 64)
      {
        lazy protocol witness table accessor for type Int and conformance Int();
LABEL_42:
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        uint64_t v70 = dispatch thunk of static Comparable.< infix(_:_:)();
        v53(v37, a3);
        v53(v62, a3);
        if ((v70 & 1) == 0) {
          goto LABEL_43;
        }
        __break(1u);
LABEL_66:
        uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v53)(v70, a3);
        __break(1u);
        return result;
      }
    }
    else if (v64 >= 64)
    {
      uint64_t v96 = 0x7FFFFFFFFFFFFFFFLL;
      lazy protocol witness table accessor for type Int and conformance Int();
      goto LABEL_42;
    }
    dispatch thunk of BinaryInteger._lowWord.getter();
    v53(v62, a3);
LABEL_43:
    unint64_t v39 = dispatch thunk of BinaryInteger._lowWord.getter();
    v53(v34, a3);
  }
LABEL_44:
  uint64_t v71 = v94;
  unint64_t v72 = *v94;
  uint64_t v73 = v94[1];
  uint64_t result = specialized static _Int128.&>> infix(_:_:)(*v94, v73, 127);
  if ((v39 & 0x8000000000000000) != 0)
  {
    if (v39 > 0xFFFFFFFFFFFFFF80)
    {
      specialized static FixedWidthInteger._truncatingInit<A>(_:)();
      uint64_t result = specialized static _Int128.&>> infix(_:_:)(v72, v73, v84);
    }
  }
  else if (v39 >= 0x80)
  {
    uint64_t result = 0;
    uint64_t v75 = 0;
  }
  else
  {
    specialized static FixedWidthInteger._truncatingInit<A>(_:)();
    uint64_t result = specialized static _Int128.&<< infix(_:_:)(v72, v73, v76);
  }
  *uint64_t v71 = result;
  v71[1] = v75;
  return result;
}

uint64_t protocol witness for BinaryInteger.quotientAndRemainder(dividingBy:) in conformance _Int128(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t result = _Int128.quotientAndRemainder(dividingBy:)(*(void *)a3, *(void *)(a3 + 8), *(void *)v3, *(void *)(v3 + 8));
  *a1 = result;
  a1[1] = v7;
  *a2 = v8;
  a2[1] = v9;
  return result;
}

BOOL protocol witness for BinaryInteger.isMultiple(of:) in conformance _Int128(uint64_t a1)
{
  return specialized SignedInteger<>.isMultiple(of:)(*(void *)a1, *(void *)(a1 + 8), *(void *)v1, *(void *)(v1 + 8));
}

BOOL protocol witness for BinaryInteger.signum() in conformance _Int128@<W0>(BOOL *a1@<X8>)
{
  BOOL result = specialized BinaryInteger.signum()(*(void *)v1, *(void *)(v1 + 8));
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t protocol witness for LosslessStringConvertible.init(_:) in conformance _Int128@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = HIBYTE(a2) & 0xF;
  uint64_t v6 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v7)
  {
    BOOL result = swift_bridgeObjectRelease();
    char v44 = 0;
    uint64_t v45 = 0;
    char v43 = 1;
LABEL_61:
    *(void *)a3 = v44;
    *(void *)(a3 + 8) = v45;
    *(unsigned char *)(a3 + 16) = v43 & 1;
    return result;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = specialized _parseInteger<A, B>(ascii:radix:)(result, a2, 10);
    uint64_t v11 = v46;
    char v13 = v47;
    goto LABEL_55;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0) {
      uint64_t v8 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    uint64_t v9 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v8, v6, 10);
    uint64_t v11 = v10;
    char v13 = v12 & 1;
    goto LABEL_55;
  }
  v48[0] = result;
  v48[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v14 = result >> 8;
  if (result == 43)
  {
    if (!v5) {
      goto LABEL_67;
    }
    if (v5 == 1 || (BYTE1(result) - 48) > 9u)
    {
LABEL_41:
      uint64_t v9 = 0;
      uint64_t v11 = 0;
      char v13 = 1;
LABEL_55:
      BOOL result = swift_bridgeObjectRelease();
      char v43 = v13 & 1;
      if (v13) {
        char v44 = 0;
      }
      else {
        char v44 = v9;
      }
      if (v13) {
        uint64_t v45 = 0;
      }
      else {
        uint64_t v45 = v11;
      }
      goto LABEL_61;
    }
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v25 = (unsigned __int8 *)v48 + 2;
    uint64_t v26 = v5 - 2;
    char v13 = 1;
    while (1)
    {
      unsigned __int8 v27 = v14 - 48;
      unint64_t v28 = _Int128.multipliedReportingOverflow(by:)(0xAuLL, 0, v15, v16);
      int v31 = v30;
      unint64_t v15 = v28 + v27;
      BOOL v32 = __CFADD__(v28, v27);
      if (v29 == 0x7FFFFFFFFFFFFFFFLL)
      {
        if ((v32 | v31)) {
          goto LABEL_41;
        }
        uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v16 = v29;
        if (v32)
        {
          if (v31) {
            goto LABEL_41;
          }
          uint64_t v16 = v29 + 1;
        }
        else if (v31)
        {
          goto LABEL_41;
        }
      }
      if (!v26) {
        break;
      }
      uint64_t v9 = 0;
      uint64_t v11 = 0;
      int v33 = *v25++;
      LOBYTE(v14) = v33;
      --v26;
      if ((v33 - 48) >= 0xA) {
        goto LABEL_55;
      }
    }
LABEL_62:
    char v13 = 0;
    uint64_t v9 = (unsigned __int8 *)v15;
    uint64_t v11 = v16;
    goto LABEL_55;
  }
  if (result != 45)
  {
    if (!v5 || (result - 48) > 9u) {
      goto LABEL_41;
    }
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v34 = v5 - 1;
    uint64_t v35 = (unsigned __int8 *)v48 + 1;
    char v13 = 1;
    while (1)
    {
      unsigned __int8 v36 = result - 48;
      unint64_t v37 = _Int128.multipliedReportingOverflow(by:)(0xAuLL, 0, v15, v16);
      int v40 = v39;
      unint64_t v15 = v37 + v36;
      BOOL v41 = __CFADD__(v37, v36);
      if (v38 == 0x7FFFFFFFFFFFFFFFLL)
      {
        if ((v41 | v40)) {
          goto LABEL_41;
        }
        uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v16 = v38;
        if (v41)
        {
          if (v40) {
            goto LABEL_41;
          }
          uint64_t v16 = v38 + 1;
        }
        else if (v40)
        {
          goto LABEL_41;
        }
      }
      if (!v34) {
        goto LABEL_62;
      }
      uint64_t v9 = 0;
      uint64_t v11 = 0;
      int v42 = *v35++;
      LOBYTE(result) = v42;
      --v34;
      if ((v42 - 48) >= 0xA) {
        goto LABEL_55;
      }
    }
  }
  if (v5)
  {
    if (v5 != 1 && (BYTE1(result) - 48) <= 9u)
    {
      unint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = (unsigned __int8 *)v48 + 2;
      uint64_t v18 = v5 - 2;
      char v13 = 1;
      while (1)
      {
        unsigned __int8 v19 = v14 - 48;
        unint64_t v20 = _Int128.multipliedReportingOverflow(by:)(0xAuLL, 0, v15, v16);
        char v23 = v22;
        unint64_t v15 = v20 - v19;
        if (v21 == 0x8000000000000000) {
          v23 |= v20 < v19;
        }
        if (v23) {
          break;
        }
        uint64_t v16 = (__PAIR128__(v21, v20) - v19) >> 64;
        if (!v18) {
          goto LABEL_62;
        }
        uint64_t v9 = 0;
        uint64_t v11 = 0;
        int v24 = *v17++;
        LOBYTE(v14) = v24;
        --v18;
        if ((v24 - 48) >= 0xA) {
          goto LABEL_55;
        }
      }
    }
    goto LABEL_41;
  }
  __break(1u);
LABEL_67:
  __break(1u);
  return result;
}

unint64_t *protocol witness for Strideable.distance(to:) in conformance _Int128@<X0>(unint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v3 = *result;
  uint64_t v4 = result[1];
  unint64_t v5 = *v2;
  uint64_t v6 = v2[1];
  if (!v6)
  {
    if (v4 < 0)
    {
      uint64_t v6 = 0;
LABEL_9:
      int v7 = 0;
LABEL_10:
      BOOL v8 = v3 == 0;
      unint64_t v3 = -(uint64_t)v3;
      uint64_t v4 = -(v4 + !v8);
      goto LABEL_38;
    }
    goto LABEL_12;
  }
  if (!v4)
  {
    if (v6 < 0)
    {
      uint64_t v4 = 0;
      BOOL v8 = v5 == 0;
      unint64_t v5 = -(uint64_t)v5;
      if (v8) {
        uint64_t v6 = -v6;
      }
      else {
        uint64_t v6 = ~v6;
      }
      int v7 = 1;
      goto LABEL_38;
    }
LABEL_12:
    BOOL v9 = __OFSUB__(v4, v6);
    uint64_t v10 = v4 - v6;
    char v11 = v9;
    BOOL v8 = v3 >= v5;
    uint64_t v12 = v3 - v5;
    if (v8)
    {
      if ((v11 & 1) == 0)
      {
LABEL_22:
        LOBYTE(v5) = v12 >= 0;
        if (v10 != -1) {
          LOBYTE(v5) = v10 < -1;
        }
        if ((v5 & 1) == 0)
        {
          LOBYTE(v5) = v12 < 0;
          BOOL v13 = v10 == 0;
          LODWORD(v10) = v10 > 0;
          if (v13) {
            uint64_t v10 = v12 < 0;
          }
          else {
            uint64_t v10 = v10;
          }
          if ((v10 & 1) == 0)
          {
            *a2 = v12;
            return result;
          }
          goto LABEL_50;
        }
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
    }
    else
    {
      if (v10 == 0x8000000000000000) {
        LOBYTE(v5) = 1;
      }
      else {
        LOBYTE(v5) = v11;
      }
      if ((v5 & 1) == 0)
      {
        --v10;
        goto LABEL_22;
      }
    }
    __break(1u);
    goto LABEL_49;
  }
  if (v4 < 0 == v6 < 0) {
    goto LABEL_12;
  }
  if ((v6 & 0x8000000000000000) == 0)
  {
    if ((v4 & 0x8000000000000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_9;
  }
  BOOL v8 = v5 == 0;
  unint64_t v5 = -(uint64_t)v5;
  if (v8) {
    uint64_t v6 = -v6;
  }
  else {
    uint64_t v6 = ~v6;
  }
  int v7 = 1;
  if (v4 < 0) {
    goto LABEL_10;
  }
LABEL_38:
  BOOL v8 = __CFADD__(v5, v3);
  uint64_t v14 = v5 + v3;
  LODWORD(v5) = v8;
  BOOL v8 = __CFADD__(v6, v4);
  uint64_t v10 = v6 + v4;
  if (v8) {
    goto LABEL_52;
  }
  if (v5) {
    goto LABEL_54;
  }
  if (v10)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if (v14 < 0)
  {
LABEL_51:
    __break(1u);
LABEL_52:
    if (v5) {
      goto LABEL_56;
    }
    __break(1u);
LABEL_54:
    if (v10 != -1) {
      goto LABEL_55;
    }
LABEL_56:
    __break(1u);
    return result;
  }
  if (!v7) {
    uint64_t v14 = -v14;
  }
  *a2 = v14;
  return result;
}

void protocol witness for Strideable.advanced(by:) in conformance _Int128(void *a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  specialized static FixedWidthInteger._truncatingInit<A>(_:)();
  BOOL v7 = __CFADD__(v4, v5);
  uint64_t v8 = v3 + v6;
  if (__OFADD__(v3, v6) || (v7 ? (BOOL v9 = v8 == 0x7FFFFFFFFFFFFFFFLL) : (BOOL v9 = 0), v9))
  {
    __break(1u);
  }
  else
  {
    *a1 = v4 + v5;
    a1[1] = v8 + v7;
  }
}

uint64_t protocol witness for static Strideable._step(after:from:by:) in conformance _Int128(uint64_t a1, uint64_t a2, char a3, void *a4, void *a5, void *a6, uint64_t a7, uint64_t a8)
{
  return protocol witness for static Strideable._step(after:from:by:) in conformance _UInt128(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void))specialized static Strideable<>._step(after:from:by:));
}

uint64_t protocol witness for static Strideable._step(after:from:by:) in conformance _UInt128(uint64_t a1, uint64_t a2, char a3, void *a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, void, void, void, void, void, void))
{
  return a9(a1, a2, a3 & 1, *a4, a4[1], *a5, a5[1], *a6);
}

unint64_t specialized static Strideable<>._step(after:from:by:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a4 + a8;
  BOOL v9 = __CFADD__(a4, a8);
  uint64_t v10 = a5 + (a8 >> 63);
  if (__OFADD__(a5, a8 >> 63)) {
    goto LABEL_6;
  }
  if (v10 != 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v12 = 0;
    uint64_t v11 = v10 + v9;
    goto LABEL_11;
  }
  if (v9)
  {
LABEL_6:
    uint64_t v8 = ~a8 >> 63;
    uint64_t v11 = (a8 >> 63) ^ 0x7FFFFFFFFFFFFFFFLL;
    unint64_t v12 = 0x8000000000000000;
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
LABEL_11:
  *a1 = v8;
  a1[1] = v11;
  return v12;
}

uint64_t specialized _wideDivide32<A>(_:by:)(uint64_t result, void *a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  unint64_t v11 = a3;
  BOOL v13 = (void *)result;
  if (a3 == a6)
  {
    BOOL result = -1;
    goto LABEL_6;
  }
  if (!a6)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (a3 >= a6)
  {
LABEL_27:
    __break(1u);
    return result;
  }
  BOOL result = __udivti3();
LABEL_6:
  unint64_t v14 = result * a7;
  unsigned long long v15 = (((unint64_t)result * (unsigned __int128)a7) >> 64) + a6 * (unsigned __int128)(unint64_t)result;
  BOOL v16 = v11 >= *((void *)&v15 + 1);
  if (v11 != *((void *)&v15 + 1)) {
    goto LABEL_13;
  }
LABEL_10:
  BOOL v16 = a4 >= (unint64_t)v15;
  if (a4 != (void)v15)
  {
    while (1)
    {
      while (1)
      {
LABEL_13:
        if (v16) {
          goto LABEL_25;
        }
LABEL_14:
        BOOL v17 = __CFADD__(a5, a7);
        BOOL v16 = __CFADD__(a4, a6);
        a4 += a6;
        if (!v16) {
          break;
        }
        if (v17) {
          goto LABEL_22;
        }
LABEL_23:
        ++v11;
        --result;
        a5 += a7;
        BOOL v16 = v11 >= *((void *)&v15 + 1);
        if (v11 == *((void *)&v15 + 1)) {
          goto LABEL_10;
        }
      }
      if (a4 == -1)
      {
        if (!v17)
        {
          a4 = -1;
          goto LABEL_9;
        }
LABEL_22:
        ++a4;
        goto LABEL_23;
      }
      a4 += v17;
LABEL_9:
      a5 += a7;
      --result;
      BOOL v16 = v11 >= *((void *)&v15 + 1);
      if (v11 == *((void *)&v15 + 1)) {
        goto LABEL_10;
      }
    }
  }
  if (a5 < v14) {
    goto LABEL_14;
  }
  a4 = v15;
LABEL_25:
  *BOOL v13 = a4 - v15 - *((void *)&v15 + 1);
  *a2 = a5 - v14;
  return result;
}

uint64_t *protocol witness for static SignedNumeric.- prefix(_:) in conformance _Int128@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  BOOL v4 = __OFSUB__(0, v2);
  uint64_t v5 = -v2;
  char v6 = v4;
  BOOL v7 = v3 == 0;
  uint64_t v8 = -v3;
  if (v7)
  {
    if ((v6 & 1) == 0)
    {
      *a2 = v8;
      a2[1] = v5;
      return result;
    }
  }
  else
  {
    if (v5 == 0x8000000000000000) {
      char v6 = 1;
    }
    if ((v6 & 1) == 0)
    {
      *a2 = v8;
      a2[1] = v5 - 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

void protocol witness for SignedNumeric.negate() in conformance _Int128()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  BOOL v3 = __OFSUB__(0, v1);
  uint64_t v4 = -v1;
  char v5 = v3;
  BOOL v6 = v2 == 0;
  uint64_t v7 = -v2;
  if (v6)
  {
    if ((v5 & 1) == 0)
    {
      uint64_t *v0 = v7;
      v0[1] = v4;
      return;
    }
  }
  else
  {
    if (v4 == 0x8000000000000000) {
      char v5 = 1;
    }
    if ((v5 & 1) == 0)
    {
      uint64_t *v0 = v7;
      v0[1] = v4 - 1;
      return;
    }
  }
  __break(1u);
}

uint64_t protocol witness for static SignedInteger._maskingAdd(_:_:) in conformance _Int128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = lazy protocol witness table accessor for type _Int128 and conformance _Int128();

  return MEMORY[0x270F9DB88](a1, a2, a3, v8, a4);
}

uint64_t protocol witness for static SignedInteger._maskingSubtract(_:_:) in conformance _Int128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = lazy protocol witness table accessor for type _Int128 and conformance _Int128();

  return MEMORY[0x270F9DB90](a1, a2, a3, v8, a4);
}

uint64_t _Int128.dividedBy1e18()(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = _Int128.multipliedFullWidth(by:)(&v10, 0x73AFF322E62439FDuLL, 0x9392EE8E921D5D0, a1, a2);
  *((void *)&v6 + 1) = v4;
  *(void *)&long long v6 = v3;
  uint64_t v5 = v6 >> 55;
  uint64_t v7 = v5 + (a2 >> 63);
  if (__CFADD__(v5, a2 >> 63)) {
    uint64_t v8 = (v4 >> 55) + 1;
  }
  else {
    uint64_t v8 = v4 >> 55;
  }
  _Int128.multipliedReportingOverflow(by:)(v5 + (a2 >> 63), v8, 0xDE0B6B3A7640000uLL, 0);
  return v7;
}

uint64_t _Int128.dividedBy1e15()(unint64_t a1, unint64_t a2)
{
  uint64_t v4 = _Int128.multipliedFullWidth(by:)(&v10, 0xF9D37014BF60A11uLL, 0x901D7CF73AB0ACD9, a1, a2);
  uint64_t v6 = (__int128)(__PAIR128__(v5, v4) + __PAIR128__(a2, a1)) >> 49;
  uint64_t v7 = v6 + (a2 >> 63);
  if (__CFADD__(v6, a2 >> 63)) {
    uint64_t v8 = ((uint64_t)((__PAIR128__(v5, v4) + __PAIR128__(a2, a1)) >> 64) >> 49) + 1;
  }
  else {
    uint64_t v8 = (uint64_t)((__PAIR128__(v5, v4) + __PAIR128__(a2, a1)) >> 64) >> 49;
  }
  _Int128.multipliedReportingOverflow(by:)(v6 + (a2 >> 63), v8, 0x38D7EA4C68000uLL, 0);
  return v7;
}

uint64_t _Int128.dividedBy1e12()(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = _Int128.multipliedFullWidth(by:)(&v10, 0xFE4FE1EDD10B9175, 0x232F33025BD42232, a1, a2);
  *((void *)&v6 + 1) = v4;
  *(void *)&long long v6 = v3;
  uint64_t v5 = v6 >> 37;
  uint64_t v7 = v5 + (a2 >> 63);
  if (__CFADD__(v5, a2 >> 63)) {
    uint64_t v8 = (v4 >> 37) + 1;
  }
  else {
    uint64_t v8 = v4 >> 37;
  }
  _Int128.multipliedReportingOverflow(by:)(v5 + (a2 >> 63), v8, 0xE8D4A51000uLL, 0);
  return v7;
}

uint64_t _Int128.dividedBy1e9()(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = _Int128.multipliedFullWidth(by:)(&v10, 0x98B405447C4A9819, 0x44B82FA09B5A52CBLL, a1, a2);
  *((void *)&v6 + 1) = v4;
  *(void *)&long long v6 = v3;
  uint64_t v5 = v6 >> 28;
  uint64_t v7 = v5 + (a2 >> 63);
  if (__CFADD__(v5, a2 >> 63)) {
    uint64_t v8 = (v4 >> 28) + 1;
  }
  else {
    uint64_t v8 = v4 >> 28;
  }
  _Int128.multipliedReportingOverflow(by:)(v5 + (a2 >> 63), v8, 0x3B9ACA00uLL, 0);
  return v7;
}

uint64_t _Int128.dividedBy1e6()(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = _Int128.multipliedFullWidth(by:)(&v10, 0x5A63F9A49C2C1B11uLL, 0x8637BD05AF6C69BLL, a1, a2);
  *((void *)&v6 + 1) = v4;
  *(void *)&long long v6 = v3;
  uint64_t v5 = v6 >> 15;
  uint64_t v7 = v5 + (a2 >> 63);
  if (__CFADD__(v5, a2 >> 63)) {
    uint64_t v8 = (v4 >> 15) + 1;
  }
  else {
    uint64_t v8 = v4 >> 15;
  }
  _Int128.multipliedReportingOverflow(by:)(v5 + (a2 >> 63), v8, 0xF4240uLL, 0);
  return v7;
}

uint64_t _Int128.dividedBy1e3()(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = _Int128.multipliedFullWidth(by:)(&v10, 0xB22D0E5604189375, 0x4189374BC6A7EF9DLL, a1, a2);
  *((void *)&v6 + 1) = v4;
  *(void *)&long long v6 = v3;
  uint64_t v5 = v6 >> 8;
  uint64_t v7 = v5 + (a2 >> 63);
  if (__CFADD__(v5, a2 >> 63)) {
    uint64_t v8 = (v4 >> 8) + 1;
  }
  else {
    uint64_t v8 = v4 >> 8;
  }
  _Int128.multipliedReportingOverflow(by:)(v5 + (a2 >> 63), v8, 0x3E8uLL, 0);
  return v7;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    goto LABEL_10;
  }
  if (!a3)
  {
    uint64_t v5 = 0;
    goto LABEL_9;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    *a2 = a4;
    if (a3 == 1)
    {
      uint64_t v5 = 1;
LABEL_9:
      uint64_t v6 = a3;
      goto LABEL_10;
    }
    a2[1] = a5;
    uint64_t v5 = 2;
    uint64_t v6 = 2;
    if (a3 == 2) {
      goto LABEL_9;
    }
LABEL_10:
    *BOOL result = a4;
    result[1] = a5;
    result[2] = v5;
    return (void *)v6;
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;

  if (!a2)
  {
    uint64_t v5 = 0;
    a3 = 0;
LABEL_9:
    *BOOL result = a4;
    result[1] = a5;
    result[2] = v5;
    return (void *)a3;
  }
  if (!a3)
  {
    uint64_t v5 = 0;
    goto LABEL_9;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = 1;
    *a2 = a4;
    if (a3 != 1)
    {
      uint64_t v5 = 2;
      a2[1] = a5;
      if (a3 != 2)
      {
        uint64_t v5 = 2;
        a3 = 2;
      }
    }
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t specialized _parseInteger<A, B>(ascii:radix:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  swift_bridgeObjectRetain();
  uint64_t v7 = String.init<A>(_:)();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v14 = v7;
    uint64_t v15 = v8 & 0xFFFFFFFFFFFFFFLL;
    BOOL v9 = &v14;
    goto LABEL_7;
  }
  uint64_t v7 = static String._copying(_:)();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    BOOL v9 = (void *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    BOOL v9 = (void *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)((uint64_t)v9, v10, a3, a4);
  return swift_bridgeObjectRelease();
}

unsigned __int8 *specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = static String._copying(_:)();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  unint64_t v11 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a2;
  uint64_t v5 = (unsigned __int8 *)result;
  int v7 = *(unsigned __int8 *)result;
  if (v7 == 43)
  {
    uint64_t v12 = a2 - 1;
    if (a2 < 1) {
      goto LABEL_145;
    }
    if (a2 != 1)
    {
      if (a3 < 11)
      {
        unsigned __int8 v14 = a3 + 48;
        BOOL v44 = a3 >= 0;
        if (a3 >= 0)
        {
          int v15 = 1;
        }
        else
        {
          a3 = ~a3;
          int v15 = 0;
        }
        if (v44) {
          unint64_t v13 = 0;
        }
        else {
          unint64_t v13 = -1;
        }
        unsigned __int8 v56 = 97;
        unsigned __int8 v59 = 65;
      }
      else
      {
        unint64_t v13 = 0;
        unsigned __int8 v56 = a3 + 87;
        unsigned __int8 v59 = a3 + 55;
        unsigned __int8 v14 = 58;
        int v15 = 1;
      }
      unint64_t v20 = 0;
      unint64_t v21 = 0;
      if (result)
      {
        uint64_t v45 = (unsigned __int8 *)(result + 1);
        unint64_t v46 = v13 ^ a3;
        do
        {
          unsigned int v47 = *v45;
          BOOL result = v47 - 48;
          if (v47 < 0x30 || v47 >= v14)
          {
            if (v47 < 0x41 || v47 >= v59)
            {
              if (v47 < 0x61 || v47 >= v56) {
                goto LABEL_141;
              }
              BOOL result = v47 - 87;
            }
            else
            {
              BOOL result = v47 - 55;
            }
          }
          BOOL result = specialized static FixedWidthInteger._truncatingInit<A>(_:)(result, &v61);
          BOOL v48 = !is_mul_ok(v21, v46);
          BOOL v49 = !is_mul_ok(v20, v13);
          BOOL v50 = __CFADD__(v21 * v46, v20 * v13);
          uint64_t v51 = (__PAIR128__(v13, v46) * __PAIR128__(v21, v20)) >> 64;
          BOOL v52 = __CFADD__(v21 * v46 + v20 * v13, (v20 * (unsigned __int128)v46) >> 64);
          int v53 = v21 ? v15 : 1;
          if (v53 != 1 || v48 || v49 || v50) {
            goto LABEL_141;
          }
          BOOL v30 = __CFADD__(v20 * v46, v61);
          unint64_t v20 = v20 * v46 + v61;
          BOOL v54 = v30;
          unint64_t v21 = v51 + v62;
          if (__CFADD__(v51, v62)) {
            goto LABEL_141;
          }
          if (v21 == -1)
          {
            if (v54 || v52) {
              goto LABEL_141;
            }
            unint64_t v21 = -1;
          }
          else if (v54)
          {
            if (v52) {
              goto LABEL_141;
            }
            ++v21;
          }
          else if (v52)
          {
            goto LABEL_141;
          }
          ++v45;
        }
        while (--v12);
      }
LABEL_142:
      *(void *)a4 = v20;
      *(void *)(a4 + 8) = v21;
      *(unsigned char *)(a4 + 16) = 0;
      return result;
    }
LABEL_143:
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(unsigned char *)(a4 + 16) = 1;
    return result;
  }
  if (v7 != 45)
  {
    if (a2)
    {
      if (a3 < 11)
      {
        unsigned __int8 v17 = a3 + 48;
        BOOL v19 = a3 >= 0;
        if (a3 >= 0)
        {
          int v18 = 1;
        }
        else
        {
          a3 = ~a3;
          int v18 = 0;
        }
        if (v19) {
          unint64_t v16 = 0;
        }
        else {
          unint64_t v16 = -1;
        }
        unsigned __int8 v57 = 97;
        unsigned __int8 v60 = 65;
      }
      else
      {
        unint64_t v16 = 0;
        unsigned __int8 v57 = a3 + 87;
        unsigned __int8 v60 = a3 + 55;
        unsigned __int8 v17 = 58;
        int v18 = 1;
      }
      unint64_t v20 = 0;
      unint64_t v21 = 0;
      if (result)
      {
        unint64_t v22 = v16 ^ a3;
        while (1)
        {
          unsigned int v23 = *v5;
          BOOL result = v23 - 48;
          if (v23 < 0x30 || v23 >= v17)
          {
            if (v23 < 0x41 || v23 >= v60)
            {
              if (v23 < 0x61 || v23 >= v57) {
                break;
              }
              BOOL result = v23 - 87;
            }
            else
            {
              BOOL result = v23 - 55;
            }
          }
          BOOL result = specialized static FixedWidthInteger._truncatingInit<A>(_:)(result, &v61);
          BOOL v24 = !is_mul_ok(v21, v22);
          BOOL v25 = !is_mul_ok(v20, v16);
          BOOL v26 = __CFADD__(v21 * v22, v20 * v16);
          uint64_t v27 = (__PAIR128__(v16, v22) * __PAIR128__(v21, v20)) >> 64;
          BOOL v28 = __CFADD__(v21 * v22 + v20 * v16, (v20 * (unsigned __int128)v22) >> 64);
          int v29 = v21 ? v18 : 1;
          if (v29 != 1 || v24 || v25 || v26) {
            break;
          }
          BOOL v30 = __CFADD__(v20 * v22, v61);
          unint64_t v20 = v20 * v22 + v61;
          BOOL v31 = v30;
          unint64_t v21 = v27 + v62;
          if (__CFADD__(v27, v62)) {
            break;
          }
          if (v21 == -1)
          {
            if (v31 || v28) {
              break;
            }
            unint64_t v21 = -1;
          }
          else if (v31)
          {
            if (v28) {
              break;
            }
            ++v21;
          }
          else if (v28)
          {
            break;
          }
          ++v5;
          if (!--v4) {
            goto LABEL_142;
          }
        }
LABEL_141:
        *(void *)a4 = 0;
        *(void *)(a4 + 8) = 0;
        *(unsigned char *)(a4 + 16) = 1;
        return result;
      }
      goto LABEL_142;
    }
    goto LABEL_143;
  }
  uint64_t v8 = a2 - 1;
  if (a2 >= 1)
  {
    if (a2 != 1)
    {
      if (a3 <= 10)
      {
        unsigned __int8 v10 = a3 + 48;
        BOOL v32 = a3 >= 0;
        if (a3 >= 0)
        {
          int v11 = 1;
        }
        else
        {
          a3 = ~a3;
          int v11 = 0;
        }
        if (v32) {
          unint64_t v9 = 0;
        }
        else {
          unint64_t v9 = -1;
        }
        unsigned __int8 v55 = 97;
        unsigned __int8 v58 = 65;
      }
      else
      {
        unint64_t v9 = 0;
        unsigned __int8 v55 = a3 + 87;
        unsigned __int8 v58 = a3 + 55;
        unsigned __int8 v10 = 58;
        int v11 = 1;
      }
      unint64_t v20 = 0;
      unint64_t v21 = 0;
      if (result)
      {
        int v33 = (unsigned __int8 *)(result + 1);
        unint64_t v34 = v9 ^ a3;
        while (1)
        {
          unsigned int v35 = *v33;
          BOOL result = v35 - 48;
          if (v35 < 0x30 || v35 >= v10)
          {
            if (v35 < 0x41 || v35 >= v58)
            {
              if (v35 < 0x61 || v35 >= v55) {
                goto LABEL_141;
              }
              BOOL result = v35 - 87;
            }
            else
            {
              BOOL result = v35 - 55;
            }
          }
          BOOL result = specialized static FixedWidthInteger._truncatingInit<A>(_:)(result, &v61);
          BOOL v36 = !is_mul_ok(v21, v34);
          BOOL v37 = !is_mul_ok(v20, v9);
          BOOL v38 = __CFADD__(v21 * v34, v20 * v9);
          unint64_t v39 = (__PAIR128__(v9, v34) * __PAIR128__(v21, v20)) >> 64;
          BOOL v40 = __CFADD__(v21 * v34 + v20 * v9, (v20 * (unsigned __int128)v34) >> 64);
          if (v21) {
            int v41 = v11;
          }
          else {
            int v41 = 1;
          }
          if (v41 != 1 || v36 || v37 || v38) {
            goto LABEL_141;
          }
          unint64_t v42 = v20 * v34;
          unint64_t v21 = v39 - v62;
          unint64_t v20 = v20 * v34 - v61;
          if (v42 < v61) {
            break;
          }
          if (v39 < v62) {
            goto LABEL_141;
          }
          if (v21) {
            goto LABEL_94;
          }
          if (v40) {
            goto LABEL_141;
          }
          unint64_t v21 = 0;
LABEL_95:
          ++v33;
          if (!--v8) {
            goto LABEL_142;
          }
        }
        if (v21) {
          BOOL v43 = v39 < v62;
        }
        else {
          BOOL v43 = 1;
        }
        if (v43) {
          goto LABEL_141;
        }
        --v21;
LABEL_94:
        if (v40) {
          goto LABEL_141;
        }
        goto LABEL_95;
      }
      goto LABEL_142;
    }
    goto LABEL_143;
  }
  __break(1u);
LABEL_145:
  __break(1u);
  return result;
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = result;
  int v5 = *result;
  if (v5 != 43)
  {
    if (v5 != 45)
    {
      if (a2)
      {
        if (a3 <= 10) {
          unsigned __int8 v36 = 97;
        }
        else {
          unsigned __int8 v36 = a3 + 87;
        }
        if (a3 <= 10) {
          unsigned __int8 v37 = 65;
        }
        else {
          unsigned __int8 v37 = a3 + 55;
        }
        if (a3 <= 10) {
          unsigned __int8 v38 = a3 + 48;
        }
        else {
          unsigned __int8 v38 = 58;
        }
        specialized static FixedWidthInteger._truncatingInit<A>(_:)();
        if (v4)
        {
          unint64_t v41 = v39;
          uint64_t v42 = v40;
          unint64_t v33 = 0;
          uint64_t v43 = 0;
          while (1)
          {
            unsigned int v44 = *v4;
            if (v44 < 0x30 || v44 >= v38)
            {
              if (v44 < 0x41 || v44 >= v37)
              {
                BOOL result = 0;
                if (v44 < 0x61 || v44 >= v36) {
                  return result;
                }
                char v45 = -87;
              }
              else
              {
                char v45 = -55;
              }
            }
            else
            {
              char v45 = -48;
            }
            unsigned __int8 v46 = v44 + v45;
            unint64_t v47 = _Int128.multipliedReportingOverflow(by:)(v41, v42, v33, v43);
            unint64_t v33 = v47 + v46;
            BOOL v50 = __CFADD__(v47, v46);
            if (v48 == 0x7FFFFFFFFFFFFFFFLL)
            {
              if ((v50 | v49)) {
                return 0;
              }
              uint64_t v43 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else
            {
              uint64_t v43 = v48;
              if (v50)
              {
                if (v49) {
                  return 0;
                }
                uint64_t v43 = v48 + 1;
              }
              else if (v49)
              {
                return 0;
              }
            }
            ++v4;
            if (!--v3) {
              return (unsigned __int8 *)v33;
            }
          }
        }
        return 0;
      }
      return 0;
    }
    if (a2 >= 1)
    {
      uint64_t v6 = a2 - 1;
      if (a2 != 1)
      {
        if (a3 <= 10) {
          unsigned __int8 v7 = 97;
        }
        else {
          unsigned __int8 v7 = a3 + 87;
        }
        if (a3 <= 10) {
          unsigned __int8 v8 = 65;
        }
        else {
          unsigned __int8 v8 = a3 + 55;
        }
        if (a3 <= 10) {
          unsigned __int8 v9 = a3 + 48;
        }
        else {
          unsigned __int8 v9 = 58;
        }
        specialized static FixedWidthInteger._truncatingInit<A>(_:)();
        if (v4)
        {
          unint64_t v12 = v10;
          uint64_t v13 = v11;
          unint64_t v14 = 0;
          uint64_t v15 = 0;
          unint64_t v16 = v4 + 1;
          do
          {
            unsigned int v17 = *v16;
            if (v17 < 0x30 || v17 >= v9)
            {
              if (v17 < 0x41 || v17 >= v8)
              {
                BOOL result = 0;
                if (v17 < 0x61 || v17 >= v7) {
                  return result;
                }
                char v18 = -87;
              }
              else
              {
                char v18 = -55;
              }
            }
            else
            {
              char v18 = -48;
            }
            unsigned __int8 v19 = v17 + v18;
            unint64_t v20 = _Int128.multipliedReportingOverflow(by:)(v12, v13, v14, v15);
            BOOL v23 = v20 >= v19;
            BOOL result = (unsigned __int8 *)(v20 - v19);
            uint64_t v24 = !v23;
            if (v21 == 0x8000000000000000)
            {
              if ((v22 | v24)) {
                return 0;
              }
            }
            else if (v22)
            {
              return 0;
            }
            ++v16;
            unint64_t v14 = (unint64_t)result;
            uint64_t v15 = v21 - v24;
            --v6;
          }
          while (v6);
          return result;
        }
        return 0;
      }
      return 0;
    }
    __break(1u);
LABEL_105:
    __break(1u);
    return result;
  }
  if (a2 < 1) {
    goto LABEL_105;
  }
  uint64_t v25 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  if (a3 <= 10) {
    unsigned __int8 v26 = 97;
  }
  else {
    unsigned __int8 v26 = a3 + 87;
  }
  if (a3 <= 10) {
    unsigned __int8 v27 = 65;
  }
  else {
    unsigned __int8 v27 = a3 + 55;
  }
  if (a3 <= 10) {
    unsigned __int8 v28 = a3 + 48;
  }
  else {
    unsigned __int8 v28 = 58;
  }
  specialized static FixedWidthInteger._truncatingInit<A>(_:)();
  if (!v4) {
    return 0;
  }
  unint64_t v31 = v29;
  uint64_t v32 = v30;
  unint64_t v33 = 0;
  uint64_t v34 = 0;
  unsigned int v35 = v4 + 1;
  do
  {
    unsigned int v51 = *v35;
    if (v51 < 0x30 || v51 >= v28)
    {
      if (v51 < 0x41 || v51 >= v27)
      {
        BOOL result = 0;
        if (v51 < 0x61 || v51 >= v26) {
          return result;
        }
        char v52 = -87;
      }
      else
      {
        char v52 = -55;
      }
    }
    else
    {
      char v52 = -48;
    }
    unsigned __int8 v53 = v51 + v52;
    unint64_t v54 = _Int128.multipliedReportingOverflow(by:)(v31, v32, v33, v34);
    unint64_t v33 = v54 + v53;
    BOOL v57 = __CFADD__(v54, v53);
    if (v55 == 0x7FFFFFFFFFFFFFFFLL)
    {
      if ((v57 | v56)) {
        return 0;
      }
      uint64_t v34 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v34 = v55;
      if (v57)
      {
        if (v56) {
          return 0;
        }
        uint64_t v34 = v55 + 1;
      }
      else if (v56)
      {
        return 0;
      }
    }
    ++v35;
    --v25;
  }
  while (v25);
  return (unsigned __int8 *)v33;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0);
      unint64_t v12 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
LABEL_11:
        _StringObject.sharedUTF8.getter();
LABEL_4:
        JUMPOUT(0x261224020);
      }
    }
    else
    {
      uint64_t v11 = (void *)MEMORY[0x263F8EE78];
    }
    uint64_t v13 = MEMORY[0x261224020](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x261224020]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

uint64_t specialized Collection.count.getter(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    a1 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, a3, a4);
    unint64_t v7 = a1;
  }
  if ((v6 & 0xC) == v9)
  {
    a1 = _StringGuts._slowEnsureMatchingEncoding(_:)(v6, v5, v4);
    unint64_t v6 = a1;
    if ((v4 & 0x1000000000000000) == 0) {
      return (v6 >> 16) - (v7 >> 16);
    }
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (v6 >> 16) - (v7 >> 16);
  }
  unint64_t v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v11 >= v6 >> 16)
  {
    a1 = v7;
    a2 = v6;
    a3 = v5;
    a4 = v4;
    return MEMORY[0x270F9D808](a1, a2, a3, a4);
  }
  __break(1u);
  return MEMORY[0x270F9D808](a1, a2, a3, a4);
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    void v9[2] = a6;
    uint64_t v9[3] = a7;
    void v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    BOOL result = v12;
    if (v17 == v15) {
      BOOL result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      BOOL result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        BOOL result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          BOOL result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    BOOL result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x261224050](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t specialized static _Int128.&<< infix(_:_:)(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 0x7F) != 0) {
    uint64_t v3 = a1 << a3;
  }
  else {
    uint64_t v3 = a1;
  }
  if ((a3 & 0x7Fu) <= 0x3FuLL) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t specialized static _Int128.&>> infix(_:_:)(unint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3 = (a1 >> a3) | (a2 << -a3);
  if ((a3 & 0x7F) == 0) {
    uint64_t v3 = a1;
  }
  if ((a3 & 0x7Fu) <= 0x3FuLL) {
    return v3;
  }
  else {
    return a2 >> a3;
  }
}

uint64_t specialized _Int128.init<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  MEMORY[0x270FA5388](a1, a1);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v6);
  uint64_t result = _Int128.init<A>(exactly:)(v6, a2, a3);
  if (v9) {
    __break(1u);
  }
  return result;
}

unint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  if (result > 2 || a3 > 2)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v3 = a3 - result;
  if (a2 >= 1)
  {
    if (v3 < 0 || v3 >= a2) {
      goto LABEL_10;
    }
    return 0;
  }
  if (v3 <= 0 && v3 > a2) {
    return 0;
  }
LABEL_10:
  BOOL v4 = __OFADD__(result, a2);
  result += a2;
  if (v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (result > 2) {
LABEL_15:
  }
    __break(1u);
  return result;
}

unint64_t *specialized static _UInt128.*= infix(_:_:)(unint64_t *result, unint64_t *a2)
{
  unint64_t v2 = *a2;
  unint64_t v3 = a2[1];
  unint64_t v4 = *result;
  unint64_t v5 = result[1];
  BOOL v6 = !is_mul_ok(v5, *a2);
  unint64_t v7 = v5 * *a2;
  BOOL v8 = !is_mul_ok(*result, v3);
  BOOL v9 = __CFADD__(v7, *result * v3);
  unint64_t v10 = v7 + *result * v3;
  char v11 = v9;
  uint64_t v12 = (v4 * (unsigned __int128)v2) >> 64;
  BOOL v9 = __CFADD__(v10, v12);
  unint64_t v13 = v10 + v12;
  char v14 = v9;
  if (v3) {
    BOOL v15 = v5 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (!v15 || v6 || v8 || (v11 & 1) != 0 || (v14 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    *uint64_t result = v4 * v2;
    result[1] = v13;
  }
  return result;
}

uint64_t *specialized static _UInt128.&<<= infix(_:_:)(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  unint64_t v3 = *a2 & 0x7FLL;
  unint64_t v4 = (result[1] << *a2) | ((unint64_t)*result >> -(char)*a2);
  if (v3) {
    uint64_t v2 = *result << *a2;
  }
  else {
    unint64_t v4 = result[1];
  }
  if (v3 > 0x3F)
  {
    unint64_t v4 = *result << *a2;
    uint64_t v2 = 0;
  }
  *uint64_t result = v2;
  result[1] = v4;
  return result;
}

uint64_t *specialized static _UInt128.&>>= infix(_:_:)(uint64_t *result, void *a2)
{
  unint64_t v2 = result[1];
  unint64_t v3 = *a2 & 0x7FLL;
  unint64_t v4 = v2 >> *a2;
  uint64_t v5 = (v2 << -(char)*a2) | ((unint64_t)*result >> *a2);
  if (v3) {
    v2 >>= *a2;
  }
  else {
    uint64_t v5 = *result;
  }
  if (v3 <= 0x3F) {
    unint64_t v6 = v2;
  }
  else {
    unint64_t v6 = 0;
  }
  if (v3 > 0x3F) {
    uint64_t v5 = v4;
  }
  *uint64_t result = v5;
  result[1] = v6;
  return result;
}

unint64_t *specialized static _UInt128./= infix(_:_:)(unint64_t *result, unint64_t *a2)
{
  if (*(_OWORD *)a2 == 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v2 = result;
    uint64_t result = (unint64_t *)specialized _wideDivide22<A>(_:by:)((uint64_t *)&v5, &v4, &v3, result[1], *result, a2[1], *a2);
    unint64_t *v2 = v5;
    v2[1] = (unint64_t)result;
  }
  return result;
}

unint64_t *specialized static _UInt128.%= infix(_:_:)(unint64_t *result, unint64_t *a2)
{
  if (*(_OWORD *)a2 == 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v2 = result;
    uint64_t result = (unint64_t *)specialized _wideDivide22<A>(_:by:)(&v6, &v5, &v4, result[1], *result, a2[1], *a2);
    unint64_t v3 = v5;
    unint64_t *v2 = v4;
    v2[1] = v3;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _Int128 and conformance _Int128()
{
  unint64_t result = lazy protocol witness table cache variable for type _Int128 and conformance _Int128;
  if (!lazy protocol witness table cache variable for type _Int128 and conformance _Int128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Int128 and conformance _Int128);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _Int128 and conformance _Int128;
  if (!lazy protocol witness table cache variable for type _Int128 and conformance _Int128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Int128 and conformance _Int128);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _Int128 and conformance _Int128;
  if (!lazy protocol witness table cache variable for type _Int128 and conformance _Int128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Int128 and conformance _Int128);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _Int128 and conformance _Int128;
  if (!lazy protocol witness table cache variable for type _Int128 and conformance _Int128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Int128 and conformance _Int128);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _Int128 and conformance _Int128;
  if (!lazy protocol witness table cache variable for type _Int128 and conformance _Int128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Int128 and conformance _Int128);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _Int128 and conformance _Int128;
  if (!lazy protocol witness table cache variable for type _Int128 and conformance _Int128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Int128 and conformance _Int128);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _Int128 and conformance _Int128;
  if (!lazy protocol witness table cache variable for type _Int128 and conformance _Int128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Int128 and conformance _Int128);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _Int128 and conformance _Int128;
  if (!lazy protocol witness table cache variable for type _Int128 and conformance _Int128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Int128 and conformance _Int128);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _Int128 and conformance _Int128;
  if (!lazy protocol witness table cache variable for type _Int128 and conformance _Int128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Int128 and conformance _Int128);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _Int128 and conformance _Int128;
  if (!lazy protocol witness table cache variable for type _Int128 and conformance _Int128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Int128 and conformance _Int128);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _Int128 and conformance _Int128;
  if (!lazy protocol witness table cache variable for type _Int128 and conformance _Int128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Int128 and conformance _Int128);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _Int128 and conformance _Int128;
  if (!lazy protocol witness table cache variable for type _Int128 and conformance _Int128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Int128 and conformance _Int128);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Int64 and conformance Int64()
{
  unint64_t result = lazy protocol witness table cache variable for type Int64 and conformance Int64;
  if (!lazy protocol witness table cache variable for type Int64 and conformance Int64)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int64 and conformance Int64);
  }
  return result;
}

uint64_t *specialized static _Int128.&<<= infix(_:_:)(uint64_t *result, char a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  if ((a2 & 0x7F) != 0)
  {
    uint64_t v3 = (v3 << a2) | ((unint64_t)*result >> -a2);
    uint64_t v2 = *result << a2;
  }
  if ((a2 & 0x7Fu) > 0x3FuLL)
  {
    uint64_t v3 = *result << a2;
    uint64_t v2 = 0;
  }
  *unint64_t result = v2;
  result[1] = v3;
  return result;
}

uint64_t *specialized static _Int128.&>>= infix(_:_:)(uint64_t *result, char a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = v3 >> 63;
  uint64_t v5 = v3 >> a2;
  uint64_t v6 = (v3 << -a2) | ((unint64_t)*result >> a2);
  if ((a2 & 0x7F) != 0)
  {
    v3 >>= a2;
    uint64_t v2 = v6;
  }
  if ((a2 & 0x7Fu) > 0x3FuLL)
  {
    uint64_t v3 = v4;
    uint64_t v2 = v5;
  }
  *unint64_t result = v2;
  result[1] = v3;
  return result;
}

unint64_t *specialized static _Int128./= infix(_:_:)(unint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  unint64_t v5 = *result;
  int64_t v4 = result[1];
  if (a3 == -1)
  {
    if (a2 == -1 && v4 == 0x8000000000000000 && v5 == 0) {
      goto LABEL_11;
    }
LABEL_10:
    unint64_t result = (unint64_t *)_Int128.quotientAndRemainder(dividingBy:)(a2, a3, v5, v4);
    *uint64_t v3 = result;
    v3[1] = v7;
    return result;
  }
  if (a3 || a2) {
    goto LABEL_10;
  }
LABEL_11:
  __break(1u);
  return result;
}

unint64_t *specialized static _Int128.%= infix(_:_:)(unint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  unint64_t v5 = *result;
  int64_t v4 = result[1];
  if (a3 == -1)
  {
    if (a2 == -1 && v4 == 0x8000000000000000 && v5 == 0) {
      goto LABEL_11;
    }
LABEL_10:
    unint64_t result = (unint64_t *)_Int128.quotientAndRemainder(dividingBy:)(a2, a3, v5, v4);
    *uint64_t v3 = v7;
    v3[1] = v8;
    return result;
  }
  if (a3 || a2) {
    goto LABEL_10;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t associated type witness table accessor for ExpressibleByIntegerLiteral.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral in _UInt128()
{
  return MEMORY[0x263F8E618];
}

unint64_t lazy protocol witness table accessor for type _UInt128.Words and conformance _UInt128.Words()
{
  unint64_t result = lazy protocol witness table cache variable for type _UInt128.Words and conformance _UInt128.Words;
  if (!lazy protocol witness table cache variable for type _UInt128.Words and conformance _UInt128.Words)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128.Words and conformance _UInt128.Words);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UInt128.Words and conformance _UInt128.Words;
  if (!lazy protocol witness table cache variable for type _UInt128.Words and conformance _UInt128.Words)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128.Words and conformance _UInt128.Words);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UInt128.Words and conformance _UInt128.Words;
  if (!lazy protocol witness table cache variable for type _UInt128.Words and conformance _UInt128.Words)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128.Words and conformance _UInt128.Words);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UInt128.Words and conformance _UInt128.Words;
  if (!lazy protocol witness table cache variable for type _UInt128.Words and conformance _UInt128.Words)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UInt128.Words and conformance _UInt128.Words);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in _UInt128.Words()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in _UInt128.Words()
{
  return lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<_UInt128.Words> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<_UInt128.Words>, (void (*)(void))lazy protocol witness table accessor for type _UInt128.Words and conformance _UInt128.Words);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in _UInt128.Words()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in _UInt128.Words()
{
  return lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<_UInt128.Words> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<_UInt128.Words>, (void (*)(void))lazy protocol witness table accessor for type _UInt128.Words and conformance _UInt128.Words);
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in _UInt128.Words()
{
  return MEMORY[0x263F8D6E0];
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in _UInt128.Words()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in _UInt128.Words()
{
  return lazy protocol witness table accessor for type [UInt8] and conformance <A> [A](&lazy protocol witness table cache variable for type Slice<_UInt128.Words> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<_UInt128.Words>);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in _UInt128.Words()
{
  return lazy protocol witness table accessor for type [UInt8] and conformance <A> [A](&lazy protocol witness table cache variable for type IndexingIterator<_UInt128.Words> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<_UInt128.Words>);
}

uint64_t associated type witness table accessor for Strideable.Stride : SignedNumeric in _UInt128()
{
  return MEMORY[0x263F8D720];
}

unint64_t lazy protocol witness table accessor for type _Int128.Words and conformance _Int128.Words()
{
  unint64_t result = lazy protocol witness table cache variable for type _Int128.Words and conformance _Int128.Words;
  if (!lazy protocol witness table cache variable for type _Int128.Words and conformance _Int128.Words)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Int128.Words and conformance _Int128.Words);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _Int128.Words and conformance _Int128.Words;
  if (!lazy protocol witness table cache variable for type _Int128.Words and conformance _Int128.Words)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Int128.Words and conformance _Int128.Words);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _Int128.Words and conformance _Int128.Words;
  if (!lazy protocol witness table cache variable for type _Int128.Words and conformance _Int128.Words)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Int128.Words and conformance _Int128.Words);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _Int128.Words and conformance _Int128.Words;
  if (!lazy protocol witness table cache variable for type _Int128.Words and conformance _Int128.Words)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Int128.Words and conformance _Int128.Words);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in _Int128.Words()
{
  return lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<_Int128.Words> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<_Int128.Words>, (void (*)(void))lazy protocol witness table accessor for type _Int128.Words and conformance _Int128.Words);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in _Int128.Words()
{
  return lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<_Int128.Words> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<_Int128.Words>, (void (*)(void))lazy protocol witness table accessor for type _Int128.Words and conformance _Int128.Words);
}

uint64_t lazy protocol witness table accessor for type Slice<_UInt128.Words> and conformance <> Slice<A>(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in _Int128.Words()
{
  return lazy protocol witness table accessor for type [UInt8] and conformance <A> [A](&lazy protocol witness table cache variable for type Slice<_Int128.Words> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<_Int128.Words>);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in _Int128.Words()
{
  return lazy protocol witness table accessor for type [UInt8] and conformance <A> [A](&lazy protocol witness table cache variable for type IndexingIterator<_Int128.Words> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<_Int128.Words>);
}

int8x16_t sub_260B927FC@<Q0>(int8x16_t *a1@<X0>, int8x16_t *a2@<X8>)
{
  int8x16_t result = vextq_s8(*a1, *a1, 8uLL);
  *a2 = result;
  return result;
}

int8x16_t sub_260B9280C(int8x16_t *a1, int8x16_t *a2)
{
  int8x16_t result = vextq_s8(*a1, *a1, 8uLL);
  *a2 = result;
  return result;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

ValueMetadata *type metadata accessor for _UInt128()
{
  return &type metadata for _UInt128;
}

ValueMetadata *type metadata accessor for _UInt128.Words()
{
  return &type metadata for _UInt128.Words;
}

ValueMetadata *type metadata accessor for _Int128()
{
  return &type metadata for _Int128;
}

uint64_t getEnumTagSinglePayload for _Int128.Words(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _Int128.Words(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _Int128.Words()
{
  return &type metadata for _Int128.Words;
}

uint64_t specialized Collection.prefix(_:)(uint64_t result, uint64_t a2, uint64_t a3, int64_t a4, unint64_t a5)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  int64_t v5 = a5 >> 1;
  uint64_t v6 = (a5 >> 1) - a4;
  if (__OFSUB__(a5 >> 1, a4))
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (!result || v6 < 0 || (int64_t v7 = a5 >> 1, v6 >= result))
  {
    int64_t v7 = a4 + result;
    if (__OFADD__(a4, result)) {
      goto LABEL_18;
    }
  }
  if (v7 < a4) {
    goto LABEL_14;
  }
  if (v5 < a4)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v5 >= v7)
  {
    if ((v7 & 0x8000000000000000) == 0) {
      return a2;
    }
    goto LABEL_17;
  }
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t specialized Collection.dropFirst(_:)(uint64_t result, uint64_t a2, uint64_t a3, int64_t a4, unint64_t a5)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  int64_t v5 = a5 >> 1;
  uint64_t v6 = (a5 >> 1) - a4;
  if (__OFSUB__(a5 >> 1, a4))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (result)
  {
    if ((v6 & 0x8000000000000000) == 0)
    {
      int64_t v7 = a5 >> 1;
      if (v6 < result)
      {
LABEL_8:
        if (v7 >= a4)
        {
          if (v5 >= a4) {
            return a2;
          }
          goto LABEL_15;
        }
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }
    }
  }
  int64_t v7 = a4 + result;
  if (!__OFADD__(a4, result))
  {
    if (v5 >= v7) {
      goto LABEL_8;
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t PINEPrepareState.outputShare.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t PINEPrepareState.wraparoundJointRandSeed.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PINEPrepareState.verificationJointRandSeed.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PINEPrepareState.aggregatorID.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t static PINEPrepareState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  int v4 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  int v7 = *(unsigned __int8 *)(a2 + 24);
  if ((static OutputShare.== infix(_:_:)() & 1) != 0 && specialized static Array<A>.== infix(_:_:)(v2, v5)) {
    return specialized static Array<A>.== infix(_:_:)(v3, v6) & (v4 == v7);
  }
  else {
    return 0;
  }
}

void *PINEPrepareState.init(outputShare:wraparoundJointRandSeed:verificationJointRandSeed:aggregatorID:)@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  *(void *)a5 = *result;
  *(void *)(a5 + 8) = a2;
  *(void *)(a5 + 16) = a3;
  *(unsigned char *)(a5 + 24) = a4;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PINEPrepareState<A, B>(uint64_t a1, uint64_t a2)
{
  return static PINEPrepareState.== infix(_:_:)(a1, a2);
}

uint64_t PINEPrepareState.DecodableParameter.aggregatorID.getter()
{
  return *(void *)v0;
}

uint64_t PINEPrepareState.DecodableParameter.jointRandBlindLength.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t PINEPrepareState.DecodableParameter.outputShareCount.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t PINEPrepareState.DecodableParameter.encodedLength.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 64))(*(void *)(a1 + 16));
  uint64_t v5 = v3 * result;
  if ((unsigned __int128)(v3 * (__int128)result) >> 64 != (v3 * result) >> 63)
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t result = v5 + v2;
  if (__OFADD__(v5, v2)) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t PINEPrepareState.DecodableParameter.init(aggregatorID:outputShareCount:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, void *a5@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  if (result + 0x4000000000000000 < 0)
  {
    __break(1u);
  }
  else
  {
    *a5 = a1;
    a5[1] = 2 * result;
    a5[2] = a2;
  }
  return result;
}

uint64_t PINEPrepareState.init<A>(from:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1, a2);
  unint64_t v17 = (char *)&v104 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v9 + 24) == 1)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *unint64_t v18 = 0;
    v18[1] = 0;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1, a5);
  }
  BOOL v108 = v15;
  uint64_t v109 = v5;
  uint64_t v116 = a1;
  uint64_t v117 = v8;
  uint64_t v21 = *(void *)v9;
  uint64_t v20 = *(void *)(v9 + 8);
  int64_t v22 = *(void *)(v9 + 16);
  unint64_t v23 = *(void *)(*(void *)(v14 + 8) + 8);
  uint64_t v125 = a5;
  unint64_t v112 = v23;
  uint64_t v24 = v13;
  int64_t v25 = v10;
  uint64_t v26 = v12;
  unint64_t v27 = v11;
  uint64_t v28 = dispatch thunk of Collection.count.getter();
  uint64_t v114 = v26;
  uint64_t v115 = v28;
  unint64_t v110 = v21;
  int64_t v111 = v22;
  uint64_t v121 = v24;
  uint64_t v122 = v21;
  uint64_t v29 = v20;
  unint64_t v30 = v27;
  uint64_t v123 = v29;
  int64_t v124 = v22;
  int64_t v113 = v25;
  uint64_t v118 = v25;
  unint64_t v119 = v27;
  uint64_t v120 = v26;
  uint64_t v31 = type metadata accessor for PINEPrepareState.DecodableParameter();
  uint64_t v32 = PINEPrepareState.DecodableParameter.encodedLength.getter(v31);
  if (v115 != v32)
  {
    uint64_t v118 = 0;
    unint64_t v119 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    uint64_t v62 = v125;
    uint64_t v118 = v113;
    unint64_t v119 = v30;
    uint64_t v120 = v114;
    uint64_t v121 = v24;
    type metadata accessor for PINEPrepareState();
    uint64_t v63 = _typeName(_:qualified:)();
    uint64_t v65 = v64;
    swift_bridgeObjectRelease();
    uint64_t v122 = v63;
    uint64_t v123 = v65;
    v66._countAndFlagsBits = 0x6572697571657220;
    v66._object = (void *)0xEB00000000203A64;
    String.append(_:)(v66);
    uint64_t v118 = v110;
    unint64_t v119 = v29;
    uint64_t v120 = v111;
    uint64_t v118 = PINEPrepareState.DecodableParameter.encodedLength.getter(v31);
    v67._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v67);
    swift_bridgeObjectRelease();
    v68._countAndFlagsBits = 0x203A746F67202CLL;
    v68._object = (void *)0xE700000000000000;
    String.append(_:)(v68);
    uint64_t v69 = v116;
    uint64_t v118 = dispatch thunk of Collection.count.getter();
    v70._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v70);
    swift_bridgeObjectRelease();
    uint64_t v71 = v122;
    uint64_t v72 = v123;
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *uint64_t v73 = v71;
    v73[1] = v72;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v117 + 8))(v69, v62);
  }
  unint64_t v107 = v30;
  uint64_t v115 = v24;
  (*(void (**)(char *, uint64_t, uint64_t))(v117 + 16))(v17, v116, v125);
  uint64_t v33 = ArraySlice.init<A>(_:)();
  uint64_t v35 = v34;
  int64_t v37 = v36;
  unint64_t v39 = v38;
  unint64_t v41 = v113;
  uint64_t v40 = v114;
  uint64_t v42 = (*(uint64_t (**)(int64_t, uint64_t))(v114 + 64))(v113, v114);
  unint64_t v43 = v111 * v42;
  if ((unsigned __int128)(v111 * (__int128)v42) >> 64 != (v111 * v42) >> 63)
  {
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v44 = specialized Collection.prefix(_:)(v43, v33, v35, v37, v39);
  uint64_t v45 = v35;
  uint64_t v46 = v44;
  unint64_t v48 = v47;
  int64_t v49 = v37;
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  uint64_t v54 = specialized Collection.dropFirst(_:)(v43, v33, v45, v49, v39);
  uint64_t v56 = v55;
  int64_t v111 = v58;
  unint64_t v112 = v57;
  uint64_t v118 = v46;
  unint64_t v119 = v48;
  uint64_t v120 = v51;
  uint64_t v121 = v53;
  swift_unknownObjectRetain();
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<UInt8>);
  unint64_t v60 = lazy protocol witness table accessor for type ArraySlice<UInt8> and conformance ArraySlice<A>();
  unint64_t v61 = v109;
  OutputShare.init<A>(from:parameter:)((uint64_t)&v118, 1, v41, v59, v40, v60, &v122);
  if (v61)
  {
    (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v116, v125);
    return swift_unknownObjectRelease();
  }
  uint64_t v106 = v122;
  uint64_t v74 = v56;
  uint64_t v109 = *(uint64_t (**)(void))(v115 + 8);
  uint64_t v75 = v109();
  unint64_t v76 = v111;
  int64_t v77 = v112;
  unint64_t v43 = specialized Collection.prefix(_:)(v75, v54, v56, v112, v111);
  uint64_t v105 = v78;
  uint64_t v114 = v79;
  unint64_t v41 = v80;
  uint64_t v29 = specialized Collection.dropFirst(_:)(v75, v54, v74, v77, v76);
  uint64_t v82 = v81;
  unint64_t v112 = v84;
  int64_t v113 = v83;
  if (v41)
  {
    int64_t v111 = v81;
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    swift_unknownObjectRetain();
    uint64_t v86 = swift_dynamicCastClass();
    if (!v86)
    {
      swift_unknownObjectRelease();
      uint64_t v86 = MEMORY[0x263F8EE78];
    }
    uint64_t v87 = *(void *)(v86 + 16);
    swift_release();
    if (__OFSUB__(v41 >> 1, v114)) {
      goto LABEL_32;
    }
    if (v87 != (v41 >> 1) - v114) {
      goto LABEL_33;
    }
    uint64_t v85 = swift_dynamicCastClass();
    uint64_t v82 = v111;
    if (!v85)
    {
      swift_unknownObjectRelease();
      uint64_t v85 = MEMORY[0x263F8EE78];
    }
    goto LABEL_17;
  }
  swift_unknownObjectRetain();
  while (1)
  {
    specialized _copyCollectionToContiguousArray<A>(_:)(v43, v105, v114, v41);
LABEL_17:
    uint64_t v114 = v85;
    swift_unknownObjectRelease();
    uint64_t v88 = v109();
    unint64_t v90 = v112;
    int64_t v89 = v113;
    uint64_t v91 = specialized Collection.prefix(_:)(v88, v29, v82, v113, v112);
    uint64_t v115 = v92;
    uint64_t v94 = v93;
    unint64_t v41 = v95;
    unint64_t v43 = specialized Collection.dropFirst(_:)(v88, v29, v82, v89, v90);
    if ((v41 & 1) == 0)
    {
      swift_unknownObjectRetain();
      goto LABEL_19;
    }
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    swift_unknownObjectRetain();
    uint64_t v99 = swift_dynamicCastClass();
    if (!v99)
    {
      swift_unknownObjectRelease();
      uint64_t v99 = MEMORY[0x263F8EE78];
    }
    uint64_t v100 = *(void *)(v99 + 16);
    swift_release();
    if (__OFSUB__(v41 >> 1, v94))
    {
      __break(1u);
LABEL_35:
      swift_unknownObjectRelease();
LABEL_19:
      uint64_t v96 = v125;
      specialized _copyCollectionToContiguousArray<A>(_:)(v91, v115, v94, v41);
      uint64_t v98 = v97;
      goto LABEL_26;
    }
    if (v100 != (v41 >> 1) - v94) {
      goto LABEL_35;
    }
    uint64_t v98 = swift_dynamicCastClass();
    uint64_t v96 = v125;
    if (!v98)
    {
      swift_unknownObjectRelease();
      uint64_t v98 = MEMORY[0x263F8EE78];
    }
LABEL_26:
    swift_unknownObjectRelease();
    char v101 = v110;
    if ((v110 & 0x8000000000000000) != 0)
    {
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    if (v110 <= 0xFF) {
      break;
    }
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    swift_unknownObjectRelease();
    uint64_t v82 = v111;
  }
  (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v116, v96);
  uint64_t result = swift_unknownObjectRelease();
  unint64_t v102 = v108;
  uint64_t v103 = v114;
  *BOOL v108 = v106;
  v102[1] = v103;
  v102[2] = v98;
  *((unsigned char *)v102 + 24) = v101;
  return result;
}

uint64_t type metadata accessor for PINEPrepareState.DecodableParameter()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PINEPrepareState()
{
  return swift_getGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type ArraySlice<UInt8> and conformance ArraySlice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ArraySlice<UInt8> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<UInt8> and conformance ArraySlice<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ArraySlice<UInt8>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<UInt8> and conformance ArraySlice<A>);
  }
  return result;
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance PINEPrepareState<A, B>(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *((void *)a2 + 2);
  char v6 = *((unsigned char *)a2 + 24);
  long long v8 = *a2;
  uint64_t v9 = v5;
  char v10 = v6;
  return PINEPrepareState.init<A>(from:parameter:)(a1, (uint64_t)&v8, *(void *)(a5 + 16), *(void *)(a5 + 24), a3);
}

uint64_t PINEPrepareState.encodedLength.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = type metadata accessor for OutputShare();
  uint64_t result = OutputShare.encodedLength.getter(v3);
  uint64_t v5 = *(void *)(v1 + 16);
  BOOL v6 = __OFADD__(result, v5);
  uint64_t v7 = result + v5;
  if (v6)
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(v2 + 16);
  uint64_t result = v7 + v8;
  if (__OFADD__(v7, v8)) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t PINEPrepareState.encode<A>(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for OutputShare();
  OutputShare.encode<A>(into:)(a1, v7, a3, a4);
  Seed.encode<A>(into:)();

  return Seed.encode<A>(into:)();
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance PINEPrepareState<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PINEPrepareState.encode<A>(into:)(a1, a4, a2, a3);
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2)
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, (uint64_t (*)(unsigned char *, void *, uint64_t, uint64_t, uint64_t))specialized Sequence._copySequenceContents(initializing:));
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, (uint64_t (*)(unsigned char *, void *, uint64_t, uint64_t, uint64_t))specialized Sequence._copySequenceContents(initializing:));
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(unsigned char *, void *, uint64_t, uint64_t, uint64_t))
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt>);
  BOOL v6 = (void *)swift_allocObject();
  int64_t v7 = _swift_stdlib_malloc_size(v6);
  uint64_t v8 = v7 - 32;
  if (v7 < 32) {
    uint64_t v8 = v7 - 25;
  }
  v6[2] = 2;
  v6[3] = 2 * (v8 >> 3);
  uint64_t result = a3(v10, v6 + 4, 2, a1, a2);
  if (result == 2) {
    return (uint64_t)v6;
  }
  __break(1u);
  return result;
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  int64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_9:
    __break(1u);
    return;
  }
  if (v5)
  {
    if (v5 <= 0)
    {
      uint64_t v8 = (void *)MEMORY[0x263F8EE78];
      if (v4 != a3) {
        goto LABEL_5;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      uint64_t v8 = (void *)swift_allocObject();
      size_t v9 = _swift_stdlib_malloc_size(v8);
      v8[2] = v5;
      v8[3] = 2 * v9 - 64;
      if (v4 != a3)
      {
LABEL_5:
        memcpy(v8 + 4, (const void *)(a2 + a3), v5);
        return;
      }
    }
    __break(1u);
    goto LABEL_9;
  }
}

{
  specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field40>);
}

{
  unint64_t v4;
  uint64_t v5;
  void *v8;
  int64_t v9;
  uint64_t v10;

  unint64_t v4 = a4 >> 1;
  int64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_11:
    __break(1u);
    return;
  }
  if (v5)
  {
    if (v5 <= 0)
    {
      uint64_t v8 = (void *)MEMORY[0x263F8EE78];
      if (v4 != a3)
      {
LABEL_7:
        memcpy(v8 + 4, (const void *)(a2 + 4 * a3), 4 * v5);
        return;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Field32>);
      uint64_t v8 = (void *)swift_allocObject();
      size_t v9 = _swift_stdlib_malloc_size(v8);
      char v10 = v9 - 32;
      if (v9 < 32) {
        char v10 = v9 - 29;
      }
      v8[2] = v5;
      v8[3] = 2 * (v10 >> 2);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
}

{
  specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Field64>);
}

uint64_t type metadata instantiation function for PINEPrepareState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 48);
}

uint64_t initializeBufferWithCopyOfBuffer for PINEPrepareState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for PINEPrepareState()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PINEPrepareState(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PINEPrepareState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for PINEPrepareState(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for PINEPrepareState(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PINEPrepareState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for PINEPrepareState.DecodableParameter(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PINEPrepareState.DecodableParameter(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  unint64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
LABEL_11:
    __break(1u);
    return;
  }
  if (v6)
  {
    if (v6 <= 0)
    {
      size_t v9 = (void *)MEMORY[0x263F8EE78];
      if (v5 != a3)
      {
LABEL_7:
        memcpy(v9 + 4, (const void *)(a2 + 8 * a3), 8 * v6);
        return;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      size_t v9 = (void *)swift_allocObject();
      int64_t v10 = _swift_stdlib_malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 25;
      }
      void v9[2] = v6;
      uint64_t v9[3] = 2 * (v11 >> 3);
      if (v5 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
}

int64_t specialized _copyCollectionToContiguousArray<A>(_:)(int64_t result, int64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v4 = a4 - a3;
  if (!a3) {
    int64_t v4 = 0;
  }
  if (result < 0 || (int64_t v5 = result, v4 < result))
  {
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (a2 < 0 || v4 < a2) {
    goto LABEL_20;
  }
  uint64_t v6 = a2 - result;
  if (a2 == result) {
    return MEMORY[0x263F8EE78];
  }
  if (v6 <= 0)
  {
    int64_t v7 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    int64_t v7 = (void *)swift_allocObject();
    __n128 result = _swift_stdlib_malloc_size(v7);
    _OWORD v7[2] = v6;
    v7[3] = 2 * result - 64;
  }
  uint64_t v10 = MEMORY[0x270FA5388](result, a2);
  MEMORY[0x270FA5388](v10, v11);
  __n128 result = (int64_t)_sSW17withMemoryRebound2to_q0_xm_q0_SRyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFACq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys5UInt8VsAD_pq0_Isgyrzr_SWq0_sAD_pAFRszsAD_pRs_Ri_0_r1_lIetMgyrzo_Tpq5SR8IteratorVyAF_G_Sit_Tg5048_sSW32withContiguousStorageIfAvailableyxSgxSRys5f20VGKXEKlFxAEKXEfU_SR8G14VyAD_G_Sit_TG5SRyAFGxsAD_pRi_zRi0_zlyAI_SitIsgyrzo_Tf1cn_n(a3, a4, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in Slice.withContiguousStorageIfAvailable<A>(_:));
  uint64_t v13 = v5 + v12;
  if (__OFADD__(v5, v12)) {
    goto LABEL_21;
  }
  uint64_t v14 = a4 - a3;
  if (!a3) {
    uint64_t v14 = 0;
  }
  if (v13 < 0 || v14 < v13) {
    goto LABEL_22;
  }
  if (v12 == v6) {
    return (int64_t)v7;
  }
LABEL_23:
  __break(1u);
  return result;
}

void *_sSW17withMemoryRebound2to_q0_xm_q0_SRyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFACq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys5UInt8VsAD_pq0_Isgyrzr_SWq0_sAD_pAFRszsAD_pRs_Ri_0_r1_lIetMgyrzo_Tpq5SR8IteratorVyAF_G_Sit_Tg5048_sSW32withContiguousStorageIfAvailableyxSgxSRys5f20VGKXEKlFxAEKXEfU_SR8G14VyAD_G_Sit_TG5SRyAFGxsAD_pRi_zRi0_zlyAI_SitIsgyrzo_Tf1cn_n(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  if (a1) {
    uint64_t v4 = a2 - a1;
  }
  else {
    uint64_t v4 = 0;
  }
  __n128 result = a3(&v6, a1, v4);
  if (!v3) {
    return (void *)v6;
  }
  return result;
}

uint64_t specialized RandomAccessCollection<>.distance(from:to:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 - a3;
  if (!a3) {
    uint64_t v4 = 0;
  }
  if (result < 0 || v4 < result)
  {
    __break(1u);
  }
  else if ((a2 & 0x8000000000000000) == 0 && v4 >= a2)
  {
    return a2 - result;
  }
  __break(1u);
  return result;
}

char *specialized closure #1 in Slice._copyContents(initializing:)(char *__src, int64_t a2, void *__dst, int64_t a4)
{
  uint64_t v4 = __src;
  if (a2 && a4)
  {
    if (a2 >= a4) {
      size_t v5 = a4;
    }
    else {
      size_t v5 = a2;
    }
    memcpy(__dst, __src, v5);
    v4 += v5;
  }
  return v4;
}

char *partial apply for specialized closure #1 in Slice._copyContents(initializing:)@<X0>(char *a1@<X0>, int64_t a2@<X1>, char **a3@<X8>)
{
  __n128 result = specialized closure #1 in Slice._copyContents(initializing:)(a1, a2, *(void **)(v3 + 16), *(void *)(v3 + 24));
  if (!v4)
  {
    *a3 = result;
    a3[1] = v7;
    a3[2] = v8;
  }
  return result;
}

void *specialized closure #1 in Slice.withContiguousStorageIfAvailable<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, void *(*a3)(long long *__return_ptr, uint64_t, void *)@<X3>, _OWORD *a4@<X8>)
{
  char v19 = a4;
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v10 = a2[2];
  uint64_t v9 = a2[3];
  uint64_t v11 = specialized RandomAccessCollection<>.distance(from:to:)(0, *a2, v10, v9);
  __n128 result = (void *)specialized RandomAccessCollection<>.distance(from:to:)(v7, v8, v10, v9);
  if (__OFADD__(v11, result))
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v13 = result;
  if ((uint64_t)result + v11 < v11)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  if (a1) {
    uint64_t v14 = a1 + v11;
  }
  else {
    uint64_t v14 = 0;
  }
  __n128 result = a3(&v17, v14, v13);
  if (!v4)
  {
    uint64_t v15 = v18;
    uint64_t v16 = v19;
    *char v19 = v17;
    *((void *)v16 + 2) = v15;
  }
  return result;
}

void *partial apply for specialized closure #1 in Slice.withContiguousStorageIfAvailable<A>(_:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return specialized closure #1 in Slice.withContiguousStorageIfAvailable<A>(_:)(a1, *(uint64_t **)(v2 + 16), *(void *(**)(long long *__return_ptr, uint64_t, void *))(v2 + 24), a2);
}

uint64_t VDAFEncodable.encodedData.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(a2 + 16))();
  v9[0] = specialized Data.init(capacity:)(v4);
  v9[1] = v5;
  uint64_t v6 = *(void (**)(void *, void, unint64_t, uint64_t, uint64_t))(a2 + 24);
  unint64_t v7 = lazy protocol witness table accessor for type Data and conformance Data();
  v6(v9, MEMORY[0x263F06F78], v7, a1, a2);
  return v9[0];
}

char *VDAFEncodable.encodedBytes.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(a2 + 16))();
  uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0, MEMORY[0x263F8EE78]);
  uint64_t v5 = *(void (**)(char **, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 24);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  uint64_t v7 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A](&lazy protocol witness table cache variable for type [UInt8] and conformance [A], &demangling cache variable for type metadata for [UInt8]);
  v5(&v9, v6, v7, a1, a2);
  return v9;
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:) in conformance Seed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return VDAFDecodable.init<A>(from:)(a1, a4, a2, a5, a3);
}

uint64_t VDAFDecodable.init<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v20 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v12 = MEMORY[0x270FA5388](v10 - 8, v11);
  uint64_t v14 = (char *)&v20 - v13;
  uint64_t v15 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v12, v16);
  uint64_t v18 = (char *)&v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a1, a3);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v14, 1, 1, AssociatedTypeWitness);
  (*(void (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 24))(v18, v14, a3, v20, a2, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(a1, a3);
}

char *protocol witness for VDAFEncodable.encodedBytes.getter in conformance Seed()
{
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(*(void *)v0 + 16), 0, MEMORY[0x263F8EE78]);
  uint64_t v1 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v1);
  return v3;
}

uint64_t specialized encodeInteger<A, B>(_:into:encodedLength:)(uint64_t result, unint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a4 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = a4;
    if (a4)
    {
      uint64_t v7 = result;
      uint64_t v8 = *a3;
      do
      {
        __n128 result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          __n128 result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1, (char *)v8);
          uint64_t v8 = result;
        }
        unint64_t v10 = *(void *)(v8 + 16);
        unint64_t v9 = *(void *)(v8 + 24);
        if (v10 >= v9 >> 1)
        {
          __n128 result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, (char *)v8);
          uint64_t v8 = result;
        }
        *(void *)(v8 + 16) = v10 + 1;
        *(unsigned char *)(v8 + v10 + 32) = v7;
        *((void *)&v11 + 1) = a2;
        *(void *)&long long v11 = v7;
        uint64_t v7 = v11 >> 8;
        a2 >>= 8;
        --v4;
      }
      while (v4);
      *a3 = v8;
    }
  }
  return result;
}

uint64_t Array<A>.init<A>(from:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v68 = a6;
  uint64_t v72 = a1;
  uint64_t v73 = a2;
  uint64_t v70 = *(void *)(a4 - 8);
  uint64_t v71 = a4;
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v65 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = v7;
  uint64_t v69 = v8;
  swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11, v13);
  uint64_t v15 = (char *)&v59 - v14;
  uint64_t v16 = swift_getTupleTypeMetadata3();
  uint64_t v18 = MEMORY[0x270FA5388](v16, v17);
  uint64_t v20 = (char *)&v59 - v19;
  uint64_t v21 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v18, v22);
  uint64_t v24 = (char *)&v59 - v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v73, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata3 - 8) + 48))(v15, 1, TupleTypeMetadata3) == 1)
  {
    int64_t v25 = *(uint64_t **)(v12 + 8);
    ((void (*)(char *, uint64_t))v25)(v15, v11);
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *uint64_t v26 = 0;
    v26[1] = 0;
    swift_willThrow();
    ((void (*)(uint64_t, uint64_t))v25)(v73, v11);
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v72, v71);
    return (uint64_t)v25;
  }
  uint64_t v61 = v12;
  uint64_t v62 = v11;
  uint64_t v27 = *(void *)&v15[*(int *)(TupleTypeMetadata3 + 48)];
  uint64_t v63 = *(void *)&v15[*(int *)(TupleTypeMetadata3 + 64)];
  uint64_t v64 = v27;
  uint64_t v28 = *(int *)(v16 + 48);
  uint64_t v29 = *(int *)(v16 + 64);
  uint64_t v60 = v21;
  unint64_t v30 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
  v30(v20, v15, v9);
  *(void *)&v20[v28] = v64;
  *(void *)&v20[v29] = v63;
  uint64_t v31 = *(void *)&v20[*(int *)(v16 + 48)];
  uint64_t v32 = *(void *)&v20[*(int *)(v16 + 64)];
  uint64_t v64 = v9;
  uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v30)(v24, v20, v9);
  if ((v32 | v31) < 0)
  {
    __break(1u);
  }
  else if ((unsigned __int128)(v31 * (__int128)v32) >> 64 == (v31 * v32) >> 63)
  {
    uint64_t v34 = v68;
    uint64_t v35 = v71;
    uint64_t v36 = v72;
    if (v31 * v32 == dispatch thunk of Collection.count.getter())
    {
      uint64_t v37 = v36;
      uint64_t v38 = v70;
      (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v65, v37, v35);
      uint64_t v76 = ArraySlice.init<A>(_:)();
      unint64_t v77 = v39;
      uint64_t v78 = v40;
      uint64_t v79 = v41;
      uint64_t v74 = 0;
      uint64_t v75 = v31;
      MEMORY[0x270FA5388](v76, v39);
      int64_t v25 = &v59 - 10;
      uint64_t v42 = (uint64_t)v69;
      *(&v59 - 8) = (uint64_t)v69;
      *(&v59 - 7) = v35;
      *(&v59 - 6) = v66;
      *(&v59 - 5) = v34;
      *(&v59 - 4) = (uint64_t)&v76;
      *(&v59 - 3) = v32;
      *(&v59 - 2) = (uint64_t)v24;
      uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
      uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      unint64_t v45 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
      uint64_t v46 = v67;
      uint64_t v47 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Array<A>.init<A>(from:parameter:), (uint64_t)(&v59 - 10), v43, v42, v44, v45, MEMORY[0x263F8E4E0], (uint64_t)&v80);
      if (!v46)
      {
        uint64_t v74 = v47;
        type metadata accessor for Array();
        swift_getWitnessTable();
        int64_t v25 = (uint64_t *)Array.init<A>(_:)();
      }
      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v73, v62);
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v72, v35);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v24, v64);
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v76 = 0;
      unint64_t v77 = 0xE000000000000000;
      _StringGuts.grow(_:)(36);
      type metadata accessor for Array();
      uint64_t v48 = _typeName(_:qualified:)();
      uint64_t v69 = v24;
      unint64_t v50 = v49;
      swift_bridgeObjectRelease();
      uint64_t v76 = v48;
      unint64_t v77 = v50;
      v51._object = (void *)0x8000000260BFF3B0;
      v51._countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v51);
      uint64_t v74 = v31;
      v52._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v52);
      swift_bridgeObjectRelease();
      v53._countAndFlagsBits = 2107936;
      v53._object = (void *)0xE300000000000000;
      String.append(_:)(v53);
      uint64_t v74 = v32;
      v54._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v54);
      swift_bridgeObjectRelease();
      v55._countAndFlagsBits = 0x203A746F67202CLL;
      v55._object = (void *)0xE700000000000000;
      String.append(_:)(v55);
      uint64_t v74 = dispatch thunk of Collection.count.getter();
      v56._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v56);
      swift_bridgeObjectRelease();
      int64_t v25 = (uint64_t *)v76;
      unint64_t v57 = v77;
      lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
      swift_allocError();
      *int64_t v58 = v25;
      v58[1] = (uint64_t *)v57;
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v73, v62);
      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v36, v35);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v69, v64);
    }
    return (uint64_t)v25;
  }
  __break(1u);
  return result;
}

char *protocol witness for VDAFEncodable.encodedBytes.getter in conformance UInt32(uint64_t a1, uint64_t a2)
{
  return protocol witness for VDAFEncodable.encodedBytes.getter in conformance UInt32(a1, a2, (void (*)(char **, uint64_t))specialized VDAFCodableFixedWidthInteger.encode<A>(into:));
}

char *protocol witness for VDAFEncodable.encodedBytes.getter in conformance UInt64()
{
  unint64_t v1 = *v0;
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 8, 0, MEMORY[0x263F8EE78]);
  specialized VDAFCodableFixedWidthInteger.encode<A>(into:)((uint64_t *)&v3, v1);
  return v3;
}

char *protocol witness for VDAFEncodable.encodedBytes.getter in conformance _UInt128()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 16, 0, MEMORY[0x263F8EE78]);
  specialized encodeInteger<A, B>(_:into:encodedLength:)(v1, v2, (uint64_t *)&v4, 16);
  return v4;
}

uint64_t Collection<>.encode<A>(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v36 = a5;
  uint64_t v37 = a6;
  uint64_t v34 = a1;
  uint64_t v35 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness, v9);
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v14 = MEMORY[0x270FA5388](v12 - 8, v13);
  uint64_t v16 = (char *)&v30 - v15;
  uint64_t v17 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v14, v18);
  uint64_t v20 = (char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = swift_getAssociatedTypeWitness();
  uint64_t v32 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21, v22);
  uint64_t v24 = (char *)&v30 - v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v6, a2);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v38 = v24;
  uint64_t v39 = v21;
  uint64_t v33 = AssociatedConformanceWitness;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v26 = v31;
  uint64_t v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
  if (v27(v16, 1, AssociatedTypeWitness) != 1)
  {
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    do
    {
      v28(v11, v16, AssociatedTypeWitness);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 24))(v34, v35, v36, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v11, AssociatedTypeWitness);
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v27(v16, 1, AssociatedTypeWitness) != 1);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v38, v39);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance VDAFCodableError()
{
  return specialized static VDAFErrorProtocol.== infix(_:_:)();
}

uint64_t closure #1 in Array<A>.init<A>(from:parameter:)@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>, void *a7)
{
  uint64_t v35 = a5;
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  uint64_t v38 = a6;
  swift_getAssociatedTypeWitness();
  uint64_t v34 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34, v10);
  uint64_t v33 = (char *)&v31 - v11;
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  uint64_t v15 = a1[2];
  uint64_t v14 = a1[3];
  uint64_t v16 = specialized Collection.prefix(_:)(a2, *a1, v13, v15, v14);
  uint64_t v31 = v17;
  uint64_t v32 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  *a1 = specialized Collection.dropFirst(_:)(a2, v12, v13, v15, v14);
  a1[1] = v22;
  a1[2] = v23;
  a1[3] = v24;
  int64_t v25 = v33;
  v39[0] = v32;
  v39[1] = v19;
  v39[2] = v21;
  v39[3] = v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v33, v36, v34);
  uint64_t v26 = *(uint64_t (**)(void *, char *, uint64_t, uint64_t))(v35 + 24);
  swift_unknownObjectRetain();
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<UInt8>);
  uint64_t v28 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<UInt8> and conformance ArraySlice<A>, &demangling cache variable for type metadata for ArraySlice<UInt8>);
  uint64_t v29 = v39[5];
  uint64_t result = v26(v39, v25, v27, v28);
  if (v29) {
    *a7 = v29;
  }
  return result;
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance <A> [A]@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t result = Array<A>.init<A>(from:parameter:)(a1, a2, *(void *)(a5 + 16), a3, *(void *)(a6 - 8), a4);
  if (!v7) {
    *a7 = result;
  }
  return result;
}

uint64_t Collection<>.encodedLength.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5, v7);
  uint64_t v9 = (char *)&v14 - v8;
  Collection.first.getter();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(AssociatedTypeWitness, a3);
    uint64_t v6 = v10;
    uint64_t v5 = AssociatedTypeWitness;
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  uint64_t v12 = dispatch thunk of Collection.count.getter();
  uint64_t result = v11 * v12;
  if ((unsigned __int128)(v11 * (__int128)v12) >> 64 != (v11 * v12) >> 63) {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for VDAFEncodable.encodedLength.getter in conformance <A> [A](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  uint64_t WitnessTable = swift_getWitnessTable();

  return Collection<>.encodedLength.getter(a1, WitnessTable, v3);
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance <A> [A](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a5 - 8);
  uint64_t WitnessTable = swift_getWitnessTable();

  return Collection<>.encode<A>(into:)(a1, a4, a2, WitnessTable, a3, v9);
}

uint64_t protocol witness for VDAFEncodable.encodedLength.getter in conformance <A> ArraySlice<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  uint64_t WitnessTable = swift_getWitnessTable();

  return Collection<>.encodedLength.getter(a1, WitnessTable, v3);
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance <A> ArraySlice<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a5 - 8);
  uint64_t WitnessTable = swift_getWitnessTable();

  return Collection<>.encode<A>(into:)(a1, a4, a2, WitnessTable, a3, v9);
}

uint64_t VoidCodable.encodedLength.getter()
{
  return 0;
}

uint64_t VoidCodable.init<A>(from:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
}

uint64_t static VoidCodable.== infix(_:_:)()
{
  return 1;
}

Swift::Int VoidCodable.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance VoidCodable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return VoidCodable.init<A>(from:parameter:)(a1, a2, a3);
}

char *protocol witness for VDAFEncodable.encodedBytes.getter in conformance VoidCodable()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0, MEMORY[0x263F8EE78]);
}

uint64_t protocol witness for VDAFEncodable.encodedLength.getter in conformance VoidCodable()
{
  return 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance VoidCodable()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance VoidCodable()
{
  return Hasher._finalize()();
}

char *protocol witness for VDAFEncodable.encodedBytes.getter in conformance Field32(uint64_t a1, uint64_t a2)
{
  return protocol witness for VDAFEncodable.encodedBytes.getter in conformance UInt32(a1, a2, (void (*)(char **, uint64_t))specialized FieldElement.encode<A>(into:));
}

char *protocol witness for VDAFEncodable.encodedBytes.getter in conformance UInt32(uint64_t a1, uint64_t a2, void (*a3)(char **, uint64_t))
{
  uint64_t v5 = *v3;
  uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 4, 0, MEMORY[0x263F8EE78]);
  a3(&v7, v5);
  return v7;
}

char *protocol witness for VDAFEncodable.encodedBytes.getter in conformance Field40()
{
  return specialized VDAFEncodable.encodedBytes.getter(*v0);
}

char *protocol witness for VDAFEncodable.encodedBytes.getter in conformance Field64()
{
  return specialized VDAFEncodable.encodedBytes.getter(*v0);
}

char *protocol witness for VDAFEncodable.encodedBytes.getter in conformance Field128()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 16, 0, MEMORY[0x263F8EE78]);
  specialized FieldElement.integerValue.getter(v1, v2, v4);
  specialized encodeInteger<A, B>(_:into:encodedLength:)(v4[0], v4[1], (uint64_t *)&v5, 16);
  return v5;
}

char *protocol witness for VDAFEncodable.encodedBytes.getter in conformance Prio3PrepareMessage()
{
  return specialized VDAFEncodable.encodedBytes.getter(*v0);
}

uint64_t specialized static FixedWidthInteger._truncatingInit<A>(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  a2[1] = 0;
  return result;
}

{
  *a2 = result;
  a2[1] = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

uint64_t partial apply for closure #1 in Array<A>.init<A>(from:parameter:)@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  return closure #1 in Array<A>.init<A>(from:parameter:)(*(void **)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 16), *(void *)(v2 + 32), a2, a1);
}

unint64_t instantiation function for generic protocol witness table for VDAFCodableError(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
  unint64_t result = lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type VoidCodable and conformance VoidCodable()
{
  unint64_t result = lazy protocol witness table cache variable for type VoidCodable and conformance VoidCodable;
  if (!lazy protocol witness table cache variable for type VoidCodable and conformance VoidCodable)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoidCodable and conformance VoidCodable);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VoidCodable and conformance VoidCodable;
  if (!lazy protocol witness table cache variable for type VoidCodable and conformance VoidCodable)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VoidCodable and conformance VoidCodable);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for VDAFCodableError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for VDAFCodableError()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for VDAFCodableError(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for VDAFCodableError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for VDAFCodableError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for VDAFCodableError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t getEnumTag for VDAFCodableError(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for VDAFCodableError(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for VDAFCodableError()
{
  return &type metadata for VDAFCodableError;
}

uint64_t dispatch thunk of VDAFDecodable.init<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of VDAFDecodable.init<A>(from:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t dispatch thunk of VDAFEncodable.encodedBytes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of VDAFEncodable.encodedLength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of VDAFEncodable.encode<A>(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

ValueMetadata *type metadata accessor for VoidCodable()
{
  return &type metadata for VoidCodable;
}

void static WraparoundJointRandomness.partUsage.getter(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

void static WraparoundJointRandomness.seedUsage.getter(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

void static WraparoundJointRandomness.randomnessUsage.getter(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t WraparoundJointRandomness.parts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t WraparoundJointRandomness.seed.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t WraparoundJointRandomness.xof.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t WraparoundJointRandomness.__allocating_init(parts:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  WraparoundJointRandomness.init(parts:)(a1);
  return v2;
}

uint64_t WraparoundJointRandomness.init(parts:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)v1;
  uint64_t v5 = *(void *)v1;
  *(void *)(v1 + 40) = 0;
  *(unsigned char *)(v1 + 48) = 0;
  *(void *)(v1 + 16) = a1;
  uint64_t v6 = v5;
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v8 = static JointRandomness.jointRandSeed(parts:)(a1, v6, WitnessTable);
  swift_bridgeObjectRelease();
  *(void *)(v2 + 24) = v8;
  uint64_t v9 = *(void *)(v4 + 96);
  uint64_t v10 = *(void *)(v4 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  char v17 = 7;
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 240);
  swift_bridgeObjectRetain();
  uint64_t v13 = v12(&v17, v10, v9);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v15 = static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(v8, v13, MEMORY[0x263F8EE78], AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = v15;
  return v2;
}

Swift::Void __swiftcall WraparoundJointRandomness.flushBitsLeft()()
{
  *(void *)(v0 + 40) = 0;
}

Swift::Int __swiftcall WraparoundJointRandomness.next()()
{
  uint64_t v1 = *(void *)(v0 + 40);
  if (!v1)
  {
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
    uint64_t v4 = swift_checkMetadataState();
    Swift::Int result = v3(v4, AssociatedConformanceWitness);
    *(unsigned char *)(v0 + 48) = result;
    uint64_t v1 = 8;
    *(void *)(v0 + 40) = 8;
  }
  BOOL v6 = __OFSUB__(v1, 2);
  uint64_t v7 = v1 - 2;
  if (v6)
  {
    __break(1u);
  }
  else
  {
    unsigned int v8 = *(unsigned __int8 *)(v0 + 48);
    *(void *)(v0 + 40) = v7;
    *(unsigned char *)(v0 + 48) = v8 >> 2;
    if ((v8 & 3) != 0) {
      return (v8 & 3) == 3;
    }
    else {
      return -1;
    }
  }
  return result;
}

uint64_t WraparoundJointRandomness.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t WraparoundJointRandomness.__deallocating_deinit()
{
  WraparoundJointRandomness.deinit();

  return swift_deallocClassInstance();
}

void protocol witness for static JointRandomness.partUsage.getter in conformance WraparoundJointRandomness<A, B>(unsigned char *a1@<X8>)
{
}

void protocol witness for static JointRandomness.seedUsage.getter in conformance WraparoundJointRandomness<A, B>(unsigned char *a1@<X8>)
{
}

void protocol witness for static JointRandomness.randomnessUsage.getter in conformance WraparoundJointRandomness<A, B>(unsigned char *a1@<X8>)
{
}

uint64_t protocol witness for JointRandomness.seed.getter in conformance WraparoundJointRandomness<A, B>()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for JointRandomness.xof.getter in conformance WraparoundJointRandomness<A, B>()
{
  return swift_unknownObjectRetain();
}

Swift::Int protocol witness for JointRandomness.next() in conformance WraparoundJointRandomness<A, B>@<X0>(Swift::Int *a1@<X8>)
{
  Swift::Int result = WraparoundJointRandomness.next()();
  *a1 = result;
  return result;
}

uint64_t type metadata completion function for WraparoundJointRandomness()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for WraparoundJointRandomness()
{
  return swift_getGenericMetadata();
}

uint64_t method lookup function for WraparoundJointRandomness(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for WraparoundJointRandomness);
}

uint64_t dispatch thunk of WraparoundJointRandomness.__allocating_init(parts:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

void *one-time initialization function for cache()
{
  Swift::Int result = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  static BitReversal.cache = result;
  return result;
}

uint64_t one-time initialization function for lock()
{
  type metadata accessor for Lock();
  uint64_t v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(void *)(v0 + 16) = result;
  static BitReversal.lock = (_UNKNOWN *)v0;
  return result;
}

uint64_t *closure #2 in static BitReversal.indicesFor(_:)(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *result;
  *(void *)(*result + 8) = a2;
  if (a3 >= 0) {
    uint64_t v4 = a3;
  }
  else {
    uint64_t v4 = a3 + 1;
  }
  if (a3 < 2)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  if ((a3 & 0xFFFFFFFFFFFFFFFELL) != 2)
  {
    uint64_t v5 = v4 >> 1;
    BOOL v6 = (void *)(v3 + 24);
    uint64_t v7 = v5 - 1;
    for (unint64_t i = 0xC000000000000001; i; ++i)
    {
      uint64_t v9 = *(uint64_t *)(v3 + 8 * i) >> 1;
      *(v6 - 1) = v9;
      BOOL v10 = __OFADD__(v9, a2);
      uint64_t v11 = v9 + a2;
      if (v10) {
        goto LABEL_12;
      }
      void *v6 = v11;
      v6 += 2;
      if (!--v7) {
        return result;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  return result;
}

uint64_t BitReversal.deinit()
{
  return v0;
}

uint64_t BitReversal.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t BitReversal.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t BitReversal.init()()
{
  return v0;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, [Int]>);
  char v34 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v33 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v20 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v21 = v20 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1)) {
          goto LABEL_40;
        }
        if (v8 >= v13)
        {
LABEL_31:
          if ((v34 & 1) == 0)
          {
            uint64_t result = swift_release();
            uint64_t v3 = v33;
            goto LABEL_38;
          }
          uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
          if (v32 >= 64) {
            bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          }
          else {
            *uint64_t v9 = -1 << v32;
          }
          uint64_t v3 = v33;
          *(void *)(v5 + 16) = 0;
          break;
        }
        unint64_t v23 = v9[v8];
        if (!v23)
        {
          int64_t v24 = v8 + 1;
          if (v8 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v23 = v9[v24];
          if (!v23)
          {
            while (1)
            {
              int64_t v8 = v24 + 1;
              if (__OFADD__(v24, 1)) {
                break;
              }
              if (v8 >= v13) {
                goto LABEL_31;
              }
              unint64_t v23 = v9[v8];
              ++v24;
              if (v23) {
                goto LABEL_20;
              }
            }
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_20:
        unint64_t v12 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v8 << 6);
      }
      uint64_t v25 = 8 * v21;
      uint64_t v26 = *(void *)(*(void *)(v5 + 48) + v25);
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + v25);
      if ((v34 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v30 = v17 == v29;
          if (v17 == v29) {
            unint64_t v17 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v17);
        }
        while (v31 == -1);
        unint64_t v18 = __clz(__rbit64(~v31)) + (v17 << 6);
      }
      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = 8 * v18;
      *(void *)(*(void *)(v7 + 48) + v19) = v26;
      *(void *)(*(void *)(v7 + 56) + v19) = v27;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 < result || (a3 & 1) == 0)
  {
    if (v15 < result || (a3 & 1) != 0)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
      uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
      if ((v14 & 1) != (v17 & 1))
      {
LABEL_17:
        uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      unint64_t v10 = result;
      unint64_t v16 = (void *)*v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
  }
  unint64_t v16 = (void *)*v4;
  if ((v14 & 1) == 0)
  {
LABEL_13:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    uint64_t v18 = 8 * v10;
    *(void *)(v16[6] + v18) = a2;
    *(void *)(v16[7] + v18) = a1;
    uint64_t v19 = v16[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_16;
  }
LABEL_8:
  *(void *)(v16[7] + 8 * v10) = a1;

  return swift_bridgeObjectRelease();
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, [Int]>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_24:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v9++, 1)) {
      goto LABEL_26;
    }
    if (v9 >= v13) {
      goto LABEL_24;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    if (!v19) {
      break;
    }
LABEL_23:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v20 = v9 + 1;
  if (v9 + 1 >= v13) {
    goto LABEL_24;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    ++v9;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_24;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return MEMORY[0x263F8EE80];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, [Int]>);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v5 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v8 = a1 + 7;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v3[6] + v9) = v5;
    *(void *)(v3[7] + v9) = v4;
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      break;
    }
    v3[2] = v12;
    if (!--v1) {
      goto LABEL_8;
    }
    int64_t v13 = v8 + 2;
    uint64_t v5 = *(v8 - 1);
    uint64_t v14 = *v8;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    uint64_t v8 = v13;
    uint64_t v4 = v14;
    if (v15) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

void specialized static BitReversal.indicesFor(_:)(uint64_t a1)
{
  if (a1 != 1)
  {
    if (one-time initialization token for lock != -1) {
      swift_once();
    }
    uint64_t v2 = (os_unfair_lock_s *)(*((void *)static BitReversal.lock + 2) + 16);
    os_unfair_lock_lock(v2);
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v3 = static BitReversal.cache;
    if (*((void *)static BitReversal.cache + 2)
      && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v5 & 1) != 0))
    {
      uint64_t v6 = *(void *)(v3[7] + 8 * v4);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v6 = 0;
    }
    swift_endAccess();
    os_unfair_lock_unlock(v2);
    if (!v6)
    {
      if (a1 < 0)
      {
        __break(1u);
      }
      else
      {
        if (a1)
        {
          uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          *(void *)(v7 + 16) = a1;
          bzero((void *)(v7 + 32), 8 * a1);
          uint64_t v8 = a1;
        }
        else
        {
          uint64_t v7 = MEMORY[0x263F8EE78];
          uint64_t v8 = *(void *)(MEMORY[0x263F8EE78] + 16);
        }
        v12[0] = v7 + 32;
        v12[1] = v8;
        closure #2 in static BitReversal.indicesFor(_:)(v12, a1 >> 1, a1);
        if ((unint64_t)a1 <= 0x400)
        {
          uint64_t v9 = (os_unfair_lock_s *)(*((void *)static BitReversal.lock + 2) + 16);
          os_unfair_lock_lock(v9);
          swift_beginAccess();
          swift_bridgeObjectRetain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          BOOL v11 = static BitReversal.cache;
          static BitReversal.cache = (_UNKNOWN *)0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v7, a1, isUniquelyReferenced_nonNull_native);
          static BitReversal.cache = v11;
          swift_bridgeObjectRelease();
          swift_endAccess();
          os_unfair_lock_unlock(v9);
        }
      }
    }
  }
}

uint64_t type metadata accessor for BitReversal()
{
  return self;
}

uint64_t method lookup function for BitReversal(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for BitReversal);
}

uint64_t dispatch thunk of BitReversal.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t static Share.== infix(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if ((a2 & 1) == 0)
  {
    if ((a4 & 1) == 0) {
      return static Array<A>.== infix(_:_:)();
    }
    return 0;
  }
  if ((a4 & 1) == 0) {
    return 0;
  }
  return specialized static Array<A>.== infix(_:_:)(a1, a3);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Share<A>(uint64_t a1, uint64_t a2)
{
  return static Share.== infix(_:_:)(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

uint64_t ShareDecodableParameter.encodedLength.getter(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  if (a2) {
    return a1;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 64))(a3, a4);
  uint64_t v6 = (unsigned __int128)(result * (__int128)a1) >> 64;
  a1 *= result;
  if (v6 == a1 >> 63) {
    return a1;
  }
  __break(1u);
  return result;
}

uint64_t static ShareDecodableParameter.== infix(_:_:)(uint64_t a1, int a2, uint64_t a3, char a4)
{
  return (((a4 & 1) == 0) ^ a2) & (a1 == a3);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ShareDecodableParameter<A>(uint64_t a1, uint64_t a2)
{
  return static ShareDecodableParameter.== infix(_:_:)(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

uint64_t Share.init<A>(from:parameter:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = a1;
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!v17)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *uint64_t v25 = 0;
    v25[1] = 0;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, a5);
    return v10;
  }
  uint64_t v47 = v13;
  uint64_t v48 = v14;
  uint64_t v18 = v12;
  uint64_t v49 = v10;
  uint64_t v50 = v11;
  uint64_t v19 = dispatch thunk of Collection.count.getter();
  uint64_t v20 = v19;
  if (a3)
  {
    if (v19 == v18)
    {
      uint64_t v26 = v49;
      uint64_t v10 = specialized Seed.init<A>(from:parameter:)(v49);
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v26, a5);
    }
    else
    {
      uint64_t v51 = 0;
      unint64_t v52 = 0xE000000000000000;
      uint64_t v27 = v18;
      _StringGuts.grow(_:)(51);
      v28._object = (void *)0x8000000260BFED60;
      v28._countAndFlagsBits = 0xD000000000000022;
      String.append(_:)(v28);
      uint64_t v29 = v49;
      uint64_t v53 = dispatch thunk of Collection.count.getter();
      v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31._countAndFlagsBits = 0x65707865203D2120;
      v31._object = (void *)0xED00003D64657463;
      String.append(_:)(v31);
      uint64_t v53 = v27;
      v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      uint64_t v33 = v51;
      uint64_t v10 = v52;
      lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
      swift_allocError();
      *char v34 = v33;
      v34[1] = v10;
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v29, a5);
    }
    return v10;
  }
  uint64_t v46 = a5;
  unint64_t v45 = *(uint64_t (**)(void))(v48 + 64);
  uint64_t result = v45();
  if ((unsigned __int128)(v18 * (__int128)result) >> 64 == (v18 * result) >> 63)
  {
    if (v20 == v18 * result)
    {
      uint64_t v23 = v49;
      uint64_t v22 = v50;
      uint64_t v24 = v46;
      (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v16, v49, v46);
      uint64_t v10 = Array<A>.init<A>(from:)((uint64_t)v16, v47, v24, v48, a7);
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v24);
    }
    else
    {
      uint64_t v51 = 0;
      unint64_t v52 = 0xE000000000000000;
      _StringGuts.grow(_:)(56);
      v35._object = (void *)0x8000000260BFED90;
      v35._countAndFlagsBits = 0xD000000000000022;
      String.append(_:)(v35);
      uint64_t v36 = v49;
      uint64_t v37 = v46;
      uint64_t v53 = dispatch thunk of Collection.count.getter();
      v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      v39._countAndFlagsBits = 2107936;
      v39._object = (void *)0xE300000000000000;
      String.append(_:)(v39);
      uint64_t v53 = v45();
      v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      v41._countAndFlagsBits = 0x65707865203D2120;
      v41._object = (void *)0xED00003D64657463;
      String.append(_:)(v41);
      uint64_t v53 = v18;
      v42._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      uint64_t v43 = v51;
      uint64_t v10 = v52;
      lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
      swift_allocError();
      *uint64_t v44 = v43;
      v44[1] = v10;
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v36, v37);
    }
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance Share<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t result = Share.init<A>(from:parameter:)(a1, *(void *)a2, *(unsigned char *)(a2 + 8), *(void *)(a5 + 16), a3, *(void *)(a5 + 24), a4);
  if (!v6)
  {
    *(void *)a6 = result;
    *(unsigned char *)(a6 + 8) = v9 & 1;
  }
  return result;
}

uint64_t Share.encodedLength.getter(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  if (a2) {
    return *(void *)(a1 + 16);
  }
  uint64_t v5 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  return Collection<>.encodedLength.getter(v5, WitnessTable, *(void *)(a4 + 40));
}

uint64_t Share.encode<A>(into:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3)
  {
    return Seed.encode<A>(into:)();
  }
  else
  {
    uint64_t v11 = type metadata accessor for Array();
    uint64_t WitnessTable = swift_getWitnessTable();
    return Collection<>.encode<A>(into:)(a1, v11, a5, WitnessTable, a7, *(void *)(a6 + 40));
  }
}

uint64_t protocol witness for VDAFEncodable.encodedLength.getter in conformance Share<A>(uint64_t a1)
{
  return Share.encodedLength.getter(*(void *)v1, *(unsigned char *)(v1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance Share<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Share.encode<A>(into:)(a1, *(void *)v4, *(unsigned char *)(v4 + 8), *(void *)(a4 + 16), a2, *(void *)(a4 + 24), a3);
}

uint64_t type metadata instantiation function for Share(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 16);
}

uint64_t initializeBufferWithCopyOfBuffer for Share(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for Share()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for Share(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for Share(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for Share()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for Share(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Share(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for ShareDecodableParameter(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t destructiveInjectEnumTag for ShareDecodableParameter(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

uint64_t type metadata accessor for ShareDecodableParameter()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t OutputShare.init<A>(from:parameter:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v17);
  uint64_t v18 = Array<A>.init<A>(from:)((uint64_t)v16, a3, a4, a5, a6);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, a4);
  if (!v7) {
    *a7 = v18;
  }
  return result;
}

uint64_t static OutputShare.== infix(_:_:)()
{
  return static Array<A>.== infix(_:_:)();
}

uint64_t OutputShare.encodedLength.getter(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = MEMORY[0x2612241C0](v3, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 64))(v4);
  uint64_t result = v5 * v6;
  if ((unsigned __int128)(v5 * (__int128)v6) >> 64 != (v5 * v6) >> 63) {
    __break(1u);
  }
  return result;
}

uint64_t OutputShare.encode<A>(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  return Collection<>.encode<A>(into:)(a1, v8, a3, WitnessTable, a4, *(void *)(*(void *)(a2 + 24) + 40));
}

uint64_t OutputShare.share.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t OutputShare.init(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance OutputShare<A>()
{
  return static OutputShare.== infix(_:_:)();
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance OutputShare<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  return OutputShare.init<A>(from:parameter:)(a1, a2, *(void *)(a5 + 16), a3, *(void *)(a5 + 24), a4, a6);
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance OutputShare<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OutputShare.encode<A>(into:)(a1, a4, a2, a3);
}

uint64_t type metadata accessor for OutputShare()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t PINEInputShare.measurementShare.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PINEInputShare.proofShare.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PINEInputShare.wraparoundJointRandBlind.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PINEInputShare.verificationJointRandBlind.getter()
{
  return swift_bridgeObjectRetain();
}

BOOL static PINEInputShare.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  if ((static Share.== infix(_:_:)(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8)) & 1) == 0
    || (static Share.== infix(_:_:)(v2, v3, v6, v7) & 1) == 0
    || !specialized static Array<A>.== infix(_:_:)(v5, v9))
  {
    return 0;
  }

  return specialized static Array<A>.== infix(_:_:)(v4, v8);
}

uint64_t PINEInputShare.init(measurementShare:proofShare:wraparoundJointRandBlind:verificationJointRandBlind:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(void *)a7 = result;
  *(unsigned char *)(a7 + 8) = a2 & 1;
  *(void *)(a7 + 16) = a3;
  *(unsigned char *)(a7 + 24) = a4 & 1;
  *(void *)(a7 + 32) = a5;
  *(void *)(a7 + 40) = a6;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PINEInputShare<A, B>(uint64_t a1, uint64_t a2)
{
  return static PINEInputShare.== infix(_:_:)(a1, a2);
}

uint64_t PINEInputShare.DecodableParameter.measurement.getter()
{
  return *(void *)v0;
}

uint64_t PINEInputShare.DecodableParameter.proof.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t PINEInputShare.DecodableParameter.encodedLength.getter(void *a1)
{
  uint64_t v3 = *(void *)v1;
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  char v6 = *(unsigned char *)(v1 + 24);
  uint64_t v7 = a1[2];
  uint64_t v8 = a1[4];
  uint64_t v9 = ShareDecodableParameter.encodedLength.getter(v3, v4, v7, v8);
  uint64_t result = ShareDecodableParameter.encodedLength.getter(v5, v6, v7, v8);
  uint64_t v11 = v9 + result;
  if (__OFADD__(v9, result))
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t result = (*(uint64_t (**)(void))(a1[5] + 8))();
  if (result + 0x4000000000000000 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  BOOL v12 = __OFADD__(v11, 2 * result);
  uint64_t result = v11 + 2 * result;
  if (v12) {
LABEL_7:
  }
    __break(1u);
  return result;
}

uint64_t PINEInputShare.DecodableParameter.init<A>(vdaf:aggregatorID:)@<X0>(uint64_t a1@<X0>, Swift::Int a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for PINE();
  swift_getWitnessTable();
  Swift::Bool v11 = VDAFProtocol.isLeaderAggregatorID(_:)(a2);
  if (v12) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
  }
  Swift::Bool v14 = v11;
  if (v11)
  {
    uint64_t v15 = PINE.measurementShareLength.getter(v10);
    char v21 = 0;
    uint64_t v16 = PINE.proofLength.getter(v10);
  }
  else
  {
    Swift::Bool v22 = v11;
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 8);
    uint64_t v18 = v17(a3, a4);
    char v21 = 1;
    uint64_t v19 = a4;
    uint64_t v15 = v18;
    uint64_t v16 = v17(a3, v19);
    Swift::Bool v14 = v22;
  }
  uint64_t v20 = v16;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
  *(void *)a5 = v15;
  *(unsigned char *)(a5 + 8) = v21;
  *(void *)(a5 + 16) = v20;
  *(unsigned char *)(a5 + 24) = !v14;
  return result;
}

uint64_t PINEInputShare.init<A>(from:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v152 = a6;
  uint64_t v143 = a3;
  uint64_t v12 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v17 = (char *)&v127 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(unsigned __int8 *)(v13 + 8);
  if (v18 == 255)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *uint64_t v19 = 0;
    v19[1] = 0;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(a1, a5);
  }
  unint64_t v135 = v15;
  uint64_t v136 = v7;
  uint64_t v138 = a1;
  uint64_t v139 = v12;
  uint64_t v21 = *(void *)v13;
  uint64_t v22 = *(void *)(v13 + 16);
  uint64_t v23 = v18 & 1;
  int v24 = *(unsigned char *)(v13 + 24) & 1;
  uint64_t v25 = *(void *)(*(void *)(v14 + 8) + 8);
  uint64_t v140 = a5;
  uint64_t v137 = (uint64_t (*)(unint64_t, uint64_t))v25;
  uint64_t v26 = dispatch thunk of Collection.count.getter();
  uint64_t v141 = v23;
  uint64_t v142 = v21;
  uint64_t v147 = a7;
  uint64_t v148 = v21;
  LOBYTE(v149) = v23;
  uint64_t v27 = v22;
  uint64_t v150 = v22;
  char v151 = v24;
  uint64_t v144 = v143;
  unint64_t v145 = a4;
  uint64_t v146 = v152;
  Swift::String v28 = (void *)type metadata accessor for PINEInputShare.DecodableParameter();
  if (v26 != PINEInputShare.DecodableParameter.encodedLength.getter(v28))
  {
    BOOL v54 = v141 != 0;
    uint64_t v144 = 0;
    unint64_t v145 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    uint64_t v144 = v143;
    unint64_t v145 = a4;
    uint64_t v146 = v152;
    uint64_t v147 = a7;
    type metadata accessor for PINEInputShare();
    uint64_t v55 = _typeName(_:qualified:)();
    uint64_t v56 = v139;
    unint64_t v57 = v28;
    uint64_t v59 = v58;
    swift_bridgeObjectRelease();
    uint64_t v148 = v55;
    uint64_t v149 = v59;
    v60._countAndFlagsBits = 0x6572697571657220;
    v60._object = (void *)0xEB00000000203A64;
    String.append(_:)(v60);
    uint64_t v144 = v142;
    LOBYTE(v145) = v54;
    uint64_t v146 = v27;
    LOBYTE(v147) = v24 != 0;
    uint64_t v144 = PINEInputShare.DecodableParameter.encodedLength.getter(v57);
    v61._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v61);
    swift_bridgeObjectRelease();
    v62._countAndFlagsBits = 0x203A746F67202CLL;
    v62._object = (void *)0xE700000000000000;
    String.append(_:)(v62);
    uint64_t v63 = v138;
    uint64_t v64 = v140;
    uint64_t v144 = dispatch thunk of Collection.count.getter();
    v65._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v65);
    swift_bridgeObjectRelease();
    uint64_t v66 = v148;
    uint64_t v67 = v149;
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *uint64_t v68 = v66;
    v68[1] = v67;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 8))(v63, v64);
  }
  int v133 = v24;
  uint64_t v134 = v27;
  unint64_t v130 = a4;
  uint64_t v131 = a7;
  (*(void (**)(char *, uint64_t, uint64_t))(v139 + 16))(v17, v138, v140);
  uint64_t v29 = ArraySlice.init<A>(_:)();
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v36 = ShareDecodableParameter.encodedLength.getter(v142, v141, v143, v152);
  uint64_t v37 = specialized Collection.prefix(_:)(v36, v29, v31, v33, v35);
  unint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  uint64_t v44 = specialized Collection.dropFirst(_:)(v36, v29, v31, v33, v35);
  uint64_t v46 = v45;
  uint64_t v137 = (uint64_t (*)(unint64_t, uint64_t))v47;
  uint64_t v132 = v48;
  uint64_t v144 = v37;
  unint64_t v145 = v39;
  uint64_t v146 = v41;
  uint64_t v147 = v43;
  swift_unknownObjectRetain();
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<UInt8>);
  unint64_t v50 = lazy protocol witness table accessor for type ArraySlice<UInt8> and conformance ArraySlice<A>();
  uint64_t v51 = v136;
  uint64_t v52 = Share.init<A>(from:parameter:)((uint64_t)&v144, v142, v141, v143, v49, v152, v50);
  if (v51)
  {
    (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v138, v140);
    return swift_unknownObjectRelease();
  }
  uint64_t v69 = v52;
  int v129 = v53;
  swift_bridgeObjectRetain();
  uint64_t v70 = ShareDecodableParameter.encodedLength.getter(v134, v133, v143, v152);
  uint64_t v136 = v69;
  uint64_t v71 = v70;
  uint64_t v72 = (uint64_t)v137;
  uint64_t v73 = v132;
  uint64_t v74 = specialized Collection.prefix(_:)(v70, v44, v46, v137, v132);
  uint64_t v141 = v75;
  uint64_t v142 = v74;
  unint64_t v77 = v76;
  uint64_t v78 = v46;
  uint64_t v80 = v79;
  uint64_t v81 = specialized Collection.dropFirst(_:)(v71, v44, v78, v72, v73);
  uint64_t v83 = v82;
  uint64_t v85 = v84;
  uint64_t v137 = (uint64_t (*)(unint64_t, uint64_t))v86;
  uint64_t v144 = v142;
  unint64_t v145 = v77;
  uint64_t v146 = v141;
  uint64_t v147 = v80;
  swift_unknownObjectRetain();
  uint64_t v87 = Share.init<A>(from:parameter:)((uint64_t)&v144, v134, v133, v143, v49, v152, v50);
  int v133 = v88;
  uint64_t v89 = v131;
  uint64_t v90 = v131 + 8;
  uint64_t v91 = *(uint64_t (**)(unint64_t, uint64_t))(v131 + 8);
  uint64_t v132 = v87;
  swift_bridgeObjectRetain();
  unint64_t v92 = v130;
  uint64_t v134 = v90;
  uint64_t v93 = v91(v130, v89);
  uint64_t v94 = (uint64_t)v137;
  uint64_t v95 = specialized Collection.prefix(_:)(v93, v81, v83, v85, v137);
  uint64_t v128 = v96;
  uint64_t v152 = v97;
  uint64_t v98 = v83;
  unint64_t v100 = v99;
  uint64_t v101 = specialized Collection.dropFirst(_:)(v93, v81, v98, v85, v94);
  uint64_t v142 = v103;
  uint64_t v143 = v102;
  uint64_t v141 = v104;
  if ((v100 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_9:
    specialized _copyCollectionToContiguousArray<A>(_:)(v95, v128, v152, v100);
    uint64_t v106 = v105;
    uint64_t v107 = v131;
    goto LABEL_16;
  }
  uint64_t v137 = v91;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  uint64_t v108 = swift_dynamicCastClass();
  if (!v108)
  {
    swift_unknownObjectRelease();
    uint64_t v108 = MEMORY[0x263F8EE78];
  }
  uint64_t v109 = *(void *)(v108 + 16);
  swift_release();
  uint64_t v107 = v131;
  if (__OFSUB__(v100 >> 1, v152))
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v109 != (v100 >> 1) - v152)
  {
LABEL_27:
    swift_unknownObjectRelease();
    unint64_t v92 = v130;
    uint64_t v91 = v137;
    goto LABEL_9;
  }
  uint64_t v106 = swift_dynamicCastClass();
  unint64_t v92 = v130;
  uint64_t v91 = v137;
  if (!v106)
  {
    swift_unknownObjectRelease();
    uint64_t v106 = MEMORY[0x263F8EE78];
  }
LABEL_16:
  swift_unknownObjectRelease();
  uint64_t v152 = v106;
  swift_bridgeObjectRetain();
  uint64_t v110 = v91(v92, v107);
  uint64_t v111 = v142;
  uint64_t v112 = v143;
  uint64_t v113 = v141;
  uint64_t v114 = specialized Collection.prefix(_:)(v110, v101, v143, v142, v141);
  uint64_t v134 = v115;
  uint64_t v137 = (uint64_t (*)(unint64_t, uint64_t))v116;
  unint64_t v118 = v117;
  specialized Collection.dropFirst(_:)(v110, v101, v112, v111, v113);
  if (v118)
  {
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    swift_unknownObjectRetain();
    uint64_t v122 = swift_dynamicCastClass();
    if (!v122)
    {
      swift_unknownObjectRelease();
      uint64_t v122 = MEMORY[0x263F8EE78];
    }
    uint64_t v123 = *(void *)(v122 + 16);
    swift_release();
    uint64_t v121 = v152;
    if (__OFSUB__(v118 >> 1, v137))
    {
      __break(1u);
    }
    else if (v123 == (v118 >> 1) - (void)v137)
    {
      uint64_t v120 = swift_dynamicCastClass();
      if (!v120)
      {
        swift_unknownObjectRelease();
        uint64_t v120 = MEMORY[0x263F8EE78];
      }
      goto LABEL_25;
    }
    swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRetain();
  }
  specialized _copyCollectionToContiguousArray<A>(_:)(v114, v134, (uint64_t)v137, v118);
  uint64_t v120 = v119;
  uint64_t v121 = v152;
LABEL_25:
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v138, v140);
  swift_unknownObjectRelease();
  uint64_t v124 = v136;
  swift_bridgeObjectRetain();
  uint64_t v125 = v132;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v126 = v135;
  uint64_t *v135 = v124;
  *((unsigned char *)v126 + 8) = v129 & 1;
  v126[2] = v125;
  *((unsigned char *)v126 + 24) = v133 & 1;
  v126[4] = v121;
  v126[5] = v120;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for PINEInputShare.DecodableParameter()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PINEInputShare()
{
  return swift_getGenericMetadata();
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance PINEInputShare<A, B>(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *((void *)a2 + 2);
  char v6 = *((unsigned char *)a2 + 24);
  long long v8 = *a2;
  uint64_t v9 = v5;
  char v10 = v6;
  return PINEInputShare.init<A>(from:parameter:)(a1, (uint64_t)&v8, *(void *)(a5 + 16), *(void *)(a5 + 24), a3, *(void *)(a5 + 32), *(void *)(a5 + 40));
}

uint64_t PINEInputShare.encodedLength.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)v1;
  char v3 = *(unsigned char *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  char v5 = *(unsigned char *)(v1 + 24);
  uint64_t v7 = *(void *)(v1 + 32);
  uint64_t v6 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = Share.encodedLength.getter(v2, v3, v8, v9);
  uint64_t result = Share.encodedLength.getter(v4, v5, v8, v9);
  uint64_t v12 = v10 + result;
  if (__OFADD__(v10, result))
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v13 = *(void *)(v7 + 16);
  BOOL v14 = __OFADD__(v12, v13);
  uint64_t v15 = v12 + v13;
  if (v14)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v16 = *(void *)(v6 + 16);
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16)) {
LABEL_7:
  }
    __break(1u);
  return result;
}

uint64_t PINEInputShare.encode<A>(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(v4 + 16);
  char v9 = *(unsigned char *)(v4 + 24);
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v11 = *(void *)(a2 + 32);
  Share.encode<A>(into:)(a1, *(void *)v4, *(unsigned char *)(v4 + 8), v10, a3, v11, a4);
  Share.encode<A>(into:)(a1, v8, v9, v10, a3, v11, a4);
  Seed.encode<A>(into:)();

  return Seed.encode<A>(into:)();
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance PINEInputShare<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PINEInputShare.encode<A>(into:)(a1, a4, a2, a3);
}

uint64_t destroy for PINEInputShare()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PINEInputShare(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  char v4 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PINEInputShare(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  char v5 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for PINEInputShare(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  char v5 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PINEInputShare(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PINEInputShare(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata instantiation function for PINEInputShare.DecodableParameter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 40);
}

uint64_t getEnumTagSinglePayload for PINEInputShare.DecodableParameter(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PINEInputShare.DecodableParameter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t Usage.rawValue.getter()
{
  return *v0 + 1;
}

VDAF::Usage_optional __swiftcall Usage.init(rawValue:)(Swift::UInt16 rawValue)
{
  unsigned int v2 = (unsigned __int16)(rawValue - 1);
  if (v2 >= 0xA) {
    LOBYTE(v2) = 10;
  }
  *uint64_t v1 = v2;
  return (VDAF::Usage_optional)rawValue;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Usage(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Usage()
{
  __int16 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Usage()
{
  Hasher._combine(_:)(*v0 + 1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Usage()
{
  __int16 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

VDAF::Usage_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Usage(Swift::UInt16 *a1)
{
  return Usage.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Usage(_WORD *a1@<X8>)
{
  *a1 = *v1 + 1;
}

uint64_t static VDAFProtocol.measurementShareXOF(seed:aggregatorID:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  char v14 = 0;
  uint64_t v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 240))(&v14, a3, a4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_260BF9FF0;
  *(unsigned char *)(v10 + 32) = a2;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v12 = static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(a1, v9, v10, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t static VDAFProtocol.decodeMeasurementShare<A>(_:aggregatorID:count:)(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = a1;
  if (a2)
  {
    uint64_t v18 = static VDAFProtocol.measurementShareXOF(seed:aggregatorID:)(a1, a3, a5, a7);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t v19 = static FieldElement.randomVector<A>(count:using:)(a4, v18, a6);
    swift_unknownObjectRelease();
    return v19;
  }
  else
  {
    uint64_t v10 = swift_bridgeObjectRetain();
    if (MEMORY[0x2612241C0](v10, a6) != a4)
    {
      _StringGuts.grow(_:)(57);
      v11._object = (void *)0x8000000260BFECA0;
      v11._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v11);
      v12._countAndFlagsBits = 0xD00000000000002DLL;
      v12._object = (void *)0x8000000260BFECF0;
      String.append(_:)(v12);
      v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      v14._countAndFlagsBits = 0x3D746F67202CLL;
      v14._object = (void *)0xE600000000000000;
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      uint64_t v9 = 0;
      lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
      swift_allocError();
      *(void *)uint64_t v16 = 0;
      *(void *)(v16 + 8) = 0xE000000000000000;
      *(unsigned char *)(v16 + 16) = 1;
      swift_willThrow();
    }
    return v9;
  }
}

uint64_t static VDAFProtocol.decodeProofShare<A>(_:aggregatorID:count:makeXOF:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = specialized static VDAFProtocol.decodeProofShare<A>(_:aggregatorID:count:makeXOF:)(a1, a2 & 1, a4, a5, a6, a7, a8);
  if (v8) {
    return v10;
  }
  return result;
}

uint64_t static VDAFProtocol.splitShare<A, B>(_:into:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v12 = a1;
  uint64_t result = MEMORY[0x270FA5388](a1, a2);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = v14 - 1;
  if (__OFSUB__(v14, 1))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v18 < 0)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  uint64_t v32 = v15;
  if (v14 != 1)
  {
    uint64_t v19 = 0;
    uint64_t v29 = v14 - 1;
    uint64_t v34 = a10;
    uint64_t v35 = v32 + 8;
    while (v19 != v18)
    {
      uint64_t v20 = v30(v19);
      uint64_t v21 = swift_bridgeObjectRetain();
      uint64_t v37 = MEMORY[0x2612241C0](v21, a6);
      uint64_t result = swift_bridgeObjectRelease();
      if (v37 < 0) {
        goto LABEL_14;
      }
      uint64_t v33 = v19;
      uint64_t v22 = v12;
      uint64_t v23 = v32;
      if (v37)
      {
        Swift::Int v24 = 0;
        uint64_t v36 = v20;
        do
        {
          static FieldElement.randomElement<A>(using:)(v20, a6, a7, a9, v34, (uint64_t)v17);
          uint64_t v25 = a7;
          uint64_t v26 = type metadata accessor for Array();
          Array._makeMutableAndUnique()();
          Array._checkSubscript_mutating(_:)(v24);
          _swift_isClassOrObjCExistentialType();
          dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
          uint64_t v27 = v26;
          a7 = v25;
          AggregateShare.share.modify(v27);
          uint64_t v20 = v36;
          (*(void (**)(char *, uint64_t))(v23 + 8))(v17, a6);
          ++v24;
        }
        while (v37 != v24);
      }
      uint64_t v19 = v33 + 1;
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v18 = v29;
      uint64_t v12 = v22;
      if (v19 == v29) {
        return result;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  return result;
}

uint64_t specialized static VDAFProtocol.decodeProofShare<A>(_:aggregatorID:count:makeXOF:)(uint64_t a1, char a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a2)
  {
    uint64_t v11 = a4(a1);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    static FieldElement.randomVector<A>(count:using:)(a3, v11, a7);
    type metadata accessor for Array();
    swift_getWitnessTable();
    uint64_t v10 = ArraySlice.init<A>(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v9 = swift_bridgeObjectRetain();
    if (MEMORY[0x2612241C0](v9, a7) == a3)
    {
      type metadata accessor for Array();
      swift_getWitnessTable();
      return ArraySlice.init<A>(_:)();
    }
    else
    {
      _StringGuts.grow(_:)(51);
      v12._object = (void *)0x8000000260BFECA0;
      v12._countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v12);
      v13._countAndFlagsBits = 0xD000000000000027;
      v13._object = (void *)0x8000000260BFECC0;
      String.append(_:)(v13);
      v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v15._countAndFlagsBits = 0x3D746F67202CLL;
      v15._object = (void *)0xE600000000000000;
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      uint64_t v10 = 0;
      lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
      swift_allocError();
      *(void *)uint64_t v17 = 0;
      *(void *)(v17 + 8) = 0xE000000000000000;
      *(unsigned char *)(v17 + 16) = 1;
      swift_willThrow();
    }
  }
  return v10;
}

unint64_t lazy protocol witness table accessor for type Usage and conformance Usage()
{
  unint64_t result = lazy protocol witness table cache variable for type Usage and conformance Usage;
  if (!lazy protocol witness table cache variable for type Usage and conformance Usage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Usage and conformance Usage);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Usage(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Usage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x260B9944CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Usage()
{
  return &type metadata for Usage;
}

uint64_t Array<A>.elementwiseAdd(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Array<A>.elementwiseAdd(_:)(a1, a2, a3, MEMORY[0x263F8DF30]);
}

uint64_t static FieldElement.randomVector<A>(count:using:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    void v13[10] = 0;
    v13[11] = result;
    MEMORY[0x270FA5388](result, a2);
    v13[2] = v5;
    void v13[3] = v6;
    v13[4] = v7;
    v13[5] = v8;
    v13[6] = v3;
    v13[7] = v9;
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
    unint64_t v11 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in static FieldElement.randomVector<A>(count:using:), (uint64_t)v13, v10, a3, MEMORY[0x263F8E628], v11, MEMORY[0x263F8E658], v12);
  }
  return result;
}

uint64_t static FieldElement.randomElement<A>(using:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v43 = a3;
  uint64_t v44 = a5;
  uint64_t v42 = a1;
  v34[1] = a6;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = &protocol requirements base descriptor for FiniteFieldProtocol;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v35 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x270FA5388](AssociatedTypeWitness, v10);
  uint64_t v41 = (char *)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11, v13);
  Swift::String v16 = (char *)v34 - v15;
  MEMORY[0x270FA5388](v14, v17);
  uint64_t v19 = (char *)v34 - v18;
  uint64_t v21 = a4 + 64;
  uint64_t v20 = *(void *)(a4 + 64);
  uint64_t v22 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  uint64_t v36 = *(void *)(*(void *)(v22 + 24) + 8);
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  uint64_t v37 = (uint64_t (*)(uint64_t, uint64_t))v20;
  uint64_t v38 = a4 + 64;
  uint64_t v23 = ((uint64_t (*)(uint64_t, uint64_t))v20)(a2, a4);
  if (v23 < 0)
  {
LABEL_8:
    __break(1u);
  }
  else
  {
    uint64_t v24 = a4;
    uint64_t v20 = v23;
    uint64_t v25 = (uint64_t (**)(uint64_t, uint64_t))(v44 + 32);
    uint64_t v26 = (uint64_t *)(v35 + 8);
    uint64_t v46 = (uint64_t (**)(uint64_t, uint64_t))(v44 + 32);
    uint64_t v47 = v22;
    uint64_t v39 = a2;
    uint64_t v40 = v24;
    uint64_t v48 = v19;
    while (1)
    {
      uint64_t v27 = MEMORY[0x263F8E778];
      uint64_t v28 = v41;
      if (v20)
      {
        uint64_t v29 = 0;
        uint64_t v45 = *v25;
        do
        {
          char v50 = v45(v43, v44);
          lazy protocol witness table accessor for type UInt8 and conformance UInt8();
          dispatch thunk of BinaryInteger.init<A>(_:)();
          uint64_t v49 = v29;
          lazy protocol witness table accessor for type Int and conformance Int();
          dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)();
          uint64_t v30 = v27;
          uint64_t v31 = (void (*)(char *, uint64_t))*v26;
          ((void (*)(char *, uint64_t))*v26)(v28, AssociatedTypeWitness);
          dispatch thunk of static BinaryInteger.|= infix(_:_:)();
          v31(v16, AssociatedTypeWitness);
          uint64_t v27 = v30;
          v29 += 8;
          --v20;
        }
        while (v20);
      }
      a2 = v39;
      uint64_t v21 = v40;
      static FieldElement.modulus.getter();
      uint64_t v8 = (void *)AssociatedTypeWitness;
      uint64_t v19 = v48;
      char v32 = dispatch thunk of static Comparable.> infix(_:_:)();
      uint64_t v20 = *v26;
      ((void (*)(char *, uint64_t))*v26)(v16, AssociatedTypeWitness);
      if ((v32 & 1) == 0) {
        break;
      }
      ((void (*)(char *, uint64_t))v20)(v19, AssociatedTypeWitness);
      dispatch thunk of static AdditiveArithmetic.zero.getter();
      uint64_t v20 = v37(a2, v21);
      uint64_t v25 = v46;
      if (v20 < 0) {
        goto LABEL_8;
      }
    }
  }
  (*(void (**)(char *, char *, void *))(v35 + 16))(v16, v19, v8);
  FieldElement.init(_:)((uint64_t)v16, a2, v21);
  return ((uint64_t (*)(char *, void *))v20)(v19, v8);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FieldElementError(uint64_t a1, uint64_t a2)
{
  return specialized static VDAFErrorProtocol.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned __int8 *)(a2 + 16));
}

uint64_t FieldElement.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness, v9);
  uint64_t v11 = (char *)&v13 - v10;
  (*(void (**)(uint64_t, uint64_t))(a3 + 112))(a2, a3);
  swift_checkMetadataState();
  (*(void (**)(uint64_t))(AssociatedConformanceWitness + 64))(a1);
  (*(void (**)(char *, uint64_t, uint64_t))(a3 + 96))(v11, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1, AssociatedTypeWitness);
}

uint64_t FieldElement.init(other:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness - 8, v7);
  uint64_t v9 = (char *)&v11 - v8;
  (*(void (**)(uint64_t, uint64_t))(a3 + 112))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(a3 + 88))(a2, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(a3 + 96))(v9, a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
}

uint64_t FieldElement.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v22[1] = a4;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x270FA5388](AssociatedTypeWitness, v9);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v10, v13);
  Swift::String v16 = (char *)v22 - v15;
  MEMORY[0x270FA5388](v14, v17);
  uint64_t v19 = (char *)v22 - v18;
  if ((a1 & 0x8000000000000000) == 0)
  {
    uint64_t v23 = a1;
    swift_getAssociatedConformanceWitness();
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(_:)();
LABEL_5:
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v16, v19, AssociatedTypeWitness);
    FieldElement.init(_:)((uint64_t)v16, a2, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v19, AssociatedTypeWitness);
  }
  uint64_t result = static FieldElement.modulus.getter();
  if (!__OFSUB__(0, a1))
  {
    uint64_t v23 = -a1;
    swift_getAssociatedConformanceWitness();
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(_:)();
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    uint64_t v21 = *(void (**)(char *, uint64_t))(v8 + 8);
    v21(v12, AssociatedTypeWitness);
    v21(v16, AssociatedTypeWitness);
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t static FieldElement.modulus.getter()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t FieldElement.init<A>(floatValue:fractionalBitCount:)@<X0>(uint64_t a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  v19[1] = a7;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness - 8, v15);
  uint64_t v17 = (char *)v19 - v16;
  static FieldElement.integerFrom<A>(floatValue:fractionalBitCount:)(a1, a2, a3, a4, a5, a6, (uint64_t)v19 - v16);
  if (!v7) {
    FieldElement.init(_:)((uint64_t)v17, a3, a5);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a1, a4);
}

uint64_t static FieldElement.integerFrom<A>(floatValue:fractionalBitCount:)@<X0>(uint64_t a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int64_t v203 = a2;
  uint64_t v175 = a7;
  uint64_t v187 = a6;
  uint64_t v11 = *(void (**)(char *, uint64_t))(a6 + 16);
  uint64_t v186 = *((void *)v11 + 2);
  uint64_t v183 = *(void *)(v186 + 8);
  uint64_t v174 = *(void *)(v183 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness, v12);
  uint64_t v172 = (char *)&v158 - v13;
  swift_getAssociatedTypeWitness();
  uint64_t v189 = a3;
  uint64_t v190 = a5;
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v197 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v194 = *(void *)(v197 + 8);
  uint64_t v170 = *(void *)(v194 + 24);
  uint64_t v185 = *(void *)(v170 + 16);
  uint64_t v184 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v184, v14);
  uint64_t v182 = (char *)&v158 - v15;
  uint64_t v180 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v179 = *(void *)(v180 - 8);
  MEMORY[0x270FA5388](v180, v16);
  uint64_t v178 = (char *)&v158 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v195 = swift_checkMetadataState();
  uint64_t v188 = *(void *)(v195 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v195, v18);
  unint64_t v181 = (char *)&v158 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v19, v21);
  uint64_t v191 = (char *)&v158 - v23;
  uint64_t v25 = MEMORY[0x270FA5388](v22, v24);
  v193 = (char *)&v158 - v26;
  uint64_t v28 = MEMORY[0x270FA5388](v25, v27);
  v198 = (char *)&v158 - v29;
  uint64_t v202 = *(void *)(a4 - 8);
  uint64_t v31 = MEMORY[0x270FA5388](v28, v30);
  uint64_t v177 = (char *)&v158 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = MEMORY[0x270FA5388](v31, v33);
  v200 = (char *)&v158 - v35;
  MEMORY[0x270FA5388](v34, v36);
  uint64_t v192 = (char *)&v158 - v37;
  swift_getAssociatedTypeWitness();
  v204 = *(void (**)(char *, uint64_t))(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v169 = *(void *)(*((void *)v204 + 3) + 16);
  uint64_t v38 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v38, v39);
  uint64_t v199 = swift_checkMetadataState();
  uint64_t v40 = *(void *)(v199 - 8);
  uint64_t v42 = MEMORY[0x270FA5388](v199, v41);
  long long v168 = (char *)&v158 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = MEMORY[0x270FA5388](v42, v44);
  v171 = (char *)&v158 - v46;
  uint64_t v48 = MEMORY[0x270FA5388](v45, v47);
  v201 = (char *)&v158 - v49;
  uint64_t v51 = MEMORY[0x270FA5388](v48, v50);
  v196 = (char *)&v158 - v52;
  uint64_t v54 = MEMORY[0x270FA5388](v51, v53);
  uint64_t v56 = (char *)&v158 - v55;
  uint64_t v58 = MEMORY[0x270FA5388](v54, v57);
  unint64_t v176 = (char *)&v158 - v59;
  uint64_t v61 = MEMORY[0x270FA5388](v58, v60);
  uint64_t v63 = (char *)&v158 - v62;
  MEMORY[0x270FA5388](v61, v64);
  v205 = (char *)&v158 - v65;
  if (dispatch thunk of FloatingPoint.isNaN.getter())
  {
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    unint64_t v67 = 0xD000000000000011;
    uint64_t v68 = "floatValue is NaN";
LABEL_7:
    *(void *)uint64_t v66 = v67;
    *(void *)(v66 + 8) = (unint64_t)(v68 - 32) | 0x8000000000000000;
LABEL_8:
    *(unsigned char *)(v66 + 16) = 4;
    return swift_willThrow();
  }
  if (dispatch thunk of FloatingPoint.isInfinite.getter())
  {
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    unint64_t v67 = 0xD000000000000018;
    uint64_t v68 = "floatValue is isInfinite";
    goto LABEL_7;
  }
  if (dispatch thunk of FloatingPoint.isSubnormal.getter())
  {
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    unint64_t v67 = 0xD000000000000017;
    uint64_t v68 = "floatValue is subnormal";
    goto LABEL_7;
  }
  long long v160 = v56;
  uint64_t v70 = v40;
  uint64_t v71 = v205;
  uint64_t v72 = v70;
  uint64_t v164 = a1;
  dispatch thunk of FloatingPoint.exponent.getter();
  uint64_t v73 = v199;
  char v74 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v75 = *(void (**)(char *, char *, uint64_t))(v72 + 16);
  unint64_t v161 = (char *)(v72 + 16);
  long long v166 = v75;
  v75(v63, v71, v73);
  uint64_t v162 = v11;
  uint64_t v163 = a4;
  uint64_t v165 = v72;
  if (v74)
  {
    uint64_t v76 = dispatch thunk of BinaryInteger.bitWidth.getter();
    uint64_t v77 = v72;
    uint64_t v11 = (void (*)(char *, uint64_t))(v72 + 8);
    uint64_t v78 = *(void (**)(char *, uint64_t))(v72 + 8);
    v78(v63, v73);
    uint64_t v79 = v73;
    uint64_t v167 = v78;
    if (v76 <= 64)
    {
      uint64_t v83 = v196;
      uint64_t v86 = v161;
    }
    else
    {
      uint64_t v80 = v176;
      v166(v176, v205, v73);
      int64_t v206 = 0x8000000000000000;
      if (dispatch thunk of static BinaryInteger.isSigned.getter())
      {
        char v159 = v11;
        uint64_t v81 = dispatch thunk of BinaryInteger.bitWidth.getter();
        uint64_t v82 = v80;
        uint64_t v83 = v196;
        if (v81 >= 64)
        {
          lazy protocol witness table accessor for type Int and conformance Int();
          uint64_t v93 = v160;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          char v94 = dispatch thunk of static Comparable.< infix(_:_:)();
          uint64_t v95 = (uint64_t (*)(char *, uint64_t))v167;
          v167(v93, v79);
          uint64_t v88 = v95(v82, v79);
          uint64_t v86 = v161;
          if (v94) {
            goto LABEL_22;
          }
        }
        else
        {
          uint64_t v84 = dispatch thunk of BinaryInteger._lowWord.getter();
          for (unint64_t i = v82; ; unint64_t i = v96)
          {
            uint64_t v88 = ((uint64_t (*)(char *, uint64_t))v167)(i, v79);
            BOOL v97 = v84 < v206;
LABEL_28:
            uint64_t v86 = v161;
            if (!v97) {
              break;
            }
LABEL_22:
            __break(1u);
LABEL_23:
            char v159 = v11;
            uint64_t v83 = v196;
            if (v88 >= 64)
            {
              uint64_t v79 = v199;
              v167(v176, v199);
              goto LABEL_15;
            }
            uint64_t v96 = v176;
            uint64_t v79 = v199;
            uint64_t v84 = dispatch thunk of BinaryInteger._lowWord.getter();
          }
        }
      }
      else
      {
        char v87 = dispatch thunk of static BinaryInteger.isSigned.getter();
        uint64_t v88 = dispatch thunk of BinaryInteger.bitWidth.getter();
        if ((v87 & 1) == 0) {
          goto LABEL_23;
        }
        if (v88 <= 64)
        {
          char v159 = v11;
          uint64_t v79 = v199;
          swift_getAssociatedConformanceWitness();
          dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
          uint64_t v98 = v160;
          dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
          char v99 = dispatch thunk of static Comparable.< infix(_:_:)();
          uint64_t v11 = v167;
          v167(v98, v79);
          uint64_t v86 = v168;
          (*(void (**)(char *, char *, uint64_t))(v77 + 32))(v168, v80, v79);
          if ((v99 & 1) == 0)
          {
            int64_t v100 = v206;
            uint64_t v101 = dispatch thunk of BinaryInteger._lowWord.getter();
            uint64_t v88 = ((uint64_t (*)(char *, uint64_t))v11)(v86, v79);
            BOOL v97 = v101 < v100;
            uint64_t v83 = v196;
            goto LABEL_28;
          }
          goto LABEL_52;
        }
        lazy protocol witness table accessor for type Int and conformance Int();
        uint64_t v89 = v160;
        uint64_t v79 = v199;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        char v90 = dispatch thunk of static Comparable.< infix(_:_:)();
        uint64_t v91 = v89;
        unint64_t v92 = (uint64_t (*)(char *, uint64_t))v167;
        v167(v91, v79);
        uint64_t v88 = v92(v80, v79);
        uint64_t v83 = v196;
        uint64_t v86 = v161;
        if (v90) {
          goto LABEL_22;
        }
      }
    }
  }
  else
  {
    uint64_t v167 = *(void (**)(char *, uint64_t))(v72 + 8);
    v167(v63, v73);
    uint64_t v83 = v196;
    uint64_t v79 = v73;
LABEL_15:
    uint64_t v86 = v161;
  }
  uint64_t v102 = v205;
  uint64_t v103 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v166(v83, v102, v79);
  if (v103 < 65)
  {
    uint64_t v109 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v167(v83, v79);
    if (v109 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
      goto LABEL_42;
    }
  }
  else
  {
    v167(v83, v79);
  }
  v166(v201, v205, v79);
  int64_t v206 = 0x7FFFFFFFFFFFFFFFLL;
  char v104 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v105 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v104 & 1) == 0)
  {
    if (v105 > 63) {
      goto LABEL_40;
    }
LABEL_38:
    uint64_t v110 = v201;
    uint64_t v111 = dispatch thunk of BinaryInteger._lowWord.getter();
    v167(v110, v79);
    if (v206 < v111) {
      goto LABEL_39;
    }
    goto LABEL_42;
  }
  if (v105 <= 64) {
    goto LABEL_38;
  }
  lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v106 = v160;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  uint64_t v107 = v201;
  for (char j = dispatch thunk of static Comparable.< infix(_:_:)(); ; char j = dispatch thunk of static Comparable.< infix(_:_:)())
  {
    uint64_t v112 = v106;
    uint64_t v86 = (char *)v167;
    v167(v112, v79);
    ((void (*)(char *, uint64_t))v86)(v107, v79);
    if ((j & 1) == 0) {
      break;
    }
LABEL_39:
    __break(1u);
LABEL_40:
    uint64_t v208 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v107 = v160;
    (*(void (**)(char *, char *, uint64_t))(v165 + 32))(v160, v201, v79);
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v106 = v171;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  }
LABEL_42:
  uint64_t v113 = v205;
  uint64_t v114 = dispatch thunk of BinaryInteger._lowWord.getter();
  v167(v113, v79);
  if (__OFADD__(v114, v203))
  {
    __break(1u);
LABEL_52:
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v11)(v86, v79);
    __break(1u);
    return result;
  }
  uint64_t v116 = v195;
  uint64_t v115 = v114 + v203;
  if (v115 >= dispatch thunk of static FixedWidthInteger.bitWidth.getter())
  {
    int64_t v206 = 0;
    unint64_t v207 = 0xE000000000000000;
    _StringGuts.grow(_:)(75);
    v142._object = (void *)0x8000000260BFEF10;
    v142._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v142);
    uint64_t v143 = v160;
    dispatch thunk of FloatingPoint.exponent.getter();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v167(v143, v79);
    v144._countAndFlagsBits = 0xD000000000000018;
    v144._object = (void *)0x8000000260BFEF30;
    String.append(_:)(v144);
    uint64_t v208 = v203;
    v145._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v145);
    swift_bridgeObjectRelease();
    v146._object = (void *)0x8000000260BFEF50;
    v146._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v146);
    uint64_t v208 = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
    v147._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v147);
    swift_bridgeObjectRelease();
    v148._countAndFlagsBits = 46;
    v148._object = (void *)0xE100000000000000;
    String.append(_:)(v148);
    int64_t v149 = v206;
    unint64_t v150 = v207;
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *(void *)uint64_t v66 = v149;
    *(void *)(v66 + 8) = v150;
    goto LABEL_8;
  }
  int64_t v206 = 1;
  lazy protocol witness table accessor for type Int and conformance Int();
  unint64_t v117 = v193;
  dispatch thunk of BinaryInteger.init<A>(_:)();
  int64_t v206 = v203;
  dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)();
  unint64_t v118 = *(void (**)(char *, uint64_t))(v188 + 8);
  int64_t v203 = v188 + 8;
  v204 = v118;
  v118(v117, v116);
  uint64_t v119 = v200;
  uint64_t v120 = v163;
  dispatch thunk of FloatingPoint.init<A>(_:)();
  dispatch thunk of static Numeric.* infix(_:_:)();
  uint64_t v121 = v202 + 8;
  v205 = *(char **)(v202 + 8);
  ((void (*)(char *, uint64_t))v205)(v119, v120);
  uint64_t v122 = v179;
  uint64_t v123 = v178;
  uint64_t v124 = v180;
  (*(void (**)(char *, void, uint64_t))(v179 + 104))(v178, *MEMORY[0x263F8E208], v180);
  uint64_t v125 = v177;
  char v126 = v162;
  dispatch thunk of FloatingPoint.rounded(_:)();
  (*(void (**)(char *, uint64_t))(v122 + 8))(v123, v124);
  v201 = *(char **)(v126[3] + 8);
  abs<A>(_:)();
  uint64_t v202 = v121;
  ((void (*)(char *, uint64_t))v205)(v125, v120);
  uint64_t v127 = v191;
  dispatch thunk of BinaryInteger.init<A>(_:)();
  uint64_t v128 = v193;
  static FieldElement.modulus.getter();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  int v129 = v181;
  unint64_t v130 = v204;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  uint64_t v131 = v198;
  dispatch thunk of static BinaryInteger./ infix(_:_:)();
  v130(v129, v116);
  uint64_t v132 = v128;
  int v133 = v127;
  v130(v132, v116);
  char v134 = dispatch thunk of static Comparable.<= infix(_:_:)();
  v130(v131, v116);
  if (v134)
  {
    uint64_t v135 = v163;
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    uint64_t v136 = v200;
    uint64_t v137 = (void (*)(char *, uint64_t))v205;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    char v138 = dispatch thunk of static Comparable.< infix(_:_:)();
    v137(v136, v135);
    if (v138)
    {
      uint64_t v139 = v198;
      static FieldElement.modulus.getter();
      uint64_t v140 = v191;
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      uint64_t v141 = v204;
      v204(v139, v116);
      v141(v140, v116);
      return ((uint64_t (*)(char *, uint64_t))v137)(v192, v135);
    }
    else
    {
      v137(v192, v135);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v188 + 32))(v175, v191, v116);
    }
  }
  else
  {
    int64_t v206 = 0;
    unint64_t v207 = 0xE000000000000000;
    _StringGuts.grow(_:)(49);
    v151._countAndFlagsBits = 0x6C615674616F6C66;
    v151._object = (void *)0xEB000000003D6575;
    String.append(_:)(v151);
    uint64_t v152 = v163;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v153._countAndFlagsBits = 0xD000000000000020;
    v153._object = (void *)0x8000000260BFEFE0;
    String.append(_:)(v153);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v154._countAndFlagsBits = 11817;
    v154._object = (void *)0xE200000000000000;
    String.append(_:)(v154);
    int64_t v155 = v206;
    unint64_t v156 = v207;
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *(void *)uint64_t v157 = v155;
    *(void *)(v157 + 8) = v156;
    *(unsigned char *)(v157 + 16) = 4;
    swift_willThrow();
    v130(v133, v116);
    return ((uint64_t (*)(char *, uint64_t))v205)(v192, v152);
  }
}

uint64_t FieldElement.init<A>(bytes:mask:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  v49[1] = a7;
  uint64_t v55 = a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v54 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = MEMORY[0x270FA5388](AssociatedTypeWitness, v12);
  uint64_t v15 = (char *)v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13, v16);
  uint64_t v53 = (uint64_t)v49 - v17;
  uint64_t v18 = *(char **)(*(void *)(a6 + 8) + 8);
  uint64_t v58 = a1;
  uint64_t v56 = a4;
  uint64_t v50 = v18;
  uint64_t v51 = a6;
  uint64_t v19 = dispatch thunk of Collection.count.getter();
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 64);
  if (v19 == v20(a3, a5))
  {
    uint64_t v50 = v15;
    uint64_t v21 = v55;
    uint64_t v22 = v20(a3, a5);
    uint64_t v23 = AssociatedTypeWitness;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v25 = v52;
    uint64_t v26 = v58;
    uint64_t v27 = v56;
    decodeInteger<A, B>(from:encodedLength:)(v58, v22, v56, v23, v51, *(void *)(AssociatedConformanceWitness + 8), v53);
    if (v25)
    {
      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v21, v23);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8))(v26, v27);
    }
    else
    {
      dispatch thunk of static BinaryInteger.&= infix(_:_:)();
      uint64_t v41 = (uint64_t)v50;
      static FieldElement.modulus.getter();
      char v42 = dispatch thunk of static Comparable.>= infix(_:_:)();
      uint64_t v43 = v54;
      uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
      v44(v41, v23);
      if (v42)
      {
        lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
        swift_allocError();
        *(void *)uint64_t v45 = 0;
        *(void *)(v45 + 8) = 0;
        *(unsigned char *)(v45 + 16) = 5;
        swift_willThrow();
        uint64_t v46 = AssociatedTypeWitness;
        v44(v55, AssociatedTypeWitness);
        (*(void (**)(uint64_t))(*(void *)(v56 - 8) + 8))(v58);
        uint64_t v47 = v53;
      }
      else
      {
        uint64_t v48 = v53;
        uint64_t v46 = AssociatedTypeWitness;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v41, v53, AssociatedTypeWitness);
        FieldElement.init(_:)(v41, a3, a5);
        v44(v55, v46);
        (*(void (**)(uint64_t))(*(void *)(v56 - 8) + 8))(v58);
        uint64_t v47 = v48;
      }
      return ((uint64_t (*)(uint64_t, uint64_t))v44)(v47, v46);
    }
  }
  else
  {
    uint64_t v59 = 0;
    unint64_t v60 = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    uint64_t v29 = _typeName(_:qualified:)();
    unint64_t v31 = v30;
    swift_bridgeObjectRelease();
    uint64_t v59 = v29;
    unint64_t v60 = v31;
    v32._object = (void *)0x8000000260BFF420;
    v32._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v32);
    uint64_t v61 = v20(a3, a5);
    v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._countAndFlagsBits = 0x203A746F67202CLL;
    v34._object = (void *)0xE700000000000000;
    String.append(_:)(v34);
    uint64_t v35 = v58;
    uint64_t v36 = v56;
    uint64_t v61 = dispatch thunk of Collection.count.getter();
    v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    uint64_t v38 = v59;
    unint64_t v39 = v60;
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *(void *)uint64_t v40 = v38;
    *(void *)(v40 + 8) = v39;
    *(unsigned char *)(v40 + 16) = 0;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v55, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 8))(v35, v36);
  }
}

uint64_t FieldElement.init(inputVector:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v91 = a3;
  v74[1] = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v101 = AssociatedTypeWitness;
  uint64_t v107 = swift_getAssociatedTypeWitness();
  uint64_t v95 = *(void **)(v107 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v107, v13);
  uint64_t v88 = (char *)v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v14, v16);
  uint64_t v108 = (char *)v74 - v18;
  uint64_t v20 = MEMORY[0x270FA5388](v17, v19);
  uint64_t v103 = (char *)v74 - v21;
  uint64_t v105 = *(void **)(a5 - 8);
  uint64_t v23 = MEMORY[0x270FA5388](v20, v22);
  char v87 = (char *)v74 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x270FA5388](v23, v25);
  uint64_t v28 = (char *)v74 - v27;
  uint64_t v30 = MEMORY[0x270FA5388](v26, v29);
  Swift::String v32 = (char *)v74 - v31;
  uint64_t v34 = MEMORY[0x270FA5388](v30, v33);
  uint64_t v89 = (uint64_t)v74 - v35;
  uint64_t v37 = MEMORY[0x270FA5388](v34, v36);
  unint64_t v39 = (char *)v74 - v38;
  MEMORY[0x270FA5388](v37, v40);
  char v42 = (char *)v74 - v41;
  uint64_t v106 = a1;
  uint64_t v90 = a2;
  uint64_t v43 = ArraySlice.count.getter();
  uint64_t v44 = v102;
  static FieldElement.assertValidBitLength(_:)(v43, a5, (uint64_t)a6);
  v74[3] = v44;
  if (v44) {
    return swift_unknownObjectRelease();
  }
  uint64_t v84 = v28;
  uint64_t v86 = v32;
  uint64_t v46 = (void (*)(uint64_t, void *))a6[9];
  uint64_t v102 = v42;
  v46(a5, a6);
  uint64_t v47 = a6[1];
  uint64_t v85 = v39;
  uint64_t v83 = v47;
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  uint64_t v48 = v89;
  FieldElement.init(_:)(2, a5, (uint64_t)a6, v89);
  swift_unknownObjectRetain();
  uint64_t v49 = v91;
  uint64_t v50 = ArraySlice.startIndex.getter();
  uint64_t v51 = a5;
  if (v50 == ArraySlice.endIndex.getter())
  {
    swift_unknownObjectRelease();
    uint64_t v52 = v105;
    uint64_t v53 = (void (*)(uint64_t, char *, uint64_t))v105[2];
    uint64_t v54 = (uint64_t)v86;
LABEL_10:
    uint64_t v72 = v85;
    v53(v54, v85, v51);
    FieldElement.init(other:)(v54, v51, (uint64_t)a6);
    swift_unknownObjectRelease();
    uint64_t v73 = (void (*)(uint64_t, uint64_t))v52[1];
    v73(v48, v51);
    v73((uint64_t)v72, v51);
    return ((uint64_t (*)(char *, uint64_t))v73)(v102, v51);
  }
  else
  {
    uint64_t v55 = v49;
    uint64_t v101 = swift_checkMetadataState();
    uint64_t v82 = a6;
    char v99 = (void (*)(char *, uint64_t, uint64_t))a6[12];
    int64_t v100 = a6 + 12;
    uint64_t v78 = (void (*)(uint64_t, uint64_t))a6[11];
    uint64_t v96 = *(void (**)(char *, char *))(AssociatedConformanceWitness + 56);
    uint64_t v97 = AssociatedConformanceWitness + 56;
    uint64_t v98 = a6 + 11;
    uint64_t v80 = a4 >> 1;
    uint64_t v76 = (void (**)(char *, uint64_t))(v95 + 1);
    uint64_t v95 = v105 + 1;
    uint64_t v77 = v105 + 2;
    v74[0] = (unint64_t)(v105 + 2) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    uint64_t v81 = v50;
    uint64_t v56 = v90;
    uint64_t v54 = (uint64_t)v86;
    unint64_t v79 = a4;
    while (1)
    {
      uint64_t result = ArraySlice._hoistableIsNativeTypeChecked()();
      if (v81 < v55 || v80 <= v50) {
        break;
      }
      uint64_t v94 = v50 + 1;
      uint64_t v57 = (void (*)(uint64_t, uint64_t, uint64_t))v105[2];
      v57(v54, v56 + v105[9] * v50, v51);
      uint64_t v58 = (uint64_t)v87;
      uint64_t v75 = v57;
      v57((uint64_t)v87, v54, v51);
      uint64_t v59 = v84;
      uint64_t v60 = (uint64_t)v82;
      FieldElement.init(other:)(v58, v51, (uint64_t)v82);
      uint64_t v61 = v78;
      v78(v51, v60);
      uint64_t v62 = v88;
      v61(v51, v60);
      uint64_t v63 = v103;
      v96(v108, v62);
      uint64_t v64 = *v76;
      uint64_t v93 = v64;
      v64(v62, v107);
      v64(v108, v107);
      v99(v63, v51, v60);
      dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
      unint64_t v92 = (void (*)(char *, uint64_t))v105[1];
      uint64_t v65 = v107;
      v92(v59, v51);
      v61(v51, v60);
      v61(v51, v60);
      uint64_t v66 = v103;
      v96(v108, v62);
      unint64_t v67 = v62;
      uint64_t v68 = v108;
      uint64_t v69 = v93;
      v93(v67, v65);
      v69(v68, v65);
      uint64_t v55 = v91;
      uint64_t v70 = v66;
      uint64_t v54 = (uint64_t)v86;
      v99(v70, v51, v60);
      v92((char *)v54, v51);
      uint64_t v56 = v90;
      uint64_t v71 = ArraySlice.endIndex.getter();
      uint64_t v50 = v94;
      if (v94 == v71)
      {
        swift_unknownObjectRelease();
        a6 = v82;
        uint64_t v52 = v105;
        uint64_t v48 = v89;
        uint64_t v53 = (void (*)(uint64_t, char *, uint64_t))v75;
        goto LABEL_10;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t static FieldElement.assertValidBitLength(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v34 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = MEMORY[0x270FA5388](AssociatedTypeWitness, v6);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v7, v10);
  uint64_t v13 = (char *)&v33 - v12;
  MEMORY[0x270FA5388](v11, v14);
  uint64_t v16 = (char *)&v33 - v15;
  uint64_t v17 = *(uint64_t (**)(void))(a3 + 64);
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  uint64_t v33 = v17;
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v17)(a2, a3);
  if ((unint64_t)(result - 0x1000000000000000) >> 61 != 7)
  {
    __break(1u);
    return result;
  }
  uint64_t v19 = v35;
  if (v35 >= 8 * result)
  {
    unint64_t v38 = 0;
    unint64_t v39 = 0xE000000000000000;
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    unint64_t v38 = 0xD000000000000011;
    unint64_t v39 = 0x8000000260BFEC00;
    uint64_t v40 = v19;
    v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._countAndFlagsBits = 0xD000000000000015;
    v28._object = (void *)0x8000000260BFEC20;
    String.append(_:)(v28);
    uint64_t v40 = v33();
    v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v20 = v16;
    static FieldElement.modulus.getter();
    unint64_t v38 = 1;
    uint64_t v21 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 8);
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(_:)();
    unint64_t v38 = v19;
    dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)();
    uint64_t v22 = *(void (**)(char *, uint64_t))(v34 + 8);
    v22(v9, AssociatedTypeWitness);
    uint64_t v34 = v21;
    char v23 = dispatch thunk of static Comparable.<= infix(_:_:)();
    v22(v13, AssociatedTypeWitness);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v22)(v20, AssociatedTypeWitness);
    if ((v23 & 1) == 0) {
      return result;
    }
    unint64_t v38 = 0;
    unint64_t v39 = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    v24._object = (void *)0x8000000260BFEC00;
    v24._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v24);
    uint64_t v40 = v19;
    v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._countAndFlagsBits = 0xD000000000000013;
    v26._object = (void *)0x8000000260BFF440;
    String.append(_:)(v26);
    static FieldElement.modulus.getter();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v22(v20, AssociatedTypeWitness);
  }
  unint64_t v31 = v38;
  unint64_t v30 = v39;
  lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
  swift_allocError();
  *(void *)uint64_t v32 = v31;
  *(void *)(v32 + 8) = v30;
  *(unsigned char *)(v32 + 16) = 3;
  return swift_willThrow();
}

uint64_t static FieldElement.* infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = MEMORY[0x270FA5388](AssociatedTypeWitness, v8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v9, v12);
  uint64_t v15 = (char *)&v29 - v14;
  uint64_t v17 = MEMORY[0x270FA5388](v13, v16);
  Swift::String v29 = (char *)&v29 - v18;
  MEMORY[0x270FA5388](v17, v19);
  uint64_t v21 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v21, a1, a3);
  FieldElement.init(other:)((uint64_t)v21, a3, a4);
  uint64_t v23 = swift_checkMetadataState();
  Swift::String v24 = *(void (**)(uint64_t, uint64_t))(a4 + 88);
  v24(a3, a4);
  v24(a3, a4);
  Swift::String v25 = v29;
  (*(void (**)(char *, char *, uint64_t))(AssociatedConformanceWitness + 56))(v15, v11, v23);
  Swift::String v26 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v27 = AssociatedTypeWitness;
  v26(v11, AssociatedTypeWitness);
  v26(v15, v27);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 96))(v25, a3, a4);
}

uint64_t static FieldElement.*= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = a2;
  uint64_t v26 = a1;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = MEMORY[0x270FA5388](AssociatedTypeWitness, v7);
  uint64_t v10 = (char *)&AssociatedConformanceWitness - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v8, v11);
  uint64_t v14 = (char *)&AssociatedConformanceWitness - v13;
  MEMORY[0x270FA5388](v12, v15);
  uint64_t v17 = (char *)&AssociatedConformanceWitness - v16;
  uint64_t v18 = swift_checkMetadataState();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(a4 + 88);
  v19(a3, a4);
  v19(a3, a4);
  (*(void (**)(char *, char *, uint64_t))(AssociatedConformanceWitness + 56))(v14, v10, v18);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v21 = AssociatedTypeWitness;
  v20(v10, AssociatedTypeWitness);
  v20(v14, v21);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a4 + 96))(v17, a3, a4);
}

uint64_t FieldElement.init(inputVector:)@<X0>(uint64_t a1@<X1>, void *a2@<X2>, uint64_t a3@<X8>)
{
  type metadata accessor for Array();
  swift_getWitnessTable();
  uint64_t v6 = ArraySlice.init<A>(_:)();
  return FieldElement.init(inputVector:)(v6, v7, v8, v9, a1, a2, a3);
}

uint64_t FieldElement.integerValue.getter(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness, v7);
  unint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = swift_checkMetadataState();
  (*(void (**)(uint64_t, uint64_t))(a2 + 88))(a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 72))(v9, v10, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, AssociatedTypeWitness);
}

uint64_t static FieldElement.encode(_:into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v42 = a1;
  uint64_t v43 = a3;
  uint64_t v48 = a2;
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v47 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  uint64_t v49 = (char *)a5;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x270FA5388](AssociatedTypeWitness, v10);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v11, v14);
  uint64_t v17 = (char *)&v40 - v16;
  MEMORY[0x270FA5388](v15, v18);
  uint64_t v20 = (char *)&v40 - v19;
  uint64_t v21 = v43;
  swift_getAssociatedConformanceWitness();
  if (dispatch thunk of static FixedWidthInteger.bitWidth.getter() >= v21)
  {
    uint64_t v41 = v9;
    (*(void (**)(void))(v9 + 16))();
    unint64_t v50 = 1;
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t result = dispatch thunk of BinaryInteger.init<A>(_:)();
    if (v21 < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v29 = (uint64_t)v17;
      uint64_t v46 = a4;
      if (v21)
      {
        uint64_t v44 = (void (**)(char *, char *, uint64_t))(v41 + 32);
        uint64_t v45 = (void (**)(char *, uint64_t))(v41 + 8);
        uint64_t v30 = v43;
        do
        {
          uint64_t v31 = v29;
          dispatch thunk of static BinaryInteger.& infix(_:_:)();
          FieldElement.init(_:)((uint64_t)v13, v46, (uint64_t)v49);
          type metadata accessor for Array();
          Array.append(_:)();
          unint64_t v50 = 1;
          dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)();
          (*v45)(v20, AssociatedTypeWitness);
          (*v44)(v20, v13, AssociatedTypeWitness);
          uint64_t v29 = v31;
          --v30;
        }
        while (v30);
      }
      uint64_t v49 = (char *)v29;
      dispatch thunk of static AdditiveArithmetic.zero.getter();
      char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v33 = *(void (**)(char *, uint64_t))(v41 + 8);
      v33(v13, AssociatedTypeWitness);
      if ((v32 & 1) == 0)
      {
        unint64_t v50 = 0;
        unint64_t v51 = 0xE000000000000000;
        _StringGuts.grow(_:)(39);
        v34._countAndFlagsBits = 0xD000000000000014;
        v34._object = (void *)0x8000000260BFEE70;
        String.append(_:)(v34);
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v35._countAndFlagsBits = 0x6962206874697720;
        v35._object = (void *)0xEF3D687464695774;
        String.append(_:)(v35);
        uint64_t v52 = v43;
        v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v36);
        swift_bridgeObjectRelease();
        unint64_t v37 = v50;
        unint64_t v38 = v51;
        lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
        swift_allocError();
        *(void *)uint64_t v39 = v37;
        *(void *)(v39 + 8) = v38;
        *(unsigned char *)(v39 + 16) = 1;
        swift_willThrow();
      }
      v33(v49, AssociatedTypeWitness);
      return ((uint64_t (*)(char *, uint64_t))v33)(v20, AssociatedTypeWitness);
    }
  }
  else
  {
    unint64_t v50 = 0;
    unint64_t v51 = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    unint64_t v50 = 0xD000000000000012;
    unint64_t v51 = 0x8000000260BFEE90;
    uint64_t v52 = v21;
    v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 2113056;
    v23._object = (void *)0xE300000000000000;
    String.append(_:)(v23);
    uint64_t v52 = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
    v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    unint64_t v25 = v50;
    unint64_t v26 = v51;
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *(void *)uint64_t v27 = v25;
    *(void *)(v27 + 8) = v26;
    *(unsigned char *)(v27 + 16) = 2;
    return swift_willThrow();
  }
  return result;
}

uint64_t static FieldElement.integerToBitVector(input:bitWidth:)(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = Array.init()();
  type metadata accessor for Array();
  Array.reserveCapacity(_:)(a2);
  static FieldElement.encode(_:into:with:)(a1, (uint64_t)&v11, a2, a3, a4);
  uint64_t v9 = v11;
  if (v4) {
    swift_bridgeObjectRelease();
  }
  return v9;
}

uint64_t static FieldElement.integersToElements(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[5] = a1;
  v8[2] = a2;
  v8[3] = a3;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in static FieldElement.integersToElements(_:), (uint64_t)v8, v4, a2, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v6);
}

uint64_t closure #1 in static FieldElement.integersToElements(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness, v7);
  uint64_t v9 = (char *)v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)v12 - v8, a1);
  return FieldElement.init(_:)((uint64_t)v9, a2, a3);
}

uint64_t static FieldElement.elementsToIntegers(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[5] = a1;
  v8[2] = a2;
  v8[3] = a3;
  uint64_t v3 = type metadata accessor for Array();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t WitnessTable = swift_getWitnessTable();
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in static FieldElement.elementsToIntegers(_:), (uint64_t)v8, v3, AssociatedTypeWitness, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v6);
}

uint64_t FieldElement.encodedLength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 64))(a1, a2);
}

uint64_t FieldElement.init<A>(from:parameter:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = MEMORY[0x270FA5388](AssociatedTypeWitness - 8, v13);
  uint64_t v16 = (char *)&v22 - v15;
  uint64_t v17 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v14, v18);
  uint64_t v20 = (char *)&v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, a1, a3);
  default argument 1 of FieldElement.init<A>(bytes:mask:)();
  FieldElement.init<A>(bytes:mask:)((uint64_t)v20, (uint64_t)v16, a2, a3, a4, a5, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a1, a3);
}

uint64_t FieldElement.encode<A>(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = a3;
  uint64_t v17 = a5;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness, v10);
  uint64_t v12 = (char *)&v16 - v11;
  FieldElement.integerValue.getter(a2, a4);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 64))(a2, a4);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  encodeInteger<A, B>(_:into:encodedLength:)((uint64_t)v12, a1, v13, v16, AssociatedTypeWitness, v17, *(void *)(AssociatedConformanceWitness + 8));
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
}

uint64_t static FieldElement.+= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v70 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v63 = AssociatedConformanceWitness;
  uint64_t v61 = (void (*)(uint64_t, uint64_t))AssociatedTypeWitness;
  uint64_t v60 = *(void *)(*(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 8) + 24);
  uint64_t v59 = *(void *)(v60 + 16);
  uint64_t v58 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v58, v9);
  uint64_t v10 = swift_checkMetadataState();
  uint64_t v65 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10, v11);
  uint64_t v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v12, v15);
  uint64_t v57 = (char *)&v55 - v17;
  uint64_t v19 = MEMORY[0x270FA5388](v16, v18);
  uint64_t v62 = (char *)&v55 - v20;
  uint64_t v22 = MEMORY[0x270FA5388](v19, v21);
  uint64_t v64 = (char *)&v55 - v23;
  uint64_t v25 = MEMORY[0x270FA5388](v22, v24);
  uint64_t v27 = MEMORY[0x270FA5388](v25, v26);
  MEMORY[0x270FA5388](v27, v28);
  uint64_t v66 = (char *)&v55 - v30;
  uint64_t v67 = v29;
  uint64_t v31 = *(void (**)(uint64_t, uint64_t))(a4 + 88);
  uint64_t v68 = a1;
  uint64_t v33 = v32;
  v31(a3, a4);
  uint64_t v70 = a4;
  uint64_t v71 = a3;
  v31(a3, a4);
  char v34 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v69 = v33;
  if (v34)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
    {
LABEL_11:
      uint64_t v44 = dispatch thunk of BinaryInteger._lowWord.getter();
      unint64_t v37 = v64;
      uint64_t v39 = v65;
      uint64_t v43 = v71;
      if (!v44) {
        goto LABEL_14;
      }
      goto LABEL_16;
    }
    goto LABEL_13;
  }
  uint64_t v56 = v14;
  char v35 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v36 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v35 & 1) == 0)
  {
    if (v36 < 64) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  if (v36 > 64)
  {
LABEL_13:
    uint64_t v72 = 0;
    lazy protocol witness table accessor for type Int and conformance Int();
    unint64_t v37 = v64;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v39 = v65;
    (*(void (**)(char *, uint64_t))(v65 + 8))(v37, v10);
    uint64_t v43 = v71;
    if ((v45 & 1) == 0) {
      goto LABEL_16;
    }
LABEL_14:
    uint64_t v47 = v66;
    uint64_t v46 = v67;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v66, v67, v10);
    uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    v48(v69, v10);
    goto LABEL_20;
  }
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  unint64_t v37 = v64;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  char v38 = dispatch thunk of static Comparable.>= infix(_:_:)();
  uint64_t v39 = v65;
  uint64_t v40 = *(void (**)(char *, uint64_t))(v65 + 8);
  v40(v37, v10);
  uint64_t v41 = v56;
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v56, v33, v10);
  if ((v38 & 1) == 0)
  {
    v40(v41, v10);
    goto LABEL_16;
  }
  uint64_t v42 = dispatch thunk of BinaryInteger._lowWord.getter();
  v40(v41, v10);
  uint64_t v43 = v71;
  if (!v42) {
    goto LABEL_14;
  }
LABEL_16:
  uint64_t v49 = swift_checkMetadataState();
  uint64_t v50 = v63;
  uint64_t v61 = *(void (**)(uint64_t, uint64_t))(v63 + 24);
  v61(v49, v63);
  unint64_t v51 = v62;
  uint64_t v64 = *(char **)(v60 + 8);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
  uint64_t v65 = (v39 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v48((uint64_t)v37, v10);
  uint64_t v46 = v67;
  if (dispatch thunk of static Comparable.< infix(_:_:)())
  {
    uint64_t v52 = v50;
    uint64_t v53 = v57;
    v61(v49, v52);
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    v48((uint64_t)v53, v10);
    uint64_t v47 = v66;
    dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
    v48((uint64_t)v37, v10);
  }
  else
  {
    uint64_t v47 = v66;
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  }
  v48((uint64_t)v51, v10);
  uint64_t v43 = v71;
  v48(v69, v10);
LABEL_20:
  v48(v46, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v70 + 96))(v47, v43);
}

uint64_t static FieldElement.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static FieldElement.+ infix(_:_:)(a1, a2, a3, a4, MEMORY[0x263F8DF30], a5);
}

uint64_t static FieldElement.-= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v38 = a2;
  uint64_t v39 = a1;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = MEMORY[0x270FA5388](AssociatedTypeWitness, v8);
  uint64_t v33 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v9, v11);
  char v34 = (char *)&v32 - v13;
  uint64_t v15 = MEMORY[0x270FA5388](v12, v14);
  uint64_t v17 = (char *)&v32 - v16;
  uint64_t v19 = MEMORY[0x270FA5388](v15, v18);
  uint64_t v21 = (char *)&v32 - v20;
  MEMORY[0x270FA5388](v19, v22);
  unint64_t v37 = (char *)&v32 - v23;
  uint64_t v24 = *(void (**)(uint64_t, uint64_t))(a4 + 88);
  v24(a3, a4);
  uint64_t v38 = a3;
  uint64_t v36 = a4;
  v24(a3, a4);
  uint64_t v25 = AssociatedConformanceWitness;
  uint64_t v26 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  if (dispatch thunk of static Comparable.< infix(_:_:)())
  {
    swift_checkMetadataState();
    uint64_t v27 = v33;
    (*(void (**)(void))(v25 + 24))();
    uint64_t AssociatedConformanceWitness = *(void *)(*(void *)(v26 + 24) + 8);
    uint64_t v28 = v34;
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    uint64_t v29 = *(void (**)(char *, uint64_t))(v7 + 8);
    v29(v27, AssociatedTypeWitness);
    uint64_t v30 = v37;
    dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
    v29(v28, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v30 = v37;
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    uint64_t v29 = *(void (**)(char *, uint64_t))(v7 + 8);
  }
  v29(v17, AssociatedTypeWitness);
  v29(v21, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 96))(v30, v38);
}

uint64_t static FieldElement.- infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static FieldElement.+ infix(_:_:)(a1, a2, a3, a4, MEMORY[0x263F8DF38], a5);
}

uint64_t static FieldElement.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, void)@<X4>, uint64_t a6@<X8>)
{
  MEMORY[0x270FA5388](a1, a1);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v13 + 16))(v12);
  FieldElement.init(other:)((uint64_t)v12, a3, a4);
  return a5(a6, a2, a3, *(void *)(a4 + 8));
}

uint64_t static FieldElement.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v19[1] = a2;
  swift_getAssociatedTypeWitness();
  v19[0] = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = MEMORY[0x270FA5388](AssociatedTypeWitness, v8);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9, v12);
  uint64_t v14 = (char *)v19 - v13;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(a4 + 88);
  v15(a3, a4);
  v15(a3, a4);
  swift_getAssociatedConformanceWitness();
  char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v11, AssociatedTypeWitness);
  v17(v14, AssociatedTypeWitness);
  return v16 & 1;
}

uint64_t static FieldElement./= infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v136 = a2;
  uint64_t v122 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v138 = AssociatedConformanceWitness;
  uint64_t v139 = AssociatedTypeWitness;
  uint64_t v8 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  uint64_t v140 = *(void (**)(char *, char *, uint64_t))(v8 + 24);
  uint64_t v143 = *((void *)v140 + 2);
  uint64_t v142 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v142, v9);
  uint64_t v141 = (char *)&v117 - v10;
  uint64_t v11 = swift_checkMetadataState();
  uint64_t v144 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11, v12);
  char v134 = (char *)&v117 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v13, v15);
  char v126 = (char *)&v117 - v17;
  uint64_t v19 = MEMORY[0x270FA5388](v16, v18);
  uint64_t v145 = (uint64_t)&v117 - v20;
  uint64_t v22 = MEMORY[0x270FA5388](v19, v21);
  uint64_t v127 = (char *)&v117 - v23;
  uint64_t v25 = MEMORY[0x270FA5388](v22, v24);
  uint64_t v27 = (char *)&v117 - v26;
  uint64_t v29 = MEMORY[0x270FA5388](v25, v28);
  int v129 = (char *)&v117 - v30;
  uint64_t v32 = MEMORY[0x270FA5388](v29, v31);
  char v34 = (char *)&v117 - v33;
  uint64_t v36 = MEMORY[0x270FA5388](v32, v35);
  uint64_t v137 = (char *)&v117 - v37;
  uint64_t v39 = MEMORY[0x270FA5388](v36, v38);
  uint64_t v135 = (char *)&v117 - v40;
  uint64_t v42 = MEMORY[0x270FA5388](v39, v41);
  uint64_t v125 = (char *)&v117 - v43;
  uint64_t v45 = MEMORY[0x270FA5388](v42, v44);
  uint64_t v47 = (char *)&v117 - v46;
  uint64_t v49 = MEMORY[0x270FA5388](v45, v48);
  unint64_t v51 = (char *)&v117 - v50;
  uint64_t v53 = MEMORY[0x270FA5388](v49, v52);
  uint64_t v120 = (char *)&v117 - v54;
  uint64_t v56 = MEMORY[0x270FA5388](v53, v55);
  MEMORY[0x270FA5388](v56, v57);
  unint64_t v118 = (char *)&v117 - v58;
  uint64_t v59 = a4;
  uint64_t v123 = a4;
  uint64_t v60 = *(void (**)(uint64_t, uint64_t))(a4 + 88);
  uint64_t v119 = v61;
  v60(a3, v59);
  uint64_t v124 = v51;
  uint64_t v121 = a3;
  v60(a3, v123);
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
    {
      uint64_t v62 = dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t v63 = v138;
      uint64_t v64 = v144;
      if (!v62) {
        goto LABEL_50;
      }
      goto LABEL_16;
    }
    uint64_t v146 = 0;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v72 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v64 = v144;
  }
  else
  {
    char v65 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v66 = v124;
    uint64_t v67 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v65)
    {
      uint64_t v64 = v144;
      if (v67 <= 64)
      {
        swift_getAssociatedConformanceWitness();
        dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        LODWORD(v136) = dispatch thunk of static Comparable.>= infix(_:_:)();
        uint64_t v68 = v64;
        uint64_t v69 = *(void (**)(char *, uint64_t))(v64 + 8);
        v69(v47, v11);
        uint64_t v70 = v134;
        (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v134, v66, v11);
        uint64_t v63 = v138;
        if (v136)
        {
          uint64_t v71 = dispatch thunk of BinaryInteger._lowWord.getter();
          v69(v70, v11);
          uint64_t v64 = v144;
          if (!v71) {
            goto LABEL_50;
          }
        }
        else
        {
          v69(v70, v11);
          uint64_t v64 = v144;
        }
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v64 = v144;
      if (v67 < 64)
      {
        uint64_t v73 = dispatch thunk of BinaryInteger._lowWord.getter();
        uint64_t v63 = v138;
        if (!v73) {
          goto LABEL_50;
        }
        goto LABEL_16;
      }
    }
    uint64_t v146 = 0;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v72 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  (*(void (**)(char *, uint64_t))(v64 + 8))(v47, v11);
  uint64_t v63 = v138;
  if ((v72 & 1) == 0)
  {
LABEL_16:
    uint64_t v136 = swift_checkMetadataState();
    (*(void (**)(uint64_t, uint64_t))(v63 + 24))(v136, v63);
    uint64_t v139 = swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    char v74 = v135;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    uint64_t v75 = *(void (**)(char *, uint64_t))(v64 + 8);
    v75(v74, v11);
    v75(v47, v11);
    uint64_t v77 = *(void (**)(char *, char *, uint64_t))(v64 + 16);
    uint64_t v76 = v64 + 16;
    v77(v137, v124, v11);
    uint64_t v140 = v77;
    v77(v34, v125, v11);
    uint64_t v146 = 1;
    unint64_t v131 = lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(_:)();
    uint64_t v78 = v138;
    (*(void (**)(char *))(v138 + 64))(v47);
    v75(v47, v11);
    char v134 = v27;
    uint64_t v135 = (char *)(v76 + 16);
    uint64_t v144 = v76;
    uint64_t v132 = v78 + 56;
    int v133 = v34;
    uint64_t v130 = v8;
    while (1)
    {
      v140(v27, v34, v11);
      if (dispatch thunk of static BinaryInteger.isSigned.getter())
      {
        char v86 = dispatch thunk of static BinaryInteger.isSigned.getter();
        uint64_t v87 = dispatch thunk of BinaryInteger.bitWidth.getter();
        if (v86)
        {
          if (v87 <= 128)
          {
            dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
            dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
            char v88 = dispatch thunk of static Comparable.>= infix(_:_:)();
            v75(v47, v11);
            uint64_t v89 = v27;
            uint64_t v90 = (uint64_t)v127;
            v140(v127, v89, v11);
            if (v88)
            {
              unint64_t v91 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
              static FixedWidthInteger._truncatingInit<A>(_:)(v90, (uint64_t)&type metadata for _UInt128, v11, v91, v8, (uint64_t)&v146);
              v75((char *)v90, v11);
              uint64_t v93 = v146;
              uint64_t v92 = v147;
              v75(v89, v11);
              if (!(v92 | v93)) {
                goto LABEL_48;
              }
            }
            else
            {
              v75((char *)v90, v11);
              v75(v89, v11);
            }
            goto LABEL_31;
          }
        }
        else if (v87 < 128)
        {
LABEL_27:
          unint64_t v94 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
          static FixedWidthInteger._truncatingInit<A>(_:)((uint64_t)v27, (uint64_t)&type metadata for _UInt128, v11, v94, v8, (uint64_t)&v146);
          uint64_t v95 = v146;
          uint64_t v96 = v147;
          v75(v27, v11);
          if (!(v96 | v95)) {
            goto LABEL_48;
          }
          goto LABEL_31;
        }
      }
      else if (dispatch thunk of BinaryInteger.bitWidth.getter() < 128)
      {
        goto LABEL_27;
      }
      lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
      uint64_t v146 = 0;
      uint64_t v147 = 0;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v97 = dispatch thunk of static Equatable.== infix(_:_:)();
      v75(v47, v11);
      v75(v27, v11);
      if (v97)
      {
LABEL_48:
        v75(v34, v11);
        v75(v137, v11);
        uint64_t v113 = v120;
        (*(void (**)(char *, char *, uint64_t))v135)(v120, v129, v11);
        v75(v125, v11);
        v75(v124, v11);
        uint64_t v114 = v118;
        uint64_t v115 = v119;
        (*(void (**)(char *, char *))(v138 + 56))(v119, v113);
        v75(v113, v11);
        v75(v115, v11);
        return (*(uint64_t (**)(char *, uint64_t))(v123 + 96))(v114, v121);
      }
LABEL_31:
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      uint64_t v98 = v145;
      dispatch thunk of static BinaryInteger.& infix(_:_:)();
      v75(v47, v11);
      if (dispatch thunk of static BinaryInteger.isSigned.getter())
      {
        char v99 = dispatch thunk of static BinaryInteger.isSigned.getter();
        uint64_t v100 = dispatch thunk of BinaryInteger.bitWidth.getter();
        if (v99)
        {
          if (v100 <= 128)
          {
            dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
            dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
            uint64_t v101 = v145;
            char v102 = dispatch thunk of static Comparable.>= infix(_:_:)();
            v75(v47, v11);
            uint64_t v103 = (uint64_t)v126;
            v140(v126, (char *)v101, v11);
            if ((v102 & 1) == 0)
            {
              v75((char *)v103, v11);
              v75((char *)v101, v11);
              uint64_t v80 = v137;
              uint64_t v79 = v138;
              uint64_t v82 = (void (**)(char *, char *, uint64_t))v135;
              uint64_t v81 = v136;
LABEL_18:
              uint64_t v83 = v129;
              (*(void (**)(char *, char *, uint64_t, uint64_t))(v79 + 56))(v129, v80, v81, v79);
              v75(v83, v11);
              (*v82)(v83, v47, v11);
              goto LABEL_19;
            }
            unint64_t v104 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
            static FixedWidthInteger._truncatingInit<A>(_:)(v103, (uint64_t)&type metadata for _UInt128, v11, v104, v8, (uint64_t)&v146);
            v75((char *)v103, v11);
LABEL_40:
            uint64_t v107 = v146;
            uint64_t v108 = v147;
            uint64_t v106 = v101;
LABEL_41:
            v75((char *)v106, v11);
            uint64_t v110 = v108 | v107;
            uint64_t v80 = v137;
            uint64_t v79 = v138;
            uint64_t v82 = (void (**)(char *, char *, uint64_t))v135;
            uint64_t v81 = v136;
            if (v110) {
              goto LABEL_18;
            }
            goto LABEL_19;
          }
        }
        else if (v100 < 128)
        {
          unint64_t v109 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
          uint64_t v101 = v145;
          static FixedWidthInteger._truncatingInit<A>(_:)(v145, (uint64_t)&type metadata for _UInt128, v11, v109, v8, (uint64_t)&v146);
          goto LABEL_40;
        }
        lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
        uint64_t v146 = 0;
        uint64_t v147 = 0;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        uint64_t v112 = v145;
        int v128 = dispatch thunk of static Equatable.== infix(_:_:)();
        v75(v47, v11);
        v75((char *)v112, v11);
        uint64_t v80 = v137;
        uint64_t v79 = v138;
        uint64_t v82 = (void (**)(char *, char *, uint64_t))v135;
        uint64_t v81 = v136;
        if ((v128 & 1) == 0) {
          goto LABEL_18;
        }
      }
      else
      {
        if (dispatch thunk of BinaryInteger.bitWidth.getter() < 128)
        {
          unint64_t v105 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
          static FixedWidthInteger._truncatingInit<A>(_:)(v98, (uint64_t)&type metadata for _UInt128, v11, v105, v8, (uint64_t)&v146);
          uint64_t v106 = v98;
          uint64_t v107 = v146;
          uint64_t v108 = v147;
          goto LABEL_41;
        }
        lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
        uint64_t v146 = 0;
        uint64_t v147 = 0;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        char v111 = dispatch thunk of static Equatable.== infix(_:_:)();
        v75(v47, v11);
        v75((char *)v98, v11);
        uint64_t v80 = v137;
        uint64_t v79 = v138;
        uint64_t v82 = (void (**)(char *, char *, uint64_t))v135;
        uint64_t v81 = v136;
        if ((v111 & 1) == 0) {
          goto LABEL_18;
        }
      }
LABEL_19:
      (*(void (**)(char *, char *, uint64_t, uint64_t))(v79 + 56))(v80, v80, v81, v79);
      v75(v80, v11);
      uint64_t v84 = *v82;
      (*v82)(v80, v47, v11);
      uint64_t v146 = 1;
      char v34 = v133;
      uint64_t v85 = v130;
      dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)();
      v75(v34, v11);
      v84(v34, v47, v11);
      uint64_t v8 = v85;
      uint64_t v27 = v134;
    }
  }
LABEL_50:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static FieldElement./ infix(_:_:)@<X0>(void (**a1)(char *, char *, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v135 = a4;
  uint64_t v149 = a2;
  uint64_t v146 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v148 = AssociatedConformanceWitness;
  unint64_t v156 = (void (*)(char *, uint64_t))AssociatedTypeWitness;
  uint64_t v9 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  uint64_t v157 = *(void *)(v9 + 24);
  uint64_t v153 = *(void *)(v157 + 16);
  uint64_t v152 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v152, v10);
  Swift::String v151 = (char *)&v130 - v11;
  uint64_t v12 = swift_checkMetadataState();
  uint64_t v154 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12, v13);
  uint64_t v145 = (char *)&v130 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v14, v16);
  uint64_t v139 = (char *)&v130 - v18;
  uint64_t v20 = MEMORY[0x270FA5388](v17, v19);
  uint64_t v155 = (uint64_t)&v130 - v21;
  uint64_t v23 = MEMORY[0x270FA5388](v20, v22);
  uint64_t v140 = (char *)&v130 - v24;
  uint64_t v26 = MEMORY[0x270FA5388](v23, v25);
  uint64_t v28 = (char *)&v130 - v27;
  uint64_t v30 = MEMORY[0x270FA5388](v26, v29);
  uint64_t v141 = (char *)&v130 - v31;
  uint64_t v33 = MEMORY[0x270FA5388](v30, v32);
  uint64_t v158 = (char *)&v130 - v34;
  uint64_t v36 = MEMORY[0x270FA5388](v33, v35);
  uint64_t v147 = (char *)&v130 - v37;
  uint64_t v39 = MEMORY[0x270FA5388](v36, v38);
  unint64_t v150 = (char *)&v130 - v40;
  uint64_t v42 = MEMORY[0x270FA5388](v39, v41);
  uint64_t v137 = (char *)&v130 - v43;
  uint64_t v45 = MEMORY[0x270FA5388](v42, v44);
  uint64_t v47 = (char *)&v130 - v46;
  uint64_t v49 = MEMORY[0x270FA5388](v45, v48);
  uint64_t v136 = (char *)&v130 - v50;
  uint64_t v52 = MEMORY[0x270FA5388](v49, v51);
  uint64_t v132 = (char *)&v130 - v53;
  uint64_t v55 = MEMORY[0x270FA5388](v52, v54);
  uint64_t v57 = (char *)&v130 - v56;
  uint64_t v59 = MEMORY[0x270FA5388](v55, v58);
  uint64_t v130 = (char *)&v130 - v60;
  MEMORY[0x270FA5388](v59, v61);
  uint64_t v63 = (char *)&v130 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v64 + 16))(v63, v146, a3);
  uint64_t v65 = v135;
  FieldElement.init(other:)((uint64_t)v63, a3, v135);
  uint64_t v66 = *(void (**)(uint64_t, uint64_t))(v65 + 88);
  unint64_t v131 = v57;
  uint64_t v133 = a5;
  v66(a3, v65);
  uint64_t v67 = v136;
  uint64_t v134 = a3;
  v66(a3, v65);
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
  {
    char v68 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v69 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v68)
    {
      if (v69 > 64) {
        goto LABEL_12;
      }
      uint64_t v70 = v67;
      swift_getAssociatedConformanceWitness();
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      char v71 = dispatch thunk of static Comparable.>= infix(_:_:)();
      uint64_t v72 = v154;
      uint64_t v73 = *(void (**)(char *, uint64_t))(v154 + 8);
      v73(v47, v12);
      char v74 = *(void (**)(char *, char *, uint64_t))(v72 + 16);
      uint64_t v75 = v145;
      v74(v145, v70, v12);
      uint64_t v76 = v148;
      if ((v71 & 1) == 0)
      {
        v73(v75, v12);
        uint64_t v78 = v76;
        goto LABEL_13;
      }
      uint64_t v77 = dispatch thunk of BinaryInteger._lowWord.getter();
      v73(v75, v12);
      uint64_t v78 = v76;
      if (!v77) {
        goto LABEL_49;
      }
LABEL_13:
      uint64_t v81 = swift_checkMetadataState();
      (*(void (**)(uint64_t, uint64_t))(v78 + 24))(v81, v78);
      uint64_t v149 = swift_getAssociatedConformanceWitness();
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      uint64_t v82 = v150;
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      uint64_t v83 = v154;
      uint64_t v84 = *(void (**)(char *, uint64_t))(v154 + 8);
      v84(v82, v12);
      v84(v47, v12);
      uint64_t v85 = *(void (**)(char *, char *, uint64_t))(v83 + 16);
      v83 += 16;
      v85(v147, v136, v12);
      unint64_t v150 = (char *)v85;
      v85(v158, v137, v12);
      uint64_t v159 = 1;
      unint64_t v142 = lazy protocol witness table accessor for type Int and conformance Int();
      dispatch thunk of BinaryInteger.init<A>(_:)();
      uint64_t v86 = v148;
      (*(void (**)(char *, uint64_t))(v148 + 64))(v47, v81);
      v84(v47, v12);
      uint64_t v145 = (char *)v81;
      uint64_t v146 = (void (**)(char *, char *, uint64_t))(v83 + 16);
      uint64_t v154 = v83;
      uint64_t v143 = v9;
      uint64_t v144 = v28;
      uint64_t v157 = v86 + 56;
      uint64_t v138 = v47;
      unint64_t v156 = v84;
      while (1)
      {
        ((void (*)(char *, char *, uint64_t))v150)(v28, v158, v12);
        if (dispatch thunk of static BinaryInteger.isSigned.getter())
        {
          char v94 = dispatch thunk of static BinaryInteger.isSigned.getter();
          uint64_t v95 = dispatch thunk of BinaryInteger.bitWidth.getter();
          if (v94)
          {
            if (v95 <= 128)
            {
              dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
              dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
              char v96 = dispatch thunk of static Comparable.>= infix(_:_:)();
              v84(v47, v12);
              char v97 = v28;
              uint64_t v98 = (uint64_t)v140;
              ((void (*)(char *, char *, uint64_t))v150)(v140, v97, v12);
              if (v96)
              {
                unint64_t v99 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
                static FixedWidthInteger._truncatingInit<A>(_:)(v98, (uint64_t)&type metadata for _UInt128, v12, v99, v9, (uint64_t)&v159);
                v84((char *)v98, v12);
                uint64_t v100 = v159;
                uint64_t v101 = v160;
                v84(v97, v12);
                uint64_t v81 = (uint64_t)v145;
                if (!(v101 | v100)) {
                  goto LABEL_47;
                }
              }
              else
              {
                v84((char *)v98, v12);
                v84(v97, v12);
                uint64_t v81 = (uint64_t)v145;
              }
              goto LABEL_28;
            }
          }
          else if (v95 < 128)
          {
LABEL_24:
            unint64_t v102 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
            static FixedWidthInteger._truncatingInit<A>(_:)((uint64_t)v28, (uint64_t)&type metadata for _UInt128, v12, v102, v9, (uint64_t)&v159);
            uint64_t v103 = v159;
            uint64_t v104 = v160;
            v84(v28, v12);
            if (!(v104 | v103)) {
              goto LABEL_47;
            }
            goto LABEL_28;
          }
        }
        else if (dispatch thunk of BinaryInteger.bitWidth.getter() < 128)
        {
          goto LABEL_24;
        }
        lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
        uint64_t v159 = 0;
        uint64_t v160 = 0;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        char v105 = dispatch thunk of static Equatable.== infix(_:_:)();
        v84(v47, v12);
        v84(v28, v12);
        if (v105)
        {
LABEL_47:
          v84(v158, v12);
          v84(v147, v12);
          char v126 = v132;
          (*v146)(v132, v141, v12);
          v84(v137, v12);
          v84(v136, v12);
          uint64_t v127 = v130;
          int v128 = v131;
          (*(void (**)(char *, char *, uint64_t))(v148 + 56))(v131, v126, v81);
          v84(v126, v12);
          v84(v128, v12);
          return (*(uint64_t (**)(char *, uint64_t))(v135 + 96))(v127, v134);
        }
LABEL_28:
        dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        uint64_t v106 = v155;
        dispatch thunk of static BinaryInteger.& infix(_:_:)();
        v84(v47, v12);
        if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
        {
          if (dispatch thunk of BinaryInteger.bitWidth.getter() < 128)
          {
            unint64_t v111 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
            static FixedWidthInteger._truncatingInit<A>(_:)(v106, (uint64_t)&type metadata for _UInt128, v12, v111, v9, (uint64_t)&v159);
            uint64_t v112 = v106;
            uint64_t v113 = v159;
            uint64_t v114 = v160;
            goto LABEL_37;
          }
          lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
          uint64_t v159 = 0;
          uint64_t v160 = 0;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          char v110 = dispatch thunk of static Equatable.== infix(_:_:)();
          v84(v47, v12);
          uint64_t v125 = v106;
LABEL_43:
          v84((char *)v125, v12);
          char v88 = v147;
          uint64_t v87 = v148;
          uint64_t v90 = v145;
          goto LABEL_44;
        }
        char v107 = dispatch thunk of static BinaryInteger.isSigned.getter();
        uint64_t v108 = dispatch thunk of BinaryInteger.bitWidth.getter();
        if ((v107 & 1) == 0)
        {
          if (v108 < 128)
          {
            unint64_t v115 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
            uint64_t v116 = v155;
            static FixedWidthInteger._truncatingInit<A>(_:)(v155, (uint64_t)&type metadata for _UInt128, v12, v115, v9, (uint64_t)&v159);
            uint64_t v113 = v159;
            uint64_t v114 = v160;
            uint64_t v112 = v116;
LABEL_37:
            v84((char *)v112, v12);
            uint64_t v117 = v114 | v113;
            char v88 = v147;
            uint64_t v87 = v148;
            uint64_t v90 = v145;
LABEL_38:
            uint64_t v89 = v146;
            if (v117) {
              goto LABEL_15;
            }
            goto LABEL_16;
          }
          lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
          uint64_t v159 = 0;
          uint64_t v160 = 0;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          uint64_t v124 = v155;
          char v110 = dispatch thunk of static Equatable.== infix(_:_:)();
          v84(v47, v12);
          uint64_t v125 = v124;
          goto LABEL_43;
        }
        if (v108 <= 128)
        {
          dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
          dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
          uint64_t v118 = v155;
          char v119 = dispatch thunk of static Comparable.>= infix(_:_:)();
          v84(v47, v12);
          uint64_t v120 = (uint64_t)v139;
          ((void (*)(char *, uint64_t, uint64_t))v150)(v139, v118, v12);
          if ((v119 & 1) == 0)
          {
            v84((char *)v120, v12);
            v84((char *)v118, v12);
            char v88 = v147;
            uint64_t v87 = v148;
            uint64_t v90 = v145;
            uint64_t v89 = v146;
            uint64_t v47 = v138;
LABEL_15:
            unint64_t v91 = v141;
            (*(void (**)(char *, char *, char *, uint64_t))(v87 + 56))(v141, v88, v90, v87);
            v156(v91, v12);
            (*v89)(v91, v47, v12);
            goto LABEL_16;
          }
          unint64_t v121 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
          static FixedWidthInteger._truncatingInit<A>(_:)(v120, (uint64_t)&type metadata for _UInt128, v12, v121, v9, (uint64_t)&v159);
          v84((char *)v120, v12);
          uint64_t v122 = v159;
          uint64_t v123 = v160;
          v84((char *)v118, v12);
          uint64_t v117 = v123 | v122;
          char v88 = v147;
          uint64_t v87 = v148;
          uint64_t v90 = v145;
          uint64_t v47 = v138;
          goto LABEL_38;
        }
        lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
        uint64_t v159 = 0;
        uint64_t v160 = 0;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        uint64_t v109 = v155;
        char v110 = dispatch thunk of static Equatable.== infix(_:_:)();
        v84(v47, v12);
        v84((char *)v109, v12);
        uint64_t v90 = (char *)v81;
        char v88 = v147;
        uint64_t v87 = v148;
LABEL_44:
        uint64_t v89 = v146;
        if ((v110 & 1) == 0) {
          goto LABEL_15;
        }
LABEL_16:
        (*(void (**)(char *, char *, char *, uint64_t))(v87 + 56))(v88, v88, v90, v87);
        uint64_t v84 = v156;
        v156(v88, v12);
        uint64_t v92 = *v89;
        (*v89)(v88, v47, v12);
        uint64_t v159 = 1;
        uint64_t v93 = v158;
        uint64_t v9 = v143;
        dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)();
        v84(v93, v12);
        v92(v93, v47, v12);
        uint64_t v28 = v144;
        uint64_t v81 = (uint64_t)v90;
      }
    }
    if (v69 >= 64) {
      goto LABEL_12;
    }
LABEL_10:
    uint64_t v79 = dispatch thunk of BinaryInteger._lowWord.getter();
    uint64_t v78 = v148;
    if (!v79) {
      goto LABEL_49;
    }
    goto LABEL_13;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64) {
    goto LABEL_10;
  }
LABEL_12:
  uint64_t v159 = 0;
  lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  char v80 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v154 + 8))(v47, v12);
  uint64_t v78 = v148;
  if ((v80 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_49:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static FieldElement.root(n:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v24 = a4;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness, v9);
  uint64_t v11 = (char *)&v22 - v10;
  uint64_t v12 = swift_checkMetadataState();
  uint64_t v23 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
  v23(v12, AssociatedConformanceWitness);
  uint64_t v13 = MEMORY[0x2612241C0]();
  swift_bridgeObjectRelease();
  if (v13 <= a1)
  {
    uint64_t v26 = 0;
    unint64_t v27 = 0xE000000000000000;
    _StringGuts.grow(_:)(26);
    uint64_t v25 = a1;
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v17 = v16;
    swift_bridgeObjectRelease();
    uint64_t v26 = v15;
    unint64_t v27 = v17;
    v18._countAndFlagsBits = 2112544;
    v18._object = (void *)0xE300000000000000;
    String.append(_:)(v18);
    v23(v12, AssociatedConformanceWitness);
    uint64_t v19 = MEMORY[0x2612241C0]();
    swift_bridgeObjectRelease();
    uint64_t v25 = v19;
    v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._object = (void *)0x8000000260BFEBE0;
    v21._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v21);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(a3 + 112))(a2, a3);
    v23(v12, AssociatedConformanceWitness);
    Array.subscript.getter();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 96))(v11, a2, a3);
  }
  return result;
}

uint64_t FieldElement.pow(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v119 = a1;
  uint64_t v102 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  uint64_t v115 = *(void *)(*(void *)(v6 + 24) + 16);
  uint64_t v114 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v114, v7);
  uint64_t v113 = (char *)&v98 - v8;
  uint64_t v9 = swift_checkMetadataState();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v9, v11);
  uint64_t v103 = (char *)&v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12, v14);
  uint64_t v109 = (char *)&v98 - v16;
  uint64_t v18 = MEMORY[0x270FA5388](v15, v17);
  uint64_t v104 = (char *)&v98 - v19;
  uint64_t v21 = MEMORY[0x270FA5388](v18, v20);
  unint64_t v111 = (char *)&v98 - v22;
  uint64_t v24 = MEMORY[0x270FA5388](v21, v23);
  uint64_t v26 = (char *)&v98 - v25;
  uint64_t v28 = MEMORY[0x270FA5388](v24, v27);
  char v105 = (char *)&v98 - v29;
  uint64_t v31 = MEMORY[0x270FA5388](v28, v30);
  uint64_t v33 = (char *)&v98 - v32;
  uint64_t v35 = MEMORY[0x270FA5388](v31, v34);
  uint64_t v120 = (char *)&v98 - v36;
  uint64_t v38 = MEMORY[0x270FA5388](v35, v37);
  uint64_t v40 = (char *)&v98 - v39;
  uint64_t v42 = MEMORY[0x270FA5388](v38, v41);
  uint64_t v98 = (char *)&v98 - v43;
  MEMORY[0x270FA5388](v42, v44);
  uint64_t v46 = (char *)&v98 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v46, v117, a2);
  FieldElement.init(other:)((uint64_t)v46, a2, a3);
  uint64_t v48 = *(void (**)(uint64_t, uint64_t))(a3 + 88);
  uint64_t v100 = a2;
  uint64_t v49 = a2;
  uint64_t v50 = AssociatedConformanceWitness;
  uint64_t v101 = a3;
  uint64_t v51 = a3;
  uint64_t v52 = (uint64_t)v111;
  v48(v49, v51);
  uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  unint64_t v99 = v40;
  v53(v120, v40, v9);
  uint64_t v116 = (void (*)(uint64_t, char *, uint64_t))v53;
  uint64_t v117 = v10 + 16;
  v53(v33, (char *)v119, v9);
  uint64_t v54 = swift_checkMetadataState();
  uint64_t v121 = 1;
  unint64_t v107 = lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of BinaryInteger.init<A>(_:)();
  uint64_t v55 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 64);
  uint64_t v119 = v54;
  v55(v26, v54, v50);
  uint64_t v58 = *(void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v57 = v10 + 8;
  uint64_t v56 = v58;
  v58(v26, v9);
  uint64_t AssociatedTypeWitness = v50 + 56;
  char v110 = (void (**)(char *, char *, uint64_t))(v57 + 24);
  uint64_t v108 = v33;
  uint64_t v106 = v6;
  while (1)
  {
    v116(v52, v33, v9);
    if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
    {
      if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 128) {
        goto LABEL_15;
      }
      goto LABEL_11;
    }
    char v68 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v69 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v68 & 1) == 0) {
      break;
    }
    if (v69 > 128) {
      goto LABEL_15;
    }
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    char v70 = dispatch thunk of static Comparable.>= infix(_:_:)();
    v56(v26, v9);
    uint64_t v71 = v52;
    uint64_t v72 = (uint64_t)v104;
    v116((uint64_t)v104, (char *)v71, v9);
    if ((v70 & 1) == 0)
    {
      v56((char *)v72, v9);
      v56((char *)v71, v9);
      goto LABEL_16;
    }
    unint64_t v73 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
    static FixedWidthInteger._truncatingInit<A>(_:)(v72, (uint64_t)&type metadata for _UInt128, v9, v73, v6, (uint64_t)&v121);
    v56((char *)v72, v9);
    uint64_t v74 = v121;
    uint64_t v75 = v122;
    uint64_t v76 = v71;
LABEL_12:
    v56((char *)v76, v9);
    if (!(v75 | v74)) {
      goto LABEL_33;
    }
LABEL_16:
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    uint64_t v79 = (uint64_t)v109;
    dispatch thunk of static BinaryInteger.& infix(_:_:)();
    v56(v26, v9);
    if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
    {
      if (dispatch thunk of BinaryInteger.bitWidth.getter() < 128)
      {
        unint64_t v89 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
        static FixedWidthInteger._truncatingInit<A>(_:)(v79, (uint64_t)&type metadata for _UInt128, v9, v89, v6, (uint64_t)&v121);
        uint64_t v90 = v121;
        uint64_t v91 = v122;
        v56((char *)v79, v9);
        uint64_t v88 = v91 | v90;
LABEL_23:
        uint64_t v59 = AssociatedConformanceWitness;
        goto LABEL_28;
      }
      goto LABEL_24;
    }
    char v80 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v81 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v80)
    {
      if (v81 <= 128)
      {
        uint64_t v82 = v79;
        dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        char v83 = dispatch thunk of static Comparable.>= infix(_:_:)();
        v56(v26, v9);
        uint64_t v84 = (uint64_t)v103;
        v116((uint64_t)v103, (char *)v82, v9);
        if ((v83 & 1) == 0)
        {
          v56((char *)v84, v9);
          v56((char *)v82, v9);
          uint64_t v52 = (uint64_t)v111;
          uint64_t v59 = AssociatedConformanceWitness;
          uint64_t v60 = v56;
          uint64_t v61 = v57;
          uint64_t v62 = v110;
LABEL_3:
          uint64_t v63 = v105;
          (*(void (**)(char *, char *, uint64_t, uint64_t))(v59 + 56))(v105, v120, v119, v59);
          v60(v63, v9);
          (*v62)(v63, v26, v9);
          uint64_t v64 = v119;
          uint64_t v65 = v120;
          goto LABEL_4;
        }
        unint64_t v85 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
        static FixedWidthInteger._truncatingInit<A>(_:)(v84, (uint64_t)&type metadata for _UInt128, v9, v85, v6, (uint64_t)&v121);
        v56((char *)v84, v9);
        uint64_t v86 = v121;
        uint64_t v87 = v122;
        v56((char *)v82, v9);
        uint64_t v88 = v87 | v86;
        goto LABEL_23;
      }
LABEL_24:
      lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
      uint64_t v121 = 0;
      uint64_t v122 = 0;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v92 = dispatch thunk of static Equatable.== infix(_:_:)();
      v56(v26, v9);
      v56((char *)v79, v9);
      uint64_t v59 = AssociatedConformanceWitness;
      goto LABEL_30;
    }
    uint64_t v59 = AssociatedConformanceWitness;
    if (v81 < 128)
    {
      unint64_t v93 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
      static FixedWidthInteger._truncatingInit<A>(_:)(v79, (uint64_t)&type metadata for _UInt128, v9, v93, v6, (uint64_t)&v121);
      uint64_t v94 = v121;
      uint64_t v95 = v122;
      v56((char *)v79, v9);
      uint64_t v88 = v95 | v94;
LABEL_28:
      uint64_t v64 = v119;
      uint64_t v65 = v120;
      uint64_t v60 = v56;
      uint64_t v61 = v57;
      uint64_t v62 = v110;
      uint64_t v52 = (uint64_t)v111;
      if (v88) {
        goto LABEL_3;
      }
      goto LABEL_4;
    }
    lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
    uint64_t v121 = 0;
    uint64_t v122 = 0;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v92 = dispatch thunk of static Equatable.== infix(_:_:)();
    v56(v26, v9);
    v56((char *)v79, v9);
LABEL_30:
    uint64_t v64 = v119;
    uint64_t v65 = v120;
    uint64_t v60 = v56;
    uint64_t v61 = v57;
    uint64_t v62 = v110;
    uint64_t v52 = (uint64_t)v111;
    if ((v92 & 1) == 0) {
      goto LABEL_3;
    }
LABEL_4:
    (*(void (**)(char *, char *, uint64_t, uint64_t))(v59 + 56))(v65, v65, v64, v59);
    v60(v65, v9);
    uint64_t v66 = *v62;
    (*v62)(v65, v26, v9);
    uint64_t v121 = 1;
    uint64_t v33 = v108;
    uint64_t v67 = v106;
    dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)();
    v60(v33, v9);
    v66(v33, v26, v9);
    uint64_t v57 = v61;
    uint64_t v56 = v60;
    uint64_t v6 = v67;
  }
  if (v69 < 128)
  {
LABEL_11:
    unint64_t v77 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
    static FixedWidthInteger._truncatingInit<A>(_:)(v52, (uint64_t)&type metadata for _UInt128, v9, v77, v6, (uint64_t)&v121);
    uint64_t v74 = v121;
    uint64_t v75 = v122;
    uint64_t v76 = v52;
    goto LABEL_12;
  }
LABEL_15:
  lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
  uint64_t v121 = 0;
  uint64_t v122 = 0;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  char v78 = dispatch thunk of static Equatable.== infix(_:_:)();
  v56(v26, v9);
  v56((char *)v52, v9);
  if ((v78 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_33:
  v56(v33, v9);
  v56(v120, v9);
  char v96 = v98;
  (*v110)(v98, v105, v9);
  v56(v99, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v101 + 96))(v96, v100);
}

uint64_t FieldElement.inv()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v117 = a2;
  uint64_t v116 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v130 = AssociatedConformanceWitness;
  uint64_t v131 = AssociatedTypeWitness;
  uint64_t v8 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  uint64_t v132 = *(void (**)(char *, char *, uint64_t))(v8 + 24);
  uint64_t v135 = *((void *)v132 + 2);
  uint64_t v134 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v134, v9);
  uint64_t v133 = (char *)&v111 - v10;
  uint64_t v11 = swift_checkMetadataState();
  uint64_t v136 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11, v12);
  int v128 = (char *)&v111 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v13, v15);
  uint64_t v118 = (char *)&v111 - v17;
  uint64_t v19 = MEMORY[0x270FA5388](v16, v18);
  uint64_t v137 = (uint64_t)&v111 - v20;
  uint64_t v22 = MEMORY[0x270FA5388](v19, v21);
  uint64_t v119 = (char *)&v111 - v23;
  uint64_t v25 = MEMORY[0x270FA5388](v22, v24);
  uint64_t v27 = (char *)&v111 - v26;
  uint64_t v29 = MEMORY[0x270FA5388](v25, v28);
  uint64_t v121 = (char *)&v111 - v30;
  uint64_t v32 = MEMORY[0x270FA5388](v29, v31);
  uint64_t v34 = (char *)&v111 - v33;
  uint64_t v36 = MEMORY[0x270FA5388](v32, v35);
  int v129 = (char *)&v111 - v37;
  uint64_t v39 = MEMORY[0x270FA5388](v36, v38);
  uint64_t v127 = (char *)&v111 - v40;
  uint64_t v42 = MEMORY[0x270FA5388](v39, v41);
  uint64_t v115 = (char *)&v111 - v43;
  uint64_t v45 = MEMORY[0x270FA5388](v42, v44);
  uint64_t v47 = (char *)&v111 - v46;
  uint64_t v49 = MEMORY[0x270FA5388](v45, v48);
  uint64_t v51 = (char *)&v111 - v50;
  uint64_t v53 = MEMORY[0x270FA5388](v49, v52);
  uint64_t v112 = (char *)&v111 - v54;
  MEMORY[0x270FA5388](v53, v55);
  uint64_t v57 = (char *)&v111 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v57, v4, a1);
  uint64_t v59 = v117;
  FieldElement.init(other:)((uint64_t)v57, a1, v117);
  uint64_t v60 = *(void (**)(uint64_t, uint64_t))(v59 + 88);
  uint64_t v113 = a1;
  v60(a1, v59);
  char v61 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v114 = v51;
  if ((v61 & 1) == 0)
  {
    char v66 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v67 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v66)
    {
      if (v67 > 64)
      {
LABEL_7:
        uint64_t v138 = 0;
        lazy protocol witness table accessor for type Int and conformance Int();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        uint64_t v62 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v65 = v136;
        (*(void (**)(char *, uint64_t))(v136 + 8))(v47, v11);
        uint64_t v64 = v130;
        if (v62) {
          goto LABEL_17;
        }
        goto LABEL_19;
      }
      swift_getAssociatedConformanceWitness();
      uint64_t v69 = v51;
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      LODWORD(v126) = dispatch thunk of static Comparable.>= infix(_:_:)();
      uint64_t v70 = v136;
      uint64_t v51 = *(char **)(v136 + 8);
      ((void (*)(char *, uint64_t))v51)(v47, v11);
      uint64_t v62 = (uint64_t)v128;
      (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v128, v69, v11);
      if ((v126 & 1) == 0)
      {
LABEL_18:
        ((void (*)(uint64_t, uint64_t))v51)(v62, v11);
        uint64_t v64 = v130;
        uint64_t v65 = v136;
        goto LABEL_19;
      }
      uint64_t v126 = dispatch thunk of BinaryInteger._lowWord.getter();
      ((void (*)(uint64_t, uint64_t))v51)(v62, v11);
      uint64_t v64 = v130;
      uint64_t v65 = v136;
      if (v126) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v64 = v130;
      if (v67 >= 64)
      {
        uint64_t v138 = 0;
        lazy protocol witness table accessor for type Int and conformance Int();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        uint64_t v62 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v65 = v136;
        (*(void (**)(char *, uint64_t))(v136 + 8))(v47, v11);
        if ((v62 & 1) == 0) {
          goto LABEL_19;
        }
        goto LABEL_17;
      }
      uint64_t v62 = (uint64_t)v51;
      uint64_t v68 = dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t v65 = v136;
      if (v68) {
        goto LABEL_19;
      }
    }
LABEL_17:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_18;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64) {
    goto LABEL_7;
  }
  uint64_t v62 = (uint64_t)v51;
  uint64_t v63 = dispatch thunk of BinaryInteger._lowWord.getter();
  uint64_t v64 = v130;
  uint64_t v65 = v136;
  if (!v63) {
    goto LABEL_17;
  }
LABEL_19:
  int v128 = (char *)swift_checkMetadataState();
  (*(void (**)(char *, uint64_t))(v64 + 24))(v128, v64);
  uint64_t v131 = swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  uint64_t v71 = v127;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  uint64_t v72 = v115;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  unint64_t v73 = *(void (**)(char *, uint64_t))(v65 + 8);
  v73(v71, v11);
  v73(v47, v11);
  uint64_t v74 = *(void (**)(char *, char *, uint64_t))(v65 + 16);
  v74(v129, v114, v11);
  uint64_t v132 = v74;
  v74(v34, v72, v11);
  uint64_t v138 = 1;
  unint64_t v125 = lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of BinaryInteger.init<A>(_:)();
  uint64_t v75 = v130;
  (*(void (**)(char *))(v130 + 64))(v47);
  v73(v47, v11);
  uint64_t v76 = (void (**)(char *, char *, uint64_t))(v65 + 32);
  uint64_t v136 = v65 + 16;
  uint64_t v126 = (uint64_t)v34;
  uint64_t v127 = v27;
  uint64_t v123 = v75 + 56;
  uint64_t v124 = (void (**)(char *, char *, uint64_t))(v65 + 32);
  uint64_t v122 = v8;
  while (1)
  {
    v132(v27, v34, v11);
    if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
    {
      if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 128) {
        goto LABEL_33;
      }
      goto LABEL_30;
    }
    char v82 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v83 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v82 & 1) == 0) {
      break;
    }
    if (v83 > 128) {
      goto LABEL_33;
    }
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    char v84 = dispatch thunk of static Comparable.>= infix(_:_:)();
    v73(v47, v11);
    unint64_t v85 = v27;
    uint64_t v86 = (uint64_t)v119;
    v132(v119, v85, v11);
    if (v84)
    {
      unint64_t v87 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
      static FixedWidthInteger._truncatingInit<A>(_:)(v86, (uint64_t)&type metadata for _UInt128, v11, v87, v8, (uint64_t)&v138);
      v73((char *)v86, v11);
      uint64_t v88 = v138;
      uint64_t v89 = v139;
      v73(v85, v11);
      if (!(v89 | v88)) {
        goto LABEL_51;
      }
    }
    else
    {
      v73((char *)v86, v11);
      v73(v85, v11);
    }
LABEL_34:
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    uint64_t v94 = v137;
    dispatch thunk of static BinaryInteger.& infix(_:_:)();
    v73(v47, v11);
    if (dispatch thunk of static BinaryInteger.isSigned.getter())
    {
      char v95 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v96 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if (v95)
      {
        if (v96 <= 128)
        {
          dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
          dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
          uint64_t v97 = v137;
          char v98 = dispatch thunk of static Comparable.>= infix(_:_:)();
          v73(v47, v11);
          uint64_t v99 = (uint64_t)v118;
          v132(v118, (char *)v97, v11);
          if ((v98 & 1) == 0)
          {
            v73((char *)v99, v11);
            v73((char *)v97, v11);
            char v78 = v129;
            uint64_t v77 = v130;
            uint64_t v79 = v128;
            uint64_t v76 = v124;
LABEL_21:
            char v80 = v121;
            (*(void (**)(char *, char *, char *, uint64_t))(v77 + 56))(v121, v78, v79, v77);
            v73(v80, v11);
            (*v76)(v80, v47, v11);
            goto LABEL_22;
          }
          unint64_t v100 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
          static FixedWidthInteger._truncatingInit<A>(_:)(v99, (uint64_t)&type metadata for _UInt128, v11, v100, v8, (uint64_t)&v138);
          v73((char *)v99, v11);
LABEL_43:
          uint64_t v103 = v138;
          uint64_t v104 = v139;
          uint64_t v102 = v97;
LABEL_44:
          v73((char *)v102, v11);
          uint64_t v106 = v104 | v103;
          char v78 = v129;
          uint64_t v77 = v130;
          uint64_t v79 = v128;
          uint64_t v76 = v124;
          if (v106) {
            goto LABEL_21;
          }
          goto LABEL_22;
        }
      }
      else if (v96 < 128)
      {
        unint64_t v105 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
        uint64_t v97 = v137;
        static FixedWidthInteger._truncatingInit<A>(_:)(v137, (uint64_t)&type metadata for _UInt128, v11, v105, v8, (uint64_t)&v138);
        goto LABEL_43;
      }
      lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
      uint64_t v138 = 0;
      uint64_t v139 = 0;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      uint64_t v108 = v137;
      int v120 = dispatch thunk of static Equatable.== infix(_:_:)();
      v73(v47, v11);
      v73((char *)v108, v11);
      char v78 = v129;
      uint64_t v77 = v130;
      uint64_t v79 = v128;
      uint64_t v76 = v124;
      if ((v120 & 1) == 0) {
        goto LABEL_21;
      }
    }
    else
    {
      if (dispatch thunk of BinaryInteger.bitWidth.getter() < 128)
      {
        unint64_t v101 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
        static FixedWidthInteger._truncatingInit<A>(_:)(v94, (uint64_t)&type metadata for _UInt128, v11, v101, v8, (uint64_t)&v138);
        uint64_t v102 = v94;
        uint64_t v103 = v138;
        uint64_t v104 = v139;
        goto LABEL_44;
      }
      lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
      uint64_t v138 = 0;
      uint64_t v139 = 0;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v107 = dispatch thunk of static Equatable.== infix(_:_:)();
      v73(v47, v11);
      v73((char *)v94, v11);
      char v78 = v129;
      uint64_t v77 = v130;
      uint64_t v79 = v128;
      uint64_t v76 = v124;
      if ((v107 & 1) == 0) {
        goto LABEL_21;
      }
    }
LABEL_22:
    (*(void (**)(char *, char *, char *, uint64_t))(v77 + 56))(v78, v78, v79, v77);
    v73(v78, v11);
    uint64_t v81 = *v76;
    (*v76)(v78, v47, v11);
    uint64_t v138 = 1;
    uint64_t v34 = (char *)v126;
    uint64_t v8 = v122;
    dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)();
    v73(v34, v11);
    v81(v34, v47, v11);
    uint64_t v27 = v127;
  }
  if (v83 < 128)
  {
LABEL_30:
    unint64_t v90 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
    static FixedWidthInteger._truncatingInit<A>(_:)((uint64_t)v27, (uint64_t)&type metadata for _UInt128, v11, v90, v8, (uint64_t)&v138);
    uint64_t v91 = v138;
    uint64_t v92 = v139;
    v73(v27, v11);
    if (!(v92 | v91)) {
      goto LABEL_51;
    }
    goto LABEL_34;
  }
LABEL_33:
  lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
  uint64_t v138 = 0;
  uint64_t v139 = 0;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  char v93 = dispatch thunk of static Equatable.== infix(_:_:)();
  v73(v47, v11);
  v73(v27, v11);
  if ((v93 & 1) == 0) {
    goto LABEL_34;
  }
LABEL_51:
  v73(v34, v11);
  v73(v129, v11);
  uint64_t v109 = v112;
  (*v76)(v112, v121, v11);
  v73(v115, v11);
  v73(v114, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v117 + 96))(v109, v113);
}

uint64_t specialized FieldElement.description.getter(uint64_t a1, uint64_t a2)
{
  specialized FieldElement.integerValue.getter(a1, a2, &v14);
  lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
  v4._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  *(void *)&long long v13 = 30768;
  *((void *)&v13 + 1) = 0xE200000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  long long v14 = v13;
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = 7876648;
  v5._object = (void *)0xE300000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  long long v6 = v14;
  *(void *)&long long v14 = a1;
  *((void *)&v14 + 1) = a2;
  uint64_t v7 = String.init<A>(_:radix:uppercase:)();
  uint64_t v9 = v8;
  long long v14 = v6;
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = 41;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t specialized FieldElement.description.getter(uint64_t a1)
{
  return specialized FieldElement.description.getter(a1, (void (*)(void))specialized FieldElement.integerValue.getter);
}

{
  return specialized FieldElement.description.getter(a1, (void (*)(void))specialized FieldElement.integerValue.getter);
}

uint64_t specialized FieldElement.description.getter(uint64_t a1, void (*a2)(void))
{
  a2();
  uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
  swift_bridgeObjectRetain();
  v2._countAndFlagsBits = 7876648;
  v2._object = (void *)0xE300000000000000;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type UInt64 and conformance UInt64();
  uint64_t v3 = String.init<A>(_:radix:uppercase:)();
  Swift::String v5 = v4;
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = 41;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t specialized FieldElement.description.getter()
{
  uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
  swift_bridgeObjectRetain();
  v0._countAndFlagsBits = 7876648;
  v0._object = (void *)0xE300000000000000;
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  uint64_t v1 = String.init<A>(_:radix:uppercase:)();
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v1;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = 41;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t FieldElement.description.getter(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness, v6);
  uint64_t v8 = (char *)&v21 - v7;
  FieldElement.integerValue.getter(a1, a2);
  swift_getAssociatedConformanceWitness();
  uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v11 = v10;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
  uint64_t v21 = v9;
  uint64_t v22 = v11;
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = 7876648;
  v12._object = (void *)0xE300000000000000;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  uint64_t v14 = v21;
  uint64_t v13 = v22;
  (*(void (**)(uint64_t, uint64_t))(a2 + 88))(a1, a2);
  uint64_t v15 = String.init<A>(_:radix:uppercase:)();
  uint64_t v17 = v16;
  uint64_t v21 = v14;
  uint64_t v22 = v13;
  swift_bridgeObjectRetain();
  v18._countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v19._countAndFlagsBits = 41;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t static Array<A>.elementwiseAdding(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Array<A>.elementwiseAdding(_:_:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t))Array<A>.elementwiseAdd(_:));
}

uint64_t Array<A>.elementwiseSubtract(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Array<A>.elementwiseAdd(_:)(a1, a2, a3, MEMORY[0x263F8DF38]);
}

uint64_t Array<A>.elementwiseAdd(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unint64_t, char *, uint64_t, void))
{
  uint64_t v46 = a4;
  uint64_t v5 = v4;
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](a1, a2);
  Swift::String v12 = (char *)v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *v4;
  uint64_t v14 = swift_bridgeObjectRetain();
  uint64_t v15 = MEMORY[0x2612241C0](v14, v9);
  uint64_t v45 = v13;
  swift_bridgeObjectRelease();
  uint64_t v16 = MEMORY[0x2612241C0](a1, v9);
  if (v15 == v16)
  {
    uint64_t v17 = swift_bridgeObjectRetain();
    uint64_t v18 = MEMORY[0x2612241C0](v17, v9);
    uint64_t result = swift_bridgeObjectRelease();
    if (v18 < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v44 = v5;
      uint64_t v45 = a3;
      if (v18)
      {
        uint64_t v20 = a2;
        Swift::Int v21 = 0;
        v43[2] = v10 + 8;
        do
        {
          uint64_t v22 = v18;
          Swift::Int v23 = v21 + 1;
          Array.subscript.getter();
          uint64_t v24 = v20;
          uint64_t v25 = v44;
          Array._makeMutableAndUnique()();
          uint64_t v26 = *v25;
          Array._checkSubscript_mutating(_:)(v21);
          char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
          uint64_t v28 = v26 & 0xFFFFFFFFFFFFFF8;
          if ((isClassOrObjCExistentialType & 1) == 0) {
            uint64_t v28 = v26;
          }
          v46(v28+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(void *)(v10 + 72) * v21, v12, v9, *(void *)(v45 + 8));
          uint64_t v20 = v24;
          uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
          ++v21;
          BOOL v29 = v22 == v23;
          uint64_t v18 = v22;
        }
        while (!v29);
      }
    }
  }
  else
  {
    uint64_t v30 = v16;
    uint64_t v47 = 0;
    unint64_t v48 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    uint64_t v31 = _typeName(_:qualified:)();
    unint64_t v33 = v32;
    swift_bridgeObjectRelease();
    uint64_t v47 = v31;
    unint64_t v48 = v33;
    v34._object = (void *)0x8000000260BFF400;
    v34._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v34);
    uint64_t v35 = swift_bridgeObjectRetain();
    uint64_t v36 = MEMORY[0x2612241C0](v35, v9);
    swift_bridgeObjectRelease();
    uint64_t v49 = v36;
    v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    v38._countAndFlagsBits = 540877088;
    v38._object = (void *)0xE400000000000000;
    String.append(_:)(v38);
    uint64_t v49 = v30;
    v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    uint64_t v40 = v47;
    unint64_t v41 = v48;
    lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
    swift_allocError();
    *(void *)uint64_t v42 = v40;
    *(void *)(v42 + 8) = v41;
    *(unsigned char *)(v42 + 16) = 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t static Array<A>.elementwiseSubtracting(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Array<A>.elementwiseAdding(_:_:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t))Array<A>.elementwiseSubtract(_:));
}

uint64_t static Array<A>.elementwiseAdding(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = v5;
  uint64_t v10 = type metadata accessor for Array();
  swift_bridgeObjectRetain();
  a5(a2, v10, a4);
  if (v7) {
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t BinaryFloatingPoint.init<A>(fieldElement:fractionalBitCount:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v53 = a5;
  uint64_t v59 = a1;
  uint64_t v52 = a7;
  uint64_t v48 = a3;
  uint64_t v49 = *(void *)(a3 - 8);
  uint64_t v50 = a2;
  uint64_t v9 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v51 = (char *)v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v9, v11);
  uint64_t v54 = (char *)v44 - v13;
  MEMORY[0x270FA5388](v12, v14);
  uint64_t v58 = (char *)v44 - v15;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v56 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  uint64_t v45 = *(void *)(v56 + 24);
  uint64_t v57 = *(char **)(v45 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness, v17);
  uint64_t v18 = swift_checkMetadataState();
  uint64_t v46 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v18, v19);
  uint64_t v22 = (char *)v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x270FA5388](v20, v23);
  uint64_t v26 = (char *)v44 - v25;
  uint64_t v28 = MEMORY[0x270FA5388](v24, v27);
  uint64_t v30 = (char *)v44 - v29;
  MEMORY[0x270FA5388](v28, v31);
  unint64_t v33 = (char *)v44 - v32;
  FieldElement.integerValue.getter(a4, a6);
  uint64_t v55 = a4;
  v44[1] = a6;
  static FieldElement.modulus.getter();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  dispatch thunk of static BinaryInteger./ infix(_:_:)();
  uint64_t v34 = v46;
  uint64_t v35 = *(void (**)(char *, uint64_t))(v46 + 8);
  v35(v22, v18);
  v35(v26, v18);
  uint64_t v57 = v33;
  char v36 = dispatch thunk of static Comparable.> infix(_:_:)();
  v35(v30, v18);
  uint64_t v47 = (uint64_t (*)(char *, uint64_t))v35;
  if (v36)
  {
    static FieldElement.modulus.getter();
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    v35(v26, v18);
    Swift::String v37 = v54;
    uint64_t v38 = v48;
    dispatch thunk of FloatingPoint.init<A>(_:)();
    dispatch thunk of static SignedNumeric.- prefix(_:)();
    uint64_t v39 = v49;
    (*(void (**)(char *, uint64_t))(v49 + 8))(v37, v38);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v30, v57, v18);
    uint64_t v38 = v48;
    dispatch thunk of FloatingPoint.init<A>(_:)();
    uint64_t v39 = v49;
  }
  uint64_t v40 = v51;
  dispatch thunk of FloatingPoint.init(_:)();
  unint64_t v41 = v58;
  dispatch thunk of static FloatingPoint./= infix(_:_:)();
  uint64_t v42 = *(void (**)(char *, uint64_t))(v39 + 8);
  v42(v40, v38);
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v54, v41, v38);
  dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
  (*(void (**)(uint64_t))(*(void *)(v55 - 8) + 8))(v59);
  v42(v41, v38);
  return v47(v57, v18);
}

uint64_t static Field32.encodedLength.getter()
{
  return 4;
}

void one-time initialization function for one()
{
  static Field32.one = 0xFFFFF;
}

{
  static Field40.one = 0x1B7FFFEB0;
}

{
  static Field64.one = 0xFFFFFFFFLL;
}

void *static Field32.one.getter@<X0>(_DWORD *a1@<X8>)
{
  return static Field32.one.getter(&one-time initialization token for one, &static Field32.one, a1);
}

void one-time initialization function for negativeOne()
{
  static Field32.negativeOne = -2097150;
}

{
  static Field40.negativeOne = 0xFE46B00151;
}

{
  static Field64.negativeOne = 0xFFFFFFFE00000002;
}

void *static Field32.negativeOne.getter@<X0>(_DWORD *a1@<X8>)
{
  return static Field32.one.getter(&one-time initialization token for negativeOne, &static Field32.negativeOne, a1);
}

void *static Field32.one.getter@<X0>(void *result@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  if (*result != -1) {
    uint64_t result = (void *)swift_once();
  }
  *a3 = *a2;
  return result;
}

void Field32.init()(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

void static Field32.zero.getter(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t Field32.value.getter()
{
  return *v0;
}

uint64_t Field32.value.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*Field32.value.modify())()
{
  return AggregateShare.share.modify;
}

void Field32.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int Field32.hashValue.getter()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static FieldElement.one.getter in conformance Field32@<X0>(_DWORD *a1@<X8>)
{
  return protocol witness for static FieldElement.one.getter in conformance Field32(&one-time initialization token for one, &static Field32.one, a1);
}

uint64_t protocol witness for static FieldElement.negativeOne.getter in conformance Field32@<X0>(_DWORD *a1@<X8>)
{
  return protocol witness for static FieldElement.one.getter in conformance Field32(&one-time initialization token for negativeOne, &static Field32.negativeOne, a1);
}

uint64_t protocol witness for static FieldElement.one.getter in conformance Field32@<X0>(void *a1@<X2>, _DWORD *a2@<X3>, _DWORD *a3@<X8>)
{
  if (*a1 != -1) {
    uint64_t result = swift_once();
  }
  *a3 = *a2;
  return result;
}

void protocol witness for FieldElement.value.getter in conformance Field32(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

_DWORD *protocol witness for FieldElement.value.setter in conformance Field32(_DWORD *result)
{
  *Swift::UInt32 v1 = *result;
  return result;
}

uint64_t (*protocol witness for FieldElement.value.modify in conformance Field32())()
{
  return AggregateShare.share.modify;
}

void protocol witness for FieldElement.init() in conformance Field32(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

unsigned int *protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance Field32@<X0>(unsigned int *result@<X0>, unsigned int *a2@<X1>, _DWORD *a3@<X8>)
{
  unsigned int v3 = *result;
  unsigned int v4 = *a2;
  if (!*a2) {
    goto LABEL_8;
  }
  BOOL v5 = v4 <= 0xFFF00001;
  unsigned int v6 = -1048575 - v4;
  if (!v5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v3 >= v6)
  {
    *a3 = v3 - v6;
    return result;
  }
  BOOL v5 = v6 <= 0xFFF00001;
  unsigned int v7 = -1048575 - v6;
  if (!v5) {
    goto LABEL_10;
  }
  BOOL v5 = __CFADD__(v3, v7);
  v3 += v7;
  if (!v5)
  {
LABEL_8:
    *a3 = v3;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

unsigned int *protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance Field32(unsigned int *result, unsigned int *a2)
{
  unsigned int v2 = *a2;
  unsigned int v3 = *result;
  if (!*a2) {
    goto LABEL_8;
  }
  BOOL v4 = v2 <= 0xFFF00001;
  unsigned int v5 = -1048575 - v2;
  if (!v4)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v3 >= v5)
  {
    *uint64_t result = v3 - v5;
    return result;
  }
  BOOL v4 = v5 <= 0xFFF00001;
  unsigned int v6 = -1048575 - v5;
  if (!v4) {
    goto LABEL_10;
  }
  BOOL v4 = __CFADD__(v3, v6);
  v3 += v6;
  if (!v4)
  {
LABEL_8:
    *uint64_t result = v3;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

int *protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance Field32@<X0>(int *result@<X0>, unsigned int *a2@<X1>, int *a3@<X8>)
{
  int v3 = *result;
  unsigned int v4 = *a2;
  int v5 = *result - *a2;
  if (*result >= *a2) {
    goto LABEL_4;
  }
  unsigned int v6 = -1048575 - v4;
  if (v4 > 0xFFF00001)
  {
    __break(1u);
  }
  else
  {
    BOOL v7 = __CFADD__(v3, v6);
    int v5 = v3 + v6;
    if (!v7)
    {
LABEL_4:
      *a3 = v5;
      return result;
    }
  }
  __break(1u);
  return result;
}

int *protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance Field32(int *result, unsigned int *a2)
{
  unsigned int v2 = *a2;
  int v3 = *result;
  int v4 = *result - *a2;
  if (*result >= *a2) {
    goto LABEL_4;
  }
  unsigned int v5 = -1048575 - v2;
  if (v2 > 0xFFF00001)
  {
    __break(1u);
  }
  else
  {
    BOOL v6 = __CFADD__(v3, v5);
    int v4 = v3 + v5;
    if (!v6)
    {
LABEL_4:
      *uint64_t result = v4;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Field32()
{
  return specialized FieldElement.description.getter();
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance Field32@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  unint64_t v10 = lazy protocol witness table accessor for type Field32 and conformance Field32();
  return FieldElement.init<A>(from:parameter:)(a1, a4, a2, v10, a3, a5);
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance Field32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = lazy protocol witness table accessor for type Field32 and conformance Field32();

  return FieldElement.encode<A>(into:)(a1, a4, a2, v8, a3);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Field32(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Field32()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Field32()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Field32()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t static Field40.encodedLength.getter()
{
  return 5;
}

void *static Field40.one.getter@<X0>(void *a1@<X8>)
{
  return static Field40.one.getter(&one-time initialization token for one, &static Field40.one, a1);
}

void *static Field40.negativeOne.getter@<X0>(void *a1@<X8>)
{
  return static Field40.one.getter(&one-time initialization token for negativeOne, &static Field40.negativeOne, a1);
}

void Field40.init()(void *a1@<X8>)
{
  *a1 = 0;
}

void static Field40.zero.getter(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t Field40.value.getter()
{
  return *(void *)v0;
}

uint64_t Field40.value.setter(uint64_t result)
{
  *Swift::UInt32 v1 = result;
  return result;
}

uint64_t (*Field40.value.modify())()
{
  return AggregateShare.share.modify;
}

void Field40.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for static FieldElement.encodedLength.getter in conformance Field40()
{
  return 5;
}

uint64_t protocol witness for static FieldElement.one.getter in conformance Field40@<X0>(void *a1@<X8>)
{
  return protocol witness for static FieldElement.one.getter in conformance Field40(&one-time initialization token for one, &static Field40.one, a1);
}

uint64_t protocol witness for static FieldElement.negativeOne.getter in conformance Field40@<X0>(void *a1@<X8>)
{
  return protocol witness for static FieldElement.one.getter in conformance Field40(&one-time initialization token for negativeOne, &static Field40.negativeOne, a1);
}

void protocol witness for FieldElement.value.getter in conformance Field40(void *a1@<X8>)
{
  *a1 = *v1;
}

void *protocol witness for FieldElement.value.setter in conformance Field40(void *result)
{
  *Swift::UInt32 v1 = *result;
  return result;
}

unint64_t *protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance Field40@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, void *a3@<X8>)
{
  unint64_t v3 = *result;
  unint64_t v4 = *a2;
  if (!*a2) {
    goto LABEL_7;
  }
  BOOL v5 = v4 <= 0xFFFEB00001;
  unint64_t v6 = 0xFFFEB00001 - v4;
  if (!v5)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v3 >= v6)
  {
    *a3 = v3 - v6;
    return result;
  }
  unint64_t v7 = 0xFFFEB00001 - v6;
  if (v6 > 0xFFFEB00001) {
    goto LABEL_9;
  }
  BOOL v5 = __CFADD__(v3, v7);
  v3 += v7;
  if (!v5)
  {
LABEL_7:
    *a3 = v3;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

unint64_t *protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance Field40(unint64_t *result, unint64_t *a2)
{
  unint64_t v2 = *a2;
  unint64_t v3 = *result;
  if (!*a2) {
    goto LABEL_7;
  }
  BOOL v4 = v2 <= 0xFFFEB00001;
  unint64_t v5 = 0xFFFEB00001 - v2;
  if (!v4)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v3 >= v5)
  {
    *uint64_t result = v3 - v5;
    return result;
  }
  unint64_t v6 = 0xFFFEB00001 - v5;
  if (v5 > 0xFFFEB00001) {
    goto LABEL_9;
  }
  BOOL v4 = __CFADD__(v3, v6);
  v3 += v6;
  if (!v4)
  {
LABEL_7:
    *uint64_t result = v3;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t *protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance Field40@<X0>(uint64_t *result@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3 = *result;
  unint64_t v4 = *a2;
  unint64_t v5 = *result - *a2;
  if (*result >= *a2) {
    goto LABEL_4;
  }
  unint64_t v6 = 0xFFFEB00001 - v4;
  if (v4 > 0xFFFEB00001)
  {
    __break(1u);
  }
  else
  {
    BOOL v7 = __CFADD__(v3, v6);
    unint64_t v5 = v3 + v6;
    if (!v7)
    {
LABEL_4:
      *a3 = v5;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance Field40(uint64_t *result, unint64_t *a2)
{
  unint64_t v2 = *a2;
  uint64_t v3 = *result;
  unint64_t v4 = *result - *a2;
  if (*result >= *a2) {
    goto LABEL_4;
  }
  unint64_t v5 = 0xFFFEB00001 - v2;
  if (v2 > 0xFFFEB00001)
  {
    __break(1u);
  }
  else
  {
    BOOL v6 = __CFADD__(v3, v5);
    unint64_t v4 = v3 + v5;
    if (!v6)
    {
LABEL_4:
      *uint64_t result = v4;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Field40()
{
  return specialized FieldElement.description.getter(*v0, (void (*)(void))specialized FieldElement.integerValue.getter);
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance Field40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  unint64_t v10 = lazy protocol witness table accessor for type Field40 and conformance Field40();
  return FieldElement.init<A>(from:parameter:)(a1, a4, a2, v10, a3, a5);
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance Field40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = lazy protocol witness table accessor for type Field40 and conformance Field40();

  return FieldElement.encode<A>(into:)(a1, a4, a2, v8, a3);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Field40(void *a1, void *a2)
{
  return *a1 == *a2;
}

void protocol witness for Hashable.hash(into:) in conformance Field40()
{
  Hasher._combine(_:)(*v0);
}

uint64_t static Field64.encodedLength.getter()
{
  return 8;
}

void *static Field64.one.getter@<X0>(void *a1@<X8>)
{
  return static Field40.one.getter(&one-time initialization token for one, &static Field64.one, a1);
}

void *static Field64.negativeOne.getter@<X0>(void *a1@<X8>)
{
  return static Field40.one.getter(&one-time initialization token for negativeOne, &static Field64.negativeOne, a1);
}

void *static Field40.one.getter@<X0>(void *result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (*result != -1) {
    uint64_t result = (void *)swift_once();
  }
  *a3 = *a2;
  return result;
}

void Field64.init()(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t Field64.value.getter()
{
  return *(void *)v0;
}

uint64_t (*Field64.value.modify())()
{
  return AggregateShare.share.modify;
}

Swift::Int Field40.hashValue.getter()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static FieldElement.one.getter in conformance Field64@<X0>(void *a1@<X8>)
{
  return protocol witness for static FieldElement.one.getter in conformance Field40(&one-time initialization token for one, &static Field64.one, a1);
}

uint64_t protocol witness for static FieldElement.negativeOne.getter in conformance Field64@<X0>(void *a1@<X8>)
{
  return protocol witness for static FieldElement.one.getter in conformance Field40(&one-time initialization token for negativeOne, &static Field64.negativeOne, a1);
}

uint64_t protocol witness for static FieldElement.one.getter in conformance Field40@<X0>(void *a1@<X2>, void *a2@<X3>, void *a3@<X8>)
{
  if (*a1 != -1) {
    uint64_t result = swift_once();
  }
  *a3 = *a2;
  return result;
}

unint64_t *protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance Field64@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, void *a3@<X8>)
{
  unint64_t v3 = *result;
  unint64_t v4 = *a2;
  if (!*a2) {
    goto LABEL_8;
  }
  BOOL v5 = v4 <= 0xFFFFFFFF00000001;
  unint64_t v6 = 0xFFFFFFFF00000001 - v4;
  if (!v5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v3 >= v6)
  {
    *a3 = v3 - v6;
    return result;
  }
  BOOL v5 = v6 <= 0xFFFFFFFF00000001;
  unint64_t v7 = 0xFFFFFFFF00000001 - v6;
  if (!v5) {
    goto LABEL_10;
  }
  BOOL v5 = __CFADD__(v3, v7);
  v3 += v7;
  if (!v5)
  {
LABEL_8:
    *a3 = v3;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

unint64_t *protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance Field64(unint64_t *result, unint64_t *a2)
{
  unint64_t v2 = *a2;
  unint64_t v3 = *result;
  if (!*a2) {
    goto LABEL_8;
  }
  BOOL v4 = v2 <= 0xFFFFFFFF00000001;
  unint64_t v5 = 0xFFFFFFFF00000001 - v2;
  if (!v4)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v3 >= v5)
  {
    *uint64_t result = v3 - v5;
    return result;
  }
  BOOL v4 = v5 <= 0xFFFFFFFF00000001;
  unint64_t v6 = 0xFFFFFFFF00000001 - v5;
  if (!v4) {
    goto LABEL_10;
  }
  BOOL v4 = __CFADD__(v3, v6);
  v3 += v6;
  if (!v4)
  {
LABEL_8:
    *uint64_t result = v3;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t *protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance Field64@<X0>(uint64_t *result@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3 = *result;
  unint64_t v4 = *a2;
  unint64_t v5 = *result - *a2;
  if (*result >= *a2) {
    goto LABEL_4;
  }
  unint64_t v6 = 0xFFFFFFFF00000001 - v4;
  if (v4 > 0xFFFFFFFF00000001)
  {
    __break(1u);
  }
  else
  {
    BOOL v7 = __CFADD__(v3, v6);
    unint64_t v5 = v3 + v6;
    if (!v7)
    {
LABEL_4:
      *a3 = v5;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance Field64(uint64_t *result, unint64_t *a2)
{
  unint64_t v2 = *a2;
  uint64_t v3 = *result;
  unint64_t v4 = *result - *a2;
  if (*result >= *a2) {
    goto LABEL_4;
  }
  unint64_t v5 = 0xFFFFFFFF00000001 - v2;
  if (v2 > 0xFFFFFFFF00000001)
  {
    __break(1u);
  }
  else
  {
    BOOL v6 = __CFADD__(v3, v5);
    unint64_t v4 = v3 + v5;
    if (!v6)
    {
LABEL_4:
      *uint64_t result = v4;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Field64()
{
  return specialized FieldElement.description.getter(*v0, (void (*)(void))specialized FieldElement.integerValue.getter);
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance Field64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  unint64_t v10 = lazy protocol witness table accessor for type Field64 and conformance Field64();
  return FieldElement.init<A>(from:parameter:)(a1, a4, a2, v10, a3, a5);
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance Field64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = lazy protocol witness table accessor for type Field64 and conformance Field64();

  return FieldElement.encode<A>(into:)(a1, a4, a2, v8, a3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Field40()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t static Field128.encodedLength.getter()
{
  return 16;
}

unint64_t one-time initialization function for one()
{
  return specialized FieldElement.init(_:)(1uLL, 0, static Field128.one);
}

double static Field128.one.getter@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = static Field128.one.getter(&one-time initialization token for one, (__n128 *)static Field128.one, a1).n128_u64[0];
  return result;
}

unint64_t one-time initialization function for negativeOne()
{
  return specialized FieldElement.init(_:)(0, 0xFFFFFFFFFFFFFFE4, static Field128.negativeOne);
}

double static Field128.negativeOne.getter@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = static Field128.one.getter(&one-time initialization token for negativeOne, (__n128 *)static Field128.negativeOne, a1).n128_u64[0];
  return result;
}

__n128 static Field128.one.getter@<Q0>(void *a1@<X0>, __n128 *a2@<X1>, __n128 *a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  __n128 result = *a2;
  *a3 = *a2;
  return result;
}

void Field128.init()(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void static Field128.zero.getter(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

__n128 Field128.value.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  return result;
}

__n128 Field128.value.setter(__n128 *a1)
{
  __n128 result = *a1;
  *Swift::UInt64 v1 = *a1;
  return result;
}

uint64_t (*Field128.value.modify())()
{
  return AggregateShare.share.modify;
}

void Field128.hash(into:)()
{
  Swift::UInt64 v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int Field128.hashValue.getter()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

double protocol witness for static FieldElement.one.getter in conformance Field128@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = protocol witness for static FieldElement.one.getter in conformance Field128(&one-time initialization token for one, (__n128 *)static Field128.one, a1).n128_u64[0];
  return result;
}

double protocol witness for static FieldElement.negativeOne.getter in conformance Field128@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = protocol witness for static FieldElement.one.getter in conformance Field128(&one-time initialization token for negativeOne, (__n128 *)static Field128.negativeOne, a1).n128_u64[0];
  return result;
}

__n128 protocol witness for static FieldElement.one.getter in conformance Field128@<Q0>(void *a1@<X2>, __n128 *a2@<X3>, __n128 *a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  __n128 result = *a2;
  *a3 = *a2;
  return result;
}

__n128 protocol witness for FieldElement.value.setter in conformance Field128(__n128 *a1)
{
  __n128 result = *a1;
  *Swift::UInt64 v1 = *a1;
  return result;
}

unint64_t *protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance Field128@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3 = *result;
  unint64_t v4 = result[1];
  unint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  if (*(_OWORD *)a2 == 0) {
    goto LABEL_2;
  }
  BOOL v15 = v5 <= 1;
  unint64_t v7 = 1 - v5;
  uint64_t v8 = !v15;
  unint64_t v9 = -28 - v6;
  if (v6 > 0xFFFFFFFFFFFFFFE4) {
    goto LABEL_49;
  }
  unint64_t v10 = v9 - v8;
  if (v9)
  {
    if (v4 == v10) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
  if ((v8 & 1) == 0)
  {
    if (!v4)
    {
LABEL_9:
      if (v3 >= v7)
      {
LABEL_10:
        BOOL v15 = v3 >= v7;
        v3 -= v7;
        char v11 = !v15;
        BOOL v15 = v4 >= v10;
        v4 -= v10;
        uint64_t v12 = !v15;
        if (v11)
        {
          if (v4) {
            uint64_t v12 = v12;
          }
          else {
            uint64_t v12 = 1;
          }
          if ((v12 & 1) == 0)
          {
            *a3 = v3;
            a3[1] = v4 - 1;
            return result;
          }
        }
        else if ((v12 & 1) == 0)
        {
LABEL_2:
          *a3 = v3;
          a3[1] = v4;
          return result;
        }
        __break(1u);
        goto LABEL_38;
      }
LABEL_25:
      BOOL v15 = v7 <= 1;
      uint64_t v12 = 1 - v7;
      char v13 = !v15;
      BOOL v15 = v10 <= 0xFFFFFFFFFFFFFFE4;
      unint64_t v10 = -28 - v10;
      char v11 = !v15;
      if (v13)
      {
        if (!v10) {
          char v11 = 1;
        }
        if (v11) {
          goto LABEL_50;
        }
        --v10;
LABEL_39:
        BOOL v15 = __CFADD__(v4, v10);
        unint64_t v14 = v4 + v10;
        if (!v15)
        {
          BOOL v15 = __CFADD__(v3, v12);
          v3 += v12;
          BOOL v16 = v15;
          unint64_t v4 = v15 ? v14 + 1 : v14;
          if (v14 != -1 || !v16) {
            goto LABEL_2;
          }
        }
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
LABEL_38:
      if (v11)
      {
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
      goto LABEL_39;
    }
LABEL_24:
    if (v4 >= v10) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_51:
  __break(1u);
  return result;
}

unint64_t *protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance Field128(unint64_t *result, unint64_t *a2)
{
  unint64_t v2 = *a2;
  unint64_t v3 = a2[1];
  unint64_t v4 = *result;
  unint64_t v5 = result[1];
  if (*(_OWORD *)a2 == 0) {
    goto LABEL_2;
  }
  BOOL v14 = v2 <= 1;
  unint64_t v6 = 1 - v2;
  uint64_t v7 = !v14;
  unint64_t v8 = -28 - v3;
  if (v3 > 0xFFFFFFFFFFFFFFE4) {
    goto LABEL_49;
  }
  unint64_t v9 = v8 - v7;
  if (v8)
  {
    if (v5 == v9) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
  if ((v7 & 1) == 0)
  {
    if (!v5)
    {
LABEL_9:
      if (v4 >= v6)
      {
LABEL_10:
        BOOL v14 = v4 >= v6;
        v4 -= v6;
        char v10 = !v14;
        BOOL v14 = v5 >= v9;
        v5 -= v9;
        uint64_t v11 = !v14;
        if (v10)
        {
          if (v5) {
            uint64_t v11 = v11;
          }
          else {
            uint64_t v11 = 1;
          }
          if ((v11 & 1) == 0)
          {
            *__n128 result = v4;
            result[1] = v5 - 1;
            return result;
          }
        }
        else if ((v11 & 1) == 0)
        {
LABEL_2:
          *__n128 result = v4;
          result[1] = v5;
          return result;
        }
        __break(1u);
        goto LABEL_38;
      }
LABEL_25:
      BOOL v14 = v6 <= 1;
      uint64_t v11 = 1 - v6;
      char v12 = !v14;
      BOOL v14 = v9 <= 0xFFFFFFFFFFFFFFE4;
      unint64_t v9 = -28 - v9;
      char v10 = !v14;
      if (v12)
      {
        if (!v9) {
          char v10 = 1;
        }
        if (v10) {
          goto LABEL_50;
        }
        --v9;
LABEL_39:
        BOOL v14 = __CFADD__(v5, v9);
        unint64_t v13 = v5 + v9;
        if (!v14)
        {
          BOOL v14 = __CFADD__(v4, v11);
          v4 += v11;
          BOOL v15 = v14;
          unint64_t v5 = v14 ? v13 + 1 : v13;
          if (v13 != -1 || !v15) {
            goto LABEL_2;
          }
        }
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
LABEL_38:
      if (v10)
      {
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
      goto LABEL_39;
    }
LABEL_24:
    if (v5 >= v9) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_51:
  __break(1u);
  return result;
}

unint64_t *protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance Field128@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3 = *result;
  unint64_t v4 = result[1];
  unint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  BOOL v7 = *result < *a2;
  if (v4 != v6) {
    BOOL v7 = v4 < v6;
  }
  if (!v7)
  {
    BOOL v17 = v3 >= v5;
    unint64_t v12 = v3 - v5;
    char v13 = !v17;
    BOOL v17 = v4 >= v6;
    uint64_t v14 = v4 - v6;
    int v15 = !v17;
    if (v13)
    {
      if (!v14) {
        LOBYTE(v15) = 1;
      }
      if ((v15 & 1) == 0)
      {
        *a3 = v12;
        a3[1] = v14 - 1;
        return result;
      }
    }
    else if (!v15)
    {
LABEL_36:
      *a3 = v12;
      a3[1] = v14;
      return result;
    }
    __break(1u);
    goto LABEL_39;
  }
  BOOL v17 = v5 <= 1;
  unint64_t v8 = 1 - v5;
  char v9 = !v17;
  BOOL v17 = v6 <= 0xFFFFFFFFFFFFFFE4;
  unint64_t v10 = -28 - v6;
  char v11 = !v17;
  if ((v9 & 1) == 0)
  {
    if ((v11 & 1) == 0) {
      goto LABEL_27;
    }
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (!v10) {
    char v11 = 1;
  }
  if (v11) {
    goto LABEL_39;
  }
  --v10;
LABEL_27:
  BOOL v17 = __CFADD__(v4, v10);
  unint64_t v16 = v4 + v10;
  if (!v17)
  {
    BOOL v17 = __CFADD__(v3, v8);
    unint64_t v12 = v3 + v8;
    BOOL v18 = v17;
    uint64_t v14 = v17 ? v16 + 1 : v16;
    if (v16 != -1 || !v18) {
      goto LABEL_36;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

unint64_t *protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance Field128(unint64_t *result, unint64_t *a2)
{
  unint64_t v2 = *a2;
  unint64_t v3 = a2[1];
  unint64_t v4 = *result;
  unint64_t v5 = result[1];
  BOOL v6 = *result < *a2;
  if (v5 != v3) {
    BOOL v6 = v5 < v3;
  }
  if (!v6)
  {
    BOOL v7 = v4 >= v2;
    v4 -= v2;
    char v12 = !v7;
    BOOL v7 = v5 >= v3;
    v5 -= v3;
    int v13 = !v7;
    if (v12)
    {
      if (!v5) {
        LOBYTE(v13) = 1;
      }
      if ((v13 & 1) == 0)
      {
        *__n128 result = v4;
        result[1] = v5 - 1;
        return result;
      }
    }
    else if (!v13)
    {
      goto LABEL_32;
    }
    __break(1u);
    goto LABEL_35;
  }
  BOOL v7 = v2 <= 1;
  unint64_t v8 = 1 - v2;
  char v9 = !v7;
  BOOL v7 = v3 <= 0xFFFFFFFFFFFFFFE4;
  unint64_t v10 = -28 - v3;
  char v11 = !v7;
  if ((v9 & 1) == 0)
  {
    if ((v11 & 1) == 0) {
      goto LABEL_27;
    }
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (!v10) {
    char v11 = 1;
  }
  if (v11) {
    goto LABEL_35;
  }
  --v10;
LABEL_27:
  BOOL v7 = __CFADD__(v4, v8);
  v4 += v8;
  int v14 = v7;
  BOOL v7 = __CFADD__(v5, v10);
  v5 += v10;
  if (v7) {
    goto LABEL_38;
  }
  if (!v14)
  {
LABEL_32:
    *__n128 result = v4;
    result[1] = v5;
    return result;
  }
LABEL_36:
  BOOL v7 = __CFADD__(v5++, 1);
  if (!v7) {
    goto LABEL_32;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Field128()
{
  return specialized FieldElement.description.getter(*v0, v0[1]);
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance Field128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  unint64_t v10 = lazy protocol witness table accessor for type Field128 and conformance Field128();
  return FieldElement.init<A>(from:parameter:)(a1, a4, a2, v10, a3, a5);
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance Field128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = lazy protocol witness table accessor for type Field128 and conformance Field128();

  return FieldElement.encode<A>(into:)(a1, a4, a2, v8, a3);
}

Swift::Void __swiftcall Array._checkSubscript_mutating(_:)(Swift::Int a1)
{
  uint64_t v2 = v1;
  char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  if (a1 < 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return;
  }
  uint64_t v5 = v2 & 0xFFFFFFFFFFFFFF8;
  if ((isClassOrObjCExistentialType & 1) == 0) {
    uint64_t v5 = v2;
  }
  if (*(void *)(v5 + 16) <= (unint64_t)a1) {
    goto LABEL_7;
  }
}

uint64_t partial apply for closure #1 in static FieldElement.randomVector<A>(count:using:)@<X0>(uint64_t a1@<X8>)
{
  return static FieldElement.randomElement<A>(using:)(v1[7], v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t static FixedWidthInteger._truncatingInit<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t AssociatedConformanceWitness = a1;
  uint64_t v69 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness, v11);
  uint64_t v60 = (char *)&v53 - v12;
  uint64_t v64 = a5;
  uint64_t v59 = *(void *)(*(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 8) + 8);
  uint64_t v63 = AssociatedTypeWitness;
  uint64_t v72 = swift_getAssociatedTypeWitness();
  uint64_t v61 = *(void *)(v72 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v72, v13);
  uint64_t v71 = (char *)&v53 - v15;
  uint64_t v62 = *(void *)(a2 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v14, v16);
  uint64_t v68 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v17, v19);
  uint64_t v67 = (char *)&v53 - v21;
  uint64_t v23 = MEMORY[0x270FA5388](v20, v22);
  unint64_t v73 = (char *)&v53 - v24;
  uint64_t v26 = MEMORY[0x270FA5388](v23, v25);
  uint64_t v28 = (char *)&v53 - v27;
  MEMORY[0x270FA5388](v26, v29);
  uint64_t v31 = (char *)&v53 - v30;
  uint64_t v70 = a4;
  uint64_t v58 = *(void *)(a4 + 8);
  uint64_t v66 = *(void *)(v58 + 24);
  uint64_t v55 = *(void *)(v66 + 16);
  uint64_t v56 = swift_getAssociatedTypeWitness();
  uint64_t v33 = MEMORY[0x270FA5388](v56, v32);
  uint64_t v57 = (char *)&v53 - v34;
  uint64_t v35 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v33, v36);
  uint64_t v38 = (char *)&v53 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v39, v40);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  uint64_t v41 = dispatch thunk of static Comparable.< infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v38, a3);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  uint64_t v54 = v41;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  if (v41)
  {
    uint64_t v42 = v58;
    dispatch thunk of static BinaryInteger.~ prefix(_:)();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v31, a2);
  }
  else
  {
    uint64_t v42 = v58;
  }
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  dispatch thunk of static FixedWidthInteger.bitWidth.getter();
  dispatch thunk of FixedWidthInteger.init(_truncatingBits:)();
  dispatch thunk of BinaryInteger.words.getter();
  dispatch thunk of Sequence.makeIterator()();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if ((v74 & 1) == 0)
  {
    uint64_t v64 = *(void *)(*(void *)(v42 + 32) + 8);
    uint64_t v63 = v54 << 63 >> 63;
    uint64_t v43 = (void (**)(char *, uint64_t))(v62 + 8);
    uint64_t v44 = v67;
    do
    {
      if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) == 0) {
        break;
      }
      uint64_t v45 = v31;
      uint64_t v46 = v42;
      uint64_t v47 = v28;
      uint64_t v48 = v68;
      dispatch thunk of FixedWidthInteger.init(_truncatingBits:)();
      dispatch thunk of static FixedWidthInteger.&<< infix(_:_:)();
      uint64_t v49 = *v43;
      uint64_t v50 = v48;
      uint64_t v28 = v47;
      uint64_t v42 = v46;
      uint64_t v31 = v45;
      (*v43)(v50, a2);
      dispatch thunk of static BinaryInteger.^= infix(_:_:)();
      v49(v44, a2);
      dispatch thunk of FixedWidthInteger.init(_truncatingBits:)();
      dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
      v49(v45, a2);
      dispatch thunk of IteratorProtocol.next()();
    }
    while ((v74 & 1) == 0);
  }
  (*(void (**)(char *, uint64_t))(v61 + 8))(v71, v72);
  uint64_t v51 = *(void (**)(char *, uint64_t))(v62 + 8);
  v51(v73, a2);
  return ((uint64_t (*)(char *, uint64_t))v51)(v28, a2);
}

uint64_t partial apply for closure #1 in static FieldElement.integersToElements(_:)(uint64_t a1)
{
  return closure #1 in static FieldElement.integersToElements(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in static FieldElement.elementsToIntegers(_:)()
{
  return FieldElement.integerValue.getter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t instantiation function for generic protocol witness table for FieldElementError(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
  unint64_t result = lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type MontgomeryFiniteField32 and conformance MontgomeryFiniteField32()
{
  unint64_t result = lazy protocol witness table cache variable for type MontgomeryFiniteField32 and conformance MontgomeryFiniteField32;
  if (!lazy protocol witness table cache variable for type MontgomeryFiniteField32 and conformance MontgomeryFiniteField32)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MontgomeryFiniteField32 and conformance MontgomeryFiniteField32);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for Field32(void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for Field32(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type Field32 and conformance Field32, (uint64_t (*)(void))lazy protocol witness table accessor for type Field32 and conformance Field32, (uint64_t (*)(void))lazy protocol witness table accessor for type Field32 and conformance Field32);
}

unint64_t lazy protocol witness table accessor for type Field32 and conformance Field32()
{
  unint64_t result = lazy protocol witness table cache variable for type Field32 and conformance Field32;
  if (!lazy protocol witness table cache variable for type Field32 and conformance Field32)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Field32 and conformance Field32);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Field32 and conformance Field32;
  if (!lazy protocol witness table cache variable for type Field32 and conformance Field32)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Field32 and conformance Field32);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Field32 and conformance Field32;
  if (!lazy protocol witness table cache variable for type Field32 and conformance Field32)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Field32 and conformance Field32);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Field32 and conformance Field32;
  if (!lazy protocol witness table cache variable for type Field32 and conformance Field32)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Field32 and conformance Field32);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Field32 and conformance Field32;
  if (!lazy protocol witness table cache variable for type Field32 and conformance Field32)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Field32 and conformance Field32);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MontgomeryFiniteField40 and conformance MontgomeryFiniteField40()
{
  unint64_t result = lazy protocol witness table cache variable for type MontgomeryFiniteField40 and conformance MontgomeryFiniteField40;
  if (!lazy protocol witness table cache variable for type MontgomeryFiniteField40 and conformance MontgomeryFiniteField40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MontgomeryFiniteField40 and conformance MontgomeryFiniteField40);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for Field40(void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for Field32(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type Field40 and conformance Field40, (uint64_t (*)(void))lazy protocol witness table accessor for type Field40 and conformance Field40, (uint64_t (*)(void))lazy protocol witness table accessor for type Field40 and conformance Field40);
}

unint64_t lazy protocol witness table accessor for type Field40 and conformance Field40()
{
  unint64_t result = lazy protocol witness table cache variable for type Field40 and conformance Field40;
  if (!lazy protocol witness table cache variable for type Field40 and conformance Field40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Field40 and conformance Field40);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Field40 and conformance Field40;
  if (!lazy protocol witness table cache variable for type Field40 and conformance Field40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Field40 and conformance Field40);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Field40 and conformance Field40;
  if (!lazy protocol witness table cache variable for type Field40 and conformance Field40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Field40 and conformance Field40);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Field40 and conformance Field40;
  if (!lazy protocol witness table cache variable for type Field40 and conformance Field40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Field40 and conformance Field40);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Field40 and conformance Field40;
  if (!lazy protocol witness table cache variable for type Field40 and conformance Field40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Field40 and conformance Field40);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MontgomeryFiniteField64 and conformance MontgomeryFiniteField64()
{
  unint64_t result = lazy protocol witness table cache variable for type MontgomeryFiniteField64 and conformance MontgomeryFiniteField64;
  if (!lazy protocol witness table cache variable for type MontgomeryFiniteField64 and conformance MontgomeryFiniteField64)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MontgomeryFiniteField64 and conformance MontgomeryFiniteField64);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for Field64(void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for Field32(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type Field64 and conformance Field64, (uint64_t (*)(void))lazy protocol witness table accessor for type Field64 and conformance Field64, (uint64_t (*)(void))lazy protocol witness table accessor for type Field64 and conformance Field64);
}

unint64_t lazy protocol witness table accessor for type Field64 and conformance Field64()
{
  unint64_t result = lazy protocol witness table cache variable for type Field64 and conformance Field64;
  if (!lazy protocol witness table cache variable for type Field64 and conformance Field64)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Field64 and conformance Field64);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Field64 and conformance Field64;
  if (!lazy protocol witness table cache variable for type Field64 and conformance Field64)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Field64 and conformance Field64);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Field64 and conformance Field64;
  if (!lazy protocol witness table cache variable for type Field64 and conformance Field64)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Field64 and conformance Field64);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Field64 and conformance Field64;
  if (!lazy protocol witness table cache variable for type Field64 and conformance Field64)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Field64 and conformance Field64);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Field64 and conformance Field64;
  if (!lazy protocol witness table cache variable for type Field64 and conformance Field64)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Field64 and conformance Field64);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MontgomeryFiniteField128 and conformance MontgomeryFiniteField128()
{
  unint64_t result = lazy protocol witness table cache variable for type MontgomeryFiniteField128 and conformance MontgomeryFiniteField128;
  if (!lazy protocol witness table cache variable for type MontgomeryFiniteField128 and conformance MontgomeryFiniteField128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MontgomeryFiniteField128 and conformance MontgomeryFiniteField128);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for Field128(void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for Field32(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type Field128 and conformance Field128, (uint64_t (*)(void))lazy protocol witness table accessor for type Field128 and conformance Field128, (uint64_t (*)(void))lazy protocol witness table accessor for type Field128 and conformance Field128);
}

uint64_t instantiation function for generic protocol witness table for Field32(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  a1[1] = a4();
  a1[2] = a5();
  uint64_t result = a6();
  a1[3] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Field128 and conformance Field128()
{
  unint64_t result = lazy protocol witness table cache variable for type Field128 and conformance Field128;
  if (!lazy protocol witness table cache variable for type Field128 and conformance Field128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Field128 and conformance Field128);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Field128 and conformance Field128;
  if (!lazy protocol witness table cache variable for type Field128 and conformance Field128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Field128 and conformance Field128);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Field128 and conformance Field128;
  if (!lazy protocol witness table cache variable for type Field128 and conformance Field128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Field128 and conformance Field128);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Field128 and conformance Field128;
  if (!lazy protocol witness table cache variable for type Field128 and conformance Field128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Field128 and conformance Field128);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Field128 and conformance Field128;
  if (!lazy protocol witness table cache variable for type Field128 and conformance Field128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Field128 and conformance Field128);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FieldElementError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 251);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 5) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FieldElementError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 251;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for FieldElementError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 4u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 5);
  }
}

uint64_t destructiveInjectEnumTag for FieldElementError(uint64_t result, unsigned int a2)
{
  if (a2 >= 5)
  {
    *(void *)unint64_t result = a2 - 5;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 5;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for FieldElementError()
{
  return &type metadata for FieldElementError;
}

uint64_t dispatch thunk of static FieldElement.encodedLength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of static FieldElement.one.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of static FieldElement.negativeOne.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of FieldElement.value.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of FieldElement.value.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of FieldElement.value.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t dispatch thunk of FieldElement.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

ValueMetadata *type metadata accessor for Field32()
{
  return &type metadata for Field32;
}

ValueMetadata *type metadata accessor for Field40()
{
  return &type metadata for Field40;
}

ValueMetadata *type metadata accessor for Field64()
{
  return &type metadata for Field64;
}

ValueMetadata *type metadata accessor for Field128()
{
  return &type metadata for Field128;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF4SeedV16measurementShare_AI05proofG0AI24wraparoundJointRandBlindAI012verificationjkL0ts5NeverOTg5(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *(*v19)(long long *__return_ptr, uint64_t *);
  uint64_t v20;
  long long v21;
  long long v22;
  uint64_t v23;

  uint64_t v19 = (void *(*)(long long *__return_ptr, uint64_t *))result;
  uint64_t v5 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v6 = v4;
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (!v5) {
    return (void *)v7;
  }
  uint64_t v23 = MEMORY[0x263F8EE78];
  unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v7 = v23;
    if (a4 <= a3) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a4;
    }
    uint64_t v11 = a3;
    while (a4 != v11)
    {
      uint64_t v20 = v11;
      unint64_t result = v19(&v21, &v20);
      if (v6)
      {
        swift_release();
        return (void *)v7;
      }
      uint64_t v6 = 0;
      long long v12 = v21;
      long long v13 = v22;
      uint64_t v23 = v7;
      unint64_t v15 = *(void *)(v7 + 16);
      unint64_t v14 = *(void *)(v7 + 24);
      if (v15 >= v14 >> 1)
      {
        long long v17 = v22;
        long long v18 = v21;
        unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1);
        long long v13 = v17;
        long long v12 = v18;
        uint64_t v7 = v23;
      }
      *(void *)(v7 + 16) = v15 + 1;
      uint64_t v16 = v7 + 32 * v15;
      *(_OWORD *)(v16 + 32) = v12;
      *(_OWORD *)(v16 + 48) = v13;
      if (a4 < a3) {
        goto LABEL_19;
      }
      if (v10 == v11) {
        goto LABEL_20;
      }
      if (a4 == ++v11) {
        return (void *)v7;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

char *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_s5UInt8Vs5NeverOTg5(char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = result;
  uint64_t v5 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v6 = v4;
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (!v5) {
    return (char *)v7;
  }
  uint64_t v19 = MEMORY[0x263F8EE78];
  unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v7 = v19;
    if (a4 <= a3) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a4;
    }
    uint64_t v15 = v10;
    uint64_t v11 = a3;
    while (a4 != v11)
    {
      uint64_t v17 = v11;
      unint64_t result = (char *)((char *(*)(uint64_t *__return_ptr, uint64_t *))v16)(&v18, &v17);
      if (v6)
      {
        swift_release();
        return (char *)v7;
      }
      uint64_t v6 = 0;
      char v12 = v18;
      uint64_t v19 = v7;
      unint64_t v14 = *(void *)(v7 + 16);
      unint64_t v13 = *(void *)(v7 + 24);
      if (v14 >= v13 >> 1)
      {
        unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1);
        uint64_t v7 = v19;
      }
      *(void *)(v7 + 16) = v14 + 1;
      *(unsigned char *)(v7 + v14 + 32) = v12;
      if (a4 < a3) {
        goto LABEL_19;
      }
      if (v15 == v11) {
        goto LABEL_20;
      }
      if (a4 == ++v11) {
        return (char *)v7;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF7Field40VsAE_pTg5(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF7Field40VsAE_pTg5Tm(a1, a2, a3, a4, (uint64_t (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

char *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF7Field32VsAE_pTg5(char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = result;
  uint64_t v5 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v6 = v4;
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (!v5) {
    return (char *)v7;
  }
  uint64_t v20 = MEMORY[0x263F8EE78];
  unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v7 = v20;
    if (a4 <= a3) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a4;
    }
    uint64_t v15 = v10;
    uint64_t v11 = a3;
    while (a4 != v11)
    {
      uint64_t v18 = v11;
      unint64_t result = (char *)((char *(*)(uint64_t *__return_ptr, uint64_t *, uint64_t *))v16)(&v19, &v18, &v17);
      if (v6)
      {
        swift_release();
        return (char *)v7;
      }
      uint64_t v6 = 0;
      int v12 = v19;
      uint64_t v20 = v7;
      unint64_t v14 = *(void *)(v7 + 16);
      unint64_t v13 = *(void *)(v7 + 24);
      if (v14 >= v13 >> 1)
      {
        unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1);
        uint64_t v7 = v20;
      }
      *(void *)(v7 + 16) = v14 + 1;
      *(_DWORD *)(v7 + 4 * v14 + 32) = v12;
      if (a4 < a3) {
        goto LABEL_19;
      }
      if (v15 == v11) {
        goto LABEL_20;
      }
      if (a4 == ++v11) {
        return (char *)v7;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF4SeedV16measurementShare_AI05proofG0AISg14jointRandBlindts5NeverOTg5(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *(*v19)(long long *__return_ptr, uint64_t *);
  uint64_t v20;
  long long v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v19 = (void *(*)(long long *__return_ptr, uint64_t *))result;
  uint64_t v5 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v6 = v4;
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (!v5) {
    return (void *)v7;
  }
  uint64_t v23 = MEMORY[0x263F8EE78];
  unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v7 = v23;
    if (a4 <= a3) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a4;
    }
    uint64_t v18 = v10;
    uint64_t v11 = a3;
    while (a4 != v11)
    {
      uint64_t v20 = v11;
      unint64_t result = v19(&v21, &v20);
      if (v6)
      {
        swift_release();
        return (void *)v7;
      }
      uint64_t v6 = 0;
      long long v12 = v21;
      uint64_t v13 = v22;
      uint64_t v23 = v7;
      unint64_t v15 = *(void *)(v7 + 16);
      unint64_t v14 = *(void *)(v7 + 24);
      if (v15 >= v14 >> 1)
      {
        long long v17 = v21;
        unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1);
        long long v12 = v17;
        uint64_t v7 = v23;
      }
      *(void *)(v7 + 16) = v15 + 1;
      uint64_t v16 = v7 + 24 * v15;
      *(_OWORD *)(v16 + 32) = v12;
      *(void *)(v16 + 48) = v13;
      if (a4 < a3) {
        goto LABEL_19;
      }
      if (v18 == v11) {
        goto LABEL_20;
      }
      if (a4 == ++v11) {
        return (void *)v7;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF7Field64VsAE_pTg5(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF7Field40VsAE_pTg5Tm(a1, a2, a3, a4, (uint64_t (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF7Field40VsAE_pTg5Tm(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(BOOL, unint64_t, uint64_t))
{
  void *(*v19)(uint64_t *__return_ptr, uint64_t *, uint64_t *);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v19 = (void *(*)(uint64_t *__return_ptr, uint64_t *, uint64_t *))result;
  uint64_t v6 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v7 = v5;
  uint64_t v8 = MEMORY[0x263F8EE78];
  if (!v6) {
    return (void *)v8;
  }
  uint64_t v23 = MEMORY[0x263F8EE78];
  unint64_t result = (void *)a5(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = v23;
    if (a4 <= a3) {
      uint64_t v12 = a3;
    }
    else {
      uint64_t v12 = a4;
    }
    long long v17 = a5;
    uint64_t v18 = v12;
    uint64_t v13 = a3;
    while (a4 != v13)
    {
      uint64_t v21 = v13;
      unint64_t result = v19(&v22, &v21, &v20);
      if (v7)
      {
        swift_release();
        return (void *)v8;
      }
      uint64_t v7 = 0;
      uint64_t v14 = v22;
      uint64_t v23 = v8;
      unint64_t v16 = *(void *)(v8 + 16);
      unint64_t v15 = *(void *)(v8 + 24);
      if (v16 >= v15 >> 1)
      {
        unint64_t result = (void *)v17(v15 > 1, v16 + 1, 1);
        uint64_t v8 = v23;
      }
      *(void *)(v8 + 16) = v16 + 1;
      *(void *)(v8 + 8 * v16 + 32) = v14;
      if (a4 < a3) {
        goto LABEL_19;
      }
      if (v18 == v13) {
        goto LABEL_20;
      }
      if (a4 == ++v13) {
        return (void *)v8;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(a4, a5);
  if (v10 == result)
  {
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v13 = v12(a1, a2, a3, a4, a5);
    (*(void (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5);
    return v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *ExtendableOutputFunction.nextVector(count:)(char *result, uint64_t a2)
{
  if (((unint64_t)result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    MEMORY[0x270FA5388](result, a2);
    v6[2] = v3;
    v6[3] = v4;
    v6[4] = v2;
    return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_s5UInt8Vs5NeverOTg5((char *)partial apply for closure #1 in ExtendableOutputFunction.nextVector(count:), (uint64_t)v6, 0, v5);
  }
  return result;
}

uint64_t static ExtendableOutputFunction.deriveSeed(seed:domainSeparationTag:binder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(a1, a2, a3, a4, a5);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(a4, a5);
  uint64_t v9 = specialized Seed.init<A>(length:using:)(v8, v7, a4, a5);
  swift_unknownObjectRelease();
  return v9;
}

uint64_t partial apply for closure #1 in ExtendableOutputFunction.nextVector(count:)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(v1 + 24) + 32))(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

uint64_t protocol witness for ExtendableOutputFunction.nextVector(count:) in conformance XofHmacSha256Aes128(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = result;
    swift_retain();
    uint64_t v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_s5UInt8Vs5NeverOTg5060_s4VDAF24ExtendableOutputFunctionPAAE10nextVector5countSays5D44VGSi_tFAGSiXEfU_AA19XofHmacSha256Aes128C_TG54VDAF0rstU0CTf1cn_nTf4ng_n(0, v2, v1);
    swift_release();
    return v3;
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_s5UInt8Vs5NeverOTg5060_s4VDAF24ExtendableOutputFunctionPAAE10nextVector5countSays5D44VGSi_tFAGSiXEfU_AA19XofHmacSha256Aes128C_TG54VDAF0rstU0CTf1cn_nTf4ng_n(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (!v3) {
    return v4;
  }
  uint64_t v5 = result;
  uint64_t v20 = MEMORY[0x263F8EE78];
  uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000) == 0)
  {
    uint64_t v4 = v20;
    uint64_t v6 = OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream;
    uint64_t v7 = a2;
    if (a2 <= v5) {
      uint64_t v7 = v5;
    }
    for (uint64_t i = v7 - v5; ; --i)
    {
      uint64_t v9 = *(void *)(a3 + v6);
      if (!v9) {
        break;
      }
      unint64_t v10 = *(void *)(v9 + 24);
      swift_retain();
      if (v10 == 256)
      {
        SeedStreamAES128CTR.fillBuffer()();
        unint64_t v10 = *(void *)(v9 + 24);
      }
      uint64_t result = swift_beginAccess();
      if ((v10 & 0x8000000000000000) != 0) {
        goto LABEL_20;
      }
      uint64_t v11 = *(void *)(v9 + 16);
      if (v10 >= *(void *)(v11 + 16)) {
        goto LABEL_21;
      }
      uint64_t v12 = *(void *)(v9 + 24);
      BOOL v13 = __OFADD__(v12, 1);
      uint64_t v14 = v12 + 1;
      if (v13) {
        goto LABEL_22;
      }
      char v15 = *(unsigned char *)(v11 + v10 + 32);
      *(void *)(v9 + 24) = v14;
      uint64_t result = swift_release();
      unint64_t v17 = *(void *)(v20 + 16);
      unint64_t v16 = *(void *)(v20 + 24);
      if (v17 >= v16 >> 1) {
        uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1);
      }
      *(void *)(v20 + 16) = v17 + 1;
      *(unsigned char *)(v20 + v17 + 32) = v15;
      if (a2 < v5) {
        goto LABEL_23;
      }
      if (!i) {
        goto LABEL_24;
      }
      if (!--v3) {
        return v4;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t dispatch thunk of static ExtendableOutputFunction.seedSize.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ExtendableOutputFunction.update(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of ExtendableOutputFunction.finalize()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ExtendableOutputFunction.next()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ExtendableOutputFunction.nextVector(count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of ExtendableOutputFunction.init(seedBytes:domainSeparationTag:binder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

uint64_t PINE<>.prepareNextAndEncodeIntoBytes(aggregatorID:encodedState:encodedMessage:)(unint64_t a1, size_t a2, unint64_t a3, size_t a4, unint64_t a5)
{
  uint64_t v8 = v5;
  memcpy(__dst, v8, sizeof(__dst));
  specialized PINEPrepareState.init<A>(from:parameter:)(a2, a3, a1, 64, __dst[13], 0, (uint64_t)&v32);
  if (v6) {
    return (uint64_t)v7;
  }
  uint64_t v14 = v32;
  uint64_t v15 = v33;
  uint64_t v16 = v34;
  specialized PINEPrepareMessage.init<A>(from:parameter:)(a4, a5, &v32);
  specialized PINE.prepareNext(state:message:)(v14, v15, v16, v32, v33, (uint64_t)&v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v19 = v32;
  uint64_t v18 = v33;
  uint64_t v21 = v34;
  uint64_t v20 = v35;
  uint64_t v23 = v36;
  uint64_t v22 = v37;
  if (v39 != 1)
  {
    outlined consume of PrepareTransition<PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>>(v32, v33, v34, v35, v36, v37, v38, 0);
    lazy protocol witness table accessor for type Prio3Error and conformance Prio3Error();
    swift_allocError();
    *(void *)uint64_t v30 = 0xD000000000000018;
    *(void *)(v30 + 8) = 0x8000000260BFE7A0;
    *(unsigned char *)(v30 + 16) = 2;
    swift_willThrow();
    return (uint64_t)v7;
  }
  uint64_t v31 = v38;
  unint64_t v24 = *(void *)(v32 + 16);
  if (!(v24 >> 61))
  {
    int64_t v25 = 4 * v24;
    swift_bridgeObjectRetain();
    uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25, 0, MEMORY[0x263F8EE78]);
    uint64_t v41 = v26;
    uint64_t v27 = *(void *)(v19 + 16);
    if (v27)
    {
      uint64_t v28 = (unsigned int *)(v19 + 32);
      swift_bridgeObjectRetain();
      do
      {
        unsigned int v29 = *v28++;
        specialized FieldElement.encode<A>(into:)((uint64_t *)&v41, v29);
        --v27;
      }
      while (v27);
      outlined consume of PrepareTransition<PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>>(v19, v18, v21, v20, v23, v22, v31, 1);
      outlined consume of PrepareTransition<PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>>(v19, v18, v21, v20, v23, v22, v31, 1);
      outlined consume of PrepareTransition<PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>>(v19, v18, v21, v20, v23, v22, v31, 1);
      return (uint64_t)v41;
    }
    else
    {
      uint64_t v7 = v26;
      outlined consume of PrepareTransition<PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>>(v19, v18, v21, v20, v23, v22, v31, 1);
      outlined consume of PrepareTransition<PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>>(v19, v18, v21, v20, v23, v22, v31, 1);
    }
    return (uint64_t)v7;
  }
  __break(1u);
  return result;
}

{
  const void *v5;
  uint64_t v6;
  const void *v7;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t __dst[41];

  uint64_t v7 = v5;
  memcpy(__dst, v7, sizeof(__dst));
  uint64_t result = specialized PINEPrepareState.init<A>(from:parameter:)(a2, a3, a1, 64, __dst[13], 0, (uint64_t)&v27);
  if (!v6)
  {
    uint64_t v14 = v27;
    uint64_t v15 = v28;
    uint64_t v16 = v29;
    specialized PINEPrepareMessage.init<A>(from:parameter:)(a4, a5, &v27);
    specialized PINE.prepareNext(state:message:)(v14, v15, v16, v27, v28, (uint64_t)&v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v17 = v27;
    uint64_t v18 = v28;
    uint64_t v19 = v29;
    uint64_t v20 = v30;
    uint64_t v21 = v31;
    uint64_t v22 = v32;
    uint64_t v23 = v33;
    if (v34 == 1)
    {
      unint64_t v24 = swift_bridgeObjectRetain();
      int64_t v25 = specialized VDAFEncodable.encodedBytes.getter(v24);
      outlined consume of PrepareTransition<PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>>(v17, v18, v19, v20, v21, v22, v23, 1);
      outlined consume of PrepareTransition<PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>>(v17, v18, v19, v20, v21, v22, v23, 1);
      return v25;
    }
    else
    {
      outlined consume of PrepareTransition<PINE<Field40, UnsafeBufferPointer<Float>, XofHmacSha256Aes128>>(v27, v28, v29, v30, v31, v32, v33, 0);
      lazy protocol witness table accessor for type Prio3Error and conformance Prio3Error();
      swift_allocError();
      *(void *)uint64_t v26 = 0xD000000000000018;
      *(void *)(v26 + 8) = 0x8000000260BFE7A0;
      *(unsigned char *)(v26 + 16) = 2;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t PINE<>.encodedAggregateShare(_:)(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  unint64_t v2 = *(void *)(*(void *)result + 16);
  if (v2 >> 61)
  {
    __break(1u);
  }
  else
  {
    int64_t v3 = 4 * v2;
    swift_bridgeObjectRetain();
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0, MEMORY[0x263F8EE78]);
    uint64_t v9 = v4;
    uint64_t v5 = *(void *)(v1 + 16);
    if (v5)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v5; ++i)
      {
        unsigned int v7 = *(_DWORD *)(v1 + 4 * i + 32);
        specialized FieldElement.encode<A>(into:)((uint64_t *)&v9, v7);
      }
      swift_bridgeObjectRelease_n();
      return (uint64_t)v9;
    }
    else
    {
      uint64_t v8 = v4;
      swift_bridgeObjectRelease();
    }
    return (uint64_t)v8;
  }
  return result;
}

uint64_t PINE<>.unshard(_:numOfMeasurements:into:)(uint64_t a1, uint64_t a2, float32x2_t **a3)
{
  memcpy(__dst, v3, sizeof(__dst));
  return specialized PINE.unshard<A, B>(_:numOfMeasurements:into:parameter:)(a1, a3);
}

unint64_t lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A]);
  }
  return result;
}

uint64_t Lock.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(void *)(v0 + 16) = v1;
  return v0;
}

void Lock.withLock<A>(_:)(void (*a1)(void))
{
  int64_t v3 = (os_unfair_lock_s *)(*(void *)(v1 + 16) + 16);
  os_unfair_lock_lock(v3);
  a1();
  os_unfair_lock_unlock(v3);
}

uint64_t Lock.init()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(void *)(v0 + 16) = v1;
  return v0;
}

Swift::Void __swiftcall Lock.lock()()
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(v0 + 16) + 16));
}

Swift::Void __swiftcall Lock.unlock()()
{
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(v0 + 16) + 16));
}

uint64_t Lock.deinit()
{
  swift_release();
  return v0;
}

uint64_t Lock.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Lock()
{
  return self;
}

uint64_t method lookup function for Lock(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for Lock);
}

uint64_t dispatch thunk of Lock.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t Prio3PrepareMessage.jointRandSeed.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t static Prio3PrepareMessage.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (v2)
  {
    if (v3 && specialized static Array<A>.== infix(_:_:)(v2, v3)) {
      return 1;
    }
  }
  else if (!v3)
  {
    return 1;
  }
  return 0;
}

uint64_t Prio3PrepareMessage.init(jointRandSeed:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Prio3PrepareMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (v2)
  {
    if (v3 && specialized static Array<A>.== infix(_:_:)(v2, v3)) {
      return 1;
    }
  }
  else if (!v3)
  {
    return 1;
  }
  return 0;
}

uint64_t Prio3PrepareMessage.init<A>(from:parameter:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  if (dispatch thunk of Collection.isEmpty.getter()) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = specialized Seed.init<A>(from:parameter:)(a1);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  *a3 = v6;
  return result;
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance Prio3PrepareMessage@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  return Prio3PrepareMessage.init<A>(from:parameter:)(a1, a2, a3);
}

uint64_t Prio3PrepareMessage.encodedLength.getter()
{
  if (*(void *)v0) {
    return *(void *)(*(void *)v0 + 16);
  }
  else {
    return 0;
  }
}

uint64_t Prio3PrepareMessage.encode<A>(into:)()
{
  if (*v0) {
    return Seed.encode<A>(into:)();
  }
  return result;
}

uint64_t protocol witness for VDAFEncodable.encodedLength.getter in conformance Prio3PrepareMessage()
{
  if (*(void *)v0) {
    return *(void *)(*(void *)v0 + 16);
  }
  else {
    return 0;
  }
}

void *initializeBufferWithCopyOfBuffer for Prio3PrepareMessage(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Prio3PrepareMessage(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void *assignWithTake for Prio3PrepareMessage(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Prio3PrepareMessage(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Prio3PrepareMessage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Prio3PrepareMessage()
{
  return &type metadata for Prio3PrepareMessage;
}

uint64_t Prio3PrepareState.measurementShare.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Prio3PrepareState.jointRandSeed.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Prio3PrepareState.aggregatorID.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t Prio3PrepareState.verifierLength.getter()
{
  return *(void *)(v0 + 32);
}

BOOL static Prio3PrepareState.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)a2;
  char v6 = *(unsigned char *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  int v12 = *(unsigned __int8 *)(a2 + 24);
  int v13 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v11 = *(void *)(a1 + 32);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  if ((static Share.== infix(_:_:)(v2, v3, v5, v6) & 1) == 0) {
    return 0;
  }
  if (v4)
  {
    if (v7)
    {
      BOOL v8 = specialized static Array<A>.== infix(_:_:)(v4, v7);
      BOOL result = 0;
      if (!v8) {
        return result;
      }
      goto LABEL_8;
    }
    return 0;
  }
  BOOL result = 0;
  if (v7) {
    return result;
  }
LABEL_8:
  if (v13 == v12) {
    return v11 == v10;
  }
  return result;
}

uint64_t Prio3PrepareState.init(measurementShare:jointRandSeed:aggregatorID:verifierLength:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = result;
  *(unsigned char *)(a6 + 8) = a2 & 1;
  *(void *)(a6 + 16) = a3;
  *(unsigned char *)(a6 + 24) = a4;
  *(void *)(a6 + 32) = a5;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Prio3PrepareState<A, B>(uint64_t a1, uint64_t a2)
{
  return static Prio3PrepareState.== infix(_:_:)(a1, a2);
}

uint64_t Prio3PrepareStateDecodableParameter.measurement.getter()
{
  return *(void *)v0;
}

uint64_t Prio3PrepareStateDecodableParameter.jointRandSeedSize.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t Prio3PrepareStateDecodableParameter.aggregatorID.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t Prio3PrepareStateDecodableParameter.encodedLength.getter()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v6 = ShareDecodableParameter.encodedLength.getter(v1, v2, AssociatedTypeWitness, AssociatedConformanceWitness);
  BOOL v7 = __OFADD__(v6, v3);
  uint64_t result = v6 + v3;
  if (v7) {
    __break(1u);
  }
  return result;
}

uint64_t Prio3PrepareStateDecodableParameter.init(prio3:aggregatorID:)@<X0>(uint64_t a1@<X0>, Swift::Int a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13 = type metadata accessor for Prio3();
  swift_getWitnessTable();
  Swift::Bool v14 = VDAFProtocol.isLeaderAggregatorID(_:)(a2);
  if (v15) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a1, v13);
  }
  Swift::Bool v17 = v14;
  if (v14) {
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 48))(a3, a5);
  }
  else {
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 8))(a4, a6);
  }
  uint64_t v21 = v18;
  if (Prio3.isJointRandRequired.getter(v13)) {
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 8))(a4, a6);
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 64))(a3, a5);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a1, v13);
  *(void *)a7 = v21;
  *(unsigned char *)(a7 + 8) = !v17;
  *(void *)(a7 + 16) = v19;
  *(void *)(a7 + 24) = a2;
  *(void *)(a7 + 32) = v20;
  return result;
}

uint64_t Prio3PrepareState.init<A>(from:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1, a2);
  Swift::Bool v17 = (char *)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(unsigned __int8 *)(v9 + 8);
  if (v18 == 255)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *uint64_t v19 = 0;
    v19[1] = 0;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1, a5);
  }
  uint64_t v92 = v5;
  uint64_t v91 = v15;
  uint64_t v100 = a1;
  uint64_t v101 = v8;
  uint64_t v96 = v12;
  uint64_t AssociatedConformanceWitness = v10;
  uint64_t v21 = *(void *)v9;
  unint64_t v22 = *(void *)(v9 + 24);
  uint64_t v98 = *(void *)(v9 + 16);
  uint64_t v23 = *(void *)(v9 + 32);
  unint64_t v24 = v11;
  unint64_t v25 = v13;
  uint64_t v26 = v18 & 1;
  uint64_t v94 = *(void *)(*(void *)(v14 + 8) + 8);
  uint64_t v95 = dispatch thunk of Collection.count.getter();
  uint64_t v102 = v26;
  uint64_t v103 = v21;
  uint64_t v108 = v21;
  uint64_t v27 = AssociatedConformanceWitness;
  uint64_t v28 = v23;
  uint64_t v29 = v98;
  LOBYTE(v109) = v26;
  unint64_t v30 = v25;
  unint64_t v31 = v24;
  uint64_t v110 = v98;
  unint64_t v111 = v22;
  uint64_t v93 = v28;
  uint64_t v112 = v28;
  uint64_t v104 = AssociatedConformanceWitness;
  unint64_t v105 = v24;
  uint64_t v32 = v96;
  uint64_t v106 = v96;
  unint64_t v107 = v30;
  type metadata accessor for Prio3PrepareStateDecodableParameter();
  uint64_t v99 = a5;
  if (v95 != Prio3PrepareStateDecodableParameter.encodedLength.getter())
  {
    BOOL v61 = v102 != 0;
    uint64_t v108 = 0;
    unint64_t v109 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    uint64_t v108 = v27;
    unint64_t v109 = v31;
    uint64_t v110 = v32;
    unint64_t v111 = v30;
    type metadata accessor for Prio3PrepareState();
    uint64_t v62 = _typeName(_:qualified:)();
    unint64_t v64 = v63;
    swift_bridgeObjectRelease();
    uint64_t v104 = v62;
    unint64_t v105 = v64;
    v65._countAndFlagsBits = 0x6572697571657220;
    v65._object = (void *)0xEB00000000203A64;
    String.append(_:)(v65);
    uint64_t v108 = v103;
    LOBYTE(v109) = v61;
    uint64_t v110 = v29;
    unint64_t v111 = v22;
    uint64_t v112 = v93;
    uint64_t v108 = Prio3PrepareStateDecodableParameter.encodedLength.getter();
    v66._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v66);
    swift_bridgeObjectRelease();
    v67._countAndFlagsBits = 0x203A746F67202CLL;
    v67._object = (void *)0xE700000000000000;
    String.append(_:)(v67);
    uint64_t v69 = v99;
    uint64_t v68 = v100;
    uint64_t v108 = dispatch thunk of Collection.count.getter();
    v70._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v70);
    swift_bridgeObjectRelease();
    uint64_t v71 = v104;
    uint64_t v72 = v105;
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *unint64_t v73 = v71;
    v73[1] = v72;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v101 + 8))(v68, v69);
  }
  unint64_t v90 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v101 + 16))(v17, v100, v99);
  uint64_t v33 = ArraySlice.init<A>(_:)();
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v95 = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v41 = ShareDecodableParameter.encodedLength.getter(v103, v102, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v42 = specialized Collection.prefix(_:)(v41, v33, v35, v37, v39);
  unint64_t v44 = v43;
  uint64_t v46 = v45;
  unint64_t v48 = v47;
  uint64_t v49 = specialized Collection.dropFirst(_:)(v41, v33, v35, v37, v39);
  uint64_t v51 = v50;
  unint64_t v53 = v52;
  uint64_t v55 = v54;
  uint64_t v108 = v42;
  unint64_t v109 = v44;
  uint64_t v110 = v46;
  unint64_t v111 = v48;
  swift_unknownObjectRetain();
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<UInt8>);
  unint64_t v57 = lazy protocol witness table accessor for type ArraySlice<UInt8> and conformance ArraySlice<A>();
  uint64_t v58 = v92;
  uint64_t v59 = Share.init<A>(from:parameter:)((uint64_t)&v108, v103, v102, v95, v56, AssociatedConformanceWitness, v57);
  if (v58)
  {
    (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v100, v99);
    return swift_unknownObjectRelease();
  }
  uint64_t v74 = v59;
  uint64_t v75 = v49;
  char v113 = v60 & 1;
  uint64_t v76 = v98;
  if (v98 < 1)
  {
    uint64_t v84 = 0;
    uint64_t v85 = v93;
    goto LABEL_19;
  }
  uint64_t v77 = v55;
  unint64_t v78 = v53;
  uint64_t v79 = specialized Collection.prefix(_:)(v98, v75, v51, v53, v77);
  uint64_t v102 = v80;
  uint64_t v103 = v81;
  unint64_t v53 = v82;
  specialized Collection.dropFirst(_:)(v76, v75, v51, v78, v77);
  if (v53)
  {
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    swift_unknownObjectRetain();
    uint64_t v86 = swift_dynamicCastClass();
    if (!v86)
    {
      swift_unknownObjectRelease();
      uint64_t v86 = MEMORY[0x263F8EE78];
    }
    uint64_t v87 = *(void *)(v86 + 16);
    swift_release();
    if (__OFSUB__(v53 >> 1, v103)) {
      goto LABEL_24;
    }
    if (v87 != (v53 >> 1) - v103) {
      goto LABEL_25;
    }
    uint64_t v84 = swift_dynamicCastClass();
    uint64_t v85 = v93;
    if (!v84)
    {
      swift_unknownObjectRelease();
      uint64_t v84 = MEMORY[0x263F8EE78];
    }
    goto LABEL_18;
  }
  swift_unknownObjectRetain();
  while (1)
  {
    specialized _copyCollectionToContiguousArray<A>(_:)(v79, v102, v103, v53);
    uint64_t v84 = v83;
    uint64_t v85 = v93;
LABEL_18:
    swift_unknownObjectRelease();
LABEL_19:
    uint64_t v79 = v90;
    if ((v90 & 0x8000000000000000) != 0)
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v90 <= 0xFF) {
      break;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    swift_unknownObjectRelease();
  }
  (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v100, v99);
  uint64_t result = swift_unknownObjectRelease();
  char v88 = v113;
  uint64_t v89 = v91;
  *uint64_t v91 = v74;
  *((unsigned char *)v89 + 8) = v88;
  v89[2] = v84;
  *((unsigned char *)v89 + 24) = v79;
  v89[4] = v85;
  return result;
}

uint64_t type metadata accessor for Prio3PrepareStateDecodableParameter()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for Prio3PrepareState()
{
  return swift_getGenericMetadata();
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance Prio3PrepareState<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  uint64_t v9 = v5;
  return Prio3PrepareState.init<A>(from:parameter:)(a1, (uint64_t)v8, *(void *)(a5 + 16), *(void *)(a5 + 24), a3);
}

uint64_t Prio3PrepareState.encodedLength.getter()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t result = Share.encodedLength.getter(v1, v2, AssociatedTypeWitness, AssociatedConformanceWitness);
  if (v3)
  {
    uint64_t v7 = *(void *)(v3 + 16);
    BOOL v8 = __OFADD__(result, v7);
    result += v7;
    if (v8) {
      __break(1u);
    }
  }
  return result;
}

uint64_t Prio3PrepareState.encode<A>(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)v4;
  char v9 = *(unsigned char *)(v4 + 8);
  uint64_t v10 = *(void *)(v4 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t result = Share.encode<A>(into:)(a1, v8, v9, AssociatedTypeWitness, a3, AssociatedConformanceWitness, a4);
  if (v10)
  {
    return Seed.encode<A>(into:)();
  }
  return result;
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance Prio3PrepareState<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Prio3PrepareState.encode<A>(into:)(a1, a4, a2, a3);
}

uint64_t destroy for Prio3PrepareState()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Prio3PrepareState(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Prio3PrepareState(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Prio3PrepareState(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for Prio3PrepareState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Prio3PrepareState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Prio3PrepareStateDecodableParameter(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Prio3PrepareStateDecodableParameter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t static AES.CTR.encryptInPlace(_:using:updating:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized static AES.CTR.encryptInPlace(_:using:updating:)(a1, a2, a3, a4);
}

uint64_t AES.CTR.Nonce.withUnsafeMutableBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v8[2] = a3;
  v8[3] = a1;
  void v8[4] = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt64, UInt32, UInt32));
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  return _ss22withUnsafeMutableBytes2of_q0_xz_q0_Swq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)partial apply for thunk for @callee_guaranteed (@unowned UnsafeMutableRawBufferPointer) -> (@out A, @error @owned Error), (uint64_t)v8, v5, v6, a3, MEMORY[0x263F8E4E0], (uint64_t)&v9);
}

Swift::Void __swiftcall AES.CTR.Nonce.incrementCounter()()
{
  unsigned int v1 = bswap32(*(_DWORD *)(v0 + 12));
  *(_DWORD *)(v0 + 12) = bswap32(v1 + 1);
  if (v1 == -1)
  {
    unsigned int v2 = bswap32(*(_DWORD *)(v0 + 8));
    *(_DWORD *)(v0 + 8) = bswap32(v2 + 1);
    if (v2 == -1) {
      *(void *)uint64_t v0 = bswap64(bswap64(*(void *)v0) + 1);
    }
  }
}

uint64_t static AES.CTR.encryptInPlace(_:using:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  return specialized static AES.CTR.encryptInPlace(_:using:nonce:)(a1, a2, a3, a4, a5);
}

uint64_t static AES.CTR.encrypt<A>(_:using:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  return static AES.CTR.encrypt<A>(_:using:nonce:)(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t, uint64_t))partial apply for closure #1 in static AES.CTR.encrypt<A>(_:using:nonce:));
}

uint64_t static AES.CTR.decryptInPlace(_:using:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  return specialized static AES.CTR.encryptInPlace(_:using:nonce:)(a1, a2, a3, a4, a5);
}

uint64_t static AES.CTR.decrypt<A>(_:using:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  return static AES.CTR.encrypt<A>(_:using:nonce:)(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t, uint64_t))partial apply for closure #1 in static AES.CTR.encrypt<A>(_:using:nonce:));
}

uint64_t static AES.CTR.encrypt<A>(_:using:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t))
{
  int v9 = a4;
  unint64_t v12 = HIDWORD(a4);
  MEMORY[0x270FA5388](a1, a1);
  (*(void (**)(unsigned char *))(v14 + 16))(&v17[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  uint64_t v22 = Data.init<A>(_:)();
  unint64_t v23 = v15;
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  int v20 = v9;
  int v21 = v12;
  specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(a7);
  uint64_t result = v22;
  if (v7) {
    return outlined consume of Data._Representation(v22, v23);
  }
  return result;
}

uint64_t AES.CTR.Nonce.init()()
{
  uint64_t v2 = 0;
  MEMORY[0x261224CB0](&v2, 8);
  uint64_t v0 = v2;
  uint64_t v2 = 0;
  MEMORY[0x261224CB0](&v2, 8);
  uint64_t v2 = 0;
  MEMORY[0x261224CB0](&v2, 8);
  return v0;
}

uint64_t AES.CTR.Nonce.init<A>(nonceBytes:)(char *a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = dispatch thunk of Collection.count.getter();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, a1, a2);
  if (v7 == 12)
  {
    uint64_t v8 = *(void (**)(char *, uint64_t))(v4 + 8);
    v8(v6, a2);
LABEL_4:
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    UnsafeMutableRawBufferPointer.copyBytes<A>(from:)();
    v8(a1, a2);
    return v13;
  }
  uint64_t v9 = dispatch thunk of Collection.count.getter();
  uint64_t v8 = *(void (**)(char *, uint64_t))(v4 + 8);
  v8(v6, a2);
  if (v9 == 16) {
    goto LABEL_4;
  }
  lazy protocol witness table accessor for type AESCTRError and conformance AESCTRError();
  swift_allocError();
  unsigned char *v11 = 0;
  swift_willThrow();
  return ((uint64_t (*)(char *, uint64_t))v8)(a1, a2);
}

uint64_t _ss22withUnsafeMutableBytes2of_q0_xz_q0_Swq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = MEMORY[0x270FA5388]();
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v16(v12, v12 + *(void *)(*(void *)(v15 - 8) + 64), v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

BOOL static AESCTRError.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void AESCTRError.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int AESCTRError.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AESCTRError(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AESCTRError()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AESCTRError()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AESCTRError()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(void (*a1)(uint64_t, uint64_t))
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unint64_t v2 = v1[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      *(void *)&long long v17 = *v1;
      *((void *)&v17 + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)(a1);
      uint64_t v3 = v17;
      unint64_t v4 = *((void *)&v17 + 1) | 0x4000000000000000;
      goto LABEL_4;
    case 2uLL:
      *(void *)&long long v17 = *v1;
      *((void *)&v17 + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v5 = *((void *)&v17 + 1);
      uint64_t v6 = *(void *)(v17 + 16);
      uint64_t v16 = *(void *)(v17 + 24);
      uint64_t v7 = __DataStorage._bytes.getter();
      if (!v7)
      {
        __break(1u);
        JUMPOUT(0x260BAA7C4);
      }
      uint64_t v8 = v7;
      uint64_t v9 = __DataStorage._offset.getter();
      uint64_t v10 = v6 - v9;
      if (__OFSUB__(v6, v9))
      {
        __break(1u);
LABEL_15:
        __break(1u);
      }
      BOOL v11 = __OFSUB__(v16, v6);
      uint64_t v12 = v16 - v6;
      if (v11) {
        goto LABEL_15;
      }
      uint64_t v13 = __DataStorage._length.getter();
      if (v13 >= v12) {
        uint64_t v14 = v12;
      }
      else {
        uint64_t v14 = v13;
      }
      a1(v8 + v10, v8 + v10 + v14);
      *Swift::UInt v1 = v17;
      v1[1] = v5 | 0x8000000000000000;
      return;
    case 3uLL:
      *(void *)((char *)&v17 + 7) = 0;
      *(void *)&long long v17 = 0;
      a1((uint64_t)&v17, (uint64_t)&v17);
      return;
    default:
      *(void *)&long long v17 = *v1;
      WORD4(v17) = v2;
      BYTE10(v17) = BYTE2(v2);
      BYTE11(v17) = BYTE3(v2);
      BYTE12(v17) = BYTE4(v2);
      BYTE13(v17) = BYTE5(v2);
      BYTE14(v17) = BYTE6(v2);
      a1((uint64_t)&v17, (uint64_t)&v17 + BYTE6(v2));
      uint64_t v3 = v17;
      unint64_t v4 = DWORD2(v17) | ((unint64_t)BYTE12(v17) << 32) | ((unint64_t)BYTE13(v17) << 40) | ((unint64_t)BYTE14(v17) << 48);
LABEL_4:
      *Swift::UInt v1 = v3;
      v1[1] = v4;
      return;
  }
}

void specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)(void (*a1)(uint64_t, uint64_t))
{
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  if ((int)v4 < (int)v3)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = __DataStorage._bytes.getter();
  if (!v5)
  {
LABEL_10:
    __break(1u);
    return;
  }
  uint64_t v6 = v5;
  uint64_t v7 = __DataStorage._offset.getter();
  uint64_t v8 = v3 - v7;
  if (__OFSUB__(v3, v7))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v9 = v4 - v3;
  uint64_t v10 = __DataStorage._length.getter();
  if (v10 >= v9) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = v10;
  }
  a1(v6 + v8, v6 + v8 + v11);
}

uint64_t specialized static AES.CTR.encryptInPlace(_:using:updating:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v41[2] = *MEMORY[0x263EF8340];
  uint64_t result = SymmetricKey.bitCount.getter();
  if (!qword_270CE8560) {
    goto LABEL_42;
  }
  if (qword_270CE8570 == result) {
    goto LABEL_3;
  }
  if (qword_270CE8560 == 1)
  {
LABEL_42:
    lazy protocol witness table accessor for type AESCTRError and conformance AESCTRError();
    swift_allocError();
    unsigned char *v31 = 1;
    return swift_willThrow();
  }
  uint64_t v29 = 5;
  while (1)
  {
    uint64_t v30 = v29 - 3;
    if (__OFADD__(v29 - 4, 1))
    {
      __break(1u);
LABEL_45:
      __break(1u);
    }
    if (outlined read-only object #0 of static AES.CTR.encryptInPlace(_:using:updating:)[v29] == result) {
      break;
    }
    ++v29;
    if (v30 == qword_270CE8560) {
      goto LABEL_42;
    }
  }
LABEL_3:
  if (a1)
  {
    uint64_t v9 = a2 - a1;
    if (a2 - a1 >= 1)
    {
      uint64_t v33 = a4;
      lazy protocol witness table accessor for type UnsafeMutableRawBufferPointer and conformance UnsafeMutableRawBufferPointer();
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      unsigned int v12 = *(_DWORD *)(a4 + 12);
      uint64_t v13 = a2 - a1;
      uint64_t v32 = a1;
      uint64_t v14 = a1;
      do
      {
        uint64_t v36 = v13 - 16;
        if (v13 >= 16) {
          uint64_t v15 = 16;
        }
        else {
          uint64_t v15 = v13;
        }
        unsigned int v16 = *(_DWORD *)(a4 + 8);
        unint64_t v34 = *(void *)a4;
        unint64_t v38 = *(void *)a4;
        if (v9 - 16 * v10 >= 16) {
          unint64_t v17 = 16;
        }
        else {
          unint64_t v17 = v9 - 16 * v10;
        }
        uint64_t v18 = v11 + 16;
        BOOL v19 = __OFADD__(v11, 16);
        int v35 = v19;
        unsigned int v39 = v16;
        unsigned int v40 = v12;
        unsigned int v37 = v12;
        v41[0] = &v38;
        v41[1] = v41;
        uint64_t result = static AES.permute<A>(_:key:)();
        if (v4) {
          return result;
        }
        uint64_t v20 = v9 - v11;
        if (v9 - v11 >= 16) {
          uint64_t v20 = 16;
        }
        if (v20 < 0) {
          goto LABEL_45;
        }
        if (v20)
        {
          uint64_t v21 = v41[0];
          if (v17 < 8 || v32 + v11 < v41[0] + v17 && v32 + v11 + v17 > v41[0])
          {
            unint64_t v22 = 0;
            goto LABEL_25;
          }
          if (v17 < 0x10)
          {
            unint64_t v22 = 0;
            goto LABEL_33;
          }
          unint64_t v22 = v17 & 0xFFFFFFFFFFFFFFF0;
          *(int8x16_t *)(v32 + v11) = veorq_s8(*(int8x16_t *)(v32 + v11), *(int8x16_t *)v41[0]);
          if (v17 != (v17 & 0xFFFFFFFFFFFFFFF0))
          {
            if ((v17 & 8) == 0)
            {
              do
              {
LABEL_25:
                *(unsigned char *)(v14 + v22) ^= *(unsigned char *)(v21 + v22);
                ++v22;
              }
              while (v15 != v22);
              goto LABEL_26;
            }
LABEL_33:
            unint64_t v25 = (int8x8_t *)(v14 + v22);
            uint64_t v26 = (int8x8_t *)(v21 + v22);
            unint64_t v27 = v22 - (v15 & 0xFFFFFFFFFFFFFFF8);
            unint64_t v22 = v17 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              int8x8_t v28 = *v26++;
              *unint64_t v25 = veor_s8(*v25, v28);
              ++v25;
              v27 += 8;
            }
            while (v27);
            if (v17 == v22) {
              goto LABEL_26;
            }
            goto LABEL_25;
          }
        }
LABEL_26:
        unsigned int v23 = bswap32(v37);
        unsigned int v12 = bswap32(v23 + 1);
        a4 = v33;
        *(_DWORD *)(v33 + 12) = v12;
        if (v23 == -1)
        {
          unsigned int v24 = bswap32(v16);
          *(_DWORD *)(v33 + 8) = bswap32(v24 + 1);
          if (v24 == -1) {
            *(void *)uint64_t v33 = bswap64(bswap64(v34) + 1);
          }
        }
        ++v10;
        v14 += 16;
        v11 += 16;
        uint64_t v13 = v36;
      }
      while (((v18 < v9) & ~v35) != 0);
    }
  }
  return result;
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned UnsafeMutableRawBufferPointer) -> (@out A, @error @owned Error)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = (*(uint64_t (**)(void))(v3 + 24))();
  if (v4) {
    *a3 = v4;
  }
  return result;
}

uint64_t specialized static AES.CTR.encryptInPlace(_:using:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  v51[2] = *MEMORY[0x263EF8340];
  uint64_t result = SymmetricKey.bitCount.getter();
  if (!qword_270CE70B0) {
    goto LABEL_50;
  }
  if (qword_270CE70C0 == result) {
    goto LABEL_3;
  }
  if (qword_270CE70B0 == 1)
  {
LABEL_50:
    lazy protocol witness table accessor for type AESCTRError and conformance AESCTRError();
    swift_allocError();
    *uint64_t v42 = 1;
    return swift_willThrow();
  }
  uint64_t v40 = 5;
  while (1)
  {
    uint64_t v41 = v40 - 3;
    if (__OFADD__(v40 - 4, 1))
    {
      __break(1u);
LABEL_53:
      __break(1u);
    }
    if (outlined read-only object #0 of static AES.CTR.encryptInPlace(_:using:nonce:)[v40] == result) {
      break;
    }
    ++v40;
    if (v41 == qword_270CE70B0) {
      goto LABEL_50;
    }
  }
LABEL_3:
  if (a1 && a2 - a1 >= 1)
  {
    unint64_t v11 = HIDWORD(a5);
    lazy protocol witness table accessor for type UnsafeMutableRawBufferPointer and conformance UnsafeMutableRawBufferPointer();
    uint64_t v12 = a2 - a1;
    unsigned int v13 = a5;
    uint64_t v43 = a1;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = a2 - a1;
    uint64_t v17 = a1;
    unint64_t v18 = a4;
    do
    {
      uint64_t v46 = v16 - 16;
      uint64_t v47 = v14;
      if (v16 >= 16) {
        uint64_t v26 = 16;
      }
      else {
        uint64_t v26 = v16;
      }
      unint64_t v27 = v18;
      unint64_t v48 = v18;
      if (v12 - 16 * v14 >= 16) {
        unint64_t v28 = 16;
      }
      else {
        unint64_t v28 = v12 - 16 * v14;
      }
      unsigned int v29 = v13;
      unsigned int v49 = v13;
      int v50 = v11;
      unsigned int v30 = v11;
      uint64_t v45 = v15 + 16;
      BOOL v31 = __OFADD__(v15, 16);
      char v44 = v31;
      v51[0] = &v48;
      v51[1] = v51;
      uint64_t v32 = v12;
      uint64_t result = static AES.permute<A>(_:key:)();
      if (v5) {
        return result;
      }
      uint64_t v33 = v32 - v15;
      if (v32 - v15 >= 16) {
        uint64_t v33 = 16;
      }
      if (v33 < 0) {
        goto LABEL_53;
      }
      uint64_t v12 = v32;
      unint64_t v18 = v27;
      if (v33)
      {
        uint64_t v34 = v51[0];
        if (v28 < 8 || v43 + v15 < v51[0] + v28 && v43 + v15 + v28 > v51[0])
        {
          unint64_t v35 = 0;
          do
          {
LABEL_35:
            *(unsigned char *)(v17 + v35) ^= *(unsigned char *)(v34 + v35);
            ++v35;
          }
          while (v26 != v35);
          goto LABEL_6;
        }
        if (v28 >= 0x10)
        {
          unint64_t v35 = v28 & 0xFFFFFFFFFFFFFFF0;
          *(int8x16_t *)(v43 + v15) = veorq_s8(*(int8x16_t *)(v43 + v15), *(int8x16_t *)v51[0]);
          if (v28 == (v28 & 0xFFFFFFFFFFFFFFF0)) {
            goto LABEL_6;
          }
          if ((v28 & 8) == 0) {
            goto LABEL_35;
          }
        }
        else
        {
          unint64_t v35 = 0;
        }
        uint64_t v36 = (int8x8_t *)(v17 + v35);
        unsigned int v37 = (int8x8_t *)(v34 + v35);
        unint64_t v38 = v35 - (v26 & 0xFFFFFFFFFFFFFFF8);
        unint64_t v35 = v28 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          int8x8_t v39 = *v37++;
          *uint64_t v36 = veor_s8(*v36, v39);
          ++v36;
          v38 += 8;
        }
        while (v38);
        if (v28 != v35) {
          goto LABEL_35;
        }
      }
LABEL_6:
      unsigned int v19 = bswap32(v30);
      BOOL v20 = __CFADD__(v19, 1);
      unsigned int v21 = v19 + 1;
      char v22 = v20;
      LODWORD(v11) = bswap32(v21);
      unsigned int v23 = bswap32(v29);
      BOOL v20 = __CFADD__(v23, 1);
      unsigned int v24 = bswap32(v23 + 1);
      unint64_t v25 = bswap64(bswap64(v27) + 1);
      if (!v20) {
        unint64_t v25 = v27;
      }
      if (v22) {
        unsigned int v13 = v24;
      }
      else {
        unsigned int v13 = v29;
      }
      if (v22) {
        unint64_t v18 = v25;
      }
      v15 += 16;
      uint64_t v14 = v47 + 1;
      v17 += 16;
      uint64_t v16 = v46;
    }
    while (((v45 < v12) & ~v44) != 0);
  }
  return result;
}

uint64_t partial apply for closure #1 in static AES.CTR.encrypt<A>(_:using:nonce:)(uint64_t a1, uint64_t a2)
{
  return specialized static AES.CTR.encryptInPlace(_:using:nonce:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

unint64_t lazy protocol witness table accessor for type AESCTRError and conformance AESCTRError()
{
  unint64_t result = lazy protocol witness table cache variable for type AESCTRError and conformance AESCTRError;
  if (!lazy protocol witness table cache variable for type AESCTRError and conformance AESCTRError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AESCTRError and conformance AESCTRError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AESCTRError and conformance AESCTRError;
  if (!lazy protocol witness table cache variable for type AESCTRError and conformance AESCTRError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AESCTRError and conformance AESCTRError);
  }
  return result;
}

ValueMetadata *type metadata accessor for AES.CTR()
{
  return &type metadata for AES.CTR;
}

ValueMetadata *type metadata accessor for AES.CTR.Nonce()
{
  return &type metadata for AES.CTR.Nonce;
}

uint64_t getEnumTagSinglePayload for AESCTRError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AESCTRError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x260BAB138);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for AESCTRError(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AESCTRError()
{
  return &type metadata for AESCTRError;
}

unint64_t lazy protocol witness table accessor for type UnsafeMutableRawBufferPointer and conformance UnsafeMutableRawBufferPointer()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsafeMutableRawBufferPointer and conformance UnsafeMutableRawBufferPointer;
  if (!lazy protocol witness table cache variable for type UnsafeMutableRawBufferPointer and conformance UnsafeMutableRawBufferPointer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeMutableRawBufferPointer and conformance UnsafeMutableRawBufferPointer);
  }
  return result;
}

uint64_t specialized VDAFEncodable.encodedData.getter(uint64_t a1)
{
  uint64_t result = specialized Prio3PublicShare.encodedLength.getter(a1);
  if (result)
  {
    unint64_t v3 = result;
    if (result <= 14)
    {
      uint64_t result = 0;
      uint64_t v12 = 0;
      unint64_t v13 = 0;
      if (!a1) {
        return result;
      }
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v4 = __DataStorage.init(capacity:)();
      if (v3 > 0x7FFFFFFE)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = 0;
        uint64_t v12 = result;
        unint64_t v13 = v4 | 0x8000000000000000;
        if (!a1) {
          return result;
        }
      }
      else
      {
        uint64_t result = 0;
        uint64_t v12 = 0;
        unint64_t v13 = v4 | 0x4000000000000000;
        if (!a1) {
          return result;
        }
      }
    }
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0xC000000000000000;
    if (!a1) {
      return result;
    }
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    unint64_t v6 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]();
    swift_bridgeObjectRetain();
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(a1 + 8 * v7++ + 32);
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
      unint64_t v11 = v6;
      v9[0] = v8;
      __swift_project_boxed_opaque_existential_1(v9, v10);
      swift_bridgeObjectRetain_n();
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      swift_bridgeObjectRelease();
    }
    while (v5 != v7);
    swift_bridgeObjectRelease();
    return v12;
  }
  return result;
}

uint64_t specialized VDAFCodableFixedWidthInteger.encode<A>(into:)(uint64_t *a1, int a2)
{
  uint64_t v4 = *a1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1, (char *)v4);
    uint64_t v4 = result;
  }
  unint64_t v7 = *(void *)(v4 + 16);
  unint64_t v6 = *(void *)(v4 + 24);
  int64_t v8 = v6 >> 1;
  unint64_t v9 = v7 + 1;
  if (v6 >> 1 <= v7)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1, (char *)v4);
    uint64_t v4 = result;
    unint64_t v6 = *(void *)(result + 24);
    int64_t v8 = v6 >> 1;
  }
  *(void *)(v4 + 16) = v9;
  *(unsigned char *)(v4 + v7 + 32) = a2;
  unint64_t v10 = v7 + 2;
  if (v8 < (uint64_t)(v7 + 2))
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 2, 1, (char *)v4);
    uint64_t v4 = result;
    unint64_t v6 = *(void *)(result + 24);
    int64_t v8 = v6 >> 1;
  }
  *(void *)(v4 + 16) = v10;
  *(unsigned char *)(v4 + v9 + 32) = BYTE1(a2);
  unint64_t v11 = v7 + 3;
  if (v8 < (uint64_t)(v7 + 3))
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 3, 1, (char *)v4);
    uint64_t v4 = result;
    unint64_t v6 = *(void *)(result + 24);
    int64_t v8 = v6 >> 1;
  }
  *(void *)(v4 + 16) = v11;
  *(unsigned char *)(v4 + v10 + 32) = BYTE2(a2);
  if (v8 < (uint64_t)(v7 + 4))
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 4, 1, (char *)v4);
    uint64_t v4 = result;
  }
  *(void *)(v4 + 16) = v7 + 4;
  *(unsigned char *)(v4 + v11 + 32) = HIBYTE(a2);
  *a1 = v4;
  return result;
}

uint64_t specialized VDAFCodableFixedWidthInteger.encode<A>(into:)(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = 8;
  do
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1, (char *)v4);
      uint64_t v4 = result;
    }
    unint64_t v8 = *(void *)(v4 + 16);
    unint64_t v7 = *(void *)(v4 + 24);
    if (v8 >= v7 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1, (char *)v4);
      uint64_t v4 = result;
    }
    *(void *)(v4 + 16) = v8 + 1;
    *(unsigned char *)(v4 + v8 + 32) = a2;
    a2 >>= 8;
    --v5;
  }
  while (v5);
  *a1 = v4;
  return result;
}

_OWORD *specialized FieldElement.integerValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v36 = a1;
  uint64_t v37 = a2;
  long long v35 = xmmword_260BFA5F0;
  _UInt128.multipliedFullWidth(by:)(&v32, &v38, (unint64_t *)&v35);
  long long v4 = v32;
  long long v5 = v38;
  long long v38 = xmmword_260BFA010;
  uint64_t v36 = -(uint64_t)v5;
  uint64_t v37 = 0;
  _UInt128.multipliedFullWidth(by:)(&v32, &v33, (unint64_t *)&v36);
  BOOL v6 = __CFADD__(v33, (void)v5);
  uint64_t v7 = v34 + *((void *)&v5 + 1);
  if (__CFADD__(v34, *((void *)&v5 + 1))) {
    char v8 = 1;
  }
  else {
    char v8 = v7 == -1 && v6;
  }
  uint64_t v9 = v7 + v6;
  uint64_t v10 = v4 + v32;
  BOOL v11 = __CFADD__((void)v4, (void)v32);
  uint64_t v12 = *((void *)&v4 + 1) + *((void *)&v32 + 1);
  if (__CFADD__(*((void *)&v4 + 1), *((void *)&v32 + 1)))
  {
    if (v11) {
      goto LABEL_20;
    }
  }
  else
  {
    if (v12 == -1)
    {
      uint64_t v12 = v11 - 1;
      if ((v8 & 1) == 0) {
        goto LABEL_21;
      }
      goto LABEL_17;
    }
    if (v11)
    {
LABEL_20:
      ++v12;
      if ((v8 & 1) == 0) {
        goto LABEL_21;
      }
LABEL_17:
      uint64_t v13 = 1;
      goto LABEL_22;
    }
  }
  if (v8) {
    goto LABEL_17;
  }
LABEL_21:
  uint64_t v13 = 0;
LABEL_22:
  uint64_t v14 = v10 + v13;
  if (__CFADD__(v10, v13)) {
    uint64_t v15 = v12 + 1;
  }
  else {
    uint64_t v15 = v12;
  }
  long long v35 = xmmword_260BFA010;
  v31[0] = -v9;
  v31[1] = 0;
  uint64_t result = _UInt128.multipliedFullWidth(by:)(&v38, &v36, v31);
  uint64_t v17 = *((void *)&v38 + 1);
  BOOL v18 = __CFADD__(v36, v9);
  uint64_t v19 = v37 + v14;
  if (__CFADD__(v37, v14))
  {
    uint64_t v20 = v19 + v18;
    uint64_t v21 = v15 + v38;
    BOOL v22 = __CFADD__(v15, (void)v38);
    if (*((void *)&v38 + 1) == -1)
    {
      if (!v22)
      {
        BOOL v26 = __CFADD__(v21, 1);
        unint64_t v27 = v21 + 1;
        if (v26) {
          goto LABEL_68;
        }
LABEL_71:
        BOOL v26 = v20-- != 0;
        uint64_t v30 = 28;
        if (!v26) {
          uint64_t v30 = 27;
        }
        v27 += v30;
        goto LABEL_74;
      }
      uint64_t v17 = 0;
    }
    else if (v22)
    {
      uint64_t v17 = *((void *)&v38 + 1) + 1;
      goto LABEL_51;
    }
LABEL_53:
    BOOL v26 = __CFADD__(v21, 1);
    unint64_t v27 = v21 + 1;
    char v28 = v26;
    goto LABEL_61;
  }
  BOOL v23 = v19 == -1 && v18;
  uint64_t v20 = v19 + v18;
  uint64_t v21 = v15 + v38;
  BOOL v24 = __CFADD__(v15, (void)v38);
  if (*((void *)&v38 + 1) == -1)
  {
    uint64_t v17 = v24 - 1;
    if (v23) {
      goto LABEL_51;
    }
  }
  else
  {
    if (v24)
    {
      uint64_t v17 = *((void *)&v38 + 1) + 1;
      if (!v23) {
        goto LABEL_56;
      }
LABEL_51:
      uint64_t v25 = 1;
      goto LABEL_57;
    }
    if (v23) {
      goto LABEL_53;
    }
  }
LABEL_56:
  uint64_t v25 = 0;
LABEL_57:
  BOOL v26 = __CFADD__(v21, v25);
  unint64_t v27 = v21 + v25;
  char v28 = v26;
  if (v17 == -1)
  {
    if (v28) {
      goto LABEL_68;
    }
    goto LABEL_71;
  }
LABEL_61:
  if ((v28 & 1) != 0 || v17) {
    goto LABEL_71;
  }
LABEL_68:
  BOOL v29 = v20 == 0;
  if (v27 != -28) {
    BOOL v29 = v27 < 0xFFFFFFFFFFFFFFE4;
  }
  if (!v29) {
    goto LABEL_71;
  }
LABEL_74:
  *a3 = v20;
  a3[1] = v27;
  return result;
}

unint64_t specialized FieldElement.integerValue.getter(uint64_t a1)
{
  uint64_t v2 = -a1;
  unint64_t result = (0xFFFFFFFEFFFFFFFFLL * a1 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  if (__CFADD__(v2, a1))
  {
    if (result > 0xFFFFFFFEFFFFFFFFLL) {
      return 0;
    }
    else {
      ++result;
    }
  }
  return result;
}

{
  unint64_t v1;

  Swift::UInt v1 = (0xCFFE47FFFEAFFFFFLL * a1 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
  if (__CFADD__(-a1, a1)) {
    ++v1;
  }
  if (v1 >= 0xFFFEB00001) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t specialized static FieldElement.elementsToIntegers(_:)(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t result = v9;
    long long v4 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      unint64_t v6 = (0xFFFFFFFEFFFFFFFFLL * v5 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      if (__CFADD__(-v5, v5))
      {
        if (v6 > 0xFFFFFFFEFFFFFFFFLL) {
          unint64_t v6 = 0;
        }
        else {
          ++v6;
        }
      }
      uint64_t v10 = result;
      unint64_t v8 = *(void *)(result + 16);
      unint64_t v7 = *(void *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
        uint64_t result = v10;
      }
      *(void *)(result + 16) = v8 + 1;
      *(void *)(result + 8 * v8 + 32) = v6;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t specialized Prio3PrepareState.init<A>(from:parameter:)@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  outlined init with take of Prio3PrepareStateDecodableParameter<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>?(a3, (uint64_t)&v64, &demangling cache variable for type metadata for Prio3PrepareStateDecodableParameter<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>?);
  if (v65 == 255)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *uint64_t v9 = 0;
    v9[1] = 0;
    return swift_willThrow();
  }
  uint64_t v10 = v64;
  uint64_t v11 = v66;
  uint64_t v12 = v68;
  if (a1) {
    unint64_t v13 = a2 - a1;
  }
  else {
    unint64_t v13 = 0;
  }
  uint64_t v14 = v64;
  if ((v65 & 1) == 0)
  {
    if ((unint64_t)(v64 - 0x1000000000000000) >> 61 != 7)
    {
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    uint64_t v14 = 8 * v64;
  }
  BOOL v15 = __OFADD__(v14, v66);
  uint64_t v16 = v14 + v66;
  if (v15)
  {
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v5 = v65 & 1;
  if (v13 != v16)
  {
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    if (!v5)
    {
      if ((unint64_t)(v10 - 0x1000000000000000) >> 61 != 7)
      {
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      v10 *= 8;
    }
    if (!__OFADD__(v10, v11))
    {
      unint64_t v69 = v10 + v11;
      v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      v39._countAndFlagsBits = 0x203A746F67202CLL;
      v39._object = (void *)0xE700000000000000;
      String.append(_:)(v39);
      unint64_t v69 = v13;
      v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
      swift_allocError();
      void *v41 = 0xD000000000000061;
      v41[1] = 0x8000000260BFF4C0;
      return swift_willThrow();
    }
    goto LABEL_40;
  }
  uint64_t v63 = v4;
  uint64_t v61 = v66;
  unint64_t v17 = v67;
  size_t v18 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  unint64_t v19 = v17;
  a2 = v18;
  uint64_t v20 = v10;
  uint64_t v62 = v5;
  if (!v5)
  {
    if ((unint64_t)(v10 - 0x1000000000000000) >> 61 == 7)
    {
      uint64_t v20 = 8 * v10;
      goto LABEL_14;
    }
    goto LABEL_41;
  }
LABEL_14:
  uint64_t v57 = v12;
  uint64_t v58 = a4;
  unint64_t v60 = v19;
  uint64_t v21 = (2 * *(void *)(v18 + 16)) | 1;
  uint64_t v22 = specialized Collection.prefix(_:)(v20, v18, v18 + 32, 0, v21);
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  unint64_t v28 = v27;
  uint64_t v29 = specialized Collection.dropFirst(_:)(v20, a2, a2 + 32, 0, v21);
  uint64_t v59 = v30;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  swift_retain();
  uint64_t v35 = specialized Share.init<A>(from:parameter:)(v22, v24, v26, v28, v10, v62);
  if (v4) {
    return swift_unknownObjectRelease();
  }
  uint64_t v42 = v35;
  LOBYTE(v5) = v36;
  a2 = v29;
  if (v61 <= 0)
  {
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v50 = 0;
    unint64_t v51 = v60;
    goto LABEL_35;
  }
  uint64_t v62 = v35;
  uint64_t v43 = v34;
  uint64_t v44 = specialized Collection.prefix(_:)(v61, v29, v59, v32, v34);
  uint64_t v56 = v45;
  uint64_t v63 = v46;
  unint64_t v48 = v47;
  specialized Collection.dropFirst(_:)(v61, v29, v59, v32, v43);
  if (v48)
  {
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    swift_unknownObjectRetain();
    uint64_t v52 = swift_dynamicCastClass();
    a2 = v44;
    if (!v52)
    {
      swift_unknownObjectRelease();
      uint64_t v52 = MEMORY[0x263F8EE78];
    }
    uint64_t v53 = *(void *)(v52 + 16);
    swift_release();
    uint64_t v61 = v48;
    uint64_t v42 = v62;
    BOOL v15 = __OFSUB__(v48 >> 1, v63);
    unint64_t v54 = (v48 >> 1) - v63;
    unint64_t v51 = v60;
    if (v15) {
      goto LABEL_45;
    }
    if (v53 != v54) {
      goto LABEL_46;
    }
    uint64_t v55 = swift_dynamicCastClass();
    if (v55)
    {
      uint64_t v50 = v55;
    }
    else
    {
      swift_unknownObjectRelease();
      uint64_t v50 = MEMORY[0x263F8EE78];
    }
    goto LABEL_34;
  }
  swift_unknownObjectRetain();
  while (1)
  {
    a2 = v44;
    specialized _copyCollectionToContiguousArray<A>(_:)(v44, v56, v63, v48);
    uint64_t v50 = v49;
    unint64_t v51 = v60;
    uint64_t v42 = v62;
LABEL_34:
    swift_unknownObjectRelease();
    uint64_t result = swift_unknownObjectRelease();
LABEL_35:
    if ((v51 & 0x8000000000000000) != 0)
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (v51 <= 0xFF) {
      break;
    }
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    uint64_t v44 = a2;
    swift_unknownObjectRelease();
    unint64_t v48 = v61;
  }
  *(void *)uint64_t v58 = v42;
  *(unsigned char *)(v58 + 8) = v5 & 1;
  *(void *)(v58 + 16) = v50;
  *(unsigned char *)(v58 + 24) = v51;
  *(void *)(v58 + 32) = v57;
  return result;
}

uint64_t specialized Prio3PrepareState.encodedLength.getter()
{
  outlined init with take of Prio3PrepareStateDecodableParameter<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>?(v0, (uint64_t)v5, &demangling cache variable for type metadata for Share<Field64>);
  uint64_t result = outlined init with take of Prio3PrepareStateDecodableParameter<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>?((uint64_t)v5, (uint64_t)&v6, &demangling cache variable for type metadata for Share<Field64>);
  unint64_t v2 = *(void *)(v6 + 16);
  if ((v7 & 1) == 0 && v2)
  {
    if (v2 >> 60)
    {
LABEL_10:
      __break(1u);
      return result;
    }
    v2 *= 8;
  }
  outlined init with take of Prio3PrepareStateDecodableParameter<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>?(v0 + 16, (uint64_t)&v4, &demangling cache variable for type metadata for Seed?);
  outlined init with take of Prio3PrepareStateDecodableParameter<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>?((uint64_t)&v4, (uint64_t)&v8, &demangling cache variable for type metadata for Seed?);
  uint64_t v3 = v8;
  if (v8) {
    uint64_t v3 = *(void *)(v8 + 16);
  }
  uint64_t result = v2 + v3;
  if (__OFADD__(v2, v3))
  {
    __break(1u);
    goto LABEL_10;
  }
  return result;
}

uint64_t specialized Prio3PrepareState.encode<A>(into:)(uint64_t *a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = *v2;
  if (v2[1])
  {
    uint64_t v5 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v5);
  }
  else
  {
    uint64_t v6 = *(void *)(v4 + 16);
    if (v6)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v6; ++i)
      {
        uint64_t v8 = *(void *)(v4 + 8 * i + 32);
        specialized FieldElement.encode<A>(into:)(a1, v8);
      }
      swift_bridgeObjectRelease();
    }
  }
  outlined init with take of Prio3PrepareStateDecodableParameter<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>?((uint64_t)(v2 + 2), (uint64_t)&v11, &demangling cache variable for type metadata for Seed?);
  outlined init with take of Prio3PrepareStateDecodableParameter<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>?((uint64_t)&v11, (uint64_t)&v12, &demangling cache variable for type metadata for Seed?);
  uint64_t result = v12;
  if (v12)
  {
    uint64_t v10 = swift_bridgeObjectRetain();
    return specialized Array.append<A>(contentsOf:)(v10);
  }
  return result;
}

uint64_t Prio3<>.chunkLength.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t Prio3<>.init(numOfAggregators:numOfProofs:bitWidth:measurementLength:chunkLength:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  if (a5 < 1)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v11 = result;
  uint64_t result = specialized static SumVectorType.encodedLengthFrom(bitWidth:measurementLength:)(a3, a4);
  if (v6) {
    return result;
  }
  uint64_t v13 = result + a5;
  if (__OFADD__(result, a5)) {
    goto LABEL_10;
  }
  BOOL v14 = __OFSUB__(v13, 1);
  uint64_t v15 = v13 - 1;
  if (v14)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (a5 + 0x4000000000000000 < 0)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  *(void *)&long long v23 = result;
  *((void *)&v23 + 1) = a4;
  uint64_t v24 = 1;
  uint64_t v25 = a5;
  uint64_t v26 = v15 / a5;
  uint64_t v27 = a3;
  uint64_t v28 = 2 * a5;
  int64x2_t v29 = vdupq_n_s64(2uLL);
  uint64_t v30 = 2;
  uint64_t v31 = v15 / a5;
  uint64_t v32 = a5;
  uint64_t result = (uint64_t)specialized Prio3.init(flp:numOfAggregators:numOfProofs:)(&v23, v11, a2, (uint64_t)v22);
  long long v16 = v22[1];
  long long v17 = v22[2];
  long long v18 = v22[3];
  long long v19 = v22[4];
  long long v20 = v22[5];
  long long v21 = v22[6];
  *a6 = v22[0];
  a6[1] = v16;
  a6[2] = v17;
  a6[3] = v18;
  a6[4] = v19;
  a6[5] = v20;
  a6[6] = v21;
  return result;
}

long long *specialized Prio3.init(flp:numOfAggregators:numOfProofs:)@<X0>(long long *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if ((unint64_t)(a2 - 2) >= 0xFE)
  {
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    unint64_t v15 = 0xD000000000000032;
    unint64_t v16 = 0x8000000260BFF900;
    _print_unlocked<A, B>(_:_:)();
    v4._countAndFlagsBits = 3943982;
    v4._object = (void *)0xE300000000000000;
    String.append(_:)(v4);
    _print_unlocked<A, B>(_:_:)();
    v5._countAndFlagsBits = 0;
    v5._object = (void *)0xE000000000000000;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = 0x20746F67202CLL;
    v6._object = (void *)0xE600000000000000;
    String.append(_:)(v6);
    goto LABEL_5;
  }
  if ((unint64_t)(a3 - 256) < 0xFFFFFFFFFFFFFF02)
  {
    _StringGuts.grow(_:)(48);
    swift_bridgeObjectRelease();
    unint64_t v15 = 0xD00000000000003CLL;
    unint64_t v16 = 0x8000000260BFF940;
LABEL_5:
    v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v8 = v15;
    *(void *)(v8 + 8) = v16;
    *(unsigned char *)(v8 + 16) = 1;
    return (long long *)swift_willThrow();
  }
  long long v9 = *result;
  long long v10 = result[1];
  long long v11 = result[2];
  long long v12 = result[3];
  long long v13 = result[4];
  long long v14 = result[5];
  *(void *)a4 = a2;
  *(void *)(a4 + 8) = a3;
  *(_OWORD *)(a4 + 16) = v9;
  *(_OWORD *)(a4 + 32) = v10;
  *(_OWORD *)(a4 + 48) = v11;
  *(_OWORD *)(a4 + 64) = v12;
  *(_OWORD *)(a4 + 80) = v13;
  *(_OWORD *)(a4 + 96) = v14;
  return result;
}

double Prio3<>.init(numOfAggregators:numOfProofs:bitWidth:measurementLength:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, long long *a5@<X8>)
{
  specialized SumVectorType.init(bitWidth:measurementLength:)(a3, a4, (uint64_t)&v16);
  if (!v5)
  {
    v23[2] = v18;
    v23[3] = v19;
    v23[4] = v20;
    v23[5] = v21;
    v23[0] = v16;
    v23[1] = v17;
    specialized Prio3.init(flp:numOfAggregators:numOfProofs:)(v23, a1, a2, (uint64_t)&v16);
    double result = *(double *)&v16;
    long long v10 = v17;
    long long v11 = v18;
    long long v12 = v19;
    long long v13 = v20;
    long long v14 = v21;
    long long v15 = v22;
    *a5 = v16;
    a5[1] = v10;
    a5[2] = v11;
    a5[3] = v12;
    a5[4] = v13;
    a5[5] = v14;
    a5[6] = v15;
  }
  return result;
}

uint64_t specialized SumVectorType.init(bitWidth:measurementLength:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = specialized static SumVectorType.encodedLengthFrom(bitWidth:measurementLength:)(a1, a2);
  if (!v3)
  {
    float v8 = sqrtf((float)result);
    if ((~LODWORD(v8) & 0x7F800000) != 0)
    {
      if (v8 > -9.2234e18)
      {
        if (v8 < 9.2234e18)
        {
          if ((uint64_t)v8 <= 1) {
            uint64_t v9 = 1;
          }
          else {
            uint64_t v9 = (uint64_t)v8;
          }
          uint64_t result = specialized static SumVectorType.encodedLengthFrom(bitWidth:measurementLength:)(a1, a2);
          uint64_t v10 = result + v9;
          if (!__OFADD__(result, v9))
          {
            BOOL v11 = __OFSUB__(v10, 1);
            uint64_t v12 = v10 - 1;
            if (!v11)
            {
              if (v9 + 0x4000000000000000 >= 0)
              {
                uint64_t v13 = v12 / v9;
                *(void *)a3 = result;
                *(void *)(a3 + 8) = a2;
                *(void *)(a3 + 16) = 1;
                *(void *)(a3 + 24) = v9;
                *(void *)(a3 + 32) = v13;
                *(void *)(a3 + 40) = a1;
                *(void *)(a3 + 48) = 2 * v9;
                *(int64x2_t *)(a3 + 56) = vdupq_n_s64(2uLL);
                *(void *)(a3 + 72) = 2;
                *(void *)(a3 + 80) = v13;
                *(void *)(a3 + 88) = v9;
                return result;
              }
LABEL_18:
              __break(1u);
              return result;
            }
LABEL_17:
            __break(1u);
            goto LABEL_18;
          }
LABEL_16:
          __break(1u);
          goto LABEL_17;
        }
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_15;
  }
  return result;
}

uint64_t Prio3<>.shardAndEncode(_:nonce:seedBytes:)(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4, unsigned __int8 *a5, unint64_t a6)
{
  long long v14 = v6[5];
  long long v53 = v6[4];
  long long v54 = v14;
  long long v55 = v6[6];
  long long v15 = v6[1];
  long long v49 = *v6;
  long long v50 = v15;
  long long v16 = v6[3];
  long long v51 = v6[2];
  long long v52 = v16;
  outlined copy of Data._Representation(a3, a4);
  long long v17 = specialized _copyCollectionToContiguousArray<A>(_:)(a3, a4);
  outlined consume of Data._Representation(a3, a4);
  long long v18 = specialized Prio3.shard<A>(_:nonce:seedBytes:)(v44, a1, a2, (uint64_t)v17, a5, a6);
  swift_release();
  if (v7) {
    return a6;
  }
  a6 = specialized VDAFEncodable.encodedData.getter(v44[0]);
  uint64_t v56 = v19;
  swift_bridgeObjectRelease();
  int64_t v20 = *((void *)v18 + 2);
  if (!v20)
  {
    swift_bridgeObjectRelease();
    return a6;
  }
  unint64_t v42 = a6;
  uint64_t v48 = MEMORY[0x263F8EE78];
  uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
  long long v22 = v18 + 64;
  while (1)
  {
    uint64_t v23 = *(v22 - 4);
    char v24 = *((unsigned char *)v22 - 24);
    uint64_t v25 = *(v22 - 2);
    char v26 = *((unsigned char *)v22 - 8);
    uint64_t v27 = *v22;
    unint64_t v28 = *(void *)(v23 + 16);
    if ((v24 & 1) == 0 && v28)
    {
      if (v28 >> 60) {
        goto LABEL_42;
      }
      v28 *= 8;
    }
    unint64_t v29 = *(void *)(v25 + 16);
    if ((*(unsigned char *)(v22 - 1) & 1) == 0 && v29)
    {
      if (v29 >> 60) {
        goto LABEL_43;
      }
      v29 *= 8;
    }
    BOOL v30 = __OFADD__(v28, v29);
    uint64_t v31 = v28 + v29;
    if (v30) {
      break;
    }
    if (v27)
    {
      uint64_t v32 = *(void *)(v27 + 16);
      uint64_t v33 = v31 + v32;
      if (__OFADD__(v31, v32)) {
        goto LABEL_41;
      }
    }
    else
    {
      uint64_t v33 = v31;
    }
    if (v33)
    {
      if (v33 <= 14)
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        long long v47 = 0uLL;
        if (v24) {
          goto LABEL_24;
        }
      }
      else
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v34 = __DataStorage.init(capacity:)();
        if ((unint64_t)v33 >= 0x7FFFFFFF)
        {
          type metadata accessor for Data.RangeReference();
          uint64_t v41 = swift_allocObject();
          *(void *)(v41 + 16) = 0;
          *(void *)(v41 + 24) = 0;
          *(void *)&long long v47 = v41;
          *((void *)&v47 + 1) = v34 | 0x8000000000000000;
          if (v24)
          {
LABEL_24:
            uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
            uint64_t v45 = v35;
            unint64_t v46 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]();
            v44[0] = v23;
            __swift_project_boxed_opaque_existential_1(v44, v35);
            swift_bridgeObjectRetain_n();
            Data._Representation.append(contentsOf:)();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
            swift_bridgeObjectRelease();
            if (v26) {
              goto LABEL_29;
            }
            goto LABEL_25;
          }
        }
        else
        {
          *(void *)&long long v47 = 0;
          *((void *)&v47 + 1) = v34 | 0x4000000000000000;
          if (v24) {
            goto LABEL_24;
          }
        }
      }
    }
    else
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      *(void *)&long long v47 = 0;
      *((void *)&v47 + 1) = 0xC000000000000000;
      if (v24) {
        goto LABEL_24;
      }
    }
    specialized Collection<>.encode<A>(into:)((uint64_t)&v47, v23);
    if (v26)
    {
LABEL_29:
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
      uint64_t v45 = v37;
      unint64_t v46 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]();
      v44[0] = v25;
      __swift_project_boxed_opaque_existential_1(v44, v37);
      swift_bridgeObjectRetain_n();
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
      swift_bridgeObjectRelease();
      if (!v27) {
        goto LABEL_30;
      }
LABEL_26:
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
      uint64_t v45 = v36;
      unint64_t v46 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]();
      v44[0] = v27;
      __swift_project_boxed_opaque_existential_1(v44, v36);
      swift_bridgeObjectRetain_n();
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
      goto LABEL_30;
    }
LABEL_25:
    specialized Collection<>.encode<A>(into:)((uint64_t)&v47, v25);
    if (v27) {
      goto LABEL_26;
    }
LABEL_30:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    long long v43 = v47;
    uint64_t v38 = v48;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v38 + 16) + 1, 1);
      uint64_t v38 = v48;
    }
    unint64_t v40 = *(void *)(v38 + 16);
    unint64_t v39 = *(void *)(v38 + 24);
    if (v40 >= v39 >> 1)
    {
      uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v39 > 1), v40 + 1, 1);
      uint64_t v38 = v48;
    }
    v22 += 5;
    *(void *)(v38 + 16) = v40 + 1;
    *(_OWORD *)(v38 + 16 * v40 + 32) = v43;
    if (!--v20)
    {
      swift_bridgeObjectRelease();
      return v42;
    }
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}