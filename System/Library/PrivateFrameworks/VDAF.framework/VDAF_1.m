char *specialized Prio3.shard<A>(_:nonce:seedBytes:)(uint64_t *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, unsigned __int8 *a5, unint64_t a6)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  long long v30;
  long long v31;
  long long v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t *v43;
  int64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  Swift::String v48;
  Swift::String v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  void *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  Swift::String v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  BOOL v97;
  unsigned __int8 *v98;
  uint64_t v99;
  unsigned __int8 *v100;
  uint64_t v101;
  unsigned __int8 *v102;
  uint64_t *v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t inited;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  int64_t v117;
  int64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unsigned __int8 *v124;
  char *v125;
  unint64_t v126;
  unsigned __int8 *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  unsigned __int8 *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  Swift::String v151;
  Swift::String v152;
  uint64_t v153;
  void (**v154)(char *, uint64_t);
  void (**v155)(char *, uint64_t);
  void (**v156)(char *, uint64_t, uint64_t);
  long long v157;
  unsigned __int8 *v158;
  uint64_t *v159;
  uint64_t v160;
  long long v161;
  void *v162;
  unsigned __int8 *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unsigned __int8 *v167;
  unsigned __int8 *v168;
  unint64_t v169;
  void *v170;
  uint64_t *v171;
  char *v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  unint64_t v176[8];
  unint64_t v177;
  char *v178;
  unint64_t v179;
  unint64_t v180;
  long long v181;
  long long v182;
  long long v183;
  long long v184;
  long long v185;
  long long v186;
  unsigned __int8 *v187;

  v7 = v6;
  v175 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HMAC<SHA256>);
  v166 = *(void *)(v175 - 8);
  MEMORY[0x270FA5388](v175, v14);
  v174 = (char *)&v153 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA256>);
  v165 = *(void *)(v173 - 8);
  MEMORY[0x270FA5388](v173, v16);
  v172 = (char *)&v153 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(void *)(a4 + 16);
  if (v18 == 16)
  {
    v187 = a2;
    v19 = 0;
    switch(a6 >> 62)
    {
      case 1uLL:
        LODWORD(v19) = HIDWORD(a5) - a5;
        if (__OFSUB__(HIDWORD(a5), a5)) {
          goto LABEL_144;
        }
        v19 = (int)v19;
        goto LABEL_8;
      case 2uLL:
        v27 = *((void *)a5 + 2);
        v26 = *((void *)a5 + 3);
        v28 = __OFSUB__(v26, v27);
        v19 = v26 - v27;
        if (!v28) {
          goto LABEL_8;
        }
        goto LABEL_145;
      case 3uLL:
        goto LABEL_8;
      default:
        v19 = BYTE6(a6);
LABEL_8:
        v168 = a3;
        v29 = *v171;
        v30 = *((_OWORD *)v171 + 4);
        v183 = *((_OWORD *)v171 + 3);
        v184 = v30;
        v31 = *((_OWORD *)v171 + 6);
        v185 = *((_OWORD *)v171 + 5);
        v186 = v31;
        v32 = *((_OWORD *)v171 + 2);
        v181 = *((_OWORD *)v171 + 1);
        v182 = v32;
        if (__OFSUB__(v29, 1)) {
          goto LABEL_128;
        }
        if (v29 + 0x3FFFFFFFFFFFFFFFLL < 0) {
          goto LABEL_129;
        }
        v33 = v182;
        v34 = (2 * (v29 - 1)) | 1;
        if ((uint64_t)v182 <= 0) {
          v35 = 0;
        }
        else {
          v35 = v29;
        }
        v28 = __OFADD__(v34, v35);
        v36 = v34 + v35;
        if (v28) {
          goto LABEL_130;
        }
        if ((unint64_t)(v36 - 0x400000000000000) >> 59 != 31) {
          goto LABEL_131;
        }
        v159 = a1;
        v37 = 32 * v36;
        if (v19 == 32 * v36)
        {
          *(void *)&v157 = v29;
          v158 = (unsigned __int8 *)a4;
          v167 = (unsigned __int8 *)(v29 - 1);
          v38 = specialized Prio3.splitSeedBytes<A>(_:)((uint64_t)a5, a6);
          v160 = v39;
          v40 = v38[2];
          a5 = (unsigned __int8 *)MEMORY[0x263F8EE78];
          v170 = v38;
          v162 = (void *)v41;
          if (v40)
          {
            v42 = v38;
            v163 = v6;
            v164 = v33;
            v179 = MEMORY[0x263F8EE78];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40, 0);
            a5 = (unsigned __int8 *)v179;
            v43 = v42 + 4;
            v44 = v40;
            do
            {
              v45 = *v43;
              v179 = (unint64_t)a5;
              v47 = *((void *)a5 + 2);
              v46 = *((void *)a5 + 3);
              swift_bridgeObjectRetain();
              if (v47 >= v46 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v46 > 1), v47 + 1, 1);
                a5 = (unsigned __int8 *)v179;
              }
              *((void *)a5 + 2) = v47 + 1;
              *(void *)&a5[8 * v47 + 32] = v45;
              v43 += 3;
              --v44;
            }
            while (v44);
            v179 = MEMORY[0x263F8EE78];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40, 0);
            v51 = v179;
            v52 = v170 + 5;
            do
            {
              v53 = *v52;
              v179 = v51;
              v55 = *(void *)(v51 + 16);
              v54 = *(void *)(v51 + 24);
              swift_bridgeObjectRetain();
              if (v55 >= v54 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v54 > 1), v55 + 1, 1);
                v51 = v179;
              }
              *(void *)(v51 + 16) = v55 + 1;
              *(void *)(v51 + 8 * v55 + 32) = v53;
              v52 += 3;
              --v40;
            }
            while (v40);
            v169 = v51;
            v7 = v163;
            v33 = v164;
          }
          else
          {
            v169 = MEMORY[0x263F8EE78];
          }
          v23 = (char *)&v181;
          v56 = specialized SumVectorType.encode(measurement:)(v187, v168);
          v187 = v7;
          if (v7)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_31:
            swift_bridgeObjectRelease();
            return v23;
          }
          v57 = v56;
          v58 = v170;
          *(void *)&v161 = v56;
          if (v33 <= 0)
          {
            v73 = v167;
            if (((unint64_t)v167 & 0x8000000000000000) != 0) {
              goto LABEL_151;
            }
            swift_bridgeObjectRetain();
            if (v73)
            {
              v74 = (unsigned __int8 *)v57;
              if (swift_isUniquelyReferenced_nonNull_native()) {
                goto LABEL_53;
              }
              goto LABEL_153;
            }
            swift_bridgeObjectRelease();
            v105 = 0;
            v102 = (unsigned __int8 *)v57;
            v91 = (unsigned __int8 *)v57;
            v103 = v171;
          }
          else
          {
            v59 = v160;
            if (!v160)
            {
              v179 = 0;
              v180 = 0xE000000000000000;
              _StringGuts.grow(_:)(58);
              v151._object = (void *)0x8000000260BFF470;
              v151._countAndFlagsBits = 0xD000000000000010;
              String.append(_:)(v151);
              v152._countAndFlagsBits = 0xD000000000000038;
              v152._object = (void *)0x8000000260BFF870;
              String.append(_:)(v152);
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              JUMPOUT(0x260BADA70);
            }
            v164 = v33;
            v60 = v170[2];
            if (v60)
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v23 = (char *)MEMORY[0x263F8EE78];
              v61 = 6;
              do
              {
                v62 = v58[v61];
                if (v62)
                {
                  swift_bridgeObjectRetain();
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v23 + 2) + 1, 1, v23);
                  }
                  v64 = *((void *)v23 + 2);
                  v63 = *((void *)v23 + 3);
                  v58 = v170;
                  if (v64 >= v63 >> 1)
                  {
                    v65 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v63 > 1), v64 + 1, 1, v23);
                    v58 = v170;
                    v23 = v65;
                  }
                  *((void *)v23 + 2) = v64 + 1;
                  *(void *)&v23[8 * v64 + 32] = v62;
                }
                v61 += 3;
                --v60;
              }
              while (v60);
              swift_bridgeObjectRelease();
              v72 = v160;
            }
            else
            {
LABEL_69:
              v72 = v59;
              swift_bridgeObjectRetain();
              v23 = (char *)MEMORY[0x263F8EE78];
            }
            v98 = v187;
            v99 = specialized static JointRandomness.jointRandPartsAndLeaderShare(commitment:leaderJointRandBlind:helperJointRandBlinds:helperMeasurementSeeds:numOfAggregators:nonce:)(v57, v72, (unint64_t)v23, (uint64_t)a5, v157, (uint64_t)v158);
            v187 = v98;
            if (v98)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              return v23;
            }
            v101 = v99;
            v91 = v100;
            v102 = (unsigned __int8 *)v57;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v103 = v171;
            v104 = v171[1];
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VerificationJointRandomness<Prio3<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>, Field64>);
            v105 = (void *)swift_allocObject();
            v106 = v164;
            v105[4] = 0;
            v105[5] = v106;
            v105[6] = v104;
            v105[2] = v101;
            v105[3] = 0;
          }
          while (1)
          {
            v107 = specialized static VDAFProtocol.domainSeparationTag(usage:)(3u);
            v158 = (unsigned __int8 *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
            inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = xmmword_260BF9FF0;
            v109 = v103[1];
            if ((v109 & 0x8000000000000000) != 0) {
              goto LABEL_148;
            }
            if (v109 <= 0xFF) {
              break;
            }
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            v74 = (unsigned __int8 *)specialized _ArrayBuffer._consumeAndCreateNew()(v161);
LABEL_53:
            v75 = 0;
            v158 = a5 + 32;
            v155 = (void (**)(char *, uint64_t))(v166 + 8);
            v156 = (void (**)(char *, uint64_t, uint64_t))(v166 + 16);
            v154 = (void (**)(char *, uint64_t))(v165 + 8);
            v57 = (char *)(v74 + 32);
            v157 = xmmword_260BF9FF0;
            v153 = MEMORY[0x263F8EE60] + 8;
            v76 = v167;
            v168 = v74;
            do
            {
              if (v75 == v76) {
                goto LABEL_134;
              }
              if (v75 == (unsigned __int8 *)255) {
                goto LABEL_135;
              }
              if ((unint64_t)v75 >= *((void *)a5 + 2)) {
                goto LABEL_136;
              }
              v77 = v75 + 1;
              v78 = *(void *)&v158[8 * (void)v75];
              swift_bridgeObjectRetain();
              v79 = specialized static VDAFProtocol.domainSeparationTag(usage:)(0);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
              v80 = swift_initStackObject();
              *(_OWORD *)(v80 + 16) = v157;
              *(unsigned char *)(v80 + 32) = (_BYTE)v77;
              if (*(void *)(v78 + 16) != 32) {
                goto LABEL_137;
              }
              v81 = v80;
              type metadata accessor for XofHmacSha256Aes128(0);
              swift_allocObject();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v82 = XofHmacSha256Aes128.init(seedBytes:domainSeparationTag:binder:)(v78, v79, v81);
              if (*(void *)(v82 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream)) {
                goto LABEL_138;
              }
              v83 = v82;
              v163 = v77;
              v84 = v82 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_hmac;
              swift_beginAccess();
              v85 = v174;
              v86 = v84;
              v87 = v175;
              (*v156)(v174, v86, v175);
              v164 = v79;
              v88 = v172;
              HMAC.finalize()();
              (*v155)(v85, v87);
              v89 = v173;
              v90 = v187;
              HashedAuthenticationCode.withUnsafeBytes<A>(_:)();
              v187 = v90;
              (*v154)(v88, v89);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v91 = v168;
              v92 = *((void *)v168 + 2);
              if (v92)
              {
                v93 = 0;
                while (1)
                {
                  v59 = specialized static FieldElement.randomElement<A>(using:)(v83, v176);
                  if (v93 >= *((void *)v91 + 2)) {
                    break;
                  }
                  v94 = *(void *)&v57[8 * v93];
                  v95 = v94 - v176[0];
                  if (v94 < v176[0])
                  {
                    v96 = 0xFFFFFFFF00000001 - v176[0];
                    if (v176[0] > 0xFFFFFFFF00000001) {
                      goto LABEL_125;
                    }
                    v97 = __CFADD__(v94, v96);
                    v95 = v94 + v96;
                    if (v97)
                    {
                      __break(1u);
                      goto LABEL_69;
                    }
                  }
                  *(void *)&v57[8 * v93++] = v95;
                  if (v92 == v93) {
                    goto LABEL_54;
                  }
                }
                __break(1u);
                goto LABEL_124;
              }
LABEL_54:
              swift_release();
              v75 = v163;
              v76 = v167;
            }
            while (v163 != v167);
            swift_bridgeObjectRelease();
            v105 = 0;
            v103 = v171;
            v102 = (unsigned __int8 *)v161;
          }
          a5 = v102;
          *(unsigned char *)(inited + 32) = v109;
          v153 = specialized static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)((uint64_t)v162, v107, inited);
          swift_bridgeObjectRelease();
          swift_setDeallocating();
          swift_bridgeObjectRelease();
          v110 = specialized FullyLinearProof.proofLength.getter();
          if ((unsigned __int128)((uint64_t)v109 * (__int128)v110) >> 64 != (uint64_t)(v109 * v110) >> 63) {
            goto LABEL_150;
          }
          v178 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (v109 * v110) & ~((uint64_t)(v109 * v110) >> 63), 0, MEMORY[0x263F8EE78]);
          v111 = v169;
          v168 = v91;
          v162 = v105;
          v163 = (unsigned __int8 *)v109;
          v112 = v109;
          if (v109)
          {
            v113 = 0;
            while (v113 != v112)
            {
              if (v105)
              {
                v114 = v105[5];
                swift_retain();
                v115 = specialized VerificationJointRandomness.xof.getter();
                v116 = specialized static FieldElement.randomVector<A>(count:using:)(v114, v115);
                swift_release();
                swift_release();
              }
              else
              {
                v116 = MEMORY[0x263F8EE78];
              }
              v117 = specialized FullyLinearProof.proveRandLength.getter();
              if (v117 < 0) {
                goto LABEL_133;
              }
              v118 = v117;
              v164 = v116;
              if (v117)
              {
                v176[0] = MEMORY[0x263F8EE78];
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v117, 0);
                v119 = v176[0];
                v120 = v153;
                do
                {
                  specialized static FieldElement.randomElement<A>(using:)(v120, &v177);
                  v121 = v177;
                  v176[0] = v119;
                  v123 = *(void *)(v119 + 16);
                  v122 = *(void *)(v119 + 24);
                  if (v123 >= v122 >> 1)
                  {
                    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v122 > 1), v123 + 1, 1);
                    v120 = v153;
                    v119 = v176[0];
                  }
                  *(void *)(v119 + 16) = v123 + 1;
                  *(void *)(v119 + 8 * v123 + 32) = v121;
                  --v118;
                }
                while (v118);
                v91 = v168;
                v105 = v162;
                v112 = (unint64_t)v163;
              }
              else
              {
                v119 = MEMORY[0x263F8EE78];
              }
              a5 = (unsigned __int8 *)v161;
              v124 = v187;
              specialized FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:)(&v178, v161, v119, v164);
              v187 = v124;
              if (v124)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v23 = v178;
                swift_release();
                swift_bridgeObjectRelease();
                goto LABEL_31;
              }
              ++v113;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v111 = v169;
              if (v113 == v112) {
                goto LABEL_94;
              }
            }
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
          }
          else
          {
LABEL_94:
            swift_bridgeObjectRelease();
            if (((unint64_t)v167 & 0x8000000000000000) != 0) {
              goto LABEL_152;
            }
            a5 = v187;
            if (!v167)
            {
LABEL_118:
              swift_bridgeObjectRelease();
              if (v105) {
                v148 = swift_bridgeObjectRetain();
              }
              else {
                v148 = 0;
              }
              v149 = (uint64_t)v170;
              *v159 = v148;
              v150 = v178;
              swift_bridgeObjectRetain();
              v23 = (char *)specialized Prio3.inputSharesFrom(leaderMeasurementShare:leaderProofShare:leaderJointBlind:helperShares:)((uint64_t)v91, (uint64_t)v150, v160, v149);
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
              swift_release();
              swift_bridgeObjectRelease();
              return v23;
            }
            v125 = v178;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              v125 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v125);
            }
            v126 = 0;
            v178 = v125;
            v164 = v111 + 32;
            v156 = (void (**)(char *, uint64_t, uint64_t))(v166 + 8);
            *(void *)&v157 = v166 + 16;
            v155 = (void (**)(char *, uint64_t))(v165 + 8);
            v161 = xmmword_260BF9FD0;
            v154 = (void (**)(char *, uint64_t))(MEMORY[0x263F8EE60] + 8);
            v127 = v167;
            while ((unsigned __int8 *)v126 != v127)
            {
              if (v126 == 255) {
                goto LABEL_140;
              }
              if (v126 >= *(void *)(v111 + 16)) {
                goto LABEL_141;
              }
              v128 = v126 + 1;
              v129 = *(void *)(v164 + 8 * v126);
              swift_bridgeObjectRetain();
              v130 = specialized static VDAFProtocol.domainSeparationTag(usage:)(1u);
              v131 = swift_initStackObject();
              *(_OWORD *)(v131 + 16) = v161;
              *(unsigned char *)(v131 + 32) = v112;
              *(unsigned char *)(v131 + 33) = v128;
              if (*(void *)(v129 + 16) != 32) {
                goto LABEL_142;
              }
              v132 = v131;
              type metadata accessor for XofHmacSha256Aes128(0);
              swift_allocObject();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v166 = v130;
              v133 = XofHmacSha256Aes128.init(seedBytes:domainSeparationTag:binder:)(v129, v130, v132);
              if (*(void *)(v133 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream)) {
                goto LABEL_143;
              }
              v134 = v133;
              v165 = v128;
              v135 = v133 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_hmac;
              swift_beginAccess();
              v136 = v174;
              v137 = v135;
              v138 = v175;
              (*(void (**)(char *, uint64_t, uint64_t))v157)(v174, v137, v175);
              v139 = a5;
              v140 = v172;
              HMAC.finalize()();
              ((void (*)(char *, uint64_t))*v156)(v136, v138);
              v141 = v173;
              HashedAuthenticationCode.withUnsafeBytes<A>(_:)();
              v187 = v139;
              (*v155)(v140, v141);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v142 = *((void *)v125 + 2);
              if (v142)
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  v125 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v125);
                }
                a5 = v187;
                LOBYTE(v112) = (_BYTE)v163;
                v143 = 0;
                while (1)
                {
                  specialized static FieldElement.randomElement<A>(using:)(v134, &v177);
                  if (v143 >= *((void *)v125 + 2)) {
                    break;
                  }
                  v144 = &v125[8 * v143];
                  v145 = *((void *)v144 + 4);
                  v146 = v145 - v177;
                  if (v145 < v177)
                  {
                    v147 = 0xFFFFFFFF00000001 - v177;
                    if (v177 > 0xFFFFFFFF00000001) {
                      goto LABEL_126;
                    }
                    v97 = __CFADD__(v145, v147);
                    v146 = v145 + v147;
                    if (v97) {
                      goto LABEL_127;
                    }
                  }
                  ++v143;
                  *((void *)v144 + 4) = v146;
                  if (v142 == v143)
                  {
                    swift_release();
                    v178 = v125;
                    goto LABEL_100;
                  }
                }
LABEL_124:
                __break(1u);
LABEL_125:
                __break(1u);
LABEL_126:
                __break(1u);
LABEL_127:
                __break(1u);
LABEL_128:
                __break(1u);
LABEL_129:
                __break(1u);
LABEL_130:
                __break(1u);
LABEL_131:
                __break(1u);
                goto LABEL_132;
              }
              swift_release();
              a5 = v187;
              LOBYTE(v112) = (_BYTE)v163;
LABEL_100:
              v126 = v165;
              v127 = v167;
              v91 = v168;
              v111 = v169;
              v105 = v162;
              if ((unsigned __int8 *)v165 == v167) {
                goto LABEL_118;
              }
            }
          }
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
          goto LABEL_149;
        }
        v179 = 0;
        v180 = 0xE000000000000000;
        _StringGuts.grow(_:)(39);
        swift_bridgeObjectRelease();
        v179 = 0xD00000000000002BLL;
        v180 = 0x8000000260BFF830;
        v176[0] = v37;
        v48._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v48);
        swift_bridgeObjectRelease();
        v49._countAndFlagsBits = 0x3D746F67202CLL;
        v49._object = (void *)0xE600000000000000;
        String.append(_:)(v49);
        v50 = 0;
        switch(a6 >> 62)
        {
          case 1uLL:
            LODWORD(v50) = HIDWORD(a5) - a5;
            if (__OFSUB__(HIDWORD(a5), a5)) {
              goto LABEL_146;
            }
            v50 = (int)v50;
            break;
          case 2uLL:
            v67 = *((void *)a5 + 2);
            v66 = *((void *)a5 + 3);
            v28 = __OFSUB__(v66, v67);
            v50 = v66 - v67;
            if (v28) {
              goto LABEL_147;
            }
            break;
          case 3uLL:
            break;
          default:
            v50 = BYTE6(a6);
            break;
        }
        v176[0] = v50;
        v68._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v68);
        swift_bridgeObjectRelease();
        v23 = (char *)v179;
        v69 = v180;
        lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
        swift_allocError();
        *(void *)v70 = v23;
        *(void *)(v70 + 8) = v69;
        *(unsigned char *)(v70 + 16) = 0;
        break;
    }
  }
  else
  {
    v179 = 0;
    v180 = 0xE000000000000000;
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    v179 = 0xD000000000000030;
    v180 = 0x8000000260BFF7F0;
    v176[0] = 16;
    v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 0x3D746F67202CLL;
    v21._object = (void *)0xE600000000000000;
    String.append(_:)(v21);
    v176[0] = v18;
    v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23 = (char *)v179;
    v24 = v180;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)v25 = v23;
    *(void *)(v25 + 8) = v24;
    *(unsigned char *)(v25 + 16) = 1;
  }
  swift_willThrow();
  return v23;
}

uint64_t Prio3<>.shardAndEncodeIntoBytes(_:nonce:seedBytes:)(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4, unsigned __int8 *a5, unint64_t a6)
{
  outlined copy of Data._Representation(a3, a4);
  v13 = specialized _copyCollectionToContiguousArray<A>(_:)(a3, a4);
  outlined consume of Data._Representation(a3, a4);
  v14 = specialized Prio3.shard<A>(_:nonce:seedBytes:)(&v99, a1, a2, (uint64_t)v13, a5, a6);
  uint64_t result = swift_release();
  if (v6) {
    return result;
  }
  uint64_t v16 = v99;
  uint64_t v17 = specialized Prio3PublicShare.encodedLength.getter(v99);
  v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17 & ~(v17 >> 63), 0, MEMORY[0x263F8EE78]);
  if (!v16 || (uint64_t v18 = *(void *)(v16 + 16)) == 0)
  {
    swift_bridgeObjectRelease();
    int64_t v30 = *((void *)v14 + 2);
    if (!v30) {
      goto LABEL_121;
    }
    goto LABEL_23;
  }
  v19 = v14;
  uint64_t result = swift_bridgeObjectRetain();
  for (uint64_t i = 0; i != v18; ++i)
  {
    uint64_t v21 = *(void *)(v16 + 8 * i + 32);
    int64_t v22 = *(void *)(v21 + 16);
    int64_t v23 = *((void *)v97 + 2);
    int64_t v24 = v23 + v22;
    if (__OFADD__(v23, v22)) {
      goto LABEL_125;
    }
    unint64_t v25 = *((void *)v97 + 3);
    swift_bridgeObjectRetain();
    if (v24 > (uint64_t)(v25 >> 1))
    {
      if (v23 <= v24) {
        int64_t v29 = v23 + v22;
      }
      else {
        int64_t v29 = v23;
      }
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)1, v29, 1, v97);
      int64_t v23 = *(void *)(result + 16);
      v97 = (char *)result;
      if (!*(void *)(v21 + 16))
      {
LABEL_5:
        if (v22) {
          goto LABEL_126;
        }
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t result = (uint64_t)v97;
      if (!v22) {
        goto LABEL_5;
      }
    }
    if ((*(void *)(result + 24) >> 1) - v23 < v22) {
      goto LABEL_131;
    }
    uint64_t result = (uint64_t)memcpy((void *)(result + v23 + 32), (const void *)(v21 + 32), v22);
    if (v22)
    {
      uint64_t v26 = *((void *)v97 + 2);
      BOOL v27 = __OFADD__(v26, v22);
      uint64_t v28 = v26 + v22;
      if (v27) {
        goto LABEL_136;
      }
      *((void *)v97 + 2) = v28;
    }
LABEL_6:
    uint64_t result = swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease_n();
  v14 = v19;
  int64_t v30 = *((void *)v19 + 2);
  if (!v30)
  {
LABEL_121:
    swift_bridgeObjectRelease();
    return (uint64_t)v97;
  }
LABEL_23:
  uint64_t v99 = MEMORY[0x263F8EE78];
  uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30, 0);
  uint64_t v31 = 0;
  uint64_t v32 = v99;
  int64_t v92 = v30;
  v93 = v14 + 32;
  while (2)
  {
    uint64_t v96 = v32;
    v33 = &v93[40 * v31];
    uint64_t v34 = *(void *)v33;
    char v35 = v33[8];
    uint64_t v36 = *((void *)v33 + 2);
    char v37 = v33[24];
    uint64_t v38 = *((void *)v33 + 4);
    unint64_t v39 = *(void *)(*(void *)v33 + 16);
    if ((v35 & 1) == 0 && v39)
    {
      if (v39 >> 60) {
        goto LABEL_132;
      }
      v39 *= 8;
    }
    unint64_t v40 = *(void *)(v36 + 16);
    if ((v37 & 1) == 0 && v40)
    {
      if (v40 >> 60) {
        goto LABEL_133;
      }
      v40 *= 8;
    }
    BOOL v27 = __OFADD__(v39, v40);
    uint64_t v41 = v39 + v40;
    if (!v27)
    {
      if (v38)
      {
        uint64_t v42 = *(void *)(v38 + 16);
        BOOL v27 = __OFADD__(v41, v42);
        v41 += v42;
        if (v27) {
          goto LABEL_124;
        }
      }
      uint64_t v95 = v31;
      int64_t v43 = v41 & ~(v41 >> 63);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v94 = v38;
      swift_bridgeObjectRetain_n();
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43, 0, MEMORY[0x263F8EE78]);
      v44 = (char *)result;
      v98 = (char *)result;
      int64_t v45 = *(void *)(v34 + 16);
      if (v35)
      {
        char v46 = v37;
        int64_t v47 = *(void *)(result + 16);
        int64_t v48 = v47 + v45;
        if (__OFADD__(v47, v45)) {
          goto LABEL_127;
        }
        uint64_t v49 = *(void *)(result + 24) >> 1;
        uint64_t result = swift_bridgeObjectRetain();
        if (v49 < v48)
        {
          if (v47 <= v48) {
            int64_t v72 = v47 + v45;
          }
          else {
            int64_t v72 = v47;
          }
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)1, v72, 1, v44);
          v44 = (char *)result;
          int64_t v47 = *(void *)(result + 16);
          uint64_t v49 = *(void *)(result + 24) >> 1;
          char v50 = v46;
          if (*(void *)(v34 + 16)) {
            goto LABEL_41;
          }
        }
        else
        {
          char v50 = v46;
          if (v45)
          {
LABEL_41:
            if (v49 - v47 < v45) {
              goto LABEL_134;
            }
            uint64_t result = (uint64_t)memcpy(&v44[v47 + 32], (const void *)(v34 + 32), v45);
            if (v45)
            {
              uint64_t v51 = *((void *)v44 + 2);
              BOOL v27 = __OFADD__(v51, v45);
              uint64_t v52 = v51 + v45;
              if (v27) {
                goto LABEL_137;
              }
              *((void *)v44 + 2) = v52;
            }
            goto LABEL_83;
          }
        }
        if (v45) {
          goto LABEL_129;
        }
LABEL_83:
        uint64_t result = swift_bridgeObjectRelease();
        v98 = v44;
        int64_t v66 = *(void *)(v36 + 16);
        if ((v50 & 1) == 0)
        {
LABEL_84:
          if (v66)
          {
            swift_bridgeObjectRetain();
            for (uint64_t j = 0; j != v66; ++j)
            {
              uint64_t v74 = *(void *)(v36 + 8 * j + 32);
              unint64_t v75 = (0xFFFFFFFEFFFFFFFFLL * v74 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
              if (__CFADD__(-v74, v74))
              {
                if (v75 > 0xFFFFFFFEFFFFFFFFLL) {
                  unint64_t v75 = 0;
                }
                else {
                  ++v75;
                }
              }
              unint64_t v77 = *((void *)v44 + 2);
              unint64_t v76 = *((void *)v44 + 3);
              int64_t v78 = v76 >> 1;
              unint64_t v79 = v77 + 1;
              if (v76 >> 1 <= v77)
              {
                v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v76 > 1), v77 + 1, 1, v44);
                unint64_t v76 = *((void *)v44 + 3);
                int64_t v78 = v76 >> 1;
              }
              *((void *)v44 + 2) = v79;
              v44[v77 + 32] = v75;
              unint64_t v80 = v77 + 2;
              if (v78 < (uint64_t)(v77 + 2))
              {
                v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v76 > 1), v77 + 2, 1, v44);
                unint64_t v76 = *((void *)v44 + 3);
                int64_t v78 = v76 >> 1;
              }
              *((void *)v44 + 2) = v80;
              v44[v79 + 32] = BYTE1(v75);
              unint64_t v81 = v77 + 3;
              if (v78 < (uint64_t)(v77 + 3))
              {
                v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v76 > 1), v77 + 3, 1, v44);
                unint64_t v76 = *((void *)v44 + 3);
                int64_t v78 = v76 >> 1;
              }
              *((void *)v44 + 2) = v81;
              v44[v80 + 32] = BYTE2(v75);
              unint64_t v82 = v77 + 4;
              if (v78 < (uint64_t)(v77 + 4))
              {
                v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v76 > 1), v77 + 4, 1, v44);
                unint64_t v76 = *((void *)v44 + 3);
                int64_t v78 = v76 >> 1;
              }
              *((void *)v44 + 2) = v82;
              v44[v81 + 32] = BYTE3(v75);
              unint64_t v83 = v77 + 5;
              if (v78 < (uint64_t)(v77 + 5))
              {
                v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v76 > 1), v77 + 5, 1, v44);
                unint64_t v76 = *((void *)v44 + 3);
                int64_t v78 = v76 >> 1;
              }
              *((void *)v44 + 2) = v83;
              v44[v82 + 32] = BYTE4(v75);
              unint64_t v84 = v77 + 6;
              if (v78 < (uint64_t)(v77 + 6))
              {
                v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v76 > 1), v77 + 6, 1, v44);
                unint64_t v76 = *((void *)v44 + 3);
                int64_t v78 = v76 >> 1;
              }
              *((void *)v44 + 2) = v84;
              v44[v83 + 32] = BYTE5(v75);
              unint64_t v85 = v77 + 7;
              if (v78 < (uint64_t)(v77 + 7))
              {
                v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v76 > 1), v77 + 7, 1, v44);
                unint64_t v76 = *((void *)v44 + 3);
                int64_t v78 = v76 >> 1;
              }
              *((void *)v44 + 2) = v85;
              v44[v84 + 32] = BYTE6(v75);
              if (v78 < (uint64_t)(v77 + 8)) {
                v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v76 > 1), v77 + 8, 1, v44);
              }
              *((void *)v44 + 2) = v77 + 8;
              v44[v85 + 32] = HIBYTE(v75);
            }
            goto LABEL_114;
          }
LABEL_115:
          if (v94)
          {
            uint64_t v87 = swift_bridgeObjectRetain();
            specialized Array.append<A>(contentsOf:)(v87);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            uint64_t result = swift_bridgeObjectRelease_n();
            v44 = v98;
          }
          else
          {
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            uint64_t result = swift_bridgeObjectRelease_n();
          }
          uint64_t v88 = v95;
          uint64_t v32 = v96;
          uint64_t v99 = v96;
          unint64_t v90 = *(void *)(v96 + 16);
          unint64_t v89 = *(void *)(v96 + 24);
          if (v90 >= v89 >> 1)
          {
            uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v89 > 1), v90 + 1, 1);
            uint64_t v88 = v95;
            uint64_t v32 = v99;
          }
          uint64_t v31 = v88 + 1;
          *(void *)(v32 + 16) = v90 + 1;
          *(void *)(v32 + 8 * v90 + 32) = v44;
          if (v31 == v92) {
            goto LABEL_121;
          }
          continue;
        }
      }
      else
      {
        if (v45)
        {
          char v91 = v37;
          swift_bridgeObjectRetain();
          for (uint64_t k = 0; k != v45; ++k)
          {
            uint64_t v54 = *(void *)(v34 + 8 * k + 32);
            unint64_t v55 = (0xFFFFFFFEFFFFFFFFLL * v54 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
            if (__CFADD__(-v54, v54))
            {
              if (v55 > 0xFFFFFFFEFFFFFFFFLL) {
                unint64_t v55 = 0;
              }
              else {
                ++v55;
              }
            }
            unint64_t v57 = *((void *)v44 + 2);
            unint64_t v56 = *((void *)v44 + 3);
            int64_t v58 = v56 >> 1;
            unint64_t v59 = v57 + 1;
            if (v56 >> 1 <= v57)
            {
              v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v56 > 1), v57 + 1, 1, v44);
              unint64_t v56 = *((void *)v44 + 3);
              int64_t v58 = v56 >> 1;
            }
            *((void *)v44 + 2) = v59;
            v44[v57 + 32] = v55;
            unint64_t v60 = v57 + 2;
            if (v58 < (uint64_t)(v57 + 2))
            {
              v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v56 > 1), v57 + 2, 1, v44);
              unint64_t v56 = *((void *)v44 + 3);
              int64_t v58 = v56 >> 1;
            }
            *((void *)v44 + 2) = v60;
            v44[v59 + 32] = BYTE1(v55);
            unint64_t v61 = v57 + 3;
            if (v58 < (uint64_t)(v57 + 3))
            {
              v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v56 > 1), v57 + 3, 1, v44);
              unint64_t v56 = *((void *)v44 + 3);
              int64_t v58 = v56 >> 1;
            }
            *((void *)v44 + 2) = v61;
            v44[v60 + 32] = BYTE2(v55);
            unint64_t v62 = v57 + 4;
            if (v58 < (uint64_t)(v57 + 4))
            {
              v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v56 > 1), v57 + 4, 1, v44);
              unint64_t v56 = *((void *)v44 + 3);
              int64_t v58 = v56 >> 1;
            }
            *((void *)v44 + 2) = v62;
            v44[v61 + 32] = BYTE3(v55);
            unint64_t v63 = v57 + 5;
            if (v58 < (uint64_t)(v57 + 5))
            {
              v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v56 > 1), v57 + 5, 1, v44);
              unint64_t v56 = *((void *)v44 + 3);
              int64_t v58 = v56 >> 1;
            }
            *((void *)v44 + 2) = v63;
            v44[v62 + 32] = BYTE4(v55);
            unint64_t v64 = v57 + 6;
            if (v58 < (uint64_t)(v57 + 6))
            {
              v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v56 > 1), v57 + 6, 1, v44);
              unint64_t v56 = *((void *)v44 + 3);
              int64_t v58 = v56 >> 1;
            }
            *((void *)v44 + 2) = v64;
            v44[v63 + 32] = BYTE5(v55);
            unint64_t v65 = v57 + 7;
            if (v58 < (uint64_t)(v57 + 7))
            {
              v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v56 > 1), v57 + 7, 1, v44);
              unint64_t v56 = *((void *)v44 + 3);
              int64_t v58 = v56 >> 1;
            }
            *((void *)v44 + 2) = v65;
            v44[v64 + 32] = BYTE6(v55);
            if (v58 < (uint64_t)(v57 + 8)) {
              v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v56 > 1), v57 + 8, 1, v44);
            }
            *((void *)v44 + 2) = v57 + 8;
            v44[v65 + 32] = HIBYTE(v55);
          }
          uint64_t result = swift_bridgeObjectRelease();
          v98 = v44;
          char v37 = v91;
        }
        int64_t v66 = *(void *)(v36 + 16);
        if ((v37 & 1) == 0) {
          goto LABEL_84;
        }
      }
      int64_t v67 = *((void *)v44 + 2);
      int64_t v68 = v67 + v66;
      if (__OFADD__(v67, v66)) {
        goto LABEL_128;
      }
      uint64_t v69 = *((void *)v44 + 3) >> 1;
      uint64_t result = swift_bridgeObjectRetain();
      if (v69 < v68)
      {
        if (v67 <= v68) {
          int64_t v86 = v67 + v66;
        }
        else {
          int64_t v86 = v67;
        }
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)1, v86, 1, v44);
        v44 = (char *)result;
        int64_t v67 = *(void *)(result + 16);
        uint64_t v69 = *(void *)(result + 24) >> 1;
        if (*(void *)(v36 + 16)) {
          goto LABEL_74;
        }
      }
      else if (v66)
      {
LABEL_74:
        if (v69 - v67 < v66) {
          goto LABEL_135;
        }
        uint64_t result = (uint64_t)memcpy(&v44[v67 + 32], (const void *)(v36 + 32), v66);
        if (v66)
        {
          uint64_t v70 = *((void *)v44 + 2);
          BOOL v27 = __OFADD__(v70, v66);
          uint64_t v71 = v70 + v66;
          if (v27) {
            goto LABEL_138;
          }
          *((void *)v44 + 2) = v71;
        }
LABEL_114:
        swift_bridgeObjectRelease();
        v98 = v44;
        goto LABEL_115;
      }
      if (v66) {
        goto LABEL_130;
      }
      goto LABEL_114;
    }
    break;
  }
  __break(1u);
LABEL_124:
  __break(1u);
LABEL_125:
  __break(1u);
LABEL_126:
  __break(1u);
LABEL_127:
  __break(1u);
LABEL_128:
  __break(1u);
LABEL_129:
  __break(1u);
LABEL_130:
  __break(1u);
LABEL_131:
  __break(1u);
LABEL_132:
  __break(1u);
LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
  return result;
}

uint64_t Prio3<>.prepareInitAndEncodeIntoBytes(verifyKey:aggregatorID:nonce:encodedPublicShare:encodedInputShare:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, size_t a8, uint64_t a9)
{
  size_t v68 = a8;
  long long v17 = v9[5];
  *(_OWORD *)&v55[32] = v9[4];
  *(_OWORD *)&v55[48] = v17;
  *(_OWORD *)&v55[64] = v9[6];
  long long v18 = v9[1];
  long long v53 = *v9;
  long long v54 = v18;
  long long v19 = v9[3];
  *(_OWORD *)unint64_t v55 = v9[2];
  *(_OWORD *)&v55[16] = v19;
  outlined copy of Data._Representation(a1, a2);
  v20 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  outlined consume of Data._Representation(a1, a2);
  outlined copy of Data._Representation(a4, a5);
  uint64_t v21 = specialized _copyCollectionToContiguousArray<A>(_:)(a4, a5);
  outlined consume of Data._Representation(a4, a5);
  long long v64 = *(_OWORD *)&v55[24];
  long long v65 = *(_OWORD *)&v55[40];
  long long v66 = *(_OWORD *)&v55[56];
  uint64_t v22 = *(void *)v55;
  long long v63 = *(_OWORD *)&v55[8];
  uint64_t v41 = v54;
  long long v61 = v54;
  uint64_t v67 = *(void *)&v55[72];
  uint64_t v62 = *(void *)v55;
  uint64_t v23 = v53;
  uint64_t result = specialized Prio3PublicShare.init<A>(from:parameter:)(a6, a7, *(void *)v55 > 0, v53, (size_t *)&v45);
  if (v10)
  {
    swift_release();
LABEL_13:
    swift_release();
    return (uint64_t)v20;
  }
  size_t v25 = v68;
  if (v23 < 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v26 = v45;
  if (a3 < 0 || v23 <= a3)
  {
    int64_t v29 = v20;
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v32 = v31;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v33 = v30;
    *(void *)(v33 + 8) = v32;
    v20 = v29;
    *(unsigned char *)(v33 + 16) = 0;
    swift_willThrow();
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  if (!a3)
  {
    uint64_t result = specialized FullyLinearProof.proofLength.getter();
    uint64_t v27 = result * *((void *)&v53 + 1);
    if ((unsigned __int128)(result * (__int128)*((uint64_t *)&v53 + 1)) >> 64 == (result * *((void *)&v53 + 1)) >> 63)
    {
      uint64_t v28 = v41;
      goto LABEL_11;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v27 = 32;
  uint64_t v28 = 32;
LABEL_11:
  uint64_t v56 = v28;
  BOOL v57 = a3 != 0;
  uint64_t v58 = v27;
  BOOL v59 = v57;
  uint64_t v60 = 32 * (v22 > 0);
  specialized Prio3InputShare.init<A>(from:parameter:)(v25, a9, (uint64_t)&v56, (uint64_t)v43);
  v51[0] = v43[0];
  v51[1] = v43[1];
  uint64_t v52 = v44;
  specialized Prio3.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:)((uint64_t)v47, v46, (uint64_t)v20, a3, (uint64_t)v21, v26, (uint64_t)v51);
  swift_release();
  swift_release();
  outlined release of Prio3InputShare<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>((uint64_t)v51);
  swift_bridgeObjectRelease();
  v49[0] = v47[0];
  v49[1] = v47[1];
  uint64_t v50 = v48;
  char v35 = v46[0];
  uint64_t v34 = v46[1];
  uint64_t v36 = specialized Prio3PrepareState.encodedLength.getter();
  *(void *)&v47[0] = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36 & ~(v36 >> 63), 0, MEMORY[0x263F8EE78]);
  specialized Prio3PrepareState.encode<A>(into:)((uint64_t *)v47);
  uint64_t result = outlined release of Prio3PrepareState<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>((uint64_t)v49);
  v20 = *(void **)&v47[0];
  unint64_t v37 = *((void *)v35 + 2);
  if (!v37)
  {
    uint64_t v38 = 0;
    if (!v34) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (!(v37 >> 60))
  {
    v37 *= 8;
    if (!v34)
    {
      uint64_t v38 = 0;
      goto LABEL_22;
    }
LABEL_21:
    uint64_t v38 = *((void *)v34 + 2);
LABEL_22:
    BOOL v39 = __OFADD__(v37, v38);
    uint64_t v40 = v37 + v38;
    if (!v39)
    {
      *(void *)&v47[0] = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40 & ~(v40 >> 63), 0, MEMORY[0x263F8EE78]);
      specialized Prio3PrepareShare.encode<A>(into:)((uint64_t)v47, (uint64_t)v35, (uint64_t)v34);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v20;
    }
    goto LABEL_26;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized Prio3.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:)(uint64_t result, char **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  long long v9 = v7[5];
  long long v101 = v7[4];
  long long v102 = v9;
  long long v103 = v7[6];
  long long v10 = v7[1];
  long long v97 = *v7;
  long long v98 = v10;
  long long v11 = v7[3];
  long long v99 = v7[2];
  long long v100 = v11;
  uint64_t v12 = *(void *)(a3 + 16);
  if (v12 != 32)
  {
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    uint64_t v95 = (char *)0xD000000000000035;
    unint64_t v96 = 0x8000000260BFF5B0;
LABEL_12:
    v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = 0x3D746F67202CLL;
    v29._object = (void *)0xE600000000000000;
    String.append(_:)(v29);
    uint64_t v94 = v12;
    v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    unint64_t v31 = v96;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v32 = v95;
    *(void *)(v32 + 8) = v31;
    *(unsigned char *)(v32 + 16) = 1;
    return swift_willThrow();
  }
  uint64_t v12 = *(void *)(a5 + 16);
  if (v12 != 16)
  {
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    uint64_t v95 = (char *)0xD000000000000031;
    unint64_t v96 = 0x8000000260BFF5F0;
    goto LABEL_12;
  }
  if ((*(void *)v7 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_36;
  }
  if (a4 < 0 || *(void *)v7 <= a4)
  {
    uint64_t v95 = (char *)a4;
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v35 = v34;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v36 = v33;
    *(void *)(v36 + 8) = v35;
    *(unsigned char *)(v36 + 16) = 0;
    return swift_willThrow();
  }
  uint64_t v88 = a6;
  unint64_t v81 = a2;
  unint64_t v82 = (void *)result;
  long long v14 = v7[4];
  long long v106 = v7[3];
  long long v107 = v14;
  long long v15 = v7[6];
  long long v108 = v7[5];
  long long v109 = v15;
  long long v16 = v7[2];
  long long v104 = v7[1];
  long long v105 = v16;
  if ((unint64_t)a4 > 0xFF)
  {
LABEL_36:
    __break(1u);
    __break(1u);
    goto LABEL_37;
  }
  unint64_t v19 = *(void *)a7;
  int v20 = *(unsigned __int8 *)(a7 + 8);
  unint64_t v21 = *(void *)a7;
  char v22 = *(unsigned char *)(a7 + 8);
  v132 = (char *)a4;
  uint64_t result = specialized static VDAFProtocol.decodeMeasurementShare<A>(_:aggregatorID:count:)(v21, v22, a4, v104);
  if (!v8)
  {
    uint64_t v92 = result;
    int v76 = v20;
    unint64_t v77 = v19;
    uint64_t v23 = *((void *)v7 + 1);
    unint64_t v24 = *(void *)(a7 + 16);
    LODWORD(v91) = *(unsigned __int8 *)(a7 + 24);
    uint64_t result = specialized FullyLinearProof.proofLength.getter();
    if ((unsigned __int128)(result * (__int128)v23) >> 64 == (result * v23) >> 63)
    {
      MEMORY[0x270FA5388](result, v25);
      unint64_t v27 = (unint64_t)v132;
      v75[2] = &v97;
      v75[3] = v132;
      unint64_t v87 = specialized static VDAFProtocol.decodeProofShare<A>(_:aggregatorID:count:makeXOF:)(v24, v91, v26, (uint64_t (*)(unint64_t))partial apply for specialized closure #1 in Prio3.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:), (uint64_t)v75);
      uint64_t v89 = v38;
      uint64_t v90 = v37;
      uint64_t v91 = v39;
      long long v123 = v101;
      long long v124 = v102;
      long long v125 = v103;
      long long v119 = v97;
      long long v120 = v98;
      long long v121 = v99;
      long long v122 = v100;
      uint64_t v40 = specialized Prio3.jointRandFrom(aggregatorID:nonce:measurement:publicShare:inputShare:)(v27, a5, v92, v88, a7);
      unint64_t v41 = *((void *)&v119 + 1);
      long long v128 = v122;
      long long v129 = v123;
      long long v130 = v124;
      long long v131 = v125;
      long long v126 = v120;
      long long v127 = v121;
      long long v110 = v120;
      long long v111 = v121;
      long long v112 = v122;
      long long v113 = v123;
      long long v114 = v124;
      long long v115 = v125;
      swift_bridgeObjectRetain();
      uint64_t v42 = specialized static VDAFProtocol.domainSeparationTag(usage:)(4u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      uint64_t result = swift_initStackObject();
      *(_OWORD *)(result + 16) = xmmword_260BF9FF0;
      if ((v41 & 0x8000000000000000) == 0)
      {
        if (v41 <= 0xFF)
        {
          *(unsigned char *)(result + 32) = v41;
          uint64_t v95 = (char *)result;
          uint64_t v43 = swift_bridgeObjectRetain();
          specialized Array.append<A>(contentsOf:)(v43);
          uint64_t v80 = specialized static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(a3, v42, (uint64_t)v95);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t result = specialized FullyLinearProof.verifierLength.getter();
          if ((unsigned __int128)((uint64_t)v41 * (__int128)result) >> 64 == (uint64_t)(v41 * result) >> 63)
          {
            unint64_t v44 = MEMORY[0x263F8EE78];
            uint64_t v95 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (v41 * result) & ~((uint64_t)(v41 * result) >> 63), 0, MEMORY[0x263F8EE78]);
            unint64_t v45 = v87;
            if (v41)
            {
              int64_t v78 = v40;
              uint64_t v79 = v119;
              long long v116 = v129;
              long long v117 = v130;
              long long v118 = v131;
              do
              {
                unint64_t v84 = v41;
                if (v40)
                {
                  unint64_t v46 = v40[5];
                  swift_retain();
                  unint64_t v47 = v44;
                  uint64_t v48 = specialized VerificationJointRandomness.xof.getter();
                  unint64_t v83 = specialized static FieldElement.randomVector<A>(count:using:)(v46, v48);
                  swift_release();
                  swift_release();
                }
                else
                {
                  unint64_t v83 = v44;
                  unint64_t v47 = v44;
                }
                uint64_t v49 = specialized FullyLinearProof.proofLength.getter();
                uint64_t v51 = v90;
                uint64_t v50 = v91;
                uint64_t v52 = v89;
                uint64_t v53 = specialized Collection.prefix(_:)(v49, v45, v91, v90, v89);
                unint64_t v87 = v55;
                uint64_t v88 = v54;
                unint64_t v86 = v56;
                uint64_t v85 = specialized Collection.dropFirst(_:)(v49, v45, v50, v51, v52);
                uint64_t v90 = v58;
                uint64_t v91 = v57;
                uint64_t v89 = v59;
                uint64_t v60 = specialized Gadget.wirePolynomialLength.getter();
                specialized Gadget.gadgetPolynomialLength.getter(v60);
                uint64_t v94 = v47;
                swift_unknownObjectRetain();
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0);
                uint64_t v61 = v94;
                specialized static FieldElement.randomElement<A>(using:)(v80, v93);
                unint64_t v62 = v93[0];
                unint64_t v64 = *(void *)(v61 + 16);
                unint64_t v63 = *(void *)(v61 + 24);
                if (v64 >= v63 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v63 > 1), v64 + 1, 1);
                  uint64_t v61 = v94;
                }
                unint64_t v65 = v84;
                *(void *)(v61 + 16) = v64 + 1;
                *(void *)(v61 + 8 * v64 + 32) = v62;
                specialized FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(&v95, v92, v53, v88, v87, v86, v61, v83, v79);
                swift_unknownObjectRelease();
                swift_release();
                swift_bridgeObjectRelease();
                unint64_t v45 = v85;
                unint64_t v41 = v65 - 1;
                uint64_t v40 = v78;
                unint64_t v44 = MEMORY[0x263F8EE78];
              }
              while (v41);
            }
            swift_bridgeObjectRelease();
            unint64_t v66 = v77;
            swift_bridgeObjectRetain();
            if (v40)
            {
              swift_retain();
              uint64_t v67 = specialized VerificationJointRandomness.seed.getter();
              swift_release();
            }
            else
            {
              uint64_t v67 = 0;
            }
            char v68 = v76;
            uint64_t result = specialized FullyLinearProof.verifierLength.getter();
            uint64_t v69 = v82;
            *unint64_t v82 = v66;
            *((unsigned char *)v69 + 8) = v68;
            v69[2] = v67;
            uint64_t v70 = v132;
            *((unsigned char *)v69 + 24) = (_BYTE)v132;
            v69[4] = result;
            uint64_t v71 = v95;
            if (!v40)
            {
              swift_release();
              uint64_t result = swift_unknownObjectRelease();
              v73 = 0;
              goto LABEL_34;
            }
            uint64_t v72 = v40[2];
            if (*(void *)(v72 + 16) > (uint64_t)v70)
            {
              v73 = *(char **)(v72 + 8 * (void)v70 + 32);
              swift_bridgeObjectRetain();
              swift_unknownObjectRelease();
              swift_release();
              uint64_t result = swift_release();
LABEL_34:
              uint64_t v74 = v81;
              *unint64_t v81 = v71;
              v74[1] = v73;
              return result;
            }
            goto LABEL_41;
          }
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  return result;
}

void Prio3<>.encodedPrepareMessageFrom(_:)(uint64_t a1)
{
  long long v3 = v1[4];
  long long v4 = v1[6];
  long long v20 = v1[5];
  long long v21 = v4;
  long long v5 = v1[1];
  long long v15 = *v1;
  long long v16 = v5;
  long long v6 = v1[2];
  long long v18 = v1[3];
  long long v19 = v3;
  long long v17 = v6;
  specialized Prio3.prepareMessageFrom(_:parameter:)(a1, v13);
  if (!v2)
  {
    uint64_t v7 = v13[0];
    if (v13[0])
    {
      unint64_t v8 = *(void *)(v13[0] + 16);
      if (v8)
      {
        if (v8 <= 0xE)
        {
          long long v14 = 0uLL;
        }
        else
        {
          type metadata accessor for __DataStorage();
          swift_allocObject();
          uint64_t v9 = __DataStorage.init(capacity:)();
          uint64_t v10 = v9;
          if (v8 >= 0x7FFFFFFF)
          {
            type metadata accessor for Data.RangeReference();
            uint64_t v11 = swift_allocObject();
            *(void *)(v11 + 16) = 0;
            *(void *)(v11 + 24) = 0;
            *(void *)&long long v14 = v11;
            *((void *)&v14 + 1) = v10 | 0x8000000000000000;
          }
          else
          {
            *(void *)&long long v14 = 0;
            *((void *)&v14 + 1) = v9 | 0x4000000000000000;
          }
        }
      }
      else
      {
        long long v14 = xmmword_260BFC360;
      }
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
      v13[3] = v12;
      v13[4] = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]();
      v13[0] = v7;
      __swift_project_boxed_opaque_existential_1(v13, v12);
      swift_bridgeObjectRetain();
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

void specialized Prio3.prepareMessageFrom(_:parameter:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = v3;
  long long v5 = (void *)v2;
  long long v51 = *(_OWORD *)(v2 + 32);
  uint64_t v8 = specialized FullyLinearProof.verifierLength.getter();
  uint64_t v9 = *(void *)(v2 + 8);
  uint64_t v10 = v8 * v9;
  if ((unsigned __int128)(v8 * (__int128)v9) >> 64 != (v8 * v9) >> 63)
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  if (v10 < 0)
  {
LABEL_74:
    __break(1u);
    return;
  }
  uint64_t v48 = a2;
  uint64_t v50 = v9;
  if (v10)
  {
    uint64_t i = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(i + 16) = v10;
    bzero((void *)(i + 32), 8 * v10);
  }
  else
  {
    uint64_t i = MEMORY[0x263F8EE78];
  }
  uint64_t v49 = v5;
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12)
  {
    uint64_t v47 = v3;
    uint64_t v10 = a1 + 32;
    uint64_t v4 = i;
    uint64_t v13 = i + 32;
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v12; ++i)
    {
      uint64_t v14 = v10 + 16 * i;
      uint64_t v15 = *(void *)v14;
      uint64_t v16 = *(void *)(v4 + 16);
      if (v16 != *(void *)(*(void *)v14 + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(28);
        swift_bridgeObjectRelease();
        v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v36);
        swift_bridgeObjectRelease();
        v37._countAndFlagsBits = 540877088;
        v37._object = (void *)0xE400000000000000;
        String.append(_:)(v37);
        v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v38);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
        swift_allocError();
        *(void *)uint64_t v39 = 0xD000000000000020;
        *(void *)(v39 + 8) = 0x8000000260BFE7C0;
        *(unsigned char *)(v39 + 16) = 1;
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }
      if (v16)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v17 = 0;
        while (1)
        {
          unint64_t v19 = *(void *)(v15 + 8 * v17 + 32);
          unint64_t v18 = *(void *)(v13 + 8 * v17);
          if (v19)
          {
            BOOL v20 = v19 <= 0xFFFFFFFF00000001;
            unint64_t v21 = 0xFFFFFFFF00000001 - v19;
            if (!v20)
            {
              __break(1u);
              goto LABEL_64;
            }
            if (v18 >= v21)
            {
              v18 -= v21;
            }
            else
            {
              BOOL v20 = v21 <= 0xFFFFFFFF00000001;
              unint64_t v22 = 0xFFFFFFFF00000001 - v21;
              if (!v20)
              {
                __break(1u);
                __break(1u);
                goto LABEL_65;
              }
              BOOL v20 = __CFADD__(v18, v22);
              v18 += v22;
              if (v20)
              {
                __break(1u);
                goto LABEL_24;
              }
            }
          }
          *(void *)(v13 + 8 * v17++) = v18;
          if (v16 == v17)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            break;
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v23 = *(void *)(v4 + 16);
    swift_bridgeObjectRetain();
    unint64_t v24 = (char *)MEMORY[0x263F8EE78];
    uint64_t v40 = 40;
    do
    {
      uint64_t v10 = *(void *)(a1 + v40);
      if (v10)
      {
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v24 + 2) + 1, 1, v24);
        }
        unint64_t v42 = *((void *)v24 + 2);
        unint64_t v41 = *((void *)v24 + 3);
        if (v42 >= v41 >> 1) {
          unint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v41 > 1), v42 + 1, 1, v24);
        }
        *((void *)v24 + 2) = v42 + 1;
        *(void *)&v24[8 * v42 + 32] = v10;
      }
      v40 += 16;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    uint64_t i = v4;
    uint64_t v4 = v47;
    uint64_t v25 = v50;
    if (v50 < 0) {
      goto LABEL_57;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v23 = *(void *)(i + 16);
  unint64_t v24 = (char *)MEMORY[0x263F8EE78];
  uint64_t v25 = v50;
  if ((v50 & 0x8000000000000000) == 0)
  {
LABEL_25:
    if (!v25)
    {
LABEL_44:
      uint64_t v10 = *((void *)v24 + 2);
      if ((uint64_t)v51 >= 1)
      {
        if (v10 == *v49)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VerificationJointRandomness<Prio3<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>, Field64>);
          inited = (void *)swift_initStackObject();
          inited[4] = 0;
          inited[5] = v51;
          inited[6] = v50;
          inited[2] = v24;
          inited[3] = 0;
          uint64_t v35 = specialized VerificationJointRandomness.seed.getter();
          swift_bridgeObjectRelease();
          swift_setDeallocating();
          swift_bridgeObjectRelease();
          swift_release();
          swift_unknownObjectRelease();
          *uint64_t v48 = v35;
          return;
        }
        swift_bridgeObjectRelease();
        _StringGuts.grow(_:)(42);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
        swift_allocError();
        unint64_t v44 = 0xD000000000000038;
        unint64_t v45 = "VDAF/Prio3.swift: missing jointRandPart in prepare share";
        goto LABEL_63;
      }
      goto LABEL_58;
    }
    uint64_t v26 = 0;
    while (1)
    {
      uint64_t v27 = specialized FullyLinearProof.verifierLength.getter();
      if (v27 < 0) {
        break;
      }
      uint64_t v28 = v23 - v26;
      if (!v27 || v28 < 0 || (uint64_t v29 = v23, v28 >= v27))
      {
        uint64_t v29 = v26 + v27;
        if (__OFADD__(v26, v27)) {
          goto LABEL_71;
        }
      }
      if (v29 < v26) {
        goto LABEL_66;
      }
      if (v23 < v26) {
        goto LABEL_67;
      }
      if (v23 < v29) {
        goto LABEL_68;
      }
      if (!v27 || v28 < 0 || (uint64_t v30 = v23, v28 >= v27))
      {
        uint64_t v30 = v26 + v27;
        if (__OFADD__(v26, v27)) {
          goto LABEL_72;
        }
      }
      if (v23 < v30) {
        goto LABEL_69;
      }
      if (v30 < v26) {
        goto LABEL_70;
      }
      unint64_t v31 = (2 * v29) | 1;
      uint64_t v32 = swift_unknownObjectRetain();
      char v33 = specialized FullyLinearProof.decide<A>(verifier:)(v32, i + 32, v26, v31);
      if (v4)
      {
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        return;
      }
      if ((v33 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
        swift_allocError();
        *(void *)uint64_t v46 = 0;
        *(void *)(v46 + 8) = 0;
        *(unsigned char *)(v46 + 16) = 4;
        swift_willThrow();
        swift_unknownObjectRelease_n();
        return;
      }
      swift_unknownObjectRelease();
      uint64_t v26 = v30;
      if (!--v25) {
        goto LABEL_44;
      }
    }
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
LABEL_57:
  __break(1u);
LABEL_58:
  swift_bridgeObjectRelease();
  if (v10)
  {
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    unint64_t v44 = 0xD00000000000003BLL;
    unint64_t v45 = "VDAF/Prio3.swift: unexpected jointRandPart in prepare share";
LABEL_63:
    *(void *)uint64_t v43 = v44;
    *(void *)(v43 + 8) = (unint64_t)(v45 - 32) | 0x8000000000000000;
    *(unsigned char *)(v43 + 16) = 1;
    swift_willThrow();
    swift_unknownObjectRelease();
    return;
  }
LABEL_64:
  swift_unknownObjectRelease();
  *uint64_t v48 = 0;
}

uint64_t Prio3<>.prepareNextAndEncodeIntoBytes(aggregatorID:encodedState:encodedMessage:)(uint64_t result, size_t a2, unint64_t a3, size_t a4, unint64_t a5)
{
  long long v8 = v5[4];
  long long v9 = v5[5];
  long long v10 = v5[2];
  *(_OWORD *)&v39[16] = v5[3];
  *(_OWORD *)&v39[32] = v8;
  long long v11 = v5[6];
  *(_OWORD *)&v39[48] = v9;
  *(_OWORD *)&v39[64] = v11;
  long long v12 = v5[1];
  long long v37 = *v5;
  long long v38 = v12;
  *(_OWORD *)uint64_t v39 = v10;
  if ((v37 & 0x8000000000000000) == 0)
  {
    if (result < 0 || (uint64_t)v37 <= result)
    {
      uint64_t v34 = result;
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v25 = v24;
      lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
      swift_allocError();
      *(void *)uint64_t v26 = v23;
      *(void *)(v26 + 8) = v25;
      *(unsigned char *)(v26 + 16) = 0;
    }
    else
    {
      unint64_t v48 = a5;
      if (result) {
        uint64_t v7 = 32;
      }
      else {
        uint64_t v7 = v38;
      }
      long long v41 = v38;
      long long v44 = *(_OWORD *)&v39[24];
      long long v45 = *(_OWORD *)&v39[40];
      long long v46 = *(_OWORD *)&v39[56];
      long long v43 = *(_OWORD *)&v39[8];
      uint64_t v47 = *(void *)&v39[72];
      uint64_t v42 = *(void *)v39;
      v40[0] = v7;
      v40[1] = result != 0;
      v40[2] = 32 * (*(void *)v39 > 0);
      v40[3] = result;
      v40[4] = specialized FullyLinearProof.verifierLength.getter();
      specialized Prio3PrepareState.init<A>(from:parameter:)(a2, a3, (uint64_t)v40, (uint64_t)&v28);
      if (v6) {
        return v7;
      }
      size_t v16 = 0;
      v35[0] = v28;
      v35[1] = v29;
      uint64_t v36 = v30;
      if (a4 && v48 != a4) {
        size_t v16 = specialized _copyCollectionToContiguousArray<A>(_:)(a4, v48);
      }
      specialized Prio3.prepareNext(state:message:)((uint64_t)v35, v16, (uint64_t)&v28);
      swift_bridgeObjectRelease();
      outlined release of Prio3PrepareState<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>((uint64_t)v35);
      long long v17 = v28;
      long long v18 = v29;
      uint64_t v19 = v30;
      uint64_t v20 = v31;
      uint64_t v21 = v32;
      if (v33 == 1)
      {
        uint64_t v22 = swift_bridgeObjectRetain();
        uint64_t v7 = specialized VDAFEncodable.encodedBytes.getter(v22);
        outlined consume of PrepareTransition<Prio3<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>>(v17, *((uint64_t *)&v17 + 1), v18, *((uint64_t *)&v18 + 1), v19, v20, v21, 1);
        outlined consume of PrepareTransition<Prio3<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>>(v17, *((uint64_t *)&v17 + 1), v18, *((uint64_t *)&v18 + 1), v19, v20, v21, 1);
        return v7;
      }
      outlined consume of PrepareTransition<Prio3<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>>(v28, *((uint64_t *)&v28 + 1), v29, *((uint64_t *)&v29 + 1), v30, v31, v32, 0);
      lazy protocol witness table accessor for type Prio3Error and conformance Prio3Error();
      swift_allocError();
      *(void *)uint64_t v27 = 0xD000000000000018;
      *(void *)(v27 + 8) = 0x8000000260BFE7A0;
      *(unsigned char *)(v27 + 16) = 2;
    }
    swift_willThrow();
    return v7;
  }
  __break(1u);
  return result;
}

uint64_t specialized Prio3.prepareNext(state:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(a1 + 16))
  {
    if (a2 && specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 16), a2)) {
      goto LABEL_4;
    }
LABEL_7:
    _StringGuts.grow(_:)(68);
    v9._object = (void *)0x8000000260BFF470;
    v9._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v9);
    v10._countAndFlagsBits = 0xD00000000000002ELL;
    v10._object = (void *)0x8000000260BFF490;
    String.append(_:)(v10);
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Seed?);
    v11._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._object = (void *)0x8000000260BFE870;
    v12._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v12);
    swift_bridgeObjectRetain();
    v13._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v14 = 0;
    *(void *)(v14 + 8) = 0xE000000000000000;
    *(unsigned char *)(v14 + 16) = 1;
    return swift_willThrow();
  }
  if (a2) {
    goto LABEL_7;
  }
LABEL_4:
  uint64_t result = specialized static VDAFProtocol.decodeMeasurementShare<A>(_:aggregatorID:count:)(*(void *)a1, *(unsigned char *)(a1 + 8), *(unsigned char *)(a1 + 24), *(void *)(v3 + 16));
  if (!v4)
  {
    uint64_t v8 = specialized SumVectorType.truncate(measurement:)(result);
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a3 = v8;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(unsigned char *)(a3 + 56) = 1;
  }
  return result;
}

size_t Prio3<>.outputShare(from:)@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, size_t *a3@<X8>)
{
  return Prio3<>.outputShare(from:)(a1, a2, a3);
}

{
  uint64_t v3;
  size_t result;

  uint64_t result = specialized Array<A>.init<A>(from:)(a1, a2);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

uint64_t Prio3<>.encodedAggregateShare(_:)()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = specialized VDAFEncodable.encodedBytes.getter(v0);
  swift_bridgeObjectRelease();
  return v1;
}

size_t Prio3<>.aggregateShare(from:)@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, size_t *a3@<X8>)
{
  return Prio3<>.outputShare(from:)(a1, a2, a3);
}

char *Prio3<>.unshardAndEncodeIntoBytes(_:numOfMeasurements:)(uint64_t a1)
{
  uint64_t v3 = specialized Prio3.unshard<A>(_:numOfMeasurements:parameter:)(a1);
  if (v1) {
    return v2;
  }
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (!v5)
  {
    uint64_t result = (char *)swift_bridgeObjectRelease();
    uint64_t v9 = MEMORY[0x263F8EE78];
    unint64_t v13 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (v13) {
      goto LABEL_9;
    }
LABEL_17:
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16), 0, (char *)v6);
    swift_bridgeObjectRelease();
    return v2;
  }
  long long v17 = (char *)MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
  uint64_t v8 = 0;
  uint64_t v9 = (uint64_t)v17;
  do
  {
    unint64_t v10 = *(void *)(v4 + 8 * v8 + 32);
    if (HIDWORD(v10))
    {
      __break(1u);
      goto LABEL_20;
    }
    long long v17 = (char *)v9;
    unint64_t v12 = *(void *)(v9 + 16);
    unint64_t v11 = *(void *)(v9 + 24);
    if (v12 >= v11 >> 1)
    {
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1);
      uint64_t v9 = (uint64_t)v17;
    }
    ++v8;
    *(void *)(v9 + 16) = v12 + 1;
    *(_DWORD *)(v9 + 4 * v12 + 32) = v10;
  }
  while (v5 != v8);
  uint64_t result = (char *)swift_bridgeObjectRelease();
  unint64_t v13 = *(void *)(v9 + 16);
  if (!v13) {
    goto LABEL_17;
  }
LABEL_9:
  if (!(v13 >> 61))
  {
    if (*(void *)(v6 + 16) <= (int64_t)(4 * v13)) {
      int64_t v14 = 4 * v13;
    }
    else {
      int64_t v14 = *(void *)(v6 + 16);
    }
    long long v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0, (char *)v6);
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v13; ++i)
    {
      int v16 = *(_DWORD *)(v9 + 4 * i + 32);
      specialized VDAFCodableFixedWidthInteger.encode<A>(into:)((uint64_t *)&v17, v16);
    }
    swift_bridgeObjectRelease_n();
    return v17;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t specialized FullyLinearProof.proofLength.getter()
{
  return specialized FullyLinearProof.proofLength.getter(specialized Gadget.wirePolynomialLength.getter, (uint64_t (*)(uint64_t))specialized Gadget.gadgetPolynomialLength.getter);
}

{
  return specialized FullyLinearProof.proofLength.getter(specialized Gadget.wirePolynomialLength.getter, (uint64_t (*)(uint64_t))specialized Gadget.gadgetPolynomialLength.getter);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = specialized Gadget.wirePolynomialLength.getter();
  uint64_t v4 = specialized Gadget.gadgetPolynomialLength.getter(v3);
  unint64_t v12 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0);
  uint64_t v6 = __OFADD__(v2, v4);
  uint64_t v7 = v2 + v4;
  if (v6)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v8 = v12;
  uint64_t v1 = *(void *)(v12 + 16);
  int64_t v5 = *(void *)(v12 + 24);
  uint64_t v4 = v1 + 1;
  if (v1 >= v5 >> 1)
  {
LABEL_9:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v4, 1);
    uint64_t v8 = v12;
  }
  int64_t v5 = 0;
  uint64_t v9 = 0;
  *(void *)(v8 + 16) = v4;
  *(void *)(v8 + 8 * v1 + 32) = v7;
  do
  {
    unint64_t v10 = *(void *)(v8 + 8 * v5 + 32);
    uint64_t v6 = __OFADD__(v9, v10);
    v9 += v10;
    if (v6)
    {
      __break(1u);
      goto LABEL_8;
    }
    ++v5;
  }
  while (v4 != v5);
  swift_release();
  return v9;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = specialized Gadget.wirePolynomialLength.getter();
  uint64_t v4 = specialized Gadget.gadgetPolynomialLength.getter(v3);
  unint64_t v12 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0);
  uint64_t v6 = __OFADD__(v2, v4);
  uint64_t v7 = v2 + v4;
  if (v6)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v8 = v12;
  uint64_t v1 = *(void *)(v12 + 16);
  int64_t v5 = *(void *)(v12 + 24);
  uint64_t v4 = v1 + 1;
  if (v1 >= v5 >> 1)
  {
LABEL_9:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v4, 1);
    uint64_t v8 = v12;
  }
  int64_t v5 = 0;
  uint64_t v9 = 0;
  *(void *)(v8 + 16) = v4;
  *(void *)(v8 + 8 * v1 + 32) = v7;
  do
  {
    unint64_t v10 = *(void *)(v8 + 8 * v5 + 32);
    uint64_t v6 = __OFADD__(v9, v10);
    v9 += v10;
    if (v6)
    {
      __break(1u);
      goto LABEL_8;
    }
    ++v5;
  }
  while (v4 != v5);
  swift_release();
  return v9;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = specialized Gadget.wirePolynomialLength.getter();
  uint64_t v4 = specialized Gadget.gadgetPolynomialLength.getter(v3);
  unint64_t v12 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0);
  uint64_t v6 = __OFADD__(v2, v4);
  uint64_t v7 = v2 + v4;
  if (v6)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v8 = v12;
  uint64_t v1 = *(void *)(v12 + 16);
  int64_t v5 = *(void *)(v12 + 24);
  uint64_t v4 = v1 + 1;
  if (v1 >= v5 >> 1)
  {
LABEL_9:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v4, 1);
    uint64_t v8 = v12;
  }
  int64_t v5 = 0;
  uint64_t v9 = 0;
  *(void *)(v8 + 16) = v4;
  *(void *)(v8 + 8 * v1 + 32) = v7;
  do
  {
    unint64_t v10 = *(void *)(v8 + 8 * v5 + 32);
    uint64_t v6 = __OFADD__(v9, v10);
    v9 += v10;
    if (v6)
    {
      __break(1u);
      goto LABEL_8;
    }
    ++v5;
  }
  while (v4 != v5);
  swift_release();
  return v9;
}

uint64_t specialized FullyLinearProof.proofLength.getter(uint64_t (*a1)(void), uint64_t (*a2)(uint64_t))
{
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v6 = a1();
  int64_t v7 = a2(v6);
  uint64_t v15 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0);
  BOOL v9 = __OFADD__(v5, v7);
  uint64_t v10 = v5 + v7;
  if (v9)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v11 = v15;
  unint64_t v3 = *(void *)(v15 + 16);
  unint64_t v8 = *(void *)(v15 + 24);
  int64_t v7 = v3 + 1;
  if (v3 >= v8 >> 1)
  {
LABEL_9:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v7, 1);
    uint64_t v11 = v15;
  }
  unint64_t v8 = 0;
  uint64_t v12 = 0;
  *(void *)(v11 + 16) = v7;
  *(void *)(v11 + 8 * v3 + 32) = v10;
  do
  {
    uint64_t v13 = *(void *)(v11 + 8 * v8 + 32);
    BOOL v9 = __OFADD__(v12, v13);
    v12 += v13;
    if (v9)
    {
      __break(1u);
      goto LABEL_8;
    }
    ++v8;
  }
  while (v7 != v8);
  swift_release();
  return v12;
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v6 = a1();
  int64_t v7 = a2(v6);
  uint64_t v15 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0);
  BOOL v9 = __OFADD__(v5, v7);
  uint64_t v10 = v5 + v7;
  if (v9)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v11 = v15;
  unint64_t v3 = *(void *)(v15 + 16);
  unint64_t v8 = *(void *)(v15 + 24);
  int64_t v7 = v3 + 1;
  if (v3 >= v8 >> 1)
  {
LABEL_9:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v7, 1);
    uint64_t v11 = v15;
  }
  unint64_t v8 = 0;
  uint64_t v12 = 0;
  *(void *)(v11 + 16) = v7;
  *(void *)(v11 + 8 * v3 + 32) = v10;
  do
  {
    uint64_t v13 = *(void *)(v11 + 8 * v8 + 32);
    BOOL v9 = __OFADD__(v12, v13);
    v12 += v13;
    if (v9)
    {
      __break(1u);
      goto LABEL_8;
    }
    ++v8;
  }
  while (v7 != v8);
  swift_release();
  return v12;
}

uint64_t specialized FullyLinearProof.verifierLength.getter()
{
  return specialized FullyLinearProof.verifierLength.getter(specialized Gadget.wirePolynomialLength.getter, (void (*)(uint64_t))specialized Gadget.gadgetPolynomialLength.getter);
}

{
  return specialized FullyLinearProof.verifierLength.getter(specialized Gadget.wirePolynomialLength.getter, (void (*)(uint64_t))specialized Gadget.gadgetPolynomialLength.getter);
}

{
  uint64_t v0;
  unint64_t v1;
  int64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t result;
  uint64_t v11;

  uint64_t v2 = *(void *)(v0 + 8);
  unint64_t v3 = specialized Gadget.wirePolynomialLength.getter();
  specialized Gadget.gadgetPolynomialLength.getter(v3);
  uint64_t v11 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0);
  uint64_t v5 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v6 = v11;
  uint64_t v1 = *(void *)(v11 + 16);
  uint64_t v4 = *(void *)(v11 + 24);
  uint64_t v2 = v1 + 1;
  if (v1 >= v4 >> 1)
  {
LABEL_10:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v2, 1);
    uint64_t v6 = v11;
  }
  uint64_t v4 = 0;
  int64_t v7 = 0;
  *(void *)(v6 + 16) = v2;
  *(void *)(v6 + 8 * v1 + 32) = v5;
  do
  {
    unint64_t v8 = *(void *)(v6 + 8 * v4 + 32);
    BOOL v9 = __OFADD__(v7, v8);
    v7 += v8;
    if (v9)
    {
      __break(1u);
      goto LABEL_9;
    }
    ++v4;
  }
  while (v2 != v4);
  swift_release();
  uint64_t result = v7 + 1;
  if (__OFADD__(v7, 1)) {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  unint64_t v1;
  int64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t result;
  uint64_t v11;

  uint64_t v2 = *(void *)(v0 + 8);
  unint64_t v3 = specialized Gadget.wirePolynomialLength.getter();
  specialized Gadget.gadgetPolynomialLength.getter(v3);
  uint64_t v11 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0);
  uint64_t v5 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v6 = v11;
  uint64_t v1 = *(void *)(v11 + 16);
  uint64_t v4 = *(void *)(v11 + 24);
  uint64_t v2 = v1 + 1;
  if (v1 >= v4 >> 1)
  {
LABEL_10:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v2, 1);
    uint64_t v6 = v11;
  }
  uint64_t v4 = 0;
  int64_t v7 = 0;
  *(void *)(v6 + 16) = v2;
  *(void *)(v6 + 8 * v1 + 32) = v5;
  do
  {
    unint64_t v8 = *(void *)(v6 + 8 * v4 + 32);
    BOOL v9 = __OFADD__(v7, v8);
    v7 += v8;
    if (v9)
    {
      __break(1u);
      goto LABEL_9;
    }
    ++v4;
  }
  while (v2 != v4);
  swift_release();
  uint64_t result = v7 + 1;
  if (__OFADD__(v7, 1)) {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  unint64_t v1;
  int64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t result;
  uint64_t v11;

  uint64_t v2 = *(void *)(v0 + 48);
  unint64_t v3 = specialized Gadget.wirePolynomialLength.getter();
  specialized Gadget.gadgetPolynomialLength.getter(v3);
  uint64_t v11 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0);
  uint64_t v5 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v6 = v11;
  uint64_t v1 = *(void *)(v11 + 16);
  uint64_t v4 = *(void *)(v11 + 24);
  uint64_t v2 = v1 + 1;
  if (v1 >= v4 >> 1)
  {
LABEL_10:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v2, 1);
    uint64_t v6 = v11;
  }
  uint64_t v4 = 0;
  int64_t v7 = 0;
  *(void *)(v6 + 16) = v2;
  *(void *)(v6 + 8 * v1 + 32) = v5;
  do
  {
    unint64_t v8 = *(void *)(v6 + 8 * v4 + 32);
    BOOL v9 = __OFADD__(v7, v8);
    v7 += v8;
    if (v9)
    {
      __break(1u);
      goto LABEL_9;
    }
    ++v4;
  }
  while (v2 != v4);
  swift_release();
  uint64_t result = v7 + 1;
  if (__OFADD__(v7, 1)) {
    __break(1u);
  }
  return result;
}

uint64_t specialized FullyLinearProof.verifierLength.getter(uint64_t (*a1)(void), void (*a2)(uint64_t))
{
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v6 = a1();
  a2(v6);
  uint64_t v14 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0);
  BOOL v8 = __OFADD__(v5, 1);
  uint64_t v9 = v5 + 1;
  if (v8)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v10 = v14;
  unint64_t v3 = *(void *)(v14 + 16);
  unint64_t v7 = *(void *)(v14 + 24);
  a2 = (void (*)(uint64_t))(v3 + 1);
  if (v3 >= v7 >> 1)
  {
LABEL_10:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), (int64_t)a2, 1);
    uint64_t v10 = v14;
  }
  unint64_t v7 = 0;
  uint64_t v11 = 0;
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 8 * v3 + 32) = v9;
  do
  {
    uint64_t v12 = *(void *)(v10 + 8 * v7 + 32);
    BOOL v8 = __OFADD__(v11, v12);
    v11 += v12;
    if (v8)
    {
      __break(1u);
      goto LABEL_9;
    }
    ++v7;
  }
  while (a2 != (void (*)(uint64_t))v7);
  swift_release();
  uint64_t result = v11 + 1;
  if (__OFADD__(v11, 1)) {
    __break(1u);
  }
  return result;
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v6 = a1();
  a2(v6);
  uint64_t v14 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 0);
  BOOL v8 = __OFADD__(v5, 1);
  uint64_t v9 = v5 + 1;
  if (v8)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v10 = v14;
  unint64_t v3 = *(void *)(v14 + 16);
  unint64_t v7 = *(void *)(v14 + 24);
  a2 = (void (*)(uint64_t))(v3 + 1);
  if (v3 >= v7 >> 1)
  {
LABEL_10:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), (int64_t)a2, 1);
    uint64_t v10 = v14;
  }
  unint64_t v7 = 0;
  uint64_t v11 = 0;
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 8 * v3 + 32) = v9;
  do
  {
    uint64_t v12 = *(void *)(v10 + 8 * v7 + 32);
    BOOL v8 = __OFADD__(v11, v12);
    v11 += v12;
    if (v8)
    {
      __break(1u);
      goto LABEL_9;
    }
    ++v7;
  }
  while (a2 != (void (*)(uint64_t))v7);
  swift_release();
  uint64_t result = v11 + 1;
  if (__OFADD__(v11, 1)) {
    __break(1u);
  }
  return result;
}

uint64_t specialized Prio3InputShare.init<A>(from:parameter:)@<X0>(size_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  outlined init with take of Prio3PrepareStateDecodableParameter<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>?(a3, (uint64_t)&v77, &demangling cache variable for type metadata for Prio3InputShareDecodableParameter<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>?);
  if (v78 == 255)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    void *v9 = 0;
    v9[1] = 0;
    return swift_willThrow();
  }
  uint64_t v10 = v77;
  uint64_t v11 = v79;
  uint64_t v12 = v81;
  if (a1) {
    size_t v13 = a2 - a1;
  }
  else {
    size_t v13 = 0;
  }
  uint64_t v14 = v77;
  if ((v78 & 1) == 0)
  {
    if ((unint64_t)(v77 - 0x1000000000000000) >> 61 != 7)
    {
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    uint64_t v14 = 8 * v77;
  }
  uint64_t v15 = v79;
  unint64_t v5 = v80 & 1;
  if ((v80 & 1) == 0)
  {
    if ((unint64_t)(v79 - 0x1000000000000000) >> 61 != 7)
    {
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    uint64_t v15 = 8 * v79;
  }
  BOOL v16 = __OFADD__(v14, v15);
  uint64_t v17 = v14 + v15;
  if (v16)
  {
    __break(1u);
    goto LABEL_48;
  }
  BOOL v16 = __OFADD__(v17, v81);
  uint64_t v18 = v17 + v81;
  if (v16)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  uint64_t v19 = v78 & 1;
  if (v13 != v18)
  {
    size_t v35 = v13;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    if (!v19)
    {
      if ((unint64_t)(v10 - 0x1000000000000000) >> 61 != 7)
      {
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
      v10 *= 8;
    }
    if (!v5)
    {
      if ((unint64_t)(v11 - 0x1000000000000000) >> 61 != 7)
      {
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
      v11 *= 8;
    }
    uint64_t v36 = v10 + v11;
    if (!__OFADD__(v10, v11))
    {
      BOOL v16 = __OFADD__(v36, v12);
      size_t v37 = v36 + v12;
      if (!v16)
      {
        size_t v82 = v37;
        v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v38);
        swift_bridgeObjectRelease();
        v39._countAndFlagsBits = 0x203A746F67202CLL;
        v39._object = (void *)0xE700000000000000;
        String.append(_:)(v39);
        size_t v82 = v35;
        v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v40);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
        swift_allocError();
        *long long v41 = 0xD00000000000005FLL;
        v41[1] = 0x8000000260BFF720;
        return swift_willThrow();
      }
      goto LABEL_52;
    }
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  uint64_t v76 = v4;
  LODWORD(v72) = v80 & 1;
  uint64_t v73 = v79;
  size_t v20 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  unint64_t v5 = v10;
  char v74 = v19;
  if (v19) {
    goto LABEL_18;
  }
  if ((unint64_t)(v10 - 0x1000000000000000) >> 61 != 7) {
    goto LABEL_53;
  }
  unint64_t v5 = 8 * v10;
LABEL_18:
  uint64_t v68 = a4;
  uint64_t v69 = v12;
  uint64_t v21 = (2 * *(void *)(v20 + 16)) | 1;
  uint64_t v22 = specialized Collection.prefix(_:)(v5, v20, v20 + 32, 0, v21);
  uint64_t v24 = v23;
  uint64_t v12 = v25;
  unint64_t v27 = v26;
  a2 = specialized Collection.dropFirst(_:)(v5, v20, v20 + 32, 0, v21);
  uint64_t v70 = v28;
  unint64_t v5 = v29;
  uint64_t v31 = v30;
  swift_retain();
  uint64_t v32 = specialized Share.init<A>(from:parameter:)(v22, v24, v12, v27, v10, v74);
  if (v4) {
    return swift_unknownObjectRelease();
  }
  uint64_t v76 = v32;
  uint64_t v42 = v73;
  if (!v72)
  {
    if ((unint64_t)(v73 - 0x1000000000000000) >> 61 == 7)
    {
      uint64_t v42 = 8 * v73;
      goto LABEL_33;
    }
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
LABEL_33:
  char v67 = v33;
  uint64_t v43 = specialized Collection.prefix(_:)(v42, a2, v70, v5, v31);
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  unint64_t v75 = v48;
  uint64_t v49 = specialized Collection.dropFirst(_:)(v42, a2, v70, v5, v31);
  uint64_t v71 = v50;
  uint64_t v52 = v51;
  uint64_t v54 = v53;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v12 = specialized Share.init<A>(from:parameter:)(v43, v45, v47, v75, v73, v72);
  char v56 = v55;
  if (v69 > 0)
  {
    char v74 = v55;
    uint64_t v57 = v49;
    a2 = specialized Collection.prefix(_:)(v69, v49, v71, v52, v54);
    uint64_t v73 = v58;
    uint64_t v60 = v59;
    unint64_t v62 = v61;
    specialized Collection.dropFirst(_:)(v69, v57, v71, v52, v54);
    unint64_t v5 = v62;
    if ((v62 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
LABEL_36:
      specialized _copyCollectionToContiguousArray<A>(_:)(a2, v73, v60, v5);
      goto LABEL_43;
    }
    uint64_t v72 = v60;
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v65 = swift_dynamicCastClass();
    if (!v65)
    {
      swift_unknownObjectRelease();
      uint64_t v65 = MEMORY[0x263F8EE78];
    }
    uint64_t v66 = *(void *)(v65 + 16);
    swift_release();
    if (!__OFSUB__(v62 >> 1, v60))
    {
      if (v66 == (v62 >> 1) - v60)
      {
        uint64_t v63 = swift_dynamicCastClass();
        if (!v63)
        {
          swift_unknownObjectRelease();
          uint64_t v64 = MEMORY[0x263F8EE78];
          goto LABEL_44;
        }
LABEL_43:
        uint64_t v64 = v63;
LABEL_44:
        char v56 = v74;
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        goto LABEL_45;
      }
      goto LABEL_58;
    }
LABEL_57:
    __break(1u);
LABEL_58:
    swift_unknownObjectRelease();
    uint64_t v60 = v72;
    goto LABEL_36;
  }
  swift_bridgeObjectRetain();
  swift_unknownObjectRelease();
  uint64_t v64 = 0;
LABEL_45:
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)uint64_t v68 = v76;
  *(unsigned char *)(v68 + 8) = v67 & 1;
  *(void *)(v68 + 16) = v12;
  *(unsigned char *)(v68 + 24) = v56 & 1;
  *(void *)(v68 + 32) = v64;
  return result;
}

uint64_t specialized static SumVectorType.encodedLengthFrom(bitWidth:measurementLength:)(uint64_t result, uint64_t a2)
{
  if (result >= 1 && a2 >= 1)
  {
    uint64_t v2 = result * a2;
    if ((unsigned __int128)(result * (__int128)a2) >> 64 == (result * a2) >> 63)
    {
      if ((unint64_t)result <= 0x3F) {
        return v2;
      }
      unint64_t v10 = 0;
      unint64_t v11 = 0xE000000000000000;
      _StringGuts.grow(_:)(51);
      v5._countAndFlagsBits = 0xD000000000000021;
      v5._object = (void *)0x8000000260BFF980;
      String.append(_:)(v5);
      v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v6);
      swift_bridgeObjectRelease();
      v7._countAndFlagsBits = 0x74694278616D202CLL;
      v7._object = (void *)0xEE003D6874646957;
      String.append(_:)(v7);
    }
    else
    {
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease();
      unint64_t v10 = 0xD000000000000013;
      unint64_t v11 = 0x8000000260BFF9B0;
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      v4._countAndFlagsBits = 0xD000000000000014;
      v4._object = (void *)0x8000000260BFF9D0;
      String.append(_:)(v4);
    }
    v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v9 = v10;
    *(void *)(v9 + 8) = v11;
    *(unsigned char *)(v9 + 16) = 2;
    swift_willThrow();
    return v2;
  }
  __break(1u);
  return result;
}

char *specialized SumVectorType.encode(measurement:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  Swift::String v3 = a2;
  Swift::String v4 = a1;
  uint64_t v5 = v2[1];
  if (!a1)
  {
    if (!v5) {
      goto LABEL_6;
    }
LABEL_5:
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = 540877088;
    v7._object = (void *)0xE400000000000000;
    String.append(_:)(v7);
    v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 32;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v10 = 0xD000000000000020;
    *(void *)(v10 + 8) = 0x8000000260BFF8B0;
    *(unsigned char *)(v10 + 16) = 2;
    return (char *)swift_willThrow();
  }
  if (a2 - a1 != v5) {
    goto LABEL_5;
  }
LABEL_6:
  uint64_t v12 = v2[5];
  uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *v2 & ~(*v2 >> 63), 0, MEMORY[0x263F8EE78]);
  Swift::String v40 = result;
  uint64_t v13 = 1 << v12;
  if ((unint64_t)v12 >= 0x40) {
    uint64_t v13 = 0;
  }
  if ((unint64_t)v12 > 0x40) {
    uint64_t v13 = 0;
  }
  uint64_t v37 = v12;
  unint64_t v38 = v13;
  uint64_t v36 = v3;
  if (v4)
  {
    if (v3) {
      goto LABEL_15;
    }
LABEL_18:
    while (1)
    {
      unsigned __int8 v15 = *v4;
      uint64_t v14 = v4 + 1;
      unint64_t v16 = v15;
      if (v38 < v15) {
        break;
      }
      uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12 & ~(v12 >> 63), 0, MEMORY[0x263F8EE78]);
      uint64_t v17 = result;
      if (v12 >= 65)
      {
        _StringGuts.grow(_:)(25);
        swift_bridgeObjectRelease();
        v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v27);
        swift_bridgeObjectRelease();
        v28._countAndFlagsBits = 2113056;
        v28._object = (void *)0xE300000000000000;
        String.append(_:)(v28);
        v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v29);
        swift_bridgeObjectRelease();
        unint64_t v30 = 0x8000000260BFEE90;
        lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
        swift_allocError();
        *(void *)uint64_t v31 = 0xD000000000000012;
        char v32 = 2;
        goto LABEL_39;
      }
      if (v12 < 0)
      {
        __break(1u);
        return result;
      }
      Swift::String v39 = v14;
      if (v12)
      {
        unint64_t v18 = v16;
        do
        {
          unint64_t v19 = ((uint64_t)(v18 << 63) >> 63) & 0xFFFFFFFE00000001;
          unint64_t v20 = ((unint64_t)-(uint64_t)(v19 | (v19 << 32)) * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
          if (__CFADD__(-(uint64_t)v19, v19))
          {
            if (v20 > 0xFFFFFFFEFFFFFFFFLL) {
              unint64_t v20 = 0;
            }
            else {
              ++v20;
            }
          }
          unint64_t v22 = *((void *)v17 + 2);
          unint64_t v21 = *((void *)v17 + 3);
          if (v22 >= v21 >> 1) {
            uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v17);
          }
          *((void *)v17 + 2) = v22 + 1;
          *(void *)&v17[8 * v22 + 32] = v20;
          v18 >>= 1;
          --v12;
        }
        while (v12);
      }
      else
      {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        _StringGuts.grow(_:)(39);
        swift_bridgeObjectRelease();
        v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v33);
        swift_bridgeObjectRelease();
        v34._countAndFlagsBits = 0x6962206874697720;
        v34._object = (void *)0xEF3D687464695774;
        String.append(_:)(v34);
        v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v35);
        swift_bridgeObjectRelease();
        unint64_t v30 = 0x8000000260BFEE70;
        lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
        swift_allocError();
        *(void *)uint64_t v31 = 0xD000000000000014;
        char v32 = 1;
LABEL_39:
        *(void *)(v31 + 8) = v30;
        *(unsigned char *)(v31 + 16) = v32;
        swift_willThrow();
        swift_bridgeObjectRelease();
        return (char *)swift_bridgeObjectRelease();
      }
      specialized Array.append<A>(contentsOf:)((uint64_t)v17);
      Swift::String v3 = v36;
      uint64_t v12 = v37;
      Swift::String v4 = v39;
      if (v36)
      {
LABEL_15:
        if (v4 == v3) {
          return v40;
        }
      }
    }
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._countAndFlagsBits = 0x646957746962202CLL;
    v24._object = (void *)0xEB000000003D6874;
    String.append(_:)(v24);
    v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v26 = 0xD000000000000016;
    *(void *)(v26 + 8) = 0x8000000260BFF8E0;
    *(unsigned char *)(v26 + 16) = 1;
    swift_willThrow();
    return (char *)swift_bridgeObjectRelease();
  }
  if (v3)
  {
    Swift::String v4 = 0;
    goto LABEL_18;
  }
  return result;
}

uint64_t specialized SumVectorType.truncate(measurement:)(uint64_t a1)
{
  int64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = *v1;
  if (v3 != *v1)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 540877088;
    v10._object = (void *)0xE400000000000000;
    String.append(_:)(v10);
    v22[3] = v4;
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    unint64_t v8 = 0x8000000260BFEB20;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v12 = 0xD00000000000001BLL;
    *(void *)(v12 + 8) = 0x8000000260BFEB20;
    *(unsigned char *)(v12 + 16) = 2;
    swift_willThrow();
    return v8;
  }
  uint64_t v5 = v2;
  uint64_t v7 = v1[5];
  if (v7 == 1)
  {
    swift_bridgeObjectRetain();
    return a1;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1[1] & ~((uint64_t)v1[1] >> 63), 0, MEMORY[0x263F8EE78]);
  if (v7)
  {
    unint64_t v8 = result;
    if (v7 < 1 || !v3) {
      return v8;
    }
    uint64_t v14 = 0;
    BOOL v15 = 1;
    while (1)
    {
      uint64_t v16 = v14 + v7;
      int64_t v17 = __OFADD__(v14, v7) ? ((v14 + v7) >> 63) ^ 0x8000000000000000 : v14 + v7;
      if (__OFADD__(v14, v7)) {
        break;
      }
      if (v16 < v14) {
        goto LABEL_25;
      }
      if (!v15) {
        goto LABEL_26;
      }
      if (v14 < 0) {
        goto LABEL_27;
      }
      if (v3 < v16) {
        goto LABEL_28;
      }
      unint64_t v18 = (2 * v16) | 1;
      swift_bridgeObjectRetain();
      uint64_t result = specialized FieldElement.init(inputVector:)(a1 + 32, v14, v18, v22);
      if (v5)
      {
        swift_bridgeObjectRelease();
        return v8;
      }
      unint64_t v19 = v22[0];
      unint64_t v21 = *(void *)(v8 + 16);
      unint64_t v20 = *(void *)(v8 + 24);
      if (v21 >= v20 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1, (char *)v8);
        unint64_t v8 = result;
      }
      *(void *)(v8 + 16) = v21 + 1;
      *(void *)(v8 + 8 * v21 + 32) = v19;
      BOOL v15 = v3 >= v17;
      uint64_t v14 = v17;
      if (v17 >= v3) {
        return v8;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized Prio3PublicShare.init<A>(from:parameter:)@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, char a3@<W2>, int64_t a4@<X3>, size_t *a5@<X8>)
{
  if ((a3 & 1) == 0)
  {
    *a5 = 0;
    return result;
  }
  if ((unint64_t)(a4 - 0x400000000000000) >> 59 != 31)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v7 = 32 * a4;
  if (!result)
  {
    if (!v7) {
      goto LABEL_10;
    }
    unint64_t v8 = 0;
LABEL_9:
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 2107936;
    v10._object = (void *)0xE300000000000000;
    String.append(_:)(v10);
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = 0x203A746F67202CLL;
    v12._object = (void *)0xE700000000000000;
    String.append(_:)(v12);
    v17[4] = v8;
    v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    void *v14 = 0xD000000000000060;
    v14[1] = 0x8000000260BFF780;
    return swift_willThrow();
  }
  unint64_t v8 = a2 - result;
  if (v7 != a2 - result) {
    goto LABEL_9;
  }
LABEL_10:
  uint64_t result = specialized _copyCollectionToContiguousArray<A>(_:)(result, a2);
  uint64_t v15 = (2 * *(void *)(result + 16)) | 1;
  v17[0] = result;
  v17[1] = result + 32;
  v17[2] = 0;
  v17[3] = v15;
  if ((a4 & 0x8000000000000000) == 0)
  {
    size_t v16 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF4SeedVs5NeverOTg50118_s4VDAF16Prio3PublicShareV4from9parameterACyxq_Gqd___Sb19isJointRandRequired_Si16numOfAggregatorstSgtKcSkRd__s5UInt8V7b12Rtd__lufcAA4E8VSiXEfU_s10ArraySliceVys5UInt8VGSiTf1cn_n(0, a4, v17, 32);
    uint64_t result = swift_unknownObjectRelease();
    *a5 = v16;
    return result;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t specialized Prio3PublicShare.encodedLength.getter(uint64_t result)
{
  uint64_t v1 = result;
  if (!result) {
    return v1;
  }
  uint64_t v2 = *(void *)(result + 16);
  if (!v2)
  {
    unint64_t v4 = (char *)MEMORY[0x263F8EE78];
    uint64_t v8 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (v8) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = 0;
  unint64_t v4 = (char *)MEMORY[0x263F8EE78];
  do
  {
    uint64_t v5 = *(void *)(*(void *)(v1 + 8 * v3 + 32) + 16);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v4 + 2) + 1, 1, v4);
    }
    unint64_t v7 = *((void *)v4 + 2);
    unint64_t v6 = *((void *)v4 + 3);
    if (v7 >= v6 >> 1) {
      unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1, v4);
    }
    ++v3;
    *((void *)v4 + 2) = v7 + 1;
    *(void *)&v4[8 * v7 + 32] = v5;
  }
  while (v2 != v3);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v8 = *((void *)v4 + 2);
  if (!v8)
  {
LABEL_15:
    uint64_t v1 = 0;
LABEL_16:
    swift_bridgeObjectRelease();
    return v1;
  }
LABEL_10:
  uint64_t v1 = 0;
  Swift::String v9 = (uint64_t *)(v4 + 32);
  while (1)
  {
    uint64_t v10 = *v9++;
    BOOL v11 = __OFADD__(v1, v10);
    v1 += v10;
    if (v11) {
      break;
    }
    if (!--v8) {
      goto LABEL_16;
    }
  }
  __break(1u);
  return result;
}

void *specialized Prio3.splitSeedBytes<A>(_:)(uint64_t a1, unint64_t a2)
{
  long long v6 = *((_OWORD *)v2 + 5);
  long long v42 = *((_OWORD *)v2 + 4);
  long long v43 = v6;
  long long v44 = *((_OWORD *)v2 + 6);
  long long v7 = *((_OWORD *)v2 + 1);
  v39[0] = *(_OWORD *)v2;
  v39[1] = v7;
  long long v8 = *((_OWORD *)v2 + 3);
  long long v40 = *((_OWORD *)v2 + 2);
  long long v41 = v8;
  Swift::String v9 = (void *)a2;
  uint64_t v10 = a1;
  uint64_t v11 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v11) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_88:
        __break(1u);
        JUMPOUT(0x260BB227CLL);
      }
      uint64_t v11 = (int)v11;
LABEL_6:
      uint64_t v15 = *v2;
      uint64_t v16 = *v2 - 1;
      if (__OFSUB__(*v2, 1))
      {
        __break(1u);
        goto LABEL_60;
      }
      if (*v2 + 0x3FFFFFFFFFFFFFFFLL < 0)
      {
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }
      uint64_t v17 = (2 * v16) | 1;
      if (v2[4] <= 0) {
        uint64_t v15 = 0;
      }
      BOOL v14 = __OFADD__(v17, v15);
      uint64_t v18 = v17 + v15;
      if (v14) {
        goto LABEL_61;
      }
      if ((unint64_t)(v18 - 0x400000000000000) >> 59 != 31)
      {
LABEL_62:
        __break(1u);
        goto LABEL_63;
      }
      if (v11 != 32 * v18)
      {
LABEL_63:
        __break(1u);
        goto LABEL_64;
      }
      outlined copy of Data._Representation(a1, a2);
      unint64_t v19 = specialized _copyCollectionToContiguousArray<A>(_:)(v10, (unint64_t)v9);
      uint64_t v20 = outlined consume of Data._Representation(v10, (unint64_t)v9);
      uint64_t v22 = (2 * v19[2]) | 1;
      Swift::String v35 = v19;
      uint64_t v36 = v19 + 4;
      uint64_t v37 = 0;
      unint64_t v38 = v22;
      if (v16 < 0)
      {
LABEL_64:
        __break(1u);
        goto LABEL_65;
      }
      MEMORY[0x270FA5388](v20, v21);
      v34[2] = &v35;
      v34[3] = 32;
      v34[4] = v39;
      uint64_t v23 = v16;
      uint64_t v16 = 0;
      Swift::String v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF4SeedV16measurementShare_AI05proofG0AISg14jointRandBlindts5NeverOTg5(partial apply for specialized closure #1 in Prio3.splitSeedBytes<A>(_:), (uint64_t)v34, 0, v23);
      if ((uint64_t)v40 >= 1)
      {
        uint64_t v24 = v37;
        uint64_t v10 = v38;
        int64_t v25 = v38 >> 1;
        unint64_t v26 = (v38 >> 1) - v37;
        if (__OFSUB__(v38 >> 1, v37))
        {
LABEL_72:
          __break(1u);
          goto LABEL_73;
        }
        uint64_t v16 = (uint64_t)v35;
        uint64_t v3 = (uint64_t)v36;
        int64_t v27 = v38 >> 1;
        if (v26 >= 0x20 && (int64_t v27 = v37 + 32, __OFADD__(v37, 32)))
        {
          __break(1u);
        }
        else
        {
          if (v27 < v37)
          {
LABEL_73:
            __break(1u);
            goto LABEL_74;
          }
          if (v25 < v37)
          {
LABEL_74:
            __break(1u);
            goto LABEL_75;
          }
          if (v25 < v27)
          {
LABEL_75:
            __break(1u);
            goto LABEL_76;
          }
          if (v27 < 0)
          {
LABEL_76:
            __break(1u);
            goto LABEL_77;
          }
          if (v26 < 0x20)
          {
LABEL_26:
            if (v25 < v37)
            {
LABEL_78:
              __break(1u);
LABEL_79:
              __break(1u);
              goto LABEL_80;
            }
            uint64_t v37 = v25;
            if ((v38 & 1) == 0)
            {
              swift_unknownObjectRetain();
LABEL_29:
              specialized _copyCollectionToContiguousArray<A>(_:)(v16, v3, v24, v10 & 1 | (2 * v27));
LABEL_37:
              swift_unknownObjectRelease();
              goto LABEL_38;
            }
            uint64_t v4 = type metadata accessor for __ContiguousArrayStorageBase();
            swift_unknownObjectRetain_n();
            uint64_t v28 = swift_dynamicCastClass();
            if (!v28)
            {
              swift_unknownObjectRelease();
              uint64_t v28 = MEMORY[0x263F8EE78];
            }
            int64_t v5 = *(void *)(v28 + 16);
            swift_release();
            if (!__OFSUB__(v27, v24))
            {
              if (v5 == v27 - v24)
              {
                if (!swift_dynamicCastClass()) {
                  swift_unknownObjectRelease();
                }
                goto LABEL_37;
              }
              goto LABEL_86;
            }
LABEL_85:
            __break(1u);
LABEL_86:
            swift_unknownObjectRelease();
            goto LABEL_29;
          }
          if (!__OFADD__(v37, 32))
          {
            if (v25 < v37 + 32)
            {
LABEL_77:
              __break(1u);
              goto LABEL_78;
            }
            int64_t v25 = v37 + 32;
            goto LABEL_26;
          }
        }
        __break(1u);
        goto LABEL_85;
      }
LABEL_38:
      uint64_t v10 = v37;
      LOBYTE(v3) = v38;
      int64_t v29 = v38 >> 1;
      unint64_t v30 = (v38 >> 1) - v37;
      if (__OFSUB__(v38 >> 1, v37))
      {
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
        goto LABEL_67;
      }
      uint64_t v16 = (uint64_t)v35;
      uint64_t v4 = (uint64_t)v36;
      int64_t v5 = v38 >> 1;
      if (v30 >= 0x20)
      {
        int64_t v5 = v37 + 32;
        if (__OFADD__(v37, 32)) {
          goto LABEL_79;
        }
      }
      if (v5 < v37) {
        goto LABEL_66;
      }
      if (v29 < v37)
      {
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
      if (v29 < v5)
      {
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
      if (v5 < 0)
      {
LABEL_69:
        __break(1u);
        goto LABEL_70;
      }
      if (v30 < 0x20) {
        goto LABEL_49;
      }
      if (__OFADD__(v37, 32))
      {
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
        goto LABEL_82;
      }
      if (v29 < v37 + 32)
      {
LABEL_70:
        __break(1u);
        goto LABEL_71;
      }
      int64_t v29 = v37 + 32;
LABEL_49:
      if (v29 < v37)
      {
LABEL_71:
        __break(1u);
        goto LABEL_72;
      }
      if ((v38 & 1) == 0)
      {
LABEL_51:
        specialized _copyCollectionToContiguousArray<A>(_:)(v16, v4, v10, v3 & 1 | (2 * v5));
        goto LABEL_58;
      }
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain_n();
      uint64_t v31 = swift_dynamicCastClass();
      if (!v31)
      {
        swift_unknownObjectRelease();
        uint64_t v31 = MEMORY[0x263F8EE78];
      }
      uint64_t v32 = *(void *)(v31 + 16);
      swift_release();
      if (__OFSUB__(v5, v10)) {
        goto LABEL_81;
      }
      if (v32 != v5 - v10)
      {
LABEL_82:
        swift_unknownObjectRelease();
        goto LABEL_51;
      }
      if (!swift_dynamicCastClass()) {
        swift_unknownObjectRelease();
      }
LABEL_58:
      swift_unknownObjectRelease();
      return v9;
    case 2uLL:
      uint64_t v13 = *(void *)(a1 + 16);
      uint64_t v12 = *(void *)(a1 + 24);
      BOOL v14 = __OFSUB__(v12, v13);
      uint64_t v11 = v12 - v13;
      if (!v14) {
        goto LABEL_6;
      }
      goto LABEL_88;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v11 = BYTE6(a2);
      goto LABEL_6;
  }
}

void *specialized Prio3.jointRandFrom(aggregatorID:nonce:measurement:publicShare:inputShare:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  outlined init with take of Prio3PrepareStateDecodableParameter<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>?(a5 + 32, (uint64_t)v20, &demangling cache variable for type metadata for Seed?);
  uint64_t v10 = *(void *)(v5 + 32);
  if (v10 < 1)
  {
    outlined init with take of Prio3PrepareStateDecodableParameter<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>?((uint64_t)v20, (uint64_t)&v22, &demangling cache variable for type metadata for Seed?);
    if (!(v22 | a4)) {
      return 0;
    }
    _StringGuts.grow(_:)(103);
    v17._object = (void *)0x8000000260BFF470;
    v17._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v17);
    v18._countAndFlagsBits = 0xD000000000000065;
    v18._object = (void *)0x8000000260BFF630;
    String.append(_:)(v18);
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v19 = 0;
    *(void *)(v19 + 8) = 0xE000000000000000;
    goto LABEL_10;
  }
  outlined init with take of Prio3PrepareStateDecodableParameter<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>?((uint64_t)v20, (uint64_t)&v21, &demangling cache variable for type metadata for Seed?);
  uint64_t v11 = v21;
  if (v21)
  {
    if (a4)
    {
      uint64_t v12 = (2 * *(void *)(a3 + 16)) | 1;
      swift_bridgeObjectRetain();
      uint64_t v13 = specialized static JointRandomness.updateJointRandParts(_:commitment:blind:aggregatorID:nonce:)(a4, a3, a3 + 32, 0, v12, v11, a1, a2);
      swift_bridgeObjectRelease();
      uint64_t v14 = *(void *)(v5 + 8);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VerificationJointRandomness<Prio3<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>, Field64>);
      uint64_t result = (void *)swift_allocObject();
      result[4] = 0;
      result[5] = v10;
      result[6] = v14;
      result[2] = v13;
      result[3] = 0;
      return result;
    }
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type Prio3Error and conformance Prio3Error();
    swift_allocError();
    *(void *)uint64_t v19 = 0xD000000000000038;
    *(void *)(v19 + 8) = 0x8000000260BFF6E0;
LABEL_10:
    *(unsigned char *)(v19 + 16) = 1;
    return (void *)swift_willThrow();
  }
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type Prio3Error and conformance Prio3Error();
  swift_allocError();
  *(void *)uint64_t v16 = 0xD000000000000037;
  *(void *)(v16 + 8) = 0x8000000260BFF6A0;
  *(unsigned char *)(v16 + 16) = 0;
  return (void *)swift_willThrow();
}

void *specialized Prio3.inputSharesFrom(leaderMeasurementShare:leaderProofShare:leaderJointBlind:helperShares:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *v4 & ~(*v4 >> 63), 0, MEMORY[0x263F8EE78]);
  unint64_t v11 = v9[2];
  unint64_t v10 = v9[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11 >= v10 >> 1) {
    Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v9);
  }
  v9[2] = v11 + 1;
  uint64_t v12 = &v9[5 * v11];
  v12[4] = a1;
  *((unsigned char *)v12 + 40) = 0;
  v12[6] = a2;
  *((unsigned char *)v12 + 56) = 0;
  v12[8] = a3;
  uint64_t v13 = *(void *)(a4 + 16);
  if (v13)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = 40 * v11 + 72;
    int64_t v15 = v11 + 2;
    uint64_t v16 = (uint64_t *)(a4 + 48);
    do
    {
      uint64_t v18 = *(v16 - 2);
      uint64_t v17 = *(v16 - 1);
      uint64_t v19 = *v16;
      unint64_t v20 = v9[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v15 - 1 >= v20 >> 1) {
        Swift::String v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v15, 1, v9);
      }
      v16 += 3;
      v9[2] = v15;
      uint64_t v21 = (char *)v9 + v14;
      *(void *)uint64_t v21 = v18;
      v21[8] = 1;
      *((void *)v21 + 2) = v17;
      v21[24] = 1;
      v14 += 40;
      ++v15;
      *((void *)v21 + 4) = v19;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
  }
  return v9;
}

uint64_t specialized closure #1 in Prio3.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = specialized static VDAFProtocol.domainSeparationTag(usage:)(1u);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t result = swift_initStackObject();
  *(_OWORD *)(result + 16) = xmmword_260BF9FD0;
  unint64_t v8 = *(void *)(a2 + 8);
  if ((v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v8 > 0xFF)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  *(unsigned char *)(result + 32) = v8;
  if ((a3 & 0x8000000000000000) != 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (a3 <= 0xFF)
  {
    *(unsigned char *)(result + 33) = a3;
    uint64_t v9 = specialized static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(a1, v6, result);
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    return v9;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t specialized Prio3PrepareShare.encode<A>(into:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t *)result;
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v8 = *(void *)(a2 + 8 * i + 32);
      specialized FieldElement.encode<A>(into:)(v4, v8);
    }
    uint64_t result = swift_bridgeObjectRelease();
  }
  if (a3)
  {
    uint64_t v9 = swift_bridgeObjectRetain();
    return specialized Array.append<A>(contentsOf:)(v9);
  }
  return result;
}

uint64_t outlined release of Prio3InputShare<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of Prio3PrepareState<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of PrepareTransition<Prio3<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if ((a8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t specialized SumVectorType.decode(data:numOfMeasurements:)(uint64_t a1)
{
  if (*(void *)(a1 + 16) == *(void *)(v1 + 8)) {
    return specialized static FieldElement.elementsToIntegers(_:)(a1);
  }
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 540877088;
  v4._object = (void *)0xE400000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
  swift_allocError();
  *(void *)uint64_t v6 = 0xD000000000000016;
  *(void *)(v6 + 8) = 0x8000000260BFE7F0;
  *(unsigned char *)(v6 + 16) = 2;
  return swift_willThrow();
}

uint64_t specialized Prio3.unshard<A>(_:numOfMeasurements:parameter:)(uint64_t result)
{
  uint64_t v3 = *(void *)(result + 16);
  if (!v3) {
    goto LABEL_31;
  }
  long long v22 = *(_OWORD *)(v1 + 16);
  if ((*((void *)&v22 + 1) & 0x8000000000000000) != 0)
  {
LABEL_32:
    __break(1u);
  }
  else
  {
    uint64_t v4 = v2;
    uint64_t v5 = result;
    if (*((void *)&v22 + 1))
    {
      uint64_t v6 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v6 + 16) = *((void *)&v22 + 1);
      bzero((void *)(v6 + 32), 8 * *((void *)&v22 + 1));
    }
    else
    {
      uint64_t v6 = MEMORY[0x263F8EE78];
    }
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        goto LABEL_30;
      }
      uint64_t v9 = *(void *)(v5 + 32 + 8 * v7);
      uint64_t v10 = *(void *)(v6 + 16);
      if (v10 != *(void *)(v9 + 16))
      {
LABEL_24:
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(28);
        swift_bridgeObjectRelease();
        v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v17);
        swift_bridgeObjectRelease();
        v18._countAndFlagsBits = 540877088;
        v18._object = (void *)0xE400000000000000;
        String.append(_:)(v18);
        v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type FieldElementError and conformance FieldElementError();
        swift_allocError();
        *(void *)uint64_t v20 = 0xD000000000000020;
        *(void *)(v20 + 8) = 0x8000000260BFE7C0;
        *(unsigned char *)(v20 + 16) = 1;
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_26:
        swift_bridgeObjectRelease();
        return v5;
      }
      if (v10)
      {
        uint64_t result = swift_bridgeObjectRetain();
        uint64_t v11 = 4;
        while (1)
        {
          unint64_t v13 = *(void *)(v9 + 8 * v11);
          unint64_t v12 = *(void *)(v6 + 8 * v11);
          if (v13)
          {
            BOOL v14 = v13 <= 0xFFFFFFFF00000001;
            unint64_t v15 = 0xFFFFFFFF00000001 - v13;
            if (!v14)
            {
              __break(1u);
LABEL_29:
              __break(1u);
LABEL_30:
              __break(1u);
LABEL_31:
              __break(1u);
              goto LABEL_32;
            }
            if (v12 >= v15)
            {
              v12 -= v15;
            }
            else
            {
              BOOL v14 = v15 <= 0xFFFFFFFF00000001;
              unint64_t v16 = 0xFFFFFFFF00000001 - v15;
              if (!v14) {
                goto LABEL_29;
              }
              BOOL v14 = __CFADD__(v12, v16);
              v12 += v16;
              if (v14)
              {
                __break(1u);
                goto LABEL_24;
              }
            }
          }
          *(void *)(v6 + 8 * v11++) = v12;
          if (v11 - v10 == 4)
          {
            uint64_t result = swift_bridgeObjectRelease();
            break;
          }
        }
      }
      uint64_t v7 = v8;
    }
    while (v8 != v3);
    swift_bridgeObjectRelease();
    uint64_t v21 = specialized SumVectorType.decode(data:numOfMeasurements:)(v6);
    if (v4) {
      goto LABEL_26;
    }
    uint64_t v5 = v21;
    swift_bridgeObjectRelease();
    return v5;
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in Prio3.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:)(uint64_t a1)
{
  uint64_t v3 = *(_OWORD **)(v1 + 16);
  unint64_t v2 = *(void *)(v1 + 24);
  long long v4 = v3[5];
  v8[4] = v3[4];
  v8[5] = v4;
  v8[6] = v3[6];
  long long v5 = v3[1];
  v8[0] = *v3;
  v8[1] = v5;
  long long v6 = v3[3];
  v8[2] = v3[2];
  v8[3] = v6;
  return specialized closure #1 in Prio3.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:)(a1, (uint64_t)v8, v2);
}

uint64_t outlined init with take of Prio3PrepareStateDecodableParameter<SumVectorType<Field64, UnsafeRawBufferPointer>, XofHmacSha256Aes128>?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for specialized closure #1 in Prio3.splitSeedBytes<A>(_:)@<X0>(uint64_t *a1@<X8>)
{
  long long v4 = (void *)v1[2];
  uint64_t v5 = v1[3];
  long long v6 = (_OWORD *)v1[4];
  long long v7 = v6[5];
  v13[4] = v6[4];
  uint64_t v13[5] = v7;
  v13[6] = v6[6];
  long long v8 = v6[1];
  v13[0] = *v6;
  v13[1] = v8;
  long long v9 = v6[3];
  v13[2] = v6[2];
  v13[3] = v9;
  uint64_t result = specialized closure #1 in Prio3.splitSeedBytes<A>(_:)(v4, v5, (uint64_t)v13);
  if (!v2)
  {
    *a1 = result;
    a1[1] = v11;
    a1[2] = v12;
  }
  return result;
}

uint64_t specialized closure #1 in Prio3.splitSeedBytes<A>(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v7 = a1[3];
  uint64_t v9 = specialized Collection.prefix(_:)(a2, *a1, v5, v8, v7);
  uint64_t v55 = v10;
  uint64_t v12 = v11;
  unint64_t v14 = v13;
  *a1 = specialized Collection.dropFirst(_:)(a2, v6, v5, v8, v7);
  a1[1] = v15;
  a1[2] = v16;
  a1[3] = v17;
  if ((v14 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_3:
    specialized _copyCollectionToContiguousArray<A>(_:)(v9, v55, v12, v14);
    goto LABEL_10;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  uint64_t v19 = swift_dynamicCastClass();
  if (!v19)
  {
    swift_unknownObjectRelease();
    uint64_t v19 = MEMORY[0x263F8EE78];
  }
  uint64_t v20 = *(void *)(v19 + 16);
  swift_release();
  if (__OFSUB__(v14 >> 1, v12))
  {
    __break(1u);
    goto LABEL_33;
  }
  if (v20 != (v14 >> 1) - v12)
  {
LABEL_33:
    swift_unknownObjectRelease();
    goto LABEL_3;
  }
  uint64_t v18 = swift_dynamicCastClass();
  if (!v18)
  {
    swift_unknownObjectRelease();
    uint64_t v18 = MEMORY[0x263F8EE78];
  }
LABEL_10:
  uint64_t v56 = v18;
  swift_unknownObjectRelease();
  uint64_t v21 = *a1;
  uint64_t v22 = a1[1];
  uint64_t v23 = a1[2];
  uint64_t v24 = a1[3];
  uint64_t v25 = specialized Collection.prefix(_:)(a2, *a1, v22, v23, v24);
  uint64_t v53 = v26;
  uint64_t v28 = v27;
  unint64_t v30 = v29;
  *a1 = specialized Collection.dropFirst(_:)(a2, v21, v22, v23, v24);
  a1[1] = v31;
  a1[2] = v32;
  a1[3] = v33;
  if ((v30 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_12:
    uint64_t v34 = a3;
    specialized _copyCollectionToContiguousArray<A>(_:)(v25, v53, v28, v30);
    goto LABEL_19;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  uint64_t v35 = swift_dynamicCastClass();
  if (!v35)
  {
    swift_unknownObjectRelease();
    uint64_t v35 = MEMORY[0x263F8EE78];
  }
  uint64_t v36 = *(void *)(v35 + 16);
  swift_release();
  if (__OFSUB__(v30 >> 1, v28))
  {
    __break(1u);
    goto LABEL_35;
  }
  if (v36 != (v30 >> 1) - v28)
  {
LABEL_35:
    swift_unknownObjectRelease();
    goto LABEL_12;
  }
  uint64_t v34 = a3;
  if (!swift_dynamicCastClass()) {
    swift_unknownObjectRelease();
  }
LABEL_19:
  swift_unknownObjectRelease();
  if (*(uint64_t *)(v34 + 32) <= 0) {
    return v56;
  }
  uint64_t v37 = *a1;
  uint64_t v38 = a1[1];
  uint64_t v39 = a1[2];
  uint64_t v40 = a1[3];
  uint64_t v41 = specialized Collection.prefix(_:)(a2, *a1, v38, v39, v40);
  uint64_t v54 = v42;
  uint64_t v58 = v43;
  unint64_t v45 = v44;
  *a1 = specialized Collection.dropFirst(_:)(a2, v37, v38, v39, v40);
  a1[1] = v46;
  a1[2] = v47;
  a1[3] = v48;
  if (v45)
  {
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    swift_unknownObjectRetain();
    uint64_t v50 = swift_dynamicCastClass();
    if (!v50)
    {
      swift_unknownObjectRelease();
      uint64_t v50 = MEMORY[0x263F8EE78];
    }
    uint64_t v51 = *(void *)(v50 + 16);
    swift_release();
    uint64_t v49 = v58;
    if (__OFSUB__(v45 >> 1, v58))
    {
      __break(1u);
    }
    else if (v51 == (v45 >> 1) - v58)
    {
      if (!swift_dynamicCastClass()) {
        swift_unknownObjectRelease();
      }
      goto LABEL_30;
    }
    swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRetain();
    uint64_t v49 = v58;
  }
  specialized _copyCollectionToContiguousArray<A>(_:)(v41, v54, v49, v45);
LABEL_30:
  swift_unknownObjectRelease();
  return v56;
}

uint64_t ParallelSum.arity.getter()
{
  return *(void *)v0;
}

uint64_t ParallelSum.degree.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t ParallelSum.inner.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 40));
}

uint64_t ParallelSum.count.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 44));
}

uint64_t ParallelSum.numOfCalls.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40))(*(void *)(a1 + 16));
}

uint64_t ParallelSum.init(inner:count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  if ((unsigned __int128)(a2 * (__int128)result) >> 64 == (a2 * result) >> 63)
  {
    *(void *)a5 = a2 * result;
    *((void *)a5 + 1) = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
    uint64_t v11 = type metadata accessor for ParallelSum();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(&a5[*(int *)(v11 + 40)], a1, a3);
    *(void *)&a5[*(int *)(v11 + 44)] = a2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for ParallelSum()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ParallelSum.evaluate<A>(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v125 = a2;
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  int64_t v124 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness, v12);
  long long v113 = (char *)&v90 - v13;
  uint64_t v129 = a4;
  uint64_t v14 = *(void *)(*(void *)(a4 + 8) + 8);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v17 = MEMORY[0x270FA5388](TupleTypeMetadata2, v16);
  long long v111 = (char *)&v90 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17, v19);
  long long v110 = (char *)&v90 - v20;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v109 = type metadata accessor for Range();
  long long v123 = *(char **)(v109 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v109, v21);
  long long v108 = (char *)&v90 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22, v24);
  long long v107 = (char *)&v90 - v25;
  uint64_t v106 = swift_getAssociatedTypeWitness();
  uint64_t v92 = *(void (***)(char *, uint64_t))(v106 - 8);
  uint64_t v27 = MEMORY[0x270FA5388](v106, v26);
  long long v105 = (char *)&v90 - v28;
  uint64_t v29 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v27, v30);
  uint64_t v32 = (char *)&v90 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = type metadata accessor for Optional();
  long long v97 = *(void (***)(char *, char *, uint64_t))(v91 - 8);
  uint64_t v34 = MEMORY[0x270FA5388](v91, v33);
  long long v120 = (char *)&v90 - v35;
  uint64_t v133 = v15;
  uint64_t v36 = *(void *)(v15 - 8);
  uint64_t v38 = MEMORY[0x270FA5388](v34, v37);
  long long v126 = (char *)&v90 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = MEMORY[0x270FA5388](v38, v40);
  long long v119 = (char *)&v90 - v42;
  MEMORY[0x270FA5388](v41, v43);
  v132 = (char *)&v90 - v44;
  uint64_t v45 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v114 = AssociatedTypeWitness;
  uint64_t v115 = a5;
  uint64_t v104 = v45;
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  uint64_t v127 = a1;
  uint64_t v134 = a3;
  uint64_t v130 = v14;
  uint64_t v46 = dispatch thunk of Collection.count.getter();
  uint64_t v47 = v128 + *(int *)(v125 + 40);
  uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v9 + 24);
  uint64_t v128 = v10;
  uint64_t v131 = v9;
  long long v117 = v48;
  uint64_t v118 = v9 + 24;
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v48)(v10, v9);
  if (!result)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  long long v116 = v32;
  BOOL v50 = v46 >= 0;
  if (result > 0) {
    BOOL v50 = v46 < 1;
  }
  if (!v50)
  {
    uint64_t v51 = v47;
    int64_t v52 = 0;
    uint64_t v53 = (void (**)(char *, uint64_t))(v36 + 8);
    long long v103 = (void (**)(char *, uint64_t, uint64_t))(v29 + 16);
    long long v102 = (unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
    long long v101 = (void (**)(char *, uint64_t))(v29 + 8);
    long long v122 = (void (**)(char *, char *, uint64_t))(v36 + 32);
    uint64_t v90 = (void (**)(char *, uint64_t))(v97 + 1);
    long long v97 = (void (**)(char *, char *, uint64_t))(v36 + 16);
    unint64_t v96 = (void (**)(char *, char *, uint64_t))(v123 + 32);
    uint64_t v95 = (void (**)(char *, uint64_t))(v123 + 8);
    uint64_t v94 = v131 + 64;
    v93 = (void (**)(char *, uint64_t))(v124 + 8);
    ++v92;
    uint64_t v100 = v46;
    uint64_t v99 = v51;
    uint64_t v98 = result;
    uint64_t v125 = v36 + 8;
    while (1)
    {
      unint64_t v54 = v52 + result;
      if (__OFADD__(v52, result)) {
        unint64_t v54 = ((v52 + result) >> 63) ^ 0x8000000000000000;
      }
      int64_t v124 = v54;
      uint64_t v55 = v119;
      uint64_t v56 = v127;
      uint64_t v58 = v133;
      uint64_t v57 = v134;
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      uint64_t v59 = (char *)*v53;
      (*v53)(v55, v58);
      v117(v128, v131);
      dispatch thunk of Collection.endIndex.getter();
      uint64_t v60 = v120;
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:limitedBy:)();
      long long v123 = v59;
      ((void (*)(char *, uint64_t))v59)(v55, v58);
      unint64_t v61 = v116;
      (*v103)(v116, v56, v57);
      if ((*v102)(v60, 1, v58) == 1)
      {
        unint64_t v62 = v126;
        uint64_t v63 = v134;
        dispatch thunk of Collection.endIndex.getter();
        (*v101)(v61, v63);
        (*v90)(v60, v91);
      }
      else
      {
        (*v101)(v61, v134);
        unint64_t v62 = v126;
        (*v122)(v126, v60, v133);
      }
      uint64_t v64 = v132;
      uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if ((result & 1) == 0) {
        break;
      }
      uint64_t v65 = TupleTypeMetadata2;
      uint64_t v66 = v110;
      char v67 = &v110[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v68 = *v97;
      uint64_t v69 = v133;
      (*v97)(v110, v64, v133);
      v68(v67, v62, v69);
      uint64_t v70 = v111;
      uint64_t v71 = &v111[*(int *)(v65 + 48)];
      v68(v111, v66, v69);
      v68(v71, v67, v69);
      uint64_t v72 = *v122;
      uint64_t v73 = v108;
      (*v122)(v108, v70, v69);
      char v74 = (void (*)(char *, uint64_t))v123;
      ((void (*)(char *, uint64_t))v123)(v71, v69);
      unint64_t v75 = &v70[*(int *)(v65 + 48)];
      v72(v70, v66, v69);
      v72(v75, v67, v69);
      uint64_t v76 = v109;
      v72(&v73[*(int *)(v109 + 36)], v75, v69);
      uint64_t v77 = v70;
      unsigned __int8 v78 = (void (**)(char *, uint64_t))v125;
      v74(v77, v69);
      uint64_t v79 = v107;
      (*v96)(v107, v73, v76);
      char v80 = v105;
      dispatch thunk of Collection.subscript.getter();
      (*v95)(v79, v76);
      uint64_t v81 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v131 + 64);
      uint64_t v82 = v106;
      uint64_t v83 = swift_getAssociatedConformanceWitness();
      unint64_t v84 = v113;
      v81(v80, v82, v83, v128, v131);
      uint64_t v85 = v114;
      dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
      uint64_t v86 = v85;
      uint64_t v53 = v78;
      (*v93)(v84, v86);
      unint64_t v87 = v80;
      uint64_t v88 = v132;
      (*v92)(v87, v82);
      v74(v126, v69);
      v74(v88, v69);
      int64_t v52 = v124;
      BOOL v89 = v100 >= v124;
      uint64_t result = v98;
      if (v98 > 0) {
        BOOL v89 = v124 >= v100;
      }
      if (v89) {
        return result;
      }
    }
    __break(1u);
    goto LABEL_17;
  }
  return result;
}

uint64_t ParallelSum.evaluate<A>(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  void (*v79)(uint64_t *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  void *v83;
  void (**v84)(char *, uint64_t);
  uint64_t v85;
  void (**v86)(char *, uint64_t);
  uint64_t v87;
  void (**v88)(char *, uint64_t);
  void (**v89)(char *, char *, uint64_t);
  void (**v90)(char *, char *, uint64_t);
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  void (**v95)(char *, uint64_t);
  unsigned int (**v96)(char *, uint64_t, uint64_t);
  void (**v97)(char *, uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t TupleTypeMetadata2;
  uint64_t (*v108)(uint64_t, uint64_t);
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t AssociatedConformanceWitness;
  void (**v113)(char *, char *, uint64_t);
  int64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;

  uint64_t v83 = a5;
  long long v117 = a4;
  uint64_t v8 = *(void *)(*(void *)(a4 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v11 = MEMORY[0x270FA5388](TupleTypeMetadata2, v10);
  uint64_t v106 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11, v13);
  long long v105 = (char *)&v83 - v14;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v104 = type metadata accessor for Range();
  uint64_t v114 = *(void *)(v104 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v104, v15);
  long long v103 = (char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16, v18);
  long long v102 = (char *)&v83 - v19;
  long long v101 = swift_getAssociatedTypeWitness();
  uint64_t v86 = *(void (***)(char *, uint64_t))(v101 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v101, v20);
  uint64_t v100 = (char *)&v83 - v22;
  long long v113 = *(void (***)(char *, char *, uint64_t))(a3 - 8);
  MEMORY[0x270FA5388](v21, v23);
  long long v119 = (char *)&v83 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = type metadata accessor for Optional();
  uint64_t v90 = *(void (***)(char *, char *, uint64_t))(v85 - 8);
  uint64_t v26 = MEMORY[0x270FA5388](v85, v25);
  long long v111 = (char *)&v83 - v27;
  int64_t v124 = AssociatedTypeWitness;
  uint64_t v28 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v30 = MEMORY[0x270FA5388](v26, v29);
  uint64_t v32 = (char *)&v83 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = MEMORY[0x270FA5388](v30, v33);
  long long v110 = (char *)&v83 - v35;
  MEMORY[0x270FA5388](v34, v36);
  long long v122 = (char *)&v83 - v37;
  uint64_t v39 = *(void *)(a2 + 16);
  uint64_t v38 = *(void *)(a2 + 24);
  uint64_t v40 = swift_getAssociatedTypeWitness();
  uint64_t v41 = swift_getAssociatedConformanceWitness();
  uint64_t v99 = v40;
  uint64_t v98 = v41;
  Polynomial.init()(v40, &v127);
  uint64_t v118 = a1;
  long long v123 = a3;
  long long v120 = v8;
  uint64_t v42 = dispatch thunk of Collection.count.getter();
  uint64_t v43 = &v121[*(int *)(a2 + 40)];
  long long v108 = *(uint64_t (**)(uint64_t, uint64_t))(v38 + 24);
  uint64_t v109 = v38 + 24;
  uint64_t result = v108(v39, v38);
  if (result)
  {
    uint64_t v115 = v39;
    long long v116 = v32;
    BOOL v45 = v42 >= 0;
    if (result > 0) {
      BOOL v45 = v42 < 1;
    }
    if (v45)
    {
LABEL_15:
      *uint64_t v83 = v127;
      return result;
    }
    uint64_t v46 = v38;
    int64_t v47 = 0;
    uint64_t v48 = v28;
    uint64_t v49 = (void (**)(char *, uint64_t))(v28 + 8);
    long long v97 = (void (**)(char *, uint64_t, uint64_t))(v113 + 2);
    unint64_t v96 = (unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
    uint64_t v95 = (void (**)(char *, uint64_t))(v113 + 1);
    long long v113 = (void (**)(char *, char *, uint64_t))(v48 + 32);
    unint64_t v84 = (void (**)(char *, uint64_t))(v90 + 1);
    uint64_t v90 = (void (**)(char *, char *, uint64_t))(v48 + 16);
    BOOL v89 = (void (**)(char *, char *, uint64_t))(v114 + 32);
    uint64_t v88 = (void (**)(char *, uint64_t))(v114 + 8);
    unint64_t v87 = v38 + 72;
    ++v86;
    uint64_t v94 = v38;
    v93 = v42;
    uint64_t v92 = v43;
    uint64_t v91 = result;
    while (1)
    {
      unint64_t v50 = v47 + result;
      if (__OFADD__(v47, result)) {
        unint64_t v50 = ((v47 + result) >> 63) ^ 0x8000000000000000;
      }
      uint64_t v114 = v50;
      uint64_t v51 = v110;
      uint64_t v52 = v118;
      uint64_t v53 = v123;
      dispatch thunk of Collection.startIndex.getter();
      uint64_t v54 = v46;
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      uint64_t v55 = (char *)*v49;
      (*v49)(v51, v124);
      v108(v115, v54);
      dispatch thunk of Collection.endIndex.getter();
      uint64_t v56 = v111;
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:limitedBy:)();
      long long v121 = v55;
      ((void (*)(char *, uint64_t))v55)(v51, v124);
      (*v97)(v119, v52, v53);
      if ((*v96)(v56, 1, v124) == 1)
      {
        uint64_t v57 = v116;
        uint64_t v58 = v119;
        uint64_t v59 = v123;
        dispatch thunk of Collection.endIndex.getter();
        (*v95)(v58, v59);
        (*v84)(v56, v85);
      }
      else
      {
        (*v95)(v119, v123);
        uint64_t v57 = v116;
        (*v113)(v116, v56, v124);
      }
      uint64_t v60 = v122;
      uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if ((result & 1) == 0) {
        break;
      }
      unint64_t v61 = v49;
      uint64_t v62 = TupleTypeMetadata2;
      uint64_t v63 = v105;
      uint64_t v64 = &v105[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v65 = *v90;
      uint64_t v66 = v124;
      (*v90)(v105, v60, v124);
      v65(v64, v57, v66);
      char v67 = v106;
      uint64_t v68 = &v106[*(int *)(v62 + 48)];
      v65(v106, v63, v66);
      v65(v68, v64, v66);
      uint64_t v69 = *v113;
      uint64_t v70 = v103;
      (*v113)(v103, v67, v66);
      ((void (*)(char *, uint64_t))v121)(v68, v66);
      uint64_t v71 = &v67[*(int *)(v62 + 48)];
      v69(v67, v63, v66);
      v69(v71, v64, v66);
      uint64_t v72 = v104;
      v69(&v70[*(int *)(v104 + 36)], v71, v66);
      uint64_t v73 = (void (*)(char *, uint64_t))v121;
      ((void (*)(char *, uint64_t))v121)(v67, v66);
      char v74 = v102;
      unint64_t v75 = v70;
      uint64_t v49 = v61;
      (*v89)(v102, v75, v72);
      uint64_t v76 = v100;
      dispatch thunk of Collection.subscript.getter();
      uint64_t v77 = v74;
      unsigned __int8 v78 = v122;
      (*v88)(v77, v72);
      uint64_t v46 = v94;
      uint64_t v79 = *(void (**)(uint64_t *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v94 + 72);
      char v80 = v101;
      uint64_t v81 = swift_getAssociatedConformanceWitness();
      v79(&v126, v76, v80, v81, v115, v46);
      uint64_t v125 = v126;
      static Polynomial.+= infix(_:_:)(&v127, &v125, v99, v98);
      swift_bridgeObjectRelease();
      (*v86)(v76, v80);
      v73(v116, v66);
      v73(v78, v66);
      int64_t v47 = v114;
      uint64_t v82 = v93 >= v114;
      uint64_t result = v91;
      if (v91 > 0) {
        uint64_t v82 = v114 >= v93;
      }
      if (v82) {
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t ParallelSum.chunkEvaluateSum(_:for:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X4>, void (*a6)(void)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v56 = a1;
  uint64_t v51 = a6;
  uint64_t v52 = a7;
  uint64_t v54 = a5;
  uint64_t v55 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = MEMORY[0x270FA5388](AssociatedTypeWitness, v15);
  uint64_t v46 = (uint64_t)v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16, v18);
  uint64_t v20 = (char *)v40 - v19;
  unint64_t v45 = *v54;
  uint64_t v21 = a4;
  uint64_t v22 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v50 = a9;
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  uint64_t v44 = v22;
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  uint64_t v23 = v57;
  uint64_t v24 = specialized Array.init(repeating:count:)((uint64_t)v20, *v57, AssociatedTypeWitness);
  uint64_t v48 = *(void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v49 = v14 + 8;
  v48(v20, AssociatedTypeWitness);
  uint64_t v60 = v24;
  uint64_t v25 = ArraySlice.startIndex.getter();
  uint64_t v53 = a2;
  uint64_t result = ArraySlice.endIndex.getter();
  uint64_t v47 = a8;
  uint64_t v54 = (unint64_t *)*(int *)(a8 + 44);
  uint64_t v27 = *(unint64_t *)((char *)v54 + (void)v23);
  if (v27)
  {
    BOOL v28 = result >= v25;
    if (v27 > 0) {
      BOOL v28 = v25 >= result;
    }
    if (v28) {
      return swift_bridgeObjectRelease();
    }
    uint64_t v29 = v40[1];
    int64_t v42 = result;
    uint64_t v43 = v21;
    uint64_t v41 = v27;
    while (1)
    {
      int64_t v30 = __OFADD__(v25, v27) ? ((v25 + v27) >> 63) ^ 0x8000000000000000 : v25 + v27;
      uint64_t v31 = *(unint64_t *)((char *)v54 + (void)v57);
      uint64_t v32 = v25 + v31;
      if (__OFADD__(v25, v31)) {
        break;
      }
      uint64_t result = ArraySlice.endIndex.getter();
      if (result >= v32) {
        uint64_t v33 = v32;
      }
      else {
        uint64_t v33 = result;
      }
      if (v33 < v25) {
        goto LABEL_21;
      }
      ArraySlice.subscript.getter();
      v51();
      if (v29)
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        return ((uint64_t (*)(uint64_t, uint64_t))v48)(v50, AssociatedTypeWitness);
      }
      swift_unknownObjectRelease();
      unint64_t v58 = v45;
      uint64_t v59 = v60;
      uint64_t v34 = type metadata accessor for Array();
      swift_bridgeObjectRetain();
      uint64_t v35 = v47;
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v37 = swift_getWitnessTable();
      uint64_t v38 = v46;
      Gadget.evaluate<A>(at:for:)((uint64_t)&v59, &v58, v35, v34, WitnessTable, v37, v46);
      swift_bridgeObjectRelease();
      dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
      v48((char *)v38, AssociatedTypeWitness);
      uint64_t v27 = v41;
      uint64_t result = v42;
      BOOL v39 = v42 >= v30;
      if (v41 > 0) {
        BOOL v39 = v30 >= v42;
      }
      uint64_t v25 = v30;
      if (v39) {
        return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Gadget.degree.getter in conformance ParallelSum<A>()
{
  return *(void *)(v0 + 8);
}

uint64_t protocol witness for Gadget.evaluate<A>(at:) in conformance ParallelSum<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return ParallelSum.evaluate<A>(at:)(a1, a4, a2, a3, a5);
}

uint64_t protocol witness for Gadget.evaluate<A>(at:) in conformance ParallelSum<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return ParallelSum.evaluate<A>(at:)(a1, a4, a2, a3, a5);
}

uint64_t associated type witness table accessor for Gadget.F : FieldElement in ParallelSum<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t type metadata instantiation function for ParallelSum(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 32);
}

uint64_t type metadata completion function for ParallelSum()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ParallelSum(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64) + 7;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v6 + ((v5 + 16) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v10 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v10 = *v11;
    uint64_t v12 = ((unint64_t)v10 + v5 + 8) & ~v5;
    uint64_t v13 = ((unint64_t)v11 + v5 + 8) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v12, v13);
    *(void *)((v6 + v12) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v6 + v13) & 0xFFFFFFFFFFFFFFF8);
  }
  return v3;
}

uint64_t destroy for ParallelSum(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((((a1 + 15) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
}

void *initializeWithCopy for ParallelSum(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 16;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)v4 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)v5 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v9, v10);
  *(void *)((*(void *)(v7 + 48) + 7 + v9) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v7 + 48) + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithCopy for ParallelSum(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 24;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)v4 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)v5 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v9, v10);
  *(void *)((*(void *)(v7 + 40) + 7 + v9) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v7 + 40) + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *initializeWithTake for ParallelSum(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 32;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)v4 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)v5 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v9, v10);
  *(void *)((*(void *)(v7 + 32) + 7 + v9) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v7 + 32) + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithTake for ParallelSum(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 40;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)v4 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)v5 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 40))(v9, v10);
  *(void *)((*(void *)(v7 + 24) + 7 + v9) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v7 + 24) + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParallelSum(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v7 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 16) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    unsigned int v8 = a2 - v5;
    uint64_t v9 = v7 & 0xFFFFFFF8;
    if ((v7 & 0xFFFFFFF8) != 0) {
      unsigned int v10 = 2;
    }
    else {
      unsigned int v10 = v8 + 1;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = *((unsigned __int8 *)a1 + v7);
        if (!v13) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v13 = *(unsigned __int16 *)((char *)a1 + v7);
        if (v13) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x260BB53ACLL);
      case 4:
        int v13 = *(_DWORD *)((char *)a1 + v7);
        if (!v13) {
          break;
        }
LABEL_18:
        int v14 = v13 - 1;
        if (v9)
        {
          int v14 = 0;
          LODWORD(v9) = *a1;
        }
        return v5 + (v9 | v14) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8)
  }
                                                                  + v6
                                                                  + 8) & ~v6);
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for ParallelSum(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  unint64_t v9 = ((*(void *)(v6 + 64) + ((v8 + 16) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 >= a3)
  {
    int v13 = 0;
    int v14 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v13)
      {
        case 1:
          a1[v9] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v9] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v9] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            unint64_t v17 = (((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v8 + 8) & ~v8;
            uint64_t v18 = *(void (**)(unint64_t))(v6 + 56);
            v18(v17);
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v10 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + ((v8 + 16) & ~v8) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v11 = v10 + 1;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v11 >= 0x10000) {
      int v12 = 4;
    }
    else {
      int v12 = 2;
    }
    if (v11 < 0x100) {
      int v12 = 1;
    }
    if (v11 >= 2) {
      int v13 = v12;
    }
    else {
      int v13 = 0;
    }
    int v14 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + ((v8 + 16) & ~v8) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v15 = v14;
  }
  else {
    int v15 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + ((v8 + 16) & ~v8) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v16 = ~v7 + a2;
    bzero(a1, ((*(void *)(v6 + 64) + ((v8 + 16) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_DWORD *)a1 = v16;
  }
  switch(v13)
  {
    case 1:
      a1[v9] = v15;
      break;
    case 2:
      *(_WORD *)&a1[v9] = v15;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x260BB5590);
    case 4:
      *(_DWORD *)&a1[v9] = v15;
      break;
    default:
      return;
  }
}

uint64_t static JointRandomness.jointRandSeed(parts:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = swift_getAssociatedConformanceWitness();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(AssociatedTypeWitness, v8);
  if (result < 0) {
    goto LABEL_32;
  }
  size_t v10 = result;
  if (result)
  {
    uint64_t v11 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v11 + 16) = v10;
    bzero((void *)(v11 + 32), v10);
  }
  else
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
  }
  uint64_t v12 = swift_checkMetadataState();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 56))(&v32, a2, a3);
  uint64_t v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 240))(&v32, v12, AssociatedConformanceWitness);
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(a1 + 16);
  if (!v15)
  {
    uint64_t v17 = MEMORY[0x263F8EE78];
LABEL_27:
    uint64_t v28 = static ExtendableOutputFunction.deriveSeed(seed:domainSeparationTag:binder:)(v11, v14, v17, AssociatedTypeWitness, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v28;
  }
  uint64_t v29 = v13;
  uint64_t v30 = v11;
  uint64_t v31 = v8;
  swift_bridgeObjectRetain();
  uint64_t v16 = 0;
  uint64_t v17 = MEMORY[0x263F8EE78];
  while (1)
  {
    uint64_t v18 = *(void *)(a1 + 8 * v16 + 32);
    int64_t v19 = *(void *)(v18 + 16);
    int64_t v20 = *(void *)(v17 + 16);
    int64_t v21 = v20 + v19;
    BOOL v22 = __OFADD__(v20, v19);
    uint64_t result = swift_bridgeObjectRetain();
    if (v22) {
      break;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result && v21 <= *(void *)(v17 + 24) >> 1)
    {
      if (*(void *)(v18 + 16)) {
        goto LABEL_21;
      }
    }
    else
    {
      if (v20 <= v21) {
        int64_t v23 = v20 + v19;
      }
      else {
        int64_t v23 = v20;
      }
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v23, 1, (char *)v17);
      uint64_t v17 = result;
      if (*(void *)(v18 + 16))
      {
LABEL_21:
        uint64_t v24 = *(void *)(v17 + 16);
        if ((*(void *)(v17 + 24) >> 1) - v24 < v19) {
          goto LABEL_30;
        }
        uint64_t result = (uint64_t)memcpy((void *)(v17 + v24 + 32), (const void *)(v18 + 32), v19);
        if (v19)
        {
          uint64_t v25 = *(void *)(v17 + 16);
          BOOL v26 = __OFADD__(v25, v19);
          uint64_t v27 = v25 + v19;
          if (v26) {
            goto LABEL_31;
          }
          *(void *)(v17 + 16) = v27;
        }
        goto LABEL_8;
      }
    }
    if (v19) {
      goto LABEL_29;
    }
LABEL_8:
    ++v16;
    swift_bridgeObjectRelease();
    if (v15 == v16)
    {
      swift_bridgeObjectRelease();
      uint64_t v11 = v30;
      uint64_t v8 = v31;
      uint64_t v14 = v29;
      goto LABEL_27;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t static JointRandomness.jointRandPartXOF(blind:aggregatorID:nonce:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v12)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = swift_checkMetadataState();
  uint64_t v12 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 48);
  swift_bridgeObjectRetain();
  v12(&v19, a4, a5);
  uint64_t v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 240))(&v19, v11, AssociatedConformanceWitness);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_260BF9FF0;
  *(unsigned char *)(v14 + 32) = a2;
  uint64_t v18 = v14;
  uint64_t v15 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v15);
  uint64_t v16 = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 48))(a1, v13, v18, AssociatedTypeWitness, v16);
}

uint64_t static JointRandomness.jointRandPart(commitment:blind:aggregatorID:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = static JointRandomness.jointRandPartXOF(blind:aggregatorID:nonce:)(a5, a6, a7, a8, a9);
  swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for ArraySlice();
  swift_getAssociatedConformanceWitness();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v12 = VDAFEncodable.encodedBytes.getter(v10, WitnessTable);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
  uint64_t v15 = swift_checkMetadataState();
  v14(v12, v15, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(v15, AssociatedConformanceWitness);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8))(v15, AssociatedConformanceWitness);
  uint64_t v17 = specialized Seed.init<A>(length:using:)(v16, v9, v15, AssociatedConformanceWitness);
  swift_unknownObjectRelease();
  return v17;
}

uint64_t static JointRandomness.jointRandPartsAndLeaderShare(commitment:leaderJointRandBlind:helperJointRandBlinds:helperMeasurementSeeds:numOfAggregators:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t v9 = v8;
  int64_t v15 = *(void *)(a6 + 16);
  uint64_t AssociatedTypeWitness = (void *)swift_getAssociatedTypeWitness();
  uint64_t v55 = a7;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v52 = (uint64_t)AssociatedTypeWitness;
  if (v15 != (*(uint64_t (**)(void *))(AssociatedConformanceWitness + 216))(AssociatedTypeWitness)) {
    goto LABEL_24;
  }
  unint64_t v54 = a8;
  uint64_t AssociatedTypeWitness = (void *)MEMORY[0x263F8EE78];
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a5 & ~(a5 >> 63), 0, MEMORY[0x263F8EE78]);
  uint64_t v17 = result;
  a8 = *(void *)(result + 16);
  unint64_t v18 = *(void *)(result + 24);
  int64_t v15 = a8 + 1;
  if (a8 >= v18 >> 1) {
    goto LABEL_25;
  }
  while (1)
  {
    *(void *)(v17 + 16) = v15;
    *(void *)(v17 + 8 * a8 + 32) = AssociatedTypeWitness;
    uint64_t v62 = a1;
    if (__OFSUB__(a5--, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    if (a5 < 0) {
      goto LABEL_27;
    }
    unint64_t v61 = (char *)v17;
    if (!a5) {
      break;
    }
    a8 = v54;
    uint64_t v49 = swift_getAssociatedTypeWitness();
    unint64_t v50 = *(void *)(a4 + 16);
    uint64_t v47 = a3 + 32;
    unint64_t v48 = *(void *)(a3 + 16);
    swift_bridgeObjectRetain();
    int64_t v15 = 0;
    uint64_t v46 = a5;
    a1 = v55;
    while (a5 != v15)
    {
      if (v15 == 255) {
        goto LABEL_21;
      }
      unint64_t v18 = v50;
      if (v50 == v15) {
        goto LABEL_22;
      }
      uint64_t v57 = v9;
      uint64_t v21 = swift_bridgeObjectRetain();
      int64_t v58 = v15 + 1;
      uint64_t v22 = static VDAFProtocol.measurementShareXOF(seed:aggregatorID:)(v21, v15 + 1, v52, AssociatedConformanceWitness);
      swift_bridgeObjectRelease();
      uint64_t v23 = swift_bridgeObjectRetain();
      uint64_t v9 = v49;
      uint64_t v60 = MEMORY[0x2612241C0](v23, v49);
      swift_bridgeObjectRelease();
      swift_getAssociatedTypeWitness();
      uint64_t v24 = swift_getAssociatedConformanceWitness();
      swift_getAssociatedConformanceWitness();
      uint64_t v25 = v60;
      a3 = v22;
      uint64_t v26 = v22;
      uint64_t v56 = v24;
      uint64_t AssociatedTypeWitness = (void *)v49;
      a4 = static FieldElement.randomVector<A>(count:using:)(v25, v26, v49);
      a5 = type metadata accessor for Array();
      swift_bridgeObjectRetain();
      swift_getWitnessTable();
      uint64_t v27 = ArraySlice.init<A>(_:)();
      unint64_t v18 = v48;
      if (v48 == v15) {
        goto LABEL_23;
      }
      uint64_t v30 = v27;
      uint64_t v31 = v28;
      uint64_t v32 = v29;
      uint64_t v33 = v17;
      uint64_t v34 = *(void *)(v47 + 8 * v15);
      swift_bridgeObjectRetain();
      uint64_t v35 = static JointRandomness.jointRandPart(commitment:blind:aggregatorID:nonce:)(v30, v31, v32, v33, v34, v58, a6, v55, a8);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v36 = v61;
      unint64_t v38 = *((void *)v61 + 2);
      unint64_t v37 = *((void *)v61 + 3);
      if (v38 >= v37 >> 1) {
        uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v37 > 1), v38 + 1, 1, v61);
      }
      *((void *)v36 + 2) = v38 + 1;
      unint64_t v61 = v36;
      *(void *)&v36[8 * v38 + 32] = v35;
      uint64_t AssociatedTypeWitness = &v62;
      Array<A>.elementwiseSubtract(_:)(a4, a5, v56);
      uint64_t v9 = v57;
      if (v57)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      int64_t v15 = v58;
      a5 = v46;
      a8 = v54;
      if (v46 == v58)
      {
        uint64_t v39 = a2;
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v15, 1, (char *)v17);
    uint64_t v17 = result;
  }
  swift_bridgeObjectRetain();
  uint64_t v39 = a2;
  a8 = v54;
LABEL_18:
  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v40 = ArraySlice.init<A>(_:)();
  uint64_t v44 = static JointRandomness.jointRandPart(commitment:blind:aggregatorID:nonce:)(v40, v41, v42, v43, v39, 0, a6, v55, a8);
  uint64_t result = swift_unknownObjectRelease();
  if (*((void *)v61 + 2))
  {
    *((void *)v61 + 4) = v44;
    swift_bridgeObjectRelease();
    return (uint64_t)v61;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t static JointRandomness.updateJointRandParts(_:commitment:blind:aggregatorID:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a7 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v10 = a7;
    if (a7 <= 0xFF)
    {
      uint64_t v11 = a1;
      swift_bridgeObjectRetain();
      uint64_t v12 = static JointRandomness.jointRandPart(commitment:blind:aggregatorID:nonce:)(a2, a3, a4, a5, a6, v10, a8, a9, a10);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  __break(1u);
LABEL_8:
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v11);
  uint64_t v11 = result;
LABEL_4:
  if (*(void *)(v11 + 16) <= v10)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v11 + 8 * v10 + 32) = v12;
    swift_bridgeObjectRelease();
    return v11;
  }
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void *specialized _ArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

uint64_t dispatch thunk of static JointRandomness.partUsage.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of static JointRandomness.seedUsage.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of static JointRandomness.randomnessUsage.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of JointRandomness.parts.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of JointRandomness.seed.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of JointRandomness.xof.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of JointRandomness.next()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _finalizeUninitializedArray<A>(_:)()
{
  uint64_t v0 = type metadata accessor for Array();
  AggregateShare.share.modify(v0);
}

uint64_t Polynomial.init()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  getContiguousArrayStorageType<A>(for:)(a1, a1);
  swift_allocObject();
  uint64_t v3 = static Array._adoptStorage(_:count:)();
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  uint64_t v6 = v3;
  uint64_t v4 = type metadata accessor for Array();
  AggregateShare.share.modify(v4);
  uint64_t result = Polynomial.init(coefficients:)(v3, &v6);
  *a2 = v6;
  return result;
}

uint64_t static Polynomial.+= infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static Polynomial.+= infix(_:_:)(a1, a2, a3, a4, (void (*)(uint64_t *__return_ptr, uint64_t *, uint64_t *))static Polynomial.+ infix(_:_:));
}

uint64_t convolveDirectly<A, B, C, D>(_:withKernel:result:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v191 = a3;
  uint64_t v178 = a2;
  uint64_t v169 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v180 = a12;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v136 = AssociatedTypeWitness;
  uint64_t v154 = swift_getAssociatedTypeWitness();
  uint64_t v183 = *(void *)(v154 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v154, v18);
  v153 = (char *)&v136 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v19, v21);
  v152 = (char *)&v136 - v23;
  MEMORY[0x270FA5388](v22, v24);
  v151 = (char *)&v136 - v25;
  uint64_t v155 = a9;
  uint64_t v26 = *(void *)(*(void *)(a9 + 8) + 8);
  uint64_t v150 = swift_getAssociatedTypeWitness();
  uint64_t v165 = *(void *)(v150 - 8);
  uint64_t v28 = MEMORY[0x270FA5388](v150, v27);
  v149 = (char *)&v136 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28, v30);
  v148 = (char *)&v136 - v31;
  uint64_t v156 = a8;
  uint64_t v32 = *(void *)(*(void *)(a8 + 8) + 8);
  uint64_t v147 = swift_getAssociatedTypeWitness();
  uint64_t v164 = *(void *)(v147 - 8);
  uint64_t v34 = MEMORY[0x270FA5388](v147, v33);
  v146 = (char *)&v136 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = MEMORY[0x270FA5388](v34, v36);
  v145 = (char *)&v136 - v38;
  uint64_t v194 = a7;
  v163 = *(char **)(a7 - 8);
  uint64_t v40 = MEMORY[0x270FA5388](v37, v39);
  v144 = (char *)&v136 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = MEMORY[0x270FA5388](v40, v42);
  v143 = (char *)&v136 - v44;
  uint64_t v46 = MEMORY[0x270FA5388](v43, v45);
  v188 = (char *)&v136 - v47;
  MEMORY[0x270FA5388](v46, v48);
  v193 = (char *)&v136 - v49;
  uint64_t v179 = a10;
  uint64_t v50 = *(void *)(a10 + 8);
  uint64_t v51 = swift_getAssociatedTypeWitness();
  v184 = *(void (**)(void))(v51 - 8);
  uint64_t v53 = MEMORY[0x270FA5388](v51, v52);
  v158 = (char *)&v136 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = MEMORY[0x270FA5388](v53, v55);
  v192 = (char *)&v136 - v57;
  uint64_t v190 = a6;
  uint64_t v182 = *(void *)(a6 - 8);
  uint64_t v59 = MEMORY[0x270FA5388](v56, v58);
  v181 = (char *)&v136 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = MEMORY[0x270FA5388](v59, v61);
  v189 = (char *)&v136 - v63;
  uint64_t v64 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v62, v65);
  char v67 = (char *)&v136 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v160 = a4;
  uint64_t v159 = v32;
  char v68 = dispatch thunk of Collection.isEmpty.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v67, v178, a5);
  if (v68) {
    return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v67, a5);
  }
  char v70 = dispatch thunk of Collection.isEmpty.getter();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v67, a5);
  if ((v70 & 1) == 0)
  {
    uint64_t v71 = dispatch thunk of Collection.count.getter();
    uint64_t v171 = a5;
    uint64_t result = dispatch thunk of Collection.count.getter();
    uint64_t v72 = v71 + result;
    if (__OFADD__(v71, result))
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    if (__OFSUB__(v72, 1))
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    uint64_t v73 = v182;
    uint64_t v74 = v182 + 16;
    unint64_t v75 = v189;
    uint64_t v76 = v190;
    v177 = *(void (**)(char *, uint64_t, uint64_t))(v182 + 16);
    uint64_t v186 = v72 - 1;
    v177(v189, v191, v190);
    uint64_t v77 = dispatch thunk of Collection.count.getter();
    char v80 = *(void (**)(void, void))(v73 + 8);
    uint64_t v78 = v73 + 8;
    uint64_t v79 = (void (*)(char *, uint64_t))v80;
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v80)(v75, v76);
    if (v77 < v186)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    if (v186 < 0)
    {
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      return result;
    }
    uint64_t v170 = v26;
    uint64_t v172 = a11;
    uint64_t v176 = v50;
    uint64_t v175 = v51;
    uint64_t v81 = v158;
    uint64_t v182 = v78;
    uint64_t v82 = v181;
    uint64_t v83 = v74;
    unint64_t v84 = v189;
    uint64_t v85 = v177;
    v173 = v79;
    uint64_t v174 = v83;
    if (v186)
    {
      uint64_t v86 = 0;
      v185 = (void (*)(char *, uint64_t))((char *)v184 + 8);
      uint64_t v88 = v190;
      uint64_t v87 = v191;
      do
      {
        v187 = v86 + 1;
        v85(v84, v87, v88);
        v85(v82, v87, v88);
        dispatch thunk of Collection.startIndex.getter();
        BOOL v89 = v173;
        v173(v82, v88);
        dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
        (*(void (**)(char *, uint64_t))v185)(v81, v175);
        v89(v84, v88);
        dispatch thunk of static AdditiveArithmetic.zero.getter();
        uint64_t v82 = v181;
        uint64_t v85 = v177;
        dispatch thunk of MutableCollection.subscript.setter();
        uint64_t v86 = v187;
      }
      while ((char *)v186 != v187);
    }
    uint64_t result = dispatch thunk of Collection.count.getter();
    if (result < 0) {
      goto LABEL_30;
    }
    uint64_t v90 = result;
    uint64_t v91 = v175;
    if (result)
    {
      uint64_t v92 = 0;
      v168 = (char **)(v180 + 88);
      v167 = (void (**)(char *, char *))(AssociatedConformanceWitness + 56);
      v166 = (void (**)(char *, uint64_t, uint64_t))(v180 + 96);
      v187 = (char *)v184 + 8;
      v142 = (void (**)(char *, uint64_t))(v164 + 8);
      v141 = (void (**)(void))(v163 + 16);
      v140 = (void (**)(char *, uint64_t))(v165 + 8);
      v139 = (void (**)(char *, uint64_t))(v183 + 8);
      v138 = (void (**)(char *, uint64_t))(v163 + 8);
      uint64_t v137 = result;
      while (v92 != v90)
      {
        uint64_t v93 = v92;
        uint64_t result = dispatch thunk of Collection.count.getter();
        if (result < 0) {
          goto LABEL_25;
        }
        uint64_t v94 = result;
        uint64_t v95 = v189;
        uint64_t v183 = v93;
        if (result)
        {
          uint64_t v164 = swift_checkMetadataState();
          uint64_t v96 = 0;
          v163 = *v168;
          v162 = *v167;
          v161 = *v166;
          uint64_t v165 = v94;
          while (1)
          {
            long long v97 = v95;
            uint64_t v99 = v190;
            uint64_t v98 = v191;
            uint64_t v100 = v177;
            v177(v97, v191, v190);
            long long v101 = v181;
            v100(v181, v98, v99);
            long long v102 = v158;
            dispatch thunk of Collection.startIndex.getter();
            long long v103 = v101;
            uint64_t v104 = v173;
            uint64_t result = ((uint64_t (*)(char *, uint64_t))v173)(v103, v99);
            long long v105 = v189;
            if (__OFADD__(v183, v96)) {
              break;
            }
            uint64_t v186 = v96 + 1;
            uint64_t v106 = v190;
            dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
            v185 = *(void (**)(char *, uint64_t))v187;
            v185(v102, v91);
            v104(v105, v106);
            long long v107 = v146;
            dispatch thunk of Collection.startIndex.getter();
            long long v108 = v145;
            dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
            uint64_t v109 = *v142;
            long long v110 = v107;
            uint64_t v111 = v147;
            (*v142)(v110, v147);
            long long v112 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
            v184 = *v141;
            v184(v188);
            v112(v195, 0);
            v109(v108, v111);
            long long v113 = v149;
            dispatch thunk of Collection.startIndex.getter();
            uint64_t v114 = v148;
            dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
            uint64_t v115 = *v140;
            uint64_t v116 = v150;
            (*v140)(v113, v150);
            uint64_t v117 = v180;
            uint64_t v118 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
            long long v119 = v143;
            long long v120 = (void (*)(char *, char *, uint64_t))v184;
            v184(v143);
            v118(v195, 0);
            v115(v114, v116);
            uint64_t v121 = (uint64_t)v144;
            long long v122 = v188;
            v120(v144, v188, v194);
            FieldElement.init(other:)(v121, v194, v117);
            long long v123 = v152;
            int64_t v124 = (void (*)(uint64_t, uint64_t))v163;
            ((void (*)(uint64_t, uint64_t))v163)(v194, v117);
            uint64_t v125 = v153;
            v124(v194, v117);
            long long v126 = v151;
            v162(v123, v125);
            uint64_t v127 = *v139;
            uint64_t v128 = v154;
            (*v139)(v125, v154);
            v127(v123, v128);
            v161(v126, v194, v117);
            uint64_t v129 = *v138;
            uint64_t v91 = v175;
            (*v138)(v119, v194);
            uint64_t v130 = v122;
            uint64_t v131 = v193;
            v129(v130, v194);
            v132 = (void (*)(char *, void))dispatch thunk of MutableCollection.subscript.modify();
            uint64_t v133 = v194;
            dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
            uint64_t v134 = v131;
            v135 = v192;
            v129(v134, v133);
            uint64_t v95 = v189;
            v132(v195, 0);
            uint64_t result = ((uint64_t (*)(char *, uint64_t))v185)(v135, v91);
            uint64_t v96 = v186;
            if (v165 == v186) {
              goto LABEL_14;
            }
          }
          __break(1u);
          break;
        }
LABEL_14:
        uint64_t v92 = v183 + 1;
        uint64_t v90 = v137;
        if (v183 + 1 == v137) {
          return result;
        }
      }
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
  }
  return result;
}

uint64_t convolveUsingDFT<A, B, C, D>(_:withKernel:result:)(void (**a1)(void, void), void (**a2)(void, void), char *a3, void (**a4)(char *), void (**a5)(char *), uint64_t a6, uint64_t a7, void (*a8)(char *, uint64_t, uint64_t), uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v98 = a4;
  uint64_t v88 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v107 = a12;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v94 = AssociatedTypeWitness;
  uint64_t v101 = swift_getAssociatedTypeWitness();
  uint64_t v90 = *(void (***)(char *, uint64_t))(v101 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v101, v19);
  uint64_t v86 = (char *)&v81 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v20, v22);
  uint64_t v85 = (char *)&v81 - v24;
  uint64_t v26 = MEMORY[0x270FA5388](v23, v25);
  unint64_t v84 = (char *)&v81 - v27;
  uint64_t v87 = a7;
  uint64_t v103 = *(void *)(a7 - 8);
  uint64_t v29 = MEMORY[0x270FA5388](v26, v28);
  uint64_t v83 = (char *)&v81 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29, v31);
  uint64_t v96 = (char *)&v81 - v32;
  uint64_t v104 = a10;
  uint64_t v106 = *(void (***)(char *))(a10 + 8);
  uint64_t v89 = a6;
  uint64_t v105 = swift_getAssociatedTypeWitness();
  uint64_t v99 = *(void (***)(char *, uint64_t))(v105 - 8);
  uint64_t v34 = MEMORY[0x270FA5388](v105, v33);
  uint64_t v93 = (char *)&v81 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = MEMORY[0x270FA5388](v34, v36);
  uint64_t v38 = (uint64_t)*(a5 - 1);
  MEMORY[0x270FA5388](v37, v39);
  uint64_t v41 = (char *)&v81 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = a8;
  uint64_t v42 = v98;
  char v43 = dispatch thunk of Collection.isEmpty.getter();
  uint64_t v44 = *(void (**)(char *, void (**)(void, void), void (**)(char *)))(v38 + 16);
  long long v97 = a2;
  v44(v41, a2, a5);
  if (v43) {
    return (*(uint64_t (**)(char *, void (**)(char *)))(v38 + 8))(v41, a5);
  }
  char v46 = dispatch thunk of Collection.isEmpty.getter();
  uint64_t result = (*(uint64_t (**)(char *, void (**)(char *)))(v38 + 8))(v41, a5);
  if ((v46 & 1) == 0)
  {
    uint64_t v47 = dispatch thunk of Collection.count.getter();
    uint64_t result = dispatch thunk of Collection.count.getter();
    uint64_t v48 = v47 + result;
    if (__OFADD__(v47, result))
    {
      __break(1u);
    }
    else
    {
      uint64_t result = v48 - 1;
      if (!__OFSUB__(v48, 1))
      {
        uint64_t v92 = a9;
        uint64_t v49 = specialized FixedWidthInteger.nextPowerOfTwo.getter(result);
        uint64_t result = dispatch thunk of Collection.count.getter();
        if (result >= v49)
        {
          if ((v49 & 0x8000000000000000) == 0)
          {
            uint64_t v91 = a5;
            uint64_t v100 = a11;
            uint64_t v108 = v49;
            if (v49)
            {
              uint64_t v82 = a1;
              uint64_t v50 = 0;
              ++v99;
              uint64_t v51 = v93;
              do
              {
                dispatch thunk of Collection.startIndex.getter();
                dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
                (*v99)(v51, v105);
                dispatch thunk of static AdditiveArithmetic.zero.getter();
                dispatch thunk of MutableCollection.subscript.setter();
                ++v50;
              }
              while (v108 != v50);
              uint64_t v52 = v107;
              uint64_t v49 = v108;
              uint64_t v42 = v98;
              a1 = v82;
            }
            else
            {
              uint64_t v52 = v107;
            }
            uint64_t v53 = (uint64_t)v96;
            uint64_t v54 = v87;
            dispatch thunk of static AdditiveArithmetic.zero.getter();
            uint64_t v55 = specialized Array.init(repeating:count:)(v53, v49, v54);
            uint64_t v56 = (void (**)(char *, uint64_t))(v103 + 8);
            uint64_t v57 = *(void (***)(char *))(v103 + 8);
            ((void (*)(uint64_t, uint64_t))v57)(v53, v54);
            *(void *)uint64_t v111 = v55;
            dispatch thunk of static AdditiveArithmetic.zero.getter();
            uint64_t v58 = specialized Array.init(repeating:count:)(v53, v49, v54);
            uint64_t v98 = v57;
            uint64_t v99 = v56;
            ((void (*)(uint64_t, uint64_t))v57)(v53, v54);
            uint64_t v110 = v58;
            uint64_t v59 = (void (**)(char *))type metadata accessor for Array();
            uint64_t WitnessTable = swift_getWitnessTable();
            uint64_t v61 = swift_getWitnessTable();
            discreteFourierTransform<A, B, C>(input:size:output:)(a1, v49, v111, v42, (uint64_t)v59, v54, (uint64_t)v95, WitnessTable, v61, v52);
            uint64_t v82 = (void (**)(void, void))v61;
            uint64_t v106 = v59;
            discreteFourierTransform<A, B, C>(input:size:output:)(v97, v49, (char *)&v110, v91, (uint64_t)v59, v54, v92, WitnessTable, v61, v52);
            uint64_t v62 = v86;
            uint64_t v63 = v85;
            uint64_t v64 = v84;
            uint64_t v65 = v83;
            if (v49)
            {
              uint64_t v66 = (void (**)(void, void))swift_checkMetadataState();
              Swift::Int v67 = 0;
              char v68 = *(void (**)(char *, uint64_t, uint64_t))(v107 + 96);
              uint64_t v96 = (char *)(v107 + 96);
              long long v97 = v66;
              uint64_t v69 = *(char **)(v107 + 88);
              uint64_t v94 = v107 + 88;
              uint64_t v95 = v68;
              uint64_t v91 = *(void (***)(char *))(AssociatedConformanceWitness + 56);
              uint64_t v92 = AssociatedConformanceWitness + 56;
              uint64_t v93 = v69;
              ++v90;
              do
              {
                uint64_t v105 = v67 + 1;
                Array.subscript.getter();
                Array._makeMutableAndUnique()();
                Array._checkSubscript_mutating(_:)(v67);
                _swift_isClassOrObjCExistentialType();
                char v70 = v65;
                uint64_t v71 = v63;
                uint64_t v72 = v107;
                uint64_t v73 = (void (*)(uint64_t, uint64_t))v93;
                ((void (*)(uint64_t, uint64_t))v93)(v54, v107);
                v73(v54, v72);
                ((void (*)(char *, char *))v91)(v71, v62);
                uint64_t v74 = *v90;
                unint64_t v75 = v62;
                uint64_t v76 = v64;
                uint64_t v77 = v62;
                uint64_t v78 = v101;
                (*v90)(v75, v101);
                uint64_t v79 = v78;
                uint64_t v62 = v77;
                uint64_t v64 = v76;
                v74(v71, v79);
                uint64_t v80 = v72;
                uint64_t v63 = v71;
                uint64_t v65 = v70;
                v95(v76, v54, v80);
                ((void (*)(char *, uint64_t))v98)(v70, v54);
                AggregateShare.share.modify(v106);
                Swift::Int v67 = v105;
                uint64_t v49 = v108;
              }
              while (v108 != v105);
            }
            uint64_t v109 = *(void (**)(void, void))v111;
            inverseDiscreteFourierTransform<A, B, C>(input:size:output:)(&v109, v49, v88, v106, v89, v54, (uint64_t)v82, v104, v100, v107);
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          }
LABEL_21:
          __break(1u);
          return result;
        }
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
    }
    __break(1u);
    goto LABEL_20;
  }
  return result;
}

uint64_t evaluateUsingHorner<A, B, C>(_:atInput:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v100 = a8;
  uint64_t v101 = a2;
  uint64_t v99 = a6;
  uint64_t v13 = *(void *)(*(void *)(a6 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v102 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v15 = MEMORY[0x270FA5388](AssociatedTypeWitness, v14);
  uint64_t v94 = (char *)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15, v17);
  long long v97 = (char *)&v84 - v19;
  uint64_t v21 = MEMORY[0x270FA5388](v18, v20);
  uint64_t v89 = (char *)&v84 - v22;
  unint64_t v86 = *(void *)(a5 - 8);
  uint64_t v24 = MEMORY[0x270FA5388](v21, v23);
  uint64_t v93 = (char *)&v84 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v24, v26);
  unint64_t v84 = (char *)&v84 - v28;
  uint64_t v30 = MEMORY[0x270FA5388](v27, v29);
  *(void *)&long long v106 = (char *)&v84 - v31;
  uint64_t v32 = *(void *)(a4 - 8);
  uint64_t v34 = MEMORY[0x270FA5388](v30, v33);
  uint64_t v36 = (char *)&v84 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v34, v38);
  uint64_t v40 = (char *)&v84 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 16);
  uint64_t v104 = a1;
  v41(v40, a1, a3);
  uint64_t v103 = v13;
  LOBYTE(v13) = dispatch thunk of Collection.isEmpty.getter();
  uint64_t v42 = *(uint64_t (**)(char *, uint64_t))(v37 + 8);
  uint64_t v105 = a3;
  uint64_t result = v42(v40, a3);
  if (v13)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v36, v101, a4);
  char v44 = dispatch thunk of Collection.isEmpty.getter();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v36, a4);
  if (v44)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v96 = a7;
  uint64_t result = dispatch thunk of Collection.count.getter();
  uint64_t v45 = result - 1;
  if (__OFSUB__(result, 1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t result = dispatch thunk of Collection.count.getter();
  uint64_t v46 = result - 1;
  if (__OFSUB__(result, 1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v47 = v106;
  uint64_t v92 = *(void *)(v100 + 8);
  uint64_t result = dispatch thunk of static AdditiveArithmetic.zero.getter();
  uint64_t v48 = v45 * v46;
  if ((unsigned __int128)(v45 * (__int128)v46) >> 64 != (v45 * v46) >> 63)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (!__OFADD__(v48, 1))
  {
    uint64_t v95 = a4;
    uint64_t v49 = specialized Array.init(repeating:count:)(v47, v48 + 1, a5);
    unint64_t v50 = v86;
    uint64_t v51 = *(void (**)(char *, uint64_t))(v86 + 8);
    unint64_t v91 = v86 + 8;
    uint64_t v90 = v51;
    v51((char *)v47, a5);
    uint64_t v110 = v49;
    uint64_t v52 = v97;
    dispatch thunk of Collection.startIndex.getter();
    uint64_t v53 = v89;
    dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
    *(void *)&long long v106 = v46;
    uint64_t v55 = v102 + 8;
    uint64_t v54 = *(void (**)(char *, uint64_t))(v102 + 8);
    uint64_t v56 = v52;
    uint64_t v57 = AssociatedTypeWitness;
    v54(v56, AssociatedTypeWitness);
    uint64_t v58 = (void (*)(_OWORD *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v59 = *(void (**)(char *))(v50 + 16);
    uint64_t v60 = v84;
    unint64_t v88 = v50 + 16;
    uint64_t v87 = v59;
    v59(v84);
    v58(v109, 0);
    uint64_t v102 = v55;
    uint64_t v89 = (char *)v54;
    v54(v53, v57);
    uint64_t v61 = type metadata accessor for Array();
    Array._makeMutableAndUnique()();
    uint64_t v62 = v110;
    Array._checkSubscript_mutating(_:)(0);
    char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
    uint64_t v64 = v62 & 0xFFFFFFFFFFFFFF8;
    if ((isClassOrObjCExistentialType & 1) == 0) {
      uint64_t v64 = v62;
    }
    uint64_t v65 = *(void (**)(unint64_t, char *, uint64_t))(v50 + 40);
    unint64_t v86 = (*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
    v65(v64 + v86, v60, a5);
    uint64_t result = AggregateShare.share.modify(v61);
    uint64_t v66 = v106 - 1;
    if (__OFSUB__((void)v106, 1)) {
      goto LABEL_28;
    }
    uint64_t v67 = 0;
    LODWORD(v84) = 0;
    uint64_t v85 = v61;
    char v68 = v94;
    BOOL v69 = (void)v106 == 1;
    if (v66 <= 0) {
      goto LABEL_12;
    }
LABEL_11:
    for (uint64_t i = v66 - 1; ; uint64_t i = 0)
    {
      *(void *)&v107[0] = v110;
      uint64_t v108 = v67;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialRangeThrough<Int>);
      uint64_t WitnessTable = swift_getWitnessTable();
      lazy protocol witness table accessor for type PartialRangeThrough<Int> and conformance PartialRangeThrough<A>();
      MutableCollection.subscript.getter();
      long long v106 = v109[0];
      v107[0] = v109[0];
      v107[1] = v109[1];
      uint64_t v73 = type metadata accessor for ArraySlice();
      uint64_t v74 = swift_getWitnessTable();
      uint64_t v75 = swift_getWitnessTable();
      convolveDirectly<A, B, C, D>(_:withKernel:result:)((uint64_t)v107, v101, (uint64_t)&v110, v73, v95, v61, a5, v74, v96, WitnessTable, v75, v100);
      uint64_t result = swift_unknownObjectRelease();
      if (__OFADD__(v67, v45)) {
        break;
      }
      uint64_t v76 = v45;
      uint64_t v77 = v97;
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      uint64_t v78 = AssociatedTypeWitness;
      *(void *)&long long v106 = i;
      uint64_t v79 = v67;
      uint64_t v80 = a5;
      uint64_t v81 = (void (*)(char *, uint64_t))v89;
      ((void (*)(char *, uint64_t))v89)(v77, AssociatedTypeWitness);
      uint64_t v82 = (void (*)(_OWORD *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v83 = v93;
      v87(v93);
      v82(v109, 0);
      v81(v68, v78);
      a5 = v80;
      uint64_t v45 = v76;
      uint64_t v61 = v85;
      Array._makeMutableAndUnique()();
      Array._checkSubscript_mutating(_:)(0);
      _swift_isClassOrObjCExistentialType();
      dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
      v90(v83, v80);
      AggregateShare.share.modify(v61);
      uint64_t v67 = v79 + v45;
      uint64_t v66 = v106;
      BOOL v69 = (void)v106 == 0;
      if ((uint64_t)v106 > 0) {
        goto LABEL_11;
      }
LABEL_12:
      int v71 = !v69;
      if ((v71 | v84)) {
        return v110;
      }
      LODWORD(v84) = 1;
    }
    __break(1u);
    goto LABEL_22;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t evaluateUsingHorner<A, B>(_:atInput:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned char *a7@<X8>)
{
  uint64_t v95 = a2;
  uint64_t v96 = a5;
  uint64_t v12 = *(void *)(*(void *)(a5 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v15 = MEMORY[0x270FA5388](AssociatedTypeWitness, v14);
  uint64_t v93 = &v71[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v15, v17);
  uint64_t v92 = &v71[-v18];
  uint64_t v19 = swift_getAssociatedTypeWitness();
  uint64_t v98 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v91 = v19;
  uint64_t v90 = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(v90 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v90, v21);
  uint64_t v89 = &v71[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v25 = MEMORY[0x270FA5388](v22, v24);
  unint64_t v88 = &v71[-v26];
  uint64_t v28 = MEMORY[0x270FA5388](v25, v27);
  uint64_t v87 = &v71[-v29];
  uint64_t v30 = *(void *)(a4 - 8);
  uint64_t v32 = MEMORY[0x270FA5388](v28, v31);
  unint64_t v86 = &v71[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v35 = MEMORY[0x270FA5388](v32, v34);
  uint64_t v103 = &v71[-v36];
  uint64_t v38 = MEMORY[0x270FA5388](v35, v37);
  uint64_t v102 = &v71[-v39];
  MEMORY[0x270FA5388](v38, v40);
  uint64_t v85 = &v71[-v41];
  uint64_t v42 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v42 - 8, v43);
  uint64_t v45 = &v71[-v44];
  BidirectionalCollection.last.getter();
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v30 + 48))(v45, 1, a4);
  if (result != 1)
  {
    uint64_t v47 = *(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v30 + 32);
    uint64_t v84 = v30 + 32;
    uint64_t v83 = v47;
    v47((uint64_t)a7, v45, a4);
    uint64_t result = dispatch thunk of Collection.count.getter();
    uint64_t v48 = result - 2;
    if (!__OFSUB__(result, 2))
    {
      uint64_t v80 = v12;
      uint64_t v81 = a1;
      int v72 = 0;
      uint64_t v101 = (void (**)(unsigned char *, uint64_t, uint64_t))(v30 + 16);
      uint64_t v78 = v98 + 88;
      uint64_t v77 = AssociatedConformanceWitness + 56;
      uint64_t v76 = (void (**)(unsigned char *, uint64_t))(v20 + 8);
      uint64_t v75 = v98 + 96;
      uint64_t v74 = (void (**)(unsigned char *, uint64_t))(v13 + 8);
      uint64_t v73 = (void (**)(unsigned char *, uint64_t))(v30 + 8);
      uint64_t v82 = a3;
      uint64_t v79 = a7;
      uint64_t v49 = v98;
      while (1)
      {
        if (v48 > 0)
        {
          uint64_t v100 = v48 - 1;
        }
        else
        {
          if ((v48 != 0) | v72 & 1) {
            return result;
          }
          uint64_t v100 = 0;
          int v72 = 1;
        }
        uint64_t v99 = *v101;
        uint64_t v50 = (uint64_t)v103;
        v99(v103, (uint64_t)a7, a4);
        FieldElement.init(other:)(v50, a4, v49);
        uint64_t v51 = swift_checkMetadataState();
        uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v49 + 88);
        uint64_t v53 = v88;
        v52(a4, v49);
        uint64_t v54 = v89;
        v52(a4, v49);
        uint64_t v55 = v87;
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(AssociatedConformanceWitness + 56))(v53, v54, v51);
        uint64_t v56 = *v76;
        uint64_t v57 = v54;
        uint64_t v58 = v90;
        (*v76)(v57, v90);
        v56(v53, v58);
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v49 + 96))(v55, a4, v49);
        uint64_t v59 = v93;
        dispatch thunk of Collection.startIndex.getter();
        uint64_t v60 = v92;
        dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
        uint64_t v61 = *v74;
        uint64_t v62 = AssociatedTypeWitness;
        (*v74)(v59, AssociatedTypeWitness);
        uint64_t v63 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
        uint64_t v64 = (void (*)(unsigned char *, unsigned char *, uint64_t))v99;
        ((void (*)(unsigned char *))v99)(v103);
        v63(v104, 0);
        v61(v60, v62);
        uint64_t v65 = (uint64_t)v86;
        uint64_t v66 = v102;
        v64(v86, v102, a4);
        uint64_t v67 = v85;
        FieldElement.init(other:)(v65, a4, v49);
        char v68 = v103;
        dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
        BOOL v69 = *v73;
        (*v73)(v68, a4);
        v69(v66, a4);
        char v70 = v79;
        v69(v79, a4);
        a7 = v70;
        uint64_t result = v83((uint64_t)v70, v67, a4);
        uint64_t v48 = v100;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t evaluateUsingDFT<A, B, C>(_:atInput:)(uint64_t a1, void (**a2)(void, void), uint64_t a3, void (**a4)(char *), uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  v215 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v224 = a8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v187 = AssociatedTypeWitness;
  uint64_t v220 = swift_getAssociatedTypeWitness();
  uint64_t v185 = *(void *)(v220 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v220, v16);
  v219 = (char *)&v182 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v17, v19);
  v229 = (char *)&v182 - v21;
  MEMORY[0x270FA5388](v20, v22);
  v218 = (char *)&v182 - v23;
  uint64_t v206 = a7;
  uint64_t v24 = *(void **)(*(void *)(a7 + 8) + 8);
  unint64_t v202 = swift_getAssociatedTypeWitness();
  Swift::Int v217 = *(void *)(v202 - 8);
  uint64_t v26 = MEMORY[0x270FA5388](v202, v25);
  v214 = (char *)&v182 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x270FA5388](v26, v28);
  v228 = (void (**)(char *))((char *)&v182 - v30);
  uint64_t v225 = a5;
  uint64_t v207 = *(void *)(a5 - 8);
  uint64_t v32 = MEMORY[0x270FA5388](v29, v31);
  v226 = (char *)&v182 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = MEMORY[0x270FA5388](v32, v34);
  v196 = (char *)&v182 - v36;
  uint64_t v38 = MEMORY[0x270FA5388](v35, v37);
  v195 = (char *)&v182 - v39;
  uint64_t v41 = MEMORY[0x270FA5388](v38, v40);
  uint64_t v194 = (char *)&v182 - v42;
  uint64_t v44 = MEMORY[0x270FA5388](v41, v43);
  v188 = (char *)&v182 - v45;
  uint64_t v47 = MEMORY[0x270FA5388](v44, v46);
  v213 = (char *)&v182 - v48;
  MEMORY[0x270FA5388](v47, v49);
  v227 = (char *)&v182 - v50;
  uint64_t v197 = a6;
  uint64_t v51 = *(void *)(*(void *)(a6 + 8) + 8);
  uint64_t v200 = swift_getAssociatedTypeWitness();
  uint64_t v201 = *(void *)(v200 - 8);
  uint64_t v53 = MEMORY[0x270FA5388](v200, v52);
  v193 = (char *)&v182 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = MEMORY[0x270FA5388](v53, v55);
  uint64_t v190 = (char *)&v182 - v57;
  uint64_t v59 = MEMORY[0x270FA5388](v56, v58);
  v199 = (char *)&v182 - v60;
  uint64_t v61 = (uint64_t)*(a4 - 1);
  uint64_t v63 = MEMORY[0x270FA5388](v59, v62);
  uint64_t v65 = (char *)&v182 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v63, v67);
  BOOL v69 = (char *)&v182 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v70 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
  uint64_t v204 = a1;
  v70(v69, a1, a3);
  uint64_t v203 = v51;
  LOBYTE(a5) = dispatch thunk of Collection.isEmpty.getter();
  int v71 = *(uint64_t (**)(char *, uint64_t))(v66 + 8);
  uint64_t v205 = a3;
  uint64_t result = v71(v69, a3);
  if (a5)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  uint64_t v73 = v215;
  (*(void (**)(char *, void (**)(void, void), void (**)(char *)))(v61 + 16))(v65, v215, a4);
  char v74 = dispatch thunk of Collection.isEmpty.getter();
  uint64_t result = (*(uint64_t (**)(char *, void (**)(char *)))(v61 + 8))(v65, a4);
  if (v74)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v75 = a4;
  uint64_t result = dispatch thunk of Collection.count.getter();
  uint64_t v76 = result - 1;
  if (__OFSUB__(result, 1))
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  uint64_t result = dispatch thunk of Collection.count.getter();
  uint64_t v77 = result - 1;
  if (__OFSUB__(result, 1))
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  uint64_t v78 = v76 * v77;
  if ((unsigned __int128)(v76 * (__int128)v77) >> 64 != (v76 * v77) >> 63)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  uint64_t result = v78 + 1;
  if (__OFADD__(v78, 1))
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v216 = v24;
  uint64_t v79 = specialized FixedWidthInteger.nextPowerOfTwo.getter(result);
  if (!v77)
  {
    getContiguousArrayStorageType<A>(for:)(v225, v225);
    uint64_t v175 = v207;
    swift_allocObject();
    uint64_t v176 = (void (*)(void, void))static Array._adoptStorage(_:count:)();
    uint64_t v178 = v177;
    uint64_t v179 = v199;
    dispatch thunk of Collection.startIndex.getter();
    uint64_t v180 = (void (*)(void, void))dispatch thunk of Collection.subscript.read();
    (*(void (**)(uint64_t))(v175 + 16))(v178);
    v180(&v231, 0);
    (*(void (**)(char *, uint64_t))(v201 + 8))(v179, v200);
    v231 = v176;
    uint64_t v181 = type metadata accessor for Array();
    AggregateShare.share.modify(v181);
    return (uint64_t)v231;
  }
  uint64_t v80 = v79;
  uint64_t v81 = v225;
  uint64_t v82 = v224[1];
  uint64_t v83 = (uint64_t)v227;
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  uint64_t v84 = specialized Array.init(repeating:count:)(v83, v80, v81);
  uint64_t v85 = v73;
  uint64_t v86 = v207 + 8;
  uint64_t v87 = *(void (**)(uint64_t, uint64_t))(v207 + 8);
  v87(v83, v81);
  uint64_t v233 = v84;
  uint64_t v198 = v82;
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  uint64_t v88 = specialized Array.init(repeating:count:)(v83, v80, v81);
  v222 = v87;
  v87(v83, v81);
  uint64_t v232 = v88;
  uint64_t result = dispatch thunk of Collection.count.getter();
  if ((result & 0x8000000000000000) == 0)
  {
    uint64_t v221 = v86;
    uint64_t v209 = v80;
    uint64_t v184 = v76;
    uint64_t v89 = v206;
    uint64_t v90 = v75;
    uint64_t v91 = v85;
    unint64_t v92 = v202;
    uint64_t v93 = v214;
    if (result)
    {
      Swift::Int v94 = 0;
      v211 = (void (*)(char *, char *))(v217 + 8);
      v210 = (void (**)(char *, uint64_t))(v207 + 16);
      Swift::Int v208 = v207 + 40;
      uint64_t v212 = result;
      uint64_t v95 = (void (**)(char *, unint64_t))(v217 + 8);
      do
      {
        Swift::Int v217 = v94 + 1;
        dispatch thunk of Collection.startIndex.getter();
        dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
        uint64_t v96 = *v95;
        (*v95)(v93, v92);
        long long v97 = (void (*)(void, void))dispatch thunk of Collection.subscript.read();
        uint64_t v98 = v207;
        uint64_t v99 = v213;
        uint64_t v100 = v90;
        uint64_t v101 = v89;
        uint64_t v102 = v225;
        (*(void (**)(char *))(v207 + 16))(v213);
        v97(&v231, 0);
        v96((char *)v228, v92);
        uint64_t v103 = type metadata accessor for Array();
        Array._makeMutableAndUnique()();
        uint64_t v104 = v232;
        Array._checkSubscript_mutating(_:)(v94);
        char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
        uint64_t v106 = v104 & 0xFFFFFFFFFFFFFF8;
        if ((isClassOrObjCExistentialType & 1) == 0) {
          uint64_t v106 = v104;
        }
        unint64_t v107 = v106
             + ((*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80))
             + *(void *)(v98 + 72) * v94;
        uint64_t v108 = *(void (**)(unint64_t, char *, uint64_t))(v98 + 40);
        uint64_t v93 = v214;
        uint64_t v109 = v102;
        uint64_t v89 = v101;
        uint64_t v90 = v100;
        uint64_t v91 = v215;
        v108(v107, v99, v109);
        AggregateShare.share.modify(v103);
        Swift::Int v94 = v217;
      }
      while (v212 != v217);
    }
    uint64_t v110 = (uint64_t)v227;
    uint64_t v111 = v225;
    dispatch thunk of static AdditiveArithmetic.zero.getter();
    unint64_t v112 = v209;
    uint64_t v113 = specialized Array.init(repeating:count:)(v110, v209, v111);
    v222(v110, v111);
    v230 = (void (*)(void, void))v113;
    uint64_t v114 = type metadata accessor for Array();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v182 = swift_getWitnessTable();
    uint64_t v183 = WitnessTable;
    discreteFourierTransform<A, B, C>(input:size:output:)(v91, v112, (char *)&v230, v90, v114, v111, v89, WitnessTable, v182, (uint64_t)v224);
    uint64_t v116 = v230;
    swift_bridgeObjectRetain();
    uint64_t v117 = v190;
    dispatch thunk of Collection.startIndex.getter();
    uint64_t v118 = (void (*)(void, void))dispatch thunk of Collection.subscript.read();
    uint64_t v119 = v207;
    long long v120 = *(void (**)(char *, char *, uint64_t))(v207 + 16);
    uint64_t v121 = v188;
    uint64_t v192 = v207 + 16;
    uint64_t v191 = v120;
    ((void (*)(char *))v120)(v188);
    v118(&v231, 0);
    long long v122 = *(char **)(v201 + 8);
    v201 += 8;
    uint64_t v190 = v122;
    ((void (*)(char *, uint64_t))v122)(v117, v200);
    Array._makeMutableAndUnique()();
    uint64_t v123 = v233;
    Array._checkSubscript_mutating(_:)(0);
    char v124 = _swift_isClassOrObjCExistentialType();
    uint64_t v125 = v123 & 0xFFFFFFFFFFFFFF8;
    if ((v124 & 1) == 0) {
      uint64_t v125 = v123;
    }
    long long v126 = *(void (**)(unint64_t, char *, uint64_t))(v119 + 40);
    unint64_t v202 = (*(unsigned __int8 *)(v119 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80);
    v126(v125 + v202, v121, v111);
    AggregateShare.share.modify(v114);
    uint64_t result = dispatch thunk of Collection.count.getter();
    uint64_t v186 = result;
    if (result < 1) {
      goto LABEL_49;
    }
    v189 = v116;
    v228 = (void (**)(char *))v114;
    uint64_t v127 = AssociatedConformanceWitness;
    if (result != 1)
    {
      uint64_t result = swift_checkMetadataState();
      uint64_t v128 = (void (**)(void, void))v224[12];
      uint64_t v129 = (char *)v224[11];
      uint64_t v130 = *(void (**)(char *, char *))(v127 + 56);
      uint64_t v131 = 1;
      uint64_t v132 = v184;
      v216 = v224 + 12;
      Swift::Int v217 = result;
      v215 = v128;
      v214 = (char *)(v224 + 11);
      v213 = v129;
      uint64_t v212 = v127 + 56;
      v211 = v130;
      v210 = (void (**)(char *, uint64_t))(v185 + 8);
      while (v131 != v186)
      {
        if (v132 < 0) {
          goto LABEL_38;
        }
        Swift::Int v133 = 0;
        uint64_t v185 = v131 + 1;
        uint64_t v206 = v132;
        Swift::Int v208 = v131;
        while (1)
        {
          uint64_t v134 = v193;
          dispatch thunk of Collection.startIndex.getter();
          v135 = v199;
          dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
          uint64_t v136 = v134;
          uint64_t v137 = v200;
          uint64_t v138 = v225;
          v139 = (void (*)(char *, uint64_t))v190;
          ((void (*)(char *, uint64_t))v190)(v136, v200);
          v140 = (void (*)(void, void))dispatch thunk of Collection.subscript.read();
          v141 = v227;
          v142 = v191;
          ((void (*)(char *))v191)(v227);
          v140(&v231, 0);
          v139(v135, v137);
          v143 = v195;
          Array.subscript.getter();
          uint64_t v144 = (uint64_t)v196;
          v142(v196, v141, v138);
          v145 = v194;
          v146 = v224;
          FieldElement.init(other:)(v144, v138, (uint64_t)v224);
          uint64_t v147 = v213;
          ((void (*)(uint64_t, void *))v213)(v138, v146);
          v148 = v219;
          ((void (*)(uint64_t, void *))v147)(v138, v146);
          v149 = v218;
          v211(v229, v148);
          uint64_t v150 = *v210;
          uint64_t v151 = v220;
          (*v210)(v148, v220);
          v150(v229, v151);
          ((void (*)(char *, uint64_t, void *))v215)(v149, v138, v146);
          v152 = (void (*)(char *, uint64_t))v222;
          v222((uint64_t)v143, v138);
          v152(v227, v138);
          v153 = v228;
          Array._makeMutableAndUnique()();
          Array._checkSubscript_mutating(_:)(v133);
          _swift_isClassOrObjCExistentialType();
          uint64_t v154 = *(void *)(v207 + 72);
          dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
          v152(v145, v138);
          uint64_t v155 = v153;
          uint64_t v156 = v206;
          uint64_t result = AggregateShare.share.modify(v155);
          if (v156 == v133) {
            break;
          }
          if (__OFADD__(v133++, 1))
          {
            __break(1u);
            goto LABEL_37;
          }
        }
        uint64_t result = dispatch thunk of Collection.count.getter();
        if (__OFSUB__(result, 1)) {
          goto LABEL_39;
        }
        v158 = v229;
        if (v208 == result - 1) {
          goto LABEL_34;
        }
        unint64_t v159 = v209;
        if (v209 < 0) {
          goto LABEL_40;
        }
        uint64_t v160 = v228;
        if (v209)
        {
          Swift::Int v161 = 0;
          unint64_t v162 = v202;
          v188 = (char *)v150;
          uint64_t v187 = v154;
          do
          {
            Swift::Int v208 = v161 + 1;
            uint64_t v163 = v225;
            Array.subscript.getter();
            Array._makeMutableAndUnique()();
            Array._checkSubscript_mutating(_:)(v161);
            _swift_isClassOrObjCExistentialType();
            uint64_t v164 = v224;
            uint64_t v165 = v213;
            ((void (*)(uint64_t, void *))v213)(v163, v224);
            v166 = v219;
            ((void (*)(uint64_t, void *))v165)(v163, v164);
            v167 = v218;
            v211(v158, v166);
            v168 = v166;
            uint64_t v169 = v187;
            uint64_t v170 = (void (*)(char *, uint64_t))v188;
            uint64_t v171 = v220;
            ((void (*)(char *, uint64_t))v188)(v168, v220);
            v170(v158, v171);
            uint64_t v172 = v167;
            v173 = (void (*)(char *, uint64_t))v222;
            ((void (*)(char *, uint64_t, void *))v215)(v172, v163, v164);
            uint64_t v160 = v228;
            v173(v226, v163);
            AggregateShare.share.modify(v160);
            v162 += v169;
            Swift::Int v161 = v208;
            unint64_t v159 = v209;
          }
          while (v209 != v208);
        }
        v231 = v230;
        uint64_t result = inverseDiscreteFourierTransform<A, B, C>(input:size:output:)(&v231, v159, (char *)&v232, v160, (uint64_t)v160, v225, v182, v183, v182, (uint64_t)v224);
        if (__OFADD__(v206, v184)) {
          goto LABEL_41;
        }
        uint64_t v132 = v206 + v184;
        uint64_t v131 = v185;
        if (v185 == v186) {
          goto LABEL_34;
        }
      }
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
LABEL_34:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v174 = v233;
    swift_bridgeObjectRelease();
    return v174;
  }
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

void Polynomial.length.getter()
{
}

uint64_t Polynomial.degree.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](a1, a2);
  unsigned int v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5, v8);
  unint64_t v10 = (char *)v18 - v9;
  uint64_t v11 = *v2;
  v18[1] = *v2;
  type metadata accessor for Array();
  swift_getWitnessTable();
  uint64_t result = Collection.isEmpty.getter();
  if (result)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v13 = MEMORY[0x2612241C0](v11, v3);
  if (v13 >= 1)
  {
    uint64_t v14 = (void (**)(char *, uint64_t))(v4 + 8);
    while (1)
    {
      uint64_t v15 = v13 - 1;
      Array.subscript.getter();
      dispatch thunk of static AdditiveArithmetic.zero.getter();
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v17 = *v14;
      (*v14)(v7, v3);
      v17(v10, v3);
      if ((v16 & 1) == 0) {
        break;
      }
      --v13;
      if ((unint64_t)(v15 + 1) <= 1)
      {
        uint64_t v13 = 0;
        break;
      }
    }
  }
  uint64_t result = v13 - 1;
  if (__OFSUB__(v13, 1)) {
    goto LABEL_10;
  }
  return result;
}

uint64_t Polynomial.coefficients.getter(uint64_t a1)
{
  uint64_t result = MEMORY[0x2612241C0](*v1, *(void *)(a1 + 16));
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    return Array.subscript.getter();
  }
  return result;
}

uint64_t Polynomial.init(coefficients:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  type metadata accessor for Array();
  swift_getWitnessTable();
  uint64_t result = Collection.isEmpty.getter();
  if (result) {
    __break(1u);
  }
  else {
    *a2 = a1;
  }
  return result;
}

uint64_t Polynomial.init(coefficient:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  getContiguousArrayStorageType<A>(for:)(a2, a2);
  uint64_t v6 = *(void *)(a2 - 8);
  swift_allocObject();
  uint64_t v7 = static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  uint64_t v11 = v7;
  uint64_t v9 = type metadata accessor for Array();
  AggregateShare.share.modify(v9);
  Polynomial.init(coefficients:)(v7, &v11);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  *a3 = v11;
  return result;
}

uint64_t Polynomial.init(coefficient:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  getContiguousArrayStorageType<A>(for:)(AssociatedTypeWitness, AssociatedTypeWitness);
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  swift_allocObject();
  uint64_t v10 = static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v11, a1, AssociatedTypeWitness);
  uint64_t v14 = v10;
  uint64_t v12 = type metadata accessor for Array();
  AggregateShare.share.modify(v12);
  Polynomial.init(coefficients:)(v10, a2, a3, &v14);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, AssociatedTypeWitness);
  *a4 = v14;
  return result;
}

uint64_t Polynomial.init(coefficients:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v15 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = Collection.isEmpty.getter();
  if (result)
  {
    __break(1u);
  }
  else
  {
    uint64_t v15 = a1;
    MEMORY[0x270FA5388](result, v11);
    v14[2] = a2;
    v14[3] = a3;
    uint64_t v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Polynomial.init(coefficients:), (uint64_t)v14, v8, a2, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v12);
    uint64_t result = swift_bridgeObjectRelease();
    *a4 = v13;
  }
  return result;
}

uint64_t closure #1 in Polynomial.init(coefficients:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness, v7);
  uint64_t v9 = (char *)v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)v12 - v8, a1);
  return FieldElement.init(_:)((uint64_t)v9, a2, a3);
}

uint64_t static Polynomial.interpolateUsingRootsOfUnity(values:length:)@<X0>(void (*a1)(void, void)@<X0>, int64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x2612241C0](v11, v14);
  if (result > a2)
  {
    __break(1u);
  }
  else
  {
    uint64_t v21 = a1;
    char v16 = (void (**)(char *))type metadata accessor for Array();
    swift_getWitnessTable();
    uint64_t result = Collection.isEmpty.getter();
    if ((result & 1) == 0)
    {
      dispatch thunk of static AdditiveArithmetic.zero.getter();
      uint64_t v17 = specialized Array.init(repeating:count:)((uint64_t)v13, a2, a3);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, a3);
      uint64_t v20 = a1;
      uint64_t v21 = (void (*)(void, void))v17;
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v19 = swift_getWitnessTable();
      inverseDiscreteFourierTransform<A, B, C>(input:size:output:)(&v20, a2, (char *)&v21, v16, (uint64_t)v16, a3, WitnessTable, v19, WitnessTable, a4);
      return Polynomial.init(coefficients:)((uint64_t)v21, a5);
    }
  }
  __break(1u);
  return result;
}

uint64_t Polynomial.asConstant()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v6 - 8, v7);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = *v2;
  swift_bridgeObjectRetain();
  uint64_t v17 = v10;
  if ((Polynomial.degree.getter(a1, v11) & 0x8000000000000000) == 0)
  {
    uint64_t v17 = v10;
    uint64_t v13 = Polynomial.degree.getter(a1, v12);
    swift_bridgeObjectRelease();
    if (!v13) {
      goto LABEL_5;
    }
    __break(1u);
  }
  swift_bridgeObjectRelease();
LABEL_5:
  uint64_t v17 = v10;
  type metadata accessor for Array();
  swift_getWitnessTable();
  Collection.first.getter();
  uint64_t v14 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v9, 1, v5);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(a2, v9, v5);
  }
  __break(1u);
  return result;
}

Swift::Bool __swiftcall Polynomial.isZero()()
{
  return (unint64_t)Polynomial.degree.getter(v0, v1) >> 63;
}

uint64_t Polynomial.evaluate(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v7 = *v3;
  uint64_t v12 = *v3;
  if (Polynomial.degree.getter(a2, a2) < 0) {
    return dispatch thunk of static AdditiveArithmetic.zero.getter();
  }
  uint64_t v12 = v7;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  return evaluateUsingHorner<A, B>(_:atInput:)((uint64_t)&v12, a1, v9, v8, WitnessTable, *(void *)(a2 + 24), a3);
}

uint64_t Polynomial.evaluate(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = (void (**)(void, void))MEMORY[0x270FA5388](a1, a2);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v7;
  uint64_t v11 = (void (*)(void, void))*v3;
  uint64_t v22 = (void (*)(void, void))*v3;
  if (Polynomial.degree.getter(v12, v12) < 0)
  {
    return Polynomial.init()(v6, a3);
  }
  else
  {
    uint64_t v22 = v10;
    if (Polynomial.degree.getter(a2, v13) < 0)
    {
      Array.subscript.getter();
      return Polynomial.init(coefficient:)((uint64_t)v9, v6, a3);
    }
    else
    {
      uint64_t v22 = v10;
      if (Polynomial.degree.getter(a2, v14) >= 60)
      {
        uint64_t v21 = v10;
        uint64_t v22 = v11;
        uint64_t v19 = (void (**)(char *))type metadata accessor for Array();
        uint64_t WitnessTable = swift_getWitnessTable();
        uint64_t v17 = evaluateUsingDFT<A, B, C>(_:atInput:)((uint64_t)&v22, &v21, (uint64_t)v19, v19, v6, WitnessTable, WitnessTable, *(void **)(a2 + 24));
      }
      else
      {
        uint64_t v21 = v10;
        uint64_t v22 = v11;
        uint64_t v15 = type metadata accessor for Array();
        uint64_t v16 = swift_getWitnessTable();
        uint64_t v17 = evaluateUsingHorner<A, B, C>(_:atInput:)((uint64_t)&v22, (uint64_t)&v21, v15, v15, v6, v16, v16, *(void *)(a2 + 24));
      }
      return Polynomial.init(coefficients:)(v17, a3);
    }
  }
}

uint64_t Polynomial.evaluateUsingRootsOfUnity(count:)(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  uint64_t v10 = *(void *)(v9 + 24);
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  uint64_t v11 = specialized Array.init(repeating:count:)((uint64_t)v7, a1, v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v16 = v8;
  uint64_t v17 = v11;
  uint64_t v12 = (void (**)(char *))type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v14 = swift_getWitnessTable();
  discreteFourierTransform<A, B, C>(input:size:output:)(&v16, a1, (char *)&v17, v12, (uint64_t)v12, v4, WitnessTable, v14, WitnessTable, v10);
  return v17;
}

uint64_t static Polynomial.+ infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *(void *)(a3 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v76 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v7, v9);
  uint64_t v75 = (char *)&v65 - v11;
  uint64_t v13 = MEMORY[0x270FA5388](v10, v12);
  char v74 = (char *)&v65 - v14;
  uint64_t v16 = MEMORY[0x270FA5388](v13, v15);
  uint64_t v73 = (char *)&v65 - v17;
  uint64_t v19 = (uint64_t *)MEMORY[0x270FA5388](v16, v18);
  uint64_t v21 = (uint64_t)&v65 - v20;
  uint64_t v22 = *v19;
  uint64_t v24 = *v23;
  uint64_t v26 = v25;
  uint64_t v27 = type metadata accessor for Polynomial();
  uint64_t v79 = v22;
  uint64_t v80 = v22;
  if ((Polynomial.degree.getter(v27, v28) & 0x8000000000000000) == 0)
  {
    uint64_t v80 = v24;
    if ((Polynomial.degree.getter(v27, v29) & 0x8000000000000000) == 0)
    {
      uint64_t v78 = v24;
      uint64_t v31 = v79;
      uint64_t v80 = v79;
      uint64_t v32 = Polynomial.degree.getter(v27, v30);
      uint64_t v80 = v78;
      uint64_t v34 = Polynomial.degree.getter(v27, v33);
      if (v34 >= v32) {
        uint64_t v36 = v32;
      }
      else {
        uint64_t v36 = v34;
      }
      uint64_t v80 = v31;
      uint64_t v37 = Polynomial.degree.getter(v27, v35);
      uint64_t v80 = v78;
      uint64_t v39 = Polynomial.degree.getter(v27, v38);
      if (v39 <= v37) {
        uint64_t v40 = v37;
      }
      else {
        uint64_t v40 = v39;
      }
      uint64_t v70 = *(void *)(v26 + 8);
      uint64_t result = dispatch thunk of static AdditiveArithmetic.zero.getter();
      Swift::Int v77 = v40;
      if (__OFADD__(v40, 1))
      {
        __break(1u);
      }
      else
      {
        uint64_t v42 = specialized Array.init(repeating:count:)(v21, v40 + 1, a3);
        uint64_t v68 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
        uint64_t v69 = v6 + 8;
        uint64_t result = v68(v21, a3);
        uint64_t v80 = v42;
        if ((v36 & 0x8000000000000000) == 0)
        {
          uint64_t v65 = a4;
          uint64_t v66 = v26;
          Swift::Int v43 = 0;
          uint64_t v67 = v6 + 16;
          uint64_t v71 = v6 + 40;
          uint64_t v72 = v36;
          uint64_t v44 = v73;
          while (1)
          {
            Array.subscript.getter();
            uint64_t v45 = v74;
            Array.subscript.getter();
            uint64_t v46 = (uint64_t)v75;
            (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v75, v21, a3);
            FieldElement.init(other:)(v46, a3, v66);
            dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
            uint64_t v47 = v45;
            uint64_t v48 = (void (*)(uint64_t, uint64_t))v68;
            v68((uint64_t)v47, a3);
            uint64_t v49 = v21;
            v48(v21, a3);
            uint64_t v50 = type metadata accessor for Array();
            Array._makeMutableAndUnique()();
            uint64_t v51 = v80;
            Array._checkSubscript_mutating(_:)(v43);
            char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
            uint64_t v53 = v51 & 0xFFFFFFFFFFFFFF8;
            if ((isClassOrObjCExistentialType & 1) == 0) {
              uint64_t v53 = v51;
            }
            unint64_t v54 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
            uint64_t v21 = *(void *)(v6 + 72);
            uint64_t v55 = *(void (**)(unint64_t, char *, uint64_t))(v6 + 40);
            v55(v53 + v54 + v21 * v43, v44, a3);
            uint64_t result = AggregateShare.share.modify(v50);
            if (v72 == v43) {
              break;
            }
            BOOL v56 = __OFADD__(v43++, 1);
            uint64_t v21 = v49;
            if (v56)
            {
              __break(1u);
              break;
            }
          }
          uint64_t v75 = (char *)v54;
          Swift::Int v57 = v72 + 1;
          if (!__OFADD__(v72, 1))
          {
            LODWORD(v74) = 0;
            uint64_t v58 = v78;
            while (1)
            {
              if (v57 < v77)
              {
                Swift::Int v59 = v57 + 1;
              }
              else
              {
                if ((v57 != v77) | v74 & 1) {
                  return Polynomial.init(coefficients:)(v80, v65);
                }
                LODWORD(v74) = 1;
                Swift::Int v59 = v77;
              }
              MEMORY[0x2612241C0](v79, a3);
              MEMORY[0x2612241C0](v58, a3);
              uint64_t v60 = v76;
              Array.subscript.getter();
              Array._makeMutableAndUnique()();
              uint64_t v61 = v80;
              Array._checkSubscript_mutating(_:)(v57);
              char v62 = _swift_isClassOrObjCExistentialType();
              uint64_t v63 = v61 & 0xFFFFFFFFFFFFFF8;
              if ((v62 & 1) == 0) {
                uint64_t v63 = v61;
              }
              v55((unint64_t)&v75[v63 + v57 * v21], v60, a3);
              AggregateShare.share.modify(v50);
              Swift::Int v57 = v59;
            }
          }
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_33:
      __break(1u);
      return result;
    }
  }
  uint64_t v64 = swift_bridgeObjectRetain();

  return Polynomial.init(coefficients:)(v64, a4);
}

uint64_t static Polynomial.*= infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static Polynomial.+= infix(_:_:)(a1, a2, a3, a4, (void (*)(uint64_t *__return_ptr, uint64_t *, uint64_t *))static Polynomial.* infix(_:_:));
}

uint64_t static Polynomial.+= infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t *, uint64_t *))
{
  uint64_t v6 = *a1;
  uint64_t v8 = *a2;
  uint64_t v9 = v6;
  a5(&v10, &v9, &v8);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v10;
  return result;
}

uint64_t static Polynomial.* infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t v9 = (uint64_t *)MEMORY[0x270FA5388](a1, a2);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *v9;
  uint64_t v14 = *v13;
  uint64_t v15 = type metadata accessor for Polynomial();
  *(void *)&long long v59 = v12;
  if ((Polynomial.degree.getter(v15, v16) & 0x8000000000000000) == 0)
  {
    *(void *)&long long v59 = v14;
    if ((Polynomial.degree.getter(v15, v17) & 0x8000000000000000) == 0)
    {
      *(void *)&long long v59 = v12;
      uint64_t v19 = Polynomial.degree.getter(v15, v18);
      *(void *)&long long v59 = v14;
      uint64_t result = Polynomial.degree.getter(v15, v20);
      uint64_t v23 = v19 + result;
      if (__OFADD__(v19, result))
      {
        __break(1u);
      }
      else
      {
        uint64_t v24 = v23 + 1;
        if (!__OFADD__(v23, 1))
        {
          uint64_t v51 = a5;
          *(void *)&long long v59 = v12;
          uint64_t v25 = Polynomial.degree.getter(v15, v22);
          *(void *)&long long v59 = v14;
          uint64_t v27 = Polynomial.degree.getter(v15, v26);
          if (v27 > v25) {
            uint64_t v25 = v27;
          }
          dispatch thunk of static AdditiveArithmetic.zero.getter();
          if (v25 < 61)
          {
            uint64_t v39 = specialized Array.init(repeating:count:)((uint64_t)v11, v24, a3);
            (*(void (**)(char *, uint64_t))(v8 + 8))(v11, a3);
            v61[0] = v39;
            *(void *)&long long v59 = v12;
            swift_bridgeObjectRetain();
            uint64_t v41 = Polynomial.degree.getter(v15, v40);
            *(void *)&long long v57 = v12;
            *(void *)&long long v55 = v41;
            uint64_t v42 = type metadata accessor for Array();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialRangeThrough<Int>);
            uint64_t WitnessTable = swift_getWitnessTable();
            lazy protocol witness table accessor for type PartialRangeThrough<Int> and conformance PartialRangeThrough<A>();
            MutableCollection.subscript.getter();
            swift_bridgeObjectRelease();
            long long v50 = v59;
            long long v57 = v59;
            long long v58 = v60;
            *(void *)&long long v55 = v14;
            swift_bridgeObjectRetain();
            uint64_t v45 = Polynomial.degree.getter(v15, v44);
            *(void *)&long long v52 = v14;
            uint64_t v54 = v45;
            MutableCollection.subscript.getter();
            swift_bridgeObjectRelease();
            long long v49 = v55;
            long long v52 = v55;
            long long v53 = v56;
            uint64_t v46 = type metadata accessor for ArraySlice();
            uint64_t v47 = swift_getWitnessTable();
            uint64_t v48 = swift_getWitnessTable();
            convolveDirectly<A, B, C, D>(_:withKernel:result:)((uint64_t)&v57, (uint64_t)&v52, (uint64_t)v61, v46, v46, v42, a3, v47, v47, WitnessTable, v48, a4);
          }
          else
          {
            uint64_t v28 = specialized FixedWidthInteger.nextPowerOfTwo.getter(v24);
            uint64_t v29 = specialized Array.init(repeating:count:)((uint64_t)v11, v28, a3);
            (*(void (**)(char *, uint64_t))(v8 + 8))(v11, a3);
            v61[0] = v29;
            *(void *)&long long v59 = v12;
            swift_bridgeObjectRetain();
            uint64_t v31 = Polynomial.degree.getter(v15, v30);
            *(void *)&long long v57 = v12;
            *(void *)&long long v55 = v31;
            uint64_t v32 = type metadata accessor for Array();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialRangeThrough<Int>);
            uint64_t v33 = swift_getWitnessTable();
            lazy protocol witness table accessor for type PartialRangeThrough<Int> and conformance PartialRangeThrough<A>();
            MutableCollection.subscript.getter();
            swift_bridgeObjectRelease();
            long long v50 = v59;
            long long v57 = v59;
            long long v58 = v60;
            *(void *)&long long v55 = v14;
            swift_bridgeObjectRetain();
            uint64_t v35 = Polynomial.degree.getter(v15, v34);
            *(void *)&long long v52 = v14;
            uint64_t v54 = v35;
            MutableCollection.subscript.getter();
            swift_bridgeObjectRelease();
            long long v49 = v55;
            long long v52 = v55;
            long long v53 = v56;
            uint64_t v36 = (void (**)(char *))type metadata accessor for ArraySlice();
            uint64_t v37 = (void (*)(char *, uint64_t, uint64_t))swift_getWitnessTable();
            uint64_t v38 = swift_getWitnessTable();
            convolveUsingDFT<A, B, C, D>(_:withKernel:result:)((void (**)(void, void))&v57, (void (**)(void, void))&v52, (char *)v61, v36, v36, v32, a3, v37, (uint64_t)v37, v33, v38, a4);
          }
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          return Polynomial.init(coefficients:)(v61[0], v51);
        }
      }
      __break(1u);
      return result;
    }
  }

  return Polynomial.init()(a3, a5);
}

uint64_t static Polynomial.* infix(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v66 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x270FA5388](AssociatedTypeWitness, v10);
  uint64_t v80 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11, v13);
  uint64_t v79 = (char *)&v62 - v15;
  uint64_t v17 = MEMORY[0x270FA5388](v14, v16);
  uint64_t v78 = (char *)&v62 - v18;
  uint64_t v19 = *(void *)(a3 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v17, v20);
  Swift::Int v77 = (char *)&v62 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x270FA5388](v21, v23);
  uint64_t v76 = (uint64_t *)((char *)&v62 - v25);
  MEMORY[0x270FA5388](v24, v26);
  uint64_t v28 = (char *)&v62 - v27;
  uint64_t v29 = *a2;
  uint64_t v30 = a4;
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  uint64_t v82 = a1;
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v86 = v19;
  uint64_t v84 = *(void (**)(char *, uint64_t))(v19 + 8);
  uint64_t v85 = v19 + 8;
  v84(v28, a3);
  if (a2) {
    return Polynomial.init()(a3, a5);
  }
  uint64_t v31 = type metadata accessor for Polynomial();
  uint64_t v88 = v29;
  if (Polynomial.degree.getter(v31, v32) < 0) {
    return Polynomial.init()(a3, a5);
  }
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  uint64_t v88 = v29;
  uint64_t result = Polynomial.degree.getter(v31, v33);
  if (__OFADD__(result, 1))
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v35 = specialized Array.init(repeating:count:)((uint64_t)v28, result + 1, a3);
  v84(v28, a3);
  uint64_t v87 = v29;
  uint64_t v88 = v35;
  uint64_t result = Polynomial.degree.getter(v31, v36);
  uint64_t v75 = result;
  if (result < 0)
  {
LABEL_16:
    __break(1u);
    return result;
  }
  uint64_t v63 = a5;
  uint64_t v37 = swift_checkMetadataState();
  Swift::Int v38 = 0;
  uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(a4 + 96);
  uint64_t v73 = a4 + 96;
  uint64_t v74 = v37;
  uint64_t v40 = *(void (**)(uint64_t, uint64_t))(a4 + 88);
  uint64_t v71 = a4 + 88;
  uint64_t v72 = v39;
  uint64_t v68 = *(void (**)(char *, char *))(AssociatedConformanceWitness + 56);
  uint64_t v69 = AssociatedConformanceWitness + 56;
  uint64_t v70 = v40;
  uint64_t v67 = v86 + 16;
  ++v66;
  uint64_t v65 = v86 + 40;
  uint64_t v64 = v29;
  a5 = v76;
  uint64_t v41 = v79;
  while (1)
  {
    Array.subscript.getter();
    uint64_t v42 = (uint64_t)v77;
    (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v77, v82, a3);
    uint64_t v43 = a3;
    uint64_t v44 = a3;
    uint64_t v45 = v30;
    FieldElement.init(other:)(v42, v43, v30);
    uint64_t v46 = v30;
    uint64_t v47 = v70;
    v70(v44, v46);
    uint64_t v48 = v80;
    v47(v44, v45);
    long long v49 = v28;
    long long v50 = v78;
    v68(v41, v48);
    uint64_t v51 = *v66;
    long long v52 = v48;
    uint64_t v53 = AssociatedTypeWitness;
    (*v66)(v52, AssociatedTypeWitness);
    v51(v41, v53);
    uint64_t v54 = v50;
    uint64_t v28 = v49;
    uint64_t v55 = v45;
    uint64_t v56 = v45;
    a3 = v44;
    v72(v54, v44, v56);
    v84(v49, v44);
    uint64_t v57 = type metadata accessor for Array();
    Array._makeMutableAndUnique()();
    uint64_t v58 = v88;
    Array._checkSubscript_mutating(_:)(v38);
    char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
    uint64_t v60 = v58 & 0xFFFFFFFFFFFFFF8;
    if ((isClassOrObjCExistentialType & 1) == 0) {
      uint64_t v60 = v58;
    }
    (*(void (**)(unint64_t, uint64_t *, uint64_t))(v86 + 40))(v60+ ((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80))+ *(void *)(v86 + 72) * v38, a5, v44);
    AggregateShare.share.modify(v57);
    if (v75 == v38) {
      break;
    }
    BOOL v61 = __OFADD__(v38++, 1);
    uint64_t v30 = v55;
    if (v61)
    {
      __break(1u);
      return Polynomial.init()(a3, a5);
    }
  }
  return Polynomial.init(coefficients:)(v88, v63);
}

uint64_t static Polynomial.*= infix(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *a1;
  static Polynomial.* infix(_:_:)(a2, &v7, a3, a4, &v6);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v6;
  return result;
}

uint64_t static Polynomial.* infix(_:_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6 = *a1;
  return static Polynomial.* infix(_:_:)(a2, &v6, a3, a4, a5);
}

uint64_t static Polynomial.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (uint64_t *)MEMORY[0x270FA5388](v5, v8);
  uint64_t v11 = (char *)v29 - v10;
  uint64_t v12 = *v9;
  uint64_t v14 = *v13;
  v29[2] = v15;
  uint64_t v30 = v12;
  uint64_t v16 = type metadata accessor for Polynomial();
  uint64_t v18 = Polynomial.degree.getter(v16, v17);
  v29[1] = v14;
  uint64_t v30 = v14;
  if (v18 == Polynomial.degree.getter(v16, v19))
  {
    uint64_t v30 = v12;
    uint64_t v21 = Polynomial.degree.getter(v16, v20);
    LOBYTE(v16) = 0;
    uint64_t v22 = 0;
    uint64_t v23 = (void (**)(char *, uint64_t))(v4 + 8);
    do
    {
      if (v22 < v21)
      {
        uint64_t v24 = v22 + 1;
      }
      else
      {
        char v27 = (v22 != v21) | v16;
        uint64_t v16 = 1;
        uint64_t v24 = v21;
        if (v27) {
          return v16;
        }
      }
      Array.subscript.getter();
      Array.subscript.getter();
      char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v26 = *v23;
      (*v23)(v7, a3);
      v26(v11, a3);
      uint64_t v22 = v24;
    }
    while ((v25 & 1) != 0);
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Polynomial<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Polynomial.== infix(_:_:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t static Polynomial.rangeCheck(start:end:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v175 = (char *)a2;
  uint64_t v132 = a5;
  swift_getAssociatedTypeWitness();
  uint64_t v165 = a4;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v163 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  uint64_t v9 = *(void *)(v163 + 32);
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v169 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10, v11);
  uint64_t v151 = (char *)&v131 - v12;
  uint64_t v150 = *(void *)(*(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 24) + 16);
  uint64_t v149 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v149, v13);
  v148 = (char *)&v131 - v14;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v16 = MEMORY[0x270FA5388](TupleTypeMetadata2, v15);
  Swift::Int v161 = (char *)&v131 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16, v18);
  uint64_t v160 = (char *)&v131 - v19;
  uint64_t v168 = *(void *)(v9 + 8);
  uint64_t v20 = type metadata accessor for Range();
  uint64_t v167 = *(void *)(v20 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v20, v21);
  unint64_t v159 = (char *)&v131 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22, v24);
  v158 = (char *)&v131 - v25;
  uint64_t v152 = v10;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v178 = v9;
  v181[1] = v9;
  v181[2] = AssociatedConformanceWitness;
  uint64_t v157 = AssociatedConformanceWitness;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v172 = v20;
  uint64_t v147 = WitnessTable;
  uint64_t v134 = type metadata accessor for IndexingIterator();
  uint64_t v133 = *(void *)(v134 - 8);
  uint64_t v29 = MEMORY[0x270FA5388](v134, v28);
  uint64_t v138 = (char *)&v131 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = MEMORY[0x270FA5388](v29, v31);
  uint64_t v156 = (char *)&v131 - v33;
  uint64_t v164 = a3;
  uint64_t v155 = *(void *)(a3 - 8);
  uint64_t v35 = MEMORY[0x270FA5388](v32, v34);
  v146 = (char *)&v131 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = MEMORY[0x270FA5388](v35, v37);
  v145 = (char *)&v131 - v39;
  uint64_t v41 = MEMORY[0x270FA5388](v38, v40);
  uint64_t v43 = (char *)&v131 - v42;
  uint64_t v44 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v46 = MEMORY[0x270FA5388](v41, v45);
  v153 = (char *)&v131 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = MEMORY[0x270FA5388](v46, v48);
  uint64_t v171 = (char *)&v131 - v50;
  uint64_t v52 = MEMORY[0x270FA5388](v49, v51);
  uint64_t v170 = (char *)&v131 - v53;
  uint64_t v55 = MEMORY[0x270FA5388](v52, v54);
  uint64_t v57 = (char *)&v131 - v56;
  uint64_t v59 = MEMORY[0x270FA5388](v55, v58);
  BOOL v61 = (char *)&v131 - v60;
  MEMORY[0x270FA5388](v59, v62);
  uint64_t v64 = (char *)&v131 - v63;
  uint64_t v65 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 16);
  uint64_t v66 = a1;
  v65((char *)&v131 - v63, a1, AssociatedTypeWitness);
  uint64_t v67 = (uint64_t)v175;
  uint64_t v173 = v44 + 16;
  uint64_t v176 = v65;
  ((void (*)(char *))v65)(v61);
  char v68 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v166 = v44;
  uint64_t v69 = v61;
  uint64_t v70 = *(void (**)(char *, uint64_t))(v44 + 8);
  v70(v69, AssociatedTypeWitness);
  uint64_t v177 = v44 + 8;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v70)(v64, AssociatedTypeWitness);
  if ((v68 & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v72 = *(void (**)(uint64_t, uint64_t))(v165 + 72);
  uint64_t v73 = v164;
  uint64_t v144 = v165 + 72;
  v143 = v72;
  ((void (*)(uint64_t))v72)(v164);
  Polynomial.init(coefficient:)((uint64_t)v43, v73, v181);
  uint64_t v74 = v67;
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    v142 = v43;
    uint64_t v75 = TupleTypeMetadata2;
    uint64_t v76 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v179 = AssociatedTypeWitness;
    Swift::Int v77 = v160;
    uint64_t v78 = &v160[v76];
    uint64_t v79 = v176;
    v176(v160, v66, AssociatedTypeWitness);
    v79(v78, v74, v179);
    uint64_t v80 = *(int *)(v75 + 48);
    uint64_t v81 = v161;
    uint64_t v174 = v70;
    uint64_t v82 = &v161[v80];
    v79(v161, (uint64_t)v77, v179);
    v79(v82, (uint64_t)v78, v179);
    uint64_t v84 = v166 + 32;
    uint64_t v83 = *(void (**)(char *, char *, uint64_t))(v166 + 32);
    uint64_t v154 = v83;
    uint64_t v85 = v159;
    v83(v159, v81, v179);
    v174(v82, v179);
    uint64_t v86 = &v81[*(int *)(v75 + 48)];
    uint64_t v87 = v77;
    uint64_t v88 = v179;
    v83(v81, v87, v179);
    v83(v86, v78, v88);
    uint64_t v89 = v172;
    v83(&v85[*(int *)(v172 + 36)], v86, v88);
    v174(v81, v88);
    uint64_t v90 = v167;
    uint64_t v91 = *(void (**)(char *, char *, uint64_t))(v167 + 32);
    unint64_t v92 = v158;
    uint64_t v141 = v167 + 32;
    v140 = v91;
    v91(v158, v85, v89);
    uint64_t v93 = v138;
    (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v138, v92, v89);
    Range<>.startIndex.getter();
    Swift::Int v94 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
    uint64_t v167 = v90 + 8;
    v139 = v94;
    v94((uint64_t)v92, v89);
    uint64_t v95 = v174;
    uint64_t v96 = v134;
    long long v97 = &v93[*(int *)(v134 + 36)];
    uint64_t v166 = v84;
    v154(v97, v57, v88);
    uint64_t v98 = v156;
    (*(void (**)(char *, char *, uint64_t))(v133 + 32))(v156, v93, v96);
    uint64_t v175 = &v98[*(int *)(v96 + 36)];
    uint64_t v138 = (char *)(v169 + 8);
    uint64_t v137 = v155 + 16;
    uint64_t v136 = v155 + 8;
    v135 = v57;
    while (1)
    {
      Range<>.endIndex.getter();
      char v99 = dispatch thunk of static Equatable.== infix(_:_:)();
      v95(v57, v88);
      uint64_t v100 = v171;
      if (v99)
      {
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v133 + 8))(v98, v134);
        void *v132 = v181[0];
        return result;
      }
      v176(v170, (uint64_t)v175, v88);
      Range<>.startIndex.getter();
      uint64_t v101 = v153;
      Range<>.endIndex.getter();
      uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if ((result & 1) == 0) {
        break;
      }
      uint64_t v102 = TupleTypeMetadata2;
      uint64_t v103 = v160;
      uint64_t v104 = &v160[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v105 = v154;
      v154(v160, v100, v179);
      v105(v104, v101, v179);
      uint64_t v106 = v161;
      unint64_t v107 = &v161[*(int *)(v102 + 48)];
      uint64_t v108 = (void (*)(char *, char *, uint64_t))v176;
      v176(v161, (uint64_t)v103, v179);
      v108(v107, v104, v179);
      uint64_t v109 = v159;
      v105(v159, v106, v179);
      uint64_t v110 = v107;
      uint64_t v111 = v174;
      v174(v110, v179);
      unint64_t v112 = v111;
      uint64_t v113 = &v106[*(int *)(v102 + 48)];
      v105(v106, v103, v179);
      v105(v113, v104, v179);
      uint64_t v114 = v172;
      v105(&v109[*(int *)(v172 + 36)], v113, v179);
      v112(v106, v179);
      uint64_t v115 = (void (*)(uint64_t, uint64_t))v112;
      uint64_t v116 = (uint64_t)v158;
      v140(v158, v109, v114);
      uint64_t v117 = (uint64_t)v175;
      specialized Collection._failEarlyRangeCheck(_:bounds:)((uint64_t)v175, v116);
      v139(v116, v114);
      uint64_t v118 = v152;
      swift_getAssociatedConformanceWitness();
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      uint64_t v119 = v151;
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      long long v120 = v135;
      dispatch thunk of Strideable.advanced(by:)();
      v115(v117, v179);
      (*(void (**)(char *, uint64_t))v138)(v119, v118);
      v105((char *)v117, v120, v179);
      v105(v120, v170, v179);
      uint64_t v121 = v164;
      getContiguousArrayStorageType<A>(for:)(v164, v164);
      uint64_t v122 = v155;
      swift_allocObject();
      uint64_t v169 = static Array._adoptStorage(_:count:)();
      uint64_t v123 = v165;
      char v124 = v142;
      dispatch thunk of static AdditiveArithmetic.zero.getter();
      uint64_t v125 = (uint64_t)v171;
      v176(v171, (uint64_t)v120, v179);
      long long v126 = v145;
      FieldElement.init(_:)(v125, v121, v123);
      uint64_t v127 = (uint64_t)v146;
      (*(void (**)(char *, char *, uint64_t))(v122 + 16))(v146, v124, v121);
      FieldElement.init(other:)(v127, v121, v123);
      dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
      uint64_t v128 = *(void (**)(char *, uint64_t))(v122 + 8);
      uint64_t v88 = v179;
      v128(v126, v121);
      v128(v124, v121);
      v143(v121, v123);
      uint64_t v183 = v169;
      uint64_t v129 = type metadata accessor for Array();
      AggregateShare.share.modify(v129);
      Polynomial.init(coefficients:)(v183, &v180);
      uint64_t v182 = v180;
      uint64_t v183 = v181[0];
      uint64_t v57 = v120;
      uint64_t v130 = v123;
      uint64_t v98 = v156;
      static Polynomial.* infix(_:_:)((uint64_t)&v183, (uint64_t)&v182, v121, v130, v181);
      uint64_t v95 = v174;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v95(v120, v88);
    }
    __break(1u);
    goto LABEL_9;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t getContiguousArrayStorageType<A>(for:)(uint64_t a1, uint64_t a2)
{
  if (swift_isClassType()) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    return __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  }
  else
  {
    return MEMORY[0x270F9F4F8](0, a2);
  }
}

unint64_t lazy protocol witness table accessor for type PartialRangeThrough<Int> and conformance PartialRangeThrough<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PartialRangeThrough<Int> and conformance PartialRangeThrough<A>;
  if (!lazy protocol witness table cache variable for type PartialRangeThrough<Int> and conformance PartialRangeThrough<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PartialRangeThrough<Int>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PartialRangeThrough<Int> and conformance PartialRangeThrough<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in Polynomial.init(coefficients:)(uint64_t a1)
{
  return closure #1 in Polynomial.init(coefficients:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t type metadata accessor for Polynomial()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for Range();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v5, v7);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v8, v12);
  uint64_t v14 = (char *)&v18 - v13;
  char v15 = dispatch thunk of static Comparable.<= infix(_:_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v10, a2, v5);
  if ((v15 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
    goto LABEL_5;
  }
  char v16 = dispatch thunk of static Comparable.< infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
  if ((v16 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

void PINE.shard<A>(_:nonce:seedBytes:)(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6, unint64_t a7)
{
  uint64_t v9 = *(void *)(a3 + 16);
  if (v9 != 16)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    *(void *)&long long v144 = 0xD00000000000002FLL;
    *((void *)&v144 + 1) = 0x8000000260BFEDC0;
    v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._countAndFlagsBits = 0x3D746F67202CLL;
    v34._object = (void *)0xE600000000000000;
    String.append(_:)(v34);
    uint64_t v148 = v9;
LABEL_11:
    v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(_OWORD *)uint64_t v38 = v144;
    *(unsigned char *)(v38 + 16) = 1;
    swift_willThrow();
    return;
  }
  uint64_t v135 = a2;
  uint64_t v136 = v8;
  uint64_t v134 = a3;
  uint64_t v13 = *((void *)a5 + 3);
  uint64_t v14 = *((void *)a5 + 4);
  *(void *)&long long v137 = *((void *)a5 + 2);
  *((void *)&v137 + 1) = v13;
  uint64_t v15 = *((void *)a5 + 5);
  uint64_t v16 = *((void *)a5 + 7);
  uint64_t v17 = *((void *)a5 + 8);
  uint64_t v138 = *((void *)a5 + 6);
  uint64_t v139 = v17;
  v140 = *(void **)(*(void *)(a7 + 8) + 8);
  uint64_t v141 = v15;
  uint64_t v142 = a6;
  uint64_t v19 = dispatch thunk of Collection.count.getter();
  if (v19 != PINE.randomSizeForShard.getter((uint64_t)a5))
  {
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    *(void *)&long long v144 = 0xD00000000000002ALL;
    *((void *)&v144 + 1) = 0x8000000260BFEDF0;
    PINE.randomSizeForShard.getter((uint64_t)a5);
    v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._countAndFlagsBits = 0x3D746F67202CLL;
    v36._object = (void *)0xE600000000000000;
    String.append(_:)(v36);
    uint64_t v148 = dispatch thunk of Collection.count.getter();
    goto LABEL_11;
  }
  uint64_t v126 = v16;
  uint64_t v125 = v14;
  char v124 = a1;
  uint64_t v128 = a5;
  unint64_t v123 = a7;
  uint64_t v133 = v7;
  uint64_t v20 = PINE.splitSeedBytes<A>(_:)(a4, (uint64_t)a5, v142, a7);
  uint64_t v132 = v21;
  uint64_t v127 = v22;
  int64_t v23 = v20[2];
  uint64_t v24 = MEMORY[0x263F8EE78];
  v140 = v20;
  uint64_t v130 = v25;
  if (v23)
  {
    uint64_t v26 = v20;
    *(void *)&long long v144 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23, 0);
    uint64_t v27 = v24;
    uint64_t v28 = v26 + 4;
    int64_t v29 = v23;
    do
    {
      uint64_t v30 = *v28;
      *(void *)&long long v144 = v27;
      unint64_t v32 = *(void *)(v27 + 16);
      unint64_t v31 = *(void *)(v27 + 24);
      swift_bridgeObjectRetain();
      if (v32 >= v31 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v32 + 1, 1);
        uint64_t v27 = v144;
      }
      *(void *)(v27 + 16) = v32 + 1;
      *(void *)(v27 + 8 * v32 + 32) = v30;
      v28 += 4;
      --v29;
    }
    while (v29);
    unint64_t v131 = v27;
    *(void *)&long long v144 = v24;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23, 0);
    uint64_t v39 = v24;
    uint64_t v40 = (uint64_t)v140;
    uint64_t v41 = v140 + 5;
    int64_t v42 = v23;
    do
    {
      uint64_t v43 = *v41;
      *(void *)&long long v144 = v39;
      unint64_t v45 = *(void *)(v39 + 16);
      unint64_t v44 = *(void *)(v39 + 24);
      swift_bridgeObjectRetain();
      if (v45 >= v44 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v44 > 1), v45 + 1, 1);
        uint64_t v39 = v144;
      }
      *(void *)(v39 + 16) = v45 + 1;
      *(void *)(v39 + 8 * v45 + 32) = v43;
      v41 += 4;
      --v42;
    }
    while (v42);
    uint64_t v129 = v39;
    *(void *)&long long v144 = v24;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23, 0);
    uint64_t v46 = v24;
    uint64_t v47 = (uint64_t *)(v40 + 48);
    int64_t v48 = v23;
    do
    {
      uint64_t v49 = *v47;
      *(void *)&long long v144 = v46;
      unint64_t v51 = *(void *)(v46 + 16);
      unint64_t v50 = *(void *)(v46 + 24);
      swift_bridgeObjectRetain();
      if (v51 >= v50 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v50 > 1), v51 + 1, 1);
        uint64_t v46 = v144;
      }
      *(void *)(v46 + 16) = v51 + 1;
      *(void *)(v46 + 8 * v51 + 32) = v49;
      v47 += 4;
      --v48;
    }
    while (v48);
    *(void *)&long long v144 = v24;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23, 0);
    uint64_t v52 = v140 + 7;
    do
    {
      uint64_t v53 = *v52;
      *(void *)&long long v144 = v24;
      unint64_t v55 = *(void *)(v24 + 16);
      unint64_t v54 = *(void *)(v24 + 24);
      swift_bridgeObjectRetain();
      if (v55 >= v54 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v54 > 1), v55 + 1, 1);
        uint64_t v24 = v144;
      }
      *(void *)(v24 + 16) = v55 + 1;
      *(void *)(v24 + 8 * v55 + 32) = v53;
      v52 += 4;
      --v23;
    }
    while (v23);
  }
  else
  {
    uint64_t v46 = MEMORY[0x263F8EE78];
    uint64_t v129 = MEMORY[0x263F8EE78];
    unint64_t v131 = MEMORY[0x263F8EE78];
  }
  uint64_t v56 = v137;
  uint64_t v148 = Array.init()();
  uint64_t v57 = (char *)v133 + v128[19];
  long long v144 = v137;
  uint64_t v145 = v141;
  uint64_t v146 = v138;
  uint64_t v147 = v139;
  uint64_t v58 = type metadata accessor for PINEMainCircuit();
  Swift::Int v59 = PINEMainCircuit.encodedMeasurementLength.getter(v58);
  uint64_t v60 = type metadata accessor for Array();
  Array.reserveCapacity(_:)(v59);
  uint64_t WitnessTable = swift_getWitnessTable();
  PINECircuit.encodeMeasurementAndNormRangeCheck(raw:into:)(v135, (uint64_t)&v148, v58, WitnessTable);
  if (v136)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v119 = (void *)WitnessTable;
  uint64_t v122 = v60;
  uint64_t v120 = v58;
  uint64_t v121 = v57;
  *(void *)&long long v144 = v128;
  *((void *)&v144 + 1) = v137;
  uint64_t v118 = swift_getWitnessTable();
  uint64_t v145 = v118;
  uint64_t v146 = v141;
  uint64_t v62 = type metadata accessor for WraparoundJointRandomness();
  uint64_t v63 = v148;
  uint64_t v64 = *v133;
  swift_bridgeObjectRetain();
  uint64_t v135 = v63;
  uint64_t v117 = v64;
  unint64_t v65 = swift_getWitnessTable();
  uint64_t v66 = static JointRandomness.jointRandPartsAndLeaderShare(commitment:leaderJointRandBlind:helperJointRandBlinds:helperMeasurementSeeds:numOfAggregators:nonce:)(v63, v130, v46, v131, v64, v134, v62, v65);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v67 = swift_bridgeObjectRetain();
  uint64_t v68 = WraparoundJointRandomness.__allocating_init(parts:)(v67);
  uint64_t v136 = PINECircuit.appendWraparoundCheck<A>(into:random:)((uint64_t)&v148, v68, v120, WitnessTable);
  *(void *)&long long v144 = v128;
  *((void *)&v144 + 1) = v137;
  uint64_t v145 = v118;
  uint64_t v146 = v141;
  uint64_t v69 = type metadata accessor for VerificationJointRandomness();
  uint64_t v70 = v148;
  swift_bridgeObjectRetain();
  unint64_t v71 = swift_getWitnessTable();
  uint64_t v72 = static JointRandomness.jointRandPartsAndLeaderShare(commitment:leaderJointRandBlind:helperJointRandBlinds:helperMeasurementSeeds:numOfAggregators:nonce:)(v70, v132, v24, v131, v117, v134, v69, v71);
  uint64_t v113 = v73;
  uint64_t v115 = v66;
  uint64_t v116 = v68;
  uint64_t v74 = v72;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v75 = v128;
  uint64_t v76 = v133;
  unint64_t v131 = *(uint64_t *)((char *)v133 + v128[21]);
  uint64_t v119 = VerificationJointRandomness.__allocating_init(count:numOfProofs:parts:)(3, v131, v74);
  uint64_t v114 = v74;
  swift_bridgeObjectRetain();
  static Array.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  LOBYTE(v144) = 3;
  uint64_t v77 = specialized VDAFProtocol.domainSeparationTag(usage:)((char *)&v144, (uint64_t)v128, v118);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t v78 = swift_allocObject();
  *(_OWORD *)(v78 + 16) = xmmword_260BF9FD0;
  unint64_t v79 = *(uint64_t *)((char *)v76 + v75[22]);
  if ((v79 & 0x8000000000000000) != 0)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v80 = v125;
  if (v79 > 0xFF)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  *(unsigned char *)(v78 + 32) = v79;
  if ((v131 & 0x8000000000000000) != 0)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v131 <= 0xFF)
  {
    *(unsigned char *)(v78 + 33) = v131;
    uint64_t v134 = static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(v127, v77, v78, v80, v126);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v143 = Array.init()();
    Swift::Int v81 = PINE.proofLength.getter((uint64_t)v128);
    Array.reserveCapacity(_:)(v81);
    if (v79)
    {
      uint64_t v127 = (uint64_t)v133 + v128[20];
      uint64_t v84 = v148;
      uint64_t v85 = v141;
      while (1)
      {
        uint64_t v135 = v79;
        uint64_t v136 = 0;
        if (!v79) {
          break;
        }
        *(void *)&long long v144 = v56;
        *((void *)&v144 + 1) = *((void *)&v137 + 1);
        uint64_t v145 = v85;
        uint64_t v146 = v138;
        uint64_t v147 = v139;
        uint64_t v86 = type metadata accessor for PINENormEqualityCheckCircuit();
        uint64_t v87 = (void *)swift_getWitnessTable();
        uint64_t v88 = FullyLinearProof.proveRandLength.getter(v86, (uint64_t)v87);
        uint64_t v89 = static FieldElement.randomVector<A>(count:using:)(v88, v134, v56);
        swift_bridgeObjectRetain();
        int64_t v90 = Array.init()();
        uint64_t v91 = swift_getWitnessTable();
        FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:)((uint64_t)&v143, v84, v89, v90, v86, v122, v87, v91);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v82 = swift_bridgeObjectRelease();
        unint64_t v79 = v135 - 1;
        uint64_t v85 = v141;
        if (v135 == 1) {
          goto LABEL_37;
        }
      }
      __break(1u);
    }
    else
    {
      uint64_t v85 = v141;
LABEL_37:
      uint64_t v92 = v129;
      uint64_t v93 = v131;
      if (!v131)
      {
LABEL_41:
        uint64_t v136 = 0;
        MEMORY[0x270FA5388](v82, v83);
        v103[1] = v137;
        uint64_t v104 = v125;
        uint64_t v105 = v142;
        uint64_t v106 = v85;
        uint64_t v107 = v138;
        uint64_t v108 = v126;
        unint64_t v109 = v123;
        uint64_t v110 = v139;
        uint64_t v111 = v92;
        unint64_t v112 = v133;
        uint64_t v101 = v128;
        static VDAFProtocol.splitShare<A, B>(_:into:_:)((uint64_t)&v143, v117, (uint64_t (*)(uint64_t))partial apply for closure #5 in PINE.shard<A>(_:nonce:seedBytes:), (uint64_t)v103, (uint64_t)v128, v137, v125, v118, v85, v126);
        swift_bridgeObjectRelease();
        uint64_t v102 = v143;
        swift_bridgeObjectRetain();
        PINE.inputSharesFrom(leaderMeasurementShare:leaderProofShare:leaderWraparoundJointRandBlind:leaderVerificationJointRandBlind:helperSeeds:)(v113, v102, v130, v132, (uint64_t)v140, v101);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        PINEPublicShare.init(wraparoundJointRandParts:verificationJointRandParts:)(v115, v114, &v144);
        *char v124 = v144;
        return;
      }
      uint64_t v94 = v148;
      uint64_t v95 = v131 & ~((uint64_t)v131 >> 63);
      while (1)
      {
        unint64_t v131 = v93;
        if (!v95) {
          break;
        }
        int64_t v96 = VerificationJointRandomness.next()();
        long long v97 = (void *)swift_getWitnessTable();
        uint64_t v98 = FullyLinearProof.proveRandLength.getter(v120, (uint64_t)v97);
        uint64_t v99 = static FieldElement.randomVector<A>(count:using:)(v98, v134, v137);
        swift_bridgeObjectRetain();
        uint64_t v100 = swift_getWitnessTable();
        FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:)((uint64_t)&v143, v94, v99, v96, v120, v122, v97, v100);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v82 = swift_bridgeObjectRelease();
        --v95;
        uint64_t v93 = v131 - 1;
        uint64_t v92 = v129;
        uint64_t v85 = v141;
        if (v131 == 1) {
          goto LABEL_41;
        }
      }
    }
    __break(1u);
    goto LABEL_44;
  }
LABEL_47:
  __break(1u);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v31 = a5;
  uint64_t v32 = a8;
  uint64_t v41 = a1;
  uint64_t v42 = a2;
  uint64_t v30 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v43 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  Swift::String v36 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x270FA5388](AssociatedTypeWitness, v10);
  uint64_t v13 = (char *)&v29 - v12;
  MEMORY[0x270FA5388](v11, v14);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v33 = *(void *)(v17 - 8);
  uint64_t v34 = v17;
  MEMORY[0x270FA5388](v17, v18);
  uint64_t v20 = (char *)&v29 - v19;
  uint64_t v21 = dispatch thunk of Collection.count.getter();
  if (!v21) {
    return static Array._allocateUninitialized(_:)();
  }
  Swift::Int v22 = v21;
  uint64_t v46 = Array.init()();
  uint64_t v35 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v22);
  uint64_t v39 = v8;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v22 < 0)
  {
    __break(1u);
  }
  else
  {
    Swift::String v37 = (void (**)(char *))(v36 + 2);
    uint64_t v38 = v16;
    ++v36;
    while (1)
    {
      uint64_t v24 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v25 = v13;
      uint64_t v26 = v13;
      uint64_t v27 = AssociatedTypeWitness;
      (*v37)(v25);
      v24(v45, 0);
      uint64_t v28 = v44;
      v41(v26, v43);
      if (v28) {
        break;
      }
      uint64_t v44 = 0;
      (*v36)(v26, v27);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      --v22;
      uint64_t v13 = v26;
      if (!v22)
      {
        (*(void (**)(char *, uint64_t))(v33 + 8))(v20, v34);
        return v46;
      }
    }
    (*v36)(v26, v27);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v20, v34);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v30 + 32))(v32, v43, v31);
  }
  return result;
}

uint64_t PINE.publicShare<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x270FA5388](a1, a1);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  return PINEPublicShare.init<A>(from:parameter:)((uint64_t)v7, *v3, 0, *(void *)(a2 + 32), a3, *(void *)(a2 + 56));
}

uint64_t PINE.inputShare<A>(from:aggregatorID:)@<X0>(uint64_t a1@<X0>, Swift::Int a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v35 = a5;
  uint64_t v28 = a1;
  uint64_t v29 = a6;
  uint64_t v30 = a4;
  uint64_t v27 = *(void *)(a4 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9, v12);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v15 + 16))(v14, v16);
  uint64_t v17 = a3[2];
  unint64_t v18 = a3[4];
  uint64_t v19 = a3[5];
  uint64_t v20 = a3[7];
  uint64_t result = PINEInputShare.DecodableParameter.init<A>(vdaf:aggregatorID:)((uint64_t)v14, a2, v18, v20, (uint64_t)&v31);
  if (!v6)
  {
    uint64_t v22 = v30;
    uint64_t v25 = v32;
    uint64_t v26 = v31;
    uint64_t v23 = v33;
    char v24 = v34;
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v11, v28, v30);
    uint64_t v31 = v26;
    uint64_t v32 = v25;
    uint64_t v33 = v23;
    char v34 = v24;
    return PINEInputShare.init<A>(from:parameter:)((uint64_t)v11, (uint64_t)&v31, v17, v18, v22, v19, v20);
  }
  return result;
}

void PINE.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:)(uint64_t a1, void *a2, uint64_t a3, Swift::Int a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Swift::Int v184 = a4;
  uint64_t v164 = a2;
  uint64_t v165 = a1;
  uint64_t v13 = *(void *)(a9 + 24);
  uint64_t v14 = *(void *)(a9 + 40);
  uint64_t v15 = *(uint64_t **)(a9 + 48);
  uint64_t v16 = *(void *)(a9 + 64);
  uint64_t v181 = *(void *)(a9 + 16);
  uint64_t v182 = (uint64_t *)v14;
  *(void *)&long long v192 = v181;
  *((void *)&v192 + 1) = v13;
  uint64_t v179 = v13;
  uint64_t v193 = v14;
  uint64_t v194 = v15;
  uint64_t v177 = v15;
  uint64_t v176 = v16;
  uint64_t v195 = v16;
  uint64_t v180 = type metadata accessor for PINEMainCircuit();
  uint64_t v173 = *(char **)(v180 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v180, v17);
  uint64_t v166 = (char *)&v150 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18, v20);
  uint64_t v172 = (char *)&v150 - v21;
  uint64_t v169 = *a6;
  uint64_t v171 = a6[1];
  *(void *)&long long v178 = *(void *)a7;
  char v22 = *(unsigned char *)(a7 + 8);
  uint64_t v175 = *(void *)(a7 + 16);
  LODWORD(v174) = *(unsigned __int8 *)(a7 + 24);
  uint64_t v168 = *(void **)(a7 + 32);
  uint64_t v170 = *(void *)(a7 + 40);
  uint64_t v167 = a3;
  uint64_t v23 = *(void *)(a3 + 16);
  uint64_t v24 = *(void *)(a9 + 32);
  uint64_t v25 = *(void *)(a9 + 56);
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 8);
  if (v23 != v26(v24, v25))
  {
    *(void *)&long long v192 = 0;
    *((void *)&v192 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    *(void *)&long long v192 = 0xD000000000000034;
    *((void *)&v192 + 1) = 0x8000000260BFEAA0;
    uint64_t v188 = v26(v24, v25);
LABEL_9:
    v43._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    v44._countAndFlagsBits = 0x3D746F67202CLL;
    v44._object = (void *)0xE600000000000000;
    String.append(_:)(v44);
    uint64_t v188 = v23;
    v45._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    long long v46 = v192;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(_OWORD *)uint64_t v47 = v46;
    *(unsigned char *)(v47 + 16) = 1;
    swift_willThrow();
    return;
  }
  uint64_t v163 = v24;
  uint64_t v162 = v25;
  uint64_t v23 = *(void *)(a5 + 16);
  if (v23 != 16)
  {
    *(void *)&long long v192 = 0;
    *((void *)&v192 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    *(void *)&long long v192 = 0xD000000000000030;
    *((void *)&v192 + 1) = 0x8000000260BFEAE0;
    uint64_t v188 = 16;
    goto LABEL_9;
  }
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v28 = v184;
  uint64_t v29 = v185;
  VDAFProtocol.assertValidAggregatorID(_:)(v184);
  if (!v30)
  {
    uint64_t v183 = a5;
    if ((v28 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v32 = v181;
      uint64_t v31 = v182;
      if (v28 <= 0xFF)
      {
        uint64_t v33 = PINE.measurementShareLength.getter(a9);
        uint64_t v196 = static VDAFProtocol.decodeMeasurementShare<A>(_:aggregatorID:count:)(v178, v22, v28, v33, a9, v32, WitnessTable);
        *(void *)&long long v178 = v196;
        swift_bridgeObjectRetain();
        uint64_t v34 = PINE.proofLength.getter(a9);
        MEMORY[0x270FA5388](v34, v35);
        uint64_t v36 = v179;
        *(&v150 - 10) = v32;
        *(&v150 - 9) = v36;
        *(&v150 - 8) = v163;
        *(&v150 - 7) = (uint64_t)v31;
        Swift::String v37 = v177;
        uint64_t v38 = v162;
        *(&v150 - 6) = (uint64_t)v177;
        *(&v150 - 5) = v38;
        uint64_t v39 = WitnessTable;
        uint64_t v40 = v176;
        uint64_t v147 = v176;
        uint64_t v148 = v29;
        uint64_t v149 = (uint64_t)v31;
        uint64_t v41 = v175;
        uint64_t v175 = v39;
        uint64_t v188 = specialized static VDAFProtocol.decodeProofShare<A>(_:aggregatorID:count:makeXOF:)(v41, v174, v42, partial apply for closure #1 in PINE.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:), (uint64_t)(&v150 - 12), a9, v32);
        uint64_t v189 = v48;
        uint64_t v190 = v49;
        uint64_t v191 = v50;
        *(void *)&long long v192 = a9;
        *((void *)&v192 + 1) = v32;
        uint64_t v193 = v175;
        uint64_t v194 = v31;
        uint64_t v174 = type metadata accessor for WraparoundJointRandomness();
        uint64_t v161 = v29 + *(int *)(a9 + 76);
        unint64_t v51 = (void (*)(char *, uint64_t, uint64_t))*((void *)v173 + 2);
        uint64_t v52 = (uint64_t)v172;
        uint64_t v53 = v180;
        unint64_t v159 = v173 + 16;
        v158 = v51;
        ((void (*)(char *))v51)(v172);
        uint64_t v54 = v52 + *(int *)(v53 + 64);
        uint64_t v55 = (uint64_t)v31;
        uint64_t v56 = *(void *)(v54 + 24);
        *(void *)&long long v192 = v181;
        *((void *)&v192 + 1) = v179;
        uint64_t v193 = v55;
        uint64_t v194 = v37;
        uint64_t v195 = v40;
        uint64_t v57 = type metadata accessor for PINECircuitParameter();
        uint64_t v58 = *(void *)(v57 - 8);
        Swift::Int v59 = *(void (**)(void))(v58 + 8);
        uint64_t v157 = v57;
        uint64_t v156 = v59;
        uint64_t v155 = v58 + 8;
        ((void (*)(uint64_t))v59)(v54);
        uint64_t v186 = v56;
        uint64_t v187 = v178;
        uint64_t v60 = type metadata accessor for Array();
        uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialRangeUpTo<Int>);
        uint64_t v62 = swift_getWitnessTable();
        unint64_t v63 = lazy protocol witness table accessor for type PartialRangeUpTo<Int> and conformance PartialRangeUpTo<A>();
        uint64_t v154 = v61;
        uint64_t v153 = v62;
        unint64_t v152 = v63;
        MutableCollection.subscript.getter();
        long long v64 = v192;
        uint64_t v65 = v193;
        uint64_t v160 = v194;
        uint64_t v66 = v174;
        uint64_t v67 = swift_getWitnessTable();
        uint64_t v149 = v66;
        unint64_t v68 = v28;
        uint64_t v69 = v183;
        uint64_t v70 = static JointRandomness.updateJointRandParts(_:commitment:blind:aggregatorID:nonce:)(v169, v64, *((uint64_t *)&v64 + 1), v65, (uint64_t)v160, (uint64_t)v168, v28, v183, v149, v67);
        swift_unknownObjectRelease();
        uint64_t v160 = (uint64_t *)WraparoundJointRandomness.__allocating_init(parts:)(v70);
        *(void *)&long long v192 = a9;
        *((void *)&v192 + 1) = v181;
        uint64_t v193 = v175;
        uint64_t v194 = v182;
        uint64_t v71 = type metadata accessor for VerificationJointRandomness();
        *(void *)&long long v192 = v178;
        swift_bridgeObjectRetain();
        swift_getWitnessTable();
        uint64_t v174 = v60;
        uint64_t v72 = ArraySlice.init<A>(_:)();
        uint64_t v74 = v73;
        uint64_t v76 = v75;
        uint64_t v78 = v77;
        uint64_t v79 = swift_getWitnessTable();
        uint64_t v80 = v78;
        uint64_t v81 = v161;
        uint64_t v82 = static JointRandomness.updateJointRandParts(_:commitment:blind:aggregatorID:nonce:)(v171, v72, v74, v76, v80, v170, v68, v69, v71, v79);
        swift_unknownObjectRelease();
        uint64_t v83 = *(int *)(a9 + 84);
        uint64_t v84 = VerificationJointRandomness.__allocating_init(count:numOfProofs:parts:)(3, *(void *)(v185 + v83), v82);
        uint64_t v85 = v180;
        uint64_t v86 = swift_getWitnessTable();
        uint64_t v87 = v85;
        uint64_t v88 = PINECircuit.truncate(measurement:)(v178, v85, v86);
        uint64_t v171 = v83;
        uint64_t v168 = v84;
        OutputShare.init(_:)(v88, &v192);
        uint64_t v151 = v192;
        uint64_t v89 = (uint64_t)v172;
        int64_t v90 = v158;
        v158(v172, v81, v85);
        uint64_t v91 = v166;
        v90(v166, v81, v87);
        uint64_t v92 = *(void *)&v91[*(int *)(v87 + 64) + 40];
        v156();
        uint64_t v186 = v92;
        uint64_t v187 = v178;
        MutableCollection.subscript.getter();
        swift_bridgeObjectRelease();
        PINECircuit.wraparoundDotProducts<A>(_:random:)(v192, *((uint64_t *)&v192 + 1), v193, (uint64_t)v194, v160, v87, v86);
        swift_unknownObjectRelease();
        (*((void (**)(uint64_t, uint64_t))v173 + 1))(v89, v87);
        static Array.+= infix(_:_:)();
        swift_bridgeObjectRelease();
        LOBYTE(v192) = 4;
        swift_bridgeObjectRetain();
        uint64_t v93 = specialized VDAFProtocol.domainSeparationTag(usage:)((char *)&v192, a9, v175);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        uint64_t v94 = swift_allocObject();
        *(_OWORD *)(v94 + 16) = xmmword_260BF9FD0;
        uint64_t v95 = (uint64_t *)v185;
        unint64_t v96 = *(void *)(v185 + *(int *)(a9 + 88));
        if ((v96 & 0x8000000000000000) != 0) {
          goto LABEL_35;
        }
        uint64_t v97 = v163;
        uint64_t v98 = v171;
        if (v96 > 0xFF)
        {
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }
        *(unsigned char *)(v94 + 32) = v96;
        unint64_t v99 = *(uint64_t *)((char *)v95 + v98);
        if ((v99 & 0x8000000000000000) != 0)
        {
LABEL_37:
          __break(1u);
          goto LABEL_38;
        }
        uint64_t v175 = v96;
        uint64_t v100 = v162;
        if (v99 > 0xFF)
        {
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
        uint64_t v170 = v99;
        *(unsigned char *)(v94 + 33) = v99;
        *(void *)&long long v192 = v94;
        uint64_t v101 = swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v101);
        uint64_t v171 = static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(v167, v93, v192, v97, v100);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v187 = Array.init()();
        Swift::Int v102 = PINE.verifierLength.getter(a9);
        Array.reserveCapacity(_:)(v102);
        uint64_t v103 = v175;
        if (!v175)
        {
LABEL_20:
          uint64_t v119 = v170;
          if (!v170)
          {
LABEL_27:
            *(void *)&long long v192 = v151;
            uint64_t v136 = v160;
            uint64_t v137 = v160[3];
            swift_bridgeObjectRetain();
            uint64_t v138 = (uint64_t)v168;
            uint64_t v139 = VerificationJointRandomness.seed.getter();
            Swift::Int v140 = v184;
            PINEPrepareState.init(outputShare:wraparoundJointRandSeed:verificationJointRandSeed:aggregatorID:)(&v192, v137, v139, v184, v165);
            uint64_t v141 = v136[2];
            if (*(void *)(v141 + 16) > v140)
            {
              uint64_t v142 = *(void *)(v138 + 16);
              if (*(void *)(v142 + 16) > v140)
              {
                uint64_t v143 = v187;
                uint64_t v144 = 8 * v140;
                uint64_t v145 = *(void *)(v141 + 8 * v140 + 32);
                uint64_t v146 = *(void *)(v142 + v144 + 32);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_release();
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                swift_release();
                swift_bridgeObjectRelease();
                PINEPrepareShare.init(verifierShare:wraparoundJointRandPart:verificationJointRandPart:)(v143, v145, v146, v164);
                return;
              }
              goto LABEL_40;
            }
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            return;
          }
          uint64_t v179 = v196;
          *(void *)&long long v178 = *(void *)v185;
          uint64_t v120 = v170 & ~(v170 >> 63);
          uint64_t v121 = v181;
          while (1)
          {
            uint64_t v170 = v119;
            uint64_t v183 = 0;
            if (!v120) {
              goto LABEL_34;
            }
            uint64_t v122 = VerificationJointRandomness.next()();
            unint64_t v123 = (void *)swift_getWitnessTable();
            uint64_t v124 = FullyLinearProof.proofLength.getter(v180, (uint64_t)v123);
            uint64_t v125 = type metadata accessor for ArraySlice();
            uint64_t v126 = swift_getWitnessTable();
            RandomAccessCollection<>.popFirst(_:)(v124, v125);
            uint64_t v127 = v121;
            uint64_t v129 = v193;
            uint64_t v128 = v194;
            long long v185 = v192;
            uint64_t v130 = FullyLinearProof.queryRandLength.getter(v180, (uint64_t)v123);
            uint64_t v131 = static FieldElement.randomVector<A>(count:using:)(v130, v171, v127);
            long long v192 = v185;
            uint64_t v193 = v129;
            uint64_t v194 = v128;
            uint64_t v132 = v179;
            swift_bridgeObjectRetain();
            uint64_t v133 = v174;
            uint64_t v134 = swift_getWitnessTable();
            uint64_t v135 = v183;
            FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)((uint64_t)&v187, v132, (uint64_t)&v192, v131, v122, v178, v180, v133, v125, v123, v134, v126);
            if (v135) {
              goto LABEL_30;
            }
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            --v120;
            uint64_t v119 = v170 - 1;
            uint64_t v121 = v181;
            if (v170 == 1) {
              goto LABEL_27;
            }
          }
        }
        uint64_t v173 = (char *)v95 + *(int *)(a9 + 80);
        uint64_t v104 = v196;
        uint64_t v169 = *v95;
        while (1)
        {
          uint64_t v183 = 0;
          uint64_t v175 = v103;
          if (!v103) {
            break;
          }
          uint64_t v105 = v104;
          uint64_t v106 = v181;
          *(void *)&long long v192 = v181;
          *((void *)&v192 + 1) = v179;
          uint64_t v193 = (uint64_t)v182;
          uint64_t v194 = v177;
          uint64_t v195 = v176;
          uint64_t v107 = type metadata accessor for PINENormEqualityCheckCircuit();
          uint64_t v108 = (void *)swift_getWitnessTable();
          uint64_t v109 = FullyLinearProof.proofLength.getter(v107, (uint64_t)v108);
          uint64_t v110 = type metadata accessor for ArraySlice();
          uint64_t v172 = (char *)swift_getWitnessTable();
          RandomAccessCollection<>.popFirst(_:)(v109, v110);
          uint64_t v111 = v193;
          unint64_t v112 = v194;
          long long v178 = v192;
          uint64_t v113 = FullyLinearProof.queryRandLength.getter(v107, (uint64_t)v108);
          uint64_t v114 = static FieldElement.randomVector<A>(count:using:)(v113, v171, v106);
          long long v192 = v178;
          uint64_t v193 = v111;
          uint64_t v194 = v112;
          swift_bridgeObjectRetain();
          uint64_t v104 = v105;
          uint64_t v115 = Array.init()();
          uint64_t v116 = v174;
          uint64_t v117 = swift_getWitnessTable();
          uint64_t v118 = v183;
          FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)((uint64_t)&v187, v105, (uint64_t)&v192, v114, v115, v169, v107, v116, v110, v108, v117, (uint64_t)v172);
          if (v118)
          {
LABEL_30:
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();
            return;
          }
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v103 = v175 - 1;
          if (v175 == 1) {
            goto LABEL_20;
          }
        }
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
    }
    __break(1u);
    goto LABEL_33;
  }
}

uint64_t PINE.prepareMessageFrom(_:parameter:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = a3[2];
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v11 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = v12[4];
  uint64_t v13 = v12[5];
  uint64_t v15 = v12[7];
  *(void *)&long long v86 = v8;
  *((void *)&v86 + 1) = v14;
  uint64_t v77 = v15;
  uint64_t v78 = v14;
  uint64_t v85 = v13;
  uint64_t v87 = v13;
  uint64_t v88 = v15;
  uint64_t v16 = type metadata accessor for PINEPrepareShare();
  *(void *)&long long v81 = a1;
  uint64_t v17 = MEMORY[0x2612241C0](a1, v16);
  uint64_t v79 = v4;
  uint64_t v18 = *v4;
  if (v17 != *v4)
  {
    uint64_t v30 = v17;
    *(void *)&long long v86 = 0;
    *((void *)&v86 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(53);
    v31._countAndFlagsBits = 0x4E49502F46414456;
    v31._object = (void *)0xEF74666977732E45;
    String.append(_:)(v31);
    v32._object = (void *)0x8000000260BFEA50;
    v32._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v32);
    uint64_t v91 = v30;
    v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._countAndFlagsBits = 15649;
    v34._object = (void *)0xE200000000000000;
    String.append(_:)(v34);
    uint64_t v91 = v18;
    v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._countAndFlagsBits = 41;
    v36._object = (void *)0xE100000000000000;
    String.append(_:)(v36);
    long long v37 = v86;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(_OWORD *)uint64_t v38 = v37;
    *(unsigned char *)(v38 + 16) = 1;
    return swift_willThrow();
  }
  uint64_t v75 = a4;
  uint64_t v19 = v85;
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  uint64_t v20 = PINE.verifierLength.getter((uint64_t)a3);
  uint64_t v21 = specialized Array.init(repeating:count:)((uint64_t)v11, v20, v8);
  uint64_t v22 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v76 = &v71;
  uint64_t v95 = v81;
  uint64_t v90 = v21;
  MEMORY[0x270FA5388](v22, v23);
  uint64_t v24 = a3[3];
  *(&v71 - 8) = v8;
  *(&v71 - 7) = v24;
  uint64_t v83 = v24;
  uint64_t v26 = v77;
  uint64_t v25 = v78;
  *(&v71 - 6) = v78;
  *(&v71 - 5) = v19;
  uint64_t v82 = a3[6];
  *(&v71 - 4) = v82;
  *(&v71 - 3) = v26;
  uint64_t v84 = a3[8];
  *(&v71 - 2) = v84;
  uint64_t v27 = type metadata accessor for Array();
  type metadata accessor for Array();
  swift_getWitnessTable();
  unint64_t v28 = v80;
  uint64_t result = Sequence.reduce<A>(into:_:)();
  if (!v28)
  {
    uint64_t v95 = v86;
    swift_getWitnessTable();
    uint64_t v39 = ArraySlice.init<A>(_:)();
    uint64_t v80 = &v71;
    uint64_t v91 = v39;
    uint64_t v92 = v40;
    uint64_t v93 = v41;
    uint64_t v94 = v42;
    *(void *)&long long v86 = v81;
    MEMORY[0x270FA5388](v39, v40);
    uint64_t v43 = v83;
    *(&v71 - 8) = v8;
    *(&v71 - 7) = v43;
    uint64_t v44 = v85;
    *(&v71 - 6) = v25;
    *(&v71 - 5) = v44;
    uint64_t v76 = a3;
    uint64_t v45 = v82;
    *(&v71 - 4) = v82;
    *(&v71 - 3) = v26;
    *(&v71 - 2) = v84;
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v73 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in PINE.prepareMessageFrom(_:parameter:), (uint64_t)(&v71 - 10), v27, (uint64_t)&type metadata for Seed, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v46);
    *(void *)&long long v86 = v81;
    MEMORY[0x270FA5388](v73, v47);
    uint64_t v80 = (uint64_t *)v8;
    *(&v71 - 8) = v8;
    *(&v71 - 7) = v43;
    uint64_t v48 = v85;
    *(&v71 - 6) = v25;
    *(&v71 - 5) = v48;
    *(&v71 - 4) = v45;
    *(&v71 - 3) = v26;
    uint64_t v49 = v84;
    *(&v71 - 2) = v84;
    uint64_t result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #3 in PINE.prepareMessageFrom(_:parameter:), (uint64_t)(&v71 - 10), v27, (uint64_t)&type metadata for Seed, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v50);
    uint64_t v51 = *(void *)((char *)v79 + *((int *)v76 + 22));
    if (v51 < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v52 = v49;
      uint64_t WitnessTable = result;
      if (v51)
      {
        uint64_t v53 = v80;
        uint64_t v55 = v82;
        uint64_t v54 = v83;
        while (1)
        {
          *(void *)&long long v86 = v53;
          *((void *)&v86 + 1) = v54;
          uint64_t v87 = v48;
          uint64_t v88 = v55;
          uint64_t v89 = v52;
          uint64_t v56 = type metadata accessor for PINENormEqualityCheckCircuit();
          uint64_t v57 = (void *)swift_getWitnessTable();
          uint64_t v58 = FullyLinearProof.verifierLength.getter(v56, (uint64_t)v57);
          uint64_t v59 = type metadata accessor for ArraySlice();
          swift_getWitnessTable();
          RandomAccessCollection<>.popFirst(_:)(v58, v59);
          long long v81 = v86;
          if ((FullyLinearProof.decide<A>(verifier:)(&v86, v56, v59, v57) & 1) == 0) {
            break;
          }
          uint64_t result = swift_unknownObjectRelease();
          --v51;
          uint64_t v53 = v80;
          uint64_t v52 = v84;
          uint64_t v48 = v85;
          uint64_t v55 = v82;
          uint64_t v54 = v83;
          if (!v51) {
            goto LABEL_12;
          }
        }
LABEL_17:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
        swift_allocError();
        *(void *)uint64_t v70 = 0;
        *(void *)(v70 + 8) = 0;
        *(unsigned char *)(v70 + 16) = 4;
        swift_willThrow();
        swift_unknownObjectRelease();
        return swift_unknownObjectRelease();
      }
      uint64_t v53 = v80;
      uint64_t v55 = v82;
      uint64_t v54 = v83;
LABEL_12:
      uint64_t v60 = *(void *)((char *)v79 + *((int *)v76 + 21));
      if ((v60 & 0x8000000000000000) == 0)
      {
        uint64_t v72 = *(void *)((char *)v79 + *((int *)v76 + 21));
        if (!v60)
        {
LABEL_16:
          uint64_t v65 = v76;
          uint64_t v66 = swift_getWitnessTable();
          *(void *)&long long v86 = v65;
          *((void *)&v86 + 1) = v53;
          uint64_t v87 = v66;
          uint64_t v88 = v48;
          type metadata accessor for WraparoundJointRandomness();
          uint64_t v67 = WraparoundJointRandomness.__allocating_init(parts:)(v73);
          *(void *)&long long v86 = v65;
          *((void *)&v86 + 1) = v53;
          uint64_t v87 = v66;
          uint64_t v88 = v48;
          type metadata accessor for VerificationJointRandomness();
          VerificationJointRandomness.__allocating_init(count:numOfProofs:parts:)(3, v72, WitnessTable);
          uint64_t v68 = *(void *)(v67 + 24);
          swift_bridgeObjectRetain();
          uint64_t v69 = VerificationJointRandomness.seed.getter();
          swift_release();
          swift_release();
          swift_unknownObjectRelease();
          return PINEPrepareMessage.init(wraparoundJointRandSeed:verificationJointRandSeed:)(v68, v69, v75);
        }
        while (1)
        {
          *(void *)&long long v86 = v53;
          *((void *)&v86 + 1) = v54;
          uint64_t v87 = v48;
          uint64_t v88 = v55;
          uint64_t v89 = v52;
          uint64_t v61 = type metadata accessor for PINEMainCircuit();
          uint64_t v62 = (void *)swift_getWitnessTable();
          uint64_t v63 = FullyLinearProof.verifierLength.getter(v61, (uint64_t)v62);
          uint64_t v64 = type metadata accessor for ArraySlice();
          swift_getWitnessTable();
          RandomAccessCollection<>.popFirst(_:)(v63, v64);
          long long v81 = v86;
          if ((FullyLinearProof.decide<A>(verifier:)(&v86, v61, v64, v62) & 1) == 0) {
            goto LABEL_17;
          }
          swift_unknownObjectRelease();
          --v60;
          uint64_t v53 = v80;
          uint64_t v52 = v84;
          uint64_t v48 = v85;
          uint64_t v55 = v82;
          uint64_t v54 = v83;
          if (!v60) {
            goto LABEL_16;
          }
        }
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t PINE.prepareState<A>(from:aggregatorID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v33 = a5;
  uint64_t v24 = a1;
  uint64_t v25 = a6;
  uint64_t v23 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v12 + 64);
  long long v14 = *(_OWORD *)(v12 + 40);
  long long v26 = *(_OWORD *)(v12 + 16);
  long long v27 = v14;
  long long v28 = v26;
  long long v29 = v14;
  uint64_t v30 = v13;
  uint64_t v15 = type metadata accessor for PINEMainCircuit();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v17 = PINECircuit.outputLength.getter(v15, WitnessTable);
  uint64_t v18 = *(void *)(a3 + 32);
  uint64_t v19 = v26;
  uint64_t result = PINEPrepareState.DecodableParameter.init(aggregatorID:outputShareCount:)(a2, v17, v18, *(void *)(a3 + 56), &v31);
  if (!v6)
  {
    long long v27 = v31;
    uint64_t v21 = v32;
    (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v11, v24, a4);
    long long v28 = v27;
    *(void *)&long long v29 = v21;
    BYTE8(v29) = 0;
    return PINEPrepareState.init<A>(from:parameter:)((uint64_t)v11, (uint64_t)&v28, v19, v18, a4);
  }
  return result;
}

uint64_t PINE.prepareMessage<A>(from:aggregatorID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  MEMORY[0x270FA5388](a1, a1);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v10);
  return PINEPrepareMessage.init<A>(from:parameter:)((uint64_t)v10, *(void *)(a2 + 32), a3, *(void *)(a2 + 56), a4, a5);
}

uint64_t PINE.prepareNext(state:message:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v8 = *a2;
  if (!specialized static Array<A>.== infix(_:_:)(a1[2], a2[1]))
  {
    unint64_t v25 = 0;
    unint64_t v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(81);
    v13._countAndFlagsBits = 0x4E49502F46414456;
    v13._object = (void *)0xEF74666977732E45;
    String.append(_:)(v13);
    unint64_t v14 = 0xD00000000000003BLL;
    uint64_t v15 = " mismatched verification joint randomness seed:\nin state: (";
LABEL_7:
    unint64_t v17 = (unint64_t)(v15 - 32) | 0x8000000000000000;
    String.append(_:)(*(Swift::String *)&v14);
    swift_bridgeObjectRetain();
    v18._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._object = (void *)0x8000000260BFE870;
    v19._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v19);
    swift_bridgeObjectRetain();
    uint64_t v20 = String.init<A>(describing:)();
    goto LABEL_8;
  }
  if (!specialized static Array<A>.== infix(_:_:)(v7, v8))
  {
    unint64_t v25 = 0;
    unint64_t v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(79);
    v16._countAndFlagsBits = 0x4E49502F46414456;
    v16._object = (void *)0xEF74666977732E45;
    String.append(_:)(v16);
    unint64_t v14 = 0xD000000000000039;
    uint64_t v15 = " mismatched wraparound joint randomness seed:\nin state: (";
    goto LABEL_7;
  }
  uint64_t v9 = MEMORY[0x2612241C0](v6, *(void *)(a3 + 16));
  uint64_t v10 = type metadata accessor for PINEMainCircuit();
  uint64_t WitnessTable = swift_getWitnessTable();
  if (v9 == PINECircuit.outputLength.getter(v10, WitnessTable))
  {
    *(void *)a4 = v6;
    *(_OWORD *)(a4 + 8) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(unsigned char *)(a4 + 56) = 1;
    return swift_bridgeObjectRetain();
  }
  _StringGuts.grow(_:)(49);
  swift_bridgeObjectRelease();
  unint64_t v25 = 0xD000000000000033;
  unint64_t v26 = 0x8000000260BFE8D0;
  v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 0x203A746F670A2CLL;
  v24._object = (void *)0xE700000000000000;
  String.append(_:)(v24);
  PINECircuit.outputLength.getter(v10, WitnessTable);
  uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
LABEL_8:
  String.append(_:)(*(Swift::String *)&v20);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
  swift_allocError();
  *(void *)uint64_t v22 = v25;
  *(void *)(v22 + 8) = v26;
  *(unsigned char *)(v22 + 16) = 1;
  return swift_willThrow();
}

uint64_t PINE.unshard<A, B>(_:numOfMeasurements:into:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return specialized PINE.unshard<A, B>(_:numOfMeasurements:into:parameter:)(a1, a3, a4, a5, a6, a7, a8, a9);
}

BOOL specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32)) {
    return 0;
  }
  uint64_t v3 = (unsigned __int8 *)(a1 + 33);
  uint64_t v4 = (unsigned __int8 *)(a2 + 33);
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    int v8 = *v3++;
    int v7 = v8;
    int v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = a1 + 32;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(v4 + 16);
  if (v6 != *(void *)(v5 + 16)) {
    return 0;
  }
  uint64_t v7 = 1;
  do
  {
    if (v6 && v4 != v5)
    {
      if (*(unsigned __int8 *)(v4 + 32) != *(unsigned __int8 *)(v5 + 32)) {
        return 0;
      }
      if (v6 != 1)
      {
        if (*(unsigned __int8 *)(v4 + 33) != *(unsigned __int8 *)(v5 + 33)) {
          return 0;
        }
        uint64_t v10 = (unsigned __int8 *)(v4 + 34);
        uint64_t v11 = (unsigned __int8 *)(v5 + 34);
        for (uint64_t i = v6 - 2; i; --i)
        {
          int v14 = *v10++;
          int v13 = v14;
          int v15 = *v11++;
          if (v13 != v15) {
            return 0;
          }
        }
      }
    }
    if (v7 == v2) {
      return 1;
    }
    uint64_t result = 0;
    uint64_t v9 = 8 * v7++;
    uint64_t v4 = *(void *)(v3 + v9);
    uint64_t v5 = *(void *)(a2 + 32 + v9);
    uint64_t v6 = *(void *)(v4 + 16);
  }
  while (v6 == *(void *)(v5 + 16));
  return result;
}

uint64_t PINE.measurementShareLength.getter(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 16);
  uint64_t v3 = v21;
  uint64_t v22 = v4;
  uint64_t v23 = v5;
  uint64_t v24 = v6;
  uint64_t v25 = v7;
  uint64_t v8 = type metadata accessor for PINEMainCircuit();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v8, v10);
  int v13 = (char *)&v20 - v12;
  uint64_t v14 = v1 + *(int *)(a1 + 76);
  uint64_t v15 = PINEMainCircuit.encodedMeasurementLength.getter(v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v13, v14, v8);
  Swift::String v16 = &v13[*(int *)(v8 + 64)];
  uint64_t v21 = v3;
  uint64_t v22 = v4;
  uint64_t v23 = v5;
  uint64_t v24 = v6;
  uint64_t v25 = v7;
  uint64_t v17 = type metadata accessor for PINECircuitParameter();
  uint64_t v18 = *(void *)&v16[*(int *)(v17 + 92)];
  (*(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
  uint64_t result = v15 - v18;
  if (__OFSUB__(v15, v18)) {
    __break(1u);
  }
  return result;
}

uint64_t PINE.proofLength.getter(uint64_t a1)
{
  return PINE.proofLength.getter(a1, FullyLinearProof.proofLength.getter);
}

double static PINEDefaultParameter.alpha.getter()
{
  return 8.7;
}

uint64_t static PINEDefaultParameter.wraparoundCheckCount.getter()
{
  return 100;
}

uint64_t static PINEDefaultParameter.wraparoundCheckSuccessCount.getter()
{
  return 100;
}

uint64_t static PINE.numOfAggregatorRange.getter()
{
  return 2;
}

uint64_t PINE.numOfAggregators.getter()
{
  return *(void *)v0;
}

uint64_t static PINE.numOfRounds.getter()
{
  return 1;
}

uint64_t PINE.randomSizeForShard.getter(uint64_t result)
{
  uint64_t v2 = *v1;
  if (__OFSUB__(*v1, 1))
  {
    __break(1u);
    goto LABEL_8;
  }
  if (*v1 + 0x3FFFFFFFFFFFFFFFLL < 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v2 + 0x4000000000000000 < 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v3 = 2 * (*v1 - 1);
  BOOL v4 = __OFADD__(v3, 2 * v2);
  uint64_t v5 = v3 + 2 * v2;
  if (v4)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v6 = v5 | 1;
  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)(result + 56) + 8))(*(void *)(result + 32));
  uint64_t result = v6 * v7;
  if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63) {
LABEL_11:
  }
    __break(1u);
  return result;
}

uint64_t static PINE.version.getter()
{
  return 1;
}

uint64_t PINE.chunkLength.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 76));
}

uint64_t PINE.chunkLengthNormEquality.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 80));
}

uint64_t PINE.flp.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 76);
  uint64_t v5 = type metadata accessor for PINEMainCircuit();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t PINE.flpNormEqualityCheck.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 80);
  uint64_t v5 = type metadata accessor for PINENormEqualityCheckCircuit();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t PINE.verifierLength.getter(uint64_t a1)
{
  return PINE.proofLength.getter(a1, FullyLinearProof.verifierLength.getter);
}

uint64_t PINE.proofLength.getter(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(v2 + *(int *)(a1 + 88));
  uint64_t v6 = type metadata accessor for PINENormEqualityCheckCircuit();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = a2(v6, WitnessTable);
  uint64_t v9 = v5 * result;
  if ((unsigned __int128)(v5 * (__int128)result) >> 64 != (v5 * result) >> 63)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v10 = *(void *)(v2 + *(int *)(a1 + 84));
  uint64_t v11 = type metadata accessor for PINEMainCircuit();
  uint64_t v12 = swift_getWitnessTable();
  uint64_t result = a2(v11, v12);
  uint64_t v13 = v10 * result;
  if ((unsigned __int128)(v10 * (__int128)result) >> 64 != (v10 * result) >> 63)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = v9 + v13;
  if (__OFADD__(v9, v13)) {
LABEL_7:
  }
    __break(1u);
  return result;
}

uint64_t PINE.numOfProofs.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 84));
}

uint64_t PINE.numOfProofsNormEquality.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 88));
}

BOOL static PINE.isRecommended(_:)(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 0xFF;
}

uint64_t PINE.init(l2NormBoundInt:fractionalBitCount:measurementLength:numOfAggregators:numOfProofs:numOfProofsNormEquality:chunkLength:chunkLengthNormEquality:alpha:wraparoundCheckCount:wraparoundCheckSuccessCount:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, int a7@<W7>, uint64_t *a8@<X8>, double a9@<D0>, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  LODWORD(v93) = a7;
  uint64_t v94 = a6;
  uint64_t v102 = a1;
  uint64_t v103 = a5;
  unint64_t v99 = a2;
  uint64_t v100 = a3;
  uint64_t v91 = a8;
  unint64_t v104 = a14;
  unint64_t v105 = a15;
  uint64_t v106 = a17;
  uint64_t v107 = a18;
  uint64_t v108 = a20;
  uint64_t v88 = type metadata accessor for PINENormEqualityCheckCircuit();
  uint64_t v87 = *(void *)(v88 - 8);
  MEMORY[0x270FA5388](v88, v22);
  uint64_t v90 = (uint64_t)&v78 - v23;
  unint64_t v104 = a14;
  unint64_t v105 = a15;
  unint64_t v101 = a15;
  uint64_t v106 = a17;
  uint64_t v107 = a18;
  uint64_t v97 = a18;
  uint64_t v98 = a20;
  uint64_t v108 = a20;
  uint64_t v92 = type metadata accessor for PINEMainCircuit();
  uint64_t v89 = *(void *)(v92 - 8);
  MEMORY[0x270FA5388](v92, v24);
  uint64_t v96 = (uint64_t)&v78 - v25;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v27 = type metadata accessor for Optional();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v30 = MEMORY[0x270FA5388](v27, v29);
  uint64_t v32 = (char *)&v78 - v31;
  uint64_t v34 = MEMORY[0x270FA5388](v30, v33);
  uint64_t v36 = MEMORY[0x270FA5388](v34, v35);
  uint64_t v38 = (char *)&v78 - v37;
  MEMORY[0x270FA5388](v36, v39);
  if ((unint64_t)(v41 - 2) > 0xFD)
  {
    unint64_t v104 = 0;
    unint64_t v105 = 0xE000000000000000;
    uint64_t v53 = v41;
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    unint64_t v104 = 0xD000000000000031;
    unint64_t v105 = 0x8000000260BFF9F0;
    uint64_t v113 = 2;
    v111._object = (void *)0xE000000000000000;
    uint64_t v112 = 256;
    v111._countAndFlagsBits = 0;
    _print_unlocked<A, B>(_:_:)();
    v54._countAndFlagsBits = 3943982;
    v54._object = (void *)0xE300000000000000;
    String.append(_:)(v54);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v111);
    swift_bridgeObjectRelease();
    v55._countAndFlagsBits = 0x20746F67202CLL;
    v55._object = (void *)0xE600000000000000;
    String.append(_:)(v55);
    v111._countAndFlagsBits = v53;
LABEL_9:
    v59._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v59);
    swift_bridgeObjectRelease();
    unint64_t v60 = v104;
    unint64_t v61 = v105;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v62 = v60;
    *(void *)(v62 + 8) = v61;
    *(unsigned char *)(v62 + 16) = 1;
    return swift_willThrow();
  }
  if ((unint64_t)(a4 - 1) > 0xFE)
  {
    unint64_t v104 = 0;
    unint64_t v105 = 0xE000000000000000;
    _StringGuts.grow(_:)(48);
    swift_bridgeObjectRelease();
    unint64_t v104 = 0xD00000000000003BLL;
    unint64_t v105 = 0x8000000260BFFA30;
    v111._countAndFlagsBits = a4;
    goto LABEL_9;
  }
  if ((unint64_t)(v103 - 1) > 0xFE)
  {
    unint64_t v104 = 0;
    unint64_t v105 = 0xE000000000000000;
    uint64_t v56 = v103;
    _StringGuts.grow(_:)(80);
    v57._countAndFlagsBits = 0x4E49502F46414456;
    v57._object = (void *)0xEF74666977732E45;
    String.append(_:)(v57);
    v58._countAndFlagsBits = 0xD00000000000004CLL;
    v58._object = (void *)0x8000000260BFFA70;
    String.append(_:)(v58);
    v111._countAndFlagsBits = v56;
    goto LABEL_9;
  }
  uint64_t v85 = v28;
  uint64_t v84 = v43;
  long long v86 = (char *)&v78 - v40;
  uint64_t v82 = a4;
  uint64_t v83 = v41;
  unint64_t v104 = v102;
  uint64_t v44 = v42;
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type UInt64 and conformance UInt64();
  dispatch thunk of Numeric.init<A>(exactly:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v32, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v85 + 8))(v32, v27);
    unint64_t v104 = 0;
    unint64_t v105 = 0xE000000000000000;
    _StringGuts.grow(_:)(76);
    v45._countAndFlagsBits = 0x4E49502F46414456;
    v45._object = (void *)0xEF74666977732E45;
    String.append(_:)(v45);
    v46._object = (void *)0x8000000260BFFAC0;
    v46._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v46);
    v111._countAndFlagsBits = v102;
    v47._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._countAndFlagsBits = 0xD000000000000035;
    v48._object = (void *)0x8000000260BFFAE0;
    String.append(_:)(v48);
    v49._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v49);
    swift_bridgeObjectRelease();
    unint64_t v50 = v104;
    unint64_t v51 = v105;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v52 = v50;
    *(void *)(v52 + 8) = v51;
    *(unsigned char *)(v52 + 16) = 1;
    return swift_willThrow();
  }
  LODWORD(v102) = v93 & 1;
  uint64_t v64 = v86;
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v86, v32, AssociatedTypeWitness);
  uint64_t v93 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
  v93(v38, v64, AssociatedTypeWitness);
  *(void *)&long long v75 = a17;
  *((void *)&v75 + 1) = v97;
  uint64_t v65 = v95;
  uint64_t v66 = v94;
  int v67 = v102;
  uint64_t v94 = a12;
  uint64_t v102 = a13;
  PINEMainCircuit.init(l2NormBoundInt:fractionalBitCount:measurementLength:chunkLength:alpha:wraparoundCheckCount:wraparoundCheckSuccessCount:)((uint64_t)v38, v99, v100, v66, v67, a12, a13, a14, v96, a9, v101, v75, v98);
  if (v65) {
    return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v86, AssociatedTypeWitness);
  }
  uint64_t v95 = v44;
  uint64_t v85 = a10;
  int v81 = a11 & 1;
  unint64_t v104 = a14;
  unint64_t v105 = v101;
  uint64_t v106 = a16;
  uint64_t v107 = a17;
  uint64_t v68 = v97;
  uint64_t v69 = v98;
  uint64_t v108 = v97;
  uint64_t v109 = a19;
  uint64_t v110 = v98;
  uint64_t v79 = type metadata accessor for PINE();
  uint64_t v70 = *(void (**)(void))(v89 + 32);
  uint64_t v80 = (char *)v91 + *(int *)(v79 + 76);
  v70();
  uint64_t v71 = v84;
  v93((char *)v84, v86, AssociatedTypeWitness);
  *((void *)&v76 + 1) = v68;
  uint64_t v77 = v69;
  *(void *)&long long v76 = a17;
  uint64_t v72 = v90;
  PINENormEqualityCheckCircuit.init(l2NormBoundInt:fractionalBitCount:measurementLength:chunkLength:alpha:wraparoundCheckCount:wraparoundCheckSuccessCount:)(v71, v99, v100, v85, v81, v94, v102, a14, v90, a9, v101, v76, v77);
  (*(void (**)(char *, uint64_t))(v95 + 8))(v86, AssociatedTypeWitness);
  uint64_t v73 = v79;
  uint64_t v74 = v91;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v87 + 32))((char *)v91 + *(int *)(v79 + 80), v72, v88);
  *uint64_t v74 = v83;
  *(uint64_t *)((char *)v74 + *(int *)(v73 + 84)) = v82;
  *(uint64_t *)((char *)v74 + *(int *)(v73 + 88)) = v103;
  return result;
}

uint64_t PINE.init(l2NormBoundInt:fractionalBitCount:measurementLength:numOfAggregators:numOfProofs:chunkLength:chunkLengthNormEquality:alpha:wraparoundCheckCount:wraparoundCheckSuccessCount:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, char a6@<W6>, uint64_t a7@<X7>, uint64_t *a8@<X8>, double a9@<D0>, char a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return PINE.init(l2NormBoundInt:fractionalBitCount:measurementLength:numOfAggregators:numOfProofs:numOfProofsNormEquality:chunkLength:chunkLengthNormEquality:alpha:wraparoundCheckCount:wraparoundCheckSuccessCount:)(a1, a2, a3, a4, 1, a5, a6 & 1, a8, a9, a7, a10 & 1, a11, a12, a13, a14, a15, a16, a17, a18,
           a19);
}

uint64_t PINE.init(l2NormBound:fractionalBitCount:measurementLength:numOfAggregators:numOfProofs:numOfProofsNormEquality:chunkLength:chunkLengthNormEquality:alpha:wraparoundCheckCount:wraparoundCheckSuccessCount:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>, double a9@<D0>, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  char v21 = a7;
  uint64_t v25 = static PINE.l2NormBoundIntFrom(l2NormBound:fractionalBitCount:)(a1, a2, a14, a15, a4, a17, a18, a7, a20);
  if (!v20) {
    PINE.init(l2NormBoundInt:fractionalBitCount:measurementLength:numOfAggregators:numOfProofs:numOfProofsNormEquality:chunkLength:chunkLengthNormEquality:alpha:wraparoundCheckCount:wraparoundCheckSuccessCount:)((uint64_t)v25, a2, a3, a4, a5, a6, v21 & 1, a8, a9, a10, a11 & 1, a12, a13, a14, a15, a16, a17, a18, a19,
  }
      a20);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

char *static PINE.l2NormBoundIntFrom(l2NormBound:fractionalBitCount:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v79 = a7;
  uint64_t v80 = a4;
  uint64_t v83 = a1;
  long long v76 = (char *)a2;
  uint64_t v77 = (char *)a9;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  uint64_t v74 = *(void *)(*(void *)(v11 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness, v12);
  uint64_t v72 = (char *)v69 - v13;
  uint64_t v14 = swift_checkMetadataState();
  uint64_t v75 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14, v15);
  uint64_t v71 = (char *)v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16, v18);
  char v21 = (char *)v69 - v20;
  uint64_t v23 = MEMORY[0x270FA5388](v19, v22);
  uint64_t v25 = (char *)v69 - v24;
  uint64_t v27 = MEMORY[0x270FA5388](v23, v26);
  uint64_t v29 = (char *)v69 - v28;
  uint64_t v31 = MEMORY[0x270FA5388](v27, v30);
  uint64_t v33 = (char *)v69 - v32;
  MEMORY[0x270FA5388](v31, v34);
  uint64_t v36 = (char *)v69 - v35;
  uint64_t v37 = v78;
  static PINECircuitParameter.l2NormBoundIntFrom(l2NormBound:fractionalBitCount:)(v83, (int64_t)v76, a3, a6, (uint64_t)v77, (uint64_t)v69 - v35);
  if (!v37)
  {
    v69[2] = 0;
    uint64_t v70 = v25;
    uint64_t v78 = v21;
    uint64_t v38 = v11;
    uint64_t v39 = v75;
    uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v75 + 16);
    long long v76 = v36;
    v40(v33, v36, v14);
    char v41 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v77 = v33;
    v40(v29, v33, v14);
    uint64_t v42 = v14;
    if (v41)
    {
      v69[0] = v40;
      swift_getAssociatedConformanceWitness();
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      uint64_t v43 = v70;
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      v69[1] = v38;
      char v44 = dispatch thunk of static Comparable.< infix(_:_:)();
      Swift::String v45 = *(void (**)(char *, uint64_t))(v39 + 8);
      v45(v43, v14);
      v45(v29, v14);
      if (v44)
      {
        v45(v77, v14);
LABEL_21:
        int64_t v63 = (int64_t)v76;
        unint64_t v81 = 0;
        unint64_t v82 = 0xE000000000000000;
        _StringGuts.grow(_:)(45);
        v64._countAndFlagsBits = 0x4E49502F46414456;
        v64._object = (void *)0xEF74666977732E45;
        String.append(_:)(v64);
        v65._countAndFlagsBits = 0x6D726F4E326C203ALL;
        v65._object = (void *)0xEE003D646E756F42;
        String.append(_:)(v65);
        swift_getAssociatedTypeWitness();
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v66._object = (void *)0x8000000260BFFB20;
        v66._countAndFlagsBits = 0xD00000000000001BLL;
        String.append(_:)(v66);
        char v21 = (char *)v81;
        unint64_t v67 = v82;
        lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
        swift_allocError();
        *(void *)uint64_t v68 = v21;
        *(void *)(v68 + 8) = v67;
        *(unsigned char *)(v68 + 16) = 1;
        swift_willThrow();
        v45((char *)v63, v42);
        return v21;
      }
      uint64_t v40 = (void (*)(char *, char *, uint64_t))v69[0];
    }
    else
    {
      Swift::String v45 = *(void (**)(char *, uint64_t))(v39 + 8);
      v45(v29, v14);
    }
    uint64_t v46 = (uint64_t)v77;
    uint64_t v47 = dispatch thunk of BinaryInteger.bitWidth.getter();
    Swift::String v48 = v78;
    v40(v78, (char *)v46, v42);
    if (v47 <= 63)
    {
      v45(v48, v42);
      goto LABEL_9;
    }
    unint64_t v81 = -1;
    char v50 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v51 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v50)
    {
      if (v51 <= 64)
      {
        swift_getAssociatedConformanceWitness();
        dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        uint64_t v52 = v70;
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        uint64_t v53 = v78;
        LODWORD(v74) = dispatch thunk of static Comparable.> infix(_:_:)();
        uint64_t v54 = v75;
        v45(v52, v42);
        Swift::String v55 = v45;
        unint64_t v56 = v81;
        Swift::String v57 = v71;
        (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v71, v53, v42);
        if ((v74 & 1) == 0)
        {
          v55(v57, v42);
          Swift::String v45 = v55;
          uint64_t v46 = (uint64_t)v77;
          goto LABEL_9;
        }
        unint64_t v58 = dispatch thunk of BinaryInteger._lowWord.getter();
        v55(v57, v42);
        Swift::String v45 = v55;
        uint64_t v46 = (uint64_t)v77;
        if (v56 >= v58)
        {
LABEL_9:
          char v21 = (char *)dispatch thunk of BinaryInteger._lowWord.getter();
          v45((char *)v46, v42);
          v45(v76, v42);
          return v21;
        }
LABEL_20:
        v45((char *)v46, v42);
        goto LABEL_21;
      }
    }
    else if (v51 < 65)
    {
      unint64_t v61 = v78;
      unint64_t v62 = dispatch thunk of BinaryInteger._lowWord.getter();
      v45(v61, v42);
      if (v81 >= v62) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    Swift::String v59 = v70;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    unint64_t v60 = v78;
    LODWORD(v74) = dispatch thunk of static Comparable.< infix(_:_:)();
    v45(v59, v42);
    v45(v60, v42);
    if ((v74 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
  return v21;
}

ValueMetadata *static PINE.identifier.getter@<X0>(char *a1@<X8>)
{
  return static PINECircuit.identifier.getter(a1);
}

uint64_t static PINE.nonceSize.getter()
{
  return 16;
}

char *static PINE.domainSeparationTag(usage:)(unsigned __int8 *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v1 = *a1;
  uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 7, 0, MEMORY[0x263F8EE78]);
  unint64_t v4 = *((void *)v2 + 2);
  unint64_t v3 = *((void *)v2 + 3);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v4 + 1;
  v2[v4 + 32] = 1;
  uint64_t v10 = v2;
  static PINE.identifier.getter((char *)&v9 + 3);
  unsigned int v8 = bswap32(dword_260BFC534[SHIBYTE(v9)]);
  size_t v5 = specialized _copyCollectionToContiguousArray<A>(_:)((size_t)&v8, (unint64_t)&v9);
  specialized Array.append<A>(contentsOf:)(v5);
  LOWORD(v8) = __rev16(v1 + 1);
  size_t v6 = specialized _copyCollectionToContiguousArray<A>(_:)((size_t)&v8, (unint64_t)&v8 + 2);
  specialized Array.append<A>(contentsOf:)(v6);
  return v10;
}

ValueMetadata *protocol witness for static VDAFProtocol.identifier.getter in conformance PINE<A, B, C>@<X0>(char *a1@<X8>)
{
  return static PINE.identifier.getter(a1);
}

char *protocol witness for static VDAFProtocol.domainSeparationTag(usage:) in conformance PINE<A, B, C>(unsigned __int8 *a1)
{
  return static PINE.domainSeparationTag(usage:)(a1);
}

uint64_t PINE.verifyKeyLength.getter(uint64_t *a1)
{
  return specialized PINE.verifyKeyLength.getter(a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
}

uint64_t closure #1 in PINE.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  LOBYTE(v24[0]) = 1;
  uint64_t v22 = static PINE.domainSeparationTag(usage:)((unsigned __int8 *)v24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_260BF9FE0;
  v24[0] = a4;
  v24[1] = a5;
  v24[2] = a6;
  v24[3] = a7;
  v24[4] = a8;
  v24[5] = a9;
  v24[6] = a10;
  uint64_t result = type metadata accessor for PINE();
  unint64_t v19 = *(void *)(a2 + *(int *)(result + 88));
  if ((v19 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v19 > 0xFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  *(unsigned char *)(v17 + 32) = v19;
  unint64_t v20 = *(void *)(a2 + *(int *)(result + 84));
  if ((v20 & 0x8000000000000000) != 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v20 > 0xFF)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  *(unsigned char *)(v17 + 33) = v20;
  if ((a3 & 0x8000000000000000) != 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (a3 <= 0xFF)
  {
    *(unsigned char *)(v17 + 34) = a3;
    uint64_t v21 = static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(a1, (uint64_t)v22, v17, a6, a9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v21;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t PINE.aggregate<A>(_:parameter:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  uint64_t v25 = a1;
  uint64_t v7 = a3[2];
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v11 + 40);
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  uint64_t v13 = a3[3];
  uint64_t v14 = a3[6];
  uint64_t v21 = a3[8];
  v35[0] = v7;
  v35[1] = v13;
  _OWORD v35[2] = v12;
  v35[3] = v14;
  v35[4] = v21;
  uint64_t v15 = type metadata accessor for PINEMainCircuit();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v17 = PINECircuit.outputLength.getter(v15, WitnessTable);
  uint64_t v18 = specialized Array.init(repeating:count:)((uint64_t)v10, v17, v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  AggregateShare.init(_:)(v18, v35);
  uint64_t v26 = v7;
  uint64_t v27 = v13;
  uint64_t v28 = a3[4];
  uint64_t v29 = v22;
  uint64_t v30 = v12;
  uint64_t v31 = v14;
  uint64_t v32 = a3[7];
  uint64_t v33 = v23;
  uint64_t v34 = v21;
  type metadata accessor for AggregateShare();
  return Sequence.reduce<A>(into:_:)();
}

uint64_t PINE.isValid(parameter:previousParameters:)(uint64_t a1, uint64_t a2)
{
  return specialized PINE.isValid(parameter:previousParameters:)(a1, a2) & 1;
}

uint64_t PINE.prepareShare<A>(from:aggregatorID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  MEMORY[0x270FA5388](a1, a1);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v8);
  uint64_t v10 = PINE.verifierLength.getter(a2);
  return PINEPrepareShare.init<A>(from:parameter:)((uint64_t)v8, v10, 0, *(void *)(a2 + 16), *(void *)(a2 + 32), a3, *(void *)(a2 + 40), *(void *)(a2 + 56), a4);
}

uint64_t PINE.outputShare<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PINE.outputShare<A>(from:)(a1, a2, a3, a4, (uint64_t (*)(char *, uint64_t, void, uint64_t, void, uint64_t))OutputShare.init<A>(from:parameter:));
}

uint64_t protocol witness for Aggregator.verifyKeyLength.getter in conformance PINE<A, B, C>(uint64_t *a1)
{
  return specialized PINE.verifyKeyLength.getter(a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
}

void protocol witness for Aggregator.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:) in conformance PINE<A, B, C>(uint64_t a1, void *a2, uint64_t a3, Swift::Int a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t protocol witness for Aggregator.prepareMessageFrom(_:parameter:) in conformance PINE<A, B, C>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  return PINE.prepareMessageFrom(_:parameter:)(a1, a2, a3, a4);
}

uint64_t protocol witness for Aggregator.prepareNext(state:message:) in conformance PINE<A, B, C>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PINE.prepareNext(state:message:)(a1, a2, a3, a4);
}

uint64_t protocol witness for Aggregator.aggregate<A>(_:parameter:) in conformance PINE<A, B, C>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  return PINE.aggregate<A>(_:parameter:)(a1, a2, a5, a3, a4, a6);
}

uint64_t protocol witness for Aggregator.isValid(parameter:previousParameters:) in conformance PINE<A, B, C>(uint64_t a1, uint64_t a2)
{
  return specialized PINE.isValid(parameter:previousParameters:)(a1, a2) & 1;
}

uint64_t protocol witness for Aggregator.inputShare<A>(from:aggregatorID:) in conformance PINE<A, B, C>@<X0>(uint64_t a1@<X0>, Swift::Int a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  return PINE.inputShare<A>(from:aggregatorID:)(a1, a2, a5, a3, a4, a6);
}

uint64_t protocol witness for Aggregator.publicShare<A>(from:) in conformance PINE<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PINE.publicShare<A>(from:)(a1, a4, a2);
}

uint64_t protocol witness for Aggregator.prepareState<A>(from:aggregatorID:) in conformance PINE<A, B, C>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return PINE.prepareState<A>(from:aggregatorID:)(a1, a2, a5, a3, a4, a6);
}

uint64_t protocol witness for Aggregator.prepareShare<A>(from:aggregatorID:) in conformance PINE<A, B, C>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, void *a4@<X8>)
{
  return PINE.prepareShare<A>(from:aggregatorID:)(a1, a3, a2, a4);
}

uint64_t protocol witness for Aggregator.prepareMessage<A>(from:aggregatorID:) in conformance PINE<A, B, C>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  return PINE.prepareMessage<A>(from:aggregatorID:)(a1, a4, a2, a3, a5);
}

uint64_t protocol witness for Aggregator.outputShare<A>(from:) in conformance PINE<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PINE.outputShare<A>(from:)(a1, a4, a2, a3);
}

uint64_t PINE.unshard<A>(_:numOfMeasurements:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  return specialized PINE.unshard<A>(_:numOfMeasurements:parameter:)(a1, a3, a4, a5, a6);
}

uint64_t PINE.aggregateShare<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PINE.outputShare<A>(from:)(a1, a2, a3, a4, (uint64_t (*)(char *, uint64_t, void, uint64_t, void, uint64_t))AggregateShare.init<A>(from:parameter:));
}

uint64_t PINE.outputShare<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(char *, uint64_t, void, uint64_t, void, uint64_t))
{
  MEMORY[0x270FA5388](a1, a1);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v10);
  return a5(v10, 1, *(void *)(a2 + 16), a3, *(void *)(a2 + 40), a4);
}

uint64_t protocol witness for Collector.unshard<A>(_:numOfMeasurements:parameter:) in conformance PINE<A, B, C>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t result = specialized PINE.unshard<A>(_:numOfMeasurements:parameter:)(a1, a2, a5, a3, a4);
  if (!v6) {
    *a6 = result;
  }
  return result;
}

uint64_t protocol witness for Collector.aggregateShare<A>(from:) in conformance PINE<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PINE.aggregateShare<A>(from:)(a1, a4, a2, a3);
}

void *PINE.splitSeedBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  MEMORY[0x270FA5388](a1, a1);
  uint64_t v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v15 + 16))(v14);
  uint64_t v16 = ArraySlice.init<A>(_:)();
  uint64_t v71 = (char *)v16;
  uint64_t v72 = v17;
  uint64_t v73 = v18;
  uint64_t v74 = v19;
  if (__OFSUB__(*v4, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (*v4 - 1 < 0)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  MEMORY[0x270FA5388](v16, v17);
  *((_OWORD *)&v65 - 5) = *(_OWORD *)(a2 + 16);
  unint64_t v4 = *(void **)(a2 + 32);
  *(&v65 - 8) = (uint64_t)v4;
  *(&v65 - 7) = a3;
  *((_OWORD *)&v65 - 3) = *(_OWORD *)(a2 + 40);
  uint64_t v21 = *(void *)(a2 + 56);
  uint64_t v20 = *(void *)(a2 + 64);
  *(&v65 - 4) = v21;
  *(&v65 - 3) = a4;
  *(&v65 - 2) = v20;
  *(&v65 - 1) = (uint64_t)&v71;
  unint64_t v67 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF4SeedV16measurementShare_AI05proofG0AI24wraparoundJointRandBlindAI012verificationjkL0ts5NeverOTg5(partial apply for closure #1 in PINE.splitSeedBytes<A>(_:), (uint64_t)(&v65 - 12), 0, v22);
  uint64_t v23 = *(uint64_t (**)(void *, uint64_t))(v21 + 8);
  uint64_t v69 = v21 + 8;
  uint64_t v70 = v21;
  uint64_t v68 = v23;
  uint64_t v24 = v23(v4, v21);
  uint64_t v25 = v71;
  uint64_t v26 = v72;
  uint64_t v27 = v73;
  uint64_t v28 = v74;
  uint64_t v8 = specialized Collection.prefix(_:)(v24, v71, v72, v73, v74);
  uint64_t v66 = v29;
  uint64_t v9 = v30;
  a4 = v31;
  uint64_t v14 = (char *)specialized Collection.dropFirst(_:)(v24, v25, v26, v27, v28);
  uint64_t v5 = v32;
  uint64_t v6 = v33;
  uint64_t v7 = v34;
  uint64_t v71 = v14;
  uint64_t v72 = v32;
  uint64_t v73 = v33;
  uint64_t v74 = v34;
  if ((a4 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_5:
    specialized _copyCollectionToContiguousArray<A>(_:)(v8, v66, v9, a4);
    goto LABEL_12;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  uint64_t v36 = swift_dynamicCastClass();
  if (!v36)
  {
    swift_unknownObjectRelease();
    uint64_t v36 = MEMORY[0x263F8EE78];
  }
  uint64_t v37 = *(void *)(v36 + 16);
  swift_release();
  if (__OFSUB__(a4 >> 1, v9)) {
    goto LABEL_33;
  }
  if (v37 != (a4 >> 1) - v9)
  {
LABEL_34:
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  uint64_t v35 = swift_dynamicCastClass();
  if (!v35)
  {
    swift_unknownObjectRelease();
    uint64_t v35 = MEMORY[0x263F8EE78];
  }
LABEL_12:
  uint64_t v66 = v35;
  swift_unknownObjectRelease();
  uint64_t v38 = v68(v4, v70);
  uint64_t v39 = specialized Collection.prefix(_:)(v38, v14, v5, v6, v7);
  uint64_t v65 = v40;
  uint64_t v42 = v41;
  unint64_t v44 = v43;
  uint64_t v45 = specialized Collection.dropFirst(_:)(v38, v14, v5, v6, v7);
  uint64_t v47 = v46;
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  uint64_t v71 = (char *)v45;
  uint64_t v72 = v46;
  uint64_t v73 = v48;
  uint64_t v74 = v50;
  if ((v44 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_14:
    specialized _copyCollectionToContiguousArray<A>(_:)(v39, v65, v42, v44);
    goto LABEL_21;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  uint64_t v52 = swift_dynamicCastClass();
  if (!v52)
  {
    swift_unknownObjectRelease();
    uint64_t v52 = MEMORY[0x263F8EE78];
  }
  uint64_t v53 = *(void *)(v52 + 16);
  swift_release();
  if (__OFSUB__(v44 >> 1, v42))
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v53 != (v44 >> 1) - v42)
  {
LABEL_36:
    swift_unknownObjectRelease();
    goto LABEL_14;
  }
  if (!swift_dynamicCastClass()) {
    swift_unknownObjectRelease();
  }
LABEL_21:
  swift_unknownObjectRelease();
  uint64_t v54 = v68(v4, v70);
  uint64_t v55 = specialized Collection.prefix(_:)(v54, v45, v47, v49, v51);
  uint64_t v57 = v56;
  uint64_t v59 = v58;
  unint64_t v61 = v60;
  specialized Collection.dropFirst(_:)(v54, v45, v47, v49, v51);
  if ((v61 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_23:
    specialized _copyCollectionToContiguousArray<A>(_:)(v55, v57, v59, v61);
    goto LABEL_30;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  uint64_t v62 = swift_dynamicCastClass();
  if (!v62)
  {
    swift_unknownObjectRelease();
    uint64_t v62 = MEMORY[0x263F8EE78];
  }
  uint64_t v63 = *(void *)(v62 + 16);
  swift_release();
  if (__OFSUB__(v61 >> 1, v59))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v63 != (v61 >> 1) - v59)
  {
LABEL_38:
    swift_unknownObjectRelease();
    goto LABEL_23;
  }
  if (!swift_dynamicCastClass()) {
    swift_unknownObjectRelease();
  }
LABEL_30:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v67;
}

unint64_t closure #5 in PINE.shard<A>(_:nonce:seedBytes:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unint64_t v12 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
    goto LABEL_12;
  }
  if ((v12 & 0x8000000000000000) != 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v12 > 0xFF)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (*(void *)(a2 + 16) <= result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v16 = *(void *)(a2 + 8 * result + 32);
  LOBYTE(v24[0]) = 1;
  swift_bridgeObjectRetain();
  uint64_t v17 = static PINE.domainSeparationTag(usage:)((unsigned __int8 *)v24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_260BF9FE0;
  v24[0] = a4;
  v24[1] = a5;
  v24[2] = a6;
  v24[3] = a8;
  v24[4] = a9;
  v24[5] = a10;
  v24[6] = a12;
  uint64_t result = type metadata accessor for PINE();
  unint64_t v19 = *(void *)(a3 + *(int *)(result + 88));
  if ((v19 & 0x8000000000000000) != 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v19 > 0xFF)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  *(unsigned char *)(v18 + 32) = v19;
  unint64_t v20 = *(void *)(a3 + *(int *)(result + 84));
  if ((v20 & 0x8000000000000000) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v20 <= 0xFF)
  {
    *(unsigned char *)(v18 + 33) = v20;
    *(unsigned char *)(v18 + 34) = v12;
    uint64_t v21 = static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(v16, (uint64_t)v17, v18, a6, a10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v21;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t PINE.inputSharesFrom(leaderMeasurementShare:leaderProofShare:leaderWraparoundJointRandBlind:leaderVerificationJointRandBlind:helperSeeds:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v11 = a6[4];
  uint64_t v10 = a6[5];
  uint64_t v12 = a6[7];
  v21[0] = a6[2];
  v21[1] = v11;
  v21[2] = v10;
  v21[3] = v12;
  type metadata accessor for PINEInputShare();
  uint64_t v22 = Array.init()();
  Swift::Int v13 = *v6;
  type metadata accessor for Array();
  Array.reserveCapacity(_:)(v13);
  PINEInputShare.init(measurementShare:proofShare:wraparoundJointRandBlind:verificationJointRandBlind:)(a1, 0, a2, 0, a3, a4, (uint64_t)v21);
  uint64_t v20 = v21[0];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = Array.append(_:)();
  if (__OFSUB__(v13, 1))
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v13 - 1 < 0)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  if (v13 != 1)
  {
    uint64_t v15 = 0;
    do
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (measurementShare: Seed, proofShare: Seed, wraparoundJointRandBlind: Seed, verificationJointRandBlind: Seed));
      Array.subscript.getter();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Array.subscript.getter();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Array.subscript.getter();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Array.subscript.getter();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      PINEInputShare.init(measurementShare:proofShare:wraparoundJointRandBlind:verificationJointRandBlind:)(v20, 1, v19, 1, v18, v17, (uint64_t)v21);
      uint64_t v20 = v21[0];
      Array.append(_:)();
      ++v15;
    }
    while (v13 - 1 != v15);
  }
  return v22;
}

void protocol witness for Client.shard<A>(_:nonce:seedBytes:) in conformance PINE<A, B, C>(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, int *a7)
{
}

uint64_t closure #1 in PINE.splitSeedBytes<A>(_:)@<X0>(void *a1@<X1>, uint64_t a2@<X4>, uint64_t *a3@<X8>, uint64_t a4)
{
  unint64_t v82 = *(uint64_t (**)(void))(a4 + 8);
  uint64_t v5 = ((uint64_t (*)(uint64_t))v82)(a2);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v9 = a1[3];
  uint64_t v10 = specialized Collection.prefix(_:)(v5, *a1, v7, v8, v9);
  uint64_t v79 = v11;
  uint64_t v13 = v12;
  unint64_t v15 = v14;
  *a1 = specialized Collection.dropFirst(_:)(v5, v6, v7, v8, v9);
  a1[1] = v16;
  a1[2] = v17;
  a1[3] = v18;
  if ((v15 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_3:
    specialized _copyCollectionToContiguousArray<A>(_:)(v10, v79, v13, v15);
    goto LABEL_10;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  uint64_t v20 = swift_dynamicCastClass();
  if (!v20)
  {
    swift_unknownObjectRelease();
    uint64_t v20 = MEMORY[0x263F8EE78];
  }
  uint64_t v21 = *(void *)(v20 + 16);
  swift_release();
  if (__OFSUB__(v15 >> 1, v13))
  {
    __break(1u);
    goto LABEL_39;
  }
  if (v21 != (v15 >> 1) - v13)
  {
LABEL_39:
    swift_unknownObjectRelease();
    goto LABEL_3;
  }
  uint64_t v19 = swift_dynamicCastClass();
  if (!v19)
  {
    swift_unknownObjectRelease();
    uint64_t v19 = MEMORY[0x263F8EE78];
  }
LABEL_10:
  uint64_t v80 = v19;
  swift_unknownObjectRelease();
  uint64_t v22 = v82();
  uint64_t v23 = *a1;
  uint64_t v24 = a1[1];
  uint64_t v25 = a1[2];
  uint64_t v26 = a1[3];
  uint64_t v27 = specialized Collection.prefix(_:)(v22, *a1, v24, v25, v26);
  uint64_t v77 = v28;
  uint64_t v30 = v29;
  unint64_t v32 = v31;
  *a1 = specialized Collection.dropFirst(_:)(v22, v23, v24, v25, v26);
  a1[1] = v33;
  a1[2] = v34;
  a1[3] = v35;
  if ((v32 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_12:
    specialized _copyCollectionToContiguousArray<A>(_:)(v27, v77, v30, v32);
    goto LABEL_19;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  uint64_t v37 = swift_dynamicCastClass();
  if (!v37)
  {
    swift_unknownObjectRelease();
    uint64_t v37 = MEMORY[0x263F8EE78];
  }
  uint64_t v38 = *(void *)(v37 + 16);
  swift_release();
  if (__OFSUB__(v32 >> 1, v30))
  {
    __break(1u);
    goto LABEL_41;
  }
  if (v38 != (v32 >> 1) - v30)
  {
LABEL_41:
    swift_unknownObjectRelease();
    goto LABEL_12;
  }
  uint64_t v36 = swift_dynamicCastClass();
  if (!v36)
  {
    swift_unknownObjectRelease();
    uint64_t v36 = MEMORY[0x263F8EE78];
  }
LABEL_19:
  uint64_t v78 = v36;
  swift_unknownObjectRelease();
  uint64_t v39 = v82();
  uint64_t v41 = *a1;
  uint64_t v40 = a1[1];
  uint64_t v42 = a1[2];
  uint64_t v43 = a1[3];
  uint64_t v44 = specialized Collection.prefix(_:)(v39, *a1, v40, v42, v43);
  uint64_t v75 = v45;
  uint64_t v47 = v46;
  unint64_t v49 = v48;
  *a1 = specialized Collection.dropFirst(_:)(v39, v41, v40, v42, v43);
  a1[1] = v50;
  a1[2] = v51;
  a1[3] = v52;
  if ((v49 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_21:
    specialized _copyCollectionToContiguousArray<A>(_:)(v44, v75, v47, v49);
    goto LABEL_28;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  uint64_t v54 = swift_dynamicCastClass();
  if (!v54)
  {
    swift_unknownObjectRelease();
    uint64_t v54 = MEMORY[0x263F8EE78];
  }
  uint64_t v55 = *(void *)(v54 + 16);
  swift_release();
  if (__OFSUB__(v49 >> 1, v47))
  {
    __break(1u);
    goto LABEL_43;
  }
  if (v55 != (v49 >> 1) - v47)
  {
LABEL_43:
    swift_unknownObjectRelease();
    goto LABEL_21;
  }
  uint64_t v53 = swift_dynamicCastClass();
  if (!v53)
  {
    swift_unknownObjectRelease();
    uint64_t v53 = MEMORY[0x263F8EE78];
  }
LABEL_28:
  uint64_t v76 = v53;
  swift_unknownObjectRelease();
  uint64_t v56 = v82();
  uint64_t v57 = *a1;
  uint64_t v58 = a1[1];
  uint64_t v59 = a1[2];
  uint64_t v60 = a1[3];
  uint64_t v61 = specialized Collection.prefix(_:)(v56, *a1, v58, v59, v60);
  uint64_t v83 = v62;
  uint64_t v64 = v63;
  unint64_t v66 = v65;
  *a1 = specialized Collection.dropFirst(_:)(v56, v57, v58, v59, v60);
  a1[1] = v67;
  a1[2] = v68;
  a1[3] = v69;
  if ((v66 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_30:
    specialized _copyCollectionToContiguousArray<A>(_:)(v61, v83, v64, v66);
    uint64_t v71 = v70;
    goto LABEL_37;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  uint64_t v72 = swift_dynamicCastClass();
  if (!v72)
  {
    swift_unknownObjectRelease();
    uint64_t v72 = MEMORY[0x263F8EE78];
  }
  uint64_t v73 = *(void *)(v72 + 16);
  swift_release();
  if (__OFSUB__(v66 >> 1, v64))
  {
    __break(1u);
    goto LABEL_45;
  }
  if (v73 != (v66 >> 1) - v64)
  {
LABEL_45:
    swift_unknownObjectRelease();
    goto LABEL_30;
  }
  uint64_t v71 = swift_dynamicCastClass();
  if (!v71)
  {
    swift_unknownObjectRelease();
    uint64_t v71 = MEMORY[0x263F8EE78];
  }
LABEL_37:
  uint64_t result = swift_unknownObjectRelease();
  *a3 = v80;
  a3[1] = v78;
  a3[2] = v76;
  a3[3] = v71;
  return result;
}

unint64_t partial apply for closure #5 in PINE.shard<A>(_:nonce:seedBytes:)(unint64_t a1)
{
  return closure #5 in PINE.shard<A>(_:nonce:seedBytes:)(a1, v1[11], v1[12], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], v1[10]);
}

uint64_t specialized Array.init(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = static Array._allocateUninitialized(_:)();
  uint64_t v15 = result;
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    if (a2)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)(a3 - 8);
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
      v10(v7, a1, a3);
      uint64_t v11 = a2 - 1;
      if (v11)
      {
        uint64_t v12 = *(void *)(v9 + 72);
        uint64_t v13 = v8 + v12;
        do
        {
          v10(v13, a1, a3);
          v13 += v12;
          --v11;
        }
        while (v11);
      }
    }
    uint64_t v14 = type metadata accessor for Array();
    AggregateShare.share.modify(v14);
    return v15;
  }
  return result;
}

uint64_t specialized PINE.verifyKeyLength.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 8))(a3, a6);
}

uint64_t partial apply for closure #1 in PINE.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:)(uint64_t a1)
{
  return closure #1 in PINE.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:)(a1, *(void *)(v1 + 72), *(void *)(v1 + 80), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
}

unint64_t lazy protocol witness table accessor for type PartialRangeUpTo<Int> and conformance PartialRangeUpTo<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PartialRangeUpTo<Int> and conformance PartialRangeUpTo<A>;
  if (!lazy protocol witness table cache variable for type PartialRangeUpTo<Int> and conformance PartialRangeUpTo<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PartialRangeUpTo<Int>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PartialRangeUpTo<Int> and conformance PartialRangeUpTo<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in PINE.prepareMessageFrom(_:parameter:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(v2 + 40);
  uint64_t v4 = *a2;
  uint64_t v5 = type metadata accessor for Array();
  return Array<A>.elementwiseAdd(_:)(v4, v5, v3);
}

uint64_t partial apply for closure #2 in PINE.prepareMessageFrom(_:parameter:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + 8);
  return swift_bridgeObjectRetain();
}

uint64_t partial apply for closure #3 in PINE.prepareMessageFrom(_:parameter:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t specialized PINE.unshard<A, B>(_:numOfMeasurements:into:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v51 = a6;
  uint64_t v14 = *(void *)(a4 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v45 = v8;
  uint64_t v46 = v15;
  uint64_t v16 = MEMORY[0x270FA5388](a1, a1);
  uint64_t v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v16, v21);
  uint64_t v23 = (char *)&v39 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void (**)(char *))(v20 + 16);
  uint64_t v49 = v25;
  v24(v23);
  uint64_t v47 = *(void *)(*(void *)(a7 + 8) + 8);
  uint64_t v48 = a7;
  LOBYTE(a7) = dispatch thunk of Collection.isEmpty.getter();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, a5);
  if (a7)
  {
    __break(1u);
  }
  else
  {
    uint64_t v43 = a2;
    uint64_t v27 = *(void *)(a4 + 40);
    dispatch thunk of static AdditiveArithmetic.zero.getter();
    uint64_t v28 = v45 + *(int *)(a4 + 76);
    uint64_t v45 = a8;
    uint64_t v29 = *(void *)(a4 + 24);
    uint64_t v30 = *(void *)(a4 + 48);
    uint64_t v44 = *(void *)(a4 + 64);
    uint64_t v52 = v14;
    uint64_t v53 = v29;
    uint64_t v54 = v27;
    uint64_t v55 = v30;
    uint64_t v56 = v44;
    uint64_t v31 = type metadata accessor for PINEMainCircuit();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v41 = v31;
    uint64_t v42 = v28;
    uint64_t v32 = PINECircuit.outputLength.getter(v31, WitnessTable);
    uint64_t v33 = specialized Array.init(repeating:count:)((uint64_t)v18, v32, v14);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v18, v14);
    uint64_t v34 = AggregateShare.init(_:)(v33, &v57);
    MEMORY[0x270FA5388](v34, v35);
    *(&v39 - 12) = v14;
    *(&v39 - 11) = v29;
    uint64_t v36 = v45;
    *(&v39 - 10) = *(void *)(a4 + 32);
    *(&v39 - 9) = a5;
    *(&v39 - 8) = v51;
    *(&v39 - 7) = v27;
    uint64_t v37 = *(void *)(a4 + 56);
    *(&v39 - 6) = v30;
    *(&v39 - 5) = v37;
    *(&v39 - 4) = v48;
    *(&v39 - 3) = v36;
    *(&v39 - 2) = v44;
    type metadata accessor for AggregateShare();
    uint64_t v38 = v50;
    uint64_t result = Sequence.reduce<A>(into:_:)();
    if (!v38)
    {
      specialized PINECircuit.decode<A>(data:numOfMeasurements:into:)(v52, v43, v41, v51, WitnessTable, v36);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t type metadata accessor for PINE()
{
  return swift_getGenericMetadata();
}

uint64_t partial apply for closure #1 in PINE.aggregate<A>(_:parameter:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v2 = type metadata accessor for AggregateShare();
  return AggregateShare.accumulate(_:)((uint64_t)&v4, v2);
}

uint64_t specialized PINE.isValid(parameter:previousParameters:)(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = lazy protocol witness table accessor for type VoidCodable and conformance VoidCodable();

  return MEMORY[0x270F9DF70](a2, &type metadata for VoidCodable, v3);
}

uint64_t specialized PINE.unshard<A>(_:numOfMeasurements:parameter:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v37 = a1;
  uint64_t v35 = a5;
  uint64_t v36 = a4;
  uint64_t v34 = a3[6];
  uint64_t v6 = v34;
  uint64_t v33 = a3[3];
  uint64_t v7 = v33;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness, v10);
  uint64_t v12 = (char *)&v33 - v11;
  uint64_t v13 = a3[8];
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  uint64_t v15 = a3[5];
  uint64_t v39 = a3[2];
  uint64_t v14 = v39;
  uint64_t v40 = v7;
  uint64_t v41 = v15;
  uint64_t v42 = v6;
  uint64_t v16 = v15;
  uint64_t v43 = v13;
  uint64_t v17 = type metadata accessor for PINEMainCircuit();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v19 = PINECircuit.outputLength.getter(v17, WitnessTable);
  uint64_t v20 = specialized Array.init(repeating:count:)((uint64_t)v12, v19, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
  uint64_t v44 = v20;
  uint64_t v21 = a3[4];
  uint64_t v22 = type metadata accessor for Array();
  uint64_t v23 = a3[7];
  uint64_t v24 = swift_getWitnessTable();
  uint64_t v32 = v13;
  uint64_t v25 = v35;
  uint64_t v26 = v21;
  uint64_t v27 = v36;
  default argument 3 of PINE.unshard<A, B>(_:numOfMeasurements:into:parameter:)(v14, v33, v26, v36, v22, v16, v34, v23, v35, v24, v32);
  uint64_t v28 = v38;
  specialized PINE.unshard<A, B>(_:numOfMeasurements:into:parameter:)(v37, (uint64_t)&v44, v29, (uint64_t)a3, v27, v22, v25, v24);
  uint64_t v30 = v44;
  if (v28) {
    swift_bridgeObjectRelease();
  }
  return v30;
}

uint64_t associated type witness table accessor for VDAFProtocol.AggregateShareType : Equatable in PINE<A, B, C>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for VDAFProtocol.AggregateShareType : AggregatableProtocol in PINE<A, B, C>()
{
  return swift_getWitnessTable();
}

_UNKNOWN **associated type witness table accessor for VDAFProtocol.AggregateShareType : VDAFDecodable in PINE<A, B, C>()
{
  return &protocol witness table for AggregateShare<A>;
}

_UNKNOWN **associated type witness table accessor for VDAFProtocol.AggregateShareType : VDAFEncodable in PINE<A, B, C>()
{
  return &protocol witness table for AggregateShare<A>;
}

_UNKNOWN **associated type witness table accessor for VDAFProtocol.AggregationParameter : VDAFDecodable in PINE<A, B, C>()
{
  return &protocol witness table for VoidCodable;
}

_UNKNOWN **associated type witness table accessor for VDAFProtocol.AggregationParameter : VDAFEncodable in PINE<A, B, C>()
{
  return &protocol witness table for VoidCodable;
}

uint64_t associated type witness table accessor for VDAFProtocol.InputShare : Equatable in PINE<A, B, C>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for VDAFProtocol.InputShare : VDAFDecodable in PINE<A, B, C>()
{
  return swift_getWitnessTable();
}

_UNKNOWN **associated type witness table accessor for VDAFProtocol.InputShare : VDAFEncodable in PINE<A, B, C>()
{
  return &protocol witness table for PINEInputShare<A, B>;
}

uint64_t associated type witness table accessor for VDAFProtocol.OutputShareType : Equatable in PINE<A, B, C>()
{
  return swift_getWitnessTable();
}

_UNKNOWN **associated type witness table accessor for VDAFProtocol.OutputShareType : VDAFDecodable in PINE<A, B, C>()
{
  return &protocol witness table for OutputShare<A>;
}

_UNKNOWN **associated type witness table accessor for VDAFProtocol.OutputShareType : VDAFEncodable in PINE<A, B, C>()
{
  return &protocol witness table for OutputShare<A>;
}

uint64_t associated type witness table accessor for VDAFProtocol.PublicShare : Equatable in PINE<A, B, C>()
{
  return swift_getWitnessTable();
}

_UNKNOWN **associated type witness table accessor for VDAFProtocol.PublicShare : VDAFDecodable in PINE<A, B, C>()
{
  return &protocol witness table for PINEPublicShare<A>;
}

_UNKNOWN **associated type witness table accessor for VDAFProtocol.PublicShare : VDAFEncodable in PINE<A, B, C>()
{
  return &protocol witness table for PINEPublicShare<A>;
}

uint64_t associated type witness table accessor for VDAFProtocol.XOF : ExtendableOutputFunction in PINE<A, B, C>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 56);
}

uint64_t associated type witness table accessor for Aggregator.PrepareMessage : Equatable in PINE<A, B, C>()
{
  return swift_getWitnessTable();
}

_UNKNOWN **associated type witness table accessor for Aggregator.PrepareMessage : VDAFDecodable in PINE<A, B, C>()
{
  return &protocol witness table for PINEPrepareMessage<A>;
}

_UNKNOWN **associated type witness table accessor for Aggregator.PrepareMessage : VDAFEncodable in PINE<A, B, C>()
{
  return &protocol witness table for PINEPrepareMessage<A>;
}

uint64_t associated type witness table accessor for Aggregator.PrepareShare : Equatable in PINE<A, B, C>()
{
  return swift_getWitnessTable();
}

_UNKNOWN **associated type witness table accessor for Aggregator.PrepareShare : VDAFDecodable in PINE<A, B, C>()
{
  return &protocol witness table for PINEPrepareShare<A, B>;
}

_UNKNOWN **associated type witness table accessor for Aggregator.PrepareShare : VDAFEncodable in PINE<A, B, C>()
{
  return &protocol witness table for PINEPrepareShare<A, B>;
}

uint64_t associated type witness table accessor for Aggregator.PrepareState : Equatable in PINE<A, B, C>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Aggregator.PrepareState : VDAFDecodable in PINE<A, B, C>()
{
  return swift_getWitnessTable();
}

_UNKNOWN **associated type witness table accessor for Aggregator.PrepareState : VDAFEncodable in PINE<A, B, C>()
{
  return &protocol witness table for PINEPrepareState<A, B>;
}

uint64_t instantiation function for generic protocol witness table for PINE<A, B, C>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for PINEDefaultParameter()
{
  return &type metadata for PINEDefaultParameter;
}

uint64_t type metadata instantiation function for PINE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 80);
}

uint64_t type metadata completion function for PINE()
{
  uint64_t result = type metadata accessor for PINEMainCircuit();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for PINENormEqualityCheckCircuit();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for PINE(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6 | 7;
  uint64_t v8 = ~(v6 | 7);
  uint64_t v9 = *(void *)(v5 + 64);
  BOOL v10 = v6 <= 7 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0;
  if (v10
    && (uint64_t v11 = v6 + 8,
        uint64_t v12 = v9 + 7,
        unint64_t v13 = ((v6 + 56) & ~v7)
            + v9
            + ((v6
              + 8
              + ((((((v9 + 7 + ((v6 + 56) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v6),
        ((((v13 + 7 + ((((v6 + 8) | v7) + v13) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 <= 0x18))
  {
    uint64_t v14 = ~v6;
    *a1 = *a2;
    uint64_t v72 = ((unint64_t)a2 + 15) & v8;
    unint64_t v75 = v13 + 7;
    uint64_t v73 = ((unint64_t)a1 + 15) & v8;
    *(void *)uint64_t v73 = *(void *)v72;
    uint64_t v15 = (_OWORD *)((v73 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v16 = (long long *)((v72 + 15) & 0xFFFFFFFFFFFFFFF8);
    long long v17 = *v16;
    long long v18 = v16[2];
    v15[1] = v16[1];
    v15[2] = v18;
    *uint64_t v15 = v17;
    uint64_t v19 = (void *)(((unint64_t)v15 + 55) & v8);
    uint64_t v20 = (void *)(((unint64_t)v16 + 55) & v8);
    void *v19 = *v20;
    uint64_t v21 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = (void *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v21 = *v22;
    uint64_t v23 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v24 = (void *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v23 = *v24;
    uint64_t v25 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v26 = (void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v25 = *v26;
    uint64_t v27 = (void *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v28 = (void *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v27 = *v28;
    uint64_t v29 = (void *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v30 = (void *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v29 = *v30;
    uint64_t v31 = (void *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v32 = (void *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v31 = *v32;
    unint64_t v33 = ((unint64_t)v31 + v11) & v14;
    unint64_t v34 = ((unint64_t)v32 + v11) & v14;
    uint64_t v35 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
    v35(v33, v34, v4);
    uint64_t v36 = (void *)((v12 + v33) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v37 = (void *)((v12 + v34) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v36 = *v37;
    uint64_t v38 = (void *)(((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v39 = (void *)(((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v38 = *v39;
    uint64_t v40 = (void *)(((unint64_t)v38 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v41 = (void *)(((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v40 = *v41;
    v35(((unint64_t)v40 + v11) & v14, ((unint64_t)v41 + v11) & v14, v4);
    uint64_t v74 = (void *)(((v73 | 7) + v13) & v8);
    uint64_t v42 = (void *)(((v72 | 7) + v13) & v8);
    *uint64_t v74 = *v42;
    uint64_t v43 = (void *)(((unint64_t)v74 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v44 = (void *)(((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v43 = *v44;
    v43[1] = v44[1];
    _OWORD v43[2] = v44[2];
    v43[3] = v44[3];
    v43[4] = v44[4];
    v43[5] = v44[5];
    uint64_t v45 = (void *)(((unint64_t)v43 + 55) & v8);
    uint64_t v46 = (void *)(((unint64_t)v44 + 55) & v8);
    *uint64_t v45 = *v46;
    uint64_t v47 = (void *)(((unint64_t)v45 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v48 = (void *)(((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v47 = *v48;
    uint64_t v49 = (void *)(((unint64_t)v47 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v50 = (void *)(((unint64_t)v48 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v49 = *v50;
    uint64_t v51 = (void *)(((unint64_t)v49 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v52 = (void *)(((unint64_t)v50 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v51 = *v52;
    uint64_t v53 = (void *)(((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v54 = (void *)(((unint64_t)v52 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v53 = *v54;
    uint64_t v55 = (void *)(((unint64_t)v53 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v56 = (void *)(((unint64_t)v54 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v55 = *v56;
    uint64_t v57 = (void *)(((unint64_t)v55 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v58 = (void *)(((unint64_t)v56 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v57 = *v58;
    unint64_t v59 = ((unint64_t)v57 + v11) & v14;
    unint64_t v60 = ((unint64_t)v58 + v11) & v14;
    swift_bridgeObjectRetain();
    v35(v59, v60, v4);
    unint64_t v61 = v12 + v59;
    uint64_t v62 = a1;
    v61 &= 0xFFFFFFFFFFFFFFF8;
    uint64_t v63 = (void *)((v12 + v60) & 0xFFFFFFFFFFFFFFF8);
    *(void *)unint64_t v61 = *v63;
    uint64_t v64 = (void *)((v61 + 15) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v65 = (void *)(((unint64_t)v63 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v64 = *v65;
    unint64_t v66 = (void *)(((unint64_t)v64 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v67 = (void *)(((unint64_t)v65 + 15) & 0xFFFFFFFFFFFFFFF8);
    *unint64_t v66 = *v67;
    v35(((unint64_t)v66 + v11) & v14, ((unint64_t)v67 + v11) & v14, v4);
    uint64_t v68 = (void *)(((unint64_t)v74 + v75) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v69 = (void *)(((unint64_t)v42 + v75) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v68 = *v69;
    *(void *)(((unint64_t)v68 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v69 + 15) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    uint64_t v70 = *a2;
    *a1 = *a2;
    uint64_t v62 = (void *)(v70 + ((v6 + 16) & v8));
    swift_retain();
  }
  return v62;
}

uint64_t destroy for PINE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  BOOL v10 = *(void (**)(unint64_t, uint64_t))(v3 + 8);
  uint64_t v11 = v3 + 8;
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v4 | 7;
  uint64_t v6 = (a1 + (v4 | 7) + 8) & ~(v4 | 7);
  v10((v4+ 8+ ((((((((((((((v4 + 48 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8)) & ~(v4 | 7)) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)) & ~v4, v2);
  uint64_t v7 = *(void *)(v11 + 56);
  v10((v4+ 8+ ((((((v7+ 7+ ((v4+ 8+ ((((((((((((((v4 + 48 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8)) & ~(v4 | 7)) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)) & ~v4)) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)) & ~v4, v2);
  swift_bridgeObjectRelease();
  unint64_t v8 = (v4
      + 8
      + ((((((((((((((v4
                    + 48
                    + ((((v7
                        + v5
                        + ((v4 + 56) & ~v5)
                        + v6
                        + ((v4
                          + 8
                          + ((((((v7 + 7 + ((v4 + 56) & ~v4)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v4)) & ~v5)
                      + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v5)
                  + 15) & 0xFFFFFFFFFFFFFFF8)
                + 15) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v4;
  v10(v8, v2);

  return ((uint64_t (*)(unint64_t, uint64_t))v10)((v4+ 8+ ((((((v7 + 7 + v8) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v4, v2);
}

void *initializeWithCopy for PINE(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v5 | 7;
  uint64_t v7 = (v5 | 7) + 8;
  unint64_t v66 = (void *)(((unint64_t)a1 + v7) & ~(v5 | 7));
  uint64_t v68 = (void *)(((unint64_t)a2 + v7) & ~(v5 | 7));
  *unint64_t v66 = *v68;
  unint64_t v8 = (_OWORD *)(((unint64_t)v66 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (long long *)(((unint64_t)v68 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v10 = *v9;
  long long v11 = v9[2];
  v8[1] = v9[1];
  v8[2] = v11;
  *unint64_t v8 = v10;
  uint64_t v12 = (void *)(((unint64_t)v8 + v5 + 48) & ~(v5 | 7));
  unint64_t v13 = (void *)(((unint64_t)v9 + v5 + 48) & ~(v5 | 7));
  *uint64_t v12 = *v13;
  uint64_t v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v14 = *v15;
  uint64_t v16 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v17 = (void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v16 = *v17;
  long long v18 = (void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  *long long v18 = *v19;
  uint64_t v20 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v20 = *v21;
  uint64_t v22 = (void *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v22 = *v23;
  uint64_t v24 = (void *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v25 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v24 = *v25;
  uint64_t v26 = v5 + 8;
  uint64_t v27 = ((unint64_t)v24 + v5 + 8) & ~v5;
  uint64_t v28 = ((unint64_t)v25 + v5 + 8) & ~v5;
  uint64_t v30 = v4 + 16;
  uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v29(v27, v28, v3);
  uint64_t v31 = *(void *)(v30 + 48);
  uint64_t v32 = (void *)((v31 + 7 + v27) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v33 = (void *)((v31 + 7 + v28) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v32 = *v33;
  unint64_t v34 = (void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v35 = (void *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v34 = *v35;
  uint64_t v36 = (void *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v37 = (void *)(((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v36 = *v37;
  v29(((unint64_t)v36 + v26) & ~v5, ((unint64_t)v37 + v26) & ~v5, v3);
  unint64_t v65 = v31
      + ((v5 + 56) & ~(v5 | 7))
      + ((v5
        + 8
        + ((((((v31 + 7 + ((v5 + 56) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v5);
  uint64_t v67 = (void *)(((unint64_t)v66 + v65 + v6) & ~v6);
  uint64_t v69 = (void *)(((unint64_t)v68 + v65 + v6) & ~v6);
  *uint64_t v67 = *v69;
  uint64_t v38 = (void *)(((unint64_t)v67 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v39 = (void *)(((unint64_t)v69 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v38 = *v39;
  v38[1] = v39[1];
  v38[2] = v39[2];
  v38[3] = v39[3];
  v38[4] = v39[4];
  v38[5] = v39[5];
  uint64_t v40 = (void *)(((unint64_t)v38 + v5 + 48) & ~(v5 | 7));
  uint64_t v41 = (void *)(((unint64_t)v39 + v5 + 48) & ~(v5 | 7));
  *uint64_t v40 = *v41;
  uint64_t v42 = (void *)(((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v43 = (void *)(((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v42 = *v43;
  uint64_t v44 = (void *)(((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v45 = (void *)(((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v44 = *v45;
  uint64_t v46 = (void *)(((unint64_t)v44 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v47 = (void *)(((unint64_t)v45 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v46 = *v47;
  uint64_t v48 = (void *)(((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v49 = (void *)(((unint64_t)v47 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v48 = *v49;
  uint64_t v50 = (void *)(((unint64_t)v48 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v51 = (void *)(((unint64_t)v49 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v50 = *v51;
  uint64_t v52 = (void *)(((unint64_t)v50 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v53 = (void *)(((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v52 = *v53;
  uint64_t v54 = ((unint64_t)v52 + v5 + 8) & ~v5;
  uint64_t v55 = ((unint64_t)v53 + v5 + 8) & ~v5;
  swift_bridgeObjectRetain();
  v29(v54, v55, v3);
  uint64_t v56 = (void *)((v31 + 7 + v54) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v57 = (void *)((v31 + 7 + v55) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v56 = *v57;
  uint64_t v58 = (void *)(((unint64_t)v56 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v59 = (void *)(((unint64_t)v57 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v58 = *v59;
  unint64_t v60 = (void *)(((unint64_t)v58 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v61 = (void *)(((unint64_t)v59 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v60 = *v61;
  v29(((unint64_t)v60 + v26) & ~v5, ((unint64_t)v61 + v26) & ~v5, v3);
  uint64_t v62 = (void *)(((unint64_t)v67 + v65 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t result = a1;
  uint64_t v64 = (void *)(((unint64_t)v69 + v65 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v62 = *v64;
  *(void *)(((unint64_t)v62 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v64 + 15) & 0xFFFFFFFFFFFFFFF8);
  return result;
}

void *assignWithCopy for PINE(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v5 | 7;
  uint64_t v7 = (v5 | 7) + 8;
  uint64_t v69 = (void *)(((unint64_t)a1 + v7) & ~(v5 | 7));
  uint64_t v71 = (void *)(((unint64_t)a2 + v7) & ~(v5 | 7));
  *uint64_t v69 = *v71;
  unint64_t v8 = (void *)(((unint64_t)v69 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (void *)(((unint64_t)v71 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v8 = *v9;
  v8[1] = v9[1];
  v8[2] = v9[2];
  v8[3] = v9[3];
  v8[4] = v9[4];
  v8[5] = v9[5];
  long long v10 = (void *)(((unint64_t)v8 + v5 + 48) & ~(v5 | 7));
  long long v11 = (void *)(((unint64_t)v9 + v5 + 48) & ~(v5 | 7));
  *long long v10 = *v11;
  uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  uint64_t v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v14 = *v15;
  uint64_t v16 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v17 = (void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v16 = *v17;
  long long v18 = (void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  *long long v18 = *v19;
  uint64_t v20 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v20 = *v21;
  uint64_t v22 = (void *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v22 = *v23;
  uint64_t v24 = v5 + 8;
  uint64_t v25 = ((unint64_t)v22 + v5 + 8) & ~v5;
  uint64_t v26 = ((unint64_t)v23 + v5 + 8) & ~v5;
  uint64_t v28 = v4 + 24;
  uint64_t v27 = *(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 24);
  uint64_t v67 = v3;
  v27(v25, v26, v3);
  uint64_t v29 = v27;
  uint64_t v30 = *(void *)(v28 + 40);
  uint64_t v31 = v30 + 7;
  uint64_t v32 = (void *)((v30 + 7 + v25) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v33 = (void *)((v30 + 7 + v26) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v32 = *v33;
  unint64_t v34 = (void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v35 = (void *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v34 = *v35;
  uint64_t v36 = (void *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v37 = (void *)(((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v36 = *v37;
  uint64_t v38 = v3;
  uint64_t v39 = v29;
  v29(((unint64_t)v36 + v24) & ~v5, ((unint64_t)v37 + v24) & ~v5, v38);
  unint64_t v68 = v30
      + ((v5 + 56) & ~(v5 | 7))
      + ((v5
        + 8
        + ((((((v30 + 7 + ((v5 + 56) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v5);
  uint64_t v70 = (void *)(((unint64_t)v69 + v68 + v6) & ~v6);
  uint64_t v72 = (void *)(((unint64_t)v71 + v68 + v6) & ~v6);
  *uint64_t v70 = *v72;
  uint64_t v40 = (void *)(((unint64_t)v70 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v41 = (void *)(((unint64_t)v72 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v40 = *v41;
  v40[1] = v41[1];
  void v40[2] = v41[2];
  v40[3] = v41[3];
  v40[4] = v41[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  void v40[5] = v41[5];
  uint64_t v42 = (void *)(((unint64_t)v40 + v5 + 48) & ~(v5 | 7));
  uint64_t v43 = (void *)(((unint64_t)v41 + v5 + 48) & ~(v5 | 7));
  *uint64_t v42 = *v43;
  uint64_t v44 = (void *)(((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v45 = (void *)(((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v44 = *v45;
  uint64_t v46 = (void *)(((unint64_t)v44 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v47 = (void *)(((unint64_t)v45 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v46 = *v47;
  uint64_t v48 = (void *)(((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v49 = (void *)(((unint64_t)v47 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v48 = *v49;
  uint64_t v50 = (void *)(((unint64_t)v48 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v51 = (void *)(((unint64_t)v49 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v50 = *v51;
  uint64_t v52 = (void *)(((unint64_t)v50 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v53 = (void *)(((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v52 = *v53;
  uint64_t v54 = (void *)(((unint64_t)v52 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v55 = (void *)(((unint64_t)v53 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v54 = *v55;
  uint64_t v56 = ((unint64_t)v54 + v5 + 8) & ~v5;
  uint64_t v57 = ((unint64_t)v55 + v5 + 8) & ~v5;
  v39(((unint64_t)v54 + v24) & ~v5, ((unint64_t)v55 + v24) & ~v5, v67);
  uint64_t v58 = (void *)((v31 + v56) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v59 = (void *)((v31 + v57) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v58 = *v59;
  unint64_t v60 = (void *)(((unint64_t)v58 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v61 = (void *)(((unint64_t)v59 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v60 = *v61;
  uint64_t v62 = (void *)(((unint64_t)v60 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v63 = (void *)(((unint64_t)v61 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v62 = *v63;
  v39(((unint64_t)v62 + v24) & ~v5, ((unint64_t)v63 + v24) & ~v5, v67);
  uint64_t v64 = (void *)(((unint64_t)v70 + v68 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t result = a1;
  unint64_t v66 = (void *)(((unint64_t)v72 + v68 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v64 = *v66;
  *(void *)(((unint64_t)v64 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v66 + 15) & 0xFFFFFFFFFFFFFFF8);
  return result;
}

void *initializeWithTake for PINE(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v5 | 7;
  uint64_t v7 = (v5 | 7) + 8;
  uint64_t v69 = (void *)(((unint64_t)a1 + v7) & ~(v5 | 7));
  uint64_t v70 = (void *)(((unint64_t)a2 + v7) & ~(v5 | 7));
  *uint64_t v69 = *v70;
  unint64_t v8 = (_OWORD *)(((unint64_t)v69 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (long long *)(((unint64_t)v70 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v10 = *v9;
  long long v11 = v9[2];
  v8[1] = v9[1];
  v8[2] = v11;
  *unint64_t v8 = v10;
  uint64_t v12 = (void *)(((unint64_t)v8 + v5 + 48) & ~(v5 | 7));
  unint64_t v13 = (void *)(((unint64_t)v9 + v5 + 48) & ~(v5 | 7));
  *uint64_t v12 = *v13;
  uint64_t v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v14 = *v15;
  uint64_t v16 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v17 = (void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v16 = *v17;
  long long v18 = (void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  *long long v18 = *v19;
  uint64_t v20 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v20 = *v21;
  uint64_t v22 = (void *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v22 = *v23;
  uint64_t v24 = (void *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v25 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v24 = *v25;
  uint64_t v26 = v5 + 8;
  uint64_t v27 = ((unint64_t)v24 + v5 + 8) & ~v5;
  uint64_t v28 = ((unint64_t)v25 + v5 + 8) & ~v5;
  uint64_t v30 = v4 + 32;
  uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  v29(v27, v28, v3);
  uint64_t v31 = *(void *)(v30 + 32);
  uint64_t v32 = (void *)((v31 + 7 + v27) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v33 = (void *)((v31 + 7 + v28) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v32 = *v33;
  unint64_t v34 = (void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v35 = (void *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v34 = *v35;
  uint64_t v36 = (void *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v37 = (void *)(((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v36 = *v37;
  v29(((unint64_t)v36 + v26) & ~v5, ((unint64_t)v37 + v26) & ~v5, v3);
  unint64_t v68 = v31
      + ((v5 + 56) & ~(v5 | 7))
      + ((v5
        + 8
        + ((((((v31 + 7 + ((v5 + 56) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v5);
  uint64_t v71 = (void *)(((unint64_t)v70 + v68 + v6) & ~v6);
  uint64_t v38 = (void *)(((unint64_t)v69 + v68 + v6) & ~v6);
  *uint64_t v38 = *v71;
  uint64_t v39 = (_OWORD *)(((unint64_t)v38 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v40 = (long long *)(((unint64_t)v71 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v41 = *v40;
  long long v42 = v40[2];
  v39[1] = v40[1];
  _OWORD v39[2] = v42;
  *uint64_t v39 = v41;
  uint64_t v43 = (void *)(((unint64_t)v39 + v5 + 48) & ~(v5 | 7));
  uint64_t v44 = (void *)(((unint64_t)v40 + v5 + 48) & ~(v5 | 7));
  *uint64_t v43 = *v44;
  uint64_t v45 = (void *)(((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v46 = (void *)(((unint64_t)v44 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v45 = *v46;
  uint64_t v47 = (void *)(((unint64_t)v45 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v48 = (void *)(((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v47 = *v48;
  uint64_t v49 = (void *)(((unint64_t)v47 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v50 = (void *)(((unint64_t)v48 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v49 = *v50;
  uint64_t v51 = (void *)(((unint64_t)v49 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v52 = (void *)(((unint64_t)v50 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v51 = *v52;
  uint64_t v53 = (void *)(((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v54 = (void *)(((unint64_t)v52 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v53 = *v54;
  uint64_t v55 = (void *)(((unint64_t)v53 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v56 = (void *)(((unint64_t)v54 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v55 = *v56;
  uint64_t v57 = ((unint64_t)v55 + v5 + 8) & ~v5;
  uint64_t v58 = ((unint64_t)v56 + v5 + 8) & ~v5;
  v29(((unint64_t)v55 + v26) & ~v5, ((unint64_t)v56 + v26) & ~v5, v3);
  unint64_t v59 = (void *)((v31 + 7 + v57) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v60 = (void *)((v31 + 7 + v58) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v59 = *v60;
  unint64_t v61 = (void *)(((unint64_t)v59 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v62 = (void *)(((unint64_t)v60 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v61 = *v62;
  uint64_t v63 = (void *)(((unint64_t)v61 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v64 = (void *)(((unint64_t)v62 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v63 = *v64;
  v29(((unint64_t)v63 + v26) & ~v5, ((unint64_t)v64 + v26) & ~v5, v3);
  unint64_t v65 = (void *)((v68 + 7 + (((unint64_t)v69 + v68 + v6) & ~v6)) & 0xFFFFFFFFFFFFFFF8);
  uint64_t result = a1;
  uint64_t v67 = (void *)(((unint64_t)v71 + v68 + 7) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v65 = *v67;
  *(void *)(((unint64_t)v65 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v67 + 15) & 0xFFFFFFFFFFFFFFF8);
  return result;
}

void *assignWithTake for PINE(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v5 | 7;
  uint64_t v7 = (v5 | 7) + 8;
  uint64_t v69 = (void *)(((unint64_t)a1 + v7) & ~(v5 | 7));
  uint64_t v71 = (void *)(((unint64_t)a2 + v7) & ~(v5 | 7));
  *uint64_t v69 = *v71;
  unint64_t v8 = (void *)(((unint64_t)v69 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (void *)(((unint64_t)v71 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v8 = *v9;
  v8[1] = v9[1];
  v8[2] = v9[2];
  v8[3] = v9[3];
  v8[4] = v9[4];
  v8[5] = v9[5];
  long long v10 = (void *)(((unint64_t)v8 + v5 + 48) & ~(v5 | 7));
  long long v11 = (void *)(((unint64_t)v9 + v5 + 48) & ~(v5 | 7));
  *long long v10 = *v11;
  uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  uint64_t v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v14 = *v15;
  uint64_t v16 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v17 = (void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v16 = *v17;
  long long v18 = (void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  *long long v18 = *v19;
  uint64_t v20 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v20 = *v21;
  uint64_t v22 = (void *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v22 = *v23;
  uint64_t v24 = v5 + 8;
  uint64_t v25 = ((unint64_t)v22 + v5 + 8) & ~v5;
  uint64_t v26 = ((unint64_t)v23 + v5 + 8) & ~v5;
  uint64_t v28 = v4 + 40;
  uint64_t v27 = *(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 40);
  uint64_t v67 = v3;
  v27(v25, v26, v3);
  uint64_t v29 = v27;
  uint64_t v30 = *(void *)(v28 + 24);
  uint64_t v31 = v30 + 7;
  uint64_t v32 = (void *)((v30 + 7 + v25) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v33 = (void *)((v30 + 7 + v26) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v32 = *v33;
  unint64_t v34 = (void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v35 = (void *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v34 = *v35;
  uint64_t v36 = (void *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v37 = (void *)(((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v36 = *v37;
  uint64_t v38 = v3;
  uint64_t v39 = v29;
  v29(((unint64_t)v36 + v24) & ~v5, ((unint64_t)v37 + v24) & ~v5, v38);
  unint64_t v68 = v30
      + ((v5 + 56) & ~(v5 | 7))
      + ((v5
        + 8
        + ((((((v30 + 7 + ((v5 + 56) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v5);
  uint64_t v70 = (void *)(((unint64_t)v69 + v68 + v6) & ~v6);
  uint64_t v72 = (void *)(((unint64_t)v71 + v68 + v6) & ~v6);
  *uint64_t v70 = *v72;
  uint64_t v40 = (void *)(((unint64_t)v70 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v41 = (void *)(((unint64_t)v72 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v40 = *v41;
  v40[1] = v41[1];
  void v40[2] = v41[2];
  v40[3] = v41[3];
  v40[4] = v41[4];
  swift_bridgeObjectRelease();
  void v40[5] = v41[5];
  long long v42 = (void *)(((unint64_t)v40 + v5 + 48) & ~(v5 | 7));
  uint64_t v43 = (void *)(((unint64_t)v41 + v5 + 48) & ~(v5 | 7));
  *long long v42 = *v43;
  uint64_t v44 = (void *)(((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v45 = (void *)(((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v44 = *v45;
  uint64_t v46 = (void *)(((unint64_t)v44 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v47 = (void *)(((unint64_t)v45 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v46 = *v47;
  uint64_t v48 = (void *)(((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v49 = (void *)(((unint64_t)v47 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v48 = *v49;
  uint64_t v50 = (void *)(((unint64_t)v48 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v51 = (void *)(((unint64_t)v49 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v50 = *v51;
  uint64_t v52 = (void *)(((unint64_t)v50 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v53 = (void *)(((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v52 = *v53;
  uint64_t v54 = (void *)(((unint64_t)v52 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v55 = (void *)(((unint64_t)v53 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v54 = *v55;
  uint64_t v56 = ((unint64_t)v54 + v5 + 8) & ~v5;
  uint64_t v57 = ((unint64_t)v55 + v5 + 8) & ~v5;
  v39(((unint64_t)v54 + v24) & ~v5, ((unint64_t)v55 + v24) & ~v5, v67);
  uint64_t v58 = (void *)((v31 + v56) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v59 = (void *)((v31 + v57) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v58 = *v59;
  unint64_t v60 = (void *)(((unint64_t)v58 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v61 = (void *)(((unint64_t)v59 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v60 = *v61;
  uint64_t v62 = (void *)(((unint64_t)v60 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v63 = (void *)(((unint64_t)v61 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v62 = *v63;
  v39(((unint64_t)v62 + v24) & ~v5, ((unint64_t)v63 + v24) & ~v5, v67);
  uint64_t v64 = (void *)(((unint64_t)v70 + v68 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t result = a1;
  unint64_t v66 = (void *)(((unint64_t)v72 + v68 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v64 = *v66;
  *(void *)(((unint64_t)v64 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v66 + 15) & 0xFFFFFFFFFFFFFFF8);
  return result;
}

uint64_t getEnumTagSinglePayload for PINE(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v9 = v6 | 7;
  uint64_t v10 = v6 + 8;
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  unint64_t v11 = ((v6 + 56) & ~(v6 | 7))
      + v7
      + ((v6
        + 8
        + ((((((v7 + ((v6 + 56) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v6);
  if (v8 < a2)
  {
    unint64_t v12 = ((((v11 + ((v11 + v9 + (v10 & ~v9)) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v13 = a2 - v8;
    uint64_t v14 = v12 & 0xFFFFFFF8;
    if ((v12 & 0xFFFFFFF8) != 0) {
      unsigned int v15 = 2;
    }
    else {
      unsigned int v15 = v13 + 1;
    }
    if (v15 >= 0x10000) {
      LODWORD(v16) = 4;
    }
    else {
      LODWORD(v16) = 2;
    }
    if (v15 < 0x100) {
      LODWORD(v16) = 1;
    }
    if (v15 >= 2) {
      uint64_t v16 = v16;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = *((unsigned __int8 *)a1 + v12);
        if (!v17) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v17 = *(unsigned __int16 *)((char *)a1 + v12);
        if (v17) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x260BC64DCLL);
      case 4:
        int v17 = *(_DWORD *)((char *)a1 + v12);
        if (!v17) {
          break;
        }
LABEL_22:
        int v19 = v17 - 1;
        if (v14)
        {
          int v19 = 0;
          LODWORD(v14) = *a1;
        }
        return v8 + (v14 | v19) + 1;
      default:
        break;
    }
  }
  uint64_t v20 = ~v9;
  uint64_t v21 = (uint64_t)a1 + v9 + 8;
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))((v10
  }
                                                                  + ((((((((((((((v6
                                                                                + (((v21 & v20) + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                                + 48) & v20)
                                                                              + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                            + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                          + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                        + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                      + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                    + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v6);
  unint64_t v22 = *(void *)((((((v21 | v9) + v11) & v20) + 15) & 0xFFFFFFFFFFFFFFF8) + 0x20);
  if (v22 >= 0xFFFFFFFF) {
    LODWORD(v22) = -1;
  }
  return (v22 + 1);
}

void storeEnumTagSinglePayload for PINE(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = v9 | 7;
  size_t v11 = ((v9 + 56) & ~(v9 | 7))
      + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64)
      + ((v9
        + 8
        + ((((((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 56) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v9);
  size_t v12 = ((((v11 + ((v11 + (v9 | 7) + ((v9 + 8) & ~(v9 | 7))) & ~(v9 | 7)) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v8 >= a3)
  {
    int v16 = 0;
    int v17 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      uint64_t v18 = ~v10;
      switch(v16)
      {
        case 1:
          a1[v12] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v12] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_55;
        case 4:
          *(_DWORD *)&a1[v12] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            unint64_t v21 = (unint64_t)&a1[v10 + 8];
            if (v7 < 0x7FFFFFFF)
            {
              unint64_t v26 = ((((v21 | v10) + v11) & v18) + 15) & 0xFFFFFFFFFFFFFFF8;
              if ((a2 & 0x80000000) != 0)
              {
                *(void *)(v26 + 40) = 0;
                *(_OWORD *)(v26 + 24) = 0u;
                *(_OWORD *)(v26 + 8) = 0u;
                *(void *)unint64_t v26 = a2 ^ 0x80000000;
              }
              else
              {
                *(void *)(v26 + 32) = a2 - 1;
              }
            }
            else
            {
              unint64_t v22 = v21 & v18;
              if (v7 >= a2)
              {
                uint64_t v27 = *(void (**)(unint64_t))(v6 + 56);
                v27((v9
                   + 8
                   + ((((((((((((((v9 + ((v22 + 15) & 0xFFFFFFFFFFFFFFF8) + 48) & v18) + 15) & 0xFFFFFFFFFFFFFFF8)
                             + 15) & 0xFFFFFFFFFFFFFFF8)
                           + 15) & 0xFFFFFFFFFFFFFFF8)
                         + 15) & 0xFFFFFFFFFFFFFFF8)
                       + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v9);
              }
              else
              {
                if (v11 <= 3) {
                  int v23 = ~(-1 << (8 * v11));
                }
                else {
                  int v23 = -1;
                }
                if (v11)
                {
                  int v24 = v23 & (~v7 + a2);
                  if (v11 <= 3) {
                    int v25 = v11;
                  }
                  else {
                    int v25 = 4;
                  }
                  bzero((void *)(v21 & v18), v11);
                  switch(v25)
                  {
                    case 2:
                      *(_WORD *)unint64_t v22 = v24;
                      break;
                    case 3:
                      *(_WORD *)unint64_t v22 = v24;
                      *(unsigned char *)(v22 + 2) = BYTE2(v24);
                      break;
                    case 4:
                      *(_DWORD *)unint64_t v22 = v24;
                      break;
                    default:
                      *(unsigned char *)unint64_t v22 = v24;
                      break;
                  }
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v13 = a3 - v8;
    if (((((v11
           + ((v11 + (v9 | 7) + ((v9 + 8) & ~(v9 | 7))) & ~(v9 | 7))
           + 7) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      unsigned int v14 = v13 + 1;
    else {
      unsigned int v14 = 2;
    }
    if (v14 >= 0x10000) {
      int v15 = 4;
    }
    else {
      int v15 = 2;
    }
    if (v14 < 0x100) {
      int v15 = 1;
    }
    if (v14 >= 2) {
      int v16 = v15;
    }
    else {
      int v16 = 0;
    }
    int v17 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v11
         + ((v11 + (v9 | 7) + ((v9 + 8) & ~(v9 | 7))) & ~(v9 | 7))
         + 7) & 0xFFFFFFF8)
       + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
    int v19 = v17;
  else {
    int v19 = 1;
  }
  if (((((v11
         + ((v11 + (v9 | 7) + ((v9 + 8) & ~(v9 | 7))) & ~(v9 | 7))
         + 7) & 0xFFFFFFF8)
       + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v20 = ~v8 + a2;
    bzero(a1, v12);
    *(_DWORD *)a1 = v20;
  }
  switch(v16)
  {
    case 1:
      a1[v12] = v19;
      break;
    case 2:
      *(_WORD *)&a1[v12] = v19;
      break;
    case 3:
LABEL_55:
      __break(1u);
      JUMPOUT(0x260BC6840);
    case 4:
      *(_DWORD *)&a1[v12] = v19;
      break;
    default:
      return;
  }
}

uint64_t partial apply for closure #1 in PINE.unshard<A, B>(_:numOfMeasurements:into:parameter:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 56);
  uint64_t v6 = *a2;
  return static AggregateShare.+= infix(_:_:)(a1, &v6, v3, v4);
}

uint64_t partial apply for closure #1 in PINE.splitSeedBytes<A>(_:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in PINE.splitSeedBytes<A>(_:)(*(void **)(v1 + 88), *(void *)(v1 + 32), a1, *(void *)(v1 + 64));
}

uint64_t PINEPrepareMessage.init(wraparoundJointRandSeed:verificationJointRandSeed:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t PINEPrepareMessage.init<A>(from:parameter:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v74 = a6;
  uint64_t v7 = a3;
  uint64_t v9 = a1;
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1, a4);
  unint64_t v12 = (unint64_t)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = v14;
  unint64_t v75 = *(uint64_t (**)(uint64_t))(v13 + 8);
  uint64_t v76 = v13;
  uint64_t v16 = v75(v14);
  if (v16 + 0x4000000000000000 < 0)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v17 = 2 * v16;
  if (dispatch thunk of Collection.count.getter() != 2 * v16)
  {
    uint64_t v77 = 0;
    unint64_t v78 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    uint64_t v35 = v10;
    type metadata accessor for PINEPrepareMessage();
    uint64_t v36 = _typeName(_:qualified:)();
    unint64_t v38 = v37;
    swift_bridgeObjectRelease();
    uint64_t v77 = v36;
    unint64_t v78 = v38;
    v39._countAndFlagsBits = 0x6572697571657220;
    v39._object = (void *)0xEB00000000203A64;
    String.append(_:)(v39);
    uint64_t v79 = v17;
    v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v41._countAndFlagsBits = 0x203A746F67202CLL;
    v41._object = (void *)0xE700000000000000;
    String.append(_:)(v41);
    uint64_t v79 = dispatch thunk of Collection.count.getter();
    v42._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    uint64_t v43 = v77;
    unint64_t v44 = v78;
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *uint64_t v45 = v43;
    v45[1] = v44;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8))(v9, v7);
  }
  uint64_t v68 = v10;
  uint64_t v18 = *(void (**)(unint64_t, uint64_t, uint64_t))(v10 + 16);
  uint64_t v71 = v9;
  v18(v12, v9, v7);
  uint64_t v72 = v7;
  uint64_t v19 = ArraySlice.init<A>(_:)();
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v26 = ((uint64_t (*)(uint64_t, uint64_t))v75)(a2, v76);
  uint64_t v15 = specialized Collection.prefix(_:)(v26, v19, v21, v23, v25);
  uint64_t v67 = v27;
  uint64_t v73 = v28;
  unint64_t v12 = v29;
  uint64_t v9 = specialized Collection.dropFirst(_:)(v26, v19, v21, v23, v25);
  uint64_t v69 = v31;
  uint64_t v70 = v30;
  uint64_t v7 = v32;
  if ((v12 & 1) == 0)
  {
    swift_unknownObjectRetain();
    a5 = v73;
LABEL_5:
    specialized _copyCollectionToContiguousArray<A>(_:)(v15, v67, a5, v12);
    uint64_t v34 = v33;
    goto LABEL_13;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  uint64_t v47 = swift_dynamicCastClass();
  if (!v47)
  {
    swift_unknownObjectRelease();
    uint64_t v47 = MEMORY[0x263F8EE78];
  }
  uint64_t v48 = *(void *)(v47 + 16);
  swift_release();
  a5 = v73;
  if (__OFSUB__(v12 >> 1, v73)) {
    goto LABEL_25;
  }
  if (v48 != (v12 >> 1) - v73)
  {
LABEL_26:
    swift_unknownObjectRelease();
    goto LABEL_5;
  }
  uint64_t v34 = swift_dynamicCastClass();
  if (!v34)
  {
    swift_unknownObjectRelease();
    uint64_t v34 = MEMORY[0x263F8EE78];
  }
LABEL_13:
  swift_unknownObjectRelease();
  uint64_t v49 = ((uint64_t (*)(uint64_t, uint64_t))v75)(a2, v76);
  uint64_t v50 = v69;
  uint64_t v51 = v70;
  uint64_t v52 = specialized Collection.prefix(_:)(v49, v9, v70, v7, v69);
  uint64_t v76 = v53;
  uint64_t v55 = v54;
  unint64_t v57 = v56;
  specialized Collection.dropFirst(_:)(v49, v9, v51, v7, v50);
  if (v57)
  {
    unint64_t v75 = (uint64_t (*)(uint64_t))v34;
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    swift_unknownObjectRetain();
    uint64_t v63 = swift_dynamicCastClass();
    uint64_t v58 = v72;
    if (!v63)
    {
      swift_unknownObjectRelease();
      uint64_t v63 = MEMORY[0x263F8EE78];
    }
    uint64_t v64 = *(void *)(v63 + 16);
    swift_release();
    uint64_t v59 = v71;
    if (__OFSUB__(v57 >> 1, v55))
    {
      __break(1u);
    }
    else if (v64 == (v57 >> 1) - v55)
    {
      uint64_t v62 = swift_dynamicCastClass();
      uint64_t v60 = v68;
      uint64_t v34 = (uint64_t)v75;
      if (!v62)
      {
        swift_unknownObjectRelease();
        uint64_t v62 = MEMORY[0x263F8EE78];
      }
      goto LABEL_22;
    }
    swift_unknownObjectRelease();
    uint64_t v60 = v68;
    uint64_t v34 = (uint64_t)v75;
  }
  else
  {
    swift_unknownObjectRetain();
    uint64_t v59 = v71;
    uint64_t v58 = v72;
    uint64_t v60 = v68;
  }
  specialized _copyCollectionToContiguousArray<A>(_:)(v52, v76, v55, v57);
  uint64_t v62 = v61;
LABEL_22:
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v59, v58);
  uint64_t result = swift_unknownObjectRelease();
  unint64_t v65 = v74;
  *uint64_t v74 = v34;
  v65[1] = v62;
  return result;
}

uint64_t type metadata accessor for PINEPrepareMessage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t PINEPrepareMessage.wraparoundJointRandSeed.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PINEPrepareMessage.verificationJointRandSeed.getter()
{
  return swift_bridgeObjectRetain();
}

BOOL static PINEPrepareMessage.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  if (!specialized static Array<A>.== infix(_:_:)(*a1, *a2)) {
    return 0;
  }

  return specialized static Array<A>.== infix(_:_:)(v2, v3);
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance PINEPrepareMessage<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  return PINEPrepareMessage.init<A>(from:parameter:)(a1, *(void *)(a4 + 16), a2, *(void *)(a4 + 24), a3, a5);
}

uint64_t PINEPrepareMessage.encodedLength.getter()
{
  uint64_t v1 = *(void *)(*v0 + 16);
  uint64_t v2 = *(void *)(v0[1] + 16);
  uint64_t result = v1 + v2;
  if (__OFADD__(v1, v2)) {
    __break(1u);
  }
  return result;
}

uint64_t PINEPrepareMessage.encode<A>(into:)()
{
  Seed.encode<A>(into:)();

  return Seed.encode<A>(into:)();
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance PINEPrepareMessage<A>()
{
  return PINEPrepareMessage.encode<A>(into:)();
}

uint64_t destroy for PINEPrepareMessage()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for PINEPrepareMessage(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PINEPrepareMessage(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for PINEPrepareMessage(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PINEPrepareMessage(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PINEPrepareMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void discreteFourierTransform<A, B, C>(input:size:output:)(void (**a1)(void, void), unint64_t a2, char *a3, void (**a4)(char *), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v203 = a3;
  uint64_t v198 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v179 = a10;
  unint64_t v17 = a2;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v148 = AssociatedTypeWitness;
  uint64_t v167 = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(char **)(v167 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v167, v19);
  uint64_t v166 = (char *)&v148 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v20, v22);
  uint64_t v165 = (char *)&v148 - v24;
  uint64_t v26 = MEMORY[0x270FA5388](v23, v25);
  uint64_t v164 = (char *)&v148 - v27;
  uint64_t v180 = a6;
  uint64_t v173 = *(void *)(a6 - 8);
  uint64_t v29 = MEMORY[0x270FA5388](v26, v28);
  unint64_t v159 = (char *)&v148 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = MEMORY[0x270FA5388](v29, v31);
  v158 = (char *)&v148 - v33;
  uint64_t v35 = MEMORY[0x270FA5388](v32, v34);
  long long v185 = (char *)&v148 - v36;
  uint64_t v38 = MEMORY[0x270FA5388](v35, v37);
  uint64_t v157 = (char *)&v148 - v39;
  uint64_t v41 = MEMORY[0x270FA5388](v38, v40);
  uint64_t v154 = (uint64_t)&v148 - v42;
  uint64_t v44 = MEMORY[0x270FA5388](v41, v43);
  long long v178 = (char *)&v148 - v45;
  MEMORY[0x270FA5388](v44, v46);
  uint64_t v188 = (char *)&v148 - v47;
  uint64_t v183 = (void (*)(uint64_t, uint64_t))a7;
  uint64_t v197 = *(void (***)(void, void))(*(void *)(a7 + 8) + 8);
  unint64_t v202 = a4;
  uint64_t v182 = swift_getAssociatedTypeWitness();
  uint64_t v48 = *(void *)(v182 - 8);
  uint64_t v50 = MEMORY[0x270FA5388](v182, v49);
  uint64_t v181 = (char *)&v148 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = MEMORY[0x270FA5388](v50, v52);
  uint64_t v177 = (char *)&v148 - v54;
  uint64_t v172 = *(void *)(a5 - 8);
  uint64_t v56 = MEMORY[0x270FA5388](v53, v55);
  uint64_t v156 = (char *)&v148 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = MEMORY[0x270FA5388](v56, v58);
  uint64_t v160 = (char *)&v148 - v60;
  MEMORY[0x270FA5388](v59, v61);
  uint64_t v187 = (char *)&v148 - v62;
  uint64_t v189 = a8;
  uint64_t v63 = *(void *)(a8 + 8);
  uint64_t v204 = a5;
  uint64_t v201 = swift_getAssociatedTypeWitness();
  uint64_t v64 = *(char **)(v201 - 8);
  uint64_t v66 = MEMORY[0x270FA5388](v201, v65);
  uint64_t v68 = (char *)&v148 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = MEMORY[0x270FA5388](v66, v69);
  v199 = (char *)&v148 - v71;
  uint64_t v73 = MEMORY[0x270FA5388](v70, v72);
  unint64_t v75 = (char *)&v148 - v74;
  MEMORY[0x270FA5388](v73, v76);
  unint64_t v78 = (char *)&v148 - v77;
  specialized static BitReversal.indicesFor(_:)(v17);
  if ((v17 & 0x8000000000000000) != 0) {
    goto LABEL_36;
  }
  uint64_t v80 = (void (**)(void, void))v79;
  uint64_t v200 = a9;
  uint64_t v168 = v68;
  uint64_t v186 = v75;
  int64_t v153 = v17;
  uint64_t v190 = v63;
  if (v17)
  {
    if (v17 - 1 >= (unint64_t)v79[2])
    {
LABEL_37:
      __break(1u);
      return;
    }
    uint64_t v171 = v18;
    unint64_t v81 = 0;
    uint64_t v195 = *(void (**)(void, void))(v172 + 16);
    uint64_t v196 = (void (*)(void, void))(v172 + 16);
    unint64_t v82 = (void (**)(char *, uint64_t))(v64 + 8);
    uint64_t v193 = (char *)(v172 + 8);
    uint64_t v170 = v64;
    long long v192 = (void (**)(char *, char *, uint64_t))(v64 + 16);
    uint64_t v175 = (void (**)(char *, uint64_t))(v48 + 8);
    uint64_t v174 = v173 + 16;
    uint64_t v83 = v201;
    uint64_t v176 = v79;
    uint64_t v194 = (void (**)(char *, uint64_t))(v64 + 8);
    do
    {
      uint64_t v84 = v187;
      uint64_t v85 = v204;
      ((void (*)(char *, char *, uint64_t))v195)(v187, v203, v204);
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      long long v86 = *v82;
      (*v82)(v75, v83);
      (*(void (**)(char *, uint64_t))v193)(v84, v85);
      uint64_t v87 = (uint64_t)v80[(void)v81 + 4];
      if (v87 >= dispatch thunk of Collection.count.getter())
      {
        (*v192)(v75, v78, v83);
        dispatch thunk of static AdditiveArithmetic.zero.getter();
        dispatch thunk of MutableCollection.subscript.setter();
      }
      else
      {
        uint64_t v88 = v181;
        dispatch thunk of Collection.startIndex.getter();
        uint64_t v191 = (void (*)(char *, char *, uint64_t))v81;
        uint64_t v89 = v177;
        dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
        Swift::Int v184 = v86;
        uint64_t v90 = *v175;
        uint64_t v91 = v88;
        uint64_t v92 = v182;
        (*v175)(v91, v182);
        (*v192)(v75, v78, v83);
        uint64_t v93 = (void (*)(void, void))dispatch thunk of Collection.subscript.read();
        (*(void (**)(char *))v174)(v188);
        v93(v205, 0);
        dispatch thunk of MutableCollection.subscript.setter();
        uint64_t v94 = v89;
        unint64_t v81 = (char *)v191;
        uint64_t v95 = v92;
        uint64_t v80 = (void (**)(void, void))v176;
        v90(v94, v95);
        long long v86 = v184;
      }
      ++v81;
      unint64_t v82 = v194;
      v86(v78, v83);
      unint64_t v75 = v186;
    }
    while ((char *)v153 != v81);
    swift_bridgeObjectRelease();
    unint64_t v17 = v153;
    uint64_t v63 = v190;
    uint64_t v18 = v171;
    uint64_t v64 = v170;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  int v149 = 0;
  int64_t v151 = __clz(__rbit64(v17));
  uint64_t v150 = v179 + 72;
  uint64_t v177 = (char *)(v179 + 88);
  uint64_t v176 = (char **)(AssociatedConformanceWitness + 56);
  uint64_t v175 = (void (**)(char *, uint64_t))(v179 + 96);
  long long v192 = (void (**)(char *, char *, uint64_t))(v172 + 16);
  uint64_t v197 = (void (**)(void, void))(v172 + 8);
  uint64_t v198 = (void (**)(void, void))(v64 + 8);
  unint64_t v202 = (void (**)(char *))(v173 + 16);
  uint64_t v163 = (void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v162 = (void (**)(uint64_t, uint64_t))(v173 + 8);
  uint64_t v155 = (void (**)(char *, char *, uint64_t))(v64 + 16);
  for (uint64_t i = 1; ; uint64_t i = v152)
  {
    if (i >= v151)
    {
      if ((i != v151) | v149 & 1) {
        return;
      }
      int v149 = 1;
      int64_t v99 = v151;
    }
    else
    {
      int64_t v99 = i + 1;
    }
    uint64_t v152 = v99;
    uint64_t v100 = v179;
    uint64_t v101 = v180;
    (*(void (**)(uint64_t, uint64_t))(v179 + 72))(v180, v179);
    static FieldElement.root(n:)(i, v101, v100, v154);
    if ((unint64_t)i <= 0x3F)
    {
      if (i) {
        break;
      }
    }
LABEL_12:
    uint64_t v97 = *v162;
    uint64_t v98 = v180;
    (*v162)(v154, v180);
    v97((uint64_t)v178, v98);
  }
  if (i == 63)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v174 = v153 / (1 << i);
  if (v174 < 0)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v161 = 1 << i;
  unint64_t v102 = (unint64_t)(1 << i) >> 1;
  uint64_t v173 = swift_checkMetadataState();
  uint64_t v181 = 0;
  uint64_t v172 = *(void *)v177;
  uint64_t v171 = *v176;
  uint64_t v170 = (char *)*v175;
  uint64_t v193 = (char *)v102;
  while (1)
  {
    if (v181 == (char *)v102)
    {
      __break(1u);
      goto LABEL_34;
    }
    uint64_t v112 = v201;
    uint64_t v113 = v168;
    uint64_t v114 = v63;
    if (v174) {
      break;
    }
LABEL_22:
    uint64_t v63 = v114;
    ++v181;
    uint64_t v103 = v165;
    uint64_t v104 = v180;
    uint64_t v105 = v179;
    uint64_t v106 = (void (*)(void, void))v172;
    ((void (*)(uint64_t, uint64_t))v172)(v180, v179);
    uint64_t v107 = v166;
    v106(v104, v105);
    uint64_t v108 = v164;
    ((void (*)(char *, char *))v171)(v103, v107);
    uint64_t v109 = *v163;
    uint64_t v110 = v107;
    uint64_t v111 = v167;
    (*v163)(v110, v167);
    v109(v103, v111);
    ((void (*)(char *, uint64_t, uint64_t))v170)(v108, v104, v105);
    unint64_t v102 = (unint64_t)v193;
    if (v181 == v193) {
      goto LABEL_12;
    }
  }
  uint64_t v115 = 0;
  uint64_t v116 = *v192;
  uint64_t v191 = *v192;
  while (1)
  {
    uint64_t v117 = v160;
    uint64_t v118 = v116;
    v116(v160, v203, v204);
    dispatch thunk of Collection.startIndex.getter();
    if ((unsigned __int128)(v161 * (__int128)(uint64_t)v115) >> 64 != (v161 * (uint64_t)v115) >> 63) {
      break;
    }
    if (__OFADD__(v161 * (void)v115, v181)) {
      goto LABEL_31;
    }
    Swift::Int v184 = (void (*)(char *, uint64_t))((char *)v115 + 1);
    uint64_t v119 = v204;
    dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
    uint64_t v196 = *v198;
    v196(v113, v112);
    uint64_t v195 = *v197;
    v195(v117, v119);
    uint64_t v120 = (void (*)(void, void))dispatch thunk of Collection.subscript.read();
    uint64_t v121 = *v202;
    uint64_t v122 = v180;
    (*v202)(v188);
    v120(v205, 0);
    ((void (*)(char *, char *, uint64_t))v121)(v185, v178, v122);
    unint64_t v123 = v187;
    v118(v187, v203, v119);
    uint64_t v124 = v156;
    v118(v156, v203, v119);
    uint64_t v125 = v186;
    dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
    uint64_t v126 = v195;
    v195(v124, v119);
    uint64_t v127 = v123;
    uint64_t v128 = (void (*)(void, void))dispatch thunk of Collection.subscript.read();
    uint64_t v129 = (uint64_t)v158;
    uint64_t v194 = (void (**)(char *, uint64_t))v121;
    v121(v158);
    v128(v205, 0);
    v196(v125, v201);
    v126(v127, v204);
    uint64_t v130 = v159;
    uint64_t v131 = v185;
    ((void (*)(char *, char *, uint64_t))v121)(v159, v185, v122);
    uint64_t v132 = v157;
    uint64_t v133 = (uint64_t)v130;
    uint64_t v134 = v179;
    FieldElement.init(other:)(v133, v122, v179);
    uint64_t v135 = v165;
    uint64_t v136 = (void (*)(void, void))v172;
    ((void (*)(uint64_t, uint64_t))v172)(v122, v134);
    uint64_t v137 = v166;
    v136(v122, v134);
    uint64_t v138 = v164;
    ((void (*)(char *, char *))v171)(v135, v137);
    uint64_t v139 = *v163;
    Swift::Int v140 = v137;
    uint64_t v141 = v167;
    (*v163)(v140, v167);
    v139(v135, v141);
    ((void (*)(char *, uint64_t, uint64_t))v170)(v138, v122, v134);
    uint64_t v142 = *v162;
    uint64_t v183 = v142;
    v142(v129, v122);
    v142((uint64_t)v131, v122);
    (*v155)(v186, v199, v201);
    uint64_t v143 = v188;
    ((void (*)(uint64_t, char *, uint64_t))v194)(v129, v188, v122);
    FieldElement.init(other:)(v129, v122, v134);
    uint64_t v182 = *(void *)(v134 + 8);
    dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
    dispatch thunk of MutableCollection.subscript.setter();
    uint64_t v144 = v187;
    v191(v187, v203, v204);
    dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
    v195(v144, v204);
    uint64_t v145 = v143;
    ((void (*)(uint64_t, char *, uint64_t))v194)(v129, v143, v122);
    uint64_t v146 = v129;
    uint64_t v112 = v201;
    FieldElement.init(other:)(v146, v122, v134);
    dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
    uint64_t v113 = v168;
    dispatch thunk of MutableCollection.subscript.setter();
    uint64_t v114 = v190;
    uint64_t v147 = v183;
    v183((uint64_t)v132, v122);
    v147((uint64_t)v145, v122);
    uint64_t v115 = v184;
    v196(v199, v112);
    uint64_t v116 = v191;
    if ((void (*)(char *, uint64_t))v174 == v115) {
      goto LABEL_22;
    }
  }
  __break(1u);
LABEL_31:
  __break(1u);
}

uint64_t inverseDiscreteFourierTransform<A, B, C>(input:size:output:)(void (**a1)(void, void), unint64_t a2, char *a3, void (**a4)(char *), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v151 = a8;
  uint64_t v147 = a7;
  uint64_t v150 = a5;
  uint64_t v146 = a4;
  int v149 = a3;
  uint64_t v145 = a1;
  uint64_t v154 = a10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v167 = AssociatedConformanceWitness;
  uint64_t v168 = AssociatedTypeWitness;
  uint64_t v14 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  uint64_t v169 = *(void (**)(uint64_t, char *, uint64_t))(v14 + 24);
  uint64_t v172 = *((void *)v169 + 2);
  uint64_t v171 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v171, v15);
  uint64_t v170 = (char *)&v139 - v16;
  uint64_t v17 = swift_checkMetadataState();
  uint64_t v173 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17, v18);
  uint64_t v163 = (char *)&v139 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v19, v21);
  uint64_t v156 = (char *)&v139 - v23;
  uint64_t v25 = MEMORY[0x270FA5388](v22, v24);
  uint64_t v174 = (uint64_t)&v139 - v26;
  uint64_t v28 = MEMORY[0x270FA5388](v25, v27);
  uint64_t v157 = (char *)&v139 - v29;
  uint64_t v31 = MEMORY[0x270FA5388](v28, v30);
  uint64_t v164 = (char *)&v139 - v32;
  uint64_t v34 = MEMORY[0x270FA5388](v31, v33);
  unint64_t v159 = (char *)&v139 - v35;
  uint64_t v37 = MEMORY[0x270FA5388](v34, v36);
  uint64_t v175 = (char *)&v139 - v38;
  uint64_t v40 = MEMORY[0x270FA5388](v37, v39);
  uint64_t v166 = (char *)&v139 - v41;
  uint64_t v43 = MEMORY[0x270FA5388](v40, v42);
  uint64_t v162 = (char *)&v139 - v44;
  uint64_t v46 = MEMORY[0x270FA5388](v43, v45);
  int64_t v153 = (char *)&v139 - v47;
  uint64_t v49 = MEMORY[0x270FA5388](v46, v48);
  uint64_t v155 = (char *)&v139 - v50;
  uint64_t v52 = MEMORY[0x270FA5388](v49, v51);
  uint64_t v143 = (char *)&v139 - v53;
  uint64_t v55 = MEMORY[0x270FA5388](v52, v54);
  uint64_t v57 = (char *)&v139 - v56;
  uint64_t v58 = *(void *)(a6 - 8);
  uint64_t v60 = MEMORY[0x270FA5388](v55, v59);
  uint64_t v62 = (char *)&v139 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = MEMORY[0x270FA5388](v60, v63);
  uint64_t v66 = (char *)&v139 - v65;
  MEMORY[0x270FA5388](v64, v67);
  uint64_t v69 = (char *)&v139 - v68;
  unint64_t v148 = a2;
  uint64_t v176 = a2;
  unint64_t v165 = lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of BinaryInteger.init<A>(_:)();
  uint64_t v70 = v154;
  FieldElement.init(_:)((uint64_t)v57, a6, v154);
  uint64_t v144 = v58;
  uint64_t v71 = v58;
  uint64_t v72 = v155;
  (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v62, v66, a6);
  uint64_t v142 = v69;
  FieldElement.init(other:)((uint64_t)v62, a6, v70);
  uint64_t v73 = *(void (**)(uint64_t, uint64_t))(v70 + 88);
  uint64_t v141 = v66;
  v73(a6, v70);
  char v74 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v152 = a6;
  if (v74)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
    {
      uint64_t v75 = dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t v76 = v167;
      uint64_t v77 = (uint64_t)v164;
      if (!v75) {
        goto LABEL_52;
      }
      goto LABEL_18;
    }
    uint64_t v176 = 0;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v81 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v173 + 8))(v57, v17);
    uint64_t v76 = v167;
  }
  else
  {
    char v78 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v79 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v78)
    {
      uint64_t v76 = v167;
      uint64_t v80 = v173;
      if (v79 <= 64)
      {
        swift_getAssociatedConformanceWitness();
        dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        char v84 = dispatch thunk of static Comparable.>= infix(_:_:)();
        uint64_t v85 = *(void (**)(char *, uint64_t))(v80 + 8);
        v85(v57, v17);
        long long v86 = *(void (**)(char *, char *, uint64_t))(v80 + 16);
        uint64_t v87 = v163;
        v86(v163, v72, v17);
        if (v84)
        {
          uint64_t v88 = dispatch thunk of BinaryInteger._lowWord.getter();
          v85(v87, v17);
          uint64_t v77 = (uint64_t)v164;
          if (!v88) {
            goto LABEL_52;
          }
        }
        else
        {
          v85(v87, v17);
          uint64_t v77 = (uint64_t)v164;
        }
        goto LABEL_18;
      }
      uint64_t v176 = 0;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v81 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v82 = v80;
    }
    else
    {
      uint64_t v76 = v167;
      if (v79 < 64)
      {
        uint64_t v83 = dispatch thunk of BinaryInteger._lowWord.getter();
        uint64_t v77 = (uint64_t)v164;
        if (!v83) {
          goto LABEL_52;
        }
        goto LABEL_18;
      }
      uint64_t v176 = 0;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v81 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v82 = v173;
    }
    (*(void (**)(char *, uint64_t))(v82 + 8))(v57, v17);
  }
  uint64_t v77 = (uint64_t)v164;
  if ((v81 & 1) == 0)
  {
LABEL_18:
    uint64_t v140 = a9;
    uint64_t v163 = (char *)swift_checkMetadataState();
    (*(void (**)(char *, uint64_t))(v76 + 24))(v163, v76);
    uint64_t v168 = swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    uint64_t v89 = v162;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    uint64_t v90 = v153;
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    uint64_t v91 = v173;
    uint64_t v92 = *(void (**)(char *, uint64_t))(v173 + 8);
    v92(v89, v17);
    v92(v57, v17);
    uint64_t v93 = *(void (**)(char *, char *, uint64_t))(v91 + 16);
    v91 += 16;
    v93(v166, v155, v17);
    uint64_t v169 = (void (*)(uint64_t, char *, uint64_t))v93;
    v93(v175, v90, v17);
    uint64_t v176 = 1;
    dispatch thunk of BinaryInteger.init<A>(_:)();
    uint64_t v94 = v167;
    (*(void (**)(char *))(v167 + 64))(v57);
    v92(v57, v17);
    uint64_t v95 = v94 + 56;
    uint64_t v96 = (void (**)(char *, char *, uint64_t))(v91 + 16);
    uint64_t v173 = v91;
    uint64_t v161 = v95;
    uint64_t v162 = (char *)(v91 + 16);
    uint64_t v160 = v14;
    while (1)
    {
      v169(v77, v175, v17);
      if (dispatch thunk of static BinaryInteger.isSigned.getter())
      {
        char v103 = dispatch thunk of static BinaryInteger.isSigned.getter();
        uint64_t v104 = dispatch thunk of BinaryInteger.bitWidth.getter();
        if (v103)
        {
          if (v104 <= 128)
          {
            dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
            dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
            char v105 = dispatch thunk of static Comparable.>= infix(_:_:)();
            v92(v57, v17);
            uint64_t v106 = v77;
            uint64_t v107 = (uint64_t)v157;
            v169((uint64_t)v157, (char *)v106, v17);
            if ((v105 & 1) == 0)
            {
              v92((char *)v107, v17);
              v92((char *)v106, v17);
              goto LABEL_33;
            }
            unint64_t v108 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
            static FixedWidthInteger._truncatingInit<A>(_:)(v107, (uint64_t)&type metadata for _UInt128, v17, v108, v14, (uint64_t)&v176);
            v92((char *)v107, v17);
            uint64_t v109 = v176;
            uint64_t v110 = v177;
            uint64_t v111 = v106;
            goto LABEL_29;
          }
        }
        else if (v104 < 128)
        {
LABEL_28:
          unint64_t v112 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
          static FixedWidthInteger._truncatingInit<A>(_:)(v77, (uint64_t)&type metadata for _UInt128, v17, v112, v14, (uint64_t)&v176);
          uint64_t v109 = v176;
          uint64_t v110 = v177;
          uint64_t v111 = v77;
LABEL_29:
          v92((char *)v111, v17);
          if (!(v110 | v109)) {
            goto LABEL_50;
          }
          goto LABEL_33;
        }
      }
      else if (dispatch thunk of BinaryInteger.bitWidth.getter() < 128)
      {
        goto LABEL_28;
      }
      lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
      uint64_t v176 = 0;
      uint64_t v177 = 0;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v113 = dispatch thunk of static Equatable.== infix(_:_:)();
      v92(v57, v17);
      v92((char *)v77, v17);
      if (v113)
      {
LABEL_50:
        v92(v175, v17);
        v92(v166, v17);
        uint64_t v129 = v143;
        (*v96)(v143, v159, v17);
        v92(v153, v17);
        v92(v155, v17);
        uint64_t v130 = v154;
        uint64_t v131 = (uint64_t)v142;
        uint64_t v132 = v152;
        (*(void (**)(char *, uint64_t, uint64_t))(v154 + 96))(v129, v152, v154);
        uint64_t v133 = *(void (**)(char *, uint64_t))(v144 + 8);
        v133(v141, v132);
        uint64_t v134 = v148;
        uint64_t v135 = v149;
        uint64_t v136 = v150;
        uint64_t v137 = v151;
        discreteFourierTransform<A, B, C>(input:size:output:)(v145, v148, v149, v146, v150, v132, v147, v151, v140, v130);
        inverseDiscreteFourierTransformFinish<A, B>(size:sizeInverse:output:)(v134, v131, (uint64_t)v135, v136, v132, v137, v130);
        return ((uint64_t (*)(uint64_t, uint64_t))v133)(v131, v132);
      }
LABEL_33:
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      uint64_t v114 = v174;
      dispatch thunk of static BinaryInteger.& infix(_:_:)();
      v92(v57, v17);
      if (dispatch thunk of static BinaryInteger.isSigned.getter())
      {
        char v115 = dispatch thunk of static BinaryInteger.isSigned.getter();
        uint64_t v116 = dispatch thunk of BinaryInteger.bitWidth.getter();
        if (v115)
        {
          if (v116 <= 128)
          {
            dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
            dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
            uint64_t v117 = v174;
            char v118 = dispatch thunk of static Comparable.>= infix(_:_:)();
            v92(v57, v17);
            uint64_t v119 = (uint64_t)v156;
            v169((uint64_t)v156, (char *)v117, v17);
            if ((v118 & 1) == 0)
            {
              v92((char *)v119, v17);
              v92((char *)v117, v17);
              uint64_t v98 = v166;
              uint64_t v97 = v167;
              uint64_t v96 = (void (**)(char *, char *, uint64_t))v162;
              int64_t v99 = v163;
LABEL_20:
              uint64_t v100 = v159;
              (*(void (**)(char *, char *, char *, uint64_t))(v97 + 56))(v159, v98, v99, v97);
              v92(v100, v17);
              (*v96)(v100, v57, v17);
              goto LABEL_21;
            }
            unint64_t v120 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
            static FixedWidthInteger._truncatingInit<A>(_:)(v119, (uint64_t)&type metadata for _UInt128, v17, v120, v14, (uint64_t)&v176);
            v92((char *)v119, v17);
LABEL_42:
            uint64_t v123 = v176;
            uint64_t v124 = v177;
            uint64_t v122 = v117;
LABEL_43:
            v92((char *)v122, v17);
            uint64_t v126 = v124 | v123;
            uint64_t v98 = v166;
            uint64_t v97 = v167;
            uint64_t v96 = (void (**)(char *, char *, uint64_t))v162;
            int64_t v99 = v163;
            if (v126) {
              goto LABEL_20;
            }
            goto LABEL_21;
          }
        }
        else if (v116 < 128)
        {
          unint64_t v125 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
          uint64_t v117 = v174;
          static FixedWidthInteger._truncatingInit<A>(_:)(v174, (uint64_t)&type metadata for _UInt128, v17, v125, v14, (uint64_t)&v176);
          goto LABEL_42;
        }
        lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
        uint64_t v176 = 0;
        uint64_t v177 = 0;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        uint64_t v128 = v174;
        int v158 = dispatch thunk of static Equatable.== infix(_:_:)();
        v92(v57, v17);
        v92((char *)v128, v17);
        uint64_t v98 = v166;
        uint64_t v97 = v167;
        uint64_t v96 = (void (**)(char *, char *, uint64_t))v162;
        int64_t v99 = v163;
        if ((v158 & 1) == 0) {
          goto LABEL_20;
        }
      }
      else
      {
        if (dispatch thunk of BinaryInteger.bitWidth.getter() < 128)
        {
          unint64_t v121 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
          static FixedWidthInteger._truncatingInit<A>(_:)(v114, (uint64_t)&type metadata for _UInt128, v17, v121, v14, (uint64_t)&v176);
          uint64_t v122 = v114;
          uint64_t v123 = v176;
          uint64_t v124 = v177;
          goto LABEL_43;
        }
        lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
        uint64_t v176 = 0;
        uint64_t v177 = 0;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        char v127 = dispatch thunk of static Equatable.== infix(_:_:)();
        v92(v57, v17);
        v92((char *)v114, v17);
        uint64_t v98 = v166;
        uint64_t v97 = v167;
        uint64_t v96 = (void (**)(char *, char *, uint64_t))v162;
        int64_t v99 = v163;
        if ((v127 & 1) == 0) {
          goto LABEL_20;
        }
      }
LABEL_21:
      (*(void (**)(char *, char *, char *, uint64_t))(v97 + 56))(v98, v98, v99, v97);
      v92(v98, v17);
      uint64_t v101 = *v96;
      (*v96)(v98, v57, v17);
      uint64_t v176 = 1;
      unint64_t v102 = v175;
      uint64_t v14 = v160;
      dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)();
      v92(v102, v17);
      v101(v102, v57, v17);
      uint64_t v77 = (uint64_t)v164;
    }
  }
LABEL_52:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t inverseDiscreteFourierTransformFinish<A, B>(size:sizeInverse:output:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v158 = a2;
  uint64_t v140 = a1;
  uint64_t v144 = *(void (***)(void, void))(a5 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v130 = (char *)&v125 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12, v14);
  uint64_t v129 = (char *)&v125 - v16;
  uint64_t v18 = MEMORY[0x270FA5388](v15, v17);
  uint64_t v128 = (char *)&v125 - v19;
  MEMORY[0x270FA5388](v18, v20);
  uint64_t v161 = (char *)&v125 - v21;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v138 = a5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v162 = (uint64_t (*)(char *, uint64_t))AssociatedTypeWitness;
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t v164 = *(void *)(v23 - 8);
  uint64_t v25 = MEMORY[0x270FA5388](v23, v24);
  uint64_t v137 = (char *)&v125 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x270FA5388](v25, v27);
  uint64_t v167 = (char *)&v125 - v29;
  MEMORY[0x270FA5388](v28, v30);
  uint64_t v166 = (char *)&v125 - v31;
  uint64_t v139 = a6;
  uint64_t v32 = *(void *)(a6 + 8);
  uint64_t v33 = swift_getAssociatedTypeWitness();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v168 = v33;
  uint64_t v169 = v34;
  uint64_t v36 = MEMORY[0x270FA5388](v33, v35);
  uint64_t v170 = (char *)&v125 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = MEMORY[0x270FA5388](v36, v38);
  uint64_t v163 = (char *)&v125 - v40;
  uint64_t v42 = MEMORY[0x270FA5388](v39, v41);
  uint64_t v160 = (char *)&v125 - v43;
  uint64_t v44 = *(void *)(a4 - 8);
  uint64_t v46 = MEMORY[0x270FA5388](v42, v45);
  uint64_t v136 = (char *)&v125 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v46, v48);
  uint64_t v50 = (char *)&v125 - v49;
  uint64_t v52 = v44 + 16;
  uint64_t v51 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 16);
  uint64_t v171 = a3;
  uint64_t v53 = a3;
  uint64_t v54 = v51;
  v51((char *)&v125 - v49, v53, a4);
  uint64_t v159 = v32;
  uint64_t v55 = dispatch thunk of Collection.count.getter();
  uint64_t v58 = *(void (**)(char *, uint64_t))(v44 + 8);
  uint64_t v57 = v44 + 8;
  uint64_t v56 = v58;
  uint64_t v165 = a4;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v58)(v50, a4);
  if (v55 < v140)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  uint64_t v155 = v54;
  uint64_t v156 = v23;
  uint64_t v60 = v165;
  ((void (*)(char *))v54)(v50);
  uint64_t v135 = v57;
  dispatch thunk of Collection.startIndex.getter();
  v56(v50, v60);
  uint64_t v61 = a7;
  uint64_t v146 = (void (**)(char *))dispatch thunk of MutableCollection.subscript.modify();
  uint64_t v154 = v50;
  uint64_t v134 = v56;
  uint64_t v145 = v62;
  uint64_t v63 = swift_checkMetadataState();
  uint64_t v64 = (void (**)(uint64_t, uint64_t))(a7 + 88);
  uint64_t v65 = *v64;
  uint64_t v66 = v167;
  uint64_t v67 = v138;
  (*v64)(v138, v61);
  uint64_t v68 = v65;
  uint64_t v132 = v65;
  uint64_t v69 = v137;
  v68(v67, v61);
  uint64_t v152 = *(void (**)(char *, char *, uint64_t))(AssociatedConformanceWitness + 56);
  uint64_t v153 = AssociatedConformanceWitness + 56;
  uint64_t v70 = v166;
  uint64_t v133 = v63;
  v152(v66, v69, v63);
  uint64_t v71 = *(void (**)(char *, uint64_t))(v164 + 8);
  uint64_t v151 = v71;
  v164 += 8;
  uint64_t v72 = v156;
  v71(v69, v156);
  v71(v66, v72);
  uint64_t v73 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 96);
  uint64_t v150 = v61 + 96;
  int v149 = v73;
  v73(v70, v67, v61);
  ((void (*)(char *, void))v146)(v172, 0);
  char v74 = *(uint64_t (**)(char *, uint64_t))(v169 + 8);
  uint64_t v131 = v169 + 8;
  uint64_t v162 = v74;
  v74(v160, v168);
  uint64_t v75 = v154;
  uint64_t v76 = v171;
  uint64_t v77 = v155;
  v155(v154, v171, v60);
  char v78 = v136;
  uint64_t v148 = v52;
  v77(v136, v76, v60);
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v79 = v134;
  v134(v78, v60);
  uint64_t v80 = v163;
  uint64_t v126 = v140 / 2;
  dispatch thunk of Collection.index(_:offsetBy:)();
  char v81 = v162;
  v162(v80, v168);
  v79(v75, v60);
  uint64_t v82 = v81;
  uint64_t v146 = (void (**)(char *))dispatch thunk of MutableCollection.subscript.modify();
  uint64_t v83 = v167;
  uint64_t v84 = v138;
  uint64_t v85 = v132;
  v132(v138, v61);
  long long v86 = v137;
  uint64_t v147 = v64;
  v85(v84, v61);
  uint64_t v87 = v166;
  ((void (*)(char *, char *))v152)(v83, v86);
  uint64_t v88 = v156;
  uint64_t v89 = v151;
  v151(v86, v156);
  v89(v83, v88);
  uint64_t v127 = v61;
  v149(v87, v84, v61);
  ((void (*)(char *, void))v146)(v172, 0);
  uint64_t result = v82(v160, v168);
  uint64_t v90 = v163;
  if (v140 >= 2 && (v140 & 0xFFFFFFFFFFFFFFFELL) != 2)
  {
    uint64_t v146 = (void (**)(char *))(v144 + 2);
    uint64_t v145 = (void (**)(char *, char *, uint64_t))(v169 + 16);
    ++v144;
    uint64_t v169 = 1;
    while (1)
    {
      uint64_t v91 = v154;
      uint64_t v92 = v171;
      uint64_t v93 = v165;
      uint64_t v94 = v155;
      v155(v154, v171, v165);
      uint64_t v95 = v136;
      v94(v136, v92, v93);
      dispatch thunk of Collection.startIndex.getter();
      uint64_t v96 = v134;
      v134(v95, v93);
      dispatch thunk of Collection.index(_:offsetBy:)();
      v162(v90, v168);
      v96(v91, v93);
      uint64_t v97 = v171;
      uint64_t v98 = v155;
      v155(v91, v171, v93);
      v98(v95, v97, v93);
      int64_t v99 = v170;
      dispatch thunk of Collection.startIndex.getter();
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v96)(v95, v93);
      if (__OFSUB__(v140, v169)) {
        break;
      }
      uint64_t v100 = v96;
      ++v169;
      uint64_t v101 = v154;
      uint64_t v102 = v165;
      dispatch thunk of Collection.index(_:offsetBy:)();
      uint64_t v103 = v168;
      v162(v99, v168);
      v100(v101, v102);
      uint64_t v104 = v160;
      char v105 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v106 = *v146;
      uint64_t v107 = v138;
      (*v146)(v161);
      v105(v172, 0);
      uint64_t v143 = *v145;
      v143(v170, v104, v103);
      unint64_t v108 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v109 = (uint64_t)v129;
      uint64_t v141 = v106;
      v106(v129);
      v108(v172, 0);
      uint64_t v110 = (uint64_t)v130;
      ((void (*)(char *, uint64_t, uint64_t))v106)(v130, v109, v107);
      uint64_t v111 = v127;
      FieldElement.init(other:)(v110, v107, v127);
      unint64_t v112 = v132;
      v132(v107, v111);
      char v113 = v137;
      v112(v107, v111);
      uint64_t v114 = v112;
      uint64_t v115 = v133;
      ((void (*)(char *, char *, uint64_t, uint64_t))v152)(v167, v113, v133, AssociatedConformanceWitness);
      uint64_t v116 = v156;
      uint64_t v117 = v151;
      v151(v113, v156);
      v117(v167, v116);
      v149(v166, v107, v111);
      uint64_t v142 = *v144;
      v142(v109, v107);
      dispatch thunk of MutableCollection.subscript.setter();
      v143(v170, v163, v168);
      ((void (*)(uint64_t, char *, uint64_t))v141)(v109, v161, v107);
      char v118 = v167;
      FieldElement.init(other:)(v109, v107, v111);
      v114(v107, v111);
      v114(v107, v111);
      ((void (*)(char *, char *, uint64_t, uint64_t))v152)(v118, v113, v115, AssociatedConformanceWitness);
      uint64_t v119 = v156;
      unint64_t v120 = v151;
      v151(v113, v156);
      unint64_t v121 = v118;
      uint64_t v122 = v166;
      v120(v121, v119);
      v149(v122, v107, v111);
      uint64_t v123 = v168;
      dispatch thunk of MutableCollection.subscript.setter();
      v142((uint64_t)v161, v107);
      uint64_t v124 = v162;
      uint64_t v90 = v163;
      v162(v163, v123);
      uint64_t result = v124(v160, v123);
      if (v126 == v169) {
        return result;
      }
    }
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t Prio3InputShare.measurementShare.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Prio3InputShare.proofShare.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Prio3InputShare.jointRandBlind.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t static Prio3InputShare.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  char v11 = *(unsigned char *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)a2;
  char v6 = *(unsigned char *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  char v9 = *(unsigned char *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  if ((static Share.== infix(_:_:)(v2, v3, v5, v6) & 1) != 0
    && (static Share.== infix(_:_:)(v12, v11, v10, v9) & 1) != 0)
  {
    if (v4)
    {
      if (v7 && specialized static Array<A>.== infix(_:_:)(v4, v7)) {
        return 1;
      }
    }
    else if (!v7)
    {
      return 1;
    }
  }
  return 0;
}

uint64_t Prio3InputShare.init(measurementShare:proofShare:jointRandBlind:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = result;
  *(unsigned char *)(a6 + 8) = a2 & 1;
  *(void *)(a6 + 16) = a3;
  *(unsigned char *)(a6 + 24) = a4 & 1;
  *(void *)(a6 + 32) = a5;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Prio3InputShare<A, B>(uint64_t a1, uint64_t a2)
{
  return static Prio3InputShare.== infix(_:_:)(a1, a2);
}

uint64_t Prio3InputShareDecodableParameter.measurement.getter()
{
  return *(void *)v0;
}

uint64_t Prio3InputShareDecodableParameter.proof.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t Prio3InputShareDecodableParameter.jointRandBlindLength.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t Prio3InputShareDecodableParameter.encodedLength.getter()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  char v4 = *(unsigned char *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v8 = ShareDecodableParameter.encodedLength.getter(v1, v2, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t result = ShareDecodableParameter.encodedLength.getter(v3, v4, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v10 = v8 + result;
  if (__OFADD__(v8, result))
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t result = v10 + v5;
  if (__OFADD__(v10, v5)) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t Prio3InputShareDecodableParameter.init(prio3:aggregatorID:)@<X0>(uint64_t a1@<X0>, Swift::Int a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14 = type metadata accessor for Prio3();
  swift_getWitnessTable();
  Swift::Bool v15 = VDAFProtocol.isLeaderAggregatorID(_:)(a2);
  if (v16) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a1, v14);
  }
  uint64_t v24 = a7;
  Swift::Bool v18 = v15;
  if (!v15) {
    goto LABEL_6;
  }
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 48))(a3, a5);
  char v26 = 0;
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 56))(a3, a5);
  uint64_t v20 = *(void *)(a1 + 8);
  uint64_t v21 = v19 * v20;
  if ((unsigned __int128)(v19 * (__int128)v20) >> 64 != (v19 * v20) >> 63)
  {
    __break(1u);
LABEL_6:
    uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t))(a6 + 8);
    uint64_t v25 = v22(a4, a6);
    char v26 = 1;
    uint64_t v21 = v22(a4, a6);
  }
  if (Prio3.isJointRandRequired.getter(v14)) {
    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 8))(a4, a6);
  }
  else {
    uint64_t v23 = 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a1, v14);
  *(void *)uint64_t v24 = v25;
  *(unsigned char *)(v24 + 8) = v26;
  *(void *)(v24 + 16) = v21;
  *(unsigned char *)(v24 + 24) = !v18;
  *(void *)(v24 + 32) = v23;
  return result;
}

uint64_t Prio3InputShare.init<A>(from:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedConformanceWitness = a6;
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v17 = (char *)&v114 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(unsigned __int8 *)(v10 + 8);
  if (v18 == 255)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    void *v19 = 0;
    v19[1] = 0;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, a5);
  }
  uint64_t v119 = v15;
  uint64_t v120 = v6;
  uint64_t v127 = v9;
  uint64_t v21 = *(void *)v10;
  uint64_t v22 = *(void *)(v10 + 32);
  uint64_t v23 = *(void *)(v10 + 16);
  uint64_t v24 = v13;
  uint64_t v25 = v11;
  uint64_t v26 = a5;
  unint64_t v27 = v18 & 1;
  uint64_t v125 = *(void *)(v10 + 24) & 1;
  unint64_t v28 = *(void *)(*(void *)(v14 + 8) + 8);
  uint64_t v129 = v26;
  uint64_t v123 = v12;
  unint64_t v124 = v28;
  uint64_t v29 = dispatch thunk of Collection.count.getter();
  uint64_t v126 = a1;
  uint64_t v30 = v29;
  uint64_t v128 = v21;
  uint64_t v133 = v24;
  uint64_t v134 = v21;
  unint64_t v31 = v27;
  uint64_t v32 = v25;
  uint64_t v33 = v24;
  LOBYTE(v135) = v31;
  uint64_t v121 = v22;
  uint64_t v122 = v23;
  uint64_t v136 = v23;
  uint64_t v34 = v125;
  LOBYTE(v137) = v125;
  uint64_t v138 = v22;
  unint64_t v35 = v123;
  uint64_t v130 = v32;
  uint64_t v131 = v123;
  uint64_t v132 = AssociatedConformanceWitness;
  uint64_t v36 = type metadata accessor for Prio3InputShareDecodableParameter();
  if (v30 != Prio3InputShareDecodableParameter.encodedLength.getter())
  {
    uint64_t v125 = v36;
    uint64_t v62 = v32;
    uint64_t v63 = v129;
    BOOL v64 = v31 != 0;
    uint64_t v134 = 0;
    unint64_t v135 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    uint64_t v134 = v62;
    unint64_t v135 = v35;
    uint64_t v136 = AssociatedConformanceWitness;
    uint64_t v137 = v33;
    type metadata accessor for Prio3InputShare();
    uint64_t v65 = _typeName(_:qualified:)();
    uint64_t v67 = v66;
    swift_bridgeObjectRelease();
    uint64_t v130 = v65;
    uint64_t v131 = v67;
    v68._countAndFlagsBits = 0x6572697571657220;
    v68._object = (void *)0xEB00000000203A64;
    String.append(_:)(v68);
    uint64_t v134 = v128;
    LOBYTE(v135) = v64;
    uint64_t v136 = v122;
    LOBYTE(v137) = v34 != 0;
    uint64_t v138 = v121;
    uint64_t v134 = Prio3InputShareDecodableParameter.encodedLength.getter();
    v69._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v69);
    swift_bridgeObjectRelease();
    v70._countAndFlagsBits = 0x203A746F67202CLL;
    v70._object = (void *)0xE700000000000000;
    String.append(_:)(v70);
    uint64_t v71 = v126;
    uint64_t v134 = dispatch thunk of Collection.count.getter();
    v72._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v72);
    swift_bridgeObjectRelease();
    uint64_t v73 = v130;
    uint64_t v74 = v131;
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *uint64_t v75 = v73;
    v75[1] = v74;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v127 + 8))(v71, v63);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v127 + 16))(v17, v126, v129);
  uint64_t v37 = ArraySlice.init<A>(_:)();
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v43 = v42;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v45 = ShareDecodableParameter.encodedLength.getter(v128, v31, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v46 = specialized Collection.prefix(_:)(v45, v37, v39, v41, v43);
  uint64_t v123 = v47;
  unint64_t v124 = v31;
  unint64_t v49 = v48;
  uint64_t v51 = v50;
  uint64_t v52 = specialized Collection.dropFirst(_:)(v45, v37, v39, v41, v43);
  uint64_t v118 = v53;
  uint64_t v117 = v54;
  uint64_t v116 = v55;
  uint64_t v134 = v46;
  unint64_t v135 = v49;
  uint64_t v136 = v51;
  uint64_t v137 = v123;
  swift_unknownObjectRetain();
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<UInt8>);
  unint64_t v57 = lazy protocol witness table accessor for type ArraySlice<UInt8> and conformance ArraySlice<A>();
  uint64_t v58 = AssociatedConformanceWitness;
  uint64_t v59 = v120;
  uint64_t v60 = Share.init<A>(from:parameter:)((uint64_t)&v134, v128, v124, AssociatedTypeWitness, v56, AssociatedConformanceWitness, v57);
  if (v59)
  {
    (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v126, v129);
    return swift_unknownObjectRelease();
  }
  uint64_t v76 = v60;
  HIDWORD(v114) = v61;
  swift_bridgeObjectRetain();
  uint64_t v115 = AssociatedTypeWitness;
  uint64_t v77 = ShareDecodableParameter.encodedLength.getter(v122, v125, AssociatedTypeWitness, v58);
  uint64_t v120 = v76;
  uint64_t v78 = v77;
  uint64_t v79 = v118;
  uint64_t v80 = v117;
  uint64_t v81 = v116;
  uint64_t v128 = specialized Collection.prefix(_:)(v77, v52, v118, v117, v116);
  uint64_t v123 = v83;
  unint64_t v124 = v82;
  uint64_t v85 = v84;
  uint64_t v86 = specialized Collection.dropFirst(_:)(v78, v52, v79, v80, v81);
  uint64_t v88 = v87;
  uint64_t v90 = v89;
  uint64_t v92 = v91;
  uint64_t v134 = v128;
  unint64_t v135 = v124;
  uint64_t v136 = v123;
  uint64_t v137 = v85;
  swift_unknownObjectRetain();
  uint64_t v93 = Share.init<A>(from:parameter:)((uint64_t)&v134, v122, v125, v115, v56, AssociatedConformanceWitness, v57);
  LODWORD(AssociatedConformanceWitness) = v94;
  uint64_t v95 = v92;
  uint64_t v96 = v86;
  uint64_t v97 = v121;
  uint64_t v98 = v129;
  if (v121 >= 1)
  {
    uint64_t v99 = specialized Collection.prefix(_:)(v121, v86, v88, v90, v95);
    uint64_t v100 = v88;
    uint64_t v101 = v99;
    uint64_t v103 = v102;
    uint64_t v128 = v104;
    uint64_t v105 = v90;
    unint64_t v107 = v106;
    specialized Collection.dropFirst(_:)(v97, v96, v100, v105, v95);
    if (v107)
    {
      uint64_t v125 = v103;
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      uint64_t v111 = swift_dynamicCastClass();
      if (!v111)
      {
        swift_unknownObjectRelease();
        uint64_t v111 = MEMORY[0x263F8EE78];
      }
      uint64_t v112 = *(void *)(v111 + 16);
      swift_release();
      if (__OFSUB__(v107 >> 1, v128))
      {
        __break(1u);
      }
      else if (v112 == (v107 >> 1) - v128)
      {
        uint64_t v109 = swift_dynamicCastClass();
        uint64_t v98 = v129;
        if (!v109)
        {
          swift_unknownObjectRelease();
          uint64_t v109 = MEMORY[0x263F8EE78];
        }
        goto LABEL_18;
      }
      swift_unknownObjectRelease();
      uint64_t v98 = v129;
      uint64_t v103 = v125;
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
    }
    specialized _copyCollectionToContiguousArray<A>(_:)(v101, v103, v128, v107);
    uint64_t v109 = v108;
LABEL_18:
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v126, v98);
    swift_unknownObjectRelease();
    goto LABEL_19;
  }
  uint64_t v110 = *(void (**)(uint64_t, uint64_t))(v127 + 8);
  swift_bridgeObjectRetain();
  v110(v126, v98);
  swift_unknownObjectRelease();
  uint64_t v109 = 0;
LABEL_19:
  swift_bridgeObjectRetain();
  char v113 = v119;
  *uint64_t v119 = v120;
  *((unsigned char *)v113 + 8) = BYTE4(v114) & 1;
  v113[2] = v93;
  *((unsigned char *)v113 + 24) = AssociatedConformanceWitness & 1;
  v113[4] = v109;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for Prio3InputShareDecodableParameter()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for Prio3InputShare()
{
  return swift_getGenericMetadata();
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance Prio3InputShare<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = *(void *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  uint64_t v9 = v5;
  return Prio3InputShare.init<A>(from:parameter:)(a1, (uint64_t)v8, a5[2], a5[3], a3, a5[4]);
}

uint64_t Prio3InputShare.encodedLength.getter()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  char v4 = *(unsigned char *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v8 = Share.encodedLength.getter(v1, v2, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t result = Share.encodedLength.getter(v3, v4, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v10 = v8 + result;
  if (__OFADD__(v8, result)) {
    goto LABEL_7;
  }
  if (!v5)
  {
    result += v8;
    return result;
  }
  uint64_t v11 = *(void *)(v5 + 16);
  uint64_t result = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_7:
    __break(1u);
  }
  return result;
}

uint64_t Prio3InputShare.encode<A>(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)v4;
  char v9 = *(unsigned char *)(v4 + 8);
  uint64_t v15 = *(void *)(v4 + 16);
  char v14 = *(unsigned char *)(v4 + 24);
  uint64_t v10 = *(void *)(v4 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  Share.encode<A>(into:)(a1, v8, v9, AssociatedTypeWitness, a3, AssociatedConformanceWitness, a4);
  uint64_t result = Share.encode<A>(into:)(a1, v15, v14, AssociatedTypeWitness, a3, AssociatedConformanceWitness, a4);
  if (v10)
  {
    return Seed.encode<A>(into:)();
  }
  return result;
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance Prio3InputShare<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Prio3InputShare.encode<A>(into:)(a1, a4, a2, a3);
}

uint64_t destroy for Prio3InputShare()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Prio3InputShare(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  char v4 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Prio3InputShare(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  char v5 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Prio3InputShare(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  char v5 = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Prio3InputShare(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Prio3InputShare(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

uint64_t PINEMainCircuit.encodedMeasurementLength.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 64) + 16);
}

uint64_t PINEMainCircuit.init(l2NormBoundInt:fractionalBitCount:measurementLength:chunkLength:alpha:wraparoundCheckCount:wraparoundCheckSuccessCount:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, unint64_t a11, long long a12, uint64_t a13)
{
  uint64_t v53 = a7;
  uint64_t v55 = a6;
  uint64_t v56 = a1;
  int v50 = a5;
  uint64_t v48 = a9;
  uint64_t v49 = a4;
  unint64_t v51 = a2;
  uint64_t v52 = a3;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness, v17);
  uint64_t v19 = (char *)&v46 - v18;
  *(void *)&long long v58 = a8;
  *((void *)&v58 + 1) = a11;
  long long v59 = a12;
  *(void *)&long long v60 = a13;
  uint64_t v20 = type metadata accessor for PINECircuitParameter();
  uint64_t v46 = *(void *)(v20 - 8);
  uint64_t v47 = v20;
  MEMORY[0x270FA5388](v20, v21);
  uint64_t v23 = (char *)&v46 - v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v56, AssociatedTypeWitness);
  uint64_t v24 = v54;
  PINECircuitParameter.init(l2NormBoundInt:fractionalBitCount:measurementLength:alpha:wraparoundCheckCount:wraparoundCheckSuccessCount:)(v19, v51, v52, v55, v53, a8, a11, a12, (uint64_t)v23, a10, *((char **)&a12 + 1), a13);
  uint64_t v54 = v24;
  if (v24) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v56, AssociatedTypeWitness);
  }
  uint64_t v52 = a8;
  uint64_t v53 = v16;
  *(void *)&long long v58 = a8;
  *((void *)&v58 + 1) = a11;
  long long v59 = a12;
  *(void *)&long long v60 = a13;
  uint64_t v26 = type metadata accessor for PINEMainCircuit();
  uint64_t v27 = v48;
  uint64_t v28 = v48 + *(int *)(v26 + 64);
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v46 + 32))(v28, v23, v47);
  uint64_t v29 = v55;
  uint64_t v30 = v56;
  uint64_t v31 = v49;
  if ((v50 & 1) == 0)
  {
LABEL_8:
    *(void *)uint64_t v27 = v31;
    if (v31 < 1)
    {
      __break(1u);
    }
    else
    {
      uint64_t v33 = *(void *)(v28 + 8);
      BOOL v34 = __OFADD__(v33, v31);
      uint64_t v35 = v33 + v31;
      if (!v34)
      {
        BOOL v34 = __OFSUB__(v35, 1);
        uint64_t v36 = v35 - 1;
        if (!v34)
        {
          uint64_t v37 = v29 + v31;
          if (!__OFADD__(v29, v31))
          {
            BOOL v34 = __OFSUB__(v37, 1);
            uint64_t v38 = v37 - 1;
            if (!v34)
            {
              uint64_t v39 = v36 / v31;
              uint64_t v40 = v38 / v31;
              uint64_t result = v39 + v40;
              if (!__OFADD__(v39, v40))
              {
                v57[0] = MultiplicationGadget.init(numOfCalls:)();
                v57[1] = v41;
                v57[2] = v42;
                uint64_t v43 = type metadata accessor for MultiplicationGadget();
                uint64_t WitnessTable = swift_getWitnessTable();
                ParallelSum.init(inner:count:)((uint64_t)v57, v31, v43, WitnessTable, (char *)&v58);
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 8))(v30, AssociatedTypeWitness);
                long long v45 = v59;
                *(_OWORD *)(v27 + 8) = v58;
                *(_OWORD *)(v27 + 24) = v45;
                *(_OWORD *)(v27 + 40) = v60;
                return result;
              }
              goto LABEL_20;
            }
LABEL_19:
            __break(1u);
LABEL_20:
            __break(1u);
            goto LABEL_21;
          }
LABEL_18:
          __break(1u);
          goto LABEL_19;
        }
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
    }
    __break(1u);
    goto LABEL_17;
  }
  double v32 = sqrt((double)*(uint64_t *)(v28 + 8));
  if ((~*(void *)&v32 & 0x7FF0000000000000) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v32 <= -9.22337204e18)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v32 < 9.22337204e18)
  {
    uint64_t v31 = (uint64_t)v32;
    goto LABEL_8;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for PINECircuitParameter()
{
  return swift_getGenericMetadata();
}

uint64_t PINENormEqualityCheckCircuit.init(l2NormBoundInt:fractionalBitCount:measurementLength:chunkLength:alpha:wraparoundCheckCount:wraparoundCheckSuccessCount:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, unint64_t a11, long long a12, uint64_t a13)
{
  uint64_t v54 = a7;
  uint64_t v53 = a6;
  int v48 = a5;
  uint64_t v47 = a4;
  uint64_t v56 = a1;
  uint64_t v57 = a3;
  uint64_t v49 = a9;
  uint64_t v51 = *((void *)&a12 + 1);
  unint64_t v52 = a2;
  unint64_t v50 = a11;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness, v17);
  uint64_t v19 = (char *)&v44 - v18;
  *(void *)&long long v60 = a8;
  *((void *)&v60 + 1) = a11;
  long long v61 = a12;
  uint64_t v62 = a13;
  uint64_t v45 = type metadata accessor for PINECircuitParameter();
  uint64_t v44 = *(void *)(v45 - 8);
  MEMORY[0x270FA5388](v45, v20);
  uint64_t v22 = (char *)&v44 - v21;
  uint64_t v23 = v56;
  (*(void (**)(char *))(v16 + 16))(v19);
  uint64_t v46 = a13;
  uint64_t v24 = v19;
  uint64_t v25 = v55;
  unint64_t v26 = v50;
  PINECircuitParameter.init(l2NormBoundInt:fractionalBitCount:measurementLength:alpha:wraparoundCheckCount:wraparoundCheckSuccessCount:)(v24, v52, v57, v53, v54, a8, v50, a12, (uint64_t)v22, a10, *((char **)&a12 + 1), a13);
  uint64_t v55 = v25;
  if (v25) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v23, AssociatedTypeWitness);
  }
  uint64_t v53 = v16;
  uint64_t v54 = AssociatedTypeWitness;
  *(void *)&long long v60 = a8;
  *((void *)&v60 + 1) = v26;
  long long v61 = a12;
  uint64_t v62 = v46;
  uint64_t v28 = type metadata accessor for PINENormEqualityCheckCircuit();
  uint64_t v29 = (uint64_t *)v49;
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v44 + 32))(v49 + *(int *)(v28 + 64), v22, v45);
  uint64_t v30 = v47;
  uint64_t v31 = v57;
  if ((v48 & 1) == 0)
  {
LABEL_8:
    *uint64_t v29 = v30;
    if (v30 < 1)
    {
      __break(1u);
    }
    else
    {
      uint64_t v33 = v31 + v30;
      if (!__OFADD__(v31, v30))
      {
        BOOL v34 = __OFSUB__(v33, 1);
        uint64_t v35 = v33 - 1;
        if (!v34)
        {
          uint64_t v36 = v35 / v30;
          getContiguousArrayStorageType<A>(for:)(a8, a8);
          swift_allocObject();
          uint64_t v37 = static Array._adoptStorage(_:count:)();
          dispatch thunk of static AdditiveArithmetic.zero.getter();
          dispatch thunk of static AdditiveArithmetic.zero.getter();
          (*(void (**)(uint64_t, void))(a12 + 72))(a8, a12);
          _finalizeUninitializedArray<A>(_:)();
          Polynomial.init(coefficients:)(v37, &v58);
          PolynomialEvaluationGadget.init(polynomial:numOfCalls:)((uint64_t *)&v58, v36, &v60);
          long long v58 = v60;
          uint64_t v59 = v61;
          uint64_t v38 = type metadata accessor for PolynomialEvaluationGadget();
          uint64_t WitnessTable = swift_getWitnessTable();
          ParallelSum.init(inner:count:)((uint64_t)&v58, v30, v38, WitnessTable, (char *)&v60);
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 8))(v56, v54);
          uint64_t v40 = v62;
          uint64_t v41 = v63;
          long long v42 = v61;
          uint64_t v43 = v49;
          *(_OWORD *)(v49 + 8) = v60;
          *(_OWORD *)(v43 + 24) = v42;
          *(void *)(v43 + 40) = v40;
          *(void *)(v43 + 48) = v41;
          return result;
        }
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  double v32 = sqrt((double)v57);
  if ((~*(void *)&v32 & 0x7FF0000000000000) == 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v32 <= -9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v32 < 9.22337204e18)
  {
    uint64_t v30 = (uint64_t)v32;
    goto LABEL_8;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t static PINECircuitParameter.l2NormBoundIntFrom(l2NormBound:fractionalBitCount:)@<X0>(uint64_t a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  int64_t v22 = a2;
  uint64_t v23 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness, v12);
  char v14 = (char *)&v22 - v13;
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  char v15 = dispatch thunk of static Comparable.> infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
  if (v15) {
    return static FieldElement.integerFrom<A>(floatValue:fractionalBitCount:)(a1, v22, a3, AssociatedTypeWitness, v23, a5, a6);
  }
  uint64_t v24 = 0;
  unint64_t v25 = 0xE000000000000000;
  _StringGuts.grow(_:)(31);
  v17._countAndFlagsBits = 0x6F426D726F4E326CLL;
  v17._object = (void *)0xEC0000003D646E75;
  String.append(_:)(v17);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v18._object = (void *)0x8000000260BFFB40;
  v18._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v18);
  uint64_t v19 = v24;
  unint64_t v20 = v25;
  lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
  swift_allocError();
  *(void *)uint64_t v21 = v19;
  *(void *)(v21 + 8) = v20;
  *(unsigned char *)(v21 + 16) = 1;
  return swift_willThrow();
}

ValueMetadata *static PINECircuit.identifier.getter@<X0>(char *a1@<X8>)
{
  uint64_t result = (ValueMetadata *)swift_getAssociatedTypeWitness();
  if (result == &type metadata for Field32)
  {
    char v4 = 11;
  }
  else
  {
    if (result == &type metadata for Field64) {
      char v3 = 10;
    }
    else {
      char v3 = 13;
    }
    if (result == &type metadata for Field40) {
      char v4 = 12;
    }
    else {
      char v4 = v3;
    }
  }
  *a1 = v4;
  return result;
}

uint64_t PINEMainCircuit.jointRandLength.getter()
{
  return 3;
}

uint64_t PINECircuit.truncate(measurement:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v38 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v40 = a2;
  uint64_t v8 = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v39 = AssociatedTypeWitness;
  *(void *)&long long v43 = AssociatedTypeWitness;
  *((void *)&v43 + 1) = v6;
  *(void *)&long long v44 = AssociatedConformanceWitness;
  *((void *)&v44 + 1) = v8;
  uint64_t v45 = swift_getAssociatedConformanceWitness();
  uint64_t v9 = type metadata accessor for PINECircuitParameter();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v9, v11);
  char v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12, v15);
  Swift::String v17 = (char *)&v34 - v16;
  uint64_t v18 = a3;
  uint64_t v36 = *(void (**)(uint64_t, uint64_t))(a3 + 56);
  uint64_t v19 = v40;
  v36(v40, a3);
  uint64_t v37 = *((void *)v17 + 5);
  unint64_t v20 = *(void (**)(char *, uint64_t))(v10 + 8);
  v20(v17, v9);
  uint64_t v21 = v19;
  uint64_t v35 = v18;
  int64_t v22 = v36;
  v36(v21, v18);
  uint64_t v23 = *((void *)v14 + 1);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v20)(v14, v9);
  uint64_t v25 = v37 + v23;
  if (__OFADD__(v37, v23))
  {
    __break(1u);
  }
  else
  {
    uint64_t v26 = MEMORY[0x2612241C0](v38, v39);
    if (v26 == v25)
    {
      v22(v40, v35);
      uint64_t v27 = *((void *)v17 + 5);
      v20(v17, v9);
      *(void *)&long long v41 = v38;
      uint64_t v46 = v27;
      type metadata accessor for Array();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialRangeUpTo<Int>);
      swift_getWitnessTable();
      lazy protocol witness table accessor for type PartialRangeUpTo<Int> and conformance PartialRangeUpTo<A>();
      MutableCollection.subscript.getter();
      long long v41 = v43;
      long long v42 = v44;
      type metadata accessor for ArraySlice();
      swift_getWitnessTable();
      return Array.init<A>(_:)();
    }
    else
    {
      uint64_t v28 = v26;
      *(void *)&long long v43 = 0;
      *((void *)&v43 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(35);
      swift_bridgeObjectRelease();
      *(void *)&long long v43 = 0xD00000000000001BLL;
      *((void *)&v43 + 1) = 0x8000000260BFEB20;
      *(void *)&long long v41 = v28;
      v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      v30._countAndFlagsBits = 540877088;
      v30._object = (void *)0xE400000000000000;
      String.append(_:)(v30);
      *(void *)&long long v41 = v25;
      v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v31);
      swift_bridgeObjectRelease();
      long long v32 = v43;
      lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
      swift_allocError();
      *(_OWORD *)uint64_t v33 = v32;
      *(unsigned char *)(v33 + 16) = 2;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t PINECircuit.outputLength.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  v15[1] = AssociatedTypeWitness;
  v15[2] = v5;
  v15[3] = AssociatedConformanceWitness;
  v15[4] = v7;
  v15[5] = swift_getAssociatedConformanceWitness();
  uint64_t v8 = type metadata accessor for PINECircuitParameter();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8, v10);
  uint64_t v12 = (char *)v15 - v11;
  (*(void (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2);
  uint64_t v13 = *((void *)v12 + 5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return v13;
}

uint64_t PINECircuit.wraparoundDotProducts<A>(_:random:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  uint64_t v30 = a2;
  uint64_t v11 = *a5;
  uint64_t v12 = *(void *)(*a5 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(v11 + 104);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v33 = v12;
  uint64_t v34 = AssociatedTypeWitness;
  uint64_t v35 = v14;
  uint64_t v36 = AssociatedConformanceWitness;
  uint64_t v37 = swift_getAssociatedConformanceWitness();
  uint64_t v16 = type metadata accessor for PINECircuitParameter();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16, v18);
  unint64_t v20 = (char *)&v29 - v19;
  (*(void (**)(uint64_t, uint64_t))(a7 + 56))(a6, a7);
  uint64_t v21 = *(void *)&v20[*(int *)(v16 + 92)];
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  if (v21 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v33 = 0;
    uint64_t v34 = v21;
    MEMORY[0x270FA5388](result, v23);
    *(&v29 - 8) = a6;
    *(&v29 - 7) = a7;
    uint64_t v24 = v30;
    *(&v29 - 6) = a1;
    *(&v29 - 5) = v24;
    uint64_t v25 = v32;
    *(&v29 - 4) = v31;
    *(&v29 - 3) = v25;
    *(&v29 - 2) = (uint64_t)a5;
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
    unint64_t v27 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in PINECircuit.wraparoundDotProducts<A>(_:random:), (uint64_t)(&v29 - 10), v26, v12, MEMORY[0x263F8E628], v27, MEMORY[0x263F8E658], v28);
  }
  return result;
}

uint64_t PINECircuit.decode<A>(data:numOfMeasurements:into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return specialized PINECircuit.decode<A>(data:numOfMeasurements:into:)(a1, a3, a4, a5, a6, a7);
}

uint64_t PINECircuit.encodeMeasurementAndNormRangeCheck(raw:into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v212 = a2;
  uint64_t v188 = a1;
  uint64_t v6 = *(void *)(a4 + 8);
  swift_getAssociatedTypeWitness();
  uint64_t v217 = v6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v205 = swift_getAssociatedConformanceWitness();
  uint64_t v197 = AssociatedTypeWitness;
  uint64_t v199 = swift_getAssociatedTypeWitness();
  uint64_t v176 = *(void *)(v199 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v199, v9);
  uint64_t v174 = (char *)&v168 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v10, v12);
  uint64_t v173 = (char *)&v168 - v14;
  uint64_t v16 = MEMORY[0x270FA5388](v13, v15);
  uint64_t v191 = (char *)&v168 - v17;
  uint64_t v19 = MEMORY[0x270FA5388](v16, v18);
  uint64_t v198 = (char *)&v168 - v20;
  MEMORY[0x270FA5388](v19, v21);
  uint64_t v206 = (char *)&v168 - v22;
  swift_getAssociatedTypeWitness();
  uint64_t v204 = swift_getAssociatedConformanceWitness();
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v204 + 8);
  uint64_t v24 = swift_getAssociatedTypeWitness();
  uint64_t v207 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24, v25);
  uint64_t v194 = (char *)&v168 - v26;
  uint64_t v27 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v27 - 8, v28);
  uint64_t v200 = (char *)&v168 - v29;
  uint64_t v215 = a4;
  uint64_t v30 = swift_checkMetadataState();
  uint64_t v185 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30, v31);
  Swift::Int v184 = (char *)&v168 - v32;
  uint64_t v186 = v23;
  unint64_t v34 = v33;
  uint64_t v35 = a3;
  uint64_t v36 = AssociatedConformanceWitness;
  uint64_t v211 = swift_getAssociatedTypeWitness();
  uint64_t v175 = *(void *)(v211 - 8);
  MEMORY[0x270FA5388](v211, v37);
  v210 = (char *)&v168 - v38;
  uint64_t v39 = swift_checkMetadataState();
  uint64_t v178 = *(void *)(v39 - 8);
  uint64_t v41 = MEMORY[0x270FA5388](v39, v40);
  uint64_t v171 = (char *)&v168 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = MEMORY[0x270FA5388](v41, v43);
  uint64_t v196 = (uint64_t)&v168 - v45;
  uint64_t v47 = MEMORY[0x270FA5388](v44, v46);
  uint64_t v208 = (uint64_t)&v168 - v48;
  uint64_t v50 = MEMORY[0x270FA5388](v47, v49);
  v218 = (uint64_t *)((char *)&v168 - v51);
  MEMORY[0x270FA5388](v50, v52);
  uint64_t v209 = (char *)&v168 - v53;
  uint64_t v201 = v24;
  uint64_t v54 = swift_getAssociatedConformanceWitness();
  unint64_t v219 = v39;
  unint64_t v220 = v34;
  uint64_t v177 = v36;
  uint64_t v221 = v36;
  uint64_t v222 = v204;
  uint64_t v193 = v54;
  uint64_t v223 = v54;
  uint64_t v55 = type metadata accessor for PINECircuitParameter();
  uint64_t v56 = *(void *)(v55 - 8);
  uint64_t v58 = MEMORY[0x270FA5388](v55, v57);
  uint64_t v169 = (char *)&v168 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = MEMORY[0x270FA5388](v58, v60);
  uint64_t v170 = (char *)&v168 - v62;
  uint64_t v64 = MEMORY[0x270FA5388](v61, v63);
  long long v192 = (char *)&v168 - v65;
  MEMORY[0x270FA5388](v64, v66);
  Swift::String v68 = (char *)&v168 - v67;
  Swift::Int v69 = (*(uint64_t (**)(uint64_t))(v217 + 48))(v35);
  uint64_t v217 = v39;
  uint64_t v190 = type metadata accessor for Array();
  Array.reserveCapacity(_:)(v69);
  unint64_t v187 = v34;
  uint64_t v70 = v55;
  uint64_t v71 = dispatch thunk of Collection.count.getter();
  uint64_t v72 = v215 + 56;
  uint64_t v73 = *(void (**)(uint64_t))(v215 + 56);
  v73(v35);
  uint64_t v74 = *((void *)v68 + 5);
  uint64_t v75 = *(void (**)(char *, uint64_t))(v56 + 8);
  uint64_t v213 = v56 + 8;
  uint64_t v214 = v70;
  v75(v68, v70);
  if (v71 == v74)
  {
    unint64_t v202 = v73;
    uint64_t v172 = v68;
    uint64_t v203 = v72;
    uint64_t v204 = (uint64_t)v75;
    uint64_t v76 = v177;
    uint64_t v77 = v209;
    uint64_t v189 = *(void *)(v177 + 8);
    dispatch thunk of static AdditiveArithmetic.zero.getter();
    (*(void (**)(char *, uint64_t, unint64_t))(v185 + 16))(v184, v188, v187);
    dispatch thunk of Sequence.makeIterator()();
    uint64_t v78 = swift_getAssociatedConformanceWitness();
    uint64_t v79 = v200;
    uint64_t v188 = v78;
    dispatch thunk of IteratorProtocol.next()();
    uint64_t v80 = v207;
    uint64_t v81 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v207 + 48);
    uint64_t v82 = v201;
    unint64_t v187 = v207 + 48;
    uint64_t v186 = v81;
    int v83 = v81(v79, 1, v201);
    uint64_t v195 = v35;
    if (v83 == 1)
    {
      uint64_t v84 = v77;
      uint64_t v85 = (void (*)(uint64_t, uint64_t))v202;
LABEL_8:
      (*(void (**)(char *, uint64_t))(v175 + 8))(v210, v211);
      uint64_t v116 = v214;
      uint64_t v117 = v217;
      FieldElement.integerValue.getter(v217, v76);
      uint64_t v118 = v172;
      v85(v35, v215);
      uint64_t v119 = &v118[*(int *)(v116 + 84)];
      uint64_t v120 = v76;
      uint64_t v121 = v178;
      uint64_t v122 = v208;
      v210 = *(char **)(v178 + 16);
      uint64_t v211 = v178 + 16;
      ((void (*)(uint64_t, char *, uint64_t))v210)(v208, v119, v117);
      ((void (*)(char *, uint64_t))v204)(v118, v116);
      uint64_t v123 = v198;
      FieldElement.integerValue.getter(v117, v120);
      unint64_t v124 = *(uint64_t **)(v121 + 8);
      uint64_t v178 = v121 + 8;
      v218 = v124;
      ((void (*)(uint64_t, uint64_t))v124)(v122, v117);
      uint64_t v125 = v199;
      uint64_t v126 = v84;
      uint64_t v127 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 8);
      uint64_t v128 = (uint64_t)v206;
      LOBYTE(v122) = dispatch thunk of static Comparable.<= infix(_:_:)();
      uint64_t v129 = v176 + 8;
      uint64_t v130 = *(void (**)(char *, uint64_t))(v176 + 8);
      v130(v123, v125);
      v130((char *)v128, v125);
      if (v122)
      {
        uint64_t v205 = (uint64_t)v130;
        uint64_t v207 = v129;
        uint64_t v131 = v217;
        uint64_t v132 = v210;
        ((void (*)(uint64_t, char *, uint64_t))v210)(v208, v126, v217);
        dispatch thunk of static AdditiveArithmetic.zero.getter();
        uint64_t v133 = v172;
        ((void (*)(uint64_t, uint64_t))v202)(v195, v215);
        uint64_t v134 = v214;
        uint64_t v135 = (uint64_t)v171;
        ((void (*)(char *, char *, uint64_t))v132)(v171, &v133[*(int *)(v214 + 84)], v131);
        ((void (*)(char *, uint64_t))v204)(v133, v134);
        uint64_t v136 = v123;
        uint64_t v137 = (uint64_t)v123;
        uint64_t v138 = v208;
        uint64_t v139 = v196;
        uint64_t v140 = v215;
        static PINECircuit.computeRangeCheck(_:lowerBound:upperBound:)(v128, v137, v208, v196, v135);
        uint64_t v141 = (void (*)(uint64_t, uint64_t))v218;
        ((void (*)(uint64_t, uint64_t))v218)(v135, v131);
        v141(v139, v131);
        v141(v138, v131);
        uint64_t v142 = *(void (**)(char *, uint64_t, uint64_t))(v176 + 32);
        uint64_t v143 = v128;
        uint64_t v144 = (uint64_t)v173;
        v142(v173, v143, v125);
        v142(v174, (uint64_t)v136, v125);
        uint64_t v145 = v170;
        ((void (*)(uint64_t, uint64_t))v202)(v195, v140);
        uint64_t v146 = *((void *)v145 + 6);
        ((void (*)(char *, uint64_t))v204)(v145, v214);
        uint64_t v147 = v212;
        uint64_t v148 = v146;
        uint64_t v149 = v177;
        uint64_t v150 = v216;
        static FieldElement.encode(_:into:with:)(v144, v212, v148, v131, v177);
        if (v150)
        {
          uint64_t v151 = (void (*)(uint64_t, uint64_t))v205;
          ((void (*)(char *, uint64_t))v205)(v174, v125);
          v151(v144, v125);
          return ((uint64_t (*)(char *, uint64_t))v141)(v209, v217);
        }
        else
        {
          uint64_t v163 = v209;
          uint64_t v164 = v169;
          ((void (*)(uint64_t, uint64_t))v202)(v195, v215);
          uint64_t v165 = *((void *)v164 + 6);
          ((void (*)(char *, uint64_t))v204)(v164, v214);
          uint64_t v166 = (uint64_t)v174;
          static FieldElement.encode(_:into:with:)((uint64_t)v174, v147, v165, v217, v149);
          uint64_t v167 = (void (*)(char *, uint64_t))v205;
          ((void (*)(uint64_t, uint64_t))v205)(v166, v125);
          v167(v173, v125);
          return ((uint64_t (*)(char *, uint64_t))v218)(v163, v217);
        }
      }
      else
      {
        unint64_t v219 = 0;
        unint64_t v220 = 0xE000000000000000;
        _StringGuts.grow(_:)(32);
        v152._countAndFlagsBits = 0x2064657261757173;
        v152._object = (void *)0xED00003D6D726F6ELL;
        String.append(_:)(v152);
        uint64_t v153 = v127;
        uint64_t v154 = v217;
        FieldElement.integerValue.getter(v217, v177);
        uint64_t v216 = *(void *)(v153 + 8);
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v130((char *)v128, v125);
        v155._countAndFlagsBits = 0x6B63656863203E20;
        v155._object = (void *)0xEF3D646E756F6220;
        String.append(_:)(v155);
        uint64_t v156 = v172;
        ((void (*)(uint64_t, uint64_t))v202)(v195, v215);
        uint64_t v157 = v214;
        uint64_t v158 = v208;
        ((void (*)(uint64_t, char *, uint64_t))v210)(v208, &v156[*(int *)(v214 + 84)], v154);
        ((void (*)(char *, uint64_t))v204)(v156, v157);
        FieldElement.integerValue.getter(v154, v177);
        uint64_t v159 = (uint64_t (*)(char *, uint64_t))v218;
        ((void (*)(uint64_t, uint64_t))v218)(v158, v154);
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v130((char *)v128, v125);
        unint64_t v160 = v219;
        unint64_t v161 = v220;
        lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
        swift_allocError();
        *(void *)uint64_t v162 = v160;
        *(void *)(v162 + 8) = v161;
        *(unsigned char *)(v162 + 16) = 1;
        swift_willThrow();
        return v159(v209, v154);
      }
    }
    else
    {
      int v94 = v79;
      uint64_t v185 = *(void *)(v80 + 32);
      uint64_t v183 = (void (**)(uint64_t, uint64_t *, uint64_t))(v178 + 16);
      uint64_t v182 = v76 + 88;
      uint64_t v181 = v205 + 56;
      uint64_t v180 = (void (**)(char *, uint64_t))(v176 + 8);
      uint64_t v179 = v76 + 96;
      Swift::Int v184 = (char *)(v178 + 8);
      uint64_t v85 = (void (*)(uint64_t, uint64_t))v202;
      uint64_t v207 = v80 + 32;
      while (1)
      {
        uint64_t v95 = (uint64_t)v194;
        ((void (*)(char *, char *, uint64_t))v185)(v194, v94, v82);
        uint64_t v96 = v76;
        uint64_t v97 = v192;
        v85(v35, v215);
        int64_t v98 = *((void *)v97 + 4);
        uint64_t v99 = v97;
        uint64_t v76 = v96;
        ((void (*)(char *, uint64_t))v204)(v99, v214);
        uint64_t v100 = v216;
        FieldElement.init<A>(floatValue:fractionalBitCount:)(v95, v98, v217, v82, v96, v193, (uint64_t)v218);
        if (v100) {
          break;
        }
        uint64_t v216 = 0;
        uint64_t v101 = *v183;
        uint64_t v102 = v208;
        uint64_t v104 = v217;
        uint64_t v103 = v218;
        (*v183)(v208, v218, v217);
        Array.append(_:)();
        uint64_t v105 = v196;
        v101(v196, v103, v104);
        FieldElement.init(other:)(v105, v104, v76);
        uint64_t v106 = swift_checkMetadataState();
        unint64_t v107 = *(void (**)(uint64_t, uint64_t))(v76 + 88);
        uint64_t v108 = v198;
        v107(v104, v76);
        uint64_t v109 = v191;
        v107(v104, v76);
        uint64_t v110 = v206;
        (*(void (**)(char *, char *, uint64_t))(v205 + 56))(v108, v109, v106);
        uint64_t v111 = *v180;
        uint64_t v112 = v199;
        (*v180)(v109, v199);
        v111(v108, v112);
        (*(void (**)(char *, uint64_t, uint64_t))(v76 + 96))(v110, v104, v76);
        uint64_t v84 = v209;
        dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
        char v113 = *(void (**)(uint64_t *, uint64_t))v184;
        uint64_t v85 = (void (*)(uint64_t, uint64_t))v202;
        (*(void (**)(uint64_t, uint64_t))v184)(v102, v104);
        v113(v218, v104);
        uint64_t v35 = v195;
        uint64_t v114 = v200;
        dispatch thunk of IteratorProtocol.next()();
        uint64_t v82 = v201;
        int v115 = v186(v114, 1, v201);
        int v94 = v114;
        if (v115 == 1) {
          goto LABEL_8;
        }
      }
      (*(void (**)(char *, uint64_t))(v175 + 8))(v210, v211);
      return (*(uint64_t (**)(char *, uint64_t))v184)(v209, v217);
    }
  }
  else
  {
    unint64_t v219 = 0;
    unint64_t v220 = 0xE000000000000000;
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    unint64_t v219 = 0xD00000000000001DLL;
    unint64_t v220 = 0x8000000260BFEEB0;
    uint64_t v224 = dispatch thunk of Collection.count.getter();
    v86._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v86);
    swift_bridgeObjectRelease();
    v87._countAndFlagsBits = 0x746365707865202CLL;
    v87._object = (void *)0xEB000000003D6465;
    String.append(_:)(v87);
    ((void (*)(uint64_t, uint64_t))v73)(v35, v215);
    uint64_t v88 = *((void *)v68 + 5);
    v75(v68, v214);
    uint64_t v224 = v88;
    v89._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v89);
    swift_bridgeObjectRelease();
    unint64_t v90 = v219;
    unint64_t v91 = v220;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v92 = v90;
    *(void *)(v92 + 8) = v91;
    *(unsigned char *)(v92 + 16) = 1;
    return swift_willThrow();
  }
}

uint64_t PINECircuit.appendWraparoundCheck<A>(into:random:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v122 = a1;
  uint64_t v128 = *(char **)(a3 - 8);
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v119 = (char *)&v104 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = v8;
  uint64_t v10 = *(void *)(v9 + 88);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v111 = swift_getAssociatedConformanceWitness();
  uint64_t v112 = AssociatedTypeWitness;
  uint64_t v133 = swift_getAssociatedTypeWitness();
  uint64_t v127 = *(char **)(v133 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v133, v13);
  uint64_t v117 = (uint64_t)&v104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v14, v16);
  uint64_t v132 = (uint64_t)&v104 - v18;
  uint64_t v20 = MEMORY[0x270FA5388](v17, v19);
  uint64_t v116 = (char *)&v104 - v21;
  uint64_t v121 = *(void *)(v10 - 8);
  uint64_t v23 = MEMORY[0x270FA5388](v20, v22);
  int v115 = (char *)&v104 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x270FA5388](v23, v25);
  uint64_t v144 = (uint64_t)&v104 - v27;
  uint64_t v29 = MEMORY[0x270FA5388](v26, v28);
  uint64_t v145 = (uint64_t)&v104 - v30;
  uint64_t v104 = v31;
  MEMORY[0x270FA5388](v29, v32);
  unint64_t v34 = (char *)&v104 - v33;
  uint64_t v35 = swift_getAssociatedTypeWitness();
  uint64_t v36 = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v37 = swift_getAssociatedConformanceWitness();
  v146[0] = v10;
  v146[1] = v35;
  uint64_t v118 = AssociatedConformanceWitness;
  v146[2] = AssociatedConformanceWitness;
  v146[3] = v36;
  uint64_t v38 = a4;
  v146[4] = v37;
  uint64_t v39 = type metadata accessor for PINECircuitParameter();
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v42 = MEMORY[0x270FA5388](v39, v41);
  uint64_t v114 = (char *)&v104 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = MEMORY[0x270FA5388](v42, v44);
  char v113 = (char *)&v104 - v46;
  MEMORY[0x270FA5388](v45, v47);
  uint64_t v49 = (char *)&v104 - v48;
  uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v38 + 56);
  uint64_t v138 = v38 + 56;
  uint64_t v141 = v50;
  v50(a3, v38);
  uint64_t v51 = *((void *)v49 + 5);
  uint64_t v53 = *(void (**)(char *, uint64_t))(v40 + 8);
  uint64_t v52 = v40 + 8;
  uint64_t v123 = v49;
  uint64_t v139 = v39;
  uint64_t v137 = v53;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v53)(v49, v39);
  if (v51 < 0)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    return result;
  }
  uint64_t v135 = v52;
  uint64_t v120 = v34;
  uint64_t v105 = Array.subscript.getter();
  uint64_t v136 = a3;
  uint64_t v58 = PINECircuit.wraparoundDotProducts<A>(_:random:)(v105, v55, v56, v57, v140, a3, v38);
  uint64_t v59 = swift_bridgeObjectRetain();
  uint64_t v60 = v10;
  uint64_t v61 = v38;
  if (MEMORY[0x2612241F0](v59, v10))
  {
    uint64_t v62 = 0;
    uint64_t v140 = 0;
    uint64_t v131 = (char **)(v121 + 16);
    uint64_t v110 = (void (**)(uint64_t, char *, uint64_t))(v121 + 32);
    uint64_t v130 = (void (**)(uint64_t, uint64_t))(v121 + 8);
    uint64_t v129 = (char **)(v127 + 8);
    uint64_t v109 = (void (**)(char *, uint64_t, uint64_t))(v127 + 32);
    uint64_t v108 = (void (**)(char *, uint64_t, uint64_t))(v128 + 16);
    unint64_t v107 = (void (**)(char *, uint64_t))(v128 + 8);
    uint64_t v63 = v123;
    uint64_t v142 = v4;
    uint64_t v106 = v58;
    uint64_t v147 = v61;
    uint64_t v143 = v60;
    while (1)
    {
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        uint64_t v65 = *(char **)(v121 + 16);
        uint64_t v66 = v120;
        ((void (*)(char *, unint64_t, uint64_t))v65)(v120, v58+ ((*(unsigned __int8 *)(v121 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v121 + 80))+ *(void *)(v121 + 72) * v62, v60);
        uint64_t v67 = v62 + 1;
        if (__OFADD__(v62, 1)) {
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v66 = v120;
        if (v104 != 8) {
          goto LABEL_25;
        }
        v146[0] = result;
        uint64_t v65 = *v131;
        ((void (*)(char *, void *, uint64_t))*v131)(v120, v146, v60);
        swift_unknownObjectRelease();
        uint64_t v67 = v62 + 1;
        if (__OFADD__(v62, 1))
        {
LABEL_16:
          __break(1u);
          goto LABEL_17;
        }
      }
      uint64_t v124 = v67;
      uint64_t v125 = v62;
      (*v110)(v145, v66, v60);
      uint64_t v128 = v65;
      Swift::String v68 = v141;
      v141(v136, v61);
      uint64_t v69 = v139;
      PINECircuitParameter.wraparoundCheckLowerBound.getter(v139, v70);
      uint64_t v71 = v137;
      v137(v63, v69);
      uint64_t v72 = v113;
      uint64_t v73 = v136;
      v68(v136, v147);
      uint64_t v74 = (uint64_t)v115;
      ((void (*)(char *, char *, uint64_t))v128)(v115, &v72[*(int *)(v69 + 100)], v143);
      v71(v72, v69);
      uint64_t v75 = v132;
      uint64_t v76 = v117;
      uint64_t v77 = v144;
      uint64_t v78 = v73;
      LOBYTE(v73) = static PINECircuit.computeRangeCheck(_:lowerBound:upperBound:)(v132, v117, v145, v144, v74);
      uint64_t v79 = (char *)*v130;
      (*v130)(v74, v143);
      uint64_t v60 = v143;
      uint64_t v128 = v79;
      ((void (*)(uint64_t, uint64_t))v79)(v77, v143);
      uint64_t v80 = v76;
      uint64_t v81 = v133;
      uint64_t v127 = *v129;
      ((void (*)(uint64_t, uint64_t))v127)(v80, v133);
      uint64_t v82 = (uint64_t)v116;
      (*v109)(v116, v75, v81);
      int v83 = v119;
      (*v108)(v119, v142, v78);
      if (v73)
      {
        uint64_t v84 = v123;
        uint64_t v85 = v147;
        v141(v78, v147);
        (*v107)(v83, v78);
        uint64_t v86 = v139;
        uint64_t v87 = *(void *)&v84[*(int *)(v139 + 96)];
        uint64_t v88 = v137;
        v137(v84, v139);
        uint64_t v89 = v85;
        uint64_t v90 = v78;
        BOOL v126 = (uint64_t)v140 < v87;
        uint64_t v91 = v134;
        uint64_t v92 = v141;
        uint64_t v93 = v88;
      }
      else
      {
        (*v107)(v83, v78);
        uint64_t v89 = v147;
        uint64_t v90 = v78;
        BOOL v126 = 0;
        uint64_t v91 = v134;
        uint64_t v86 = v139;
        uint64_t v92 = v141;
        uint64_t v93 = v137;
      }
      int v94 = v114;
      v92(v90, v89);
      uint64_t v95 = *(void *)&v94[*(int *)(v86 + 88)];
      v93(v94, v86);
      uint64_t v96 = v118;
      static FieldElement.encode(_:into:with:)(v82, v122, v95, v60, v118);
      if (v91)
      {
        uint64_t v58 = v106;
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        ((void (*)(uint64_t, uint64_t))v127)(v82, v133);
        ((void (*)(uint64_t, uint64_t))v128)(v145, v60);
        swift_bridgeObjectRelease();
        return v58;
      }
      uint64_t v134 = 0;
      BOOL v97 = v126;
      v146[0] = v126;
      uint64_t v98 = v133;
      swift_getAssociatedConformanceWitness();
      lazy protocol witness table accessor for type Int and conformance Int();
      uint64_t v99 = v132;
      dispatch thunk of BinaryInteger.init<A>(_:)();
      FieldElement.init(_:)(v99, v60, v96);
      type metadata accessor for Array();
      Array.append(_:)();
      ((void (*)(uint64_t, uint64_t))v127)(v82, v98);
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v128)(v145, v60);
      BOOL v100 = __OFADD__(v140, v97);
      uint64_t v140 = (uint64_t *)((char *)v140 + v97);
      if (v100) {
        break;
      }
      uint64_t v58 = v106;
      uint64_t v101 = MEMORY[0x2612241F0](v106, v60);
      uint64_t v62 = v125 + 1;
      uint64_t v61 = v147;
      uint64_t v63 = v123;
      if (v124 == v101) {
        goto LABEL_18;
      }
    }
    __break(1u);
    goto LABEL_24;
  }
LABEL_17:
  uint64_t v140 = 0;
  uint64_t v63 = v123;
LABEL_18:
  swift_bridgeObjectRelease();
  v141(v136, v61);
  uint64_t v102 = *(uint64_t **)&v63[*(int *)(v139 + 96)];
  ((void (*)(char *))v137)(v63);
  if (v140 != v102)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v103 = 0xD000000000000023;
    *(void *)(v103 + 8) = 0x8000000260BFEE40;
    *(unsigned char *)(v103 + 16) = 4;
    swift_willThrow();
  }
  swift_unknownObjectRelease();
  return v58;
}

double PINECircuitParameter.alpha.getter()
{
  return *(double *)v0;
}

uint64_t PINECircuitParameter.bitCheckLength.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t PINECircuitParameter.encodedMeasurementLength.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t PINECircuitParameter.encodedVectorAndNormCheckLength.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t PINECircuitParameter.fractionalBitCount.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t PINECircuitParameter.measurementLength.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t PINECircuitParameter.normBoundBitCount.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t PINECircuitParameter.normCheckBound.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 84));
}

uint64_t PINECircuitParameter.wraparoundBoundBitCount.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 88));
}

uint64_t PINECircuitParameter.wraparoundCheckCount.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 92));
}

uint64_t PINECircuitParameter.wraparoundCheckSuccessCount.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 96));
}

uint64_t PINECircuitParameter.wraparoundCheckUpperBound.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 100));
}

uint64_t PINECircuitParameter.wraparoundCheckLowerBound.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v4, v7);
  uint64_t v10 = (char *)&v13 - v9;
  uint64_t v11 = *(void *)(v8 + 32);
  (*(void (**)(uint64_t, uint64_t))(v11 + 72))(v2, v11);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v10, v2);
  FieldElement.init(other:)((uint64_t)v6, v2, v11);
  dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v10, v2);
}

uint64_t PINECircuitParameter.init(l2NormBoundInt:fractionalBitCount:measurementLength:alpha:wraparoundCheckCount:wraparoundCheckSuccessCount:)@<X0>(char *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, char *a11, uint64_t a12)
{
  unint64_t v263 = a7;
  uint64_t v260 = a5;
  uint64_t v264 = a9;
  uint64_t v265 = a4;
  v276 = a1;
  uint64_t v262 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](a1, a2);
  v261 = (char *)v236 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  uint64_t v274 = a8;
  double v275 = *(double *)&a6;
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v18 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v273 = *(void *)(v18 + 8);
  uint64_t v272 = *(void *)(v273 + 24);
  uint64_t v19 = *(void *)(v272 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness, v20);
  v270 = (char *)v236 - v21;
  uint64_t v22 = swift_checkMetadataState();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v25 = MEMORY[0x270FA5388](v22, v24);
  uint64_t v27 = MEMORY[0x270FA5388](v25, v26);
  MEMORY[0x270FA5388](v27, (char *)v236 - v28);
  uint64_t v31 = MEMORY[0x270FA5388]((char *)v236 - v29, v30);
  uint64_t v33 = (char *)v236 - v32;
  uint64_t v35 = MEMORY[0x270FA5388](v31, v34);
  uint64_t v37 = MEMORY[0x270FA5388](v35, v36);
  uint64_t v39 = MEMORY[0x270FA5388](v37, v38);
  uint64_t v41 = MEMORY[0x270FA5388](v39, v40);
  uint64_t v43 = MEMORY[0x270FA5388](v41, v42);
  uint64_t v45 = MEMORY[0x270FA5388](v43, v44);
  v266 = (char *)v236 - v46;
  uint64_t v48 = MEMORY[0x270FA5388](v45, v47);
  uint64_t v50 = MEMORY[0x270FA5388](v48, v49);
  uint64_t v52 = MEMORY[0x270FA5388](v50, v51);
  v269 = (char *)v236 - v53;
  uint64_t v55 = MEMORY[0x270FA5388](v52, v54);
  v267 = (char *)v236 - v56;
  uint64_t v58 = MEMORY[0x270FA5388](v55, v57);
  v268 = (char *)v236 - v59;
  uint64_t v61 = MEMORY[0x270FA5388](v58, v60);
  uint64_t v63 = (char *)v236 - v62;
  uint64_t v65 = MEMORY[0x270FA5388](v61, v64);
  uint64_t v67 = MEMORY[0x270FA5388](v65, v66);
  uint64_t v69 = (char *)v236 - v68;
  uint64_t v71 = MEMORY[0x270FA5388](v67, v70);
  int v83 = (char *)v236 - v82;
  if (a2 > 0x7F)
  {
    double v277 = 0.0;
    unint64_t v278 = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    uint64_t v95 = v23;
    double v277 = -2.31584178e77;
    unint64_t v278 = 0x8000000260BFFB60;
    unint64_t v282 = a2;
    v96._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v96);
    swift_bridgeObjectRelease();
    unint64_t v97 = 0xD000000000000014;
    uint64_t v98 = " must be in [0, 128)";
LABEL_11:
    unint64_t v100 = (unint64_t)(v98 - 32) | 0x8000000000000000;
    String.append(_:)(*(Swift::String *)&v97);
    double v101 = v277;
    unint64_t v102 = v278;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(double *)uint64_t v103 = v101;
    *(void *)(v103 + 8) = v102;
    *(unsigned char *)(v103 + 16) = 1;
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v276, v22);
  }
  if (a3 < 1)
  {
    double v277 = 0.0;
    unint64_t v278 = 0xE000000000000000;
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    uint64_t v95 = v23;
    double v277 = -2.31584178e77;
    unint64_t v278 = 0x8000000260BFFBA0;
    unint64_t v282 = a3;
    v99._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v99);
    swift_bridgeObjectRelease();
    unint64_t v97 = 0xD000000000000011;
    uint64_t v98 = " must be positive";
    goto LABEL_11;
  }
  v251 = v78;
  v252 = v77;
  v248 = v76;
  v249 = v75;
  v250 = v74;
  v247 = v73;
  v240 = v72;
  uint64_t v241 = v71;
  v246 = v33;
  v244 = v81;
  uint64_t v255 = v19;
  uint64_t v243 = a3;
  uint64_t v254 = v80;
  unint64_t v257 = a2;
  v259 = v79;
  *(void *)&double v277 = 1;
  unint64_t v84 = lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v85 = v273;
  dispatch thunk of BinaryInteger.init<A>(_:)();
  uint64_t v253 = v18;
  uint64_t v86 = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
  if (v86 >= 0) {
    uint64_t v87 = v86;
  }
  else {
    uint64_t v87 = v86 + 1;
  }
  *(void *)&double v277 = v87 >> 1;
  unint64_t v242 = v84;
  dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)();
  uint64_t v256 = v23;
  uint64_t v88 = v23 + 8;
  uint64_t v89 = *(void (**)(char *, uint64_t))(v23 + 8);
  v89(v69, v22);
  uint64_t v90 = *(void *)(*(void *)(v85 + 32) + 8);
  uint64_t v91 = v88;
  LOBYTE(v88) = dispatch thunk of static Comparable.< infix(_:_:)();
  v258 = (uint64_t (*)(uint64_t, uint64_t))v89;
  v89(v83, v22);
  if ((v88 & 1) == 0)
  {
    double v277 = 0.0;
    unint64_t v278 = 0xE000000000000000;
    _StringGuts.grow(_:)(85);
    v105._countAndFlagsBits = 0xD000000000000010;
    v105._object = (void *)0x8000000260BFFBC0;
    String.append(_:)(v105);
    uint64_t v106 = v276;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v107._object = (void *)0x8000000260BFFBE0;
    v107._countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v107);
    unint64_t v282 = v257;
    v108._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v108);
    swift_bridgeObjectRelease();
    v109._countAndFlagsBits = 0xD00000000000002CLL;
    v109._object = (void *)0x8000000260BFFC00;
    String.append(_:)(v109);
    double v110 = v277;
    unint64_t v111 = v278;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(double *)uint64_t v112 = v110;
    *(void *)(v112 + 8) = v111;
    *(unsigned char *)(v112 + 16) = 1;
    swift_willThrow();
    return v258((uint64_t)v106, v22);
  }
  v236[1] = v90;
  dispatch thunk of static Numeric.* infix(_:_:)();
  static FieldElement.modulus.getter();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  uint64_t v92 = (void (*)(char *, uint64_t))v258;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  v236[0] = *(void *)(v272 + 8);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  v237 = v69;
  v92(v69, v22);
  v245 = v83;
  v92(v83, v22);
  uint64_t v93 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v239 = v91;
  if (v93 < 65)
  {
    char v113 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v114 = dispatch thunk of BinaryInteger._lowWord.getter();
    v92(v63, v22);
    if (v113) {
      double v94 = (double)v114;
    }
    else {
      double v94 = (double)(unint64_t)v114;
    }
  }
  else
  {
    lazy protocol witness table accessor for type Double and conformance Double();
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    static BinaryFloatingPoint<>._convert<A>(from:)();
    v92(v63, v22);
    double v94 = v277;
  }
  int v115 = v92;
  uint64_t v117 = v268;
  uint64_t v116 = v269;
  uint64_t v118 = v256 + 16;
  uint64_t v119 = *(void (**)(char *, uint64_t, uint64_t))(v256 + 16);
  v119(v268, (uint64_t)v259, v22);
  if (dispatch thunk of BinaryInteger.bitWidth.getter() <= 64)
  {
    char v121 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v122 = dispatch thunk of BinaryInteger._lowWord.getter();
    v115(v117, v22);
    if (v121) {
      double v120 = (double)v122;
    }
    else {
      double v120 = (double)(unint64_t)v122;
    }
  }
  else
  {
    lazy protocol witness table accessor for type Double and conformance Double();
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    static BinaryFloatingPoint<>._convert<A>(from:)();
    v115(v117, v22);
    double v120 = v277;
  }
  uint64_t v123 = v267;
  if (v120 >= v94 / 3.0)
  {
    double v277 = 0.0;
    unint64_t v278 = 0xE000000000000000;
    _StringGuts.grow(_:)(85);
    v125._countAndFlagsBits = 0xD000000000000010;
    v125._object = (void *)0x8000000260BFFBC0;
    String.append(_:)(v125);
    BOOL v126 = v276;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v127._object = (void *)0x8000000260BFFBE0;
    v127._countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v127);
    unint64_t v282 = v257;
    v128._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v128);
    swift_bridgeObjectRelease();
    unint64_t v129 = 0xD00000000000002ALL;
    uint64_t v130 = ") is out of bound given the field modulus=";
LABEL_38:
    unint64_t v150 = (unint64_t)(v130 - 32) | 0x8000000000000000;
    String.append(_:)(*(Swift::String *)&v129);
    uint64_t v151 = v245;
    static FieldElement.modulus.getter();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v115(v151, v22);
    double v152 = v277;
    unint64_t v153 = v278;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(double *)uint64_t v154 = v152;
    *(void *)(v154 + 8) = v153;
    *(unsigned char *)(v154 + 16) = 1;
    swift_willThrow();
    v115(v126, v22);
    return ((uint64_t (*)(char *, uint64_t))v115)(v259, v22);
  }
  v119(v267, (uint64_t)v276, v22);
  if (dispatch thunk of BinaryInteger.bitWidth.getter() < 65)
  {
    uint64_t v131 = v123;
    char v132 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v133 = dispatch thunk of BinaryInteger._lowWord.getter();
    uint64_t v134 = v115;
    uint64_t v135 = v133;
    uint64_t v136 = v131;
    uint64_t v137 = v134;
    v134(v136, v22);
    if (v132) {
      double v124 = (double)v135;
    }
    else {
      double v124 = (double)(unint64_t)v135;
    }
    int v115 = v137;
  }
  else
  {
    lazy protocol witness table accessor for type Double and conformance Double();
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    static BinaryFloatingPoint<>._convert<A>(from:)();
    v115(v123, v22);
    double v124 = v277;
  }
  static FieldElement.modulus.getter();
  if (dispatch thunk of BinaryInteger.bitWidth.getter() <= 64)
  {
    char v141 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v142 = dispatch thunk of BinaryInteger._lowWord.getter();
    v115(v116, v22);
    uint64_t v139 = v119;
    if (v141) {
      double v140 = (double)v142;
    }
    else {
      double v140 = (double)(unint64_t)v142;
    }
  }
  else
  {
    uint64_t v138 = v116;
    uint64_t v139 = v119;
    lazy protocol witness table accessor for type Double and conformance Double();
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    static BinaryFloatingPoint<>._convert<A>(from:)();
    v115(v138, v22);
    double v140 = v277;
  }
  uint64_t v143 = v266;
  if (v124 >= v140 / a10)
  {
    double v277 = 0.0;
    unint64_t v278 = 0xE000000000000000;
    _StringGuts.grow(_:)(88);
    v146._countAndFlagsBits = 0xD000000000000018;
    v146._object = (void *)0x8000000260BFFC60;
    String.append(_:)(v146);
    BOOL v126 = v276;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v147._object = (void *)0x8000000260BFFBE0;
    v147._countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v147);
    unint64_t v282 = v257;
    v148._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v148);
    swift_bridgeObjectRelease();
    v149._countAndFlagsBits = 0x3D6168706C61202CLL;
    v149._object = (void *)0xE800000000000000;
    String.append(_:)(v149);
    Double.write<A>(to:)();
    unint64_t v129 = 0xD00000000000001BLL;
    uint64_t v130 = "), given the field modulus=";
    goto LABEL_38;
  }
  v139(v266, (uint64_t)v276, v22);
  uint64_t v144 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v269 = (char *)v139;
  if (v144 < 65)
  {
    char v155 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v156 = dispatch thunk of BinaryInteger._lowWord.getter();
    v115(v143, v22);
    if (v155) {
      double v145 = (double)v156;
    }
    else {
      double v145 = (double)(unint64_t)v156;
    }
  }
  else
  {
    lazy protocol witness table accessor for type Double and conformance Double();
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    static BinaryFloatingPoint<>._convert<A>(from:)();
    v115(v143, v22);
    double v145 = v277;
  }
  double v277 = ceil(v145 * a10) + 1.0;
  lazy protocol witness table accessor for type Double and conformance Double();
  uint64_t v157 = v251;
  dispatch thunk of BinaryInteger.init<A>(_:)();
  FixedWidthInteger.nextPowerOfTwo.getter(v22, v253, v254);
  v115(v157, v22);
  uint64_t v158 = v252;
  static FieldElement.modulus.getter();
  uint64_t v159 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v256 = v118;
  if (v159 < 65)
  {
    char v162 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v163 = dispatch thunk of BinaryInteger._lowWord.getter();
    v115(v158, v22);
    if (v162) {
      double v160 = (double)v163;
    }
    else {
      double v160 = (double)(unint64_t)v163;
    }
    uint64_t v161 = v254;
  }
  else
  {
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    static BinaryFloatingPoint<>._convert<A>(from:)();
    v115(v158, v22);
    double v160 = v277;
    uint64_t v161 = v254;
  }
  uint64_t v164 = v248;
  ((void (*)(char *, uint64_t, uint64_t))v269)(v248, v161, v22);
  if (dispatch thunk of BinaryInteger.bitWidth.getter() <= 64)
  {
    char v167 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v168 = dispatch thunk of BinaryInteger._lowWord.getter();
    v115(v164, v22);
    if (v167) {
      double v165 = (double)v168;
    }
    else {
      double v165 = (double)(unint64_t)v168;
    }
    uint64_t v166 = v254;
  }
  else
  {
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    static BinaryFloatingPoint<>._convert<A>(from:)();
    v115(v164, v22);
    double v165 = v277;
    uint64_t v166 = v254;
  }
  uint64_t v169 = v249;
  ((void (*)(char *, uint64_t, uint64_t))v269)(v249, v166, v22);
  if (dispatch thunk of BinaryInteger.bitWidth.getter() <= 64)
  {
    char v171 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v172 = dispatch thunk of BinaryInteger._lowWord.getter();
    v115(v169, v22);
    if (v171) {
      double v170 = (double)v172;
    }
    else {
      double v170 = (double)(unint64_t)v172;
    }
  }
  else
  {
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    static BinaryFloatingPoint<>._convert<A>(from:)();
    v115(v169, v22);
    double v170 = v277;
  }
  uint64_t v173 = v250;
  if (v170 / 4000.0 > v160 / v165) {
    goto LABEL_72;
  }
  static FieldElement.modulus.getter();
  if (dispatch thunk of BinaryInteger.bitWidth.getter() < 65)
  {
    char v176 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v177 = dispatch thunk of BinaryInteger._lowWord.getter();
    v115(v173, v22);
    double v174 = (v176 & 1) != 0 ? (double)v177 : (double)(unint64_t)v177;
    uint64_t v175 = v254;
  }
  else
  {
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    static BinaryFloatingPoint<>._convert<A>(from:)();
    v115(v173, v22);
    double v174 = v277;
    uint64_t v175 = v254;
  }
  uint64_t v178 = v247;
  ((void (*)(char *, uint64_t, uint64_t))v269)(v247, v175, v22);
  if (dispatch thunk of BinaryInteger.bitWidth.getter() <= 64)
  {
    char v180 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v181 = dispatch thunk of BinaryInteger._lowWord.getter();
    v115(v178, v22);
    double v179 = (v180 & 1) != 0 ? (double)v181 : (double)(unint64_t)v181;
  }
  else
  {
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    static BinaryFloatingPoint<>._convert<A>(from:)();
    v115(v178, v22);
    double v179 = v277;
  }
  if (v179 > v174 / 2600.0) {
    goto LABEL_72;
  }
  uint64_t v195 = v245;
  static FieldElement.modulus.getter();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  uint64_t v196 = v237;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  uint64_t v197 = v246;
  dispatch thunk of static BinaryInteger./ infix(_:_:)();
  v115(v196, v22);
  v115(v195, v22);
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
    {
      uint64_t v198 = dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t v199 = v197;
      goto LABEL_84;
    }
    double v277 = *(double *)&v265;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v204 = dispatch thunk of static Comparable.< infix(_:_:)();
    v115(v195, v22);
    uint64_t v205 = v197;
LABEL_90:
    v115(v205, v22);
    if (v204) {
      goto LABEL_72;
    }
    goto LABEL_95;
  }
  char v200 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v201 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v200 & 1) == 0)
  {
    if (v201 < 64)
    {
      uint64_t v206 = v246;
      uint64_t v198 = dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t v199 = v206;
LABEL_84:
      v115(v199, v22);
      if (v198 >= v265) {
        goto LABEL_95;
      }
LABEL_72:
      double v277 = 0.0;
      unint64_t v278 = 0xE000000000000000;
      _StringGuts.grow(_:)(166);
      v182._countAndFlagsBits = 0xD000000000000014;
      v182._object = (void *)0x8000000260BFFCA0;
      String.append(_:)(v182);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v183._countAndFlagsBits = 0xD000000000000019;
      v183._object = (void *)0x8000000260BFFCC0;
      String.append(_:)(v183);
      unint64_t v282 = v257;
      v184._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v184);
      swift_bridgeObjectRelease();
      v185._countAndFlagsBits = 0x706C612020202020;
      v185._object = (void *)0xEB000000003D6168;
      String.append(_:)(v185);
      Double.write<A>(to:)();
      v186._countAndFlagsBits = 0xD00000000000001BLL;
      v186._object = (void *)0x8000000260BFFCE0;
      String.append(_:)(v186);
      unint64_t v282 = v265;
      v187._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v187);
      swift_bridgeObjectRelease();
      v188._countAndFlagsBits = 0xD00000000000001ELL;
      v188._object = (void *)0x8000000260BFFD00;
      String.append(_:)(v188);
      uint64_t v189 = v254;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v190._countAndFlagsBits = 0xD000000000000029;
      v190._object = (void *)0x8000000260BFFD20;
      String.append(_:)(v190);
      uint64_t v191 = v245;
      static FieldElement.modulus.getter();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v115(v191, v22);
      double v192 = v277;
      unint64_t v193 = v278;
      lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
      swift_allocError();
      *(double *)uint64_t v194 = v192;
      *(void *)(v194 + 8) = v193;
      *(unsigned char *)(v194 + 16) = 1;
      swift_willThrow();
      v115(v276, v22);
      v115((char *)v189, v22);
      return ((uint64_t (*)(char *, uint64_t))v115)(v259, v22);
    }
    v210 = v240;
    uint64_t v211 = v246;
    ((void (*)(char *, char *, uint64_t))v269)(v240, v246, v22);
    double v277 = *(double *)&v265;
    if (v265 <= 0)
    {
      v115(v210, v22);
      v115(v211, v22);
      goto LABEL_95;
    }
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v204 = dispatch thunk of static Comparable.< infix(_:_:)();
    v115(v195, v22);
    v115(v210, v22);
    uint64_t v205 = v211;
    goto LABEL_90;
  }
  if (v201 > 64)
  {
    double v277 = *(double *)&v265;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    unint64_t v202 = v246;
    char v203 = dispatch thunk of static Comparable.< infix(_:_:)();
    v115(v195, v22);
    v115(v202, v22);
    if ((v203 & 1) == 0) {
      goto LABEL_95;
    }
    goto LABEL_72;
  }
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  uint64_t v207 = v246;
  char v208 = dispatch thunk of static Comparable.< infix(_:_:)();
  v115(v195, v22);
  uint64_t v209 = v241;
  ((void (*)(uint64_t, char *, uint64_t))v269)(v241, v207, v22);
  if (v208)
  {
    v115((char *)v209, v22);
    v115(v207, v22);
    goto LABEL_72;
  }
  uint64_t v212 = dispatch thunk of BinaryInteger._lowWord.getter();
  v115((char *)v209, v22);
  v115(v207, v22);
  if (v212 < v265) {
    goto LABEL_72;
  }
LABEL_95:
  uint64_t v273 = a12;
  v268 = a11;
  v267 = (char *)FixedWidthInteger.bitLength.getter();
  *(void *)(v264 + 48) = v267;
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  uint64_t v213 = v244;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  uint64_t v214 = v237;
  dispatch thunk of static Numeric.* infix(_:_:)();
  v115(v213, v22);
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  uint64_t v215 = v245;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  v115(v213, v22);
  v115(v214, v22);
  uint64_t v216 = FixedWidthInteger.bitLength.getter();
  v115(v215, v22);
  double v277 = v275;
  unint64_t v278 = v263;
  uint64_t v279 = v274;
  v280 = v268;
  uint64_t v281 = v273;
  uint64_t result = type metadata accessor for PINECircuitParameter();
  uint64_t v217 = v264;
  v218 = v267;
  *(void *)(v264 + *(int *)(result + 88)) = v216;
  if ((uint64_t)(v218 + 0x4000000000000000) < 0)
  {
    __break(1u);
    goto LABEL_104;
  }
  uint64_t v219 = v216 + 1;
  if (__OFADD__(v216, 1))
  {
LABEL_104:
    __break(1u);
    goto LABEL_105;
  }
  uint64_t v220 = v219 * v265;
  if ((unsigned __int128)(v219 * (__int128)v265) >> 64 != (v219 * v265) >> 63)
  {
LABEL_105:
    __break(1u);
    goto LABEL_106;
  }
  uint64_t v221 = 2 * (void)v218;
  BOOL v222 = __OFADD__(2 * (void)v218, v220);
  uint64_t v223 = 2 * (void)v218 + v220;
  if (v222)
  {
LABEL_106:
    __break(1u);
    goto LABEL_107;
  }
  *(void *)(v217 + 8) = v223;
  uint64_t v224 = v243;
  BOOL v222 = __OFADD__(v243, v223);
  uint64_t v225 = v243 + v223;
  if (v222)
  {
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }
  BOOL v222 = __OFADD__(v225, v265);
  uint64_t v226 = v225 + v265;
  if (v222)
  {
LABEL_108:
    __break(1u);
    goto LABEL_109;
  }
  *(void *)(v217 + 16) = v226;
  *(void *)(v217 + 40) = v224;
  BOOL v222 = __OFADD__(v224, v221);
  uint64_t v227 = v224 + v221;
  if (!v222)
  {
    uint64_t v228 = result;
    *(double *)uint64_t v217 = a10;
    *(void *)(v217 + 24) = v227;
    *(void *)(v217 + 32) = v257;
    uint64_t v229 = (uint64_t)v245;
    v230 = (void (*)(uint64_t, uint64_t, uint64_t))v269;
    ((void (*)(char *, char *, uint64_t))v269)(v245, v259, v22);
    uint64_t v231 = *(void *)&v275;
    uint64_t v232 = v228;
    uint64_t v233 = v274;
    FieldElement.init(_:)(v229, *(uint64_t *)&v275, v274);
    uint64_t v273 = v232;
    *(double *)(v217 + *(int *)(v232 + 92)) = *(double *)&v265;
    *(void *)(v217 + *(int *)(v232 + 96)) = v260;
    uint64_t v234 = v254;
    v230(v229, v254, v22);
    v235 = v261;
    FieldElement.init(_:)(v229, v231, v233);
    v115(v276, v22);
    v115((char *)v234, v22);
    v115(v259, v22);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v262 + 32))(v217 + *(int *)(v273 + 100), v235, v231);
  }
LABEL_109:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for PINEMainCircuit()
{
  return swift_getGenericMetadata();
}

uint64_t PINECircuitParameter.init(l2NormBound:fractionalBitCount:measurementLength:alpha:wraparoundCheckCount:wraparoundCheckSuccessCount:)@<X0>(uint64_t a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, char *a11, uint64_t a12)
{
  uint64_t v36 = a4;
  uint64_t v37 = a5;
  uint64_t v35 = a3;
  uint64_t v33 = a9;
  uint64_t v40 = a12;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v38 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v39 = AssociatedTypeWitness;
  uint64_t v20 = MEMORY[0x270FA5388](AssociatedTypeWitness, v19);
  uint64_t v22 = (char *)&v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20, v23);
  uint64_t v25 = (char *)&v32 - v24;
  unint64_t v34 = a2;
  unint64_t v26 = a7;
  uint64_t v27 = v40;
  uint64_t v28 = v41;
  static PINECircuitParameter.l2NormBoundIntFrom(l2NormBound:fractionalBitCount:)(a1, a2, a6, a8, v40, (uint64_t)&v32 - v24);
  if (v28)
  {
    uint64_t v29 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(a1, v29);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v22, v25, v39);
    PINECircuitParameter.init(l2NormBoundInt:fractionalBitCount:measurementLength:alpha:wraparoundCheckCount:wraparoundCheckSuccessCount:)(v22, v34, v35, v36, v37, a6, v26, a8, v33, a10, a11, v27);
    uint64_t v31 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(a1, v31);
    return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v25, v39);
  }
}

uint64_t PINECircuit.gadgetParameters.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness, v6);
  uint64_t v8 = (char *)&v12 - v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_260BF9FF0;
  (*(void (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  Gadget.parameters.getter(AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t *)(v9 + 32));
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
  return v9;
}

void PINECircuit.encode(measurement:)()
{
}

uint64_t PINECircuit.decode(data:numOfMeasurements:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized PINECircuit.decode(data:numOfMeasurements:)(a1, a3, a4);
}

uint64_t PINECircuit.evaluateGadget<A>(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v18 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness, v12);
  uint64_t v14 = (char *)&v17 - v13;
  (*(void (**)(uint64_t, uint64_t))(a5 + 48))(a3, a5);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 64))(a2, a4, v18, AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
}

uint64_t PINECircuit.evaluateGadget(_:at:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v17 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness, v9);
  uint64_t v11 = (char *)&v17 - v10;
  (*(void (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
  uint64_t v18 = a1;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v13 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 72);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Polynomial();
  uint64_t v14 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  v13(&v18, v14, WitnessTable, AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, AssociatedTypeWitness);
}

uint64_t static PINECircuit.computeRangeCheck(_:lowerBound:upperBound:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v26 = a5;
  uint64_t v32 = a1;
  uint64_t v33 = a4;
  v24[2] = a3;
  uint64_t v30 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v28 = swift_getAssociatedConformanceWitness();
  uint64_t v27 = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27, v7);
  uint64_t v25 = (char *)v24 - v8;
  uint64_t v9 = swift_checkMetadataState();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v9, v11);
  uint64_t v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12, v15);
  uint64_t v17 = (char *)v24 - v16;
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v18(v14, a3, v9);
  v24[0] = v18;
  FieldElement.init(other:)((uint64_t)v14, v9, AssociatedConformanceWitness);
  v24[1] = *(void *)(AssociatedConformanceWitness + 8);
  dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
  FieldElement.integerValue.getter(v9, AssociatedConformanceWitness);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v17, v9);
  uint64_t v20 = v26;
  v18(v14, v26, v9);
  FieldElement.init(other:)((uint64_t)v14, v9, AssociatedConformanceWitness);
  dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
  FieldElement.integerValue.getter(v9, AssociatedConformanceWitness);
  v19(v17, v9);
  ((void (*)(char *, uint64_t, uint64_t))v24[0])(v14, v20, v9);
  FieldElement.init(other:)((uint64_t)v14, v9, AssociatedConformanceWitness);
  dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
  uint64_t v21 = v25;
  FieldElement.integerValue.getter(v9, AssociatedConformanceWitness);
  v19(v17, v9);
  uint64_t v22 = v27;
  swift_getAssociatedConformanceWitness();
  LOBYTE(v9) = dispatch thunk of static Comparable.<= infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v21, v22);
  return v9 & 1;
}

void closure #1 in PINECircuit.wraparoundDotProducts<A>(_:random:)(uint64_t a1, uint64_t a2)
{
}

Swift::Int closure #1 in closure #1 in PINECircuit.wraparoundDotProducts<A>(_:random:)()
{
  Swift::Int result = WraparoundJointRandomness.next()();
  if (result == -1)
  {
    swift_getAssociatedConformanceWitness();
    return dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
  }
  else if (result == 1)
  {
    swift_getAssociatedConformanceWitness();
    return dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
  }
  return result;
}

uint64_t PINECircuit.unpack(bitsSlice:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v44 = a1;
  uint64_t v40 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v43 = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v9 = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  *(void *)&long long v46 = AssociatedTypeWitness;
  *((void *)&v46 + 1) = v7;
  *(void *)&long long v47 = AssociatedConformanceWitness;
  *((void *)&v47 + 1) = v9;
  uint64_t v48 = swift_getAssociatedConformanceWitness();
  uint64_t v10 = type metadata accessor for PINECircuitParameter();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10, v12);
  uint64_t v14 = (char *)&v33 - v13;
  uint64_t v45 = a3;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(a3 + 56);
  v15(a2, a3);
  uint64_t v16 = *((void *)v14 + 6);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
  uint64_t v41 = v10;
  uint64_t v42 = v17;
  v17(v14, v10);
  uint64_t v18 = type metadata accessor for ArraySlice();
  uint64_t WitnessTable = swift_getWitnessTable();
  RandomAccessCollection<>.popFirst(_:)(v16, v18);
  long long v38 = v46;
  uint64_t v36 = *((void *)&v47 + 1);
  uint64_t v37 = v47;
  v15(a2, v45);
  uint64_t v20 = *((void *)v14 + 6);
  uint64_t v21 = v10;
  uint64_t v22 = v42;
  v42(v14, v21);
  uint64_t v43 = v18;
  uint64_t v39 = WitnessTable;
  RandomAccessCollection<>.popFirst(_:)(v20, v18);
  long long v35 = v46;
  uint64_t v33 = *((void *)&v47 + 1);
  uint64_t v34 = v47;
  uint64_t v23 = v41;
  v15(a2, v45);
  uint64_t v24 = *(void *)&v14[*(int *)(v23 + 88)];
  uint64_t result = v22(v14, v23);
  uint64_t v26 = v24 + 1;
  if (__OFADD__(v24, 1))
  {
    __break(1u);
  }
  else
  {
    v15(a2, v45);
    uint64_t v27 = *(void *)&v14[*(int *)(v23 + 92)];
    v22(v14, v23);
    uint64_t result = v26 * v27;
    if ((unsigned __int128)(v26 * (__int128)v27) >> 64 == (v26 * v27) >> 63)
    {
      uint64_t result = RandomAccessCollection<>.popFirst(_:)(result, v43);
      long long v29 = v46;
      long long v28 = v47;
      uint64_t v30 = v40;
      *uint64_t v40 = v38;
      uint64_t v31 = v36;
      *((void *)v30 + 2) = v37;
      *((void *)v30 + 3) = v31;
      v30[2] = v35;
      uint64_t v32 = v33;
      *((void *)v30 + 6) = v34;
      *((void *)v30 + 7) = v32;
      v30[4] = v29;
      v30[5] = v28;
      return result;
    }
  }
  __break(1u);
  return result;
}

__n128 PINECircuit.unpack(encodedMeasurement:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v43 = a1;
  uint64_t v44 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  *(void *)&long long v45 = AssociatedTypeWitness;
  *((void *)&v45 + 1) = v8;
  v46.n128_u64[0] = AssociatedConformanceWitness;
  v46.n128_u64[1] = v10;
  uint64_t v47 = swift_getAssociatedConformanceWitness();
  uint64_t v11 = type metadata accessor for PINECircuitParameter();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11, v13);
  uint64_t v15 = (char *)&v30 - v14;
  long long v38 = *(void (**)(uint64_t, uint64_t))(a3 + 56);
  uint64_t v39 = a3;
  uint64_t v32 = v4;
  uint64_t v33 = a2;
  v38(a2, a3);
  uint64_t v16 = *((void *)v15 + 5);
  uint64_t v37 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v31 = v11;
  v37(v15, v11);
  uint64_t v17 = type metadata accessor for ArraySlice();
  swift_getWitnessTable();
  RandomAccessCollection<>.popFirst(_:)(v16, v17);
  unint64_t v41 = v46.n128_u64[1];
  unint64_t v42 = v46.n128_u64[0];
  long long v40 = v45;
  uint64_t v18 = a2;
  uint64_t v20 = v38;
  uint64_t v19 = v39;
  v38(v18, v39);
  uint64_t v21 = *((void *)v15 + 1);
  uint64_t v22 = v11;
  uint64_t v23 = (void (*)(char *))v37;
  v37(v15, v22);
  RandomAccessCollection<>.popFirst(_:)(v21, v17);
  unint64_t v35 = v46.n128_u64[1];
  unint64_t v36 = v46.n128_u64[0];
  long long v34 = v45;
  v20(v33, v19);
  uint64_t v24 = *(void *)&v15[*(int *)(v31 + 92)];
  v23(v15);
  RandomAccessCollection<>.popFirst(_:)(v24, v17);
  long long v26 = v45;
  __n128 result = v46;
  uint64_t v27 = v44;
  _OWORD *v44 = v40;
  unint64_t v28 = v41;
  *((void *)v27 + 2) = v42;
  *((void *)v27 + 3) = v28;
  v27[2] = v34;
  unint64_t v29 = v35;
  *((void *)v27 + 6) = v36;
  *((void *)v27 + 7) = v29;
  v27[4] = v26;
  v27[5] = result;
  return result;
}

uint64_t PINENormEqualityCheckCircuit.chunkLength.getter()
{
  return *(void *)v0;
}

uint64_t PINENormEqualityCheckCircuit.gadget.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v3 = *(void *)(v1 + 48);
  long long v4 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = v2;
  *(void *)(a1 + 40) = v3;
  return swift_bridgeObjectRetain();
}

uint64_t PINENormEqualityCheckCircuit.jointRandLength.getter()
{
  return 0;
}

uint64_t PINENormEqualityCheckCircuit.init(l2NormBound:fractionalBitCount:measurementLength:chunkLength:alpha:wraparoundCheckCount:wraparoundCheckSuccessCount:)@<X0>(uint64_t a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return PINENormEqualityCheckCircuit.init(l2NormBound:fractionalBitCount:measurementLength:chunkLength:alpha:wraparoundCheckCount:wraparoundCheckSuccessCount:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, (void (*)(char *, int64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, double, uint64_t, uint64_t, uint64_t, uint64_t))PINENormEqualityCheckCircuit.init(l2NormBoundInt:fractionalBitCount:measurementLength:chunkLength:alpha:wraparoundCheckCount:wraparoundCheckSuccessCount:));
}

uint64_t PINENormEqualityCheckCircuit.evaluate(measurement:jointRand:numOfShares:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v12 = *(void *)(a4 + 16);
  uint64_t v13 = MEMORY[0x2612241C0](a1, v12);
  if (v13 != *(void *)(v6 + *(int *)(a4 + 64) + 16))
  {
    uint64_t v16 = v13;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    *(void *)&long long v42 = 0xD00000000000001BLL;
    *((void *)&v42 + 1) = 0x8000000260BFEB20;
    v51[0] = v16;
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 540877088;
    v18._object = (void *)0xE400000000000000;
    String.append(_:)(v18);
    v51[0] = *(void *)(v6 + *(int *)(a4 + 64) + 16);
    goto LABEL_5;
  }
  if (MEMORY[0x2612241C0](a2, v12))
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    *(void *)&long long v42 = 0xD000000000000019;
    *((void *)&v42 + 1) = 0x8000000260BFEB80;
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 540877088;
    v15._object = (void *)0xE400000000000000;
    String.append(_:)(v15);
    v51[0] = 0;
LABEL_5:
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
LABEL_6:
    swift_bridgeObjectRelease();
    uint64_t v20 = *((void *)&v42 + 1);
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v21 = v42;
    *(void *)(v21 + 8) = v20;
    *(unsigned char *)(v21 + 16) = 2;
    return swift_willThrow();
  }
  type metadata accessor for GadgetEvaluation();
  uint64_t v23 = MEMORY[0x2612241C0](a3);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v24 = *(void *)(PINECircuit.gadgetParameters.getter(a4, WitnessTable) + 16);
  swift_bridgeObjectRelease();
  if (v23 != v24)
  {
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    *(void *)&long long v42 = 0x2064696C61766E49;
    *((void *)&v42 + 1) = 0xEF203A746E756F63;
    v51[0] = v23;
    v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 540877088;
    v35._object = (void *)0xE400000000000000;
    String.append(_:)(v35);
    PINECircuit.gadgetParameters.getter(a4, WitnessTable);
    v36._countAndFlagsBits = MEMORY[0x261224130]();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  *(void *)&long long v42 = a1;
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  v51[0] = ArraySlice.init<A>(_:)();
  v51[1] = v25;
  _OWORD v51[2] = v26;
  v51[3] = v27;
  PINECircuit.unpack(encodedMeasurement:)((uint64_t)v51, a4, WitnessTable, &v42);
  uint64_t v28 = v42;
  uint64_t v39 = v43;
  uint64_t v40 = *((void *)&v42 + 1);
  uint64_t v38 = v44;
  uint64_t v29 = v46;
  uint64_t v30 = v47;
  long long v37 = v45;
  swift_unknownObjectRelease();
  long long v48 = v37;
  uint64_t v49 = v29;
  uint64_t v50 = v30;
  swift_unknownObjectRetain();
  PINECircuit.unpack(bitsSlice:)((uint64_t)&v48, a4, WitnessTable, &v42);
  long long v31 = v42;
  uint64_t v32 = v43;
  *(void *)&long long v37 = v44;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  Array.subscript.getter();
  unint64_t v33 = v42;
  uint64_t v52 = v42;
  PINENormEqualityCheckCircuit.evaluateNormEqualityCheck(inputVector:vBits:for:)(v28, v40, v39, v38, v31, *((uint64_t *)&v31 + 1), v32, v37, a5, (uint64_t)&v52, a4);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease_n();
  outlined consume of GadgetEvaluation<Field32>(v33);
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t PINENormEqualityCheckCircuit.evaluateNormEqualityCheck(inputVector:vBits:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v46 = a7;
  unint64_t v47 = a8;
  uint64_t v44 = a6;
  uint64_t v43 = a5;
  uint64_t v48 = a4;
  uint64_t v42 = a9;
  uint64_t v15 = *(void *)(a11 + 16);
  uint64_t v41 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](a1, a2);
  Swift::String v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v16, v19);
  uint64_t v45 = (uint64_t)&v40 - v21;
  MEMORY[0x270FA5388](v20, v22);
  uint64_t v24 = (char *)&v40 - v23;
  unint64_t v26 = *v25;
  uint64_t v28 = *(void *)(v11 + 40);
  uint64_t v27 = *(void *)(v11 + 48);
  long long v29 = *(_OWORD *)(v11 + 24);
  long long v56 = *(_OWORD *)(v11 + 8);
  long long v57 = v29;
  uint64_t v58 = v28;
  uint64_t v59 = v27;
  unint64_t v60 = v26;
  uint64_t v31 = *(void *)(v30 + 24);
  uint64_t v51 = v15;
  uint64_t v52 = v31;
  long long v53 = *(_OWORD *)(v30 + 32);
  uint64_t v32 = (void *)v53;
  uint64_t v54 = *(void *)(v30 + 48);
  uint64_t v55 = v11;
  type metadata accessor for PolynomialEvaluationGadget();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v33 = type metadata accessor for ParallelSum();
  uint64_t v34 = v49;
  ParallelSum.chunkEvaluateSum(_:for:_:)(a1, a2, a3, v48, &v60, (void (*)(void))partial apply for closure #1 in PINENormEqualityCheckCircuit.evaluateNormEqualityCheck(inputVector:vBits:for:), (uint64_t)v50, v33, (uint64_t)v24);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v34)
  {
    uint64_t v36 = v41;
    uint64_t v37 = swift_unknownObjectRetain();
    uint64_t v38 = v45;
    FieldElement.init(inputVector:)(v37, v44, v46, v47, v15, v32, v45);
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v18, v38, v15);
    FieldElement.init(other:)((uint64_t)v18, v15, (uint64_t)v32);
    dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
    uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v39(v38, v15);
    return ((uint64_t (*)(char *, uint64_t))v39)(v24, v15);
  }
  return result;
}

uint64_t closure #1 in PINENormEqualityCheckCircuit.evaluateNormEqualityCheck(inputVector:vBits:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14 = *(void *)(a7 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15, v18);
  unint64_t v47 = (char *)&v40 - v19;
  uint64_t result = ArraySlice.count.getter();
  if (result < 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v41 = a6;
  uint64_t v40 = v17;
  if (result)
  {
    Swift::Int v21 = 0;
    uint64_t v42 = v14 + 8;
    uint64_t v43 = v14 + 24;
    uint64_t v44 = result;
    uint64_t v45 = a3;
    while (1)
    {
      uint64_t v22 = ArraySlice.startIndex.getter();
      BOOL v23 = __OFADD__(v22, v21);
      uint64_t result = v22 + v21;
      if (v23) {
        break;
      }
      Swift::Int v46 = v21 + 1;
      ArraySlice.subscript.getter();
      uint64_t v24 = a4;
      uint64_t v25 = type metadata accessor for Array();
      Array._makeMutableAndUnique()();
      uint64_t v26 = *a5;
      Array._checkSubscript_mutating(_:)(v21);
      char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
      uint64_t v28 = v26 & 0xFFFFFFFFFFFFFF8;
      if ((isClassOrObjCExistentialType & 1) == 0) {
        uint64_t v28 = v26;
      }
      unint64_t v29 = v28
          + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))
          + *(void *)(v14 + 72) * v21;
      uint64_t v30 = v47;
      (*(void (**)(unint64_t, char *, uint64_t))(v14 + 24))(v29, v47, a7);
      uint64_t v31 = v25;
      a4 = v24;
      AggregateShare.share.modify(v31);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v30, a7);
      Swift::Int v21 = v46;
      if (v44 == v46) {
        goto LABEL_8;
      }
    }
    __break(1u);
    goto LABEL_17;
  }
LABEL_8:
  uint64_t result = ArraySlice.count.getter();
  uint64_t v32 = *(void *)(v41 + 48);
  if (v32 < result)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  Swift::Int v33 = result;
  if (result != v32)
  {
    if (result >= v32)
    {
LABEL_19:
      __break(1u);
      return result;
    }
    unint64_t v47 = *(char **)(a9 + 8);
    Swift::Int v46 = v14 + 40;
    uint64_t v34 = v40;
    do
    {
      Swift::Int v35 = v33 + 1;
      dispatch thunk of static AdditiveArithmetic.zero.getter();
      uint64_t v36 = type metadata accessor for Array();
      Array._makeMutableAndUnique()();
      uint64_t v37 = *a5;
      Array._checkSubscript_mutating(_:)(v33);
      char v38 = _swift_isClassOrObjCExistentialType();
      uint64_t v39 = v37 & 0xFFFFFFFFFFFFFF8;
      if ((v38 & 1) == 0) {
        uint64_t v39 = v37;
      }
      (*(void (**)(unint64_t, char *, uint64_t))(v14 + 40))(v39+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(void *)(v14 + 72) * v33, v34, a7);
      uint64_t result = AggregateShare.share.modify(v36);
      ++v33;
    }
    while (v32 != v35);
  }
  return result;
}

uint64_t protocol witness for PINECircuit.gadget.getter in conformance PINENormEqualityCheckCircuit<A, B>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 40);
  uint64_t v3 = *(void *)(v1 + 48);
  long long v4 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = v2;
  *(void *)(a1 + 40) = v3;
  return swift_bridgeObjectRetain();
}

ValueMetadata *protocol witness for static FullyLinearProof.identifier.getter in conformance PINENormEqualityCheckCircuit<A, B>@<X0>(char *a1@<X8>)
{
  return static PINECircuit.identifier.getter(a1);
}

uint64_t protocol witness for FullyLinearProof.outputLength.getter in conformance PINENormEqualityCheckCircuit<A, B>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return PINECircuit.outputLength.getter(a1, WitnessTable);
}

uint64_t protocol witness for FullyLinearProof.gadgetParameters.getter in conformance PINENormEqualityCheckCircuit<A, B>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return PINECircuit.gadgetParameters.getter(a1, WitnessTable);
}

void protocol witness for FullyLinearProof.encode(measurement:) in conformance PINENormEqualityCheckCircuit<A, B>()
{
}

uint64_t protocol witness for FullyLinearProof.decode(data:numOfMeasurements:) in conformance PINENormEqualityCheckCircuit<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  return protocol witness for FullyLinearProof.decode(data:numOfMeasurements:) in conformance PINENormEqualityCheckCircuit<A, B>(a1, a2, a3);
}

{
  uint64_t v3;
  uint64_t WitnessTable;
  uint64_t result;

  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = specialized PINECircuit.decode(data:numOfMeasurements:)(a1, a2, WitnessTable);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

uint64_t protocol witness for FullyLinearProof.truncate(measurement:) in conformance PINENormEqualityCheckCircuit<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return PINECircuit.truncate(measurement:)(a1, a2, WitnessTable);
}

uint64_t protocol witness for FullyLinearProof.evaluate(measurement:jointRand:numOfShares:for:) in conformance PINENormEqualityCheckCircuit<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return PINENormEqualityCheckCircuit.evaluate(measurement:jointRand:numOfShares:for:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for FullyLinearProof.evaluateGadget<A>(_:at:) in conformance PINENormEqualityCheckCircuit<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return PINECircuit.evaluateGadget<A>(_:at:)(WitnessTable, a2, a5, a3, WitnessTable, a4);
}

uint64_t protocol witness for FullyLinearProof.evaluateGadget(_:at:) in conformance PINENormEqualityCheckCircuit<A, B>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return PINECircuit.evaluateGadget(_:at:)(a1, a2, WitnessTable, a3);
}

uint64_t PINEMainCircuit.chunkLength.getter()
{
  return *(void *)v0;
}

__n128 PINEMainCircuit.gadget.getter@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(v1 + 40);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t PINENormEqualityCheckCircuit.parameters.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 64);
  uint64_t v5 = type metadata accessor for PINECircuitParameter();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t type metadata accessor for PINENormEqualityCheckCircuit()
{
  return swift_getGenericMetadata();
}

uint64_t PINEMainCircuit.init(l2NormBound:fractionalBitCount:measurementLength:chunkLength:alpha:wraparoundCheckCount:wraparoundCheckSuccessCount:)@<X0>(uint64_t a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return PINENormEqualityCheckCircuit.init(l2NormBound:fractionalBitCount:measurementLength:chunkLength:alpha:wraparoundCheckCount:wraparoundCheckSuccessCount:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, (void (*)(char *, int64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, double, uint64_t, uint64_t, uint64_t, uint64_t))PINEMainCircuit.init(l2NormBoundInt:fractionalBitCount:measurementLength:chunkLength:alpha:wraparoundCheckCount:wraparoundCheckSuccessCount:));
}

uint64_t PINENormEqualityCheckCircuit.init(l2NormBound:fractionalBitCount:measurementLength:chunkLength:alpha:wraparoundCheckCount:wraparoundCheckSuccessCount:)@<X0>(uint64_t a1@<X0>, int64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(char *, int64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, double, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v39 = a6;
  uint64_t v40 = a7;
  unsigned int v34 = a5;
  uint64_t v37 = a3;
  uint64_t v38 = a4;
  uint64_t v36 = a9;
  uint64_t v43 = a13;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v41 = AssociatedTypeWitness;
  uint64_t v42 = v20;
  uint64_t v22 = MEMORY[0x270FA5388](AssociatedTypeWitness, v21);
  uint64_t v24 = (char *)&v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22, v25);
  uint64_t v27 = (char *)&v33 - v26;
  int64_t v35 = a2;
  uint64_t v29 = v43;
  uint64_t v28 = v44;
  static PINECircuitParameter.l2NormBoundIntFrom(l2NormBound:fractionalBitCount:)(a1, a2, a8, a12, a14, (uint64_t)&v33 - v26);
  if (v28)
  {
    uint64_t v30 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(a1, v30);
  }
  else
  {
    uint64_t v44 = a1;
    Swift::Int v33 = a15;
    v34 &= 1u;
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v24, v27, v41);
    v33(v24, v35, v37, v38, v34, v39, v40, a8, a10, a11, a12, v29, a14);
    uint64_t v32 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(v44, v32);
    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v27, v41);
  }
}

uint64_t PINEMainCircuit.evaluate(measurement:jointRand:numOfShares:for:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v294 = a4;
  uint64_t v311 = a3;
  unint64_t v297 = a2;
  uint64_t v271 = a6;
  uint64_t v8 = *(void *)(a5 + 32);
  uint64_t v9 = *(void *)(a5 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v317 = v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v306 = AssociatedConformanceWitness;
  v312 = (void (*)(uint64_t, uint64_t))AssociatedTypeWitness;
  uint64_t v12 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  v316 = *(void (***)(char *, uint64_t, uint64_t))(v12 + 24);
  v310 = v316[2];
  uint64_t v309 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v309, v13);
  v308 = (char *)&v260 - v14;
  uint64_t v15 = swift_checkMetadataState();
  uint64_t v313 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v15, v16);
  unint64_t v278 = (char *)&v260 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v17, v19);
  v307 = (char *)&v260 - v21;
  uint64_t v23 = MEMORY[0x270FA5388](v20, v22);
  uint64_t v295 = (uint64_t)&v260 - v24;
  uint64_t v26 = MEMORY[0x270FA5388](v23, v25);
  uint64_t v314 = (uint64_t)&v260 - v27;
  uint64_t v29 = MEMORY[0x270FA5388](v26, v28);
  uint64_t v296 = (uint64_t)&v260 - v30;
  uint64_t v32 = MEMORY[0x270FA5388](v29, v31);
  v315 = (char *)&v260 - v33;
  uint64_t v35 = MEMORY[0x270FA5388](v32, v34);
  uint64_t v299 = (uint64_t)&v260 - v36;
  uint64_t v38 = MEMORY[0x270FA5388](v35, v37);
  uint64_t v318 = (uint64_t)&v260 - v39;
  uint64_t v41 = MEMORY[0x270FA5388](v38, v40);
  v305 = (void (**)(uint64_t, uint64_t, uint64_t))((char *)&v260 - v42);
  uint64_t v44 = MEMORY[0x270FA5388](v41, v43);
  v286 = (char *)&v260 - v45;
  uint64_t v47 = MEMORY[0x270FA5388](v44, v46);
  v289 = (char *)&v260 - v48;
  uint64_t v50 = MEMORY[0x270FA5388](v47, v49);
  v293 = (char *)&v260 - v51;
  uint64_t v53 = MEMORY[0x270FA5388](v50, v52);
  unint64_t v282 = (char *)&v260 - v54;
  uint64_t v56 = MEMORY[0x270FA5388](v53, v55);
  uint64_t v58 = (char *)&v260 - v57;
  v290 = *(void **)(v9 - 8);
  uint64_t v60 = MEMORY[0x270FA5388](v56, v59);
  v270 = (char *)&v260 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = MEMORY[0x270FA5388](v60, v62);
  uint64_t v280 = (uint64_t)&v260 - v64;
  uint64_t v66 = MEMORY[0x270FA5388](v63, v65);
  uint64_t v279 = (char *)&v260 - v67;
  uint64_t v69 = MEMORY[0x270FA5388](v66, v68);
  double v277 = (char *)&v260 - v70;
  uint64_t v72 = MEMORY[0x270FA5388](v69, v71);
  uint64_t v273 = (uint64_t)&v260 - v73;
  uint64_t v75 = MEMORY[0x270FA5388](v72, v74);
  uint64_t v272 = (uint64_t)&v260 - v76;
  uint64_t v78 = MEMORY[0x270FA5388](v75, v77);
  v276 = (char *)&v260 - v79;
  uint64_t v81 = MEMORY[0x270FA5388](v78, v80);
  double v275 = (char *)&v260 - v82;
  uint64_t v84 = MEMORY[0x270FA5388](v81, v83);
  uint64_t v281 = (char *)&v260 - v85;
  uint64_t v87 = MEMORY[0x270FA5388](v84, v86);
  v287 = (char *)&v260 - v88;
  uint64_t v90 = MEMORY[0x270FA5388](v87, v89);
  v292 = (char *)&v260 - v91;
  uint64_t v93 = MEMORY[0x270FA5388](v90, v92);
  v291 = (char *)&v260 - v94;
  uint64_t v96 = MEMORY[0x270FA5388](v93, v95);
  uint64_t v98 = (char *)&v260 - v97;
  uint64_t v100 = MEMORY[0x270FA5388](v96, v99);
  v285 = (char *)&v260 - v101;
  uint64_t v103 = MEMORY[0x270FA5388](v100, v102);
  v288 = (void (*)(uint64_t, char *, uint64_t))((char *)&v260 - v104);
  MEMORY[0x270FA5388](v103, v105);
  Swift::String v107 = (char *)&v260 - v106;
  uint64_t v283 = a1;
  uint64_t v108 = MEMORY[0x2612241C0](a1, v9);
  if (v108 != *(void *)(v298 + *(int *)(a5 + 64) + 16))
  {
    uint64_t v121 = v108;
    uint64_t v122 = v298;
    *(void *)&long long v319 = 0;
    *((void *)&v319 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    *(void *)&long long v319 = 0xD00000000000001BLL;
    *((void *)&v319 + 1) = 0x8000000260BFEB20;
    v331[0] = v121;
    v123._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v123);
    swift_bridgeObjectRelease();
    v124._countAndFlagsBits = 540877088;
    v124._object = (void *)0xE400000000000000;
    String.append(_:)(v124);
    v331[0] = *(void *)(v122 + *(int *)(a5 + 64) + 16);
LABEL_9:
    v128._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v128);
LABEL_10:
    swift_bridgeObjectRelease();
    long long v129 = v319;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_OWORD *)uint64_t v130 = v129;
    *(unsigned char *)(v130 + 16) = 2;
    return swift_willThrow();
  }
  uint64_t v274 = a5;
  uint64_t v109 = MEMORY[0x2612241C0](v297, v9);
  if (v109 != 3)
  {
    uint64_t v125 = v109;
    *(void *)&long long v319 = 0;
    *((void *)&v319 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    *(void *)&long long v319 = 0xD000000000000019;
    *((void *)&v319 + 1) = 0x8000000260BFEB80;
    v331[0] = v125;
    v126._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v126);
    swift_bridgeObjectRelease();
    v127._countAndFlagsBits = 540877088;
    v127._object = (void *)0xE400000000000000;
    String.append(_:)(v127);
    v331[0] = 3;
    goto LABEL_9;
  }
  v269 = v107;
  v267 = v98;
  uint64_t v110 = v317;
  uint64_t v266 = type metadata accessor for GadgetEvaluation();
  uint64_t v111 = MEMORY[0x2612241C0](v294);
  uint64_t v112 = v274;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v114 = *(void *)(PINECircuit.gadgetParameters.getter(v112, WitnessTable) + 16);
  swift_bridgeObjectRelease();
  if (v111 != v114)
  {
    *(void *)&long long v319 = 0;
    *((void *)&v319 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    *(void *)&long long v319 = 0x2064696C61766E49;
    *((void *)&v319 + 1) = 0xEF203A746E756F63;
    v331[0] = v111;
    v132._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v132);
    swift_bridgeObjectRelease();
    v133._countAndFlagsBits = 540877088;
    v133._object = (void *)0xE400000000000000;
    String.append(_:)(v133);
    PINECircuit.gadgetParameters.getter(v112, WitnessTable);
    v134._countAndFlagsBits = MEMORY[0x261224130]();
    String.append(_:)(v134);
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  uint64_t v264 = WitnessTable;
  *(void *)&long long v319 = v311;
  v303 = (void (*)(uint64_t, char *, uint64_t))lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of BinaryInteger.init<A>(_:)();
  uint64_t v115 = (uint64_t)v288;
  FieldElement.init(_:)((uint64_t)v58, v9, v110);
  uint64_t v116 = (void (*)(uint64_t, uint64_t, uint64_t))v290[2];
  uint64_t v117 = (uint64_t)v285;
  unint64_t v263 = v290 + 2;
  uint64_t v260 = v116;
  v116((uint64_t)v285, v115, v9);
  FieldElement.init(other:)(v117, v9, v110);
  uint64_t v118 = *(void (**)(uint64_t, uint64_t))(v110 + 88);
  uint64_t v262 = v110 + 88;
  v118(v9, v110);
  char v119 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v265 = v9;
  v261 = v118;
  if (v119)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
    {
      uint64_t v120 = dispatch thunk of BinaryInteger._lowWord.getter();
      goto LABEL_20;
    }
    *(void *)&long long v319 = 0;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v137 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v138 = v313;
    (*(void (**)(char *, uint64_t))(v313 + 8))(v58, v15);
    if (v137)
    {
LABEL_70:
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  else
  {
    char v135 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v136 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v135)
    {
      if (v136 <= 64)
      {
        swift_getAssociatedConformanceWitness();
        dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        unint64_t v139 = (unint64_t)v293;
        char v140 = dispatch thunk of static Comparable.>= infix(_:_:)();
        uint64_t v141 = v313;
        uint64_t v142 = *(void (**)(char *, uint64_t))(v313 + 8);
        v142(v58, v15);
        uint64_t v143 = *(void (**)(char *, unint64_t, uint64_t))(v141 + 16);
        uint64_t v144 = v307;
        v143(v307, v139, v15);
        if (v140)
        {
          uint64_t v145 = dispatch thunk of BinaryInteger._lowWord.getter();
          v142(v144, v15);
          uint64_t v110 = v317;
          uint64_t v138 = v313;
          if (!v145) {
            goto LABEL_70;
          }
        }
        else
        {
          v142(v144, v15);
          uint64_t v110 = v317;
          uint64_t v138 = v313;
        }
        goto LABEL_26;
      }
      *(void *)&long long v319 = 0;
    }
    else
    {
      if (v136 < 64)
      {
        uint64_t v120 = dispatch thunk of BinaryInteger._lowWord.getter();
        uint64_t v110 = v317;
LABEL_20:
        uint64_t v138 = v313;
        if (!v120) {
          goto LABEL_70;
        }
        goto LABEL_26;
      }
      *(void *)&long long v319 = 0;
    }
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v146 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v138 = v313;
    (*(void (**)(char *, uint64_t))(v313 + 8))(v58, v15);
    uint64_t v110 = v317;
    if (v146) {
      goto LABEL_70;
    }
  }
LABEL_26:
  uint64_t v302 = swift_checkMetadataState();
  (*(void (**)(void))(v306 + 24))();
  uint64_t v304 = swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  Swift::String v147 = v286;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  uint64_t v148 = (uint64_t)v289;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  uint64_t v149 = v138 + 8;
  unint64_t v150 = v147;
  uint64_t v151 = *(void (**)(char *, uint64_t))(v138 + 8);
  v151(v150, v15);
  v151(v58, v15);
  double v152 = *(char **)(v138 + 16);
  ((void (*)(void, char *, uint64_t))v152)(v305, v293, v15);
  uint64_t v313 = v138 + 16;
  uint64_t v153 = v148;
  uint64_t v154 = v302;
  v307 = v152;
  ((void (*)(uint64_t, uint64_t, uint64_t))v152)(v318, v153, v15);
  *(void *)&long long v319 = 1;
  dispatch thunk of BinaryInteger.init<A>(_:)();
  uint64_t v155 = v306;
  (*(void (**)(char *, uint64_t, uint64_t))(v306 + 64))(v58, v154, v306);
  v151(v58, v15);
  uint64_t v301 = v155 + 56;
  v316 = (void (**)(char *, uint64_t, uint64_t))(v313 + 16);
  uint64_t v156 = v318;
  v268 = v58;
  uint64_t v300 = v12;
  v312 = (void (*)(uint64_t, uint64_t))v151;
  uint64_t v311 = v149;
  while (1)
  {
    uint64_t v164 = (uint64_t)v315;
    ((void (*)(char *, uint64_t, uint64_t))v307)(v315, v156, v15);
    if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
    {
      if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 128)
      {
        lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
        long long v319 = 0uLL;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        char v176 = dispatch thunk of static Equatable.== infix(_:_:)();
        v151(v58, v15);
        v151((char *)v164, v15);
        goto LABEL_44;
      }
      unint64_t v170 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
      goto LABEL_39;
    }
    char v165 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v166 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v165 & 1) == 0) {
      break;
    }
    if (v166 > 128) {
      goto LABEL_43;
    }
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    uint64_t v164 = (uint64_t)v315;
    char v167 = dispatch thunk of static Comparable.>= infix(_:_:)();
    v151(v58, v15);
    uint64_t v168 = v296;
    ((void (*)(uint64_t, uint64_t, uint64_t))v307)(v296, v164, v15);
    if ((v167 & 1) == 0)
    {
      v151((char *)v168, v15);
      v151((char *)v164, v15);
      goto LABEL_45;
    }
    unint64_t v169 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
    static FixedWidthInteger._truncatingInit<A>(_:)(v168, (uint64_t)&type metadata for _UInt128, v15, v169, v12, (uint64_t)&v319);
    v151((char *)v168, v15);
LABEL_40:
    uint64_t v172 = *((void *)&v319 + 1);
    uint64_t v171 = v319;
    v151((char *)v164, v15);
    uint64_t v173 = v172 | v171;
    uint64_t v110 = v317;
    uint64_t v174 = v318;
    uint64_t v175 = v316;
    if (!v173) {
      goto LABEL_64;
    }
LABEL_45:
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    uint64_t v178 = v314;
    dispatch thunk of static BinaryInteger.& infix(_:_:)();
    v151(v58, v15);
    if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
    {
      if (dispatch thunk of BinaryInteger.bitWidth.getter() < 128)
      {
        unint64_t v183 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
        static FixedWidthInteger._truncatingInit<A>(_:)(v178, (uint64_t)&type metadata for _UInt128, v15, v183, v12, (uint64_t)&v319);
        uint64_t v184 = v178;
        uint64_t v186 = *((void *)&v319 + 1);
        uint64_t v185 = v319;
        goto LABEL_54;
      }
      lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
      long long v319 = 0uLL;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
LABEL_60:
      char v182 = dispatch thunk of static Equatable.== infix(_:_:)();
      v151(v58, v15);
      v151((char *)v178, v15);
      uint64_t v157 = v306;
      uint64_t v158 = (void (*)(void, void))v305;
      uint64_t v159 = v302;
      goto LABEL_61;
    }
    char v179 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v180 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v179 & 1) == 0)
    {
      if (v180 < 128)
      {
        unint64_t v187 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
        uint64_t v188 = v314;
        static FixedWidthInteger._truncatingInit<A>(_:)(v314, (uint64_t)&type metadata for _UInt128, v15, v187, v12, (uint64_t)&v319);
        uint64_t v186 = *((void *)&v319 + 1);
        uint64_t v185 = v319;
        uint64_t v184 = v188;
LABEL_54:
        v151((char *)v184, v15);
        uint64_t v189 = v186 | v185;
        uint64_t v157 = v306;
        uint64_t v158 = (void (*)(void, void))v305;
        uint64_t v159 = v302;
LABEL_55:
        double v160 = (void (**)(uint64_t, char *, uint64_t))v316;
        if (v189) {
          goto LABEL_28;
        }
        goto LABEL_29;
      }
      lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
      long long v319 = 0uLL;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      uint64_t v178 = v314;
      goto LABEL_60;
    }
    if (v180 <= 128)
    {
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      uint64_t v190 = v314;
      char v191 = dispatch thunk of static Comparable.>= infix(_:_:)();
      v151(v58, v15);
      uint64_t v192 = v295;
      ((void (*)(uint64_t, uint64_t, uint64_t))v307)(v295, v190, v15);
      if ((v191 & 1) == 0)
      {
        v151((char *)v192, v15);
        v151((char *)v190, v15);
        uint64_t v157 = v306;
        uint64_t v158 = (void (*)(void, void))v305;
        uint64_t v159 = v302;
        uint64_t v58 = v268;
        double v160 = (void (**)(uint64_t, char *, uint64_t))v316;
LABEL_28:
        uint64_t v161 = v299;
        (*(void (**)(uint64_t, void (*)(void, void), uint64_t, uint64_t))(v157 + 56))(v299, v158, v159, v157);
        v312(v161, v15);
        (*v160)(v161, v58, v15);
        goto LABEL_29;
      }
      unint64_t v193 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
      static FixedWidthInteger._truncatingInit<A>(_:)(v192, (uint64_t)&type metadata for _UInt128, v15, v193, v12, (uint64_t)&v319);
      v151((char *)v192, v15);
      uint64_t v195 = *((void *)&v319 + 1);
      uint64_t v194 = v319;
      v151((char *)v190, v15);
      uint64_t v189 = v195 | v194;
      uint64_t v157 = v306;
      uint64_t v158 = (void (*)(void, void))v305;
      uint64_t v159 = v302;
      uint64_t v58 = v268;
      goto LABEL_55;
    }
    lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
    long long v319 = 0uLL;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    uint64_t v181 = v314;
    char v182 = dispatch thunk of static Equatable.== infix(_:_:)();
    v151(v58, v15);
    v151((char *)v181, v15);
    uint64_t v157 = v306;
    uint64_t v159 = v302;
    uint64_t v158 = (void (*)(void, void))v305;
LABEL_61:
    double v160 = (void (**)(uint64_t, char *, uint64_t))v316;
    if ((v182 & 1) == 0) {
      goto LABEL_28;
    }
LABEL_29:
    (*(void (**)(void (*)(void, void), void (*)(void, void), uint64_t, uint64_t))(v157 + 56))(v158, v158, v159, v157);
    uint64_t v151 = (void (*)(char *, uint64_t))v312;
    v312((uint64_t)v158, v15);
    char v162 = *v160;
    (*v160)((uint64_t)v158, v58, v15);
    *(void *)&long long v319 = 1;
    uint64_t v163 = v318;
    uint64_t v12 = v300;
    dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)();
    v151((char *)v163, v15);
    v162(v163, v58, v15);
    uint64_t v110 = v317;
    uint64_t v156 = v163;
  }
  if (v166 < 128)
  {
    unint64_t v170 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
    uint64_t v164 = (uint64_t)v315;
LABEL_39:
    static FixedWidthInteger._truncatingInit<A>(_:)(v164, (uint64_t)&type metadata for _UInt128, v15, v170, v12, (uint64_t)&v319);
    goto LABEL_40;
  }
LABEL_43:
  lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
  long long v319 = 0uLL;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  uint64_t v177 = v315;
  char v176 = dispatch thunk of static Equatable.== infix(_:_:)();
  v151(v58, v15);
  v151(v177, v15);
  uint64_t v110 = v317;
LABEL_44:
  uint64_t v174 = v318;
  uint64_t v175 = v316;
  if ((v176 & 1) == 0) {
    goto LABEL_45;
  }
LABEL_64:
  v151((char *)v174, v15);
  v151((char *)v305, v15);
  uint64_t v196 = v282;
  (*v175)(v282, v299, v15);
  v151(v289, v15);
  v151(v293, v15);
  uint64_t v197 = *(char **)(v110 + 96);
  uint64_t v198 = v265;
  uint64_t v313 = v110 + 96;
  v307 = v197;
  ((void (*)(char *, uint64_t, uint64_t))v197)(v196, v265, v110);
  v315 = (char *)v290[1];
  v316 = (void (**)(char *, uint64_t, uint64_t))(v290 + 1);
  ((void (*)(void (*)(uint64_t, char *, uint64_t), uint64_t))v315)(v288, v198);
  Array.subscript.getter();
  Array.subscript.getter();
  Array.subscript.getter();
  *(void *)&long long v319 = v283;
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  v331[0] = ArraySlice.init<A>(_:)();
  v331[1] = v199;
  v331[2] = v200;
  v331[3] = v201;
  PINECircuit.unpack(encodedMeasurement:)((uint64_t)v331, v274, v264, &v319);
  uint64_t v202 = v322;
  uint64_t v203 = v323;
  uint64_t v318 = v323;
  uint64_t v204 = v324;
  uint64_t v205 = v325;
  uint64_t v206 = v326;
  v305 = (void (**)(uint64_t, uint64_t, uint64_t))v327;
  v303 = v328;
  uint64_t v300 = v329;
  swift_unknownObjectRelease();
  v330[0] = v202;
  v330[1] = v203;
  v330[2] = v204;
  v330[3] = v205;
  swift_unknownObjectRetain();
  uint64_t v314 = v206;
  swift_unknownObjectRetain();
  Array.subscript.getter();
  unint64_t v207 = v319;
  unint64_t v332 = v319;
  uint64_t v208 = v274;
  uint64_t v209 = v284;
  PINEMainCircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:)(v202, v318, v204, v205, (uint64_t)v267, (uint64_t)v269, v274, (uint64_t)v287);
  uint64_t v318 = v209;
  if (v209)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease_n();
    outlined consume of GadgetEvaluation<Field32>(v207);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v210 = (void (*)(uint64_t, uint64_t))v315;
    ((void (*)(char *, uint64_t))v315)(v292, v198);
    v210((uint64_t)v291, v198);
    v210((uint64_t)v267, v198);
    return ((uint64_t (*)(char *, uint64_t))v210)(v269, v198);
  }
  else
  {
    outlined consume of GadgetEvaluation<Field32>(v207);
    swift_unknownObjectRelease();
    PINECircuit.unpack(bitsSlice:)((uint64_t)v330, v208, v264, &v319);
    uint64_t v296 = *((void *)&v319 + 1);
    uint64_t v211 = v319;
    uint64_t v295 = v320;
    uint64_t v212 = v322;
    v293 = (char *)v321;
    uint64_t v213 = v323;
    uint64_t v214 = v324;
    uint64_t v215 = v208;
    unint64_t v216 = v325;
    uint64_t v299 = v326;
    v289 = v327;
    v288 = v328;
    uint64_t v284 = v329;
    Array.subscript.getter();
    unint64_t v297 = v319;
    uint64_t v259 = v215;
    uint64_t v217 = (uint64_t)v281;
    uint64_t v218 = v318;
    PINEMainCircuit.evaluateNormRangeCheck(vBits:uBits:inverseNumOfShares:for:)(v296, v295, (unint64_t)v293, v212, v213, v214, v216, (uint64_t)v281, (uint64_t)v269, v258, v259);
    if (v218)
    {
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease_n();
      outlined consume of GadgetEvaluation<Field32>(v297);
      uint64_t v219 = v265;
      uint64_t v220 = (void (*)(char *, uint64_t))v315;
      ((void (*)(char *, uint64_t))v315)(v287, v265);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v220(v292, v219);
      v220(v291, v219);
      v220(v267, v219);
      return ((uint64_t (*)(char *, uint64_t))v220)(v269, v219);
    }
    else
    {
      uint64_t v295 = v211;
      uint64_t v296 = v212;
      outlined consume of GadgetEvaluation<Field32>(v297);
      Array.subscript.getter();
      unint64_t v297 = v319;
      unint64_t v332 = v319;
      uint64_t v221 = v272;
      uint64_t v222 = v273;
      PINEMainCircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:)(v272, v273, v299, (uint64_t)v289, (uint64_t)v288, v284, v314, (uint64_t)v305, v303, v300, (uint64_t)v291, (uint64_t)v269, &v332, v274);
      uint64_t v223 = v265;
      uint64_t v318 = 0;
      outlined consume of GadgetEvaluation<Field32>(v297);
      swift_unknownObjectRelease();
      uint64_t v224 = (void (*)(char *, uint64_t, uint64_t))v290[4];
      v224(v275, v221, v223);
      v224(v276, v222, v223);
      uint64_t v225 = v280;
      v260(v280, v217, v223);
      uint64_t v226 = v317;
      FieldElement.init(other:)(v225, v223, v317);
      uint64_t v227 = v261;
      v261(v223, v226);
      v227(v223, v226);
      v305 = *(void (***)(uint64_t, uint64_t, uint64_t))(v306 + 56);
      uint64_t v228 = (uint64_t)v268;
      uint64_t v229 = v286;
      v230 = v278;
      ((void (*)(char *, char *))v305)(v286, v278);
      uint64_t v231 = (void (*)(char *, uint64_t))v312;
      v312((uint64_t)v230, v15);
      v231(v229, v15);
      uint64_t v232 = v279;
      uint64_t v233 = v317;
      ((void (*)(uint64_t, uint64_t, uint64_t))v307)(v228, v223, v317);
      uint64_t v234 = v280;
      v235 = (void (*)(char *, char *, uint64_t))v260;
      v260(v280, (uint64_t)v287, v223);
      FieldElement.init(other:)(v234, v223, v233);
      v303 = *(void (**)(uint64_t, char *, uint64_t))(v233 + 8);
      dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
      ((void (*)(char *, uint64_t))v315)(v232, v223);
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      uint64_t v236 = v317;
      FieldElement.pow(_:)(v228, v223, v317, v280);
      v312(v228, v15);
      uint64_t v237 = (uint64_t)v270;
      v235(v270, v275, v223);
      FieldElement.init(other:)(v237, v223, v236);
      v238 = v286;
      uint64_t v239 = v261;
      v261(v223, v236);
      v240 = v278;
      v239(v223, v236);
      uint64_t v241 = v268;
      ((void (*)(char *, char *))v305)(v238, v240);
      unint64_t v242 = (void (*)(char *, uint64_t))v312;
      v312((uint64_t)v240, v15);
      v242(v238, v15);
      uint64_t v243 = v241;
      uint64_t v244 = (uint64_t)v279;
      ((void (*)(char *, uint64_t, uint64_t))v307)(v243, v223, v236);
      v245 = (void (*)(uint64_t, uint64_t))v315;
      ((void (*)(uint64_t, uint64_t))v315)(v280, v223);
      v246 = v277;
      dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
      v245(v244, v223);
      v245((uint64_t)v246, v223);
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      uint64_t v247 = (uint64_t)v268;
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      uint64_t v248 = v317;
      FieldElement.pow(_:)(v247, v223, v317, v244);
      v312(v247, v15);
      uint64_t v249 = v280;
      v260(v280, (uint64_t)v276, v223);
      FieldElement.init(other:)(v249, v223, v248);
      v250 = v286;
      v251 = v261;
      v261(v223, v248);
      v252 = v278;
      v251(v223, v248);
      uint64_t v253 = v268;
      ((void (*)(char *, char *))v305)(v250, v252);
      uint64_t v254 = (void (*)(char *, uint64_t))v312;
      v312((uint64_t)v252, v15);
      v254(v250, v15);
      uint64_t v255 = v277;
      ((void (*)(char *, uint64_t, uint64_t))v307)(v253, v223, v248);
      uint64_t v256 = (void (*)(char *, uint64_t))v315;
      ((void (*)(char *, uint64_t))v315)(v279, v223);
      unint64_t v257 = v285;
      dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v256(v255, v223);
      v256(v257, v223);
      v256(v276, v223);
      v256(v275, v223);
      v256(v281, v223);
      v256(v287, v223);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v256(v292, v223);
      v256(v291, v223);
      v256(v267, v223);
      return ((uint64_t (*)(char *, uint64_t))v256)(v269, v223);
    }
  }
}

uint64_t PINEMainCircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v24 = a6;
  uint64_t v29 = a4;
  uint64_t v28 = a3;
  uint64_t v27 = a2;
  uint64_t v26 = a1;
  uint64_t v25 = a8;
  uint64_t v11 = *(void *)(a7 + 16);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v16 = *v15;
  uint64_t v18 = *(void *)(v17 + 32);
  (*(void (**)(uint64_t, uint64_t))(v18 + 72))(v11, v18);
  long long v19 = *(_OWORD *)(v8 + 24);
  long long v39 = *(_OWORD *)(v8 + 8);
  long long v40 = v19;
  long long v41 = *(_OWORD *)(v8 + 40);
  unint64_t v42 = v16;
  uint64_t v20 = *(void *)(a7 + 24);
  uint64_t v31 = v11;
  uint64_t v32 = v20;
  uint64_t v33 = v18;
  long long v34 = *(_OWORD *)(a7 + 40);
  uint64_t v35 = v14;
  uint64_t v36 = v24;
  uint64_t v37 = a5;
  uint64_t v38 = v8;
  type metadata accessor for MultiplicationGadget();
  swift_getWitnessTable();
  uint64_t v21 = type metadata accessor for ParallelSum();
  ParallelSum.chunkEvaluateSum(_:for:_:)(v26, v27, v28, v29, &v42, (void (*)(void))partial apply for closure #1 in PINEMainCircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:), (uint64_t)v30, v21, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t PINEMainCircuit.evaluateNormRangeCheck(vBits:uBits:inverseNumOfShares:for:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, unint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v77 = a6;
  unint64_t v78 = a7;
  uint64_t v75 = a4;
  uint64_t v76 = a5;
  uint64_t v82 = (char *)a2;
  unint64_t v83 = a3;
  uint64_t v81 = (char *)a1;
  uint64_t v73 = a8;
  uint64_t v11 = *(void **)(a11 + 32);
  uint64_t v67 = a11;
  uint64_t v12 = *(void *)(a11 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v74 = AssociatedTypeWitness;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v70 = *(void *)(v14 - 8);
  uint64_t v71 = v14;
  uint64_t v16 = MEMORY[0x270FA5388](v14, v15);
  uint64_t v68 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16, v18);
  uint64_t v21 = (char *)&v64 - v20;
  uint64_t v23 = MEMORY[0x270FA5388](v19, v22);
  uint64_t v25 = (char *)&v64 - v24;
  uint64_t v79 = *(void *)(v12 - 8);
  uint64_t v27 = MEMORY[0x270FA5388](v23, v26);
  uint64_t v29 = (char *)&v64 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = MEMORY[0x270FA5388](v27, v30);
  uint64_t v33 = (char *)&v64 - v32;
  uint64_t v35 = MEMORY[0x270FA5388](v31, v34);
  uint64_t v37 = (char *)&v64 - v36;
  uint64_t v39 = MEMORY[0x270FA5388](v35, v38);
  uint64_t v80 = (char *)&v64 - v40;
  MEMORY[0x270FA5388](v39, v41);
  uint64_t v43 = (char *)&v64 - v42;
  uint64_t v44 = swift_unknownObjectRetain();
  uint64_t v45 = v88;
  uint64_t result = FieldElement.init(inputVector:)(v44, (uint64_t)v81, (uint64_t)v82, v83, v12, v11, (uint64_t)v43);
  if (!v45)
  {
    uint64_t v65 = v29;
    uint64_t v66 = v37;
    uint64_t v88 = v43;
    uint64_t v81 = v25;
    uint64_t v82 = v21;
    uint64_t v47 = v79;
    uint64_t v48 = swift_unknownObjectRetain();
    FieldElement.init(inputVector:)(v48, v76, v77, v78, v12, v11, (uint64_t)v80);
    unint64_t v83 = 0;
    uint64_t v77 = a9;
    uint64_t v49 = (uint64_t)v11;
    uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
    v50(v33, v88, v12);
    FieldElement.init(other:)((uint64_t)v33, v12, (uint64_t)v11);
    unint64_t v78 = v11[1];
    dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
    uint64_t v51 = *(int *)(v67 + 64);
    uint64_t v52 = *(void *)(v67 + 24);
    uint64_t v84 = v12;
    uint64_t v85 = v52;
    uint64_t v86 = v49;
    long long v87 = *(_OWORD *)(v67 + 40);
    uint64_t v53 = (char *)(v69 + *(int *)(type metadata accessor for PINECircuitParameter() + 84) + v51);
    uint64_t v54 = (uint64_t)v65;
    v50(v65, v53, v12);
    FieldElement.init(other:)(v54, v12, v49);
    uint64_t v55 = swift_checkMetadataState();
    uint64_t v56 = *(void (**)(uint64_t, uint64_t))(v49 + 88);
    uint64_t v57 = (uint64_t)v82;
    v56(v12, v49);
    uint64_t v58 = v68;
    v56(v12, v49);
    uint64_t v59 = (uint64_t)v81;
    (*(void (**)(uint64_t, char *, uint64_t))(AssociatedConformanceWitness + 56))(v57, v58, v55);
    uint64_t v60 = v71;
    uint64_t v61 = *(void (**)(char *, uint64_t))(v70 + 8);
    v61(v58, v71);
    v61((char *)v57, v60);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 96))(v59, v12, v49);
    uint64_t v62 = v66;
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    uint64_t v63 = *(void (**)(char *, uint64_t))(v79 + 8);
    v63(v33, v12);
    v63(v62, v12);
    v63(v80, v12);
    return ((uint64_t (*)(char *, uint64_t))v63)(v88, v12);
  }
  return result;
}

uint64_t PINEMainCircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(uint64_t, char *, uint64_t), uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, uint64_t a14)
{
  uint64_t v15 = v14;
  uint64_t v106 = (char *)a8;
  uint64_t v105 = a7;
  uint64_t v102 = a6;
  uint64_t v100 = a5;
  uint64_t v99 = a4;
  uint64_t v98 = a3;
  uint64_t v93 = a2;
  uint64_t v85 = a1;
  uint64_t v104 = a9;
  uint64_t v103 = a10;
  uint64_t v111 = a12;
  uint64_t v101 = a11;
  uint64_t v16 = *(void *)(a14 + 32);
  uint64_t v17 = *(void *)(a14 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v89 = AssociatedTypeWitness;
  uint64_t v91 = swift_getAssociatedTypeWitness();
  uint64_t v90 = *(void *)(v91 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v91, v19);
  uint64_t v88 = (char *)&v81 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v20, v22);
  long long v87 = (char *)&v81 - v24;
  uint64_t v26 = MEMORY[0x270FA5388](v23, v25);
  uint64_t v86 = (char *)&v81 - v27;
  uint64_t v108 = *(void *)(v17 - 8);
  uint64_t v29 = MEMORY[0x270FA5388](v26, v28);
  uint64_t v84 = (char *)&v81 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = MEMORY[0x270FA5388](v29, v31);
  uint64_t v94 = (uint64_t)&v81 - v33;
  uint64_t v35 = MEMORY[0x270FA5388](v32, v34);
  uint64_t v96 = (char *)&v81 - v36;
  uint64_t v38 = MEMORY[0x270FA5388](v35, v37);
  uint64_t v95 = (char *)&v81 - v39;
  uint64_t v41 = MEMORY[0x270FA5388](v38, v40);
  uint64_t v110 = (uint64_t)&v81 - v42;
  uint64_t v44 = MEMORY[0x270FA5388](v41, v43);
  uint64_t v109 = (char *)&v81 - v45;
  uint64_t v47 = MEMORY[0x270FA5388](v44, v46);
  uint64_t v112 = (char *)&v81 - v48;
  MEMORY[0x270FA5388](v47, v49);
  uint64_t v51 = (char *)&v81 - v50;
  unint64_t v97 = *a13;
  uint64_t v52 = v16;
  (*(void (**)(uint64_t, uint64_t))(v16 + 72))(v17, v16);
  uint64_t v134 = 0;
  uint64_t v53 = v14 + *(int *)(a14 + 64);
  uint64_t v54 = *(void *)(a14 + 24);
  uint64_t v56 = *(void *)(a14 + 40);
  uint64_t v55 = *(void *)(a14 + 48);
  *(void *)&long long v131 = v17;
  *((void *)&v131 + 1) = v54;
  *(void *)&long long v132 = v52;
  *((void *)&v132 + 1) = v56;
  *(void *)&long long v133 = v55;
  uint64_t v81 = type metadata accessor for PINECircuitParameter();
  uint64_t v82 = v53;
  PINECircuitParameter.wraparoundCheckLowerBound.getter(v81, v57);
  uint64_t v58 = v109;
  uint64_t v83 = *(void *)(v52 + 8);
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  long long v59 = *(_OWORD *)(v15 + 24);
  long long v131 = *(_OWORD *)(v15 + 8);
  long long v132 = v59;
  long long v133 = *(_OWORD *)(v15 + 40);
  unint64_t v130 = v97;
  uint64_t v114 = v17;
  uint64_t v115 = v54;
  uint64_t v116 = v52;
  uint64_t v117 = v56;
  uint64_t v118 = v55;
  uint64_t v119 = v98;
  uint64_t v120 = v99;
  uint64_t v121 = v100;
  uint64_t v122 = v102;
  Swift::String v123 = &v134;
  uint64_t v124 = v15;
  uint64_t v125 = v112;
  uint64_t v126 = v111;
  Swift::String v127 = v51;
  Swift::String v128 = v58;
  uint64_t v129 = v101;
  type metadata accessor for MultiplicationGadget();
  swift_getWitnessTable();
  uint64_t v60 = type metadata accessor for ParallelSum();
  uint64_t v61 = v110;
  uint64_t v62 = v107;
  ParallelSum.chunkEvaluateSum(_:for:_:)(v105, (uint64_t)v106, (uint64_t)v104, v103, &v130, (void (*)(void))partial apply for closure #1 in PINEMainCircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:), (uint64_t)v113, v60, v110);
  if (v62)
  {
    uint64_t v63 = *(void (**)(char *, uint64_t))(v108 + 8);
    v63(v112, v17);
    v63(v58, v17);
    return ((uint64_t (*)(char *, uint64_t))v63)(v51, v17);
  }
  else
  {
    uint64_t v106 = v51;
    uint64_t v65 = v108;
    uint64_t v66 = v108 + 16;
    uint64_t v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(v108 + 16);
    v67(v85, v61, v17);
    v67((uint64_t)v95, (uint64_t)v58, v17);
    uint64_t v104 = (void (*)(uint64_t, char *, uint64_t))v67;
    uint64_t v105 = v66;
    uint64_t v68 = v94;
    FieldElement.init(_:)(*(void *)(v82 + *(int *)(v81 + 96)), v17, v52, v94);
    uint64_t v69 = (uint64_t)v84;
    v67((uint64_t)v84, v68, v17);
    FieldElement.init(other:)(v69, v17, v52);
    uint64_t v70 = swift_checkMetadataState();
    uint64_t v107 = 0;
    uint64_t v71 = *(void (**)(uint64_t, uint64_t))(v52 + 88);
    uint64_t v72 = v87;
    v71(v17, v52);
    uint64_t v73 = v88;
    v71(v17, v52);
    uint64_t v74 = v86;
    (*(void (**)(char *, char *, uint64_t))(AssociatedConformanceWitness + 56))(v72, v73, v70);
    uint64_t v75 = *(void (**)(char *, uint64_t))(v90 + 8);
    uint64_t v76 = v91;
    v75(v73, v91);
    v75(v72, v76);
    uint64_t v77 = v96;
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 96))(v74, v17, v52);
    unint64_t v78 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
    uint64_t v79 = v94;
    v78(v94, v17);
    uint64_t v80 = v95;
    v104(v79, v95, v17);
    FieldElement.init(other:)(v79, v17, v52);
    dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
    v78((uint64_t)v77, v17);
    v78((uint64_t)v80, v17);
    v78(v110, v17);
    v78((uint64_t)v112, v17);
    v78((uint64_t)v109, v17);
    return ((uint64_t (*)(char *, uint64_t))v78)(v106, v17);
  }
}

uint64_t closure #1 in PINEMainCircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, unsigned char *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  uint64_t v110 = a8;
  uint64_t v109 = a7;
  uint64_t v138 = a6;
  uint64_t v111 = a5;
  swift_getAssociatedTypeWitness();
  uint64_t v112 = a12;
  unint64_t v16 = a1;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v19 = MEMORY[0x270FA5388](AssociatedTypeWitness, v18);
  uint64_t v136 = &v101[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v22 = MEMORY[0x270FA5388](v19, v21);
  char v135 = &v101[-v23];
  uint64_t v25 = MEMORY[0x270FA5388](v22, v24);
  uint64_t v134 = &v101[-v26];
  uint64_t v113 = *(void *)(a10 - 8);
  uint64_t v28 = MEMORY[0x270FA5388](v25, v27);
  uint64_t v103 = &v101[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v31 = MEMORY[0x270FA5388](v28, v30);
  uint64_t v102 = &v101[-v32];
  uint64_t v34 = MEMORY[0x270FA5388](v31, v33);
  uint64_t v108 = &v101[-v35];
  uint64_t v37 = MEMORY[0x270FA5388](v34, v36);
  uint64_t v107 = &v101[-v38];
  uint64_t v40 = MEMORY[0x270FA5388](v37, v39);
  long long v133 = &v101[-v41];
  uint64_t v43 = MEMORY[0x270FA5388](v40, v42);
  long long v132 = &v101[-v44];
  MEMORY[0x270FA5388](v43, v45);
  char v140 = &v101[-v46];
  unint64_t v141 = v16;
  uint64_t v142 = a3;
  uint64_t v143 = a4;
  uint64_t result = ArraySlice.count.getter();
  if (result < 0) {
    goto LABEL_25;
  }
  uint64_t v48 = result;
  uint64_t v49 = v140;
  if (result)
  {
    uint64_t v131 = swift_checkMetadataState();
    uint64_t v50 = 0;
    uint64_t v129 = (void (*)(unsigned char *, uint64_t, void *))v112[12];
    unint64_t v130 = v112 + 12;
    Swift::String v127 = (void (*)(uint64_t, void *))v112[11];
    Swift::String v128 = v112 + 11;
    uint64_t v125 = *(void (**)(unsigned char *, unsigned char *))(AssociatedConformanceWitness + 56);
    uint64_t v126 = AssociatedConformanceWitness + 56;
    Swift::String v123 = (void (**)(unsigned char *, uint64_t))(v17 + 8);
    uint64_t v124 = v113 + 16;
    uint64_t v122 = v113 + 8;
    uint64_t v104 = v113 + 40;
    uint64_t v51 = 1;
    uint64_t v106 = a2;
    uint64_t v105 = v48;
    while (1)
    {
      uint64_t v52 = ArraySlice.startIndex.getter();
      BOOL v53 = __OFADD__(v52, v50);
      uint64_t result = v52 + v50;
      if (v53) {
        break;
      }
      uint64_t result = ArraySlice.subscript.getter();
      if (v50 == 0x4000000000000000) {
        goto LABEL_23;
      }
      uint64_t v121 = v50 + 1;
      uint64_t v116 = (void (*)(void, void, void))(v51 - 1);
      uint64_t v54 = v113;
      uint64_t v55 = *(void (**)(uint64_t, unsigned char *, uint64_t))(v113 + 16);
      uint64_t v117 = v55;
      Swift::Int v120 = v51;
      v55((uint64_t)v133, v138, a10);
      uint64_t v56 = (uint64_t)v107;
      v55((uint64_t)v107, v49, a10);
      uint64_t v57 = v112;
      FieldElement.init(other:)(v56, a10, (uint64_t)v112);
      uint64_t v58 = v135;
      long long v59 = v127;
      v127(a10, v57);
      uint64_t v60 = v136;
      v59(a10, v57);
      uint64_t v61 = v134;
      uint64_t v62 = v58;
      v125(v58, v60);
      uint64_t v63 = *v123;
      uint64_t v118 = v63;
      uint64_t v64 = AssociatedTypeWitness;
      v63(v60, AssociatedTypeWitness);
      v63(v62, v64);
      uint64_t v65 = v132;
      v129(v61, a10, v57);
      uint64_t v119 = *(void (**)(void))(v54 + 8);
      uint64_t v66 = (uint64_t)v133;
      ((void (*)(unsigned char *, uint64_t))v119)(v133, a10);
      uint64_t v67 = type metadata accessor for Array();
      uint64_t v68 = v111;
      Array._makeMutableAndUnique()();
      uint64_t v69 = *v68;
      uint64_t v70 = v116;
      Array._checkSubscript_mutating(_:)((Swift::Int)v116);
      char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
      uint64_t v72 = v69 & 0xFFFFFFFFFFFFFF8;
      if ((isClassOrObjCExistentialType & 1) == 0) {
        uint64_t v72 = v69;
      }
      unint64_t v115 = (*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
      uint64_t v114 = *(void *)(v54 + 72);
      unint64_t v73 = v72 + v115 + v114 * (void)v70;
      uint64_t v116 = *(void (**)(void, void, void))(v54 + 40);
      uint64_t v74 = v140;
      v116(v73, v65, a10);
      AggregateShare.share.modify(v67);
      v117(v66, v74, a10);
      uint64_t v75 = v108;
      Swift::Int v76 = v120;
      FieldElement.init(other:)(v66, a10, (uint64_t)v57);
      dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
      Array._makeMutableAndUnique()();
      uint64_t v77 = *v68;
      Array._checkSubscript_mutating(_:)(v76);
      char v78 = _swift_isClassOrObjCExistentialType();
      uint64_t v79 = v77 & 0xFFFFFFFFFFFFFF8;
      if ((v78 & 1) == 0) {
        uint64_t v79 = v77;
      }
      v116(v79 + v115 + v114 * v76, v75, a10);
      AggregateShare.share.modify(v67);
      uint64_t v80 = v135;
      uint64_t v81 = v127;
      v127(a10, v57);
      uint64_t v82 = v136;
      v81(a10, v57);
      uint64_t v83 = v134;
      v125(v80, v82);
      uint64_t v84 = AssociatedTypeWitness;
      uint64_t v85 = v118;
      v118(v82, AssociatedTypeWitness);
      v85(v80, v84);
      v129(v83, a10, v57);
      uint64_t v50 = v121;
      uint64_t v49 = v140;
      v119();
      uint64_t v51 = v76 + 2;
      if (v105 == v50) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_11:
  uint64_t result = ArraySlice.count.getter();
  uint64_t v86 = *(void *)(a9 + 48);
  if (v86 < result)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v86 != result)
  {
    uint64_t v87 = v86 - result;
    if (v86 <= result)
    {
LABEL_27:
      __break(1u);
      return result;
    }
    uint64_t v138 = (unsigned char *)(v113 + 40);
    uint64_t v88 = result + 0x4000000000000000;
    Swift::Int v89 = 2 * result;
    uint64_t v90 = v111;
    while ((v88 & 0x8000000000000000) == 0)
    {
      uint64_t v142 = v112[1];
      uint64_t v91 = v102;
      uint64_t v143 = v87;
      dispatch thunk of static AdditiveArithmetic.zero.getter();
      uint64_t v92 = type metadata accessor for Array();
      Array._makeMutableAndUnique()();
      uint64_t v93 = *v90;
      Array._checkSubscript_mutating(_:)(v89);
      char v94 = _swift_isClassOrObjCExistentialType();
      uint64_t v95 = v93 & 0xFFFFFFFFFFFFFF8;
      if ((v94 & 1) == 0) {
        uint64_t v95 = v93;
      }
      unint64_t v141 = (*(unsigned __int8 *)(v113 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v113 + 80);
      uint64_t v96 = *(unsigned char **)(v113 + 72);
      uint64_t AssociatedConformanceWitness = *(void *)(v113 + 40);
      char v140 = v96;
      ((void (*)(unint64_t, unsigned char *, uint64_t))AssociatedConformanceWitness)(v95 + v141 + (void)v96 * v89, v91, a10);
      AggregateShare.share.modify(v92);
      unint64_t v97 = v103;
      dispatch thunk of static AdditiveArithmetic.zero.getter();
      Array._makeMutableAndUnique()();
      uint64_t v98 = *v90;
      Array._checkSubscript_mutating(_:)(v89 + 1);
      char v99 = _swift_isClassOrObjCExistentialType();
      uint64_t v100 = v98 & 0xFFFFFFFFFFFFFF8;
      if ((v99 & 1) == 0) {
        uint64_t v100 = v98;
      }
      ((void (*)(unint64_t, unsigned char *, uint64_t))AssociatedConformanceWitness)(v100 + v141 + (void)v140 * (v89 + 1), v97, a10);
      uint64_t result = AggregateShare.share.modify(v92);
      ++v88;
      v89 += 2;
      uint64_t v87 = v143 - 1;
      if (v143 == 1) {
        return result;
      }
    }
    goto LABEL_24;
  }
  return result;
}

uint64_t closure #1 in PINEMainCircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, char *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21)
{
  uint64_t v22 = v21;
  uint64_t v208 = a8;
  uint64_t v180 = a7;
  uint64_t v179 = a6;
  uint64_t v181 = a5;
  uint64_t v182 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v214 = a19;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v163 = AssociatedTypeWitness;
  uint64_t v204 = (void *)swift_getAssociatedTypeWitness();
  uint64_t v27 = *(v204 - 1);
  uint64_t v29 = MEMORY[0x270FA5388](v204, v28);
  uint64_t v203 = (char *)v154 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = MEMORY[0x270FA5388](v29, v31);
  uint64_t v202 = (char *)v154 - v33;
  uint64_t v35 = MEMORY[0x270FA5388](v32, v34);
  uint64_t v201 = (char *)v154 - v36;
  uint64_t v183 = *(void *)(a17 - 8);
  uint64_t v38 = MEMORY[0x270FA5388](v35, v37);
  unint64_t v170 = (char *)v154 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = MEMORY[0x270FA5388](v38, v40);
  unint64_t v169 = (char *)v154 - v42;
  uint64_t v44 = MEMORY[0x270FA5388](v41, v43);
  char v162 = (char *)v154 - v45;
  uint64_t v47 = MEMORY[0x270FA5388](v44, v46);
  char v176 = (char *)v154 - v48;
  uint64_t v50 = MEMORY[0x270FA5388](v47, v49);
  uint64_t v52 = (char *)v154 - v51;
  uint64_t v54 = MEMORY[0x270FA5388](v50, v53);
  uint64_t v200 = (char *)v154 - v55;
  uint64_t v57 = MEMORY[0x270FA5388](v54, v56);
  uint64_t v206 = (char *)v154 - v58;
  uint64_t v60 = MEMORY[0x270FA5388](v57, v59);
  uint64_t v205 = (char *)v154 - v61;
  uint64_t v63 = MEMORY[0x270FA5388](v60, v62);
  uint64_t v199 = (char *)v154 - v64;
  MEMORY[0x270FA5388](v63, v65);
  uint64_t v67 = (char *)v154 - v66;
  uint64_t v166 = a1;
  uint64_t v167 = a2;
  uint64_t v168 = a3;
  uint64_t result = ArraySlice.count.getter();
  if (result < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v69 = a11;
  if (result)
  {
    uint64_t v177 = v67;
    uint64_t v165 = a11;
    uint64_t v157 = a16;
    uint64_t v156 = a15;
    uint64_t v192 = a14;
    uint64_t v159 = a13;
    uint64_t v158 = a12;
    uint64_t v175 = a9;
    uint64_t v209 = a17;
    uint64_t v210 = a18;
    uint64_t v164 = result;
    uint64_t v70 = v214;
    uint64_t v211 = v214;
    uint64_t v212 = a20;
    uint64_t v213 = a21;
    uint64_t v161 = a11 + *(int *)(type metadata accessor for PINEMainCircuit() + 64);
    uint64_t v209 = a17;
    uint64_t v210 = a18;
    uint64_t v211 = v70;
    uint64_t v212 = a20;
    uint64_t v213 = a21;
    uint64_t v71 = (uint64_t)v177;
    uint64_t result = type metadata accessor for PINECircuitParameter();
    uint64_t v72 = 0;
    uint64_t v160 = *(int *)(result + 88);
    uint64_t v197 = v70 + 11;
    uint64_t v198 = (void (**)(char *, uint64_t, uint64_t))(v183 + 16);
    uint64_t v195 = (void (**)(char *, void *))(v27 + 8);
    uint64_t v196 = AssociatedConformanceWitness + 56;
    uint64_t v194 = v70 + 12;
    unint64_t v73 = a10;
    uint64_t v74 = v164;
    unint64_t v193 = (void (**)(char *, uint64_t))(v183 + 8);
    v154[1] = v183 + 40;
    v154[0] = v183 + 24;
    uint64_t v191 = 1;
    uint64_t v174 = v52;
    uint64_t v155 = a10;
    while (v74 != v72)
    {
      uint64_t result = ArraySlice.startIndex.getter();
      uint64_t v75 = *(void *)(v161 + v160);
      uint64_t v76 = v75 + 1;
      if (__OFADD__(v75, 1)) {
        goto LABEL_32;
      }
      uint64_t v77 = *v73 * v76;
      if ((unsigned __int128)(*v73 * (__int128)v76) >> 64 != v77 >> 63) {
        goto LABEL_33;
      }
      BOOL v78 = __OFADD__(result, v77);
      result += v77;
      if (v78) {
        goto LABEL_34;
      }
      if (__OFADD__(result, v75)) {
        goto LABEL_35;
      }
      if (result + v75 < result) {
        goto LABEL_36;
      }
      uint64_t v190 = v72;
      uint64_t v184 = (void (*)(char *, char *))(result + v75);
      uint64_t v79 = ArraySlice.subscript.getter();
      uint64_t result = FieldElement.init(inputVector:)(v79, v80, v81, v82, a17, v214, v71);
      if (v22) {
        return result;
      }
      uint64_t v178 = 0;
      uint64_t v173 = *v198;
      uint64_t v83 = (uint64_t)v206;
      v173(v206, v158, a17);
      uint64_t v84 = v214;
      FieldElement.init(other:)(v83, a17, (uint64_t)v214);
      uint64_t v85 = swift_checkMetadataState();
      uint64_t v86 = (void (*)(uint64_t, void *))v84[11];
      uint64_t v87 = v202;
      v86(a17, v84);
      uint64_t v88 = v203;
      uint64_t v188 = v86;
      v86(a17, v84);
      Swift::Int v89 = *(void (**)(char *, char *, uint64_t))(AssociatedConformanceWitness + 56);
      uint64_t v90 = v201;
      uint64_t v189 = v85;
      v89(v87, v88, v85);
      uint64_t v91 = *v195;
      uint64_t v92 = v204;
      (*v195)(v88, v204);
      unint64_t v187 = v91;
      v91(v87, v92);
      uint64_t v93 = v205;
      uint64_t v186 = (void (*)(char *, uint64_t, void *))v84[12];
      v186(v90, a17, v84);
      uint64_t v94 = (uint64_t)v206;
      uint64_t v95 = (void (*)(char *, char *, uint64_t))v173;
      v173(v206, (uint64_t)v177, a17);
      FieldElement.init(other:)(v94, a17, (uint64_t)v84);
      uint64_t v96 = v84[1];
      dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
      uint64_t v185 = *v193;
      v185(v93, a17);
      ArraySlice.subscript.getter();
      uint64_t v97 = ArraySlice.startIndex.getter();
      uint64_t v98 = v190;
      BOOL v78 = __OFADD__(v97, v190);
      uint64_t result = v97 + v190;
      if (v78) {
        goto LABEL_37;
      }
      uint64_t v184 = (void (*)(char *, char *))v89;
      char v99 = v174;
      uint64_t result = ArraySlice.subscript.getter();
      if (v98 == 0x4000000000000000) {
        goto LABEL_38;
      }
      Swift::Int v171 = v191 - 1;
      uint64_t v100 = (uint64_t)v206;
      v95(v206, v99, a17);
      uint64_t v101 = v205;
      uint64_t v102 = v214;
      FieldElement.init(other:)(v100, a17, (uint64_t)v214);
      uint64_t v172 = v96;
      dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
      v95((char *)v100, v192, a17);
      uint64_t v103 = (uint64_t)v162;
      v95(v162, v101, a17);
      FieldElement.init(other:)(v103, a17, (uint64_t)v102);
      uint64_t v104 = v202;
      uint64_t v105 = v188;
      v188(a17, v102);
      uint64_t v106 = v105;
      uint64_t v107 = v203;
      v106(a17, v102);
      uint64_t v108 = v201;
      v184(v104, v107);
      uint64_t v109 = v204;
      uint64_t v110 = v187;
      v187(v107, v204);
      v110(v104, v109);
      uint64_t v111 = v108;
      uint64_t v112 = v176;
      v186(v111, a17, v102);
      uint64_t v113 = v185;
      v185((char *)v100, a17);
      v113(v101, a17);
      uint64_t v114 = type metadata accessor for Array();
      unint64_t v115 = v181;
      Array._makeMutableAndUnique()();
      uint64_t v116 = *v115;
      Swift::Int v117 = v171;
      Array._checkSubscript_mutating(_:)(v171);
      char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
      uint64_t v119 = v116 & 0xFFFFFFFFFFFFFF8;
      if ((isClassOrObjCExistentialType & 1) == 0) {
        uint64_t v119 = v116;
      }
      uint64_t v120 = v183;
      unint64_t v121 = (*(unsigned __int8 *)(v183 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v183 + 80);
      uint64_t v122 = *(void *)(v183 + 72);
      unint64_t v123 = v119 + v121 + v122 * v117;
      Swift::Int v124 = v191;
      (*(void (**)(unint64_t, char *, uint64_t))(v183 + 40))(v123, v112, a17);
      AggregateShare.share.modify(v114);
      Array._makeMutableAndUnique()();
      uint64_t v125 = *v115;
      Array._checkSubscript_mutating(_:)(v124);
      char v126 = _swift_isClassOrObjCExistentialType();
      uint64_t v127 = v125 & 0xFFFFFFFFFFFFFF8;
      if ((v126 & 1) == 0) {
        uint64_t v127 = v125;
      }
      (*(void (**)(unint64_t, char *, uint64_t))(v120 + 24))(v127 + v121 + v122 * v124, v200, a17);
      Swift::String v128 = v174;
      uint64_t v129 = v214;
      AggregateShare.share.modify(v114);
      dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
      unint64_t v130 = v202;
      uint64_t v131 = v188;
      v188(a17, v129);
      long long v132 = v203;
      v131(a17, v129);
      long long v133 = v201;
      v184(v130, v132);
      uint64_t v134 = v132;
      char v135 = v204;
      uint64_t v136 = v187;
      v187(v134, v204);
      v136(v130, v135);
      v186(v133, a17, v129);
      char v137 = v185;
      v185(v128, a17);
      v137(v200, a17);
      v137(v199, a17);
      uint64_t v138 = (uint64_t (*)(char *, uint64_t))v137;
      uint64_t v71 = (uint64_t)v177;
      uint64_t result = v138(v177, a17);
      unint64_t v73 = v155;
      if (__OFADD__(*v155, 1)) {
        goto LABEL_39;
      }
      uint64_t v72 = v190 + 1;
      ++*v155;
      uint64_t v191 = v124 + 2;
      uint64_t v74 = v164;
      uint64_t v22 = v178;
      uint64_t v69 = v165;
      if (v164 == v72) {
        goto LABEL_19;
      }
    }
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
LABEL_19:
  uint64_t result = ArraySlice.count.getter();
  uint64_t v139 = *(void *)(v69 + 48);
  if (v139 < result)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v178 = v22;
  if (v139 != result)
  {
    uint64_t v140 = v139 - result;
    if (v139 <= result)
    {
LABEL_42:
      __break(1u);
      return result;
    }
    uint64_t v203 = (char *)(v183 + 40);
    uint64_t v141 = result + 0x4000000000000000;
    Swift::Int v142 = 2 * result;
    uint64_t v143 = v181;
    uint64_t v144 = v170;
    while ((v141 & 0x8000000000000000) == 0)
    {
      uint64_t AssociatedConformanceWitness = v214[1];
      uint64_t v145 = v169;
      uint64_t v208 = v140;
      dispatch thunk of static AdditiveArithmetic.zero.getter();
      uint64_t v146 = type metadata accessor for Array();
      Array._makeMutableAndUnique()();
      uint64_t v147 = *v143;
      Array._checkSubscript_mutating(_:)(v142);
      char v148 = _swift_isClassOrObjCExistentialType();
      uint64_t v149 = v147 & 0xFFFFFFFFFFFFFF8;
      if ((v148 & 1) == 0) {
        uint64_t v149 = v147;
      }
      uint64_t v206 = (char *)((*(unsigned __int8 *)(v183 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v183 + 80));
      unint64_t v150 = *(char **)(v183 + 72);
      uint64_t v204 = *(void **)(v183 + 40);
      uint64_t v205 = v150;
      ((void (*)(char *, char *, uint64_t))v204)(&v206[v149 + (void)v150 * v142], v145, a17);
      AggregateShare.share.modify(v146);
      dispatch thunk of static AdditiveArithmetic.zero.getter();
      Array._makeMutableAndUnique()();
      uint64_t v151 = *v143;
      Array._checkSubscript_mutating(_:)(v142 + 1);
      char v152 = _swift_isClassOrObjCExistentialType();
      uint64_t v153 = v151 & 0xFFFFFFFFFFFFFF8;
      if ((v152 & 1) == 0) {
        uint64_t v153 = v151;
      }
      ((void (*)(char *, char *, uint64_t))v204)(&v206[v153 + (void)v205 * (v142 + 1)], v144, a17);
      uint64_t result = AggregateShare.share.modify(v146);
      ++v141;
      v142 += 2;
      uint64_t v140 = v208 - 1;
      if (v208 == 1) {
        return result;
      }
    }
    __break(1u);
    goto LABEL_31;
  }
  return result;
}

__n128 protocol witness for PINECircuit.gadget.getter in conformance PINEMainCircuit<A, B>@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(v1 + 40);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

ValueMetadata *protocol witness for static FullyLinearProof.identifier.getter in conformance PINEMainCircuit<A, B>@<X0>(char *a1@<X8>)
{
  return static PINECircuit.identifier.getter(a1);
}

uint64_t protocol witness for FullyLinearProof.outputLength.getter in conformance PINEMainCircuit<A, B>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return PINECircuit.outputLength.getter(a1, WitnessTable);
}

uint64_t protocol witness for FullyLinearProof.jointRandLength.getter in conformance PINEMainCircuit<A, B>()
{
  return 3;
}

uint64_t protocol witness for FullyLinearProof.gadgetParameters.getter in conformance PINEMainCircuit<A, B>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return PINECircuit.gadgetParameters.getter(a1, WitnessTable);
}

void protocol witness for FullyLinearProof.encode(measurement:) in conformance PINEMainCircuit<A, B>()
{
}

uint64_t protocol witness for FullyLinearProof.decode(data:numOfMeasurements:) in conformance PINEMainCircuit<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  return protocol witness for FullyLinearProof.decode(data:numOfMeasurements:) in conformance PINENormEqualityCheckCircuit<A, B>(a1, a2, a3);
}

uint64_t protocol witness for FullyLinearProof.truncate(measurement:) in conformance PINEMainCircuit<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return PINECircuit.truncate(measurement:)(a1, a2, WitnessTable);
}

uint64_t protocol witness for FullyLinearProof.evaluate(measurement:jointRand:numOfShares:for:) in conformance PINEMainCircuit<A, B>@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return PINEMainCircuit.evaluate(measurement:jointRand:numOfShares:for:)(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for FullyLinearProof.evaluateGadget<A>(_:at:) in conformance PINEMainCircuit<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return PINECircuit.evaluateGadget<A>(_:at:)(WitnessTable, a2, a5, a3, WitnessTable, a4);
}

uint64_t protocol witness for FullyLinearProof.evaluateGadget(_:at:) in conformance PINEMainCircuit<A, B>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return PINECircuit.evaluateGadget(_:at:)(a1, a2, WitnessTable, a3);
}

void partial apply for closure #1 in PINECircuit.wraparoundDotProducts<A>(_:random:)(uint64_t a1)
{
  closure #1 in PINECircuit.wraparoundDotProducts<A>(_:random:)(a1, *(void *)(v1 + 32));
}

uint64_t specialized PINECircuit.decode<A>(data:numOfMeasurements:into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v70 = a6;
  uint64_t v52 = a2;
  uint64_t v71 = a1;
  uint64_t v73 = *(void *)(a5 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v12 = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v69 = a5;
  uint64_t v13 = a4;
  unint64_t v76 = AssociatedTypeWitness;
  unint64_t v77 = v10;
  uint64_t v67 = swift_getAssociatedConformanceWitness();
  uint64_t v68 = AssociatedConformanceWitness;
  uint64_t v78 = AssociatedConformanceWitness;
  uint64_t v79 = v12;
  uint64_t v80 = v67;
  uint64_t v62 = type metadata accessor for PINECircuitParameter();
  uint64_t v72 = *(char **)(v62 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v62, v14);
  uint64_t v65 = (char *)&v50 - v16;
  MEMORY[0x270FA5388](v15, v17);
  uint64_t v64 = (char *)&v50 - v18;
  uint64_t v51 = swift_checkMetadataState();
  MEMORY[0x270FA5388](v51, v19);
  uint64_t v50 = (char *)&v50 - v20;
  uint64_t v21 = *(void *)(v70 + 8);
  uint64_t v75 = v13;
  uint64_t v74 = swift_getAssociatedTypeWitness();
  uint64_t v54 = *(void (***)(char *, char *, uint64_t))(v74 - 8);
  uint64_t v23 = MEMORY[0x270FA5388](v74, v22);
  uint64_t v25 = (char *)&v50 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23, v26);
  uint64_t v63 = (char *)&v50 - v27;
  uint64_t v66 = AssociatedTypeWitness;
  uint64_t v28 = MEMORY[0x2612241C0](v71, AssociatedTypeWitness);
  uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t))(v73 + 72);
  if (v28 != ((uint64_t (*)(uint64_t))v29)(a3))
  {
    unint64_t v76 = 0;
    unint64_t v77 = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    unint64_t v76 = 0xD000000000000016;
    unint64_t v77 = 0x8000000260BFE7F0;
    uint64_t v81 = v28;
    v42._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    v43._countAndFlagsBits = 540877088;
    v43._object = (void *)0xE400000000000000;
    String.append(_:)(v43);
    uint64_t v81 = v29(a3, v73);
LABEL_10:
    v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    unint64_t v48 = v76;
    unint64_t v47 = v77;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v49 = v48;
    *(void *)(v49 + 8) = v47;
    *(unsigned char *)(v49 + 16) = 2;
    return swift_willThrow();
  }
  uint64_t result = dispatch thunk of Collection.count.getter();
  uint64_t v31 = v28;
  if (result != v28)
  {
    unint64_t v76 = 0;
    unint64_t v77 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    unint64_t v76 = 0xD000000000000010;
    unint64_t v77 = 0x8000000260BFE810;
    uint64_t v81 = dispatch thunk of Collection.count.getter();
    v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._countAndFlagsBits = 540877088;
    v45._object = (void *)0xE400000000000000;
    String.append(_:)(v45);
    uint64_t v81 = v28;
    goto LABEL_10;
  }
  if (v28 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v61 = a3;
    uint64_t v32 = v51;
    uint64_t v33 = (uint64_t)v50;
    if (v31)
    {
      uint64_t v34 = 0;
      uint64_t v56 = *(void (**)(uint64_t, uint64_t))(v69 + 56);
      uint64_t v57 = v69 + 56;
      uint64_t v55 = (char **)(v54 + 1);
      v54 += 2;
      uint64_t v53 = (void (**)(char *, uint64_t))(v72 + 8);
      uint64_t v60 = v21;
      uint64_t v59 = v31;
      uint64_t v58 = v25;
      uint64_t v35 = v63;
      do
      {
        uint64_t v73 = v34 + 1;
        dispatch thunk of Collection.startIndex.getter();
        dispatch thunk of Collection.index(_:offsetBy:)();
        uint64_t v72 = *v55;
        ((void (*)(char *, uint64_t))v72)(v25, v74);
        (*v54)(v25, v35, v74);
        uint64_t v36 = v32;
        uint64_t v37 = v64;
        uint64_t v38 = v66;
        Array.subscript.getter();
        uint64_t v39 = v65;
        v56(v61, v69);
        uint64_t v40 = *((void *)v39 + 4);
        (*v53)(v39, v62);
        uint64_t v41 = (uint64_t)v37;
        uint64_t v32 = v36;
        uint64_t v25 = v58;
        BinaryFloatingPoint.init<A>(fieldElement:fractionalBitCount:)(v41, v40, v32, v38, v67, v68, v33);
        dispatch thunk of MutableCollection.subscript.setter();
        ((void (*)(char *, uint64_t))v72)(v35, v74);
        uint64_t result = v75;
        uint64_t v34 = v73;
      }
      while (v59 != v73);
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Double and conformance Double()
{
  unint64_t result = lazy protocol witness table cache variable for type Double and conformance Double;
  if (!lazy protocol witness table cache variable for type Double and conformance Double)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Double and conformance Double);
  }
  return result;
}

void specialized PINECircuit.encode(measurement:)()
{
}

uint64_t specialized PINECircuit.decode(data:numOfMeasurements:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 + 8);
  swift_getAssociatedTypeWitness();
  uint64_t v29 = a3;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness, v10);
  uint64_t v12 = (char *)&v28 - v11;
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v28 = a1;
  uint64_t v14 = MEMORY[0x2612241C0](a1, v13);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 72);
  uint64_t v31 = v3;
  if (v14 == v15(a2, v7))
  {
    uint64_t v16 = v29;
    swift_getAssociatedConformanceWitness();
    dispatch thunk of static AdditiveArithmetic.zero.getter();
    uint64_t v17 = specialized Array.init(repeating:count:)((uint64_t)v12, v14, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
    unint64_t v32 = v17;
    uint64_t v18 = type metadata accessor for Array();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v20 = v30;
    specialized PINECircuit.decode<A>(data:numOfMeasurements:into:)(v28, (uint64_t)&v32, a2, v18, v16, WitnessTable);
    uint64_t result = v32;
    if (v20) {
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    unint64_t v32 = 0;
    unint64_t v33 = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    unint64_t v32 = 0xD000000000000016;
    unint64_t v33 = 0x8000000260BFE7F0;
    uint64_t v34 = v14;
    v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 540877088;
    v23._object = (void *)0xE400000000000000;
    String.append(_:)(v23);
    uint64_t v34 = v15(a2, v7);
    v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    unint64_t v25 = v32;
    unint64_t v26 = v33;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v27 = v25;
    *(void *)(v27 + 8) = v26;
    *(unsigned char *)(v27 + 16) = 2;
    return swift_willThrow();
  }
  return result;
}

uint64_t partial apply for closure #1 in PINENormEqualityCheckCircuit.evaluateNormEqualityCheck(inputVector:vBits:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return closure #1 in PINENormEqualityCheckCircuit.evaluateNormEqualityCheck(inputVector:vBits:for:)(a1, a2, a3, a4, a5, v5[7], v5[2], v5[3], v5[4]);
}

uint64_t partial apply for closure #1 in PINEMainCircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return closure #1 in PINEMainCircuit.evaluateBitCheck(bits:jointRand:inverseNumOfShares:for:)(a1, a2, a3, a4, a5, *(unsigned char **)(v5 + 56), *(void *)(v5 + 64), *(void *)(v5 + 72), *(void *)(v5 + 80), *(void *)(v5 + 16), *(void *)(v5 + 24), *(void **)(v5 + 32));
}

uint64_t partial apply for closure #1 in PINEMainCircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return closure #1 in PINEMainCircuit.evaluateWraparoundCheck(bits:dotProducts:jointRand:inverseNumOfShares:for:)(a1, a2, a3, a4, a5, *(void *)(v5 + 56), *(void *)(v5 + 64), *(void *)(v5 + 72), *(void *)(v5 + 80), *(uint64_t **)(v5 + 88), *(void *)(v5 + 96), *(void *)(v5 + 104), *(void *)(v5 + 112), *(char **)(v5 + 120), *(void *)(v5 + 128), *(void *)(v5 + 136), *(void *)(v5 + 16), *(void *)(v5 + 24), *(void **)(v5 + 32),
           *(void *)(v5 + 40),
           *(void *)(v5 + 48));
}

uint64_t associated type witness table accessor for PINECircuit.GadgetType : Gadget in PINENormEqualityCheckCircuit<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for PINENormEqualityCheckCircuit<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for FullyLinearProof.Measurement : Collection in PINEMainCircuit<A, B>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 40);
}

uint64_t associated type witness table accessor for FullyLinearProof.Measurement.Sequence.Element : BinaryFloatingPoint in PINEMainCircuit<A, B>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 48);
}

uint64_t instantiation function for generic protocol witness table for PINEMainCircuit<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for FullyLinearProof.F : FieldElement in PINEMainCircuit<A, B>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32);
}

uint64_t type metadata instantiation function for PINECircuitParameter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 88);
}

uint64_t type metadata completion function for PINECircuitParameter()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PINECircuitParameter(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = v7 + 7;
  uint64_t v9 = v6 + 8;
  unint64_t v10 = ((v6
        + 8
        + ((((((v7 + 7 + ((v6 + 56) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v6)
      + v7;
  if (v6 > 7 || (*(_DWORD *)(v5 + 80) & 0x100000) != 0 || v10 > 0x18)
  {
    uint64_t v13 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v13 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v14 = ~v6;
    *a1 = *a2;
    uint64_t v15 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v16 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v15 = *v16;
    uint64_t v17 = (void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v18 = (void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v17 = *v18;
    uint64_t v19 = (void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v20 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v19 = *v20;
    uint64_t v21 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    Swift::String v22 = (void *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v21 = *v22;
    Swift::String v23 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    Swift::String v24 = (void *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
    *Swift::String v23 = *v24;
    unint64_t v25 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v26 = (void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
    *unint64_t v25 = *v26;
    uint64_t v27 = ((unint64_t)v25 + v6 + 8) & ~v6;
    uint64_t v28 = ((unint64_t)v26 + v6 + 8) & ~v6;
    uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    v29(v27, v28, v4);
    uint64_t v30 = (void *)((v8 + v27) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v31 = (void *)((v8 + v28) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v30 = *v31;
    unint64_t v32 = (void *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v33 = (void *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
    *unint64_t v32 = *v33;
    uint64_t v34 = (void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v35 = (void *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v34 = *v35;
    v29(((unint64_t)v34 + v9) & v14, ((unint64_t)v35 + v9) & v14, v4);
  }
  return v3;
}

uint64_t destroy for PINECircuitParameter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v8 = *(void (**)(unint64_t, uint64_t))(v3 + 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (v4
      + 8
      + ((((((((((((a1 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v4;
  v8(v5, v2);
  unint64_t v6 = (v4
      + 8
      + ((((((v5 + *(void *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v4;

  return ((uint64_t (*)(unint64_t, uint64_t))v8)(v6, v2);
}

void *initializeWithCopy for PINECircuitParameter(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  unint64_t v6 = (void *)(((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = (void *)(((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v6 = *v7;
  uint64_t v8 = (void *)(((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v8 = *v9;
  unint64_t v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v10 = *v11;
  uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  uint64_t v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v14 = *v15;
  uint64_t v16 = *(void *)(a3 + 16);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
  uint64_t v19 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v20 = ((unint64_t)v14 + v19 + 8) & ~v19;
  uint64_t v21 = ((unint64_t)v15 + v19 + 8) & ~v19;
  v18(v20, v21, v16);
  uint64_t v22 = *(void *)(v17 + 64) + 7;
  Swift::String v23 = (void *)((v22 + v20) & 0xFFFFFFFFFFFFFFF8);
  Swift::String v24 = (void *)((v22 + v21) & 0xFFFFFFFFFFFFFFF8);
  *Swift::String v23 = *v24;
  unint64_t v25 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v26 = (void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v25 = *v26;
  uint64_t v27 = (void *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v28 = (void *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v27 = *v28;
  v18(((unint64_t)v27 + v19 + 8) & ~v19, ((unint64_t)v28 + v19 + 8) & ~v19, v16);
  return a1;
}

void *assignWithCopy for PINECircuitParameter(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  unint64_t v6 = (void *)(((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = (void *)(((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v6 = *v7;
  uint64_t v8 = (void *)(((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v8 = *v9;
  unint64_t v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v10 = *v11;
  uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  uint64_t v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v14 = *v15;
  uint64_t v16 = *(void *)(a3 + 16);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 24);
  uint64_t v19 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v20 = ((unint64_t)v14 + v19 + 8) & ~v19;
  uint64_t v21 = ((unint64_t)v15 + v19 + 8) & ~v19;
  v18(v20, v21, v16);
  uint64_t v22 = *(void *)(v17 + 64) + 7;
  Swift::String v23 = (void *)((v22 + v20) & 0xFFFFFFFFFFFFFFF8);
  Swift::String v24 = (void *)((v22 + v21) & 0xFFFFFFFFFFFFFFF8);
  *Swift::String v23 = *v24;
  unint64_t v25 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v26 = (void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v25 = *v26;
  uint64_t v27 = (void *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v28 = (void *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v27 = *v28;
  v18(((unint64_t)v27 + v19 + 8) & ~v19, ((unint64_t)v28 + v19 + 8) & ~v19, v16);
  return a1;
}

void *initializeWithTake for PINECircuitParameter(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  unint64_t v6 = (void *)(((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = (void *)(((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v6 = *v7;
  uint64_t v8 = (void *)(((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v8 = *v9;
  unint64_t v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v10 = *v11;
  uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  uint64_t v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v14 = *v15;
  uint64_t v16 = *(void *)(a3 + 16);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32);
  uint64_t v19 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v20 = ((unint64_t)v14 + v19 + 8) & ~v19;
  uint64_t v21 = ((unint64_t)v15 + v19 + 8) & ~v19;
  v18(v20, v21, v16);
  uint64_t v22 = *(void *)(v17 + 64) + 7;
  Swift::String v23 = (void *)((v22 + v20) & 0xFFFFFFFFFFFFFFF8);
  Swift::String v24 = (void *)((v22 + v21) & 0xFFFFFFFFFFFFFFF8);
  *Swift::String v23 = *v24;
  unint64_t v25 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v26 = (void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v25 = *v26;
  uint64_t v27 = (void *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v28 = (void *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v27 = *v28;
  v18(((unint64_t)v27 + v19 + 8) & ~v19, ((unint64_t)v28 + v19 + 8) & ~v19, v16);
  return a1;
}

void *assignWithTake for PINECircuitParameter(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  unint64_t v6 = (void *)(((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = (void *)(((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v6 = *v7;
  uint64_t v8 = (void *)(((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v8 = *v9;
  unint64_t v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v10 = *v11;
  uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  uint64_t v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v14 = *v15;
  uint64_t v16 = *(void *)(a3 + 16);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 40);
  uint64_t v19 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v20 = ((unint64_t)v14 + v19 + 8) & ~v19;
  uint64_t v21 = ((unint64_t)v15 + v19 + 8) & ~v19;
  v18(v20, v21, v16);
  uint64_t v22 = *(void *)(v17 + 64) + 7;
  Swift::String v23 = (void *)((v22 + v20) & 0xFFFFFFFFFFFFFFF8);
  Swift::String v24 = (void *)((v22 + v21) & 0xFFFFFFFFFFFFFFF8);
  *Swift::String v23 = *v24;
  unint64_t v25 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v26 = (void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v25 = *v26;
  uint64_t v27 = (void *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v28 = (void *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v27 = *v28;
  v18(((unint64_t)v27 + v19 + 8) & ~v19, ((unint64_t)v28 + v19 + 8) & ~v19, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for PINECircuitParameter(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (!a2) {
    return 0;
  }
  unsigned int v8 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v9 = ((v6
       + ((((((v7 + ((v6 + 56) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 8) & ~v6)
     + v7;
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v12 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v12 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((((((((((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8)
      }
                                                                                + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                              + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                            + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                          + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                        + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                      + v6
                                                                      + 8) & ~v6);
      return 0;
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_19;
  }
LABEL_11:
  int v13 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v13 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v9 | v13) + 1;
}

void storeEnumTagSinglePayload for PINECircuitParameter(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8
       + ((((((*(void *)(v6 + 64) + ((v8 + 56) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 8) & ~v8)
     + *(void *)(v6 + 64);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v9] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v14;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x260BDA550);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v17 = (((((((((((((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + v8
             + 8) & ~v8;
        uint64_t v18 = *(void (**)(unint64_t))(v6 + 56);
        v18(v17);
      }
      return;
  }
}

uint64_t dispatch thunk of PINECircuit.gadget.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of PINECircuit.parameters.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t type metadata instantiation function for PINENormEqualityCheckCircuit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 56);
}

uint64_t type metadata completion function for PINENormEqualityCheckCircuit()
{
  return type metadata completion function for PINENormEqualityCheckCircuit();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for PINECircuitParameter();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PINENormEqualityCheckCircuit(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6;
  unint64_t v8 = v6 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(v5 + 64);
  uint64_t v10 = v9 + 7;
  uint64_t v11 = v6 + 8;
  unint64_t v12 = (v8 & (v7 + 56))
      + v9
      + ((v7
        + 8
        + ((((((v9 + 7 + ((v7 + 56) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v7);
  int v13 = v6 & 0x100000;
  if (v7 > 7 || v13 != 0 || v12 > 0x18)
  {
    uint64_t v16 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v16 + (v8 & (v7 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v18 = *a2;
    unint64_t v17 = (unint64_t)a2 + 15;
    uint64_t v19 = ~v7;
    *a1 = v18;
    uint64_t v20 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v20 = *(void *)(v17 & 0xFFFFFFFFFFFFFFF8);
    v20[1] = *(void *)((v17 & 0xFFFFFFFFFFFFFFF8) + 8);
    v20[2] = *(void *)((v17 & 0xFFFFFFFFFFFFFFF8) + 16);
    v20[3] = *(void *)((v17 & 0xFFFFFFFFFFFFFFF8) + 24);
    v20[4] = *(void *)((v17 & 0xFFFFFFFFFFFFFFF8) + 32);
    v20[5] = *(void *)((v17 & 0xFFFFFFFFFFFFFFF8) + 40);
    uint64_t v21 = (void *)(v8 & ((unint64_t)v20 + 55));
    uint64_t v22 = (void *)(v8 & ((v17 & 0xFFFFFFFFFFFFFFF8) + 55));
    *uint64_t v21 = *v22;
    Swift::String v23 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    Swift::String v24 = (void *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
    *Swift::String v23 = *v24;
    unint64_t v25 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v26 = (void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
    *unint64_t v25 = *v26;
    uint64_t v27 = (void *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v28 = (void *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v27 = *v28;
    uint64_t v29 = (void *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v30 = (void *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v29 = *v30;
    uint64_t v31 = (void *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v32 = (void *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v31 = *v32;
    unint64_t v33 = (void *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v34 = (void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v33 = *v34;
    unint64_t v35 = ((unint64_t)v33 + v11) & v19;
    unint64_t v36 = ((unint64_t)v34 + v11) & v19;
    uint64_t v37 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v37(v35, v36, v4);
    uint64_t v38 = (void *)((v10 + v35) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v39 = (void *)((v10 + v36) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v38 = *v39;
    uint64_t v40 = (void *)(((unint64_t)v38 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v41 = (void *)(((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v40 = *v41;
    Swift::String v42 = (void *)(((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8);
    Swift::String v43 = (void *)(((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8);
    *Swift::String v42 = *v43;
    v37(((unint64_t)v42 + v11) & v19, ((unint64_t)v43 + v11) & v19, v4);
  }
  return v3;
}

uint64_t destroy for PINENormEqualityCheckCircuit(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v10 = v5 + 8;
  uint64_t v11 = *(void (**)(unint64_t, uint64_t))(v5 + 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (v6
      + 8
      + ((((((((((((((v3 + (v6 | 7) + 48) & ~(v6 | 7)) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v6;
  v11(v7, v4);
  unint64_t v8 = (v6
      + 8
      + ((((((*(void *)(v10 + 56) + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v6;

  return ((uint64_t (*)(unint64_t, uint64_t))v11)(v8, v4);
}

void *initializeWithCopy for PINENormEqualityCheckCircuit(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 15;
  *a1 = v5;
  uint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v6 = *(void *)(v4 & 0xFFFFFFFFFFFFFFF8);
  v6[1] = *(void *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
  v6[2] = *(void *)((v4 & 0xFFFFFFFFFFFFFFF8) + 16);
  v6[3] = *(void *)((v4 & 0xFFFFFFFFFFFFFFF8) + 24);
  v6[4] = *(void *)((v4 & 0xFFFFFFFFFFFFFFF8) + 32);
  v6[5] = *(void *)((v4 & 0xFFFFFFFFFFFFFFF8) + 40);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  unint64_t v10 = *(_DWORD *)(v8 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = (void *)(((unint64_t)v6 + v9 + 48) & v10);
  unint64_t v12 = (void *)((v9 + 48 + (v4 & 0xFFFFFFFFFFFFFFF8)) & v10);
  *uint64_t v11 = *v12;
  int v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v13 = *v14;
  unsigned int v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v15 = *v16;
  unint64_t v17 = (void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v18 = (void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v17 = *v18;
  uint64_t v19 = (void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v20 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v19 = *v20;
  uint64_t v21 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = (void *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v21 = *v22;
  Swift::String v23 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  Swift::String v24 = (void *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  *Swift::String v23 = *v24;
  uint64_t v25 = ((unint64_t)v23 + v9 + 8) & ~v9;
  uint64_t v26 = ((unint64_t)v24 + v9 + 8) & ~v9;
  uint64_t v27 = v8 + 16;
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  swift_bridgeObjectRetain();
  v28(v25, v26, v7);
  uint64_t v29 = *(void *)(v27 + 48) + 7;
  uint64_t v30 = (void *)((v29 + v25) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v31 = (void *)((v29 + v26) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v30 = *v31;
  unint64_t v32 = (void *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v33 = (void *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v32 = *v33;
  uint64_t v34 = (void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v35 = (void *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v34 = *v35;
  v28(((unint64_t)v34 + v9 + 8) & ~v9, ((unint64_t)v35 + v9 + 8) & ~v9, v7);
  return a1;
}

void *assignWithCopy for PINENormEqualityCheckCircuit(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  v5[1] = v6[1];
  v5[2] = v6[2];
  v5[3] = v6[3];
  v5[4] = v6[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5[5] = v6[5];
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  unint64_t v10 = *(_DWORD *)(v8 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = (void *)(((unint64_t)v5 + v9 + 48) & v10);
  unint64_t v12 = (void *)(((unint64_t)v6 + v9 + 48) & v10);
  *uint64_t v11 = *v12;
  int v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v13 = *v14;
  unsigned int v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v15 = *v16;
  unint64_t v17 = (void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v18 = (void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v17 = *v18;
  uint64_t v19 = (void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v20 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v19 = *v20;
  uint64_t v21 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = (void *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v21 = *v22;
  Swift::String v23 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  Swift::String v24 = (void *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  *Swift::String v23 = *v24;
  uint64_t v25 = ((unint64_t)v23 + v9 + 8) & ~v9;
  uint64_t v26 = ((unint64_t)v24 + v9 + 8) & ~v9;
  uint64_t v27 = v8 + 24;
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24);
  v28(v25, v26, v7);
  uint64_t v29 = *(void *)(v27 + 40) + 7;
  uint64_t v30 = (void *)((v29 + v25) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v31 = (void *)((v29 + v26) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v30 = *v31;
  unint64_t v32 = (void *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v33 = (void *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v32 = *v33;
  uint64_t v34 = (void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v35 = (void *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v34 = *v35;
  v28(((unint64_t)v34 + v9 + 8) & ~v9, ((unint64_t)v35 + v9 + 8) & ~v9, v7);
  return a1;
}

void *assignWithTake for PINENormEqualityCheckCircuit(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  v5[1] = v6[1];
  v5[2] = v6[2];
  v5[3] = v6[3];
  v5[4] = v6[4];
  swift_bridgeObjectRelease();
  v5[5] = v6[5];
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  unint64_t v10 = *(_DWORD *)(v8 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = (void *)(((unint64_t)v5 + v9 + 48) & v10);
  unint64_t v12 = (void *)(((unint64_t)v6 + v9 + 48) & v10);
  *uint64_t v11 = *v12;
  int v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v13 = *v14;
  unsigned int v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v15 = *v16;
  unint64_t v17 = (void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v18 = (void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v17 = *v18;
  uint64_t v19 = (void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v20 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v19 = *v20;
  uint64_t v21 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = (void *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v21 = *v22;
  Swift::String v23 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  Swift::String v24 = (void *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  *Swift::String v23 = *v24;
  uint64_t v25 = ((unint64_t)v23 + v9 + 8) & ~v9;
  uint64_t v26 = ((unint64_t)v24 + v9 + 8) & ~v9;
  uint64_t v27 = v8 + 40;
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40);
  v28(v25, v26, v7);
  uint64_t v29 = *(void *)(v27 + 24) + 7;
  uint64_t v30 = (void *)((v29 + v25) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v31 = (void *)((v29 + v26) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v30 = *v31;
  unint64_t v32 = (void *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v33 = (void *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v32 = *v33;
  uint64_t v34 = (void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v35 = (void *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v34 = *v35;
  v28(((unint64_t)v34 + v9 + 8) & ~v9, ((unint64_t)v35 + v9 + 8) & ~v9, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for PINENormEqualityCheckCircuit(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v9 = v6 | 7;
  uint64_t v10 = v6 + 8;
  int v11 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_23;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  unint64_t v12 = ((v6 + 56) & ~v9)
      + v7
      + ((v10
        + ((((((v7 + ((v6 + 56) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v6);
  char v13 = 8 * v12;
  if (v12 <= 3)
  {
    unsigned int v16 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v16))
    {
      int v14 = *(_DWORD *)((char *)a1 + v12);
      if (!v14) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v16 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)((char *)a1 + v12);
      if (!*(unsigned __int16 *)((char *)a1 + v12)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v16 < 2)
    {
LABEL_23:
      unint64_t v18 = ((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8;
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((v10
      }
                                                                      + ((((((((((((((v18 + v9 + 48) & ~v9) + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                                + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                              + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                            + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                          + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                        + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v6);
      unint64_t v19 = *(void *)(v18 + 32);
      if (v19 >= 0xFFFFFFFF) {
        LODWORD(v19) = -1;
      }
      return (v19 + 1);
    }
  }
  int v14 = *((unsigned __int8 *)a1 + v12);
  if (!*((unsigned char *)a1 + v12)) {
    goto LABEL_23;
  }
LABEL_15:
  int v17 = (v14 - 1) << v13;
  if (v12 > 3) {
    int v17 = 0;
  }
  if (v12)
  {
    if (v12 > 3) {
      LODWORD(v12) = 4;
    }
    switch((int)v12)
    {
      case 2:
        LODWORD(v12) = *a1;
        break;
      case 3:
        LODWORD(v12) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v12) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v12) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v8 + (v12 | v17) + 1;
}

void storeEnumTagSinglePayload for PINENormEqualityCheckCircuit(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = v9 | 7;
  uint64_t v11 = v9 + 8;
  size_t v12 = ((v9
        + 8
        + ((((((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 56) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v9)
      + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v13 = v12 + ((v9 + 56) & ~(v9 | 7));
  BOOL v14 = a3 >= v8;
  unsigned int v15 = a3 - v8;
  if (v15 != 0 && v14)
  {
    if (v13 <= 3)
    {
      unsigned int v20 = ((v15 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
      if (HIWORD(v20))
      {
        int v16 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v16 = 2;
      }
      else
      {
        int v16 = v20 > 1;
      }
    }
    else
    {
      int v16 = 1;
    }
  }
  else
  {
    int v16 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v17 = ~v8 + a2;
    if (v13 < 4)
    {
      int v18 = (v17 >> (8 * v13)) + 1;
      if (v13)
      {
        int v21 = v17 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if (v13 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v13 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1 = v17;
      int v18 = 1;
    }
    switch(v16)
    {
      case 1:
        a1[v13] = v18;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v18;
        return;
      case 3:
        goto LABEL_54;
      case 4:
        *(_DWORD *)&a1[v13] = v18;
        return;
      default:
        return;
    }
  }
  uint64_t v19 = ~v9;
  switch(v16)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_54:
      __break(1u);
      JUMPOUT(0x260BDB430);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        unint64_t v22 = (unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8;
        if ((v7 & 0x80000000) != 0)
        {
          uint64_t v23 = (v22 + v10 + 48) & ~v10;
          if (v7 >= a2)
          {
            uint64_t v27 = *(void (**)(unint64_t))(v6 + 56);
            v27((v11
               + ((((((((((((v23 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 15) & 0xFFFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFFFF8)) & v19);
          }
          else
          {
            if (v12 <= 3) {
              int v24 = ~(-1 << (8 * v12));
            }
            else {
              int v24 = -1;
            }
            if (v12)
            {
              int v25 = v24 & (~v7 + a2);
              if (v12 <= 3) {
                int v26 = v12;
              }
              else {
                int v26 = 4;
              }
              bzero((void *)((v22 + v10 + 48) & ~v10), v12);
              switch(v26)
              {
                case 2:
                  *(_WORD *)uint64_t v23 = v25;
                  break;
                case 3:
                  *(_WORD *)uint64_t v23 = v25;
                  *(unsigned char *)(v23 + 2) = BYTE2(v25);
                  break;
                case 4:
                  *(_DWORD *)uint64_t v23 = v25;
                  break;
                default:
                  *(unsigned char *)uint64_t v23 = v25;
                  break;
              }
            }
          }
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(void *)(v22 + 40) = 0;
          *(_OWORD *)(v22 + 24) = 0u;
          *(_OWORD *)(v22 + 8) = 0u;
          *(void *)unint64_t v22 = a2 ^ 0x80000000;
        }
        else
        {
          *(void *)(v22 + 32) = a2 - 1;
        }
      }
      return;
  }
}

uint64_t type metadata completion function for PINEMainCircuit()
{
  return type metadata completion function for PINENormEqualityCheckCircuit();
}

uint64_t *initializeBufferWithCopyOfBuffer for PINEMainCircuit(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6;
  unint64_t v8 = v6 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(v5 + 64);
  uint64_t v10 = v9 + 7;
  uint64_t v11 = v6 + 8;
  unint64_t v12 = (v8 & (v7 + 56))
      + v9
      + ((v7
        + 8
        + ((((((v9 + 7 + ((v7 + 56) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v7);
  int v13 = v6 & 0x100000;
  if (v7 > 7 || v13 != 0 || v12 > 0x18)
  {
    uint64_t v16 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (uint64_t *)(v16 + (v8 & (v7 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v17 = ~v7;
    *a1 = *a2;
    int v18 = (_OWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v19 = (long long *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    long long v20 = *v19;
    long long v21 = v19[2];
    v18[1] = v19[1];
    void v18[2] = v21;
    *int v18 = v20;
    unint64_t v22 = (void *)(v8 & ((unint64_t)v18 + 55));
    uint64_t v23 = (void *)(v8 & ((unint64_t)v19 + 55));
    *unint64_t v22 = *v23;
    int v24 = (void *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
    int v25 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
    *int v24 = *v25;
    int v26 = (void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v27 = (void *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
    *int v26 = *v27;
    uint64_t v28 = (void *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v29 = (void *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v28 = *v29;
    uint64_t v30 = (void *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v31 = (void *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v30 = *v31;
    unint64_t v32 = (void *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v33 = (void *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
    *unint64_t v32 = *v33;
    uint64_t v34 = (void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v35 = (void *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v34 = *v35;
    unint64_t v36 = ((unint64_t)v34 + v11) & v17;
    unint64_t v37 = ((unint64_t)v35 + v11) & v17;
    uint64_t v38 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
    v38(v36, v37, v4);
    uint64_t v39 = (void *)((v10 + v36) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v40 = (void *)((v10 + v37) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v39 = *v40;
    uint64_t v41 = (void *)(((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8);
    Swift::String v42 = (void *)(((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v41 = *v42;
    Swift::String v43 = (void *)(((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8);
    Swift::String v44 = (void *)(((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8);
    *Swift::String v43 = *v44;
    v38(((unint64_t)v43 + v11) & v17, ((unint64_t)v44 + v11) & v17, v4);
  }
  return v3;
}

uint64_t destroy for PINEMainCircuit(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v8 = v3 + 8;
  uint64_t v9 = *(void (**)(unint64_t, uint64_t))(v3 + 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (v4
      + 8
      + ((((((((((((((((a1 + 15) & 0xFFFFFFFFFFFFFFF8) + (v4 | 7) + 48) & ~(v4 | 7)) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v4;
  v9(v5, v2);
  unint64_t v6 = (v4
      + 8
      + ((((((*(void *)(v8 + 56) + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v4;

  return ((uint64_t (*)(unint64_t, uint64_t))v9)(v6, v2);
}

void *initializeWithCopy for PINEMainCircuit(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_OWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v5 = (long long *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v6 = *v5;
  long long v7 = v5[2];
  v4[1] = v5[1];
  v4[2] = v7;
  *uint64_t v4 = v6;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  unint64_t v11 = *(_DWORD *)(v9 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (void *)(((unint64_t)v4 + v10 + 48) & v11);
  int v13 = (void *)(((unint64_t)v5 + v10 + 48) & v11);
  *unint64_t v12 = *v13;
  BOOL v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v14 = *v15;
  uint64_t v16 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = (void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v16 = *v17;
  int v18 = (void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  *int v18 = *v19;
  long long v20 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v21 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v20 = *v21;
  unint64_t v22 = (void *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v22 = *v23;
  int v24 = (void *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v25 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  *int v24 = *v25;
  uint64_t v26 = ((unint64_t)v24 + v10 + 8) & ~v10;
  uint64_t v27 = ((unint64_t)v25 + v10 + 8) & ~v10;
  uint64_t v28 = v9 + 16;
  uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v29(v26, v27, v8);
  uint64_t v30 = *(void *)(v28 + 48) + 7;
  uint64_t v31 = (void *)((v30 + v26) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v32 = (void *)((v30 + v27) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v31 = *v32;
  unint64_t v33 = (void *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v34 = (void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v33 = *v34;
  unint64_t v35 = (void *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v36 = (void *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v35 = *v36;
  v29(((unint64_t)v35 + v10 + 8) & ~v10, ((unint64_t)v36 + v10 + 8) & ~v10, v8);
  return a1;
}

void *assignWithCopy for PINEMainCircuit(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  v4[1] = v5[1];
  v4[2] = v5[2];
  v4[3] = v5[3];
  v4[4] = v5[4];
  v4[5] = v5[5];
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80);
  unint64_t v9 = *(_DWORD *)(v7 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = (void *)(((unint64_t)v4 + v8 + 48) & v9);
  unint64_t v11 = (void *)(((unint64_t)v5 + v8 + 48) & v9);
  *uint64_t v10 = *v11;
  unint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v12 = *v13;
  BOOL v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v14 = *v15;
  uint64_t v16 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = (void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v16 = *v17;
  int v18 = (void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  *int v18 = *v19;
  long long v20 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v21 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v20 = *v21;
  unint64_t v22 = (void *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v22 = *v23;
  uint64_t v24 = ((unint64_t)v22 + v8 + 8) & ~v8;
  uint64_t v25 = ((unint64_t)v23 + v8 + 8) & ~v8;
  uint64_t v26 = v7 + 24;
  uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v27(v24, v25, v6);
  uint64_t v28 = *(void *)(v26 + 40) + 7;
  uint64_t v29 = (void *)((v28 + v24) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v30 = (void *)((v28 + v25) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v29 = *v30;
  uint64_t v31 = (void *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v32 = (void *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v31 = *v32;
  unint64_t v33 = (void *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v34 = (void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v33 = *v34;
  v27(((unint64_t)v33 + v8 + 8) & ~v8, ((unint64_t)v34 + v8 + 8) & ~v8, v6);
  return a1;
}

void *initializeWithTake for PINENormEqualityCheckCircuit(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_OWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v5 = (long long *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v6 = *v5;
  long long v7 = v5[2];
  v4[1] = v5[1];
  v4[2] = v7;
  *uint64_t v4 = v6;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  unint64_t v11 = *(_DWORD *)(v9 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (void *)(((unint64_t)v4 + v10 + 48) & v11);
  int v13 = (void *)(((unint64_t)v5 + v10 + 48) & v11);
  *unint64_t v12 = *v13;
  BOOL v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v14 = *v15;
  uint64_t v16 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = (void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v16 = *v17;
  int v18 = (void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  *int v18 = *v19;
  long long v20 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v21 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v20 = *v21;
  unint64_t v22 = (void *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v22 = *v23;
  uint64_t v24 = (void *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v25 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v24 = *v25;
  uint64_t v26 = ((unint64_t)v24 + v10 + 8) & ~v10;
  uint64_t v27 = ((unint64_t)v25 + v10 + 8) & ~v10;
  uint64_t v28 = v9 + 32;
  uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
  v29(v26, v27, v8);
  uint64_t v30 = *(void *)(v28 + 32) + 7;
  uint64_t v31 = (void *)((v30 + v26) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v32 = (void *)((v30 + v27) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v31 = *v32;
  unint64_t v33 = (void *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v34 = (void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v33 = *v34;
  unint64_t v35 = (void *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v36 = (void *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v35 = *v36;
  v29(((unint64_t)v35 + v10 + 8) & ~v10, ((unint64_t)v36 + v10 + 8) & ~v10, v8);
  return a1;
}

void *assignWithTake for PINEMainCircuit(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  v4[1] = v5[1];
  v4[2] = v5[2];
  v4[3] = v5[3];
  v4[4] = v5[4];
  v4[5] = v5[5];
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80);
  unint64_t v9 = *(_DWORD *)(v7 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = (void *)(((unint64_t)v4 + v8 + 48) & v9);
  unint64_t v11 = (void *)(((unint64_t)v5 + v8 + 48) & v9);
  *uint64_t v10 = *v11;
  unint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v12 = *v13;
  BOOL v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v14 = *v15;
  uint64_t v16 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = (void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v16 = *v17;
  int v18 = (void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  *int v18 = *v19;
  long long v20 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v21 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v20 = *v21;
  unint64_t v22 = (void *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v22 = *v23;
  uint64_t v24 = ((unint64_t)v22 + v8 + 8) & ~v8;
  uint64_t v25 = ((unint64_t)v23 + v8 + 8) & ~v8;
  uint64_t v26 = v7 + 40;
  uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v27(v24, v25, v6);
  uint64_t v28 = *(void *)(v26 + 24) + 7;
  uint64_t v29 = (void *)((v28 + v24) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v30 = (void *)((v28 + v25) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v29 = *v30;
  uint64_t v31 = (void *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v32 = (void *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v31 = *v32;
  unint64_t v33 = (void *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v34 = (void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v33 = *v34;
  v27(((unint64_t)v33 + v8 + 8) & ~v8, ((unint64_t)v34 + v8 + 8) & ~v8, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for PINEMainCircuit(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (!a2) {
    return 0;
  }
  uint64_t v8 = v6 | 7;
  uint64_t v9 = v6 + 8;
  unsigned int v10 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  unint64_t v11 = ((v6 + 56) & ~v8)
      + v7
      + ((v9
        + ((((((v7 + ((v6 + 56) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v6);
  char v12 = 8 * v11;
  if (v11 <= 3)
  {
    unsigned int v14 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v14))
    {
      int v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v14 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(unsigned __int16 *)((char *)a1 + v11)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v14 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((v9
      }
                                                                      + (((((((((((((((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                                    + v8
                                                                                    + 48) & ~v8)
                                                                                  + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                                + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                              + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                            + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                          + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                        + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v6);
      return 0;
    }
  }
  int v13 = *((unsigned __int8 *)a1 + v11);
  if (!*((unsigned char *)a1 + v11)) {
    goto LABEL_19;
  }
LABEL_11:
  int v15 = (v13 - 1) << v12;
  if (v11 > 3) {
    int v15 = 0;
  }
  if (v11)
  {
    if (v11 > 3) {
      LODWORD(v11) = 4;
    }
    switch((int)v11)
    {
      case 2:
        LODWORD(v11) = *a1;
        break;
      case 3:
        LODWORD(v11) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v11) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v11) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v11 | v15) + 1;
}

void storeEnumTagSinglePayload for PINEMainCircuit(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8 + 56) & ~(v8 | 7))
     + *(void *)(v6 + 64)
     + ((v8
       + 8
       + ((((((*(void *)(v6 + 64) + ((v8 + 56) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v8);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 56) & ~(v8 | 7))+ *(void *)(v6 + 64)+ ((v8+ 8+ ((((((*(void *)(v6 + 64) + ((v8 + 56) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v8));
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v9] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v14;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x260BDC3E0);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v17 = (v8
             + 8
             + ((((((((((((((((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8) + (v8 | 7) + 48) & ~(v8 | 7)) + 15) & 0xFFFFFFFFFFFFFFF8)
                       + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 15) & 0xFFFFFFFFFFFFFFF8)
                   + 15) & 0xFFFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v8;
        int v18 = *(void (**)(unint64_t))(v6 + 56);
        v18(v17);
      }
      return;
  }
}

Swift::Int partial apply for closure #1 in closure #1 in PINECircuit.wraparoundDotProducts<A>(_:random:)()
{
  return closure #1 in closure #1 in PINECircuit.wraparoundDotProducts<A>(_:random:)();
}

uint64_t SumVectorType.init(bitWidth:measurementLength:chunkLength:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a3 < 1)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v7 = result;
  uint64_t result = static SumVectorType.encodedLengthFrom(bitWidth:measurementLength:)(result, a2);
  if (v4) {
    return result;
  }
  uint64_t v9 = result;
  uint64_t v10 = result + a3;
  if (__OFADD__(result, a3)) {
    goto LABEL_8;
  }
  BOOL v11 = __OFSUB__(v10, 1);
  uint64_t v12 = v10 - 1;
  if (v11)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  uint64_t v13 = v12 / a3;
  v21[0] = MultiplicationGadget.init(numOfCalls:)();
  v21[1] = v14;
  v21[2] = v15;
  uint64_t v16 = type metadata accessor for MultiplicationGadget();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = ParallelSum.init(inner:count:)((uint64_t)v21, a3, v16, WitnessTable, (char *)v22);
  long long v18 = v22[0];
  long long v19 = v22[1];
  long long v20 = v22[2];
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = a2;
  *(void *)(a4 + 16) = 1;
  *(void *)(a4 + 24) = a3;
  *(void *)(a4 + 32) = v13;
  *(void *)(a4 + 40) = v7;
  *(_OWORD *)(a4 + 48) = v18;
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v20;
  return result;
}

uint64_t SumVectorType.init(bitWidth:measurementLength:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t result = static SumVectorType.encodedLengthFrom(bitWidth:measurementLength:)(a1, a2);
  if (v3) {
    return result;
  }
  float v8 = sqrtf((float)result);
  if ((~LODWORD(v8) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v8 <= -9.2234e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v8 >= 9.2234e18)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  if ((uint64_t)v8 <= 1) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = (uint64_t)v8;
  }
  uint64_t result = SumVectorType.init(bitWidth:measurementLength:chunkLength:)(a1, a2, v9, (uint64_t)v15);
  long long v10 = v15[1];
  long long v11 = v15[2];
  long long v12 = v15[3];
  long long v13 = v15[4];
  long long v14 = v15[5];
  *a3 = v15[0];
  a3[1] = v10;
  a3[2] = v11;
  a3[3] = v12;
  a3[4] = v13;
  a3[5] = v14;
  return result;
}

void static SumVectorType.identifier.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t SumVectorType.encodedMeasurementLength.getter()
{
  return *(void *)v0;
}

uint64_t SumVectorType.outputLength.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t SumVectorType.jointRandLength.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t SumVectorType.gadgetParameters.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_260BF9FF0;
  type metadata accessor for MultiplicationGadget();
  swift_getWitnessTable();
  uint64_t v1 = type metadata accessor for ParallelSum();
  uint64_t WitnessTable = swift_getWitnessTable();
  Gadget.parameters.getter(v1, WitnessTable, (uint64_t *)(v0 + 32));
  return v0;
}

uint64_t SumVectorType.chunkLength.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t SumVectorType.numberOfChunk.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t SumVectorType.bitWidth.getter()
{
  return *(void *)(v0 + 40);
}

__n128 SumVectorType.gadget.getter@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 64);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(v1 + 80);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t static SumVectorType.encodedLengthFrom(bitWidth:measurementLength:)(uint64_t result, uint64_t a2)
{
  if (result < 1 || a2 < 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = result;
    uint64_t v3 = result * a2;
    if ((unsigned __int128)(result * (__int128)a2) >> 64 != (result * a2) >> 63)
    {
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease();
      unint64_t v11 = 0xD000000000000013;
      unint64_t v12 = 0x8000000260BFF9B0;
      v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v4);
      swift_bridgeObjectRelease();
      v5._countAndFlagsBits = 0xD000000000000014;
      v5._object = (void *)0x8000000260BFF9D0;
      String.append(_:)(v5);
      goto LABEL_8;
    }
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    __n128 result = dispatch thunk of static FixedWidthInteger.bitWidth.getter();
    if (!__OFSUB__(result, 1))
    {
      if (result - 1 >= v2) {
        return v3;
      }
      unint64_t v11 = 0;
      unint64_t v12 = 0xE000000000000000;
      _StringGuts.grow(_:)(51);
      v6._countAndFlagsBits = 0xD000000000000021;
      v6._object = (void *)0x8000000260BFF980;
      String.append(_:)(v6);
      v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
      v8._countAndFlagsBits = 0x74694278616D202CLL;
      v8._object = (void *)0xEE003D6874646957;
      String.append(_:)(v8);
LABEL_8:
      v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
      swift_allocError();
      *(void *)uint64_t v10 = v11;
      *(void *)(v10 + 8) = v12;
      *(unsigned char *)(v10 + 16) = 2;
      swift_willThrow();
      return v3;
    }
  }
  __break(1u);
  return result;
}

uint64_t SumVectorType.encode(measurement:)(void (**a1)(char *, uint64_t), void *a2)
{
  uint64_t v140 = a1;
  uint64_t v3 = a2[5];
  uint64_t v143 = a2[6];
  uint64_t v144 = (void (*)(char *, uint64_t))v3;
  uint64_t v4 = *(void *)(*(void *)(v143 + 24) + 16);
  Swift::String v5 = *(void (**)(char *, char *, uint64_t))(v3 + 8);
  Swift::String v6 = (void (**)(char *, char *, uint64_t))a2[3];
  swift_getAssociatedTypeWitness();
  uint64_t v122 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness, v7);
  uint64_t v120 = (char *)&v113 - v8;
  uint64_t v9 = a2[4];
  uint64_t v10 = a2[2];
  swift_getAssociatedTypeWitness();
  uint64_t v133 = v9;
  uint64_t v137 = v10;
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v147 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  uint64_t v119 = *(void *)(*(void *)(v147 + 24) + 16);
  unint64_t v11 = v6;
  uint64_t v118 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v118, v12);
  Swift::Int v117 = (char *)&v113 - v13;
  uint64_t v14 = swift_checkMetadataState();
  uint64_t v141 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14, v15);
  uint64_t v116 = (char *)&v113 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16, v18);
  unint64_t v115 = (char *)&v113 - v20;
  uint64_t v22 = MEMORY[0x270FA5388](v19, v21);
  char v135 = (char *)&v113 - v23;
  MEMORY[0x270FA5388](v22, v24);
  char v148 = (char *)&v113 - v25;
  uint64_t v26 = type metadata accessor for Optional();
  uint64_t v28 = MEMORY[0x270FA5388](v26 - 8, v27);
  uint64_t v136 = (char *)&v113 - v29;
  Swift::String v128 = (char *)*(v6 - 1);
  MEMORY[0x270FA5388](v28, v30);
  uint64_t v127 = (char *)&v113 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v130 = v5;
  uint64_t v138 = swift_getAssociatedTypeWitness();
  uint64_t v123 = *(void *)(v138 - 8);
  MEMORY[0x270FA5388](v138, v32);
  uint64_t v34 = (char *)&v113 - v33;
  uint64_t v35 = swift_checkMetadataState();
  uint64_t v124 = *(void *)(v35 - 8);
  uint64_t v37 = MEMORY[0x270FA5388](v35, v36);
  long long v132 = (char *)&v113 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = MEMORY[0x270FA5388](v37, v39);
  uint64_t v113 = (char *)&v113 - v41;
  uint64_t v43 = MEMORY[0x270FA5388](v40, v42);
  uint64_t v114 = (char *)&v113 - v44;
  uint64_t v46 = MEMORY[0x270FA5388](v43, v45);
  unint64_t v48 = (char *)&v113 - v47;
  MEMORY[0x270FA5388](v46, v49);
  uint64_t v51 = (char *)&v113 - v50;
  Swift::Int v53 = *v145;
  uint64_t v52 = v145[1];
  Swift::Int v139 = v145[5];
  uint64_t v134 = v11;
  if (dispatch thunk of Collection.count.getter() != v52)
  {
    Swift::Int v150 = 0;
    unint64_t v151 = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    Swift::Int v150 = 0xD000000000000020;
    unint64_t v151 = 0x8000000260BFF8B0;
    uint64_t v152 = dispatch thunk of Collection.count.getter();
    v98._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v98);
    swift_bridgeObjectRelease();
    v99._countAndFlagsBits = 540877088;
    v99._object = (void *)0xE400000000000000;
    String.append(_:)(v99);
    uint64_t v152 = v52;
    v100._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v100);
    swift_bridgeObjectRelease();
    v101._countAndFlagsBits = 32;
    v101._object = (void *)0xE100000000000000;
    String.append(_:)(v101);
    Swift::Int v102 = v150;
    unint64_t v103 = v151;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v104 = v102;
    *(void *)(v104 + 8) = v103;
    *(unsigned char *)(v104 + 16) = 2;
    return swift_willThrow();
  }
  uint64_t v152 = Array.init()();
  uint64_t v131 = type metadata accessor for Array();
  Array.reserveCapacity(_:)(v53);
  Swift::Int v150 = 1;
  lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of BinaryInteger.init<A>(_:)();
  Swift::Int v150 = v139;
  Swift::Int v142 = v51;
  dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)();
  uint64_t v144 = *(void (**)(char *, uint64_t))(v124 + 8);
  uint64_t v145 = (Swift::Int *)(v124 + 8);
  v144(v48, v35);
  (*((void (**)(char *, void (**)(char *, uint64_t), void))v128 + 2))(v127, v140, v134);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v54 = v138;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v56 = v136;
  uint64_t v57 = v34;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v58 = v141 + 48;
  uint64_t v125 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v141 + 48);
  if (v125(v56, 1, v14) == 1)
  {
LABEL_26:
    (*(void (**)(char *, uint64_t))(v123 + 8))(v57, v54);
    v144(v142, v35);
    return v152;
  }
  uint64_t v126 = v58;
  uint64_t v127 = (char *)AssociatedConformanceWitness;
  Swift::String v128 = v48;
  unint64_t v130 = *(void (**)(char *, char *, uint64_t))(v141 + 32);
  uint64_t v134 = (void (**)(char *, char *, uint64_t))(v141 + 16);
  v124 += 16;
  v141 += 32;
  uint64_t v59 = v135;
  uint64_t v60 = v125;
  uint64_t v129 = v34;
  uint64_t v140 = (void (**)(char *, uint64_t))(v141 - 24);
  while (1)
  {
    v130(v148, v56, v14);
    int v61 = dispatch thunk of static BinaryInteger.isSigned.getter();
    if (((v61 ^ dispatch thunk of static BinaryInteger.isSigned.getter()) & 1) == 0)
    {
      uint64_t v68 = v148;
      uint64_t v69 = v142;
      uint64_t v70 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if (v70 >= dispatch thunk of BinaryInteger.bitWidth.getter())
      {
        uint64_t v59 = v135;
        uint64_t v73 = v68;
        uint64_t v66 = v134;
        (*v134)(v135, v73, v14);
        uint64_t v74 = v128;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        char v75 = dispatch thunk of static Comparable.< infix(_:_:)();
        v144(v74, v35);
        uint64_t v60 = v125;
        if (v75) {
          goto LABEL_30;
        }
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))v124)(v128, v69, v35);
        uint64_t v59 = v135;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        char v71 = dispatch thunk of static Comparable.< infix(_:_:)();
        (*v140)(v59, v14);
        uint64_t v60 = v125;
        uint64_t v66 = v134;
        if (v71) {
          goto LABEL_30;
        }
      }
      goto LABEL_24;
    }
    char v62 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v63 = dispatch thunk of BinaryInteger.bitWidth.getter();
    uint64_t v64 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v62) {
      break;
    }
    if (v63 >= v64)
    {
      swift_getAssociatedConformanceWitness();
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      uint64_t v84 = v148;
      char v85 = dispatch thunk of static Comparable.> infix(_:_:)();
      uint64_t v86 = *v140;
      (*v140)(v59, v14);
      uint64_t v87 = v113;
      (*(void (**)(char *, char *, uint64_t))v124)(v113, v142, v35);
      uint64_t v88 = v116;
      (*v134)(v116, v84, v14);
      if (v85)
      {
        Swift::Int v89 = v128;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        char v90 = dispatch thunk of static Comparable.< infix(_:_:)();
        uint64_t v91 = v87;
        uint64_t v92 = v144;
        v144(v89, v35);
        v92(v91, v35);
        uint64_t v66 = v134;
        uint64_t v59 = v135;
        uint64_t v60 = v125;
        if (v90) {
          goto LABEL_30;
        }
      }
      else
      {
        v86(v88, v14);
        v144(v87, v35);
        uint64_t v66 = v134;
        uint64_t v59 = v135;
        uint64_t v60 = v125;
      }
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))v124)(v128, v142, v35);
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v72 = dispatch thunk of static Comparable.< infix(_:_:)();
      (*v140)(v59, v14);
      uint64_t v66 = v134;
      if (v72) {
        goto LABEL_30;
      }
    }
LABEL_24:
    (*v66)(v59, v148, v14);
    uint64_t v93 = (uint64_t)v132;
    dispatch thunk of BinaryInteger.init<A>(_:)();
    uint64_t v94 = v146;
    uint64_t v95 = static FieldElement.integerToBitVector(input:bitWidth:)(v93, v139, v137, v133);
    if (v94)
    {
      uint64_t v105 = v144;
      v144((char *)v93, v35);
      (*v140)(v148, v14);
      (*(void (**)(char *, uint64_t))(v123 + 8))(v129, v138);
      v105(v142, v35);
      return swift_bridgeObjectRelease();
    }
    Swift::Int v96 = v95;
    uint64_t v146 = 0;
    v144((char *)v93, v35);
    Swift::Int v150 = v96;
    swift_getWitnessTable();
    Array.append<A>(contentsOf:)();
    (*v140)(v148, v14);
    uint64_t v56 = v136;
    uint64_t v57 = v129;
    uint64_t v54 = v138;
    dispatch thunk of IteratorProtocol.next()();
    if (v60(v56, 1, v14) == 1) {
      goto LABEL_26;
    }
  }
  uint64_t v65 = v128;
  if (v64 < v63)
  {
    uint64_t v66 = v134;
    (*v134)(v59, v148, v14);
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v67 = dispatch thunk of static Comparable.< infix(_:_:)();
    v144(v65, v35);
    if (v67) {
      goto LABEL_30;
    }
    goto LABEL_24;
  }
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  unint64_t v76 = v142;
  char v77 = dispatch thunk of static Comparable.< infix(_:_:)();
  v144(v65, v35);
  uint64_t v78 = v114;
  (*(void (**)(char *, char *, uint64_t))v124)(v114, v76, v35);
  uint64_t v79 = v115;
  (*v134)(v115, v148, v14);
  if ((v77 & 1) == 0)
  {
    uint64_t v80 = v79;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v81 = dispatch thunk of static Comparable.< infix(_:_:)();
    unint64_t v82 = *v140;
    (*v140)(v135, v14);
    uint64_t v83 = v80;
    uint64_t v59 = v135;
    v82(v83, v14);
    uint64_t v66 = v134;
    if (v81) {
      goto LABEL_30;
    }
    goto LABEL_24;
  }
  (*v140)(v79, v14);
  v144(v78, v35);
LABEL_30:
  Swift::Int v150 = 0;
  unint64_t v151 = 0xE000000000000000;
  _StringGuts.grow(_:)(37);
  v106._object = (void *)0x8000000260BFF8E0;
  v106._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v106);
  uint64_t v107 = v148;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v108._countAndFlagsBits = 0x646957746962202CLL;
  v108._object = (void *)0xEB000000003D6874;
  String.append(_:)(v108);
  Swift::Int v149 = v139;
  v109._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v109);
  swift_bridgeObjectRelease();
  Swift::Int v110 = v150;
  unint64_t v111 = v151;
  lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
  swift_allocError();
  *(void *)uint64_t v112 = v110;
  *(void *)(v112 + 8) = v111;
  *(unsigned char *)(v112 + 16) = 1;
  swift_willThrow();
  (*v140)(v107, v14);
  (*(void (**)(char *, uint64_t))(v123 + 8))(v129, v138);
  v144(v142, v35);
  return swift_bridgeObjectRelease();
}

uint64_t SumVectorType.decode(data:numOfMeasurements:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized SumVectorType.decode(data:numOfMeasurements:)(a1, a3);
}

uint64_t SumVectorType.truncate(measurement:)(unint64_t a1, uint64_t a2)
{
  unint64_t v5 = a1;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  Swift::Int v31 = v2[1];
  uint64_t v11 = v2[5];
  uint64_t v12 = MEMORY[0x2612241C0](v7, v6);
  if (v12 != v10)
  {
    uint64_t v13 = v12;
    uint64_t v32 = 0;
    unint64_t v33 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    uint64_t v32 = 0xD00000000000001BLL;
    unint64_t v33 = 0x8000000260BFEB20;
    uint64_t v34 = v13;
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 540877088;
    v15._object = (void *)0xE400000000000000;
    String.append(_:)(v15);
    uint64_t v34 = v10;
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    uint64_t v17 = v32;
    unint64_t v5 = v33;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v18 = v17;
    *(void *)(v18 + 8) = v5;
    *(unsigned char *)(v18 + 16) = 2;
    swift_willThrow();
    return v5;
  }
  if (v11 == 1)
  {
    swift_bridgeObjectRetain();
    return v5;
  }
  uint64_t v32 = Array.init()();
  uint64_t v19 = type metadata accessor for Array();
  Swift::Int v20 = v31;
  Swift::Int v31 = v19;
  Array.reserveCapacity(_:)(v20);
  uint64_t result = MEMORY[0x2612241C0](v5, v6);
  if (v11)
  {
    uint64_t v22 = result;
    BOOL v23 = result >= 0;
    if (v11 > 0) {
      BOOL v23 = result < 1;
    }
    if (v23) {
      return v32;
    }
    uint64_t result = 0;
    while (1)
    {
      int64_t v24 = __OFADD__(result, v11) ? ((result + v11) >> 63) ^ 0x8000000000000000 : result + v11;
      if (__OFADD__(result, v11)) {
        break;
      }
      if (result + v11 < result) {
        goto LABEL_23;
      }
      uint64_t v25 = Array.subscript.getter();
      FieldElement.init(inputVector:)(v25, v26, v27, v28, v6, *(void **)(a2 + 32), (uint64_t)v9);
      if (v3)
      {
        swift_bridgeObjectRelease();
        return v5;
      }
      Array.append(_:)();
      BOOL v29 = v22 >= v24;
      if (v11 > 0) {
        BOOL v29 = v24 >= v22;
      }
      uint64_t result = v24;
      if (v29) {
        return v32;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t SumVectorType.evaluateGadget<A>(_:at:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  type metadata accessor for MultiplicationGadget();
  swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for ParallelSum();
  return ParallelSum.evaluate<A>(at:)(a1, v8, a2, a3, a4);
}

uint64_t SumVectorType.evaluateGadget(_:at:)@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  long long v4 = v2[4];
  long long v10 = v2[3];
  long long v11 = v4;
  long long v12 = v2[5];
  uint64_t v9 = a1;
  type metadata accessor for MultiplicationGadget();
  swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for ParallelSum();
  type metadata accessor for Polynomial();
  uint64_t v6 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  return ParallelSum.evaluate<A>(at:)((uint64_t)&v9, v5, v6, WitnessTable, a2);
}

uint64_t SumVectorType.evaluate(measurement:jointRand:numOfShares:for:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v191 = a4;
  uint64_t v203 = a3;
  uint64_t v185 = a6;
  uint64_t v9 = *(void *)(a5 + 32);
  uint64_t v193 = a5;
  uint64_t v10 = *(void *)(a5 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v192 = v9;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v205 = AssociatedConformanceWitness;
  uint64_t v206 = (void (*)(char *, char *, uint64_t))AssociatedTypeWitness;
  uint64_t v13 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  uint64_t v210 = *(void *)(v13 + 24);
  uint64_t v209 = *(void *)(v210 + 16);
  uint64_t v208 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v208, v14);
  unint64_t v207 = (char *)&v177 - v15;
  uint64_t v16 = v10;
  uint64_t v17 = swift_checkMetadataState();
  uint64_t v211 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17, v18);
  uint64_t v199 = (char *)&v177 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v19, v21);
  uint64_t v194 = (char *)&v177 - v23;
  uint64_t v25 = MEMORY[0x270FA5388](v22, v24);
  uint64_t v212 = (uint64_t *)((char *)&v177 - v26);
  uint64_t v28 = MEMORY[0x270FA5388](v25, v27);
  uint64_t v195 = (char *)&v177 - v29;
  uint64_t v31 = MEMORY[0x270FA5388](v28, v30);
  unint64_t v33 = (char *)&v177 - v32;
  uint64_t v35 = MEMORY[0x270FA5388](v31, v34);
  uint64_t v196 = (char *)&v177 - v36;
  uint64_t v38 = MEMORY[0x270FA5388](v35, v37);
  uint64_t v228 = (char *)&v177 - v39;
  uint64_t v41 = MEMORY[0x270FA5388](v38, v40);
  uint64_t v204 = (char *)&v177 - v42;
  uint64_t v44 = MEMORY[0x270FA5388](v41, v43);
  uint64_t v200 = (char *)&v177 - v45;
  uint64_t v47 = MEMORY[0x270FA5388](v44, v46);
  uint64_t v190 = (char *)&v177 - v48;
  uint64_t v50 = MEMORY[0x270FA5388](v47, v49);
  uint64_t v189 = (char *)&v177 - v51;
  uint64_t v53 = MEMORY[0x270FA5388](v50, v52);
  uint64_t v182 = (char *)&v177 - v54;
  uint64_t v56 = MEMORY[0x270FA5388](v53, v55);
  uint64_t v58 = (char *)&v177 - v57;
  uint64_t v188 = *(void *)(v16 - 8);
  uint64_t v60 = MEMORY[0x270FA5388](v56, v59);
  uint64_t v183 = (char *)&v177 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = MEMORY[0x270FA5388](v60, v62);
  uint64_t v201 = (char *)&v177 - v64;
  uint64_t v66 = MEMORY[0x270FA5388](v63, v65);
  uint64_t v186 = (char *)&v177 - v67;
  MEMORY[0x270FA5388](v66, v68);
  unint64_t v187 = (char *)&v177 - v69;
  long long v70 = v6[1];
  long long v222 = *v6;
  long long v71 = v6[2];
  long long v72 = v6[4];
  long long v73 = v6[5];
  long long v225 = v6[3];
  long long v226 = v72;
  long long v227 = v73;
  long long v223 = v70;
  long long v224 = v71;
  unint64_t v74 = v222;
  unint64_t v184 = a1;
  uint64_t v75 = MEMORY[0x2612241C0](a1, v16);
  if (v75 != v74)
  {
    unint64_t v90 = v75;
    *(void *)&long long v216 = 0;
    *((void *)&v216 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    uint64_t v91 = "Invalid measurementLength: ";
    unint64_t v92 = 0xD00000000000001BLL;
LABEL_9:
    *(void *)&long long v216 = v92;
    *((void *)&v216 + 1) = (unint64_t)(v91 - 32) | 0x8000000000000000;
    unint64_t v214 = v90;
    v93._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v93);
    swift_bridgeObjectRelease();
    v94._countAndFlagsBits = 540877088;
    v94._object = (void *)0xE400000000000000;
    String.append(_:)(v94);
    unint64_t v214 = v74;
    v95._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v95);
    swift_bridgeObjectRelease();
    unint64_t v96 = v216;
    uint64_t v97 = &v230;
LABEL_10:
    uint64_t v98 = *(v97 - 32);
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v99 = v96;
    *(void *)(v99 + 8) = v98;
    *(unsigned char *)(v99 + 16) = 2;
    return swift_willThrow();
  }
  unint64_t v74 = v223;
  uint64_t v179 = a2;
  uint64_t v76 = MEMORY[0x2612241C0](a2, v16);
  if (v76 != v74)
  {
    unint64_t v90 = v76;
    *(void *)&long long v216 = 0;
    *((void *)&v216 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    uint64_t v91 = "Invalid jointRandLength: ";
    unint64_t v92 = 0xD000000000000019;
    goto LABEL_9;
  }
  long long v77 = v6[3];
  long long v218 = v6[2];
  long long v219 = v77;
  long long v78 = v6[5];
  long long v220 = v6[4];
  long long v221 = v78;
  long long v79 = v6[1];
  long long v216 = *v6;
  long long v217 = v79;
  uint64_t v80 = v192;
  uint64_t v81 = type metadata accessor for GadgetEvaluation();
  uint64_t v82 = MEMORY[0x2612241C0](v191, v81);
  uint64_t v83 = *(void *)(SumVectorType.gadgetParameters.getter() + 16);
  swift_bridgeObjectRelease();
  unint64_t v202 = v82;
  if (v82 != v83)
  {
    unint64_t v214 = 0;
    unint64_t v215 = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    unint64_t v214 = 0x2064696C61766E49;
    unint64_t v215 = 0xEF203A746E756F63;
    unint64_t v213 = v202;
    v101._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v101);
    swift_bridgeObjectRelease();
    v102._countAndFlagsBits = 540877088;
    v102._object = (void *)0xE400000000000000;
    String.append(_:)(v102);
    SumVectorType.gadgetParameters.getter();
    v103._countAndFlagsBits = MEMORY[0x261224130]();
    String.append(_:)(v103);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v96 = v214;
    uint64_t v97 = &v229;
    goto LABEL_10;
  }
  uint64_t v177 = v81;
  *(void *)&long long v216 = v203;
  unint64_t v202 = lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of BinaryInteger.init<A>(_:)();
  uint64_t v84 = v186;
  FieldElement.init(_:)((uint64_t)v58, v16, v80);
  uint64_t v85 = (uint64_t)v201;
  (*(void (**)(char *, char *, uint64_t))(v188 + 16))(v201, v84, v16);
  FieldElement.init(other:)(v85, v16, v80);
  uint64_t v86 = v189;
  (*(void (**)(uint64_t, uint64_t))(v80 + 88))(v16, v80);
  char v87 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v178 = v16;
  if ((v87 & 1) == 0)
  {
    char v104 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v105 = dispatch thunk of BinaryInteger.bitWidth.getter();
    uint64_t v89 = v205;
    if (v104)
    {
      if (v105 > 64) {
        goto LABEL_20;
      }
      swift_getAssociatedConformanceWitness();
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      char v106 = dispatch thunk of static Comparable.>= infix(_:_:)();
      uint64_t v107 = v211;
      Swift::String v108 = *(void (**)(char *, uint64_t))(v211 + 8);
      v108(v58, v17);
      Swift::String v109 = *(void (**)(char *, char *, uint64_t))(v107 + 16);
      Swift::Int v110 = v199;
      v109(v199, v86, v17);
      if ((v106 & 1) == 0)
      {
        v108(v110, v17);
        uint64_t v89 = v205;
        goto LABEL_21;
      }
      uint64_t v111 = dispatch thunk of BinaryInteger._lowWord.getter();
      v108(v110, v17);
      uint64_t v89 = v205;
      if (!v111) {
        goto LABEL_57;
      }
LABEL_21:
      uint64_t v201 = (char *)swift_checkMetadataState();
      (*(void (**)(char *, uint64_t))(v89 + 24))(v201, v89);
      uint64_t v203 = swift_getAssociatedConformanceWitness();
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      uint64_t v113 = v200;
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      uint64_t v114 = v211;
      uint64_t v116 = v211 + 8;
      unint64_t v115 = *(void (**)(char *, uint64_t))(v211 + 8);
      v115(v113, v17);
      v115(v58, v17);
      uint64_t v118 = v114 + 16;
      Swift::Int v117 = *(void (**)(char *, char *, uint64_t))(v114 + 16);
      uint64_t v211 = v118;
      v117(v204, v189, v17);
      uint64_t v119 = v228;
      uint64_t v206 = v117;
      v117(v228, v190, v17);
      *(void *)&long long v216 = 1;
      dispatch thunk of BinaryInteger.init<A>(_:)();
      uint64_t v120 = v205;
      (*(void (**)(char *))(v205 + 64))(v58);
      unint64_t v121 = v119;
      v115(v58, v17);
      uint64_t v198 = v120 + 56;
      uint64_t v122 = (void (**)(char *, char *, uint64_t))(v211 + 16);
      uint64_t v200 = v33;
      uint64_t v197 = (void (**)(char *, char *, uint64_t))(v211 + 16);
      uint64_t v199 = (char *)v13;
      uint64_t v180 = v58;
      uint64_t v210 = v116;
      while (1)
      {
        v206(v33, v121, v17);
        if (dispatch thunk of static BinaryInteger.isSigned.getter())
        {
          char v130 = dispatch thunk of static BinaryInteger.isSigned.getter();
          uint64_t v131 = dispatch thunk of BinaryInteger.bitWidth.getter();
          if (v130)
          {
            if (v131 <= 128)
            {
              dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
              dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
              char v132 = dispatch thunk of static Comparable.>= infix(_:_:)();
              v115(v58, v17);
              uint64_t v133 = v33;
              uint64_t v134 = (uint64_t)v195;
              v206(v195, v133, v17);
              if (v132)
              {
                unint64_t v135 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
                static FixedWidthInteger._truncatingInit<A>(_:)(v134, (uint64_t)&type metadata for _UInt128, v17, v135, v13, (uint64_t)&v216);
                v115((char *)v134, v17);
                long long v136 = v216;
                v115(v133, v17);
                if (v136 == 0) {
                  goto LABEL_55;
                }
              }
              else
              {
                v115((char *)v134, v17);
                v115(v133, v17);
              }
              goto LABEL_36;
            }
          }
          else if (v131 < 128)
          {
LABEL_32:
            unint64_t v137 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
            static FixedWidthInteger._truncatingInit<A>(_:)((uint64_t)v33, (uint64_t)&type metadata for _UInt128, v17, v137, v13, (uint64_t)&v216);
            long long v138 = v216;
            v115(v33, v17);
            if (v138 == 0) {
              goto LABEL_55;
            }
            goto LABEL_36;
          }
        }
        else if (dispatch thunk of BinaryInteger.bitWidth.getter() < 128)
        {
          goto LABEL_32;
        }
        lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
        long long v216 = 0uLL;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        char v139 = dispatch thunk of static Equatable.== infix(_:_:)();
        v115(v58, v17);
        v115(v33, v17);
        if (v139)
        {
LABEL_55:
          v115(v228, v17);
          v115(v204, v17);
          uint64_t v159 = v182;
          (*v122)(v182, v196, v17);
          v115(v190, v17);
          v115(v189, v17);
          uint64_t v160 = v192;
          uint64_t v161 = v187;
          uint64_t v162 = v178;
          (*(void (**)(char *, uint64_t, uint64_t))(v192 + 96))(v159, v178, v192);
          uint64_t v228 = *(char **)(v188 + 8);
          ((void (*)(char *, uint64_t))v228)(v186, v162);
          uint64_t v163 = v183;
          uint64_t v164 = v179;
          Array.subscript.getter();
          long long v216 = v225;
          long long v217 = v226;
          long long v218 = v227;
          unint64_t v214 = v184;
          type metadata accessor for Array();
          swift_bridgeObjectRetain();
          swift_getWitnessTable();
          uint64_t v165 = ArraySlice.init<A>(_:)();
          uint64_t v211 = v166;
          uint64_t v210 = v167;
          uint64_t v169 = v168;
          uint64_t v170 = Array.subscript.getter();
          uint64_t v212 = &v177;
          unint64_t v213 = v214;
          MEMORY[0x270FA5388](v170, v171);
          uint64_t v172 = v193;
          uint64_t v173 = *(void *)(v193 + 24);
          *(&v177 - 10) = v162;
          *(&v177 - 9) = v173;
          *(&v177 - 8) = v160;
          *(_OWORD *)(&v177 - 7) = *(_OWORD *)(v172 + 40);
          *(&v177 - 5) = (uint64_t)v163;
          *(&v177 - 4) = (uint64_t)v161;
          *(&v177 - 3) = v164;
          char v176 = &v222;
          type metadata accessor for MultiplicationGadget();
          swift_getWitnessTable();
          uint64_t v174 = type metadata accessor for ParallelSum();
          ParallelSum.chunkEvaluateSum(_:for:_:)(v165, v211, v210, v169, &v213, (void (*)(void))partial apply for closure #1 in SumVectorType.evaluate(measurement:jointRand:numOfShares:for:), (uint64_t)(&v177 - 12), v174, v185);
          outlined consume of GadgetEvaluation<Field32>(v213);
          swift_unknownObjectRelease();
          uint64_t v175 = (uint64_t (*)(char *, uint64_t))v228;
          ((void (*)(char *, uint64_t))v228)(v161, v162);
          return v175(v163, v162);
        }
LABEL_36:
        dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        uint64_t v140 = (uint64_t)v212;
        dispatch thunk of static BinaryInteger.& infix(_:_:)();
        v115(v58, v17);
        if (dispatch thunk of static BinaryInteger.isSigned.getter())
        {
          char v141 = dispatch thunk of static BinaryInteger.isSigned.getter();
          uint64_t v142 = dispatch thunk of BinaryInteger.bitWidth.getter();
          if (v141)
          {
            if (v142 <= 128)
            {
              dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
              dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
              uint64_t v152 = (uint64_t)v212;
              char v153 = dispatch thunk of static Comparable.>= infix(_:_:)();
              v115(v58, v17);
              uint64_t v154 = (uint64_t)v194;
              v206(v194, (char *)v152, v17);
              if ((v153 & 1) == 0)
              {
                v115((char *)v154, v17);
                v115((char *)v152, v17);
                uint64_t v123 = v205;
                uint64_t v124 = v204;
                uint64_t v125 = v201;
                uint64_t v126 = v115;
                uint64_t v122 = v197;
                uint64_t v58 = v180;
LABEL_23:
                uint64_t v127 = v196;
                (*(void (**)(char *, char *, char *, uint64_t))(v123 + 56))(v196, v124, v125, v123);
                v126(v127, v17);
                (*v122)(v127, v58, v17);
                goto LABEL_24;
              }
              unint64_t v155 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
              static FixedWidthInteger._truncatingInit<A>(_:)(v154, (uint64_t)&type metadata for _UInt128, v17, v155, v13, (uint64_t)&v216);
              v115((char *)v154, v17);
              uint64_t v157 = *((void *)&v216 + 1);
              uint64_t v156 = v216;
              v115((char *)v152, v17);
              uint64_t v150 = v157 | v156;
              uint64_t v123 = v205;
              uint64_t v124 = v204;
              uint64_t v125 = v201;
              uint64_t v126 = v115;
              uint64_t v122 = v197;
              uint64_t v58 = v180;
              goto LABEL_46;
            }
            lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
            long long v216 = 0uLL;
            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
            uint64_t v143 = (uint64_t)v212;
            int v181 = dispatch thunk of static Equatable.== infix(_:_:)();
            v115(v58, v17);
            v115((char *)v143, v17);
            uint64_t v123 = v205;
            uint64_t v126 = v115;
            uint64_t v124 = v204;
            uint64_t v125 = v201;
          }
          else
          {
            if (v142 < 128)
            {
              unint64_t v148 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
              uint64_t v149 = (uint64_t)v212;
              static FixedWidthInteger._truncatingInit<A>(_:)((uint64_t)v212, (uint64_t)&type metadata for _UInt128, v17, v148, v13, (uint64_t)&v216);
              uint64_t v147 = *((void *)&v216 + 1);
              uint64_t v145 = v216;
              uint64_t v146 = v149;
LABEL_45:
              v115((char *)v146, v17);
              uint64_t v150 = v147 | v145;
              uint64_t v123 = v205;
              uint64_t v124 = v204;
              uint64_t v125 = v201;
              uint64_t v126 = v115;
              uint64_t v122 = v197;
LABEL_46:
              if (v150) {
                goto LABEL_23;
              }
              goto LABEL_24;
            }
            lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
            long long v216 = 0uLL;
            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
            uint64_t v158 = (uint64_t)v212;
            int v181 = dispatch thunk of static Equatable.== infix(_:_:)();
            v115(v58, v17);
            v115((char *)v158, v17);
            uint64_t v123 = v205;
            uint64_t v124 = v204;
            uint64_t v125 = v201;
            uint64_t v126 = v115;
            uint64_t v122 = v197;
          }
          if ((v181 & 1) == 0) {
            goto LABEL_23;
          }
        }
        else
        {
          if (dispatch thunk of BinaryInteger.bitWidth.getter() < 128)
          {
            unint64_t v144 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
            static FixedWidthInteger._truncatingInit<A>(_:)(v140, (uint64_t)&type metadata for _UInt128, v17, v144, v13, (uint64_t)&v216);
            uint64_t v145 = v216;
            uint64_t v146 = v140;
            uint64_t v147 = *((void *)&v216 + 1);
            goto LABEL_45;
          }
          lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
          long long v216 = 0uLL;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          char v151 = dispatch thunk of static Equatable.== infix(_:_:)();
          v115(v58, v17);
          v115((char *)v140, v17);
          uint64_t v123 = v205;
          uint64_t v124 = v204;
          uint64_t v125 = v201;
          uint64_t v126 = v115;
          uint64_t v122 = v197;
          if ((v151 & 1) == 0) {
            goto LABEL_23;
          }
        }
LABEL_24:
        (*(void (**)(char *, char *, char *, uint64_t))(v123 + 56))(v124, v124, v125, v123);
        unint64_t v115 = v126;
        v126(v124, v17);
        Swift::String v128 = *v122;
        (*v122)(v124, v58, v17);
        *(void *)&long long v216 = 1;
        uint64_t v129 = v228;
        uint64_t v13 = (uint64_t)v199;
        dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)();
        unint64_t v121 = v129;
        v126(v129, v17);
        v128(v129, v58, v17);
        unint64_t v33 = v200;
      }
    }
    if (v105 >= 64) {
      goto LABEL_20;
    }
LABEL_18:
    if (!dispatch thunk of BinaryInteger._lowWord.getter()) {
      goto LABEL_57;
    }
    goto LABEL_21;
  }
  uint64_t v88 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v89 = v205;
  if (v88 < 64) {
    goto LABEL_18;
  }
LABEL_20:
  *(void *)&long long v216 = 0;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  char v112 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v211 + 8))(v58, v17);
  if ((v112 & 1) == 0) {
    goto LABEL_21;
  }
LABEL_57:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in SumVectorType.evaluate(measurement:jointRand:numOfShares:for:)(void (*a1)(unint64_t, unsigned char *, uint64_t), uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v122 = a8;
  uint64_t v125 = a7;
  uint64_t v155 = a6;
  uint64_t v124 = a5;
  unint64_t v153 = a4;
  swift_getAssociatedTypeWitness();
  uint64_t v156 = a12;
  Swift::Int AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v17 = MEMORY[0x270FA5388](AssociatedTypeWitness, v16);
  unint64_t v148 = &v115[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = MEMORY[0x270FA5388](v17, v19);
  uint64_t v147 = &v115[-v21];
  uint64_t v23 = MEMORY[0x270FA5388](v20, v22);
  uint64_t v146 = &v115[-v24];
  uint64_t v126 = *(void *)(a10 - 8);
  uint64_t v26 = MEMORY[0x270FA5388](v23, v25);
  Swift::Int v117 = &v115[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v29 = MEMORY[0x270FA5388](v26, v28);
  uint64_t v116 = &v115[-v30];
  uint64_t v32 = MEMORY[0x270FA5388](v29, v31);
  unint64_t v121 = &v115[-v33];
  uint64_t v35 = MEMORY[0x270FA5388](v32, v34);
  uint64_t v123 = &v115[-v36];
  uint64_t v38 = MEMORY[0x270FA5388](v35, v37);
  uint64_t v154 = &v115[-v39];
  uint64_t v41 = MEMORY[0x270FA5388](v38, v40);
  uint64_t v145 = &v115[-v42];
  MEMORY[0x270FA5388](v41, v43);
  uint64_t v45 = &v115[-v44];
  char v151 = a1;
  uint64_t v152 = a3;
  uint64_t v46 = a2;
  uint64_t result = ArraySlice.count.getter();
  if (result < 0) {
    goto LABEL_25;
  }
  uint64_t v48 = result;
  if (result)
  {
    uint64_t v49 = swift_checkMetadataState();
    uint64_t v50 = 0;
    uint64_t v51 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v156 + 96);
    uint64_t v142 = v156 + 96;
    uint64_t v143 = v49;
    uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v156 + 88);
    uint64_t v140 = v156 + 88;
    char v141 = v51;
    unint64_t v137 = *(void (**)(unsigned char *, unsigned char *))(AssociatedConformanceWitness + 56);
    Swift::Int v138 = AssociatedConformanceWitness + 56;
    char v139 = v52;
    uint64_t v136 = v126 + 16;
    unint64_t v135 = (void (**)(unsigned char *, uint64_t))(v15 + 8);
    uint64_t v134 = v126 + 8;
    uint64_t v118 = v126 + 40;
    Swift::Int v53 = 1;
    uint64_t v120 = v46;
    unint64_t v144 = v45;
    uint64_t v119 = v48;
    while (1)
    {
      uint64_t v54 = ArraySlice.startIndex.getter();
      BOOL v55 = __OFADD__(v54, v50);
      uint64_t result = v54 + v50;
      if (v55) {
        break;
      }
      uint64_t result = ArraySlice.subscript.getter();
      if (v50 == 0x4000000000000000) {
        goto LABEL_23;
      }
      uint64_t v133 = v50 + 1;
      Swift::Int v129 = v53 - 1;
      uint64_t v56 = v126;
      uint64_t v57 = *(void (**)(uint64_t, unsigned char *, uint64_t))(v126 + 16);
      char v130 = v57;
      v57((uint64_t)v154, (unsigned char *)v155, a10);
      uint64_t v58 = (uint64_t)v123;
      v57((uint64_t)v123, v45, a10);
      Swift::Int v157 = v53;
      uint64_t v59 = v156;
      FieldElement.init(other:)(v58, a10, v156);
      uint64_t v60 = v147;
      uint64_t v61 = v139;
      v139(a10, v59);
      uint64_t v62 = v61;
      uint64_t v63 = v148;
      uint64_t v64 = v154;
      v62(a10, v59);
      uint64_t v65 = v146;
      uint64_t v66 = v60;
      v137(v60, v63);
      uint64_t v67 = *v135;
      uint64_t v131 = v67;
      uint64_t v68 = v63;
      uint64_t v69 = AssociatedTypeWitness;
      v67(v68, AssociatedTypeWitness);
      v67(v66, v69);
      long long v70 = v65;
      long long v71 = v145;
      v141(v70, a10, v59);
      char v132 = *(void (**)(void))(v56 + 8);
      uint64_t v72 = (uint64_t)v64;
      ((void (*)(unsigned char *, uint64_t))v132)(v64, a10);
      uint64_t v73 = type metadata accessor for Array();
      unint64_t v74 = v124;
      Array._makeMutableAndUnique()();
      uint64_t v75 = *v74;
      Swift::Int v76 = v129;
      Array._checkSubscript_mutating(_:)(v129);
      char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
      uint64_t v78 = v75 & 0xFFFFFFFFFFFFFF8;
      if ((isClassOrObjCExistentialType & 1) == 0) {
        uint64_t v78 = v75;
      }
      unint64_t v128 = (*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
      uint64_t v127 = *(void *)(v56 + 72);
      long long v79 = *(void (**)(unint64_t, unsigned char *, uint64_t))(v56 + 40);
      v79(v78 + v128 + v127 * v76, v71, a10);
      uint64_t v80 = v79;
      AggregateShare.share.modify(v73);
      v130(v72, v144, a10);
      uint64_t v81 = v121;
      FieldElement.init(other:)(v72, a10, v59);
      dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
      Array._makeMutableAndUnique()();
      uint64_t v82 = *v74;
      Array._checkSubscript_mutating(_:)(v157);
      char v83 = _swift_isClassOrObjCExistentialType();
      uint64_t v84 = v82 & 0xFFFFFFFFFFFFFF8;
      if ((v83 & 1) == 0) {
        uint64_t v84 = v82;
      }
      v80(v84 + v128 + v127 * v157, v81, a10);
      Swift::Int v85 = v157;
      AggregateShare.share.modify(v73);
      uint64_t v86 = v72;
      Array.subscript.getter();
      char v87 = v147;
      uint64_t v88 = v156;
      uint64_t v89 = v139;
      v139(a10, v156);
      unint64_t v90 = v148;
      v89(a10, v88);
      uint64_t v91 = v146;
      v137(v87, v90);
      unint64_t v92 = v90;
      uint64_t v93 = AssociatedTypeWitness;
      Swift::String v94 = v131;
      v131(v92, AssociatedTypeWitness);
      v94(v87, v93);
      v141(v91, a10, v88);
      uint64_t v50 = v133;
      Swift::String v95 = v132;
      ((void (*)(uint64_t, uint64_t))v132)(v86, a10);
      uint64_t v45 = v144;
      v95();
      Swift::Int v53 = v85 + 2;
      if (v119 == v50) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_11:
  uint64_t result = ArraySlice.count.getter();
  uint64_t v96 = *(void *)(a9 + 88);
  if (v96 < result)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v96 != result)
  {
    uint64_t v97 = v96 - result;
    if (v96 <= result)
    {
LABEL_27:
      __break(1u);
      return result;
    }
    Swift::Int v157 = v126 + 40;
    uint64_t v147 = (unsigned char *)(v126 + 8);
    unint64_t v148 = (unsigned char *)(v126 + 16);
    uint64_t v98 = result + 0x4000000000000000;
    Swift::Int v99 = 2 * result;
    Swift::String v100 = v124;
    while ((v98 & 0x8000000000000000) == 0)
    {
      Swift::String v101 = v116;
      uint64_t v155 = v97;
      dispatch thunk of static AdditiveArithmetic.zero.getter();
      uint64_t v102 = type metadata accessor for Array();
      uint64_t AssociatedTypeWitness = v102;
      Array._makeMutableAndUnique()();
      uint64_t v103 = *v100;
      Array._checkSubscript_mutating(_:)(v99);
      char v104 = _swift_isClassOrObjCExistentialType();
      uint64_t v105 = v103 & 0xFFFFFFFFFFFFFF8;
      if ((v104 & 1) == 0) {
        uint64_t v105 = v103;
      }
      uint64_t v106 = v126;
      unint64_t v153 = (*(unsigned __int8 *)(v126 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v126 + 80);
      uint64_t v152 = *(void *)(v126 + 72);
      char v151 = *(void (**)(unint64_t, unsigned char *, uint64_t))(v126 + 40);
      v151(v105 + v153 + v152 * v99, v101, a10);
      AggregateShare.share.modify(v102);
      Swift::Int AssociatedConformanceWitness = v99 + 1;
      uint64_t v107 = v154;
      dispatch thunk of static AdditiveArithmetic.zero.getter();
      uint64_t v108 = (uint64_t)v123;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v106 + 16))(v123, v107, a10);
      Swift::String v109 = v117;
      FieldElement.init(other:)(v108, a10, v156);
      dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
      (*(void (**)(unsigned char *, uint64_t))(v106 + 8))(v107, a10);
      uint64_t v110 = AssociatedTypeWitness;
      Array._makeMutableAndUnique()();
      uint64_t v111 = *v100;
      Swift::Int v112 = AssociatedConformanceWitness;
      Array._checkSubscript_mutating(_:)(AssociatedConformanceWitness);
      char v113 = _swift_isClassOrObjCExistentialType();
      uint64_t v114 = v111 & 0xFFFFFFFFFFFFFF8;
      if ((v113 & 1) == 0) {
        uint64_t v114 = v111;
      }
      v151(v114 + v153 + v152 * v112, v109, a10);
      uint64_t result = AggregateShare.share.modify(v110);
      ++v98;
      v99 += 2;
      uint64_t v97 = v155 - 1;
      if (v155 == 1) {
        return result;
      }
    }
    goto LABEL_24;
  }
  return result;
}

uint64_t protocol witness for FullyLinearProof.encode(measurement:) in conformance SumVectorType<A, B>(void (**a1)(char *, uint64_t), void *a2)
{
  return SumVectorType.encode(measurement:)(a1, a2);
}

uint64_t protocol witness for FullyLinearProof.decode(data:numOfMeasurements:) in conformance SumVectorType<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized SumVectorType.decode(data:numOfMeasurements:)(a1, a2);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

uint64_t protocol witness for FullyLinearProof.truncate(measurement:) in conformance SumVectorType<A, B>(unint64_t a1, uint64_t a2)
{
  return SumVectorType.truncate(measurement:)(a1, a2);
}

uint64_t protocol witness for FullyLinearProof.evaluate(measurement:jointRand:numOfShares:for:) in conformance SumVectorType<A, B>@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return SumVectorType.evaluate(measurement:jointRand:numOfShares:for:)(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for FullyLinearProof.evaluateGadget<A>(_:at:) in conformance SumVectorType<A, B>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return SumVectorType.evaluateGadget<A>(_:at:)(a1, a2, a3, a4);
}

uint64_t specialized SumVectorType.decode(data:numOfMeasurements:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  if (MEMORY[0x2612241C0](a1, v6) == v5) {
    return static FieldElement.elementsToIntegers(_:)(a1, v6, *(void *)(a2 + 32));
  }
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 540877088;
  v9._object = (void *)0xE400000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
  swift_allocError();
  *(void *)uint64_t v11 = 0xD000000000000016;
  *(void *)(v11 + 8) = 0x8000000260BFE7F0;
  *(unsigned char *)(v11 + 16) = 2;
  return swift_willThrow();
}

uint64_t partial apply for closure #1 in SumVectorType.evaluate(measurement:jointRand:numOfShares:for:)(void (*a1)(unint64_t, unsigned char *, uint64_t), uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  return closure #1 in SumVectorType.evaluate(measurement:jointRand:numOfShares:for:)(a1, a2, a3, a4, a5, v5[7], v5[8], v5[9], v5[10], v5[2], v5[3], v5[4]);
}

uint64_t type metadata instantiation function for SumVectorType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 72);
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t getEnumTagSinglePayload for SumVectorType(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SumVectorType(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 96) = v3;
  return result;
}

uint64_t type metadata accessor for SumVectorType()
{
  return swift_getGenericMetadata();
}

uint64_t PINE<>.shardAndEncode(_:nonce:seedBytes:)(float *a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  memcpy(__dst, v6, sizeof(__dst));
  outlined copy of Data._Representation(a3, a4);
  uint64_t v14 = specialized _copyCollectionToContiguousArray<A>(_:)(a3, a4);
  outlined consume of Data._Representation(a3, a4);
  uint64_t v15 = specialized PINE.shard<A>(_:nonce:seedBytes:)(&v49, a1, a2, (uint64_t)v14, a5, a6);
  swift_release();
  if (v7) {
    return a6;
  }
  uint64_t v16 = v49;
  uint64_t v17 = v50;
  uint64_t v18 = specialized PINEPublicShare.encodedLength.getter(v49, v50);
  uint64_t v49 = specialized Data.init(capacity:)(v18);
  uint64_t v50 = v19;
  specialized PINEPublicShare.encode<A>(into:)((uint64_t)&v49, v16, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a6 = v49;
  int64_t v20 = *(void *)(v15 + 16);
  if (!v20)
  {
    swift_bridgeObjectRelease();
    return a6;
  }
  uint64_t v45 = v49;
  uint64_t v55 = MEMORY[0x263F8EE78];
  uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
  for (uint64_t i = (void *)(v15 + 72); ; i += 6)
  {
    char v23 = *((unsigned char *)i - 32);
    uint64_t v24 = *(i - 3);
    char v25 = *((unsigned char *)i - 16);
    uint64_t v26 = *(i - 1);
    uint64_t v27 = *i;
    uint64_t v47 = *(i - 5);
    unint64_t v28 = *(void *)(v47 + 16);
    if ((v23 & 1) == 0 && v28)
    {
      if (v28 >> 60) {
        goto LABEL_39;
      }
      v28 *= 8;
    }
    unint64_t v29 = *(void *)(v24 + 16);
    if ((*(unsigned char *)(i - 2) & 1) == 0 && v29)
    {
      if (v29 >> 60) {
        goto LABEL_40;
      }
      v29 *= 8;
    }
    BOOL v30 = __OFADD__(v28, v29);
    unint64_t v31 = v28 + v29;
    if (v30) {
      break;
    }
    uint64_t v32 = *(void *)(v26 + 16);
    BOOL v30 = __OFADD__(v31, v32);
    uint64_t v33 = v31 + v32;
    if (v30) {
      goto LABEL_37;
    }
    uint64_t v34 = *(void *)(v27 + 16);
    uint64_t v35 = v33 + v34;
    if (__OFADD__(v33, v34)) {
      goto LABEL_38;
    }
    if (v35)
    {
      if (v35 <= 14)
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        long long v53 = 0uLL;
        if (v23) {
          goto LABEL_23;
        }
      }
      else
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v36 = __DataStorage.init(capacity:)();
        if ((unint64_t)v35 >= 0x7FFFFFFF)
        {
          type metadata accessor for Data.RangeReference();
          uint64_t v38 = swift_allocObject();
          *(void *)(v38 + 16) = 0;
          *(void *)(v38 + 24) = 0;
          *(void *)&long long v53 = v38;
          *((void *)&v53 + 1) = v36 | 0x8000000000000000;
          if (v23)
          {
LABEL_23:
            uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
            uint64_t v51 = v37;
            unint64_t v52 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]();
            uint64_t v49 = v47;
            __swift_project_boxed_opaque_existential_1(&v49, v37);
            swift_bridgeObjectRetain_n();
            Data._Representation.append(contentsOf:)();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v49);
            swift_bridgeObjectRelease();
            int64_t v46 = v20;
            if (v25) {
              goto LABEL_27;
            }
            goto LABEL_24;
          }
        }
        else
        {
          *(void *)&long long v53 = 0;
          *((void *)&v53 + 1) = v36 | 0x4000000000000000;
          if (v23) {
            goto LABEL_23;
          }
        }
      }
    }
    else
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      *(void *)&long long v53 = 0;
      *((void *)&v53 + 1) = 0xC000000000000000;
      if (v23) {
        goto LABEL_23;
      }
    }
    specialized Collection<>.encode<A>(into:)((uint64_t)&v53, v47);
    int64_t v46 = v20;
    if (v25)
    {
LABEL_27:
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
      uint64_t v51 = v39;
      unint64_t v52 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]();
      uint64_t v49 = v24;
      __swift_project_boxed_opaque_existential_1(&v49, v39);
      swift_bridgeObjectRetain_n();
      Data._Representation.append(contentsOf:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v49);
      swift_bridgeObjectRelease();
      goto LABEL_28;
    }
LABEL_24:
    specialized Collection<>.encode<A>(into:)((uint64_t)&v53, v24);
LABEL_28:
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
    uint64_t v51 = v40;
    unint64_t v41 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]();
    unint64_t v52 = v41;
    uint64_t v49 = v26;
    __swift_project_boxed_opaque_existential_1(&v49, v40);
    swift_bridgeObjectRetain_n();
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v49);
    swift_bridgeObjectRelease();
    uint64_t v51 = v40;
    unint64_t v52 = v41;
    uint64_t v49 = v27;
    __swift_project_boxed_opaque_existential_1(&v49, v40);
    swift_bridgeObjectRetain_n();
    Data._Representation.append(contentsOf:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v49);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    long long v48 = v53;
    uint64_t v42 = v55;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v42 + 16) + 1, 1);
      uint64_t v42 = v55;
    }
    unint64_t v44 = *(void *)(v42 + 16);
    unint64_t v43 = *(void *)(v42 + 24);
    if (v44 >= v43 >> 1)
    {
      uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v43 > 1), v44 + 1, 1);
      uint64_t v42 = v55;
    }
    *(void *)(v42 + 16) = v44 + 1;
    *(_OWORD *)(v42 + 16 * v44 + 32) = v48;
    int64_t v20 = v46 - 1;
    if (v46 == 1)
    {
      swift_bridgeObjectRelease();
      return v45;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

uint64_t PINE<>.shardAndEncodeIntoBytes(_:nonce:seedBytes:)(float *a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  memcpy(__dst, v6, 0x148uLL);
  outlined copy of Data._Representation(a3, a4);
  uint64_t v14 = specialized _copyCollectionToContiguousArray<A>(_:)(a3, a4);
  outlined consume of Data._Representation(a3, a4);
  uint64_t v15 = __dst;
  uint64_t v16 = specialized PINE.shard<A>(_:nonce:seedBytes:)((uint64_t *)&v57, a1, a2, (uint64_t)v14, a5, a6);
  swift_release();
  if (v7) {
    return (uint64_t)v15;
  }
  uint64_t v17 = v57;
  uint64_t v18 = v58;
  uint64_t v19 = specialized PINEPublicShare.encodedLength.getter((uint64_t)v57, v58);
  int64_t v20 = (char *)MEMORY[0x263F8EE78];
  uint64_t v57 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19 & ~(v19 >> 63), 0, MEMORY[0x263F8EE78]);
  specialized PINEPublicShare.encode<A>(into:)((char *)&v57, (uint64_t)v17, v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v15 = v57;
  int64_t v21 = *(void *)(v16 + 16);
  if (!v21)
  {
    swift_bridgeObjectRelease();
    return (uint64_t)v15;
  }
  uint64_t v54 = v57;
  uint64_t v57 = v20;
  uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
  uint64_t v23 = 0;
  uint64_t v24 = v57;
  int64_t v55 = v21;
  uint64_t v56 = v16 + 32;
  while (1)
  {
    uint64_t v25 = v56 + 48 * v23;
    uint64_t v26 = *(void *)v25;
    char v27 = *(unsigned char *)(v25 + 8);
    uint64_t v28 = *(void *)(v25 + 16);
    char v29 = *(unsigned char *)(v25 + 24);
    uint64_t v31 = *(void *)(v25 + 32);
    uint64_t v30 = *(void *)(v25 + 40);
    unint64_t v32 = *(void *)(*(void *)v25 + 16);
    if ((v27 & 1) == 0 && v32)
    {
      if (v32 >> 60) {
        goto LABEL_36;
      }
      v32 *= 8;
    }
    unint64_t v33 = *(void *)(v28 + 16);
    if ((v29 & 1) == 0 && v33)
    {
      if (v33 >> 60) {
        goto LABEL_37;
      }
      v33 *= 8;
    }
    BOOL v34 = __OFADD__(v32, v33);
    unint64_t v35 = v32 + v33;
    if (v34) {
      break;
    }
    uint64_t v36 = *(void *)(v31 + 16);
    BOOL v34 = __OFADD__(v35, v36);
    uint64_t v37 = v35 + v36;
    if (v34) {
      goto LABEL_34;
    }
    uint64_t v38 = *(void *)(v30 + 16);
    BOOL v34 = __OFADD__(v37, v38);
    uint64_t v39 = v37 + v38;
    if (v34) {
      goto LABEL_35;
    }
    int64_t v40 = v39 & ~(v39 >> 63);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40, 0, MEMORY[0x263F8EE78]);
    if (v27)
    {
      uint64_t v41 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v41);
    }
    else
    {
      uint64_t v42 = *(void *)(v26 + 16);
      if (v42)
      {
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v42; ++i)
        {
          uint64_t v44 = *(void *)(v26 + 8 * i + 32);
          specialized FieldElement.encode<A>(into:)((uint64_t *)&v60, v44);
        }
        swift_bridgeObjectRelease();
      }
    }
    if (v29)
    {
      uint64_t v45 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v45);
    }
    else
    {
      uint64_t v46 = *(void *)(v28 + 16);
      if (v46)
      {
        swift_bridgeObjectRetain();
        for (uint64_t j = 0; j != v46; ++j)
        {
          uint64_t v48 = *(void *)(v28 + 8 * j + 32);
          specialized FieldElement.encode<A>(into:)((uint64_t *)&v60, v48);
        }
        swift_bridgeObjectRelease();
      }
    }
    uint64_t v49 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v49);
    uint64_t v50 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v50);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t result = swift_bridgeObjectRelease_n();
    uint64_t v51 = v60;
    uint64_t v57 = v24;
    unint64_t v53 = *((void *)v24 + 2);
    unint64_t v52 = *((void *)v24 + 3);
    if (v53 >= v52 >> 1)
    {
      uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v52 > 1), v53 + 1, 1);
      uint64_t v24 = v57;
    }
    ++v23;
    *((void *)v24 + 2) = v53 + 1;
    *(void *)&v24[8 * v53 + 32] = v51;
    if (v23 == v55)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v54;
    }
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t PINE<>.encodedAggregateShare(_:)()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = specialized VDAFEncodable.encodedBytes.getter(v0);
  swift_bridgeObjectRelease();
  return v1;
}

size_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF4SeedVs5NeverOTg50118_s4VDAF16Prio3PublicShareV4from9parameterACyxq_Gqd___Sb19isJointRandRequired_Si16numOfAggregatorstSgtKcSkRd__s5UInt8V7b12Rtd__lufcAA4E8VSiXEfU_s10ArraySliceVys5UInt8VGSiTf1cn_n(size_t result, int64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4 = a2 - result;
  if (__OFSUB__(a2, result)) {
    goto LABEL_59;
  }
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (!v4) {
    return v5;
  }
  int64_t v9 = result;
  uint64_t v25 = MEMORY[0x263F8EE78];
  uint64_t result = (size_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
  if (a4 < 0) {
    goto LABEL_60;
  }
  if (a2 >= v9 && (v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = v25;
    uint64_t v23 = a4;
    while (1)
    {
      uint64_t v11 = a3[2];
      unint64_t v10 = a3[3];
      int64_t v12 = v10 >> 1;
      uint64_t v13 = (v10 >> 1) - v11;
      if (__OFSUB__(v10 >> 1, v11))
      {
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
      uint64_t v14 = a3[1];
      if (!a4 || v13 < 0 || (int64_t v15 = v10 >> 1, v13 >= a4))
      {
        int64_t v15 = v11 + a4;
        if (__OFADD__(v11, a4)) {
          goto LABEL_55;
        }
      }
      if (v15 < v11) {
        goto LABEL_49;
      }
      if (v12 < v11) {
        goto LABEL_50;
      }
      if (v12 < v15) {
        goto LABEL_51;
      }
      if (v15 < 0) {
        goto LABEL_52;
      }
      if (!a4 || v13 < 0 || v13 >= a4)
      {
        if (__OFADD__(v11, a4)) {
          goto LABEL_56;
        }
        if (v12 < v11 + a4) {
          goto LABEL_54;
        }
        int64_t v12 = v11 + a4;
      }
      if (v12 < v11) {
        goto LABEL_53;
      }
      a3[2] = v12;
      if ((v10 & 1) == 0)
      {
        int64_t v16 = v15 - v11;
        BOOL v17 = __OFSUB__(v15, v11);
        uint64_t result = swift_unknownObjectRetain();
        if (v17) {
          goto LABEL_57;
        }
        if (v16)
        {
LABEL_29:
          uint64_t v24 = v14;
          if (v16 < 1)
          {
            uint64_t v18 = (void *)MEMORY[0x263F8EE78];
            if (v11 == v15) {
              goto LABEL_62;
            }
          }
          else
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
            uint64_t v18 = (void *)swift_allocObject();
            uint64_t result = _swift_stdlib_malloc_size(v18);
            void v18[2] = v16;
            v18[3] = 2 * result - 64;
            if (v11 == v15) {
              goto LABEL_62;
            }
          }
          memcpy(v18 + 4, (const void *)(v24 + v11), v16);
          goto LABEL_41;
        }
        goto LABEL_38;
      }
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain_n();
      uint64_t v19 = swift_dynamicCastClass();
      if (!v19)
      {
        swift_unknownObjectRelease();
        uint64_t v19 = MEMORY[0x263F8EE78];
      }
      uint64_t v20 = *(void *)(v19 + 16);
      uint64_t result = swift_release();
      int64_t v16 = v15 - v11;
      if (__OFSUB__(v15, v11)) {
        goto LABEL_58;
      }
      if (v20 != v16) {
        break;
      }
      uint64_t v18 = (void *)swift_dynamicCastClass();
      a4 = v23;
      if (!v18)
      {
        swift_unknownObjectRelease();
LABEL_38:
        uint64_t v18 = (void *)MEMORY[0x263F8EE78];
      }
LABEL_41:
      uint64_t result = swift_unknownObjectRelease();
      unint64_t v22 = *(void *)(v25 + 16);
      unint64_t v21 = *(void *)(v25 + 24);
      if (v22 >= v21 >> 1) {
        uint64_t result = (size_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1);
      }
      *(void *)(v25 + 16) = v22 + 1;
      *(void *)(v25 + 8 * v22 + 32) = v18;
      if (!--v4) {
        return v5;
      }
    }
    uint64_t result = swift_unknownObjectRelease();
    a4 = v23;
    if (v16) {
      goto LABEL_29;
    }
    goto LABEL_38;
  }
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
  return result;
}

uint64_t Prio3PublicShare.jointRandParts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t static Prio3PublicShare.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (v2)
  {
    if (v3 && (specialized static Array<A>.== infix(_:_:)(v2, v3) & 1) != 0) {
      return 1;
    }
  }
  else if (!v3)
  {
    return 1;
  }
  return 0;
}

uint64_t Prio3PublicShare.init(jointRandParts:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t Prio3PublicShare.init<A>(from:parameter:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int64_t a3@<X2>, unint64_t a4@<X4>, uint64_t a5@<X7>, size_t *a6@<X8>)
{
  uint64_t v10 = MEMORY[0x270FA5388](a1, a2);
  int64_t v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v17 & 1) == 0)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v10, v12);
    *a6 = 0;
    return result;
  }
  uint64_t v45 = v11;
  uint64_t v46 = v13;
  uint64_t v44 = a6;
  uint64_t v49 = v14;
  uint64_t v19 = v12;
  uint64_t v20 = v10;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t))(a5 + 8))(a4, a5);
  int64_t v21 = a3;
  uint64_t v22 = result * a3;
  int64_t v48 = v21;
  if ((unsigned __int128)(result * (__int128)v21) >> 64 == v22 >> 63)
  {
    uint64_t v23 = result;
    uint64_t v47 = v20;
    if (v22 != dispatch thunk of Collection.count.getter())
    {
      uint64_t v50 = 0;
      unint64_t v51 = 0xE000000000000000;
      _StringGuts.grow(_:)(29);
      uint64_t v50 = v45;
      unint64_t v51 = a4;
      uint64_t v52 = v46;
      uint64_t v53 = a5;
      type metadata accessor for Prio3PublicShare();
      uint64_t v30 = _typeName(_:qualified:)();
      unint64_t v32 = v31;
      swift_bridgeObjectRelease();
      uint64_t v50 = v30;
      unint64_t v51 = v32;
      v33._countAndFlagsBits = 0x6572697571657220;
      v33._object = (void *)0xEB00000000203A64;
      String.append(_:)(v33);
      uint64_t v54 = v23;
      v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      v35._countAndFlagsBits = 2107936;
      v35._object = (void *)0xE300000000000000;
      String.append(_:)(v35);
      uint64_t v54 = v48;
      v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v36);
      swift_bridgeObjectRelease();
      v37._countAndFlagsBits = 0x203A746F67202CLL;
      v37._object = (void *)0xE700000000000000;
      String.append(_:)(v37);
      uint64_t v38 = v47;
      uint64_t v54 = dispatch thunk of Collection.count.getter();
      v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v39);
      swift_bridgeObjectRelease();
      uint64_t v40 = v50;
      unint64_t v41 = v51;
      lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
      swift_allocError();
      *uint64_t v42 = v40;
      v42[1] = v41;
      swift_willThrow();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 8))(v38, v19);
    }
    uint64_t v24 = v49;
    uint64_t v25 = v47;
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v16, v47, v19);
    uint64_t result = ArraySlice.init<A>(_:)();
    uint64_t v50 = result;
    unint64_t v51 = v26;
    uint64_t v52 = v27;
    uint64_t v53 = v28;
    if ((v48 & 0x8000000000000000) == 0)
    {
      size_t v29 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_4VDAF4SeedVs5NeverOTg50118_s4VDAF16Prio3PublicShareV4from9parameterACyxq_Gqd___Sb19isJointRandRequired_Si16numOfAggregatorstSgtKcSkRd__s5UInt8V7b12Rtd__lufcAA4E8VSiXEfU_s10ArraySliceVys5UInt8VGSiTf1cn_n(0, v48, &v50, v23);
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v19);
      uint64_t result = swift_unknownObjectRelease();
      size_t *v44 = v29;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for Prio3PublicShare()
{
  return swift_getGenericMetadata();
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance Prio3PublicShare<A, B>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X4>, size_t *a4@<X8>)
{
  return Prio3PublicShare.init<A>(from:parameter:)(a1, *a2, a2[1], *(void *)(a3 + 24), *(void *)(a3 + 40), a4);
}

void Prio3PublicShare.encodedLength.getter()
{
  uint64_t v1 = *v0;
  if (!v1) {
    return;
  }
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2)
  {
    uint64_t v4 = (char *)MEMORY[0x263F8EE78];
    uint64_t v8 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (v8) {
      goto LABEL_10;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = 0;
  uint64_t v4 = (char *)MEMORY[0x263F8EE78];
  do
  {
    uint64_t v5 = *(void *)(*(void *)(v1 + 8 * v3 + 32) + 16);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v4 + 2) + 1, 1, v4);
    }
    unint64_t v7 = *((void *)v4 + 2);
    unint64_t v6 = *((void *)v4 + 3);
    if (v7 >= v6 >> 1) {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1, v4);
    }
    ++v3;
    *((void *)v4 + 2) = v7 + 1;
    *(void *)&v4[8 * v7 + 32] = v5;
  }
  while (v2 != v3);
  swift_bridgeObjectRelease();
  uint64_t v8 = *((void *)v4 + 2);
  if (!v8) {
    goto LABEL_15;
  }
LABEL_10:
  uint64_t v9 = 0;
  uint64_t v10 = (uint64_t *)(v4 + 32);
  while (1)
  {
    uint64_t v11 = *v10++;
    BOOL v12 = __OFADD__(v9, v11);
    v9 += v11;
    if (v12) {
      break;
    }
    if (!--v8) {
      goto LABEL_15;
    }
  }
  __break(1u);
}

uint64_t Prio3PublicShare.encode<A>(into:)()
{
  if (*(void *)v0)
  {
    uint64_t v1 = *(void *)(*(void *)v0 + 16);
    if (v1)
    {
      swift_bridgeObjectRetain();
      uint64_t v2 = 0;
      do
      {
        ++v2;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
        lazy protocol witness table accessor for type [UInt8] and conformance [A]();
        dispatch thunk of RangeReplaceableCollection.append<A>(contentsOf:)();
      }
      while (v1 != v2);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance Prio3PublicShare<A, B>()
{
  return Prio3PublicShare.encode<A>(into:)();
}

uint64_t FullyLinearProof.proofLength.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(void))(a2 + 104))();
  int64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
    uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v5 = v16;
    unint64_t v6 = (void *)(v2 + 64);
    do
    {
      uint64_t v7 = *(v6 - 4);
      uint64_t v8 = v7 + *v6;
      if (__OFADD__(v7, *v6))
      {
        __break(1u);
        goto LABEL_16;
      }
      unint64_t v10 = *(void *)(v16 + 16);
      unint64_t v9 = *(void *)(v16 + 24);
      if (v10 >= v9 >> 1) {
        uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1);
      }
      v6 += 5;
      *(void *)(v16 + 16) = v10 + 1;
      *(void *)(v16 + 8 * v10 + 32) = v8;
      --v3;
    }
    while (v3);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v11 = *(void *)(v16 + 16);
    if (!v11) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v5 = MEMORY[0x263F8EE78];
    uint64_t v11 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (!v11)
    {
LABEL_13:
      uint64_t v12 = 0;
LABEL_14:
      swift_bridgeObjectRelease();
      return v12;
    }
  }
  uint64_t v12 = 0;
  uint64_t v13 = (uint64_t *)(v5 + 32);
  while (1)
  {
    uint64_t v14 = *v13++;
    BOOL v15 = __OFADD__(v12, v14);
    v12 += v14;
    if (v15) {
      break;
    }
    if (!--v11) {
      goto LABEL_14;
    }
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t FullyLinearProof.verifierLength.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(void))(a2 + 104))();
  int64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
    uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v5 = 32;
    uint64_t v6 = v16;
    do
    {
      uint64_t v7 = *(void *)(v2 + v5);
      uint64_t v8 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
        goto LABEL_17;
      }
      unint64_t v10 = *(void *)(v16 + 16);
      unint64_t v9 = *(void *)(v16 + 24);
      if (v10 >= v9 >> 1) {
        uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1);
      }
      *(void *)(v16 + 16) = v10 + 1;
      *(void *)(v16 + 8 * v10 + 32) = v8;
      v5 += 40;
      --v3;
    }
    while (v3);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v11 = *(void *)(v16 + 16);
    if (!v11) {
      goto LABEL_13;
    }
    goto LABEL_8;
  }
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v6 = MEMORY[0x263F8EE78];
  uint64_t v11 = *(void *)(MEMORY[0x263F8EE78] + 16);
  if (v11)
  {
LABEL_8:
    uint64_t v12 = 0;
    uint64_t v13 = (uint64_t *)(v6 + 32);
    while (1)
    {
      uint64_t v14 = *v13++;
      BOOL v15 = __OFADD__(v12, v14);
      v12 += v14;
      if (v15) {
        break;
      }
      if (!--v11) {
        goto LABEL_14;
      }
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_13:
  uint64_t v12 = 0;
LABEL_14:
  swift_bridgeObjectRelease();
  uint64_t result = v12 + 1;
  if (__OFADD__(v12, 1)) {
LABEL_18:
  }
    __break(1u);
  return result;
}

uint64_t FullyLinearProof.queryRandLength.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((*(uint64_t (**)(void))(a2 + 104))() + 16);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v127 = a8;
  uint64_t v117 = a6;
  uint64_t v118 = a5;
  uint64_t v119 = a4;
  uint64_t v120 = a3;
  uint64_t v124 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v112 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = MEMORY[0x270FA5388](AssociatedTypeWitness, AssociatedTypeWitness);
  uint64_t v125 = (uint64_t)&v109 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16, v18);
  uint64_t v126 = (char *)&v109 - v20;
  uint64_t v22 = MEMORY[0x270FA5388](v19, v21);
  uint64_t v114 = (char *)&v109 - v23;
  uint64_t v115 = *(void *)(a9 - 8);
  MEMORY[0x270FA5388](v22, v24);
  unint64_t v26 = (char *)&v109 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = a2;
  uint64_t v28 = v27;
  uint64_t v29 = MEMORY[0x2612241C0](a2);
  uint64_t v30 = (uint64_t (*)(void, void))a10[6];
  unint64_t v128 = v12;
  unint64_t v121 = a10;
  unint64_t v122 = a7;
  if (v29 != v30(a7, a10))
  {
    uint64_t v131 = 0;
    unint64_t v132 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    uint64_t v131 = 0xD00000000000001BLL;
    unint64_t v132 = 0x8000000260BFEB20;
    v130[0] = v29;
    v66._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v66);
    swift_bridgeObjectRelease();
    v67._countAndFlagsBits = 540877088;
    v67._object = (void *)0xE400000000000000;
    String.append(_:)(v67);
    uint64_t v68 = v30(v122, v121);
LABEL_12:
    v130[0] = v68;
    v75._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v75);
    swift_bridgeObjectRelease();
    uint64_t v76 = v131;
    unint64_t v77 = v132;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v78 = v76;
    *(void *)(v78 + 8) = v77;
    *(unsigned char *)(v78 + 16) = 2;
    return swift_willThrow();
  }
  uint64_t v111 = a12;
  uint64_t v31 = dispatch thunk of Collection.count.getter();
  unint64_t v32 = (uint64_t (*)(void))v121[7];
  if (v31 != v32(v122))
  {
    uint64_t v131 = 0;
    unint64_t v132 = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    uint64_t v131 = 0xD000000000000015;
    unint64_t v132 = 0x8000000260BFEB40;
    v130[0] = dispatch thunk of Collection.count.getter();
    v69._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v69);
    swift_bridgeObjectRelease();
    v70._countAndFlagsBits = 540877088;
    v70._object = (void *)0xE400000000000000;
    String.append(_:)(v70);
    uint64_t v68 = ((uint64_t (*)(unint64_t, void *))v32)(v122, v121);
    goto LABEL_12;
  }
  uint64_t v33 = v28;
  uint64_t v34 = MEMORY[0x2612241C0](v119, v28);
  Swift::String v35 = (uint64_t (*)(void))v121[12];
  if (v34 != v35(v122))
  {
    uint64_t v131 = 0;
    unint64_t v132 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    uint64_t v131 = 0xD000000000000019;
    unint64_t v132 = 0x8000000260BFEB60;
    v130[0] = v34;
    v71._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v71);
    swift_bridgeObjectRelease();
    v72._countAndFlagsBits = 540877088;
    v72._object = (void *)0xE400000000000000;
    String.append(_:)(v72);
    uint64_t v68 = ((uint64_t (*)(unint64_t, void *))v35)(v122, v121);
    goto LABEL_12;
  }
  uint64_t v36 = MEMORY[0x2612241C0](v118, v28);
  Swift::String v37 = (uint64_t (*)(void))v121[10];
  uint64_t result = v37(v122);
  if (v36 != result)
  {
    uint64_t v131 = 0;
    unint64_t v132 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    uint64_t v131 = 0xD000000000000019;
    unint64_t v132 = 0x8000000260BFEB80;
    v130[0] = v36;
    v73._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v73);
    swift_bridgeObjectRelease();
    v74._countAndFlagsBits = 540877088;
    v74._object = (void *)0xE400000000000000;
    String.append(_:)(v74);
    uint64_t v68 = ((uint64_t (*)(unint64_t, void *))v37)(v122, v121);
    goto LABEL_12;
  }
  Swift::String v39 = v128;
  uint64_t v40 = v121;
  unint64_t v41 = v122;
  if (v117 < 1)
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    return result;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v115 + 16))(v26, v120, a9);
  uint64_t v131 = ArraySlice.init<A>(_:)();
  unint64_t v132 = v42;
  uint64_t v133 = v43;
  uint64_t v134 = v44;
  uint64_t v45 = ((uint64_t (*)(unint64_t, void *))v40[13])(v41, v40);
  uint64_t v110 = &v109;
  uint64_t v135 = v45;
  uint64_t v47 = MEMORY[0x270FA5388](v45, v46);
  uint64_t v48 = v127;
  *(&v109 - 10) = v41;
  *(&v109 - 9) = v48;
  *(&v109 - 8) = a9;
  *(&v109 - 7) = (uint64_t)v40;
  uint64_t v49 = v111;
  *(&v109 - 6) = a11;
  *(&v109 - 5) = v49;
  uint64_t v50 = v119;
  *(&v109 - 4) = (uint64_t)v39;
  *(&v109 - 3) = v50;
  *(&v109 - 2) = (uint64_t)&v131;
  MEMORY[0x270FA5388](v47, v51);
  *(&v109 - 8) = v41;
  *(&v109 - 7) = v52;
  *(&v109 - 6) = a9;
  *(&v109 - 5) = (uint64_t)v40;
  uint64_t v123 = a11;
  *(&v109 - 4) = a11;
  *(&v109 - 3) = v53;
  *(&v109 - 2) = (uint64_t)partial apply for closure #1 in FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:);
  *(&v109 - 1) = v54;
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<[GadgetParameters]>);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v120 = v33;
  uint64_t v115 = AssociatedConformanceWitness;
  Gadget = (char *)type metadata accessor for QueryGadget();
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v59 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A](&lazy protocol witness table cache variable for type EnumeratedSequence<[GadgetParameters]> and conformance EnumeratedSequence<A>, &demangling cache variable for type metadata for EnumeratedSequence<[GadgetParameters]>);
  uint64_t v60 = v55;
  uint64_t v61 = Gadget;
  uint64_t v62 = v116;
  uint64_t v63 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@unowned Int, @in_guaranteed GadgetParameters) -> (@owned QueryGadget<A.FullyLinearProof.F>, @error @owned Error), (uint64_t)(&v109 - 10), v60, Gadget, v58, v59, MEMORY[0x263F8E4E0], (uint64_t)v130);
  uint64_t v64 = swift_bridgeObjectRelease();
  if (v62) {
    return swift_unknownObjectRelease();
  }
  uint64_t v116 = &v109;
  uint64_t v110 = (uint64_t *)v63;
  v130[0] = v63;
  MEMORY[0x270FA5388](v64, v65);
  uint64_t v79 = v127;
  *(&v109 - 6) = v41;
  *(&v109 - 5) = v79;
  *(&v109 - 4) = a9;
  *(&v109 - 3) = (uint64_t)v40;
  uint64_t v80 = v111;
  *(&v109 - 2) = v123;
  *(&v109 - 1) = v80;
  uint64_t v81 = type metadata accessor for Array();
  uint64_t v82 = v120;
  uint64_t v111 = type metadata accessor for GadgetEvaluation();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v85 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:), (uint64_t)(&v109 - 8), v81, v111, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v84);
  uint64_t v86 = v114;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, void *))v40[17])(v113, v118, v117, v85, v41, v40);
  swift_bridgeObjectRelease();
  uint64_t v111 = 0;
  uint64_t v87 = v112;
  uint64_t v117 = *(void *)(v112 + 16);
  uint64_t v118 = v112 + 16;
  ((void (*)(unsigned char *, char *, uint64_t))v117)(v126, v86, v82);
  dispatch thunk of RangeReplaceableCollection.append(_:)();
  uint64_t v88 = v110;
  uint64_t result = MEMORY[0x2612241C0](v110, v61);
  if (result < 0) {
    goto LABEL_29;
  }
  uint64_t v89 = (void (**)(uint64_t, uint64_t))(v87 + 8);
  if (result)
  {
    uint64_t v90 = (uint64_t)v61;
    uint64_t v91 = 0;
    uint64_t v112 = (unint64_t)v89 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v116 = (uint64_t *)(v87 + 8);
    uint64_t v113 = result;
    uint64_t v92 = v120;
    while (v91 != result)
    {
      uint64_t v96 = v91;
      Array.subscript.getter();
      v130[3] = v130[0];
      uint64_t v97 = swift_getWitnessTable();
      unint64_t v122 = Gadget.wirePolynomialLength.getter(v90, v97);
      swift_release();
      Array.subscript.getter();
      uint64_t v98 = v96;
      Swift::Int v99 = v88;
      Array.subscript.getter();
      uint64_t v100 = QueryGadget.arity.getter();
      uint64_t result = swift_release();
      if (v100 < 0) {
        goto LABEL_27;
      }
      uint64_t v101 = v115;
      uint64_t v102 = v90;
      uint64_t v103 = v98;
      if (v100)
      {
        char v104 = 0;
        unint64_t v121 = (void *)v100;
        do
        {
          unint64_t v128 = (void *)((char *)v104 + 1);
          uint64_t v105 = v99;
          uint64_t v106 = v102;
          Array.subscript.getter();
          swift_beginAccess();
          type metadata accessor for Array();
          Array.subscript.getter();
          uint64_t v107 = v129;
          swift_endAccess();
          swift_release();
          static Polynomial.interpolateUsingRootsOfUnity(values:length:)(v107, v122, v92, v101, v130);
          swift_bridgeObjectRelease();
          uint64_t v108 = type metadata accessor for Polynomial();
          Polynomial.evaluate(at:)(v125, v108, v126);
          swift_bridgeObjectRelease();
          dispatch thunk of RangeReplaceableCollection.append(_:)();
          uint64_t v102 = v106;
          Swift::Int v99 = v105;
          char v104 = v128;
        }
        while (v121 != v128);
      }
      uint64_t v93 = v103 + 1;
      uint64_t v88 = v99;
      uint64_t v94 = v102;
      Array.subscript.getter();
      ((void (*)(unsigned char *, void, uint64_t))v117)(v126, v130[0] + *(void *)(*(void *)v130[0] + 112), v92);
      swift_release();
      dispatch thunk of RangeReplaceableCollection.append(_:)();
      Swift::String v95 = (void (*)(uint64_t, uint64_t))*v116;
      ((void (*)(uint64_t, uint64_t))*v116)(v125, v92);
      uint64_t v91 = v103 + 1;
      uint64_t result = v113;
      uint64_t v90 = v94;
      if (v93 == v113)
      {
        uint64_t v86 = v114;
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  Swift::String v95 = *v89;
LABEL_25:
  v95((uint64_t)v86, v120);
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t FullyLinearProof.decide<A>(verifier:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v77 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x270FA5388](AssociatedTypeWitness, v9);
  uint64_t v78 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v10, v12);
  uint64_t v87 = (char *)&v66 - v14;
  uint64_t v16 = MEMORY[0x270FA5388](v13, v15);
  Swift::String v74 = (char *)&v66 - v17;
  uint64_t v19 = MEMORY[0x270FA5388](v16, v18);
  Swift::String v73 = (char *)&v66 - v20;
  uint64_t v21 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v19, v22);
  uint64_t v24 = (char *)&v66 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v75 = a1;
  uint64_t v76 = a3;
  uint64_t v25 = dispatch thunk of Collection.count.getter();
  unint64_t v26 = (uint64_t (*)(void, void *))a4[8];
  *(void *)&long long v79 = a2;
  uint64_t v27 = a2;
  uint64_t v28 = v26;
  if (v25 != v26(v27, a4))
  {
    uint64_t v83 = 0;
    unint64_t v84 = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    uint64_t v83 = 0xD000000000000018;
    unint64_t v84 = 0x8000000260BFEA80;
    *(void *)&long long v80 = dispatch thunk of Collection.count.getter();
    v61._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v61);
    swift_bridgeObjectRelease();
    v62._countAndFlagsBits = 540877088;
    v62._object = (void *)0xE400000000000000;
    String.append(_:)(v62);
    *(void *)&long long v80 = v28(v79, a4);
    v63._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v63);
    swift_bridgeObjectRelease();
    uint64_t v64 = v83;
    unint64_t v57 = v84;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v65 = v64;
    *(void *)(v65 + 8) = v57;
    *(unsigned char *)(v65 + 16) = 2;
    swift_willThrow();
    return v57 & 1;
  }
  (*(void (**)(char *, void *, uint64_t))(v21 + 16))(v24, v75, v76);
  uint64_t v83 = ArraySlice.init<A>(_:)();
  unint64_t v84 = v29;
  uint64_t v85 = v30;
  uint64_t v86 = v31;
  uint64_t v32 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v33 = v73;
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  uint64_t v34 = type metadata accessor for ArraySlice();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v36 = v74;
  uint64_t v76 = WitnessTable;
  RangeReplaceableCollection<>.removeFirst()();
  Swift::String v37 = *(char **)(v32 + 8);
  char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v39 = v77 + 8;
  uint64_t v40 = *(void (**)(char *, uint64_t))(v77 + 8);
  v40(v36, AssociatedTypeWitness);
  v40(v33, AssociatedTypeWitness);
  uint64_t v41 = v79;
  if ((v38 & 1) == 0)
  {
    LOBYTE(v57) = 0;
LABEL_13:
    swift_unknownObjectRelease();
    return v57 & 1;
  }
  Swift::String v73 = v37;
  Swift::String v74 = (char *)a4[13];
  Swift::String v75 = a4 + 13;
  uint64_t v42 = *(void *)(((uint64_t (*)(void, void *))v74)(v79, a4) + 16);
  swift_bridgeObjectRelease();
  if (!v42)
  {
    LOBYTE(v57) = 1;
    goto LABEL_13;
  }
  uint64_t v71 = v34;
  unint64_t v43 = 0;
  uint64_t v68 = (void (*)(unint64_t, long long *, uint64_t, uint64_t, uint64_t, void *))a4[18];
  Swift::String v69 = a4 + 18;
  uint64_t v67 = v42 - 1;
  uint64_t v44 = 32;
  uint64_t v77 = v39;
  uint64_t v72 = AssociatedTypeWitness;
  Swift::String v70 = v40;
  while (1)
  {
    uint64_t result = ((uint64_t (*)(uint64_t, void *))v74)(v41, a4);
    if (v43 >= *(void *)(result + 16)) {
      break;
    }
    uint64_t v46 = *(void *)(result + v44);
    swift_bridgeObjectRelease();
    uint64_t v47 = v71;
    uint64_t v48 = v41;
    uint64_t v49 = swift_getWitnessTable();
    RandomAccessCollection<>.popFirst(_:)(v46, v47);
    uint64_t v50 = a4;
    uint64_t v51 = v81;
    uint64_t v52 = v82;
    long long v79 = v80;
    RangeReplaceableCollection<>.removeFirst()();
    long long v80 = v79;
    uint64_t v81 = v51;
    uint64_t v82 = v52;
    a4 = v50;
    uint64_t v53 = v47;
    uint64_t v54 = v49;
    uint64_t v41 = v48;
    uint64_t v55 = v72;
    uint64_t v56 = v78;
    v68(v43, &v80, v53, v54, v41, v50);
    LOBYTE(v57) = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_unknownObjectRelease();
    uint64_t v58 = v56;
    uint64_t v59 = v70;
    v70(v58, v55);
    v59(v87, v55);
    if (v57)
    {
      v44 += 40;
      if (v67 != v43++) {
        continue;
      }
    }
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t FullyLinearProof.proveRandLength.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(void))(a2 + 104))();
  int64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v15 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v4 = v15;
    unint64_t v5 = *(void *)(v15 + 16);
    uint64_t v6 = 32;
    do
    {
      uint64_t v7 = *(void *)(v2 + v6);
      unint64_t v8 = *(void *)(v15 + 24);
      if (v5 >= v8 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v5 + 1, 1);
      }
      *(void *)(v15 + 16) = v5 + 1;
      *(void *)(v15 + 8 * v5 + 32) = v7;
      v6 += 40;
      ++v5;
      --v3;
    }
    while (v3);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v10 = *(void *)(v15 + 16);
    if (v10)
    {
LABEL_7:
      uint64_t v11 = 0;
      uint64_t v12 = (uint64_t *)(v4 + 32);
      while (1)
      {
        uint64_t v13 = *v12++;
        BOOL v14 = __OFADD__(v11, v13);
        v11 += v13;
        if (v14) {
          break;
        }
        if (!--v10) {
          goto LABEL_13;
        }
      }
      __break(1u);
      return result;
    }
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v4 = MEMORY[0x263F8EE78];
    uint64_t v10 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (v10) {
      goto LABEL_7;
    }
  }
  uint64_t v11 = 0;
LABEL_13:
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:)(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  void (*v106)(void *__return_ptr, unint64_t, uint64_t, uint64_t, void *);
  void *v107;
  void (*v108)(uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t (*v111)(uint64_t, void *);
  void *v112;
  uint64_t v113;
  void *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  int64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void v130[5];
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;

  uint64_t v117 = a8;
  uint64_t v116 = a6;
  uint64_t v126 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v113 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = MEMORY[0x270FA5388](AssociatedTypeWitness, v15);
  uint64_t v115 = (char *)v104 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16, v18);
  uint64_t v124 = (uint64_t)v104 - v19;
  uint64_t v127 = a2;
  uint64_t v20 = MEMORY[0x2612241C0](a2, AssociatedTypeWitness);
  uint64_t v21 = (uint64_t (*)(uint64_t, void *))a7[6];
  uint64_t v119 = v8;
  uint64_t v118 = a5;
  if (v20 != v21(a5, a7))
  {
    uint64_t v131 = 0;
    unint64_t v132 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    uint64_t v131 = 0xD00000000000001BLL;
    unint64_t v132 = 0x8000000260BFEB20;
    v130[0] = v20;
    v57._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v57);
    swift_bridgeObjectRelease();
    v58._countAndFlagsBits = 540877088;
    v58._object = (void *)0xE400000000000000;
    String.append(_:)(v58);
    uint64_t v59 = v21(v118, a7);
LABEL_9:
    v130[0] = v59;
    v64._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v64);
    swift_bridgeObjectRelease();
    uint64_t v65 = v131;
    unint64_t v66 = v132;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v67 = v65;
    *(void *)(v67 + 8) = v66;
    *(unsigned char *)(v67 + 16) = 2;
    return swift_willThrow();
  }
  uint64_t v22 = MEMORY[0x2612241C0](a3, AssociatedTypeWitness);
  uint64_t v23 = (uint64_t (*)(uint64_t, void *))a7[11];
  if (v22 != v23(v118, a7))
  {
    uint64_t v131 = 0;
    unint64_t v132 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    uint64_t v131 = 0xD000000000000019;
    unint64_t v132 = 0x8000000260BFEE20;
    v130[0] = v22;
    v60._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v60);
    swift_bridgeObjectRelease();
    v61._countAndFlagsBits = 540877088;
    v61._object = (void *)0xE400000000000000;
    String.append(_:)(v61);
    uint64_t v59 = v23(v118, a7);
    goto LABEL_9;
  }
  uint64_t v24 = MEMORY[0x2612241C0](a4, AssociatedTypeWitness);
  uint64_t v25 = (uint64_t (*)(uint64_t, void *))a7[10];
  if (v24 != v25(v118, a7))
  {
    uint64_t v131 = 0;
    unint64_t v132 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    uint64_t v131 = 0xD000000000000019;
    unint64_t v132 = 0x8000000260BFEB80;
    v130[0] = v24;
    v62._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v62);
    swift_bridgeObjectRelease();
    v63._countAndFlagsBits = 540877088;
    v63._object = (void *)0xE400000000000000;
    String.append(_:)(v63);
    uint64_t v59 = v25(v118, a7);
    goto LABEL_9;
  }
  v130[0] = a3;
  uint64_t v26 = type metadata accessor for Array();
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v110 = v26;
  uint64_t v109 = WitnessTable;
  uint64_t v131 = ArraySlice.init<A>(_:)();
  unint64_t v132 = v28;
  uint64_t v133 = v29;
  uint64_t v134 = v30;
  uint64_t v31 = (uint64_t (*)(uint64_t, void *))a7[13];
  uint64_t v32 = v118;
  uint64_t v112 = a7 + 13;
  uint64_t v111 = v31;
  uint64_t v33 = v31(v118, a7);
  uint64_t v125 = v104;
  v130[0] = v33;
  MEMORY[0x270FA5388](v33, v34);
  uint64_t v35 = v116;
  v104[-6] = v32;
  v104[-5] = v35;
  uint64_t v36 = v117;
  v104[-4] = a7;
  v104[-3] = v36;
  v104[-2] = &v131;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GadgetParameters]);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unint64_t v122 = a4;
  uint64_t v39 = AssociatedConformanceWitness;
  uint64_t v40 = type metadata accessor for GadgetWireInputs();
  uint64_t v114 = a7;
  uint64_t v41 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A](&lazy protocol witness table cache variable for type [GadgetParameters] and conformance [A], &demangling cache variable for type metadata for [GadgetParameters]);
  uint64_t v42 = v129;
  uint64_t v44 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:), (uint64_t)&v104[-8], v37, v40, MEMORY[0x263F8E628], v41, MEMORY[0x263F8E658], v43);
  unint64_t v121 = v42;
  uint64_t v45 = swift_bridgeObjectRelease();
  uint64_t v120 = (unint64_t)v104;
  Swift::Int v129 = v44;
  v130[0] = v44;
  MEMORY[0x270FA5388](v45, v46);
  v104[-4] = v32;
  v104[-3] = v35;
  uint64_t v47 = v117;
  v104[-2] = v114;
  v104[-1] = v47;
  uint64_t v48 = type metadata accessor for Array();
  uint64_t v125 = (void *)v39;
  uint64_t v49 = type metadata accessor for GadgetEvaluation();
  uint64_t v50 = v114;
  uint64_t v51 = swift_getWitnessTable();
  uint64_t v52 = v121;
  uint64_t v54 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:), (uint64_t)&v104[-6], v48, v49, MEMORY[0x263F8E628], v51, MEMORY[0x263F8E658], v53);
  uint64_t v55 = v124;
  ((void (*)(uint64_t, int64_t, uint64_t, uint64_t, uint64_t, void *))v50[17])(v127, v122, 1, v54, v32, v50);
  if (v52)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  v104[1] = 0;
  uint64_t v68 = *(void (**)(uint64_t, uint64_t))(v113 + 8);
  v113 += 8;
  uint64_t v108 = v68;
  v68(v55, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  unint64_t v128 = v40;
  uint64_t result = MEMORY[0x2612241C0](v129, v40);
  if ((result & 0x8000000000000000) == 0)
  {
    uint64_t v69 = AssociatedTypeWitness;
    uint64_t v70 = v110;
    uint64_t v71 = v111;
    if (!result)
    {
LABEL_27:
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease();
    }
    uint64_t v72 = 0;
    uint64_t v106 = (void (*)(void *__return_ptr, unint64_t, uint64_t, uint64_t, void *))v50[19];
    uint64_t v107 = v50 + 19;
    uint64_t v105 = result;
    uint64_t v123 = v69;
    while (v72 != (char *)result)
    {
      uint64_t v120 = (unint64_t)v72;
      uint64_t result = v71(v32, v50);
      if (v120 >= *(void *)(result + 16)) {
        goto LABEL_29;
      }
      Swift::String v73 = v50;
      int64_t v74 = *(void *)(result + 40 * v120 + 56);
      swift_bridgeObjectRelease();
      uint64_t v124 = type metadata accessor for Polynomial();
      uint64_t v135 = Array.init()();
      uint64_t result = v71(v32, v73);
      if (v120 >= *(void *)(result + 16)) {
        goto LABEL_30;
      }
      uint64_t v75 = *(void *)(result + 40 * v120 + 32);
      uint64_t result = swift_bridgeObjectRelease();
      if (v75 < 0) {
        goto LABEL_31;
      }
      uint64_t v76 = v116;
      uint64_t v77 = v70;
      unint64_t v78 = v120;
      unint64_t v122 = v74;
      if (v75)
      {
        uint64_t v79 = 0;
        unint64_t v121 = v75;
        do
        {
          uint64_t v127 = v79 + 1;
          Array.subscript.getter();
          swift_beginAccess();
          Array.subscript.getter();
          uint64_t v80 = v77;
          uint64_t v81 = v76;
          uint64_t v82 = (void (*)(void, void))v130[4];
          swift_endAccess();
          swift_release();
          static Polynomial.interpolateUsingRootsOfUnity(values:length:)(v82, v122, v123, (uint64_t)v125, v130);
          swift_bridgeObjectRelease();
          type metadata accessor for Array();
          Array.append(_:)();
          Array.subscript.getter();
          swift_beginAccess();
          Array.subscript.getter();
          Array.subscript.getter();
          swift_endAccess();
          swift_release();
          uint64_t v76 = v81;
          uint64_t v77 = v80;
          uint64_t v83 = v121;
          swift_bridgeObjectRelease();
          dispatch thunk of RangeReplaceableCollection.append(_:)();
          uint64_t v79 = v127;
        }
        while (v83 != v127);
      }
      uint64_t v84 = v123;
      uint64_t v85 = v118;
      uint64_t v86 = v114;
      uint64_t result = v111(v118, v114);
      if (v78 >= *(void *)(result + 16)) {
        goto LABEL_32;
      }
      uint64_t v87 = *(void *)(result + 40 * v78 + 64);
      swift_bridgeObjectRelease();
      v106(v130, v78, v135, v85, v86);
      swift_bridgeObjectRelease();
      uint64_t v88 = v130[0];
      uint64_t v89 = v124;
      uint64_t result = Polynomial.degree.getter(v124, v90);
      uint64_t v91 = result + 1;
      if (__OFADD__(result, 1)) {
        goto LABEL_33;
      }
      v130[0] = v88;
      Polynomial.coefficients.getter(v89);
      uint64_t result = swift_bridgeObjectRelease();
      if (v91 < 0) {
        goto LABEL_34;
      }
      uint64_t v92 = ArraySlice.subscript.getter();
      uint64_t v94 = v93;
      uint64_t v96 = v95;
      uint64_t v98 = v97;
      swift_unknownObjectRelease();
      v130[0] = v92;
      v130[1] = v94;
      v130[2] = v96;
      v130[3] = v98;
      type metadata accessor for ArraySlice();
      swift_getWitnessTable();
      dispatch thunk of RangeReplaceableCollection.append<A>(contentsOf:)();
      uint64_t v99 = (uint64_t)v115;
      uint64_t result = dispatch thunk of static AdditiveArithmetic.zero.getter();
      uint64_t v100 = v87 - v91;
      if (__OFSUB__(v87, v91)) {
        goto LABEL_35;
      }
      uint64_t v101 = (char *)(v120 + 1);
      uint64_t v102 = specialized Array.init(repeating:count:)(v99, v100, v84);
      v108(v99, v84);
      v130[0] = v102;
      uint64_t v70 = v110;
      dispatch thunk of RangeReplaceableCollection.append<A>(contentsOf:)();
      uint64_t v72 = v101;
      uint64_t result = v105;
      BOOL v103 = v101 == (char *)v105;
      uint64_t v50 = v114;
      uint64_t v32 = v118;
      uint64_t v71 = v111;
      if (v103) {
        goto LABEL_27;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> FullyLinearProof.assertValidOutput(_:)(Swift::OpaquePointer a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = MEMORY[0x2612241C0](a1._rawValue, AssociatedTypeWitness);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v3 + 72);
  if (v7 != ((uint64_t (*)(uint64_t, uint64_t))v8)(v4, v3))
  {
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 540877088;
    v10._object = (void *)0xE400000000000000;
    String.append(_:)(v10);
    v8(v4, v3);
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v12 = 0xD000000000000016;
    *(void *)(v12 + 8) = 0x8000000260BFE7F0;
    *(unsigned char *)(v12 + 16) = 2;
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> FullyLinearProof.assertValidMeasurement(_:)(Swift::OpaquePointer a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = MEMORY[0x2612241C0](a1._rawValue, AssociatedTypeWitness);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v3 + 48);
  if (v7 != ((uint64_t (*)(uint64_t, uint64_t))v8)(v4, v3))
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 540877088;
    v10._object = (void *)0xE400000000000000;
    String.append(_:)(v10);
    v8(v4, v3);
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v12 = 0xD00000000000001BLL;
    *(void *)(v12 + 8) = 0x8000000260BFEB20;
    *(unsigned char *)(v12 + 16) = 2;
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> FullyLinearProof.assertValidJointRand(_:)(Swift::OpaquePointer a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = MEMORY[0x2612241C0](a1._rawValue, AssociatedTypeWitness);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v3 + 80);
  if (v7 != ((uint64_t (*)(uint64_t, uint64_t))v8)(v4, v3))
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 540877088;
    v10._object = (void *)0xE400000000000000;
    String.append(_:)(v10);
    v8(v4, v3);
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v12 = 0xD000000000000019;
    *(void *)(v12 + 8) = 0x8000000260BFEB80;
    *(unsigned char *)(v12 + 16) = 2;
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> FullyLinearProof.assertValidGadgetEvaluationKinds(_:)(Swift::OpaquePointer a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = type metadata accessor for GadgetEvaluation();
  uint64_t v7 = MEMORY[0x2612241C0](a1._rawValue, v6);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 104);
  uint64_t v9 = *(void *)(v8(v4, v3) + 16);
  swift_bridgeObjectRelease();
  if (v7 != v9)
  {
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 540877088;
    v11._object = (void *)0xE400000000000000;
    String.append(_:)(v11);
    v8(v4, v3);
    v12._countAndFlagsBits = MEMORY[0x261224130]();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v13 = 0x2064696C61766E49;
    *(void *)(v13 + 8) = 0xEF203A746E756F63;
    *(unsigned char *)(v13 + 16) = 2;
    swift_willThrow();
  }
}

uint64_t protocol witness for FullyLinearProof.prove(measurement:proveRand:jointRand:) in conformance PINENormEqualityCheckCircuit<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return FullyLinearProof.prove(measurement:proveRand:jointRand:)(a1, a2, a3, a4, a5);
}

uint64_t FullyLinearProof.prove(measurement:proveRand:jointRand:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_getAssociatedTypeWitness();
  uint64_t v17 = Array.init()();
  Swift::Int v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 56))(a4, a5);
  uint64_t v10 = type metadata accessor for Array();
  Array.reserveCapacity(_:)(v9);
  Swift::String v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 168);
  uint64_t WitnessTable = swift_getWitnessTable();
  v11(&v17, a1, a2, a3, v10, WitnessTable, a4, a5);
  uint64_t v13 = v17;
  if (v16) {
    swift_bridgeObjectRelease();
  }
  return v13;
}

uint64_t protocol witness for FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:) in conformance PINENormEqualityCheckCircuit<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  return FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:)(a1, a2, a3, a4, a7, a5, a8, a6);
}

uint64_t protocol witness for FullyLinearProof.query(measurement:proof:queryRand:jointRand:numOfShares:) in conformance PINENormEqualityCheckCircuit<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return FullyLinearProof.query(measurement:proof:queryRand:jointRand:numOfShares:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t FullyLinearProof.query(measurement:proof:queryRand:jointRand:numOfShares:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  swift_getAssociatedTypeWitness();
  uint64_t v22 = Array.init()();
  Swift::Int v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 64))(a6, a7);
  uint64_t v12 = type metadata accessor for Array();
  Array.reserveCapacity(_:)(v11);
  uint64_t v21 = a2;
  uint64_t v13 = *(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 184);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v15 = swift_getWitnessTable();
  v13(&v22, a1, &v21, a3, a4, a5, v12, v12, WitnessTable, v15, a6, a7);
  if (v20) {
    return swift_bridgeObjectRelease();
  }
  else {
    return v22;
  }
}

uint64_t protocol witness for FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:) in conformance PINENormEqualityCheckCircuit<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, void *a12)
{
  return FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(a1, a2, a3, a4, a5, a6, a11, a7, a8, a12, a9, a10);
}

uint64_t protocol witness for FullyLinearProof.decide<A>(verifier:) in conformance PINENormEqualityCheckCircuit<A, B>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return FullyLinearProof.decide<A>(verifier:)(a1, a4, a2, a5) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FLPTypeError(uint64_t a1, uint64_t a2)
{
  return specialized static VDAFErrorProtocol.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned __int8 *)(a2 + 16));
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> FullyLinearProof.assertValidProveRand(_:)(Swift::OpaquePointer a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = MEMORY[0x2612241C0](a1._rawValue, AssociatedTypeWitness);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v3 + 88);
  if (v7 != ((uint64_t (*)(uint64_t, uint64_t))v8)(v4, v3))
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 540877088;
    v10._object = (void *)0xE400000000000000;
    String.append(_:)(v10);
    v8(v4, v3);
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v12 = 0xD000000000000019;
    *(void *)(v12 + 8) = 0x8000000260BFEE20;
    *(unsigned char *)(v12 + 16) = 2;
    swift_willThrow();
  }
}

uint64_t FullyLinearProof.assertValidProof<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = dispatch thunk of Collection.count.getter();
  uint64_t v7 = a2;
  uint64_t v8 = a4;
  uint64_t v9 = a4;
  Swift::String v10 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 56);
  uint64_t result = v10(v7, v9);
  if (v6 != result)
  {
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    dispatch thunk of Collection.count.getter();
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 540877088;
    v13._object = (void *)0xE400000000000000;
    String.append(_:)(v13);
    v10(v7, v8);
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v15 = 0xD000000000000015;
    *(void *)(v15 + 8) = 0x8000000260BFEB40;
    *(unsigned char *)(v15 + 16) = 2;
    return swift_willThrow();
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> FullyLinearProof.assertValidQueryRand(_:)(Swift::OpaquePointer a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = MEMORY[0x2612241C0](a1._rawValue, AssociatedTypeWitness);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v3 + 96);
  if (v7 != ((uint64_t (*)(uint64_t, uint64_t))v8)(v4, v3))
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 540877088;
    v10._object = (void *)0xE400000000000000;
    String.append(_:)(v10);
    v8(v4, v3);
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v12 = 0xD000000000000019;
    *(void *)(v12 + 8) = 0x8000000260BFEB60;
    *(unsigned char *)(v12 + 16) = 2;
    swift_willThrow();
  }
}

uint64_t FullyLinearProof.assertValidVerifier<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = dispatch thunk of Collection.count.getter();
  uint64_t v7 = a2;
  uint64_t v8 = a4;
  uint64_t v9 = a4;
  Swift::String v10 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 64);
  uint64_t result = v10(v7, v9);
  if (v6 != result)
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    dispatch thunk of Collection.count.getter();
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 540877088;
    v13._object = (void *)0xE400000000000000;
    String.append(_:)(v13);
    v10(v7, v8);
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v15 = 0xD000000000000018;
    *(void *)(v15 + 8) = 0x8000000260BFEA80;
    *(unsigned char *)(v15 + 16) = 2;
    return swift_willThrow();
  }
  return result;
}

uint64_t closure #1 in FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[2];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for GadgetWireInputs();
  uint64_t v5 = type metadata accessor for ArraySlice();
  uint64_t WitnessTable = swift_getWitnessTable();
  RandomAccessCollection<>.popFirst(_:)(v3, v5);
  v9[0] = v9[2];
  v9[1] = v9[3];
  uint64_t v7 = specialized GadgetWireInputs.__allocating_init<A>(numOfCalls:proveRand:)(v4, (uint64_t)v9, v5, WitnessTable);
  uint64_t result = swift_unknownObjectRelease();
  *a2 = v7;
  return result;
}

uint64_t closure #1 in FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v51 = a5;
  uint64_t v68 = a4;
  Swift::String v57 = (char *)a1;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v54 = (void (*)(uint64_t, uint64_t))swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v56 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness, v8);
  Swift::String v10 = (char *)&v47 - v9;
  uint64_t v11 = swift_checkMetadataState();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v11, v13);
  uint64_t v53 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v14, v16);
  *(void *)&long long v52 = (char *)&v47 - v18;
  MEMORY[0x270FA5388](v17, v19);
  uint64_t v21 = (char *)&v47 - v20;
  uint64_t v50 = *a2;
  uint64_t v49 = a2[1];
  uint64_t v22 = a2[3];
  uint64_t v48 = a2[2];
  uint64_t v23 = a2[4];
  Array.subscript.getter();
  uint64_t v55 = v22;
  *(void *)&long long v58 = v22;
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of BinaryInteger.init<A>(_:)();
  uint64_t v24 = (char *)v52;
  Swift::String v57 = v21;
  uint64_t v25 = v11;
  FieldElement.pow(_:)((uint64_t)v10, v11, AssociatedConformanceWitness, v52);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v10, AssociatedTypeWitness);
  uint64_t v26 = v53;
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 72))(v25, AssociatedConformanceWitness);
  uint64_t v56 = AssociatedConformanceWitness;
  char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
  unint64_t v28 = *(void (**)(char *, uint64_t))(v12 + 8);
  v28(v26, v25);
  uint64_t v68 = v12 + 8;
  v28(v24, v25);
  if (v27)
  {
    *(void *)&long long v58 = 0;
    *((void *)&v58 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(51);
    v29._countAndFlagsBits = 0xD00000000000001ALL;
    v29._object = (void *)0x8000000260BFEC40;
    String.append(_:)(v29);
    uint64_t v30 = (uint64_t)v57;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v31._countAndFlagsBits = 544434464;
    v31._object = (void *)0xE400000000000000;
    String.append(_:)(v31);
    *(void *)&long long v65 = v55;
    v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._object = (void *)0x8000000260BFEC60;
    v33._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v33);
    uint64_t v35 = *((void *)&v58 + 1);
    uint64_t v34 = v58;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v36 = v34;
    *(void *)(v36 + 8) = v35;
    *(unsigned char *)(v36 + 16) = 3;
    swift_willThrow();
    v28((char *)v30, v25);
  }
  else
  {
    uint64_t v37 = type metadata accessor for ArraySlice();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v54 = (void (*)(uint64_t, uint64_t))v28;
    uint64_t v39 = v50;
    RandomAccessCollection<>.popFirst(_:)(v50, v37);
    uint64_t v40 = v60;
    uint64_t v53 = v59;
    long long v52 = v58;
    RandomAccessCollection<>.popFirst(_:)(v23, v37);
    uint64_t v41 = v23;
    uint64_t v43 = v59;
    uint64_t v42 = v60;
    type metadata accessor for QueryGadget();
    long long v65 = v58;
    unint64_t v66 = v43;
    uint64_t v67 = v42;
    long long v62 = v52;
    Swift::String v63 = v53;
    uint64_t v64 = v40;
    *(void *)&long long v58 = v39;
    *((void *)&v58 + 1) = v49;
    uint64_t v59 = (char *)v48;
    uint64_t v60 = v55;
    uint64_t v61 = v41;
    uint64_t v44 = v25;
    uint64_t v45 = (uint64_t)v57;
    uint64_t v34 = specialized QueryGadget.__allocating_init<A, B>(gadgetPolynomialCoefficients:proveRand:queryRand:parameters:)((uint64_t)&v65, (uint64_t)&v62, (uint64_t)v57, (uint64_t *)&v58, v37, v37, WitnessTable, WitnessTable);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v54(v45, v44);
  }
  return v34;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v51 = a8;
  uint64_t v52 = a5;
  uint64_t v9 = v8;
  uint64_t v66 = a2;
  uint64_t v67 = a4;
  long long v65 = a1;
  uint64_t v50 = *(void *)(a5 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](a1, a2);
  Swift::String v63 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11, v13);
  uint64_t v61 = (char *)&v48 - v14;
  uint64_t v16 = v15;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v62 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness, v18);
  uint64_t v49 = (char *)&v48 - v19;
  uint64_t v20 = type metadata accessor for Optional();
  uint64_t v53 = *(void *)(v20 - 8);
  uint64_t v54 = v20;
  uint64_t v22 = MEMORY[0x270FA5388](v20, v21);
  uint64_t v59 = (char *)&v48 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x270FA5388](v22, v24);
  char v27 = (char *)&v48 - v26;
  uint64_t v29 = MEMORY[0x270FA5388](v25, v28);
  uint64_t v48 = (char *)&v48 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = MEMORY[0x270FA5388](v29, v31);
  uint64_t v58 = *((void *)v16 - 1);
  MEMORY[0x270FA5388](v32, v33);
  uint64_t v35 = (char *)&v48 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = a6;
  uint64_t v60 = v16;
  uint64_t v68 = swift_getAssociatedTypeWitness();
  uint64_t v55 = *(void *)(v68 - 8);
  MEMORY[0x270FA5388](v68, v36);
  char v38 = (char *)&v48 - v37;
  Swift::Int v39 = dispatch thunk of Sequence.underestimatedCount.getter();
  uint64_t v69 = Array.init()();
  uint64_t v64 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v39);
  (*(void (**)(char *, uint64_t, void))(v58 + 16))(v35, v56, v60);
  uint64_t v67 = v38;
  uint64_t result = dispatch thunk of Sequence.makeIterator()();
  if (v39 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v39)
  {
    uint64_t v41 = (uint64_t (**)(char *, uint64_t, uint64_t))(v62 + 48);
    uint64_t v42 = (uint64_t (**)(char *, uint64_t))(v62 + 8);
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      dispatch thunk of IteratorProtocol.next()();
      uint64_t result = (*v41)(v27, 1, AssociatedTypeWitness);
      if (result == 1) {
        goto LABEL_18;
      }
      v65(v27, v63);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v55 + 8))(v67, v68);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v50 + 32))(v51, v63, v52);
        return (*v42)(v27, AssociatedTypeWitness);
      }
      uint64_t v9 = 0;
      (*v42)(v27, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      if (!--v39)
      {
        uint64_t v43 = v62;
        uint64_t v44 = v59;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  uint64_t v43 = v62;
  uint64_t v44 = v59;
LABEL_9:
  dispatch thunk of IteratorProtocol.next()();
  Swift::String v63 = *(char **)(v43 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v63)(v44, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v45 = v59;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v55 + 8))(v67, v68);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v45, v54);
    return v69;
  }
  else
  {
    uint64_t v60 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
    uint64_t v62 = v43 + 32;
    uint64_t v46 = (void (**)(char *, uint64_t))(v43 + 8);
    uint64_t v47 = v49;
    uint64_t v45 = v59;
    while (1)
    {
      v60(v47, v45, AssociatedTypeWitness);
      v65(v47, v61);
      if (v9) {
        break;
      }
      uint64_t v9 = 0;
      (*v46)(v47, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of IteratorProtocol.next()();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v63)(v45, 1, AssociatedTypeWitness) == 1) {
        goto LABEL_14;
      }
    }
    (*v46)(v47, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v67, v68);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v50 + 32))(v51, v61, v52);
  }
}

uint64_t partial apply for closure #1 in FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(uint64_t a1, uint64_t *a2)
{
  return closure #1 in FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(a1, a2, v2[8], v2[9], v2[10]);
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned Int, @in_guaranteed GadgetParameters) -> (@owned QueryGadget<A.FullyLinearProof.F>, @error @owned Error)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void *))(v3 + 64))(*a1, a1 + 1);
  if (v4) {
    *a2 = v4;
  }
  else {
    *a3 = result;
  }
  return result;
}

uint64_t partial apply for closure #2 in FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = *a1 | 0x4000000000000000;
  return swift_retain();
}

uint64_t partial apply for closure #1 in FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:)(a1, a2);
}

uint64_t partial apply for closure #2 in FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

unint64_t instantiation function for generic protocol witness table for FLPTypeError(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
  unint64_t result = lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t outlined copy of FLPTypeError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 3u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for FLPTypeError(uint64_t a1)
{
  return outlined consume of FLPTypeError(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t outlined consume of FLPTypeError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 3u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for FLPTypeError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of FLPTypeError(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for FLPTypeError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of FLPTypeError(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of FLPTypeError(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for FLPTypeError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of FLPTypeError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTag for FLPTypeError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 3u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t destructiveInjectEnumTag for FLPTypeError(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(void *)uint64_t result = a2 - 4;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 4;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for FLPTypeError()
{
  return &type metadata for FLPTypeError;
}

uint64_t dispatch thunk of static FullyLinearProof.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of FullyLinearProof.encodedMeasurementLength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of FullyLinearProof.proofLength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of FullyLinearProof.verifierLength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of FullyLinearProof.outputLength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of FullyLinearProof.jointRandLength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of FullyLinearProof.proveRandLength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of FullyLinearProof.queryRandLength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of FullyLinearProof.gadgetParameters.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of FullyLinearProof.encode(measurement:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t dispatch thunk of FullyLinearProof.decode(data:numOfMeasurements:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 120))();
}

uint64_t dispatch thunk of FullyLinearProof.truncate(measurement:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 128))();
}

uint64_t dispatch thunk of FullyLinearProof.evaluate(measurement:jointRand:numOfShares:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 136))();
}

uint64_t dispatch thunk of FullyLinearProof.evaluateGadget<A>(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 144))();
}

uint64_t dispatch thunk of FullyLinearProof.evaluateGadget(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 152))();
}

uint64_t dispatch thunk of FullyLinearProof.prove(measurement:proveRand:jointRand:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 160))();
}

uint64_t dispatch thunk of FullyLinearProof.prove<A>(into:measurement:proveRand:jointRand:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 168))();
}

uint64_t dispatch thunk of FullyLinearProof.query(measurement:proof:queryRand:jointRand:numOfShares:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 176))();
}

uint64_t dispatch thunk of FullyLinearProof.query<A, B>(into:measurement:proof:queryRand:jointRand:numOfShares:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a12 + 184))(a1, a2, a3, a4);
}

uint64_t dispatch thunk of FullyLinearProof.decide<A>(verifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 192))() & 1;
}

uint64_t QueryGadget.__allocating_init<A, B>(gadgetPolynomialCoefficients:proveRand:queryRand:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = specialized QueryGadget.__allocating_init<A, B>(gadgetPolynomialCoefficients:proveRand:queryRand:parameters:)(a1, a2, a3, a4, a5, a6, a7, a8);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v8 + 80) - 8) + 8))(a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a6 - 8) + 8))(a2, a6);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a1, a5);
  return v14;
}

uint64_t QueryGadget.arity.getter()
{
  return *(void *)(v0 + *(void *)(*(void *)v0 + 136));
}

uint64_t QueryGadget.wireInputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t QueryGadget.wireInputs.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*QueryGadget.wireInputs.modify())()
{
  return QueryGadget.wireInputs.modify;
}

uint64_t QueryGadget.wireOutputs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t QueryGadget.wireOutputs.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 24) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*QueryGadget.wireOutputs.modify())()
{
  return QueryGadget.wireOutputs.modify;
}

uint64_t QueryGadget.wireOutputAtRandomPoint.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80) - 8) + 16))(a1, v1 + *(void *)(*(void *)v1 + 112));
}

uint64_t QueryGadget.step.getter()
{
  return *(void *)(v0 + *(void *)(*(void *)v0 + 120));
}

uint64_t QueryGadget.numOfCalled.getter()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 128);
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t QueryGadget.numOfCalled.setter(uint64_t a1)
{
  char v3 = (void *)(v1 + *(void *)(*(void *)v1 + 128));
  uint64_t result = swift_beginAccess();
  *char v3 = a1;
  return result;
}

uint64_t (*QueryGadget.numOfCalled.modify())()
{
  return QueryGadget.wireOutputs.modify;
}

__n128 QueryGadget.parameters.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1 + *(void *)(*(void *)v1 + 136);
  uint64_t v3 = *(void *)(v2 + 32);
  __n128 result = *(__n128 *)v2;
  long long v5 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = v3;
  return result;
}

uint64_t QueryGadget.init<A, B>(gadgetPolynomialCoefficients:proveRand:queryRand:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = *v8;
  uint64_t v15 = specialized QueryGadget.init<A, B>(gadgetPolynomialCoefficients:proveRand:queryRand:parameters:)(a1, a2, a3, a4, a5, a6, a7, a8);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v14 + 80) - 8) + 8))(a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a6 - 8) + 8))(a2, a6);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a1, a5);
  return v15;
}

uint64_t *QueryGadget.deinit()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 112));
  return v0;
}

uint64_t QueryGadget.__deallocating_deinit()
{
  QueryGadget.deinit();

  return swift_deallocClassInstance();
}

uint64_t QueryGadget.degree.getter()
{
  return *(void *)(v0 + *(void *)(*(void *)v0 + 136) + 8);
}

uint64_t QueryGadget.numOfCalls.getter()
{
  return *(void *)(v0 + *(void *)(*(void *)v0 + 136) + 16);
}

uint64_t QueryGadget.evaluate<A>(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v5 = v4;
  uint64_t v62 = a1;
  uint64_t v9 = *v4;
  uint64_t v61 = *(void *)(v9 + 80);
  uint64_t v10 = *(void *)(v61 - 8);
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v64 = (char *)v49 - v11;
  uint64_t v13 = *(void *)(*(void *)(v12 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  Swift::Int v63 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = MEMORY[0x270FA5388](AssociatedTypeWitness, v15);
  uint64_t v18 = (char *)v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16, v19);
  uint64_t v21 = (char *)v49 - v20;
  uint64_t v22 = (uint64_t *)((char *)v5 + *(void *)(v9 + 128));
  uint64_t result = swift_beginAccess();
  uint64_t v24 = *v22 + 1;
  if (__OFADD__(*v22, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v59 = v21;
  uint64_t v67 = v18;
  uint64_t v25 = AssociatedTypeWitness;
  *uint64_t v22 = v24;
  uint64_t v26 = v13;
  uint64_t result = dispatch thunk of Collection.count.getter();
  if (result < 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v49[1] = a4;
  uint64_t v50 = v5;
  uint64_t v60 = v10;
  char v27 = v64;
  uint64_t v28 = v22;
  if (result)
  {
    uint64_t v29 = v26;
    Swift::Int v30 = 0;
    uint64_t v54 = v50 + 2;
    uint64_t v53 = (void (**)(char *, uint64_t))(v63 + 8);
    uint64_t v52 = v60 + 16;
    uint64_t v51 = v60 + 40;
    uint64_t v31 = 32;
    uint64_t v57 = (char *)result;
    uint64_t v58 = a3;
    uint64_t v55 = a2;
    uint64_t v56 = v22;
    uint64_t v65 = v25;
    uint64_t v66 = v29;
    do
    {
      Swift::Int v63 = *v28;
      uint64_t v64 = (char *)(v30 + 1);
      dispatch thunk of Collection.startIndex.getter();
      uint64_t v32 = v59;
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      uint64_t v33 = *v53;
      (*v53)(v67, v25);
      uint64_t v34 = (void (*)(void, void))dispatch thunk of Collection.subscript.read();
      uint64_t v36 = v60;
      uint64_t v35 = v61;
      (*(void (**)(char *))(v60 + 16))(v27);
      v34(&v68, 0);
      v33(v32, v65);
      uint64_t v37 = v54;
      swift_beginAccess();
      uint64_t v38 = v35;
      uint64_t v39 = type metadata accessor for Array();
      uint64_t v40 = type metadata accessor for Array();
      Array._makeMutableAndUnique()();
      uint64_t v41 = *v37;
      Array._checkSubscript_mutating(_:)(v30);
      Array._makeMutableAndUnique()();
      uint64_t v42 = *(void *)(v41 + 8 * v30 + 32);
      Swift::Int v43 = v63;
      Array._checkSubscript_mutating(_:)(v63);
      char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
      uint64_t v45 = v42 & 0xFFFFFFFFFFFFFF8;
      if ((isClassOrObjCExistentialType & 1) == 0) {
        uint64_t v45 = v42;
      }
      unint64_t v46 = v45
          + ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))
          + *(void *)(v36 + 72) * v43;
      uint64_t v47 = *(void (**)(void, void, void))(v36 + 40);
      uint64_t v25 = v65;
      v47(v46, v27, v38);
      AggregateShare.share.modify(v39);
      AggregateShare.share.modify(v40);
      swift_endAccess();
      uint64_t v28 = v56;
      uint64_t result = (uint64_t)v57;
      v31 += 8;
      Swift::Int v30 = (Swift::Int)v64;
    }
    while (v57 != v64);
  }
  uint64_t v48 = *(uint64_t *)((char *)v50 + *(void *)(*v50 + 120));
  if ((unsigned __int128)(*v28 * (__int128)v48) >> 64 == (*v28 * v48) >> 63)
  {
    swift_beginAccess();
    Array.subscript.getter();
    return swift_endAccess();
  }
LABEL_12:
  __break(1u);
  return result;
}

void QueryGadget.evaluate<A>(at:)()
{
}

uint64_t protocol witness for Gadget.arity.getter in conformance QueryGadget<A>()
{
  return QueryGadget.arity.getter();
}

uint64_t protocol witness for Gadget.degree.getter in conformance QueryGadget<A>()
{
  return QueryGadget.degree.getter();
}

uint64_t protocol witness for Gadget.numOfCalls.getter in conformance QueryGadget<A>()
{
  return QueryGadget.numOfCalls.getter();
}

uint64_t protocol witness for Gadget.evaluate<A>(at:) in conformance QueryGadget<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return QueryGadget.evaluate<A>(at:)(a1, a2, a3, a4);
}

void protocol witness for Gadget.evaluate<A>(at:) in conformance QueryGadget<A>()
{
}

uint64_t specialized QueryGadget.init<A, B>(gadgetPolynomialCoefficients:proveRand:queryRand:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v90 = a7;
  uint64_t v82 = a3;
  uint64_t v88 = a2;
  uint64_t v89 = a1;
  uint64_t v12 = *(void **)v8;
  uint64_t v101 = a8;
  uint64_t v100 = *(void *)(*(void *)(a8 + 8) + 8);
  uint64_t v105 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v104 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = MEMORY[0x270FA5388](AssociatedTypeWitness, v13);
  uint64_t v99 = (char *)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v14, v16);
  uint64_t v97 = (char *)&v78 - v18;
  uint64_t v91 = a5;
  uint64_t v85 = *(void *)(a5 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v17, v19);
  uint64_t v84 = (char *)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v12[10];
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v25 = MEMORY[0x270FA5388](v20, v24);
  uint64_t v83 = (char *)&v78 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25, v27);
  uint64_t v29 = (char *)&v78 - v28;
  uint64_t v30 = *a4;
  uint64_t v31 = a4[1];
  uint64_t v32 = a4[2];
  uint64_t v33 = a4[3];
  uint64_t v34 = a4[4];
  *(void *)&v9[v12[16]] = 0;
  uint64_t v86 = specialized FixedWidthInteger.nextPowerOfTwo.getter(v34);
  uint64_t v35 = (uint64_t *)&v9[*(void *)(*(void *)v9 + 136)];
  *uint64_t v35 = v30;
  v35[1] = v31;
  uint64_t v36 = v22;
  _OWORD v35[2] = v32;
  v35[3] = v33;
  uint64_t v87 = v33;
  v35[4] = v34;
  uint64_t v37 = v12[11];
  uint64_t result = dispatch thunk of static AdditiveArithmetic.zero.getter();
  if (__OFADD__(v32, 1))
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v39 = specialized Array.init(repeating:count:)((uint64_t)v29, v32 + 1, v36);
  uint64_t v102 = v23;
  (*(void (**)(unsigned char *, uint64_t))(v23 + 8))(v29, v36);
  v107[0] = v39;
  uint64_t v40 = type metadata accessor for Array();
  uint64_t v41 = specialized Array.init(repeating:count:)((uint64_t)v107, v30, v40);
  swift_bridgeObjectRelease();
  *((void *)v9 + 2) = v41;
  uint64_t v42 = (uint64_t *)(v9 + 16);
  uint64_t v43 = swift_bridgeObjectRetain();
  uint64_t v44 = MEMORY[0x2612241C0](v43, v40);
  uint64_t result = swift_bridgeObjectRelease();
  if (v44 < 0)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v80 = v37;
  uint64_t v79 = v29;
  uint64_t v81 = v9;
  uint64_t v45 = v36;
  uint64_t v46 = v88;
  uint64_t v47 = v99;
  uint64_t v48 = v83;
  uint64_t v96 = v40;
  if (v44)
  {
    Swift::Int v49 = 0;
    uint64_t v93 = v102 + 16;
    uint64_t v94 = (void (**)(char *, uint64_t))(v104 + 8);
    uint64_t v92 = v102 + 40;
    uint64_t v50 = 32;
    uint64_t v95 = v44;
    uint64_t v106 = v42;
    do
    {
      Swift::Int v103 = v49 + 1;
      uint64_t v104 = v50;
      dispatch thunk of Collection.startIndex.getter();
      uint64_t v51 = v48;
      uint64_t v52 = v45;
      uint64_t v53 = v97;
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      uint64_t v54 = *v94;
      uint64_t v55 = v47;
      uint64_t v56 = AssociatedTypeWitness;
      (*v94)(v55, AssociatedTypeWitness);
      uint64_t v57 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v58 = v46;
      uint64_t v59 = v102;
      (*(void (**)(char *))(v102 + 16))(v51);
      v57(v107, 0);
      uint64_t v60 = v53;
      uint64_t v45 = v52;
      uint64_t v48 = v51;
      uint64_t v61 = v56;
      uint64_t v47 = v99;
      v54(v60, v61);
      uint64_t v62 = v104;
      swift_beginAccess();
      uint64_t v63 = v96;
      uint64_t v64 = type metadata accessor for Array();
      Array._makeMutableAndUnique()();
      uint64_t v65 = *v106;
      Array._checkSubscript_mutating(_:)(v49);
      Array._makeMutableAndUnique()();
      uint64_t v66 = *(void *)(v65 + 8 * v49 + 32);
      Array._checkSubscript_mutating(_:)(0);
      char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
      uint64_t v68 = v66 & 0xFFFFFFFFFFFFFF8;
      if ((isClassOrObjCExistentialType & 1) == 0) {
        uint64_t v68 = v66;
      }
      unint64_t v69 = v68 + ((*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80));
      uint64_t v70 = *(void (**)(unint64_t, char *, uint64_t))(v59 + 40);
      uint64_t v46 = v58;
      v70(v69, v48, v45);
      AggregateShare.share.modify(v63);
      AggregateShare.share.modify(v64);
      uint64_t v71 = v95;
      swift_endAccess();
      uint64_t v50 = v62 + 8;
      Swift::Int v49 = v103;
    }
    while (v71 != v103);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v84, v89, v91);
  uint64_t v72 = Array.init<A>(_:)();
  Polynomial.init(coefficients:)(v72, v107);
  uint64_t v73 = v107[0];
  uint64_t v74 = type metadata accessor for Polynomial();
  int64_t v75 = v86;
  uint64_t result = Polynomial.evaluateUsingRootsOfUnity(count:)(v86, v74);
  uint64_t v76 = v81;
  *((void *)v81 + 3) = result;
  if (!v87) {
    goto LABEL_14;
  }
  if (v75 != 0x8000000000000000 || v87 != -1)
  {
    *(void *)&v76[*(void *)(*(void *)v76 + 120)] = v75 / v87;
    v107[0] = v73;
    uint64_t v77 = v79;
    Polynomial.evaluate(at:)(v82, v74, v79);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, unsigned char *, uint64_t))(v102 + 32))(&v76[*(void *)(*(void *)v76 + 112)], v77, v45);
    return (uint64_t)v76;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t specialized QueryGadget.__allocating_init<A, B>(gadgetPolynomialCoefficients:proveRand:queryRand:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return specialized QueryGadget.init<A, B>(gadgetPolynomialCoefficients:proveRand:queryRand:parameters:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t associated type witness table accessor for Gadget.F : FieldElement in QueryGadget<A>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 88);
}

uint64_t type metadata completion function for QueryGadget()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for QueryGadget()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for QueryGadget(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for QueryGadget);
}

uint64_t dispatch thunk of QueryGadget.__allocating_init<A, B>(gadgetPolynomialCoefficients:proveRand:queryRand:parameters:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t SeedStreamAES128CTR.__allocating_init(key:iv:)(char *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SymmetricKey();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4, v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = swift_allocObject();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v10(v8, a1, v4);
  uint64_t v11 = SymmetricKey.bitCount.getter();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  if (v11 == 128)
  {
    uint64_t v13 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v13 + 16) = 256;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_OWORD *)(v13 + 64) = 0u;
    *(_OWORD *)(v13 + 80) = 0u;
    *(_OWORD *)(v13 + 96) = 0u;
    *(_OWORD *)(v13 + 112) = 0u;
    *(_OWORD *)(v13 + 128) = 0u;
    *(_OWORD *)(v13 + 144) = 0u;
    *(_OWORD *)(v13 + 160) = 0u;
    *(_OWORD *)(v13 + 176) = 0u;
    *(_OWORD *)(v13 + 192) = 0u;
    *(_OWORD *)(v13 + 208) = 0u;
    *(_OWORD *)(v13 + 224) = 0u;
    *(_OWORD *)(v13 + 240) = 0u;
    *(_OWORD *)(v13 + 256) = 0u;
    *(_OWORD *)(v13 + 272) = 0u;
    uint64_t v14 = v9 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_key;
    *(void *)(v9 + 16) = v13;
    *(void *)(v9 + 24) = 256;
    v10((char *)v14, a1, v4);
    uint64_t v15 = specialized AES.CTR.Nonce.init<A>(nonceBytes:)(a2);
    int v17 = v16;
    unint64_t v18 = HIDWORD(v16);
    v12(a1, v4);
    swift_bridgeObjectRelease();
    uint64_t v19 = v9 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_nonce;
    *(void *)uint64_t v19 = v15;
    *(_DWORD *)(v19 + 8) = v17;
    *(_DWORD *)(v19 + 12) = v18;
    return v9;
  }
  else
  {
    __break(1u);
    swift_bridgeObjectRelease();
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t SeedStreamAES128CTR.init(key:iv:)(char *a1, uint64_t a2)
{
  uint64_t v2 = specialized SeedStreamAES128CTR.init(key:iv:)(a1, a2);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t SeedStreamAES128CTR.__allocating_init(key:)(char *a1)
{
  uint64_t v2 = type metadata accessor for SymmetricKey();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v7(v6, (uint64_t)a1, v2);
  uint64_t v8 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
  _OWORD v8[2] = 16;
  v8[4] = 0;
  v8[5] = 0;
  uint64_t v9 = swift_allocObject();
  if (SymmetricKey.bitCount.getter() == 128)
  {
    uint64_t v10 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v10 + 16) = 256;
    *(_OWORD *)(v10 + 32) = 0u;
    *(_OWORD *)(v10 + 48) = 0u;
    *(_OWORD *)(v10 + 64) = 0u;
    *(_OWORD *)(v10 + 80) = 0u;
    *(_OWORD *)(v10 + 96) = 0u;
    *(_OWORD *)(v10 + 112) = 0u;
    *(_OWORD *)(v10 + 128) = 0u;
    *(_OWORD *)(v10 + 144) = 0u;
    *(_OWORD *)(v10 + 160) = 0u;
    *(_OWORD *)(v10 + 176) = 0u;
    *(_OWORD *)(v10 + 192) = 0u;
    *(_OWORD *)(v10 + 208) = 0u;
    *(_OWORD *)(v10 + 224) = 0u;
    *(_OWORD *)(v10 + 240) = 0u;
    *(_OWORD *)(v10 + 256) = 0u;
    *(_OWORD *)(v10 + 272) = 0u;
    uint64_t v11 = v9 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_key;
    *(void *)(v9 + 16) = v10;
    *(void *)(v9 + 24) = 256;
    v7((char *)v11, (uint64_t)v6, v2);
    uint64_t v12 = specialized AES.CTR.Nonce.init<A>(nonceBytes:)((uint64_t)v8);
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(char *, uint64_t))(v3 + 8);
    v15(v6, v2);
    unint64_t v16 = (uint64_t *)(v9 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_nonce);
    *unint64_t v16 = v12;
    v16[1] = v14;
    v15(a1, v2);
    return v9;
  }
  else
  {
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t SeedStreamAES128CTR.fillBuffer()()
{
  unint64_t v1 = (char **)(v0 + 16);
  swift_beginAccess();
  uint64_t v2 = *(char **)(v0 + 16);
  uint64_t v3 = (char *)*((void *)v2 + 2);
  if (v3)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t *v1 = v2;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
    }
    unint64_t v5 = 0;
    while (1)
    {
      uint64_t *v1 = v2;
      if (v5 >= *((void *)v2 + 2)) {
        break;
      }
      v2[v5 + 32] = 0;
      uint64_t v2 = *v1;
      if (v3 == (char *)++v5) {
        goto LABEL_7;
      }
    }
    __break(1u);
    goto LABEL_10;
  }
LABEL_7:
  swift_beginAccess();
  uint64_t v3 = *v1;
  char v6 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v1 = v3;
  if ((v6 & 1) == 0)
  {
LABEL_10:
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v3);
    uint64_t *v1 = v3;
  }
  uint64_t v7 = (uint64_t)&v3[*((void *)v3 + 2) + 32];
  uint64_t v8 = v0 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_key;
  uint64_t v9 = v0 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_nonce;
  swift_beginAccess();
  specialized static AES.CTR.encryptInPlace(_:using:updating:)((uint64_t)(v3 + 32), v7, v8, v9);
  swift_endAccess();
  *(void *)(v0 + 16) = v3;
  uint64_t result = swift_endAccess();
  *(void *)(v0 + 24) = 0;
  return result;
}

Swift::UInt8 __swiftcall SeedStreamAES128CTR.next()()
{
  unint64_t v1 = *(void *)(v0 + 24);
  if (v1 == 256)
  {
    SeedStreamAES128CTR.fillBuffer()();
    unint64_t v1 = *(void *)(v0 + 24);
  }
  Swift::UInt8 result = swift_beginAccess();
  if ((v1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v3 = *(void *)(v0 + 16);
  if (v1 >= *(void *)(v3 + 16))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = *(void *)(v0 + 24);
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (!v5)
  {
    Swift::UInt8 result = *(unsigned char *)(v3 + v1 + 32);
    *(void *)(v0 + 24) = v6;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t SeedStreamAES128CTR.deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_key;
  uint64_t v2 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t SeedStreamAES128CTR.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_key;
  uint64_t v2 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t static XofHmacSha256Aes128.seedSize.getter()
{
  return 32;
}

uint64_t XofHmacSha256Aes128.__allocating_init(seedBytes:domainSeparationTag:binder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  XofHmacSha256Aes128.init(seedBytes:domainSeparationTag:binder:)(a1, a2, a3);
  return v6;
}

uint64_t XofHmacSha256Aes128.init(seedBytes:domainSeparationTag:binder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v17[3] = *MEMORY[0x263EF8340];
  uint64_t v7 = type metadata accessor for SymmetricKey();
  MEMORY[0x270FA5388](v7 - 8, v8);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HMAC<SHA256>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9, v11);
  uint64_t v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v3 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream) = 0;
  if (*(void *)(a1 + 16) != 32)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  v17[0] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  _sSays5UInt8VGSayxG10Foundation15ContiguousBytesAeBRszlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A]);
  SymmetricKey.init<A>(data:)();
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type SHA256 and conformance SHA256();
  HMAC.init(key:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v3 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_hmac, v13, v9);
  if (*(void *)(a2 + 16) > 0xFFuLL) {
    goto LABEL_5;
  }
  LOBYTE(v17[0]) = *(void *)(a2 + 16);
  size_t v16 = specialized _copyCollectionToContiguousArray<A>(_:)((size_t)v17, (unint64_t)v17 + 1);
  swift_beginAccess();
  _sSays5UInt8VGSayxG10Foundation15ContiguousBytesAeBRszlWlTm_0(&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A]);
  HMAC.update<A>(data:)();
  swift_endAccess();
  swift_release();
  v17[0] = a2;
  specialized Array.append<A>(contentsOf:)(a3);
  size_t v16 = v17[0];
  swift_beginAccess();
  HMAC.update<A>(data:)();
  swift_endAccess();
  swift_bridgeObjectRelease();
  return v3;
}

Swift::UInt8 __swiftcall XofHmacSha256Aes128.next()()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream))
  {
    swift_retain();
    Swift::UInt8 v1 = SeedStreamAES128CTR.next()();
    swift_release();
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall XofHmacSha256Aes128.update(_:)(Swift::OpaquePointer a1)
{
  if (*(void *)(v1 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream))
  {
    __break(1u);
  }
  else
  {
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HMAC<SHA256>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
    _sSays5UInt8VGSayxG10Foundation15ContiguousBytesAeBRszlWlTm_0(&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A]);
    HMAC.update<A>(data:)();
    swift_endAccess();
  }
}

Swift::Void __swiftcall XofHmacSha256Aes128.finalize()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HMAC<SHA256>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2, v4);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA256>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7, v9);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v1 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream))
  {
    __break(1u);
  }
  else
  {
    uint64_t v12 = v1 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_hmac;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v12, v2);
    HMAC.finalize()();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    HashedAuthenticationCode.withUnsafeBytes<A>(_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
}

uint64_t closure #1 in XofHmacSha256Aes128.finalize()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymmetricKey();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v6, v8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9, v12);
  uint64_t v14 = (char *)&v28 - v13;
  long long v30 = xmmword_260BFCB60;
  uint64_t v31 = a1;
  uint64_t v32 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<UnsafeRawBufferPointer>);
  lazy protocol witness table accessor for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>();
  SymmetricKey.init<A>(data:)();
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v15(v11, v14, v6);
  int64_t v16 = specialized _copyCollectionToContiguousArray<A>(_:)(16, 32, a1, a2);
  type metadata accessor for SeedStreamAES128CTR(0);
  uint64_t v17 = swift_allocObject();
  if (SymmetricKey.bitCount.getter() == 128)
  {
    uint64_t v28 = v14;
    uint64_t v29 = a3;
    uint64_t v18 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v18 + 16) = 256;
    *(_OWORD *)(v18 + 32) = 0u;
    *(_OWORD *)(v18 + 48) = 0u;
    *(_OWORD *)(v18 + 64) = 0u;
    *(_OWORD *)(v18 + 80) = 0u;
    *(_OWORD *)(v18 + 96) = 0u;
    *(_OWORD *)(v18 + 112) = 0u;
    *(_OWORD *)(v18 + 128) = 0u;
    *(_OWORD *)(v18 + 144) = 0u;
    *(_OWORD *)(v18 + 160) = 0u;
    *(_OWORD *)(v18 + 176) = 0u;
    *(_OWORD *)(v18 + 192) = 0u;
    *(_OWORD *)(v18 + 208) = 0u;
    *(_OWORD *)(v18 + 224) = 0u;
    *(_OWORD *)(v18 + 240) = 0u;
    *(_OWORD *)(v18 + 256) = 0u;
    *(_OWORD *)(v18 + 272) = 0u;
    uint64_t v19 = v17 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_key;
    *(void *)(v17 + 16) = v18;
    *(void *)(v17 + 24) = 256;
    v15((char *)v19, v11, v6);
    uint64_t v20 = v33;
    uint64_t v21 = specialized AES.CTR.Nonce.init<A>(nonceBytes:)(v16);
    if (!v20)
    {
      uint64_t v23 = v21;
      uint64_t v24 = v22;
      swift_release();
      uint64_t v25 = *(void (**)(char *, uint64_t))(v7 + 8);
      v25(v11, v6);
      uint64_t v26 = (uint64_t *)(v17 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_nonce);
      *uint64_t v26 = v23;
      v26[1] = v24;
      v25(v28, v6);
      *(void *)(v29 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream) = v17;
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  swift_release();
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t XofHmacSha256Aes128.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_hmac;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HMAC<SHA256>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  return v0;
}

uint64_t XofHmacSha256Aes128.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_hmac;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HMAC<SHA256>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for static ExtendableOutputFunction.seedSize.getter in conformance XofHmacSha256Aes128()
{
  return 32;
}

uint64_t protocol witness for ExtendableOutputFunction.update(_:) in conformance XofHmacSha256Aes128()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream))
  {
    __break(1u);
  }
  else
  {
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HMAC<SHA256>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
    _sSays5UInt8VGSayxG10Foundation15ContiguousBytesAeBRszlWlTm_0(&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A]);
    HMAC.update<A>(data:)();
    return swift_endAccess();
  }
  return result;
}

void protocol witness for ExtendableOutputFunction.next() in conformance XofHmacSha256Aes128()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC4VDAF19XofHmacSha256Aes128_stream))
  {
    swift_retain();
    SeedStreamAES128CTR.next()();
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t protocol witness for ExtendableOutputFunction.init(seedBytes:domainSeparationTag:binder:) in conformance XofHmacSha256Aes128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  XofHmacSha256Aes128.init(seedBytes:domainSeparationTag:binder:)(a1, a2, a3);
  return v6;
}

uint64_t specialized AES.CTR.Nonce.init<A>(nonceBytes:)(uint64_t a1)
{
  __dst[2] = *MEMORY[0x263EF8340];
  size_t v1 = *(void *)(a1 + 16);
  if (v1 == 16 || v1 == 12)
  {
    uint64_t v3 = (const void *)(a1 + 32);
    if (v1 <= 0xF) {
      size_t v4 = 16 - v1;
    }
    else {
      size_t v4 = 0;
    }
    bzero((char *)__dst + v1, v4);
    memcpy(__dst, v3, v1);
    return __dst[0];
  }
  else
  {
    lazy protocol witness table accessor for type AESCTRError and conformance AESCTRError();
    swift_allocError();
    *uint64_t v5 = 0;
    return swift_willThrow();
  }
}

uint64_t specialized SeedStreamAES128CTR.init(key:iv:)(char *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for SymmetricKey();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6, v8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v11(v10, a1, v6);
  uint64_t v12 = SymmetricKey.bitCount.getter();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v7 + 8);
  v13(v10, v6);
  if (v12 == 128)
  {
    uint64_t v14 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v14 + 16) = 256;
    *(_OWORD *)(v14 + 32) = 0u;
    *(_OWORD *)(v14 + 48) = 0u;
    *(_OWORD *)(v14 + 64) = 0u;
    *(_OWORD *)(v14 + 80) = 0u;
    *(_OWORD *)(v14 + 96) = 0u;
    *(_OWORD *)(v14 + 112) = 0u;
    *(_OWORD *)(v14 + 128) = 0u;
    *(_OWORD *)(v14 + 144) = 0u;
    *(_OWORD *)(v14 + 160) = 0u;
    *(_OWORD *)(v14 + 176) = 0u;
    *(_OWORD *)(v14 + 192) = 0u;
    *(_OWORD *)(v14 + 208) = 0u;
    *(_OWORD *)(v14 + 224) = 0u;
    *(_OWORD *)(v14 + 240) = 0u;
    *(_OWORD *)(v14 + 256) = 0u;
    *(_OWORD *)(v14 + 272) = 0u;
    uint64_t v15 = (char *)(v3 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_key);
    *(void *)(v3 + 16) = v14;
    *(void *)(v3 + 24) = 256;
    v11(v15, a1, v6);
    uint64_t v16 = specialized AES.CTR.Nonce.init<A>(nonceBytes:)(a2);
    int v18 = v17;
    unint64_t v19 = HIDWORD(v17);
    v13(a1, v6);
    uint64_t v20 = v3 + OBJC_IVAR____TtC4VDAF19SeedStreamAES128CTR_nonce;
    *(void *)uint64_t v20 = v16;
    *(_DWORD *)(v20 + 8) = v18;
    *(_DWORD *)(v20 + 12) = v19;
    return v3;
  }
  else
  {
    __break(1u);
    swift_bridgeObjectRelease();
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SHA256 and conformance SHA256()
{
  unint64_t result = lazy protocol witness table cache variable for type SHA256 and conformance SHA256;
  if (!lazy protocol witness table cache variable for type SHA256 and conformance SHA256)
  {
    type metadata accessor for SHA256();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SHA256 and conformance SHA256);
  }
  return result;
}

uint64_t _sSays5UInt8VGSayxG10Foundation15ContiguousBytesAeBRszlWlTm_0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ObjC metadata update function for SeedStreamAES128CTR()
{
  return type metadata accessor for SeedStreamAES128CTR(0);
}

uint64_t type metadata accessor for SeedStreamAES128CTR(uint64_t a1)
{
  return type metadata accessor for SeedStreamAES128CTR(a1, (uint64_t *)&type metadata singleton initialization cache for SeedStreamAES128CTR);
}

uint64_t type metadata completion function for SeedStreamAES128CTR()
{
  uint64_t result = type metadata accessor for SymmetricKey();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for SeedStreamAES128CTR(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SeedStreamAES128CTR);
}

uint64_t dispatch thunk of SeedStreamAES128CTR.__allocating_init(key:iv:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t ObjC metadata update function for XofHmacSha256Aes128()
{
  return type metadata accessor for XofHmacSha256Aes128(0);
}

uint64_t type metadata accessor for XofHmacSha256Aes128(uint64_t a1)
{
  return type metadata accessor for SeedStreamAES128CTR(a1, (uint64_t *)&type metadata singleton initialization cache for XofHmacSha256Aes128);
}

uint64_t type metadata accessor for SeedStreamAES128CTR(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for XofHmacSha256Aes128()
{
  type metadata accessor for HMAC<SHA256>();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for XofHmacSha256Aes128(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for XofHmacSha256Aes128);
}

uint64_t dispatch thunk of XofHmacSha256Aes128.__allocating_init(seedBytes:domainSeparationTag:binder:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

void type metadata accessor for HMAC<SHA256>()
{
  if (!lazy cache variable for type metadata for HMAC<SHA256>)
  {
    type metadata accessor for SHA256();
    lazy protocol witness table accessor for type SHA256 and conformance SHA256();
    unint64_t v0 = type metadata accessor for HMAC();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HMAC<SHA256>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<UnsafeRawBufferPointer>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>);
  }
  return result;
}

uint64_t GadgetWireInputs.__allocating_init<A>(numOfCalls:proveRand:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return GadgetWireInputs.__allocating_init<A>(numOfCalls:proveRand:)(a1, a2, a3, a4, (uint64_t (*)(void))specialized GadgetWireInputs.__allocating_init<A>(numOfCalls:proveRand:));
}

uint64_t GadgetWireInputs.numOfCalled.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 16);
}

uint64_t GadgetWireInputs.numOfCalled.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*GadgetWireInputs.numOfCalled.modify())()
{
  return QueryGadget.wireInputs.modify;
}

uint64_t GadgetWireInputs.numOfCalls.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t GadgetWireInputs.values.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t GadgetWireInputs.values.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 32) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*GadgetWireInputs.values.modify())()
{
  return QueryGadget.wireOutputs.modify;
}

uint64_t GadgetWireInputs.init<A>(numOfCalls:proveRand:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return GadgetWireInputs.__allocating_init<A>(numOfCalls:proveRand:)(a1, a2, a3, a4, (uint64_t (*)(void))specialized GadgetWireInputs.init<A>(numOfCalls:proveRand:));
}

uint64_t GadgetWireInputs.__allocating_init<A>(numOfCalls:proveRand:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v7 = a5();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a2, a3);
  return v7;
}

uint64_t GadgetWireInputs.update<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v65 = a1;
  uint64_t v8 = *(void *)(*v3 + 80);
  uint64_t v58 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v10 = (char *)v49 - v9;
  uint64_t v12 = *(void *)(*(void *)(v11 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v61 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = MEMORY[0x270FA5388](AssociatedTypeWitness, v13);
  uint64_t v64 = (char *)v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14, v16);
  uint64_t v56 = (char *)v49 - v17;
  int v18 = v3 + 2;
  swift_beginAccess();
  uint64_t v19 = v5[2];
  uint64_t v20 = v5[3];
  if (v19 >= v20)
  {
    uint64_t v68 = v5[2];
    uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v67 = v43;
    v44._countAndFlagsBits = 540884512;
    v44._object = (void *)0xE400000000000000;
    String.append(_:)(v44);
    uint64_t v68 = v20;
    v45._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    uint64_t v46 = v66;
    uint64_t v47 = v67;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v48 = v46;
    *(void *)(v48 + 8) = v47;
    *(unsigned char *)(v48 + 16) = 3;
    return swift_willThrow();
  }
  else
  {
    uint64_t v55 = v18;
    *int v18 = v19 + 1;
    uint64_t result = dispatch thunk of Collection.count.getter();
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      v49[1] = v4;
      uint64_t v22 = v55;
      if (result)
      {
        uint64_t v23 = v12;
        uint64_t v24 = a2;
        Swift::Int v25 = 0;
        uint64_t v51 = v5 + 4;
        uint64_t v50 = (void (**)(char *, uint64_t))(v61 + 8);
        v49[3] = v58 + 16;
        void v49[2] = v58 + 40;
        uint64_t v26 = 32;
        uint64_t v53 = result;
        uint64_t v54 = a3;
        uint64_t v52 = v23;
        uint64_t v62 = v10;
        uint64_t v63 = v24;
        uint64_t v27 = v58;
        do
        {
          Swift::Int v60 = v25 + 1;
          uint64_t v61 = v26;
          Swift::Int v59 = *v22;
          dispatch thunk of Collection.startIndex.getter();
          uint64_t v28 = v8;
          uint64_t v29 = v56;
          dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
          long long v30 = *v50;
          uint64_t v31 = AssociatedTypeWitness;
          (*v50)(v64, AssociatedTypeWitness);
          uint64_t v32 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
          (*(void (**)(char *))(v27 + 16))(v62);
          v32(&v66, 0);
          uint64_t v33 = v29;
          uint64_t v8 = v28;
          v30(v33, v31);
          uint64_t v34 = v61;
          uint64_t v35 = v51;
          swift_beginAccess();
          uint64_t v36 = type metadata accessor for Array();
          uint64_t v37 = type metadata accessor for Array();
          Array._makeMutableAndUnique()();
          uint64_t v38 = *v35;
          Array._checkSubscript_mutating(_:)(v25);
          Array._makeMutableAndUnique()();
          uint64_t v39 = *(void *)(v38 + 8 * v25 + 32);
          Swift::Int v40 = v59;
          Array._checkSubscript_mutating(_:)(v59);
          char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
          uint64_t v42 = v39 & 0xFFFFFFFFFFFFFF8;
          if ((isClassOrObjCExistentialType & 1) == 0) {
            uint64_t v42 = v39;
          }
          (*(void (**)(unint64_t, char *, uint64_t))(v27 + 40))(v42+ ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ *(void *)(v27 + 72) * v40, v62, v8);
          AggregateShare.share.modify(v36);
          AggregateShare.share.modify(v37);
          swift_endAccess();
          uint64_t v22 = v55;
          uint64_t result = v53;
          uint64_t v26 = v34 + 8;
          Swift::Int v25 = v60;
        }
        while (v53 != v60);
      }
    }
  }
  return result;
}

uint64_t GadgetWireInputs.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t GadgetWireInputs.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t specialized GadgetWireInputs.init<A>(numOfCalls:proveRand:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v66 = a1;
  uint64_t v9 = *v5;
  uint64_t v10 = *(void *)(*(void *)(a4 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  Swift::Int v65 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = MEMORY[0x270FA5388](AssociatedTypeWitness, v11);
  uint64_t v64 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12, v14);
  uint64_t v61 = (char *)&v54 - v16;
  uint64_t v17 = *(void *)(v9 + 80);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v15, v19);
  uint64_t v22 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20, v23);
  Swift::Int v25 = (char *)&v54 - v24;
  v5[2] = 0;
  uint64_t v69 = a2;
  uint64_t v70 = a3;
  uint64_t v68 = v10;
  uint64_t v26 = dispatch thunk of Collection.count.getter();
  uint64_t v27 = v66;
  v5[3] = v66;
  uint64_t result = dispatch thunk of static AdditiveArithmetic.zero.getter();
  if (__OFADD__(v27, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v67 = v22;
  uint64_t v29 = specialized Array.init(repeating:count:)((uint64_t)v25, v27 + 1, v17);
  uint64_t v30 = v18;
  (*(void (**)(char *, uint64_t))(v18 + 8))(v25, v17);
  v71[0] = v29;
  uint64_t v31 = v17;
  uint64_t v32 = type metadata accessor for Array();
  uint64_t v33 = specialized Array.init(repeating:count:)((uint64_t)v71, v26, v32);
  uint64_t result = swift_bridgeObjectRelease();
  v5[4] = v33;
  uint64_t v34 = v5 + 4;
  if (v26 < 0)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v55 = v5;
  uint64_t v35 = v64;
  uint64_t v63 = v30;
  if (v26)
  {
    uint64_t v36 = v31;
    Swift::Int v37 = 0;
    uint64_t v57 = v63 + 16;
    uint64_t v58 = (void (**)(char *, uint64_t))(v65 + 8);
    uint64_t v56 = v63 + 40;
    uint64_t v38 = 32;
    uint64_t v59 = v26;
    uint64_t v60 = a4;
    uint64_t v39 = v61;
    uint64_t v40 = v63;
    do
    {
      Swift::Int v65 = v37 + 1;
      uint64_t v66 = v38;
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      uint64_t v41 = *v58;
      uint64_t v42 = v35;
      uint64_t v43 = v34;
      uint64_t v44 = v32;
      uint64_t v45 = AssociatedTypeWitness;
      (*v58)(v42, AssociatedTypeWitness);
      uint64_t v46 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
      (*(void (**)(char *))(v40 + 16))(v67);
      v46(v71, 0);
      uint64_t v47 = v45;
      uint64_t v32 = v44;
      uint64_t v34 = v43;
      uint64_t v35 = v64;
      v41(v39, v47);
      uint64_t v48 = v66;
      swift_beginAccess();
      uint64_t v49 = type metadata accessor for Array();
      Array._makeMutableAndUnique()();
      uint64_t v50 = *v34;
      Array._checkSubscript_mutating(_:)(v37);
      Array._makeMutableAndUnique()();
      uint64_t v51 = *(void *)(v50 + 8 * v37 + 32);
      Array._checkSubscript_mutating(_:)(0);
      char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
      uint64_t v53 = v51 & 0xFFFFFFFFFFFFFF8;
      if ((isClassOrObjCExistentialType & 1) == 0) {
        uint64_t v53 = v51;
      }
      (*(void (**)(unint64_t, char *, uint64_t))(v40 + 40))(v53 + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80)), v67, v36);
      AggregateShare.share.modify(v32);
      AggregateShare.share.modify(v49);
      swift_endAccess();
      uint64_t v38 = v48 + 8;
      Swift::Int v37 = v65;
    }
    while (v59 != v65);
  }
  return (uint64_t)v55;
}

uint64_t specialized GadgetWireInputs.__allocating_init<A>(numOfCalls:proveRand:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized GadgetWireInputs.init<A>(numOfCalls:proveRand:)(a1, a2, a3, a4);
}

uint64_t type metadata completion function for GadgetWireInputs()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for GadgetWireInputs()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for GadgetWireInputs(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for GadgetWireInputs);
}

uint64_t dispatch thunk of GadgetWireInputs.__allocating_init<A>(numOfCalls:proveRand:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t specialized FixedWidthInteger.nextPowerOfTwo.getter(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v1 = 1 << -(char)__clz(result - 1);
    if (result) {
      return v1;
    }
    else {
      return 1;
    }
  }
  return result;
}

uint64_t Gadget.evaluate<A>(at:for:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  unint64_t v14 = *a2;
  unint64_t v15 = *a2 >> 62;
  if (!v15)
  {
    swift_retain();
    GadgetWireInputs.update<A>(_:)(a1, a4, a6);
    if (!v7) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 64))(a1, a4, a6, a3, a5);
    }
    return outlined consume of GadgetEvaluation<Field32>(v14);
  }
  if (v15 == 1)
  {
    swift_retain();
    QueryGadget.evaluate<A>(at:)(a1, a4, a6, a7);
    return outlined consume of GadgetEvaluation<Field32>(v14);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 64))(a1, a4, a6, a3, a5);
}

unint64_t Gadget.wirePolynomialLength.getter(uint64_t a1, uint64_t a2)
{
  unint64_t result = (*(uint64_t (**)(void))(a2 + 40))();
  if (__OFADD__(result, 1))
  {
    __break(1u);
    goto LABEL_8;
  }
  if (((result + 1) & 0x8000000000000000) != 0)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == -1) {
    return 1;
  }
  else {
    return 1 << -(char)__clz(result);
  }
}

uint64_t Gadget.gadgetPolynomialLength.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(a2 + 32))();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2);
  uint64_t v6 = result - 1;
  if (__OFSUB__(result, 1))
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v7 = v4 * v6;
  if ((unsigned __int128)(v4 * (__int128)v6) >> 64 != (v4 * v6) >> 63)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = v7 + 1;
  if (__OFADD__(v7, 1)) {
LABEL_7:
  }
    __break(1u);
  return result;
}

uint64_t Gadget.parameters.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = (*(uint64_t (**)(void))(a2 + 24))();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(a1, a2);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2);
  *a3 = v6;
  a3[1] = v7;
  a3[2] = v8;
  a3[3] = v9;
  a3[4] = result;
  return result;
}

uint64_t GadgetParameters.arity.getter()
{
  return *(void *)v0;
}

uint64_t GadgetParameters.degree.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t GadgetParameters.numOfCalls.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t GadgetParameters.wirePolynomialLength.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t GadgetParameters.gadgetPolynomialLength.getter()
{
  return *(void *)(v0 + 32);
}

void __swiftcall GadgetParameters.init(arity:degree:numOfCalls:wirePolynomialLength:gadgetPolynomialLength:)(VDAF::GadgetParameters *__return_ptr retstr, Swift::Int arity, Swift::Int degree, Swift::Int numOfCalls, Swift::Int wirePolynomialLength, Swift::Int gadgetPolynomialLength)
{
  retstr->arity = arity;
  retstr->degree = degree;
  retstr->numOfCalls = numOfCalls;
  retstr->wirePolynomialLength = wirePolynomialLength;
  retstr->gadgetPolynomialLength = gadgetPolynomialLength;
}

unint64_t *initializeBufferWithCopyOfBuffer for GadgetEvaluation(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of GadgetEvaluation<Field32>(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for GadgetEvaluation(unint64_t *a1)
{
  return outlined consume of GadgetEvaluation<Field32>(*a1);
}

unint64_t *assignWithCopy for GadgetEvaluation(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of GadgetEvaluation<Field32>(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  outlined consume of GadgetEvaluation<Field32>(v4);
  return a1;
}

unint64_t *assignWithTake for GadgetEvaluation(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  outlined consume of GadgetEvaluation<Field32>(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for GadgetEvaluation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7E && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for GadgetEvaluation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)uint64_t result = a2 - 126;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for GadgetEvaluation(void *a1)
{
  uint64_t v1 = *a1 >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return (*a1 >> 3) + 2;
  }
}

void *destructiveProjectEnumData for GadgetEvaluation(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *destructiveInjectEnumTag for GadgetEvaluation(unint64_t *result, uint64_t a2)
{
  if (a2 < 2)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8;
    unint64_t v3 = a2 << 62;
  }
  else
  {
    uint64_t v2 = 8 * (a2 - 2);
    unint64_t v3 = 0x8000000000000000;
  }
  *uint64_t result = v2 | v3;
  return result;
}

uint64_t type metadata accessor for GadgetEvaluation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for GadgetParameters(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for GadgetParameters(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for GadgetParameters()
{
  return &type metadata for GadgetParameters;
}

uint64_t dispatch thunk of Gadget.arity.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of Gadget.degree.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of Gadget.numOfCalls.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of Gadget.wirePolynomialLength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of Gadget.gadgetPolynomialLength.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of Gadget.evaluate<A>(at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 64))();
}

{
  return (*(uint64_t (**)(void))(a5 + 72))();
}

uint64_t specialized static VDAFErrorProtocol.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized static VDAFErrorProtocol.== infix(_:_:)(a1, a2, a3, a4, a5, a6, (void (*)(void))outlined copy of VDAFError);
}

{
  return specialized static VDAFErrorProtocol.== infix(_:_:)(a1, a2, a3, a4, a5, a6, (void (*)(void))outlined copy of FLPTypeError);
}

{
  return specialized static VDAFErrorProtocol.== infix(_:_:)(a1, a2, a3, a4, a5, a6, (void (*)(void))outlined copy of VDAFError);
}

uint64_t specialized static VDAFErrorProtocol.== infix(_:_:)()
{
  uint64_t v0 = specialized VDAFErrorProtocol.value.getter();
  uint64_t v2 = v1;
  uint64_t v3 = specialized VDAFErrorProtocol.value.getter();
  if (v2)
  {
    if (v4)
    {
      if (v0 == v3 && v2 == v4)
      {
        swift_bridgeObjectRelease();
        char v5 = 1;
      }
      else
      {
        char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      char v5 = 0;
    }
  }
  else
  {
    if (!v4)
    {
      char v5 = 1;
      return v5 & 1;
    }
    char v5 = 0;
  }
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t specialized static VDAFErrorProtocol.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  uint64_t v11 = specialized VDAFErrorProtocol.value.getter(a1, a2, a3, a7);
  uint64_t v13 = v12;
  uint64_t v14 = specialized VDAFErrorProtocol.value.getter(a4, a5, a6, a7);
  if (v13)
  {
    if (v15)
    {
      if (v11 == v14 && v13 == v15)
      {
        swift_bridgeObjectRelease();
        char v16 = 1;
      }
      else
      {
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      char v16 = 0;
    }
  }
  else
  {
    if (!v15)
    {
      char v16 = 1;
      return v16 & 1;
    }
    char v16 = 0;
  }
  swift_bridgeObjectRelease();
  return v16 & 1;
}

uint64_t specialized VDAFErrorProtocol.value.getter()
{
  swift_bridgeObjectRetain();
  String.init<A>(describing:)();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v0 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 16))
  {
    uint64_t v1 = *(void *)(v0 + 32);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v1 = 0;
  }
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t specialized VDAFErrorProtocol.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  String.init<A>(describing:)();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v4 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v4 + 16))
  {
    uint64_t v5 = *(void *)(v4 + 32);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v5 = 0;
  }
  swift_bridgeObjectRelease();
  return v5;
}

BOOL Prio3.isJointRandRequired.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 80))(*(void *)(a1 + 16)) > 0;
}

uint64_t Prio3.init(flp:numOfAggregators:numOfProofs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>)
{
  if ((unint64_t)(a2 - 2) > 0xFD)
  {
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    unint64_t v19 = 0xD000000000000032;
    unint64_t v20 = 0x8000000260BFF900;
    _print_unlocked<A, B>(_:_:)();
    v14._countAndFlagsBits = 3943982;
    v14._object = (void *)0xE300000000000000;
    String.append(_:)(v14);
    _print_unlocked<A, B>(_:_:)();
    v15._countAndFlagsBits = 0;
    v15._object = (void *)0xE000000000000000;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 0x20746F67202CLL;
    v16._object = (void *)0xE600000000000000;
    String.append(_:)(v16);
  }
  else
  {
    if (static Prio3.isRecommended(numOfProofs:)(a3, a4, a5, a6))
    {
      *(void *)a7 = a2;
      *((void *)a7 + 1) = a3;
      uint64_t v12 = type metadata accessor for Prio3();
      return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(&a7[*(int *)(v12 + 56)], a1, a4);
    }
    _StringGuts.grow(_:)(48);
    swift_bridgeObjectRelease();
    unint64_t v19 = 0xD00000000000003CLL;
    unint64_t v20 = 0x8000000260BFF940;
  }
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
  swift_allocError();
  *(void *)uint64_t v18 = v19;
  *(void *)(v18 + 8) = v20;
  *(unsigned char *)(v18 + 16) = 1;
  swift_willThrow();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a1, a4);
}

uint64_t Prio3.shard<A>(_:nonce:seedBytes:)(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = *(void *)(a3 + 16);
  if (v9 != 16)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30._countAndFlagsBits = 0x3D746F67202CLL;
    v30._object = (void *)0xE600000000000000;
    String.append(_:)(v30);
    uint64_t v134 = v9;
    v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    unint64_t v23 = 0xD000000000000030;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v32 = 0xD000000000000030;
    *(void *)(v32 + 8) = 0x8000000260BFF7F0;
    *(unsigned char *)(v32 + 16) = 1;
LABEL_11:
    swift_willThrow();
    return v23;
  }
  uint64_t v10 = v7;
  uint64_t v13 = a5;
  unint64_t v128 = a2;
  uint64_t v129 = v8;
  uint64_t v120 = (void *)a3;
  uint64_t v16 = a5[2];
  uint64_t v125 = a5[3];
  uint64_t v126 = v16;
  uint64_t v127 = a5[4];
  uint64_t v124 = a5[5];
  uint64_t v17 = dispatch thunk of Collection.count.getter();
  if (v17 != Prio3.randomSizeForShard.getter((uint64_t)v13))
  {
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    Prio3.randomSizeForShard.getter((uint64_t)v13);
    v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._countAndFlagsBits = 0x3D746F67202CLL;
    v34._object = (void *)0xE600000000000000;
    String.append(_:)(v34);
    uint64_t v134 = dispatch thunk of Collection.count.getter();
    v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    unint64_t v23 = 0xD00000000000002BLL;
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v36 = 0xD00000000000002BLL;
    *(void *)(v36 + 8) = 0x8000000260BFF830;
    *(unsigned char *)(v36 + 16) = 0;
    goto LABEL_11;
  }
  uint64_t v108 = a1;
  uint64_t v110 = a6;
  uint64_t v109 = a7;
  uint64_t v19 = Prio3.splitSeedBytes<A>(_:)(a4, v13, a6, a7);
  uint64_t v117 = v20;
  int64_t v21 = *(void *)(v19 + 16);
  uint64_t v22 = (void *)MEMORY[0x263F8EE78];
  uint64_t v111 = v7;
  uint64_t v112 = v13;
  uint64_t v123 = v19;
  uint64_t v118 = v18;
  if (v21)
  {
    char v130 = (void *)MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
    unint64_t v23 = (unint64_t)v22;
    uint64_t v24 = (uint64_t *)(v19 + 32);
    int64_t v25 = v21;
    do
    {
      uint64_t v26 = *v24;
      char v130 = (void *)v23;
      unint64_t v28 = *(void *)(v23 + 16);
      unint64_t v27 = *(void *)(v23 + 24);
      swift_bridgeObjectRetain();
      if (v28 >= v27 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1);
        unint64_t v23 = (unint64_t)v130;
      }
      *(void *)(v23 + 16) = v28 + 1;
      *(void *)(v23 + 8 * v28 + 32) = v26;
      v24 += 3;
      --v25;
    }
    while (v25);
    char v130 = v22;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
    uint64_t v19 = v123;
    Swift::Int v37 = (uint64_t *)(v123 + 40);
    do
    {
      uint64_t v38 = *v37;
      char v130 = v22;
      unint64_t v40 = v22[2];
      unint64_t v39 = v22[3];
      swift_bridgeObjectRetain();
      if (v40 >= v39 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v39 > 1), v40 + 1, 1);
        uint64_t v22 = v130;
      }
      v22[2] = v40 + 1;
      v22[v40 + 4] = v38;
      v37 += 3;
      --v21;
    }
    while (v21);
    uint64_t v41 = v118;
    uint64_t v10 = v111;
    uint64_t v13 = v112;
  }
  else
  {
    uint64_t v41 = v18;
    unint64_t v23 = MEMORY[0x263F8EE78];
  }
  uint64_t v42 = (char *)v10 + *((int *)v13 + 14);
  uint64_t v43 = v127;
  uint64_t v44 = v126;
  uint64_t v45 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v127 + 112))(v128, v126, v127);
  if (v129)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_19:
    swift_bridgeObjectRelease();
    return v23;
  }
  unint64_t v121 = v42;
  uint64_t v122 = v45;
  uint64_t v47 = *(uint64_t (**)(uint64_t, uint64_t))(v127 + 80);
  unint64_t v128 = (uint64_t *)(v127 + 80);
  uint64_t v119 = v47;
  uint64_t v48 = v47(v126, v127);
  if (v48 < 1)
  {
    unint64_t v128 = &v107;
    uint64_t v134 = v122;
    uint64_t v120 = (void *)*v10;
    MEMORY[0x270FA5388](v48, v49);
    uint64_t v119 = (uint64_t (*)(uint64_t, uint64_t))v98;
    uint64_t v56 = v124;
    uint64_t v57 = v125;
    uint64_t v99 = v44;
    uint64_t v100 = v125;
    uint64_t v101 = v110;
    uint64_t v102 = v43;
    uint64_t v103 = v124;
    uint64_t v104 = v109;
    uint64_t v105 = v23;
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    swift_bridgeObjectRetain();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v60 = v111;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    static VDAFProtocol.splitShare<A, B>(_:into:_:)((uint64_t)&v134, (uint64_t)v120, partial apply for closure #4 in Prio3.shard<A>(_:nonce:seedBytes:), (uint64_t)v119, (uint64_t)v13, AssociatedTypeWitness, v57, WitnessTable, AssociatedConformanceWitness, v56);
    swift_bridgeObjectRelease();
    uint64_t v62 = 0;
    goto LABEL_38;
  }
  if (v41)
  {
    uint64_t v50 = *(void *)(v19 + 16);
    if (v50)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v51 = (char *)MEMORY[0x263F8EE78];
      uint64_t v52 = 48;
      do
      {
        uint64_t v53 = *(void *)(v19 + v52);
        if (v53)
        {
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v51 + 2) + 1, 1, v51);
          }
          unint64_t v55 = *((void *)v51 + 2);
          unint64_t v54 = *((void *)v51 + 3);
          if (v55 >= v54 >> 1) {
            uint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v54 > 1), v55 + 1, 1, v51);
          }
          *((void *)v51 + 2) = v55 + 1;
          *(void *)&v51[8 * v55 + 32] = v53;
          uint64_t v19 = v123;
        }
        v52 += 24;
        --v50;
      }
      while (v50);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v51 = (char *)MEMORY[0x263F8EE78];
    }
    uint64_t v13 = v112;
    char v130 = v112;
    uint64_t v131 = swift_getAssociatedTypeWitness();
    uint64_t v132 = swift_getWitnessTable();
    uint64_t v133 = swift_getAssociatedConformanceWitness();
    uint64_t v63 = type metadata accessor for VerificationJointRandomness();
    uint64_t v64 = *v111;
    unint64_t v65 = swift_getWitnessTable();
    uint64_t v66 = static JointRandomness.jointRandPartsAndLeaderShare(commitment:leaderJointRandBlind:helperJointRandBlinds:helperMeasurementSeeds:numOfAggregators:nonce:)(v122, v118, (uint64_t)v51, v23, v64, (uint64_t)v120, v63, v65);
    if (v129)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      return v23;
    }
    uint64_t v68 = v66;
    uint64_t v69 = v67;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v70 = v119(v126, v127);
    uint64_t v62 = VerificationJointRandomness.__allocating_init(count:numOfProofs:parts:)(v70, v111[1], v68);
    uint64_t v134 = v69;
    uint64_t v60 = v111;
    uint64_t v44 = v126;
LABEL_38:
    uint64_t v120 = v62;
    LOBYTE(v130) = 3;
    uint64_t v71 = swift_getWitnessTable();
    uint64_t v72 = specialized VDAFProtocol.domainSeparationTag(usage:)((char *)&v130, (uint64_t)v13, v71);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v73 = swift_allocObject();
    *(_OWORD *)(v73 + 16) = xmmword_260BF9FF0;
    unint64_t v74 = v60[1];
    if ((v74 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v107 = v71;
      uint64_t v75 = v127;
      if (v74 <= 0xFF)
      {
        *(unsigned char *)(v73 + 32) = v74;
        uint64_t v119 = (uint64_t (*)(uint64_t, uint64_t))static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(v117, v72, v73, v125, v124);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v76 = swift_getAssociatedTypeWitness();
        char v130 = (void *)Array.init()();
        uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t))(v75 + 56))(v44, v75);
        Swift::Int v78 = v74 * v77;
        if ((unsigned __int128)((uint64_t)v74 * (__int128)v77) >> 64 == (uint64_t)(v74 * v77) >> 63)
        {
          uint64_t v117 = type metadata accessor for Array();
          Array.reserveCapacity(_:)(v78);
          if (!v74)
          {
            swift_bridgeObjectRelease();
            uint64_t v88 = v127;
            uint64_t v87 = swift_getAssociatedConformanceWitness();
            uint64_t v82 = v87;
LABEL_50:
            uint64_t v89 = v111;
            MEMORY[0x270FA5388](v87, *v111);
            uint64_t v99 = v44;
            uint64_t v100 = v125;
            uint64_t v101 = v110;
            uint64_t v102 = v88;
            uint64_t v103 = v124;
            uint64_t v104 = v109;
            uint64_t v105 = (uint64_t)v22;
            uint64_t v106 = v89;
            static VDAFProtocol.splitShare<A, B>(_:into:_:)((uint64_t)&v130, v90, (uint64_t (*)(uint64_t))partial apply for closure #5 in Prio3.shard<A>(_:nonce:seedBytes:), (uint64_t)v98, (uint64_t)v112, v76, v125, v107, v82, v124);
            swift_bridgeObjectRelease();
            uint64_t v91 = v118;
            if (v120) {
              uint64_t v92 = swift_bridgeObjectRetain();
            }
            else {
              uint64_t v92 = 0;
            }
            uint64_t v93 = v123;
            Prio3PublicShare.init(jointRandParts:)(v92, v108);
            uint64_t v94 = v134;
            uint64_t v95 = (uint64_t)v130;
            swift_bridgeObjectRetain();
            unint64_t v23 = Prio3.inputSharesFrom(leaderMeasurementShare:leaderProofShare:leaderJointBlind:helperShares:)(v94, v95, v91, v93, v112);
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            return v23;
          }
          uint64_t v79 = v126;
          uint64_t v115 = *(uint64_t (**)(uint64_t, uint64_t))(v127 + 88);
          uint64_t v116 = v127 + 88;
          uint64_t v113 = *(void (**)(void **, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))(v127 + 168);
          uint64_t v114 = v127 + 168;
          uint64_t v80 = v127;
          while (1)
          {
            if (v120)
            {
              swift_retain();
              unint64_t v128 = (uint64_t *)VerificationJointRandomness.next()();
              swift_release();
            }
            else
            {
              unint64_t v128 = (uint64_t *)Array.init()();
            }
            uint64_t v81 = v115(v79, v80);
            uint64_t v82 = swift_getAssociatedConformanceWitness();
            uint64_t v83 = static FieldElement.randomVector<A>(count:using:)(v81, (uint64_t)v119, v76);
            uint64_t v84 = v117;
            uint64_t v85 = swift_getWitnessTable();
            uint64_t v86 = v129;
            v113(&v130, v122, v83, v128, v84, v85, v79, v80, v107, v108);
            uint64_t v129 = v86;
            if (v86) {
              break;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (!--v74)
            {
              uint64_t v87 = swift_bridgeObjectRelease();
              uint64_t v44 = v126;
              uint64_t v88 = v127;
              goto LABEL_50;
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v23 = v134;
          swift_release();
          goto LABEL_19;
        }
        goto LABEL_57;
      }
    }
    __break(1u);
LABEL_57:
    __break(1u);
  }
  char v130 = 0;
  uint64_t v131 = 0xE000000000000000;
  _StringGuts.grow(_:)(58);
  v96._object = (void *)0x8000000260BFF470;
  v96._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v96);
  v97._countAndFlagsBits = 0xD000000000000038;
  v97._object = (void *)0x8000000260BFF870;
  String.append(_:)(v97);
  LODWORD(v106) = 0;
  uint64_t v105 = 202;
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t Prio3.publicShare<A>(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, size_t *a4@<X3>, size_t *a5@<X8>)
{
  uint64_t v6 = v5;
  v17[0] = a5;
  v17[1] = a4;
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v14 = (*(uint64_t (**)(void, void))(*(void *)(v13 + 32) + 80))(*(void *)(v13 + 16), *(void *)(v13 + 32)) > 0;
  int64_t v15 = *v6;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
  return Prio3PublicShare.init<A>(from:parameter:)((uint64_t)v12, v14, v15, *(void *)(a2 + 24), *(void *)(a2 + 40), v17[0]);
}

uint64_t Prio3.inputShare<A>(from:aggregatorID:)@<X0>(uint64_t a1@<X0>, Swift::Int a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v36 = a5;
  uint64_t v29 = a1;
  uint64_t v30 = a6;
  uint64_t v28 = *(void *)(a4 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10, v13);
  int64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v16 + 16))(v15, v17);
  uint64_t v19 = a3[2];
  uint64_t v18 = a3[3];
  uint64_t v20 = a3[4];
  uint64_t result = Prio3InputShareDecodableParameter.init(prio3:aggregatorID:)((uint64_t)v15, a2, v19, v18, v20, a3[5], (uint64_t)&v31);
  if (!v6)
  {
    uint64_t v26 = v32;
    uint64_t v27 = v31;
    uint64_t v25 = v33;
    uint64_t v22 = v34;
    uint64_t v23 = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v12, v29, a4);
    uint64_t v31 = v27;
    uint64_t v32 = v26;
    uint64_t v33 = v25;
    uint64_t v34 = v22;
    uint64_t v35 = v23;
    return Prio3InputShare.init<A>(from:parameter:)((uint64_t)v12, (uint64_t)&v31, v19, v18, a4, v20);
  }
  return result;
}

void Prio3.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:)(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v99 = a4;
  uint64_t v88 = a2;
  uint64_t v89 = a1;
  uint64_t v10 = *a6;
  uint64_t v11 = *(void *)a7;
  int v95 = *(unsigned __int8 *)(a7 + 8);
  uint64_t v12 = *(void *)(a7 + 16);
  uint64_t v92 = v10;
  uint64_t v93 = v12;
  LODWORD(v94) = *(unsigned __int8 *)(a7 + 24);
  uint64_t v13 = *(void **)(a7 + 32);
  uint64_t v90 = a3;
  uint64_t v91 = v13;
  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v15 = *(void *)(a9 + 24);
  uint64_t v98 = *(void *)(a9 + 16);
  uint64_t v16 = *(void **)(a9 + 32);
  uint64_t v17 = *(void *)(a9 + 40);
  uint64_t v96 = v11;
  Swift::String v97 = v16;
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8);
  if (v14 != v18(v15, v17))
  {
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    *(void *)&long long v101 = 0xD000000000000035;
    *((void *)&v101 + 1) = 0x8000000260BFF5B0;
    uint64_t v105 = v18(v15, v17);
LABEL_10:
    v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._countAndFlagsBits = 0x3D746F67202CLL;
    v34._object = (void *)0xE600000000000000;
    String.append(_:)(v34);
    uint64_t v105 = v14;
    v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(_OWORD *)uint64_t v36 = v101;
    *(unsigned char *)(v36 + 16) = 1;
    swift_willThrow();
    return;
  }
  uint64_t v87 = v17;
  uint64_t v14 = *(void *)(a5 + 16);
  if (v14 != 16)
  {
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    *(void *)&long long v101 = 0xD000000000000031;
    *((void *)&v101 + 1) = 0x8000000260BFF5F0;
    uint64_t v105 = 16;
    goto LABEL_10;
  }
  uint64_t WitnessTable = swift_getWitnessTable();
  VDAFProtocol.assertValidAggregatorID(_:)(v99);
  if (!v20)
  {
    if ((v99 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v85 = WitnessTable;
      uint64_t v81 = (void *)a5;
      if (v99 <= 0xFF)
      {
        int64_t v21 = (uint64_t (*)(uint64_t, void *))v97[6];
        uint64_t v86 = v100 + *(int *)(a9 + 56);
        uint64_t v22 = v21(v98, v97);
        uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        uint64_t v83 = static VDAFProtocol.decodeMeasurementShare<A>(_:aggregatorID:count:)(v96, v95, v99, v22, a9, AssociatedTypeWitness, v85);
        uint64_t v84 = AssociatedConformanceWitness;
        uint64_t v82 = AssociatedTypeWitness;
        uint64_t v25 = (uint64_t (*)(uint64_t, void *))v97[7];
        uint64_t v80 = v97 + 7;
        uint64_t v79 = v25;
        uint64_t v26 = v25(v98, v97);
        uint64_t v28 = v100;
        if ((unsigned __int128)(v26 * (__int128)*(uint64_t *)(v100 + 8)) >> 64 != (v26 * *(void *)(v100 + 8)) >> 63)
        {
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }
        MEMORY[0x270FA5388](v26, v27);
        v70[2] = v98;
        v70[3] = v15;
        v70[4] = v97;
        v70[5] = v87;
        uint64_t v71 = v100;
        unint64_t v72 = v99;
        uint64_t v30 = v93;
        char v31 = v94;
        uint64_t v32 = v82;
        uint64_t v105 = specialized static VDAFProtocol.decodeProofShare<A>(_:aggregatorID:count:makeXOF:)(v93, v94, v29, partial apply for closure #1 in Prio3.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:), (uint64_t)v70, a9, v82);
        uint64_t v106 = v37;
        uint64_t v107 = v38;
        uint64_t v108 = v39;
        uint64_t v109 = v92;
        *(void *)&long long v101 = v96;
        BYTE8(v101) = v95;
        uint64_t v102 = v30;
        LOBYTE(v103) = v31;
        uint64_t v104 = v91;
        uint64_t v91 = Prio3.jointRandFrom(aggregatorID:nonce:measurement:publicShare:inputShare:)(v99, (uint64_t)v81, v83, &v109, (uint64_t)&v101, a9);
        LOBYTE(v101) = 4;
        uint64_t v40 = v90;
        swift_bridgeObjectRetain();
        uint64_t v41 = specialized VDAFProtocol.domainSeparationTag(usage:)((char *)&v101, a9, v85);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        uint64_t v42 = swift_allocObject();
        *(_OWORD *)(v42 + 16) = xmmword_260BF9FF0;
        unint64_t v43 = *(void *)(v28 + 8);
        if ((v43 & 0x8000000000000000) != 0) {
          goto LABEL_36;
        }
        if (v43 > 0xFF)
        {
LABEL_37:
          __break(1u);
          goto LABEL_38;
        }
        *(unsigned char *)(v42 + 32) = v43;
        *(void *)&long long v101 = v42;
        int64_t v44 = v43;
        uint64_t v45 = swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v45);
        uint64_t v85 = static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(v40, v41, v101, v15, v87);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v109 = Array.init()();
        uint64_t v47 = v97;
        uint64_t v46 = v98;
        uint64_t v48 = (uint64_t (*)(uint64_t, void *))v97[8];
        unint64_t v74 = v97 + 8;
        uint64_t v73 = v48;
        uint64_t v49 = v48(v98, v97);
        Swift::Int v50 = v44 * v49;
        if ((unsigned __int128)(v44 * (__int128)v49) >> 64 != (v44 * v49) >> 63)
        {
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
        uint64_t v90 = type metadata accessor for Array();
        Array.reserveCapacity(_:)(v50);
        uint64_t v51 = v91;
        if (!v44)
        {
          uint64_t v61 = v96;
LABEL_24:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          if (v51)
          {
            swift_retain();
            uint64_t v62 = v61;
            uint64_t v63 = VerificationJointRandomness.seed.getter();
            swift_release();
          }
          else
          {
            uint64_t v63 = 0;
            uint64_t v62 = v61;
          }
          uint64_t v64 = v73(v98, v47);
          uint64_t v71 = v87;
          uint64_t v65 = v63;
          int64_t v66 = v99;
          Prio3PrepareState.init(measurementShare:jointRandSeed:aggregatorID:verifierLength:)(v62, v95, v65, v99, v64, v89);
          uint64_t v67 = v109;
          if (v51)
          {
            uint64_t v68 = v51[2];
            if (*(void *)(v68 + 16) <= v66)
            {
LABEL_39:
              __break(1u);
              return;
            }
            uint64_t v69 = *(void *)(v68 + 8 * v66 + 32);
            swift_bridgeObjectRetain();
            swift_unknownObjectRelease();
            swift_release();
            swift_unknownObjectRelease();
          }
          else
          {
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            uint64_t v69 = 0;
          }
          Prio3PrepareShare.init(verifierShare:jointRandPart:)(v67, v69, v88);
          return;
        }
        Swift::Int v78 = (uint64_t (*)(uint64_t, void *))v47[12];
        uint64_t v77 = *(void *)v100;
        uint64_t v81 = v47 + 12;
        uint64_t v75 = (void (*)(uint64_t *, uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))v47[23];
        uint64_t v76 = v47 + 23;
        while (v44)
        {
          uint64_t v92 = v44;
          if (v51)
          {
            swift_retain();
            uint64_t v93 = VerificationJointRandomness.next()();
            swift_release();
          }
          else
          {
            uint64_t v93 = Array.init()();
          }
          uint64_t v52 = v79(v46, v47);
          uint64_t v53 = type metadata accessor for ArraySlice();
          uint64_t v94 = swift_getWitnessTable();
          RandomAccessCollection<>.popFirst(_:)(v52, v53);
          uint64_t v54 = v102;
          uint64_t v55 = v103;
          long long v100 = v101;
          uint64_t v56 = v97;
          uint64_t v57 = v78(v98, v97);
          uint64_t v58 = static FieldElement.randomVector<A>(count:using:)(v57, v85, v32);
          long long v101 = v100;
          uint64_t v102 = v54;
          uint64_t v103 = v55;
          uint64_t v46 = v98;
          uint64_t v59 = v90;
          uint64_t v60 = swift_getWitnessTable();
          v75(&v109, v83, &v101, v58, v93, v77, v59, v53, v60, v94, v46, v56);
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v51 = v91;
          int64_t v44 = v92 - 1;
          uint64_t v61 = v96;
          uint64_t v47 = v97;
          uint64_t v32 = v82;
          if (v92 == 1) {
            goto LABEL_24;
          }
        }
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
    }
    __break(1u);
    goto LABEL_34;
  }
}

uint64_t Prio3.prepareMessageFrom(_:parameter:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v4 = v3;
  *(void *)&long long v60 = a1;
  Swift::Int v50 = a3;
  uint64_t v6 = *(void **)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness, v10);
  uint64_t v12 = (char *)&v48 - v11;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  uint64_t v14 = (uint64_t)v3 + *(int *)(a2 + 56);
  uint64_t v15 = (uint64_t (*)(uint64_t, void *))v6[8];
  uint64_t v57 = v6 + 8;
  uint64_t v58 = v14;
  uint64_t v56 = v15;
  uint64_t result = v15(v7, v6);
  uint64_t v53 = v4;
  uint64_t v17 = v4[1];
  if ((unsigned __int128)(result * (__int128)v17) >> 64 != (result * v17) >> 63)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v18 = specialized Array.init(repeating:count:)((uint64_t)v12, result * v17, AssociatedTypeWitness);
  uint64_t v19 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
  uint64_t v54 = &v48;
  uint64_t v69 = v60;
  uint64_t v64 = v18;
  MEMORY[0x270FA5388](v19, v20);
  uint64_t v21 = *(void *)(a2 + 24);
  *(&v48 - 4) = v7;
  *(&v48 - 3) = v21;
  uint64_t v52 = v21;
  uint64_t v22 = *(void *)(a2 + 40);
  *(&v48 - 2) = (uint64_t)v6;
  *(&v48 - 1) = v22;
  uint64_t v51 = v22;
  type metadata accessor for Prio3PrepareShare();
  type metadata accessor for Array();
  type metadata accessor for Array();
  swift_getWitnessTable();
  uint64_t v59 = v7;
  uint64_t v23 = v55;
  uint64_t result = Sequence.reduce<A>(into:_:)();
  if (v23) {
    return result;
  }
  uint64_t v48 = AssociatedConformanceWitness;
  uint64_t v49 = a2;
  uint64_t v69 = v61;
  swift_getWitnessTable();
  uint64_t v65 = ArraySlice.init<A>(_:)();
  uint64_t v66 = v24;
  uint64_t v67 = v25;
  uint64_t v68 = v26;
  *(void *)&long long v61 = v60;
  MEMORY[0x270FA5388](v65, v24);
  uint64_t v27 = v52;
  *(&v48 - 4) = v59;
  *(&v48 - 3) = v27;
  uint64_t v28 = v51;
  *(&v48 - 2) = (uint64_t)v6;
  *(&v48 - 1) = v28;
  uint64_t result = Sequence.compactMap<A>(_:)();
  uint64_t v29 = v53[1];
  if (v29 < 0)
  {
LABEL_22:
    __break(1u);
    return result;
  }
  uint64_t v51 = v53[1];
  uint64_t v52 = result;
  if (v29)
  {
    uint64_t v54 = (uint64_t *)v6[24];
    uint64_t v55 = v6 + 24;
    uint64_t v30 = v59;
    while (1)
    {
      uint64_t v31 = v56(v30, v6);
      uint64_t v32 = type metadata accessor for ArraySlice();
      uint64_t WitnessTable = swift_getWitnessTable();
      RandomAccessCollection<>.popFirst(_:)(v31, v32);
      long long v60 = v61;
      uint64_t v34 = v32;
      uint64_t v30 = v59;
      if ((((uint64_t (*)(long long *, uint64_t, uint64_t, uint64_t, void *))v54)(&v61, v34, WitnessTable, v59, v6) & 1) == 0)break; {
      swift_unknownObjectRelease();
      }
      if (!--v29) {
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v47 = 0;
    *(void *)(v47 + 8) = 0;
    *(unsigned char *)(v47 + 16) = 4;
    swift_willThrow();
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v30 = v59;
LABEL_10:
    Swift::String v35 = v53;
    uint64_t v36 = (uint64_t (*)(uint64_t, void *))v6[10];
    uint64_t v37 = v36(v30, v6);
    uint64_t v38 = v52;
    uint64_t v39 = *(void *)(v52 + 16);
    if (v37 < 1)
    {
      swift_bridgeObjectRelease();
      if (!v39)
      {
        uint64_t result = swift_unknownObjectRelease();
        *Swift::Int v50 = 0;
        return result;
      }
      *(void *)&long long v61 = 0;
      *((void *)&v61 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
      swift_allocError();
      unint64_t v45 = 0xD00000000000003BLL;
      uint64_t v46 = "VDAF/Prio3.swift: unexpected jointRandPart in prepare share";
    }
    else
    {
      if (v39 == *v35)
      {
        uint64_t v40 = v49;
        uint64_t v41 = swift_getWitnessTable();
        *(void *)&long long v61 = v40;
        *((void *)&v61 + 1) = AssociatedTypeWitness;
        uint64_t v62 = v41;
        uint64_t v63 = v48;
        type metadata accessor for VerificationJointRandomness();
        uint64_t v42 = v36(v30, v6);
        VerificationJointRandomness.__allocating_init(count:numOfProofs:parts:)(v42, v51, v38);
        uint64_t v43 = VerificationJointRandomness.seed.getter();
        swift_release();
        uint64_t result = swift_unknownObjectRelease();
        *Swift::Int v50 = v43;
        return result;
      }
      swift_bridgeObjectRelease();
      *(void *)&long long v61 = 0;
      *((void *)&v61 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(42);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
      swift_allocError();
      unint64_t v45 = 0xD000000000000038;
      uint64_t v46 = "VDAF/Prio3.swift: missing jointRandPart in prepare share";
    }
    *(void *)uint64_t v44 = v45;
    *(void *)(v44 + 8) = (unint64_t)(v46 - 32) | 0x8000000000000000;
    *(unsigned char *)(v44 + 16) = 1;
    swift_willThrow();
  }
  return swift_unknownObjectRelease();
}

uint64_t Prio3.prepareState<A>(from:aggregatorID:)@<X0>(uint64_t a1@<X0>, Swift::Int a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v32 = a5;
  uint64_t v26 = a1;
  uint64_t v27 = a6;
  uint64_t v25 = *(void *)(a4 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](a1, a2);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10, v13);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v16 + 16))(v15, v17);
  uint64_t v19 = a3[2];
  uint64_t v18 = a3[3];
  uint64_t result = Prio3PrepareStateDecodableParameter.init(prio3:aggregatorID:)((uint64_t)v15, a2, v19, v18, a3[4], a3[5], (uint64_t)&v28);
  if (!v6)
  {
    uint64_t v24 = v28;
    uint64_t v21 = v29;
    long long v23 = v30;
    uint64_t v22 = v31;
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v12, v26, a4);
    uint64_t v28 = v24;
    uint64_t v29 = v21;
    long long v30 = v23;
    uint64_t v31 = v22;
    return Prio3PrepareState.init<A>(from:parameter:)((uint64_t)v12, (uint64_t)&v28, v19, v18, a4);
  }
  return result;
}

uint64_t Prio3.prepareMessage<A>(from:aggregatorID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  MEMORY[0x270FA5388](a1, a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v6);
  return Prio3PrepareMessage.init<A>(from:parameter:)((uint64_t)v6, a2, a3);
}

uint64_t Prio3.prepareNext(state:message:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)a1;
  char v8 = *(unsigned char *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 24);
  uint64_t v10 = *a2;
  if (*(void *)(a1 + 16))
  {
    if (v10 && specialized static Array<A>.== infix(_:_:)(*(void *)(a1 + 16), *a2)) {
      goto LABEL_4;
    }
LABEL_7:
    _StringGuts.grow(_:)(68);
    v17._object = (void *)0x8000000260BFF470;
    v17._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v17);
    v18._countAndFlagsBits = 0xD00000000000002ELL;
    v18._object = (void *)0x8000000260BFF490;
    String.append(_:)(v18);
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Seed?);
    v19._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._object = (void *)0x8000000260BFE870;
    v20._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v20);
    swift_bridgeObjectRetain();
    v21._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v22 = 0;
    *(void *)(v22 + 8) = 0xE000000000000000;
    *(unsigned char *)(v22 + 16) = 1;
    return swift_willThrow();
  }
  if (v10) {
    goto LABEL_7;
  }
LABEL_4:
  uint64_t v11 = *(void *)(a3 + 32);
  uint64_t v23 = a4;
  uint64_t v12 = (*(uint64_t (**)(void, uint64_t))(v11 + 48))(*(void *)(a3 + 16), v11);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t WitnessTable = swift_getWitnessTable();
  swift_getAssociatedConformanceWitness();
  uint64_t result = static VDAFProtocol.decodeMeasurementShare<A>(_:aggregatorID:count:)(v7, v8, v9, v12, a3, AssociatedTypeWitness, WitnessTable);
  if (!v4)
  {
    uint64_t v16 = (*(uint64_t (**)(void))(v11 + 128))();
    swift_bridgeObjectRelease();
    uint64_t result = OutputShare.init(_:)(v16, &v24);
    *(void *)uint64_t v23 = v24;
    *(_OWORD *)(v23 + 8) = 0u;
    *(_OWORD *)(v23 + 24) = 0u;
    *(_OWORD *)(v23 + 40) = 0u;
    *(unsigned char *)(v23 + 56) = 1;
  }
  return result;
}

uint64_t Prio3.unshard<A>(_:numOfMeasurements:parameter:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  v31[1] = a6;
  uint64_t v32 = a2;
  uint64_t v10 = *(void *)(a3 + 32);
  uint64_t v38 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v33 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = MEMORY[0x270FA5388](AssociatedTypeWitness, v12);
  uint64_t v15 = (char *)v31 - v14;
  uint64_t v16 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](v13, v17);
  Swift::String v19 = (char *)v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v20 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  uint64_t v36 = a1;
  v20(v19, a1, a4);
  uint64_t v35 = a5;
  LOBYTE(a1) = dispatch thunk of Collection.isEmpty.getter();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, a4);
  if (a1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v22 = v38;
    swift_getAssociatedConformanceWitness();
    dispatch thunk of static AdditiveArithmetic.zero.getter();
    uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 72);
    v34 += *(int *)(a3 + 56);
    uint64_t v24 = v23(v22, v10);
    uint64_t v25 = specialized Array.init(repeating:count:)((uint64_t)v15, v24, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v15, AssociatedTypeWitness);
    uint64_t v26 = AggregateShare.init(_:)(v25, v39);
    MEMORY[0x270FA5388](v26, v27);
    uint64_t v28 = *(void *)(a3 + 24);
    v31[-6] = v22;
    v31[-5] = v28;
    v31[-4] = a4;
    v31[-3] = v10;
    uint64_t v29 = v35;
    v31[-2] = *(void *)(a3 + 40);
    v31[-1] = v29;
    type metadata accessor for AggregateShare();
    uint64_t v30 = v37;
    uint64_t result = Sequence.reduce<A>(into:_:)();
    if (!v30)
    {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v10 + 120))(v39[2], v32, v38, v10);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Prio3Error(uint64_t a1, uint64_t a2)
{
  return specialized static VDAFErrorProtocol.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned __int8 *)(a2 + 16), (void (*)(void))outlined copy of Prio3Error) & 1;
}

uint64_t static Prio3.numOfAggregatorRange.getter()
{
  return 2;
}

uint64_t static Prio3.nonceSize.getter()
{
  return 16;
}

uint64_t static Prio3.numOfRounds.getter()
{
  return 1;
}

uint64_t Prio3.numOfAggregators.getter()
{
  return *(void *)v0;
}

uint64_t Prio3.numOfProofs.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t Prio3.flp.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 56));
}

uint64_t Prio3.randomSizeForShard.getter(uint64_t result)
{
  uint64_t v2 = *v1;
  if (__OFSUB__(*v1, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*v1 + 0x3FFFFFFFFFFFFFFFLL < 0)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v3 = result;
  uint64_t v4 = (2 * (*v1 - 1)) | 1;
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(result + 32) + 80))(*(void *)(result + 16));
  if (result <= 0) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v2;
  }
  uint64_t v6 = v4 + v5;
  if (__OFADD__(v4, v5)) {
    goto LABEL_11;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)(v3 + 40) + 8))();
  uint64_t result = v6 * v7;
  if ((unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63) {
LABEL_12:
  }
    __break(1u);
  return result;
}

uint64_t static Prio3.isRecommended(numOfProofs:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v43 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  uint64_t v41 = *(void *)(*(void *)(v43 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness, v7);
  uint64_t v40 = (char *)&v37 - v8;
  uint64_t v9 = swift_checkMetadataState();
  uint64_t v42 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9, v10);
  uint64_t v38 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11, v13);
  uint64_t v16 = (char *)&v37 - v15;
  uint64_t v18 = MEMORY[0x270FA5388](v14, v17);
  Swift::String v20 = (char *)&v37 - v19;
  MEMORY[0x270FA5388](v18, v21);
  uint64_t v23 = (char *)&v37 - v22;
  static Prio3.identifier.getter(a2, a4, (char *)&v44);
  if (v44 != 8)
  {
    static Prio3.identifier.getter(a2, a4, (char *)&v44);
    if (v44 != 9) {
      return a1 == 1;
    }
  }
  if (a1 - 256 < 0xFFFFFFFFFFFFFF01) {
    return 0;
  }
  swift_checkMetadataState();
  static FieldElement.modulus.getter();
  char v24 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v25 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if (v24)
  {
    if (v25 <= 32)
    {
      swift_getAssociatedConformanceWitness();
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      char v26 = dispatch thunk of static Comparable.> infix(_:_:)();
      uint64_t v27 = v42;
      uint64_t v28 = *(void (**)(char *, uint64_t))(v42 + 8);
      v28(v20, v9);
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v16, v23, v9);
      if (v26) {
        dispatch thunk of BinaryInteger._lowWord.getter();
      }
      v28(v16, v9);
      goto LABEL_18;
    }
  }
  else if (v25 < 33)
  {
    dispatch thunk of BinaryInteger._lowWord.getter();
    uint64_t v28 = *(void (**)(char *, uint64_t))(v42 + 8);
    goto LABEL_18;
  }
  LODWORD(v44) = -1;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  char v30 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v31 = v42;
  uint64_t v28 = *(void (**)(char *, uint64_t))(v42 + 8);
  v28(v20, v9);
  if (v30)
  {
    char v32 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v33 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v32)
    {
      if (v33 <= 64)
      {
        swift_getAssociatedConformanceWitness();
        dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        char v34 = dispatch thunk of static Comparable.> infix(_:_:)();
        v28(v20, v9);
        uint64_t v35 = v38;
        (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v38, v23, v9);
        if (v34) {
          dispatch thunk of BinaryInteger._lowWord.getter();
        }
        v28(v35, v9);
        goto LABEL_25;
      }
    }
    else if (v33 < 65)
    {
      dispatch thunk of BinaryInteger._lowWord.getter();
LABEL_25:
      v28(v23, v9);
      return a1 > 1;
    }
    uint64_t v44 = -1;
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v36 = dispatch thunk of static Comparable.< infix(_:_:)();
    v28(v20, v9);
    v28(v23, v9);
    if (v36) {
      return 1;
    }
    return a1 > 1;
  }
LABEL_18:
  v28(v23, v9);
  return 0;
}

uint64_t type metadata accessor for Prio3()
{
  return swift_getGenericMetadata();
}

uint64_t static Prio3.identifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  void (*v6)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t result;
  char v8;
  uint64_t v9;

  uint64_t v6 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 40);
  v6(&v9, a1, a2);
  if (v9 != 2) {
    return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1, a2);
  }
  type metadata accessor for XofHmacSha256Aes128(0);
  uint64_t result = swift_dynamicCastMetatype();
  if (result) {
    uint64_t v8 = 9;
  }
  else {
    uint64_t v8 = 8;
  }
  *a3 = v8;
  return result;
}

uint64_t static Prio3.version.getter()
{
  return 8;
}

uint64_t protocol witness for static VDAFProtocol.identifier.getter in conformance Prio3<A, B>@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return static Prio3.identifier.getter(*(void *)(a1 + 16), *(void *)(a1 + 32), a2);
}

uint64_t Prio3.splitSeedBytes<A>(_:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a2;
  uint64_t v8 = *(a2 - 1);
  uint64_t v9 = MEMORY[0x270FA5388](a1, a1);
  uint64_t v11 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v9, v14);
  uint64_t v75 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15, v17);
  uint64_t v19 = (char *)&v73 - v18;
  Swift::String v20 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v76 = v21;
  unint64_t v74 = v20;
  ((void (*)(char *))v20)((char *)&v73 - v18);
  uint64_t v22 = *(void (**)(char *, void *, void *))(v8 + 16);
  uint64_t v77 = v4;
  v22(v11, v4, v7);
  uint64_t v73 = a4;
  uint64_t v23 = dispatch thunk of Collection.count.getter();
  uint64_t v24 = Prio3.randomSizeForShard.getter((uint64_t)v7);
  char v26 = *(void (**)(char *, void *))(v8 + 8);
  uint64_t v25 = v8 + 8;
  v26(v11, v7);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v13 + 8);
  unint64_t v27 = v13 + 8;
  v28(v19, a3);
  if (v23 != v24)
  {
    __break(1u);
    goto LABEL_27;
  }
  v74(v75, v76, a3);
  uint64_t v80 = ArraySlice.init<A>(_:)();
  uint64_t v81 = v29;
  uint64_t v82 = v30;
  uint64_t v83 = v31;
  uint64_t v32 = v7[3];
  unint64_t v27 = v7[5];
  uint64_t v33 = (*(uint64_t (**)(uint64_t, unint64_t))(v27 + 8))(v32, v27);
  uint64_t v35 = v77;
  uint64_t v36 = *v77 - 1;
  if (__OFSUB__(*v77, 1))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v36 < 0)
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v37 = v33;
  uint64_t v78 = 0;
  uint64_t v79 = v36;
  uint64_t v38 = MEMORY[0x270FA5388](v33, v34);
  uint64_t v39 = v7[2];
  *(&v73 - 10) = v39;
  *(&v73 - 9) = v32;
  uint64_t v40 = v7[4];
  *(&v73 - 8) = a3;
  *(&v73 - 7) = v40;
  uint64_t v41 = v73;
  *(&v73 - 6) = v27;
  *(&v73 - 5) = v41;
  *(&v73 - 4) = (uint64_t)&v80;
  *(&v73 - 3) = v38;
  *(&v73 - 2) = (uint64_t)v35;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (measurementShare: Seed, proofShare: Seed, jointRandBlind: Seed?));
  unint64_t v44 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  uint64_t v76 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Prio3.splitSeedBytes<A>(_:), (uint64_t)(&v73 - 12), v42, v43, MEMORY[0x263F8E628], v44, MEMORY[0x263F8E658], v45);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v40 + 80))(v39, v40) >= 1)
  {
    uint64_t v46 = v80;
    uint64_t v47 = v81;
    uint64_t v48 = v82;
    uint64_t v49 = v83;
    uint64_t v50 = specialized Collection.prefix(_:)(v37, v80, v81, v82, v83);
    uint64_t v52 = v51;
    uint64_t v54 = v53;
    unint64_t v56 = v55;
    uint64_t v80 = specialized Collection.dropFirst(_:)(v37, v46, v47, v48, v49);
    uint64_t v81 = v57;
    uint64_t v82 = v58;
    uint64_t v83 = v59;
    if (v56)
    {
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain_n();
      swift_unknownObjectRetain();
      uint64_t v60 = swift_dynamicCastClass();
      if (!v60)
      {
        swift_unknownObjectRelease();
        uint64_t v60 = MEMORY[0x263F8EE78];
      }
      uint64_t v61 = *(void *)(v60 + 16);
      swift_release();
      if (__OFSUB__(v56 >> 1, v54))
      {
        __break(1u);
      }
      else if (v61 == (v56 >> 1) - v54)
      {
        if (!swift_dynamicCastClass()) {
          swift_unknownObjectRelease();
        }
        goto LABEL_15;
      }
      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRetain();
    }
    specialized _copyCollectionToContiguousArray<A>(_:)(v50, v52, v54, v56);
LABEL_15:
    swift_unknownObjectRelease();
  }
  uint64_t v63 = v80;
  uint64_t v62 = v81;
  uint64_t v65 = v82;
  uint64_t v64 = v83;
  a3 = specialized Collection.prefix(_:)(v37, v80, v81, v82, v83);
  uint64_t v25 = v66;
  uint64_t v7 = v67;
  unint64_t v27 = v68;
  specialized Collection.dropFirst(_:)(v37, v63, v62, v65, v64);
  if ((v27 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_18:
    specialized _copyCollectionToContiguousArray<A>(_:)(a3, v25, (uint64_t)v7, v27);
    goto LABEL_25;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  uint64_t v69 = swift_dynamicCastClass();
  if (!v69)
  {
    swift_unknownObjectRelease();
    uint64_t v69 = MEMORY[0x263F8EE78];
  }
  uint64_t v70 = *(void *)(v69 + 16);
  swift_release();
  if (__OFSUB__(v27 >> 1, v7)) {
    goto LABEL_29;
  }
  if (v70 != (v27 >> 1) - (void)v7)
  {
LABEL_30:
    swift_unknownObjectRelease();
    goto LABEL_18;
  }
  if (!swift_dynamicCastClass()) {
    swift_unknownObjectRelease();
  }
LABEL_25:
  uint64_t v71 = v76;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v71;
}

uint64_t closure #1 in Prio3.splitSeedBytes<A>(_:)@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v7 = a1[3];
  uint64_t v9 = specialized Collection.prefix(_:)(a2, *a1, v6, v8, v7);
  uint64_t v58 = v10;
  uint64_t v12 = v11;
  unint64_t v14 = v13;
  *a1 = specialized Collection.dropFirst(_:)(a2, v5, v6, v8, v7);
  a1[1] = v15;
  a1[2] = v16;
  a1[3] = v17;
  if ((v14 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_3:
    specialized _copyCollectionToContiguousArray<A>(_:)(v9, v58, v12, v14);
    goto LABEL_10;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  uint64_t v19 = swift_dynamicCastClass();
  if (!v19)
  {
    swift_unknownObjectRelease();
    uint64_t v19 = MEMORY[0x263F8EE78];
  }
  uint64_t v20 = *(void *)(v19 + 16);
  swift_release();
  if (__OFSUB__(v14 >> 1, v12))
  {
    __break(1u);
    goto LABEL_33;
  }
  if (v20 != (v14 >> 1) - v12)
  {
LABEL_33:
    swift_unknownObjectRelease();
    goto LABEL_3;
  }
  uint64_t v18 = swift_dynamicCastClass();
  if (!v18)
  {
    swift_unknownObjectRelease();
    uint64_t v18 = MEMORY[0x263F8EE78];
  }
LABEL_10:
  uint64_t v59 = v18;
  swift_unknownObjectRelease();
  uint64_t v22 = *a1;
  uint64_t v21 = a1[1];
  uint64_t v24 = a1[2];
  uint64_t v23 = a1[3];
  uint64_t v25 = specialized Collection.prefix(_:)(a2, *a1, v21, v24, v23);
  uint64_t v57 = v26;
  uint64_t v28 = v27;
  unint64_t v30 = v29;
  *a1 = specialized Collection.dropFirst(_:)(a2, v22, v21, v24, v23);
  a1[1] = v31;
  a1[2] = v32;
  a1[3] = v33;
  if ((v30 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_12:
    specialized _copyCollectionToContiguousArray<A>(_:)(v25, v57, v28, v30);
    uint64_t v35 = v34;
    goto LABEL_19;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  uint64_t v36 = swift_dynamicCastClass();
  if (!v36)
  {
    swift_unknownObjectRelease();
    uint64_t v36 = MEMORY[0x263F8EE78];
  }
  uint64_t v37 = *(void *)(v36 + 16);
  swift_release();
  if (__OFSUB__(v30 >> 1, v28))
  {
    __break(1u);
    goto LABEL_35;
  }
  if (v37 != (v30 >> 1) - v28)
  {
LABEL_35:
    swift_unknownObjectRelease();
    goto LABEL_12;
  }
  uint64_t v35 = swift_dynamicCastClass();
  if (!v35)
  {
    swift_unknownObjectRelease();
    uint64_t v35 = MEMORY[0x263F8EE78];
  }
LABEL_19:
  swift_unknownObjectRelease();
  uint64_t v38 = type metadata accessor for Prio3();
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(v38 + 32) + 80))(*(void *)(v38 + 16));
  if (result > 0)
  {
    uint64_t v62 = v35;
    uint64_t v41 = *a1;
    uint64_t v40 = a1[1];
    uint64_t v42 = a1[2];
    uint64_t v43 = a1[3];
    uint64_t v44 = specialized Collection.prefix(_:)(a2, *a1, v40, v42, v43);
    uint64_t v61 = v45;
    uint64_t v47 = v46;
    unint64_t v49 = v48;
    *a1 = specialized Collection.dropFirst(_:)(a2, v41, v40, v42, v43);
    a1[1] = v50;
    a1[2] = v51;
    a1[3] = v52;
    if (v49)
    {
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain_n();
      swift_unknownObjectRetain();
      uint64_t v55 = swift_dynamicCastClass();
      if (!v55)
      {
        swift_unknownObjectRelease();
        uint64_t v55 = MEMORY[0x263F8EE78];
      }
      uint64_t v56 = *(void *)(v55 + 16);
      swift_release();
      if (__OFSUB__(v49 >> 1, v47))
      {
        __break(1u);
      }
      else if (v56 == (v49 >> 1) - v47)
      {
        uint64_t v54 = swift_dynamicCastClass();
        if (!v54)
        {
          swift_unknownObjectRelease();
          uint64_t v54 = MEMORY[0x263F8EE78];
        }
        goto LABEL_30;
      }
      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRetain();
    }
    specialized _copyCollectionToContiguousArray<A>(_:)(v44, v61, v47, v49);
    uint64_t v54 = v53;
LABEL_30:
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v35 = v62;
    goto LABEL_31;
  }
  uint64_t v54 = 0;
LABEL_31:
  *a3 = v59;
  a3[1] = v35;
  a3[2] = v54;
  return result;
}

void *Prio3.jointRandFrom(aggregatorID:nonce:measurement:publicShare:inputShare:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v8 = *a4;
  uint64_t v9 = *(void *)(a5 + 32);
  uint64_t v10 = *(void *)(a6 + 32);
  uint64_t v11 = *(void *)(a6 + 16);
  uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 80);
  if (v28(v11, v10) <= 0)
  {
    if (!(v9 | v8)) {
      return 0;
    }
    _StringGuts.grow(_:)(103);
    v22._object = (void *)0x8000000260BFF470;
    v22._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v22);
    v23._countAndFlagsBits = 0xD000000000000065;
    v23._object = (void *)0x8000000260BFF630;
    String.append(_:)(v23);
    lazy protocol witness table accessor for type VDAFError and conformance VDAFError();
    swift_allocError();
    *(void *)uint64_t v24 = 0;
    *(void *)(v24 + 8) = 0xE000000000000000;
    goto LABEL_10;
  }
  if (v9)
  {
    if (v8)
    {
      swift_getAssociatedTypeWitness();
      swift_getWitnessTable();
      swift_getAssociatedConformanceWitness();
      uint64_t v26 = type metadata accessor for VerificationJointRandomness();
      type metadata accessor for Array();
      swift_bridgeObjectRetain();
      swift_getWitnessTable();
      uint64_t v12 = ArraySlice.init<A>(_:)();
      uint64_t v14 = v13;
      uint64_t v27 = v15;
      uint64_t v25 = v16;
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v18 = static JointRandomness.updateJointRandParts(_:commitment:blind:aggregatorID:nonce:)(v8, v12, v14, v27, v25, v9, a1, a2, v26, WitnessTable);
      swift_unknownObjectRelease();
      uint64_t v19 = v28(v11, v10);
      return VerificationJointRandomness.__allocating_init(count:numOfProofs:parts:)(v19, *(void *)(v7 + 8), v18);
    }
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type Prio3Error and conformance Prio3Error();
    swift_allocError();
    *(void *)uint64_t v24 = 0xD000000000000038;
    *(void *)(v24 + 8) = 0x8000000260BFF6E0;
LABEL_10:
    *(unsigned char *)(v24 + 16) = 1;
    return (void *)swift_willThrow();
  }
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type Prio3Error and conformance Prio3Error();
  swift_allocError();
  *(void *)uint64_t v21 = 0xD000000000000037;
  *(void *)(v21 + 8) = 0x8000000260BFF6A0;
  *(unsigned char *)(v21 + 16) = 0;
  return (void *)swift_willThrow();
}

uint64_t Prio3.inputSharesFrom(leaderMeasurementShare:leaderProofShare:leaderJointBlind:helperShares:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = a5[3];
  uint64_t v11 = a5[4];
  uint64_t v10 = a5[5];
  v20[0] = a5[2];
  v20[1] = v9;
  v20[2] = v11;
  v20[3] = v10;
  type metadata accessor for Prio3InputShare();
  uint64_t v21 = Array.init()();
  Swift::Int v12 = *v5;
  type metadata accessor for Array();
  Array.reserveCapacity(_:)(v12);
  Prio3InputShare.init(measurementShare:proofShare:jointRandBlind:)(a1, 0, a2, 0, a3, (uint64_t)v20);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Array.append(_:)();
  uint64_t v13 = *(void *)(a4 + 16);
  if (v13)
  {
    uint64_t v14 = (uint64_t *)(swift_bridgeObjectRetain() + 48);
    do
    {
      uint64_t v15 = *(v14 - 2);
      uint64_t v16 = *(v14 - 1);
      uint64_t v17 = *v14;
      v14 += 3;
      Prio3InputShare.init(measurementShare:proofShare:jointRandBlind:)(v15, 1, v16, 1, v17, (uint64_t)v20);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      Array.append(_:)();
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
  }
  return v21;
}

uint64_t closure #4 in Prio3.shard<A>(_:nonce:seedBytes:)(uint64_t result, uint64_t a2)
{
  unint64_t v2 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
    goto LABEL_8;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0xFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v4 = result;
  uint64_t result = type metadata accessor for Prio3();
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (*(void *)(a2 + 16) > v4)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)(a2 + 8 * v4 + 32);
    swift_bridgeObjectRetain();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v8 = static VDAFProtocol.measurementShareXOF(seed:aggregatorID:)(v6, v2, v5, WitnessTable);
    swift_bridgeObjectRelease();
    return v8;
  }
LABEL_11:
  __break(1u);
  return result;
}

unint64_t closure #5 in Prio3.shard<A>(_:nonce:seedBytes:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  if ((v8 & 0x8000000000000000) != 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v8 > 0xFF)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (*(void *)(a2 + 16) <= result)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v12 = *(void *)(a2 + 8 * result + 32);
  v18[0] = a4;
  v18[1] = a5;
  void v18[2] = a7;
  v18[3] = a8;
  uint64_t v13 = type metadata accessor for Prio3();
  LOBYTE(v18[0]) = 1;
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v15 = static VDAFProtocol.domainSeparationTag(usage:)((unsigned __int8 *)v18, v13, WitnessTable);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_260BF9FD0;
  unint64_t v16 = *(void *)(a3 + 8);
  if ((v16 & 0x8000000000000000) != 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v16 <= 0xFF)
  {
    *(unsigned char *)(result + 32) = v16;
    *(unsigned char *)(result + 33) = v8;
    uint64_t v17 = static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(v12, (uint64_t)v15, result, a5, a8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v17;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t protocol witness for Client.shard<A>(_:nonce:seedBytes:) in conformance Prio3<A, B>(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  return Prio3.shard<A>(_:nonce:seedBytes:)(a1, a2, a3, a4, a7, a5, a6);
}

uint64_t Prio3.verifyKeyLength.getter(uint64_t *a1)
{
  return specialized Prio3.verifyKeyLength.getter(a1[2], a1[3], a1[4], a1[5]);
}

uint64_t closure #1 in Prio3.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v18[0] = a4;
  v18[1] = a5;
  void v18[2] = a6;
  v18[3] = a7;
  uint64_t v12 = type metadata accessor for Prio3();
  LOBYTE(v18[0]) = 1;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v14 = static VDAFProtocol.domainSeparationTag(usage:)((unsigned __int8 *)v18, v12, WitnessTable);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_260BF9FD0;
  unint64_t v16 = *(void *)(a2 + 8);
  if ((v16 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v16 > 0xFF)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  *(unsigned char *)(result + 32) = v16;
  if ((a3 & 0x8000000000000000) != 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (a3 <= 0xFF)
  {
    *(unsigned char *)(result + 33) = a3;
    uint64_t v17 = static ExtendableOutputFunction.makeXOF(seed:domainSeparationTag:binder:)(a1, (uint64_t)v14, result, a5, a7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v17;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t closure #1 in Prio3.prepareMessageFrom(_:parameter:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  swift_getAssociatedTypeWitness();
  uint64_t v3 = type metadata accessor for Array();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return Array<A>.elementwiseAdd(_:)(v2, v3, AssociatedConformanceWitness);
}

uint64_t Prio3.aggregate<A>(_:parameter:)@<X0>(uint64_t a1@<X0>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v21 = a1;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v6 = a2[4];
  uint64_t v7 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness, v10);
  uint64_t v12 = (char *)&v17 - v11;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 72))(v7, v6);
  uint64_t v14 = specialized Array.init(repeating:count:)((uint64_t)v12, v13, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
  AggregateShare.init(_:)(v14, &v28);
  uint64_t v15 = a2[3];
  uint64_t v22 = v7;
  uint64_t v23 = v15;
  uint64_t v24 = v18;
  uint64_t v25 = v6;
  uint64_t v26 = a2[5];
  uint64_t v27 = v19;
  type metadata accessor for AggregateShare();
  return Sequence.reduce<A>(into:_:)();
}

uint64_t closure #1 in Prio3.aggregate<A>(_:parameter:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v2 = type metadata accessor for AggregateShare();
  return AggregateShare.accumulate(_:)((uint64_t)&v4, v2);
}

uint64_t Prio3.isValid(parameter:previousParameters:)(uint64_t a1, uint64_t a2)
{
  return specialized PINE.isValid(parameter:previousParameters:)(a1, a2);
}

uint64_t Prio3.prepareShare<A>(from:aggregatorID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char **a6@<X8>)
{
  uint64_t v23 = a6;
  uint64_t v24 = a5;
  uint64_t v22 = a1;
  uint64_t v9 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v12 + 32);
  uint64_t v14 = *(void *)(v12 + 16);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 64))(v14, v13);
  uint64_t v16 = *(void *)(v6 + 8);
  unint64_t v17 = result * v16;
  if ((unsigned __int128)(result * (__int128)v16) >> 64 == (result * v16) >> 63)
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v13 + 80))(v14, v13) < 1) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = (*(uint64_t (**)(void))(*(void *)(a3 + 40) + 8))();
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v22, a4);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    return Prio3PrepareShare.init<A>(from:parameter:)((uint64_t)v11, v17, v18, 0, AssociatedTypeWitness, a4, AssociatedConformanceWitness, v24, v23);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Prio3.outputShare<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Prio3.outputShare<A>(from:)(a1, a2, a3, a4, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))OutputShare.init<A>(from:parameter:));
}

uint64_t protocol witness for Aggregator.verifyKeyLength.getter in conformance Prio3<A, B>(uint64_t *a1)
{
  return specialized Prio3.verifyKeyLength.getter(a1[2], a1[3], a1[4], a1[5]);
}

void protocol witness for Aggregator.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:) in conformance Prio3<A, B>(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t protocol witness for Aggregator.prepareMessageFrom(_:parameter:) in conformance Prio3<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  return Prio3.prepareMessageFrom(_:parameter:)(a1, a2, a3);
}

uint64_t protocol witness for Aggregator.prepareNext(state:message:) in conformance Prio3<A, B>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Prio3.prepareNext(state:message:)(a1, a2, a3, a4);
}

uint64_t protocol witness for Aggregator.aggregate<A>(_:parameter:) in conformance Prio3<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X4>, uint64_t a5@<X8>)
{
  return Prio3.aggregate<A>(_:parameter:)(a1, a4, a2, a3, a5);
}

uint64_t protocol witness for Aggregator.isValid(parameter:previousParameters:) in conformance Prio3<A, B>(uint64_t a1, uint64_t a2)
{
  return specialized PINE.isValid(parameter:previousParameters:)(a1, a2);
}

uint64_t protocol witness for Aggregator.inputShare<A>(from:aggregatorID:) in conformance Prio3<A, B>@<X0>(uint64_t a1@<X0>, Swift::Int a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  return Prio3.inputShare<A>(from:aggregatorID:)(a1, a2, a5, a3, a4, a6);
}

uint64_t protocol witness for Aggregator.publicShare<A>(from:) in conformance Prio3<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, size_t *a3@<X2>, uint64_t a4@<X3>, size_t *a5@<X8>)
{
  return Prio3.publicShare<A>(from:)(a1, a4, a2, a3, a5);
}

uint64_t protocol witness for Aggregator.prepareState<A>(from:aggregatorID:) in conformance Prio3<A, B>@<X0>(uint64_t a1@<X0>, Swift::Int a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  return Prio3.prepareState<A>(from:aggregatorID:)(a1, a2, a5, a3, a4, a6);
}

uint64_t protocol witness for Aggregator.prepareShare<A>(from:aggregatorID:) in conformance Prio3<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char **a6@<X8>)
{
  return Prio3.prepareShare<A>(from:aggregatorID:)(a1, a2, a5, a3, a4, a6);
}

uint64_t protocol witness for Aggregator.prepareMessage<A>(from:aggregatorID:) in conformance Prio3<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  return Prio3.prepareMessage<A>(from:aggregatorID:)(a1, a2, a3);
}

uint64_t protocol witness for Aggregator.outputShare<A>(from:) in conformance Prio3<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Prio3.outputShare<A>(from:)(a1, a4, a2, a3);
}

uint64_t closure #1 in Prio3.unshard<A>(_:numOfMeasurements:parameter:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = *a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return static AggregateShare.+= infix(_:_:)(a1, &v6, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t Prio3.aggregateShare<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Prio3.outputShare<A>(from:)(a1, a2, a3, a4, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))AggregateShare.init<A>(from:parameter:));
}

uint64_t Prio3.outputShare<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v14 = a5;
  MEMORY[0x270FA5388](a1, a1);
  unint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return v14(v8, 1, AssociatedTypeWitness, a3, AssociatedConformanceWitness, a4);
}

uint64_t protocol witness for Collector.unshard<A>(_:numOfMeasurements:parameter:) in conformance Prio3<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  return Prio3.unshard<A>(_:numOfMeasurements:parameter:)(a1, a2, a5, a3, a4, a6);
}

uint64_t protocol witness for Collector.aggregateShare<A>(from:) in conformance Prio3<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Prio3.aggregateShare<A>(from:)(a1, a4, a2, a3);
}

uint64_t partial apply for closure #4 in Prio3.shard<A>(_:nonce:seedBytes:)(uint64_t a1)
{
  return closure #4 in Prio3.shard<A>(_:nonce:seedBytes:)(a1, *(void *)(v1 + 64));
}

unint64_t partial apply for closure #5 in Prio3.shard<A>(_:nonce:seedBytes:)(unint64_t a1)
{
  return closure #5 in Prio3.shard<A>(_:nonce:seedBytes:)(a1, v1[8], v1[9], v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t specialized Prio3.verifyKeyLength.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a2, a4);
}

uint64_t partial apply for closure #1 in Prio3.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:)(uint64_t a1)
{
  return closure #1 in Prio3.prepareInit(verifyKey:aggregatorID:nonce:publicShare:inputShare:parameter:)(a1, *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t partial apply for closure #1 in Prio3.prepareMessageFrom(_:parameter:)(uint64_t a1, uint64_t *a2)
{
  return closure #1 in Prio3.prepareMessageFrom(_:parameter:)(a1, a2);
}

uint64_t partial apply for closure #1 in Prio3.unshard<A>(_:numOfMeasurements:parameter:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in Prio3.unshard<A>(_:numOfMeasurements:parameter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void))closure #1 in Prio3.unshard<A>(_:numOfMeasurements:parameter:));
}

uint64_t partial apply for closure #1 in Prio3.aggregate<A>(_:parameter:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in Prio3.unshard<A>(_:numOfMeasurements:parameter:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void))closure #1 in Prio3.aggregate<A>(_:parameter:));
}

uint64_t partial apply for closure #1 in Prio3.unshard<A>(_:numOfMeasurements:parameter:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void, void, void))
{
  return a3(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6], v3[7]);
}

unint64_t instantiation function for generic protocol witness table for Prio3Error(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type Prio3Error and conformance Prio3Error();
  unint64_t result = lazy protocol witness table accessor for type Prio3Error and conformance Prio3Error();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t associated type witness table accessor for VDAFProtocol.InputShare : Equatable in Prio3<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for VDAFProtocol.InputShare : VDAFDecodable in Prio3<A, B>()
{
  return swift_getWitnessTable();
}

_UNKNOWN **associated type witness table accessor for VDAFProtocol.InputShare : VDAFEncodable in Prio3<A, B>()
{
  return &protocol witness table for Prio3InputShare<A, B>;
}

uint64_t associated type witness table accessor for VDAFProtocol.PublicShare : Equatable in Prio3<A, B>()
{
  return swift_getWitnessTable();
}

_UNKNOWN **associated type witness table accessor for VDAFProtocol.PublicShare : VDAFDecodable in Prio3<A, B>()
{
  return &protocol witness table for Prio3PublicShare<A, B>;
}

_UNKNOWN **associated type witness table accessor for VDAFProtocol.PublicShare : VDAFEncodable in Prio3<A, B>()
{
  return &protocol witness table for Prio3PublicShare<A, B>;
}

unint64_t lazy protocol witness table accessor for type Prio3PrepareMessage and conformance Prio3PrepareMessage()
{
  unint64_t result = lazy protocol witness table cache variable for type Prio3PrepareMessage and conformance Prio3PrepareMessage;
  if (!lazy protocol witness table cache variable for type Prio3PrepareMessage and conformance Prio3PrepareMessage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prio3PrepareMessage and conformance Prio3PrepareMessage);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for Aggregator.PrepareMessage : VDAFDecodable in Prio3<A, B>()
{
  return &protocol witness table for Prio3PrepareMessage;
}

_UNKNOWN **associated type witness table accessor for Aggregator.PrepareMessage : VDAFEncodable in Prio3<A, B>()
{
  return &protocol witness table for Prio3PrepareMessage;
}

uint64_t associated type witness table accessor for Aggregator.PrepareShare : Equatable in Prio3<A, B>()
{
  return swift_getWitnessTable();
}

_UNKNOWN **associated type witness table accessor for Aggregator.PrepareShare : VDAFDecodable in Prio3<A, B>()
{
  return &protocol witness table for Prio3PrepareShare<A>;
}

_UNKNOWN **associated type witness table accessor for Aggregator.PrepareShare : VDAFEncodable in Prio3<A, B>()
{
  return &protocol witness table for Prio3PrepareShare<A>;
}

uint64_t associated type witness table accessor for Aggregator.PrepareState : Equatable in Prio3<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Aggregator.PrepareState : VDAFDecodable in Prio3<A, B>()
{
  return swift_getWitnessTable();
}

_UNKNOWN **associated type witness table accessor for Aggregator.PrepareState : VDAFEncodable in Prio3<A, B>()
{
  return &protocol witness table for Prio3PrepareState<A, B>;
}

uint64_t instantiation function for generic protocol witness table for Prio3<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t outlined copy of Prio3Error(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for Prio3Error(uint64_t a1)
{
  return outlined consume of Prio3Error(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t outlined consume of Prio3Error(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for Prio3Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of Prio3Error(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for Prio3Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of Prio3Error(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of Prio3Error(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for Prio3Error(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of Prio3Error(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Prio3Error(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Prio3Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Prio3Error()
{
  return &type metadata for Prio3Error;
}

uint64_t type metadata completion function for Prio3()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Prio3(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 16) & (unint64_t)~v5) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) > 0x18)
  {
    uint64_t v8 = *a2;
    *unsigned int v3 = *a2;
    unsigned int v3 = (uint64_t *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v9 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v10 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v9 = *v10;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)v9 + v5 + 8) & ~v5, ((unint64_t)v10 + v5 + 8) & ~v5);
  }
  return v3;
}

void *initializeWithCopy for Prio3(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 16))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

void *assignWithCopy for Prio3(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

void *initializeWithTake for Prio3(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

void *assignWithTake for Prio3(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for Prio3(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8)
      }
                                                                      + v6
                                                                      + 8) & ~v6);
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void storeEnumTagSinglePayload for Prio3(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8 + 16) & ~v8) + *(void *)(v6 + 64);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v9] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v14;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x260BF0D74);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v17 = (((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v8 + 8) & ~v8;
        uint64_t v18 = *(void (**)(unint64_t))(v6 + 56);
        v18(v17);
      }
      return;
  }
}

uint64_t partial apply for closure #1 in Prio3.splitSeedBytes<A>(_:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in Prio3.splitSeedBytes<A>(_:)(*(void **)(v1 + 64), *(void *)(v1 + 72), a1);
}

uint64_t PINEPublicShare.init<A>(from:parameter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = a1;
  uint64_t v12 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1, a2);
  int v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v17)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *uint64_t v35 = 0;
    v35[1] = 0;
    goto LABEL_9;
  }
  uint64_t v46 = v6;
  uint64_t v47 = v13;
  unint64_t v48 = v14;
  uint64_t v18 = *(uint64_t **)(*(void *)(v13 + 8) + 8);
  uint64_t v59 = v11;
  unint64_t v49 = v18;
  uint64_t v50 = v12;
  uint64_t v19 = dispatch thunk of Collection.count.getter();
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(a6 + 8);
  uint64_t result = v20(a4, a6);
  if (result + 0x4000000000000000 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v22 = 2 * result * a2;
    if ((unsigned __int128)(2 * result * (__int128)a2) >> 64 == v22 >> 63)
    {
      if (v19 == v22)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v16, v59, a5);
        uint64_t result = ArraySlice.init<A>(_:)();
        uint64_t v55 = result;
        unint64_t v56 = v23;
        uint64_t v57 = v24;
        uint64_t v58 = v25;
        if ((a2 & 0x8000000000000000) == 0)
        {
          unint64_t v49 = &v45;
          uint64_t v53 = 0;
          uint64_t v54 = a2;
          MEMORY[0x270FA5388](result, v23);
          *(&v45 - 6) = a4;
          *(&v45 - 5) = a5;
          uint64_t v26 = v47;
          *(&v45 - 4) = a6;
          *(&v45 - 3) = v26;
          *(&v45 - 2) = (uint64_t)&v55;
          uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
          unint64_t v28 = lazy protocol witness table accessor for type Int and conformance Int();
          uint64_t v51 = MEMORY[0x263F8D708];
          unint64_t v52 = v28;
          uint64_t WitnessTable = swift_getWitnessTable();
          uint64_t v46 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in PINEPublicShare.init<A>(from:parameter:), (uint64_t)(&v45 - 8), v27, (uint64_t)&type metadata for Seed, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v30);
          uint64_t v53 = 0;
          uint64_t v54 = a2;
          MEMORY[0x270FA5388](v46, v31);
          *(&v45 - 6) = a4;
          *(&v45 - 5) = a5;
          *(&v45 - 4) = a6;
          *(&v45 - 3) = v26;
          *(&v45 - 2) = (uint64_t)&v55;
          uint64_t v33 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in PINEPublicShare.init<A>(from:parameter:), (uint64_t)(&v45 - 8), v27, (uint64_t)&type metadata for Seed, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v32);
          (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v59, a5);
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v34 = v48;
          *unint64_t v48 = v46;
          v34[1] = v33;
          return result;
        }
        goto LABEL_12;
      }
      uint64_t v55 = 0;
      unint64_t v56 = 0xE000000000000000;
      _StringGuts.grow(_:)(33);
      type metadata accessor for PINEPublicShare();
      v36._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v36);
      swift_bridgeObjectRelease();
      v37._countAndFlagsBits = 0x6572697571657220;
      v37._object = (void *)0xEF202A2032203A64;
      String.append(_:)(v37);
      uint64_t v53 = v20(a4, a6);
      v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      v39._countAndFlagsBits = 2107936;
      v39._object = (void *)0xE300000000000000;
      String.append(_:)(v39);
      uint64_t v53 = a2;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v40._countAndFlagsBits = 0x203A746F67202CLL;
      v40._object = (void *)0xE700000000000000;
      String.append(_:)(v40);
      uint64_t v11 = v59;
      uint64_t v53 = dispatch thunk of Collection.count.getter();
      v41._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v41);
      swift_bridgeObjectRelease();
      uint64_t v42 = v55;
      unint64_t v43 = v56;
      lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
      swift_allocError();
      uint64_t *v44 = v42;
      v44[1] = v43;
      uint64_t v12 = v50;
LABEL_9:
      swift_willThrow();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, a5);
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for PINEPublicShare()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t PINEPublicShare.init(wraparoundJointRandParts:verificationJointRandParts:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t PINEPublicShare.wraparoundJointRandParts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PINEPublicShare.verificationJointRandParts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t static PINEPublicShare.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0) {
    return 0;
  }

  return specialized static Array<A>.== infix(_:_:)(v2, v3);
}

uint64_t partial apply for closure #1 in PINEPublicShare.init<A>(from:parameter:)@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for closure #1 in PINEPublicShare.init<A>(from:parameter:)(a1);
}

{
  uint64_t v1;

  return closure #1 in PINEPublicShare.init<A>(from:parameter:)(*(void **)(v1 + 48), *(void *)(v1 + 16), *(void *)(v1 + 32), a1);
}

uint64_t closure #1 in PINEPublicShare.init<A>(from:parameter:)@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v9 = a1[3];
  uint64_t v10 = specialized Collection.prefix(_:)(v5, *a1, v6, v8, v9);
  uint64_t v24 = v11;
  uint64_t v13 = v12;
  unint64_t v15 = v14;
  *a1 = specialized Collection.dropFirst(_:)(v5, v7, v6, v8, v9);
  a1[1] = v16;
  a1[2] = v17;
  a1[3] = v18;
  if ((v15 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_3:
    specialized _copyCollectionToContiguousArray<A>(_:)(v10, v24, v13, v15);
    uint64_t v20 = v19;
    goto LABEL_10;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  uint64_t v21 = swift_dynamicCastClass();
  if (!v21)
  {
    swift_unknownObjectRelease();
    uint64_t v21 = MEMORY[0x263F8EE78];
  }
  uint64_t v22 = *(void *)(v21 + 16);
  swift_release();
  if (__OFSUB__(v15 >> 1, v13))
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v22 != (v15 >> 1) - v13)
  {
LABEL_12:
    swift_unknownObjectRelease();
    goto LABEL_3;
  }
  uint64_t v20 = swift_dynamicCastClass();
  if (!v20)
  {
    swift_unknownObjectRelease();
    uint64_t v20 = MEMORY[0x263F8EE78];
  }
LABEL_10:
  uint64_t result = swift_unknownObjectRelease();
  *a4 = v20;
  return result;
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance PINEPublicShare<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return PINEPublicShare.init<A>(from:parameter:)(a1, *(void *)a2, *(unsigned __int8 *)(a2 + 8), *(void *)(a5 + 16), a3, *(void *)(a5 + 24));
}

void PINEPublicShare.encodedLength.getter()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  int64_t v3 = *(void *)(*v0 + 16);
  uint64_t v4 = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v24 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v5 = 0;
    uint64_t v4 = v24;
    unint64_t v6 = *(void *)(v24 + 16);
    do
    {
      uint64_t v7 = *(void *)(*(void *)(v2 + 8 * v5 + 32) + 16);
      unint64_t v8 = *(void *)(v24 + 24);
      if (v6 >= v8 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v6 + 1, 1);
      }
      ++v5;
      *(void *)(v24 + 16) = v6 + 1;
      *(void *)(v24 + 8 * v6++ + 32) = v7;
    }
    while (v3 != v5);
    swift_bridgeObjectRelease();
  }
  uint64_t v9 = *(void *)(v4 + 16);
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = (uint64_t *)(v4 + 32);
    while (1)
    {
      uint64_t v12 = *v11++;
      BOOL v13 = __OFADD__(v10, v12);
      v10 += v12;
      if (v13) {
        break;
      }
      if (!--v9) {
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v10 = 0;
LABEL_13:
  swift_bridgeObjectRelease();
  int64_t v14 = *(void *)(v1 + 16);
  uint64_t v15 = MEMORY[0x263F8EE78];
  if (v14)
  {
    uint64_t v25 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
    uint64_t v16 = 0;
    uint64_t v15 = v25;
    unint64_t v17 = *(void *)(v25 + 16);
    do
    {
      uint64_t v18 = *(void *)(*(void *)(v1 + 8 * v16 + 32) + 16);
      unint64_t v19 = *(void *)(v25 + 24);
      if (v17 >= v19 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v17 + 1, 1);
      }
      ++v16;
      *(void *)(v25 + 16) = v17 + 1;
      *(void *)(v25 + 8 * v17++ + 32) = v18;
    }
    while (v14 != v16);
    swift_bridgeObjectRelease();
  }
  uint64_t v20 = *(void *)(v15 + 16);
  if (v20)
  {
    uint64_t v21 = 0;
    uint64_t v22 = (uint64_t *)(v15 + 32);
    while (1)
    {
      uint64_t v23 = *v22++;
      BOOL v13 = __OFADD__(v21, v23);
      v21 += v23;
      if (v13) {
        break;
      }
      if (!--v20) {
        goto LABEL_25;
      }
    }
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    return;
  }
  uint64_t v21 = 0;
LABEL_25:
  swift_bridgeObjectRelease();
  if (__OFADD__(v10, v21)) {
    goto LABEL_29;
  }
}

uint64_t PINEPublicShare.encode<A>(into:)()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = *(void *)(*v0 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
    do
    {
      ++v3;
      swift_bridgeObjectRetain();
      Seed.encode<A>(into:)();
      swift_bridgeObjectRelease();
    }
    while (v2 != v3);
    uint64_t result = swift_bridgeObjectRelease();
  }
  uint64_t v5 = *(void *)(v1 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = 0;
    do
    {
      ++v6;
      swift_bridgeObjectRetain();
      Seed.encode<A>(into:)();
      swift_bridgeObjectRelease();
    }
    while (v5 != v6);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance PINEPublicShare<A>()
{
  return PINEPublicShare.encode<A>(into:)();
}

uint64_t Prio3PrepareShare.init(verifierShare:jointRandPart:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t Prio3PrepareShare.init<A>(from:parameter:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char **a9@<X8>)
{
  uint64_t v95 = a8;
  uint64_t v96 = a3;
  uint64_t v88 = a9;
  uint64_t v92 = *(void *)(a7 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v17 = MEMORY[0x270FA5388](v15 - 8, v16);
  unint64_t v19 = (char *)&v79 - v18;
  uint64_t v20 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v17, v21);
  uint64_t v23 = (char *)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *uint64_t v53 = 0;
    v53[1] = 0;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(a1, a6);
  }
  uint64_t v94 = v20;
  uint64_t v97 = a1;
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t))(a7 + 64);
  uint64_t v86 = a5;
  uint64_t v87 = a7;
  uint64_t v25 = v24(a5, a7);
  unint64_t v26 = v25 * a2;
  if ((unsigned __int128)(v25 * (__int128)(uint64_t)a2) >> 64 != (uint64_t)(v25 * a2) >> 63)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v89 = a6;
  uint64_t v27 = dispatch thunk of Collection.count.getter();
  uint64_t v28 = v26 + v96;
  if (__OFADD__(v26, v96))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v27 != v28)
  {
    uint64_t v98 = 0;
    unint64_t v99 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    type metadata accessor for Prio3PrepareShare();
    uint64_t v54 = _typeName(_:qualified:)();
    unint64_t v56 = v55;
    swift_bridgeObjectRelease();
    uint64_t v98 = v54;
    unint64_t v99 = v56;
    v57._countAndFlagsBits = 0x6572697571657220;
    v57._object = (void *)0xEB00000000203A64;
    String.append(_:)(v57);
    uint64_t v102 = v28;
    v58._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v58);
    swift_bridgeObjectRelease();
    v59._countAndFlagsBits = 0x203A746F67202CLL;
    v59._object = (void *)0xE700000000000000;
    String.append(_:)(v59);
    uint64_t v60 = v97;
    uint64_t v61 = v89;
    uint64_t v102 = dispatch thunk of Collection.count.getter();
    v62._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v62);
    swift_bridgeObjectRelease();
    uint64_t v63 = v98;
    unint64_t v64 = v99;
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *uint64_t v65 = v63;
    v65[1] = v64;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v94 + 8))(v60, v61);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v94 + 16))(v23, v97, v89);
  uint64_t v29 = ArraySlice.init<A>(_:)();
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v95 = specialized Collection.prefix(_:)(v26, v29, v30, v32, v34);
  uint64_t v84 = v37;
  unint64_t v85 = v36;
  uint64_t v83 = v38;
  uint64_t v39 = specialized Collection.dropFirst(_:)(v26, v29, v31, v33, v35);
  uint64_t v81 = v41;
  uint64_t v82 = v40;
  uint64_t v80 = v42;
  uint64_t v98 = v95;
  unint64_t v99 = v85;
  uint64_t v100 = v84;
  uint64_t v101 = v83;
  unint64_t v43 = v24;
  uint64_t v44 = TupleTypeMetadata3;
  uint64_t v45 = *(int *)(TupleTypeMetadata3 + 48);
  uint64_t v46 = *(int *)(TupleTypeMetadata3 + 64);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v19, 1, 1);
  *(void *)&v19[v45] = a2;
  swift_unknownObjectRetain();
  uint64_t v47 = v86;
  *(void *)&v19[v46] = v43(v86, v87);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v19, 0, 1, v44);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<UInt8>);
  unint64_t v49 = lazy protocol witness table accessor for type ArraySlice<UInt8> and conformance ArraySlice<A>();
  uint64_t v50 = v93;
  uint64_t v51 = Array<A>.init<A>(from:parameter:)((uint64_t)&v98, (uint64_t)v19, v47, v48, v92, v49);
  if (v50)
  {
    (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v97, v89);
    return swift_unknownObjectRelease();
  }
  uint64_t v23 = (char *)v51;
  uint64_t v66 = v80;
  uint64_t v68 = v81;
  uint64_t v67 = v82;
  uint64_t v69 = v96;
  if (v96 >= 1)
  {
    unint64_t v19 = (char *)specialized Collection.prefix(_:)(v96, v39, v82, v81, v80);
    uint64_t v93 = v70;
    uint64_t v95 = v71;
    a2 = v72;
    specialized Collection.dropFirst(_:)(v69, v39, v67, v68, v66);
    uint64_t v73 = v94;
    if ((a2 & 1) == 0)
    {
      swift_unknownObjectRetain();
LABEL_12:
      specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v19, v93, v95, a2);
      uint64_t v75 = v74;
LABEL_20:
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v97, v89);
      uint64_t result = swift_unknownObjectRelease();
      goto LABEL_21;
    }
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    swift_unknownObjectRetain();
    uint64_t v76 = swift_dynamicCastClass();
    if (!v76)
    {
      swift_unknownObjectRelease();
      uint64_t v76 = MEMORY[0x263F8EE78];
    }
    uint64_t v77 = *(void *)(v76 + 16);
    swift_release();
    if (!__OFSUB__(a2 >> 1, v95))
    {
      if (v77 == (a2 >> 1) - v95)
      {
        uint64_t v75 = swift_dynamicCastClass();
        uint64_t v73 = v94;
        if (!v75)
        {
          swift_unknownObjectRelease();
          uint64_t v75 = MEMORY[0x263F8EE78];
        }
        goto LABEL_20;
      }
      goto LABEL_26;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    swift_unknownObjectRelease();
    uint64_t v73 = v94;
    goto LABEL_12;
  }
  (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v97, v89);
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v75 = 0;
LABEL_21:
  uint64_t v78 = v88;
  *uint64_t v88 = v23;
  v78[1] = (char *)v75;
  return result;
}

uint64_t type metadata accessor for Prio3PrepareShare()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Prio3PrepareShare.verifierShare.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Prio3PrepareShare.jointRandPart.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t static Prio3PrepareShare.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (static Array<A>.== infix(_:_:)())
  {
    if (v2)
    {
      if (v3 && specialized static Array<A>.== infix(_:_:)(v2, v3)) {
        return 1;
      }
    }
    else if (!v3)
    {
      return 1;
    }
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Prio3PrepareShare<A>(uint64_t a1, uint64_t a2)
{
  return static Prio3PrepareShare.== infix(_:_:)(a1, a2);
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance Prio3PrepareShare<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char **a6@<X8>)
{
  return Prio3PrepareShare.init<A>(from:parameter:)(a1, *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16), *(void *)(a5 + 16), a3, *(void *)(a5 + 24), a4, a6);
}

uint64_t Prio3PrepareShare.encodedLength.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = Collection<>.encodedLength.getter(v4, WitnessTable, *(void *)(*(void *)(a1 + 24) + 40));
  if (v3)
  {
    uint64_t v7 = *(void *)(v3 + 16);
    BOOL v8 = __OFADD__(result, v7);
    result += v7;
    if (v8) {
      __break(1u);
    }
  }
  return result;
}

uint64_t Prio3PrepareShare.encode<A>(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(v4 + 8);
  uint64_t v10 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = Collection<>.encode<A>(into:)(a1, v10, a3, WitnessTable, a4, *(void *)(*(void *)(a2 + 24) + 40));
  if (v9) {
    return Seed.encode<A>(into:)();
  }
  return result;
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance Prio3PrepareShare<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Prio3PrepareShare.encode<A>(into:)(a1, a4, a2, a3);
}

void *assignWithCopy for Prio3PrepareShare(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void static CountType.identifier.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t CountType.encodedMeasurementLength.getter()
{
  return *(void *)v0;
}

uint64_t CountType.outputLength.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t CountType.jointRandLength.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t CountType.gadgetParameters.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CountType.gadget.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t CountType.encode(measurement:)(char *a1, uint64_t a2)
{
  return specialized CountType.encode(measurement:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t CountType.decode(data:numOfMeasurements:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  v14[1] = a3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = MEMORY[0x270FA5388](AssociatedTypeWitness, v7);
  uint64_t v9 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v8, v10);
  uint64_t v12 = (char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x2612241C0](a1, v5);
  if (result == 1)
  {
    Array.subscript.getter();
    FieldElement.integerValue.getter(v5, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v5);
    swift_getAssociatedConformanceWitness();
    return dispatch thunk of BinaryInteger.init<A>(_:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t CountType.truncate(measurement:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = specialized CountType.truncate(measurement:)(a1, a2);
  if (!v2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t CountType.evaluateGadget<A>(_:at:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return MultiplicationGadget.evaluate<A>(at:)(*(void *)(a1 + 16), a2, *(void *)(a1 + 24), a3);
}

uint64_t CountType.evaluateGadget(_:at:)@<X0>(uint64_t a1@<X2>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  type metadata accessor for Polynomial();
  type metadata accessor for Array();
  swift_getWitnessTable();
  return MultiplicationGadget.evaluate<A>(at:)(v3, v4, a2);
}

uint64_t CountType.evaluate(measurement:jointRand:numOfShares:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v60 = a2;
  uint64_t v58 = a4;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v61 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](a1, v7);
  uint64_t v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v8, v11);
  int64_t v14 = (char *)&v53 - v13;
  uint64_t v16 = MEMORY[0x270FA5388](v12, v15);
  uint64_t v18 = (char *)&v53 - v17;
  uint64_t v62 = v19;
  uint64_t v20 = MEMORY[0x2612241C0](v16);
  uint64_t v21 = *v4;
  if (v20 != *v4)
  {
    uint64_t v43 = v20;
    *(void *)&long long v65 = 0;
    *((void *)&v65 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    *(void *)&long long v65 = 0xD00000000000001BLL;
    *((void *)&v65 + 1) = 0x8000000260BFEB20;
    uint64_t v67 = v43;
    v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._countAndFlagsBits = 540877088;
    v45._object = (void *)0xE400000000000000;
    String.append(_:)(v45);
    uint64_t v67 = v21;
    v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
LABEL_7:
    long long v51 = v65;
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(_OWORD *)uint64_t v52 = v51;
    *(unsigned char *)(v52 + 16) = 2;
    return swift_willThrow();
  }
  uint64_t v22 = (uint64_t)v4;
  uint64_t v54 = v10;
  unint64_t v55 = v14;
  uint64_t v56 = a1;
  Swift::String v57 = v18;
  uint64_t v23 = *(void *)(a3 + 24);
  uint64_t v24 = type metadata accessor for GadgetEvaluation();
  uint64_t v25 = MEMORY[0x2612241C0](v60, v24);
  uint64_t v26 = *(void *)(v22 + 24);
  if (v25 != *(void *)(v26 + 16))
  {
    uint64_t v47 = v25;
    *(void *)&long long v65 = 0;
    *((void *)&v65 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    *(void *)&long long v65 = 0x2064696C61766E49;
    *((void *)&v65 + 1) = 0xEF203A746E756F63;
    uint64_t v67 = v47;
    v48._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    v49._countAndFlagsBits = 540877088;
    v49._object = (void *)0xE400000000000000;
    String.append(_:)(v49);
    outlined retain of CountType<A>(v22);
    v50._countAndFlagsBits = MEMORY[0x261224130](v26, &type metadata for GadgetParameters);
    String.append(_:)(v50);
    swift_bridgeObjectRelease();
    outlined release of CountType<A>(v22);
    goto LABEL_7;
  }
  long long v65 = *(_OWORD *)(v22 + 32);
  uint64_t v66 = *(void *)(v22 + 48);
  getContiguousArrayStorageType<A>(for:)(v62, v62);
  swift_allocObject();
  uint64_t v27 = static Array._adoptStorage(_:count:)();
  Array.subscript.getter();
  Array.subscript.getter();
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v53 = v27;
  uint64_t v67 = v27;
  Array.subscript.getter();
  unint64_t v28 = v64;
  unint64_t v63 = v64;
  uint64_t v29 = v23;
  uint64_t v30 = type metadata accessor for MultiplicationGadget();
  uint64_t v31 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v33 = swift_getWitnessTable();
  uint64_t v34 = (uint64_t)v57;
  uint64_t v35 = v59;
  Gadget.evaluate<A>(at:for:)((uint64_t)&v67, &v63, v30, v31, WitnessTable, v33, (uint64_t)v57);
  outlined consume of GadgetEvaluation<Field32>(v28);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v35)
  {
    uint64_t v37 = v34;
    uint64_t v38 = v55;
    uint64_t v39 = v62;
    Array.subscript.getter();
    uint64_t v40 = v61;
    uint64_t v41 = (uint64_t)v54;
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v54, v37, v39);
    FieldElement.init(other:)(v41, v39, v29);
    dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
    uint64_t v42 = *(void (**)(char *, uint64_t))(v40 + 8);
    v42(v38, v39);
    return ((uint64_t (*)(uint64_t, uint64_t))v42)(v37, v39);
  }
  return result;
}

int64x2_t CountType.init()@<Q0>(int64x2_t *a1@<X8>)
{
  uint64_t v2 = MultiplicationGadget.init(numOfCalls:)();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GadgetParameters>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_260BF9FF0;
  uint64_t v8 = type metadata accessor for MultiplicationGadget();
  uint64_t WitnessTable = swift_getWitnessTable();
  Gadget.parameters.getter(v8, WitnessTable, (uint64_t *)(v7 + 32));
  int64x2_t result = vdupq_n_s64(1uLL);
  *a1 = result;
  a1[1].i64[0] = 0;
  a1[1].i64[1] = v7;
  a1[2].i64[0] = v2;
  a1[2].i64[1] = v4;
  a1[3].i64[0] = v6;
  return result;
}

uint64_t protocol witness for FullyLinearProof.jointRandLength.getter in conformance CountType<A>()
{
  return *(void *)(v0 + 16);
}

uint64_t protocol witness for FullyLinearProof.gadgetParameters.getter in conformance CountType<A>()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for FullyLinearProof.encode(measurement:) in conformance CountType<A>(char *a1, uint64_t a2)
{
  return specialized CountType.encode(measurement:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t protocol witness for FullyLinearProof.decode(data:numOfMeasurements:) in conformance CountType<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return CountType.decode(data:numOfMeasurements:)(a1, a2, a3);
}

uint64_t protocol witness for FullyLinearProof.truncate(measurement:) in conformance CountType<A>(uint64_t a1, uint64_t a2)
{
  uint64_t result = specialized CountType.truncate(measurement:)(a1, a2);
  if (!v2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t protocol witness for FullyLinearProof.evaluate(measurement:jointRand:numOfShares:for:) in conformance CountType<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  return CountType.evaluate(measurement:jointRand:numOfShares:for:)(a1, a2, a3, a4);
}

uint64_t protocol witness for FullyLinearProof.evaluateGadget<A>(_:at:) in conformance CountType<A>@<X0>(uint64_t a1@<X2>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  return CountType.evaluateGadget<A>(_:at:)(a2, a1, a3);
}

uint64_t specialized CountType.encode(measurement:)(char *a1, uint64_t a2, uint64_t a3)
{
  swift_getAssociatedTypeWitness();
  uint64_t v36 = a3;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = MEMORY[0x270FA5388](AssociatedTypeWitness, v8);
  uint64_t v37 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v9, v11);
  int64_t v14 = (char *)&v35 - v13;
  MEMORY[0x270FA5388](v12, v15);
  uint64_t v17 = (char *)&v35 - v16;
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  uint64_t v35 = a1;
  uint64_t v38 = v18;
  uint64_t v39 = v7 + 16;
  v18((char *)&v35 - v16, a1, AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  char v19 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v20 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if (v19)
  {
    if (v20 > 64) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v25 = dispatch thunk of BinaryInteger._lowWord.getter();
    uint64_t v26 = v37;
    v38(v37, v17, AssociatedTypeWitness);
    uint64_t v21 = (uint64_t)v14;
    uint64_t v23 = v26;
    if (!v25) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  if (v20 <= 63) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v40 = 0;
  lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v21 = (uint64_t)v14;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v14, AssociatedTypeWitness);
  uint64_t v23 = v37;
  v38(v37, v17, AssociatedTypeWitness);
  if (v22)
  {
LABEL_4:
    uint64_t v24 = *(void (**)(char *, uint64_t))(v7 + 8);
    v24(v23, AssociatedTypeWitness);
    v24(v17, AssociatedTypeWitness);
    goto LABEL_13;
  }
LABEL_7:
  char v27 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v28 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v27 & 1) == 0) {
    goto LABEL_11;
  }
  if (v28 <= 64) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v40 = 1;
    lazy protocol witness table accessor for type Int and conformance Int();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v7 += 8;
    v30(v21, AssociatedTypeWitness);
    v30((uint64_t)v23, AssociatedTypeWitness);
    uint64_t v28 = ((uint64_t (*)(char *, uint64_t))v30)(v17, AssociatedTypeWitness);
    if (v29) {
      break;
    }
    while (1)
    {
      __break(1u);
LABEL_11:
      if (v28 > 63) {
        break;
      }
LABEL_12:
      uint64_t v31 = dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t v32 = *(void (**)(char *, uint64_t))(v7 + 8);
      v7 += 8;
      v32(v23, AssociatedTypeWitness);
      uint64_t v28 = ((uint64_t (*)(char *, uint64_t))v32)(v17, AssociatedTypeWitness);
      if (v31 == 1) {
        goto LABEL_13;
      }
    }
  }
LABEL_13:
  getContiguousArrayStorageType<A>(for:)(a2, a2);
  swift_allocObject();
  uint64_t v33 = static Array._adoptStorage(_:count:)();
  v38((char *)v21, v35, AssociatedTypeWitness);
  FieldElement.init(_:)(v21, a2, v36);
  uint64_t result = v33;
  _finalizeUninitializedArray<A>(_:)();
  return result;
}

uint64_t specialized CountType.truncate(measurement:)(uint64_t a1, uint64_t a2)
{
  if (MEMORY[0x2612241C0](a1, *(void *)(a2 + 16)) != *v2)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v5._countAndFlagsBits = 540877088;
    v5._object = (void *)0xE400000000000000;
    String.append(_:)(v5);
    v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type FLPTypeError and conformance FLPTypeError();
    swift_allocError();
    *(void *)uint64_t v7 = 0xD00000000000001BLL;
    *(void *)(v7 + 8) = 0x8000000260BFEB20;
    *(unsigned char *)(v7 + 16) = 2;
    swift_willThrow();
  }
  return a1;
}

uint64_t outlined retain of CountType<A>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of CountType<A>(uint64_t a1)
{
  return a1;
}

uint64_t associated type witness table accessor for FullyLinearProof.F : FieldElement in CountType<A>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

uint64_t destroy for CountType()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CountType(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CountType(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CountType(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for CountType(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CountType(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for CountType()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t MultiplicationGadget.init(numOfCalls:)()
{
  return 2;
}

uint64_t MultiplicationGadget.evaluate<A>(at:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  uint64_t v67 = a3;
  uint64_t v69 = a4;
  uint64_t v72 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v70 = *(void *)(v6 - 8);
  uint64_t v71 = v6;
  uint64_t v8 = MEMORY[0x270FA5388](v6, v7);
  long long v65 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8, v10);
  unint64_t v63 = (char *)&v58 - v12;
  uint64_t v14 = MEMORY[0x270FA5388](v11, v13);
  unint64_t v64 = (char *)&v58 - v15;
  uint64_t v61 = *(void *)(a1 - 8);
  uint64_t v16 = v61;
  uint64_t v18 = MEMORY[0x270FA5388](v14, v17);
  uint64_t v62 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v18, v20);
  uint64_t v74 = (char *)&v58 - v22;
  MEMORY[0x270FA5388](v21, v23);
  uint64_t v73 = (char *)&v58 - v24;
  uint64_t v58 = a2;
  uint64_t v60 = swift_getAssociatedTypeWitness();
  uint64_t v25 = *(void *)(v60 - 8);
  uint64_t v27 = MEMORY[0x270FA5388](v60, v26);
  char v29 = (char *)&v58 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = MEMORY[0x270FA5388](v27, v30);
  uint64_t v33 = (char *)&v58 - v32;
  MEMORY[0x270FA5388](v31, v34);
  uint64_t v36 = (char *)&v58 - v35;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v37 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
  uint64_t v59 = *(void (**)(char *))(v16 + 16);
  uint64_t v38 = v73;
  v59(v73);
  v37(v75, 0);
  uint64_t v39 = *(void (**)(char *, uint64_t))(v25 + 8);
  uint64_t v40 = v60;
  v39(v36, v60);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.index(after:)();
  v39(v29, v40);
  uint64_t v41 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
  uint64_t v42 = v72;
  uint64_t v43 = (void (*)(char *, char *, uint64_t))v59;
  v59(v74);
  v41(v75, 0);
  v39(v33, v40);
  uint64_t v44 = (uint64_t)v62;
  v43(v62, v38, v42);
  uint64_t v45 = v67;
  uint64_t v46 = v42;
  FieldElement.init(other:)(v44, v42, v67);
  uint64_t v47 = swift_checkMetadataState();
  Swift::String v48 = *(void (**)(uint64_t))(v45 + 88);
  Swift::String v49 = v63;
  uint64_t v50 = v45;
  v48(v46);
  long long v51 = v65;
  uint64_t v52 = v74;
  ((void (*)(uint64_t, uint64_t))v48)(v46, v45);
  uint64_t v53 = v64;
  (*(void (**)(char *, char *, uint64_t))(AssociatedConformanceWitness + 56))(v49, v51, v47);
  uint64_t v54 = v71;
  unint64_t v55 = *(void (**)(char *, uint64_t))(v70 + 8);
  v55(v51, v71);
  v55(v49, v54);
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 96))(v53, v46, v50);
  uint64_t v56 = *(void (**)(char *, uint64_t))(v61 + 8);
  v56(v52, v46);
  return ((uint64_t (*)(char *, uint64_t))v56)(v73, v46);
}

uint64_t MultiplicationGadget.evaluate<A>(at:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X6>, void *a3@<X8>)
{
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  uint64_t v27 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = MEMORY[0x270FA5388](AssociatedTypeWitness, v4);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v5, v8);
  uint64_t v11 = (char *)&v25 - v10;
  MEMORY[0x270FA5388](v9, v12);
  uint64_t v14 = (char *)&v25 - v13;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v15 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
  uint64_t v17 = *v16;
  swift_bridgeObjectRetain();
  v15(v31, 0);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v19 = AssociatedTypeWitness;
  v18(v14, AssociatedTypeWitness);
  uint64_t v30 = v17;
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.index(after:)();
  uint64_t v20 = v19;
  v18(v7, v19);
  uint64_t v21 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
  uint64_t v23 = *v22;
  swift_bridgeObjectRetain();
  v21(v31, 0);
  v18(v11, v20);
  v31[0] = v23;
  static Polynomial.* infix(_:_:)((uint64_t)&v30, (uint64_t)v31, v28, v29, v27);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t MultiplicationGadget.degree.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t MultiplicationGadget.numOfCalls.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t protocol witness for Gadget.evaluate<A>(at:) in conformance MultiplicationGadget<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return MultiplicationGadget.evaluate<A>(at:)(*(void *)(a2 + 16), a1, *(void *)(a2 + 24), a3);
}

uint64_t protocol witness for Gadget.evaluate<A>(at:) in conformance MultiplicationGadget<A>@<X0>(uint64_t a1@<X3>, void *a2@<X8>)
{
  return MultiplicationGadget.evaluate<A>(at:)(*(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t type metadata accessor for MultiplicationGadget()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static FiniteFieldProtocol.addMod(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v50 = a5;
  uint64_t v51 = a1;
  swift_getAssociatedTypeWitness();
  uint64_t v54 = a4;
  uint64_t v8 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  uint64_t v47 = *(void *)(v8 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness, v10);
  uint64_t v11 = swift_checkMetadataState();
  uint64_t v52 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11, v12);
  uint64_t v46 = &v44[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = MEMORY[0x270FA5388](v13, v15);
  Swift::String v48 = &v44[-v17];
  uint64_t v19 = MEMORY[0x270FA5388](v16, v18);
  uint64_t v21 = &v44[-v20];
  MEMORY[0x270FA5388](v19, v22);
  uint64_t v24 = &v44[-v23];
  char v25 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v49 = a3;
  uint64_t v53 = (void (*)(unsigned char *, uint64_t))v8;
  if ((v25 & 1) == 0)
  {
    char v31 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v32 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v31 & 1) == 0)
    {
      uint64_t v30 = v54;
      if (v32 < 64)
      {
        uint64_t v26 = v52;
        uint64_t v27 = v24;
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v52 + 16))(v24, a2, v11);
        uint64_t v34 = dispatch thunk of BinaryInteger._lowWord.getter();
        uint64_t v29 = *(void (**)(unsigned char *, uint64_t))(v26 + 8);
        v29(v27, v11);
        if (!v34) {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v50, v51, v11);
        }
      }
      else
      {
        uint64_t v55 = 0;
        lazy protocol witness table accessor for type Int and conformance Int();
        uint64_t v27 = v24;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v26 = v52;
        uint64_t v29 = *(void (**)(unsigned char *, uint64_t))(v52 + 8);
        v29(v27, v11);
        if (v38) {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v50, v51, v11);
        }
      }
      goto LABEL_18;
    }
    if (v32 <= 64)
    {
      swift_getAssociatedConformanceWitness();
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      int v45 = dispatch thunk of static Comparable.>= infix(_:_:)();
      uint64_t v35 = v52;
      uint64_t v36 = *(void (**)(unsigned char *, uint64_t))(v52 + 8);
      v36(v24, v11);
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v35 + 16))(v21, a2, v11);
      if (v45)
      {
        uint64_t v37 = dispatch thunk of BinaryInteger._lowWord.getter();
        v36(v21, v11);
        uint64_t v30 = v54;
        uint64_t v27 = v24;
        uint64_t v26 = v52;
        uint64_t v29 = v36;
        if (!v37) {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v50, v51, v11);
        }
      }
      else
      {
        v36(v21, v11);
        uint64_t v30 = v54;
        uint64_t v27 = v24;
        uint64_t v29 = v36;
      }
      goto LABEL_18;
    }
    goto LABEL_7;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64)
  {
LABEL_7:
    uint64_t v55 = 0;
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v27 = v24;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v26 = v52;
    uint64_t v29 = *(void (**)(unsigned char *, uint64_t))(v52 + 8);
    v29(v27, v11);
    uint64_t v30 = v54;
    if (v33) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v50, v51, v11);
    }
    goto LABEL_18;
  }
  uint64_t v26 = v52;
  uint64_t v27 = v24;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v52 + 16))(v24, a2, v11);
  uint64_t v28 = dispatch thunk of BinaryInteger._lowWord.getter();
  uint64_t v29 = *(void (**)(unsigned char *, uint64_t))(v26 + 8);
  v29(v27, v11);
  uint64_t v30 = v54;
  if (!v28) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v50, v51, v11);
  }
LABEL_18:
  uint64_t v40 = v49;
  uint64_t v52 = *(void *)(v30 + 24);
  ((void (*)(uint64_t, uint64_t))v52)(v49, v30);
  uint64_t v41 = v48;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  v29(v27, v11);
  if (dispatch thunk of static Comparable.< infix(_:_:)())
  {
    uint64_t v53 = v29;
    uint64_t v42 = v46;
    ((void (*)(uint64_t, uint64_t))v52)(v40, v54);
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    uint64_t v43 = v42;
    uint64_t v29 = v53;
    v53(v43, v11);
    dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
    v29(v27, v11);
  }
  else
  {
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  }
  return ((uint64_t (*)(unsigned char *, uint64_t))v29)(v41, v11);
}

uint64_t static FiniteFieldProtocol.subMod(_:_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  v16[1] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = MEMORY[0x270FA5388](AssociatedTypeWitness, v7);
  uint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8, v11);
  uint64_t v13 = (char *)v16 - v12;
  swift_getAssociatedConformanceWitness();
  if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) == 0) {
    return dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  }
  (*(void (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v10, AssociatedTypeWitness);
  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
  return ((uint64_t (*)(char *, uint64_t))v14)(v13, AssociatedTypeWitness);
}

uint64_t static FiniteFieldProtocol.inv(_:)@<X0>(void (*a1)(uint64_t, char *, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v112 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v113 = a3;
  uint64_t v7 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  unint64_t v8 = *(void *)(v7 + 24);
  uint64_t v119 = *(void *)(v8 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness, v9);
  uint64_t v117 = (char *)&v101 - v10;
  uint64_t v11 = swift_checkMetadataState();
  uint64_t v120 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11, v12);
  uint64_t v103 = (char *)&v101 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v13, v15);
  uint64_t v110 = (char *)&v101 - v17;
  uint64_t v19 = MEMORY[0x270FA5388](v16, v18);
  uint64_t v104 = (char *)&v101 - v20;
  uint64_t v22 = MEMORY[0x270FA5388](v19, v21);
  uint64_t v121 = (uint64_t)&v101 - v23;
  uint64_t v25 = MEMORY[0x270FA5388](v22, v24);
  uint64_t v105 = (char *)&v101 - v26;
  uint64_t v28 = MEMORY[0x270FA5388](v25, v27);
  uint64_t v30 = (char *)&v101 - v29;
  uint64_t v32 = MEMORY[0x270FA5388](v28, v31);
  uint64_t v34 = (char *)&v101 - v33;
  uint64_t v36 = MEMORY[0x270FA5388](v32, v35);
  char v38 = (char *)&v101 - v37;
  uint64_t v40 = MEMORY[0x270FA5388](v36, v39);
  uint64_t v102 = (char *)&v101 - v41;
  uint64_t v43 = MEMORY[0x270FA5388](v40, v42);
  uint64_t AssociatedConformanceWitness = (char *)&v101 - v44;
  MEMORY[0x270FA5388](v43, v45);
  uint64_t v47 = (char *)&v101 - v46;
  char v48 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v101 = a4;
  uint64_t v111 = v34;
  uint64_t v116 = a1;
  uint64_t v108 = v38;
  unint64_t v109 = v8;
  if (v48)
  {
    uint64_t v49 = dispatch thunk of BinaryInteger.bitWidth.getter();
  }
  else
  {
    LODWORD(v107) = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v49 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v107)
    {
      if (v49 > 64) {
        goto LABEL_11;
      }
      swift_getAssociatedConformanceWitness();
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      char v50 = dispatch thunk of static Comparable.>= infix(_:_:)();
      uint64_t v51 = v120;
      uint64_t v52 = *(void (**)(char *, uint64_t))(v120 + 8);
      v52(v47, v11);
      uint64_t v53 = *(void (**)(char *, void, uint64_t))(v51 + 16);
      uint64_t v54 = AssociatedConformanceWitness;
      v53(AssociatedConformanceWitness, a1, v11);
      if (v50)
      {
        uint64_t v55 = dispatch thunk of BinaryInteger._lowWord.getter();
        v52(v54, v11);
        if (!v55) {
          goto LABEL_10;
        }
      }
      else
      {
        v52(v54, v11);
      }
      goto LABEL_12;
    }
  }
  if (v49 >= 64) {
    goto LABEL_11;
  }
  uint64_t v56 = v120;
  (*(void (**)(char *, void, uint64_t))(v120 + 16))(v47, a1, v11);
  uint64_t v57 = dispatch thunk of BinaryInteger._lowWord.getter();
  uint64_t v52 = *(void (**)(char *, uint64_t))(v56 + 8);
  v52(v47, v11);
  if (!v57)
  {
    do
    {
LABEL_10:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_11:
      uint64_t v122 = 0;
      lazy protocol witness table accessor for type Int and conformance Int();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v58 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v52 = *(void (**)(char *, uint64_t))(v120 + 8);
      v52(v47, v11);
    }
    while ((v58 & 1) != 0);
  }
LABEL_12:
  (*(void (**)(void))(v113 + 24))();
  uint64_t AssociatedConformanceWitness = (char *)swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  uint64_t v59 = v108;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  uint64_t v60 = v102;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  v52(v59, v11);
  v52(v47, v11);
  uint64_t v62 = v120 + 16;
  uint64_t v61 = *(void (**)(uint64_t, char *, uint64_t))(v120 + 16);
  v61((uint64_t)v111, (char *)v116, v11);
  uint64_t v116 = v61;
  v61((uint64_t)v30, v60, v11);
  uint64_t v122 = 1;
  unint64_t v109 = lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of BinaryInteger.init<A>(_:)();
  uint64_t v63 = v113;
  (*(void (**)(char *))(v113 + 64))(v47);
  v52(v47, v11);
  uint64_t v64 = v63 + 56;
  uint64_t v120 = v62;
  long long v65 = (void (**)(char *, char *, uint64_t))(v62 + 16);
  uint64_t v115 = v30;
  uint64_t v107 = v64;
  uint64_t v108 = (char *)(v62 + 16);
  uint64_t v106 = v7;
  while (1)
  {
    uint64_t v71 = v121;
    v116(v121, v30, v11);
    char v72 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v73 = (uint64_t)v110;
    if ((v72 & 1) == 0)
    {
      if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 128)
      {
        lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
        uint64_t v122 = 0;
        uint64_t v123 = 0;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        goto LABEL_30;
      }
      unint64_t v82 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
      static FixedWidthInteger._truncatingInit<A>(_:)(v71, (uint64_t)&type metadata for _UInt128, v11, v82, v7, (uint64_t)&v122);
      uint64_t v83 = v71;
      uint64_t v84 = v122;
      uint64_t v85 = v123;
      goto LABEL_26;
    }
    char v74 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v75 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v74 & 1) == 0) {
      break;
    }
    if (v75 > 128) {
      goto LABEL_29;
    }
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    uint64_t v76 = v121;
    char v77 = dispatch thunk of static Comparable.>= infix(_:_:)();
    v52(v47, v11);
    uint64_t v78 = (uint64_t)v104;
    v116((uint64_t)v104, (char *)v76, v11);
    if (v77)
    {
      unint64_t v79 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
      static FixedWidthInteger._truncatingInit<A>(_:)(v78, (uint64_t)&type metadata for _UInt128, v11, v79, v7, (uint64_t)&v122);
      v52((char *)v78, v11);
      uint64_t v80 = v122;
      uint64_t v81 = v123;
      v52((char *)v76, v11);
      uint64_t v30 = v115;
      if (!(v81 | v80)) {
        goto LABEL_44;
      }
    }
    else
    {
      v52((char *)v78, v11);
      v52((char *)v76, v11);
    }
LABEL_31:
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    dispatch thunk of static BinaryInteger.& infix(_:_:)();
    v52(v47, v11);
    if (dispatch thunk of static BinaryInteger.isSigned.getter())
    {
      char v89 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v90 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if (v89)
      {
        if (v90 <= 128)
        {
          dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
          dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
          char v91 = dispatch thunk of static Comparable.>= infix(_:_:)();
          v52(v47, v11);
          uint64_t v92 = (uint64_t)v103;
          v116((uint64_t)v103, (char *)v73, v11);
          if ((v91 & 1) == 0)
          {
            v52((char *)v92, v11);
            v52((char *)v73, v11);
            uint64_t v66 = v112;
            uint64_t v67 = v113;
            uint64_t v68 = v111;
            long long v65 = (void (**)(char *, char *, uint64_t))v108;
LABEL_14:
            uint64_t v69 = v105;
            (*(void (**)(char *, char *, uint64_t, uint64_t))(v67 + 56))(v105, v68, v66, v67);
            v52(v69, v11);
            (*v65)(v69, v47, v11);
            goto LABEL_15;
          }
          unint64_t v93 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
          static FixedWidthInteger._truncatingInit<A>(_:)(v92, (uint64_t)&type metadata for _UInt128, v11, v93, v7, (uint64_t)&v122);
          v52((char *)v92, v11);
          goto LABEL_38;
        }
      }
      else if (v90 < 128)
      {
LABEL_37:
        unint64_t v94 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
        static FixedWidthInteger._truncatingInit<A>(_:)(v73, (uint64_t)&type metadata for _UInt128, v11, v94, v7, (uint64_t)&v122);
LABEL_38:
        uint64_t v95 = v122;
        uint64_t v96 = v123;
        v52((char *)v73, v11);
        uint64_t v97 = v96 | v95;
        uint64_t v66 = v112;
        uint64_t v67 = v113;
        uint64_t v68 = v111;
        long long v65 = (void (**)(char *, char *, uint64_t))v108;
        if (v97) {
          goto LABEL_14;
        }
        goto LABEL_15;
      }
    }
    else if (dispatch thunk of BinaryInteger.bitWidth.getter() < 128)
    {
      goto LABEL_37;
    }
    lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
    uint64_t v122 = 0;
    uint64_t v123 = 0;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    uint64_t v98 = v73;
    char v99 = dispatch thunk of static Equatable.== infix(_:_:)();
    v52(v47, v11);
    v52((char *)v98, v11);
    uint64_t v66 = v112;
    uint64_t v67 = v113;
    uint64_t v68 = v111;
    long long v65 = (void (**)(char *, char *, uint64_t))v108;
    if ((v99 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_15:
    (*(void (**)(char *, char *, uint64_t, uint64_t))(v67 + 56))(v68, v68, v66, v67);
    v52(v68, v11);
    uint64_t v70 = *v65;
    (*v65)(v68, v47, v11);
    uint64_t v122 = 1;
    uint64_t v30 = v115;
    uint64_t v7 = v106;
    dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)();
    v52(v30, v11);
    v70(v30, v47, v11);
  }
  if (v75 < 128)
  {
    unint64_t v86 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
    uint64_t v87 = v121;
    static FixedWidthInteger._truncatingInit<A>(_:)(v121, (uint64_t)&type metadata for _UInt128, v11, v86, v7, (uint64_t)&v122);
    uint64_t v84 = v122;
    uint64_t v85 = v123;
    uint64_t v83 = v87;
    uint64_t v30 = v115;
LABEL_26:
    v52((char *)v83, v11);
    if (!(v85 | v84)) {
      goto LABEL_44;
    }
    goto LABEL_31;
  }
LABEL_29:
  lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
  uint64_t v122 = 0;
  uint64_t v123 = 0;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  uint64_t v71 = v121;
LABEL_30:
  char v88 = dispatch thunk of static Equatable.== infix(_:_:)();
  v52(v47, v11);
  v52((char *)v71, v11);
  if ((v88 & 1) == 0) {
    goto LABEL_31;
  }
LABEL_44:
  v52(v30, v11);
  v52(v111, v11);
  (*v65)(v101, v105, v11);
  return ((uint64_t (*)(char *, uint64_t))v52)(v102, v11);
}

uint64_t static FiniteFieldProtocol.pow(of:raiseTo:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v81 = a3;
  uint64_t v82 = a4;
  uint64_t v96 = a1;
  swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  uint64_t v91 = *(void *)(*(void *)(v5 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness, v6);
  char v89 = (char *)&v78 - v7;
  uint64_t v8 = swift_checkMetadataState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v8, v10);
  unint64_t v79 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11, v13);
  char v88 = (char *)&v78 - v15;
  uint64_t v17 = MEMORY[0x270FA5388](v14, v16);
  uint64_t v80 = (char *)&v78 - v18;
  uint64_t v20 = MEMORY[0x270FA5388](v17, v19);
  uint64_t v22 = (char *)&v78 - v21;
  uint64_t v24 = MEMORY[0x270FA5388](v20, v23);
  uint64_t v26 = (char *)&v78 - v25;
  uint64_t v28 = MEMORY[0x270FA5388](v24, v27);
  uint64_t v30 = (char *)&v78 - v29;
  MEMORY[0x270FA5388](v28, v31);
  uint64_t v87 = (char *)&v78 - v32;
  uint64_t v33 = *(void (**)(void))(v9 + 16);
  v33();
  uint64_t v92 = v33;
  uint64_t v93 = v9 + 16;
  ((void (*)(char *, uint64_t, uint64_t))v33)(v30, v96, v8);
  uint64_t v34 = v30;
  uint64_t v97 = 1;
  unint64_t v85 = lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of BinaryInteger.init<A>(_:)();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v81 + 64);
  uint64_t v96 = a2;
  uint64_t v36 = v81;
  v35(v26, a2);
  uint64_t v39 = *(void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v38 = v9 + 8;
  uint64_t v37 = v39;
  v39(v26, v8);
  uint64_t v40 = v36;
  uint64_t v94 = v36 + 56;
  uint64_t v95 = v34;
  uint64_t v83 = (void (**)(uint64_t, char *, uint64_t))(v38 + 24);
  uint64_t v84 = v5;
  for (uint64_t i = v22; ; v22 = i)
  {
    ((void (*)(char *, char *, uint64_t))v92)(v22, v34, v8);
    if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
    {
      if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 128) {
        goto LABEL_15;
      }
      goto LABEL_11;
    }
    char v49 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v50 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v49 & 1) == 0) {
      break;
    }
    if (v50 > 128) {
      goto LABEL_15;
    }
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    char v51 = dispatch thunk of static Comparable.>= infix(_:_:)();
    v37(v26, v8);
    uint64_t v52 = (uint64_t)v80;
    ((void (*)(char *, char *, uint64_t))v92)(v80, v22, v8);
    if ((v51 & 1) == 0)
    {
      v37((char *)v52, v8);
      v37(v22, v8);
      goto LABEL_16;
    }
    unint64_t v53 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
    static FixedWidthInteger._truncatingInit<A>(_:)(v52, (uint64_t)&type metadata for _UInt128, v8, v53, v5, (uint64_t)&v97);
    v37((char *)v52, v8);
LABEL_12:
    uint64_t v55 = v97;
    uint64_t v56 = v98;
    v37(v22, v8);
    if (!(v56 | v55)) {
      goto LABEL_32;
    }
LABEL_16:
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    uint64_t v58 = (uint64_t)v88;
    dispatch thunk of static BinaryInteger.& infix(_:_:)();
    v37(v26, v8);
    if (dispatch thunk of static BinaryInteger.isSigned.getter())
    {
      char v59 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v60 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if (v59)
      {
        if (v60 <= 128)
        {
          dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
          uint64_t v61 = v88;
          dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
          char v62 = dispatch thunk of static Comparable.>= infix(_:_:)();
          v37(v26, v8);
          uint64_t v63 = (uint64_t)v79;
          ((void (*)(char *, char *, uint64_t))v92)(v79, v61, v8);
          uint64_t v64 = v81;
          long long v65 = v87;
          if ((v62 & 1) == 0)
          {
            v37((char *)v63, v8);
            v37(v61, v8);
            uint64_t v41 = v64;
            uint64_t v42 = (void (*)(uint64_t, uint64_t))v37;
            uint64_t v43 = v38;
            uint64_t v44 = v83;
LABEL_3:
            uint64_t v45 = v82;
            uint64_t v46 = v41;
            (*(void (**)(uint64_t, char *, uint64_t))(v41 + 56))(v82, v65, v96);
            v42(v45, v8);
            (*v44)(v45, v26, v8);
            uint64_t v41 = v46;
            uint64_t v47 = v96;
            goto LABEL_4;
          }
          unint64_t v66 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
          static FixedWidthInteger._truncatingInit<A>(_:)(v63, (uint64_t)&type metadata for _UInt128, v8, v66, v5, (uint64_t)&v97);
          v37((char *)v63, v8);
          uint64_t v67 = v97;
          uint64_t v68 = v98;
          v37(v61, v8);
          uint64_t v41 = v64;
          uint64_t v69 = v68 | v67;
          uint64_t v47 = v96;
          goto LABEL_25;
        }
      }
      else if (v60 < 128)
      {
        unint64_t v73 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
        static FixedWidthInteger._truncatingInit<A>(_:)(v58, (uint64_t)&type metadata for _UInt128, v8, v73, v5, (uint64_t)&v97);
        uint64_t v74 = v97;
        uint64_t v75 = v98;
        v37((char *)v58, v8);
        uint64_t v69 = v75 | v74;
        uint64_t v41 = v81;
        uint64_t v47 = v96;
        long long v65 = v87;
LABEL_25:
        uint64_t v42 = (void (*)(uint64_t, uint64_t))v37;
        uint64_t v43 = v38;
        uint64_t v44 = v83;
        if (v69) {
          goto LABEL_3;
        }
        goto LABEL_4;
      }
      lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
      uint64_t v97 = 0;
      uint64_t v98 = 0;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v76 = dispatch thunk of static Equatable.== infix(_:_:)();
      v37(v26, v8);
      v37((char *)v58, v8);
      uint64_t v41 = v81;
      uint64_t v47 = v96;
      long long v65 = v87;
    }
    else
    {
      if (dispatch thunk of BinaryInteger.bitWidth.getter() < 128)
      {
        unint64_t v70 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
        static FixedWidthInteger._truncatingInit<A>(_:)(v58, (uint64_t)&type metadata for _UInt128, v8, v70, v5, (uint64_t)&v97);
        uint64_t v71 = v97;
        uint64_t v72 = v98;
        v37((char *)v58, v8);
        uint64_t v69 = v72 | v71;
        uint64_t v47 = v96;
        long long v65 = v87;
        uint64_t v41 = v40;
        goto LABEL_25;
      }
      lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
      uint64_t v97 = 0;
      uint64_t v98 = 0;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v76 = dispatch thunk of static Equatable.== infix(_:_:)();
      v37(v26, v8);
      v37((char *)v58, v8);
      uint64_t v47 = v96;
      long long v65 = v87;
      uint64_t v41 = v40;
    }
    uint64_t v42 = (void (*)(uint64_t, uint64_t))v37;
    uint64_t v43 = v38;
    uint64_t v44 = v83;
    if ((v76 & 1) == 0) {
      goto LABEL_3;
    }
LABEL_4:
    uint64_t v40 = v41;
    (*(void (**)(char *, char *, uint64_t))(v41 + 56))(v65, v65, v47);
    v42((uint64_t)v65, v8);
    char v48 = *v44;
    (*v44)((uint64_t)v65, v26, v8);
    uint64_t v97 = 1;
    uint64_t v34 = v95;
    uint64_t v5 = v84;
    dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)();
    v42((uint64_t)v34, v8);
    v48((uint64_t)v34, v26, v8);
    uint64_t v38 = v43;
    uint64_t v37 = (void (*)(char *, uint64_t))v42;
  }
  if (v50 < 128)
  {
LABEL_11:
    unint64_t v54 = lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
    static FixedWidthInteger._truncatingInit<A>(_:)((uint64_t)v22, (uint64_t)&type metadata for _UInt128, v8, v54, v5, (uint64_t)&v97);
    goto LABEL_12;
  }
LABEL_15:
  lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  char v57 = dispatch thunk of static Equatable.== infix(_:_:)();
  v37(v26, v8);
  v37(v22, v8);
  if ((v57 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_32:
  v37(v95, v8);
  return ((uint64_t (*)(char *, uint64_t))v37)(v87, v8);
}

uint64_t static FiniteFieldProtocol.bitmask.getter()
{
  return dispatch thunk of static FixedWidthInteger.max.getter();
}

unint64_t static FiniteField64.p.getter()
{
  return 0xFFFFFFFF00000001;
}

uint64_t static FiniteField64.g.getter()
{
  return 0x185629DCDA58878CLL;
}

uint64_t static FiniteField64.logOfOrder.getter()
{
  return 32;
}

void one-time initialization function for roots()
{
  static FiniteField64.roots = (uint64_t)&outlined read-only object #0 of one-time initialization function for roots;
}

{
  static MontgomeryFiniteField32.roots = &outlined read-only object #0 of one-time initialization function for roots;
}

{
  static MontgomeryFiniteField40.roots = &outlined read-only object #0 of one-time initialization function for roots;
}

{
  static MontgomeryFiniteField64.roots = &outlined read-only object #0 of one-time initialization function for roots;
}

{
  static MontgomeryFiniteField128.roots = (uint64_t)&outlined read-only object #0 of one-time initialization function for roots;
}

uint64_t static FiniteField64.roots.getter()
{
  return static FiniteField64.roots.getter(&one-time initialization token for roots);
}

unint64_t static FiniteField64.mul(_:_:)(unint64_t a1, unint64_t a2)
{
  specialized _wideDivide22<A>(_:by:)(&v5, &v4, &v3, (a2 * (unsigned __int128)a1) >> 64, a2 * a1, 0, 0xFFFFFFFF00000001);
  return v3;
}

unint64_t static FiniteField64.intToInternalValue(_:)(unint64_t result)
{
  if (result >= 0xFFFFFFFF00000001) {
    result += 0xFFFFFFFFLL;
  }
  return result;
}

void protocol witness for static FiniteFieldProtocol.p.getter in conformance FiniteField64(void *a1@<X8>)
{
  *a1 = 0xFFFFFFFF00000001;
}

void protocol witness for static FiniteFieldProtocol.g.getter in conformance FiniteField64(void *a1@<X8>)
{
  *a1 = 0x185629DCDA58878CLL;
}

uint64_t protocol witness for static FiniteFieldProtocol.roots.getter in conformance FiniteField64(uint64_t a1, uint64_t a2)
{
  return protocol witness for static FiniteFieldProtocol.roots.getter in conformance FiniteField64(a1, a2, &one-time initialization token for roots);
}

uint64_t protocol witness for static FiniteFieldProtocol.mul(_:_:) in conformance FiniteField64@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = specialized _wideDivide22<A>(_:by:)(&v7, &v6, &v5, ((unint64_t)*a2 * (unsigned __int128)(unint64_t)*a1) >> 64, *a2 * *a1, 0, 0xFFFFFFFF00000001);
  *a3 = v5;
  return result;
}

uint64_t *protocol witness for static FiniteFieldProtocol.intToInternalValue(_:) in conformance FiniteField64@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = *result;
  if ((unint64_t)*result >= 0xFFFFFFFF00000001) {
    uint64_t v2 = *result + 0xFFFFFFFFLL;
  }
  *a2 = v2;
  return result;
}

void *protocol witness for static FiniteFieldProtocol.internalValueToInt(_:) in conformance FiniteField64@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t static MontgomeryFiniteField.intToInternalValue(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v30 = a4;
  uint64_t v28 = a3;
  uint64_t v7 = *(void *)(a3 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x270FA5388](AssociatedTypeWitness, v10);
  uint64_t v26 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11, v13);
  uint64_t v15 = (char *)&v24 - v14;
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v7 + 24);
  uint64_t v31 = v4;
  uint64_t v29 = v16;
  v16(a2, v7);
  uint64_t v27 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 8);
  char v17 = dispatch thunk of static Comparable.<= infix(_:_:)();
  uint64_t v25 = v9;
  uint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v15, AssociatedTypeWitness);
  if (v17)
  {
    v29(a2, v7);
    char v19 = dispatch thunk of static Comparable.< infix(_:_:)();
    v18(v15, AssociatedTypeWitness);
    if (v19)
    {
      (*(void (**)(uint64_t))(v28 + 16))(a2);
      (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v7 + 56))(a1, v15, a2, v7);
      return ((uint64_t (*)(char *, uint64_t))v18)(v15, AssociatedTypeWitness);
    }
    else
    {
      return dispatch thunk of static AdditiveArithmetic.zero.getter();
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v26, a1, AssociatedTypeWitness);
    uint64_t v32 = 0;
    unint64_t v33 = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    v21._countAndFlagsBits = 0x2872656765746E49;
    v21._object = (void *)0xE800000000000000;
    String.append(_:)(v21);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v22._object = (void *)0x8000000260BFEA10;
    v22._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v22);
    v29(a2, v7);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v18(v15, AssociatedTypeWitness);
    v23._countAndFlagsBits = 41;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t static MontgomeryFiniteField.internalValueToInt(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v4 = *(void *)(a3 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness, v7);
  uint64_t v9 = (char *)&v13 - v8;
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](v10, v11);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v4 + 56))(v13, v9, a2, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, AssociatedTypeWitness);
}

uint64_t static MontgomeryFiniteField32.p.getter()
{
  return 4293918721;
}

uint64_t static MontgomeryFiniteField32.g.getter()
{
  return 3903828692;
}

uint64_t static MontgomeryFiniteField32.logOfOrder.getter()
{
  return 20;
}

uint64_t static MontgomeryFiniteField32.roots.getter()
{
  return static FiniteField64.roots.getter(&one-time initialization token for roots);
}

void *MontgomeryFiniteField32.mu.unsafeMutableAddressor()
{
  return &static MontgomeryFiniteField32.mu;
}

uint64_t static MontgomeryFiniteField32.mu.getter()
{
  return 4293918719;
}

void *MontgomeryFiniteField32.r2.unsafeMutableAddressor()
{
  return &static MontgomeryFiniteField32.r2;
}

uint64_t static MontgomeryFiniteField32.r2.getter()
{
  return 266338049;
}

uint64_t static MontgomeryFiniteField32.mul(_:_:)(unsigned int a1, unsigned int a2)
{
  unint64_t v2 = a2 * (unint64_t)a1;
  uint64_t v3 = 4293918721 * (-1048577 * v2);
  BOOL v4 = __CFADD__(v3, v2);
  unint64_t v5 = (v3 + v2) >> 32;
  if (v4)
  {
    uint64_t result = (v5 + 0xFFFFF);
    if (v5 >= 0xFFF00001) {
      __break(1u);
    }
  }
  else if (v5 >= 0xFFF00001)
  {
    return (v5 + 0xFFFFF);
  }
  else
  {
    return v5;
  }
  return result;
}

void protocol witness for static MontgomeryFiniteField.r2.getter in conformance MontgomeryFiniteField32(_DWORD *a1@<X8>)
{
  *a1 = 266338049;
}

void protocol witness for static FiniteFieldProtocol.p.getter in conformance MontgomeryFiniteField32(_DWORD *a1@<X8>)
{
  *a1 = -1048575;
}

void protocol witness for static FiniteFieldProtocol.g.getter in conformance MontgomeryFiniteField32(_DWORD *a1@<X8>)
{
  *a1 = -391138604;
}

uint64_t protocol witness for static FiniteFieldProtocol.logOfOrder.getter in conformance MontgomeryFiniteField32()
{
  return 20;
}

uint64_t protocol witness for static FiniteFieldProtocol.roots.getter in conformance MontgomeryFiniteField32(uint64_t a1, uint64_t a2)
{
  return protocol witness for static FiniteFieldProtocol.roots.getter in conformance FiniteField64(a1, a2, &one-time initialization token for roots);
}

unsigned int *protocol witness for static FiniteFieldProtocol.mul(_:_:) in conformance MontgomeryFiniteField32@<X0>(unsigned int *result@<X0>, unsigned int *a2@<X1>, _DWORD *a3@<X8>)
{
  unint64_t v3 = *a2 * (unint64_t)*result;
  uint64_t v4 = 4293918721 * (-1048577 * v3);
  BOOL v5 = __CFADD__(v4, v3);
  unint64_t v6 = (v4 + v3) >> 32;
  if (v5)
  {
    BOOL v5 = __CFADD__(v6, 0xFFFFF);
    int v7 = v6 + 0xFFFFF;
    if (v5) {
      __break(1u);
    }
    else {
      *a3 = v7;
    }
  }
  else
  {
    if (v6 >= 0xFFF00001) {
      LODWORD(v6) = v6 + 0xFFFFF;
    }
    *a3 = v6;
  }
  return result;
}

unsigned int *protocol witness for static FiniteFieldProtocol.intToInternalValue(_:) in conformance MontgomeryFiniteField32@<X0>(unsigned int *result@<X0>, _DWORD *a2@<X8>)
{
  unsigned int v2 = *result;
  if (*result <= 0xFFF00001)
  {
    if (v2 == -1048575)
    {
      LODWORD(v3) = 0;
LABEL_11:
      *a2 = v3;
      return result;
    }
    uint64_t v4 = 266338049 * v2;
    unsigned int v5 = -1048575;
    uint64_t v6 = 4503595066065151 * v2;
    BOOL v7 = __CFADD__(v6, v4);
    unint64_t v3 = (unint64_t)(v6 + v4) >> 32;
    if (v7)
    {
      unsigned int v5 = 0xFFFFF;
      BOOL v7 = __CFADD__(v3, 0xFFFFF);
      LODWORD(v3) = v3 + 0xFFFFF;
      if (!v7) {
        goto LABEL_11;
      }
      __break(1u);
    }
    if (v3 >= v5) {
      LODWORD(v3) = v3 + 0xFFFFF;
    }
    goto LABEL_11;
  }
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._object = (void *)0x8000000260BFEA10;
  v9._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v9);
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 41;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  uint64_t result = (unsigned int *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_DWORD *protocol witness for static FiniteFieldProtocol.internalValueToInt(_:) in conformance MontgomeryFiniteField32@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  unint64_t v2 = (*result + 4293918721u * (unint64_t)(-1048577 * *result)) >> 32;
  if (v2 >= 0xFFF00001) {
    LODWORD(v2) = 0;
  }
  *a2 = v2;
  return result;
}

uint64_t static MontgomeryFiniteField40.p.getter()
{
  return 0xFFFEB00001;
}

uint64_t static MontgomeryFiniteField40.g.getter()
{
  return 0xDCC7D1AD66;
}

uint64_t static MontgomeryFiniteField40.logOfOrder.getter()
{
  return 20;
}

uint64_t static MontgomeryFiniteField40.roots.getter()
{
  return static FiniteField64.roots.getter(&one-time initialization token for roots);
}

void *MontgomeryFiniteField40.mu.unsafeMutableAddressor()
{
  return &static MontgomeryFiniteField40.mu;
}

unint64_t static MontgomeryFiniteField40.mu.getter()
{
  return 0xCFFE47FFFEAFFFFFLL;
}

void *MontgomeryFiniteField40.r2.unsafeMutableAddressor()
{
  return &static MontgomeryFiniteField40.r2;
}

uint64_t static MontgomeryFiniteField40.r2.getter()
{
  return 0x160DCD7524;
}

unint64_t static MontgomeryFiniteField40.mul(_:_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v2 = (a2 * (unsigned __int128)a1) >> 64;
  uint64_t v3 = (0xCFFE47FFFEAFFFFFLL * a2 * a1 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
  BOOL v4 = __CFADD__(-(uint64_t)(a2 * a1), a2 * a1);
  BOOL v5 = __CFADD__(v3, v2);
  uint64_t v6 = v3 + v2;
  if (v5)
  {
    unint64_t v7 = v6 + v4;
    unint64_t result = v7 - 0xFFFEB00001;
    if (v7 < 0xFFFEB00001) {
      return result;
    }
    __break(1u);
    return 0xFFFFFF00014FFFFELL;
  }
  if (v6 == -1)
  {
    if (v4) {
      return 0xFFFFFF00014FFFFFLL;
    }
    return 0xFFFFFF00014FFFFELL;
  }
  unint64_t v9 = v6 + v4;
  if (v9 >= 0xFFFEB00001) {
    return v9 - 0xFFFEB00001;
  }
  else {
    return v9;
  }
}

void protocol witness for static MontgomeryFiniteField.r2.getter in conformance MontgomeryFiniteField40(void *a1@<X8>)
{
  *a1 = 0x160DCD7524;
}

void protocol witness for static FiniteFieldProtocol.p.getter in conformance MontgomeryFiniteField40(void *a1@<X8>)
{
  *a1 = 0xFFFEB00001;
}

void protocol witness for static FiniteFieldProtocol.g.getter in conformance MontgomeryFiniteField40(void *a1@<X8>)
{
  *a1 = 0xDCC7D1AD66;
}

uint64_t protocol witness for static FiniteFieldProtocol.roots.getter in conformance MontgomeryFiniteField40(uint64_t a1, uint64_t a2)
{
  return protocol witness for static FiniteFieldProtocol.roots.getter in conformance FiniteField64(a1, a2, &one-time initialization token for roots);
}

void *protocol witness for static FiniteFieldProtocol.mul(_:_:) in conformance MontgomeryFiniteField40@<X0>(void *result@<X0>, void *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3 = 0xFFFFFF00014FFFFFLL;
  uint64_t v4 = ((unint64_t)*a2 * (unsigned __int128)(unint64_t)*result) >> 64;
  uint64_t v5 = *a2 * *result;
  uint64_t v6 = (0xCFFE47FFFEAFFFFFLL * v5 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
  BOOL v7 = __CFADD__(-v5, v5);
  BOOL v8 = __CFADD__(v6, v4);
  uint64_t v9 = v6 + v4;
  if (v8)
  {
    unint64_t v10 = v9 + v7;
    unint64_t v3 = v10 - 0xFFFEB00001;
    if (v10 < 0xFFFEB00001)
    {
LABEL_7:
      *a3 = v3;
      return result;
    }
    __break(1u);
LABEL_15:
    *a3 = v3 - 1;
    return result;
  }
  if (v9 == -1)
  {
    if (v7) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
  unint64_t v11 = v9 + v7;
  unint64_t v12 = v11 - 0xFFFEB00001;
  if (v11 < 0xFFFEB00001) {
    unint64_t v12 = v11;
  }
  *a3 = v12;
  return result;
}

unint64_t *protocol witness for static FiniteFieldProtocol.intToInternalValue(_:) in conformance MontgomeryFiniteField40@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v2 = *result;
  if (*result > 0xFFFEB00001)
  {
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._object = (void *)0x8000000260BFEA10;
    v8._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v8);
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 41;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    unint64_t result = (unint64_t *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (*result == 0xFFFEB00001)
    {
      unint64_t v3 = 0;
    }
    else
    {
      uint64_t v4 = (v2 * (unsigned __int128)0x160DCD7524uLL) >> 64;
      uint64_t v5 = (0x1B8024032F28ADCLL * v2 * (unsigned __int128)0xFFFEB00001uLL) >> 64;
      unint64_t v6 = v4 + __CFADD__(0xFFFFFFE9F2328ADCLL * v2, 0x160DCD7524 * v2) + v5;
      if (v6 >= 0xFFFEB00001) {
        unint64_t v3 = v6 - 0xFFFEB00001;
      }
      else {
        unint64_t v3 = v4 + __CFADD__(0xFFFFFFE9F2328ADCLL * v2, 0x160DCD7524 * v2) + v5;
      }
    }
    *a2 = v3;
  }
  return result;
}

void *protocol witness for static FiniteFieldProtocol.internalValueToInt(_:) in conformance MontgomeryFiniteField40@<X0>(void *result@<X0>, unint64_t *a2@<X8>)
{
  if (__CFADD__(-*result, *result)) {
    unint64_t v2 = ((0xCFFE47FFFEAFFFFFLL * *result * (unsigned __int128)0xFFFEB00001uLL) >> 64) + 1;
  }
  else {
    unint64_t v2 = (0xCFFE47FFFEAFFFFFLL * *result * (unsigned __int128)0xFFFEB00001uLL) >> 64;
  }
  if (v2 >= 0xFFFEB00001) {
    unint64_t v2 = 0;
  }
  *a2 = v2;
  return result;
}

unint64_t static MontgomeryFiniteField64.p.getter()
{
  return 0xFFFFFFFF00000001;
}

unint64_t static MontgomeryFiniteField64.g.getter()
{
  return 0xDA58878B0D514E98;
}

uint64_t static MontgomeryFiniteField64.logOfOrder.getter()
{
  return 32;
}

uint64_t static MontgomeryFiniteField64.roots.getter()
{
  return static FiniteField64.roots.getter(&one-time initialization token for roots);
}

void *MontgomeryFiniteField64.mu.unsafeMutableAddressor()
{
  return &static MontgomeryFiniteField64.mu;
}

unint64_t static MontgomeryFiniteField64.mu.getter()
{
  return 0xFFFFFFFEFFFFFFFFLL;
}

void *MontgomeryFiniteField64.r2.unsafeMutableAddressor()
{
  return &static MontgomeryFiniteField64.r2;
}

unint64_t static MontgomeryFiniteField64.r2.getter()
{
  return 0xFFFFFFFE00000001;
}

uint64_t static MontgomeryFiniteField64.mul(_:_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v2 = (a2 * (unsigned __int128)a1) >> 64;
  uint64_t v3 = (0xFFFFFFFEFFFFFFFFLL * a2 * a1 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  BOOL v4 = __CFADD__(-(uint64_t)(a2 * a1), a2 * a1);
  BOOL v5 = __CFADD__(v3, v2);
  uint64_t v6 = v3 + v2;
  if (v5)
  {
    unint64_t v7 = v6 + v4;
  }
  else
  {
    if (v6 != -1)
    {
      unint64_t v9 = v6 + v4;
      if (v9 >= 0xFFFFFFFF00000001) {
        return v9 + 0xFFFFFFFF;
      }
      else {
        return v9;
      }
    }
    if (!v4) {
      return 4294967294;
    }
    unint64_t v7 = 0;
  }
  uint64_t result = v7 + 0xFFFFFFFF;
  if (v7 >= 0xFFFFFFFF00000001) {
    __break(1u);
  }
  return result;
}

void protocol witness for static MontgomeryFiniteField.r2.getter in conformance MontgomeryFiniteField64(void *a1@<X8>)
{
  *a1 = 0xFFFFFFFE00000001;
}

void protocol witness for static FiniteFieldProtocol.g.getter in conformance MontgomeryFiniteField64(void *a1@<X8>)
{
  *a1 = 0xDA58878B0D514E98;
}

uint64_t protocol witness for static FiniteFieldProtocol.roots.getter in conformance MontgomeryFiniteField64(uint64_t a1, uint64_t a2)
{
  return protocol witness for static FiniteFieldProtocol.roots.getter in conformance FiniteField64(a1, a2, &one-time initialization token for roots);
}

void *protocol witness for static FiniteFieldProtocol.mul(_:_:) in conformance MontgomeryFiniteField64@<X0>(void *result@<X0>, void *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v3 = ((unint64_t)*a2 * (unsigned __int128)(unint64_t)*result) >> 64;
  uint64_t v4 = *a2 * *result;
  uint64_t v5 = (0xFFFFFFFEFFFFFFFFLL * v4 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  BOOL v6 = __CFADD__(-v4, v4);
  BOOL v7 = __CFADD__(v5, v3);
  uint64_t v8 = v5 + v3;
  if (v7)
  {
    uint64_t v9 = v8 + v6;
LABEL_7:
    BOOL v7 = __CFADD__(v9, 0xFFFFFFFFLL);
    unint64_t v10 = v9 + 0xFFFFFFFFLL;
    if (v7) {
      __break(1u);
    }
    else {
      *a3 = v10;
    }
    return result;
  }
  if (v8 == -1)
  {
    if (!v6)
    {
      *a3 = 4294967294;
      return result;
    }
    uint64_t v9 = 0;
    goto LABEL_7;
  }
  unint64_t v11 = v8 + v6;
  if (v11 >= 0xFFFFFFFF00000001) {
    v11 += 0xFFFFFFFFLL;
  }
  *a3 = v11;
  return result;
}

unint64_t *protocol witness for static FiniteFieldProtocol.intToInternalValue(_:) in conformance MontgomeryFiniteField64@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v2 = *result;
  if (*result > 0xFFFFFFFF00000001)
  {
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._object = (void *)0x8000000260BFEA10;
    v10._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v10);
    v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = 41;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    uint64_t result = (unint64_t *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (*result == 0xFFFFFFFF00000001)
    {
      unint64_t v3 = 0;
    }
    else
    {
      uint64_t v4 = (v2 * (unsigned __int128)0xFFFFFFFE00000001) >> 64;
      uint64_t v5 = (0xFFFFFFFF * v2 * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
      LODWORD(v3) = __CFADD__(0x1FFFFFFFFLL * v2, 0xFFFFFFFE00000001 * v2);
      BOOL v6 = __CFADD__(v5, v4);
      uint64_t v7 = v5 + v4;
      if (v6)
      {
        uint64_t v8 = v7 + v3;
        goto LABEL_10;
      }
      while (v7 == -1)
      {
        if ((v3 & 1) == 0)
        {
          unint64_t v3 = 4294967294;
          goto LABEL_20;
        }
        uint64_t v8 = 0;
LABEL_10:
        uint64_t v7 = 0xFFFFFFFFLL;
        BOOL v6 = __CFADD__(v8, 0xFFFFFFFFLL);
        unint64_t v3 = v8 + 0xFFFFFFFFLL;
        if (!v6) {
          goto LABEL_20;
        }
        __break(1u);
      }
      unint64_t v3 = v7 + v3;
      if (v3 >= 0xFFFFFFFF00000001) {
        v3 += 0xFFFFFFFFLL;
      }
    }
LABEL_20:
    *a2 = v3;
  }
  return result;
}

void *protocol witness for static FiniteFieldProtocol.internalValueToInt(_:) in conformance MontgomeryFiniteField64@<X0>(void *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v2 = (0xFFFFFFFEFFFFFFFFLL * *result * (unsigned __int128)0xFFFFFFFF00000001) >> 64;
  if (!__CFADD__(-*result, *result)) {
    goto LABEL_5;
  }
  if (v2 <= 0xFFFFFFFEFFFFFFFFLL)
  {
    ++v2;
LABEL_5:
    *a2 = v2;
    return result;
  }
  *a2 = 0;
  return result;
}

double static MontgomeryFiniteField128.p.getter@<D0>(_OWORD *a1@<X8>)
{
  *(void *)&double result = 1;
  *a1 = xmmword_260BFA010;
  return result;
}

double static MontgomeryFiniteField128.g.getter@<D0>(_OWORD *a1@<X8>)
{
  double result = -6.64630084e231;
  *a1 = xmmword_260BFD020;
  return result;
}

uint64_t static MontgomeryFiniteField128.logOfOrder.getter()
{
  return 66;
}

uint64_t static MontgomeryFiniteField128.roots.getter()
{
  return static FiniteField64.roots.getter(&one-time initialization token for roots);
}

uint64_t static FiniteField64.roots.getter(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

void *MontgomeryFiniteField128.mu.unsafeMutableAddressor()
{
  return &static MontgomeryFiniteField128.mu;
}

uint64_t static MontgomeryFiniteField128.mu.getter()
{
  return -1;
}

double one-time initialization function for r2()
{
  double result = NAN;
  static MontgomeryFiniteField128.r2 = xmmword_260BFA000;
  return result;
}

long long *MontgomeryFiniteField128.r2.unsafeMutableAddressor()
{
  if (one-time initialization token for r2 != -1) {
    swift_once();
  }
  return &static MontgomeryFiniteField128.r2;
}

double static MontgomeryFiniteField128.r2.getter@<D0>(_OWORD *a1@<X8>)
{
  double result = NAN;
  *a1 = xmmword_260BFA000;
  return result;
}

_OWORD *static MontgomeryFiniteField128.mul(_:_:)@<X0>(long long *a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  long long v4 = *a1;
  long long v37 = *a2;
  long long v38 = v4;
  _UInt128.multipliedFullWidth(by:)(&v34, &v39, (unint64_t *)&v37);
  long long v5 = v34;
  long long v6 = v39;
  long long v39 = xmmword_260BFA010;
  long long v38 = (unint64_t)-(uint64_t)v6;
  _UInt128.multipliedFullWidth(by:)(&v34, &v35, (unint64_t *)&v38);
  BOOL v7 = __CFADD__(v35, (void)v6);
  uint64_t v8 = v36 + *((void *)&v6 + 1);
  if (__CFADD__(v36, *((void *)&v6 + 1))) {
    char v9 = 1;
  }
  else {
    char v9 = v8 == -1 && v7;
  }
  uint64_t v10 = v8 + v7;
  uint64_t v11 = v5 + v34;
  BOOL v12 = __CFADD__((void)v5, (void)v34);
  uint64_t v13 = *((void *)&v5 + 1) + *((void *)&v34 + 1);
  if (!__CFADD__(*((void *)&v5 + 1), *((void *)&v34 + 1)) && v13 == -1)
  {
    if (!v12)
    {
      uint64_t v13 = -1;
      if (v9) {
        goto LABEL_17;
      }
      goto LABEL_19;
    }
  }
  else if (!v12)
  {
    if (v9) {
      goto LABEL_17;
    }
    goto LABEL_19;
  }
  ++v13;
  if (v9)
  {
LABEL_17:
    uint64_t v14 = 1;
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v14 = 0;
LABEL_20:
  uint64_t v15 = v11 + v14;
  if (__CFADD__(v11, v14)) {
    uint64_t v16 = v13 + 1;
  }
  else {
    uint64_t v16 = v13;
  }
  long long v37 = xmmword_260BFA010;
  v33[0] = -v10;
  v33[1] = 0;
  double result = _UInt128.multipliedFullWidth(by:)(&v39, &v38, v33);
  uint64_t v18 = *((void *)&v39 + 1);
  BOOL v19 = __CFADD__((void)v38, v10);
  uint64_t v20 = *((void *)&v38 + 1) + v15;
  BOOL v21 = __CFADD__(*((void *)&v38 + 1), v15);
  BOOL v22 = v20 == -1 && v19;
  int v23 = v21 || v22;
  uint64_t v24 = v20 + v19;
  uint64_t v25 = v16 + v39;
  BOOL v26 = __CFADD__(v16, (void)v39);
  if (*((void *)&v39 + 1) == -1)
  {
    if (!v26)
    {
      if (v23)
      {
        BOOL v27 = __CFADD__(v25, 1);
        unint64_t v28 = v25 + 1;
        if (v27) {
          goto LABEL_63;
        }
        goto LABEL_66;
      }
      uint64_t v18 = -1;
      goto LABEL_54;
    }
    goto LABEL_45;
  }
  if (v26)
  {
LABEL_45:
    uint64_t v18 = *((void *)&v39 + 1) + 1;
    if (v23)
    {
      uint64_t v29 = 1;
      goto LABEL_55;
    }
LABEL_54:
    uint64_t v29 = 0;
LABEL_55:
    BOOL v27 = __CFADD__(v25, v29);
    unint64_t v28 = v25 + v29;
    char v30 = v27;
    if (v18 == -1)
    {
      if (v30) {
        goto LABEL_63;
      }
    }
    else if ((v30 & 1) == 0)
    {
      goto LABEL_60;
    }
LABEL_66:
    BOOL v27 = v24-- != 0;
    uint64_t v32 = 28;
    if (!v27) {
      uint64_t v32 = 27;
    }
    v28 += v32;
    goto LABEL_69;
  }
  if (!v23) {
    goto LABEL_54;
  }
  BOOL v27 = __CFADD__(v25, 1);
  unint64_t v28 = v25 + 1;
  if (v27) {
    goto LABEL_66;
  }
LABEL_60:
  if (v18) {
    goto LABEL_66;
  }
LABEL_63:
  BOOL v31 = v24 == 0;
  if (v28 != -28) {
    BOOL v31 = v28 < 0xFFFFFFFFFFFFFFE4;
  }
  if (!v31) {
    goto LABEL_66;
  }
LABEL_69:
  *a3 = v24;
  a3[1] = v28;
  return result;
}

double protocol witness for static MontgomeryFiniteField.r2.getter in conformance MontgomeryFiniteField128@<D0>(_OWORD *a1@<X8>)
{
  double result = NAN;
  *a1 = xmmword_260BFA000;
  return result;
}

double protocol witness for static FiniteFieldProtocol.p.getter in conformance MontgomeryFiniteField128@<D0>(_OWORD *a1@<X8>)
{
  *(void *)&double result = 1;
  *a1 = xmmword_260BFA010;
  return result;
}

double protocol witness for static FiniteFieldProtocol.g.getter in conformance MontgomeryFiniteField128@<D0>(_OWORD *a1@<X8>)
{
  double result = -6.64630084e231;
  *a1 = xmmword_260BFD020;
  return result;
}

uint64_t protocol witness for static FiniteFieldProtocol.logOfOrder.getter in conformance MontgomeryFiniteField128()
{
  return 66;
}

uint64_t protocol witness for static FiniteFieldProtocol.roots.getter in conformance MontgomeryFiniteField128(uint64_t a1, uint64_t a2)
{
  return protocol witness for static FiniteFieldProtocol.roots.getter in conformance FiniteField64(a1, a2, &one-time initialization token for roots);
}

uint64_t protocol witness for static FiniteFieldProtocol.roots.getter in conformance FiniteField64(uint64_t a1, uint64_t a2, void *a3)
{
  if (*a3 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

_OWORD *protocol witness for static FiniteFieldProtocol.mul(_:_:) in conformance MontgomeryFiniteField128@<X0>(long long *a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  long long v4 = *a1;
  long long v37 = *a2;
  long long v38 = v4;
  _UInt128.multipliedFullWidth(by:)(&v34, &v39, (unint64_t *)&v37);
  long long v5 = v34;
  long long v6 = v39;
  long long v39 = xmmword_260BFA010;
  long long v38 = (unint64_t)-(uint64_t)v6;
  _UInt128.multipliedFullWidth(by:)(&v34, &v35, (unint64_t *)&v38);
  BOOL v7 = __CFADD__(v35, (void)v6);
  uint64_t v8 = v36 + *((void *)&v6 + 1);
  int v9 = __CFADD__(v36, *((void *)&v6 + 1)) || v8 == -1 && v7;
  uint64_t v10 = v8 + v7;
  uint64_t v11 = v5 + v34;
  BOOL v12 = __CFADD__((void)v5, (void)v34);
  uint64_t v13 = *((void *)&v5 + 1) + *((void *)&v34 + 1);
  if (!__CFADD__(*((void *)&v5 + 1), *((void *)&v34 + 1)) && v13 == -1)
  {
    if (!v12)
    {
      uint64_t v13 = -1;
      if (v9) {
        goto LABEL_17;
      }
      goto LABEL_19;
    }
  }
  else if (!v12)
  {
    if (v9) {
      goto LABEL_17;
    }
    goto LABEL_19;
  }
  ++v13;
  if (v9)
  {
LABEL_17:
    uint64_t v14 = 1;
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v14 = 0;
LABEL_20:
  uint64_t v15 = v11 + v14;
  if (__CFADD__(v11, v14)) {
    uint64_t v16 = v13 + 1;
  }
  else {
    uint64_t v16 = v13;
  }
  long long v37 = xmmword_260BFA010;
  v33[0] = -v10;
  v33[1] = 0;
  double result = _UInt128.multipliedFullWidth(by:)(&v39, &v38, v33);
  uint64_t v18 = *((void *)&v39 + 1);
  BOOL v19 = __CFADD__((void)v38, v10);
  uint64_t v20 = *((void *)&v38 + 1) + v15;
  BOOL v21 = __CFADD__(*((void *)&v38 + 1), v15);
  BOOL v22 = v20 == -1 && v19;
  int v23 = v21 || v22;
  uint64_t v24 = v20 + v19;
  uint64_t v25 = v16 + v39;
  BOOL v26 = __CFADD__(v16, (void)v39);
  if (*((void *)&v39 + 1) == -1)
  {
    if (!v26)
    {
      if (v23)
      {
        BOOL v27 = __CFADD__(v25, 1);
        unint64_t v28 = v25 + 1;
        if (v27) {
          goto LABEL_63;
        }
        goto LABEL_66;
      }
      uint64_t v18 = -1;
      goto LABEL_54;
    }
    goto LABEL_45;
  }
  if (v26)
  {
LABEL_45:
    uint64_t v18 = *((void *)&v39 + 1) + 1;
    if (v23)
    {
      uint64_t v29 = 1;
      goto LABEL_55;
    }
LABEL_54:
    uint64_t v29 = 0;
LABEL_55:
    BOOL v27 = __CFADD__(v25, v29);
    unint64_t v28 = v25 + v29;
    char v30 = v27;
    if (v18 == -1)
    {
      if (v30) {
        goto LABEL_63;
      }
    }
    else if ((v30 & 1) == 0)
    {
      goto LABEL_60;
    }
LABEL_66:
    BOOL v27 = v24-- != 0;
    uint64_t v32 = 28;
    if (!v27) {
      uint64_t v32 = 27;
    }
    v28 += v32;
    goto LABEL_69;
  }
  if (!v23) {
    goto LABEL_54;
  }
  BOOL v27 = __CFADD__(v25, 1);
  unint64_t v28 = v25 + 1;
  if (v27) {
    goto LABEL_66;
  }
LABEL_60:
  if (v18) {
    goto LABEL_66;
  }
LABEL_63:
  BOOL v31 = v24 == 0;
  if (v28 != -28) {
    BOOL v31 = v28 < 0xFFFFFFFFFFFFFFE4;
  }
  if (!v31) {
    goto LABEL_66;
  }
LABEL_69:
  *a3 = v24;
  a3[1] = v28;
  return result;
}

uint64_t *protocol witness for static FiniteFieldProtocol.intToInternalValue(_:) in conformance MontgomeryFiniteField128@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  unint64_t v3 = result[1];
  BOOL v4 = (unint64_t)*result > 1;
  if (v3 != -28) {
    BOOL v4 = v3 > 0xFFFFFFFFFFFFFFE4;
  }
  if (!v4)
  {
    BOOL v5 = *result == 0;
    if (v3 != -28) {
      BOOL v5 = v3 < 0xFFFFFFFFFFFFFFE4;
    }
    if (!v5)
    {
      *a2 = 0;
      a2[1] = 0;
      return result;
    }
    uint64_t v42 = *result;
    unint64_t v43 = v3;
    long long v41 = xmmword_260BFA000;
    _UInt128.multipliedFullWidth(by:)(&v38, &v44, (unint64_t *)&v41);
    long long v6 = v38;
    long long v7 = v44;
    long long v44 = xmmword_260BFA010;
    uint64_t v42 = -(uint64_t)v7;
    unint64_t v43 = 0;
    _UInt128.multipliedFullWidth(by:)(&v38, &v39, (unint64_t *)&v42);
    BOOL v8 = __CFADD__(v39, (void)v7);
    uint64_t v9 = v40 + *((void *)&v7 + 1);
    int v10 = __CFADD__(v40, *((void *)&v7 + 1)) || v9 == -1 && v8;
    uint64_t v11 = v9 + v8;
    uint64_t v12 = v6 + v38;
    BOOL v13 = __CFADD__((void)v6, (void)v38);
    uint64_t v14 = *((void *)&v6 + 1) + *((void *)&v38 + 1);
    if (!__CFADD__(*((void *)&v6 + 1), *((void *)&v38 + 1)) && v14 == -1)
    {
      if (!v13)
      {
        uint64_t v14 = -1;
        if (v10) {
          goto LABEL_24;
        }
        goto LABEL_26;
      }
    }
    else if (!v13)
    {
      if (v10) {
        goto LABEL_24;
      }
      goto LABEL_26;
    }
    ++v14;
    if (v10)
    {
LABEL_24:
      uint64_t v15 = 1;
      goto LABEL_27;
    }
LABEL_26:
    uint64_t v15 = 0;
LABEL_27:
    uint64_t v16 = v12 + v15;
    if (__CFADD__(v12, v15)) {
      uint64_t v17 = v14 + 1;
    }
    else {
      uint64_t v17 = v14;
    }
    long long v41 = xmmword_260BFA010;
    v37[0] = -v11;
    v37[1] = 0;
    double result = (uint64_t *)_UInt128.multipliedFullWidth(by:)(&v44, &v42, v37);
    uint64_t v18 = *((void *)&v44 + 1);
    BOOL v19 = __CFADD__(v42, v11);
    uint64_t v20 = v43 + v16;
    int v21 = __CFADD__(v43, v16) || v20 == -1 && v19;
    uint64_t v22 = v20 + v19;
    uint64_t v23 = v17 + v44;
    BOOL v24 = __CFADD__(v17, (void)v44);
    if (*((void *)&v44 + 1) == -1)
    {
      if (!v24)
      {
        if (v21)
        {
          BOOL v25 = __CFADD__(v23, 1);
          unint64_t v26 = v23 + 1;
          if (v25) {
            goto LABEL_67;
          }
          goto LABEL_70;
        }
        uint64_t v18 = -1;
        goto LABEL_58;
      }
    }
    else if (!v24)
    {
      if (v21)
      {
        BOOL v25 = __CFADD__(v23, 1);
        unint64_t v26 = v23 + 1;
        if (v25) {
          goto LABEL_70;
        }
        goto LABEL_64;
      }
      goto LABEL_58;
    }
    uint64_t v18 = *((void *)&v44 + 1) + 1;
    if (v21)
    {
      uint64_t v27 = 1;
LABEL_59:
      BOOL v25 = __CFADD__(v23, v27);
      unint64_t v26 = v23 + v27;
      char v28 = v25;
      if (v18 == -1)
      {
        if (v28) {
          goto LABEL_67;
        }
        goto LABEL_70;
      }
      if (v28) {
        goto LABEL_70;
      }
LABEL_64:
      if (!v18)
      {
LABEL_67:
        BOOL v29 = v22 == 0;
        if (v26 != -28) {
          BOOL v29 = v26 < 0xFFFFFFFFFFFFFFE4;
        }
        if (v29) {
          goto LABEL_73;
        }
      }
LABEL_70:
      BOOL v25 = v22-- != 0;
      uint64_t v30 = 28;
      if (!v25) {
        uint64_t v30 = 27;
      }
      v26 += v30;
LABEL_73:
      *a2 = v22;
      a2[1] = v26;
      return result;
    }
LABEL_58:
    uint64_t v27 = 0;
    goto LABEL_59;
  }
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type _UInt128 and conformance _UInt128();
  v31._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._countAndFlagsBits = 30768;
  v32._object = (void *)0xE200000000000000;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._object = (void *)0x8000000260BFEA10;
  v33._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v33);
  v34._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._countAndFlagsBits = 30768;
  v35._object = (void *)0xE200000000000000;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._countAndFlagsBits = 41;
  v36._object = (void *)0xE100000000000000;
  String.append(_:)(v36);
  double result = (uint64_t *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_OWORD *protocol witness for static FiniteFieldProtocol.internalValueToInt(_:) in conformance MontgomeryFiniteField128@<X0>(long long *a1@<X0>, void *a2@<X8>)
{
  long long v3 = *a1;
  long long v35 = xmmword_260BFA5F0;
  long long v36 = v3;
  _UInt128.multipliedFullWidth(by:)(&v32, &v37, (unint64_t *)&v35);
  long long v4 = v32;
  long long v5 = v37;
  long long v37 = xmmword_260BFA010;
  long long v36 = (unint64_t)-(uint64_t)v5;
  _UInt128.multipliedFullWidth(by:)(&v32, &v33, (unint64_t *)&v36);
  BOOL v6 = __CFADD__(v33, (void)v5);
  uint64_t v7 = v34 + *((void *)&v5 + 1);
  int v8 = __CFADD__(v34, *((void *)&v5 + 1)) || v7 == -1 && v6;
  uint64_t v9 = v7 + v6;
  uint64_t v10 = v4 + v32;
  BOOL v11 = __CFADD__((void)v4, (void)v32);
  uint64_t v12 = *((void *)&v4 + 1) + *((void *)&v32 + 1);
  if (!__CFADD__(*((void *)&v4 + 1), *((void *)&v32 + 1)))
  {
    if (v12 == -1)
    {
      uint64_t v12 = v11 - 1;
      if (v8) {
        goto LABEL_21;
      }
      goto LABEL_17;
    }
    if (!v11)
    {
      if (v8) {
        goto LABEL_21;
      }
      goto LABEL_17;
    }
LABEL_20:
    ++v12;
    if (v8) {
      goto LABEL_21;
    }
LABEL_17:
    uint64_t v13 = 0;
    goto LABEL_22;
  }
  if (v11) {
    goto LABEL_20;
  }
  if (!v8) {
    goto LABEL_17;
  }
LABEL_21:
  uint64_t v13 = 1;
LABEL_22:
  uint64_t v14 = v10 + v13;
  if (__CFADD__(v10, v13)) {
    uint64_t v15 = v12 + 1;
  }
  else {
    uint64_t v15 = v12;
  }
  long long v35 = xmmword_260BFA010;
  v31[0] = -v9;
  v31[1] = 0;
  double result = _UInt128.multipliedFullWidth(by:)(&v37, &v36, v31);
  uint64_t v17 = *((void *)&v37 + 1);
  BOOL v18 = __CFADD__((void)v36, v9);
  uint64_t v19 = *((void *)&v36 + 1) + v14;
  if (__CFADD__(*((void *)&v36 + 1), v14))
  {
    uint64_t v20 = v19 + v18;
    uint64_t v21 = v15 + v37;
    BOOL v22 = __CFADD__(v15, (void)v37);
    if (*((void *)&v37 + 1) == -1)
    {
      if (!v22)
      {
        BOOL v26 = __CFADD__(v21, 1);
        unint64_t v27 = v21 + 1;
        if (v26) {
          goto LABEL_70;
        }
LABEL_73:
        BOOL v26 = v20-- != 0;
        uint64_t v30 = 28;
        if (!v26) {
          uint64_t v30 = 27;
        }
        v27 += v30;
        goto LABEL_76;
      }
      uint64_t v17 = 0;
    }
    else if (v22)
    {
      uint64_t v17 = *((void *)&v37 + 1) + 1;
      goto LABEL_51;
    }
LABEL_55:
    BOOL v26 = __CFADD__(v21, 1);
    unint64_t v27 = v21 + 1;
    char v28 = v26;
    goto LABEL_63;
  }
  BOOL v23 = v19 == -1 && v18;
  uint64_t v20 = v19 + v18;
  uint64_t v21 = v15 + v37;
  BOOL v24 = __CFADD__(v15, (void)v37);
  if (*((void *)&v37 + 1) == -1)
  {
    uint64_t v17 = v24 - 1;
    if (v23) {
      goto LABEL_51;
    }
  }
  else
  {
    if (v24)
    {
      uint64_t v17 = *((void *)&v37 + 1) + 1;
      if (!v23) {
        goto LABEL_58;
      }
LABEL_51:
      uint64_t v25 = 1;
      goto LABEL_59;
    }
    if (v23) {
      goto LABEL_55;
    }
  }
LABEL_58:
  uint64_t v25 = 0;
LABEL_59:
  BOOL v26 = __CFADD__(v21, v25);
  unint64_t v27 = v21 + v25;
  char v28 = v26;
  if (v17 == -1)
  {
    if (v28) {
      goto LABEL_70;
    }
    goto LABEL_73;
  }
LABEL_63:
  if ((v28 & 1) != 0 || v17) {
    goto LABEL_73;
  }
LABEL_70:
  BOOL v29 = v20 == 0;
  if (v27 != -28) {
    BOOL v29 = v27 < 0xFFFFFFFFFFFFFFE4;
  }
  if (!v29) {
    goto LABEL_73;
  }
LABEL_76:
  *a2 = v20;
  a2[1] = v27;
  return result;
}

unint64_t instantiation function for generic protocol witness table for MontgomeryFiniteField32(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type MontgomeryFiniteField32 and conformance MontgomeryFiniteField32();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for MontgomeryFiniteField40(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type MontgomeryFiniteField40 and conformance MontgomeryFiniteField40();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for MontgomeryFiniteField64(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type MontgomeryFiniteField64 and conformance MontgomeryFiniteField64();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for MontgomeryFiniteField128(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type MontgomeryFiniteField128 and conformance MontgomeryFiniteField128();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of static FiniteFieldProtocol.p.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static FiniteFieldProtocol.g.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static FiniteFieldProtocol.logOfOrder.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static FiniteFieldProtocol.roots.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of static FiniteFieldProtocol.mul(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of static FiniteFieldProtocol.intToInternalValue(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of static FiniteFieldProtocol.internalValueToInt(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

ValueMetadata *type metadata accessor for FiniteField64()
{
  return &type metadata for FiniteField64;
}

uint64_t dispatch thunk of static MontgomeryFiniteField.r2.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

ValueMetadata *type metadata accessor for MontgomeryFiniteField32()
{
  return &type metadata for MontgomeryFiniteField32;
}

ValueMetadata *type metadata accessor for MontgomeryFiniteField40()
{
  return &type metadata for MontgomeryFiniteField40;
}

ValueMetadata *type metadata accessor for MontgomeryFiniteField64()
{
  return &type metadata for MontgomeryFiniteField64;
}

ValueMetadata *type metadata accessor for MontgomeryFiniteField128()
{
  return &type metadata for MontgomeryFiniteField128;
}

uint64_t *PolynomialEvaluationGadget.init(polynomial:numOfCalls:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *result;
  *a3 = 1;
  a3[1] = a2;
  a3[2] = v3;
  return result;
}

uint64_t PolynomialEvaluationGadget.arity.getter()
{
  return *(void *)v0;
}

uint64_t PolynomialEvaluationGadget.degree.getter()
{
  uint64_t v0 = type metadata accessor for Polynomial();
  return Polynomial.degree.getter(v0, v1);
}

uint64_t PolynomialEvaluationGadget.numOfCalls.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t PolynomialEvaluationGadget.evaluate<A>(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  v16[1] = a2;
  uint64_t v17 = a3;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness, v10);
  uint64_t v12 = (char *)v16 - v11;
  uint64_t v19 = *(void *)(v3 + 16);
  swift_bridgeObjectRetain();
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v13 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
  (*(void (**)(char *))(v5 + 16))(v7);
  v13(v18, 0);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
  uint64_t v14 = type metadata accessor for Polynomial();
  Polynomial.evaluate(at:)((uint64_t)v7, v14, v17);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return swift_bridgeObjectRelease();
}

uint64_t PolynomialEvaluationGadget.evaluate<A>(at:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness, v5);
  uint64_t v7 = (char *)&v14[-1] - v6;
  v14[4] = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  dispatch thunk of Collection.startIndex.getter();
  int v8 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
  uint64_t v10 = *v9;
  swift_bridgeObjectRetain();
  v8(v14, 0);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, AssociatedTypeWitness);
  v14[0] = v10;
  uint64_t v11 = type metadata accessor for Polynomial();
  Polynomial.evaluate(at:)((uint64_t)v14, v11, a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Gadget.evaluate<A>(at:) in conformance PolynomialEvaluationGadget<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, unsigned char *a3@<X8>)
{
  return PolynomialEvaluationGadget.evaluate<A>(at:)(a1, a2, a3);
}

uint64_t protocol witness for Gadget.evaluate<A>(at:) in conformance PolynomialEvaluationGadget<A>@<X0>(uint64_t *a1@<X8>)
{
  return PolynomialEvaluationGadget.evaluate<A>(at:)(a1);
}

uint64_t initializeBufferWithCopyOfBuffer for PolynomialEvaluationGadget(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for PolynomialEvaluationGadget()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for PolynomialEvaluationGadget(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PolynomialEvaluationGadget(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PolynomialEvaluationGadget(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PolynomialEvaluationGadget(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for PolynomialEvaluationGadget()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t PINEPrepareShare.init(verifierShare:wraparoundJointRandPart:verificationJointRandPart:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t PINEPrepareShare.init<A>(from:parameter:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  unint64_t v119 = a5;
  uint64_t v120 = a8;
  unint64_t v9 = a7;
  uint64_t v111 = a9;
  uint64_t v116 = *(void *)(a7 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v17 = MEMORY[0x270FA5388](v15 - 8, v16);
  uint64_t v19 = (char *)&v100 - v18;
  uint64_t v20 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v17, v21);
  BOOL v23 = (char *)&v100 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *uint64_t v58 = 0;
    v58[1] = 0;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(a1, a6);
  }
  uint64_t v112 = v20;
  uint64_t v113 = a6;
  unint64_t v24 = v9 + 64;
  uint64_t v25 = a4;
  uint64_t v110 = *(uint64_t (**)(uint64_t, unint64_t))(v9 + 64);
  uint64_t v26 = v110(a4, v9);
  uint64_t v27 = a2 * v26;
  if ((unsigned __int128)(a2 * (__int128)v26) >> 64 != (a2 * v26) >> 63)
  {
    __break(1u);
    goto LABEL_32;
  }
  char v28 = *(uint64_t (**)(void))(v120 + 8);
  uint64_t v25 = v119;
  uint64_t v108 = v120 + 8;
  uint64_t v109 = a2;
  uint64_t v107 = v28;
  uint64_t v29 = v28();
  if (v29 + 0x4000000000000000 < 0)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v118 = a1;
  uint64_t v30 = v27 + 2 * v29;
  if (__OFADD__(v27, 2 * v29))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v31 = v113;
  if (dispatch thunk of Collection.count.getter() != v30)
  {
    uint64_t v121 = 0;
    unint64_t v122 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    uint64_t v121 = a4;
    unint64_t v122 = v119;
    unint64_t v123 = v9;
    uint64_t v124 = v120;
    type metadata accessor for PINEPrepareShare();
    uint64_t v59 = _typeName(_:qualified:)();
    uint64_t v60 = v31;
    unint64_t v62 = v61;
    swift_bridgeObjectRelease();
    uint64_t v121 = v59;
    unint64_t v122 = v62;
    v63._countAndFlagsBits = 0x6572697571657220;
    v63._object = (void *)0xEB00000000203A64;
    String.append(_:)(v63);
    uint64_t v125 = v30;
    v64._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v64);
    swift_bridgeObjectRelease();
    v65._countAndFlagsBits = 0x203A746F67202CLL;
    v65._object = (void *)0xE700000000000000;
    String.append(_:)(v65);
    uint64_t v66 = v118;
    uint64_t v125 = dispatch thunk of Collection.count.getter();
    v67._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v67);
    swift_bridgeObjectRelease();
    uint64_t v68 = v121;
    unint64_t v69 = v122;
    lazy protocol witness table accessor for type VDAFCodableError and conformance VDAFCodableError();
    swift_allocError();
    *unint64_t v70 = v68;
    v70[1] = v69;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v112 + 8))(v66, v60);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v112 + 16))(v23, v118, v31);
  uint64_t v32 = ArraySlice.init<A>(_:)();
  BOOL v23 = v33;
  uint64_t v35 = v34;
  uint64_t v106 = v36;
  uint64_t v27 = (uint64_t)v110;
  uint64_t v37 = v110(a4, v9);
  uint64_t v25 = v37 * v109;
  if ((unsigned __int128)(v37 * (__int128)v109) >> 64 != (v37 * v109) >> 63) {
    goto LABEL_34;
  }
  unint64_t v105 = v9;
  uint64_t v38 = v106;
  uint64_t v104 = specialized Collection.prefix(_:)(v37 * v109, v32, v23, v35, v106);
  uint64_t v39 = v23;
  unint64_t v41 = v40;
  uint64_t v42 = v35;
  unint64_t v44 = v43;
  uint64_t v46 = v45;
  uint64_t v106 = specialized Collection.dropFirst(_:)(v25, v32, v39, v42, v38);
  uint64_t v101 = v47;
  uint64_t v103 = v48;
  uint64_t v102 = v49;
  uint64_t v121 = v104;
  unint64_t v122 = v41;
  unint64_t v123 = v44;
  uint64_t v124 = v46;
  uint64_t v50 = TupleTypeMetadata3;
  uint64_t v51 = *(int *)(TupleTypeMetadata3 + 48);
  uint64_t v52 = *(int *)(TupleTypeMetadata3 + 64);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v19, 1, 1);
  *(void *)&v19[v51] = v109;
  swift_unknownObjectRetain();
  *(void *)&v19[v52] = v110(a4, v105);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v19, 0, 1, v50);
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<UInt8>);
  unint64_t v54 = lazy protocol witness table accessor for type ArraySlice<UInt8> and conformance ArraySlice<A>();
  uint64_t v55 = v117;
  uint64_t v56 = Array<A>.init<A>(from:parameter:)((uint64_t)&v121, (uint64_t)v19, a4, v53, v116, v54);
  if (v55)
  {
    (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v118, v113);
    return swift_unknownObjectRelease();
  }
  uint64_t v116 = v56;
  uint64_t v71 = v107();
  uint64_t v72 = v101;
  uint64_t v73 = v106;
  uint64_t v74 = v103;
  uint64_t v75 = v102;
  uint64_t v25 = specialized Collection.prefix(_:)(v71, v106, v101, v103, v102);
  uint64_t AssociatedTypeWitness = v76;
  uint64_t v117 = v77;
  unint64_t v9 = v78;
  uint64_t v27 = specialized Collection.dropFirst(_:)(v71, v73, v72, v74, v75);
  unint64_t v24 = v79;
  uint64_t v19 = v80;
  BOOL v23 = v81;
  if ((v9 & 1) == 0)
  {
    swift_unknownObjectRetain();
LABEL_13:
    specialized _copyCollectionToContiguousArray<A>(_:)(v25, AssociatedTypeWitness, v117, v9);
    goto LABEL_20;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  uint64_t v83 = swift_dynamicCastClass();
  if (!v83)
  {
    swift_unknownObjectRelease();
    uint64_t v83 = MEMORY[0x263F8EE78];
  }
  uint64_t v84 = *(void *)(v83 + 16);
  swift_release();
  if (__OFSUB__(v9 >> 1, v117)) {
    goto LABEL_35;
  }
  if (v84 != (v9 >> 1) - v117)
  {
LABEL_36:
    swift_unknownObjectRelease();
    goto LABEL_13;
  }
  uint64_t v82 = swift_dynamicCastClass();
  if (!v82)
  {
    swift_unknownObjectRelease();
    uint64_t v82 = MEMORY[0x263F8EE78];
  }
LABEL_20:
  uint64_t v117 = v82;
  swift_unknownObjectRelease();
  uint64_t v85 = v107();
  uint64_t v86 = specialized Collection.prefix(_:)(v85, v27, v24, v19, v23);
  uint64_t v120 = v87;
  uint64_t v89 = v88;
  unint64_t v91 = v90;
  specialized Collection.dropFirst(_:)(v85, v27, v24, v19, v23);
  if (v91)
  {
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    swift_unknownObjectRetain();
    uint64_t v96 = swift_dynamicCastClass();
    uint64_t v92 = v118;
    if (!v96)
    {
      swift_unknownObjectRelease();
      uint64_t v96 = MEMORY[0x263F8EE78];
    }
    uint64_t v97 = *(void *)(v96 + 16);
    swift_release();
    if (__OFSUB__(v91 >> 1, v89))
    {
      __break(1u);
    }
    else if (v97 == (v91 >> 1) - v89)
    {
      uint64_t v94 = swift_dynamicCastClass();
      uint64_t v95 = v113;
      if (!v94)
      {
        swift_unknownObjectRelease();
        uint64_t v94 = MEMORY[0x263F8EE78];
      }
      goto LABEL_29;
    }
    swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRetain();
    uint64_t v92 = v118;
  }
  specialized _copyCollectionToContiguousArray<A>(_:)(v86, v120, v89, v91);
  uint64_t v94 = v93;
  uint64_t v95 = v113;
LABEL_29:
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v92, v95);
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v98 = v111;
  uint64_t v99 = v117;
  *uint64_t v111 = v116;
  v98[1] = v99;
  v98[2] = v94;
  return result;
}

uint64_t type metadata accessor for PINEPrepareShare()
{
  return swift_getGenericMetadata();
}

uint64_t PINEPrepareShare.verifierShare.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PINEPrepareShare.wraparoundJointRandPart.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PINEPrepareShare.verificationJointRandPart.getter()
{
  return swift_bridgeObjectRetain();
}

BOOL static PINEPrepareShare.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  if ((static Array<A>.== infix(_:_:)() & 1) == 0 || !specialized static Array<A>.== infix(_:_:)(v2, v4)) {
    return 0;
  }

  return specialized static Array<A>.== infix(_:_:)(v3, v5);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PINEPrepareShare<A, B>(uint64_t a1, uint64_t a2)
{
  return static PINEPrepareShare.== infix(_:_:)(a1, a2);
}

uint64_t protocol witness for VDAFDecodable.init<A>(from:parameter:) in conformance PINEPrepareShare<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, void *a5@<X8>)
{
  return PINEPrepareShare.init<A>(from:parameter:)(a1, *(void *)a2, *(unsigned char *)(a2 + 8), *(void *)(a4 + 16), *(void *)(a4 + 24), a3, *(void *)(a4 + 32), *(void *)(a4 + 40), a5);
}

uint64_t PINEPrepareShare.encodedLength.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = Collection<>.encodedLength.getter(v5, WitnessTable, *(void *)(*(void *)(a1 + 32) + 40));
  uint64_t v8 = *(void *)(v3 + 16);
  BOOL v9 = __OFADD__(result, v8);
  uint64_t v10 = result + v8;
  if (v9)
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t v11 = *(void *)(v4 + 16);
  uint64_t result = v10 + v11;
  if (__OFADD__(v10, v11)) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t PINEPrepareShare.encode<A>(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  Collection<>.encode<A>(into:)(a1, v8, a3, WitnessTable, a4, *(void *)(*(void *)(a2 + 32) + 40));
  Seed.encode<A>(into:)();
  return Seed.encode<A>(into:)();
}

uint64_t protocol witness for VDAFEncodable.encode<A>(into:) in conformance PINEPrepareShare<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PINEPrepareShare.encode<A>(into:)(a1, a4, a2, a3);
}

void *initializeBufferWithCopyOfBuffer for PINEPrepareShare(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PINEPrepareShare(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PINEPrepareShare(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PINEPrepareShare(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PINEPrepareShare(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t __DataStorage._bytes.getter()
{
  return MEMORY[0x270EEE638]();
}

uint64_t __DataStorage._length.getter()
{
  return MEMORY[0x270EEE658]();
}

uint64_t __DataStorage._offset.getter()
{
  return MEMORY[0x270EEE670]();
}

uint64_t __DataStorage.init(capacity:)()
{
  return MEMORY[0x270EEE680]();
}

uint64_t type metadata accessor for __DataStorage()
{
  return MEMORY[0x270EEE688]();
}

Swift::Void __swiftcall Data.LargeSlice.ensureUniqueReference()()
{
}

Swift::Void __swiftcall Data.InlineSlice.ensureUniqueReference()()
{
}

uint64_t Data._copyContents(initializing:)()
{
  return MEMORY[0x270EF0048]();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return MEMORY[0x270EF0070]();
}

uint64_t Data._Representation.replaceSubrange(_:with:count:)()
{
  return MEMORY[0x270EF0090]();
}

uint64_t Data._Representation.append(contentsOf:)()
{
  return MEMORY[0x270EF00B0]();
}

uint64_t type metadata accessor for Data.Iterator()
{
  return MEMORY[0x270EF0238]();
}

uint64_t Data.init<A>(_:)()
{
  return MEMORY[0x270EF0290]();
}

uint64_t SymmetricKey.init<A>(data:)()
{
  return MEMORY[0x270EEAB00]();
}

uint64_t SymmetricKey.bitCount.getter()
{
  return MEMORY[0x270EEAB20]();
}

uint64_t type metadata accessor for SymmetricKey()
{
  return MEMORY[0x270EEAB30]();
}

uint64_t HashedAuthenticationCode.withUnsafeBytes<A>(_:)()
{
  return MEMORY[0x270EEAC18]();
}

uint64_t static AES.permute<A>(_:key:)()
{
  return MEMORY[0x270EEAD00]();
}

uint64_t HMAC.init(key:)()
{
  return MEMORY[0x270EEAD58]();
}

uint64_t HMAC.update<A>(data:)()
{
  return MEMORY[0x270EEAD60]();
}

uint64_t HMAC.finalize()()
{
  return MEMORY[0x270EEAD68]();
}

uint64_t type metadata accessor for HMAC()
{
  return MEMORY[0x270EEAD70]();
}

uint64_t type metadata accessor for SHA256()
{
  return MEMORY[0x270EEB090]();
}

uint64_t Array.init()()
{
  return MEMORY[0x270F9CFC0]();
}

uint64_t static BinaryFloatingPoint<>._convert<A>(from:)()
{
  return MEMORY[0x270F9D030]();
}

uint64_t dispatch thunk of BinaryFloatingPoint.init<A>(_:)()
{
  return MEMORY[0x270F9D050]();
}

uint64_t dispatch thunk of FloatingPoint.isInfinite.getter()
{
  return MEMORY[0x270F9D228]();
}

uint64_t dispatch thunk of FloatingPoint.isSubnormal.getter()
{
  return MEMORY[0x270F9D238]();
}

uint64_t dispatch thunk of static FloatingPoint./= infix(_:_:)()
{
  return MEMORY[0x270F9D280]();
}

uint64_t dispatch thunk of FloatingPoint.isNaN.getter()
{
  return MEMORY[0x270F9D2A8]();
}

uint64_t dispatch thunk of FloatingPoint.rounded(_:)()
{
  return MEMORY[0x270F9D2C8]();
}

uint64_t dispatch thunk of FloatingPoint.exponent.getter()
{
  return MEMORY[0x270F9D2D0]();
}

uint64_t dispatch thunk of FloatingPoint.init(_:)()
{
  return MEMORY[0x270F9D2F0]();
}

uint64_t dispatch thunk of FloatingPoint.init<A>(_:)()
{
  return MEMORY[0x270F9D2F8]();
}

uint64_t BidirectionalCollection.last.getter()
{
  return MEMORY[0x270F9D428]();
}

uint64_t dispatch thunk of static Comparable.> infix(_:_:)()
{
  return MEMORY[0x270F9D480]();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return MEMORY[0x270F9D488]();
}

uint64_t dispatch thunk of static Comparable.>= infix(_:_:)()
{
  return MEMORY[0x270F9D490]();
}

uint64_t dispatch thunk of static Comparable.<= infix(_:_:)()
{
  return MEMORY[0x270F9D498]();
}

uint64_t MutableCollection.subscript.getter()
{
  return MEMORY[0x270F9D4E8]();
}

uint64_t dispatch thunk of MutableCollection.subscript.modify()
{
  return MEMORY[0x270F9D528]();
}

uint64_t dispatch thunk of MutableCollection.subscript.setter()
{
  return MEMORY[0x270F9D530]();
}

uint64_t type metadata accessor for ClosedRange()
{
  return MEMORY[0x270F9D550]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x270F9D598]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x270F9D5E0]();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return MEMORY[0x270F9D6B8]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return MEMORY[0x270F9D7E8]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return MEMORY[0x270F9D800]();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return MEMORY[0x270F9D810]();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x270F9D860]();
}

uint64_t String.init<A>(_:radix:uppercase:)()
{
  return MEMORY[0x270F9D8A8]();
}

uint64_t String.init<A>(_:)()
{
  return MEMORY[0x270F9D8E0]();
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x270F9D8F0]();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return MEMORY[0x270F9D8F8]();
}

uint64_t dispatch thunk of Sequence.underestimatedCount.getter()
{
  return MEMORY[0x270F9D908]();
}

uint64_t Sequence.compactMap<A>(_:)()
{
  return MEMORY[0x270F9D938]();
}

uint64_t Sequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return MEMORY[0x270F9D968]();
}

uint64_t Sequence.reduce<A>(into:_:)()
{
  return MEMORY[0x270F9D9A0]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x270F9DBB0]();
}

uint64_t static Array._adoptStorage(_:count:)()
{
  return MEMORY[0x270F9DBC8]();
}

uint64_t Array._checkSubscript(_:wasNativeTypeChecked:)()
{
  return MEMORY[0x270F9DBD0]();
}

Swift::Void __swiftcall Array.reserveCapacity(_:)(Swift::Int a1)
{
}

Swift::Void __swiftcall Array._makeMutableAndUnique()()
{
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return MEMORY[0x270F9DC10]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x270F9DC20]();
}

Swift::Bool __swiftcall Array._hoistableIsNativeTypeChecked()()
{
  return MEMORY[0x270F9DC30]();
}

uint64_t static Array.+= infix(_:_:)()
{
  return MEMORY[0x270F9DC38]();
}

uint64_t Array.count.getter()
{
  return MEMORY[0x270F9DC60]();
}

uint64_t Array.append<A>(contentsOf:)()
{
  return MEMORY[0x270F9DC80]();
}

uint64_t Array.append(_:)()
{
  return MEMORY[0x270F9DC88]();
}

uint64_t Array.endIndex.getter()
{
  return MEMORY[0x270F9DCA8]();
}

uint64_t type metadata accessor for Array()
{
  return MEMORY[0x270F9DCD8]();
}

uint64_t static Array<A>.== infix(_:_:)()
{
  return MEMORY[0x270F9DCF8]();
}

uint64_t Array.init<A>(_:)()
{
  return MEMORY[0x270F9DD08]();
}

uint64_t Array.subscript.getter()
{
  return MEMORY[0x270F9DD10]();
}

{
  return MEMORY[0x270F9DD28]();
}

uint64_t Double.write<A>(to:)()
{
  return MEMORY[0x270F9DDA0]();
}

uint64_t Float.significandWidth.getter()
{
  return MEMORY[0x270F9DE18]();
}

uint64_t Float.exponent.getter()
{
  return MEMORY[0x270F9DE58]();
}

uint64_t dispatch thunk of static Numeric.* infix(_:_:)()
{
  return MEMORY[0x270F9E018]();
}

uint64_t dispatch thunk of Numeric.init<A>(exactly:)()
{
  return MEMORY[0x270F9E028]();
}

uint64_t dispatch thunk of Numeric.magnitude.getter()
{
  return MEMORY[0x270F9E030]();
}

uint64_t dispatch thunk of RandomAccessCollection.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x270F9E038]();
}

uint64_t dispatch thunk of RandomAccessCollection.index(_:offsetBy:)()
{
  return MEMORY[0x270F9E040]();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return MEMORY[0x270F9E080]();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return MEMORY[0x270F9E0A0]();
}

uint64_t dispatch thunk of Collection.index(after:)()
{
  return MEMORY[0x270F9E0A8]();
}

uint64_t dispatch thunk of Collection.index(_:offsetBy:)()
{
  return MEMORY[0x270F9E0B8]();
}

uint64_t dispatch thunk of Collection.isEmpty.getter()
{
  return MEMORY[0x270F9E0C8]();
}

uint64_t dispatch thunk of Collection.endIndex.getter()
{
  return MEMORY[0x270F9E0D8]();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return MEMORY[0x270F9E0E0]();
}

uint64_t Collection.first.getter()
{
  return MEMORY[0x270F9E140]();
}

uint64_t Collection.prefix(_:)()
{
  return MEMORY[0x270F9E168]();
}

uint64_t Collection.isEmpty.getter()
{
  return MEMORY[0x270F9E178]();
}

uint64_t Collection.dropFirst(_:)()
{
  return MEMORY[0x270F9E190]();
}

uint64_t dispatch thunk of Collection.subscript.getter()
{
  return MEMORY[0x270F9E1D8]();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return MEMORY[0x270F9E1E0]();
}

uint64_t dispatch thunk of RangeReplaceableCollection.append<A>(contentsOf:)()
{
  return MEMORY[0x270F9E210]();
}

uint64_t dispatch thunk of RangeReplaceableCollection.append(_:)()
{
  return MEMORY[0x270F9E218]();
}

uint64_t RangeReplaceableCollection<>.removeFirst()()
{
  return MEMORY[0x270F9E238]();
}

uint64_t type metadata accessor for Range()
{
  return MEMORY[0x270F9E330]();
}

uint64_t Range<>.startIndex.getter()
{
  return MEMORY[0x270F9E340]();
}

uint64_t Range<>.endIndex.getter()
{
  return MEMORY[0x270F9E348]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x270F9E3C0]();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return MEMORY[0x270F9E518]();
}

uint64_t UnsafeMutableRawBufferPointer.copyBytes<A>(from:)()
{
  return MEMORY[0x270F9E558]();
}

uint64_t dispatch thunk of Strideable.advanced(by:)()
{
  return MEMORY[0x270F9E570]();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return MEMORY[0x270EF23E8]();
}

uint64_t dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)()
{
  return MEMORY[0x270F9E5B8]();
}

uint64_t dispatch thunk of static BinaryInteger.& infix(_:_:)()
{
  return MEMORY[0x270F9E5C0]();
}

uint64_t dispatch thunk of static BinaryInteger./ infix(_:_:)()
{
  return MEMORY[0x270F9E5C8]();
}

uint64_t dispatch thunk of static BinaryInteger.~ prefix(_:)()
{
  return MEMORY[0x270F9E5E0]();
}

uint64_t dispatch thunk of static BinaryInteger.&= infix(_:_:)()
{
  return MEMORY[0x270F9E5F8]();
}

uint64_t dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)()
{
  return MEMORY[0x270F9E600]();
}

uint64_t dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)()
{
  return MEMORY[0x270F9E608]();
}

uint64_t dispatch thunk of static BinaryInteger.|= infix(_:_:)()
{
  return MEMORY[0x270F9E610]();
}

uint64_t dispatch thunk of static BinaryInteger.^= infix(_:_:)()
{
  return MEMORY[0x270F9E618]();
}

uint64_t dispatch thunk of BinaryInteger.words.getter()
{
  return MEMORY[0x270F9E630]();
}

uint64_t dispatch thunk of BinaryInteger._lowWord.getter()
{
  return MEMORY[0x270F9E640]();
}

uint64_t dispatch thunk of BinaryInteger.bitWidth.getter()
{
  return MEMORY[0x270F9E648]();
}

uint64_t dispatch thunk of static BinaryInteger.isSigned.getter()
{
  return MEMORY[0x270F9E650]();
}

uint64_t dispatch thunk of BinaryInteger.init<A>(_:)()
{
  return MEMORY[0x270F9E660]();
}

{
  return MEMORY[0x270F9E668]();
}

uint64_t ArraySlice.startIndex.getter()
{
  return MEMORY[0x270F9E6C0]();
}

Swift::Bool __swiftcall ArraySlice._hoistableIsNativeTypeChecked()()
{
  return MEMORY[0x270F9E6E0]();
}

uint64_t ArraySlice.count.getter()
{
  return MEMORY[0x270F9E6F8]();
}

uint64_t ArraySlice.endIndex.getter()
{
  return MEMORY[0x270F9E700]();
}

uint64_t type metadata accessor for ArraySlice()
{
  return MEMORY[0x270F9E708]();
}

uint64_t ArraySlice.subscript.getter()
{
  return MEMORY[0x270F9E710]();
}

{
  return MEMORY[0x270F9E720]();
}

uint64_t ArraySlice.init<A>(_:)()
{
  return MEMORY[0x270F9E718]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x270F9EA38]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x270F9EA40]();
}

uint64_t dispatch thunk of static SignedNumeric.- prefix(_:)()
{
  return MEMORY[0x270F9EB00]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x270F9EB28]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x270F9EB98]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x270F9EBC0]();
}

Swift::Void __swiftcall ContiguousArray.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x270F9EBE0]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x270F9EC08]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x270F9EC10]();
}

uint64_t ContiguousArray.append(_:)()
{
  return MEMORY[0x270F9EC48]();
}

uint64_t ContiguousArray.init()()
{
  return MEMORY[0x270F9EC88]();
}

uint64_t type metadata accessor for ContiguousArray()
{
  return MEMORY[0x270F9EC90]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x270F9ED70]();
}

uint64_t type metadata accessor for IndexingIterator()
{
  return MEMORY[0x270F9ED90]();
}

uint64_t dispatch thunk of static FixedWidthInteger.bitWidth.getter()
{
  return MEMORY[0x270F9EE10]();
}

uint64_t dispatch thunk of FixedWidthInteger.init(_truncatingBits:)()
{
  return MEMORY[0x270F9EE30]();
}

uint64_t dispatch thunk of FixedWidthInteger.leadingZeroBitCount.getter()
{
  return MEMORY[0x270F9EE40]();
}

uint64_t dispatch thunk of static FixedWidthInteger.&<< infix(_:_:)()
{
  return MEMORY[0x270F9EE60]();
}

uint64_t dispatch thunk of static FixedWidthInteger.max.getter()
{
  return MEMORY[0x270F9EE68]();
}

uint64_t dispatch thunk of static FixedWidthInteger.min.getter()
{
  return MEMORY[0x270F9EE70]();
}

uint64_t dispatch thunk of FixedWidthInteger.bigEndian.getter()
{
  return MEMORY[0x270F9EE78]();
}

uint64_t static FixedWidthInteger.random(in:)()
{
  return MEMORY[0x270F9EE98]();
}

{
  return MEMORY[0x270F9EEA0]();
}

uint64_t static FixedWidthInteger._convert<A>(from:)()
{
  return MEMORY[0x270F9EEB0]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x270F9EFF0]();
}

uint64_t dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)()
{
  return MEMORY[0x270F9F010]();
}

uint64_t dispatch thunk of static AdditiveArithmetic.- infix(_:_:)()
{
  return MEMORY[0x270F9F018]();
}

uint64_t dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)()
{
  return MEMORY[0x270F9F020]();
}

uint64_t dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)()
{
  return MEMORY[0x270F9F028]();
}

uint64_t dispatch thunk of static AdditiveArithmetic.zero.getter()
{
  return MEMORY[0x270F9F030]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x270F9F080]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x270F9F098]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x270F9F0A0]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x270F9F0B0]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x270F9F4E0]();
}

uint64_t type metadata accessor for FloatingPointRoundingRule()
{
  return MEMORY[0x270F9F750]();
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  return MEMORY[0x270F9F770]();
}

{
  return MEMORY[0x270F9F778]();
}

uint64_t dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)()
{
  return MEMORY[0x270F9F7B0]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return MEMORY[0x270F9F920]();
}

uint64_t dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)()
{
  return MEMORY[0x270F9FA80]();
}

uint64_t abs<A>(_:)()
{
  return MEMORY[0x270F9FA90]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x270F9FB18]();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return MEMORY[0x270F9FC40]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x270F9FC48]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt16 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt32 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x270F9FC90]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x270FA0128]();
}

uint64_t __udivti3()
{
  return MEMORY[0x270ED7F10]();
}

uint64_t __umodti3()
{
  return MEMORY[0x270ED7F28]();
}

uint64_t _swift_isClassOrObjCExistentialType()
{
  return MEMORY[0x270FA0150]();
}

void bzero(void *a1, size_t a2)
{
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t swift_allocError()
{
  return MEMORY[0x270FA0190]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x270FA01C8]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x270FA01E0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x270FA01F0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x270FA0200]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x270FA0208]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x270FA0228]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x270FA0268]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x270FA0278]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x270FA02C0]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x270FA02F8]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x270FA0300]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x270FA0330]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x270FA0370]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x270FA03B0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x270FA0400]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x270FA0410]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x270FA0428]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x270FA0430]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x270FA0440]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x270FA0448]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x270FA0458]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x270FA0460]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x270FA0478]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x270FA0488]();
}

uint64_t swift_isClassType()
{
  return MEMORY[0x270FA0490]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x270FA0550]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x270FA0570]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x270FA0588]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x270FA0598]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x270FA05A8]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x270FA0628]();
}