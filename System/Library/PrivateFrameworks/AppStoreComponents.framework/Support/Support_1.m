unint64_t sub_1000CD1D4()
{
  unint64_t result;

  result = qword_1001A3E40;
  if (!qword_1001A3E40)
  {
    sub_10002ED58(&qword_1001A3E30);
    result = swift_getWitnessTable();
    atomic_store(result, &qword_1001A3E40);
  }
  return result;
}

uint64_t sub_1000CD230(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000CD274()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000CD2BC(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = swift_task_alloc();
  long long v6 = *(_OWORD *)(v1 + 40);
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = sub_100053090;
  *(_OWORD *)(v5 + 32) = v6;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = v4;
  return _swift_task_switch(sub_1000CA884, 0, 0);
}

uint64_t sub_1000CD37C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000CD3B4(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10002F874;
  long long v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1001A3E58 + dword_1001A3E58);
  return v6(a1, v4);
}

uint64_t sub_1000CD46C()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000CD4AC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_10002F874;
  return sub_1000CBC88(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t destroy for DeviceAppDistribution(uint64_t a1)
{
  sub_10002ED08(a1);

  return sub_10002ED08(a1 + 40);
}

ValueMetadata *type metadata accessor for DeviceAppDistribution()
{
  return &type metadata for DeviceAppDistribution;
}

uint64_t initializeBufferWithCopyOfBuffer for DeviceAppQuery(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DeviceAppQuery(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for DeviceAppQuery(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DeviceAppQuery(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceAppQuery(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1000CD70C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_1000CD724(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DeviceAppQuery()
{
  return &type metadata for DeviceAppQuery;
}

void sub_1000CD74C(uint64_t a1, unint64_t a2, char a3)
{
  if (a3)
  {
    if (a3 == 1)
    {
      Hasher._combine(_:)(2uLL);
      Swift::UInt v5 = *(void *)(a2 + 16);
      Hasher._combine(_:)(v5);
      if (v5)
      {
        unint64_t v6 = a2 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v6 += 16;
          --v5;
        }
        while (v5);
      }
    }
    else
    {
      Hasher._combine(_:)(0);
    }
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    sub_1000CDD14(a1, a2);
  }
}

Swift::Int sub_1000CD81C()
{
  unint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  sub_1000CD74C((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void sub_1000CD86C(uint64_t a1)
{
  sub_1000CD74C(a1, *(void *)v1, *(unsigned char *)(v1 + 8));
}

Swift::Int sub_1000CD878()
{
  unint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  sub_1000CD74C((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

id sub_1000CD8C4(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)a1;
  int v5 = *(unsigned __int8 *)(a1 + 8);
  unint64_t v6 = *(void **)a2;
  int v7 = *(unsigned __int8 *)(a2 + 8);
  if (!v5)
  {
    if (!v7) {
      return sub_1000CD970((unint64_t)v4, (uint64_t)v6);
    }
    return 0;
  }
  if (v5 == 1)
  {
    if (v7 == 1) {
      return (id)sub_1000CDC4C(v4, v6);
    }
    return 0;
  }
  return (id)(v7 == 2 && v6 == 0);
}

unint64_t sub_1000CD91C()
{
  unint64_t result = qword_1001A3E80;
  if (!qword_1001A3E80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A3E80);
  }
  return result;
}

id sub_1000CD970(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  unint64_t v4 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5 == v29) {
      goto LABEL_5;
    }
LABEL_49:
    LOBYTE(v5) = 0;
    return (id)(v5 & 1);
  }
  if (v5 != *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_49;
  }
LABEL_5:
  if (!v5) {
    goto LABEL_38;
  }
  uint64_t v6 = v3 & 0xFFFFFFFFFFFFFF8;
  if (v3 < 0) {
    uint64_t v6 = v3;
  }
  if (!v4) {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFF8) + 32;
  }
  uint64_t v7 = a2 & 0xFFFFFFFFFFFFFF8;
  uint64_t v8 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = a2 & 0xFFFFFFFFFFFFFF8;
  }
  if ((unint64_t)a2 >> 62) {
    uint64_t v8 = v9;
  }
  if (v6 == v8)
  {
LABEL_38:
    LOBYTE(v5) = 1;
    return (id)(v5 & 1);
  }
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_55;
  }
  unint64_t v30 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) != 0) {
    goto LABEL_56;
  }
  for (id result = *(id *)(v3 + 32); ; id result = (id)specialized _ArrayBuffer._getElementSlowPath(_:)())
  {
    v11 = result;
    if ((a2 & 0xC000000000000001) == 0) {
      break;
    }
    id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_22:
    v13 = v12;
    sub_10007AC00();
    char v14 = static NSObject.== infix(_:_:)();

    if ((v14 & 1) == 0) {
      goto LABEL_49;
    }
    unint64_t v15 = v5 - 1;
    if (v5 == 1) {
      return (id)(v5 & 1);
    }
    if (((a2 | v3) & 0xC000000000000001) != 0)
    {
      uint64_t v16 = 0;
      unint64_t v17 = v5 - 2;
      while (v15 != v16)
      {
        unint64_t v5 = v16 + 1;
        if (v30) {
          id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v18 = *(id *)(v3 + 40 + 8 * v16);
        }
        v19 = v18;
        if ((a2 & 0xC000000000000001) != 0)
        {
          id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v5 >= *(void *)(v7 + 16)) {
            goto LABEL_54;
          }
          id v20 = *(id *)(a2 + 40 + 8 * v16);
        }
        v21 = v20;
        unint64_t v5 = static NSObject.== infix(_:_:)();

        if ((v5 & 1) != 0 && v17 != v16++) {
          continue;
        }
        return (id)(v5 & 1);
      }
      __break(1u);
    }
    else
    {
      unint64_t v23 = *(void *)(v7 + 16);
      if (v23 <= 1) {
        unint64_t v23 = 1;
      }
      unint64_t v24 = v23 - 1;
      v25 = (void **)(v3 + 40);
      uint64_t v7 = a2 + 40;
      while (v15)
      {
        if (!v24) {
          goto LABEL_53;
        }
        v27 = *v25++;
        v26 = v27;
        v28 = *(void **)v7;
        v7 += 8;
        a2 = v26;
        uint64_t v3 = v28;
        unint64_t v5 = static NSObject.== infix(_:_:)();

        if (v5)
        {
          --v24;
          if (--v15) {
            continue;
          }
        }
        return (id)(v5 & 1);
      }
    }
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    ;
  }
  if (*(void *)(v7 + 16))
  {
    id v12 = *(id *)(a2 + 32);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000CDC4C(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    uint64_t v9 = a1 + 7;
    for (i = a2 + 7; ; i += 2)
    {
      BOOL v11 = *(v9 - 1) == *(i - 1) && *v9 == *i;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

void sub_1000CDD14(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    Swift::UInt v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(v8);
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v3) {
      return;
    }
  }
  else
  {
    Hasher._combine(_:)(*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10));
    uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v3) {
      return;
    }
  }
  if (v3 < 1)
  {
    __break(1u);
  }
  else if ((a2 & 0xC000000000000001) != 0)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
      NSObject.hash(into:)();
      swift_unknownObjectRelease();
    }
  }
  else
  {
    BOOL v5 = (void **)(a2 + 32);
    do
    {
      char v6 = *v5++;
      id v7 = v6;
      NSObject.hash(into:)();

      --v3;
    }
    while (v3);
  }
}

uint64_t sub_1000CDE30()
{
  uint64_t v0 = type metadata accessor for OSLogger.Subsystem();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OSLogger();
  sub_10002F648(v4, qword_1001AE300);
  sub_10002F6AC(v4, (uint64_t)qword_1001AE300);
  if (qword_1001A0E58 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_10002F6AC(v0, (uint64_t)qword_1001AE350);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return OSLogger.init(subsystem:category:)();
}

void sub_1000CDF84(unint64_t a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    sub_1000CDFE0(a1);
  }
}

uint64_t sub_1000CDFE0(unint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v59 = *(void *)(v2 - 8);
  uint64_t v60 = v2;
  __chkstk_darwin(v2);
  v57 = (char *)v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v4 - 8);
  char v6 = (char *)v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OSLogger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = a1;
  v70 = sub_1000CE81C;
  uint64_t v71 = 0;
  swift_bridgeObjectRetain();
  sub_10002EB60(&qword_1001A3EF0);
  sub_1000D21E4();
  uint64_t v11 = BidirectionalCollection<>.joined(separator:)();
  v13 = v12;
  swift_bridgeObjectRelease();
  if (qword_1001A0E10 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_10002F6AC(v7, (uint64_t)qword_1001AE300);
  unint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v55 = v14;
  uint64_t v56 = v8 + 16;
  v54 = v15;
  ((void (*)(char *))v15)(v10);
  uint64_t v16 = sub_10002EB60((uint64_t *)&unk_1001A19E0);
  uint64_t v17 = *(void *)(type metadata accessor for LogMessage() - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = (v18 + 32) & ~v18;
  uint64_t v20 = v19 + *(void *)(v17 + 72);
  uint64_t v53 = v16;
  uint64_t v51 = v20;
  uint64_t v50 = v18 | 7;
  uint64_t v21 = swift_allocObject();
  long long v65 = xmmword_10014CED0;
  *(_OWORD *)(v21 + 16) = xmmword_10014CED0;
  uint64_t v52 = v19;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v22._countAndFlagsBits = 0xD00000000000001DLL;
  v22._object = (void *)0x800000010015E3F0;
  LogMessage.StringInterpolation.appendLiteral(_:)(v22);
  v72 = &type metadata for String;
  uint64_t v69 = v11;
  v70 = v13;
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_1000709E0((uint64_t)&v69);
  v23._countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v23);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  unint64_t v24 = (void (**)(char *, uint64_t))(v8 + 8);
  v25 = *v24;
  (*v24)(v10, v7);
  v64 = v6;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v26 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
  sub_100062134();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v28 = result;
  uint64_t v69 = result;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v29 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v62 = v24;
  uint64_t v63 = v7;
  v61 = v10;
  v49 = v25;
  uint64_t v48 = v26;
  if (v29)
  {
    if (v29 < 1)
    {
      __break(1u);
      return result;
    }
    uint64_t v30 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v31 = *(id *)(a1 + 8 * v30 + 32);
      }
      v32 = v31;
      ++v30;
      id v33 = objc_msgSend(objc_allocWithZone((Class)ASCAdamID), "initWithInt64:", objc_msgSend(v31, "storeItemID"));

      sub_10009812C(&v68, v33);
    }
    while (v29 != v30);
    swift_bridgeObjectRelease();
    uint64_t v47 = v69;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v47 = v28;
  }
  uint64_t v34 = v58;
  swift_unknownObjectWeakInit();
  v67 = &_swiftEmptySetSingleton;
  v46[1] = *(void *)(v34 + OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_workQueue);
  sub_10002EB60(&qword_1001A2880);
  uint64_t v35 = v59;
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = v65;
  static DispatchWorkItemFlags.barrier.getter();
  uint64_t v69 = v36;
  sub_1000A8E90();
  sub_10002EB60((uint64_t *)&unk_1001A31A0);
  sub_100061D9C((unint64_t *)&qword_1001A2890, (uint64_t *)&unk_1001A31A0);
  v37 = v57;
  uint64_t v38 = v60;
  uint64_t v39 = dispatch thunk of SetAlgebra.init<A>(_:)();
  __chkstk_darwin(v39);
  v46[-4] = a1;
  v46[-3] = v34;
  v46[-2] = &v67;
  v46[-1] = v47;
  OS_dispatch_queue.sync<A>(flags:execute:)();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v38);
  v40 = v61;
  uint64_t v41 = v63;
  v54(v61, v55, v63);
  *(_OWORD *)(swift_allocObject() + 16) = v65;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v42._object = (void *)0x800000010015E230;
  v42._countAndFlagsBits = 0xD000000000000018;
  LogMessage.StringInterpolation.appendLiteral(_:)(v42);
  v72 = &type metadata for Int;
  uint64_t v69 = v48;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_1000709E0((uint64_t)&v69);
  v43._countAndFlagsBits = 0x7370706120;
  v43._object = (void *)0xE500000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v43);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  v49(v40, v41);
  v44 = v67;
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    swift_bridgeObjectRetain();
    swift_retain();

    v66 = v44;
    SyncEvent.post(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_unknownObjectWeakDestroy();
}

void sub_1000CE81C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = *a1;
  id v38 = [*a1 storeItemID];
  dispatch thunk of CustomStringConvertible.description.getter();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = (id)AMSHashIfNeeded();

  if (v5)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = (void *)0xE000000000000000;
  }
  id v9 = objc_msgSend(v3, "progress", v38);
  if (v9)
  {
    v10 = v9;
    uint64_t v39 = v6;
    unint64_t v40 = (unint64_t)v8;
    v11._countAndFlagsBits = 8250;
    v11._object = (void *)0xE200000000000000;
    String.append(_:)(v11);
    id v12 = v10;
    id v13 = [v12 description];
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;

    v17._countAndFlagsBits = v14;
    v17._object = v16;
    String.append(_:)(v17);

    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v39 = 0;
    unint64_t v40 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v18._countAndFlagsBits = v6;
    v18._object = v8;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 0x6C646E75423C203ALL;
    v19._object = (void *)0xEC0000003D444965;
    String.append(_:)(v19);
    id v20 = [v3 bundleID];
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v23 = v22;

    v24._countAndFlagsBits = v21;
    v24._object = v23;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._countAndFlagsBits = 0x6C6174736E49202CLL;
    v25._object = (void *)0xEC0000003D64656CLL;
    String.append(_:)(v25);
    unsigned int v26 = [v3 isInstalled];
    BOOL v27 = v26 == 0;
    if (v26) {
      uint64_t v28 = 1702195828;
    }
    else {
      uint64_t v28 = 0x65736C6166;
    }
    if (v27) {
      unint64_t v29 = 0xE500000000000000;
    }
    else {
      unint64_t v29 = 0xE400000000000000;
    }
    unint64_t v30 = v29;
    String.append(_:)(*(Swift::String *)&v28);
    swift_bridgeObjectRelease();
    v31._object = (void *)0x800000010015E410;
    v31._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v31);
    unsigned int v32 = [v3 isLaunchProhibited];
    BOOL v33 = v32 == 0;
    if (v32) {
      uint64_t v34 = 1702195828;
    }
    else {
      uint64_t v34 = 0x65736C6166;
    }
    if (v33) {
      unint64_t v35 = 0xE500000000000000;
    }
    else {
      unint64_t v35 = 0xE400000000000000;
    }
    unint64_t v36 = v35;
    String.append(_:)(*(Swift::String *)&v34);
    swift_bridgeObjectRelease();
    v37._countAndFlagsBits = 62;
    v37._object = (void *)0xE100000000000000;
    String.append(_:)(v37);
  }
  *a2 = v39;
  a2[1] = v40;
}

id sub_1000CEAD8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v5 = v4;
  uint64_t v7 = (uint64_t)&_swiftEmptySetSingleton;
  v90 = &_swiftEmptySetSingleton;
  int64_t v75 = a1;
  if (a1 >> 62)
  {
LABEL_73:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  id v9 = &off_1001A3000;
  uint64_t v71 = v5;
  if (v8)
  {
    if (v8 < 1)
    {
      __break(1u);
      goto LABEL_75;
    }
    uint64_t v72 = a4;
    uint64_t v10 = 0;
    v82 = (uint64_t *)(a2 + OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_expectedAppStates);
    int64_t v11 = v75;
    uint64_t v78 = v8;
    while (1)
    {
      if ((v75 & 0xC000000000000001) != 0) {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v12 = *(id *)(v11 + 8 * v10 + 32);
      }
      id v13 = v12;
      uint64_t v14 = sub_1000CF4D8(v12);
      if (v16 == -1)
      {
      }
      else
      {
        uint64_t v17 = v14;
        uint64_t v18 = v15;
        char v19 = v16;
        id v20 = objc_msgSend(objc_allocWithZone((Class)ASCAdamID), "initWithInt64:", objc_msgSend(v13, "storeItemID"));
        sub_10009812C(v89, v20);

        swift_beginAccess();
        uint64_t v21 = *v82;
        v84 = v13;
        if (!*(void *)(*v82 + 16)) {
          goto LABEL_17;
        }
        id v22 = v20;
        unint64_t v23 = sub_10003A9B4((uint64_t)v22);
        if ((v24 & 1) == 0)
        {

LABEL_17:
          uint64_t v31 = v17;
          uint64_t v33 = v18;
          swift_endAccess();
LABEL_18:
          swift_beginAccess();
          id v35 = v20;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v88 = *v82;
          uint64_t *v82 = 0x8000000000000000;
          sub_10003F4F0(v31, v33, v19, v35, isUniquelyReferenced_nonNull_native);
          uint64_t *v82 = v88;

          swift_bridgeObjectRelease();
          swift_endAccess();
          id v37 = v35;
          sub_10009812C(v89, v37);

          uint64_t v8 = v78;
          goto LABEL_7;
        }
        uint64_t v25 = *(void *)(v21 + 56) + 24 * v23;
        unsigned int v26 = v22;
        uint64_t v27 = v18;
        uint64_t v29 = *(void *)v25;
        uint64_t v28 = *(void *)(v25 + 8);
        char v30 = *(unsigned char *)(v25 + 16);
        swift_endAccess();
        sub_100042814(v29, v28, v30);
        v73 = v26;

        sub_100042814(v29, v28, v30);
        sub_1000D2110(v17, v27, v19);
        char v76 = sub_100067A4C(v29, v28, v30, v17, v27, v19);
        uint64_t v31 = v17;
        uint64_t v32 = v17;
        uint64_t v33 = v27;
        sub_100067F10(v32, v27, v19);
        sub_10004282C(v29, v28, v30);
        char v34 = v30;
        int64_t v11 = v75;
        sub_10004282C(v29, v28, v34);
        if ((v76 & 1) == 0) {
          goto LABEL_18;
        }

        sub_100067F10(v31, v27, v19);
        uint64_t v8 = v78;
      }
LABEL_7:
      if (v8 == ++v10)
      {
        swift_bridgeObjectRelease();
        unint64_t v83 = (unint64_t)v90;
        a4 = v72;
        uint64_t v7 = (uint64_t)&_swiftEmptySetSingleton;
        id v9 = &off_1001A3000;
        goto LABEL_21;
      }
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v83 = (unint64_t)&_swiftEmptySetSingleton;
LABEL_21:
  id v5 = (id *)((char *)v9[469] + a2);
  swift_beginAccess();
  uint64_t v87 = v7;
  uint64_t v38 = swift_bridgeObjectRetain();
  sub_100039954(v38);
  Swift::Int v40 = v39;
  if (a4)
  {
    uint64_t v41 = swift_bridgeObjectRetain();
    Swift::Int v40 = sub_1000D18D8(v41, v40);
    swift_bridgeObjectRelease();
  }
  v79 = v5;
  if ((v40 & 0xC000000000000001) != 0)
  {
    id v5 = (id *)__CocoaSet.makeIterator()();
    a4 = sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
    sub_100062134();
    Set.Iterator.init(_cocoa:)();
    Swift::Int v40 = (Swift::Int)v89[0];
    v77 = v89[1];
    uint64_t v42 = (uint64_t)v89[2];
    uint64_t v43 = (uint64_t)v89[3];
    unint64_t v44 = (unint64_t)v89[4];
  }
  else
  {
    uint64_t v43 = 0;
    uint64_t v45 = -1 << *(unsigned char *)(v40 + 32);
    v77 = (void *)(v40 + 56);
    uint64_t v42 = ~v45;
    uint64_t v46 = -v45;
    if (v46 < 64) {
      uint64_t v47 = ~(-1 << v46);
    }
    else {
      uint64_t v47 = -1;
    }
    unint64_t v44 = v47 & *(void *)(v40 + 56);
  }
  uint64_t v70 = v42;
  int64_t v75 = (unint64_t)(v42 + 64) >> 6;
  unint64_t v48 = v83 & 0xC000000000000001;
  v74 = (char *)(v83 + 56);
  while (1)
  {
    if (v40 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_68;
      }
      sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v54 = v86;
      swift_unknownObjectRelease();
      uint64_t v7 = v43;
      uint64_t v52 = v44;
      if (!v54) {
        goto LABEL_68;
      }
      goto LABEL_55;
    }
    if (v44)
    {
      uint64_t v52 = (v44 - 1) & v44;
      unint64_t v53 = __clz(__rbit64(v44)) | (v43 << 6);
      uint64_t v7 = v43;
      goto LABEL_54;
    }
    uint64_t v55 = v43 + 1;
    if (__OFADD__(v43, 1))
    {
      __break(1u);
      goto LABEL_73;
    }
    if (v55 >= v75) {
      goto LABEL_68;
    }
    unint64_t v56 = v77[v55];
    uint64_t v7 = v43 + 1;
    if (!v56)
    {
      uint64_t v7 = v43 + 2;
      if (v43 + 2 >= v75) {
        goto LABEL_68;
      }
      unint64_t v56 = v77[v7];
      if (!v56)
      {
        uint64_t v7 = v43 + 3;
        if (v43 + 3 >= v75) {
          goto LABEL_68;
        }
        unint64_t v56 = v77[v7];
        if (!v56)
        {
          uint64_t v7 = v43 + 4;
          if (v43 + 4 >= v75) {
            goto LABEL_68;
          }
          unint64_t v56 = v77[v7];
          if (!v56)
          {
            uint64_t v7 = v43 + 5;
            if (v43 + 5 >= v75) {
              goto LABEL_68;
            }
            unint64_t v56 = v77[v7];
            if (!v56) {
              break;
            }
          }
        }
      }
    }
LABEL_53:
    uint64_t v52 = (v56 - 1) & v56;
    unint64_t v53 = __clz(__rbit64(v56)) + (v7 << 6);
LABEL_54:
    id v54 = *(id *)(*(void *)(v40 + 48) + 8 * v53);
    if (!v54) {
      goto LABEL_68;
    }
LABEL_55:
    unint64_t v85 = v52;
    if (v48)
    {
      id v5 = (id *)v54;
      a4 = __CocoaSet.contains(_:)();

      if ((a4 & 1) == 0) {
        goto LABEL_65;
      }

      uint64_t v43 = v7;
      unint64_t v44 = v85;
    }
    else
    {
      if (!*(void *)(v83 + 16)) {
        goto LABEL_65;
      }
      Swift::Int v58 = NSObject._rawHashValue(seed:)(*(void *)(v83 + 40));
      uint64_t v59 = -1 << *(unsigned char *)(v83 + 32);
      unint64_t v60 = v58 & ~v59;
      if (((*(void *)&v74[(v60 >> 3) & 0xFFFFFFFFFFFFFF8] >> v60) & 1) == 0) {
        goto LABEL_65;
      }
      uint64_t v43 = v7;
      a4 = sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
      id v5 = (id *)*(id *)(*(void *)(v83 + 48) + 8 * v60);
      uint64_t v7 = static NSObject.== infix(_:_:)();

      if (v7)
      {
LABEL_64:

        unint64_t v44 = v85;
      }
      else
      {
        uint64_t v61 = ~v59;
        while (1)
        {
          unint64_t v60 = (v60 + 1) & v61;
          uint64_t v7 = v43;
          if (((*(void *)&v74[(v60 >> 3) & 0xFFFFFFFFFFFFFF8] >> v60) & 1) == 0) {
            break;
          }
          id v5 = (id *)*(id *)(*(void *)(v83 + 48) + 8 * v60);
          uint64_t v7 = static NSObject.== infix(_:_:)();

          if (v7) {
            goto LABEL_64;
          }
        }
LABEL_65:
        uint64_t v43 = v7;
        swift_bridgeObjectRetain();
        unint64_t v62 = sub_10003A9B4((uint64_t)v54);
        uint64_t v7 = v63;
        swift_bridgeObjectRelease();
        if (v7)
        {
          char v64 = swift_isUniquelyReferenced_nonNull_native();
          long long v65 = *v79;
          id v86 = *v79;
          id *v79 = (id)0x8000000000000000;
          if ((v64 & 1) == 0)
          {
            sub_1000402A4();
            long long v65 = v86;
          }

          uint64_t v49 = v65[7] + 24 * v62;
          uint64_t v7 = *(void *)v49;
          uint64_t v50 = *(void *)(v49 + 8);
          char v51 = *(unsigned char *)(v49 + 16);
          sub_10003E678(v62, (uint64_t)v65);
          id *v79 = v65;
          swift_bridgeObjectRelease();
          sub_10004282C(v7, v50, v51);
          unint64_t v48 = v83 & 0xC000000000000001;
        }
        id v5 = (id *)v54;
        sub_10009812C(&v86, v5);

        a4 = a3;
        sub_10009812C(&v86, v5);

        unint64_t v44 = v85;
      }
    }
  }
  v57 = (char *)(v43 + 6);
  while ((char *)v75 != v57)
  {
    unint64_t v56 = v77[(void)v57++];
    if (v56)
    {
      uint64_t v7 = (uint64_t)(v57 - 1);
      goto LABEL_53;
    }
  }
LABEL_68:
  sub_100034EF8();
  uint64_t v66 = v87;
  swift_endAccess();
  swift_bridgeObjectRelease();
  uint64_t v67 = *sub_10002EC6C((void *)(a2 + OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_availableUpdatesRegistry), *(void *)(a2 + OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_availableUpdatesRegistry + 24));
  if (qword_1001A0E00 != -1) {
    swift_once();
  }
  uint64_t v68 = type metadata accessor for OSLogger();
  sub_10002F6AC(v68, (uint64_t)qword_1001A3CE0);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.init(stringLiteral:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  a4 = *(void *)(v67 + 24);
  [(id)a4 lock];
  sub_1000C7D9C(v66, v67);
  if (!v71)
  {
    [(id)a4 unlock];
    return (id)swift_bridgeObjectRelease();
  }
LABEL_75:
  id result = objc_msgSend((id)a4, "unlock", v70);
  __break(1u);
  return result;
}

uint64_t sub_1000CF4D8(void *a1)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for OSLogger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v73 = objc_msgSend(objc_allocWithZone((Class)ASCAdamID), "initWithInt64:", objc_msgSend(a1, "storeItemID"));
  id v7 = a1;
  uint64_t v74 = sub_1000629DC(v7);
  if (v9 != -1)
  {
    char v10 = v9;
    uint64_t v71 = (void *)v8;
    if (qword_1001A0E10 != -1) {
      swift_once();
    }
    uint64_t v11 = sub_10002F6AC(v3, (uint64_t)qword_1001AE300);
    id v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    uint64_t v70 = v11;
    char v64 = v12;
    ((void (*)(char *))v12)(v6);
    uint64_t v13 = sub_10002EB60((uint64_t *)&unk_1001A19E0);
    uint64_t v14 = *(void *)(type metadata accessor for LogMessage() - 8);
    uint64_t v15 = *(void *)(v14 + 72);
    uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
    uint64_t v17 = (v16 + 32) & ~v16;
    uint64_t v68 = v13;
    uint64_t v65 = v17 + v15;
    uint64_t v66 = v16 | 7;
    uint64_t v18 = swift_allocObject();
    long long v67 = xmmword_10014CED0;
    *(_OWORD *)(v18 + 16) = xmmword_10014CED0;
    uint64_t v69 = v17;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v19._countAndFlagsBits = 0xD000000000000017;
    v19._object = (void *)0x800000010015E2A0;
    LogMessage.StringInterpolation.appendLiteral(_:)(v19);
    uint64_t v78 = (ValueMetadata *)sub_10002EE34(0, (unint64_t *)&unk_1001A3190);
    uint64_t v75 = (uint64_t)v7;
    id v63 = v7;
    LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
    sub_1000709E0((uint64_t)&v75);
    v20._countAndFlagsBits = 544434464;
    v20._object = (void *)0xE400000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v20);
    uint64_t v78 = &type metadata for AppState_V1;
    uint64_t v75 = v74;
    id v76 = v71;
    LOBYTE(v77) = v10;
    sub_100042814(v74, (uint64_t)v71, v10);
    LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
    sub_1000709E0((uint64_t)&v75);
    v21._countAndFlagsBits = 0;
    v21._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v21);
    LogMessage.init(stringInterpolation:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    id v22 = *(void (**)(char *, uint64_t))(v4 + 8);
    v22(v6, v3);
    unint64_t v23 = (char *)v72 + OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_availableUpdatesRegistry;
    char v24 = sub_10002EC6C((void *)((char *)v72+ OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_availableUpdatesRegistry), *(void *)((char *)v72+ OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_availableUpdatesRegistry+ 24));
    uint64_t v25 = *v24;
    unsigned int v26 = *(void **)(*v24 + 24);
    [v26 lock];
    swift_beginAccess();
    uint64_t v27 = *(void *)(v25 + 16);
    if (*(void *)(v27 + 16))
    {
      uint64_t v72 = v22;
      id v28 = v73;
      swift_bridgeObjectRetain();
      unint64_t v29 = sub_10003A9B4((uint64_t)v28);
      if (v30)
      {
        unint64_t v60 = v23;
        uint64_t v31 = (uint64_t *)(*(void *)(v27 + 56) + 24 * v29);
        uint64_t v62 = *v31;
        uint64_t v32 = (void *)v31[2];
        uint64_t v61 = (void *)v31[1];
        swift_bridgeObjectRetain();

        swift_bridgeObjectRelease();
        [v26 unlock];
        if (v32)
        {
          v64(v6, v70, v3);
          uint64_t v33 = swift_allocObject();
          *(_OWORD *)(v33 + 16) = v67;
          uint64_t v59 = v33 + v69;
          LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
          v34._countAndFlagsBits = 0xD000000000000029;
          v34._object = (void *)0x800000010015E2C0;
          LogMessage.StringInterpolation.appendLiteral(_:)(v34);
          uint64_t v75 = v62;
          id v76 = v61;
          v77 = v32;
          uint64_t v78 = &type metadata for AvailableUpdate;
          id v73 = v32;
          swift_bridgeObjectRetain();
          LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
          sub_1000709E0((uint64_t)&v75);
          v35._countAndFlagsBits = 0x70706120726F6620;
          v35._object = (void *)0xE900000000000020;
          LogMessage.StringInterpolation.appendLiteral(_:)(v35);
          uint64_t v58 = sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
          uint64_t v78 = (ValueMetadata *)v58;
          uint64_t v75 = (uint64_t)v28;
          id v36 = v28;
          LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
          sub_1000709E0((uint64_t)&v75);
          v37._countAndFlagsBits = 0;
          v37._object = (void *)0xE000000000000000;
          LogMessage.StringInterpolation.appendLiteral(_:)(v37);
          LogMessage.init(stringInterpolation:)();
          Logger.info(_:)();
          swift_bridgeObjectRelease();
          v72(v6, v3);
          if (v10 == 5 && (sub_100042814(v74, (uint64_t)v71, 5), [v63 storeItemID]) && v71)
          {
            id v63 = v36;
            uint64_t v38 = (uint64_t)v71;
            uint64_t v39 = v62;
            Swift::Int v40 = v60;
            if ((uint64_t)v71 >= v62)
            {
              swift_bridgeObjectRelease();
              *(_OWORD *)(swift_allocObject() + 16) = v67;
              LogMessage.init(stringLiteral:)();
              Logger.info(_:)();
              swift_bridgeObjectRelease();
              sub_10002EC6C(v40, *((void *)v40 + 3));
              unint64_t v56 = v63;
              sub_1000C7AB8(v63);
            }
            else
            {
              v64(v6, v70, v3);
              uint64_t v41 = swift_allocObject();
              *(_OWORD *)(v41 + 16) = v67;
              uint64_t v74 = v41 + v69;
              LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
              v42._countAndFlagsBits = 0xD000000000000027;
              v42._object = (void *)0x800000010015E340;
              LogMessage.StringInterpolation.appendLiteral(_:)(v42);
              uint64_t v78 = (ValueMetadata *)&type metadata for Int64;
              uint64_t v75 = v39;
              LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
              sub_1000709E0((uint64_t)&v75);
              v43._countAndFlagsBits = 0xD000000000000021;
              v43._object = (void *)0x800000010015E370;
              LogMessage.StringInterpolation.appendLiteral(_:)(v43);
              uint64_t v78 = (ValueMetadata *)&type metadata for Int64;
              uint64_t v75 = v38;
              LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
              sub_1000709E0((uint64_t)&v75);
              v44._object = (void *)0x800000010015E3A0;
              v44._countAndFlagsBits = 0xD000000000000013;
              LogMessage.StringInterpolation.appendLiteral(_:)(v44);
              uint64_t v78 = &type metadata for AppState_V1;
              uint64_t v45 = v61;
              uint64_t v75 = (uint64_t)v61;
              id v76 = v73;
              LOBYTE(v77) = 2;
              swift_bridgeObjectRetain();
              LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
              sub_1000709E0((uint64_t)&v75);
              v46._countAndFlagsBits = 0;
              v46._object = (void *)0xE000000000000000;
              LogMessage.StringInterpolation.appendLiteral(_:)(v46);
              LogMessage.init(stringInterpolation:)();
              Logger.info(_:)();

              swift_bridgeObjectRelease();
              v72(v6, v3);
              return (uint64_t)v45;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            v64(v6, v70, v3);
            *(_OWORD *)(swift_allocObject() + 16) = v67;
            LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
            v53._countAndFlagsBits = 0xD00000000000002CLL;
            v53._object = (void *)0x800000010015E2F0;
            LogMessage.StringInterpolation.appendLiteral(_:)(v53);
            uint64_t v78 = (ValueMetadata *)v58;
            uint64_t v75 = (uint64_t)v36;
            id v54 = v36;
            LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
            sub_1000709E0((uint64_t)&v75);
            v55._object = (void *)0xE900000000000065;
            v55._countAndFlagsBits = 0x6C61747320736920;
            LogMessage.StringInterpolation.appendLiteral(_:)(v55);
            LogMessage.init(stringInterpolation:)();
            Logger.info(_:)();
            swift_bridgeObjectRelease();
            v72(v6, v3);
            sub_10002EC6C(v60, *((void *)v60 + 3));
            sub_1000C7AB8(v54);
          }
          return v74;
        }
LABEL_17:

        return v74;
      }

      swift_bridgeObjectRelease();
    }
    [v26 unlock];
    goto LABEL_17;
  }
  if (qword_1001A0E10 != -1) {
    swift_once();
  }
  uint64_t v47 = sub_10002F6AC(v3, (uint64_t)qword_1001AE300);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v47, v3);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v48._countAndFlagsBits = 0xD000000000000025;
  v48._object = (void *)0x800000010015E270;
  LogMessage.StringInterpolation.appendLiteral(_:)(v48);
  uint64_t v78 = (ValueMetadata *)sub_10002EE34(0, (unint64_t *)&unk_1001A3190);
  uint64_t v75 = (uint64_t)v7;
  id v49 = v7;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_1000709E0((uint64_t)&v75);
  v50._countAndFlagsBits = 0;
  v50._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v50);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_10002EC6C((void *)((char *)v72 + OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_availableUpdatesRegistry), *(void *)((char *)v72+ OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_availableUpdatesRegistry+ 24));
  char v51 = v73;
  sub_1000C7AB8(v73);

  return v74;
}

uint64_t sub_1000CFFFC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (uint64_t *)(a1 + OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_expectedAppStates);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (*(void *)(v6 + 16))
  {
    id v7 = a2;
    unint64_t v8 = sub_10003A9B4((uint64_t)v7);
    if (v9)
    {
      uint64_t v10 = *(void *)(v6 + 56) + 24 * v8;
      uint64_t v11 = *(void *)v10;
      uint64_t v12 = *(void *)(v10 + 8);
      char v13 = *(unsigned char *)(v10 + 16);
      sub_100042814(*(void *)v10, v12, v13);
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      char v13 = -1;
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    char v13 = -1;
  }
  *(void *)a3 = v11;
  *(void *)(a3 + 8) = v12;
  *(unsigned char *)(a3 + 16) = v13;
  return swift_endAccess();
}

uint64_t sub_1000D00D4(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  sub_1000A593C(*(void *)(v2 + OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_query), *(unsigned char *)(v2 + OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_query + 8));
  uint64_t v6 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v7 = (void *)swift_allocObject();
  v7[2] = v6;
  v7[3] = a1;
  v7[4] = a2;
  unint64_t v8 = (void *)swift_allocObject();
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = ObjectType;
  v10[3] = type metadata accessor for SyncTaskScheduler();
  v10[4] = (uint64_t)&protocol witness table for SyncTaskScheduler;
  sub_100031A88(v10);
  swift_retain_n();
  SyncTaskScheduler.init()();
  Promise.then(perform:orCatchError:on:)();
  swift_release();
  swift_release();
  swift_release();
  return sub_10002ED08((uint64_t)v10);
}

uint64_t sub_1000D022C(unint64_t *a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for OSLogger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v36 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v37 = *a1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return a3();
  }
  uint64_t v16 = (void *)Strong;
  uint64_t v34 = v9;
  uint64_t v32 = a3;
  swift_beginAccess();
  uint64_t v17 = (void *)swift_unknownObjectWeakLoadStrong();
  swift_unknownObjectWeakInit();

  Swift::Int v40 = &_swiftEmptySetSingleton;
  sub_10002EB60(&qword_1001A2880);
  uint64_t v18 = swift_allocObject();
  long long v33 = xmmword_10014CED0;
  *(_OWORD *)(v18 + 16) = xmmword_10014CED0;
  uint64_t v35 = a4;
  swift_retain();
  static DispatchWorkItemFlags.barrier.getter();
  v39[0] = v18;
  sub_1000A8E90();
  sub_10002EB60((uint64_t *)&unk_1001A31A0);
  sub_100061D9C((unint64_t *)&qword_1001A2890, (uint64_t *)&unk_1001A31A0);
  uint64_t v19 = dispatch thunk of SetAlgebra.init<A>(_:)();
  __chkstk_darwin(v19);
  *(&v31 - 4) = v37;
  *(&v31 - 3) = (uint64_t)v16;
  Swift::String v20 = v16;
  *(&v31 - 2) = (uint64_t)&v40;
  *(&v31 - 1) = 0;
  OS_dispatch_queue.sync<A>(flags:execute:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if (qword_1001A0E10 != -1) {
    swift_once();
  }
  uint64_t v21 = sub_10002F6AC(v8, (uint64_t)qword_1001AE300);
  uint64_t v22 = v34;
  unint64_t v23 = v36;
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v36, v21, v8);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = v33;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v24._object = (void *)0x800000010015E230;
  v24._countAndFlagsBits = 0xD000000000000018;
  LogMessage.StringInterpolation.appendLiteral(_:)(v24);
  if (v37 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v25 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v39[3] = &type metadata for Int;
  v39[0] = v25;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_1000709E0((uint64_t)v39);
  v26._countAndFlagsBits = 0x7370706120;
  v26._object = (void *)0xE500000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v26);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v23, v8);
  uint64_t v27 = v40;
  swift_beginAccess();
  uint64_t v28 = swift_unknownObjectWeakLoadStrong();
  if (v28)
  {
    unint64_t v29 = (void *)v28;
    uint64_t v38 = v27;
    swift_bridgeObjectRetain();
    SyncEvent.post(_:)();
    ((void (*)(void))v32)(0);
    swift_release();

    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_release();

    swift_bridgeObjectRelease();
  }
  return swift_unknownObjectWeakDestroy();
}

uint64_t sub_1000D0800(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v16 = a2;
  uint64_t v3 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = type metadata accessor for OSLogger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0E10 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_10002F6AC(v4, (uint64_t)qword_1001AE300);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v9._object = (void *)0x800000010015E3C0;
  v9._countAndFlagsBits = 0xD000000000000023;
  LogMessage.StringInterpolation.appendLiteral(_:)(v9);
  swift_getErrorValue();
  uint64_t v10 = v17;
  uint64_t v11 = v18;
  v19[3] = v18;
  uint64_t v12 = sub_100031A88(v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v12, v10, v11);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_1000709E0((uint64_t)v19);
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v13);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v16(a1);
}

uint64_t sub_1000D0AE4(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_1000662BC(v9);
  swift_bridgeObjectRelease();
  sub_1000A593C((unint64_t)v10, 0);
  swift_release();
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = a3;
  *(void *)(v12 + 32) = a4;
  *(void *)(v12 + 40) = a1;
  *(unsigned char *)(v12 + 48) = a2;
  Swift::String v13 = (void *)swift_allocObject();
  v13[2] = a1;
  v13[3] = a3;
  v13[4] = a4;
  v13[5] = ObjectType;
  v15[3] = type metadata accessor for SyncTaskScheduler();
  v15[4] = (uint64_t)&protocol witness table for SyncTaskScheduler;
  sub_100031A88(v15);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  SyncTaskScheduler.init()();
  Promise.then(perform:orCatchError:on:)();
  swift_release();
  swift_release();
  swift_release();
  return sub_10002ED08((uint64_t)v15);
}

uint64_t sub_1000D0C70(unint64_t *a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5, int a6)
{
  int v39 = a6;
  uint64_t v36 = a5;
  uint64_t v10 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for OSLogger();
  uint64_t v38 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v37 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v40 = *a1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return a3();
  }
  uint64_t v18 = (void *)Strong;
  long long v33 = a3;
  Swift::String v42 = &_swiftEmptySetSingleton;
  v31[1] = *(void *)(Strong + OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_workQueue);
  sub_10002EB60(&qword_1001A2880);
  uint64_t v19 = swift_allocObject();
  long long v32 = xmmword_10014CED0;
  *(_OWORD *)(v19 + 16) = xmmword_10014CED0;
  uint64_t v34 = a2;
  swift_retain();
  uint64_t v35 = a4;
  swift_retain();
  static DispatchWorkItemFlags.barrier.getter();
  v41[0] = v19;
  sub_1000A8E90();
  sub_10002EB60((uint64_t *)&unk_1001A31A0);
  sub_100061D9C((unint64_t *)&qword_1001A2890, (uint64_t *)&unk_1001A31A0);
  uint64_t v20 = dispatch thunk of SetAlgebra.init<A>(_:)();
  __chkstk_darwin(v20);
  v31[-4] = v40;
  v31[-3] = v18;
  v31[-2] = &v42;
  v31[-1] = v36;
  OS_dispatch_queue.sync<A>(flags:execute:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  if (qword_1001A0E10 != -1) {
    swift_once();
  }
  uint64_t v21 = sub_10002F6AC(v11, (uint64_t)qword_1001AE300);
  unint64_t v23 = v37;
  uint64_t v22 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v37, v21, v11);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = v32;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v24._object = (void *)0x800000010015E230;
  v24._countAndFlagsBits = 0xD000000000000018;
  LogMessage.StringInterpolation.appendLiteral(_:)(v24);
  if (v40 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v25 = *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v27 = v33;
  uint64_t v26 = v34;
  v41[3] = &type metadata for Int;
  v41[0] = v25;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_1000709E0((uint64_t)v41);
  v28._countAndFlagsBits = 0x7370706120;
  v28._object = (void *)0xE500000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v28);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v23, v11);
  uint64_t v29 = swift_bridgeObjectRetain();
  sub_1000D11D4(v29, v39 & 1, v26, (uint64_t (*)(void))v27);

  swift_release();
  swift_release();
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1000D11D4(uint64_t a1, char a2, uint64_t a3, uint64_t (*a4)(void))
{
  if (a2)
  {
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v6 = (void *)Strong;
      swift_retain();

      SyncEvent.post(_:)();
      swift_release();
    }
  }
  return a4(0);
}

uint64_t sub_1000D1280(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v19 = a3;
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for OSLogger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0E10 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_10002F6AC(v6, (uint64_t)qword_1001AE300);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v11._object = (void *)0x800000010015DF40;
  v11._countAndFlagsBits = 0xD00000000000001CLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v11);
  uint64_t v23 = sub_10002EB60(&qword_1001A3BC0);
  v22[0] = a2;
  swift_bridgeObjectRetain();
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_1000709E0((uint64_t)v22);
  v12._countAndFlagsBits = 0x6E6F73616572202CLL;
  v12._object = (void *)0xEA0000000000203ALL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v12);
  swift_getErrorValue();
  uint64_t v13 = v20;
  uint64_t v14 = v21;
  uint64_t v23 = v21;
  uint64_t v15 = sub_100031A88(v22);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v15, v13, v14);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_1000709E0((uint64_t)v22);
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v16);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v19(a1);
}

uint64_t type metadata accessor for DeviceAppStateDataSource()
{
  return self;
}

{
  return type metadata accessor for DeviceAppStateDataSource();
}

uint64_t sub_1000D16A0()
{
  return swift_retain();
}

uint64_t sub_1000D16B8()
{
  sub_10002EB60(&qword_1001A3EE8);
  OS_dispatch_queue.sync<A>(execute:)();
  return v1;
}

uint64_t sub_1000D1734@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CFFFC(*(void *)(v1 + 16), *(void **)(v1 + 24), a1);
}

uint64_t sub_1000D1750(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  char v4 = *(unsigned char *)(a2 + 32);
  unint64_t v5 = (unint64_t)((1 << v4) + 63) >> 6;
  size_t v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    sub_1000D1C08((unint64_t *)((char *)&v12 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)), v5, v3, a2);
    uint64_t v8 = v7;
    swift_release();
  }
  else
  {
    uint64_t v9 = (void *)swift_slowAlloc();
    bzero(v9, v6);
    sub_1000D1C08((unint64_t *)v9, v5, v3, a2);
    uint64_t v8 = v10;
    swift_release();
    swift_slowDealloc();
  }
  return v8;
}

Swift::Int sub_1000D18D8(uint64_t a1, Swift::Int a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  unint64_t v4 = a1 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (v4)
    {
      if (a2 >= 0) {
        uint64_t v2 = a2 & 0xFFFFFFFFFFFFFF8;
      }
      uint64_t v5 = __CocoaSet.count.getter();
      a2 = sub_100099030(v2, v5);
      a1 = v3;
      goto LABEL_7;
    }
    sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
    __CocoaSet.makeIterator()();
    if (!__CocoaSet.Iterator.next()())
    {
LABEL_33:
      swift_release();
      return (Swift::Int)&_swiftEmptySetSingleton;
    }
    uint64_t v7 = v3 + 56;
    while (1)
    {
      swift_dynamicCast();
      if (*(void *)(v3 + 16))
      {
        Swift::Int v8 = NSObject._rawHashValue(seed:)(*(void *)(v3 + 40));
        uint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
        unint64_t v10 = v8 & ~v9;
        if ((*(void *)(v7 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
        {
          id v11 = *(id *)(*(void *)(v3 + 48) + 8 * v10);
          char v12 = static NSObject.== infix(_:_:)();

          if (v12)
          {
LABEL_20:
            unint64_t v16 = *((void *)&_swiftEmptySetSingleton + 2);
            if (*((void *)&_swiftEmptySetSingleton + 3) <= v16) {
              sub_100099A48(v16 + 1);
            }
            Swift::Int result = NSObject._rawHashValue(seed:)(*((void *)&_swiftEmptySetSingleton + 5));
            uint64_t v17 = (char *)&_swiftEmptySetSingleton + 56;
            uint64_t v18 = -1 << *((unsigned char *)&_swiftEmptySetSingleton + 32);
            unint64_t v19 = result & ~v18;
            unint64_t v20 = v19 >> 6;
            if (((-1 << v19) & ~*((void *)&_swiftEmptySetSingleton + (v19 >> 6) + 7)) != 0)
            {
              unint64_t v21 = __clz(__rbit64((-1 << v19) & ~*((void *)&_swiftEmptySetSingleton + (v19 >> 6) + 7))) | v19 & 0x7FFFFFFFFFFFFFC0;
            }
            else
            {
              char v22 = 0;
              unint64_t v23 = (unint64_t)(63 - v18) >> 6;
              do
              {
                if (++v20 == v23 && (v22 & 1) != 0)
                {
                  __break(1u);
                  return result;
                }
                BOOL v24 = v20 == v23;
                if (v20 == v23) {
                  unint64_t v20 = 0;
                }
                v22 |= v24;
                uint64_t v25 = *(void *)&v17[8 * v20];
              }
              while (v25 == -1);
              unint64_t v21 = __clz(__rbit64(~v25)) + (v20 << 6);
            }
            *(void *)&v17[(v21 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v21;
            *(void *)(*((void *)&_swiftEmptySetSingleton + 6) + 8 * v21) = v26;
            ++*((void *)&_swiftEmptySetSingleton + 2);
            goto LABEL_13;
          }
          uint64_t v13 = ~v9;
          while (1)
          {
            unint64_t v10 = (v10 + 1) & v13;
            if (((*(void *)(v7 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
              break;
            }
            id v14 = *(id *)(*(void *)(v3 + 48) + 8 * v10);
            char v15 = static NSObject.== infix(_:_:)();

            if (v15) {
              goto LABEL_20;
            }
          }
        }
      }

LABEL_13:
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_33;
      }
    }
  }
  if (v4)
  {
LABEL_7:
    return sub_1000D1750(a1, a2);
  }

  return sub_100040E98(a1, a2);
}

void sub_1000D1C08(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
    sub_100062134();
    Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v40;
    uint64_t v35 = v41;
    uint64_t v5 = v42;
    uint64_t v6 = v43;
    uint64_t v7 = v44;
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(a3 + 32);
    uint64_t v35 = a3 + 56;
    uint64_t v5 = ~v8;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    uint64_t v7 = v10 & *(void *)(a3 + 56);
    swift_bridgeObjectRetain();
    uint64_t v6 = 0;
  }
  uint64_t v33 = 0;
  int64_t v34 = (unint64_t)(v5 + 64) >> 6;
  uint64_t v38 = a4 + 56;
  uint64_t v37 = v4;
LABEL_8:
  uint64_t v11 = v6;
  unint64_t v12 = v7;
  while (v4 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_45;
    }
    sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v14 = v45;
    swift_unknownObjectRelease();
    uint64_t v6 = v11;
    uint64_t v7 = v12;
    if (!v45) {
      goto LABEL_45;
    }
LABEL_33:
    Swift::Int v18 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
    uint64_t v19 = -1 << *(unsigned char *)(a4 + 32);
    unint64_t v20 = v18 & ~v19;
    unint64_t v21 = v20 >> 6;
    uint64_t v22 = 1 << v20;
    if (((1 << v20) & *(void *)(v38 + 8 * (v20 >> 6))) == 0) {
      goto LABEL_9;
    }
    sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
    id v23 = *(id *)(*(void *)(a4 + 48) + 8 * v20);
    char v24 = static NSObject.== infix(_:_:)();

    if (v24)
    {

LABEL_41:
      uint64_t v4 = v37;
      unint64_t v30 = a1[v21];
      a1[v21] = v22 | v30;
      uint64_t v11 = v6;
      unint64_t v12 = v7;
      if ((v22 & v30) == 0)
      {
        if (!__OFADD__(v33++, 1)) {
          goto LABEL_8;
        }
        __break(1u);
        goto LABEL_45;
      }
    }
    else
    {
      uint64_t v25 = ~v19;
      for (unint64_t i = v20 + 1; ; unint64_t i = v27 + 1)
      {
        unint64_t v27 = i & v25;
        if (((*(void *)(v38 + (((i & v25) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v25)) & 1) == 0) {
          break;
        }
        id v28 = *(id *)(*(void *)(a4 + 48) + 8 * v27);
        char v29 = static NSObject.== infix(_:_:)();

        if (v29)
        {

          unint64_t v21 = v27 >> 6;
          uint64_t v22 = 1 << v27;
          goto LABEL_41;
        }
      }
LABEL_9:

      uint64_t v11 = v6;
      uint64_t v4 = v37;
      unint64_t v12 = v7;
    }
  }
  if (v12)
  {
    uint64_t v7 = (v12 - 1) & v12;
    unint64_t v13 = __clz(__rbit64(v12)) | (v11 << 6);
    uint64_t v6 = v11;
LABEL_32:
    id v14 = *(id *)(*(void *)(v4 + 48) + 8 * v13);
    if (!v14) {
      goto LABEL_45;
    }
    goto LABEL_33;
  }
  int64_t v15 = v11 + 1;
  if (!__OFADD__(v11, 1))
  {
    if (v15 >= v34) {
      goto LABEL_45;
    }
    unint64_t v16 = *(void *)(v35 + 8 * v15);
    uint64_t v6 = v11 + 1;
    if (!v16)
    {
      uint64_t v6 = v11 + 2;
      if (v11 + 2 >= v34) {
        goto LABEL_45;
      }
      unint64_t v16 = *(void *)(v35 + 8 * v6);
      if (!v16)
      {
        uint64_t v6 = v11 + 3;
        if (v11 + 3 >= v34) {
          goto LABEL_45;
        }
        unint64_t v16 = *(void *)(v35 + 8 * v6);
        if (!v16)
        {
          uint64_t v6 = v11 + 4;
          if (v11 + 4 >= v34) {
            goto LABEL_45;
          }
          unint64_t v16 = *(void *)(v35 + 8 * v6);
          if (!v16)
          {
            uint64_t v6 = v11 + 5;
            if (v11 + 5 >= v34) {
              goto LABEL_45;
            }
            unint64_t v16 = *(void *)(v35 + 8 * v6);
            if (!v16)
            {
              uint64_t v17 = v11 + 6;
              while (v34 != v17)
              {
                unint64_t v16 = *(void *)(v35 + 8 * v17++);
                if (v16)
                {
                  uint64_t v6 = v17 - 1;
                  goto LABEL_31;
                }
              }
LABEL_45:
              sub_100034EF8();
              swift_retain();
              sub_10004216C(a1, a2, v33, a4);
              return;
            }
          }
        }
      }
    }
LABEL_31:
    uint64_t v7 = (v16 - 1) & v16;
    unint64_t v13 = __clz(__rbit64(v16)) + (v6 << 6);
    goto LABEL_32;
  }
  __break(1u);
}

uint64_t sub_1000D2038()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000D2070()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 49, 7);
}

uint64_t sub_1000D20B8(unint64_t *a1)
{
  return sub_1000D0C70(a1, *(void *)(v1 + 16), *(uint64_t (**)(void))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned __int8 *)(v1 + 48));
}

uint64_t sub_1000D20C8()
{
  return sub_1000D2140((void (*)(void))&_swift_bridgeObjectRelease, 48);
}

uint64_t sub_1000D20E4(uint64_t a1)
{
  return sub_1000D1280(a1, *(void *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

id sub_1000D20F0()
{
  return sub_1000CEAD8(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1000D2110(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return sub_100042814(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_1000D2124()
{
  return sub_1000D2140((void (*)(void))&_swift_release, 40);
}

uint64_t sub_1000D2140(void (*a1)(void), uint64_t a2)
{
  a1(*(void *)(v2 + 16));
  swift_release();

  return _swift_deallocObject(v2, a2, 7);
}

uint64_t sub_1000D2194(unint64_t *a1)
{
  return sub_1000D022C(a1, *(void *)(v1 + 16), *(uint64_t (**)(void))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1000D21A0()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000D21D8(uint64_t a1)
{
  return sub_1000D0800(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

unint64_t sub_1000D21E4()
{
  unint64_t result = qword_1001A3EF8;
  if (!qword_1001A3EF8)
  {
    sub_10002ED58(&qword_1001A3EF0);
    sub_100061D9C(&qword_1001A3F00, &qword_1001A3F08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A3EF8);
  }
  return result;
}

id sub_1000D227C()
{
  return sub_1000D20F0();
}

uint64_t type metadata accessor for DisabledArcadeSubscriptionManager()
{
  return self;
}

uint64_t sub_1000D22B8()
{
  return 0;
}

uint64_t sub_1000D22C4()
{
  return Promise.__allocating_init(value:)();
}

uint64_t sub_1000D230C()
{
  uint64_t v0 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5);
  sub_10004765C();
  sub_10002EB60(&qword_1001A2908);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_10014CED0;
  static OS_dispatch_queue.Attributes.concurrent.getter();
  v8[1] = v6;
  sub_1000D2580();
  sub_10002EB60(&qword_1001A2910);
  sub_1000D25D8();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v1);
  static DispatchQoS.unspecified.getter();
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  qword_1001AE318 = result;
  return result;
}

unint64_t sub_1000D2580()
{
  unint64_t result = qword_1001A3370;
  if (!qword_1001A3370)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A3370);
  }
  return result;
}

unint64_t sub_1000D25D8()
{
  unint64_t result = qword_1001A3380;
  if (!qword_1001A3380)
  {
    sub_10002ED58(&qword_1001A2910);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A3380);
  }
  return result;
}

ValueMetadata *_s12DownloadableVMa()
{
  return &_s12DownloadableVN;
}

BOOL sub_1000D2644(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6 != 3 || a3 > 6u) {
    return 0;
  }
  if (((1 << a3) & 0x37) != 0) {
    return 1;
  }
  return a3 == 6 && __PAIR128__((unint64_t)(a1 != 0) + a2 - 1, a1 - 1) < 2;
}

uint64_t sub_1000D26A8(uint64_t a1)
{
  int64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = __chkstk_darwin(a1);
  uint64_t v7 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v77 - v8;
  uint64_t v10 = *(void (**)(char *, int64_t, uint64_t))(v4 + 16);
  v10((char *)&v77 - v8, v2, a1);
  uint64_t v11 = _getErrorEmbeddedNSError<A>(_:)();
  int64_t v85 = v2;
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, a1);
  }
  else
  {
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v12, v9, a1);
  }
  unint64_t v13 = (objc_class *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  uint64_t v78 = v13;
  id v14 = [(objc_class *)v13 userInfo];
  v84 = (char *)&type metadata for Any + 8;
  uint64_t v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v15 + 16))
  {
    swift_bridgeObjectRelease();
    v10(v7, v85, a1);
    uint64_t v74 = _getErrorEmbeddedNSError<A>(_:)();
    if (v74)
    {
      id v73 = (id)v74;
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, a1);
    }
    else
    {
      id v73 = (id)swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v75, v7, a1);
    }
    v72.super.isa = v78;
LABEL_87:

    return (uint64_t)v73;
  }
  uint64_t v16 = *(void *)(v15 + 64);
  uint64_t v79 = v15 + 64;
  uint64_t v17 = 1 << *(unsigned char *)(v15 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v16;
  int64_t v80 = (unint64_t)(v17 + 63) >> 6;
  v81 = v96;
  unint64_t v20 = v99;
  int64_t v77 = v80 - 1;
  swift_bridgeObjectRetain();
  int64_t v85 = 0;
  unint64_t v21 = (void *)v15;
  unint64_t v83 = v99;
  while (1)
  {
    if (v19)
    {
      unint64_t v23 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v24 = v23 | (v85 << 6);
LABEL_13:
      uint64_t v25 = *(void *)(v15 + 56);
      uint64_t v26 = (void *)(*(void *)(v15 + 48) + 16 * v24);
      uint64_t v27 = v26[1];
      *(void *)&long long v95 = *v26;
      *((void *)&v95 + 1) = v27;
      sub_100042EB8(v25 + 32 * v24, (uint64_t)v81);
      swift_bridgeObjectRetain();
      goto LABEL_32;
    }
    int64_t v28 = v85 + 1;
    if (__OFADD__(v85, 1)) {
      goto LABEL_89;
    }
    if (v28 < v80)
    {
      unint64_t v29 = *(void *)(v79 + 8 * v28);
      if (v29) {
        goto LABEL_17;
      }
      int64_t v30 = v85 + 2;
      ++v85;
      if (v28 + 1 < v80)
      {
        unint64_t v29 = *(void *)(v79 + 8 * v30);
        if (v29) {
          goto LABEL_20;
        }
        int64_t v85 = v28 + 1;
        if (v28 + 2 < v80)
        {
          unint64_t v29 = *(void *)(v79 + 8 * (v28 + 2));
          if (v29)
          {
            v28 += 2;
            goto LABEL_17;
          }
          int64_t v30 = v28 + 3;
          int64_t v85 = v28 + 2;
          if (v28 + 3 < v80) {
            break;
          }
        }
      }
    }
LABEL_31:
    unint64_t v19 = 0;
    memset(v96, 0, sizeof(v96));
    long long v95 = 0u;
LABEL_32:
    sub_1000D3158((uint64_t)&v95, (uint64_t)&v97);
    uint64_t v31 = v98;
    if (!v98)
    {
      swift_release();
      long long v67 = v78;
      id v68 = [(objc_class *)v78 domain];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      id v69 = [(objc_class *)v67 code];
      id v70 = objc_allocWithZone((Class)NSError);
      NSString v71 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v72.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v73 = [v70 initWithDomain:v71 code:v69 userInfo:v72.super.isa];

      goto LABEL_87;
    }
    uint64_t v32 = v97;
    sub_100042EA8(v20, &v95);
    sub_100042EB8((uint64_t)&v95, (uint64_t)v94);
    sub_10002EB60((uint64_t *)&unk_1001A3FC0);
    if (swift_dynamicCast())
    {
      unint64_t v82 = v19;
      swift_getErrorValue();
      sub_1000D26A8(v90, v91);
      swift_getErrorValue();
      uint64_t v33 = v21;
      uint64_t v34 = v88;
      uint64_t v35 = v89;
      *((void *)&v93 + 1) = v89;
      uint64_t v36 = sub_100031A88((uint64_t *)&v92);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 16))(v36, v34, v35);
      swift_errorRelease();
      sub_100042EA8(&v92, v87);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      id v86 = v33;
      unint64_t v39 = sub_10003A860(v32, v31);
      uint64_t v40 = v33[2];
      BOOL v41 = (v38 & 1) == 0;
      uint64_t v42 = v40 + v41;
      if (__OFADD__(v40, v41))
      {
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
        goto LABEL_92;
      }
      char v43 = v38;
      if (v33[3] >= v42)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          unint64_t v21 = v86;
          if ((v38 & 1) == 0) {
            goto LABEL_50;
          }
        }
        else
        {
          sub_10003F960();
          unint64_t v21 = v86;
          if ((v43 & 1) == 0) {
            goto LABEL_50;
          }
        }
      }
      else
      {
        sub_10003B8B4(v42, isUniquelyReferenced_nonNull_native);
        unint64_t v44 = sub_10003A860(v32, v31);
        if ((v43 & 1) != (v45 & 1)) {
          goto LABEL_93;
        }
        unint64_t v39 = v44;
        unint64_t v21 = v86;
        if ((v43 & 1) == 0)
        {
LABEL_50:
          v21[(v39 >> 6) + 8] |= 1 << v39;
          char v51 = (uint64_t *)(v21[6] + 16 * v39);
          *char v51 = v32;
          v51[1] = v31;
          sub_100042EA8(v87, (_OWORD *)(v21[7] + 32 * v39));
          uint64_t v52 = v21[2];
          BOOL v53 = __OFADD__(v52, 1);
          uint64_t v54 = v52 + 1;
          if (v53) {
            goto LABEL_90;
          }
          v21[2] = v54;
          swift_bridgeObjectRetain();
          goto LABEL_9;
        }
      }
      uint64_t v22 = (_OWORD *)(v21[7] + 32 * v39);
      sub_10002ED08((uint64_t)v22);
      sub_100042EA8(v87, v22);
LABEL_9:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      sub_10002ED08((uint64_t)&v95);
      unint64_t v19 = v82;
      unint64_t v20 = v83;
      goto LABEL_10;
    }
    Swift::String v46 = v21;
    if (qword_1001A0E20 != -1) {
      swift_once();
    }
    uint64_t v47 = off_1001A3FB0;
    uint64_t v48 = *((void *)off_1001A3FB0 + 2);
    if (!v48) {
      goto LABEL_60;
    }
    unint64_t v49 = v19;
    if ((*((void *)off_1001A3FB0 + 4) != v32 || *((void *)off_1001A3FB0 + 5) != v31)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if (v48 == 1) {
        goto LABEL_60;
      }
      if ((v47[6] != v32 || v47[7] != v31) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        if (v48 != 2)
        {
          id v63 = v47 + 9;
          uint64_t v64 = 2;
          do
          {
            uint64_t v65 = v64 + 1;
            if (__OFADD__(v64, 1)) {
              goto LABEL_91;
            }
            BOOL v66 = *(v63 - 1) == v32 && *v63 == v31;
            if (v66 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              goto LABEL_45;
            }
            v63 += 2;
            ++v64;
            BOOL v66 = v65 == v48;
            unint64_t v19 = v49;
          }
          while (!v66);
        }
LABEL_60:
        unint64_t v21 = v46;
        swift_bridgeObjectRetain();
        unint64_t v59 = sub_10003A860(v32, v31);
        char v61 = v60;
        swift_bridgeObjectRelease();
        if (v61)
        {
          char v62 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&v87[0] = v46;
          if ((v62 & 1) == 0)
          {
            sub_10003F960();
            unint64_t v21 = *(void **)&v87[0];
          }
          swift_bridgeObjectRelease();
          sub_100042EA8((_OWORD *)(v21[7] + 32 * v59), &v92);
          sub_10003DF80(v59, (uint64_t)v21);
          swift_bridgeObjectRelease();
        }
        else
        {
          long long v92 = 0u;
          long long v93 = 0u;
        }
        sub_1000709E0((uint64_t)&v92);
        sub_10002ED08((uint64_t)&v95);
        swift_bridgeObjectRelease();
        unint64_t v20 = v83;
        goto LABEL_10;
      }
    }
LABEL_45:
    sub_100042EB8((uint64_t)&v95, (uint64_t)&v92);
    sub_10002EB60(qword_1001A3FD0);
    if (swift_dynamicCast())
    {
      swift_getObjectType();
      unsigned int v50 = [(id)swift_getObjCClassFromMetadata() supportsSecureCoding];
      swift_unknownObjectRelease();
      unint64_t v19 = v49;
      if (v50)
      {
        sub_10002ED08((uint64_t)&v95);
        swift_bridgeObjectRelease();
        unint64_t v21 = v46;
        unint64_t v20 = v83;
        goto LABEL_10;
      }
    }
    else
    {
      unint64_t v19 = v49;
    }
    unint64_t v21 = v46;
    swift_bridgeObjectRetain();
    unint64_t v55 = sub_10003A860(v32, v31);
    char v57 = v56;
    swift_bridgeObjectRelease();
    if (v57)
    {
      char v58 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&v87[0] = v46;
      if ((v58 & 1) == 0)
      {
        sub_10003F960();
        unint64_t v21 = *(void **)&v87[0];
      }
      swift_bridgeObjectRelease();
      sub_100042EA8((_OWORD *)(v21[7] + 32 * v55), &v92);
      sub_10003DF80(v55, (uint64_t)v21);
      swift_bridgeObjectRelease();
    }
    else
    {
      long long v92 = 0u;
      long long v93 = 0u;
    }
    unint64_t v20 = v83;
    sub_1000709E0((uint64_t)&v92);
    sub_10002ED08((uint64_t)&v95);
    swift_bridgeObjectRelease();
LABEL_10:
    sub_10002ED08((uint64_t)v94);
  }
  unint64_t v29 = *(void *)(v79 + 8 * v30);
  if (v29)
  {
LABEL_20:
    int64_t v28 = v30;
LABEL_17:
    unint64_t v19 = (v29 - 1) & v29;
    unint64_t v24 = __clz(__rbit64(v29)) + (v28 << 6);
    int64_t v85 = v28;
    goto LABEL_13;
  }
  while (1)
  {
    int64_t v28 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v28 >= v80)
    {
      int64_t v85 = v77;
      goto LABEL_31;
    }
    unint64_t v29 = *(void *)(v79 + 8 * v28);
    ++v30;
    if (v29) {
      goto LABEL_17;
    }
  }
LABEL_92:
  __break(1u);
LABEL_93:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000D30C4()
{
  sub_10002EB60(&qword_1001A4DA0);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10014DF50;
  *(void *)(v0 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 40) = v1;
  *(void *)(v0 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 72) = v3;
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 80) = result;
  *(void *)(v0 + 88) = v5;
  off_1001A3FB0 = (_UNKNOWN *)v0;
  return result;
}

uint64_t sub_1000D3158(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A3FB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D31C0()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000D328C()
{
  unint64_t v1 = v0;
  uint64_t v2 = (void *)*v0;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v3);
  uint64_t v4 = type metadata accessor for DispatchTime();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v12 = v2[16];
  if (*(void *)((char *)v0 + v12))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    uint64_t result = swift_release();
  }
  if (!v0[6])
  {
    unint64_t v19 = v2;
    static DispatchTime.now()();
    + infix(_:_:)();
    unint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
    v13(v8, v4);
    static DispatchTime.distantFuture.getter();
    char v14 = static DispatchTime.< infix(_:_:)();
    unint64_t v20 = v13;
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v13)(v8, v4);
    if (v14)
    {
      uint64_t v15 = swift_allocObject();
      swift_weakInit();
      uint64_t v16 = swift_allocObject();
      *(void *)(v16 + 16) = v19[10];
      *(void *)(v16 + 24) = v15;
      aBlock[4] = sub_1000D45B0;
      aBlock[5] = v16;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000C1A88;
      aBlock[3] = &unk_100187E70;
      unint64_t v19 = _Block_copy(aBlock);
      unint64_t v21 = _swiftEmptyArrayStorage;
      sub_1000A8E90();
      swift_retain();
      sub_10002EB60((uint64_t *)&unk_1001A31A0);
      sub_1000A5E6C();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      type metadata accessor for DispatchWorkItem();
      swift_allocObject();
      uint64_t v17 = DispatchWorkItem.init(flags:block:)();
      swift_release();
      swift_release();
      OS_dispatch_queue.asyncAfter(deadline:execute:)();
      v20(v11, v4);
      *(void *)((char *)v1 + v12) = v17;
      return swift_release();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1000D35F0()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1000D3648();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000D3648()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = *(void *)(v1 + 80);
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v19 - v6;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = (void *)v0[5];
  void *v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v7, 1, 1, v3);
  char v14 = (char *)v0 + *(void *)(*v0 + 120);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v5 + 40))(v14, v7, v4);
  swift_endAccess();
  *(void *)((char *)v0 + *(void *)(*v0 + 128)) = 0;
  swift_release();
  *(void *)((char *)v0 + *(void *)(*v0 + 136)) = 0;
  swift_unknownObjectRelease();
  if (qword_1001A0E70 != -1) {
LABEL_5:
  }
    swift_once();
  uint64_t v15 = type metadata accessor for OSLogger();
  sub_10002F6AC(v15, (uint64_t)qword_1001AE398);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v16);
  LogMessage.StringInterpolation.appendInterpolation(identity:)();
  v17._object = (void *)0x800000010015E590;
  v17._countAndFlagsBits = 0xD000000000000022;
  LogMessage.StringInterpolation.appendLiteral(_:)(v17);
  LogMessage.init(stringInterpolation:)();
  Logger.debug(_:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000D3A44()
{
  uint64_t v1 = *(NSObject **)(v0 + 40);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = sub_1000D45B8;
  *(void *)(v2 + 24) = v0;
  v5[4] = sub_1000D45D0;
  v5[5] = v2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_1000D3DA8;
  v5[3] = &unk_100187EC0;
  uint64_t v3 = _Block_copy(v5);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000D3B78(void *a1)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = a1[6];
  BOOL v4 = __CFADD__(v3, 1);
  uint64_t v5 = v3 + 1;
  if (v4)
  {
    __break(1u);
LABEL_7:
    swift_once();
    goto LABEL_5;
  }
  a1[6] = v5;
  if (*(void *)((char *)a1 + *(void *)(*a1 + 128)))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  if (qword_1001A0E70 != -1) {
    goto LABEL_7;
  }
LABEL_5:
  uint64_t v6 = type metadata accessor for OSLogger();
  sub_10002F6AC(v6, (uint64_t)qword_1001AE398);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v7);
  LogMessage.StringInterpolation.appendInterpolation(identity:)();
  v8._object = (void *)0x800000010015E5C0;
  v8._countAndFlagsBits = 0xD00000000000001ELL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v8);
  LogMessage.init(stringInterpolation:)();
  Logger.debug(_:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000D3D80(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000D3DA8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_1000D3DD0()
{
  uint64_t v1 = *(NSObject **)(v0 + 40);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = sub_1000D44E8;
  *(void *)(v2 + 24) = v0;
  v5[4] = sub_1000D4500;
  v5[5] = v2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_1000D3DA8;
  v5[3] = &unk_100187DF8;
  uint64_t v3 = _Block_copy(v5);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000D3F04(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 80);
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v19 - v5;
  uint64_t v7 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = a1[6];
  if (!v8)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v9 = qword_1001A0E70;
  uint64_t v10 = v8 - 1;
  a1[6] = v10;
  if (v10)
  {
    if (v9 == -1)
    {
LABEL_4:
      uint64_t v11 = type metadata accessor for OSLogger();
      sub_10002F6AC(v11, (uint64_t)qword_1001AE398);
      sub_10002EB60((uint64_t *)&unk_1001A19E0);
      type metadata accessor for LogMessage();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v12._countAndFlagsBits = 0;
      v12._object = (void *)0xE000000000000000;
      LogMessage.StringInterpolation.appendLiteral(_:)(v12);
      LogMessage.StringInterpolation.appendInterpolation(identity:)();
      v13._object = (void *)0x800000010015E530;
      v13._countAndFlagsBits = 0xD000000000000021;
      LogMessage.StringInterpolation.appendLiteral(_:)(v13);
      LogMessage.init(stringInterpolation:)();
      Logger.debug(_:)();
      return swift_bridgeObjectRelease();
    }
LABEL_11:
    swift_once();
    goto LABEL_4;
  }
  if (v9 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for OSLogger();
  sub_10002F6AC(v15, (uint64_t)qword_1001AE398);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v16);
  LogMessage.StringInterpolation.appendInterpolation(identity:)();
  v17._countAndFlagsBits = 0xD000000000000026;
  v17._object = (void *)0x800000010015E560;
  LogMessage.StringInterpolation.appendLiteral(_:)(v17);
  LogMessage.init(stringInterpolation:)();
  Logger.debug(_:)();
  swift_bridgeObjectRelease();
  uint64_t v18 = (char *)a1 + *(void *)(*a1 + 120);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v18, v3);
  LODWORD(v18) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v6, 1, v2);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (v18 != 1) {
    return sub_1000D328C();
  }
  return result;
}

id *sub_1000D4360()
{
  swift_release();

  uint64_t v1 = (char *)v0 + *((void *)*v0 + 15);
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_1000D4430()
{
  sub_1000D4360();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ExpiringValue()
{
  return sub_1000A9EF4();
}

uint64_t sub_1000D44A0()
{
  return sub_1000D3A44();
}

uint64_t sub_1000D44C4()
{
  return sub_1000D3DD0();
}

uint64_t sub_1000D44E8()
{
  return sub_1000D3F04(v0);
}

uint64_t sub_1000D44F0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D4500()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000D4528(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D4538()
{
  return swift_release();
}

uint64_t sub_1000D4540()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000D4578()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D45B0()
{
  return sub_1000D35F0();
}

uint64_t sub_1000D45B8()
{
  return sub_1000D3B78(v0);
}

uint64_t sub_1000D45C0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D45E4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100067388(*a1, *a2);
}

Swift::Int sub_1000D45F0()
{
  return Hasher._finalize()();
}

uint64_t sub_1000D46AC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000D4754()
{
  return Hasher._finalize()();
}

unint64_t sub_1000D480C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000D4910(*a1);
  *a2 = result;
  return result;
}

void sub_1000D483C(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xED0000305F325F65;
  unint64_t v4 = 0xEC00000043343230;
  unint64_t v5 = 0x325F6E6F6273696CLL;
  if (v2 != 1)
  {
    unint64_t v5 = 0xD000000000000013;
    unint64_t v4 = 0x800000010015A750;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x746174735F707061;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

const char *sub_1000D48B4()
{
  return "AppStoreComponents";
}

const char *sub_1000D48C8()
{
  uint64_t v1 = "lisbon_2024C";
  if (*v0 != 1) {
    uint64_t v1 = "as_restore_deeplink";
  }
  if (*v0) {
    return v1;
  }
  else {
    return "app_state_2_0";
  }
}

unint64_t sub_1000D4910(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100184B70, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

unsigned char *storeEnumTagSinglePayload for Feature(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000D4A28);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Feature()
{
  return &type metadata for Feature;
}

unint64_t sub_1000D4A64()
{
  unint64_t result = qword_1001A4060;
  if (!qword_1001A4060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A4060);
  }
  return result;
}

uint64_t sub_1000D4AB8@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for HardwarePlatform(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t destroy for HardwarePlatform()
{
  return swift_release();
}

uint64_t assignWithCopy for HardwarePlatform(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for HardwarePlatform(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for HardwarePlatform(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 9)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HardwarePlatform(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 9) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HardwarePlatform()
{
  return &type metadata for HardwarePlatform;
}

uint64_t sub_1000D4C28()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t sub_1000D4C30()
{
  OS_dispatch_queue.sync<A>(execute:)();
  return v1;
}

uint64_t sub_1000D4C90(void *a1)
{
  if ([a1 watchOnly]) {
    return 0;
  }
  if ([a1 supportsIPad]) {
    return 1;
  }
  return (uint64_t)[a1 supportsIPhone];
}

void sub_1000D4CF4(unsigned char *a1@<X8>)
{
  int v2 = *(unsigned __int8 *)(v1 + 24);
  if (v2 == 2) {
    __break(1u);
  }
  else {
    *a1 = v2 & 1;
  }
}

JSValue __swiftcall NSHTTPCookie.makeValue(in:)(JSContext in)
{
  int v2 = v1;
  uint64_t v4 = sub_10002EB60((uint64_t *)&unk_1001A50C0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  unsigned int v50 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v48 - v7;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v51 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v49 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = self;
  result.super.Class isa = (Class)[v11 valueWithNewObjectInContext:in.super.isa];
  if (!result.super.isa)
  {
    __break(1u);
    goto LABEL_15;
  }
  Class isa = result.super.isa;
  id v14 = [v2 name];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;

  uint64_t v52 = v15;
  uint64_t v53 = v17;
  uint64_t v18 = in.super.isa;
  id v19 = [v11 valueWithObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)() inContext:v18];
  swift_unknownObjectRelease();

  if (!v19)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  JSValue.subscript.setter();
  id v20 = [v2 value];
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;

  uint64_t v52 = v21;
  uint64_t v53 = v23;
  unint64_t v24 = v18;
  id v25 = [v11 valueWithObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)() inContext:v24];
  swift_unknownObjectRelease();

  if (!v25)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  JSValue.subscript.setter();
  id v26 = [v2 expiresDate];
  uint64_t v28 = (uint64_t)v50;
  uint64_t v27 = v51;
  if (v26)
  {
    unint64_t v29 = v26;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v30 = 0;
  }
  else
  {
    uint64_t v30 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v28, v30, 1, v9);
  sub_1000D5234(v28, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v8, 1, v9) == 1)
  {
    sub_1000D529C((uint64_t)v8);
    uint64_t v31 = v24;
    uint64_t v32 = 0;
  }
  else
  {
    uint64_t v33 = v49;
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v49, v8, v9);
    uint64_t v34 = v24;
    uint64_t v32 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v33, v9);
  }
  id v35 = [v11 valueWithObject:v32 inContext:v24];
  swift_unknownObjectRelease();

  if (!v35) {
    goto LABEL_17;
  }
  JSValue.subscript.setter();
  id v36 = [v2 domain];
  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v39 = v38;

  uint64_t v52 = v37;
  uint64_t v53 = v39;
  uint64_t v40 = v24;
  id v41 = [v11 valueWithObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)() inContext:v40];
  swift_unknownObjectRelease();

  if (!v41)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  JSValue.subscript.setter();
  id v42 = [v2 path];
  uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v45 = v44;

  uint64_t v52 = v43;
  uint64_t v53 = v45;
  Swift::String v46 = v40;
  id v47 = [v11 valueWithObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)() inContext:v46];
  swift_unknownObjectRelease();

  if (v47)
  {
    JSValue.subscript.setter();
    return (JSValue)isa;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_1000D5234(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60((uint64_t *)&unk_1001A50C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D529C(uint64_t a1)
{
  uint64_t v2 = sub_10002EB60((uint64_t *)&unk_1001A50C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000D52FC()
{
  return CustomJSValueConvertible.jsRepresentation(in:)();
}

JSValue sub_1000D5314(JSContext a1)
{
  return CustomJSValueConvertible._jsValue(in:)(a1);
}

JSValue sub_1000D532C(JSContext a1)
{
  return NSHTTPCookie.makeValue(in:)(a1);
}

ValueMetadata *_s9InstalledVMa()
{
  return &_s9InstalledVN;
}

uint64_t sub_1000D5360(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6 == 6)
  {
    uint64_t v6 = 0;
    if (a4 != 1 || a5) {
      return v6;
    }
    if (a3 - 2 < 4) {
      return 1;
    }
    if (a3 == 1)
    {
      if (a1) {
        return 1;
      }
    }
    else if (a3 == 6 && a1 == 2 && !a2)
    {
      return 1;
    }
  }
  return 0;
}

ValueMetadata *_s10InstallingVMa()
{
  return &_s10InstallingVN;
}

uint64_t sub_1000D53D4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a3 == 4)
  {
    if (a6 == 4) {
      return *(double *)&a1 < *(double *)&a4;
    }
  }
  else if (a3 == 6 && a1 == 2 && !a2)
  {
    return 1;
  }
  return a6 == 4;
}

void *sub_1000D559C(void *a1, void *a2)
{
  uint64_t v5 = type metadata accessor for JSPromise();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RunLoopWorkerThread();
  uint64_t v9 = static RunLoopWorkerThread.current.getter();
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = (void *)swift_allocObject();
    v11[2] = a2;
    v11[3] = v10;
    id v12 = a1;
    id v13 = a2;
    swift_retain();
    JSPromise.init(in:executor:)();
    if (v2)
    {
      swift_release();
    }
    else
    {
      uint64_t v11 = (void *)JSPromise.value.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
  else
  {
    v15[0] = 0;
    v15[1] = 0xE000000000000000;
    uint64_t v11 = v15;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    type metadata accessor for JSError();
    sub_1000D7158();
    swift_allocError();
    JSError.init(message:line:column:sourceURL:constructorName:)();
    swift_willThrow();
  }
  return v11;
}

uint64_t sub_1000D57A8(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v30 = a1;
  uint64_t v31 = a5;
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v6 = type metadata accessor for JSCallable();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10002EB60(&qword_1001A2450);
  __chkstk_darwin(v10 - 8);
  id v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a4;
  sub_10002EB60(&qword_1001A40D8);
  id v14 = a4;
  uint64_t v15 = Promise.__allocating_init()();
  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v12, 1, 1, v16);
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = 0;
  v17[3] = 0;
  v17[4] = &unk_1001A40D0;
  v17[5] = v13;
  uint64_t v27 = v15;
  v17[6] = v15;
  swift_retain();
  sub_1000F6C04((uint64_t)v12, (uint64_t)&unk_1001A40E0, (uint64_t)v17);
  swift_release();
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v18(v9, v28, v6);
  unint64_t v19 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v20 = v19 + v8;
  uint64_t v28 = swift_allocObject();
  uint64_t v21 = *(void (**)(unint64_t, char *, uint64_t))(v7 + 32);
  v21(v28 + v19, v9, v6);
  v18(v9, v29, v6);
  unint64_t v22 = (v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = swift_allocObject();
  v21(v23 + v19, v9, v6);
  unint64_t v24 = v30;
  *(void *)(v23 + v22) = v30;
  v32[3] = type metadata accessor for RunLoopWorkerThread();
  v32[4] = &protocol witness table for RunLoopWorkerThread;
  v32[0] = v31;
  id v25 = v24;
  swift_retain();
  Promise.then(perform:orCatchError:on:)();
  swift_release();
  swift_release();
  swift_release();
  return sub_10002ED08((uint64_t)v32);
}

uint64_t sub_1000D5AE0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_1000D5B00, 0, 0);
}

uint64_t sub_1000D5B00()
{
  sub_10002EC6C((void *)(*(void *)(v0 + 24) + OBJC_IVAR____TtC19appstorecomponentsd23JSAppDistributionObject_appDistribution), *(void *)(*(void *)(v0 + 24)+ OBJC_IVAR____TtC19appstorecomponentsd23JSAppDistributionObject_appDistribution+ 24));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000D5BA8;
  return sub_1000C8A88();
}

uint64_t sub_1000D5BA8(uint64_t a1)
{
  *(void *)(*(void *)v1 + 40) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000D5CA8, 0, 0);
}

uint64_t sub_1000D5CA8()
{
  **(void **)(v0 + 16) = *(void *)(v0 + 40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000D5CCC(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for OSLogger();
  __chkstk_darwin(v3);
  uint64_t v4 = *a1;
  sub_10002EB60(&qword_1001A3C10);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_10014CED0;
  *(void *)(v5 + 56) = sub_10002EB60((uint64_t *)&unk_1001A45C0);
  *(void *)(v5 + 32) = v4;
  swift_bridgeObjectRetain();
  uint64_t v6 = (void *)JSCallable.call(_:)();
  swift_bridgeObjectRelease();
}

void *sub_1000D6048(void *a1, void *a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for JSPromise();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RunLoopWorkerThread();
  uint64_t v11 = static RunLoopWorkerThread.current.getter();
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = (void *)swift_allocObject();
    v13[2] = a2;
    v13[3] = a3;
    v13[4] = v12;
    id v14 = a1;
    id v15 = a2;
    swift_bridgeObjectRetain();
    swift_retain();
    JSPromise.init(in:executor:)();
    if (v3)
    {
      swift_release();
    }
    else
    {
      uint64_t v13 = (void *)JSPromise.value.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
  }
  else
  {
    v17[0] = 0;
    v17[1] = 0xE000000000000000;
    uint64_t v13 = v17;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    type metadata accessor for JSError();
    sub_1000D7158();
    swift_allocError();
    JSError.init(message:line:column:sourceURL:constructorName:)();
    swift_willThrow();
  }
  return v13;
}

uint64_t sub_1000D626C(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v36 = a3;
  uint64_t v37 = a6;
  uint64_t v34 = a2;
  id v35 = a1;
  uint64_t v8 = type metadata accessor for JSCallable();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10002EB60(&qword_1001A2450);
  __chkstk_darwin(v12 - 8);
  id v14 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a4;
  *(void *)(v15 + 24) = a5;
  sub_10002EB60(&qword_1001A40B0);
  id v16 = a4;
  swift_bridgeObjectRetain();
  uint64_t v17 = Promise.__allocating_init()();
  uint64_t v18 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v14, 1, 1, v18);
  unint64_t v19 = (void *)swift_allocObject();
  v19[2] = 0;
  v19[3] = 0;
  uint64_t v19[4] = &unk_1001A40A8;
  v19[5] = v15;
  uint64_t v33 = v17;
  v19[6] = v17;
  swift_retain();
  sub_1000F6C04((uint64_t)v14, (uint64_t)&unk_1001A40B8, (uint64_t)v19);
  swift_release();
  uint64_t v20 = v9;
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v32(v11, v34, v8);
  uint64_t v21 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v22 = (v21 + 16) & ~v21;
  unint64_t v23 = (v10 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v31[1] = v23 + 8;
  void v31[2] = v21 | 7;
  uint64_t v24 = swift_allocObject();
  uint64_t v34 = v24;
  id v25 = *(void (**)(uint64_t, char *, uint64_t))(v20 + 32);
  v25(v24 + v22, v11, v8);
  uint64_t v27 = v35;
  uint64_t v26 = v36;
  *(void *)(v24 + v23) = v35;
  v32(v11, v26, v8);
  uint64_t v28 = swift_allocObject();
  v25(v28 + v22, v11, v8);
  *(void *)(v28 + v23) = v27;
  v38[3] = type metadata accessor for RunLoopWorkerThread();
  v38[4] = &protocol witness table for RunLoopWorkerThread;
  v38[0] = v37;
  id v29 = v27;
  swift_retain();
  Promise.then(perform:orCatchError:on:)();
  swift_release();
  swift_release();
  swift_release();
  return sub_10002ED08((uint64_t)v38);
}

uint64_t sub_1000D65C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_1000D65E4, 0, 0);
}

uint64_t sub_1000D65E4()
{
  sub_10002EC6C((void *)(v0[3] + OBJC_IVAR____TtC19appstorecomponentsd23JSAppDistributionObject_appDistribution), *(void *)(v0[3] + OBJC_IVAR____TtC19appstorecomponentsd23JSAppDistributionObject_appDistribution + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[5] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000D6694;
  uint64_t v2 = v0[4];
  return sub_1000C8F74(v2);
}

uint64_t sub_1000D6694(uint64_t a1)
{
  *(void *)(*(void *)v1 + 48) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000D6794, 0, 0);
}

uint64_t sub_1000D6794()
{
  **(void **)(v0 + 16) = *(void *)(v0 + 48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000D67B8(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for OSLogger();
  __chkstk_darwin(v6);
  uint64_t v7 = *a1;
  sub_10002EB60(&qword_1001A3C10);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10014CED0;
  id v9 = a3;
  sub_1000D758C(v7, v9);
  uint64_t v11 = v10;

  *(void *)(v8 + 56) = sub_10002EB60(&qword_1001A40C0);
  *(void *)(v8 + 32) = v11;
  uint64_t v12 = (void *)JSCallable.call(_:)();
  swift_bridgeObjectRelease();
}

void sub_1000D6B24(uint64_t a1, uint64_t a2)
{
  v13[1] = a2;
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for OSLogger();
  __chkstk_darwin(v3);
  uint64_t v4 = type metadata accessor for JSError();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002EB60(&qword_1001A3C10);
  uint64_t v8 = swift_allocObject();
  long long v14 = xmmword_10014CED0;
  *(_OWORD *)(v8 + 16) = xmmword_10014CED0;
  swift_getErrorValue();
  Error.localizedDescription.getter();
  JSError.init(message:line:column:sourceURL:constructorName:)();
  JSError.jsRepresentation(in:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v9 = v16;
  uint64_t v10 = sub_10002EC6C(v15, v16);
  *(void *)(v8 + 56) = v9;
  uint64_t v11 = sub_100031A88((uint64_t *)(v8 + 32));
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(v11, v10, v9);
  sub_10002ED08((uint64_t)v15);
  uint64_t v12 = (void *)JSCallable.call(_:)();
  swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for JSAppDistributionObject()
{
  return self;
}

unint64_t sub_1000D70FC()
{
  unint64_t result = qword_1001A4098;
  if (!qword_1001A4098)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, &qword_1001A4098);
  }
  return result;
}

void *sub_1000D713C(void *a1)
{
  return sub_1000D6048(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t sub_1000D7158()
{
  unint64_t result = qword_1001A4600;
  if (!qword_1001A4600)
  {
    type metadata accessor for JSError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A4600);
  }
  return result;
}

uint64_t sub_1000D71B0()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000D71F8(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D626C(a1, a2, a3, *(void **)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32));
}

uint64_t sub_1000D7218()
{
  return sub_1000D782C((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1000D7230(uint64_t a1)
{
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v4;
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = sub_10002F874;
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)(v4 + 16) = a1;
  return _swift_task_switch(sub_1000D65E4, 0, 0);
}

uint64_t sub_1000D72E8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10002F874;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t))((char *)&dword_1001A49A8
                                                                                   + dword_1001A49A8);
  return v10(a1, v4, v5, v6, v7, v8);
}

void sub_1000D73C8(uint64_t *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for JSCallable() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void **)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_1000D67B8(a1, v1 + v4, v5);
}

void *sub_1000D746C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t result = _swiftEmptyArrayStorage;
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v6 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100035764(a2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v6 += 48;
      --v3;
    }
    while (v3);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void sub_1000D758C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v5 = self;
    uint64_t v6 = (uint64_t *)(a1 + 48);
    uint64_t v13 = a2;
    while (1)
    {
      long long v14 = v6;
      uint64_t v15 = v3;
      uint64_t v7 = *v6;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (![v5 valueWithNewObjectInContext:a2]) {
        break;
      }
      swift_bridgeObjectRetain();
      id v8 = a2;
      id v9 = [v5 valueWithObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)() inContext:v8];
      swift_unknownObjectRelease();

      if (!v9) {
        goto LABEL_10;
      }
      JSValue.subscript.setter();
      swift_bridgeObjectRetain();
      id v10 = v8;
      sub_1000D746C(v7, v10);
      swift_bridgeObjectRelease();

      id v11 = v10;
      sub_10002EB60(&qword_1001A40C0);
      id v12 = [v5 valueWithObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)() inContext:v11];
      swift_unknownObjectRelease();

      if (!v12)
      {
        __break(1u);
        break;
      }
      JSValue.subscript.setter();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t v6 = v14 + 3;
      uint64_t v3 = v15 - 1;
      a2 = v13;
      if (v15 == 1) {
        return;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
}

void *sub_1000D77F8(void *a1)
{
  return sub_1000D559C(a1, *(void **)(v1 + 16));
}

uint64_t sub_1000D7814()
{
  return sub_1000D782C((void (*)(void))&_swift_release);
}

uint64_t sub_1000D782C(void (*a1)(void))
{
  a1(*(void *)(v1 + 24));

  return _swift_deallocObject(v1, 32, 7);
}

uint64_t sub_1000D787C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D57A8(a1, a2, a3, *(void **)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_1000D7898()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000D78D0(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[2] = a1;
  v5[3] = v4;
  v5[1] = sub_100053090;
  return _swift_task_switch(sub_1000D5B00, 0, 0);
}

uint64_t sub_1000D7984(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  id v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *id v9 = v2;
  v9[1] = sub_100053090;
  id v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t))((char *)&dword_1001A49B0
                                                                                   + dword_1001A49B0);
  return v10(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1000D7A60()
{
  uint64_t v1 = type metadata accessor for JSCallable();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_1000D7AF0(uint64_t *a1)
{
  type metadata accessor for JSCallable();

  sub_1000D5CCC(a1);
}

uint64_t sub_1000D7B64()
{
  uint64_t v1 = type metadata accessor for JSCallable();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1000D7C08(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for JSCallable() - 8);
  sub_1000D6B24(a1, v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
}

uint64_t sub_1000D7CC8(char *a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = &a1[OBJC_IVAR____TtC19appstorecomponentsd20JSAppleSiliconObject_platform];
  uint64_t v6 = *((void *)v5 + 3);
  uint64_t v7 = *((void *)v5 + 4);
  sub_10002EC6C(v5, v6);
  uint64_t v8 = a1;
  LOBYTE(a3) = a3(v6, v7);

  return a3 & 1;
}

uint64_t type metadata accessor for JSAppleSiliconObject()
{
  return self;
}

void *sub_1000D7DE4(void *a1)
{
  uint64_t v3 = type metadata accessor for JSPromise();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = a1;
  JSPromise.init(in:executor:)();
  if (!v1)
  {
    a1 = (void *)JSPromise.value.getter();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return a1;
}

void sub_1000D7EF0(void *a1)
{
  sub_10002EB60(&qword_1001A3C10);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_10014CED0;
  id v4 = a1;
  sub_10002EB60((uint64_t *)&unk_1001A5020);
  uint64_t v5 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v6 = [self valueWithObject:v5 inContext:v4];
  swift_unknownObjectRelease();

  if (v6)
  {
    *(void *)(v3 + 56) = sub_10002EE34(0, (unint64_t *)&qword_1001A4140);
    *(void *)(v3 + 32) = v6;
    uint64_t v7 = JSCallable.call(_:)();
    if (v1)
    {
      swift_bridgeObjectRelease();
      if (qword_1001A0E70 != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for OSLogger();
      sub_10002F6AC(v8, (uint64_t)qword_1001AE398);
      sub_10002EB60((uint64_t *)&unk_1001A19E0);
      type metadata accessor for LogMessage();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
      LogMessage.init(stringLiteral:)();
      Logger.error(_:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
    }
    else
    {
      uint64_t v9 = (void *)v7;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for JSArcadeObject()
{
  return self;
}

uint64_t type metadata accessor for JSASKGlobalObject()
{
  return self;
}

id sub_1000D8484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&a13[OBJC_IVAR____TtC19appstorecomponentsd17JSASKGlobalObject_client] = a1;
  *(void *)&a13[OBJC_IVAR____TtC19appstorecomponentsd17JSASKGlobalObject_loc] = a2;
  *(void *)&a13[OBJC_IVAR____TtC19appstorecomponentsd17JSASKGlobalObject_storeMetrics] = a3;
  *(void *)&a13[OBJC_IVAR____TtC19appstorecomponentsd17JSASKGlobalObject_metricsIdentifiers] = a4;
  *(void *)&a13[OBJC_IVAR____TtC19appstorecomponentsd17JSASKGlobalObject_props] = a5;
  *(void *)&a13[OBJC_IVAR____TtC19appstorecomponentsd17JSASKGlobalObject_user] = a6;
  *(void *)&a13[OBJC_IVAR____TtC19appstorecomponentsd17JSASKGlobalObject_clientOrdering] = a7;
  *(void *)&a13[OBJC_IVAR____TtC19appstorecomponentsd17JSASKGlobalObject_personalizationStore] = a8;
  *(void *)&a13[OBJC_IVAR____TtC19appstorecomponentsd17JSASKGlobalObject_arcade] = a9;
  *(void *)&a13[OBJC_IVAR____TtC19appstorecomponentsd17JSASKGlobalObject_appleSilicon] = a10;
  *(void *)&a13[OBJC_IVAR____TtC19appstorecomponentsd17JSASKGlobalObject_featureFlags] = a11;
  *(void *)&a13[OBJC_IVAR____TtC19appstorecomponentsd17JSASKGlobalObject_appDistribution] = a12;
  v23.receiver = a13;
  v23.super_class = ObjectType;
  return objc_msgSendSuper2(&v23, "init");
}

id sub_1000D85B8(uint64_t a1, uint64_t a2)
{
  uint64_t v50 = a2;
  uint64_t v2 = type metadata accessor for MetricsTopicProvider();
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Bag();
  uint64_t v51 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002EB60(&qword_1001A3390);
  type metadata accessor for BaseObjectGraph();
  inject<A, B>(_:from:)();
  sub_10007F7C8();
  inject<A, B>(_:from:)();
  uint64_t v8 = v57[0];
  id v49 = (id)v57[0];
  sub_10002EB60((uint64_t *)&unk_1001A3300);
  inject<A, B>(_:from:)();
  sub_10002EB60((uint64_t *)&unk_1001A5E30);
  inject<A, B>(_:from:)();
  sub_10002EB60(&qword_1001A19A0);
  inject<A, B>(_:from:)();
  sub_10002EB60((uint64_t *)&unk_1001A3320);
  inject<A, B>(_:from:)();
  uint64_t v45 = v5;
  Swift::String v46 = v7;
  inject<A, B>(_:from:)();
  inject<A, B>(_:from:)();
  uint64_t v9 = (void *)v57[0];
  uint64_t v10 = v57[1];
  sub_10002EB60((uint64_t *)&unk_1001A5A10);
  inject<A, B>(_:from:)();
  id v48 = [objc_allocWithZone((Class)ASCJSClientObject) initWithAccountStore:v8];
  sub_100052538((uint64_t)v66, (uint64_t)v57);
  id v11 = (objc_class *)type metadata accessor for JSModernLocObject();
  id v12 = objc_allocWithZone(v11);
  sub_100052538((uint64_t)v57, (uint64_t)v12 + OBJC_IVAR____TtC19appstorecomponentsd17JSModernLocObject_localizer);
  v63.receiver = v12;
  v63.super_class = v11;
  id v47 = objc_msgSendSuper2(&v63, "init");
  sub_10002ED08((uint64_t)v57);
  sub_100052538((uint64_t)v68, (uint64_t)v57);
  uint64_t v13 = (objc_class *)type metadata accessor for JSStoreMetricsObject();
  id v14 = objc_allocWithZone(v13);
  sub_100052538((uint64_t)v57, (uint64_t)v14 + OBJC_IVAR____TtC19appstorecomponentsd20JSStoreMetricsObject_eventRecorder);
  v62.receiver = v14;
  v62.super_class = v13;
  id v44 = objc_msgSendSuper2(&v62, "init");
  sub_10002ED08((uint64_t)v57);
  (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v4, v7, v5);
  uint64_t v15 = (objc_class *)type metadata accessor for JSMetricsIdentifiersObject();
  uint64_t v16 = (char *)objc_allocWithZone(v15);
  uint64_t v17 = &v16[OBJC_IVAR____TtC19appstorecomponentsd26JSMetricsIdentifiersObject_metricsIdStore];
  *(void *)uint64_t v17 = v9;
  *((void *)v17 + 1) = v10;
  uint64_t v42 = v10;
  sub_1000D8C70((uint64_t)v4, (uint64_t)&v16[OBJC_IVAR____TtC19appstorecomponentsd26JSMetricsIdentifiersObject_metricsTopicProvider]);
  v61.receiver = v16;
  v61.super_class = v15;
  id v43 = v9;
  swift_unknownObjectRetain();
  id v41 = objc_msgSendSuper2(&v61, "init");
  sub_1000D8CD4((uint64_t)v4);
  sub_100052538((uint64_t)v69, (uint64_t)v57);
  uint64_t v18 = (objc_class *)type metadata accessor for JSUserObject();
  id v19 = objc_allocWithZone(v18);
  sub_100052538((uint64_t)v57, (uint64_t)v19 + OBJC_IVAR____TtC19appstorecomponentsd12JSUserObject_accounts);
  v60.receiver = v19;
  v60.super_class = v18;
  id v40 = objc_msgSendSuper2(&v60, "init");
  sub_10002ED08((uint64_t)v57);
  id v39 = [objc_allocWithZone((Class)type metadata accessor for JSClientOrderingObject()) init];
  id v38 = [objc_allocWithZone((Class)type metadata accessor for JSPersonalizationStoreObject()) init];
  id v37 = [objc_allocWithZone((Class)type metadata accessor for JSArcadeObject()) init];
  sub_100052538((uint64_t)v67, (uint64_t)v57);
  uint64_t v20 = (objc_class *)type metadata accessor for JSAppleSiliconObject();
  id v21 = objc_allocWithZone(v20);
  sub_100052538((uint64_t)v57, (uint64_t)v21 + OBJC_IVAR____TtC19appstorecomponentsd20JSAppleSiliconObject_platform);
  v59.receiver = v21;
  v59.super_class = v20;
  id v36 = objc_msgSendSuper2(&v59, "init");
  sub_10002ED08((uint64_t)v57);
  id v35 = [objc_allocWithZone((Class)type metadata accessor for JSFeatureFlagsObject()) init];
  sub_100052538((uint64_t)v65, (uint64_t)v57);
  sub_100052538((uint64_t)v64, (uint64_t)&v58);
  unint64_t v55 = &type metadata for DeviceAppDistribution;
  char v56 = &off_100187AE0;
  v54[0] = swift_allocObject();
  sub_1000B11C4((uint64_t)v57, v54[0] + 16);
  uint64_t v22 = (objc_class *)type metadata accessor for JSAppDistributionObject();
  id v23 = objc_allocWithZone(v22);
  uint64_t v24 = sub_10002FE00((uint64_t)v54, (uint64_t)v55);
  __chkstk_darwin(v24);
  uint64_t v26 = (_OWORD *)((char *)&v35 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_OWORD *))(v27 + 16))(v26);
  v53[3] = &type metadata for DeviceAppDistribution;
  v53[4] = &off_100187AE0;
  uint64_t v28 = (_OWORD *)swift_allocObject();
  v53[0] = v28;
  long long v29 = v26[3];
  v28[3] = v26[2];
  v28[4] = v29;
  v28[5] = v26[4];
  long long v30 = v26[1];
  v28[1] = *v26;
  v28[2] = v30;
  sub_100052538((uint64_t)v53, (uint64_t)v23 + OBJC_IVAR____TtC19appstorecomponentsd23JSAppDistributionObject_appDistribution);
  v52.receiver = v23;
  v52.super_class = v22;
  id v31 = objc_msgSendSuper2(&v52, "init");
  sub_10002ED08((uint64_t)v53);
  sub_10002ED08((uint64_t)v54);
  sub_1000B1220((uint64_t)v57);
  uint64_t v32 = (char *)objc_allocWithZone((Class)type metadata accessor for JSASKGlobalObject());
  id v33 = sub_1000D8484((uint64_t)v48, (uint64_t)v47, (uint64_t)v44, (uint64_t)v41, v50, (uint64_t)v40, (uint64_t)v39, (uint64_t)v38, (uint64_t)v37, (uint64_t)v36, (uint64_t)v35, (uint64_t)v31, v32);

  swift_unknownObjectRelease();
  swift_release();
  sub_10002ED08((uint64_t)v64);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v46, v45);
  sub_10002ED08((uint64_t)v65);
  sub_10002ED08((uint64_t)v66);
  sub_10002ED08((uint64_t)v67);
  sub_10002ED08((uint64_t)v68);
  sub_10002ED08((uint64_t)v69);
  return v33;
}

uint64_t sub_1000D8C70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MetricsTopicProvider();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D8CD4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MetricsTopicProvider();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000D8D30()
{
  sub_10002ED08(v0 + 16);
  sub_10002ED08(v0 + 56);

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_1000D8D70(void *a1, uint64_t a2, char *a3, uint64_t a4, void *a5, unint64_t a6)
{
  id v45 = a1;
  uint64_t v41 = a4;
  unint64_t v42 = a6;
  id v47 = a5;
  uint64_t v48 = a2;
  id v49 = a3;
  uint64_t v51 = type metadata accessor for Bag();
  uint64_t v43 = *(void *)(v51 - 8);
  uint64_t v6 = *(void *)(v43 + 64);
  __chkstk_darwin(v51);
  uint64_t v50 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for JSPromise();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  Swift::String v46 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10002EB60(&qword_1001A44F0);
  __chkstk_darwin(v10 - 8);
  id v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v53 = *(void *)(v13 - 8);
  uint64_t v14 = *(void *)(v53 + 64);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v36 - v17;
  uint64_t v19 = type metadata accessor for RunLoopWorkerThread();
  uint64_t v20 = static RunLoopWorkerThread.current.getter();
  if (v20)
  {
    uint64_t v19 = v20;
    URL.init(string:)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v12, 1, v13) == 1)
    {
      sub_100034B8C((uint64_t)v12, &qword_1001A44F0);
      type metadata accessor for JSError();
      sub_1000D7158();
      swift_allocError();
      JSError.init(message:line:column:sourceURL:constructorName:)();
      swift_willThrow();
    }
    else
    {
      uint64_t v37 = v8;
      uint64_t v38 = v7;
      uint64_t v21 = v53;
      uint64_t v22 = *(void (**)(unint64_t, char *, uint64_t))(v53 + 32);
      uint64_t v39 = v6;
      id v40 = v22;
      v22((unint64_t)v18, v12, v13);
      uint64_t v48 = v19;
      id v49 = v18;
      uint64_t v23 = v21 + 16;
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v16, v18, v13);
      uint64_t v24 = v43;
      (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v50, v41, v51);
      sub_100052538(v42, (uint64_t)v52);
      unint64_t v25 = (*(unsigned __int8 *)(v23 + 64) + 16) & ~(unint64_t)*(unsigned __int8 *)(v23 + 64);
      unint64_t v26 = (v14 + *(unsigned __int8 *)(v24 + 80) + v25) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      unint64_t v27 = (v39 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v28 = (v27 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v42 = (v28 + 47) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v19 = swift_allocObject();
      v40(v19 + v25, v16, v13);
      (*(void (**)(unint64_t, char *, uint64_t))(v24 + 32))(v19 + v26, v50, v51);
      long long v29 = v47;
      *(void *)(v19 + v27) = v47;
      uint64_t v30 = v48;
      sub_100031C10(v52, v19 + v28);
      *(void *)(v19 + v42) = v30;
      id v31 = v45;
      id v32 = v29;
      swift_retain();
      id v33 = v46;
      uint64_t v34 = v44;
      JSPromise.init(in:executor:)();
      if (!v34)
      {
        uint64_t v19 = JSPromise.value.getter();
        swift_release();
        (*(void (**)(char *, uint64_t))(v37 + 8))(v33, v38);
        (*(void (**)(char *, uint64_t))(v53 + 8))(v49, v13);
        return v19;
      }
      (*(void (**)(char *, uint64_t))(v53 + 8))(v49, v13);
    }
    swift_release();
  }
  else
  {
    type metadata accessor for JSError();
    sub_1000D7158();
    swift_allocError();
    JSError.init(message:line:column:sourceURL:constructorName:)();
    swift_willThrow();
  }
  return v19;
}

uint64_t sub_1000D92E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8)
{
  uint64_t v40 = a8;
  id v37 = a6;
  uint64_t v10 = type metadata accessor for JSCallable();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v38 = v12;
  uint64_t v39 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10002EB60(&qword_1001A19C0);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = Bag.amsBag.getter();
  id v17 = objc_allocWithZone((Class)AMSCampaignAttributionTask);
  URL._bridgeToObjectiveC()(v18);
  uint64_t v20 = v19;
  id v21 = [v17 initWithURL:v19 bag:v16];
  swift_unknownObjectRelease();

  [v21 setClientInfo:v37];
  sub_10002EC6C(a7, a7[3]);
  dispatch thunk of AccountProvider.activeAccount.getter();
  uint64_t v22 = type metadata accessor for Account();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v15, 1, v22) == 1)
  {
    sub_100034B8C((uint64_t)v15, &qword_1001A19C0);
    uint64_t v24 = 0;
  }
  else
  {
    uint64_t v24 = (void *)Account.acAccountCopy.getter();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v15, v22);
  }
  [v21 setAccount:v24];

  sub_10002EB60(&qword_1001A4220);
  id v25 = [v21 perform];
  uint64_t v36 = Promise<A>.init(_:)();
  id v37 = v21;
  unint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  unint64_t v27 = v39;
  v26(v39, a2, v10);
  uint64_t v28 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v35 = a2;
  uint64_t v29 = v10;
  uint64_t v30 = (v28 + 16) & ~v28;
  uint64_t v38 = swift_allocObject();
  id v31 = *(void (**)(uint64_t, char *, uint64_t))(v11 + 32);
  v31(v38 + v30, v27, v29);
  v26(v27, v35, v29);
  uint64_t v32 = swift_allocObject();
  v31(v32 + v30, v27, v29);
  v41[3] = type metadata accessor for RunLoopWorkerThread();
  v41[4] = &protocol witness table for RunLoopWorkerThread;
  v41[0] = v40;
  swift_retain();
  Promise.then(perform:orCatchError:on:)();

  swift_release();
  swift_release();
  swift_release();
  return sub_10002ED08((uint64_t)v41);
}

void sub_1000D96B8()
{
  sub_10002EB60(&qword_1001A3C10);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10014CED0;
  *(void *)(v0 + 56) = &type metadata for Bool;
  *(unsigned char *)(v0 + 32) = 1;
  id v1 = (id)JSCallable.call(_:)();
  swift_bridgeObjectRelease();
}

void sub_1000D9890()
{
  sub_10002EB60(&qword_1001A3C10);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10014CED0;
  *(void *)(v0 + 56) = &type metadata for Bool;
  *(unsigned char *)(v0 + 32) = 0;
  id v1 = (id)JSCallable.call(_:)();
  swift_bridgeObjectRelease();
}

uint64_t sub_1000D9C04()
{
  return type metadata accessor for JSCampaignAttributionService();
}

uint64_t type metadata accessor for JSCampaignAttributionService()
{
  uint64_t result = qword_1001A4210;
  if (!qword_1001A4210) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000D9C58()
{
  uint64_t result = type metadata accessor for Bag();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

id sub_1000D9D00()
{
  uint64_t v0 = type metadata accessor for Bag();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002EE34(0, &qword_1001A3388);
  type metadata accessor for BaseObjectGraph();
  inject<A, B>(_:from:)();
  uint64_t v4 = v11;
  sub_10002EB60(&qword_1001A3390);
  inject<A, B>(_:from:)();
  inject<A, B>(_:from:)();
  uint64_t v5 = (objc_class *)type metadata accessor for JSCampaignAttributionService();
  uint64_t v6 = (char *)objc_allocWithZone(v5);
  *(void *)&v6[OBJC_IVAR____TtC19appstorecomponentsd28JSCampaignAttributionService_process] = v4;
  sub_100052538((uint64_t)v10, (uint64_t)&v6[OBJC_IVAR____TtC19appstorecomponentsd28JSCampaignAttributionService_accounts]);
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(&v6[OBJC_IVAR____TtC19appstorecomponentsd28JSCampaignAttributionService_bag], v3, v0);
  v9.receiver = v6;
  v9.super_class = v5;
  id v7 = objc_msgSendSuper2(&v9, "init");
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  sub_10002ED08((uint64_t)v10);
  return v7;
}

uint64_t sub_1000D9ECC(void *a1)
{
  return sub_1000D8D70(a1, *(void *)(v1 + 16), *(char **)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_1000D9EF0()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for Bag();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = (*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = v10;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  sub_10002ED08(v0 + v12);
  swift_release();

  return _swift_deallocObject(v0, ((v12 + 47) & 0xFFFFFFFFFFFFFFF8) + 8, v14);
}

uint64_t sub_1000DA07C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(type metadata accessor for Bag() - 8);
  unint64_t v11 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v12 = (*(void *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000D92E0(a1, a2, a3, v3 + v8, v3 + v11, *(void **)(v3 + v12), (void *)(v3 + ((v12 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v3 + ((((v12 + 15) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)));
}

void sub_1000DA1AC()
{
  type metadata accessor for JSCallable();

  sub_1000D96B8();
}

uint64_t sub_1000DA220()
{
  uint64_t v1 = type metadata accessor for JSCallable();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_1000DA2B0()
{
  type metadata accessor for JSCallable();

  sub_1000D9890();
}

uint64_t sub_1000DA320(uint64_t result, void *a2)
{
  unint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    unint64_t v4 = 0;
    uint64_t v5 = -(uint64_t)v2;
    uint64_t v6 = result + 64;
    uint64_t v7 = &_swiftEmptyArrayStorage;
    unint64_t v22 = *(void *)(result + 16);
    while (1)
    {
      uint64_t v24 = v7;
      uint64_t v8 = v4 <= v2 ? v2 : v4;
      uint64_t v9 = -v8;
      for (unint64_t i = (void *)(v6 + 40 * v4++); ; i += 5)
      {
        if (v9 + v4 == 1)
        {
          __break(1u);
          return result;
        }
        uint64_t v11 = *i;
        long long v12 = *((_OWORD *)i - 1);
        BOOL v13 = (void)v12 == -1 && *((void *)&v12 + 1) == -1;
        if (!v13 || v11 != -1) {
          break;
        }
LABEL_7:
        ++v4;
        if (v5 + v4 == 1) {
          return (uint64_t)v24;
        }
      }
      uint64_t v16 = *(i - 4);
      uint64_t v15 = *(i - 3);
      long long v25 = *((_OWORD *)i - 1);
      swift_bridgeObjectRetain();
      long long v26 = v25;
      uint64_t v27 = v11;
      if (([a2 isOperatingSystemAtLeastVersion:&v26] & 1) == 0) {
        break;
      }
      uint64_t v7 = v24;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v28 = v24;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1000C50B8(0, v24[2] + 1, 1);
        uint64_t v7 = v28;
      }
      uint64_t v6 = v23;
      long long v17 = v25;
      unint64_t v19 = v7[2];
      unint64_t v18 = v7[3];
      unint64_t v20 = v19 + 1;
      if (v19 >= v18 >> 1)
      {
        uint64_t result = (uint64_t)sub_1000C50B8((char *)(v18 > 1), v19 + 1, 1);
        unint64_t v20 = v19 + 1;
        long long v17 = v25;
        uint64_t v6 = v23;
        uint64_t v7 = v28;
      }
      v7[2] = v20;
      id v21 = (char *)&v7[5 * v19];
      *((void *)v21 + 4) = v16;
      *((void *)v21 + 5) = v15;
      *((_OWORD *)v21 + 3) = v17;
      *((void *)v21 + 8) = v11;
      unint64_t v2 = v22;
      if (!(v5 + v4)) {
        return (uint64_t)v7;
      }
    }
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  return (uint64_t)&_swiftEmptyArrayStorage;
}

uint64_t sub_1000DA4EC()
{
  sub_10002EB60(&qword_1001A3C08);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10014DF50;
  sub_1000DAEA4(3157559, 0xE300000000000000);
  *(void *)(v0 + 32) = 0xD000000000000010;
  *(void *)(v0 + 40) = 0x800000010015F620;
  *(void *)(v0 + 48) = -1;
  *(void *)(v0 + 56) = -1;
  *(void *)(v0 + 64) = -1;
  uint64_t v1 = sub_1000DAEA4(808334129, 0xE400000000000000);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_1000DAEA4(0x35312E3031, 0xE500000000000000);
  sub_1000DAEA4(808334129, 0xE400000000000000);
  sub_1000DAEA4(3157558, 0xE300000000000000);
  *(void *)(v0 + 72) = 4670277;
  *(void *)(v0 + 80) = 0xE300000000000000;
  *(void *)(v0 + 88) = v1;
  *(void *)(v0 + 96) = v3;
  *(void *)(v0 + 104) = v5;
  uint64_t v6 = sub_1000DAEA4(875444017, 0xE400000000000000);
  *(void *)(v0 + 112) = 0xD000000000000022;
  *(void *)(v0 + 120) = 0x800000010015F640;
  *(void *)(v0 + 128) = v6;
  *(void *)(v0 + 136) = v7;
  *(void *)(v0 + 144) = v8;
  uint64_t v9 = sub_1000DAEA4(841889841, 0xE400000000000000);
  *(void *)(v0 + 152) = 0xD000000000000011;
  *(void *)(v0 + 160) = 0x800000010015F670;
  *(void *)(v0 + 168) = v9;
  *(void *)(v0 + 176) = v10;
  *(void *)(v0 + 184) = v11;
  return v0;
}

uint64_t sub_1000DA648(uint64_t a1)
{
  id v1 = [self processInfo];
  uint64_t v2 = sub_1000DA4EC();
  uint64_t v3 = sub_1000DA320(v2, v1);
  swift_bridgeObjectRelease();

  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4)
  {
    uint64_t v6 = &_swiftEmptyDictionarySingleton;
LABEL_17:
    swift_bridgeObjectRelease();
    uint64_t v27 = sub_10002EB60(&qword_1001A4228);
    *(void *)&long long v26 = v6;
    sub_100042EA8(&v26, v25);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10003EBAC(v25, 0x6546746E65696C63, 0xEE00736572757461, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    return a1;
  }
  uint64_t v5 = (uint64_t *)(v3 + 40);
  uint64_t v6 = &_swiftEmptyDictionarySingleton;
  while (1)
  {
    uint64_t v8 = *(v5 - 1);
    uint64_t v7 = *v5;
    swift_bridgeObjectRetain();
    char v9 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v26 = v6;
    unint64_t v11 = sub_10003A860(v8, v7);
    uint64_t v12 = v6[2];
    BOOL v13 = (v10 & 1) == 0;
    uint64_t v14 = v12 + v13;
    if (__OFADD__(v12, v13)) {
      break;
    }
    char v15 = v10;
    if (v6[3] >= v14)
    {
      if (v9)
      {
        uint64_t v6 = (void *)v26;
        if (v10) {
          goto LABEL_3;
        }
      }
      else
      {
        sub_100040998();
        uint64_t v6 = (void *)v26;
        if (v15) {
          goto LABEL_3;
        }
      }
    }
    else
    {
      sub_10003D680(v14, v9);
      unint64_t v16 = sub_10003A860(v8, v7);
      if ((v15 & 1) != (v17 & 1)) {
        goto LABEL_20;
      }
      unint64_t v11 = v16;
      uint64_t v6 = (void *)v26;
      if (v15)
      {
LABEL_3:
        *(unsigned char *)(v6[7] + v11) = 1;
        goto LABEL_4;
      }
    }
    v6[(v11 >> 6) + 8] |= 1 << v11;
    unint64_t v18 = (uint64_t *)(v6[6] + 16 * v11);
    *unint64_t v18 = v8;
    v18[1] = v7;
    *(unsigned char *)(v6[7] + v11) = 1;
    uint64_t v19 = v6[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_19;
    }
    v6[2] = v21;
    swift_bridgeObjectRetain();
LABEL_4:
    v5 += 5;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!--v4) {
      goto LABEL_17;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000DA8A8(uint64_t result, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0) {
        uint64_t v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v7 = (uint64_t)sub_1000756D8(v6, v4, 10);
      char v9 = v8 & 1;
      goto LABEL_37;
    }
    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3) {
        goto LABEL_50;
      }
      if (v3 == 1 || (BYTE1(result) - 48) > 9u) {
        goto LABEL_34;
      }
      uint64_t v7 = (BYTE1(result) - 48);
      uint64_t v14 = v3 - 2;
      if (v14)
      {
        char v15 = (unsigned __int8 *)v23 + 2;
        while (1)
        {
          unsigned int v16 = *v15 - 48;
          if (v16 > 9) {
            goto LABEL_34;
          }
          uint64_t v17 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
            goto LABEL_34;
          }
          uint64_t v7 = v17 + v16;
          if (__OFADD__(v17, v16)) {
            goto LABEL_34;
          }
          char v9 = 0;
          ++v15;
          if (!--v14) {
            goto LABEL_37;
          }
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            uint64_t v7 = -(uint64_t)(BYTE1(result) - 48);
            uint64_t v10 = v3 - 2;
            if (v10)
            {
              unint64_t v11 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                unsigned int v12 = *v11 - 48;
                if (v12 > 9) {
                  goto LABEL_34;
                }
                uint64_t v13 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
                  goto LABEL_34;
                }
                uint64_t v7 = v13 - v12;
                if (__OFSUB__(v13, v12)) {
                  goto LABEL_34;
                }
                char v9 = 0;
                ++v11;
                if (!--v10) {
                  goto LABEL_37;
                }
              }
            }
            goto LABEL_36;
          }
LABEL_34:
          uint64_t v7 = 0;
          char v9 = 1;
          goto LABEL_37;
        }
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u) {
        goto LABEL_34;
      }
      uint64_t v7 = (result - 48);
      uint64_t v18 = v3 - 1;
      if (v18)
      {
        uint64_t v19 = (unsigned __int8 *)v23 + 1;
        while (1)
        {
          unsigned int v20 = *v19 - 48;
          if (v20 > 9) {
            goto LABEL_34;
          }
          uint64_t v21 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
            goto LABEL_34;
          }
          uint64_t v7 = v21 + v20;
          if (__OFADD__(v21, v20)) {
            goto LABEL_34;
          }
          char v9 = 0;
          ++v19;
          if (!--v18) {
            goto LABEL_37;
          }
        }
      }
    }
LABEL_36:
    char v9 = 0;
    goto LABEL_37;
  }
  uint64_t v7 = sub_100075708(result, a2, 10);
  char v9 = v22;
LABEL_37:
  swift_bridgeObjectRelease();
  if (v9) {
    return 0;
  }
  else {
    return v7;
  }
}

unint64_t sub_1000DAAF8(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = HIBYTE(a2) & 0xF;
  uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v6)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    unint64_t v8 = sub_100075720(a1, a2, 10);
    char v10 = v22;
    goto LABEL_39;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0) {
      uint64_t v7 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    unint64_t v8 = (unint64_t)sub_1000756F0(v7, v5, 10);
    char v10 = v9 & 1;
    goto LABEL_39;
  }
  v23[0] = a1;
  v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a1 == 43)
  {
    if (!v4) {
      goto LABEL_52;
    }
    if (v4 == 1 || (BYTE1(a1) - 48) > 9u) {
      goto LABEL_36;
    }
    unint64_t v8 = (BYTE1(a1) - 48);
    uint64_t v15 = v4 - 2;
    if (v15)
    {
      unsigned int v16 = (unsigned __int8 *)v23 + 2;
      while (1)
      {
        unsigned int v17 = *v16 - 48;
        if (v17 > 9) {
          goto LABEL_36;
        }
        if (!is_mul_ok(v8, 0xAuLL)) {
          goto LABEL_36;
        }
        BOOL v14 = __CFADD__(10 * v8, v17);
        unint64_t v8 = 10 * v8 + v17;
        if (v14) {
          goto LABEL_36;
        }
        char v10 = 0;
        ++v16;
        if (!--v15) {
          goto LABEL_39;
        }
      }
    }
LABEL_38:
    char v10 = 0;
    goto LABEL_39;
  }
  if (a1 != 45)
  {
    if (!v4 || (a1 - 48) > 9u) {
      goto LABEL_36;
    }
    unint64_t v8 = (a1 - 48);
    uint64_t v18 = v4 - 1;
    if (v18)
    {
      unsigned int v20 = (unsigned __int8 *)v23 + 1;
      while (1)
      {
        unsigned int v21 = *v20 - 48;
        if (v21 > 9) {
          goto LABEL_36;
        }
        if (!is_mul_ok(v8, 0xAuLL)) {
          goto LABEL_36;
        }
        BOOL v14 = __CFADD__(10 * v8, v21);
        unint64_t v8 = 10 * v8 + v21;
        if (v14) {
          goto LABEL_36;
        }
        char v10 = 0;
        ++v20;
        if (!--v18) {
          goto LABEL_39;
        }
      }
    }
    goto LABEL_38;
  }
  if (v4)
  {
    if (v4 != 1 && (BYTE1(a1) - 48) <= 9u)
    {
      unint64_t v2 = 0;
      unint64_t v8 = -(uint64_t)(BYTE1(a1) - 48);
      if (BYTE1(a1) == 48)
      {
        uint64_t v11 = v4 - 2;
        if (v11)
        {
          unsigned int v12 = (unsigned __int8 *)v23 + 2;
          while (1)
          {
            unsigned int v13 = *v12 - 48;
            if (v13 > 9) {
              goto LABEL_36;
            }
            if (!is_mul_ok(v8, 0xAuLL)) {
              goto LABEL_36;
            }
            BOOL v14 = 10 * v8 >= v13;
            unint64_t v8 = 10 * v8 - v13;
            if (!v14) {
              goto LABEL_36;
            }
            char v10 = 0;
            ++v12;
            if (!--v11) {
              goto LABEL_39;
            }
          }
        }
        goto LABEL_38;
      }
      goto LABEL_53;
    }
LABEL_36:
    unint64_t v8 = 0;
    char v10 = 1;
    goto LABEL_39;
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  char v10 = 1;
  unint64_t v8 = v2;
LABEL_39:
  swift_bridgeObjectRelease();
  if (v10) {
    return 0;
  }
  else {
    return v8;
  }
}

uint64_t sub_1000DAD58()
{
  uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
  v0._countAndFlagsBits = 46;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 46;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  return v5;
}

BOOL sub_1000DAE34(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

uint64_t sub_1000DAE64()
{
  return sub_1000DAD58();
}

uint64_t sub_1000DAE70@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000DAEA4(*a1, a1[1]);
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

uint64_t sub_1000DAEA4(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = a1;
  uint64_t v37 = a2;
  sub_1000959C0();
  Swift::String v2 = (void *)StringProtocol.components<A>(separatedBy:)();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v4 = v2[2];
  if (v4 != 2)
  {
    if (v4 != 3)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    uint64_t v5 = v2[4];
    unint64_t v6 = v2[5];
    uint64_t v7 = HIBYTE(v6) & 0xF;
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
    if ((v6 & 0x2000000000000000) != 0) {
      uint64_t v9 = HIBYTE(v6) & 0xF;
    }
    else {
      uint64_t v9 = v5 & 0xFFFFFFFFFFFFLL;
    }
    if (!v9)
    {
      uint64_t v11 = 0;
      goto LABEL_55;
    }
    if ((v6 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v11 = sub_100075708(v5, v6, 10);
      LOBYTE(v5) = v35;
      swift_bridgeObjectRelease();
      goto LABEL_52;
    }
    if ((v6 & 0x2000000000000000) == 0)
    {
      if ((v5 & 0x1000000000000000) == 0) {
        goto LABEL_69;
      }
      for (unint64_t i = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
            ;
            unint64_t i = (unsigned __int8 *)_StringObject.sharedUTF8.getter())
      {
        uint64_t v11 = (uint64_t)sub_1000756D8(i, v8, 10);
        LOBYTE(v5) = v12 & 1;
LABEL_52:
        if (v5) {
          uint64_t v11 = 0;
        }
        if (v2[2] < 2uLL)
        {
LABEL_67:
          __break(1u);
        }
        else
        {
LABEL_55:
          uint64_t v28 = v2[6];
          unint64_t v29 = v2[7];
          swift_bridgeObjectRetain();
          sub_1000DA8A8(v28, v29);
          if (v2[2] >= 3uLL)
          {
            uint64_t v30 = v2[8];
            unint64_t v31 = v2[9];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            sub_1000DA8A8(v30, v31);
            return v11;
          }
        }
        __break(1u);
LABEL_69:
        ;
      }
    }
    uint64_t v36 = v2[4];
    uint64_t v37 = v6 & 0xFFFFFFFFFFFFFFLL;
    if (v5 == 43)
    {
      if (!v7)
      {
LABEL_71:
        __break(1u);
        return result;
      }
      if (v7 == 1 || (BYTE1(v5) - 48) > 9u) {
        goto LABEL_39;
      }
      uint64_t v11 = (BYTE1(v5) - 48);
      if (v7 != 2)
      {
        if ((BYTE2(v5) - 48) > 9u) {
          goto LABEL_39;
        }
        uint64_t v11 = 10 * (BYTE1(v5) - 48) + (BYTE2(v5) - 48);
        uint64_t v19 = v7 - 3;
        if (v7 != 3)
        {
          unsigned int v20 = (unsigned __int8 *)&v36 + 3;
          while (1)
          {
            unsigned int v21 = *v20 - 48;
            if (v21 > 9) {
              goto LABEL_39;
            }
            uint64_t v22 = 10 * v11;
            if ((unsigned __int128)(v11 * (__int128)10) >> 64 != (10 * v11) >> 63) {
              goto LABEL_39;
            }
            uint64_t v11 = v22 + v21;
            if (__OFADD__(v22, v21)) {
              goto LABEL_39;
            }
            LOBYTE(v5) = 0;
            ++v20;
            if (!--v19) {
              goto LABEL_52;
            }
          }
        }
      }
    }
    else
    {
      if (v5 == 45)
      {
        if (v7)
        {
          if (v7 != 1 && (BYTE1(v5) - 48) <= 9u)
          {
            if (v7 == 2)
            {
              LOBYTE(v5) = 0;
              uint64_t v11 = -(uint64_t)(BYTE1(v5) - 48);
              goto LABEL_52;
            }
            if ((BYTE2(v5) - 48) <= 9u)
            {
              uint64_t v11 = -10 * (BYTE1(v5) - 48) - (BYTE2(v5) - 48);
              uint64_t v27 = v7 - 3;
              if (v7 == 3) {
                goto LABEL_51;
              }
              uint64_t v32 = (unsigned __int8 *)&v36 + 3;
              while (1)
              {
                unsigned int v33 = *v32 - 48;
                if (v33 > 9) {
                  break;
                }
                uint64_t v34 = 10 * v11;
                if ((unsigned __int128)(v11 * (__int128)10) >> 64 != (10 * v11) >> 63) {
                  break;
                }
                uint64_t v11 = v34 - v33;
                if (__OFSUB__(v34, v33)) {
                  break;
                }
                LOBYTE(v5) = 0;
                ++v32;
                if (!--v27) {
                  goto LABEL_52;
                }
              }
            }
          }
LABEL_39:
          uint64_t v11 = 0;
          LOBYTE(v5) = 1;
          goto LABEL_52;
        }
        __break(1u);
        goto LABEL_71;
      }
      if (!v7 || (v5 - 48) > 9u) {
        goto LABEL_39;
      }
      uint64_t v11 = (v5 - 48);
      if (v7 != 1)
      {
        if ((BYTE1(v5) - 48) > 9u) {
          goto LABEL_39;
        }
        uint64_t v11 = 10 * (v5 - 48) + (BYTE1(v5) - 48);
        uint64_t v23 = v7 - 2;
        if (v7 != 2)
        {
          uint64_t v24 = (unsigned __int8 *)&v36 + 2;
          while (1)
          {
            unsigned int v25 = *v24 - 48;
            if (v25 > 9) {
              goto LABEL_39;
            }
            uint64_t v26 = 10 * v11;
            if ((unsigned __int128)(v11 * (__int128)10) >> 64 != (10 * v11) >> 63) {
              goto LABEL_39;
            }
            uint64_t v11 = v26 + v25;
            if (__OFADD__(v26, v25)) {
              goto LABEL_39;
            }
            LOBYTE(v5) = 0;
            ++v24;
            if (!--v23) {
              goto LABEL_52;
            }
          }
        }
      }
    }
LABEL_51:
    LOBYTE(v5) = 0;
    goto LABEL_52;
  }
  uint64_t v13 = v2[4];
  unint64_t v14 = v2[5];
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_1000DA8A8(v13, v14);
  if (v2[2] < 2uLL)
  {
    __break(1u);
    goto LABEL_67;
  }
  if (v16) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v15;
  }
  uint64_t v17 = v2[6];
  unint64_t v18 = v2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1000DA8A8(v17, v18);
  return v11;
}

uint64_t initializeWithCopy for JSClientFeature(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for JSClientFeature(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

__n128 initializeWithTake for JSClientFeature(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for JSClientFeature(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for JSClientFeature(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JSClientFeature(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for JSClientFeature()
{
  return &type metadata for JSClientFeature;
}

uint64_t getEnumTagSinglePayload for JSClientFeature.OSVersion(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for JSClientFeature.OSVersion(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for JSClientFeature.OSVersion()
{
  return &type metadata for JSClientFeature.OSVersion;
}

void *sub_1000DB4BC()
{
  return &protocol witness table for String;
}

unint64_t sub_1000DB4CC()
{
  unint64_t result = qword_1001A4230;
  if (!qword_1001A4230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A4230);
  }
  return result;
}

void *sub_1000DB520()
{
  return &protocol witness table for String;
}

unint64_t sub_1000DB530()
{
  unint64_t result = qword_1001A4238;
  if (!qword_1001A4238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A4238);
  }
  return result;
}

void *sub_1000DB584()
{
  return &protocol witness table for String;
}

uint64_t sub_1000DB5D0()
{
  return sub_1000DB768();
}

uint64_t sub_1000DB738()
{
  return sub_1000DB768();
}

uint64_t sub_1000DB768()
{
  return swift_willThrow();
}

uint64_t type metadata accessor for JSClientOrderingObject()
{
  return self;
}

uint64_t sub_1000DB8C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MetricsLogger.Configuration();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t sub_1000DB930(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MetricsLogger.Configuration();
  char v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_1000DB994(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MetricsLogger.Configuration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000DB9F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MetricsLogger.Configuration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000DBA5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MetricsLogger.Configuration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000DBAC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MetricsLogger.Configuration();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000DBB24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000DBB38);
}

uint64_t sub_1000DBB38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MetricsLogger.Configuration();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1000DBBA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000DBBB8);
}

uint64_t sub_1000DBBB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MetricsLogger.Configuration();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for JSDiagnostics()
{
  uint64_t result = qword_1001A42C0;
  if (!qword_1001A42C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000DBC74()
{
  uint64_t result = type metadata accessor for MetricsLogger.Configuration();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000DBD00(uint64_t a1, uint64_t a2)
{
  uint64_t v123 = type metadata accessor for LogMessageLevel();
  uint64_t v122 = *(void *)(v123 - 8);
  __chkstk_darwin(v123);
  v121 = (char *)&v105 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = type metadata accessor for JSError();
  uint64_t v117 = *(void *)(v115 - 8);
  uint64_t v5 = __chkstk_darwin(v115);
  v116 = (char *)&v105 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v113 = (char *)&v105 - v7;
  uint64_t v8 = sub_10002EB60(&qword_1001A42F8);
  __chkstk_darwin(v8 - 8);
  v129 = (char *)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = type metadata accessor for MetricsLogger.Configuration();
  uint64_t v124 = *(void *)(v125 - 8);
  __chkstk_darwin(v125);
  v126 = (char *)&v105 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = type metadata accessor for JSONError();
  uint64_t v114 = *(void *)(v119 - 8);
  __chkstk_darwin(v119);
  v118 = (char *)&v105 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = type metadata accessor for LogMessage();
  uint64_t v12 = *(void *)(v136 - 8);
  uint64_t v13 = v12;
  uint64_t v14 = __chkstk_darwin(v136);
  v108 = (char *)&v105 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  v112 = (char *)&v105 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  v107 = (char *)&v105 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  v111 = (char *)&v105 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  v110 = (char *)&v105 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  v109 = (char *)&v105 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  v127 = (char *)&v105 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v105 - v29;
  __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v105 - v31;
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  uint64_t v33 = *(void *)(v12 + 72);
  unint64_t v34 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  size_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_10014CD00;
  unint64_t v134 = v34;
  LogMessage.init(stringLiteral:)();
  uint64_t v135 = v33;
  uint64_t v120 = a1;
  swift_getErrorValue();
  size_t v36 = 1;
  uint64_t DynamicType = swift_getDynamicType();
  *((void *)&v142 + 1) = swift_getMetatypeMetadata();
  v140 = (char *)DynamicType;
  size_t v38 = (size_t)&v140;
  static LogMessage.safe(_:)();
  sub_100034B8C((uint64_t)&v140, &qword_1001A1C50);
  v143 = (void *)v35;
  uint64_t v39 = *(void *)(a2 + 64);
  uint64_t v130 = a2 + 64;
  uint64_t v40 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v41 = -1;
  if (v40 < 64) {
    uint64_t v41 = ~(-1 << v40);
  }
  unint64_t v42 = v41 & v39;
  v132 = v139;
  uint64_t v43 = (size_t *)(v13 + 32);
  int64_t v131 = (unint64_t)(v40 + 63) >> 6;
  int64_t v106 = v131 - 1;
  uint64_t v133 = a2;
  swift_bridgeObjectRetain();
  int64_t v44 = 0;
  if (!v42) {
    goto LABEL_6;
  }
LABEL_4:
  unint64_t v45 = __clz(__rbit64(v42));
  v42 &= v42 - 1;
  unint64_t v46 = v45 | (v44 << 6);
LABEL_5:
  uint64_t v47 = *(void *)(v133 + 56);
  uint64_t v48 = (void *)(*(void *)(v133 + 48) + 16 * v46);
  uint64_t v49 = v48[1];
  *(void *)&long long v138 = *v48;
  *((void *)&v138 + 1) = v49;
  sub_100042EB8(v47 + 32 * v46, (uint64_t)v132);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_1000D3158((uint64_t)&v138, (uint64_t)&v140);
    size_t v53 = v141;
    if (!v141) {
      break;
    }
    uint64_t v54 = v140;
    sub_100042EA8(&v142, &v138);
    v137[3] = &type metadata for String;
    v137[0] = v54;
    v137[1] = v53;
    static LogMessage.safe(_:)();
    sub_100034B8C((uint64_t)v137, &qword_1001A1C50);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      size_t v35 = sub_1000762F8(0, *(void *)(v35 + 16) + 1, 1, (void *)v35);
    }
    unint64_t v56 = *(void *)(v35 + 16);
    unint64_t v55 = *(void *)(v35 + 24);
    if (v56 >= v55 >> 1) {
      size_t v35 = sub_1000762F8(v55 > 1, v56 + 1, 1, (void *)v35);
    }
    *(void *)(v35 + 16) = v56 + 1;
    size_t v57 = v35 + v134 + v56 * v135;
    size_t v36 = *v43;
    ((void (*)(size_t, char *, uint64_t))*v43)(v57, v32, v136);
    v143 = (void *)v35;
    sub_100042EB8((uint64_t)&v138, (uint64_t)v137);
    static LogMessage.safe(_:)();
    sub_100034B8C((uint64_t)v137, &qword_1001A1C50);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      size_t v35 = sub_1000762F8(0, *(void *)(v35 + 16) + 1, 1, (void *)v35);
    }
    size_t v38 = *(void *)(v35 + 16);
    unint64_t v58 = *(void *)(v35 + 24);
    if (v38 >= v58 >> 1) {
      size_t v35 = sub_1000762F8(v58 > 1, v38 + 1, 1, (void *)v35);
    }
    *(void *)(v35 + 16) = v38 + 1;
    ((void (*)(size_t, char *, uint64_t))v36)(v35 + v134 + v38 * v135, v30, v136);
    v143 = (void *)v35;
    sub_10002ED08((uint64_t)&v138);
    if (v42) {
      goto LABEL_4;
    }
LABEL_6:
    int64_t v50 = v44 + 1;
    if (__OFADD__(v44, 1))
    {
      __break(1u);
      goto LABEL_72;
    }
    if (v50 < v131)
    {
      unint64_t v51 = *(void *)(v130 + 8 * v50);
      if (v51) {
        goto LABEL_9;
      }
      int64_t v52 = v44 + 2;
      ++v44;
      if (v50 + 1 < v131)
      {
        unint64_t v51 = *(void *)(v130 + 8 * v52);
        if (v51) {
          goto LABEL_12;
        }
        int64_t v44 = v50 + 1;
        if (v50 + 2 < v131)
        {
          unint64_t v51 = *(void *)(v130 + 8 * (v50 + 2));
          if (v51)
          {
            v50 += 2;
            goto LABEL_9;
          }
          int64_t v52 = v50 + 3;
          int64_t v44 = v50 + 2;
          if (v50 + 3 < v131)
          {
            unint64_t v51 = *(void *)(v130 + 8 * v52);
            if (!v51)
            {
              while (1)
              {
                int64_t v50 = v52 + 1;
                if (__OFADD__(v52, 1)) {
                  break;
                }
                if (v50 >= v131)
                {
                  int64_t v44 = v106;
                  goto LABEL_23;
                }
                unint64_t v51 = *(void *)(v130 + 8 * v50);
                ++v52;
                if (v51) {
                  goto LABEL_9;
                }
              }
LABEL_72:
              __break(1u);
LABEL_73:
              size_t v36 = sub_1000762F8(0, *(void *)(v36 + 16) + 1, 1, (void *)v36);
LABEL_60:
              unint64_t v93 = *(void *)(v36 + 16);
              unint64_t v92 = *(void *)(v36 + 24);
              if (v93 >= v92 >> 1) {
                size_t v36 = sub_1000762F8(v92 > 1, v93 + 1, 1, (void *)v36);
              }
              *(void *)(v36 + 16) = v93 + 1;
              ((void (*)(size_t, char *, uint64_t))v38)(v36 + v134 + v93 * v135, v112, v136);
              v143 = (void *)v36;
              *((void *)&v142 + 1) = &type metadata for String;
              v140 = v30;
              size_t v141 = v35;
              v94 = v108;
              static LogMessage.safe(_:)();
              sub_100034B8C((uint64_t)&v140, &qword_1001A1C50);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                size_t v36 = sub_1000762F8(0, *(void *)(v36 + 16) + 1, 1, (void *)v36);
              }
              unint64_t v96 = *(void *)(v36 + 16);
              unint64_t v95 = *(void *)(v36 + 24);
              if (v96 >= v95 >> 1) {
                size_t v36 = sub_1000762F8(v95 > 1, v96 + 1, 1, (void *)v36);
              }
              *(void *)(v36 + 16) = v96 + 1;
              ((void (*)(size_t, char *, uint64_t))v38)(v36 + v134 + v96 * v135, v94, v136);
              v143 = (void *)v36;
              goto LABEL_67;
            }
LABEL_12:
            int64_t v50 = v52;
LABEL_9:
            unint64_t v42 = (v51 - 1) & v51;
            unint64_t v46 = __clz(__rbit64(v51)) + (v50 << 6);
            int64_t v44 = v50;
            goto LABEL_5;
          }
        }
      }
    }
LABEL_23:
    unint64_t v42 = 0;
    memset(v139, 0, sizeof(v139));
    long long v138 = 0u;
  }
  swift_release();
  uint64_t v59 = v120;
  *(void *)&long long v138 = v120;
  swift_errorRetain();
  sub_10002EB60((uint64_t *)&unk_1001A3FC0);
  objc_super v60 = v118;
  uint64_t v61 = v119;
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v124 + 16))(v126, v128, v125);
    type metadata accessor for MetricsLogger();
    swift_allocObject();
    MetricsLogger.init(loggerName:configuration:)();
    swift_getErrorValue();
    uint64_t v62 = Error.localizedDescription.getter();
    *((void *)&v142 + 1) = &type metadata for String;
    v140 = (char *)v62;
    size_t v141 = v63;
    uint64_t v64 = v127;
    static LogMessage.safe(_:)();
    sub_100034B8C((uint64_t)&v140, &qword_1001A1C50);
    uint64_t v65 = (uint64_t)v129;
    ((void (*)(char *, char *, uint64_t))*v43)(v129, v64, v136);
    sub_1000DD278(0, 0, v65);
    (*(void (**)(char *, uint64_t))(v114 + 8))(v60, v61);
  }
  else
  {
    swift_errorRelease();
    *(void *)&long long v138 = v59;
    swift_errorRetain();
    BOOL v66 = v113;
    uint64_t v32 = (char *)v115;
    if (!swift_dynamicCast())
    {
      swift_errorRelease();
      (*(void (**)(char *, uint64_t, uint64_t))(v124 + 16))(v126, v128, v125);
      type metadata accessor for MetricsLogger();
      swift_allocObject();
      MetricsLogger.init(loggerName:configuration:)();
      swift_getErrorValue();
      uint64_t v97 = Error.localizedDescription.getter();
      *((void *)&v142 + 1) = &type metadata for String;
      v140 = (char *)v97;
      size_t v141 = v98;
      v99 = v127;
      static LogMessage.safe(_:)();
      sub_100034B8C((uint64_t)&v140, &qword_1001A1C50);
      uint64_t v100 = (uint64_t)v129;
      ((void (*)(char *, char *, uint64_t))*v43)(v129, v99, v136);
      sub_1000DD278(0, 0, v100);
      goto LABEL_70;
    }
    int64_t v44 = (int64_t)v116;
    (*(void (**)(char *, char *, char *))(v117 + 32))(v116, v66, v32);
    (*(void (**)(char *, uint64_t, uint64_t))(v124 + 16))(v126, v128, v125);
    type metadata accessor for MetricsLogger();
    swift_allocObject();
    MetricsLogger.init(loggerName:configuration:)();
    uint64_t v67 = JSError.message.getter();
    *((void *)&v142 + 1) = &type metadata for String;
    v140 = (char *)v67;
    size_t v141 = v68;
    id v69 = v127;
    static LogMessage.safe(_:)();
    sub_100034B8C((uint64_t)&v140, &qword_1001A1C50);
    size_t v38 = *v43;
    uint64_t v70 = (uint64_t)v129;
    ((void (*)(char *, char *, uint64_t))*v43)(v129, v69, v136);
    sub_1000DD278(0, 0, v70);
    uint64_t v71 = JSError.line.getter();
    if ((v72 & 1) == 0)
    {
      uint64_t v73 = v71;
      LogMessage.init(stringLiteral:)();
      uint64_t v74 = v143;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v74 = (void *)sub_1000762F8(0, v74[2] + 1, 1, v74);
      }
      unint64_t v76 = v74[2];
      unint64_t v75 = v74[3];
      if (v76 >= v75 >> 1) {
        uint64_t v74 = (void *)sub_1000762F8(v75 > 1, v76 + 1, 1, v74);
      }
      v74[2] = v76 + 1;
      ((void (*)(char *, char *, uint64_t))v38)((char *)v74 + v134 + v76 * v135, v109, v136);
      v143 = v74;
      int64_t v77 = (char *)[objc_allocWithZone((Class)NSNumber) initWithInteger:v73];
      *((void *)&v142 + 1) = sub_100095A14();
      v140 = v77;
      static LogMessage.safe(_:)();
      sub_100034B8C((uint64_t)&v140, &qword_1001A1C50);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v74 = (void *)sub_1000762F8(0, v74[2] + 1, 1, v74);
      }
      int64_t v44 = (int64_t)v116;
      unint64_t v79 = v74[2];
      unint64_t v78 = v74[3];
      if (v79 >= v78 >> 1) {
        uint64_t v74 = (void *)sub_1000762F8(v78 > 1, v79 + 1, 1, v74);
      }
      v74[2] = v79 + 1;
      ((void (*)(char *, char *, uint64_t))v38)((char *)v74 + v134 + v79 * v135, v110, v136);
      v143 = v74;
    }
    uint64_t v80 = JSError.column.getter();
    if ((v81 & 1) == 0)
    {
      uint64_t v82 = v80;
      LogMessage.init(stringLiteral:)();
      unint64_t v83 = v143;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v83 = (void *)sub_1000762F8(0, v83[2] + 1, 1, v83);
      }
      unint64_t v85 = v83[2];
      unint64_t v84 = v83[3];
      if (v85 >= v84 >> 1) {
        unint64_t v83 = (void *)sub_1000762F8(v84 > 1, v85 + 1, 1, v83);
      }
      v83[2] = v85 + 1;
      ((void (*)(char *, char *, uint64_t))v38)((char *)v83 + v134 + v85 * v135, v111, v136);
      v143 = v83;
      id v86 = (char *)[objc_allocWithZone((Class)NSNumber) initWithInteger:v82];
      *((void *)&v142 + 1) = sub_100095A14();
      v140 = v86;
      uint64_t v87 = v107;
      static LogMessage.safe(_:)();
      sub_100034B8C((uint64_t)&v140, &qword_1001A1C50);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v83 = (void *)sub_1000762F8(0, v83[2] + 1, 1, v83);
      }
      int64_t v44 = (int64_t)v116;
      unint64_t v89 = v83[2];
      unint64_t v88 = v83[3];
      if (v89 >= v88 >> 1) {
        unint64_t v83 = (void *)sub_1000762F8(v88 > 1, v89 + 1, 1, v83);
      }
      v83[2] = v89 + 1;
      ((void (*)(char *, char *, uint64_t))v38)((char *)v83 + v134 + v89 * v135, v87, v136);
      v143 = v83;
    }
    uint64_t v90 = JSError.sourceURL.getter();
    if (v91)
    {
      uint64_t v30 = (char *)v90;
      size_t v35 = v91;
      LogMessage.init(stringLiteral:)();
      size_t v36 = (size_t)v143;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_73;
      }
      goto LABEL_60;
    }
LABEL_67:
    (*(void (**)(int64_t, char *))(v117 + 8))(v44, v32);
  }
  swift_errorRelease();
LABEL_70:
  uint64_t v101 = v122;
  v102 = v121;
  uint64_t v103 = v123;
  (*(void (**)(char *, void, uint64_t))(v122 + 104))(v121, enum case for LogMessageLevel.error(_:), v123);
  MetricsLogger.log(contentsOf:withLevel:)();
  swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v101 + 8))(v102, v103);
}

uint64_t sub_1000DCFA0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for MetricsLogger.Configuration();
  __chkstk_darwin(v3);
  (*(void (**)(char *, uint64_t))(v5 + 16))((char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  type metadata accessor for MetricsLogger();
  swift_allocObject();
  uint64_t v6 = MetricsLogger.init(loggerName:configuration:)();
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7) {
    return swift_release();
  }
  uint64_t v8 = *(void *)(type metadata accessor for JSIncident() - 8);
  uint64_t v9 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  uint64_t v22 = *(void *)(v8 + 72);
  uint64_t v10 = *(void *)(type metadata accessor for LogMessage() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v20 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v21 = v11;
  unint64_t v19 = v20 + 2 * v11;
  v17[1] = a1;
  swift_bridgeObjectRetain();
  long long v18 = xmmword_10014CD00;
  do
  {
    uint64_t v26 = v6;
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    *(_OWORD *)(swift_allocObject() + 16) = v18;
    uint64_t v12 = JSIncident.problemSummary.getter();
    uint64_t v25 = &type metadata for String;
    uint64_t v23 = v12;
    uint64_t v24 = v13;
    static LogMessage.safe(_:)();
    sub_100034B8C((uint64_t)&v23, &qword_1001A1C50);
    uint64_t v14 = JSIncident.contextSummary.getter();
    uint64_t v25 = &type metadata for String;
    uint64_t v23 = v14;
    uint64_t v24 = v15;
    static LogMessage.safe(_:)();
    sub_100034B8C((uint64_t)&v23, &qword_1001A1C50);
    Logger.error(_:)();
    swift_bridgeObjectRelease();
    v9 += v22;
    --v7;
  }
  while (v7);
  swift_release();
  return swift_bridgeObjectRelease();
}

unint64_t sub_1000DD278(unint64_t result, int64_t a2, uint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v5 = *(void **)v3;
  int64_t v6 = *(void *)(*(void *)v3 + 16);
  if (v6 < a2)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  unint64_t v7 = result;
  unint64_t v8 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  unint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    return result;
  }
  size_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)uint64_t v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    uint64_t v5 = (void *)sub_1000762F8(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *(void *)uint64_t v3 = v5;
  }
  uint64_t v14 = type metadata accessor for LogMessage();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = (char *)v5 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  uint64_t v17 = *(void *)(v15 + 72);
  long long v18 = &v16[v17 * v7];
  uint64_t result = swift_arrayDestroy();
  if (!v9) {
    goto LABEL_24;
  }
  uint64_t v19 = v5[2];
  if (__OFSUB__(v19, a2)) {
    goto LABEL_32;
  }
  uint64_t result = (unint64_t)&v18[v17];
  unint64_t v20 = (unint64_t)&v16[v17 * a2];
  if ((unint64_t)&v18[v17] < v20 || result >= v20 + (v19 - a2) * v17)
  {
    uint64_t result = swift_arrayInitWithTakeFrontToBack();
  }
  else if (result != v20)
  {
    uint64_t result = swift_arrayInitWithTakeBackToFront();
  }
  uint64_t v22 = v5[2];
  BOOL v23 = __OFADD__(v22, v9);
  uint64_t v24 = v22 + v9;
  if (v23) {
    goto LABEL_33;
  }
  v5[2] = v24;
LABEL_24:
  if (v17 >= 1) {
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a3, v14);
  }
  return sub_100034B8C(a3, &qword_1001A42F8);
}

uint64_t sub_1000DD440(uint64_t result, int64_t a2)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v6 = result;
  int64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  size_t isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *((void *)v4 + 3) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_100076438(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_19;
  }
  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_25;
  }
  uint64_t v15 = &v4[16 * a2 + 32];
  if (v6 != a2 || &v4[16 * v6 + 32] >= &v15[16 * v14]) {
    uint64_t result = (uint64_t)memmove(&v4[16 * v6 + 32], v15, 16 * v14);
  }
  uint64_t v16 = *((void *)v4 + 2);
  BOOL v13 = __OFADD__(v16, v8);
  uint64_t v17 = v16 - v7;
  if (!v13)
  {
    *((void *)v4 + 2) = v17;
LABEL_19:
    *uint64_t v2 = v4;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

id sub_1000DD558()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  int64_t v11 = &type metadata for SystemFeatureFlagsStore;
  uint64_t v12 = &off_1001883B0;
  id v1 = objc_allocWithZone(ObjectType);
  uint64_t v2 = sub_10002FE00((uint64_t)v10, (uint64_t)&type metadata for SystemFeatureFlagsStore);
  __chkstk_darwin(v2);
  (*(void (**)(void))(v3 + 16))();
  uint64_t v8 = &type metadata for SystemFeatureFlagsStore;
  int64_t v9 = &off_1001883B0;
  sub_100052538((uint64_t)v7, (uint64_t)v1 + OBJC_IVAR____TtC19appstorecomponentsd20JSFeatureFlagsObject_store);
  v6.receiver = v1;
  v6.super_class = ObjectType;
  id v4 = objc_msgSendSuper2(&v6, "init");
  sub_10002ED08((uint64_t)v7);
  sub_10002ED08((uint64_t)v10);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v4;
}

id sub_1000DD690(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = JSValue.string.getter();
  if (!v5) {
    goto LABEL_5;
  }
  objc_super v6 = v5;
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  unint64_t v8 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100184B70, v7);
  swift_bridgeObjectRelease();
  if (v8 >= 3)
  {
    id result = [self valueWithBool:0 inContext:a1];
    if (!result) {
      __break(1u);
    }
  }
  else
  {
    uint64_t v12 = &type metadata for Feature;
    unint64_t v13 = sub_100070914();
    v11[0] = v8;
    a2 = isFeatureEnabled(_:)();
    sub_10002ED08((uint64_t)v11);
    id result = [self valueWithBool:a2 & 1 inContext:a1];
    if (!result)
    {
      __break(1u);
LABEL_5:
      type metadata accessor for JSError();
      sub_1000D7158();
      swift_allocError();
      id v10 = (id)a2;
      JSError.init(badValue:expected:)();
      return (id)swift_willThrow();
    }
  }
  return result;
}

uint64_t type metadata accessor for JSFeatureFlagsObject()
{
  return self;
}

id sub_1000DD8B8(uint64_t a1)
{
  return sub_1000DD690(a1, *(void *)(v1 + 16));
}

ValueMetadata *type metadata accessor for SystemFeatureFlagsStore()
{
  return &type metadata for SystemFeatureFlagsStore;
}

uint64_t sub_1000DD8E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000DD8F8);
}

uint64_t sub_1000DD8F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for JSDiagnostics();
  int64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1000DD964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000DD978);
}

uint64_t sub_1000DD978(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for JSDiagnostics();
  int64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for JSInitFailureObserver()
{
  uint64_t result = qword_1001A4388;
  if (!qword_1001A4388) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000DDA34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for OSLogger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0E70 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_10002F6AC(v5, (uint64_t)qword_1001AE398);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  uint64_t v10 = swift_allocObject();
  long long v23 = xmmword_10014CED0;
  *(_OWORD *)(v10 + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v11._countAndFlagsBits = 0x6964726163736944;
  v11._object = (void *)0xEB0000000020676ELL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v11);
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  v26[0] = a1;
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_1000709E0((uint64_t)v26);
  v12._countAndFlagsBits = 0xD00000000000002ALL;
  v12._object = (void *)0x800000010015F8D0;
  LogMessage.StringInterpolation.appendLiteral(_:)(v12);
  swift_getErrorValue();
  uint64_t v13 = a2;
  uint64_t v14 = v24;
  uint64_t v15 = v25;
  uint64_t MetatypeMetadata = v25;
  uint64_t v16 = sub_100031A88(v26);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v16, v14, v15);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_1000709E0((uint64_t)v26);
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v17);
  LogMessage.init(stringInterpolation:)();
  Logger.warning(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_10002EB60(&qword_1001A4CE0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = v23;
  *(void *)(inited + 32) = 0xD000000000000012;
  *(void *)(inited + 40) = 0x800000010015F900;
  v26[0] = a1;
  sub_10002EB60((uint64_t *)&unk_1001A43C0);
  uint64_t v19 = String.init<A>(reflecting:)();
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v19;
  *(void *)(inited + 56) = v20;
  unint64_t v21 = sub_100062F68(inited);
  sub_1000DBD00(v13, v21);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000DDDE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10002EB60(&qword_1001A44F0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1000107C4())
  {
    id v5 = [self daemonDefaults];
    id v6 = [v5 debugPackageURL];

    if (v6)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      URL.init(string:)();
      swift_bridgeObjectRelease();
      uint64_t v7 = type metadata accessor for URL();
      uint64_t v8 = *(void *)(v7 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v4, 1, v7) != 1)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a1, v4, v7);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
      }
      sub_100034B8C((uint64_t)v4, &qword_1001A44F0);
    }
  }
  if (qword_1001A0E70 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for OSLogger();
  sub_10002F6AC(v9, (uint64_t)qword_1001AE398);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.init(stringLiteral:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  uint64_t v10 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(a1, 2, 2, v10);
}

uint64_t sub_1000DE0DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A44F0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v36 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v36 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v36 - v15;
  __chkstk_darwin(v14);
  long long v18 = (char *)&v36 - v17;
  uint64_t v20 = URL.absoluteString.getter();
  uint64_t v21 = v19;
  if (v20 == 0xD000000000000034 && v19 == 0x800000010015F9A0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    URL.init(string:)();
    uint64_t v22 = type metadata accessor for URL();
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v18, 1, v22);
    if (result != 1) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v23 + 32))(a2, v18, v22);
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    return result;
  }
  if (v20 == 0xD000000000000036 && v21 == 0x800000010015F9E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    URL.init(string:)();
    uint64_t v25 = type metadata accessor for URL();
    uint64_t v26 = *(void *)(v25 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48))(v16, 1, v25);
    if (result != 1) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(a2, v16, v25);
    }
    goto LABEL_31;
  }
  if (v20 == 0xD000000000000035 && v21 == 0x800000010015FA20
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    URL.init(string:)();
    uint64_t v27 = type metadata accessor for URL();
    uint64_t v28 = *(void *)(v27 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48))(v13, 1, v27);
    if (result != 1) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(a2, v13, v27);
    }
    goto LABEL_32;
  }
  if (v20 == 0xD000000000000038 && v21 == 0x800000010015FA60
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    URL.init(string:)();
    uint64_t v29 = type metadata accessor for URL();
    uint64_t v30 = *(void *)(v29 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48))(v10, 1, v29);
    if (result != 1) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v30 + 32))(a2, v10, v29);
    }
    goto LABEL_33;
  }
  if (v20 == 0xD000000000000043 && v21 == 0x800000010015FAA0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v31)
  {
LABEL_25:
    URL.init(string:)();
    uint64_t v32 = type metadata accessor for URL();
    uint64_t v33 = *(void *)(v32 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48))(v7, 1, v32);
    if (result != 1) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v33 + 32))(a2, v7, v32);
    }
    goto LABEL_34;
  }
  uint64_t v34 = type metadata accessor for URL();
  size_t v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 16);

  return v35(a2, a1, v34);
}

uint64_t sub_1000DE700@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (URL.pathExtension.getter() == 0x6B63617074656ALL && v4 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    uint64_t v6 = type metadata accessor for URL();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
    return v7(a2, a1, v6);
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v5) {
    goto LABEL_5;
  }
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(a2, a1, v9);
  if (sub_1000107C4())
  {
    id v10 = [self daemonDefaults];
    char v11 = [v10 preferInternalJS];
  }
  else
  {
    char v11 = 0;
  }
  v12._countAndFlagsBits = sub_1000E2CF0(v11);
  URL.appendPathComponent(_:)(v12);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000DE898@<X0>(uint64_t (*a1)(char *, uint64_t)@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v48 = a3;
  uint64_t v49 = a2;
  unint64_t v46 = a1;
  uint64_t v4 = type metadata accessor for JetPackAssetRequestSourcePolicy();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v47 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v44 - v8;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v44 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v44 - v18;
  uint64_t v20 = type metadata accessor for JSJetPackFetcher.ScriptOrigin(0);
  __chkstk_darwin(v20 - 8);
  uint64_t v22 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000E21C8(v3, (uint64_t)v22);
  int v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v22, 2, v10);
  if (v23)
  {
    if (v23 == 1)
    {
      id v24 = objc_msgSend(self, "asc_frameworkBundle");
      id v25 = [v24 bundleURL];

      static URL._unconditionallyBridgeFromObjectiveC(_:)();
      URL.appendingPathComponent(_:isDirectory:)();
      uint64_t v26 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
      unint64_t v46 = v26;
      v26(v14, v10);
      sub_1000DE700((uint64_t)v17, (uint64_t)v19);
      v26(v17, v10);
      (*(void (**)(char *, void, uint64_t))(v5 + 104))(v9, enum case for JetPackAssetRequestSourcePolicy.remoteOnly(_:), v4);
      uint64_t v27 = swift_allocObject();
      int64_t v44 = v19;
      uint64_t v45 = v4;
      uint64_t v28 = v48;
      uint64_t v29 = v49;
      *(void *)(v27 + 16) = v49;
      v28[3] = type metadata accessor for ValidatedJetPackAssetLocations.URLLocation();
      v28[4] = sub_1000E2F98(&qword_1001A45A0, (void (*)(uint64_t))&type metadata accessor for ValidatedJetPackAssetLocations.URLLocation);
      sub_100031A88(v28);
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v17, v19, v10);
      uint64_t v30 = v45;
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v47, v9, v45);
      id v31 = v29;
      ValidatedJetPackAssetLocations.URLLocation.init(_:sourcePolicy:requestConfiguration:)();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v30);
      return v46(v44, v10);
    }
    else
    {
      String._bridgeToObjectiveC()();
      uint64_t v39 = swift_allocObject();
      uint64_t v40 = v49;
      *(void *)(v39 + 16) = v49;
      uint64_t v41 = type metadata accessor for ValidatedJetPackAssetLocations.BagKeyLocation();
      unint64_t v42 = v48;
      v48[3] = v41;
      v42[4] = sub_1000E2F98(&qword_1001A45A8, (void (*)(uint64_t))&type metadata accessor for ValidatedJetPackAssetLocations.BagKeyLocation);
      sub_100031A88(v42);
      id v43 = v40;
      swift_unknownObjectRetain();
      return ValidatedJetPackAssetLocations.BagKeyLocation.init(_:bag:urlTransformer:requestConfiguration:)();
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v19, v22, v10);
    sub_1000DE700((uint64_t)v19, (uint64_t)v17);
    uint64_t v33 = swift_allocObject();
    uint64_t v34 = v49;
    *(void *)(v33 + 16) = v49;
    uint64_t v35 = type metadata accessor for ValidatedJetPackAssetLocations.URLLocation();
    uint64_t v36 = v48;
    v48[3] = v35;
    v36[4] = sub_1000E2F98(&qword_1001A45A0, (void (*)(uint64_t))&type metadata accessor for ValidatedJetPackAssetLocations.URLLocation);
    sub_100031A88(v36);
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v17, v10);
    id v37 = v34;
    ValidatedJetPackAssetLocations.URLLocation.init(_:requestConfiguration:)();
    size_t v38 = *(void (**)(char *, uint64_t))(v11 + 8);
    v38(v17, v10);
    return ((uint64_t (*)(char *, uint64_t))v38)(v19, v10);
  }
}

uint64_t sub_1000DEEAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000DE0DC(a1, (uint64_t)v7);
  sub_1000DE700((uint64_t)v7, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

id sub_1000DEF94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_10002EB60(&qword_1001A45B0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = objc_msgSend(self, "ams_configurationWithProcessInfo:bag:", a3, a1);
  swift_unknownObjectRetain();
  Bag.init(from:)();
  uint64_t v9 = type metadata accessor for Bag();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 0, 1, v9);
  static JetPackAMSRemoteStreamSource.defaultURLEncoder(forContentsOf:using:from:)();
  sub_100034B8C((uint64_t)v7, &qword_1001A45B0);
  return v8;
}

uint64_t sub_1000DF0C4@<X0>(uint64_t *a1@<X8>)
{
  unint64_t v2 = sub_100066CC4((uint64_t)&off_100184BD8);
  sub_10002EB60((uint64_t *)&unk_1001A45D0);
  swift_arrayDestroy();
  sub_1000DF164(v2);
  swift_bridgeObjectRelease();
  a1[3] = type metadata accessor for JetPackFileKeyProvider();
  a1[4] = (uint64_t)&protocol witness table for JetPackFileKeyProvider;
  sub_100031A88(a1);
  return JetPackFileKeyProvider.init(keyURLs:)();
}

uint64_t sub_1000DF164(uint64_t a1)
{
  uint64_t v2 = sub_10002EB60(&qword_1001A44F0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v48 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v43 = (char *)v39 - v9;
  uint64_t v49 = _swiftEmptyDictionarySingleton;
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v45 = a1 + 64;
  uint64_t v11 = -1 << *(unsigned char *)(a1 + 32);
  if (-v11 < 64) {
    uint64_t v12 = ~(-1 << -(char)v11);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v10;
  v39[1] = -1 << *(unsigned char *)(a1 + 32);
  int64_t v44 = (unint64_t)(63 - v11) >> 6;
  uint64_t v14 = (void (**)(char *, void, uint64_t, uint64_t))(v8 + 56);
  uint64_t v15 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  uint64_t v42 = v8;
  uint64_t v47 = (void (**)(char *, char *, uint64_t))(v8 + 32);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  uint64_t v40 = v14;
  uint64_t v41 = v15;
  if (v13) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v20 = i + 1;
  if (!__OFADD__(i, 1))
  {
    if (v20 < v44)
    {
      unint64_t v21 = *(void *)(v45 + 8 * v20);
      int64_t v22 = i + 1;
      if (v21) {
        goto LABEL_23;
      }
      int64_t v22 = i + 2;
      if (i + 2 >= v44) {
        goto LABEL_39;
      }
      unint64_t v21 = *(void *)(v45 + 8 * v22);
      if (v21) {
        goto LABEL_23;
      }
      int64_t v22 = i + 3;
      if (i + 3 >= v44) {
        goto LABEL_39;
      }
      unint64_t v21 = *(void *)(v45 + 8 * v22);
      if (v21) {
        goto LABEL_23;
      }
      int64_t v22 = i + 4;
      if (i + 4 >= v44) {
        goto LABEL_39;
      }
      unint64_t v21 = *(void *)(v45 + 8 * v22);
      if (v21)
      {
LABEL_23:
        unint64_t v13 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
        for (int64_t i = v22; ; v19 = v18 | (i << 6))
        {
          __int16 v24 = *(_WORD *)(*(void *)(a1 + 48) + 2 * v19);
          swift_bridgeObjectRetain();
          URL.init(fileURLWithPath:)();
          (*v14)(v4, 0, 1, v5);
          if ((*v15)(v4, 1, v5) == 1)
          {
            swift_bridgeObjectRelease();
            uint64_t result = sub_100034B8C((uint64_t)v4, &qword_1001A44F0);
            if (!v13) {
              goto LABEL_8;
            }
          }
          else
          {
            int64_t v46 = i;
            uint64_t v25 = a1;
            uint64_t v26 = *v47;
            uint64_t v27 = v43;
            (*v47)(v43, v4, v5);
            v26(v48, v27, v5);
            uint64_t v28 = v49;
            unint64_t v29 = v49[2];
            if (v49[3] <= v29)
            {
              sub_10003CFBC(v29 + 1, 1);
              uint64_t v28 = v49;
            }
            uint64_t result = static Hasher._hash(seed:bytes:count:)();
            uint64_t v30 = v28 + 8;
            uint64_t v31 = -1 << *((unsigned char *)v28 + 32);
            unint64_t v32 = result & ~v31;
            unint64_t v33 = v32 >> 6;
            if (((-1 << v32) & ~v28[(v32 >> 6) + 8]) != 0)
            {
              unint64_t v34 = __clz(__rbit64((-1 << v32) & ~v28[(v32 >> 6) + 8])) | v32 & 0x7FFFFFFFFFFFFFC0;
            }
            else
            {
              char v35 = 0;
              unint64_t v36 = (unint64_t)(63 - v31) >> 6;
              do
              {
                if (++v33 == v36 && (v35 & 1) != 0)
                {
                  __break(1u);
                  goto LABEL_40;
                }
                BOOL v37 = v33 == v36;
                if (v33 == v36) {
                  unint64_t v33 = 0;
                }
                v35 |= v37;
                uint64_t v38 = v30[v33];
              }
              while (v38 == -1);
              unint64_t v34 = __clz(__rbit64(~v38)) + (v33 << 6);
            }
            *(void *)((char *)v30 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v34;
            *(_WORD *)(v28[6] + 2 * v34) = v24;
            v26((char *)(v28[7] + *(void *)(v42 + 72) * v34), v48, v5);
            ++v28[2];
            uint64_t result = swift_bridgeObjectRelease();
            a1 = v25;
            uint64_t v14 = v40;
            uint64_t v15 = v41;
            int64_t i = v46;
            if (!v13) {
              goto LABEL_8;
            }
          }
LABEL_7:
          unint64_t v18 = __clz(__rbit64(v13));
          v13 &= v13 - 1;
        }
      }
      int64_t v23 = i + 5;
      if (i + 5 < v44)
      {
        unint64_t v21 = *(void *)(v45 + 8 * v23);
        if (v21)
        {
          int64_t v22 = i + 5;
          goto LABEL_23;
        }
        while (1)
        {
          int64_t v22 = v23 + 1;
          if (__OFADD__(v23, 1)) {
            goto LABEL_41;
          }
          if (v22 >= v44) {
            break;
          }
          unint64_t v21 = *(void *)(v45 + 8 * v22);
          ++v23;
          if (v21) {
            goto LABEL_23;
          }
        }
      }
    }
LABEL_39:
    sub_100034EF8();
    return (uint64_t)v49;
  }
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1000DF630(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v55 = a2;
  uint64_t v64 = a3;
  uint64_t v54 = a1;
  uint64_t v62 = sub_10002EB60(&qword_1001A44F8);
  uint64_t v60 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  unint64_t v58 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for JSJetPackFetcher.ScriptOrigin(0);
  uint64_t v51 = *(void *)(v5 - 8);
  uint64_t v50 = *(void *)(v51 + 64);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10002EB60((uint64_t *)&unk_1001A4500);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v52 = v8;
  uint64_t v53 = v9;
  __chkstk_darwin(v8);
  size_t v63 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_10002EB60((uint64_t *)&unk_1001A34F0);
  uint64_t v59 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  size_t v57 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for JetPackSigningPolicy();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DiskJetPackLoader();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v47 = v16;
  uint64_t v48 = v17;
  uint64_t v18 = *(void *)(v17 + 64);
  uint64_t v19 = __chkstk_darwin(v16);
  int64_t v46 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  unint64_t v21 = (char *)&v45 - v20;
  uint64_t v22 = v3 + OBJC_IVAR____TtC19appstorecomponentsd16JSJetPackFetcher____lazy_storage___indexPipeline;
  uint64_t v23 = sub_10002EB60((uint64_t *)&unk_1001A4430);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for JetPackSigningPolicy.required(_:), v12);
  sub_10002EB60(&qword_1001A4510);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_10014CD00;
  sub_1000DF0C4((uint64_t *)(v24 + 32));
  *(void *)(v24 + 96) = type metadata accessor for JetPackManagedKeyProvider();
  *(void *)(v24 + 104) = &protocol witness table for JetPackManagedKeyProvider;
  sub_100031A88((uint64_t *)(v24 + 72));
  JetPackManagedKeyProvider.init()();
  DiskJetPackLoader.init(signingPolicy:keyProviders:)();
  uint64_t v25 = v21;
  uint64_t v49 = v21;
  uint64_t v26 = v47;
  static Pipeline.start<A>(with:)();
  sub_1000E21C8(v64, (uint64_t)v7);
  uint64_t v27 = v48;
  uint64_t v28 = v26;
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))((char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v25, v26);
  unint64_t v29 = (*(unsigned __int8 *)(v51 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
  unint64_t v30 = (v50 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v31 = (v30 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = (*(unsigned __int8 *)(v27 + 80) + v31 + 8) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
  uint64_t v33 = swift_allocObject();
  sub_1000E2230((uint64_t)v7, v33 + v29);
  *(void *)(v33 + v30) = v54;
  unint64_t v34 = v55;
  *(void *)(v33 + v31) = v55;
  uint64_t v35 = v28;
  (*(void (**)(unint64_t, char *, uint64_t))(v27 + 32))(v33 + v32, v46, v28);
  swift_unknownObjectRetain();
  id v36 = v34;
  sub_10002EB60(&qword_1001A4420);
  sub_100061D9C(&qword_1001A4518, (uint64_t *)&unk_1001A4500);
  uint64_t v37 = v52;
  uint64_t v38 = v63;
  uint64_t v39 = PipelineTask.mapTaskOutput<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v38, v37);
  uint64_t v65 = v39;
  uint64_t v40 = v58;
  static PipelinePhase.cacheValueIfSuccessful()();
  sub_10002EB60(&qword_1001A4520);
  sub_100061D9C(&qword_1001A4528, &qword_1001A4520);
  uint64_t v41 = PipelineTask.andThen<A>(_:)();
  (*(void (**)(char *, uint64_t))(v60 + 8))(v40, v62);
  swift_release();
  uint64_t v65 = v41;
  sub_10002EB60(&qword_1001A4530);
  sub_100061D9C((unint64_t *)&unk_1001A4538, &qword_1001A4530);
  uint64_t v42 = v57;
  PipelineTask.eraseToAnyPipelineTask()();
  swift_unknownObjectRelease();

  sub_1000E2388(v64);
  swift_release();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v49, v35);
  uint64_t v43 = v56;
  (*(void (**)(uint64_t, char *, uint64_t))(v59 + 32))(v56 + OBJC_IVAR____TtC19appstorecomponentsd16JSJetPackFetcher_bundlePipeline, v42, v61);
  return v43;
}

uint64_t sub_1000DFD28(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v29 = a3;
  unint64_t v30 = a4;
  uint64_t v7 = sub_10002EB60(&qword_1001A2450);
  __chkstk_darwin(v7 - 8);
  unint64_t v31 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DiskJetPackLoader();
  uint64_t v28 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v12 = type metadata accessor for JSJetPackFetcher.ScriptOrigin(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000E21C8(a2, (uint64_t)v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a5, v9);
  unint64_t v16 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v17 = (v14 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (*(unsigned __int8 *)(v10 + 80) + v18 + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v20 = swift_allocObject();
  sub_1000E2230((uint64_t)v15, v20 + v16);
  unint64_t v21 = v30;
  *(void *)(v20 + v17) = v29;
  *(void *)(v20 + v18) = v21;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v20 + v19, (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v28);
  sub_10002EB60(&qword_1001A4558);
  swift_unknownObjectRetain();
  id v22 = v21;
  uint64_t v23 = Promise.__allocating_init()();
  uint64_t v24 = type metadata accessor for TaskPriority();
  uint64_t v25 = (uint64_t)v31;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v31, 1, 1, v24);
  uint64_t v26 = (void *)swift_allocObject();
  v26[2] = 0;
  uint64_t v26[3] = 0;
  v26[4] = &unk_1001A4550;
  v26[5] = v20;
  v26[6] = v23;
  swift_retain();
  sub_1000F6C04(v25, (uint64_t)&unk_1001A4560, (uint64_t)v26);
  swift_release();
  return v23;
}

uint64_t sub_1000E0030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[15] = a4;
  v5[16] = a5;
  v5[13] = a2;
  v5[14] = a3;
  v5[12] = a1;
  uint64_t v6 = type metadata accessor for URL();
  v5[17] = v6;
  v5[18] = *(void *)(v6 - 8);
  v5[19] = swift_task_alloc();
  uint64_t v7 = sub_10002EB60(&qword_1001A4568);
  v5[20] = v7;
  v5[21] = *(void *)(v7 - 8);
  v5[22] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DiskJetPackResourceBundle();
  v5[23] = v8;
  v5[24] = *(void *)(v8 - 8);
  v5[25] = swift_task_alloc();
  type metadata accessor for JetPackAssetSession.Configuration();
  v5[26] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for ValidatedJetPackLoadingCoordinator();
  v5[27] = v9;
  v5[28] = *(void *)(v9 - 8);
  v5[29] = swift_task_alloc();
  return _swift_task_switch(sub_1000E023C, 0, 0);
}

uint64_t sub_1000E023C()
{
  sub_1000DE898(*(uint64_t (**)(char *, uint64_t))(v0 + 112), *(void **)(v0 + 120), (uint64_t *)(v0 + 16));
  type metadata accessor for JetPackAssetDiskCache();
  JetPackAssetDiskCache.__allocating_init()();
  uint64_t v1 = *(void *)(v0 + 128);
  JetPackAssetSession.Configuration.init(cache:)();
  type metadata accessor for JetPackAssetSession();
  swift_allocObject();
  JetPackAssetSession.init(configuration:)();
  sub_100052538(v0 + 16, v0 + 56);
  swift_unknownObjectRetain();
  ValidatedJetPackLoadingCoordinator.init(session:assetLocation:bag:)();
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 240) = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 248) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000E044C;
  uint64_t v4 = *(void *)(v0 + 176);
  uint64_t v5 = *(void *)(v0 + 184);
  return ValidatedJetPackLoadingCoordinator.getJetPackAsset<A>(unpackAsset:)(v4, &unk_1001A4578, v2, v5, &protocol witness table for DiskJetPackResourceBundle);
}

uint64_t sub_1000E044C()
{
  *(void *)(*(void *)v1 + 256) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000E08B0;
  }
  else {
    uint64_t v2 = sub_1000E0580;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000E0580()
{
  uint64_t v2 = v0[21];
  uint64_t v1 = v0[22];
  uint64_t v3 = v0[20];
  ValidatedJetPackLoadingCoordinator.ValidatedJetPackResult.bundle.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = v0[5];
  sub_10002EC6C(v0 + 2, v4);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[33] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1000E0668;
  uint64_t v6 = v0[19];
  return sub_1000E0E60(v6, v4);
}

uint64_t sub_1000E0668()
{
  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000E0980;
  }
  else {
    uint64_t v2 = sub_1000E077C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000E077C()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[25];
  uint64_t v3 = v0[23];
  uint64_t v4 = v0[18];
  uint64_t v5 = v0[19];
  uint64_t v6 = v0[17];
  uint64_t v7 = v0[12];
  (*(void (**)(void, void))(v0[28] + 8))(v0[29], v0[27]);
  uint64_t v8 = v7 + *(int *)(sub_10002EB60(&qword_1001A4420) + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v7, v5, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v8, v2, v3);
  sub_10002ED08((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1000E08B0()
{
  (*(void (**)(void, void))(v0[28] + 8))(v0[29], v0[27]);
  sub_10002ED08((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000E0980()
{
  uint64_t v2 = v0[28];
  uint64_t v1 = v0[29];
  uint64_t v3 = v0[27];
  (*(void (**)(void, void))(v0[24] + 8))(v0[25], v0[23]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_10002ED08((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000E0A70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[8] = a2;
  v3[9] = a3;
  v3[7] = a1;
  uint64_t v4 = type metadata accessor for URL();
  v3[10] = v4;
  v3[11] = *(void *)(v4 - 8);
  v3[12] = swift_task_alloc();
  return _swift_task_switch(sub_1000E0B34, 0, 0);
}

uint64_t sub_1000E0B34()
{
  JetPackAsset.streamSource.getter();
  id v1 = [self defaultManager];
  id v2 = [v1 temporaryDirectory];

  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[13] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000E0C48;
  uint64_t v4 = v0[12];
  uint64_t v5 = v0[7];
  return DiskJetPackLoader.bundle(from:baseURL:automaticallyCleanUp:)(v5, v0 + 2, v4, 1);
}

uint64_t sub_1000E0C48()
{
  uint64_t v2 = *v1 + 16;
  uint64_t v3 = *(void *)(*v1 + 96);
  uint64_t v4 = *(void *)(*v1 + 88);
  uint64_t v5 = *(void *)(*v1 + 80);
  uint64_t v6 = *v1;
  *(void *)(v6 + 112) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_10002ED08(v2);
  if (v0)
  {
    return _swift_task_switch(sub_1000E0DFC, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v6 + 8);
    return v7();
  }
}

uint64_t sub_1000E0DFC()
{
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000E0E60(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  sub_10002EB60(&qword_1001A4588);
  v3[5] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ValidatedJetPackAssetLocations.BagKeyLocation();
  v3[6] = v5;
  v3[7] = *(void *)(v5 - 8);
  v3[8] = swift_task_alloc();
  sub_10002EB60(&qword_1001A4590);
  v3[9] = swift_task_alloc();
  v3[10] = *(void *)(a2 - 8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ValidatedJetPackAssetLocations.URLLocation();
  v3[13] = v6;
  v3[14] = *(void *)(v6 - 8);
  v3[15] = swift_task_alloc();
  return _swift_task_switch(sub_1000E1044, 0, 0);
}

uint64_t sub_1000E1044()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[10] + 16);
  v2(v0[12], v0[4], v0[3]);
  int v3 = swift_dynamicCast();
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56);
  if (v3)
  {
    uint64_t v6 = v0[14];
    uint64_t v5 = v0[15];
    uint64_t v7 = v0[13];
    uint64_t v8 = v0[9];
    v4(v8, 0, 1, v7);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v5, v8, v7);
    ValidatedJetPackAssetLocations.URLLocation.url.getter();
    (*(void (**)(void, void))(v6 + 8))(v0[15], v0[13]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
LABEL_8:
    return v9();
  }
  uint64_t v10 = v0[11];
  uint64_t v11 = v0[9];
  uint64_t v12 = v0[7];
  uint64_t v13 = v0[4];
  uint64_t v14 = v0[3];
  v4(v11, 1, 1, v0[13]);
  sub_100034B8C(v11, &qword_1001A4590);
  v2(v10, v13, v14);
  int v15 = swift_dynamicCast();
  unint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
  if (!v15)
  {
    uint64_t v23 = v0[5];
    v16(v23, 1, 1, v0[6]);
    sub_100034B8C(v23, &qword_1001A4588);
    sub_1000E29B4();
    swift_allocError();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    goto LABEL_8;
  }
  uint64_t v18 = v0[7];
  uint64_t v17 = v0[8];
  uint64_t v20 = v0[5];
  uint64_t v19 = v0[6];
  v16(v20, 0, 1, v19);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v17, v20, v19);
  unint64_t v21 = (void *)swift_task_alloc();
  v0[16] = v21;
  void *v21 = v0;
  v21[1] = sub_1000E1390;
  uint64_t v22 = v0[2];
  return ValidatedJetPackAssetLocations.BagKeyLocation.url()(v22);
}

uint64_t sub_1000E1390()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000E1568;
  }
  else {
    uint64_t v2 = sub_1000E14A4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000E14A4()
{
  (*(void (**)(void, void))(v0[7] + 8))(v0[8], v0[6]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000E1568()
{
  (*(void (**)(void, void))(v0[7] + 8))(v0[8], v0[6]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000E1628@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10002EB60(&qword_1001A45E0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v13 - v7;
  uint64_t v9 = v1 + OBJC_IVAR____TtC19appstorecomponentsd16JSJetPackFetcher____lazy_storage___indexPipeline;
  swift_beginAccess();
  sub_1000E2EC8(v9, (uint64_t)v8);
  uint64_t v10 = sub_10002EB60((uint64_t *)&unk_1001A4430);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a1, v8, v10);
  }
  sub_100034B8C((uint64_t)v8, &qword_1001A45E0);
  sub_10002EB60((uint64_t *)&unk_1001A34F0);
  type metadata accessor for JSPackageIndex();
  sub_100061D9C(&qword_1001A45E8, (uint64_t *)&unk_1001A34F0);
  v13[0] = PipelineTask.mapTaskOutput<A>(_:)();
  sub_10002EB60(&qword_1001A45F0);
  sub_100061D9C(&qword_1001A45F8, &qword_1001A45F0);
  PipelineTask.eraseToAnyPipelineTask()();
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v6, a1, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
  swift_beginAccess();
  sub_1000E2F30((uint64_t)v6, v9);
  return swift_endAccess();
}

void sub_1000E18D4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a1;
  uint64_t v27 = a2;
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v23 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for JSONContext();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for JSONObject();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for JetPackPath();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  JetPackPath.init(_:)();
  uint64_t v12 = DiskJetPackResourceBundle.fileData(atPath:)();
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return;
  }
  unint64_t v14 = v13;
  uint64_t v22 = v12;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (v14 >> 60 == 15)
  {
    type metadata accessor for JSError();
    sub_1000E2F98((unint64_t *)&qword_1001A4600, (void (*)(uint64_t))&type metadata accessor for JSError);
    swift_allocError();
    JSError.init(message:line:column:sourceURL:constructorName:)();
    swift_willThrow();
    return;
  }
  sub_1000E2FE0(v22, v14);
  JSONObject.init(deserializing:)();
  JSONContext.init()();
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v5, v24, v3);
  JSPackageIndex.init(deserializing:using:from:)();
  if (!os_variant_has_internal_content())
  {
    sub_1000E3038(v22, v14);
    return;
  }
  unint64_t v15 = v14;
  id v16 = [self daemonDefaults];
  uint64_t v17 = JSPackageIndex.properties.getter();
  if (*(void *)(v17 + 16) && (unint64_t v18 = sub_10003A860(0x6E6F6973726576, 0xE700000000000000), (v19 & 1) != 0))
  {
    sub_100042EB8(*(void *)(v17 + 56) + 32 * v18, (uint64_t)&v25);
  }
  else
  {
    long long v25 = 0u;
    long long v26 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v26 + 1))
  {
    sub_100034B8C((uint64_t)&v25, &qword_1001A1C50);
    goto LABEL_15;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_15:
    NSString v20 = 0;
    goto LABEL_16;
  }
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
LABEL_16:
  [v16 setJsVersion:v20];
  sub_1000E3038(v22, v15);
}

void sub_1000E1D68(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_1000E1DBC()
{
  uint64_t v0 = type metadata accessor for JetPackPath();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10002EB60(&qword_1001A44F0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  static JetPackPath.sourcePath.getter();
  DiskJetPackResourceBundle.memoryMappedSource(atPath:virtualMachine:cacheURL:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return sub_100034B8C((uint64_t)v6, &qword_1001A44F0);
}

uint64_t sub_1000E1F54()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC19appstorecomponentsd16JSJetPackFetcher_bundlePipeline;
  uint64_t v2 = sub_10002EB60((uint64_t *)&unk_1001A34F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_100034B8C(v0 + OBJC_IVAR____TtC19appstorecomponentsd16JSJetPackFetcher____lazy_storage___indexPipeline, &qword_1001A45E0);

  return swift_deallocClassInstance();
}

uint64_t sub_1000E2010()
{
  return type metadata accessor for JSJetPackFetcher(0);
}

uint64_t type metadata accessor for JSJetPackFetcher(uint64_t a1)
{
  return sub_1000887E4(a1, (uint64_t *)&unk_1001A4408);
}

void sub_1000E2038()
{
  sub_1000E2148(319, &qword_1001A4418, &qword_1001A4420, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for AnyPipelineTask);
  if (v0 <= 0x3F)
  {
    sub_1000E2148(319, &qword_1001A4428, (uint64_t *)&unk_1001A4430, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_1000E2148(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = sub_10002ED58(a3);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t type metadata accessor for JSJetPackFetcher.ScriptOrigin(uint64_t a1)
{
  return sub_1000887E4(a1, (uint64_t *)&unk_1001A4680);
}

uint64_t sub_1000E21C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for JSJetPackFetcher.ScriptOrigin(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E2230(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for JSJetPackFetcher.ScriptOrigin(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E2294(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for JSJetPackFetcher.ScriptOrigin(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(type metadata accessor for DiskJetPackLoader() - 8);
  return sub_1000DFD28(a1, v1 + v4, *(void *)(v1 + v5), *(void **)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), v1+ ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)));
}

uint64_t sub_1000E2388(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for JSJetPackFetcher.ScriptOrigin(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000E23E8()
{
  uint64_t v1 = *(void *)(type metadata accessor for JSJetPackFetcher.ScriptOrigin(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v14 = *(void *)(v1 + 64);
  uint64_t v4 = type metadata accessor for DiskJetPackLoader();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v0 + v3, 2, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0 + v3, v8);
  }
  uint64_t v10 = v2 | v6 | 7;
  unint64_t v11 = (((v14 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = (v11 + v6 + 8) & ~v6;
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v12, v4);

  return _swift_deallocObject(v0, v12 + v7, v10);
}

uint64_t sub_1000E25C4(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for JSJetPackFetcher.ScriptOrigin(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(unsigned __int8 *)(*(void *)(type metadata accessor for DiskJetPackLoader() - 8) + 80);
  uint64_t v10 = v8 + v9 + 8;
  uint64_t v11 = *(void *)(v1 + v7);
  uint64_t v12 = v1 + v6;
  uint64_t v13 = *(void *)(v1 + v8);
  uint64_t v14 = v1 + (v10 & ~v9);
  unint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v15;
  *unint64_t v15 = v3;
  v15[1] = sub_100053090;
  return sub_1000E0030(a1, v12, v11, v13, v14);
}

Swift::Int sub_1000E2734()
{
  return Hasher._finalize()();
}

void sub_1000E2778()
{
}

Swift::Int sub_1000E27A0()
{
  return Hasher._finalize()();
}

uint64_t sub_1000E27E0()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000E2828(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  unint64_t v6 = (int *)v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10002F874;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t))((char *)&dword_1001A4978
                                                                                   + dword_1001A4978);
  return v10(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1000E2904(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10002F874;
  return sub_1000E0A70(a1, a2, v6);
}

unint64_t sub_1000E29B4()
{
  unint64_t result = qword_1001A4598;
  if (!qword_1001A4598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A4598);
  }
  return result;
}

uint64_t sub_1000E2A08()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_1000E2A40(uint64_t a1, uint64_t a2)
{
  return sub_1000DEF94(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1000E2A48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for JSJetPackFetcher.ScriptOrigin(0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10002EB60(&qword_1001A4698);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t)&v14[*(int *)(v12 + 56)];
  sub_1000E21C8(a1, (uint64_t)v14);
  sub_1000E21C8(a2, v15);
  id v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  int v17 = v16(v14, 2, v4);
  if (!v17)
  {
    sub_1000E21C8((uint64_t)v14, (uint64_t)v10);
    if (!v16((char *)v15, 2, v4))
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v15, v4);
      char v18 = static URL.== infix(_:_:)();
      char v19 = *(void (**)(char *, uint64_t))(v5 + 8);
      v19(v7, v4);
      v19(v10, v4);
      sub_1000E2388((uint64_t)v14);
      return v18 & 1;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    goto LABEL_9;
  }
  if (v17 == 1)
  {
    if (v16((char *)v15, 2, v4) != 1) {
      goto LABEL_9;
    }
  }
  else if (v16((char *)v15, 2, v4) != 2)
  {
LABEL_9:
    sub_100034B8C((uint64_t)v14, &qword_1001A4698);
    char v18 = 0;
    return v18 & 1;
  }
  sub_1000E2388((uint64_t)v14);
  char v18 = 1;
  return v18 & 1;
}

uint64_t sub_1000E2CF0(char a1)
{
  sub_10002EB60(&qword_1001A45B8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10014CD00;
  *(void *)(inited + 32) = 0xD000000000000012;
  *(void *)(inited + 40) = 0x800000010015FC80;
  if (a1) {
    uint64_t v3 = 0x6C616E7265746E69;
  }
  else {
    uint64_t v3 = 0;
  }
  unint64_t v4 = 0xE800000000000000;
  if ((a1 & 1) == 0) {
    unint64_t v4 = 0;
  }
  *(void *)(inited + 48) = v3;
  *(void *)(inited + 56) = v4;
  uint64_t v5 = sub_100076438(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  unint64_t v7 = *((void *)v5 + 2);
  unint64_t v6 = *((void *)v5 + 3);
  unint64_t v8 = v7 + 1;
  if (v7 >= v6 >> 1) {
    uint64_t v5 = sub_100076438((char *)(v6 > 1), v7 + 1, 1, v5);
  }
  *((void *)v5 + 2) = v8;
  uint64_t v9 = &v5[16 * v7];
  *((void *)v9 + 4) = 0xD000000000000012;
  *((void *)v9 + 5) = 0x800000010015FC80;
  if (a1)
  {
    unint64_t v10 = *((void *)v5 + 3);
    swift_bridgeObjectRetain();
    if (v8 >= v10 >> 1) {
      uint64_t v5 = sub_100076438((char *)(v10 > 1), v7 + 2, 1, v5);
    }
    *((void *)v5 + 2) = v7 + 2;
    uint64_t v11 = &v5[16 * v8];
    *((void *)v11 + 4) = 0x6C616E7265746E69;
    *((void *)v11 + 5) = 0xE800000000000000;
  }
  swift_release();
  sub_10002EB60((uint64_t *)&unk_1001A45C0);
  sub_100061D9C((unint64_t *)&qword_1001A2580, (uint64_t *)&unk_1001A45C0);
  uint64_t v12 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x6B63617074656A2ELL;
  v13._object = (void *)0xE800000000000000;
  String.append(_:)(v13);
  return v12;
}

uint64_t sub_1000E2EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A45E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E2F30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A45E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E2F98(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000E2FE0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_1000E3038(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1000B6358(a1, a2);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ValidatedJetPackAssetLocationError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for ValidatedJetPackAssetLocationError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000E313CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ValidatedJetPackAssetLocationError()
{
  return &type metadata for ValidatedJetPackAssetLocationError;
}

uint64_t *sub_1000E3174(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
  }
  return a1;
}

uint64_t sub_1000E32C0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 2, v2);
  if (!result)
  {
    unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *sub_1000E3390(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *sub_1000E34A0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 2, v6);
  int v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

void *sub_1000E3614(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *sub_1000E3724(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 2, v6);
  int v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

uint64_t sub_1000E3898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E38AC);
}

uint64_t sub_1000E38AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 3) {
    return v5 - 2;
  }
  else {
    return 0;
  }
}

uint64_t sub_1000E3918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E392C);
}

uint64_t sub_1000E392C(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 2);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t sub_1000E39B0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 2, v2);
}

uint64_t sub_1000E3A18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 2, v4);
}

uint64_t sub_1000E3A88()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

unint64_t sub_1000E3B04()
{
  unint64_t result = qword_1001A4690;
  if (!qword_1001A4690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A4690);
  }
  return result;
}

uint64_t sub_1000E3B64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v52 = a8;
  uint64_t v53 = a5;
  uint64_t v49 = a6;
  uint64_t v50 = a7;
  void v46[2] = a3;
  uint64_t v47 = a4;
  v46[1] = a2;
  uint64_t v54 = a10;
  uint64_t v51 = a9;
  uint64_t v10 = type metadata accessor for JSRoute();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for JSRequest();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  char v18 = (char *)v46 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)v46 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)v46 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)v46 - v26;
  uint64_t v28 = __chkstk_darwin(v25);
  unint64_t v30 = (char *)v46 - v29;
  uint64_t v31 = __chkstk_darwin(v28);
  v46[0] = (char *)v46 - v32;
  __chkstk_darwin(v31);
  uint64_t v48 = (char *)v46 - v33;
  JSRoute.init(service:function:)();
  JSRequest.init(route:timeoutInterval:version:)();
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  size_t v57 = &type metadata for String;
  uint64_t v55 = v34;
  uint64_t v56 = v35;
  JSRequest.addingOption(_:withName:)();
  id v36 = *(void (**)(char *, uint64_t))(v12 + 8);
  v36(v15, v11);
  sub_1000709E0((uint64_t)&v55);
  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  size_t v57 = &type metadata for String;
  uint64_t v55 = v37;
  uint64_t v56 = v38;
  JSRequest.addingOption(_:withName:)();
  v36(v18, v11);
  sub_1000709E0((uint64_t)&v55);
  uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  size_t v57 = &type metadata for String;
  uint64_t v55 = v39;
  uint64_t v56 = v40;
  JSRequest.addingOption(_:withName:)();
  v36(v21, v11);
  sub_1000709E0((uint64_t)&v55);
  size_t v57 = &type metadata for Int;
  uint64_t v55 = v47;
  JSRequest.addingOption(_:withName:)();
  v36(v24, v11);
  sub_1000709E0((uint64_t)&v55);
  size_t v57 = &type metadata for String;
  uint64_t v55 = v49;
  uint64_t v56 = v50;
  swift_bridgeObjectRetain();
  JSRequest.addingOption(_:withName:)();
  v36(v27, v11);
  sub_1000709E0((uint64_t)&v55);
  size_t v57 = &type metadata for String;
  uint64_t v55 = v52;
  uint64_t v56 = v51;
  swift_bridgeObjectRetain();
  uint64_t v41 = (char *)v46[0];
  JSRequest.addingOption(_:withName:)();
  v36(v30, v11);
  sub_1000709E0((uint64_t)&v55);
  size_t v57 = (void *)sub_10002EB60(&qword_1001A46A0);
  uint64_t v55 = v53;
  swift_bridgeObjectRetain();
  uint64_t v42 = (uint64_t)v48;
  JSRequest.addingOption(_:withName:)();
  sub_1000709E0((uint64_t)&v55);
  v36(v41, v11);
  sub_1000E587C(v42, (uint64_t)&unk_100188570, &qword_1001A46B0, (uint64_t)sub_1000E6C70);
  uint64_t v43 = type metadata accessor for SyncTaskScheduler();
  size_t v57 = (void *)v43;
  unint64_t v58 = &protocol witness table for SyncTaskScheduler;
  sub_100031A88(&v55);
  SyncTaskScheduler.init()();
  type metadata accessor for ASCLockupContainer();
  Promise.map<A>(on:_:)();
  swift_release();
  sub_10002ED08((uint64_t)&v55);
  size_t v57 = (void *)v43;
  unint64_t v58 = &protocol witness table for SyncTaskScheduler;
  sub_100031A88(&v55);
  SyncTaskScheduler.init()();
  sub_10002EB60((uint64_t *)&unk_1001A5AC0);
  uint64_t v44 = Promise.map<A>(on:_:)();
  swift_release();
  sub_10002ED08((uint64_t)&v55);
  v36((char *)v42, v11);
  return v44;
}

uint64_t sub_1000E4124@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)a1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000E4148(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for JSRoute();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for JSRequest();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  int v9 = (char *)&v19[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v19[-1] - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v19[-1] - v13;
  JSRoute.init(service:function:)();
  JSRequest.init(route:timeoutInterval:version:)();
  uint64_t v20 = sub_10002EB60(&qword_1001A19D0);
  v19[0] = a1;
  swift_bridgeObjectRetain();
  JSRequest.addingOption(_:withName:)();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v9, v5);
  sub_1000709E0((uint64_t)v19);
  uint64_t v20 = sub_10002EB60(&qword_1001A46A0);
  v19[0] = a2;
  swift_bridgeObjectRetain();
  JSRequest.addingOption(_:withName:)();
  sub_1000709E0((uint64_t)v19);
  v15(v12, v5);
  sub_1000E587C((uint64_t)v14, (uint64_t)&unk_100188598, &qword_1001A26B8, (uint64_t)sub_1000E6D28);
  uint64_t v20 = type metadata accessor for SyncTaskScheduler();
  uint64_t v21 = &protocol witness table for SyncTaskScheduler;
  sub_100031A88(v19);
  SyncTaskScheduler.init()();
  sub_10002EE34(0, &qword_1001A4D40);
  uint64_t v16 = Promise.map<A>(on:_:)();
  swift_release();
  sub_10002ED08((uint64_t)v19);
  v15(v14, v5);
  return v16;
}

uint64_t sub_1000E4468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v39 = a5;
  uint64_t v40 = a6;
  uint64_t v37 = a3;
  uint64_t v38 = a4;
  v36[1] = a2;
  uint64_t v6 = type metadata accessor for JSRoute();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for JSRequest();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)v36 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)v36 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)v36 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)v36 - v22;
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)v36 - v24;
  JSRoute.init(service:function:)();
  JSRequest.init(route:timeoutInterval:version:)();
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v42 + 1) = &type metadata for String;
  *(void *)&long long v41 = v26;
  *((void *)&v41 + 1) = v27;
  JSRequest.addingOption(_:withName:)();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v8 + 8);
  v28(v11, v7);
  sub_1000709E0((uint64_t)&v41);
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v42 + 1) = &type metadata for String;
  *(void *)&long long v41 = v29;
  *((void *)&v41 + 1) = v30;
  JSRequest.addingOption(_:withName:)();
  v28(v14, v7);
  sub_1000709E0((uint64_t)&v41);
  if (v37)
  {
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *((void *)&v42 + 1) = &type metadata for String;
    *(void *)&long long v41 = v31;
    *((void *)&v41 + 1) = v32;
  }
  else
  {
    long long v41 = 0u;
    long long v42 = 0u;
  }
  JSRequest.addingOption(_:withName:)();
  v28(v17, v7);
  sub_1000709E0((uint64_t)&v41);
  uint64_t v33 = v38;
  if (v38)
  {
    *((void *)&v42 + 1) = sub_10002EB60(&qword_1001A19D0);
    *(void *)&long long v41 = v33;
  }
  else
  {
    long long v41 = 0u;
    long long v42 = 0u;
  }
  swift_bridgeObjectRetain();
  JSRequest.addingOption(_:withName:)();
  v28(v20, v7);
  sub_1000709E0((uint64_t)&v41);
  *((void *)&v42 + 1) = sub_10002EB60(&qword_1001A46A0);
  *(void *)&long long v41 = v39;
  swift_bridgeObjectRetain();
  JSRequest.addingOption(_:withName:)();
  sub_1000709E0((uint64_t)&v41);
  v28(v23, v7);
  sub_1000E587C((uint64_t)v25, (uint64_t)&unk_100188598, &qword_1001A26B8, (uint64_t)sub_1000E6D28);
  *((void *)&v42 + 1) = type metadata accessor for SyncTaskScheduler();
  uint64_t v43 = &protocol witness table for SyncTaskScheduler;
  sub_100031A88((uint64_t *)&v41);
  SyncTaskScheduler.init()();
  sub_10002EE34(0, &qword_1001A4D40);
  uint64_t v34 = Promise.map<A>(on:_:)();
  swift_release();
  sub_10002ED08((uint64_t)&v41);
  v28(v25, v7);
  return v34;
}

uint64_t sub_1000E48F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v40 = a5;
  uint64_t v41 = a6;
  uint64_t v38 = a3;
  uint64_t v39 = a4;
  v37[1] = a2;
  uint64_t v6 = type metadata accessor for JSRoute();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for JSRequest();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)v37 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)v37 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)v37 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)v37 - v22;
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)v37 - v24;
  JSRoute.init(service:function:)();
  JSRequest.init(route:timeoutInterval:version:)();
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v43 + 1) = &type metadata for String;
  *(void *)&long long v42 = v26;
  *((void *)&v42 + 1) = v27;
  JSRequest.addingOption(_:withName:)();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v8 + 8);
  v28(v11, v7);
  sub_1000709E0((uint64_t)&v42);
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v43 + 1) = &type metadata for String;
  *(void *)&long long v42 = v29;
  *((void *)&v42 + 1) = v30;
  JSRequest.addingOption(_:withName:)();
  v28(v14, v7);
  sub_1000709E0((uint64_t)&v42);
  if (v38)
  {
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *((void *)&v43 + 1) = &type metadata for String;
    *(void *)&long long v42 = v31;
    *((void *)&v42 + 1) = v32;
  }
  else
  {
    long long v42 = 0u;
    long long v43 = 0u;
  }
  JSRequest.addingOption(_:withName:)();
  v28(v17, v7);
  sub_1000709E0((uint64_t)&v42);
  uint64_t v33 = v39;
  if (v39)
  {
    *((void *)&v43 + 1) = sub_10002EB60(&qword_1001A19D0);
    *(void *)&long long v42 = v33;
  }
  else
  {
    long long v42 = 0u;
    long long v43 = 0u;
  }
  swift_bridgeObjectRetain();
  JSRequest.addingOption(_:withName:)();
  v28(v20, v7);
  sub_1000709E0((uint64_t)&v42);
  *((void *)&v43 + 1) = sub_10002EB60(&qword_1001A46A0);
  *(void *)&long long v42 = v40;
  swift_bridgeObjectRetain();
  JSRequest.addingOption(_:withName:)();
  sub_1000709E0((uint64_t)&v42);
  v28(v23, v7);
  sub_1000E587C((uint64_t)v25, (uint64_t)&unk_100188570, &qword_1001A46B0, (uint64_t)sub_1000E6C70);
  uint64_t v34 = type metadata accessor for SyncTaskScheduler();
  *((void *)&v43 + 1) = v34;
  uint64_t v44 = &protocol witness table for SyncTaskScheduler;
  sub_100031A88((uint64_t *)&v42);
  SyncTaskScheduler.init()();
  type metadata accessor for ASCLockupContainer();
  Promise.map<A>(on:_:)();
  swift_release();
  sub_10002ED08((uint64_t)&v42);
  *((void *)&v43 + 1) = v34;
  uint64_t v44 = &protocol witness table for SyncTaskScheduler;
  sub_100031A88((uint64_t *)&v42);
  SyncTaskScheduler.init()();
  sub_10002EB60((uint64_t *)&unk_1001A5AC0);
  uint64_t v35 = Promise.map<A>(on:_:)();
  swift_release();
  sub_10002ED08((uint64_t)&v42);
  v28(v25, v7);
  return v35;
}

uint64_t sub_1000E4DDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *((void *)&v50 + 1) = a7;
  uint64_t v51 = a8;
  uint64_t v49 = a4;
  *(void *)&long long v50 = a6;
  uint64_t v52 = a5;
  uint64_t v46 = a2;
  uint64_t v47 = a3;
  uint64_t v54 = a10;
  uint64_t v10 = type metadata accessor for JSRoute();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for JSRequest();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v46 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v46 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v46 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v46 - v26;
  uint64_t v28 = __chkstk_darwin(v25);
  uint64_t v30 = (char *)&v46 - v29;
  uint64_t v31 = __chkstk_darwin(v28);
  uint64_t v48 = (char *)&v46 - v32;
  __chkstk_darwin(v31);
  uint64_t v53 = (char *)&v46 - v33;
  JSRoute.init(service:function:)();
  JSRequest.init(route:timeoutInterval:version:)();
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v56 + 1) = &type metadata for String;
  *(void *)&long long v55 = v34;
  *((void *)&v55 + 1) = v35;
  JSRequest.addingOption(_:withName:)();
  id v36 = *(void (**)(char *, uint64_t))(v12 + 8);
  v36(v15, v11);
  sub_1000709E0((uint64_t)&v55);
  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v56 + 1) = &type metadata for String;
  *(void *)&long long v55 = v37;
  *((void *)&v55 + 1) = v38;
  JSRequest.addingOption(_:withName:)();
  uint64_t v39 = v47;
  v36(v18, v11);
  sub_1000709E0((uint64_t)&v55);
  if (v39)
  {
    *((void *)&v56 + 1) = sub_10002EB60(&qword_1001A19D0);
    *(void *)&long long v55 = v39;
  }
  else
  {
    long long v55 = 0u;
    long long v56 = 0u;
  }
  swift_bridgeObjectRetain();
  JSRequest.addingOption(_:withName:)();
  v36(v21, v11);
  sub_1000709E0((uint64_t)&v55);
  uint64_t v40 = v49;
  if (v49)
  {
    *((void *)&v56 + 1) = sub_10002EB60(&qword_1001A19D0);
    *(void *)&long long v55 = v40;
  }
  else
  {
    long long v55 = 0u;
    long long v56 = 0u;
  }
  swift_bridgeObjectRetain();
  JSRequest.addingOption(_:withName:)();
  v36(v24, v11);
  sub_1000709E0((uint64_t)&v55);
  *((void *)&v56 + 1) = &type metadata for String;
  long long v55 = v50;
  swift_bridgeObjectRetain();
  JSRequest.addingOption(_:withName:)();
  v36(v27, v11);
  sub_1000709E0((uint64_t)&v55);
  *((void *)&v56 + 1) = &type metadata for String;
  *(void *)&long long v55 = v51;
  *((void *)&v55 + 1) = a9;
  swift_bridgeObjectRetain();
  uint64_t v41 = v48;
  JSRequest.addingOption(_:withName:)();
  v36(v30, v11);
  sub_1000709E0((uint64_t)&v55);
  *((void *)&v56 + 1) = sub_10002EB60(&qword_1001A46A0);
  *(void *)&long long v55 = v52;
  swift_bridgeObjectRetain();
  uint64_t v42 = (uint64_t)v53;
  JSRequest.addingOption(_:withName:)();
  sub_1000709E0((uint64_t)&v55);
  v36(v41, v11);
  sub_1000E587C(v42, (uint64_t)&unk_100188570, &qword_1001A46B0, (uint64_t)sub_1000E6C70);
  uint64_t v43 = type metadata accessor for SyncTaskScheduler();
  *((void *)&v56 + 1) = v43;
  size_t v57 = &protocol witness table for SyncTaskScheduler;
  sub_100031A88((uint64_t *)&v55);
  SyncTaskScheduler.init()();
  type metadata accessor for ASCLockupContainer();
  Promise.map<A>(on:_:)();
  swift_release();
  sub_10002ED08((uint64_t)&v55);
  *((void *)&v56 + 1) = v43;
  size_t v57 = &protocol witness table for SyncTaskScheduler;
  sub_100031A88((uint64_t *)&v55);
  SyncTaskScheduler.init()();
  sub_10002EB60((uint64_t *)&unk_1001A5AC0);
  uint64_t v44 = Promise.map<A>(on:_:)();
  swift_release();
  sub_10002ED08((uint64_t)&v55);
  v36((char *)v42, v11);
  return v44;
}

id sub_1000E53F8(uint64_t a1)
{
  uint64_t v35 = sub_10002EB60((uint64_t *)&unk_1001A1690);
  uint64_t v33 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v32 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for JSONContext();
  uint64_t v3 = *(void *)(v39 - 8);
  uint64_t v4 = __chkstk_darwin(v39);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = v5;
  __chkstk_darwin(v4);
  uint64_t v38 = (char *)&v31 - v7;
  uint64_t v36 = a1;
  uint64_t v8 = sub_1000F2E88();
  uint64_t v9 = v8;
  uint64_t v10 = v8 + 56;
  uint64_t v11 = 1 << v8[32];
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *((void *)v8 + 7);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  id result = (id)swift_bridgeObjectRetain();
  int64_t v16 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v18 = v17 | (v16 << 6);
      goto LABEL_5;
    }
    int64_t v19 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v14) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)&v10[8 * v19];
    ++v16;
    if (!v20)
    {
      int64_t v16 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)&v10[8 * v16];
      if (!v20)
      {
        int64_t v16 = v19 + 2;
        if (v19 + 2 >= v14) {
          goto LABEL_23;
        }
        unint64_t v20 = *(void *)&v10[8 * v16];
        if (!v20)
        {
          int64_t v16 = v19 + 3;
          if (v19 + 3 >= v14) {
            goto LABEL_23;
          }
          unint64_t v20 = *(void *)&v10[8 * v16];
          if (!v20) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v16 << 6);
LABEL_5:
    id result = [self jsCallDidBeginWithTag:*(void *)(*((void *)v9 + 6) + 8 * v18)];
  }
  int64_t v21 = v19 + 4;
  if (v21 >= v14)
  {
LABEL_23:
    swift_release();
    JSONContext.init()();
    uint64_t v22 = v37 + OBJC_IVAR____TtC19appstorecomponentsd14JSStackManager_diagnostics;
    uint64_t v41 = type metadata accessor for JSInitFailureObserver();
    uint64_t v42 = (void *)sub_1000E6BB0();
    uint64_t v23 = sub_100031A88(v40);
    sub_1000E6C08(v22, (uint64_t)v23);
    uint64_t v24 = v32;
    static JSONContext.initFailureObserver.getter();
    sub_10002EB60(&qword_1001A2760);
    uint64_t v25 = v38;
    JSONContext.addingValue<A>(_:forProperty:)();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v24, v35);
    uint64_t v26 = *(void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v27 = v39;
    v26(v6, v39);
    sub_10002ED08((uint64_t)v40);
    sub_1000F96A8(v36);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v25, v27);
    unint64_t v28 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = v9;
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v29 + v28, v6, v27);
    uint64_t v41 = type metadata accessor for SyncTaskScheduler();
    uint64_t v42 = &protocol witness table for SyncTaskScheduler;
    sub_100031A88(v40);
    SyncTaskScheduler.init()();
    type metadata accessor for LintedMetricsEvent();
    uint64_t v30 = Promise.map<A>(on:_:)();
    swift_release();
    swift_release();
    sub_10002ED08((uint64_t)v40);
    v26(v25, v27);
    return (id)v30;
  }
  unint64_t v20 = *(void *)&v10[8 * v21];
  if (v20)
  {
    int64_t v16 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v16 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v16 >= v14) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)&v10[8 * v16];
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

id sub_1000E5854(uint64_t a1)
{
  return sub_1000E587C(a1, (uint64_t)&unk_1001885C0, &qword_1001A1768, (uint64_t)sub_1000E6D68);
}

id sub_1000E587C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v43 = a3;
  uint64_t v44 = a4;
  uint64_t v40 = a2;
  uint64_t v37 = sub_10002EB60((uint64_t *)&unk_1001A1690);
  uint64_t v35 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v34 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for JSONContext();
  uint64_t v6 = *(void *)(v42 - 8);
  uint64_t v7 = __chkstk_darwin(v42);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = v8;
  __chkstk_darwin(v7);
  uint64_t v41 = (char *)&v34 - v10;
  uint64_t v38 = a1;
  uint64_t v11 = sub_1000F2E88();
  uint64_t v12 = v11;
  unint64_t v13 = v11 + 56;
  uint64_t v14 = 1 << v11[32];
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *((void *)v11 + 7);
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  id result = (id)swift_bridgeObjectRetain();
  int64_t v19 = 0;
  while (1)
  {
    if (v16)
    {
      unint64_t v20 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v21 = v20 | (v19 << 6);
      goto LABEL_5;
    }
    int64_t v22 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v22 >= v17) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)&v13[8 * v22];
    ++v19;
    if (!v23)
    {
      int64_t v19 = v22 + 1;
      if (v22 + 1 >= v17) {
        goto LABEL_23;
      }
      unint64_t v23 = *(void *)&v13[8 * v19];
      if (!v23)
      {
        int64_t v19 = v22 + 2;
        if (v22 + 2 >= v17) {
          goto LABEL_23;
        }
        unint64_t v23 = *(void *)&v13[8 * v19];
        if (!v23)
        {
          int64_t v19 = v22 + 3;
          if (v22 + 3 >= v17) {
            goto LABEL_23;
          }
          unint64_t v23 = *(void *)&v13[8 * v19];
          if (!v23) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v16 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v19 << 6);
LABEL_5:
    id result = [self jsCallDidBeginWithTag:*(void *)(*((void *)v12 + 6) + 8 * v21)];
  }
  int64_t v24 = v22 + 4;
  if (v24 >= v17)
  {
LABEL_23:
    swift_release();
    JSONContext.init()();
    uint64_t v25 = v39 + OBJC_IVAR____TtC19appstorecomponentsd14JSStackManager_diagnostics;
    uint64_t v46 = type metadata accessor for JSInitFailureObserver();
    uint64_t v47 = (void *)sub_1000E6BB0();
    uint64_t v26 = sub_100031A88(v45);
    sub_1000E6C08(v25, (uint64_t)v26);
    uint64_t v27 = v34;
    static JSONContext.initFailureObserver.getter();
    sub_10002EB60(&qword_1001A2760);
    unint64_t v28 = v41;
    JSONContext.addingValue<A>(_:forProperty:)();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v27, v37);
    uint64_t v29 = *(void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v30 = v42;
    v29(v9, v42);
    sub_10002ED08((uint64_t)v45);
    sub_1000F96A8(v38);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v28, v30);
    unint64_t v31 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = v12;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v32 + v31, v9, v30);
    uint64_t v46 = type metadata accessor for SyncTaskScheduler();
    uint64_t v47 = &protocol witness table for SyncTaskScheduler;
    sub_100031A88(v45);
    SyncTaskScheduler.init()();
    sub_10002EB60(v43);
    uint64_t v33 = Promise.map<A>(on:_:)();
    swift_release();
    swift_release();
    sub_10002ED08((uint64_t)v45);
    v29(v28, v30);
    return (id)v33;
  }
  unint64_t v23 = *(void *)&v13[8 * v24];
  if (v23)
  {
    int64_t v19 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v19 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v19 >= v17) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)&v13[8 * v19];
    ++v24;
    if (v23) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

id sub_1000E5CC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v47 = a3;
  uint64_t v45 = a1;
  uint64_t v4 = type metadata accessor for JSONContext();
  uint64_t v50 = *(void *)(v4 - 8);
  uint64_t v51 = v4;
  __chkstk_darwin(v4);
  uint64_t v48 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for JSONObject();
  uint64_t v52 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v46 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10002EB60(&qword_1001A46B8);
  uint64_t v43 = *(void *)(v7 - 8);
  uint64_t v44 = v7;
  __chkstk_darwin(v7);
  uint64_t v42 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + 56;
  uint64_t v10 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(a2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  id result = (id)swift_bridgeObjectRetain();
  int64_t v15 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v17 = v16 | (v15 << 6);
      goto LABEL_5;
    }
    int64_t v20 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    if (v20 >= v13) {
      goto LABEL_21;
    }
    unint64_t v21 = *(void *)(v9 + 8 * v20);
    ++v15;
    if (!v21)
    {
      int64_t v15 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_21;
      }
      unint64_t v21 = *(void *)(v9 + 8 * v15);
      if (!v21)
      {
        int64_t v15 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_21;
        }
        unint64_t v21 = *(void *)(v9 + 8 * v15);
        if (!v21) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v17 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_5:
    uint64_t v18 = *(void *)(*(void *)(a2 + 48) + 8 * v17);
    int64_t v19 = self;
    [v19 jsCallDidEndWithTag:v18];
    id result = [v19 rootViewModelParseDidBeginWithTag:v18];
  }
  int64_t v22 = v20 + 3;
  if (v22 < v13)
  {
    unint64_t v21 = *(void *)(v9 + 8 * v22);
    if (!v21)
    {
      while (1)
      {
        int64_t v15 = v22 + 1;
        if (__OFADD__(v22, 1)) {
          break;
        }
        if (v15 >= v13) {
          goto LABEL_21;
        }
        unint64_t v21 = *(void *)(v9 + 8 * v15);
        ++v22;
        if (v21) {
          goto LABEL_20;
        }
      }
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    int64_t v15 = v22;
    goto LABEL_20;
  }
LABEL_21:
  swift_release();
  unint64_t v23 = v42;
  JSResponse.body.getter();
  uint64_t v24 = (uint64_t)v46;
  uint64_t v25 = v44;
  CoarselyTimed.contained.getter();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v23, v25);
  uint64_t v27 = v50;
  uint64_t v26 = v51;
  uint64_t v28 = (uint64_t)v48;
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v48, v47, v51);
  type metadata accessor for ASCLockupContainer();
  uint64_t v29 = v49;
  uint64_t v30 = sub_10007AEBC(v24, v28);
  if (v29)
  {
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v28, v26);
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v24, v53);
    return (id)v30;
  }
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v28, v26);
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v24, v53);
  uint64_t v31 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v32 = -1;
  if (v31 < 64) {
    uint64_t v32 = ~(-1 << v31);
  }
  unint64_t v33 = v32 & *(void *)(a2 + 56);
  int64_t v34 = (unint64_t)(v31 + 63) >> 6;
  id result = (id)swift_bridgeObjectRetain();
  int64_t v35 = 0;
  while (2)
  {
    if (v33)
    {
      unint64_t v36 = __clz(__rbit64(v33));
      v33 &= v33 - 1;
      unint64_t v37 = v36 | (v35 << 6);
LABEL_27:
      id result = [self rootViewModelParseDidEndWithTag:*(void *)(*(void *)(a2 + 48) + 8 * v37)];
      continue;
    }
    break;
  }
  int64_t v38 = v35 + 1;
  if (__OFADD__(v35, 1)) {
    goto LABEL_46;
  }
  if (v38 >= v34)
  {
LABEL_43:
    swift_release();
    return (id)v30;
  }
  unint64_t v39 = *(void *)(v9 + 8 * v38);
  ++v35;
  if (v39) {
    goto LABEL_42;
  }
  int64_t v35 = v38 + 1;
  if (v38 + 1 >= v34) {
    goto LABEL_43;
  }
  unint64_t v39 = *(void *)(v9 + 8 * v35);
  if (v39) {
    goto LABEL_42;
  }
  int64_t v35 = v38 + 2;
  if (v38 + 2 >= v34) {
    goto LABEL_43;
  }
  unint64_t v39 = *(void *)(v9 + 8 * v35);
  if (v39)
  {
LABEL_42:
    unint64_t v33 = (v39 - 1) & v39;
    unint64_t v37 = __clz(__rbit64(v39)) + (v35 << 6);
    goto LABEL_27;
  }
  int64_t v40 = v38 + 3;
  if (v40 >= v34) {
    goto LABEL_43;
  }
  unint64_t v39 = *(void *)(v9 + 8 * v40);
  if (v39)
  {
    int64_t v35 = v40;
    goto LABEL_42;
  }
  while (1)
  {
    int64_t v35 = v40 + 1;
    if (__OFADD__(v40, 1)) {
      break;
    }
    if (v35 >= v34) {
      goto LABEL_43;
    }
    unint64_t v39 = *(void *)(v9 + 8 * v35);
    ++v40;
    if (v39) {
      goto LABEL_42;
    }
  }
LABEL_48:
  __break(1u);
  return result;
}

id sub_1000E61E4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t (*a6)(char *, char *))
{
  uint64_t v54 = a6;
  uint64_t v52 = a5;
  uint64_t v49 = a3;
  uint64_t v50 = a4;
  uint64_t v47 = a1;
  uint64_t v7 = type metadata accessor for JSONContext();
  uint64_t v55 = *(void *)(v7 - 8);
  uint64_t v56 = v7;
  __chkstk_darwin(v7);
  uint64_t v51 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for JSONObject();
  uint64_t v57 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v48 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10002EB60(&qword_1001A46B8);
  uint64_t v45 = *(void *)(v10 - 8);
  uint64_t v46 = v10;
  __chkstk_darwin(v10);
  uint64_t v44 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a2 + 56;
  uint64_t v13 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(a2 + 56);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  id result = (id)swift_bridgeObjectRetain();
  int64_t v18 = 0;
  while (1)
  {
    if (v15)
    {
      unint64_t v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v20 = v19 | (v18 << 6);
      goto LABEL_5;
    }
    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    if (v23 >= v16) {
      goto LABEL_21;
    }
    unint64_t v24 = *(void *)(v12 + 8 * v23);
    ++v18;
    if (!v24)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v16) {
        goto LABEL_21;
      }
      unint64_t v24 = *(void *)(v12 + 8 * v18);
      if (!v24)
      {
        int64_t v18 = v23 + 2;
        if (v23 + 2 >= v16) {
          goto LABEL_21;
        }
        unint64_t v24 = *(void *)(v12 + 8 * v18);
        if (!v24) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v15 = (v24 - 1) & v24;
    unint64_t v20 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_5:
    uint64_t v21 = *(void *)(*(void *)(a2 + 48) + 8 * v20);
    int64_t v22 = self;
    [v22 jsCallDidEndWithTag:v21];
    id result = [v22 rootViewModelParseDidBeginWithTag:v21];
  }
  int64_t v25 = v23 + 3;
  if (v25 < v16)
  {
    unint64_t v24 = *(void *)(v12 + 8 * v25);
    if (!v24)
    {
      while (1)
      {
        int64_t v18 = v25 + 1;
        if (__OFADD__(v25, 1)) {
          break;
        }
        if (v18 >= v16) {
          goto LABEL_21;
        }
        unint64_t v24 = *(void *)(v12 + 8 * v18);
        ++v25;
        if (v24) {
          goto LABEL_20;
        }
      }
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    int64_t v18 = v25;
    goto LABEL_20;
  }
LABEL_21:
  swift_release();
  uint64_t v26 = v44;
  JSResponse.body.getter();
  uint64_t v27 = v48;
  uint64_t v28 = v46;
  CoarselyTimed.contained.getter();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v26, v28);
  uint64_t v30 = v55;
  uint64_t v29 = v56;
  uint64_t v31 = v51;
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v51, v49, v56);
  sub_10002EE34(0, v50);
  uint64_t v32 = v53;
  uint64_t v33 = v54(v27, v31);
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v29);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v27, v58);
    return (id)v33;
  }
  (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v29);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v27, v58);
  uint64_t v34 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v35 = -1;
  if (v34 < 64) {
    uint64_t v35 = ~(-1 << v34);
  }
  unint64_t v36 = v35 & *(void *)(a2 + 56);
  int64_t v37 = (unint64_t)(v34 + 63) >> 6;
  id result = (id)swift_bridgeObjectRetain();
  int64_t v38 = 0;
  while (2)
  {
    if (v36)
    {
      unint64_t v39 = __clz(__rbit64(v36));
      v36 &= v36 - 1;
      unint64_t v40 = v39 | (v38 << 6);
LABEL_27:
      id result = [self rootViewModelParseDidEndWithTag:*(void *)(*(void *)(a2 + 48) + 8 * v40)];
      continue;
    }
    break;
  }
  int64_t v41 = v38 + 1;
  if (__OFADD__(v38, 1)) {
    goto LABEL_46;
  }
  if (v41 >= v37)
  {
LABEL_43:
    swift_release();
    return (id)v33;
  }
  unint64_t v42 = *(void *)(v12 + 8 * v41);
  ++v38;
  if (v42) {
    goto LABEL_42;
  }
  int64_t v38 = v41 + 1;
  if (v41 + 1 >= v37) {
    goto LABEL_43;
  }
  unint64_t v42 = *(void *)(v12 + 8 * v38);
  if (v42) {
    goto LABEL_42;
  }
  int64_t v38 = v41 + 2;
  if (v41 + 2 >= v37) {
    goto LABEL_43;
  }
  unint64_t v42 = *(void *)(v12 + 8 * v38);
  if (v42)
  {
LABEL_42:
    unint64_t v36 = (v42 - 1) & v42;
    unint64_t v40 = __clz(__rbit64(v42)) + (v38 << 6);
    goto LABEL_27;
  }
  int64_t v43 = v41 + 3;
  if (v43 >= v37) {
    goto LABEL_43;
  }
  unint64_t v42 = *(void *)(v12 + 8 * v43);
  if (v42)
  {
    int64_t v38 = v43;
    goto LABEL_42;
  }
  while (1)
  {
    int64_t v38 = v43 + 1;
    if (__OFADD__(v43, 1)) {
      break;
    }
    if (v38 >= v37) {
      goto LABEL_43;
    }
    unint64_t v42 = *(void *)(v12 + 8 * v38);
    ++v43;
    if (v42) {
      goto LABEL_42;
    }
  }
LABEL_48:
  __break(1u);
  return result;
}

id sub_1000E6714@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v46 = a3;
  uint64_t v47 = a4;
  uint64_t v42 = a1;
  uint64_t v5 = type metadata accessor for JSONContext();
  uint64_t v44 = *(void *)(v5 - 8);
  uint64_t v45 = v5;
  __chkstk_darwin(v5);
  int64_t v43 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for JSONObject();
  __chkstk_darwin(v7 - 8);
  int64_t v41 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10002EB60(&qword_1001A46B8);
  uint64_t v39 = *(void *)(v9 - 8);
  uint64_t v40 = v9;
  __chkstk_darwin(v9);
  int64_t v38 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a2 + 56;
  uint64_t v12 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(a2 + 56);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  id result = (id)swift_bridgeObjectRetain();
  int64_t v17 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v19 = v18 | (v17 << 6);
      goto LABEL_5;
    }
    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v22 >= v15) {
      goto LABEL_21;
    }
    unint64_t v23 = *(void *)(v11 + 8 * v22);
    ++v17;
    if (!v23)
    {
      int64_t v17 = v22 + 1;
      if (v22 + 1 >= v15) {
        goto LABEL_21;
      }
      unint64_t v23 = *(void *)(v11 + 8 * v17);
      if (!v23)
      {
        int64_t v17 = v22 + 2;
        if (v22 + 2 >= v15) {
          goto LABEL_21;
        }
        unint64_t v23 = *(void *)(v11 + 8 * v17);
        if (!v23) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v14 = (v23 - 1) & v23;
    unint64_t v19 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_5:
    uint64_t v20 = *(void *)(*(void *)(a2 + 48) + 8 * v19);
    uint64_t v21 = self;
    [v21 jsCallDidEndWithTag:v20];
    id result = [v21 rootViewModelParseDidBeginWithTag:v20];
  }
  int64_t v24 = v22 + 3;
  if (v24 < v15)
  {
    unint64_t v23 = *(void *)(v11 + 8 * v24);
    if (!v23)
    {
      while (1)
      {
        int64_t v17 = v24 + 1;
        if (__OFADD__(v24, 1)) {
          break;
        }
        if (v17 >= v15) {
          goto LABEL_21;
        }
        unint64_t v23 = *(void *)(v11 + 8 * v17);
        ++v24;
        if (v23) {
          goto LABEL_20;
        }
      }
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    int64_t v17 = v24;
    goto LABEL_20;
  }
LABEL_21:
  swift_release();
  type metadata accessor for LintedMetricsEvent();
  int64_t v25 = v38;
  JSResponse.body.getter();
  uint64_t v26 = v40;
  CoarselyTimed.contained.getter();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v25, v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v43, v46, v45);
  uint64_t v27 = v48;
  id result = (id)dispatch thunk of ExpressibleByJSON.init(deserializing:using:)();
  if (v27) {
    return result;
  }
  uint64_t v28 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v29 = -1;
  if (v28 < 64) {
    uint64_t v29 = ~(-1 << v28);
  }
  unint64_t v30 = v29 & *(void *)(a2 + 56);
  int64_t v31 = (unint64_t)(v28 + 63) >> 6;
  id result = (id)swift_bridgeObjectRetain();
  int64_t v32 = 0;
  while (2)
  {
    if (v30)
    {
      unint64_t v33 = __clz(__rbit64(v30));
      v30 &= v30 - 1;
      unint64_t v34 = v33 | (v32 << 6);
LABEL_26:
      id result = [self rootViewModelParseDidEndWithTag:*(void *)(*(void *)(a2 + 48) + 8 * v34)];
      continue;
    }
    break;
  }
  int64_t v35 = v32 + 1;
  if (__OFADD__(v32, 1)) {
    goto LABEL_45;
  }
  if (v35 >= v31) {
    return (id)swift_release();
  }
  unint64_t v36 = *(void *)(v11 + 8 * v35);
  ++v32;
  if (v36) {
    goto LABEL_41;
  }
  int64_t v32 = v35 + 1;
  if (v35 + 1 >= v31) {
    return (id)swift_release();
  }
  unint64_t v36 = *(void *)(v11 + 8 * v32);
  if (v36) {
    goto LABEL_41;
  }
  int64_t v32 = v35 + 2;
  if (v35 + 2 >= v31) {
    return (id)swift_release();
  }
  unint64_t v36 = *(void *)(v11 + 8 * v32);
  if (v36)
  {
LABEL_41:
    unint64_t v30 = (v36 - 1) & v36;
    unint64_t v34 = __clz(__rbit64(v36)) + (v32 << 6);
    goto LABEL_26;
  }
  int64_t v37 = v35 + 3;
  if (v37 >= v31) {
    return (id)swift_release();
  }
  unint64_t v36 = *(void *)(v11 + 8 * v37);
  if (v36)
  {
    int64_t v32 = v37;
    goto LABEL_41;
  }
  while (1)
  {
    int64_t v32 = v37 + 1;
    if (__OFADD__(v37, 1)) {
      break;
    }
    if (v32 >= v31) {
      return (id)swift_release();
    }
    unint64_t v36 = *(void *)(v11 + 8 * v32);
    ++v37;
    if (v36) {
      goto LABEL_41;
    }
  }
LABEL_47:
  __break(1u);
  return result;
}

uint64_t sub_1000E6B90@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

unint64_t sub_1000E6BB0()
{
  unint64_t result = qword_1001A46A8;
  if (!qword_1001A46A8)
  {
    type metadata accessor for JSInitFailureObserver();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A46A8);
  }
  return result;
}

uint64_t sub_1000E6C08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for JSDiagnostics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_1000E6C70@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v6 = *(void *)(type metadata accessor for JSONContext() - 8);
  id result = sub_1000E5CC8(a1, *(void *)(v2 + 16), v2 + ((*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)));
  if (!v3) {
    *a2 = result;
  }
  return result;
}

id sub_1000E6CF4@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = *a1;
  return v2;
}

id sub_1000E6D28@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1000E6DA4(a1, &qword_1001A4D40, (uint64_t)off_100182810, (uint64_t (*)(char *, char *))sub_10007A2DC, a2);
}

id sub_1000E6D68@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1000E6DA4(a1, (unint64_t *)&qword_1001A17E8, (uint64_t)off_1001827E8, (uint64_t (*)(char *, char *))sub_10007343C, a2);
}

id sub_1000E6DA4@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(char *, char *)@<X3>, void *a5@<X8>)
{
  uint64_t v12 = *(void *)(type metadata accessor for JSONContext() - 8);
  id result = sub_1000E61E4(a1, *(void *)(v5 + 16), v5 + ((*(unsigned __int8 *)(v12 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)), a2, a3, a4);
  if (!v6) {
    *a5 = result;
  }
  return result;
}

ValueMetadata *type metadata accessor for JSLockupService()
{
  return &type metadata for JSLockupService;
}

uint64_t sub_1000E6E5C()
{
  uint64_t v1 = type metadata accessor for JSONContext();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

id sub_1000E6F28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for JSONContext() - 8);
  return sub_1000E6714(a1, *(void *)(v2 + 16), v2 + ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), a2);
}

uint64_t sub_1000E6FA8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1000E4124(a1, a2);
}

void *sub_1000E72A0(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
    sub_1000C50D8(0, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v5 = v6;
      uint64_t v13 = v2;
      unint64_t v8 = v2[2];
      unint64_t v7 = v2[3];
      if (v8 >= v7 >> 1)
      {
        sub_1000C50D8((void *)(v7 > 1), v8 + 1, 1);
        uint64_t v2 = v13;
      }
      uint64_t v11 = &type metadata for Int;
      uint64_t v12 = &protocol witness table for Int;
      *(void *)&long long v10 = v5;
      v2[2] = v8 + 1;
      sub_100031C10(&v10, (uint64_t)&v2[5 * v8 + 4]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1000E7598(void *a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  id v4 = objc_allocWithZone((Class)NSNumberFormatter);
  id v5 = a1;
  id v6 = [v4 init];
  [v6 setNumberStyle:1];
  [v6 setFormatterBehavior:1040];
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  [v6 setLocale:isa];

  [v6 setMinimumFractionDigits:a2];
  id v8 = [v6 stringFromNumber:v5];
  if (!v8)
  {

    return 0;
  }
  uint64_t v9 = v8;
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v10;
}

void sub_1000E7810(void *a1)
{
  if (a1)
  {
    id v1 = [a1 longLongValue];
    Class isa = Locale._bridgeToObjectiveC()().super.isa;
    id v3 = (id)JECountFormatterMakeStringFromNumber();

    if (v3)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_8:

      return;
    }
    id v4 = [objc_allocWithZone((Class)NSNumber) initWithLongLong:v1];
    if (v4)
    {
      id v5 = v4;
      id v6 = objc_allocWithZone((Class)NSNumberFormatter);
      id v7 = v5;
      id v3 = [v6 init];
      [v3 setNumberStyle:1];
      [v3 setFormatterBehavior:1040];
      Class v8 = Locale._bridgeToObjectiveC()().super.isa;
      [v3 setLocale:v8];

      [v3 setMinimumFractionDigits:0];
      id v9 = [v3 stringFromNumber:v7];
      if (v9)
      {
        uint64_t v10 = v9;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        goto LABEL_8;
      }
    }
    __break(1u);
  }
}

uint64_t sub_1000E7A44(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10002EB60(&qword_1001A4748);
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10002EB60((uint64_t *)&unk_1001A50C0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v39 - v11;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  int64_t v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  unint64_t v19 = (char *)&v39 - v18;
  sub_1000EA944(a1, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_100034B8C((uint64_t)v12, (uint64_t *)&unk_1001A50C0);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v19, v12, v13);
  Date.init()();
  uint64_t result = Date.timeIntervalSince(_:)();
  double v23 = floor(v22 / 31536000.0);
  if ((~*(void *)&v23 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v23 <= -9.22337204e18)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v23 >= 9.22337204e18)
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v24 = (uint64_t)v23;
  if ((uint64_t)v23 >= 1)
  {
    sub_10002EC6C((void *)(v2 + OBJC_IVAR____TtC19appstorecomponentsd17JSLegacyLocObject_localizer), *(void *)(v2 + OBJC_IVAR____TtC19appstorecomponentsd17JSLegacyLocObject_localizer + 24));
    v25._object = (void *)0x8000000100160040;
    v25._uint64_t countAndFlagsBits = 0xD000000000000012;
    Localizer.string(forKey:)(v25);
    uint64_t v26 = v2 + OBJC_IVAR____TtC19appstorecomponentsd17JSLegacyLocObject_localeWithCalendarWithBagFixUp;
    uint64_t v27 = type metadata accessor for Locale();
    uint64_t v28 = *(void *)(v27 - 8);
    uint64_t v40 = v17;
    goto LABEL_8;
  }
  double v32 = floor(v22 / 86400.0);
  if ((~*(void *)&v32 & 0x7FF0000000000000) == 0) {
    goto LABEL_29;
  }
  if (v32 <= -9.22337204e18)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v32 >= 9.22337204e18)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if ((uint64_t)v32 >= 7)
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v10, v19, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
    uint64_t v33 = 0x64204D4D4DLL;
    uint64_t v34 = 0xE500000000000000;
    goto LABEL_17;
  }
  if ((uint64_t)v32 >= 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v10, v19, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
    uint64_t v33 = 69;
    uint64_t v34 = 0xE100000000000000;
LABEL_17:
    uint64_t countAndFlagsBits = sub_1000E80A0(v33, v34, (uint64_t)v10);
    sub_100034B8C((uint64_t)v10, (uint64_t *)&unk_1001A50C0);
    int64_t v35 = v17;
    int64_t v31 = *(void (**)(char *, uint64_t))(v14 + 8);
    v31(v35, v13);
    goto LABEL_18;
  }
  double v36 = floor(v22 / 3600.0);
  if ((~*(void *)&v36 & 0x7FF0000000000000) == 0) {
    goto LABEL_32;
  }
  if (v36 <= -9.22337204e18)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v36 < 9.22337204e18)
  {
    uint64_t v40 = v17;
    uint64_t v24 = (uint64_t)v36;
    sub_10002EC6C((void *)(v2 + OBJC_IVAR____TtC19appstorecomponentsd17JSLegacyLocObject_localizer), *(void *)(v2 + OBJC_IVAR____TtC19appstorecomponentsd17JSLegacyLocObject_localizer + 24));
    if (v24 < 1)
    {
      v38._uint64_t countAndFlagsBits = 0xD000000000000011;
      v38._object = (void *)0x800000010015FFA0;
      uint64_t countAndFlagsBits = Localizer.string(forKey:)(v38)._countAndFlagsBits;
      goto LABEL_9;
    }
    v37._object = (void *)0x800000010015FFC0;
    v37._uint64_t countAndFlagsBits = 0xD000000000000012;
    Localizer.string(forKey:)(v37);
    uint64_t v26 = v2 + OBJC_IVAR____TtC19appstorecomponentsd17JSLegacyLocObject_localeWithCalendarWithBagFixUp;
    uint64_t v27 = type metadata accessor for Locale();
    uint64_t v28 = *(void *)(v27 - 8);
LABEL_8:
    uint64_t v29 = v28;
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v6, v26, v27);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v6, 0, 1, v27);
    sub_10002EB60(&qword_1001A3C18);
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_10014CED0;
    *(void *)(v30 + 56) = &type metadata for Int;
    *(void *)(v30 + 64) = &protocol witness table for Int;
    *(void *)(v30 + 32) = v24;
    uint64_t countAndFlagsBits = String.init(format:locale:arguments:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100034B8C((uint64_t)v6, &qword_1001A4748);
LABEL_9:
    int64_t v31 = *(void (**)(char *, uint64_t))(v14 + 8);
    v31(v40, v13);
LABEL_18:
    v31(v19, v13);
    return countAndFlagsBits;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_1000E80A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v23[1] = a2;
  uint64_t v4 = type metadata accessor for Calendar();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10002EB60((uint64_t *)&unk_1001A50C0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000EA944(a3, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_100034B8C((uint64_t)v10, (uint64_t *)&unk_1001A50C0);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    id v16 = [objc_allocWithZone((Class)NSDateFormatter) init];
    [v16 setFormattingContext:4];
    Locale.calendar.getter();
    Class isa = Calendar._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    [v16 setCalendar:isa];

    Class v18 = Locale._bridgeToObjectiveC()().super.isa;
    [v16 setLocale:v18];

    NSString v19 = String._bridgeToObjectiveC()();
    [v16 setLocalizedDateFormatFromTemplate:v19];

    Class v20 = Date._bridgeToObjectiveC()().super.isa;
    id v21 = [v16 stringFromDate:v20];

    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  return v15;
}

uint64_t sub_1000E857C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v29[1] = a4;
  v29[2] = a1;
  v29[3] = a2;
  uint64_t v6 = type metadata accessor for Calendar();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10002EB60((uint64_t *)&unk_1001A50C0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v16 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000EA944(a5, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_100034B8C((uint64_t)v12, (uint64_t *)&unk_1001A50C0);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    id v18 = [objc_allocWithZone((Class)NSDateFormatter) init];
    [v18 setFormattingContext:1];
    Locale.calendar.getter();
    Class isa = Calendar._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    [v18 setCalendar:isa];

    Class v20 = Locale._bridgeToObjectiveC()().super.isa;
    [v18 setLocale:v20];

    NSString v21 = String._bridgeToObjectiveC()();
    [v18 setLocalizedDateFormatFromTemplate:v21];

    sub_10002EB60(&qword_1001A3C18);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_10014CED0;
    Class v23 = Date._bridgeToObjectiveC()().super.isa;
    id v24 = [v18 stringFromDate:v23];

    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = v26;

    *(void *)(v22 + 56) = &type metadata for String;
    *(void *)(v22 + 64) = sub_1000EA9AC();
    *(void *)(v22 + 32) = v25;
    *(void *)(v22 + 40) = v27;
    uint64_t v17 = String.init(format:_:)();

    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  return v17;
}

uint64_t sub_1000E8920(uint64_t a1)
{
  uint64_t v2 = sub_10002EB60(&qword_1001A4748);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Calendar();
  uint64_t v74 = *(void *)(v5 - 8);
  uint64_t v75 = v5;
  __chkstk_darwin(v5);
  uint64_t v73 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DateComponents();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10002EB60((uint64_t *)&unk_1001A50C0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  id v18 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  Class v20 = (char *)&v65 - v19;
  sub_1000EA944(a1, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) != 1)
  {
    BOOL v66 = v4;
    uint64_t v68 = v7;
    uint64_t v69 = v8;
    uint64_t v70 = v14;
    uint64_t v71 = v15;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v13, v14);
    Date.init()();
    uint64_t v22 = v73;
    uint64_t v67 = v76 + OBJC_IVAR____TtC19appstorecomponentsd17JSLegacyLocObject_localeWithCalendarWithBagFixUp;
    Locale.calendar.getter();
    sub_10002EB60(&qword_1001A4750);
    uint64_t v23 = type metadata accessor for Calendar.Component();
    uint64_t v24 = *(void *)(v23 - 8);
    uint64_t v25 = *(void *)(v24 + 72);
    unint64_t v26 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
    uint64_t v27 = swift_allocObject();
    char v72 = v10;
    uint64_t v28 = v18;
    uint64_t v29 = v20;
    uint64_t v30 = v27;
    *(_OWORD *)(v27 + 16) = xmmword_10014CEE0;
    unint64_t v31 = v27 + v26;
    double v32 = *(void (**)(unint64_t, void, uint64_t))(v24 + 104);
    v32(v27 + v26, enum case for Calendar.Component.year(_:), v23);
    v32(v31 + v25, enum case for Calendar.Component.month(_:), v23);
    v32(v31 + 2 * v25, enum case for Calendar.Component.weekOfYear(_:), v23);
    v32(v31 + 3 * v25, enum case for Calendar.Component.day(_:), v23);
    v32(v31 + 4 * v25, enum case for Calendar.Component.hour(_:), v23);
    v32(v31 + 5 * v25, enum case for Calendar.Component.second(_:), v23);
    sub_10011B0F0(v30);
    swift_setDeallocating();
    swift_arrayDestroy();
    uint64_t v33 = v28;
    uint64_t v34 = v72;
    swift_deallocClassInstance();
    Calendar.dateComponents(_:from:to:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v74 + 8))(v22, v75);
    uint64_t v35 = DateComponents.year.getter();
    if ((v36 & 1) == 0)
    {
      uint64_t v37 = v35;
      if (v35 >= 1)
      {
        sub_10002EC6C((void *)(v76 + OBJC_IVAR____TtC19appstorecomponentsd17JSLegacyLocObject_localizer), *(void *)(v76 + OBJC_IVAR____TtC19appstorecomponentsd17JSLegacyLocObject_localizer + 24));
        Swift::String v38 = "TIME_AGO_YEARS_AGO";
LABEL_6:
        unint64_t v39 = (unint64_t)(v38 - 32) | 0x8000000000000000;
        unint64_t v40 = 0xD000000000000012;
LABEL_11:
        Localizer.string(forKey:)(*(Swift::String *)&v40);
        uint64_t v44 = type metadata accessor for Locale();
        uint64_t v45 = *(void *)(v44 - 8);
        uint64_t v46 = (uint64_t)v66;
        (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v66, v67, v44);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v45 + 56))(v46, 0, 1, v44);
        sub_10002EB60(&qword_1001A3C18);
        uint64_t v47 = swift_allocObject();
        *(_OWORD *)(v47 + 16) = xmmword_10014CED0;
        *(void *)(v47 + 56) = &type metadata for Int;
        *(void *)(v47 + 64) = &protocol witness table for Int;
        *(void *)(v47 + 32) = v37;
        uint64_t countAndFlagsBits = String.init(format:locale:arguments:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100034B8C(v46, &qword_1001A4748);
        (*(void (**)(char *, uint64_t))(v69 + 8))(v34, v68);
LABEL_12:
        uint64_t v48 = v70;
        uint64_t v49 = *(void (**)(char *, uint64_t))(v71 + 8);
        v49(v33, v70);
        v49(v29, v48);
        return countAndFlagsBits;
      }
    }
    uint64_t v41 = DateComponents.month.getter();
    if ((v42 & 1) != 0 || (uint64_t v37 = v41, v41 < 1))
    {
      uint64_t v51 = DateComponents.weekOfYear.getter();
      if ((v52 & 1) == 0)
      {
        uint64_t v37 = v51;
        if (v51 >= 1)
        {
          sub_10002EC6C((void *)(v76 + OBJC_IVAR____TtC19appstorecomponentsd17JSLegacyLocObject_localizer), *(void *)(v76 + OBJC_IVAR____TtC19appstorecomponentsd17JSLegacyLocObject_localizer + 24));
          Swift::String v38 = "TIME_AGO_WEEKS_AGO";
          goto LABEL_6;
        }
      }
      uint64_t v53 = DateComponents.day.getter();
      if ((v54 & 1) != 0 || (uint64_t v37 = v53, v53 < 1))
      {
        uint64_t v55 = DateComponents.hour.getter();
        if ((v56 & 1) != 0 || (uint64_t v37 = v55, v55 < 1))
        {
          uint64_t v57 = DateComponents.second.getter();
          uint64_t v58 = v68;
          if ((v59 & 1) != 0 || v57 < 1)
          {
            id v61 = [objc_allocWithZone((Class)NSDateFormatter) init];
            [v61 setDoesRelativeDateFormatting:1];
            [v61 setDateStyle:2];
            [v61 setTimeStyle:0];
            Class isa = Locale._bridgeToObjectiveC()().super.isa;
            [v61 setLocale:isa];

            Class v63 = Date._bridgeToObjectiveC()().super.isa;
            id v64 = [v61 stringFromDate:v63];

            uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
          }
          else
          {
            sub_10002EC6C((void *)(v76 + OBJC_IVAR____TtC19appstorecomponentsd17JSLegacyLocObject_localizer), *(void *)(v76 + OBJC_IVAR____TtC19appstorecomponentsd17JSLegacyLocObject_localizer + 24));
            v60._uint64_t countAndFlagsBits = 0xD000000000000011;
            v60._object = (void *)0x800000010015FFA0;
            uint64_t countAndFlagsBits = Localizer.string(forKey:)(v60)._countAndFlagsBits;
          }
          (*(void (**)(char *, uint64_t))(v69 + 8))(v34, v58);
          goto LABEL_12;
        }
        sub_10002EC6C((void *)(v76 + OBJC_IVAR____TtC19appstorecomponentsd17JSLegacyLocObject_localizer), *(void *)(v76 + OBJC_IVAR____TtC19appstorecomponentsd17JSLegacyLocObject_localizer + 24));
        Swift::String v38 = "TIME_AGO_HOURS_AGO";
        goto LABEL_6;
      }
      sub_10002EC6C((void *)(v76 + OBJC_IVAR____TtC19appstorecomponentsd17JSLegacyLocObject_localizer), *(void *)(v76 + OBJC_IVAR____TtC19appstorecomponentsd17JSLegacyLocObject_localizer + 24));
      unint64_t v40 = 0xD000000000000011;
      int64_t v43 = "TIME_AGO_DAYS_AGO";
    }
    else
    {
      sub_10002EC6C((void *)(v76 + OBJC_IVAR____TtC19appstorecomponentsd17JSLegacyLocObject_localizer), *(void *)(v76 + OBJC_IVAR____TtC19appstorecomponentsd17JSLegacyLocObject_localizer + 24));
      unint64_t v40 = 0xD000000000000013;
      int64_t v43 = "TIME_AGO_MONTHS_AGO";
    }
    unint64_t v39 = (unint64_t)(v43 - 32) | 0x8000000000000000;
    goto LABEL_11;
  }
  sub_100034B8C((uint64_t)v13, (uint64_t *)&unk_1001A50C0);
  return 0;
}

id sub_1000E9248(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v7 = sub_10002EB60((uint64_t *)&unk_1001A50C0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 0, 1, v10);
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v9, 1, 1, v11);
  }
  id v12 = a1;
  a4(v9);
  uint64_t v14 = v13;

  sub_100034B8C((uint64_t)v9, (uint64_t *)&unk_1001A50C0);
  if (v14)
  {
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v15 = 0;
  }

  return v15;
}

uint64_t sub_1000E94C4()
{
  return type metadata accessor for JSLegacyLocObject();
}

uint64_t type metadata accessor for JSLegacyLocObject()
{
  uint64_t result = qword_1001A4708;
  if (!qword_1001A4708) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000E9518()
{
  uint64_t result = type metadata accessor for Locale();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

id sub_1000E9704(char *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  sub_10002EC6C(&a1[*a4], *(void *)&a1[*a4 + 24]);
  uint64_t v9 = a1;
  v10._uint64_t countAndFlagsBits = v6;
  v10._object = v8;
  Localizer.string(forKey:)(v10);

  swift_bridgeObjectRelease();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();

  return v11;
}

uint64_t sub_1000E9DA0()
{
  return swift_willThrow();
}

uint64_t sub_1000EA298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = sub_10002EB60((uint64_t *)&unk_1001A50C0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000EA944(a5, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_100034B8C((uint64_t)v9, (uint64_t *)&unk_1001A50C0);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    sub_10002EC6C((void *)(v5 + OBJC_IVAR____TtC19appstorecomponentsd17JSModernLocObject_localizer), *(void *)(v5 + OBJC_IVAR____TtC19appstorecomponentsd17JSModernLocObject_localizer + 24));
    uint64_t v14 = dispatch thunk of Localizer.formattedDate(format:date:inSentence:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  return v14;
}

id sub_1000EA498(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, char *))
{
  uint64_t v9 = sub_10002EB60((uint64_t *)&unk_1001A50C0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;
  if (a5)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v11, 0, 1, v18);
  }
  else
  {
    uint64_t v19 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v11, 1, 1, v19);
  }
  id v20 = a1;
  a6(v12, v14, v15, v17, v11);
  uint64_t v22 = v21;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100034B8C((uint64_t)v11, (uint64_t *)&unk_1001A50C0);
  if (v22)
  {
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v23 = 0;
  }

  return v23;
}

uint64_t type metadata accessor for JSModernLocObject()
{
  return self;
}

uint64_t sub_1000EA944(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60((uint64_t *)&unk_1001A50C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000EA9AC()
{
  unint64_t result = qword_1001A4758;
  if (!qword_1001A4758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A4758);
  }
  return result;
}

uint64_t sub_1000EAAB8(uint64_t a1)
{
  swift_getObjectType();
  sub_1000EC3CC(a1, (uint64_t)v14);
  if (!v15)
  {
    sub_1000709E0((uint64_t)v14);
    goto LABEL_14;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_14:
    char v11 = 0;
    return v11 & 1;
  }
  uint64_t v3 = *(void *)(v1
                 + OBJC_IVAR____TtCC19appstorecomponentsd19JSMediaTokensObjectP33_E91800677D5458EF8C488C03D4ACDC6E8CacheKey_client);
  uint64_t v4 = *(void *)(v1
                 + OBJC_IVAR____TtCC19appstorecomponentsd19JSMediaTokensObjectP33_E91800677D5458EF8C488C03D4ACDC6E8CacheKey_client
                 + 8);
  uint64_t v5 = *(void *)(v1
                 + OBJC_IVAR____TtCC19appstorecomponentsd19JSMediaTokensObjectP33_E91800677D5458EF8C488C03D4ACDC6E8CacheKey_client
                 + 16);
  uint64_t v6 = *(void *)(v1
                 + OBJC_IVAR____TtCC19appstorecomponentsd19JSMediaTokensObjectP33_E91800677D5458EF8C488C03D4ACDC6E8CacheKey_client
                 + 24);
  uint64_t v7 = *(void *)&v13[OBJC_IVAR____TtCC19appstorecomponentsd19JSMediaTokensObjectP33_E91800677D5458EF8C488C03D4ACDC6E8CacheKey_client
                     + 16];
  uint64_t v8 = *(void *)&v13[OBJC_IVAR____TtCC19appstorecomponentsd19JSMediaTokensObjectP33_E91800677D5458EF8C488C03D4ACDC6E8CacheKey_client
                     + 24];
  BOOL v9 = v3 == *(void *)&v13[OBJC_IVAR____TtCC19appstorecomponentsd19JSMediaTokensObjectP33_E91800677D5458EF8C488C03D4ACDC6E8CacheKey_client]
    && v4 == *(void *)&v13[OBJC_IVAR____TtCC19appstorecomponentsd19JSMediaTokensObjectP33_E91800677D5458EF8C488C03D4ACDC6E8CacheKey_client
                           + 8];
  if (!v9 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {

    goto LABEL_14;
  }
  if (v5 == v7 && v6 == v8)
  {

    char v11 = 1;
  }
  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return v11 & 1;
}

void *sub_1000EACB4(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = type metadata accessor for JSPromise();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  BOOL v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (void *)type metadata accessor for RunLoopWorkerThread();
  uint64_t v11 = static RunLoopWorkerThread.current.getter();
  if (!v11)
  {
    type metadata accessor for JSError();
    sub_1000D7158();
    swift_allocError();
    JSError.init(message:line:column:sourceURL:constructorName:)();
    swift_willThrow();
    return v10;
  }
  uint64_t v12 = v11;
  uint64_t v25 = v7;
  uint64_t v14 = JSValue.string.getter();
  if (!v13)
  {
    uint64_t v10 = (void *)type metadata accessor for JSError();
    sub_1000D7158();
    swift_allocError();
LABEL_9:
    JSError.init(message:line:column:sourceURL:constructorName:)();
    swift_willThrow();
    goto LABEL_10;
  }
  uint64_t v15 = v13;
  uint64_t v16 = JSValue.string.getter();
  if (!v17)
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = (void *)type metadata accessor for JSError();
    sub_1000D7158();
    swift_allocError();
    goto LABEL_9;
  }
  uint64_t v18 = v17;
  id v24 = a1;
  uint64_t v19 = v16;
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = a4;
  v10[3] = v14;
  v10[4] = v15;
  uint64_t v10[5] = v19;
  v10[6] = v18;
  v10[7] = v12;
  id v20 = v24;
  id v21 = a4;
  swift_retain();
  uint64_t v22 = v26;
  JSPromise.init(in:executor:)();
  if (v22)
  {
LABEL_10:
    swift_release();
    return v10;
  }
  uint64_t v10 = (void *)JSPromise.value.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v6);
  return v10;
}

uint64_t sub_1000EAFDC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v37 = a2;
  uint64_t v38 = a3;
  unint64_t v39 = a1;
  uint64_t v40 = a9;
  uint64_t v36 = type metadata accessor for JSCallable();
  uint64_t v14 = *(void *)(v36 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v36);
  uint64_t v16 = (char *)v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = (objc_class *)type metadata accessor for JSMediaTokensObject.CacheKey();
  uint64_t v18 = (char *)objc_allocWithZone(v17);
  uint64_t v19 = &v18[OBJC_IVAR____TtCC19appstorecomponentsd19JSMediaTokensObjectP33_E91800677D5458EF8C488C03D4ACDC6E8CacheKey_client];
  *(void *)uint64_t v19 = a5;
  *((void *)v19 + 1) = a6;
  *((void *)v19 + 2) = a7;
  *((void *)v19 + 3) = a8;
  v42.receiver = v18;
  v42.super_class = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v20 = objc_msgSendSuper2(&v42, "init");
  id v21 = *(void **)(a4 + OBJC_IVAR____TtC19appstorecomponentsd19JSMediaTokensObject_cachedServices);
  id v22 = [v21 objectForKey:v20];
  if (!v22)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = Bag.amsBag.getter();
    id v24 = objc_allocWithZone((Class)AMSMediaTokenService);
    NSString v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v22 = [v24 initWithClientIdentifier:v25 bag:v23];

    swift_unknownObjectRelease();
    [v21 setObject:v22 forKey:v20];
  }
  v35[0] = v22;

  sub_10002EB60(&qword_1001A47D8);
  id v26 = [v22 fetchMediaToken];
  v35[1] = (id)Promise<A>.init(_:)();
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v28 = v36;
  v27((char *)v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v37, v36);
  unint64_t v29 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v37 = swift_allocObject();
  uint64_t v30 = *(void (**)(unint64_t, char *, uint64_t))(v14 + 32);
  v30(v37 + v29, v16, v28);
  v27(v16, v38, v28);
  uint64_t v31 = swift_allocObject();
  v30(v31 + v29, v16, v28);
  double v32 = v39;
  *(void *)(v31 + ((v29 + v15 + 7) & 0xFFFFFFFFFFFFFFF8)) = v39;
  v41[3] = type metadata accessor for RunLoopWorkerThread();
  v41[4] = &protocol witness table for RunLoopWorkerThread;
  v41[0] = v40;
  id v33 = v32;
  swift_retain();
  Promise.then(perform:orCatchError:on:)();

  swift_release();
  swift_release();
  swift_release();
  return sub_10002ED08((uint64_t)v41);
}

void sub_1000EB354(void **a1)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for OSLogger();
  __chkstk_darwin(v3);
  uint64_t v4 = *a1;
  sub_10002EB60(&qword_1001A3C10);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_10014CED0;
  id v6 = objc_msgSend(v4, "tokenString", 1, 2);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 32) = v7;
  *(void *)(v5 + 40) = v9;
  uint64_t v10 = (void *)JSCallable.call(_:)();
  swift_bridgeObjectRelease();
}

void sub_1000EB6F0(uint64_t a1, uint64_t a2, JSContext a3)
{
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for OSLogger();
  uint64_t v14 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for JSError();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002EB60(&qword_1001A3C10);
  uint64_t v10 = swift_allocObject();
  long long v13 = xmmword_10014CED0;
  *(_OWORD *)(v10 + 16) = xmmword_10014CED0;
  swift_getErrorValue();
  Error.localizedDescription.getter();
  JSError.init(message:line:column:sourceURL:constructorName:)();
  Class isa = JSError.makeValue(in:)(a3).super.isa;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *(void *)(v10 + 56) = sub_10002EE34(0, (unint64_t *)&qword_1001A4140);
  *(void *)(v10 + 32) = isa;
  uint64_t v12 = (void *)JSCallable.call(_:)();
  swift_bridgeObjectRelease();
}

void sub_1000EBBFC(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for OSLogger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = JSValue.string.getter();
  if (!v12)
  {
    if (qword_1001A0E70 != -1) {
      swift_once();
    }
    uint64_t v28 = sub_10002F6AC(v7, (uint64_t)qword_1001AE398);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v28, v7);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v29._uint64_t countAndFlagsBits = 0xD000000000000022;
    v29._object = (void *)0x8000000100160360;
    LogMessage.StringInterpolation.appendLiteral(_:)(v29);
    uint64_t v38 = sub_10002EE34(0, (unint64_t *)&qword_1001A4140);
    v37[0] = a1;
    id v30 = a1;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_1000709E0((uint64_t)v37);
    v31._uint64_t countAndFlagsBits = 0;
    v31._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v31);
    LogMessage.init(stringInterpolation:)();
    Logger.error(_:)();
    goto LABEL_12;
  }
  uint64_t v13 = v11;
  uint64_t v14 = v12;
  uint64_t v15 = JSValue.string.getter();
  if (!v16)
  {
    swift_bridgeObjectRelease();
    if (qword_1001A0E70 != -1) {
      swift_once();
    }
    uint64_t v32 = sub_10002F6AC(v7, (uint64_t)qword_1001AE398);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v32, v7);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v33._object = (void *)0x8000000100160390;
    v33._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v33);
    uint64_t v38 = sub_10002EE34(0, (unint64_t *)&qword_1001A4140);
    v37[0] = a2;
    id v34 = a2;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_1000709E0((uint64_t)v37);
    v35._uint64_t countAndFlagsBits = 0;
    v35._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v35);
    LogMessage.init(stringInterpolation:)();
    Logger.error(_:)();
LABEL_12:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return;
  }
  uint64_t v17 = v15;
  uint64_t v18 = v16;
  uint64_t v19 = (objc_class *)type metadata accessor for JSMediaTokensObject.CacheKey();
  id v20 = (char *)objc_allocWithZone(v19);
  id v21 = &v20[OBJC_IVAR____TtCC19appstorecomponentsd19JSMediaTokensObjectP33_E91800677D5458EF8C488C03D4ACDC6E8CacheKey_client];
  *(void *)id v21 = v13;
  *((void *)v21 + 1) = v14;
  *((void *)v21 + 2) = v17;
  *((void *)v21 + 3) = v18;
  v36.receiver = v20;
  v36.super_class = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v22 = objc_msgSendSuper2(&v36, "init");
  uint64_t v23 = *(void **)(v3 + OBJC_IVAR____TtC19appstorecomponentsd19JSMediaTokensObject_cachedServices);
  id v24 = [v23 objectForKey:v22];
  if (!v24)
  {
    swift_bridgeObjectRetain();
    uint64_t v25 = Bag.amsBag.getter();
    id v26 = objc_allocWithZone((Class)AMSMediaTokenService);
    NSString v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v24 = [v26 initWithClientIdentifier:v27 bag:v25];

    swift_unknownObjectRelease();
    [v23 setObject:v24 forKey:v22];
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  [v24 invalidateMediaToken];
}

uint64_t sub_1000EC2B8()
{
  return type metadata accessor for JSMediaTokensObject();
}

uint64_t type metadata accessor for JSMediaTokensObject()
{
  uint64_t result = qword_1001A4798;
  if (!qword_1001A4798) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000EC30C()
{
  uint64_t result = type metadata accessor for Bag();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for JSMediaTokensObject.CacheKey()
{
  return self;
}

uint64_t sub_1000EC3CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A1C50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *sub_1000EC434(void *a1)
{
  return sub_1000EACB4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_1000EC454()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000EC4A4(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EAFDC(a1, a2, a3, v3[2], v3[3], v3[4], v3[5], v3[6], v3[7]);
}

uint64_t sub_1000EC4D4()
{
  uint64_t v1 = type metadata accessor for JSCallable();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_1000EC564(void **a1)
{
  type metadata accessor for JSCallable();

  sub_1000EB354(a1);
}

uint64_t sub_1000EC5D4()
{
  uint64_t v1 = type metadata accessor for JSCallable();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1000EC678(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for JSCallable() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5.super.Class isa = *(Class *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_1000EB6F0(a1, v1 + v4, v5);
}

ValueMetadata *type metadata accessor for JSMetricsEventLinter()
{
  return &type metadata for JSMetricsEventLinter;
}

id sub_1000EC724(uint64_t a1, uint64_t a2)
{
  v24[2] = a2;
  uint64_t v3 = type metadata accessor for JSRoute();
  __chkstk_darwin(v3 - 8);
  v24[1] = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for JSRequest();
  uint64_t v25 = *(void *)(v5 - 8);
  uint64_t v26 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v24 - v9;
  uint64_t v11 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v11 - 8);
  uint64_t v12 = type metadata accessor for OSLogger();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0E78 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_10002F6AC(v12, (uint64_t)qword_1001AE3B0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v16, v12);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v17._uint64_t countAndFlagsBits = 0x20676E69746E694CLL;
  v17._object = (void *)0xEE0020746E657665;
  LogMessage.StringInterpolation.appendLiteral(_:)(v17);
  uint64_t v18 = sub_10002EB60(&qword_1001A2300);
  uint64_t v28 = v18;
  v27[0] = a1;
  swift_bridgeObjectRetain();
  LogMessage.StringInterpolation.appendInterpolation(sensitive:)();
  sub_1000709E0((uint64_t)v27);
  v19._uint64_t countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v19);
  LogMessage.init(stringInterpolation:)();
  Logger.debug(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  JSRoute.init(service:function:)();
  JSRequest.init(route:timeoutInterval:version:)();
  uint64_t v28 = v18;
  v27[0] = a1;
  swift_bridgeObjectRetain();
  JSRequest.addingOption(_:withName:)();
  uint64_t v20 = v26;
  id v21 = *(void (**)(char *, uint64_t))(v25 + 8);
  v21(v8, v26);
  sub_1000709E0((uint64_t)v27);
  id v22 = sub_1000E53F8((uint64_t)v10);
  uint64_t v28 = type metadata accessor for SyncTaskScheduler();
  Swift::String v29 = &protocol witness table for SyncTaskScheduler;
  sub_100031A88(v27);
  SyncTaskScheduler.init()();
  Promise.then(perform:orCatchError:on:)();
  v21(v10, v20);
  sub_10002ED08((uint64_t)v27);
  return v22;
}

uint64_t sub_1000ECBD8()
{
  uint64_t v0 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = type metadata accessor for OSLogger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0E78 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_10002F6AC(v1, (uint64_t)qword_1001AE3B0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v5, v1);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v6._uint64_t countAndFlagsBits = 0x65206465746E694CLL;
  v6._object = (void *)0xED000020746E6576;
  LogMessage.StringInterpolation.appendLiteral(_:)(v6);
  uint64_t v7 = LintedMetricsEvent.fields.getter();
  v10[3] = sub_10002EB60(&qword_1001A2300);
  v10[0] = v7;
  LogMessage.StringInterpolation.appendInterpolation(sensitive:)();
  sub_1000709E0((uint64_t)v10);
  v8._uint64_t countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v8);
  LogMessage.init(stringInterpolation:)();
  Logger.debug(_:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_1000ECE78()
{
  uint64_t v0 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = type metadata accessor for OSLogger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0E78 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_10002F6AC(v1, (uint64_t)qword_1001AE3B0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v5, v1);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v6._object = (void *)0x8000000100160550;
  v6._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v6);
  swift_getErrorValue();
  uint64_t v7 = v12;
  uint64_t v8 = v13;
  v14[3] = v13;
  uint64_t v9 = sub_100031A88(v14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v9, v7, v8);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_1000709E0((uint64_t)v14);
  v10._uint64_t countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v10);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

id sub_1000ED138(uint64_t a1)
{
  return sub_1000EC724(a1, *v1);
}

uint64_t sub_1000ED140()
{
  uint64_t v0 = type metadata accessor for OSLogger.Subsystem();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OSLogger();
  sub_10002F648(v4, qword_1001A47E0);
  sub_10002F6AC(v4, (uint64_t)qword_1001A47E0);
  if (qword_1001A0E58 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_10002F6AC(v0, (uint64_t)qword_1001AE350);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return OSLogger.init(subsystem:category:)();
}

id sub_1000ED308(void *a1, uint64_t a2, void *a3)
{
  id v63 = a1;
  id v57 = a3;
  uint64_t v3 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v3 - 8);
  uint64_t v58 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for OSLogger();
  uint64_t v61 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  Swift::String v60 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for JSPromise();
  uint64_t v56 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10002EB60(&qword_1001A2450);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for JSONContext();
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for JSONObject();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  Swift::String v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  id v21 = (char *)&v53 - v20;
  id v22 = v62;
  JSValue.makeJSONObject()();
  if (v22)
  {
    uint64_t v62 = 0;
  }
  else
  {
    uint64_t v62 = v11;
    uint64_t v54 = v6;
    uint64_t v55 = v8;
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v21, v15);
    JSONContext.init()();
    uint64_t v23 = v16;
    id v24 = (void *)sub_100117D60((uint64_t)v19, (uint64_t)v14);
    uint64_t v26 = v25;
    uint64_t v28 = v27;
    Swift::String v29 = (void *)swift_allocObject();
    id v30 = v57;
    v29[2] = v57;
    v29[3] = v24;
    void v29[4] = v26;
    v29[5] = v28;
    sub_10002EB60(&qword_1001A4878);
    id v31 = v30;
    id v57 = v24;
    swift_bridgeObjectRetain();
    uint64_t v32 = Promise.__allocating_init()();
    uint64_t v33 = type metadata accessor for TaskPriority();
    uint64_t v34 = (uint64_t)v62;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v62, 1, 1, v33);
    Swift::String v35 = (void *)swift_allocObject();
    id v35[2] = 0;
    v35[3] = 0;
    v35[4] = &unk_1001A4870;
    v35[5] = v29;
    v35[6] = v32;
    swift_retain();
    sub_1000F6C04(v34, (uint64_t)&unk_1001A4880, (uint64_t)v35);
    swift_release();
    type metadata accessor for RunLoopWorkerThread();
    swift_retain();
    uint64_t v36 = static RunLoopWorkerThread.current.getter();
    if (v36)
    {
      uint64_t v37 = v36;
      uint64_t v38 = swift_allocObject();
      *(void *)(v38 + 16) = 0;
      *(unsigned char *)(v38 + 24) = 1;
      *(void *)(v38 + 32) = v37;
      *(void *)(v38 + 40) = sub_1000EF5AC;
      *(void *)(v38 + 48) = v32;
      id v39 = v63;
      swift_retain();
      uint64_t v40 = v55;
      JSPromise.init(in:executor:)();
      uint64_t v41 = JSPromise.value.getter();
      swift_bridgeObjectRelease();

      swift_release_n();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v40, v54);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v21, v15);
      return (id)v41;
    }
    sub_1000EF2C0();
    swift_allocError();
    *objc_super v42 = 0;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v21, v15);
    swift_release_n();
    swift_bridgeObjectRelease();

    uint64_t v62 = 0;
  }
  if (qword_1001A0E28 != -1) {
    swift_once();
  }
  uint64_t v43 = v59;
  uint64_t v44 = sub_10002F6AC(v59, (uint64_t)qword_1001A47E0);
  uint64_t v46 = v60;
  uint64_t v45 = v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v60, v44, v43);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v47._object = (void *)0x8000000100160660;
  v47._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v47);
  swift_getErrorValue();
  uint64_t v48 = v64;
  uint64_t v49 = v65;
  v66[3] = v65;
  uint64_t v50 = sub_100031A88(v66);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v49 - 8) + 16))(v50, v48, v49);
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_1000709E0((uint64_t)v66);
  v51._uint64_t countAndFlagsBits = 0;
  v51._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v51);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v43);
  id result = [self valueWithUndefinedInContext:v63];
  if (result)
  {
    uint64_t v41 = (uint64_t)result;
    swift_errorRelease();
    return (id)v41;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000EDAC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  void v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return _swift_task_switch(sub_1000EDAEC, 0, 0);
}

uint64_t sub_1000EDAEC()
{
  uint64_t v1 = v0[3] + OBJC_IVAR____TtC19appstorecomponentsd26JSMetricsIdentifiersObject_metricsIdStore;
  id v3 = *(id *)v1;
  uint64_t v2 = *(void *)(v1 + 8);
  id v4 = objc_msgSend(*(id *)v1, "ams_activeiTunesAccount");
  v0[7] = v4;
  id v5 = v4;
  if (!v4) {
    id v5 = objc_msgSend(v3, "ams_activeiTunesAccount");
  }
  v0[8] = v5;
  id v6 = v4;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[9] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1000EDBF4;
  uint64_t v8 = v0[5];
  uint64_t v9 = v0[6];
  return sub_100118198((uint64_t)v5, v8, v9, v2);
}

uint64_t sub_1000EDBF4(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 80) = v1;
  swift_task_dealloc();
  if (v1)
  {
    id v5 = sub_1000EDDDC;
  }
  else
  {
    *(void *)(v4 + 88) = a1;
    id v5 = sub_1000EDD1C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000EDD1C()
{
  uint64_t v1 = *(void **)(v0 + 88);
  uint64_t v2 = *(void **)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(uint64_t **)(v0 + 16);

  id v5 = [v1 identifierForKey:v3];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  *uint64_t v4 = v6;
  v4[1] = v8;
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_1000EDDDC()
{
  uint64_t v1 = *(void **)(v0 + 56);

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void sub_1000EDE44(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  swift_bridgeObjectRetain();
  id v5 = a2;
  uint64_t v6 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v7 = objc_msgSend(self, "valueWithObject:inContext:", v6, v5, v8, v9);
  swift_unknownObjectRelease();

  if (v7) {
    *a3 = v7;
  }
  else {
    __break(1u);
  }
}

void sub_1000EDF0C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for JSONContext();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for JSONObject();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v32 - v14;
  JSValue.makeJSONObject()();
  if (!v3)
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
    JSONContext.init()();
    uint64_t v16 = (void *)sub_100117D60((uint64_t)v13, (uint64_t)v8);
    uint64_t v18 = v17;
    id v36 = v16;
    Swift::String v19 = *(void **)(a3 + OBJC_IVAR____TtC19appstorecomponentsd26JSMetricsIdentifiersObject_metricsIdStore);
    uint64_t v32 = *(void *)(a3 + OBJC_IVAR____TtC19appstorecomponentsd26JSMetricsIdentifiersObject_metricsIdStore + 8);
    uint64_t v33 = v20;
    id v21 = objc_msgSend(v19, "ams_activeiTunesAccount");
    id v22 = v21;
    if (!v21) {
      id v22 = objc_msgSend(v19, "ams_activeiTunesAccount");
    }
    id v23 = v21;
    id v24 = sub_100118828(v22, v18, v33, v32);

    id v25 = [v24 identifierForKey:v36];
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v28 = v27;

    uint64_t v34 = v26;
    uint64_t v35 = v28;
    id v29 = a1;
    uint64_t v30 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    id v31 = [self valueWithObject:v30 inContext:v29];
    swift_unknownObjectRelease();

    if (v31)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
      swift_bridgeObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
}

id sub_1000EE2CC(void *a1, uint64_t a2, void *a3)
{
  id v57 = a1;
  Swift::String v51 = a3;
  uint64_t v3 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v3 - 8);
  char v52 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for OSLogger();
  uint64_t v55 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v54 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for JSPromise();
  uint64_t v50 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10002EB60(&qword_1001A2450);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for JSONContext();
  __chkstk_darwin(v12 - 8);
  uint64_t v13 = type metadata accessor for JSONObject();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  Swift::String v19 = (char *)&v47 - v18;
  uint64_t v20 = v56;
  JSValue.makeJSONObject()();
  if (v20)
  {
    uint64_t v56 = 0;
  }
  else
  {
    uint64_t v56 = v11;
    uint64_t v48 = v6;
    uint64_t v49 = v8;
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v19, v13);
    JSONContext.init()();
    sub_1000EF060();
    uint64_t v21 = v14;
    uint64_t v22 = Array<A>.init(deserializing:using:)();
    uint64_t v23 = swift_allocObject();
    id v24 = v51;
    *(void *)(v23 + 16) = v51;
    *(void *)(v23 + 24) = v22;
    sub_10002EB60(&qword_1001A5040);
    id v25 = v24;
    uint64_t v26 = Promise.__allocating_init()();
    uint64_t v27 = type metadata accessor for TaskPriority();
    uint64_t v28 = (uint64_t)v56;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v56, 1, 1, v27);
    id v29 = (void *)swift_allocObject();
    v29[2] = 0;
    v29[3] = 0;
    void v29[4] = &unk_1001A4850;
    v29[5] = v23;
    v29[6] = v26;
    swift_retain();
    sub_1000F6C04(v28, (uint64_t)&unk_1001A4858, (uint64_t)v29);
    swift_release();
    type metadata accessor for RunLoopWorkerThread();
    swift_retain();
    uint64_t v30 = static RunLoopWorkerThread.current.getter();
    if (v30)
    {
      uint64_t v31 = v30;
      uint64_t v32 = swift_allocObject();
      *(void *)(v32 + 16) = 0;
      *(unsigned char *)(v32 + 24) = 1;
      *(void *)(v32 + 32) = v31;
      *(void *)(v32 + 40) = sub_1000EF288;
      *(void *)(v32 + 48) = v26;
      id v33 = v57;
      swift_retain();
      uint64_t v34 = v49;
      JSPromise.init(in:executor:)();
      uint64_t v35 = JSPromise.value.getter();
      swift_release_n();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v34, v48);
      (*(void (**)(char *, uint64_t))(v21 + 8))(v19, v13);
      return (id)v35;
    }
    sub_1000EF2C0();
    swift_allocError();
    *id v36 = 0;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v19, v13);
    swift_release_n();
    uint64_t v56 = 0;
  }
  if (qword_1001A0E28 != -1) {
    swift_once();
  }
  uint64_t v37 = v53;
  uint64_t v38 = sub_10002F6AC(v53, (uint64_t)qword_1001A47E0);
  uint64_t v40 = v54;
  uint64_t v39 = v55;
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v54, v38, v37);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v41._object = (void *)0x8000000100160630;
  v41._uint64_t countAndFlagsBits = 0xD000000000000029;
  LogMessage.StringInterpolation.appendLiteral(_:)(v41);
  swift_getErrorValue();
  uint64_t v42 = v58;
  uint64_t v43 = v59;
  v60[3] = v59;
  uint64_t v44 = sub_100031A88(v60);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v43 - 8) + 16))(v44, v42, v43);
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_1000709E0((uint64_t)v60);
  v45._uint64_t countAndFlagsBits = 0;
  v45._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v45);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v37);
  id result = [self valueWithUndefinedInContext:v57];
  if (result)
  {
    uint64_t v35 = (uint64_t)result;
    swift_errorRelease();
    return (id)v35;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000EEA54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_1000EEA78, 0, 0);
}

uint64_t sub_1000EEA78()
{
  uint64_t v1 = (uint64_t *)(v0[3] + OBJC_IVAR____TtC19appstorecomponentsd26JSMetricsIdentifiersObject_metricsIdStore);
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = (void *)swift_task_alloc();
  v0[5] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000EEB2C;
  uint64_t v5 = v0[4];
  return sub_100116730(v5, 0, v3, v2);
}

uint64_t sub_1000EEB2C(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 48) = a1;
    return _swift_task_switch(sub_1000D6794, 0, 0);
  }
}

uint64_t sub_1000EEC78(void *a1)
{
  *(void *)(swift_allocObject() + 16) = a1;
  v5[3] = type metadata accessor for SyncTaskScheduler();
  v5[4] = (uint64_t)&protocol witness table for SyncTaskScheduler;
  sub_100031A88(v5);
  id v2 = a1;
  SyncTaskScheduler.init()();
  sub_10002EE34(0, (unint64_t *)&qword_1001A4140);
  uint64_t v3 = Promise.map<A>(on:_:)();
  swift_release();
  sub_10002ED08((uint64_t)v5);
  return v3;
}

void sub_1000EED4C(void *a1@<X1>, void *a2@<X8>)
{
  swift_bridgeObjectRetain();
  id v4 = a1;
  sub_10002EB60(&qword_1001A2300);
  uint64_t v5 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v6 = [self valueWithObject:v5 inContext:v4];
  swift_unknownObjectRelease();

  if (v6) {
    *a2 = v6;
  }
  else {
    __break(1u);
  }
}

id sub_1000EEE14(void *a1, uint64_t a2, void *a3)
{
  swift_getObjectType();
  sub_10002EE34(0, &qword_1001A4098);
  id v5 = a3;
  id v6 = a1;
  uint64_t v7 = (void *)static JSContext.requiredCurrent.getter();
  uint64_t v8 = (void *)JSContext.propagateErrorsToExceptions(_:)();

  return v8;
}

uint64_t sub_1000EEF50()
{
  return type metadata accessor for JSMetricsIdentifiersObject();
}

uint64_t type metadata accessor for JSMetricsIdentifiersObject()
{
  uint64_t result = qword_1001A4830;
  if (!qword_1001A4830) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000EEFA4()
{
  uint64_t result = type metadata accessor for Bag();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

id sub_1000EF040(void *a1)
{
  return sub_1000EE2CC(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

unint64_t sub_1000EF060()
{
  unint64_t result = qword_1001A4840;
  if (!qword_1001A4840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001A4840);
  }
  return result;
}

uint64_t sub_1000EF0B4()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000EF0F4(uint64_t a1)
{
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v4;
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = sub_100053090;
  *(_OWORD *)(v4 + 24) = v5;
  *(void *)(v4 + 16) = a1;
  return _swift_task_switch(sub_1000EEA78, 0, 0);
}

uint64_t sub_1000EF1AC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  id v6 = (int *)v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10002F874;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t))((char *)&dword_1001A4998
                                                                                   + dword_1001A4998);
  return v10(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1000EF288(void *a1)
{
  return sub_1000EEC78(a1);
}

unint64_t sub_1000EF2C0()
{
  unint64_t result = qword_1001A4860;
  if (!qword_1001A4860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001A4860);
  }
  return result;
}

uint64_t sub_1000EF318(void *a1, void (*a2)(void, void, void), uint64_t a3)
{
  return sub_1000EF628(a1, a2, a3);
}

uint64_t sub_1000EF330()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000EF368(void *a1@<X8>)
{
  sub_1000EED4C(*(void **)(v1 + 16), a1);
}

void sub_1000EF384(void *a1)
{
  sub_1000EDF0C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

id sub_1000EF3A0(void *a1)
{
  return sub_1000ED308(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1000EF3C0()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000EF408(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v6;
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 8) = sub_10002F874;
  *(void *)(v6 + 40) = v4;
  *(void *)(v6 + 48) = v5;
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)(v6 + 16) = a1;
  return _swift_task_switch(sub_1000EDAEC, 0, 0);
}

uint64_t sub_1000EF4D0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100053090;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t))((char *)&dword_1001A49A0
                                                                                   + dword_1001A49A0);
  return v10(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1000EF5AC(void *a1)
{
  return sub_1000EEC78(a1);
}

uint64_t sub_1000EF5E8()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000EF628(void *a1, void (*a2)(void, void, void), uint64_t a3)
{
  return sub_1000F1890(a1, a2, a3, *(void *)(v3 + 16), *(unsigned char *)(v3 + 24), *(void *)(v3 + 32), *(uint64_t (**)(void *))(v3 + 40), *(void *)(v3 + 48));
}

void sub_1000EF650(uint64_t *a1@<X0>, void *a2@<X8>)
{
  sub_1000EDE44(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_1000EF670(void (*a1)(char *, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v61 = a3;
  uint64_t v62 = a1;
  id v63 = a5;
  uint64_t v7 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v7 - 8);
  uint64_t v58 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OSLogger();
  uint64_t v59 = *(void *)(v9 - 8);
  uint64_t v60 = v9;
  __chkstk_darwin(v9);
  id v57 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for State();
  uint64_t v54 = *(void *)(v11 - 8);
  uint64_t v55 = v11;
  __chkstk_darwin(v11);
  uint64_t v53 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for JSRoute();
  __chkstk_darwin(v13 - 8);
  uint64_t v14 = type metadata accessor for JSRequest();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v52 - v19;
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v52 - v22;
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v52 - v25;
  JSRoute.init(service:function:)();
  JSRequest.init(route:timeoutInterval:version:)();
  BOOL v66 = &type metadata for String;
  unint64_t v64 = (unint64_t)v62;
  uint64_t v65 = a2;
  swift_bridgeObjectRetain();
  JSRequest.addingOption(_:withName:)();
  uint64_t v56 = v15;
  uint64_t v28 = *(void (**)(char *, uint64_t))(v15 + 8);
  uint64_t v27 = (void *)(v15 + 8);
  v28(v17, v14);
  sub_1000709E0((uint64_t)&v64);
  BOOL v66 = &type metadata for String;
  unint64_t v64 = v61;
  uint64_t v65 = a4;
  swift_bridgeObjectRetain();
  JSRequest.addingOption(_:withName:)();
  v28(v20, v14);
  sub_1000709E0((uint64_t)&v64);
  id v29 = v63;
  id v30 = [v63 id];
  id v31 = [v30 stringValue];

  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v34 = v33;

  BOOL v66 = &type metadata for String;
  unint64_t v64 = v32;
  uint64_t v65 = v34;
  uint64_t v61 = (uint64_t)v26;
  JSRequest.addingOption(_:withName:)();
  uint64_t v62 = v28;
  v28(v23, v14);
  sub_1000709E0((uint64_t)&v64);
  if ([v29 offer])
  {
    self;
    if (swift_dynamicCastObjCClass())
    {
      uint64_t v35 = v56;
      uint64_t v36 = v61;
      (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v20, v61, v14);
      id v63 = v27;
      uint64_t v37 = v14;
      uint64_t v38 = v53;
      uint64_t v39 = v54;
      uint64_t v40 = v55;
      (*(void (**)(char *, void, uint64_t))(v54 + 104))(v53, enum case for State.unknown(_:), v55);
      unint64_t v41 = sub_100074EDC();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v38, v40);
      uint64_t v14 = v37;
      uint64_t v42 = v62;
      BOOL v66 = (void *)sub_10002EB60(&qword_1001A2300);
      unint64_t v64 = v41;
      JSRequest.addingOption(_:withName:)();
      swift_unknownObjectRelease();
      v42(v20, v37);
      v42((char *)v36, v37);
      sub_1000709E0((uint64_t)&v64);
      (*(void (**)(uint64_t, char *, uint64_t))(v35 + 32))(v36, v23, v37);
      goto LABEL_8;
    }
    swift_unknownObjectRelease();
  }
  if (qword_1001A0E78 != -1) {
    swift_once();
  }
  uint64_t v43 = v60;
  uint64_t v44 = sub_10002F6AC(v60, (uint64_t)qword_1001AE3B0);
  uint64_t v45 = v59;
  uint64_t v46 = v57;
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v57, v44, v43);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v47._object = (void *)0x8000000100160720;
  v47._uint64_t countAndFlagsBits = 0xD000000000000010;
  LogMessage.StringInterpolation.appendLiteral(_:)(v47);
  id v48 = [v63 id];
  BOOL v66 = (void *)sub_10007AC00();
  unint64_t v64 = (unint64_t)v48;
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_1000709E0((uint64_t)&v64);
  v49._uint64_t countAndFlagsBits = 0xD000000000000018;
  v49._object = (void *)0x8000000100160740;
  LogMessage.StringInterpolation.appendLiteral(_:)(v49);
  LogMessage.init(stringInterpolation:)();
  Logger.warning(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v43);
  uint64_t v36 = v61;
LABEL_8:
  sub_1000F96A8(v36);
  BOOL v66 = (void *)type metadata accessor for SyncTaskScheduler();
  uint64_t v67 = &protocol witness table for SyncTaskScheduler;
  sub_100031A88((uint64_t *)&v64);
  SyncTaskScheduler.init()();
  uint64_t v50 = Promise.map<A>(on:_:)();
  swift_release();
  sub_10002ED08((uint64_t)&v64);
  v62((char *)v36, v14);
  return v50;
}

uint64_t sub_1000EFE94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v37 = a7;
  uint64_t v35 = a5;
  uint64_t v36 = a6;
  uint64_t v33 = a4;
  uint64_t v34 = a3;
  uint64_t v32 = a1;
  uint64_t v8 = type metadata accessor for JSRoute();
  __chkstk_darwin(v8 - 8);
  uint64_t v9 = type metadata accessor for JSRequest();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v32 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v32 - v17;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v32 - v20;
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v32 - v23;
  JSRoute.init(service:function:)();
  JSRequest.init(route:timeoutInterval:version:)();
  uint64_t v40 = &type metadata for String;
  uint64_t v38 = v32;
  uint64_t v39 = a2;
  swift_bridgeObjectRetain();
  JSRequest.addingOption(_:withName:)();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v10 + 8);
  v25(v12, v9);
  sub_1000709E0((uint64_t)&v38);
  uint64_t v40 = &type metadata for String;
  uint64_t v38 = v34;
  uint64_t v39 = v33;
  swift_bridgeObjectRetain();
  JSRequest.addingOption(_:withName:)();
  v25(v15, v9);
  sub_1000709E0((uint64_t)&v38);
  uint64_t v40 = &type metadata for String;
  uint64_t v38 = v35;
  uint64_t v39 = v36;
  swift_bridgeObjectRetain();
  JSRequest.addingOption(_:withName:)();
  v25(v18, v9);
  sub_1000709E0((uint64_t)&v38);
  id v26 = [v37 stringValue];
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = v28;

  uint64_t v40 = &type metadata for String;
  uint64_t v38 = v27;
  uint64_t v39 = v29;
  JSRequest.addingOption(_:withName:)();
  v25(v21, v9);
  sub_1000709E0((uint64_t)&v38);
  sub_1000F96A8((uint64_t)v24);
  uint64_t v40 = (void *)type metadata accessor for SyncTaskScheduler();
  unint64_t v41 = &protocol witness table for SyncTaskScheduler;
  sub_100031A88(&v38);
  SyncTaskScheduler.init()();
  uint64_t v30 = Promise.map<A>(on:_:)();
  swift_release();
  sub_10002ED08((uint64_t)&v38);
  v25(v24, v9);
  return v30;
}

void sub_1000F0284(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1000F0290(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for JSRoute();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for JSRequest();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v24 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v24 - v15;
  JSRoute.init(service:function:)();
  JSRequest.init(route:timeoutInterval:version:)();
  if (a2)
  {
    *((void *)&v26 + 1) = &type metadata for String;
    *(void *)&long long v25 = a1;
    *((void *)&v25 + 1) = a2;
  }
  else
  {
    long long v25 = 0u;
    long long v26 = 0u;
  }
  swift_bridgeObjectRetain();
  JSRequest.addingOption(_:withName:)();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v11, v7);
  sub_1000709E0((uint64_t)&v25);
  id v18 = [a3 stringValue];
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  *((void *)&v26 + 1) = &type metadata for String;
  *(void *)&long long v25 = v19;
  *((void *)&v25 + 1) = v21;
  JSRequest.addingOption(_:withName:)();
  v17(v14, v7);
  sub_1000709E0((uint64_t)&v25);
  sub_1000F96A8((uint64_t)v16);
  *((void *)&v26 + 1) = type metadata accessor for SyncTaskScheduler();
  uint64_t v27 = &protocol witness table for SyncTaskScheduler;
  sub_100031A88((uint64_t *)&v25);
  SyncTaskScheduler.init()();
  uint64_t v22 = Promise.map<A>(on:_:)();
  swift_release();
  sub_10002ED08((uint64_t)&v25);
  v17(v16, v7);
  return v22;
}

void destroy for JSMetricsService(uint64_t a1)
{
  swift_release();
  sub_10002ED08(a1 + 8);
  uint64_t v2 = *(void **)(a1 + 48);
}

uint64_t initializeWithCopy for JSMetricsService(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = a2 + 8;
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  uint64_t v6 = v5;
  uint64_t v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_retain();
  v7(a1 + 8, v4, v6);
  uint64_t v8 = *(void **)(a2 + 48);
  *(void *)(a1 + 48) = v8;
  id v9 = v8;
  return a1;
}

void *assignWithCopy for JSMetricsService(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  sub_1000300B4(a1 + 1, a2 + 1);
  uint64_t v4 = (void *)a2[6];
  long long v5 = (void *)a1[6];
  a1[6] = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for JSMetricsService(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  sub_10002ED08(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 48);
  long long v5 = *(void **)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;

  return a1;
}

uint64_t getEnumTagSinglePayload for JSMetricsService(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JSMetricsService(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for JSMetricsService()
{
  return &type metadata for JSMetricsService;
}

void sub_1000F07E8(unsigned char *a1@<X8>)
{
}

uint64_t sub_1000F0800(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v40 = a4;
  uint64_t v41 = a5;
  id v36 = a3;
  uint64_t v5 = type metadata accessor for JSRoute();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for JSRequest();
  uint64_t v38 = *(void *)(v6 - 8);
  uint64_t v7 = v38;
  uint64_t v8 = *(void *)(v38 + 64);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v35 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v35 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  id v18 = (char *)&v35 - v17;
  __chkstk_darwin(v16);
  uint64_t v39 = (char *)&v35 - v19;
  JSRoute.init(service:function:)();
  JSRequest.init(route:timeoutInterval:version:)();
  unint64_t v20 = sub_100074EDC();
  uint64_t v43 = sub_10002EB60(&qword_1001A2300);
  v42[0] = v20;
  JSRequest.addingOption(_:withName:)();
  uint64_t v21 = *(void (**)(char *, uint64_t))(v7 + 8);
  v21((char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  sub_1000709E0((uint64_t)v42);
  id v22 = [v36 fields];
  uint64_t v23 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v24 = sub_10002EB60(&qword_1001A1A10);
  uint64_t v43 = v24;
  v42[0] = v23;
  JSRequest.addingOption(_:withName:)();
  v21(v12, v6);
  sub_1000709E0((uint64_t)v42);
  unint64_t v25 = sub_1001248B0();
  uint64_t v43 = v24;
  v42[0] = v25;
  JSRequest.addingOption(_:withName:)();
  v21(v15, v6);
  id v37 = v21;
  sub_1000709E0((uint64_t)v42);
  unint64_t v26 = sub_10009004C();
  uint64_t v43 = sub_10002EB60(&qword_1001A5F40);
  v42[0] = v26;
  uint64_t v27 = v39;
  JSRequest.addingOption(_:withName:)();
  v21(v18, v6);
  sub_1000709E0((uint64_t)v42);
  sub_10002EB60(&qword_1001A21A0);
  Promise.__allocating_init()();
  swift_retain();
  static MetricsPipeline.unstable_scheduleBarrier(_:)();
  swift_release();
  uint64_t v28 = v38;
  uint64_t v29 = v27;
  (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v18, v27, v6);
  unint64_t v30 = (*(unsigned __int8 *)(v28 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = v41;
  (*(void (**)(unint64_t, char *, uint64_t))(v28 + 32))(v31 + v30, v18, v6);
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = sub_1000F0E80;
  *(void *)(v32 + 24) = v31;
  uint64_t v43 = type metadata accessor for SyncTaskScheduler();
  uint64_t v44 = &protocol witness table for SyncTaskScheduler;
  sub_100031A88(v42);
  swift_retain();
  SyncTaskScheduler.init()();
  sub_10002EB60(&qword_1001A1ED0);
  sub_1000F0F44();
  uint64_t v33 = Promise.flatMap<A>(on:_:)();
  swift_release();
  swift_release();
  sub_10002ED08((uint64_t)v42);
  v37(v29, v6);
  return v33;
}

uint64_t sub_1000F0D18(uint64_t a1, uint64_t a2)
{
  sub_1000E5854(a2);
  v4[3] = type metadata accessor for SyncTaskScheduler();
  v4[4] = (uint64_t)&protocol witness table for SyncTaskScheduler;
  sub_100031A88(v4);
  SyncTaskScheduler.init()();
  sub_10006D960();
  uint64_t v2 = Promise.map<A>(on:_:)();
  swift_release();
  sub_10002ED08((uint64_t)v4);
  return v2;
}

uint64_t sub_1000F0DB4()
{
  uint64_t v1 = type metadata accessor for JSRequest();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000F0E80()
{
  uint64_t v1 = *(void *)(type metadata accessor for JSRequest() - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_1000F0D18(v2, v3);
}

uint64_t sub_1000F0EE4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F0F1C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t sub_1000F0F44()
{
  unint64_t result = qword_1001A2150;
  if (!qword_1001A2150)
  {
    sub_10002ED58(&qword_1001A1ED0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A2150);
  }
  return result;
}

ValueMetadata *type metadata accessor for JSOfferService()
{
  return &type metadata for JSOfferService;
}

uint64_t JSONObject.intEnum<A>()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v19 - v6;
  uint64_t v8 = JSONObject.int.getter();
  if (v9)
  {
    uint64_t v16 = type metadata accessor for JSONError();
    sub_10002ECB0();
    swift_allocError();
    *uint64_t v17 = 0x65756C6156776172;
    v17[1] = 0xE800000000000000;
    void v17[2] = a1;
    v17[3] = _swiftEmptyArrayStorage;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v16 - 8) + 104))(v17, enum case for JSONError.malformedProperty(_:), v16);
    return swift_willThrow();
  }
  uint64_t v10 = v8;
  uint64_t v20 = v8;
  dispatch thunk of RawRepresentable.init(rawValue:)();
  uint64_t v11 = *(void *)(a1 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1, a1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v12 = type metadata accessor for JSONError();
    sub_10002ECB0();
    swift_allocError();
    uint64_t v14 = v13;
    uint64_t v20 = v10;
    uint64_t *v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v14[1] = v15;
    v14[2] = a1;
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v12 - 8) + 104))(v14, enum case for JSONError.unknownCase(_:), v12);
    return swift_willThrow();
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a2, v7, a1);
}

uint64_t JSONObject.intEnum<A>(or:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v9 = (char *)v14 - v8;
  uint64_t v10 = JSONObject.int.getter();
  if (v11) {
    return a1(v10);
  }
  v14[1] = v10;
  dispatch thunk of RawRepresentable.init(rawValue:)();
  uint64_t v12 = *(void *)(a2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, a2) == 1)
  {
    uint64_t v10 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return a1(v10);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a3, v9, a2);
}

uint64_t JSONObject.intEnumOrNil<A>()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  JSONObject.int.getter();
  if ((v4 & 1) == 0) {
    return dispatch thunk of RawRepresentable.init(rawValue:)();
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56);

  return v6(a2, 1, 1, a1);
}

void *sub_1000F14C8(void *a1)
{
  uint64_t v3 = type metadata accessor for JSPromise();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = a1;
  JSPromise.init(in:executor:)();
  if (!v1)
  {
    a1 = (void *)JSPromise.value.getter();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return a1;
}

void sub_1000F15D4(uint64_t a1)
{
  sub_10002EB60(&qword_1001A3C10);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_10014CED0;
  id v4 = [self valueWithNullInContext:a1];
  if (v4)
  {
    id v5 = v4;
    *(void *)(v3 + 56) = sub_10002EE34(0, (unint64_t *)&qword_1001A4140);
    *(void *)(v3 + 32) = v5;
    uint64_t v6 = JSCallable.call(_:)();
    if (v1)
    {
      swift_bridgeObjectRelease();
      if (qword_1001A0E70 != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for OSLogger();
      sub_10002F6AC(v7, (uint64_t)qword_1001AE398);
      sub_10002EB60((uint64_t *)&unk_1001A19E0);
      type metadata accessor for LogMessage();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
      LogMessage.init(stringLiteral:)();
      Logger.error(_:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
    }
    else
    {
      uint64_t v8 = (void *)v6;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for JSPersonalizationStoreObject()
{
  return self;
}

uint64_t sub_1000F1890(void *a1, void (*a2)(void, void, void), uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t (*a7)(void *), uint64_t a8)
{
  uint64_t v52 = a7;
  uint64_t v49 = a6;
  double v50 = *(double *)&a4;
  uint64_t v54 = a3;
  uint64_t v51 = type metadata accessor for JSCallable();
  uint64_t v48 = *(void *)(v51 - 8);
  uint64_t v12 = *(void *)(v48 + 64);
  __chkstk_darwin(v51);
  uint64_t v13 = (char *)v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for RunLoopWorkerThread.PendingTask();
  Swift::String v47 = *(void (***)(char *, uint64_t))(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_allocObject();
  *(unsigned char *)(v17 + 16) = 0;
  if ((a5 & 1) == 0 && v50 > COERCE_DOUBLE(1))
  {
    uint64_t v46 = a2;
    uint64_t v18 = v48;
    (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))((char *)v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v54, v51);
    uint64_t v19 = *(unsigned __int8 *)(v18 + 80);
    v45[1] = a8;
    uint64_t v20 = (v19 + 32) & ~v19;
    v45[0] = (v12 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v21 = swift_allocObject();
    double v23 = v50;
    uint64_t v22 = v51;
    *(void *)(v21 + 16) = v17;
    *(double *)(v21 + 24) = v23;
    uint64_t v24 = v18;
    a2 = v46;
    (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v21 + v20, (char *)v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v22);
    *(void *)(v21 + v45[0]) = a1;
    swift_retain();
    id v25 = a1;
    dispatch thunk of RunLoopWorkerThread.scheduleAfter(delay:execute:)();
    swift_release();
    v47[1](v16, v14);
  }
  uint64_t v26 = v53;
  uint64_t v27 = v52(a1);
  if (v26)
  {
    swift_release();
    sub_10002EB60(&qword_1001A3C10);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_10014CED0;
    unint64_t v29 = sub_1000F1D3C();
    uint64_t v30 = static JSValue.makeError(from:in:)();
    *(void *)(v28 + 56) = v29;
    *(void *)(v28 + 32) = v30;
    uint64_t v31 = (void *)JSCallable.call(_:)();
    swift_bridgeObjectRelease();

    return swift_errorRelease();
  }
  else
  {
    uint64_t v33 = v48;
    uint64_t v46 = *(void (**)(void, void, void))(v48 + 16);
    uint64_t v52 = (uint64_t (*)(void *))v27;
    uint64_t v34 = a2;
    uint64_t v35 = v51;
    v46((char *)v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v34, v51);
    uint64_t v36 = *(unsigned __int8 *)(v33 + 80);
    Swift::String v47 = (void (**)(char *, uint64_t))a1;
    uint64_t v37 = (v36 + 24) & ~v36;
    uint64_t v53 = 0;
    uint64_t v38 = v37 + v12;
    *(double *)&uint64_t v39 = COERCE_DOUBLE(swift_allocObject());
    double v50 = *(double *)&v39;
    *(void *)(v39 + 16) = v17;
    uint64_t v40 = *(void (**)(uint64_t, char *, uint64_t))(v33 + 32);
    v40(v39 + v37, v13, v35);
    v46(v13, v54, v35);
    unint64_t v41 = (v38 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v42 = swift_allocObject();
    *(void *)(v42 + 16) = v17;
    v40(v42 + v37, v13, v35);
    uint64_t v43 = v47;
    *(void *)(v42 + v41) = v47;
    v55[3] = type metadata accessor for RunLoopWorkerThread();
    v55[4] = &protocol witness table for RunLoopWorkerThread;
    v55[0] = v49;
    swift_retain_n();
    uint64_t v44 = v43;
    swift_retain();
    Promise.then(perform:orCatchError:on:)();
    swift_release();
    swift_release();
    swift_release();
    sub_10002ED08((uint64_t)v55);
    return swift_release();
  }
}

uint64_t sub_1000F1D2C()
{
  return _swift_deallocObject(v0, 17, 7);
}

unint64_t sub_1000F1D3C()
{
  unint64_t result = qword_1001A4140;
  if (!qword_1001A4140)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001A4140);
  }
  return result;
}

void sub_1000F1D7C(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8 = type metadata accessor for OSLogger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (unsigned char *)(a1 + 16);
  swift_beginAccess();
  if ((*(unsigned char *)(a1 + 16) & 1) == 0)
  {
    uint64_t v33 = a3;
    uint64_t v34 = a2;
    if (qword_1001A0E60 != -1) {
      swift_once();
    }
    uint64_t v13 = sub_10002F6AC(v8, (uint64_t)qword_1001AE368);
    uint64_t v31 = *(void (**)(char *))(v9 + 16);
    uint64_t v32 = v13;
    v31(v11);
    uint64_t v14 = sub_10002EB60((uint64_t *)&unk_1001A19E0);
    uint64_t v15 = *(void *)(type metadata accessor for LogMessage() - 8);
    uint64_t v16 = *(void *)(v15 + 72);
    uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
    uint64_t v28 = v14;
    uint64_t v27 = ((v17 + 32) & ~v17) + 3 * v16;
    uint64_t v26 = v17 | 7;
    uint64_t v18 = swift_allocObject();
    long long v25 = xmmword_10014E610;
    *(_OWORD *)(v18 + 16) = xmmword_10014E610;
    v24[1] = 0x8000000100160840;
    LogMessage.init(stringLiteral:)();
    LogMessage.init(stringLiteral:)();
    uint64_t v30 = 2 * v16;
    v35[3] = &type metadata for Double;
    *(double *)uint64_t v35 = a4;
    static LogMessage.safe(_:)();
    sub_1000709E0((uint64_t)v35);
    Logger.error(_:)();
    swift_bridgeObjectRelease();
    unint64_t v29 = *(void (**)(char *, uint64_t))(v9 + 8);
    v29(v11, v8);
    swift_beginAccess();
    *uint64_t v12 = 1;
    sub_10002EB60(&qword_1001A3C10);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_10014CED0;
    unint64_t v20 = sub_1000F1D3C();
    sub_1000EF2C0();
    swift_allocError();
    unsigned char *v21 = 1;
    uint64_t v22 = static JSValue.makeError(from:in:)();
    swift_errorRelease();
    *(void *)(v19 + 56) = v20;
    *(void *)(v19 + 32) = v22;
    double v23 = (void *)JSCallable.call(_:)();
    swift_bridgeObjectRelease();
  }
}

void sub_1000F2238(void **a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OSLogger();
  __chkstk_darwin(v4);
  id v5 = *a1;
  swift_beginAccess();
  if ((*(unsigned char *)(a2 + 16) & 1) == 0)
  {
    swift_beginAccess();
    *(unsigned char *)(a2 + 16) = 1;
    sub_10002EB60(&qword_1001A3C10);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_10014CED0;
    *(void *)(v6 + 56) = sub_1000F1D3C();
    *(void *)(v6 + 32) = v5;
    id v7 = v5;
    uint64_t v8 = (void *)JSCallable.call(_:)();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000F2588()
{
  uint64_t v1 = type metadata accessor for JSCallable();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_1000F2654(void **a1)
{
  type metadata accessor for JSCallable();
  uint64_t v3 = *(void *)(v1 + 16);

  sub_1000F2238(a1, v3);
}

void sub_1000F26C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for OSLogger();
  __chkstk_darwin(v3);
  swift_beginAccess();
  if ((*(unsigned char *)(a2 + 16) & 1) == 0)
  {
    swift_beginAccess();
    *(unsigned char *)(a2 + 16) = 1;
    sub_10002EB60(&qword_1001A3C10);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_10014CED0;
    unint64_t v5 = sub_1000F1D3C();
    uint64_t v6 = static JSValue.makeError(from:in:)();
    *(void *)(v4 + 56) = v5;
    *(void *)(v4 + 32) = v6;
    id v7 = (void *)JSCallable.call(_:)();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000F2A28()
{
  uint64_t v1 = type metadata accessor for JSCallable();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1000F2B10(uint64_t a1)
{
  type metadata accessor for JSCallable();
  uint64_t v3 = *(void *)(v1 + 16);

  sub_1000F26C8(a1, v3);
}

uint64_t sub_1000F2BB0()
{
  uint64_t v1 = type metadata accessor for JSCallable();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1000F2C98()
{
  uint64_t v1 = *(void *)(type metadata accessor for JSCallable() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 16);
  double v4 = *(double *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_1000F1D7C(v3, v0 + v2, v5, v4);
}

unsigned char *storeEnumTagSinglePayload for JSPromiseBindingError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000F2DF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for JSPromiseBindingError()
{
  return &type metadata for JSPromiseBindingError;
}

unint64_t sub_1000F2E34()
{
  unint64_t result = qword_1001A48B0;
  if (!qword_1001A48B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A48B0);
  }
  return result;
}

void *sub_1000F2E88()
{
  uint64_t v0 = JSRequest.options.getter();
  if (!*(void *)(v0 + 16) || (unint64_t v1 = sub_10003A860(0xD000000000000012, 0x800000010015FD50), (v2 & 1) == 0))
  {
    long long v6 = 0u;
    long long v7 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_100042EB8(*(void *)(v0 + 56) + 32 * v1, (uint64_t)&v6);
  swift_bridgeObjectRelease();
  if (!*((void *)&v7 + 1))
  {
LABEL_7:
    sub_1000709E0((uint64_t)&v6);
    return &_swiftEmptySetSingleton;
  }
  sub_100042EA8(&v6, v8);
  sub_100042EB8((uint64_t)v8, (uint64_t)&v6);
  sub_10002EB60(&qword_1001A46A0);
  if (!swift_dynamicCast())
  {
    sub_10002ED08((uint64_t)v8);
    return &_swiftEmptySetSingleton;
  }
  uint64_t v3 = v5;
  sub_10002ED08((uint64_t)v8);
  return (void *)v3;
}

void *initializeBufferWithCopyOfBuffer for JSStackBootstrap(void *a1, void *a2)
{
  uint64_t v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  id v4 = v3;
  return a1;
}

void destroy for JSStackBootstrap(uint64_t a1)
{
  swift_release();
  char v2 = *(void **)(a1 + 8);
}

void *assignWithCopy for JSStackBootstrap(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  id v4 = (void *)a2[1];
  uint64_t v5 = (void *)a1[1];
  a1[1] = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for JSStackBootstrap(uint64_t a1, _OWORD *a2)
{
  swift_release();
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for XPCConnectionOwner.ActiveConnection(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCConnectionOwner.ActiveConnection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for JSStackBootstrap()
{
  return &type metadata for JSStackBootstrap;
}

uint64_t destroy for JSStackBootstrap.Result(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  swift_release();

  return sub_10002ED08(v1);
}

uint64_t initializeWithCopy for JSStackBootstrap.Result(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = a2 + 8;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  uint64_t v5 = v4;
  id v6 = **(void (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  swift_retain();
  v6(a1 + 8, v3, v5);
  return a1;
}

void *assignWithCopy for JSStackBootstrap.Result(void *a1, void *a2)
{
  uint64_t v3 = a2 + 1;
  *a1 = *a2;
  swift_retain();
  swift_release();
  sub_1000300B4(a1 + 1, v3);
  return a1;
}

uint64_t assignWithTake for JSStackBootstrap.Result(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  sub_10002ED08(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for JSStackBootstrap.Result(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JSStackBootstrap.Result(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for JSStackBootstrap.Result()
{
  return &type metadata for JSStackBootstrap.Result;
}

uint64_t sub_1000F333C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + *(int *)(sub_10002EB60(&qword_1001A4420) + 48);
  uint64_t v4 = type metadata accessor for DiskJetPackResourceBundle();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, v3, v4);
}

uint64_t sub_1000F33C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  long long v25 = (char *)a1;
  uint64_t v3 = sub_10002EB60(&qword_1001A4960);
  uint64_t v4 = v3 - 8;
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v28 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v27 = (char *)&v25 - v8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v25 - v9;
  uint64_t v11 = a1 + *(int *)(sub_10002EB60(&qword_1001A4968) + 48);
  uint64_t v12 = *(int *)(v4 + 56);
  uint64_t v13 = v11 + v12;
  uint64_t v14 = (long long *)&v10[v12];
  uint64_t v15 = type metadata accessor for JSPackageIndex();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void (**)(void))(v16 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v17)(v10, v11, v15);
  sub_100052538(v13, (uint64_t)v14);
  uint64_t v18 = type metadata accessor for DiskJetPackResourceBundle();
  uint64_t v19 = v26;
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v26, v25, v18);
  long long v25 = &v27[*(int *)(v4 + 56)];
  uint64_t v20 = (uint64_t)v25;
  v17();
  sub_100052538((uint64_t)v14, v20);
  uint64_t v21 = (long long *)&v28[*(int *)(v4 + 56)];
  uint64_t v22 = *(void (**)(void))(v16 + 32);
  v22();
  sub_100031C10(v14, (uint64_t)v21);
  uint64_t v23 = type metadata accessor for JSStackBootstrap.JSPackage();
  ((void (*)(uint64_t, char *, uint64_t))v22)(v19 + *(int *)(v23 + 20), v27, v15);
  sub_100031C10(v21, v19 + *(int *)(v23 + 24));
  (*(void (**)(char *, uint64_t))(v16 + 8))(v28, v15);
  return sub_10002ED08((uint64_t)v25);
}

void sub_1000F3624(void *a1)
{
  id v1 = [a1 virtualMachine];
  if (v1)
  {
    id v2 = v1;
    [v1 shrinkFootprintWhenIdle];
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000F3680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[31] = a2;
  v3[32] = a3;
  v3[30] = a1;
  type metadata accessor for LogMessage.StringInterpolation();
  v3[33] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OSLogger();
  v3[34] = v4;
  v3[35] = *(void *)(v4 - 8);
  v3[36] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for AppleServicesLocalizer.Configuration();
  v3[37] = v5;
  v3[38] = *(void *)(v5 - 8);
  v3[39] = swift_task_alloc();
  v3[40] = swift_task_alloc();
  v3[41] = type metadata accessor for Bag();
  v3[42] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for BagLanguageSource();
  v3[43] = v6;
  v3[44] = *(void *)(v6 - 8);
  v3[45] = swift_task_alloc();
  type metadata accessor for JetPackPath();
  v3[46] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for LocalizedStringsBundle();
  v3[47] = v7;
  v3[48] = *(void *)(v7 - 8);
  v3[49] = swift_task_alloc();
  return _swift_task_switch(sub_1000F38F0, 0, 0);
}

uint64_t sub_1000F38F0()
{
  uint64_t v1 = v0[31];
  uint64_t v2 = type metadata accessor for DiskJetPackResourceBundle();
  v0[5] = v2;
  v0[6] = (uint64_t)&protocol witness table for DiskJetPackResourceBundle;
  uint64_t v3 = sub_100031A88(v0 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(v3, v1, v2);
  JetPackPath.init(_:)();
  LocalizedStringsBundle.init(resourceBundle:indexPath:)();
  uint64_t v4 = v0[48];
  uint64_t v13 = v0[49];
  uint64_t v5 = v0[47];
  uint64_t v6 = v0[44];
  uint64_t v7 = v0[45];
  uint64_t v8 = v0[43];
  type metadata accessor for BaseObjectGraph();
  inject<A, B>(_:from:)();
  BagLanguageSource.init(bag:)();
  v0[15] = v5;
  v0[16] = (uint64_t)&protocol witness table for LocalizedStringsBundle;
  uint64_t v9 = sub_100031A88(v0 + 12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v4 + 16))(v9, v13, v5);
  v0[10] = v8;
  v0[11] = (uint64_t)&protocol witness table for BagLanguageSource;
  uint64_t v10 = sub_100031A88(v0 + 7);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 16))(v10, v7, v8);
  swift_retain();
  AppleServicesLocalizer.Configuration.init(dataSource:languageSource:objectGraph:)();
  v0[50] = (uint64_t)objc_msgSend(self, "asc_frameworkBundle");
  uint64_t v11 = (void *)swift_task_alloc();
  v0[51] = (uint64_t)v11;
  void *v11 = v0;
  v11[1] = sub_1000F3DD0;
  return BagLanguageSource.fetchLanguages()();
}

uint64_t sub_1000F3DD0(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 416) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = (void *)v4[50];
    (*(void (**)(void, void))(v4[38] + 8))(v4[39], v4[37]);

    uint64_t v6 = sub_1000F42B0;
  }
  else
  {
    v4[53] = a1;
    uint64_t v6 = sub_1000F3F14;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000F3F14()
{
  uint64_t v1 = v0[39];
  uint64_t v2 = v0[37];
  uint64_t v3 = v0[38];
  v0[20] = type metadata accessor for LocalizedStringTable();
  v0[21] = (uint64_t)&protocol witness table for LocalizedStringTable;
  sub_100031A88(v0 + 17);
  LocalizedStringTable.init(targetBundle:languageCodes:)();
  AppleServicesLocalizer.Configuration.withNativeStringsDataSource(_:)();
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[54] = (uint64_t)v4;
  v0[55] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v4(v1, v2);
  sub_10002ED08((uint64_t)(v0 + 17));
  v0[56] = type metadata accessor for AppleServicesLocalizer();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[57] = (uint64_t)v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1000F4050;
  uint64_t v6 = v0[40];
  return static AppleServicesLocalizer.load(using:)(v6);
}

uint64_t sub_1000F4050(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 464) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1000F45CC;
  }
  else
  {
    *(void *)(v4 + 472) = a1;
    uint64_t v5 = sub_1000F4178;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000F4178()
{
  uint64_t v1 = v0[59];
  uint64_t v2 = (void (*)(uint64_t, uint64_t))v0[54];
  uint64_t v4 = v0[48];
  uint64_t v3 = v0[49];
  uint64_t v5 = v0[47];
  uint64_t v7 = v0[44];
  uint64_t v6 = v0[45];
  uint64_t v8 = v0[43];
  uint64_t v9 = v0[40];
  uint64_t v10 = v0[37];
  uint64_t v11 = (void *)v0[30];
  v11[3] = v0[56];
  v11[4] = &protocol witness table for AppleServicesLocalizer;
  void *v11 = v1;
  v2(v9, v10);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_1000F42B0()
{
  uint64_t v2 = v0[48];
  uint64_t v1 = v0[49];
  uint64_t v3 = v0[47];
  (*(void (**)(void, void))(v0[44] + 8))(v0[45], v0[43]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (qword_1001A0E60 != -1) {
    swift_once();
  }
  uint64_t v5 = v0[35];
  uint64_t v4 = v0[36];
  uint64_t v6 = v0[34];
  uint64_t v7 = sub_10002F6AC(v6, (uint64_t)qword_1001AE368);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v8._object = (void *)0x8000000100160960;
  v8._uint64_t countAndFlagsBits = 0xD00000000000003CLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v8);
  swift_getErrorValue();
  uint64_t v9 = v0[26];
  uint64_t v10 = v0[27];
  v0[25] = v10;
  uint64_t v11 = sub_100031A88(v0 + 22);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v11, v9, v10);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)(v0 + 22), &qword_1001A1C50);
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v12);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_1000F45CC()
{
  uint64_t v2 = *(void *)(v0 + 384);
  uint64_t v1 = *(void *)(v0 + 392);
  uint64_t v3 = *(void *)(v0 + 376);
  uint64_t v5 = *(void *)(v0 + 352);
  uint64_t v4 = *(void *)(v0 + 360);
  uint64_t v6 = *(void *)(v0 + 344);
  (*(void (**)(void, void))(v0 + 432))(*(void *)(v0 + 320), *(void *)(v0 + 296));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (qword_1001A0E60 != -1) {
    swift_once();
  }
  uint64_t v8 = *(void *)(v0 + 280);
  uint64_t v7 = *(void *)(v0 + 288);
  uint64_t v9 = *(void *)(v0 + 272);
  uint64_t v10 = sub_10002F6AC(v9, (uint64_t)qword_1001AE368);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v10, v9);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v11._object = (void *)0x8000000100160960;
  v11._uint64_t countAndFlagsBits = 0xD00000000000003CLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v11);
  swift_getErrorValue();
  uint64_t v12 = *(void *)(v0 + 208);
  uint64_t v13 = *(void *)(v0 + 216);
  *(void *)(v0 + 200) = v13;
  uint64_t v14 = sub_100031A88((uint64_t *)(v0 + 176));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v14, v12, v13);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C(v0 + 176, &qword_1001A1C50);
  v15._uint64_t countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v15);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

id sub_1000F4900(uint64_t a1, void *a2)
{
  unint64_t v18 = ASCSignpostTagUnique();
  [self jsStackBootstrapDidBeginWithTag:v18];
  id result = [objc_allocWithZone((Class)JSVirtualMachine) init];
  if (result)
  {
    uint64_t v5 = result;
    sub_1000F7054(result);
    unint64_t v6 = sub_10004765C();
    unint64_t v20 = v6;
    uint64_t v21 = &protocol witness table for OS_dispatch_queue;
    v19[0] = a2;
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = a1;
    *(void *)(v7 + 24) = a2;
    id v8 = a2;
    swift_retain();
    sub_10002EB60(&qword_1001A48B8);
    sub_100061D9C(&qword_1001A48C0, &qword_1001A48B8);
    Promise.flatMap<A>(on:_:)();
    swift_release();
    sub_10002ED08((uint64_t)v19);
    Promise.join<A>(with:)();
    unint64_t v20 = v6;
    uint64_t v21 = &protocol witness table for OS_dispatch_queue;
    v19[0] = v8;
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = a1;
    *(void *)(v9 + 24) = v8;
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = sub_1000F7548;
    *(void *)(v10 + 24) = v9;
    id v11 = v8;
    swift_retain();
    sub_10002EB60(&qword_1001A48C8);
    Promise.map<A>(on:_:)();
    swift_release();
    swift_release();
    sub_10002ED08((uint64_t)v19);
    unint64_t v20 = v6;
    uint64_t v21 = &protocol witness table for OS_dispatch_queue;
    v19[0] = v11;
    uint64_t v12 = (void *)swift_allocObject();
    v12[2] = a1;
    v12[3] = v11;
    v12[4] = v5;
    id v13 = v11;
    swift_retain();
    id v14 = v5;
    sub_10002EB60(&qword_1001A48D0);
    sub_100061D9C(&qword_1001A48D8, &qword_1001A48D0);
    Promise.flatMap<A>(on:_:)();
    swift_release();
    swift_release();
    sub_10002ED08((uint64_t)v19);
    *(void *)(swift_allocObject() + 16) = v18;
    uint64_t v15 = static OS_dispatch_queue.main.getter();
    unint64_t v20 = v6;
    uint64_t v21 = &protocol witness table for OS_dispatch_queue;
    v19[0] = v15;
    Promise.always(on:perform:)();
    swift_release();
    sub_10002ED08((uint64_t)v19);
    Promise.join<A>(with:)();
    unint64_t v20 = v6;
    uint64_t v21 = &protocol witness table for OS_dispatch_queue;
    v19[0] = v13;
    id v16 = v13;
    uint64_t v17 = Promise.map<A>(on:_:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    sub_10002ED08((uint64_t)v19);
    return (id)v17;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000F4CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A2450);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DiskJetPackResourceBundle();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v11 + v10, (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  *(void *)(v11 + ((v9 + v10 + 7) & 0xFFFFFFFFFFFFFFF8)) = a2;
  sub_10002EB60(&qword_1001A48B8);
  swift_retain();
  uint64_t v12 = Promise.__allocating_init()();
  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v6, 1, 1, v13);
  id v14 = (void *)swift_allocObject();
  void v14[2] = 0;
  v14[3] = 0;
  uint64_t v14[4] = &unk_1001A48F8;
  v14[5] = v11;
  v14[6] = v12;
  swift_retain();
  sub_1000F6C04((uint64_t)v6, (uint64_t)&unk_1001A4908, (uint64_t)v14);
  swift_release();
  return v12;
}

uint64_t sub_1000F4F14@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  sub_100052538((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  *a2 = v3;
  return swift_retain();
}

uint64_t sub_1000F4F5C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  v6[2] = a6;
  uint64_t v8 = type metadata accessor for ActionOutcome();
  v6[3] = v8;
  v6[4] = *(void *)(v8 - 8);
  uint64_t v9 = swift_task_alloc();
  v6[5] = v9;
  uint64_t v12 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  unint64_t v10 = (void *)swift_task_alloc();
  v6[6] = v10;
  void *v10 = v6;
  v10[1] = sub_1000F50A0;
  return v12(v9);
}

uint64_t sub_1000F50A0()
{
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000F8ADC;
  }
  else {
    uint64_t v2 = sub_1000F8AE0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F51B4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 16) = a6;
  uint64_t v9 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v7;
  *uint64_t v7 = v6;
  v7[1] = sub_1000F5284;
  return v9();
}

uint64_t sub_1000F5284()
{
  *(void *)(*(void *)v1 + 32) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000F53F8;
  }
  else {
    uint64_t v2 = sub_1000F5398;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F5398()
{
  Promise.resolve(_:)();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F53F8()
{
  Promise.reject(_:)();
  swift_errorRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F5468(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 24) = a6;
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v6 + 32) = v7;
  *uint64_t v7 = v6;
  v7[1] = sub_1000F5548;
  return v9(v6 + 16);
}

uint64_t sub_1000F5548()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000F56C8;
  }
  else {
    uint64_t v2 = sub_1000F565C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F565C()
{
  Promise.resolve(_:)();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F56C8()
{
  Promise.reject(_:)();
  swift_errorRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F5738(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 24) = a6;
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v6 + 32) = v7;
  *uint64_t v7 = v6;
  v7[1] = sub_1000F5818;
  return v9(v6 + 16);
}

uint64_t sub_1000F5818()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000F8AF4;
  }
  else {
    uint64_t v2 = sub_1000F8AEC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F592C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  v6[2] = a6;
  sub_10002EB60(&qword_1001A4420);
  uint64_t v8 = swift_task_alloc();
  v6[3] = v8;
  uint64_t v11 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v9 = (void *)swift_task_alloc();
  v6[4] = v9;
  *uint64_t v9 = v6;
  v9[1] = sub_1000F5A44;
  return v11(v8);
}

uint64_t sub_1000F5A44()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000F5BD4;
  }
  else {
    uint64_t v2 = sub_1000F5B58;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F5B58()
{
  uint64_t v1 = *(void *)(v0 + 24);
  Promise.resolve(_:)();
  sub_100034B8C(v1, &qword_1001A4420);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000F5BD4()
{
  Promise.reject(_:)();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F5C4C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 32) = a6;
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v6 + 40) = v7;
  *uint64_t v7 = v6;
  v7[1] = sub_1000F5D2C;
  return v9(v6 + 16);
}

uint64_t sub_1000F5D2C()
{
  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000F5EAC;
  }
  else {
    uint64_t v2 = sub_1000F5E40;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F5E40()
{
  Promise.resolve(_:)();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F5EAC()
{
  Promise.reject(_:)();
  swift_errorRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F5F1C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 24) = a6;
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v6 + 32) = v7;
  *uint64_t v7 = v6;
  v7[1] = sub_1000F5FFC;
  return v9(v6 + 16);
}

uint64_t sub_1000F5FFC()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000F8AF4;
  }
  else {
    uint64_t v2 = sub_1000F6110;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F6110()
{
  Promise.resolve(_:)();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F617C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 56) = a6;
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v6 + 64) = v7;
  *uint64_t v7 = v6;
  v7[1] = sub_1000F625C;
  return v9(v6 + 16);
}

uint64_t sub_1000F625C()
{
  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000F8AF8;
  }
  else {
    uint64_t v2 = sub_1000F8AD8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F6370(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 24) = a6;
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v6 + 32) = v7;
  *uint64_t v7 = v6;
  v7[1] = sub_1000F6450;
  return v9(v6 + 16);
}

uint64_t sub_1000F6450()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000F8AF4;
  }
  else {
    uint64_t v2 = sub_1000F6564;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F6564()
{
  Promise.resolve(_:)();

  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F65D0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 56) = a6;
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v6 + 64) = v7;
  *uint64_t v7 = v6;
  v7[1] = sub_1000F66B0;
  return v9(v6 + 16);
}

uint64_t sub_1000F66B0()
{
  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000F6834;
  }
  else {
    uint64_t v2 = sub_1000F67C4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F67C4()
{
  Promise.resolve(_:)();
  sub_10002ED08(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F6834()
{
  Promise.reject(_:)();
  swift_errorRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F68A4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  v6[2] = a6;
  uint64_t v8 = type metadata accessor for UUID();
  v6[3] = v8;
  v6[4] = *(void *)(v8 - 8);
  uint64_t v9 = swift_task_alloc();
  v6[5] = v9;
  uint64_t v12 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v10 = (void *)swift_task_alloc();
  v6[6] = v10;
  void *v10 = v6;
  v10[1] = sub_1000F69E8;
  return v12(v9);
}

uint64_t sub_1000F69E8()
{
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000F6B8C;
  }
  else {
    uint64_t v2 = sub_1000F6AFC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000F6AFC()
{
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  Promise.resolve(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000F6B8C()
{
  Promise.reject(_:)();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F6C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_100034B8C(a1, &qword_1001A2450);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1000F6DB0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8);
  v10[0] = sub_10004765C();
  swift_retain();
  static DispatchQoS.userInitiated.getter();
  sub_10002EB60(&qword_1001A2908);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10014CED0;
  static OS_dispatch_queue.Attributes.concurrent.getter();
  v10[1] = v8;
  sub_1000D2580();
  sub_10002EB60(&qword_1001A2910);
  sub_100061D9C((unint64_t *)&qword_1001A3380, &qword_1001A2910);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v2);
  OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  return a1;
}

uint64_t sub_1000F7054(void *a1)
{
  uint64_t v18 = sub_10002EB60(&qword_1001A4920);
  uint64_t v2 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10002EB60((uint64_t *)&unk_1001A4430);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for JSJetPackFetcher(0);
  type metadata accessor for BaseObjectGraph();
  inject<A, B>(_:from:)();
  sub_10002EB60((uint64_t *)&unk_1001A34F0);
  AnyPipelineTask.run()();
  uint64_t v17 = type metadata accessor for SyncTaskScheduler();
  uint64_t v20 = v17;
  uint64_t v21 = &protocol witness table for SyncTaskScheduler;
  sub_100031A88(v19);
  SyncTaskScheduler.init()();
  type metadata accessor for DiskJetPackResourceBundle();
  v16[2] = Promise.map<A>(on:_:)();
  swift_release();
  sub_10002ED08((uint64_t)v19);
  sub_1000E1628((uint64_t)v8);
  v16[1] = AnyPipelineTask.run()();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_1000F8170;
  *(void *)(v10 + 24) = v9;
  id v11 = a1;
  sub_10002EB60(&qword_1001A4928);
  sub_100061D9C(&qword_1001A45E8, (uint64_t *)&unk_1001A34F0);
  uint64_t v12 = PipelineTask.mapTaskOutput<A>(_:)();
  swift_release();
  v19[0] = v12;
  sub_10002EB60(&qword_1001A4930);
  sub_100061D9C(&qword_1001A4938, &qword_1001A4930);
  PipelineTask.eraseToAnyPipelineTask()();
  swift_release();
  uint64_t v13 = v18;
  AnyPipelineTask.run()();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v13);
  sub_10002EB60(&qword_1001A4940);
  sub_100061D9C(&qword_1001A4948, &qword_1001A4940);
  Promise.join<A>(with:)();
  sub_10002EB60(&qword_1001A4950);
  sub_100061D9C(&qword_1001A4958, &qword_1001A4950);
  Promise.join<A>(with:)();
  swift_release();
  uint64_t v20 = v17;
  uint64_t v21 = &protocol witness table for SyncTaskScheduler;
  sub_100031A88(v19);
  SyncTaskScheduler.init()();
  type metadata accessor for JSStackBootstrap.JSPackage();
  uint64_t v14 = Promise.map<A>(on:_:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10002ED08((uint64_t)v19);
  return v14;
}

uint64_t sub_1000F74FC(uint64_t a1)
{
  return sub_1000F4CDC(a1, *(void *)(v1 + 16));
}

uint64_t sub_1000F7508()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F7548(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for JSStackBootstrap.JSPackage();
  uint64_t v5 = a1 + *(int *)(v4 + 20);
  uint64_t v6 = a1 + *(int *)(v4 + 24);

  return sub_1000F76B8(a2, v5, v6);
}

uint64_t sub_1000F75A4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16);
  uint64_t v6 = sub_10002EB60(&qword_1001A48E0);
  uint64_t result = v5(a1, a1 + *(int *)(v6 + 48));
  *a2 = result;
  return result;
}

uint64_t sub_1000F7608()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000F7650(uint64_t *a1)
{
  return sub_1000F7ADC(*a1, *(void **)(v1 + 32));
}

uint64_t sub_1000F7660()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_1000F7670()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = self;

  return [v2 jsStackBootstrapDidEndWithTag:v1];
}

uint64_t sub_1000F76B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = a3;
  uint64_t v4 = type metadata accessor for Bag();
  uint64_t v34 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Dependency();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = JSPackageIndex.properties.getter();
  uint64_t v12 = sub_1000DA648(v11);
  swift_bridgeObjectRelease();
  sub_10002EB60(&qword_1001A19A0);
  sub_100052538(a1, (uint64_t)v37);
  Dependency.init<A>(satisfying:with:)();
  dispatch thunk of BaseObjectGraph.adding(dependency:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v13 = swift_retain();
  id v32 = sub_1000D85B8(v13, v12);
  swift_retain();
  id v33 = sub_1000D9D00();
  swift_release();
  uint64_t v14 = (objc_class *)type metadata accessor for JSMediaTokensObject();
  uint64_t v15 = (char *)objc_allocWithZone(v14);
  uint64_t v16 = OBJC_IVAR____TtC19appstorecomponentsd19JSMediaTokensObject_cachedServices;
  id v17 = objc_allocWithZone((Class)NSCache);
  swift_retain();
  uint64_t v18 = v15;
  *(void *)&v15[v16] = [v17 init];
  type metadata accessor for BaseObjectGraph();
  inject<A, B>(_:from:)();
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(&v18[OBJC_IVAR____TtC19appstorecomponentsd19JSMediaTokensObject_bag], v6, v4);

  v36.receiver = v18;
  v36.super_class = v14;
  id v19 = objc_msgSendSuper2(&v36, "init");
  swift_release();
  sub_10002EB60(&qword_1001A48E8);
  uint64_t v20 = type metadata accessor for JSStack.Prerequisite();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void *)(v21 + 72);
  unint64_t v23 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_10014DF50;
  long long v25 = (void *)(v24 + v23);
  *long long v25 = 7041889;
  v25[1] = 0xE300000000000000;
  _OWORD v25[2] = v32;
  uint64_t v26 = *(void (**)(void))(v21 + 104);
  ((void (*)(unint64_t, void, uint64_t))v26)(v24 + v23, enum case for JSStack.Prerequisite.globalObject(_:), v20);
  uint64_t v27 = (void *)(v24 + v23 + v22);
  void *v27 = 0xD00000000000001ALL;
  v27[1] = 0x8000000100160940;
  v27[2] = v33;
  v26();
  uint64_t v28 = (void *)(v24 + v23 + 2 * v22);
  void *v28 = 0x6B6F54616964656DLL;
  v28[1] = 0xEB00000000736E65;
  v28[2] = v19;
  v26();
  uint64_t v29 = v24 + v23 + 3 * v22;
  sub_100052538(v35, v29);
  ((void (*)(uint64_t, void, uint64_t))v26)(v29, enum case for JSStack.Prerequisite.source(_:), v20);
  swift_release();
  return v24;
}

uint64_t sub_1000F7ADC(uint64_t a1, void *a2)
{
  uint64_t v3 = type metadata accessor for JSStack.StandardGlobalConfiguration();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v16 - v8;
  static JSStack.StandardGlobalConfiguration.default.getter();
  JSStack.StandardGlobalConfiguration.isProtocolHandlingEnabled.setter();
  type metadata accessor for JSStack();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
  swift_retain();
  id v10 = a2;
  swift_bridgeObjectRetain();
  uint64_t v11 = JSStack.__allocating_init(asPartOf:virtualMachine:configuration:customPrerequisites:)();
  JSStack.withUnsafeContext(_:)();
  if (os_variant_has_internal_content())
  {
    id v12 = [self daemonDefaults];
    unsigned int v13 = [v12 enableWebInspector];

    if (v13)
    {
      JSStack.makeRemoteInspectable()();
      sub_100020A78((uint64_t)"JSStack created");
    }
  }
  sub_10002EB60(&qword_1001A48D0);
  v16[0] = v11;
  uint64_t v14 = Promise.__allocating_init(value:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  return v14;
}

uint64_t type metadata accessor for JSStackBootstrap.JSPackage()
{
  uint64_t result = qword_1001A4A18;
  if (!qword_1001A4A18) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000F7D70()
{
  uint64_t v1 = type metadata accessor for DiskJetPackResourceBundle();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1000F7E14(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for DiskJetPackResourceBundle() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1 + v5;
  uint64_t v7 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10002F874;
  return sub_1000F3680(a1, v6, v7);
}

uint64_t sub_1000F7F24()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000F7F6C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10002F874;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t))((char *)&dword_1001A4900
                                                                                   + dword_1001A4900);
  return v10(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1000F8048()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F8080(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100053090;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1001A4910 + dword_1001A4910);
  return v6(a1, v4);
}

uint64_t sub_1000F8138()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000F8170()
{
  return sub_1000E1DBC();
}

uint64_t sub_1000F818C(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16);
  uint64_t v4 = sub_10002EB60(&qword_1001A4420);
  return v3(a1, a1 + *(int *)(v4 + 48));
}

uint64_t *sub_1000F81F0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for DiskJetPackResourceBundle();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for JSPackageIndex();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = *(int *)(a3 + 24);
    long long v13 = *(_OWORD *)((char *)a2 + v12 + 24);
    *(_OWORD *)((char *)a1 + v12 + 24) = v13;
    (**(void (***)(void))(v13 - 8))();
  }
  return a1;
}

uint64_t sub_1000F8354(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DiskJetPackResourceBundle();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for JSPackageIndex();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + *(int *)(a2 + 24);

  return sub_10002ED08(v7);
}

uint64_t sub_1000F8410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DiskJetPackResourceBundle();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for JSPackageIndex();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  long long v12 = *(_OWORD *)(a2 + v11 + 24);
  *(_OWORD *)(a1 + v11 + 24) = v12;
  (**(void (***)(void))(v12 - 8))();
  return a1;
}

uint64_t sub_1000F8524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DiskJetPackResourceBundle();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for JSPackageIndex();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  sub_1000300B4((uint64_t *)(a1 + *(int *)(a3 + 24)), (uint64_t *)(a2 + *(int *)(a3 + 24)));
  return a1;
}

uint64_t sub_1000F85F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DiskJetPackResourceBundle();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for JSPackageIndex();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  long long v14 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v14;
  *(void *)(v12 + 32) = *(void *)(v13 + 32);
  return a1;
}

uint64_t sub_1000F86D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DiskJetPackResourceBundle();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for JSPackageIndex();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  sub_10002ED08(a1 + v11);
  long long v14 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v14;
  *(void *)(v12 + 32) = *(void *)(v13 + 32);
  return a1;
}

uint64_t sub_1000F87B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F87C8);
}

uint64_t sub_1000F87C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DiskJetPackResourceBundle();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for JSPackageIndex();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 24) + 24);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_1000F88E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F88F4);
}

uint64_t sub_1000F88F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DiskJetPackResourceBundle();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for JSPackageIndex();
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 24) + 24) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t sub_1000F8A08()
{
  uint64_t result = type metadata accessor for DiskJetPackResourceBundle();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for JSPackageIndex();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000F8AFC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for DispatchTime();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v5);
  uint64_t v10 = (char *)v15 - v9;
  if (*(void *)(v0 + 64))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    uint64_t result = swift_release();
  }
  if (!*(void *)(v0 + 48))
  {
    static DispatchTime.now()();
    + infix(_:_:)();
    uint64_t v11 = *(void (**)(char *, uint64_t))(v4 + 8);
    v11(v7, v3);
    static DispatchTime.distantFuture.getter();
    char v12 = static DispatchTime.< infix(_:_:)();
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v11)(v7, v3);
    if (v12)
    {
      uint64_t v13 = swift_allocObject();
      swift_weakInit();
      aBlock[4] = sub_1000FB8E0;
      aBlock[5] = v13;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000C1A88;
      aBlock[3] = &unk_100188DC8;
      v15[1] = _Block_copy(aBlock);
      id v17 = &_swiftEmptyArrayStorage;
      sub_1000FBC1C((unint64_t *)&qword_1001A2888, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      uint64_t v16 = v11;
      swift_retain();
      sub_10002EB60((uint64_t *)&unk_1001A31A0);
      sub_100061D9C((unint64_t *)&qword_1001A2890, (uint64_t *)&unk_1001A31A0);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      type metadata accessor for DispatchWorkItem();
      swift_allocObject();
      uint64_t v14 = DispatchWorkItem.init(flags:block:)();
      swift_release();
      swift_release();
      OS_dispatch_queue.asyncAfter(deadline:execute:)();
      v16(v10, v3);
      *(void *)(v1 + 64) = v14;
      return swift_release();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1000F8E50()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1000F8EA8();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000F8EA8()
{
  uint64_t v1 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = (void *)v0[5];
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  swift_beginAccess();
  v0[7] = 0;
  swift_release();
  v0[8] = 0;
  swift_release();
  v0[9] = 0;
  swift_unknownObjectRelease();
  if (qword_1001A0E70 != -1) {
LABEL_5:
  }
    swift_once();
  uint64_t v8 = type metadata accessor for OSLogger();
  sub_10002F6AC(v8, (uint64_t)qword_1001AE398);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v9._uint64_t countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v9);
  LogMessage.StringInterpolation.appendInterpolation(identity:)();
  v10._object = (void *)0x800000010015E590;
  v10._uint64_t countAndFlagsBits = 0xD000000000000022;
  LogMessage.StringInterpolation.appendLiteral(_:)(v10);
  LogMessage.init(stringInterpolation:)();
  Logger.debug(_:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000F9174(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = *(void *)(a1 + 48);
  BOOL v4 = __CFADD__(v3, 1);
  uint64_t v5 = v3 + 1;
  if (v4)
  {
    __break(1u);
LABEL_7:
    swift_once();
    goto LABEL_5;
  }
  *(void *)(a1 + 48) = v5;
  if (*(void *)(a1 + 64))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  if (qword_1001A0E70 != -1) {
    goto LABEL_7;
  }
LABEL_5:
  uint64_t v6 = type metadata accessor for OSLogger();
  sub_10002F6AC(v6, (uint64_t)qword_1001AE398);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v7);
  LogMessage.StringInterpolation.appendInterpolation(identity:)();
  v8._object = (void *)0x800000010015E5C0;
  v8._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v8);
  LogMessage.init(stringInterpolation:)();
  Logger.debug(_:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000F9368(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = *(void *)(a1 + 48);
  if (!v3)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v4 = qword_1001A0E70;
  uint64_t v5 = v3 - 1;
  *(void *)(a1 + 48) = v5;
  if (v5)
  {
    if (v4 == -1)
    {
LABEL_4:
      uint64_t v6 = type metadata accessor for OSLogger();
      sub_10002F6AC(v6, (uint64_t)qword_1001AE398);
      sub_10002EB60((uint64_t *)&unk_1001A19E0);
      type metadata accessor for LogMessage();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v7._uint64_t countAndFlagsBits = 0;
      v7._object = (void *)0xE000000000000000;
      LogMessage.StringInterpolation.appendLiteral(_:)(v7);
      LogMessage.StringInterpolation.appendInterpolation(identity:)();
      v8._object = (void *)0x800000010015E530;
      v8._uint64_t countAndFlagsBits = 0xD000000000000021;
      LogMessage.StringInterpolation.appendLiteral(_:)(v8);
      LogMessage.init(stringInterpolation:)();
      Logger.debug(_:)();
      return swift_bridgeObjectRelease();
    }
LABEL_11:
    swift_once();
    goto LABEL_4;
  }
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for OSLogger();
  sub_10002F6AC(v10, (uint64_t)qword_1001AE398);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v11._uint64_t countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v11);
  LogMessage.StringInterpolation.appendInterpolation(identity:)();
  v12._uint64_t countAndFlagsBits = 0xD000000000000026;
  v12._object = (void *)0x800000010015E560;
  LogMessage.StringInterpolation.appendLiteral(_:)(v12);
  LogMessage.init(stringInterpolation:)();
  Logger.debug(_:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_beginAccess();
  if (*(void *)(a1 + 56)) {
    return sub_1000F8AFC();
  }
  return result;
}

uint64_t sub_1000F96A8(uint64_t a1)
{
  uint64_t v16 = a1;
  uint64_t v1 = type metadata accessor for JSRoute();
  uint64_t v17 = *(void *)(v1 - 8);
  uint64_t v18 = v1;
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for JSRequest();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = __chkstk_darwin(v4);
  Swift::String v8 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v16 - v9;
  JSRequest.removingOption(withName:)();
  sub_10002EB60(&qword_1001A3460);
  OS_dispatch_queue.sync<A>(execute:)();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v12 + v11, v8, v4);
  uint64_t v13 = type metadata accessor for SyncTaskScheduler();
  uint64_t v20 = v13;
  uint64_t v21 = &protocol witness table for SyncTaskScheduler;
  sub_100031A88(v19);
  SyncTaskScheduler.init()();
  sub_10002EB60(&qword_1001A4B40);
  sub_100061D9C(&qword_1001A4B48, &qword_1001A4B40);
  uint64_t v14 = Promise.flatMap<A>(on:_:)();
  swift_release();
  swift_release();
  sub_10002ED08((uint64_t)v19);
  JSRequest.route.getter();
  sub_1000FA200(v14, (uint64_t)v3);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v3, v18);
  uint64_t v20 = v13;
  uint64_t v21 = &protocol witness table for SyncTaskScheduler;
  sub_100031A88(v19);
  SyncTaskScheduler.init()();
  swift_allocObject();
  swift_weakInit();
  Promise.always(on:perform:)();
  swift_release();
  sub_10002ED08((uint64_t)v19);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  return v14;
}

void *sub_1000F9A34(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v43 = a1;
  uint64_t v45 = *v2;
  uint64_t v5 = type metadata accessor for MetricsLogger.Configuration();
  uint64_t v46 = *(void *)(v5 - 8);
  uint64_t v47 = v5;
  __chkstk_darwin(v5);
  uint64_t v49 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_10002EB60((uint64_t *)&unk_1001A3280);
  uint64_t v7 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for JSONTimeUnit();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Bag();
  uint64_t v41 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[2] = a2;
  type metadata accessor for BaseObjectGraph();
  id v17 = a2;
  uint64_t v18 = v3;
  id v48 = v17;
  uint64_t v19 = v43;
  uint64_t v42 = v14;
  inject<A, B>(_:from:)();
  NSString v20 = String._bridgeToObjectiveC()();
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for JSONTimeUnit.seconds(_:), v10);
  uint64_t v40 = v16;
  Bag.subscript.getter();

  uint64_t v21 = v19;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v22 = v44;
  uint64_t v50 = v45;
  Bag.Value.current(or:)();
  uint64_t v23 = v22;
  uint64_t v24 = v49;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v23);
  uint64_t v25 = v46;
  uint64_t v26 = v47;
  double v27 = *(double *)aBlock;
  sub_10002EB60(&qword_1001A4B38);
  swift_allocObject();
  swift_retain();
  uint64_t v28 = sub_1000FB97C((uint64_t)sub_1000FB90C, v21, v27);
  swift_release();
  v18[3] = v28;
  sub_1000FBC1C((unint64_t *)&unk_1001A3360, (void (*)(uint64_t))&type metadata accessor for MetricsLogger.Configuration);
  inject<A>(_:from:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v25 + 16))((uint64_t)v18 + OBJC_IVAR____TtC19appstorecomponentsd14JSStackManager_diagnostics, v24, v26);
  uint64_t v29 = qword_1001A0DF8;
  uint64_t v30 = v18;
  swift_retain();
  if (v29 != -1) {
    swift_once();
  }
  id v31 = v48;
  [v48 addObserver:v18 selector:"didReceiveMemoryWarning:" name:qword_1001AE2F8 object:0];
  swift_release();
  if (!os_variant_has_internal_content()) {
    goto LABEL_7;
  }
  id v32 = [self daemonDefaults];
  unsigned int v33 = [v32 enableWebInspector];

  if (!v33) {
    goto LABEL_7;
  }
  uint64_t v34 = v18[3];
  uint64_t v35 = v31;
  id v31 = (id)v21;
  objc_super v36 = *(NSObject **)(v34 + 40);
  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = sub_1000FB8E8;
  *(void *)(v37 + 24) = v34;
  aBlock[4] = sub_1000FC1A4;
  aBlock[5] = v37;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000D3DA8;
  aBlock[3] = &unk_100188E68;
  uint64_t v38 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v36, v38);
  _Block_release(v38);
  LOBYTE(v36) = swift_isEscapingClosureAtFileLocation();
  swift_release();

  swift_release();
  swift_release();
  if (v36)
  {
    __break(1u);
LABEL_7:
    swift_release();
  }
  (*(void (**)(char *, uint64_t))(v25 + 8))(v49, v26);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v42);
  return v30;
}

uint64_t sub_1000FA088@<X0>(void *a1@<X8>)
{
  uint64_t v2 = swift_retain();
  uint64_t v3 = sub_1000F6DB0(v2);
  uint64_t v5 = v4;
  swift_release();
  id v6 = sub_1000F4900(v3, v5);

  uint64_t result = swift_release();
  *a1 = v6;
  return result;
}

uint64_t sub_1000FA0EC()
{
  uint64_t v1 = *(void **)(v0 + 16);
  [v1 removeObserver:v0];

  swift_release();
  sub_1000FC148(v0 + OBJC_IVAR____TtC19appstorecomponentsd14JSStackManager_diagnostics);

  return swift_deallocClassInstance();
}

uint64_t sub_1000FA17C()
{
  return type metadata accessor for JSStackManager();
}

uint64_t type metadata accessor for JSStackManager()
{
  uint64_t result = qword_1001A4AA0;
  if (!qword_1001A4AA0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000FA1D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100052538(a1 + 8, a2);
}

uint64_t sub_1000FA200(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = a2;
  uint64_t v23 = a1;
  uint64_t v4 = type metadata accessor for JSDiagnostics();
  uint64_t v22 = *(void *)(v4 - 8);
  uint64_t v5 = *(void *)(v22 + 64);
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for JSRoute();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v2 + OBJC_IVAR____TtC19appstorecomponentsd14JSStackManager_diagnostics;
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v20 = v11;
  v19(v10, a2, v7);
  sub_1000E6C08(v11, (uint64_t)v6);
  unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v13 = (v9 + *(unsigned __int8 *)(v22 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  uint64_t v22 = v13 + v5;
  uint64_t v14 = swift_allocObject();
  uint64_t v15 = *(void (**)(unint64_t, char *, uint64_t))(v8 + 32);
  v15(v14 + v12, v10, v7);
  sub_1000FBDD4((uint64_t)v6, v14 + v13);
  v19(v10, v21, v7);
  uint64_t v16 = (uint64_t)v6;
  sub_1000E6C08(v20, (uint64_t)v6);
  uint64_t v17 = swift_allocObject();
  v15(v17 + v12, v10, v7);
  sub_1000FBDD4(v16, v17 + v13);
  void v24[3] = type metadata accessor for SyncTaskScheduler();
  v24[4] = (uint64_t)&protocol witness table for SyncTaskScheduler;
  sub_100031A88(v24);
  SyncTaskScheduler.init()();
  Promise.then(perform:orCatchError:on:)();
  swift_release();
  swift_release();
  return sub_10002ED08((uint64_t)v24);
}

uint64_t sub_1000FA4C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation();
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for OSLogger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = JSResponse.incidents.getter();
  if (*(void *)(v11 + 16))
  {
    v20[0] = a2;
    v20[1] = a3;
    if (qword_1001A0E70 != -1) {
      swift_once();
    }
    uint64_t v12 = sub_10002F6AC(v7, (uint64_t)qword_1001AE398);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v12, v7);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CD00;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v13._uint64_t countAndFlagsBits = 0xD000000000000017;
    v13._object = (void *)0x8000000100160B00;
    LogMessage.StringInterpolation.appendLiteral(_:)(v13);
    uint64_t v14 = type metadata accessor for JSRoute();
    uint64_t v22 = v14;
    uint64_t v15 = sub_100031A88(v21);
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v14 - 8) + 16))(v15, v20[0], v14);
    LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
    sub_1000709E0((uint64_t)v21);
    v16._uint64_t countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v16);
    LogMessage.init(stringInterpolation:)();
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v17._object = (void *)0x8000000100160B20;
    v17._uint64_t countAndFlagsBits = 0xD000000000000012;
    LogMessage.StringInterpolation.appendLiteral(_:)(v17);
    uint64_t v22 = sub_10002EB60(&qword_1001A4B58);
    v21[0] = v11;
    swift_bridgeObjectRetain();
    LogMessage.StringInterpolation.appendInterpolation(sensitive:)();
    sub_1000709E0((uint64_t)v21);
    v18._uint64_t countAndFlagsBits = 0;
    v18._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v18);
    LogMessage.init(stringInterpolation:)();
    Logger.warning(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    sub_1000DCFA0(v11);
    return swift_bridgeObjectRelease();
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000FA88C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = a3;
  uint64_t v28 = a2;
  uint64_t v26 = a1;
  uint64_t v3 = type metadata accessor for LogMessage.StringInterpolation();
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for OSLogger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0E70 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_10002F6AC(v5, (uint64_t)qword_1001AE398);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  uint64_t v25 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CD00;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v10._object = (void *)0x8000000100160AD0;
  v10._uint64_t countAndFlagsBits = 0xD000000000000020;
  LogMessage.StringInterpolation.appendLiteral(_:)(v10);
  uint64_t v11 = type metadata accessor for JSRoute();
  uint64_t v32 = v11;
  uint64_t v12 = sub_100031A88(v31);
  uint64_t v24 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  v24(v12, v28, v11);
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_1000709E0((uint64_t)v31);
  v13._uint64_t countAndFlagsBits = 44;
  v13._object = (void *)0xE100000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v13);
  LogMessage.init(stringInterpolation:)();
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v14._uint64_t countAndFlagsBits = 0x203A6E6F73616572;
  v14._object = (void *)0xE800000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v14);
  uint64_t v15 = v26;
  swift_getErrorValue();
  uint64_t v17 = v29;
  uint64_t v16 = v30;
  uint64_t v32 = v30;
  Swift::String v18 = sub_100031A88(v31);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v18, v17, v16);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_1000709E0((uint64_t)v31);
  v19._uint64_t countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v19);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v5);
  sub_10002EB60(&qword_1001A4CE0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10014CED0;
  *(void *)(inited + 32) = 0x6574756F72;
  *(void *)(inited + 40) = 0xE500000000000000;
  *(void *)(inited + 72) = v11;
  uint64_t v21 = sub_100031A88((uint64_t *)(inited + 48));
  v24(v21, v28, v11);
  unint64_t v22 = sub_100062F68(inited);
  sub_1000DBD00(v15, v22);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000FACBC()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10002EB60(&qword_1001A4B50);
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t result = swift_release();
    if (v1[0])
    {
      v1[3] = type metadata accessor for SyncTaskScheduler();
      v1[4] = (uint64_t)&protocol witness table for SyncTaskScheduler;
      sub_100031A88(v1);
      SyncTaskScheduler.init()();
      Promise.then(perform:orCatchError:on:)();
      swift_release();
      return sub_10002ED08((uint64_t)v1);
    }
  }
  return result;
}

uint64_t sub_1000FADC4()
{
  JSStack.requestGarbageCollection()();
  if (qword_1001A0E70 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for OSLogger();
  sub_10002F6AC(v0, (uint64_t)qword_1001AE398);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.init(stringLiteral:)();
  Logger.debug(_:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000FAF08(uint64_t a1)
{
  return sub_1000FB194(a1, 57, 0xD000000000000039, (void *)0x8000000100160A60);
}

uint64_t sub_1000FAF28()
{
  sub_10002EB60(&qword_1001A4B50);
  uint64_t result = OS_dispatch_queue.sync<A>(execute:)();
  if (v1[0])
  {
    v1[3] = sub_10004765C();
    v1[4] = &protocol witness table for OS_dispatch_queue;
    v1[0] = static OS_dispatch_queue.main.getter();
    Promise.then(perform:orCatchError:on:)();
    swift_release();
    return sub_10002ED08((uint64_t)v1);
  }
  return result;
}

uint64_t sub_1000FB004()
{
  JSStack.notify(withName:)();
  swift_release();
  JSStack.requestGarbageCollection()();
  if (qword_1001A0E60 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for OSLogger();
  sub_10002F6AC(v0, (uint64_t)qword_1001AE368);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.init(stringLiteral:)();
  Logger.info(_:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000FB174(uint64_t a1)
{
  return sub_1000FB194(a1, 49, 0xD000000000000031, (void *)0x8000000100160B40);
}

uint64_t sub_1000FB194(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for OSLogger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  Swift::String v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0E60 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_10002F6AC(v7, (uint64_t)qword_1001AE368);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v12._uint64_t countAndFlagsBits = a3;
  v12._object = a4;
  LogMessage.StringInterpolation.appendLiteral(_:)(v12);
  swift_getErrorValue();
  uint64_t v13 = v18;
  uint64_t v14 = v19;
  v20[3] = v19;
  uint64_t v15 = sub_100031A88(v20);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v15, v13, v14);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_1000709E0((uint64_t)v20);
  v16._uint64_t countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v16);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1000FB544()
{
  uint64_t result = type metadata accessor for MetricsLogger.Configuration();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000FB5F0()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(NSObject **)(v1 + 40);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_1000FB8E8;
  *(void *)(v3 + 24) = v1;
  v6[4] = sub_1000FC1A4;
  v6[5] = v3;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  v6[2] = sub_1000D3DA8;
  v6[3] = &unk_100188E18;
  uint64_t v4 = _Block_copy(v6);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v2, v4);
  _Block_release(v4);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v2) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000FB728()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(NSObject **)(v1 + 40);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_1000FB8A8;
  *(void *)(v3 + 24) = v1;
  v6[4] = sub_1000FB8C0;
  v6[5] = v3;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  v6[2] = sub_1000D3DA8;
  v6[3] = &unk_100188D78;
  uint64_t v4 = _Block_copy(v6);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v2, v4);
  _Block_release(v4);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v2) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000FB860()
{
  return sub_1000FB5F0();
}

uint64_t sub_1000FB884()
{
  return sub_1000FB728();
}

uint64_t sub_1000FB8A8()
{
  return sub_1000F9368(v0);
}

uint64_t sub_1000FB8B0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000FB8C0()
{
  return sub_1000D3D80(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1000FB8C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000FB8D8()
{
  return swift_release();
}

uint64_t sub_1000FB8E0()
{
  return sub_1000F8E50();
}

uint64_t sub_1000FB8E8()
{
  return sub_1000F9174(v0);
}

uint64_t sub_1000FB8F0()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000FB900(void *a1@<X8>)
{
  *a1 = 0x4024000000000000;
}

uint64_t sub_1000FB90C@<X0>(void *a1@<X8>)
{
  return sub_1000FA088(a1);
}

uint64_t sub_1000FB914@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  swift_beginAccess();
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4) {
    swift_retain();
  }
  uint64_t result = sub_1000F8AFC();
  *a2 = v4;
  return result;
}

uint64_t sub_1000FB97C(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v7);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v8 - 8);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v14 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 64) = 0;
  *(void *)(v3 + 72) = 0;
  if (a3 <= 0.0)
  {
    __break(1u);
  }
  else
  {
    *(double *)(v3 + 16) = a3;
    *(void *)(v3 + 24) = a1;
    *(void *)(v3 + 32) = a2;
    sub_10004765C();
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v13, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v9);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v14[1] = &_swiftEmptyArrayStorage;
    sub_1000FBC1C((unint64_t *)&qword_1001A3370, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
    sub_10002EB60(&qword_1001A2910);
    sub_100061D9C((unint64_t *)&qword_1001A3380, &qword_1001A2910);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    *(void *)(v3 + 40) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
    *(void *)(v3 + 48) = 0;
    return v3;
  }
  return result;
}

uint64_t sub_1000FBC0C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000FBC1C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000FBC64@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000AF434(v1, a1);
}

uint64_t sub_1000FBC80()
{
  uint64_t v1 = type metadata accessor for JSRequest();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000FBD10()
{
  return JSStack.performRequest(_:)();
}

uint64_t sub_1000FBD74()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000FBDAC()
{
  return sub_1000FACBC();
}

uint64_t sub_1000FBDB4@<X0>(void *a1@<X8>)
{
  return sub_1000FB914(v1, a1);
}

uint64_t sub_1000FBDD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for JSDiagnostics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000FBE38(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for JSRoute() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for JSDiagnostics() - 8);
  uint64_t v7 = v1 + ((v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return sub_1000FA4C0(a1, v1 + v4, v7);
}

uint64_t sub_1000FBF10()
{
  uint64_t v1 = type metadata accessor for JSRoute();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for JSDiagnostics() - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v4 + v5 + v7) & ~v7;
  uint64_t v9 = v8 + *(void *)(v6 + 64);
  uint64_t v10 = v3 | v7 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  uint64_t v11 = type metadata accessor for MetricsLogger.Configuration();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v0 + v8, v11);

  return _swift_deallocObject(v0, v9, v10);
}

uint64_t sub_1000FC074(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for JSRoute() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for JSDiagnostics() - 8);
  uint64_t v7 = v1 + ((v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return sub_1000FA88C(a1, v1 + v4, v7);
}

uint64_t sub_1000FC148(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for JSDiagnostics();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_1000FC1C4(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v24 = a4;
  uint64_t v7 = type metadata accessor for LintedMetricsEvent();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  JSValue.string.getter();
  if (!v11)
  {
    type metadata accessor for JSError();
    sub_1000D7158();
    swift_allocError();
    id v17 = v20;
    id v21 = a2;
    goto LABEL_8;
  }
  uint64_t v23 = a1;
  id v12 = [a3 toDictionary];
  if (!v12
    || (uint64_t v13 = v12,
        uint64_t v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(),
        v13,
        unint64_t v15 = sub_1000FC468(v14),
        swift_bridgeObjectRelease(),
        !v15))
  {
    swift_bridgeObjectRelease();
    type metadata accessor for JSError();
    sub_1000D7158();
    swift_allocError();
    id v17 = v18;
    id v19 = a3;
LABEL_8:
    JSError.init(badValue:expected:)();
    swift_willThrow();
    return v17;
  }
  LintedMetricsEvent.init(fields:issues:)();
  sub_10002EC6C((void *)(v24 + OBJC_IVAR____TtC19appstorecomponentsd20JSStoreMetricsObject_eventRecorder), *(void *)(v24 + OBJC_IVAR____TtC19appstorecomponentsd20JSStoreMetricsObject_eventRecorder + 24));
  dispatch thunk of MetricsEventRecorder.record(_:on:)();
  swift_bridgeObjectRelease();
  id result = [self valueWithUndefinedInContext:v23];
  if (result)
  {
    id v17 = result;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return v17;
  }
  __break(1u);
  return result;
}

unint64_t sub_1000FC468(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10002EB60(&qword_1001A1CC0);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v23 = a1 + 64;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(a1 + 64);
  int64_t v22 = (unint64_t)(63 - v4) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      uint64_t v10 = (v5 - 1) & v5;
      unint64_t v11 = __clz(__rbit64(v5)) | (v7 << 6);
      int64_t v12 = v7;
    }
    else
    {
      int64_t v13 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        goto LABEL_37;
      }
      if (v13 >= v22)
      {
LABEL_33:
        sub_100034EF8();
        return (unint64_t)v2;
      }
      unint64_t v14 = *(void *)(v23 + 8 * v13);
      int64_t v12 = v7 + 1;
      if (!v14)
      {
        int64_t v12 = v7 + 2;
        if (v7 + 2 >= v22) {
          goto LABEL_33;
        }
        unint64_t v14 = *(void *)(v23 + 8 * v12);
        if (!v14)
        {
          int64_t v12 = v7 + 3;
          if (v7 + 3 >= v22) {
            goto LABEL_33;
          }
          unint64_t v14 = *(void *)(v23 + 8 * v12);
          if (!v14)
          {
            int64_t v12 = v7 + 4;
            if (v7 + 4 >= v22) {
              goto LABEL_33;
            }
            unint64_t v14 = *(void *)(v23 + 8 * v12);
            if (!v14)
            {
              int64_t v15 = v7 + 5;
              if (v7 + 5 >= v22) {
                goto LABEL_33;
              }
              unint64_t v14 = *(void *)(v23 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  int64_t v12 = v15 + 1;
                  if (__OFADD__(v15, 1)) {
                    goto LABEL_38;
                  }
                  if (v12 >= v22) {
                    goto LABEL_33;
                  }
                  unint64_t v14 = *(void *)(v23 + 8 * v12);
                  ++v15;
                  if (v14) {
                    goto LABEL_26;
                  }
                }
              }
              int64_t v12 = v7 + 5;
            }
          }
        }
      }
LABEL_26:
      uint64_t v10 = (v14 - 1) & v14;
      unint64_t v11 = __clz(__rbit64(v14)) + (v12 << 6);
    }
    sub_100042F14(*(void *)(a1 + 48) + 40 * v11, (uint64_t)v33);
    sub_100042EB8(*(void *)(a1 + 56) + 32 * v11, (uint64_t)v34 + 8);
    v31[0] = v34[0];
    v31[1] = v34[1];
    uint64_t v32 = v35;
    v30[0] = v33[0];
    v30[1] = v33[1];
    sub_100042F14((uint64_t)v30, (uint64_t)v25);
    if (!swift_dynamicCast())
    {
      sub_100034B8C((uint64_t)v30, (uint64_t *)&unk_1001A5270);
      swift_bridgeObjectRelease();
      sub_100034EF8();
      swift_release();
      return 0;
    }
    sub_100042EB8((uint64_t)v31 + 8, (uint64_t)v25);
    sub_100034B8C((uint64_t)v30, (uint64_t *)&unk_1001A5270);
    sub_100042EA8(v25, v26);
    long long v27 = v24;
    sub_100042EA8(v26, v28);
    long long v16 = v27;
    sub_100042EA8(v28, v29);
    sub_100042EA8(v29, &v27);
    unint64_t result = sub_10003A860(v16, *((uint64_t *)&v16 + 1));
    unint64_t v17 = result;
    if (v18)
    {
      uint64_t v8 = (_OWORD *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *uint64_t v8 = v16;
      uint64_t v9 = (_OWORD *)(v2[7] + 32 * v17);
      sub_10002ED08((uint64_t)v9);
      unint64_t result = (unint64_t)sub_100042EA8(&v27, v9);
      goto LABEL_8;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_OWORD *)(v2[6] + 16 * result) = v16;
    unint64_t result = (unint64_t)sub_100042EA8(&v27, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v19 = v2[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_36;
    }
    v2[2] = v21;
LABEL_8:
    int64_t v7 = v12;
    unint64_t v5 = v10;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1000FC908(void *a1, void *a2)
{
  uint64_t v5 = type metadata accessor for JSPromise();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for RunLoopWorkerThread();
  uint64_t v10 = static RunLoopWorkerThread.current.getter();
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = a2;
    *(void *)(v9 + 24) = v11;
    id v12 = a1;
    id v13 = a2;
    swift_retain();
    JSPromise.init(in:executor:)();
    if (v2)
    {
      swift_release();
    }
    else
    {
      uint64_t v9 = JSPromise.value.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
  else
  {
    type metadata accessor for JSError();
    sub_1000D7158();
    swift_allocError();
    JSError.init(message:line:column:sourceURL:constructorName:)();
    swift_willThrow();
  }
  return v9;
}

uint64_t sub_1000FCAF0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = a1;
  uint64_t v22 = a5;
  uint64_t v19 = a3;
  uint64_t v7 = type metadata accessor for JSCallable();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002EC6C((void *)(a4 + OBJC_IVAR____TtC19appstorecomponentsd20JSStoreMetricsObject_eventRecorder), *(void *)(a4 + OBJC_IVAR____TtC19appstorecomponentsd20JSStoreMetricsObject_eventRecorder + 24));
  uint64_t v20 = dispatch thunk of MetricsEventRecorder.flush()();
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v11(v10, a2, v7);
  unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v18 = swift_allocObject();
  id v13 = *(void (**)(unint64_t, char *, uint64_t))(v8 + 32);
  v13(v18 + v12, v10, v7);
  v11(v10, v19, v7);
  uint64_t v14 = swift_allocObject();
  v13(v14 + v12, v10, v7);
  uint64_t v15 = v21;
  *(void *)(v14 + ((v12 + v9 + 7) & 0xFFFFFFFFFFFFFFF8)) = v21;
  void v23[3] = type metadata accessor for RunLoopWorkerThread();
  v23[4] = &protocol witness table for RunLoopWorkerThread;
  v23[0] = v22;
  id v16 = v15;
  swift_retain();
  Promise.then(perform:orCatchError:on:)();
  swift_release();
  swift_release();
  swift_release();
  return sub_10002ED08((uint64_t)v23);
}

void sub_1000FCD38(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for OSLogger();
  __chkstk_darwin(v3);
  uint64_t v4 = *a1;
  sub_10002EB60(&qword_1001A3C10);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_10014CED0;
  *(void *)(v5 + 56) = &type metadata for Int;
  *(void *)(v5 + 32) = v4;
  uint64_t v6 = (void *)JSCallable.call(_:)();
  swift_bridgeObjectRelease();
}

void sub_1000FD0AC(uint64_t a1, uint64_t a2, JSContext a3)
{
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for OSLogger();
  uint64_t v14 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for JSError();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002EB60(&qword_1001A3C10);
  uint64_t v10 = swift_allocObject();
  long long v13 = xmmword_10014CED0;
  *(_OWORD *)(v10 + 16) = xmmword_10014CED0;
  swift_getErrorValue();
  Error.localizedDescription.getter();
  JSError.init(message:line:column:sourceURL:constructorName:)();
  Class isa = JSError.makeValue(in:)(a3).super.isa;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *(void *)(v10 + 56) = sub_10002EE34(0, (unint64_t *)&qword_1001A4140);
  *(void *)(v10 + 32) = isa;
  unint64_t v12 = (void *)JSCallable.call(_:)();
  swift_bridgeObjectRelease();
}

id sub_1000FD5C0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JSStoreMetricsObject();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for JSStoreMetricsObject()
{
  return self;
}

uint64_t sub_1000FD63C(void *a1)
{
  return sub_1000FC908(a1, *(void **)(v1 + 16));
}

uint64_t sub_1000FD658()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000FD698(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FCAF0(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_1000FD6B4()
{
  uint64_t v1 = type metadata accessor for JSCallable();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_1000FD744(uint64_t *a1)
{
  type metadata accessor for JSCallable();

  sub_1000FCD38(a1);
}

uint64_t sub_1000FD7B4()
{
  uint64_t v1 = type metadata accessor for JSCallable();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1000FD858(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for JSCallable() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5.super.Class isa = *(Class *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_1000FD0AC(a1, v1 + v4, v5);
}

id sub_1000FD8F4(uint64_t a1)
{
  return sub_1000FC1C4(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1000FD92C()
{
  uint64_t v1 = sub_10002EB60(&qword_1001A19C0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002EC6C((void *)(v0 + OBJC_IVAR____TtC19appstorecomponentsd12JSUserObject_accounts), *(void *)(v0 + OBJC_IVAR____TtC19appstorecomponentsd12JSUserObject_accounts + 24));
  dispatch thunk of AccountProvider.activeAccount.getter();
  uint64_t v4 = type metadata accessor for Account();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_100034B8C((uint64_t)v3, &qword_1001A19C0);
    return 0;
  }
  else
  {
    swift_getKeyPath();
    Account.subscript.getter();
    swift_release();
    uint64_t v6 = v8;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v3, v4);
  }
  return v6;
}

id sub_1000FDAA4(void *a1)
{
  id v1 = a1;
  sub_1000FD92C();
  uint64_t v3 = v2;

  if (v3)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v4 = 0;
  }

  return v4;
}

void sub_1000FDB24(id *a1@<X0>, SEL *a2@<X3>, uint64_t *a3@<X8>)
{
  id v4 = [*a1 *a2];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  *a3 = v6;
  a3[1] = v8;
}

void sub_1000FDB88(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v6 = *a2;
  if (*(void *)(a1 + 8)) {
    NSString v7 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v7 = 0;
  }
  id v8 = v7;
  [v6 *a5];
}

uint64_t sub_1000FDC70()
{
  uint64_t v1 = sub_10002EB60(&qword_1001A19C0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002EC6C((void *)(v0 + OBJC_IVAR____TtC19appstorecomponentsd12JSUserObject_accounts), *(void *)(v0 + OBJC_IVAR____TtC19appstorecomponentsd12JSUserObject_accounts + 24));
  dispatch thunk of AccountProvider.activeAccount.getter();
  uint64_t v4 = type metadata accessor for Account();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_100034B8C((uint64_t)v3, &qword_1001A19C0);
    return 0;
  }
  else
  {
    swift_getKeyPath();
    Account.subscript.getter();
    swift_release();
    NSString v7 = (void *)v10[1];
    (*(void (**)(char *, uint64_t))(v5 + 8))(v3, v4);
    if (v7)
    {
      id v8 = [v7 stringValue];

      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

uint64_t sub_1000FDFCC()
{
  uint64_t v1 = sub_10002EB60(&qword_1001A19C0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = &v11[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = type metadata accessor for Account();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  NSString v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10002EC6C((void *)(v0 + OBJC_IVAR____TtC19appstorecomponentsd12JSUserObject_accounts), *(void *)(v0 + OBJC_IVAR____TtC19appstorecomponentsd12JSUserObject_accounts + 24));
  dispatch thunk of AccountProvider.activeAccount.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    id v8 = &qword_1001A19C0;
    uint64_t v9 = v3;
LABEL_7:
    sub_100034B8C((uint64_t)v9, v8);
    return 0;
  }
  (*(void (**)(unsigned char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
  Account.value(forFlag:)();
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  if (!v13)
  {
    id v8 = &qword_1001A1C50;
    uint64_t v9 = &v12;
    goto LABEL_7;
  }
  if (swift_dynamicCast()) {
    return v11[15];
  }
  return 0;
}

void *sub_1000FE1D0()
{
  uint64_t v1 = sub_10002EB60(&qword_1001A19C0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = &v21[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = sub_10002EB60(&qword_1001A44F0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v21[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  URL.init(string:)();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    uint64_t v11 = &qword_1001A44F0;
    uint64_t v12 = (uint64_t)v6;
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 32))(v10, v6, v7);
    sub_10002EE34(0, &qword_1001A4098);
    uint64_t v13 = (void *)static JSContext.requiredCurrent.getter();
    sub_10002EC6C((void *)(v0 + OBJC_IVAR____TtC19appstorecomponentsd12JSUserObject_accounts), *(void *)(v0 + OBJC_IVAR____TtC19appstorecomponentsd12JSUserObject_accounts + 24));
    dispatch thunk of AccountProvider.activeAccount.getter();
    uint64_t v14 = type metadata accessor for Account();
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v15 + 48))(v3, 1, v14) != 1)
    {
      unint64_t v17 = Account.cookies(for:)();
      (*(void (**)(unsigned char *, uint64_t))(v15 + 8))(v3, v14);
      uint64_t v18 = v13;
      v19.super.Class isa = v18;
      id v16 = sub_1000FE9E0(v17, v19);
      swift_bridgeObjectRelease();

      (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
      return v16;
    }
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);

    uint64_t v11 = &qword_1001A19C0;
    uint64_t v12 = (uint64_t)v3;
  }
  sub_100034B8C(v12, v11);
  return 0;
}

Class sub_1000FE590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_10002EB60(&qword_1001A19C0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10002EB60(&qword_1001A44F0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v16 = (char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.init(string:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    unint64_t v17 = &qword_1001A44F0;
    uint64_t v18 = (uint64_t)v12;
LABEL_5:
    sub_100034B8C(v18, v17);
    return 0;
  }
  v27[0] = a3;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
  sub_10002EE34(0, &qword_1001A4098);
  JSContext v19 = (void *)static JSContext.requiredCurrent.getter();
  sub_10002EC6C((void *)(v4 + OBJC_IVAR____TtC19appstorecomponentsd12JSUserObject_accounts), *(void *)(v4 + OBJC_IVAR____TtC19appstorecomponentsd12JSUserObject_accounts + 24));
  dispatch thunk of AccountProvider.activeAccount.getter();
  uint64_t v20 = type metadata accessor for Account();
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v9, 1, v20) == 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);

    unint64_t v17 = &qword_1001A19C0;
    uint64_t v18 = (uint64_t)v9;
    goto LABEL_5;
  }
  unint64_t v23 = Account.cookies(for:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v20);
  swift_bridgeObjectRetain();
  long long v24 = sub_1000FEB1C(v23, v27[0], a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v24)
  {
    id v25 = v24;
    Class isa = NSHTTPCookie.makeValue(in:)((JSContext)v19).super.isa;
  }
  else
  {
    Class isa = 0;
  }
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);

  return isa;
}

uint64_t type metadata accessor for JSUserObject()
{
  return self;
}

void *sub_1000FE9E0(unint64_t a1, JSContext a2)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    unint64_t result = _swiftEmptyArrayStorage;
    if (!v4) {
      break;
    }
    unint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    if (v4 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v6 = 0;
    while (v4 != v6)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v7 = *(id *)(a1 + 8 * v6 + 32);
      }
      uint64_t v8 = v7;
      ++v6;
      NSHTTPCookie.makeValue(in:)(a2);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v4 == v6) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

void *sub_1000FEB1C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v7 = a1;
  if (a1 >> 62)
  {
LABEL_20:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8)
    {
LABEL_3:
      uint64_t v22 = v4;
      unint64_t v23 = v7;
      unint64_t v24 = v7 & 0xC000000000000001;
      uint64_t v4 = 4;
      do
      {
        uint64_t v9 = v4 - 4;
        if (v24)
        {
          id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v11 = v4 - 3;
          if (__OFADD__(v9, 1)) {
            goto LABEL_19;
          }
        }
        else
        {
          id v10 = *(id *)(v7 + 8 * v4);
          uint64_t v11 = v4 - 3;
          if (__OFADD__(v9, 1))
          {
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
        }
        uint64_t v12 = v8;
        uint64_t v13 = v10;
        uint64_t v14 = a3;
        id v15 = objc_msgSend(v10, "name", v22);
        uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v18 = v17;

        a3 = v14;
        BOOL v19 = v16 == a2 && v18 == v14;
        if (v19)
        {
          swift_bridgeObjectRelease();
LABEL_18:
          swift_bridgeObjectRelease();
          return v13;
        }
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v20) {
          goto LABEL_18;
        }

        ++v4;
        uint64_t v8 = v12;
        BOOL v19 = v11 == v12;
        unint64_t v7 = v23;
      }
      while (!v19);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

const char *sub_1000FECC4()
{
  return "ams_isManagedAppleID";
}

const char *sub_1000FECE0()
{
  return "username";
}

void sub_1000FECEC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1000FED0C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_1000FED2C()
{
  return "ams_lastName";
}

void sub_1000FED38(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1000FED58(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_1000FED78()
{
  return "ams_firstName";
}

void sub_1000FED84(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1000FEDA4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1000FEDC4(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for OSLogger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = __chkstk_darwin(v5);
  uint64_t v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  int v10 = *(unsigned __int8 *)(v2 + 16);
  *(unsigned char *)(v2 + 16) = a1;
  if (v10 != (a1 & 1))
  {
    v15[0] = a1 & 1;
    AsyncEvent.post(_:)();
    if (qword_1001A0E80 != -1) {
      swift_once();
    }
    uint64_t v11 = sub_10002F6AC(v5, (uint64_t)qword_1001AE3C8);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v9, v11, v5);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v12._object = (void *)0x8000000100160F70;
    v12._uint64_t countAndFlagsBits = 0xD000000000000023;
    LogMessage.StringInterpolation.appendLiteral(_:)(v12);
    char v13 = *(unsigned char *)(v2 + 16);
    uint64_t v16 = &type metadata for Bool;
    v15[0] = v13;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_1000709E0((uint64_t)v15);
    v14._uint64_t countAndFlagsBits = 0;
    v14._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v14);
    LogMessage.init(stringInterpolation:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
  }
  return result;
}

void sub_1000FF074(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v2) {
    goto LABEL_11;
  }
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v3 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v3 = *(id *)(a1 + 32);
  }
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v6 = *(os_unfair_lock_s **)(Strong + 48);
    __chkstk_darwin(Strong);
    swift_retain();
    os_unfair_lock_lock(v6 + 4);
    sub_1000FF268();
    os_unfair_lock_unlock(v6 + 4);
    swift_release();

    swift_release();
  }
  else
  {
  }
}

uint64_t sub_1000FF1FC()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LegacyAppStoreInstallStateMonitor()
{
  return self;
}

uint64_t sub_1000FF268()
{
  return sub_1000FEDC4((char)[*(id *)(v0 + 24) isInstalled]);
}

uint64_t initializeBufferWithCopyOfBuffer for LegacyArcadeState(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_100067164(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

void destroy for LegacyArcadeState(uint64_t a1)
{
}

uint64_t assignWithCopy for LegacyArcadeState(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_100067164(*(id *)a2, v4);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v3;
  char v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  sub_100067184(v5, v6);
  return a1;
}

uint64_t assignWithTake for LegacyArcadeState(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  sub_100067184(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for LegacyArcadeState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LegacyArcadeState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1000FF424(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for LegacyArcadeState()
{
  return &type metadata for LegacyArcadeState;
}

unint64_t sub_1000FF43C(char a1, char a2)
{
  unint64_t result = 0x6973616863727550;
  switch(a2)
  {
    case 1:
      return result;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      _StringGuts.grow(_:)(32);
      swift_bridgeObjectRelease();
      unint64_t v8 = 0xD00000000000001ELL;
      if (a1) {
        uint64_t v5 = 1702195828;
      }
      else {
        uint64_t v5 = 0x65736C6166;
      }
      if (a1) {
        unint64_t v6 = 0xE400000000000000;
      }
      else {
        unint64_t v6 = 0xE500000000000000;
      }
      unint64_t v7 = v6;
      String.append(_:)(*(Swift::String *)&v5);
      swift_bridgeObjectRelease();
      goto LABEL_11;
    default:
      unint64_t v8 = 0;
      _StringGuts.grow(_:)(33);
      v4._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
      v4._object = (void *)0x8000000100160FE0;
      String.append(_:)(v4);
      _print_unlocked<A, B>(_:_:)();
LABEL_11:
      unint64_t result = v8;
      break;
  }
  return result;
}

uint64_t sub_1000FF5C0(uint64_t a1, char a2, uint64_t a3, char a4)
{
  switch(a2)
  {
    case 1:
      if (a4 != 1) {
        goto LABEL_16;
      }
      unint64_t v7 = *(void **)(a1 + 16);
      unint64_t v8 = *(void **)(a3 + 16);
      uint64_t v9 = *(unsigned __int8 *)(a1 + 24);
      uint64_t v10 = *(unsigned __int8 *)(a3 + 24);
      sub_100067164(v7, v9);
      sub_100067164(v8, v10);
      char v11 = sub_1000FF5C0(v7, v9, v8, v10);
      sub_100067184(v8, v10);
      sub_100067184(v7, v9);
      return v11 & 1;
    case 2:
      if (a4 != 2) {
        goto LABEL_16;
      }
      if (a1)
      {
        if (a3)
        {
          sub_100095A14();
          sub_100067164((id)a3, 2);
          sub_100067164((id)a1, 2);
          char v13 = static NSObject.== infix(_:_:)();
          sub_100067184((void *)a3, 2);
          sub_100067184((void *)a1, 2);
          if (v13) {
            goto LABEL_18;
          }
        }
LABEL_16:
        char v6 = 0;
        return v6 & 1;
      }
      if (a3)
      {
        sub_100067184(0, 2);
        goto LABEL_16;
      }
LABEL_18:
      char v6 = 1;
      return v6 & 1;
    case 3:
      if (a4 == 3) {
        char v6 = ((a1 & 1) == 0) ^ a3;
      }
      else {
        char v6 = 0;
      }
      return v6 & 1;
    default:
      char v6 = a3 == a1;
      if (a4) {
        char v6 = 0;
      }
      return v6 & 1;
  }
}

uint64_t sub_1000FF750(uint64_t a1, uint64_t a2)
{
  return sub_1000FF5C0(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

uint64_t sub_1000FF76C()
{
  return 1000;
}

void *sub_1000FF774(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    unint64_t result = _swiftEmptyArrayStorage;
    if (!v2) {
      break;
    }
    unint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v5 = *(id *)(a1 + 8 * v4 + 32);
      }
      char v6 = v5;
      ++v4;
      id v7 = [v5 id];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v2 == v4) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000FF8B8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000FF944;
  return sub_1000C8A88();
}

uint64_t sub_1000FF944(uint64_t a1)
{
  *(void *)(*(void *)v1 + 24) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000FFA44, 0, 0);
}

uint64_t sub_1000FFA44()
{
  uint64_t v1 = *(void **)(v0 + 24);
  uint64_t v2 = v1[2];
  if (!v2)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    id v7 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v7(v2);
  }
  uint64_t result = v1[4];
  if (result != 0xD000000000000012 || v1[5] != 0x800000010015A8B0)
  {
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) == 0)
    {
LABEL_14:
      uint64_t v2 = 1;
      goto LABEL_15;
    }
  }
  if (v2 == 1)
  {
LABEL_6:
    uint64_t v2 = 0;
    goto LABEL_15;
  }
  uint64_t v4 = v1 + 7;
  uint64_t v5 = 1;
  while (1)
  {
    uint64_t v6 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    uint64_t result = *(v4 - 1);
    if (result != 0xD000000000000012 || *v4 != 0x800000010015A8B0)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0) {
        goto LABEL_14;
      }
    }
    ++v5;
    v4 += 2;
    if (v6 == v2) {
      goto LABEL_6;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000FFB88(void *a1, uint64_t a2, uint64_t a3)
{
  sub_10002EB60(&qword_1001A4D70);
  unint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10014DF90;
  *(void *)(inited + 32) = [a1 id];
  v28[0] = inited;
  specialized Array._endMutation()();
  if (inited >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v8) {
      goto LABEL_3;
    }
  }
  else if (*(void *)((v28[0] & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    sub_10011A45C(inited);
    id v7 = v6;
    goto LABEL_6;
  }
  id v7 = &_swiftEmptySetSingleton;
LABEL_6:
  swift_bridgeObjectRelease();
  id v9 = [a1 kind];
  id v10 = [a1 context];
  id v11 = [a1 mediaQueryParams];
  if (v11)
  {
    Swift::String v12 = v11;
    uint64_t v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v13 = 0;
  }
  id v14 = [a1 clientID];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v18 = 0;
  }
  int v19 = [a1 enableAppDistribution];
  id v20 = [a1 platformOverride];
  sub_1000FFF94((uint64_t)v7, v9, v10, v13, v16, v18, v19, v20);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v29 = type metadata accessor for SyncTaskScheduler();
  uint64_t v30 = &protocol witness table for SyncTaskScheduler;
  sub_100031A88(v28);
  SyncTaskScheduler.init()();
  sub_10002EB60(&qword_1001A4D58);
  sub_100061D9C(&qword_1001A4D68, &qword_1001A4D58);
  Promise.flatMap<A>(on:_:)();
  swift_release();
  sub_10002ED08((uint64_t)v28);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a2;
  *(void *)(v21 + 24) = a3;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = sub_10010C740;
  *(void *)(v22 + 24) = v21;
  *(void *)(v22 + 32) = "getLockupWith(_:withReplyHandler:)";
  *(void *)(v22 + 40) = 34;
  *(unsigned char *)(v22 + 48) = 2;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = sub_10010C740;
  *(void *)(v23 + 24) = v21;
  *(void *)(v23 + 32) = "getLockupWith(_:withReplyHandler:)";
  *(void *)(v23 + 40) = 34;
  *(unsigned char *)(v23 + 48) = 2;
  uint64_t v24 = sub_10002EE34(0, (unint64_t *)&qword_1001A2170);
  swift_retain_n();
  swift_retain();
  uint64_t v25 = static OS_dispatch_queue.main.getter();
  uint64_t v29 = v24;
  uint64_t v30 = &protocol witness table for OS_dispatch_queue;
  v28[0] = v25;
  Promise.then(perform:orCatchError:on:)();
  swift_release();
  swift_release();
  sub_10002ED08((uint64_t)v28);
  swift_release();
  return swift_release();
}

void sub_1000FFF94(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, void *a8)
{
  uint64_t v87 = a8;
  int v85 = a7;
  uint64_t v83 = a5;
  uint64_t v84 = a6;
  id v82 = a3;
  uint64_t v89 = a1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = type metadata accessor for CocoaError.Code();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for CocoaError();
  Swift::String v12 = *(void (***)(char *, uint64_t))(v11 - 8);
  __chkstk_darwin(v11);
  id v14 = (char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10002EB60(&qword_1001A2450);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v88 = a2;
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;
  if (v18 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v20 == v21)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    unint64_t v93 = v12;
    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      sub_10002EB60(&qword_1001A4D10);
      static CocoaError.Code.featureUnsupported.getter();
      sub_10002EB60(&qword_1001A4CE0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10014CED0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v25;
      *(void *)atoken.val = 0;
      *(void *)&atoken.val[2] = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease();
      strcpy((char *)&atoken, "Lockup kind ");
      BYTE1(atoken.val[3]) = 0;
      HIWORD(atoken.val[3]) = -5120;
      v26._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._object = (void *)0x80000001001610E0;
      v27._uint64_t countAndFlagsBits = 0xD000000000000018;
      String.append(_:)(v27);
      uint64_t v28 = *(void *)atoken.val;
      uint64_t v29 = *(void *)&atoken.val[2];
      *(void *)(inited + 72) = &type metadata for String;
      *(void *)(inited + 48) = v28;
      *(void *)(inited + 56) = v29;
      sub_100062F68(inited);
      sub_10010BECC((unint64_t *)&unk_1001A4CE8, (void (*)(uint64_t))&type metadata accessor for CocoaError);
      _BridgedStoredNSError.init(_:userInfo:)();
      CocoaError._nsError.getter();
      v93[1](v14, v11);
      Promise.__allocating_init(error:)();
      return;
    }
  }
  uint64_t v81 = a4;
  uint64_t v30 = (uint64_t)&v90[OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_service];
  sub_10002EC6C(&v90[OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_service], *(void *)&v90[OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_service + 24]);
  sub_10002EB60(&qword_1001A3460);
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  uint64_t v97 = (void (**)(char *, uint64_t))&_swiftEmptySetSingleton;
  id v31 = self;
  id v32 = [v31 currentConnection];
  uint64_t v80 = v17;
  if (v32)
  {
    unsigned int v33 = v32;
    [v32 auditToken];
    pid_t v34 = audit_token_to_pid(&atoken);

    unint64_t v78 = v31;
    uint64_t v79 = v30;
    if ((v89 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      __CocoaSet.makeIterator()();
      sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
      sub_100042E58((unint64_t *)&qword_1001A1CB0, (unint64_t *)&qword_1001A2110);
      Set.Iterator.init(_cocoa:)();
      uint64_t v35 = *(void *)atoken.val;
      unint64_t v93 = *(void (***)(char *, uint64_t))&atoken.val[2];
      uint64_t v36 = *(void *)&atoken.val[4];
      uint64_t v37 = *(void *)&atoken.val[6];
      unint64_t v38 = v99;
    }
    else
    {
      uint64_t v40 = -1 << *(unsigned char *)(v89 + 32);
      uint64_t v41 = *(void *)(v89 + 56);
      unint64_t v93 = (void (**)(char *, uint64_t))(v89 + 56);
      uint64_t v36 = ~v40;
      uint64_t v42 = -v40;
      if (v42 < 64) {
        uint64_t v43 = ~(-1 << v42);
      }
      else {
        uint64_t v43 = -1;
      }
      unint64_t v38 = v43 & v41;
      uint64_t v37 = 0;
      uint64_t v35 = swift_bridgeObjectRetain();
    }
    uint64_t v92 = v35 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v77 = v36;
    int64_t v44 = (unint64_t)(v36 + 64) >> 6;
    size_t v91 = (char *)&type metadata for Swift.AnyObject + 8;
    if (v35 < 0) {
      goto LABEL_19;
    }
    while (1)
    {
      if (v38)
      {
        uint64_t v45 = (v38 - 1) & v38;
        unint64_t v46 = __clz(__rbit64(v38)) | (v37 << 6);
        uint64_t v47 = v37;
      }
      else
      {
        int64_t v50 = v37 + 1;
        if (__OFADD__(v37, 1))
        {
          __break(1u);
          return;
        }
        if (v50 >= v44) {
          goto LABEL_39;
        }
        unint64_t v51 = (unint64_t)v93[v50];
        uint64_t v47 = v37 + 1;
        if (!v51)
        {
          uint64_t v47 = v37 + 2;
          if (v37 + 2 >= v44) {
            goto LABEL_39;
          }
          unint64_t v51 = (unint64_t)v93[v47];
          if (!v51)
          {
            uint64_t v47 = v37 + 3;
            if (v37 + 3 >= v44) {
              goto LABEL_39;
            }
            unint64_t v51 = (unint64_t)v93[v47];
            if (!v51)
            {
              uint64_t v47 = v37 + 4;
              if (v37 + 4 >= v44) {
                goto LABEL_39;
              }
              unint64_t v51 = (unint64_t)v93[v47];
              if (!v51)
              {
                uint64_t v52 = v37 + 5;
                while (v44 != v52)
                {
                  unint64_t v51 = (unint64_t)v93[v52++];
                  if (v51)
                  {
                    uint64_t v47 = v52 - 1;
                    goto LABEL_35;
                  }
                }
LABEL_39:
                sub_100034EF8();
                unint64_t v93 = v97;
                uint64_t v39 = v88;
                id v31 = v78;
                uint64_t v30 = v79;
                goto LABEL_40;
              }
            }
          }
        }
LABEL_35:
        uint64_t v45 = (v51 - 1) & v51;
        unint64_t v46 = __clz(__rbit64(v51)) + (v47 << 6);
      }
      id v49 = *(id *)(*(void *)(v35 + 48) + 8 * v46);
      if (!v49) {
        goto LABEL_39;
      }
      while (1)
      {
        unint64_t v53 = ASCSignpostTagFromIDInProcess(v49, v34);
        sub_100098F34((uint64_t *)v96, v53);

        uint64_t v37 = v47;
        unint64_t v38 = v45;
        if ((v35 & 0x8000000000000000) == 0) {
          break;
        }
LABEL_19:
        uint64_t v48 = __CocoaSet.Iterator.next()();
        if (v48)
        {
          *(void *)&v95[0] = v48;
          sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v49 = *(id *)&v96[0];
          swift_unknownObjectRelease();
          uint64_t v47 = v37;
          uint64_t v45 = v38;
          if (v49) {
            continue;
          }
        }
        goto LABEL_39;
      }
    }
  }
  uint64_t v39 = v88;
  unint64_t v93 = (void (**)(char *, uint64_t))&_swiftEmptySetSingleton;
LABEL_40:
  id v54 = objc_msgSend(v31, "currentConnection", v77);
  uint64_t v55 = v84;
  swift_bridgeObjectRetain();
  id v56 = v82;
  unint64_t v57 = sub_10010DC40(v54, v83, v55, v56);
  uint64_t v59 = v58;
  uint64_t v61 = v60;
  uint64_t v92 = v62;
  id v63 = v90;
  uint64_t v64 = (uint64_t)&v90[OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_fetcher];
  sub_100052538((uint64_t)&v90[OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_appStateController], (uint64_t)v96);
  sub_100052538(v64, (uint64_t)v95);
  sub_100052538(v30, (uint64_t)v94);
  uint64_t v65 = swift_allocObject();
  sub_100031C10(v96, v65 + 16);
  *(void *)(v65 + 56) = v89;
  *(unsigned char *)(v65 + 64) = v85 & 1;
  *(void *)(v65 + 72) = v63;
  *(void *)(v65 + 80) = v39;
  uint64_t v66 = v81;
  *(void *)(v65 + 88) = v56;
  *(void *)(v65 + 96) = v66;
  *(void *)(v65 + 104) = v93;
  *(void *)(v65 + 112) = v57;
  *(void *)(v65 + 120) = v59;
  *(void *)(v65 + 128) = v61;
  *(void *)(v65 + 136) = v92;
  sub_100031C10(v95, v65 + 144);
  sub_100031C10(v94, v65 + 184);
  uint64_t v67 = ObjectType;
  uint64_t v68 = v87;
  *(void *)(v65 + 224) = v87;
  *(void *)(v65 + 232) = v67;
  sub_10002EB60(&qword_1001A4D10);
  id v69 = v68;
  swift_bridgeObjectRetain();
  id v70 = v56;
  id v71 = v63;
  id v72 = v39;
  swift_bridgeObjectRetain();
  uint64_t v73 = Promise.__allocating_init()();
  uint64_t v74 = type metadata accessor for TaskPriority();
  uint64_t v75 = (uint64_t)v80;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 56))(v80, 1, 1, v74);
  uint64_t v76 = (void *)swift_allocObject();
  v76[2] = 0;
  v76[3] = 0;
  v76[4] = &unk_1001A4E48;
  v76[5] = v65;
  v76[6] = v73;
  swift_retain();
  sub_1000F6C04(v75, (uint64_t)&unk_1001A4E50, (uint64_t)v76);
  swift_release();
}

uint64_t sub_100100844(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    if (result) {
      goto LABEL_3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    sub_10002EB60(&qword_1001A4D58);
    sub_10010BE78();
    swift_allocError();
    *uint64_t v5 = 0;
    return Promise.__allocating_init(error:)();
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v2) {
    goto LABEL_8;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_6;
  }
  if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v4 = *(id *)(v1 + 32);
LABEL_6:
    swift_bridgeObjectRelease();
    sub_10002EB60(&qword_1001A4D58);
    return Promise.__allocating_init(value:)();
  }
  __break(1u);
  return result;
}

uint64_t sub_10010097C(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = [a1 ids];
  sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
  sub_100042E58((unint64_t *)&qword_1001A1CB0, (unint64_t *)&qword_1001A2110);
  uint64_t v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  id v6 = [a1 kind];
  id v7 = [a1 context];
  id v8 = [a1 mediaQueryParams];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v10 = 0;
  }
  id v11 = [a1 clientID];
  if (v11)
  {
    Swift::String v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v15 = 0;
  }
  int v16 = [a1 enableAppDistribution];
  id v17 = [a1 platformOverride];
  sub_1000FFF94(v5, v6, v7, v10, v13, v15, v16, v17);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(swift_allocObject() + 16) = a1;
  uint64_t v28 = type metadata accessor for SyncTaskScheduler();
  uint64_t v29 = &protocol witness table for SyncTaskScheduler;
  sub_100031A88(v27);
  id v18 = a1;
  SyncTaskScheduler.init()();
  sub_10002EB60((uint64_t *)&unk_1001A5AD0);
  Promise.map<A>(on:_:)();
  swift_release();
  swift_release();
  sub_10002ED08((uint64_t)v27);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a2;
  *(void *)(v19 + 24) = a3;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = sub_10010BFA8;
  *(void *)(v20 + 24) = v19;
  *(void *)(v20 + 32) = "getLockupsWith(_:withReplyHandler:)";
  *(void *)(v20 + 40) = 35;
  *(unsigned char *)(v20 + 48) = 2;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = sub_10010BFA8;
  *(void *)(v21 + 24) = v19;
  *(void *)(v21 + 32) = "getLockupsWith(_:withReplyHandler:)";
  *(void *)(v21 + 40) = 35;
  *(unsigned char *)(v21 + 48) = 2;
  uint64_t v22 = sub_10002EE34(0, (unint64_t *)&qword_1001A2170);
  swift_retain_n();
  swift_retain();
  uint64_t v23 = static OS_dispatch_queue.main.getter();
  uint64_t v28 = v22;
  uint64_t v29 = &protocol witness table for OS_dispatch_queue;
  v27[0] = v23;
  Promise.then(perform:orCatchError:on:)();
  swift_release();
  swift_release();
  sub_10002ED08((uint64_t)v27);
  swift_release();
  return swift_release();
}

uint64_t sub_100100D30@<X0>(id *a1@<X0>, void *a2@<X1>, Swift::Int a3@<X8>)
{
  unint64_t v5 = (unint64_t)*a1;
  if ((unint64_t)*a1 >> 62)
  {
LABEL_20:
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v6 = result;
    uint64_t v28 = (void *)a3;
    if (result) {
      goto LABEL_3;
    }
LABEL_21:
    a3 = (Swift::Int)_swiftEmptyDictionarySingleton;
LABEL_22:
    uint64_t result = swift_bridgeObjectRelease();
    void *v28 = a3;
    return result;
  }
  uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v28 = (void *)a3;
  if (!v6) {
    goto LABEL_21;
  }
LABEL_3:
  if (v6 >= 1)
  {
    uint64_t v8 = 0;
    a3 = (Swift::Int)_swiftEmptyDictionarySingleton;
    unint64_t v30 = v5 & 0xC000000000000001;
    unint64_t v29 = v5;
    while (1)
    {
      if (v30) {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v12 = *(id *)(v5 + 8 * v8 + 32);
      }
      uint64_t v13 = v12;
      id v14 = [v12 id];
      id v15 = [a2 kind];
      id v16 = [a2 context];
      id v17 = [objc_allocWithZone((Class)ASCLockupRequest) initWithID:v14 kind:v15 context:v16];

      id v18 = [a2 clientID];
      id v19 = [v17 lockupRequestWithClientID:v18];

      Class isa = (Class)[a2 mediaQueryParams];
      if (isa)
      {
        static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
      }
      id v21 = [v19 lockupRequestWithMediaQueryParams:isa];

      id v22 = [a2 platformOverride];
      id v23 = [v21 lockupRequestWithPlatformOverride:v22];

      unint64_t v5 = (unint64_t)v23;
      id v24 = (id)v5;
      if ([a2 enableAppDistribution])
      {
        id v24 = [(id)v5 lockupRequestWithAppDistributionEnabled];
      }
      if ((a3 & 0xC000000000000001) != 0)
      {
        if (a3 >= 0) {
          a3 &= 0xFFFFFFFFFFFFFF8uLL;
        }
        id v25 = v24;
        id v26 = v13;
        uint64_t v27 = __CocoaDictionary.count.getter();
        if (__OFADD__(v27, 1))
        {
          __break(1u);
          goto LABEL_20;
        }
        a3 = sub_10010B04C(a3, v27 + 1);
      }
      else
      {
        id v9 = v24;
        id v10 = v13;
      }
      ++v8;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      sub_10003F68C((uint64_t)v13, v24, isUniquelyReferenced_nonNull_native);

      swift_bridgeObjectRelease();
      unint64_t v5 = v29;
      if (v6 == v8) {
        goto LABEL_22;
      }
    }
  }
  __break(1u);
  return result;
}

void sub_1001010DC(objc_class *a1, uint64_t a2, uint64_t a3)
{
  Class isa = a1;
  if (a1)
  {
    sub_10002EE34(0, &qword_1001A1D40);
    sub_10002EE34(0, &qword_1001A4D40);
    sub_100042E58(&qword_1001A4EA0, &qword_1001A1D40);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  if (a2) {
    uint64_t v6 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v6 = 0;
  }
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);
}

uint64_t sub_1001011DC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 272) = v14;
  *(void *)(v8 + 280) = v15;
  *(_OWORD *)(v8 + 240) = v12;
  *(_OWORD *)(v8 + 256) = v13;
  *(_OWORD *)(v8 + 224) = v11;
  *(void *)(v8 + 208) = a7;
  *(void *)(v8 + 216) = a8;
  *(void *)(v8 + 192) = a5;
  *(void *)(v8 + 200) = a6;
  *(unsigned char *)(v8 + 416) = a4;
  *(void *)(v8 + 176) = a2;
  *(void *)(v8 + 184) = a3;
  *(void *)(v8 + 168) = a1;
  sub_10002EB60(&qword_1001A2450);
  *(void *)(v8 + 288) = swift_task_alloc();
  return _swift_task_switch(sub_10010129C, 0, 0);
}

uint64_t sub_10010129C()
{
  uint64_t v1 = *(void *)(v0 + 184);
  sub_10002EC6C(*(void **)(v0 + 176), *(void *)(*(void *)(v0 + 176) + 24));
  sub_1000643BC(v1);
  LODWORD(v1) = *(unsigned __int8 *)(v0 + 416);
  dispatch thunk of AppStateController.preloadState(forApps:)();
  swift_bridgeObjectRelease();
  if (v1 == 1)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 296) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100101508;
    return sub_10010277C();
  }
  else
  {
    uint64_t v4 = *(void *)(v0 + 256);
    uint64_t v6 = *(void *)(v0 + 240);
    uint64_t v5 = *(void *)(v0 + 248);
    uint64_t v8 = *(char **)(v0 + 224);
    uint64_t v7 = *(void *)(v0 + 232);
    uint64_t v10 = *(void *)(v0 + 208);
    uint64_t v9 = *(void *)(v0 + 216);
    uint64_t v11 = *(void *)(v0 + 200);
    uint64_t v12 = *(void *)(v0 + 184);
    sub_10002EC6C(*(void **)(v0 + 264), *(void *)(*(void *)(v0 + 264) + 24));
    *(void *)(v0 + 320) = sub_100033424(v12, v11, v10, v9, v8, v7, v6, v5, v4, 0);
    uint64_t v13 = sub_10002EB60(&qword_1001A19F8);
    uint64_t v14 = sub_100061D9C((unint64_t *)&qword_1001A1A00, &qword_1001A19F8);
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 328) = v15;
    *uint64_t v15 = v0;
    v15[1] = sub_100101AB4;
    return dispatch thunk of Future.then()(v0 + 136, v13, v14);
  }
}

uint64_t sub_100101508(char a1)
{
  *(unsigned char *)(*(void *)v1 + 417) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100101608, 0, 0);
}

uint64_t sub_100101608()
{
  if (*(unsigned char *)(v0 + 417) == 1)
  {
    uint64_t v1 = swift_task_alloc();
    *(void *)(v0 + 304) = v1;
    *(void *)uint64_t v1 = v0;
    *(void *)(v1 + 8) = sub_100101834;
    uint64_t v2 = *(void *)(v0 + 248);
    long long v3 = *(_OWORD *)(v0 + 232);
    long long v4 = *(_OWORD *)(v0 + 216);
    uint64_t v6 = *(void *)(v0 + 184);
    uint64_t v5 = *(void *)(v0 + 192);
    long long v7 = *(_OWORD *)(v0 + 200);
    *(void *)(v1 + 88) = *(void *)(v0 + 256);
    *(void *)(v1 + 96) = v5;
    *(void *)(v1 + 80) = v2;
    *(_OWORD *)(v1 + 48) = v4;
    *(_OWORD *)(v1 + 64) = v3;
    *(_OWORD *)(v1 + 32) = v7;
    *(void *)(v1 + 24) = v6;
    *(void *)(v1 + 104) = swift_getObjectType();
    return _swift_task_switch(sub_100103150, 0, 0);
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 256);
    uint64_t v10 = *(void *)(v0 + 240);
    uint64_t v9 = *(void *)(v0 + 248);
    uint64_t v12 = *(char **)(v0 + 224);
    uint64_t v11 = *(void *)(v0 + 232);
    uint64_t v14 = *(void *)(v0 + 208);
    uint64_t v13 = *(void *)(v0 + 216);
    uint64_t v15 = *(void *)(v0 + 200);
    uint64_t v16 = *(void *)(v0 + 184);
    sub_10002EC6C(*(void **)(v0 + 264), *(void *)(*(void *)(v0 + 264) + 24));
    *(void *)(v0 + 320) = sub_100033424(v16, v15, v14, v13, v12, v11, v10, v9, v8, 0);
    uint64_t v17 = sub_10002EB60(&qword_1001A19F8);
    uint64_t v18 = sub_100061D9C((unint64_t *)&qword_1001A1A00, &qword_1001A19F8);
    id v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 328) = v19;
    void *v19 = v0;
    v19[1] = sub_100101AB4;
    return dispatch thunk of Future.then()(v0 + 136, v17, v18);
  }
}

uint64_t sub_100101834(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 312) = a1;
    return _swift_task_switch(sub_100101988, 0, 0);
  }
}

uint64_t sub_100101988()
{
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v2, 1, 1, v4);
  sub_100052538(v3, v0 + 16);
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = v1;
  sub_100031C10((long long *)(v0 + 16), (uint64_t)(v5 + 5));
  swift_bridgeObjectRetain();
  sub_1000AA41C(v2, (uint64_t)&unk_1001A4E70, (uint64_t)v5);
  swift_release();
  **(void **)(v0 + 168) = *(void *)(v0 + 312);
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_100101AB4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    *(void *)(v2 + 336) = *(void *)(v2 + 136);
    return _swift_task_switch(sub_100101C1C, 0, 0);
  }
}

uint64_t sub_100101C1C()
{
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = v2;
  if (v1 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v3 == v4)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_9;
  }
  char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v6)
  {
LABEL_9:
    uint64_t v10 = v0 + 144;
    uint64_t v15 = *(void *)(v0 + 336);
    uint64_t v16 = *(void *)(v0 + 224);
    sub_10002EC6C(*(void **)(v0 + 272), *(void *)(*(void *)(v0 + 272) + 24));
    *(void *)(v0 + 344) = sub_1000E4148(v15, v16);
    swift_bridgeObjectRelease();
    uint64_t v11 = sub_10002EB60(&qword_1001A4D58);
    uint64_t v12 = sub_100061D9C(&qword_1001A4D68, &qword_1001A4D58);
    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 352) = v13;
    void *v13 = v0;
    uint64_t v14 = sub_100101F40;
    goto LABEL_10;
  }
  uint64_t v7 = *(void *)(v0 + 336);
  int v8 = *(unsigned __int8 *)(v0 + 416);
  uint64_t v9 = *sub_10002EC6C(*(void **)(v0 + 272), *(void *)(*(void *)(v0 + 272) + 24));
  if (v8 == 1)
  {
    uint64_t v10 = v0 + 160;
    *(void *)(v0 + 368) = sub_1000E4DDC(*(void *)(v0 + 200), *(void *)(v0 + 208), v7, 0, *(void *)(v0 + 224), *(void *)(v0 + 232), *(void *)(v0 + 240), *(void *)(v0 + 248), *(void *)(v0 + 256), v9);
    swift_bridgeObjectRelease();
    uint64_t v11 = sub_10002EB60(&qword_1001A4D10);
    uint64_t v12 = sub_100061D9C(&qword_1001A4D28, &qword_1001A4D10);
    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 376) = v13;
    void *v13 = v0;
    uint64_t v14 = sub_10010225C;
  }
  else
  {
    uint64_t v10 = v0 + 152;
    *(void *)(v0 + 392) = sub_1000E48F8(*(void *)(v0 + 200), *(void *)(v0 + 208), *(void *)(v0 + 280), v7, *(void *)(v0 + 224), v9);
    swift_bridgeObjectRelease();
    uint64_t v11 = sub_10002EB60(&qword_1001A4D10);
    uint64_t v12 = sub_100061D9C(&qword_1001A4D28, &qword_1001A4D10);
    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 400) = v13;
    void *v13 = v0;
    uint64_t v14 = sub_1001024EC;
  }
LABEL_10:
  v13[1] = v14;
  return dispatch thunk of Future.then()(v10, v11, v12);
}

uint64_t sub_100101F40()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    *(void *)(v2 + 360) = *(void *)(v2 + 144);
    return _swift_task_switch(sub_1001020A8, 0, 0);
  }
}

uint64_t sub_1001020A8()
{
  uint64_t v1 = *(void **)(v0 + 360);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 176);
  sub_10002EB60(&qword_1001A4D70);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10014DF90;
  *(void *)(v4 + 32) = v1;
  uint64_t v11 = v4;
  specialized Array._endMutation()();
  uint64_t v5 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v2, 1, 1, v5);
  sub_100052538(v3, v0 + 56);
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v11;
  sub_100031C10((long long *)(v0 + 56), (uint64_t)(v6 + 5));
  id v7 = v1;
  swift_bridgeObjectRetain();
  sub_1000AA41C(v2, (uint64_t)&unk_1001A4E60, (uint64_t)v6);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10014DF90;
  *(void *)(v8 + 32) = v7;
  uint64_t v12 = v8;
  specialized Array._endMutation()();
  **(void **)(v0 + 168) = v12;
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_10010225C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    *(void *)(v2 + 384) = *(void *)(v2 + 160);
    return _swift_task_switch(sub_1001023C4, 0, 0);
  }
}

uint64_t sub_1001023C4()
{
  uint64_t v1 = *(void *)(v0 + 384);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v2, 1, 1, v4);
  sub_100052538(v3, v0 + 96);
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = v1;
  sub_100031C10((long long *)(v0 + 96), (uint64_t)(v5 + 5));
  swift_bridgeObjectRetain();
  sub_1000AA41C(v2, (uint64_t)&unk_1001A4E58, (uint64_t)v5);
  swift_release();
  **(void **)(v0 + 168) = v1;
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1001024EC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    *(void *)(v2 + 408) = *(void *)(v2 + 152);
    return _swift_task_switch(sub_100102654, 0, 0);
  }
}

uint64_t sub_100102654()
{
  uint64_t v1 = *(void *)(v0 + 408);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v2, 1, 1, v4);
  sub_100052538(v3, v0 + 96);
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = v1;
  sub_100031C10((long long *)(v0 + 96), (uint64_t)(v5 + 5));
  swift_bridgeObjectRetain();
  sub_1000AA41C(v2, (uint64_t)&unk_1001A4E58, (uint64_t)v5);
  swift_release();
  **(void **)(v0 + 168) = v1;
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_10010277C()
{
  v1[3] = v0;
  uint64_t v2 = sub_10002EB60(&qword_1001A19D8);
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  void v1[6] = swift_task_alloc();
  return _swift_task_switch(sub_10010286C, 0, 0);
}

uint64_t sub_10010286C()
{
  v0[2] = 0;
  os_eligibility_get_domain_answer();
  uint64_t v1 = OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_bag;
  v0[7] = v0[2];
  v0[8] = v1;
  NSString v2 = String._bridgeToObjectiveC()();
  Bag.subscript.getter();

  uint64_t v3 = (void *)swift_task_alloc();
  v0[9] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1001029C0;
  uint64_t v4 = v0[4];
  return Bag.Value.current(or:)(v0 + 14, sub_100034500, 0, v4);
}

uint64_t sub_1001029C0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  uint64_t v3 = *(void *)(*v0 + 40);
  uint64_t v4 = *(void *)(*v0 + 32);
  swift_task_dealloc();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(void *)(v1 + 80) = v5;
  *(void *)(v1 + 88) = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v5(v2, v4);
  return _swift_task_switch(sub_100102B58, 0, 0);
}

uint64_t sub_100102B58()
{
  *(unsigned char *)(v0 + 114) = *(unsigned char *)(v0 + 112);
  NSString v1 = String._bridgeToObjectiveC()();
  Bag.subscript.getter();

  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100102C88;
  uint64_t v3 = *(void *)(v0 + 32);
  return Bag.Value.current(or:)(v0 + 113, sub_100034500, 0, v3);
}

uint64_t sub_100102C88()
{
  NSString v1 = *(void (**)(uint64_t, uint64_t))(*(void *)v0 + 80);
  uint64_t v2 = *(void *)(*(void *)v0 + 48);
  uint64_t v3 = *(void *)(*(void *)v0 + 32);
  swift_task_dealloc();
  v1(v2, v3);
  return _swift_task_switch(sub_100102E1C, 0, 0);
}

uint64_t sub_100102E1C()
{
  if (*(unsigned char *)(v0 + 114) == 1 && (*(unsigned char *)(v0 + 113) & 1) == 0 && *(void *)(v0 + 56) == 4)
  {
    sub_10002EC6C((void *)(*(void *)(v0 + 24) + OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_appDistribution), *(void *)(*(void *)(v0 + 24) + OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_appDistribution + 24));
    uint64_t v1 = dword_1001A4E20;
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 104) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100102F7C;
    return ((uint64_t (__cdecl *)())((char *)&dword_1001A4E20 + v1))();
  }
  else
  {
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4(0);
  }
}

uint64_t sub_100102F7C(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_1001030C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[11] = v12;
  v9[12] = v8;
  v9[9] = a7;
  v9[10] = a8;
  v9[7] = a5;
  v9[8] = a6;
  v9[5] = a3;
  v9[6] = a4;
  v9[3] = a1;
  v9[4] = a2;
  v9[13] = swift_getObjectType();
  return _swift_task_switch(sub_100103150, 0, 0);
}

uint64_t sub_100103150()
{
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 72);
  long long v13 = *(_OWORD *)(v0 + 56);
  long long v14 = *(_OWORD *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v6 = *(void *)(v0 + 24);
  uint64_t v7 = *(void *)(v0 + 32);
  uint64_t v8 = sub_10002EB60(&qword_1001A4DC8);
  uint64_t v9 = swift_task_alloc();
  *(void *)(v0 + 112) = v9;
  *(void *)(v9 + 16) = v7;
  *(void *)(v9 + 24) = v2;
  *(void *)(v9 + 32) = v6;
  *(void *)(v9 + 40) = v5;
  *(void *)(v9 + 48) = v4;
  *(_OWORD *)(v9 + 56) = v13;
  *(void *)(v9 + 72) = v3;
  *(_OWORD *)(v9 + 80) = v14;
  *(void *)(v9 + 96) = v1;
  uint64_t v10 = sub_10002EB60((uint64_t *)&unk_1001A5AC0);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v11;
  void *v11 = v0;
  v11[1] = sub_1001032B4;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 16, v8, v10, 0, 0, &unk_1001A4E80, v9, v8);
}

uint64_t sub_1001032B4()
{
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001033EC;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1001033D0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001033D0()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

uint64_t sub_1001033EC()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100103450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 248) = v14;
  *(_OWORD *)(v8 + 232) = v13;
  *(_OWORD *)(v8 + 216) = v12;
  *(void *)(v8 + 200) = a7;
  *(void *)(v8 + 208) = a8;
  *(void *)(v8 + 184) = a5;
  *(void *)(v8 + 192) = a6;
  *(void *)(v8 + 168) = a3;
  *(void *)(v8 + 176) = a4;
  *(void *)(v8 + 152) = a1;
  *(void *)(v8 + 160) = a2;
  sub_10002EB60(&qword_1001A2450);
  *(void *)(v8 + 256) = swift_task_alloc();
  *(void *)(v8 + 264) = swift_task_alloc();
  uint64_t v9 = sub_10002EB60(&qword_1001A4DE0);
  *(void *)(v8 + 272) = v9;
  *(void *)(v8 + 280) = *(void *)(v9 - 8);
  *(void *)(v8 + 288) = swift_task_alloc();
  return _swift_task_switch(sub_100103578, 0, 0);
}

uint64_t sub_100103578()
{
  uint64_t v1 = *(void **)(v0 + 168);
  *(void *)(v0 + 48) = v1;
  *(_OWORD *)(v0 + 32) = xmmword_10014CD00;
  *(void *)(v0 + 296) = @"appDistributionApp";
  *(void *)(v0 + 56) = @"appDistributionApp";
  uint64_t v33 = type metadata accessor for TaskPriority();
  uint64_t v2 = *(void *)(v33 - 8);
  id v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56);
  id v31 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  unint64_t v30 = (void (**)(uint64_t, uint64_t))(v2 + 8);
  id v3 = v1;
  uint64_t v4 = @"appDistributionApp";
  char v5 = 0;
  uint64_t v6 = 0;
  do
  {
    char v34 = v5;
    uint64_t v8 = *(void *)(v0 + 264);
    uint64_t v38 = *(void *)(v0 + 256);
    uint64_t v9 = *(void *)(v0 + 224);
    uint64_t v10 = *(void *)(v0 + 208);
    uint64_t v36 = *(void *)(v0 + 216);
    uint64_t v37 = *(void *)(v0 + 232);
    uint64_t v11 = *(void **)(v0 + 192);
    uint64_t v35 = *(void *)(v0 + 200);
    long long v12 = *(void **)(v0 + 176);
    uint64_t v13 = *(void *)(v0 + 184);
    uint64_t v14 = *(void **)(v0 + 48 + 8 * v6);
    long long v39 = *(_OWORD *)(v0 + 240);
    v32(v8, 1, 1, v33);
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = 0;
    *(void *)(v15 + 24) = 0;
    *(void *)(v15 + 32) = v12;
    *(void *)(v15 + 40) = v13;
    *(void *)(v15 + 48) = v14;
    *(void *)(v15 + 56) = v11;
    *(void *)(v15 + 64) = v35;
    *(void *)(v15 + 72) = v10;
    *(void *)(v15 + 80) = v36;
    *(void *)(v15 + 88) = v9;
    *(void *)(v15 + 96) = v37;
    *(_OWORD *)(v15 + 104) = v39;
    sub_1000BCC80(v8, v38);
    LODWORD(v13) = (*v31)(v38, 1, v33);
    id v16 = v14;
    id v17 = v12;
    swift_bridgeObjectRetain();
    id v18 = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v19 = *(void *)(v0 + 256);
    if (v13 == 1)
    {
      sub_100034B8C(*(void *)(v0 + 256), &qword_1001A2450);
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*v30)(v19, v33);
    }
    if (*(void *)(v15 + 16))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v20 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v22 = v21;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v20 = 0;
      uint64_t v22 = 0;
    }
    uint64_t v23 = **(void **)(v0 + 160);
    sub_10002EB60(&qword_1001A4DC8);
    uint64_t v24 = v22 | v20;
    if (v22 | v20)
    {
      uint64_t v24 = v0 + 64;
      *(void *)(v0 + 64) = 0;
      *(void *)(v0 + 72) = 0;
      *(void *)(v0 + 80) = v20;
      *(void *)(v0 + 88) = v22;
    }
    uint64_t v7 = *(void *)(v0 + 264);
    char v5 = 1;
    *(void *)(v0 + 96) = 1;
    *(void *)(v0 + 104) = v24;
    *(void *)(v0 + 112) = v23;
    swift_task_create();

    swift_release();
    sub_100034B8C(v7, &qword_1001A2450);
    uint64_t v6 = 1;
  }
  while ((v34 & 1) == 0);
  type metadata accessor for Kind(0);
  *(void *)(v0 + 304) = v25;
  swift_arrayDestroy();
  sub_10002EB60((uint64_t *)&unk_1001A3FC0);
  ThrowingTaskGroup.makeAsyncIterator()();
  *(void *)(v0 + 312) = _swiftEmptyDictionarySingleton;
  uint64_t v26 = sub_100061D9C(&qword_1001A4E00, &qword_1001A4DE0);
  uint64_t v27 = (void *)swift_task_alloc();
  *(void *)(v0 + 320) = v27;
  void *v27 = v0;
  v27[1] = sub_1001039A4;
  uint64_t v28 = *(void *)(v0 + 272);
  return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 120, v28, v26);
}

uint64_t sub_1001039A4()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 328) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = v2[35];
    uint64_t v3 = v2[36];
    uint64_t v5 = v2[34];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    uint64_t v6 = sub_100103FD4;
  }
  else
  {
    uint64_t v6 = sub_100103AE8;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_100103AE8()
{
  uint64_t v1 = *(void **)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 312);
  if (v1)
  {
    uint64_t v3 = *(void *)(v0 + 128);
    id v4 = v1;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v0 + 144) = v2;
    unint64_t v8 = sub_10003AA48(v4);
    uint64_t v9 = *(void *)(v2 + 16);
    BOOL v10 = (v6 & 1) == 0;
    uint64_t v11 = (void *)(v9 + v10);
    if (__OFADD__(v9, v10))
    {
      __break(1u);
    }
    else
    {
      char v12 = v6;
      if (*(void *)(*(void *)(v0 + 312) + 24) >= (uint64_t)v11)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          uint64_t v11 = sub_100040CEC();
        }
      }
      else
      {
        sub_10003DC60((uint64_t)v11, isUniquelyReferenced_nonNull_native);
        uint64_t v11 = (void *)sub_10003AA48(v4);
        if ((v12 & 1) != (v6 & 1))
        {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        unint64_t v8 = (unint64_t)v11;
      }
      id v32 = *(void **)(v0 + 144);
      if (v12)
      {
        uint64_t v33 = v32[7];
        swift_bridgeObjectRelease();
        *(void *)(v33 + 8 * v8) = v3;
LABEL_22:
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        *(void *)(v0 + 312) = v32;
        uint64_t v39 = sub_100061D9C(&qword_1001A4E00, &qword_1001A4DE0);
        uint64_t v40 = (void *)swift_task_alloc();
        *(void *)(v0 + 320) = v40;
        void *v40 = v0;
        v40[1] = sub_1001039A4;
        uint64_t v41 = *(void *)(v0 + 272);
        return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 120, v41, v39);
      }
      v32[(v8 >> 6) + 8] |= 1 << v8;
      uint64_t v34 = 8 * v8;
      *(void *)(v32[6] + v34) = v4;
      *(void *)(v32[7] + v34) = v3;
      uint64_t v35 = v32[2];
      BOOL v36 = __OFADD__(v35, 1);
      uint64_t v37 = v35 + 1;
      if (!v36)
      {
        v32[2] = v37;
        id v38 = v4;
        goto LABEL_22;
      }
    }
    __break(1u);
    return dispatch thunk of Future.then()(v11, v6, v7);
  }
  (*(void (**)(void, void))(*(void *)(v0 + 280) + 8))(*(void *)(v0 + 288), *(void *)(v0 + 272));
  sub_10010BE38(*(void **)(v0 + 120));
  if (*(void *)(v2 + 16))
  {
    uint64_t v14 = sub_10003AA48(*(id *)(v0 + 168));
    uint64_t v15 = *(void *)(v0 + 312);
    id v16 = *(void **)(v0 + 168);
    if (v17)
    {
      uint64_t v18 = *(void *)(*(void *)(v15 + 56) + 8 * v14);
      swift_bridgeObjectRetain();

      if (*(void *)(v2 + 16))
      {
        uint64_t v19 = sub_10003AA48(*(id *)(v0 + 296));
        if (v20)
        {
          uint64_t v21 = *(void **)(v0 + 296);
          uint64_t v22 = *(void *)(v0 + 240);
          uint64_t v47 = *(void *)(v0 + 232);
          uint64_t v23 = *(void *)(v0 + 208);
          uint64_t v45 = *(void *)(v0 + 216);
          uint64_t v46 = *(void *)(v0 + 224);
          uint64_t v24 = *(void *)(v0 + 192);
          uint64_t v25 = *(void *)(v0 + 168);
          uint64_t v26 = *(void *)(v0 + 176);
          uint64_t v27 = *(void *)(*(void *)(v15 + 56) + 8 * v19);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();

          uint64_t v28 = sub_10002EC6C((void *)(v26 + OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_service), *(void *)(v26 + OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_service + 24));
          *(void *)(v0 + 336) = sub_1000E4DDC(v25, v24, v18, v27, v23, v45, v46, v47, v22, *v28);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v29 = sub_10002EB60(&qword_1001A4D10);
          uint64_t v30 = sub_100061D9C(&qword_1001A4D28, &qword_1001A4D10);
          id v31 = (void *)swift_task_alloc();
          *(void *)(v0 + 344) = v31;
          *id v31 = v0;
          v31[1] = sub_100104054;
          uint64_t v11 = (void *)(v0 + 136);
          uint64_t v6 = v29;
          uint64_t v7 = v30;
          return dispatch thunk of Future.then()(v11, v6, v7);
        }
        uint64_t v42 = *(void **)(v0 + 296);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    else
    {
    }
  }
  swift_bridgeObjectRelease();
  sub_10010BE78();
  swift_allocError();
  *uint64_t v43 = 1;
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int64_t v44 = *(uint64_t (**)(void))(v0 + 8);
  return v44();
}

uint64_t sub_100103FD4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100104054()
{
  uint64_t v2 = (void *)*v1;
  v2[44] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1001041D8, 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)v2[19];
    swift_release();
    *uint64_t v3 = v2[17];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

uint64_t sub_1001041D8()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100104260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 264) = v15;
  *(_OWORD *)(v8 + 248) = v14;
  *(_OWORD *)(v8 + 232) = v13;
  *(void *)(v8 + 216) = a7;
  *(void *)(v8 + 224) = a8;
  *(void *)(v8 + 200) = a5;
  *(void *)(v8 + 208) = a6;
  *(void *)(v8 + 184) = a1;
  *(void *)(v8 + 192) = a4;
  type metadata accessor for LogMessage.StringInterpolation();
  *(void *)(v8 + 272) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for OSLogger();
  *(void *)(v8 + 280) = v9;
  *(void *)(v8 + 288) = *(void *)(v9 - 8);
  *(void *)(v8 + 296) = swift_task_alloc();
  uint64_t v10 = sub_10002EB60(&qword_1001A19D8);
  *(void *)(v8 + 304) = v10;
  *(void *)(v8 + 312) = *(void *)(v10 - 8);
  *(void *)(v8 + 320) = swift_task_alloc();
  return _swift_task_switch(sub_1001043CC, 0, 0);
}

uint64_t sub_1001043CC()
{
  v0[41] = sub_10002EC6C((void *)(v0[24] + OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_fetcher), *(void *)(v0[24] + OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_fetcher + 24));
  NSString v1 = String._bridgeToObjectiveC()();
  Bag.subscript.getter();

  uint64_t v2 = (void *)swift_task_alloc();
  v0[42] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1001044EC;
  uint64_t v3 = v0[38];
  return Bag.Value.current(or:)(v0 + 47, sub_100034500, 0, v3);
}

uint64_t sub_1001044EC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 320);
  uint64_t v2 = *(void *)(*(void *)v0 + 312);
  uint64_t v3 = *(void *)(*(void *)v0 + 304);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_100104644, 0, 0);
}

uint64_t sub_100104644()
{
  *(void *)(v0 + 344) = sub_100033424(*(void *)(v0 + 200), *(void *)(v0 + 208), *(void *)(v0 + 216), *(void *)(v0 + 224), *(char **)(v0 + 232), *(void *)(v0 + 240), *(void *)(v0 + 248), *(void *)(v0 + 256), *(void *)(v0 + 264), *(unsigned char *)(v0 + 376));
  uint64_t v1 = sub_10002EB60(&qword_1001A19F8);
  uint64_t v2 = sub_100061D9C((unint64_t *)&qword_1001A1A00, &qword_1001A19F8);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 352) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100104768;
  return dispatch thunk of Future.then()(v0 + 152, v1, v2);
}

uint64_t sub_100104768()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 360) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    uint64_t v3 = sub_100104944;
  }
  else
  {
    *(void *)(v2 + 368) = *(void *)(v2 + 152);
    uint64_t v3 = sub_1001048A8;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001048A8()
{
  uint64_t v1 = v0[46];
  uint64_t v2 = (void *)v0[26];
  uint64_t v3 = (void *)v0[23];
  *uint64_t v3 = v2;
  v3[1] = v1;
  id v4 = v2;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100104944()
{
  uint64_t v29 = (void **)(v0 + 168);
  if (qword_1001A0E70 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v3 = *(void *)(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 296);
  uint64_t v28 = (_OWORD *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 280);
  uint64_t v5 = *(void **)(v0 + 208);
  uint64_t v6 = sub_10002F6AC(v4, (uint64_t)qword_1001AE398);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v4);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v7._object = (void *)0x8000000100161230;
  v7._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v7);
  type metadata accessor for Kind(0);
  *(void *)(v0 + 72) = v8;
  *(void *)(v0 + 48) = v5;
  id v9 = v5;
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C(v0 + 48, &qword_1001A1C50);
  v10._uint64_t countAndFlagsBits = 8238;
  v10._object = (void *)0xE200000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v10);
  swift_getErrorValue();
  uint64_t v11 = *(void *)(v0 + 112);
  uint64_t v12 = *(void *)(v0 + 120);
  *(void *)(v0 + 104) = v12;
  long long v13 = sub_100031A88((uint64_t *)(v0 + 80));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v13, v11, v12);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C(v0 + 80, &qword_1001A1C50);
  v14._uint64_t countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v14);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  *(void *)(v0 + 160) = v1;
  swift_errorRetain();
  sub_10002EB60((uint64_t *)&unk_1001A3FC0);
  type metadata accessor for AMSError(0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v20 = v0 + 16;
    _OWORD *v28 = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
LABEL_13:
    sub_100034B8C(v20, &qword_1001A1C50);
    goto LABEL_14;
  }
  uint64_t v15 = *v29;
  *(void *)(v0 + 176) = *v29;
  sub_10010BECC((unint64_t *)&unk_1001A4E10, type metadata accessor for AMSError);
  uint64_t v16 = _BridgedStoredNSError.userInfo.getter();

  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v16 + 16))
  {
    unint64_t v19 = sub_10003A860(v17, v18);
    uint64_t v20 = v0 + 16;
    if (v21)
    {
      sub_100042EB8(*(void *)(v16 + 56) + 32 * v19, (uint64_t)v28);
    }
    else
    {
      _OWORD *v28 = 0u;
      *(_OWORD *)(v0 + 32) = 0u;
    }
  }
  else
  {
    uint64_t v20 = v0 + 16;
    _OWORD *v28 = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 40)) {
    goto LABEL_13;
  }
  sub_10002EB60(&qword_1001A19D0);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    unint64_t v22 = *(void *)(v0 + 144);
    goto LABEL_15;
  }
LABEL_14:
  unint64_t v22 = sub_1000631C4((uint64_t)_swiftEmptyArrayStorage);
  swift_errorRelease();
LABEL_15:
  uint64_t v23 = *(void **)(v0 + 208);
  uint64_t v24 = *(void **)(v0 + 184);
  *uint64_t v24 = v23;
  v24[1] = v22;
  id v25 = v23;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
  return v26();
}

uint64_t sub_100104DBC(uint64_t a1, uint64_t a2, void *a3, int a4, uint64_t a5, uint64_t a6)
{
  Swift::String v7 = v6;
  uint64_t v44 = a6;
  uint64_t v43 = a5;
  int v40 = a4;
  uint64_t v41 = a2;
  uint64_t v39 = a1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v9 = sub_10002EB60(&qword_1001A2450);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (uint64_t)&v6[OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_service];
  sub_10002EC6C(&v6[OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_service], *(void *)&v6[OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_service + 24]);
  sub_10002EB60(&qword_1001A3460);
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  sub_10002EB60(&qword_1001A4CF8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10014CED0;
  *(void *)(inited + 32) = ASCSignpostTagUnique();
  uint64_t v14 = sub_10011B408(inited);
  swift_setDeallocating();
  id v15 = [self currentConnection];
  id v16 = a3;
  unint64_t v17 = sub_10010DC40(v15, 0, 0, v16);
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v24 = (uint64_t)v7 + OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_fetcher;
  sub_100052538((uint64_t)v7 + OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_appStateController, (uint64_t)&v47);
  sub_100052538(v24, (uint64_t)v46);
  sub_100052538(v12, (uint64_t)v45);
  uint64_t v25 = swift_allocObject();
  *(unsigned char *)(v25 + 16) = v40;
  uint64_t v26 = v39;
  *(void *)(v25 + 24) = v7;
  *(void *)(v25 + 32) = v26;
  *(void *)(v25 + 40) = v41;
  *(void *)(v25 + 48) = v16;
  *(void *)(v25 + 56) = v14;
  *(void *)(v25 + 64) = v17;
  *(void *)(v25 + 72) = v19;
  *(void *)(v25 + 80) = v21;
  *(void *)(v25 + 88) = v23;
  sub_100031C10(&v47, v25 + 96);
  sub_100031C10(v46, v25 + 136);
  sub_100031C10(v45, v25 + 176);
  *(void *)(v25 + 216) = ObjectType;
  sub_10002EB60(&qword_1001A4D58);
  id v27 = v16;
  id v28 = v7;
  swift_bridgeObjectRetain();
  uint64_t v29 = Promise.__allocating_init()();
  uint64_t v30 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v11, 1, 1, v30);
  id v31 = (void *)swift_allocObject();
  _OWORD v31[2] = 0;
  uint64_t v31[3] = 0;
  v31[4] = &unk_1001A4D90;
  v31[5] = v25;
  v31[6] = v29;
  swift_retain();
  sub_1000F6C04((uint64_t)v11, (uint64_t)&unk_1001A4D98, (uint64_t)v31);
  swift_release();
  uint64_t v32 = swift_allocObject();
  uint64_t v33 = v44;
  *(void *)(v32 + 16) = v43;
  *(void *)(v32 + 24) = v33;
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = sub_10010C740;
  *(void *)(v34 + 24) = v32;
  *(void *)(v34 + 32) = "getLockup(forBundleID:withContext:enableAppDistribution:withReplyHandler:)";
  *(void *)(v34 + 40) = 74;
  *(unsigned char *)(v34 + 48) = 2;
  uint64_t v35 = swift_allocObject();
  *(void *)(v35 + 16) = sub_10010C740;
  *(void *)(v35 + 24) = v32;
  *(void *)(v35 + 32) = "getLockup(forBundleID:withContext:enableAppDistribution:withReplyHandler:)";
  *(void *)(v35 + 40) = 74;
  *(unsigned char *)(v35 + 48) = 2;
  uint64_t v36 = sub_10002EE34(0, (unint64_t *)&qword_1001A2170);
  swift_retain_n();
  swift_retain();
  uint64_t v37 = static OS_dispatch_queue.main.getter();
  uint64_t v48 = v36;
  id v49 = &protocol witness table for OS_dispatch_queue;
  *(void *)&long long v47 = v37;
  Promise.then(perform:orCatchError:on:)();
  swift_release();
  swift_release();
  sub_10002ED08((uint64_t)&v47);
  swift_release();
  return swift_release();
}

uint64_t sub_100105234(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 248) = v13;
  *(void *)(v8 + 256) = v14;
  *(_OWORD *)(v8 + 232) = v12;
  *(_OWORD *)(v8 + 216) = v11;
  *(void *)(v8 + 200) = a7;
  *(void *)(v8 + 208) = a8;
  *(void *)(v8 + 184) = a5;
  *(void *)(v8 + 192) = a6;
  *(void *)(v8 + 168) = a3;
  *(void *)(v8 + 176) = a4;
  *(unsigned char *)(v8 + 352) = a2;
  *(void *)(v8 + 160) = a1;
  sub_10002EB60(&qword_1001A2450);
  *(void *)(v8 + 264) = swift_task_alloc();
  return _swift_task_switch(sub_1001052F0, 0, 0);
}

uint64_t sub_1001052F0()
{
  if (*(unsigned char *)(v0 + 352) == 1)
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 272) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_100105544;
    return sub_10010277C();
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 232);
    uint64_t v3 = *(void *)(v0 + 216);
    uint64_t v14 = *(void *)(v0 + 224);
    uint64_t v5 = *(void *)(v0 + 200);
    uint64_t v4 = *(void *)(v0 + 208);
    uint64_t v7 = *(void *)(v0 + 184);
    uint64_t v6 = *(void *)(v0 + 192);
    uint64_t v8 = *(void *)(v0 + 176);
    sub_10002EC6C(*(void **)(v0 + 248), *(void *)(*(void *)(v0 + 248) + 24));
    sub_10002EB60(&qword_1001A4DA0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10014CED0;
    *(void *)(inited + 32) = v8;
    *(void *)(inited + 40) = v7;
    swift_bridgeObjectRetain();
    Swift::Int v10 = sub_10011A7F8(inited);
    swift_setDeallocating();
    swift_arrayDestroy();
    *(void *)(v0 + 296) = @"app";
    *(void *)(v0 + 304) = sub_10003408C(v10, @"app", v6, v5, v4, v3, v14, v15, 0);
    swift_bridgeObjectRelease();
    uint64_t v11 = sub_10002EB60(&qword_1001A19F8);
    uint64_t v12 = sub_100061D9C((unint64_t *)&qword_1001A1A00, &qword_1001A19F8);
    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 312) = v13;
    void *v13 = v0;
    v13[1] = sub_100105C48;
    return dispatch thunk of Future.then()(v0 + 144, v11, v12);
  }
}

uint64_t sub_100105544(char a1)
{
  *(unsigned char *)(*(void *)v1 + 353) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100105644, 0, 0);
}

uint64_t sub_100105644()
{
  if (*(unsigned char *)(v0 + 353) == 1)
  {
    uint64_t v1 = swift_task_alloc();
    *(void *)(v0 + 280) = v1;
    *(void *)uint64_t v1 = v0;
    *(void *)(v1 + 8) = sub_1001058DC;
    long long v2 = *(_OWORD *)(v0 + 216);
    long long v3 = *(_OWORD *)(v0 + 200);
    uint64_t v4 = *(void *)(v0 + 168);
    uint64_t v5 = *(void *)(v0 + 176);
    long long v6 = *(_OWORD *)(v0 + 184);
    *(void *)(v1 + 80) = *(void *)(v0 + 232);
    *(void *)(v1 + 88) = v4;
    *(_OWORD *)(v1 + 48) = v3;
    *(_OWORD *)(v1 + 64) = v2;
    *(_OWORD *)(v1 + 32) = v6;
    *(void *)(v1 + 24) = v5;
    *(void *)(v1 + 96) = swift_getObjectType();
    return _swift_task_switch(sub_1001062F8, 0, 0);
  }
  else
  {
    uint64_t v20 = *(void *)(v0 + 232);
    uint64_t v7 = *(void *)(v0 + 216);
    uint64_t v19 = *(void *)(v0 + 224);
    uint64_t v9 = *(void *)(v0 + 200);
    uint64_t v8 = *(void *)(v0 + 208);
    uint64_t v11 = *(void *)(v0 + 184);
    uint64_t v10 = *(void *)(v0 + 192);
    uint64_t v12 = *(void *)(v0 + 176);
    sub_10002EC6C(*(void **)(v0 + 248), *(void *)(*(void *)(v0 + 248) + 24));
    sub_10002EB60(&qword_1001A4DA0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10014CED0;
    *(void *)(inited + 32) = v12;
    *(void *)(inited + 40) = v11;
    swift_bridgeObjectRetain();
    Swift::Int v14 = sub_10011A7F8(inited);
    swift_setDeallocating();
    swift_arrayDestroy();
    *(void *)(v0 + 296) = @"app";
    *(void *)(v0 + 304) = sub_10003408C(v14, @"app", v10, v9, v8, v7, v19, v20, 0);
    swift_bridgeObjectRelease();
    uint64_t v15 = sub_10002EB60(&qword_1001A19F8);
    uint64_t v16 = sub_100061D9C((unint64_t *)&qword_1001A1A00, &qword_1001A19F8);
    unint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 312) = v17;
    *unint64_t v17 = v0;
    v17[1] = sub_100105C48;
    return dispatch thunk of Future.then()(v0 + 144, v15, v16);
  }
}

uint64_t sub_1001058DC(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    long long v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 288) = a1;
    return _swift_task_switch(sub_100105A30, 0, 0);
  }
}

uint64_t sub_100105A30()
{
  uint64_t v1 = *(void **)(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 240);
  Set<>.nsNumbers.getter(*(void *)(v0 + 200));
  sub_10002EE34(0, (unint64_t *)&qword_1001A1CF0);
  sub_100042E58((unint64_t *)&qword_1001A1CF8, (unint64_t *)&qword_1001A1CF0);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v5 = [v1 lockupWithSignpostTags:isa];

  sub_10002EB60(&qword_1001A4D70);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_10014DF90;
  *(void *)(v6 + 32) = v5;
  uint64_t v15 = v6;
  specialized Array._endMutation()();
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v2, 1, 1, v7);
  sub_100052538(v3, v0 + 104);
  uint64_t v8 = (void *)swift_allocObject();
  _OWORD v8[2] = 0;
  v8[3] = 0;
  v8[4] = v15;
  sub_100031C10((long long *)(v0 + 104), (uint64_t)(v8 + 5));
  uint64_t v9 = *(void **)(v0 + 288);
  uint64_t v10 = *(void *)(v0 + 264);
  uint64_t v11 = *(void **)(v0 + 160);
  id v12 = v5;
  swift_bridgeObjectRetain();
  sub_1000AA41C(v10, (uint64_t)&unk_1001A4DC0, (uint64_t)v8);
  swift_release();

  swift_bridgeObjectRelease();
  void *v11 = v12;
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t sub_100105C48()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    *(void *)(v2 + 320) = *(void *)(v2 + 144);
    return _swift_task_switch(sub_100105DB8, 0, 0);
  }
}

uint64_t sub_100105DB8()
{
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v2 = *(void *)(v0 + 296);
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 200);
  id v5 = sub_10002EC6C(*(void **)(v0 + 256), *(void *)(*(void *)(v0 + 256) + 24));
  *(void *)(v0 + 328) = sub_1000E4468(v2, v4, 0, v1, v3, *v5);
  swift_bridgeObjectRelease();
  uint64_t v6 = sub_10002EB60(&qword_1001A4D58);
  uint64_t v7 = sub_100061D9C(&qword_1001A4D68, &qword_1001A4D58);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 336) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100105EF0;
  return dispatch thunk of Future.then()(v0 + 152, v6, v7);
}

uint64_t sub_100105EF0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    *(void *)(v2 + 344) = *(void *)(v2 + 152);
    return _swift_task_switch(sub_100106060, 0, 0);
  }
}

uint64_t sub_100106060()
{
  uint64_t v1 = *(void **)(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 240);
  Set<>.nsNumbers.getter(*(void *)(v0 + 200));
  sub_10002EE34(0, (unint64_t *)&qword_1001A1CF0);
  sub_100042E58((unint64_t *)&qword_1001A1CF8, (unint64_t *)&qword_1001A1CF0);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v5 = [v1 lockupWithSignpostTags:isa];

  sub_10002EB60(&qword_1001A4D70);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_10014DF90;
  *(void *)(v6 + 32) = v5;
  uint64_t v15 = v6;
  specialized Array._endMutation()();
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v2, 1, 1, v7);
  sub_100052538(v3, v0 + 64);
  uint64_t v8 = (void *)swift_allocObject();
  _OWORD v8[2] = 0;
  v8[3] = 0;
  v8[4] = v15;
  sub_100031C10((long long *)(v0 + 64), (uint64_t)(v8 + 5));
  uint64_t v9 = *(void **)(v0 + 344);
  uint64_t v10 = *(void *)(v0 + 264);
  uint64_t v11 = *(void **)(v0 + 160);
  id v12 = v5;
  swift_bridgeObjectRetain();
  sub_1000AA41C(v10, (uint64_t)&unk_1001A4DA8, (uint64_t)v8);
  swift_release();

  swift_bridgeObjectRelease();
  void *v11 = v12;
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t sub_100106278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[10] = a8;
  v9[11] = v8;
  v9[8] = a6;
  v9[9] = a7;
  v9[6] = a4;
  v9[7] = a5;
  v9[4] = a2;
  v9[5] = a3;
  v9[3] = a1;
  v9[12] = swift_getObjectType();
  return _swift_task_switch(sub_1001062F8, 0, 0);
}

uint64_t sub_1001062F8()
{
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  long long v11 = *(_OWORD *)(v0 + 48);
  long long v12 = *(_OWORD *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = sub_10002EB60(&qword_1001A4DC8);
  uint64_t v6 = swift_task_alloc();
  *(void *)(v0 + 104) = v6;
  long long v7 = *(_OWORD *)(v0 + 32);
  *(void *)(v6 + 16) = v2;
  *(void *)(v6 + 24) = v4;
  *(_OWORD *)(v6 + 32) = v7;
  *(_OWORD *)(v6 + 48) = v11;
  *(_OWORD *)(v6 + 64) = v12;
  *(void *)(v6 + 80) = v3;
  *(void *)(v6 + 88) = v1;
  uint64_t v8 = sub_10002EE34(0, &qword_1001A4D40);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_100106450;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 16, v5, v8, 0, 0, &unk_1001A4DD8, v6, v5);
}

uint64_t sub_100106450()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10010656C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1001033D0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10010656C()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001066B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 232) = v13;
  *(void *)(v8 + 240) = v14;
  *(_OWORD *)(v8 + 216) = v12;
  *(void *)(v8 + 200) = a7;
  *(void *)(v8 + 208) = a8;
  *(void *)(v8 + 184) = a5;
  *(void *)(v8 + 192) = a6;
  *(void *)(v8 + 168) = a3;
  *(void *)(v8 + 176) = a4;
  *(void *)(v8 + 152) = a1;
  *(void *)(v8 + 160) = a2;
  sub_10002EB60(&qword_1001A2450);
  *(void *)(v8 + 248) = swift_task_alloc();
  *(void *)(v8 + 256) = swift_task_alloc();
  uint64_t v9 = sub_10002EB60(&qword_1001A4DE0);
  *(void *)(v8 + 264) = v9;
  *(void *)(v8 + 272) = *(void *)(v9 - 8);
  *(void *)(v8 + 280) = swift_task_alloc();
  return _swift_task_switch(sub_1001067DC, 0, 0);
}

uint64_t sub_1001067DC()
{
  *(void *)(v0 + 48) = @"app";
  *(_OWORD *)(v0 + 32) = xmmword_10014CD00;
  *(void *)(v0 + 288) = @"app";
  *(void *)(v0 + 296) = @"appDistributionApp";
  *(void *)(v0 + 56) = @"appDistributionApp";
  uint64_t v32 = type metadata accessor for TaskPriority();
  uint64_t v1 = *(void *)(v32 - 8);
  id v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56);
  uint64_t v30 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  uint64_t v29 = (void (**)(uint64_t, uint64_t))(v1 + 8);
  uint64_t v2 = @"app";
  uint64_t v3 = @"appDistributionApp";
  char v4 = 0;
  uint64_t v5 = 0;
  do
  {
    char v33 = v4;
    uint64_t v7 = *(void *)(v0 + 248);
    uint64_t v8 = *(void *)(v0 + 256);
    uint64_t v37 = *(void *)(v0 + 224);
    uint64_t v9 = *(void *)(v0 + 200);
    uint64_t v35 = *(void *)(v0 + 208);
    uint64_t v36 = *(void *)(v0 + 216);
    uint64_t v10 = *(void *)(v0 + 184);
    uint64_t v11 = *(void **)(v0 + 192);
    long long v12 = *(void **)(v0 + 168);
    uint64_t v34 = *(void *)(v0 + 176);
    uint64_t v13 = *(void **)(v0 + 48 + 8 * v5);
    long long v38 = *(_OWORD *)(v0 + 232);
    v31(v8, 1, 1, v32);
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = 0;
    *(void *)(v14 + 24) = 0;
    *(void *)(v14 + 32) = v12;
    *(void *)(v14 + 40) = v34;
    *(void *)(v14 + 48) = v10;
    *(void *)(v14 + 56) = v13;
    *(void *)(v14 + 64) = v11;
    *(void *)(v14 + 72) = v9;
    *(void *)(v14 + 80) = v35;
    *(void *)(v14 + 88) = v36;
    *(void *)(v14 + 96) = v37;
    *(_OWORD *)(v14 + 104) = v38;
    sub_1000BCC80(v8, v7);
    LODWORD(v7) = (*v30)(v7, 1, v32);
    id v15 = v13;
    id v16 = v12;
    swift_bridgeObjectRetain();
    id v17 = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v18 = *(void *)(v0 + 248);
    if (v7 == 1)
    {
      sub_100034B8C(v18, &qword_1001A2450);
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*v29)(v18, v32);
    }
    if (*(void *)(v14 + 16))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v19 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v21 = v20;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v21 = 0;
    }
    uint64_t v22 = **(void **)(v0 + 160);
    sub_10002EB60(&qword_1001A4DC8);
    uint64_t v23 = v21 | v19;
    if (v21 | v19)
    {
      uint64_t v23 = v0 + 64;
      *(void *)(v0 + 64) = 0;
      *(void *)(v0 + 72) = 0;
      *(void *)(v0 + 80) = v19;
      *(void *)(v0 + 88) = v21;
    }
    uint64_t v6 = *(void *)(v0 + 256);
    char v4 = 1;
    *(void *)(v0 + 96) = 1;
    *(void *)(v0 + 104) = v23;
    *(void *)(v0 + 112) = v22;
    swift_task_create();

    swift_release();
    sub_100034B8C(v6, &qword_1001A2450);
    uint64_t v5 = 1;
  }
  while ((v33 & 1) == 0);
  type metadata accessor for Kind(0);
  *(void *)(v0 + 304) = v24;
  swift_arrayDestroy();
  sub_10002EB60((uint64_t *)&unk_1001A3FC0);
  ThrowingTaskGroup.makeAsyncIterator()();
  *(void *)(v0 + 312) = _swiftEmptyDictionarySingleton;
  uint64_t v25 = sub_100061D9C(&qword_1001A4E00, &qword_1001A4DE0);
  uint64_t v26 = (void *)swift_task_alloc();
  *(void *)(v0 + 320) = v26;
  void *v26 = v0;
  v26[1] = sub_100106C14;
  uint64_t v27 = *(void *)(v0 + 264);
  return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 120, v27, v25);
}

uint64_t sub_100106C14()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 328) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = v2[34];
    uint64_t v3 = v2[35];
    uint64_t v5 = v2[33];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    uint64_t v6 = sub_100107244;
  }
  else
  {
    uint64_t v6 = sub_100106D58;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_100106D58()
{
  uint64_t v1 = *(void **)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 312);
  if (v1)
  {
    uint64_t v3 = *(void *)(v0 + 128);
    id v4 = v1;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v0 + 144) = v2;
    unint64_t v8 = sub_10003AA48(v4);
    uint64_t v9 = *(void *)(v2 + 16);
    BOOL v10 = (v6 & 1) == 0;
    uint64_t v11 = (void *)(v9 + v10);
    if (__OFADD__(v9, v10))
    {
      __break(1u);
    }
    else
    {
      char v12 = v6;
      if (*(void *)(*(void *)(v0 + 312) + 24) >= (uint64_t)v11)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          uint64_t v11 = sub_100040CEC();
        }
      }
      else
      {
        sub_10003DC60((uint64_t)v11, isUniquelyReferenced_nonNull_native);
        uint64_t v11 = (void *)sub_10003AA48(v4);
        if ((v12 & 1) != (v6 & 1))
        {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        unint64_t v8 = (unint64_t)v11;
      }
      uint64_t v32 = *(void **)(v0 + 144);
      if (v12)
      {
        uint64_t v33 = v32[7];
        swift_bridgeObjectRelease();
        *(void *)(v33 + 8 * v8) = v3;
LABEL_22:
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        *(void *)(v0 + 312) = v32;
        uint64_t v39 = sub_100061D9C(&qword_1001A4E00, &qword_1001A4DE0);
        int v40 = (void *)swift_task_alloc();
        *(void *)(v0 + 320) = v40;
        void *v40 = v0;
        v40[1] = sub_100106C14;
        uint64_t v41 = *(void *)(v0 + 264);
        return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 120, v41, v39);
      }
      v32[(v8 >> 6) + 8] |= 1 << v8;
      uint64_t v34 = 8 * v8;
      *(void *)(v32[6] + v34) = v4;
      *(void *)(v32[7] + v34) = v3;
      uint64_t v35 = v32[2];
      BOOL v36 = __OFADD__(v35, 1);
      uint64_t v37 = v35 + 1;
      if (!v36)
      {
        v32[2] = v37;
        id v38 = v4;
        goto LABEL_22;
      }
    }
    __break(1u);
    return dispatch thunk of Future.then()(v11, v6, v7);
  }
  (*(void (**)(void, void))(*(void *)(v0 + 272) + 8))(*(void *)(v0 + 280), *(void *)(v0 + 264));
  sub_10010BE38(*(void **)(v0 + 120));
  if (*(void *)(v2 + 16))
  {
    uint64_t v14 = sub_10003AA48(*(id *)(v0 + 288));
    uint64_t v15 = *(void *)(v0 + 312);
    id v16 = *(void **)(v0 + 288);
    if (v17)
    {
      uint64_t v18 = *(void *)(*(void *)(v15 + 56) + 8 * v14);
      swift_bridgeObjectRetain();

      if (*(void *)(v2 + 16))
      {
        uint64_t v19 = sub_10003AA48(*(id *)(v0 + 296));
        if (v20)
        {
          uint64_t v21 = *(void *)(v0 + 288);
          uint64_t v22 = *(void **)(v0 + 296);
          uint64_t v23 = *(void *)(v0 + 232);
          uint64_t v47 = *(void *)(v0 + 224);
          uint64_t v24 = *(void *)(v0 + 200);
          uint64_t v45 = *(void *)(v0 + 208);
          uint64_t v46 = *(void *)(v0 + 216);
          uint64_t v25 = *(void *)(v0 + 192);
          uint64_t v26 = *(void *)(v0 + 168);
          uint64_t v27 = *(void *)(*(void *)(v15 + 56) + 8 * v19);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();

          id v28 = sub_10002EC6C((void *)(v26 + OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_service), *(void *)(v26 + OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_service + 24));
          *(void *)(v0 + 336) = sub_1000E4DDC(v21, v25, v18, v27, v24, v45, v46, v47, v23, *v28);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v29 = sub_10002EB60(&qword_1001A4D10);
          uint64_t v30 = sub_100061D9C(&qword_1001A4D28, &qword_1001A4D10);
          id v31 = (void *)swift_task_alloc();
          *(void *)(v0 + 344) = v31;
          *id v31 = v0;
          v31[1] = sub_1001072C4;
          uint64_t v11 = (void *)(v0 + 136);
          uint64_t v6 = v29;
          uint64_t v7 = v30;
          return dispatch thunk of Future.then()(v11, v6, v7);
        }
        uint64_t v42 = *(void **)(v0 + 296);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    else
    {
    }
  }
  swift_bridgeObjectRelease();
  sub_10010BE78();
  swift_allocError();
  *uint64_t v43 = 1;
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v44 = *(uint64_t (**)(void))(v0 + 8);
  return v44();
}

uint64_t sub_100107244()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001072C4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    *(void *)(v2 + 352) = *(void *)(v2 + 136);
    return _swift_task_switch(sub_100107440, 0, 0);
  }
}

void sub_100107440()
{
  unint64_t v1 = v0[44];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    sub_10010BE78();
    swift_allocError();
    *uint64_t v6 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v4 = (void (*)(void))v0[1];
    goto LABEL_9;
  }
  if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_8;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    id v2 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v2 = *(id *)(v0[44] + 32);
  }
  uint64_t v3 = (void *)v0[19];
  swift_bridgeObjectRelease();
  *uint64_t v3 = v2;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v4 = (void (*)(void))v0[1];
LABEL_9:
  v4();
}

uint64_t sub_1001075C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 312) = v15;
  *(_OWORD *)(v8 + 296) = v14;
  *(_OWORD *)(v8 + 280) = v13;
  *(void *)(v8 + 264) = a7;
  *(void *)(v8 + 272) = a8;
  *(void *)(v8 + 248) = a5;
  *(void *)(v8 + 256) = a6;
  *(void *)(v8 + 232) = a1;
  *(void *)(v8 + 240) = a4;
  type metadata accessor for LogMessage.StringInterpolation();
  *(void *)(v8 + 320) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for OSLogger();
  *(void *)(v8 + 328) = v9;
  *(void *)(v8 + 336) = *(void *)(v9 - 8);
  *(void *)(v8 + 344) = swift_task_alloc();
  uint64_t v10 = sub_10002EB60(&qword_1001A19D8);
  *(void *)(v8 + 352) = v10;
  *(void *)(v8 + 360) = *(void *)(v10 - 8);
  *(void *)(v8 + 368) = swift_task_alloc();
  return _swift_task_switch(sub_100107738, 0, 0);
}

uint64_t sub_100107738()
{
  uint64_t v1 = v0[31];
  uint64_t v2 = v0[32];
  v0[47] = sub_10002EC6C((void *)(v0[30] + OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_fetcher), *(void *)(v0[30] + OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_fetcher + 24));
  sub_10002EB60(&qword_1001A4DA0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10014CED0;
  *(void *)(inited + 32) = v1;
  *(void *)(inited + 40) = v2;
  swift_bridgeObjectRetain();
  v0[48] = sub_10011A7F8(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  NSString v4 = String._bridgeToObjectiveC()();
  Bag.subscript.getter();

  uint64_t v5 = (void *)swift_task_alloc();
  v0[49] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1001078D0;
  uint64_t v6 = v0[44];
  return Bag.Value.current(or:)(v0 + 54, sub_100034500, 0, v6);
}

uint64_t sub_1001078D0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 368);
  uint64_t v2 = *(void *)(*(void *)v0 + 360);
  uint64_t v3 = *(void *)(*(void *)v0 + 352);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_100107A28, 0, 0);
}

uint64_t sub_100107A28()
{
  *(void *)(v0 + 400) = sub_10003408C(*(void *)(v0 + 384), *(void *)(v0 + 264), *(void *)(v0 + 272), *(void *)(v0 + 280), *(void *)(v0 + 288), *(void *)(v0 + 296), *(void *)(v0 + 304), *(void *)(v0 + 312), *(unsigned char *)(v0 + 432));
  swift_bridgeObjectRelease();
  uint64_t v1 = sub_10002EB60(&qword_1001A19F8);
  uint64_t v2 = sub_100061D9C((unint64_t *)&qword_1001A1A00, &qword_1001A19F8);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 408) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100107B50;
  return dispatch thunk of Future.then()(v0 + 192, v1, v2);
}

uint64_t sub_100107B50()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 416) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    uint64_t v3 = sub_100107D2C;
  }
  else
  {
    *(void *)(v2 + 424) = *(void *)(v2 + 192);
    uint64_t v3 = sub_100107C90;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100107C90()
{
  uint64_t v1 = v0[53];
  uint64_t v2 = (void *)v0[33];
  uint64_t v3 = (void *)v0[29];
  *uint64_t v3 = v2;
  v3[1] = v1;
  id v4 = v2;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100107D2C()
{
  uint64_t v29 = (void **)(v0 + 216);
  if (qword_1001A0E70 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 416);
  uint64_t v3 = *(void *)(v0 + 336);
  uint64_t v2 = *(void *)(v0 + 344);
  id v28 = (_OWORD *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 328);
  uint64_t v5 = *(void **)(v0 + 264);
  uint64_t v6 = sub_10002F6AC(v4, (uint64_t)qword_1001AE398);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v4);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v7._object = (void *)0x8000000100161230;
  v7._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v7);
  type metadata accessor for Kind(0);
  *(void *)(v0 + 152) = v8;
  *(void *)(v0 + 128) = v5;
  id v9 = v5;
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C(v0 + 128, &qword_1001A1C50);
  v10._uint64_t countAndFlagsBits = 8238;
  v10._object = (void *)0xE200000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v10);
  swift_getErrorValue();
  uint64_t v11 = *(void *)(v0 + 160);
  uint64_t v12 = *(void *)(v0 + 168);
  *(void *)(v0 + 120) = v12;
  long long v13 = sub_100031A88((uint64_t *)(v0 + 96));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v13, v11, v12);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C(v0 + 96, &qword_1001A1C50);
  v14._uint64_t countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v14);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  *(void *)(v0 + 208) = v1;
  swift_errorRetain();
  sub_10002EB60((uint64_t *)&unk_1001A3FC0);
  type metadata accessor for AMSError(0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v20 = v0 + 64;
    _OWORD *v28 = 0u;
    *(_OWORD *)(v0 + 80) = 0u;
LABEL_13:
    sub_100034B8C(v20, &qword_1001A1C50);
    goto LABEL_14;
  }
  uint64_t v15 = *v29;
  *(void *)(v0 + 224) = *v29;
  sub_10010BECC((unint64_t *)&unk_1001A4E10, type metadata accessor for AMSError);
  uint64_t v16 = _BridgedStoredNSError.userInfo.getter();

  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v16 + 16))
  {
    unint64_t v19 = sub_10003A860(v17, v18);
    uint64_t v20 = v0 + 64;
    if (v21)
    {
      sub_100042EB8(*(void *)(v16 + 56) + 32 * v19, (uint64_t)v28);
    }
    else
    {
      _OWORD *v28 = 0u;
      *(_OWORD *)(v0 + 80) = 0u;
    }
  }
  else
  {
    uint64_t v20 = v0 + 64;
    _OWORD *v28 = 0u;
    *(_OWORD *)(v0 + 80) = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 88)) {
    goto LABEL_13;
  }
  sub_10002EB60(&qword_1001A19D0);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    unint64_t v22 = *(void *)(v0 + 200);
    goto LABEL_15;
  }
LABEL_14:
  unint64_t v22 = sub_1000631C4((uint64_t)_swiftEmptyArrayStorage);
  swift_errorRelease();
LABEL_15:
  uint64_t v23 = *(void **)(v0 + 264);
  uint64_t v24 = *(void **)(v0 + 232);
  *uint64_t v24 = v23;
  v24[1] = v22;
  id v25 = v23;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
  return v26();
}

void sub_1001081A4(uint64_t a1, void *a2, void (*a3)(void, void *), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v37 = a4;
  BOOL v36 = a3;
  uint64_t v35 = a1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = type metadata accessor for CocoaError.Code();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for CocoaError();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&ObjectType - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10002EB60(&qword_1001A2450);
  __chkstk_darwin(v12 - 8);
  Swift::String v14 = (char *)&ObjectType - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = v4 + OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_service;
  sub_10002EC6C((void *)(v4 + OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_service), *(void *)(v4 + OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_service + 24));
  sub_10002EB60(&qword_1001A3460);
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  id v16 = [self currentConnection];
  if (v16 && (uint64_t v17 = v16, v18 = sub_10011B7A0(), v17, (v18 & 1) != 0))
  {
    uint64_t v19 = v5 + OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_appStateController;
    sub_100052538(v15, (uint64_t)&v39);
    sub_100052538(v19, (uint64_t)v38);
    uint64_t v20 = (void *)swift_allocObject();
    void v20[2] = a2;
    sub_100031C10(&v39, (uint64_t)(v20 + 3));
    v20[8] = v35;
    sub_100031C10(v38, (uint64_t)(v20 + 9));
    v20[14] = ObjectType;
    sub_10002EB60(&qword_1001A4D58);
    id v21 = a2;
    swift_bridgeObjectRetain();
    uint64_t v22 = Promise.__allocating_init()();
    uint64_t v23 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v14, 1, 1, v23);
    uint64_t v24 = (void *)swift_allocObject();
    void v24[2] = 0;
    void v24[3] = 0;
    v24[4] = &unk_1001A4D50;
    uint64_t v24[5] = v20;
    v24[6] = v22;
    swift_retain();
    sub_1000F6C04((uint64_t)v14, (uint64_t)&unk_1001A4D60, (uint64_t)v24);
    swift_release();
    uint64_t v25 = swift_allocObject();
    uint64_t v26 = v37;
    *(void *)(v25 + 16) = v36;
    *(void *)(v25 + 24) = v26;
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = sub_10010B9C4;
    *(void *)(v27 + 24) = v25;
    *(void *)(v27 + 32) = "buildLockup(fromMediaAPIResponse:withContext:withReplyHandler:)";
    *(void *)(v27 + 40) = 63;
    *(unsigned char *)(v27 + 48) = 2;
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = sub_10010B9C4;
    *(void *)(v28 + 24) = v25;
    *(void *)(v28 + 32) = "buildLockup(fromMediaAPIResponse:withContext:withReplyHandler:)";
    *(void *)(v28 + 40) = 63;
    *(unsigned char *)(v28 + 48) = 2;
    uint64_t v29 = sub_10002EE34(0, (unint64_t *)&qword_1001A2170);
    swift_retain_n();
    swift_retain();
    uint64_t v30 = static OS_dispatch_queue.main.getter();
    uint64_t v40 = v29;
    uint64_t v41 = &protocol witness table for OS_dispatch_queue;
    *(void *)&long long v39 = v30;
    Promise.then(perform:orCatchError:on:)();
    swift_release();
    swift_release();
    sub_10002ED08((uint64_t)&v39);
    swift_release();
    swift_release();
  }
  else
  {
    static CocoaError.Code.featureUnsupported.getter();
    sub_10002EB60(&qword_1001A4CE0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10014CED0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v32;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = 0xD000000000000062;
    *(void *)(inited + 56) = 0x8000000100161130;
    sub_100062F68(inited);
    sub_10010BECC((unint64_t *)&unk_1001A4CE8, (void (*)(uint64_t))&type metadata accessor for CocoaError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v33 = (void *)CocoaError._nsError.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v36(0, v33);
  }
}

uint64_t sub_100108738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[17] = a4;
  v5[18] = a5;
  v5[15] = a2;
  v5[16] = a3;
  v5[14] = a1;
  sub_10002EB60(&qword_1001A2450);
  v5[19] = swift_task_alloc();
  return _swift_task_switch(sub_1001087D4, 0, 0);
}

uint64_t sub_1001087D4()
{
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = v2;
  if (v1 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v3 == v4)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v6 & 1) == 0)
    {
      uint64_t v7 = v0 + 96;
      uint64_t v8 = *(void *)(v0 + 136);
      uint64_t v9 = *(void *)(v0 + 120);
      uint64_t v10 = sub_10002EC6C(*(void **)(v0 + 128), *(void *)(*(void *)(v0 + 128) + 24));
      *(void *)(v0 + 184) = sub_1000E4468(@"app", v9, 0, v8, (uint64_t)&_swiftEmptySetSingleton, *v10);
      uint64_t v11 = sub_10002EB60(&qword_1001A4D58);
      uint64_t v12 = sub_100061D9C(&qword_1001A4D68, &qword_1001A4D58);
      uint64_t v13 = (void *)swift_task_alloc();
      *(void *)(v0 + 192) = v13;
      void *v13 = v0;
      Swift::String v14 = sub_100108D10;
      goto LABEL_9;
    }
  }
  uint64_t v7 = v0 + 104;
  uint64_t v15 = *(void *)(v0 + 136);
  sub_10002EC6C(*(void **)(v0 + 128), *(void *)(*(void *)(v0 + 128) + 24));
  *(void *)(v0 + 160) = sub_1000E4148(v15, (uint64_t)&_swiftEmptySetSingleton);
  uint64_t v11 = sub_10002EB60(&qword_1001A4D58);
  uint64_t v12 = sub_100061D9C(&qword_1001A4D68, &qword_1001A4D58);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v13;
  void *v13 = v0;
  Swift::String v14 = sub_100108A24;
LABEL_9:
  v13[1] = v14;
  return dispatch thunk of Future.then()(v7, v11, v12);
}

uint64_t sub_100108A24()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    *(void *)(v2 + 176) = *(void *)(v2 + 104);
    return _swift_task_switch(sub_100108B94, 0, 0);
  }
}

uint64_t sub_100108B94()
{
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 152);
  sub_10002EB60(&qword_1001A4D70);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10014DF90;
  *(void *)(v4 + 32) = v1;
  uint64_t v12 = v4;
  specialized Array._endMutation()();
  uint64_t v5 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v2, 1, 1, v5);
  sub_100052538(v3, v0 + 56);
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v12;
  sub_100031C10((long long *)(v0 + 56), (uint64_t)(v6 + 5));
  uint64_t v7 = *(void *)(v0 + 152);
  uint64_t v8 = *(void **)(v0 + 112);
  id v9 = *(id *)(v0 + 176);
  swift_bridgeObjectRetain();
  sub_1000AA41C(v7, (uint64_t)&unk_1001A4D80, (uint64_t)v6);
  swift_release();
  swift_bridgeObjectRelease();
  *uint64_t v8 = v9;
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_100108D10()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    *(void *)(v2 + 200) = *(void *)(v2 + 96);
    return _swift_task_switch(sub_100108E80, 0, 0);
  }
}

uint64_t sub_100108E80()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 152);
  sub_10002EB60(&qword_1001A4D70);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10014DF90;
  *(void *)(v4 + 32) = v1;
  uint64_t v12 = v4;
  specialized Array._endMutation()();
  uint64_t v5 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v2, 1, 1, v5);
  sub_100052538(v3, v0 + 16);
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v12;
  sub_100031C10((long long *)(v0 + 16), (uint64_t)(v6 + 5));
  uint64_t v7 = *(void *)(v0 + 152);
  uint64_t v8 = *(void **)(v0 + 112);
  id v9 = *(id *)(v0 + 200);
  swift_bridgeObjectRetain();
  sub_1000AA41C(v7, (uint64_t)&unk_1001A4D78, (uint64_t)v6);
  swift_release();
  swift_bridgeObjectRelease();
  *uint64_t v8 = v9;
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

void sub_1001090E8(void *a1, void (*a2)(void, void *), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v73 = a3;
  id v74 = a1;
  uint64_t v75 = a2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = type metadata accessor for CocoaError.Code();
  __chkstk_darwin(v5 - 8);
  id v71 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CocoaError();
  uint64_t v72 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10002EB60(&qword_1001A2450);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10002EB60(&qword_1001A19D8);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v16 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v17 = String._bridgeToObjectiveC()();
  Bag.subscript.getter();

  Bag.Value.current(or:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  if (v77 != 1)
  {
    static CocoaError.Code.featureUnsupported.getter();
    sub_10002EB60(&qword_1001A4CE0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10014CED0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v25;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = 0xD00000000000001FLL;
    *(void *)(inited + 56) = 0x80000001001610C0;
    sub_100062F68(inited);
    sub_10010BECC((unint64_t *)&unk_1001A4CE8, (void (*)(uint64_t))&type metadata accessor for CocoaError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v26 = (void *)CocoaError._nsError.getter();
    (*(void (**)(char *, uint64_t))(v72 + 8))(v9, v7);
    uint64_t v27 = v26;
    goto LABEL_10;
  }
  id v69 = v12;
  uint64_t v18 = v73;
  id v19 = [v74 kind];
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;
  if (v20 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v22 != v23)
  {
    char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if (v28) {
      goto LABEL_7;
    }
    static CocoaError.Code.featureUnsupported.getter();
    sub_10002EB60(&qword_1001A4CE0);
    uint64_t v40 = swift_initStackObject();
    *(_OWORD *)(v40 + 16) = xmmword_10014CED0;
    *(void *)(v40 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v40 + 40) = v41;
    *(void *)&long long v77 = 0;
    *((void *)&v77 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    strcpy((char *)&v77, "Lockup kind ");
    BYTE13(v77) = 0;
    HIWORD(v77) = -5120;
    id v42 = [v74 kind];
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v45 = v44;

    v46._uint64_t countAndFlagsBits = v43;
    v46._object = v45;
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    v47._object = (void *)0x80000001001610E0;
    v47._uint64_t countAndFlagsBits = 0xD000000000000018;
    String.append(_:)(v47);
    long long v48 = v77;
    *(void *)(v40 + 72) = &type metadata for String;
    *(_OWORD *)(v40 + 48) = v48;
    sub_100062F68(v40);
    sub_10010BECC((unint64_t *)&unk_1001A4CE8, (void (*)(uint64_t))&type metadata accessor for CocoaError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v26 = (void *)CocoaError._nsError.getter();
    (*(void (**)(char *, uint64_t))(v72 + 8))(v9, v7);
    uint64_t v27 = v26;
LABEL_10:
    v75(0, v27);

    return;
  }
  swift_bridgeObjectRelease_n();

LABEL_7:
  uint64_t v29 = v4;
  uint64_t v30 = (void *)(v4 + OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_service);
  sub_10002EC6C(v30, v30[3]);
  sub_10002EB60(&qword_1001A3460);
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  sub_10002EB60(&qword_1001A4CF8);
  uint64_t v31 = swift_initStackObject();
  *(_OWORD *)(v31 + 16) = xmmword_10014CED0;
  *(void *)(v31 + 32) = ASCSignpostTagUnique();
  uint64_t v32 = sub_10011B408(v31);
  swift_setDeallocating();
  id v33 = [self currentConnection];
  id v34 = v74;
  id v35 = [v74 clientID];
  if (v35)
  {
    BOOL v36 = v35;
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v39 = v38;
  }
  else
  {
    uint64_t v37 = 0;
    uint64_t v39 = 0;
  }
  unint64_t v49 = sub_10010DC40(v33, v37, v39, [v34 context]);
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  id v54 = v34;
  uint64_t v56 = v55;
  uint64_t v57 = v29 + OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_appStateController;
  sub_100052538((uint64_t)v30, (uint64_t)&v77);
  sub_100052538(v57, (uint64_t)v76);
  uint64_t v58 = (void *)swift_allocObject();
  sub_100031C10(&v77, (uint64_t)(v58 + 2));
  v58[7] = v54;
  v58[8] = v32;
  v58[9] = v49;
  v58[10] = v51;
  v58[11] = v53;
  v58[12] = v56;
  sub_100031C10(v76, (uint64_t)(v58 + 13));
  v58[18] = ObjectType;
  sub_10002EB60(&qword_1001A4D10);
  id v59 = v54;
  uint64_t v60 = Promise.__allocating_init()();
  uint64_t v61 = type metadata accessor for TaskPriority();
  uint64_t v62 = (uint64_t)v69;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v69, 1, 1, v61);
  id v63 = (void *)swift_allocObject();
  v63[2] = 0;
  v63[3] = 0;
  v63[4] = &unk_1001A4D08;
  v63[5] = v58;
  v63[6] = v60;
  swift_retain();
  sub_1000F6C04(v62, (uint64_t)&unk_1001A4D18, (uint64_t)v63);
  swift_release();
  uint64_t v64 = swift_allocObject();
  *(void *)(v64 + 16) = v75;
  *(void *)(v64 + 24) = v18;
  uint64_t v65 = swift_allocObject();
  *(void *)(v65 + 16) = sub_10010B698;
  *(void *)(v65 + 24) = v64;
  *(void *)(v65 + 32) = "getLockupCollection(with:withReplyHandler:)";
  *(void *)(v65 + 40) = 43;
  *(unsigned char *)(v65 + 48) = 2;
  uint64_t v66 = swift_allocObject();
  *(void *)(v66 + 16) = sub_10010B698;
  *(void *)(v66 + 24) = v64;
  *(void *)(v66 + 32) = "getLockupCollection(with:withReplyHandler:)";
  *(void *)(v66 + 40) = 43;
  *(unsigned char *)(v66 + 48) = 2;
  uint64_t v67 = sub_10002EE34(0, (unint64_t *)&qword_1001A2170);
  swift_retain_n();
  swift_retain();
  uint64_t v68 = static OS_dispatch_queue.main.getter();
  uint64_t v78 = v67;
  uint64_t v79 = &protocol witness table for OS_dispatch_queue;
  *(void *)&long long v77 = v68;
  Promise.then(perform:orCatchError:on:)();
  swift_release();
  swift_release();
  sub_10002ED08((uint64_t)&v77);
  swift_release();
  swift_release();
}

uint64_t sub_100109A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[16] = a8;
  v8[17] = v11;
  v8[14] = a6;
  v8[15] = a7;
  v8[12] = a4;
  v8[13] = a5;
  v8[10] = a2;
  v8[11] = a3;
  v8[9] = a1;
  sub_10002EB60(&qword_1001A2450);
  v8[18] = swift_task_alloc();
  return _swift_task_switch(sub_100109AE4, 0, 0);
}

uint64_t sub_100109AE4()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v14 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v5 = *(void **)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v6 = sub_10002EC6C(*(void **)(v0 + 80), *(void *)(*(void *)(v0 + 80) + 24));
  id v7 = [v5 id];
  id v8 = [v5 kind];
  id v9 = [v5 context];
  *(void *)(v0 + 152) = sub_1000E3B64((uint64_t)v7, (uint64_t)v8, (uint64_t)v9, (uint64_t)[v5 limit], v4, v3, v2, v14, v1, *v6);

  uint64_t v10 = sub_10002EB60(&qword_1001A4D10);
  uint64_t v11 = sub_100061D9C(&qword_1001A4D28, &qword_1001A4D10);
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100109CAC;
  return dispatch thunk of Future.then()(v0 + 56, v10, v11);
}

uint64_t sub_100109CAC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  *(void *)(*v1 + 168) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    swift_release();
    *(void *)(v2 + 176) = *(void *)(v2 + 56);
    return _swift_task_switch(sub_100109E20, 0, 0);
  }
}

uint64_t sub_100109E20()
{
  unint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v5 = *(void **)(v0 + 72);
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_10010B2A0(v1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v2, 1, 1, v7);
  sub_100052538(v3, v0 + 16);
  id v8 = (void *)swift_allocObject();
  _OWORD v8[2] = 0;
  v8[3] = 0;
  v8[4] = v6;
  sub_100031C10((long long *)(v0 + 16), (uint64_t)(v8 + 5));
  swift_bridgeObjectRetain();
  sub_1000AA41C(v2, (uint64_t)&unk_1001A4D38, (uint64_t)v8);
  swift_release();
  *uint64_t v5 = v6;
  swift_task_dealloc();
  id v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

void sub_100109FC4(void *a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6, void (*a7)(id, uint64_t, uint64_t))
{
  uint64_t v11 = _Block_copy(aBlock);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  id v14 = a3;
  id v13 = a1;
  a7(v14, a6, v12);
  swift_release();
}

void sub_10010A078(objc_class *a1, uint64_t a2, uint64_t a3)
{
  Class isa = a1;
  if (a1)
  {
    sub_10002EE34(0, &qword_1001A4D40);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  if (a2) {
    uint64_t v6 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v6 = 0;
  }
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);
}

uint64_t sub_10010A124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  uint64_t v6 = type metadata accessor for AppOffer();
  uint64_t v5[5] = v6;
  void v5[6] = *(void *)(v6 - 8);
  v5[7] = swift_task_alloc();
  v5[8] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for App.Kind();
  v5[9] = v7;
  v5[10] = *(void *)(v7 - 8);
  v5[11] = swift_task_alloc();
  type metadata accessor for AdamID();
  v5[12] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for App();
  v5[13] = v8;
  v5[14] = *(void *)(v8 - 8);
  v5[15] = swift_task_alloc();
  return _swift_task_switch(sub_10010A2D8, 0, 0);
}

uint64_t sub_10010A2D8()
{
  unint64_t v1 = *(void *)(v0 + 24);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    *(void *)(v0 + 128) = v18;
    if (v18) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 128) = v2;
    if (v2)
    {
LABEL_3:
      uint64_t v3 = *(void *)(v0 + 24);
      *(_DWORD *)(v0 + 192) = enum case for App.Kind.store(_:);
      if ((v3 & 0xC000000000000001) != 0) {
        id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v4 = *(id *)(v3 + 32);
      }
      uint64_t v5 = v4;
      *(void *)(v0 + 144) = v4;
      *(void *)(v0 + 152) = 1;
      uint64_t v6 = *(void **)(v0 + 32);
      uint64_t v7 = v6[3];
      uint64_t v8 = v6[4];
      sub_10002EC6C(v6, v7);
      id v9 = [v5 id];
      [v9 int64value];
      AdamID.init(value:)();
      *(void *)(v0 + 160) = 0;
      (*(void (**)(void, void, void))(*(void *)(v0 + 80) + 104))(*(void *)(v0 + 88), *(unsigned int *)(v0 + 192), *(void *)(v0 + 72));
      App.init(id:kind:)();

      id v10 = [v5 offer];
      uint64_t v11 = *(void *)(v0 + 64);
      if (v10)
      {
        uint64_t v13 = *(void *)(v0 + 48);
        uint64_t v12 = *(void *)(v0 + 56);
        uint64_t v14 = *(void *)(v0 + 40);
        swift_getObjectType();
        sub_100063DC8();
        swift_unknownObjectRelease();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v11, v12, v14);
      }
      else
      {
        static AppOffer.standard.getter();
      }
      uint64_t v15 = (void *)swift_task_alloc();
      *(void *)(v0 + 168) = v15;
      *uint64_t v15 = v0;
      v15[1] = sub_10010A698;
      uint64_t v16 = *(void *)(v0 + 120);
      uint64_t v17 = *(void *)(v0 + 64);
      return dispatch thunk of AppStateController.refreshUpdateRegistry(forApp:with:)(v16, v17, v7, v8);
    }
  }
  unint64_t v19 = *(void *)(v0 + 24);
  swift_bridgeObjectRelease();
  uint64_t v20 = sub_1000FF774(v19);
  uint64_t v21 = sub_100042CE4((unint64_t)v20);
  swift_bridgeObjectRelease();
  uint64_t v22 = sub_1000643BC(v21);
  *(void *)(v0 + 136) = v22;
  uint64_t v23 = v22;
  uint64_t v24 = *(void **)(v0 + 32);
  swift_bridgeObjectRelease();
  uint64_t v25 = v24[3];
  uint64_t v26 = v24[4];
  sub_10002EC6C(v24, v25);
  uint64_t v27 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v27;
  void *v27 = v0;
  v27[1] = sub_10010ABD8;
  return dispatch thunk of AppStateController.reloadState(forApps:synchronizing:)(v23, 1, v25, v26);
}

uint64_t sub_10010A698()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 120);
  uint64_t v2 = *(void *)(*(void *)v0 + 112);
  uint64_t v3 = *(void *)(*(void *)v0 + 104);
  uint64_t v4 = *(void *)(*(void *)v0 + 64);
  uint64_t v5 = *(void *)(*(void *)v0 + 48);
  uint64_t v6 = *(void *)(*(void *)v0 + 40);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_10010A84C, 0, 0);
}

uint64_t sub_10010A84C()
{
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 128);

  unint64_t v3 = *(void *)(v0 + 24);
  if (v1 == v2)
  {
    uint64_t v4 = *(void *)(v0 + 160);
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_1000FF774(v3);
    uint64_t v6 = sub_100042CE4((unint64_t)v5);
    swift_bridgeObjectRelease();
    uint64_t v7 = sub_1000643BC(v6);
    *(void *)(v0 + 136) = v7;
    if (v4)
    {
      swift_bridgeObjectRelease();
LABEL_13:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
      return v24();
    }
    uint64_t v14 = (void *)v7;
    uint64_t v15 = *(void **)(v0 + 32);
    swift_bridgeObjectRelease();
    uint64_t v16 = v15[3];
    uint64_t v17 = v15[4];
    sub_10002EC6C(v15, v16);
    uint64_t v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v18;
    *uint64_t v18 = v0;
    v18[1] = sub_10010ABD8;
    id v10 = v14;
    uint64_t v11 = 1;
    uint64_t v12 = v16;
    uint64_t v13 = v17;
    return dispatch thunk of AppStateController.reloadState(forApps:synchronizing:)(v10, v11, v12, v13);
  }
  uint64_t v8 = *(void *)(v0 + 152);
  uint64_t v9 = *(void *)(v0 + 160);
  if ((v3 & 0xC000000000000001) != 0) {
    id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v10 = *(id *)(v3 + 8 * v8 + 32);
  }
  unint64_t v19 = v10;
  *(void *)(v0 + 144) = v10;
  *(void *)(v0 + 152) = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    return dispatch thunk of AppStateController.reloadState(forApps:synchronizing:)(v10, v11, v12, v13);
  }
  uint64_t v20 = *(void **)(v0 + 32);
  uint64_t v21 = v20[3];
  uint64_t v22 = v20[4];
  sub_10002EC6C(v20, v21);
  id v23 = [v19 id];
  [v23 int64value];
  AdamID.init(value:)();
  *(void *)(v0 + 160) = v9;
  if (v9)
  {
    swift_bridgeObjectRelease();

    goto LABEL_13;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 80) + 104))(*(void *)(v0 + 88), *(unsigned int *)(v0 + 192), *(void *)(v0 + 72));
  App.init(id:kind:)();

  id v26 = [v19 offer];
  uint64_t v27 = *(void *)(v0 + 64);
  if (v26)
  {
    uint64_t v29 = *(void *)(v0 + 48);
    uint64_t v28 = *(void *)(v0 + 56);
    uint64_t v30 = *(void *)(v0 + 40);
    swift_getObjectType();
    sub_100063DC8();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))(v27, v28, v30);
  }
  else
  {
    static AppOffer.standard.getter();
  }
  uint64_t v31 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v31;
  *uint64_t v31 = v0;
  v31[1] = sub_10010A698;
  uint64_t v32 = *(void *)(v0 + 120);
  uint64_t v33 = *(void *)(v0 + 64);
  return dispatch thunk of AppStateController.refreshUpdateRegistry(forApp:with:)(v32, v33, v21, v22);
}

uint64_t sub_10010ABD8()
{
  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10010AD94;
  }
  else {
    uint64_t v2 = sub_10010ACEC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10010ACEC()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10010AD94()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10010AF18()
{
  return type metadata accessor for LockupFetcherClient();
}

uint64_t type metadata accessor for LockupFetcherClient()
{
  uint64_t result = qword_1001A4CD0;
  if (!qword_1001A4CD0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10010AF6C()
{
  uint64_t result = type metadata accessor for Bag();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10010B00C()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10010B044(objc_class *a1, uint64_t a2)
{
  sub_10010A078(a1, a2, *(void *)(v2 + 16));
}

Swift::Int sub_10010B04C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10002EB60((uint64_t *)&unk_1001A4E30);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_10002EE34(0, &qword_1001A1D40);
      do
      {
        swift_dynamicCast();
        sub_10002EE34(0, &qword_1001A4D40);
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_10003D98C(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }
  return v2;
}

void *sub_10010B2A0(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    Swift::Int result = _swiftEmptyArrayStorage;
    if (!v3) {
      break;
    }
    Swift::Int result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    if (v3 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v5 = 0;
    while (v3 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v6 = *(id *)(a1 + 8 * v5 + 32);
      }
      uint64_t v7 = v6;
      ++v5;
      Set<>.nsNumbers.getter(a2);
      sub_10002EE34(0, (unint64_t *)&qword_1001A1CF0);
      sub_100042E58((unint64_t *)&qword_1001A1CF8, (unint64_t *)&qword_1001A1CF0);
      Class isa = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v7 lockupWithSignpostTags:isa];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v3 == v5) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10010B460()
{
  sub_10002ED08(v0 + 16);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10002ED08(v0 + 104);

  return _swift_deallocObject(v0, 152, 7);
}

uint64_t sub_10010B4C0(uint64_t a1)
{
  uint64_t v4 = v1[7];
  uint64_t v5 = v1[8];
  uint64_t v6 = v1[9];
  uint64_t v7 = v1[10];
  uint64_t v8 = v1[11];
  uint64_t v9 = v1[12];
  unint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_100053090;
  return sub_100109A38(a1, (uint64_t)(v1 + 2), v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10010B5BC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100053090;
  unint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t))((char *)&dword_1001A4988
                                                                                   + dword_1001A4988);
  return v10(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10010B698(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_10010B6C4(void *a1)
{
  return sub_10010C5AC(a1, (uint64_t (*)(void, void, void, void, void, void))sub_10012D774);
}

uint64_t sub_10010B6DC(uint64_t a1)
{
  return sub_10010C5C8(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_10012DE00);
}

uint64_t sub_10010B6F8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100053090;
  return sub_10010A124(a1, v4, v5, v6, (uint64_t)(v1 + 5));
}

void sub_10010B7BC(uint64_t a1, uint64_t a2)
{
  sub_1000B675C(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_10010B7C4()
{
  sub_10002ED08(v0 + 24);
  swift_bridgeObjectRelease();
  sub_10002ED08(v0 + 72);

  return _swift_deallocObject(v0, 120, 7);
}

uint64_t sub_10010B814(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 64);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_100053090;
  return sub_100108738(a1, v4, v1 + 24, v5, v1 + 72);
}

uint64_t sub_10010B8E8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100053090;
  unint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t))((char *)&dword_1001A4990
                                                                                   + dword_1001A4990);
  return v10(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10010B9C4(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_10010B9F0(void *a1)
{
  return sub_10010C5AC(a1, (uint64_t (*)(void, void, void, void, void, void))sub_10012D408);
}

uint64_t sub_10010BA10()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10002ED08(v0 + 96);
  sub_10002ED08(v0 + 136);
  sub_10002ED08(v0 + 176);

  return _swift_deallocObject(v0, 224, 7);
}

uint64_t sub_10010BA88(uint64_t a1)
{
  char v13 = *(unsigned char *)(v1 + 16);
  uint64_t v10 = *(void *)(v1 + 32);
  uint64_t v11 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 40);
  uint64_t v5 = *(void *)(v1 + 56);
  uint64_t v6 = *(void *)(v1 + 64);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100053090;
  return sub_100105234(a1, v13, v11, v10, v9, v4, v5, v6);
}

uint64_t sub_10010BBB8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v9 = v2[6];
  uint64_t v10 = v2[7];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v11;
  void *v11 = v3;
  v11[1] = sub_100053090;
  return sub_1001066B8(a1, a2, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10010BCB8()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 120, 7);
}

uint64_t sub_10010BD28(uint64_t a1)
{
  uint64_t v4 = v1[3];
  uint64_t v12 = v1[2];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v9 = v1[8];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_10002F874;
  return sub_1001075C4(a1, v12, v4, v5, v6, v7, v8, v9);
}

void *sub_10010BE38(void *result)
{
  if (result)
  {

    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_10010BE78()
{
  unint64_t result = qword_1001A4E08;
  if (!qword_1001A4E08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A4E08);
  }
  return result;
}

uint64_t sub_10010BECC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10010BF14(objc_class *a1, uint64_t a2)
{
  sub_1001010DC(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_10010BF1C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10010BF54@<X0>(id *a1@<X0>, Swift::Int a2@<X8>)
{
  return sub_100100D30(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_10010BF70()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10010BFA8(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_10010BFD4()
{
  swift_release();

  return _swift_deallocObject(v0, 49, 7);
}

uint64_t sub_10010C00C(void *a1)
{
  return sub_10010C5AC(a1, (uint64_t (*)(void, void, void, void, void, void))sub_10012D720);
}

uint64_t sub_10010C024()
{
  sub_10002ED08((uint64_t)(v0 + 2));
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10002ED08((uint64_t)(v0 + 18));
  sub_10002ED08((uint64_t)(v0 + 23));

  return _swift_deallocObject(v0, 240, 7);
}

uint64_t sub_10010C0B4(uint64_t a1)
{
  uint64_t v12 = *(void *)(v1 + 56);
  char v10 = *(unsigned char *)(v1 + 64);
  uint64_t v4 = *(void *)(v1 + 88);
  uint64_t v8 = *(void *)(v1 + 80);
  uint64_t v9 = *(void *)(v1 + 72);
  uint64_t v5 = *(void *)(v1 + 96);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_100053090;
  return sub_1001011DC(a1, v1 + 16, v12, v10, v9, v8, v4, v5);
}

uint64_t sub_10010C1E8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10002F874;
  char v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t))((char *)&dword_1001A4988
                                                                                   + dword_1001A4988);
  return v10(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10010C2D0()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  sub_10002ED08(v0 + 40);

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10010C318(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[5];
  uint64_t v10 = v2[6];
  uint64_t v11 = v2[7];
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v12;
  *uint64_t v12 = v3;
  v12[1] = sub_100053090;
  return sub_100103450(a1, a2, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_10010C424()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 120, 7);
}

uint64_t sub_10010C49C(uint64_t a1)
{
  uint64_t v4 = v1[3];
  uint64_t v12 = v1[2];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v9 = v1[8];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_100053090;
  return sub_100104260(a1, v12, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_10010C5AC(void *a1, uint64_t (*a2)(void, void, void, void, void, void))
{
  return a2(*a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(unsigned __int8 *)(v2 + 48));
}

uint64_t sub_10010C5C8(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(unsigned __int8 *)(v2 + 48));
}

unsigned char *storeEnumTagSinglePayload for LockupFetcherClientError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10010C6ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LockupFetcherClientError()
{
  return &type metadata for LockupFetcherClientError;
}

unint64_t sub_10010C6E8()
{
  unint64_t result = qword_1001A4EA8;
  if (!qword_1001A4EA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A4EA8);
  }
  return result;
}

id sub_10010C788@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, "ams_isManagedAppleID");
  *a2 = (_BYTE)result;
  return result;
}

id sub_10010C7BC(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "ams_setManagedAppleID:", *a1);
}

uint64_t sub_10010C7D0(void *a1, void *a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_10002EB60(&qword_1001A2918);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v4 + OBJC_IVAR____TtC19appstorecomponentsd19ManagedRestrictions_accountsSubscription;
  uint64_t v12 = sub_10002EB60(&qword_1001A2920);
  uint64_t v13 = *(void *)(v12 - 8);
  unint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
  uint64_t v20 = v13 + 56;
  v19(v11, 1, 1, v12);
  sub_100052538((uint64_t)a1, v4 + 16);
  *(void *)(v4 + OBJC_IVAR____TtC19appstorecomponentsd19ManagedRestrictions_profile) = a2;
  *(void *)(v4 + OBJC_IVAR____TtC19appstorecomponentsd19ManagedRestrictions_notificationCenter) = a3;
  sub_10002EB60(&qword_1001A4FA0);
  swift_allocObject();
  id v14 = a2;
  id v15 = a3;
  *(void *)(v4 + OBJC_IVAR____TtC19appstorecomponentsd19ManagedRestrictions_onRestrictionsChange) = AsyncEvent.init()();
  [v15 addObserver:v4 selector:"effectiveSettingsChanged:" name:MCEffectiveSettingsChangedNotification object:v14];
  sub_10002EC6C(a1, a1[3]);
  dispatch thunk of AccountProvider.onActiveAccountChange.getter();
  swift_getObjectType();
  sub_10007FBA8();
  EventEmitter.addObserver<A>(on:target:method:)();

  swift_unknownObjectRelease();
  sub_10002ED08((uint64_t)v21);
  v19((uint64_t)v10, 0, 1, v12);
  uint64_t v16 = v4 + OBJC_IVAR____TtC19appstorecomponentsd19ManagedRestrictions_accountsSubscription;
  swift_beginAccess();
  sub_10010D704((uint64_t)v10, v16);
  swift_endAccess();
  sub_10002ED08((uint64_t)a1);
  return v4;
}

uint64_t sub_10010CA68()
{
  uint64_t v0 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v0 - 8);
  if (qword_1001A0E68 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for OSLogger();
  sub_10002F6AC(v1, (uint64_t)qword_1001AE380);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v2);
  LogMessage.StringInterpolation.appendInterpolation(identity:)();
  v3._object = (void *)0x8000000100161360;
  v3._uint64_t countAndFlagsBits = 0xD000000000000022;
  LogMessage.StringInterpolation.appendLiteral(_:)(v3);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  swift_retain();
  AsyncEvent.post(_:)();
  return swift_release();
}

uint64_t (*sub_10010CC54())()
{
  return sub_10010D76C;
}

uint64_t sub_10010CC94()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10002EB60(&qword_1001A2918);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10002EB60(&qword_1001A2920);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = OBJC_IVAR____TtC19appstorecomponentsd19ManagedRestrictions_notificationCenter;
  [*(id *)(v1 + OBJC_IVAR____TtC19appstorecomponentsd19ManagedRestrictions_notificationCenter) removeObserver:v1];
  uint64_t v10 = v1 + OBJC_IVAR____TtC19appstorecomponentsd19ManagedRestrictions_accountsSubscription;
  swift_beginAccess();
  sub_10010D774(v10, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100034B8C((uint64_t)v4, &qword_1001A2918);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    sub_10002EC6C((void *)(v1 + 16), *(void *)(v1 + 40));
    dispatch thunk of AccountProvider.onActiveAccountChange.getter();
    swift_getObjectType();
    dispatch thunk of EventEmitter.removeObserver(_:)();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  sub_10002ED08(v1 + 16);
  sub_100034B8C(v10, &qword_1001A2918);

  swift_release();
  return v1;
}

uint64_t sub_10010CEE4()
{
  sub_10010CC94();

  return swift_deallocClassInstance();
}

uint64_t sub_10010CF3C()
{
  return type metadata accessor for ManagedRestrictions();
}

uint64_t type metadata accessor for ManagedRestrictions()
{
  uint64_t result = qword_1001A4EF0;
  if (!qword_1001A4EF0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

{
  return type metadata accessor for ManagedRestrictions();
}

uint64_t sub_10010CF90()
{
  uint64_t v1 = sub_10002EB60(&qword_1001A19C0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = &v9[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = type metadata accessor for Account();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10002EC6C((void *)(v0 + 16), *(void *)(v0 + 40));
  dispatch thunk of AccountProvider.activeAccount.getter();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_100034B8C((uint64_t)v3, &qword_1001A19C0);
    return 0;
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 32))(v7, v3, v4);
    swift_getKeyPath();
    Account.subscript.getter();
    swift_release();
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
    return v9[15];
  }
}

uint64_t sub_10010D150()
{
  uint64_t v0 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v0 - 8);
  if (qword_1001A0E68 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for OSLogger();
  sub_10002F6AC(v1, (uint64_t)qword_1001AE380);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v2);
  LogMessage.StringInterpolation.appendInterpolation(identity:)();
  v3._object = (void *)0x8000000100161390;
  v3._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v3);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  swift_retain();
  AsyncEvent.post(_:)();
  return swift_release();
}

void sub_10010D428()
{
  sub_10010D4E0();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10010D4E0()
{
  if (!qword_1001A4F00)
  {
    sub_10002ED58(&qword_1001A2920);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001A4F00);
    }
  }
}

uint64_t sub_10010D53C()
{
  id v1 = [*(id *)(v0 + OBJC_IVAR____TtC19appstorecomponentsd19ManagedRestrictions_profile) effectiveValueForSetting:MCFeatureMaximumAppsRating];
  if (!v1) {
    return sub_1000FF76C();
  }
  Swift::String v2 = v1;
  id v3 = [v1 integerValue];

  return (uint64_t)v3;
}

id sub_10010D5EC@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, "ams_isManagedAppleID");
  *a2 = (_BYTE)result;
  return result;
}

id sub_10010D620(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "ams_setManagedAppleID:", *a1);
}

BOOL sub_10010D634()
{
  Boolean keyExistsAndHasValidFormat = 0;
  uint64_t v0 = (__CFString *)String._bridgeToObjectiveC()();
  id v1 = (__CFString *)String._bridgeToObjectiveC()();
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(v0, v1, &keyExistsAndHasValidFormat);

  if (AppBooleanValue) {
    BOOL v3 = keyExistsAndHasValidFormat == 0;
  }
  else {
    BOOL v3 = 1;
  }
  return !v3;
}

uint64_t sub_10010D704(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A2918);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10010D76C()
{
  return sub_10010CA68();
}

uint64_t sub_10010D774(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A2918);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t destroy for MediaClient()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for MediaClient(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MediaClient(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for MediaClient(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for MediaClient(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MediaClient(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MediaClient(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaClient()
{
  return &type metadata for MediaClient;
}

Swift::Int sub_10010D9B4()
{
  return Hasher._finalize()();
}

uint64_t sub_10010DA3C()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10010DAC0()
{
  return Hasher._finalize()();
}

uint64_t sub_10010DB44(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  BOOL v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (v7 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
    {
      return 1;
    }
    else
    {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

unint64_t sub_10010DBEC()
{
  unint64_t result = qword_1001A4FA8;
  if (!qword_1001A4FA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A4FA8);
  }
  return result;
}

unint64_t sub_10010DC40(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (!a1 || (id v8 = a1, v9 = sub_10011B884(a2, a3), v11 = v10, v8, !v11))
  {
    swift_bridgeObjectRelease();
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;
    if (v13 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v15 != v16)
    {
      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v18) {
        goto LABEL_18;
      }
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;
      if (v19 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v21 != v22)
      {
        char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v24 & 1) == 0)
        {
          uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v27 = v26;
          if (v25 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v27 != v28)
          {
            char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v30) {
              goto LABEL_24;
            }
            uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v33 = v32;
            if (v31 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v33 != v34)
            {
              _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_24;
            }
          }
          swift_bridgeObjectRelease_n();
LABEL_24:
          id v9 = (id)0xD00000000000001ELL;

          return (unint64_t)v9;
        }
LABEL_18:

        return 0xD000000000000014;
      }
    }
    swift_bridgeObjectRelease_n();
    goto LABEL_18;
  }
  id v12 = v8;
  sub_10011BB44(a2, a3);

  swift_bridgeObjectRelease();
  return (unint64_t)v9;
}

void *sub_10010DF0C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for LogMessage();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  BOOL v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v7 = *(void *)(a1 + 16);
  id v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v13[1] = v1;
    uint64_t v15 = _swiftEmptyArrayStorage;
    sub_1000C50F8(0, v7, 0);
    uint64_t v9 = a1 + 32;
    do
    {
      sub_100042EB8(v9, (uint64_t)v14);
      static LogMessage.safe(_:)();
      sub_100034B8C((uint64_t)v14, &qword_1001A1C50);
      id v8 = v15;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000C50F8(0, v8[2] + 1, 1);
        id v8 = v15;
      }
      unint64_t v11 = v8[2];
      unint64_t v10 = v8[3];
      if (v11 >= v10 >> 1)
      {
        sub_1000C50F8(v10 > 1, v11 + 1, 1);
        id v8 = v15;
      }
      _OWORD v8[2] = v11 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v11, v6, v3);
      uint64_t v15 = v8;
      v9 += 32;
      --v7;
    }
    while (v7);
  }
  return v8;
}

uint64_t sub_10010E0DC(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = a2;
  sub_100112894(a1, (uint64_t)sub_100112840, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease();
  if (v2) {
    swift_bridgeObjectRelease();
  }
  return v6;
}

Swift::Int sub_10010E168(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  swift_bridgeObjectRetain();
  Substring.init<A>(_:)();
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  if ((v13 & 0x1000000000000000) != 0) {
    goto LABEL_25;
  }
  swift_bridgeObjectRetain();
  Substring.init<A>(_:)();
  uint64_t v15 = v14;
  Swift::Int result = swift_bridgeObjectRelease();
  if ((v15 & 0x1000000000000000) != 0) {
    goto LABEL_25;
  }
  uint64_t v17 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0) {
    LOBYTE(v17) = 1;
  }
  uint64_t v18 = 4 << v17;
  unint64_t v19 = a1;
  if ((a1 & 0xC) == 4 << v17)
  {
    Swift::Int result = sub_10007627C(a1, a5, a6);
    unint64_t v19 = result;
  }
  uint64_t v40 = a3;
  unint64_t v20 = a2;
  unint64_t v21 = a5 & 0x800000000000000;
  if ((a6 & 0x1000000000000000) != 0)
  {
    uint64_t v23 = a6 & 0x2000000000000000;
    uint64_t v25 = a5 & 0xFFFFFFFFFFFFLL;
    unint64_t v24 = HIBYTE(a6) & 0xF;
    if ((a6 & 0x2000000000000000) != 0) {
      unint64_t v32 = HIBYTE(a6) & 0xF;
    }
    else {
      unint64_t v32 = a5 & 0xFFFFFFFFFFFFLL;
    }
    if (v32 < v19 >> 16) {
      goto LABEL_43;
    }
    Swift::Int result = String.UTF8View._foreignDistance(from:to:)();
    Swift::Int v22 = result;
    if (v21) {
      uint64_t v26 = 7;
    }
    else {
      uint64_t v26 = 11;
    }
  }
  else
  {
    Swift::Int v22 = v19 >> 16;
    uint64_t v23 = a6 & 0x2000000000000000;
    unint64_t v24 = HIBYTE(a6) & 0xF;
    uint64_t v25 = a5 & 0xFFFFFFFFFFFFLL;
    uint64_t v26 = 7;
  }
  if (!v23) {
    unint64_t v24 = v25;
  }
  uint64_t v27 = 4 << (v21 >> 59);
  unint64_t v28 = v26 | (v24 << 16);
  a2 = v20;
  if ((a6 & 0x1000000000000000) == 0) {
    uint64_t v27 = 8;
  }
  unint64_t v29 = v20;
  if ((v20 & 0xC) == v27)
  {
    unsigned __int16 v33 = v20;
    Swift::Int v34 = v22;
    Swift::Int result = sub_10007627C(v33, a5, a6);
    Swift::Int v22 = v34;
    unint64_t v29 = result;
  }
  if ((v26 & 0xC) == v18)
  {
    unsigned __int16 v35 = v26;
    Swift::Int v36 = v22;
    Swift::Int result = sub_10007627C(v35, a5, a6);
    Swift::Int v22 = v36;
    unint64_t v28 = result;
    if ((a6 & 0x1000000000000000) == 0)
    {
LABEL_17:
      uint64_t v30 = (v28 >> 16) - (v29 >> 16);
      if ((a4 & 0x1000000000000000) == 0) {
        goto LABEL_18;
      }
      goto LABEL_37;
    }
  }
  else if ((a6 & 0x1000000000000000) == 0)
  {
    goto LABEL_17;
  }
  if (v24 < v29 >> 16)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v24 >= v28 >> 16)
  {
    Swift::Int v37 = v22;
    uint64_t v38 = String.UTF8View._foreignDistance(from:to:)();
    Swift::Int v22 = v37;
    uint64_t v30 = v38;
    if ((a4 & 0x1000000000000000) == 0)
    {
LABEL_18:
      if ((a4 & 0x2000000000000000) != 0)
      {
        Swift::Int result = HIBYTE(a4) & 0xF;
        Swift::Int v31 = v22 + result;
        if (!__OFADD__(v22, result)) {
          goto LABEL_23;
        }
      }
      else
      {
        Swift::Int result = v40 & 0xFFFFFFFFFFFFLL;
        Swift::Int v31 = v22 + (v40 & 0xFFFFFFFFFFFFLL);
        if (!__OFADD__(v22, v40 & 0xFFFFFFFFFFFFLL)) {
          goto LABEL_23;
        }
      }
      goto LABEL_39;
    }
LABEL_37:
    Swift::Int v39 = v22;
    Swift::Int result = String.UTF8View._foreignCount()();
    Swift::Int v31 = v39 + result;
    if (!__OFADD__(v39, result))
    {
LABEL_23:
      Swift::Int result = v31 + v30;
      if (!__OFADD__(v31, v30))
      {
        String.reserveCapacity(_:)(result);
LABEL_25:
        String.subscript.getter();
        sub_100114DF8();
        String.append<A>(contentsOf:)();
        swift_bridgeObjectRelease();
        String.append<A>(contentsOf:)();
        sub_10010E808(a2, a5, a6);
        String.append<A>(contentsOf:)();
        swift_bridgeObjectRelease();
        return 0;
      }
      goto LABEL_40;
    }
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

Swift::Int sub_10010E4B0(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t v11 = String.index(after:)();
  swift_bridgeObjectRetain();
  Substring.init<A>(_:)();
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  if ((v13 & 0x1000000000000000) != 0) {
    goto LABEL_25;
  }
  swift_bridgeObjectRetain();
  Substring.init<A>(_:)();
  uint64_t v15 = v14;
  Swift::Int result = swift_bridgeObjectRelease();
  if ((v15 & 0x1000000000000000) != 0) {
    goto LABEL_25;
  }
  uint64_t v17 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0) {
    LOBYTE(v17) = 1;
  }
  uint64_t v18 = 4 << v17;
  unint64_t v19 = a1;
  if ((a1 & 0xC) == 4 << v17)
  {
    Swift::Int result = sub_10007627C(a1, a5, a6);
    unint64_t v19 = result;
  }
  uint64_t v40 = a3;
  unint64_t v20 = v11;
  unint64_t v21 = a5 & 0x800000000000000;
  if ((a6 & 0x1000000000000000) != 0)
  {
    uint64_t v23 = a6 & 0x2000000000000000;
    uint64_t v25 = a5 & 0xFFFFFFFFFFFFLL;
    unint64_t v24 = HIBYTE(a6) & 0xF;
    if ((a6 & 0x2000000000000000) != 0) {
      unint64_t v32 = HIBYTE(a6) & 0xF;
    }
    else {
      unint64_t v32 = a5 & 0xFFFFFFFFFFFFLL;
    }
    if (v32 < v19 >> 16) {
      goto LABEL_43;
    }
    Swift::Int result = String.UTF8View._foreignDistance(from:to:)();
    Swift::Int v22 = result;
    if (v21) {
      uint64_t v26 = 7;
    }
    else {
      uint64_t v26 = 11;
    }
  }
  else
  {
    Swift::Int v22 = v19 >> 16;
    uint64_t v23 = a6 & 0x2000000000000000;
    unint64_t v24 = HIBYTE(a6) & 0xF;
    uint64_t v25 = a5 & 0xFFFFFFFFFFFFLL;
    uint64_t v26 = 7;
  }
  if (!v23) {
    unint64_t v24 = v25;
  }
  uint64_t v27 = 4 << (v21 >> 59);
  unint64_t v28 = v26 | (v24 << 16);
  unint64_t v11 = v20;
  if ((a6 & 0x1000000000000000) == 0) {
    uint64_t v27 = 8;
  }
  unint64_t v29 = v20;
  if ((v20 & 0xC) == v27)
  {
    unsigned __int16 v33 = v20;
    Swift::Int v34 = v22;
    Swift::Int result = sub_10007627C(v33, a5, a6);
    Swift::Int v22 = v34;
    unint64_t v29 = result;
  }
  if ((v26 & 0xC) == v18)
  {
    unsigned __int16 v35 = v26;
    Swift::Int v36 = v22;
    Swift::Int result = sub_10007627C(v35, a5, a6);
    Swift::Int v22 = v36;
    unint64_t v28 = result;
    if ((a6 & 0x1000000000000000) == 0)
    {
LABEL_17:
      uint64_t v30 = (v28 >> 16) - (v29 >> 16);
      if ((a4 & 0x1000000000000000) == 0) {
        goto LABEL_18;
      }
      goto LABEL_37;
    }
  }
  else if ((a6 & 0x1000000000000000) == 0)
  {
    goto LABEL_17;
  }
  if (v24 < v29 >> 16)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v24 >= v28 >> 16)
  {
    Swift::Int v37 = v22;
    uint64_t v38 = String.UTF8View._foreignDistance(from:to:)();
    Swift::Int v22 = v37;
    uint64_t v30 = v38;
    if ((a4 & 0x1000000000000000) == 0)
    {
LABEL_18:
      if ((a4 & 0x2000000000000000) != 0)
      {
        Swift::Int result = HIBYTE(a4) & 0xF;
        Swift::Int v31 = v22 + result;
        if (!__OFADD__(v22, result)) {
          goto LABEL_23;
        }
      }
      else
      {
        Swift::Int result = v40 & 0xFFFFFFFFFFFFLL;
        Swift::Int v31 = v22 + (v40 & 0xFFFFFFFFFFFFLL);
        if (!__OFADD__(v22, v40 & 0xFFFFFFFFFFFFLL)) {
          goto LABEL_23;
        }
      }
      goto LABEL_39;
    }
LABEL_37:
    Swift::Int v39 = v22;
    Swift::Int result = String.UTF8View._foreignCount()();
    Swift::Int v31 = v39 + result;
    if (!__OFADD__(v39, result))
    {
LABEL_23:
      Swift::Int result = v31 + v30;
      if (!__OFADD__(v31, v30))
      {
        String.reserveCapacity(_:)(result);
LABEL_25:
        String.subscript.getter();
        sub_100114DF8();
        String.append<A>(contentsOf:)();
        swift_bridgeObjectRelease();
        String.append<A>(contentsOf:)();
        sub_10010E808(v11, a5, a6);
        String.append<A>(contentsOf:)();
        swift_bridgeObjectRelease();
        return 0;
      }
      goto LABEL_40;
    }
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

unint64_t sub_10010E808(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 >= result >> 14) {
    return String.subscript.getter();
  }
  __break(1u);
  return result;
}

uint64_t sub_10010E854(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v25 = a6;
  uint64_t v26 = a4;
  uint64_t v10 = sub_10002EB60(&qword_1001A50A0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DateInterval();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009713C((uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_100034B8C((uint64_t)v12, &qword_1001A50A0);
    sub_1000958AC();
    swift_allocError();
    *(_OWORD *)uint64_t v17 = 0u;
    *(_OWORD *)(v17 + 16) = 0u;
    *(unsigned char *)(v17 + 32) = 7;
    return swift_willThrow();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    id v19 = [a2 tags];
    sub_10002EE34(0, (unint64_t *)&qword_1001A1CF0);
    sub_100114E54();
    uint64_t v20 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v21 = sub_10003A148(v20, (uint64_t)sub_100093CFC, 0);
    if (*(void *)(v21 + 16))
    {
      sub_10010EB4C(a1, (uint64_t)v16, v21, a5, v25, a3, v26);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      return swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_1000958AC();
      swift_allocError();
      *(void *)uint64_t v23 = 1;
      *(void *)(v23 + 8) = 0;
      *(void *)(v23 + 16) = 0;
      *(void *)(v23 + 24) = 0;
      *(unsigned char *)(v23 + 32) = 7;
      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    }
  }
}

uint64_t sub_10010EB4C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned __int16 v35 = &_swiftEmptySetSingleton;
  uint64_t v11 = self;
  id v12 = [v11 subsystem];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  id v16 = [v11 category];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  uint64_t v20 = a4;
  uint64_t v29 = a3;
  uint64_t v30 = (void **)&v35;
  Swift::Int v31 = a4;
  uint64_t v32 = a5;
  uint64_t v33 = a6;
  uint64_t v34 = a7;
  sub_100125170(a2, v13, v15, v17, v19, (uint64_t)sub_100114EBC, (uint64_t)v28);
  if (v27)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v21 = v35;
    if (v35[2])
    {
      sub_1000958AC();
      uint64_t v22 = swift_allocError();
      *(void *)uint64_t v23 = v21;
      *(void *)(v23 + 8) = 0;
      *(void *)(v23 + 16) = 0;
      *(void *)(v23 + 24) = 0;
      *(unsigned char *)(v23 + 32) = 6;
      swift_bridgeObjectRetain();
      v20(v22);
      swift_errorRelease();
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_10010ED08(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for CharacterSet();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v26[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v32 = _swiftEmptyDictionarySingleton;
  uint64_t v27 = &v32;
  sub_10010E854(a1, a2, (uint64_t)sub_100114E4C, (uint64_t)v26, (void (*)(uint64_t))sub_10010F0C8, 0);
  if (v2) {
    return swift_bridgeObjectRelease();
  }
  if (!v32[2])
  {
    sub_1000958AC();
    swift_allocError();
    *(void *)uint64_t v22 = 2;
    *(void *)(v22 + 8) = 0;
    *(void *)(v22 + 16) = 0;
    *(void *)(v22 + 24) = 0;
    *(unsigned char *)(v22 + 32) = 7;
    swift_willThrow();
    return swift_bridgeObjectRelease();
  }
  id v10 = [self category];
  unint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v13 = v12;

  *(void *)&long long v30 = countAndFlagsBits;
  *((void *)&v30 + 1) = v13;
  static CharacterSet.lowercaseLetters.getter();
  sub_1000959C0();
  StringProtocol.rangeOfCharacter(from:options:range:)();
  char v15 = v14;
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  if (v15)
  {
    Swift::String v23 = String.lowercased()();
    unint64_t countAndFlagsBits = v23._countAndFlagsBits;
    object = v23._object;
LABEL_11:
    swift_bridgeObjectRelease();
    unint64_t v13 = (unint64_t)object;
    goto LABEL_12;
  }
  unint64_t v16 = String.index(_:offsetBy:limitedBy:)();
  if ((v17 & 1) == 0)
  {
    unint64_t v18 = v16;
    if (v16 >= 0x4000)
    {
      String.subscript.getter();
      Swift::String v25 = Substring.lowercased()();
      swift_bridgeObjectRelease();
      unint64_t countAndFlagsBits = sub_10010E168(0xFuLL, v18, v25._countAndFlagsBits, (unint64_t)v25._object, countAndFlagsBits, v13);
    }
    else
    {
      swift_bridgeObjectRetain();
      String.index(after:)();
      String.subscript.getter();
      swift_bridgeObjectRelease();
      Swift::String v19 = Substring.lowercased()();
      swift_bridgeObjectRelease();
      unint64_t countAndFlagsBits = sub_10010E4B0(0xFuLL, v18, v19._countAndFlagsBits, (unint64_t)v19._object, countAndFlagsBits, v13);
    }
    object = v20;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
LABEL_12:
  Swift::Int v31 = &type metadata for String;
  *(void *)&long long v30 = countAndFlagsBits;
  *((void *)&v30 + 1) = v13;
  sub_100042EA8(&v30, v29);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v28 = v32;
  uint64_t v32 = (void *)0x8000000000000000;
  sub_10003EBAC(v29, 0x707954746E657665, 0xE900000000000065, isUniquelyReferenced_nonNull_native);
  uint64_t v32 = v28;
  swift_bridgeObjectRelease();
  return (uint64_t)v32;
}

uint64_t sub_10010F0C8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = type metadata accessor for OSLogger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = a1;
  swift_errorRetain();
  sub_10002EB60((uint64_t *)&unk_1001A3FC0);
  if (swift_dynamicCast())
  {
    if (v23 == 7 && (!(v21 | v20 | v19 | v22) || v19 == 1 && !(v21 | v20 | v22)))
    {
      swift_errorRelease();
      swift_willThrow();
      return swift_errorRetain();
    }
    sub_100095B24(v19, v20, v21, v22, v23);
  }
  v17[0] = v1;
  swift_errorRelease();
  if (qword_1001A0E78 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_10002F6AC(v4, (uint64_t)qword_1001AE3B0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v10._unint64_t countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v10);
  uint64_t v11 = sub_10002EE34(0, &qword_1001A50A8);
  uint64_t v22 = sub_10002EB60(&qword_1001A50B0);
  uint64_t v19 = v11;
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)&v19, &qword_1001A1C50);
  v12._object = (void *)0x8000000100161740;
  v12._unint64_t countAndFlagsBits = 0xD000000000000020;
  LogMessage.StringInterpolation.appendLiteral(_:)(v12);
  swift_getErrorValue();
  uint64_t v13 = v17[1];
  uint64_t v14 = v18;
  uint64_t v22 = v18;
  char v15 = sub_100031A88(&v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v15, v13, v14);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)&v19, &qword_1001A1C50);
  v16._unint64_t countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v16);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_10010F490(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = a2;
  uint64_t v27[2] = a1;
  uint64_t v2 = type metadata accessor for CharacterSet();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PreferenceNamespace();
  __chkstk_darwin(v6 - 8);
  uint64_t v28 = sub_10002EB60((uint64_t *)&unk_1001A5080);
  uint64_t v30 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002EB60(&qword_1001A4DA0);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_10014CED0;
  id v10 = [self category];
  unint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v13 = v12;

  unint64_t v31 = countAndFlagsBits;
  unint64_t v32 = v13;
  static CharacterSet.lowercaseLetters.getter();
  sub_1000959C0();
  StringProtocol.rangeOfCharacter(from:options:range:)();
  char v15 = v14;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v15)
  {
    Swift::String v22 = String.lowercased()();
    unint64_t countAndFlagsBits = v22._countAndFlagsBits;
    object = v22._object;
  }
  else
  {
    unint64_t v16 = String.index(_:offsetBy:limitedBy:)();
    if (v17) {
      goto LABEL_10;
    }
    unint64_t v18 = v16;
    if (v16 >= 0x4000)
    {
      String.subscript.getter();
      Swift::String v24 = Substring.lowercased()();
      swift_bridgeObjectRelease();
      Swift::Int v20 = sub_10010E168(0xFuLL, v18, v24._countAndFlagsBits, (unint64_t)v24._object, countAndFlagsBits, v13);
    }
    else
    {
      swift_bridgeObjectRetain();
      String.index(after:)();
      v27[1] = String.subscript.getter();
      swift_bridgeObjectRelease();
      Swift::String v19 = Substring.lowercased()();
      swift_bridgeObjectRelease();
      Swift::Int v20 = sub_10010E4B0(0xFuLL, v18, v19._countAndFlagsBits, (unint64_t)v19._object, countAndFlagsBits, v13);
    }
    unint64_t countAndFlagsBits = v20;
    object = v21;
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  unint64_t v13 = (unint64_t)object;
LABEL_10:
  uint64_t v25 = v28;
  swift_getObjectType();
  *(void *)(v9 + 32) = countAndFlagsBits;
  *(void *)(v9 + 40) = v13;
  PreferenceNamespace.init(components:)();
  PreferenceKey.init(_:in:)();
  Preferences.subscript.getter();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v25);
  return v31 & 1;
}

uint64_t sub_10010F898@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v43 = a1;
  uint64_t v40 = a3;
  uint64_t v3 = type metadata accessor for CharacterSet();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PreferenceNamespace();
  __chkstk_darwin(v7 - 8);
  Swift::String v46 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_10002EB60(&qword_1001A50B8);
  uint64_t v47 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v44 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10002EB60((uint64_t *)&unk_1001A50C0);
  __chkstk_darwin(v10 - 8);
  uint64_t v45 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  Swift::Int v39 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002EB60(&qword_1001A4DA0);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_10014CED0;
  id v16 = [self category];
  unint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v19 = v18;

  unint64_t v48 = countAndFlagsBits;
  unint64_t v49 = v19;
  static CharacterSet.lowercaseLetters.getter();
  sub_1000959C0();
  StringProtocol.rangeOfCharacter(from:options:range:)();
  char v21 = v20;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (v21)
  {
    Swift::String v29 = String.lowercased()();
    unint64_t countAndFlagsBits = v29._countAndFlagsBits;
    object = v29._object;
    uint64_t v25 = v40;
  }
  else
  {
    unint64_t v22 = String.index(_:offsetBy:limitedBy:)();
    if (v23)
    {
      uint64_t v25 = v40;
      goto LABEL_10;
    }
    unint64_t v24 = v22;
    uint64_t v25 = v40;
    if (v22 >= 0x4000)
    {
      String.subscript.getter();
      Swift::String v31 = Substring.lowercased()();
      swift_bridgeObjectRelease();
      Swift::Int v27 = sub_10010E168(0xFuLL, v24, v31._countAndFlagsBits, (unint64_t)v31._object, countAndFlagsBits, v19);
    }
    else
    {
      swift_bridgeObjectRetain();
      String.index(after:)();
      uint64_t v38 = String.subscript.getter();
      swift_bridgeObjectRelease();
      Swift::String v26 = Substring.lowercased()();
      swift_bridgeObjectRelease();
      Swift::Int v27 = sub_10010E4B0(0xFuLL, v24, v26._countAndFlagsBits, (unint64_t)v26._object, countAndFlagsBits, v19);
    }
    unint64_t countAndFlagsBits = v27;
    object = v28;
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  unint64_t v19 = (unint64_t)object;
LABEL_10:
  uint64_t v32 = v41;
  swift_getObjectType();
  *(void *)(v15 + 32) = countAndFlagsBits;
  *(void *)(v15 + 40) = v19;
  PreferenceNamespace.init(components:)();
  uint64_t v33 = v44;
  PreferenceKey.init(_:in:)();
  uint64_t v34 = (uint64_t)v45;
  Preferences.subscript.getter();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v33, v32);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v34, 1, v12) == 1)
  {
    sub_100034B8C(v34, (uint64_t *)&unk_1001A50C0);
    uint64_t v35 = 1;
  }
  else
  {
    Swift::Int v36 = v39;
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v39, v34, v12);
    static Date.+ infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v36, v12);
    uint64_t v35 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v25, v35, 1, v12);
}

unint64_t sub_10010FE34(uint64_t a1, uint64_t a2, double a3, double a4)
{
  sub_10002EB60(&qword_1001A4CE0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10014E610;
  *(void *)(inited + 32) = 0xD000000000000011;
  *(void *)(inited + 40) = 0x80000001001616E0;
  id v9 = [objc_allocWithZone((Class)NSNumber) initWithDouble:a3];
  uint64_t v10 = sub_10002EE34(0, (unint64_t *)&qword_1001A1CF0);
  *(void *)(inited + 48) = v9;
  *(void *)(inited + 72) = v10;
  *(void *)(inited + 80) = 0xD000000000000010;
  *(void *)(inited + 88) = 0x8000000100161700;
  *(void *)(inited + 96) = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithBool:", sub_10010F490(a1, a2) & 1);
  *(void *)(inited + 120) = v10;
  *(void *)(inited + 128) = 0xD000000000000019;
  *(void *)(inited + 136) = 0x8000000100161720;
  id v11 = [objc_allocWithZone((Class)NSNumber) initWithDouble:a4];
  *(void *)(inited + 168) = v10;
  *(void *)(inited + 144) = v11;
  return sub_100062F68(inited);
}

uint64_t sub_10010FFA4(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v62 = type metadata accessor for CharacterSet();
  uint64_t v60 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  id v59 = (char *)v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for PreferenceNamespace();
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10002EB60(&qword_1001A50B8);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10002EB60((uint64_t *)&unk_1001A50C0);
  uint64_t v15 = ((uint64_t (*)(uint64_t))__chkstk_darwin)(v14 - 8);
  char v17 = (char *)v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  unint64_t v19 = (char *)v57 - v18;
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = ((uint64_t (*)(uint64_t))__chkstk_darwin)(v20);
  unint64_t v24 = (char *)v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  Swift::String v26 = (char *)v57 - v25;
  uint64_t v61 = a1;
  if (sub_10010F490(a1, a2)) {
    return 1;
  }
  uint64_t v28 = v62;
  v57[0] = v17;
  v57[1] = v10;
  v57[2] = v13;
  uint64_t v58 = a2;
  if (a4 <= 0.0) {
    return 0;
  }
  if (a4 < 1.0)
  {
    sub_10010F898(v61, v58, (uint64_t)v19);
    uint64_t v29 = v20;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
    {
      sub_100034B8C((uint64_t)v19, (uint64_t *)&unk_1001A50C0);
      uint64_t v30 = v28;
      uint64_t v32 = v59;
      uint64_t v31 = v60;
      goto LABEL_8;
    }
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v26, v19, v20);
    Date.init()();
    char v33 = static Date.< infix(_:_:)();
    uint64_t v34 = *(void (**)(char *, uint64_t))(v21 + 8);
    v34(v24, v20);
    v34(v26, v20);
    uint64_t v30 = v28;
    uint64_t v32 = v59;
    uint64_t v31 = v60;
    if ((v33 & 1) == 0)
    {
LABEL_8:
      double v35 = (double)sub_100112BEC(0x20000000000001uLL) * 1.11022302e-16 + 0.0;
      if (fabs(v35)) {
        BOOL v36 = v35 > a4;
      }
      else {
        BOOL v36 = 1;
      }
      if (!v36)
      {
        sub_10002EB60(&qword_1001A4DA0);
        uint64_t v38 = swift_allocObject();
        *(_OWORD *)(v38 + 16) = xmmword_10014CED0;
        id v39 = [self category];
        unint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v42 = v41;

        unint64_t v63 = v40;
        unint64_t v64 = v42;
        static CharacterSet.lowercaseLetters.getter();
        sub_1000959C0();
        StringProtocol.rangeOfCharacter(from:options:range:)();
        char v44 = v43;
        (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v30);
        uint64_t v62 = v38;
        if (v44)
        {
          Swift::String v51 = String.lowercased()();
          uint64_t countAndFlagsBits = v51._countAndFlagsBits;
          object = v51._object;
        }
        else
        {
          unint64_t v45 = String.index(_:offsetBy:limitedBy:)();
          if (v46)
          {
            uint64_t countAndFlagsBits = v40;
LABEL_24:
            uint64_t v55 = v57[0];
            swift_getObjectType();
            uint64_t v56 = v62;
            *(void *)(v62 + 32) = countAndFlagsBits;
            *(void *)(v56 + 40) = v42;
            PreferenceNamespace.init(components:)();
            PreferenceKey.init(_:in:)();
            Date.init()();
            uint64_t v27 = 1;
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 56))(v55, 0, 1, v29);
            Preferences.subscript.setter();
            return v27;
          }
          unint64_t v47 = v45;
          if (v45 >= 0x4000)
          {
            String.subscript.getter();
            Swift::String v54 = Substring.lowercased()();
            swift_bridgeObjectRelease();
            Swift::Int v49 = sub_10010E168(0xFuLL, v47, v54._countAndFlagsBits, (unint64_t)v54._object, v40, v42);
          }
          else
          {
            swift_bridgeObjectRetain();
            String.index(after:)();
            String.subscript.getter();
            swift_bridgeObjectRelease();
            Swift::String v48 = Substring.lowercased()();
            swift_bridgeObjectRelease();
            Swift::Int v49 = sub_10010E4B0(0xFuLL, v47, v48._countAndFlagsBits, (unint64_t)v48._object, v40, v42);
          }
          uint64_t countAndFlagsBits = v49;
          object = v50;
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        unint64_t v42 = (unint64_t)object;
        goto LABEL_24;
      }
      return 0;
    }
  }
  return 1;
}

uint64_t sub_100110600(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v59 = a5;
  uint64_t v56 = a4;
  uint64_t v48 = a2;
  id v49 = a3;
  uint64_t v6 = type metadata accessor for MetricsData();
  uint64_t v52 = *(void (***)(char *, uint64_t))(v6 - 8);
  uint64_t v53 = v6;
  __chkstk_darwin(v6);
  Swift::String v51 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10002EB60((uint64_t *)&unk_1001A50D0);
  uint64_t v46 = *(void *)(v8 - 8);
  uint64_t v47 = v8;
  __chkstk_darwin(v8);
  unint64_t v45 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for MetricsFieldsContext();
  uint64_t v57 = *(void *)(v10 - 8);
  uint64_t v58 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (void (**)(char *, uint64_t))((char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for OSSignpostID();
  uint64_t v54 = *(void *)(v13 - 8);
  uint64_t v55 = v13;
  uint64_t v14 = *(void *)(v54 + 64);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v50 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  char v17 = (char *)&v45 - v16;
  uint64_t v18 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v18 - 8);
  uint64_t v19 = type metadata accessor for OSLogger();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0E78 != -1) {
    swift_once();
  }
  uint64_t v23 = sub_10002F6AC(v19, (uint64_t)qword_1001AE3B0);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, v23, v19);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v24._object = (void *)0x80000001001617D0;
  v24._uint64_t countAndFlagsBits = 0xD000000000000018;
  LogMessage.StringInterpolation.appendLiteral(_:)(v24);
  uint64_t v61 = sub_10002EE34(0, (unint64_t *)&qword_1001A1D98);
  v60[0] = (uint64_t)a1;
  a1;
  LogMessage.StringInterpolation.appendInterpolation(sensitive:)();
  sub_100034B8C((uint64_t)v60, &qword_1001A1C50);
  v25._uint64_t countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v25);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  sub_10002EE34(0, (unint64_t *)&unk_1001A3180);
  static OS_os_log.default.getter();
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  Swift::String v26 = (void *)static OS_os_log.default.getter();
  os_signpost(_:dso:log:name:signpostID:)();

  MetricsFieldsContext.init()();
  uint64_t v27 = v17;
  if (v48)
  {
    v60[0] = v48;
    uint64_t v28 = v45;
    static MetricsFieldsContext.Property<A>.pageFields.getter();
    sub_10002EB60(&qword_1001A2300);
    MetricsFieldsContext.addValue<A>(_:forProperty:)();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v28, v47);
  }
  if (v49)
  {
    v60[0] = (uint64_t)v49;
    uint64_t v29 = qword_1001A0DA0;
    id v30 = v49;
    if (v29 != -1) {
      swift_once();
    }
    uint64_t v31 = sub_10002EB60(&qword_1001A50E0);
    sub_10002F6AC(v31, (uint64_t)qword_1001AE268);
    sub_10002EE34(0, (unint64_t *)&qword_1001A5470);
    MetricsFieldsContext.addValue<A>(_:forProperty:)();
  }
  uint64_t v32 = v51;
  sub_10007F088();
  MetricsPipeline.process(_:using:)();
  v52[1](v32, v53);
  uint64_t v61 = type metadata accessor for SyncTaskScheduler();
  uint64_t v62 = &protocol witness table for SyncTaskScheduler;
  sub_100031A88(v60);
  SyncTaskScheduler.init()();
  uint64_t v34 = v54;
  uint64_t v33 = v55;
  double v35 = v50;
  (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v50, v27, v55);
  unint64_t v36 = (*(unsigned __int8 *)(v34 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  uint64_t v37 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v34 + 32))(v37 + v36, v35, v33);
  Promise.always(on:perform:)();
  swift_release();
  sub_10002ED08((uint64_t)v60);
  uint64_t v38 = swift_allocObject();
  uint64_t v39 = v56;
  uint64_t v52 = v12;
  uint64_t v53 = (uint64_t)v27;
  uint64_t v40 = v59;
  *(void *)(v38 + 16) = v56;
  *(void *)(v38 + 24) = v40;
  *(void *)(v38 + 32) = "processMetricsData(_:pageFields:activity:withReplyHandler:)";
  *(void *)(v38 + 40) = 59;
  *(unsigned char *)(v38 + 48) = 2;
  uint64_t v41 = swift_allocObject();
  *(void *)(v41 + 16) = v39;
  *(void *)(v41 + 24) = v40;
  *(void *)(v41 + 32) = "processMetricsData(_:pageFields:activity:withReplyHandler:)";
  *(void *)(v41 + 40) = 59;
  *(unsigned char *)(v41 + 48) = 2;
  uint64_t v42 = sub_10002EE34(0, (unint64_t *)&qword_1001A2170);
  swift_retain_n();
  uint64_t v43 = static OS_dispatch_queue.main.getter();
  uint64_t v61 = v42;
  uint64_t v62 = &protocol witness table for OS_dispatch_queue;
  v60[0] = v43;
  Promise.then(perform:orCatchError:on:)();
  swift_release();
  swift_release();
  sub_10002ED08((uint64_t)v60);
  swift_release();
  (*(void (**)(char *, uint64_t))(v57 + 8))((char *)v52, v58);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v53, v33);
}

uint64_t sub_100110F38(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  uint64_t v48 = a4;
  uint64_t v46 = a3;
  uint64_t v45 = a2;
  uint64_t v50 = type metadata accessor for CharacterSet();
  uint64_t v49 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for MetricsData();
  uint64_t v47 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for MetricsFieldsContext();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  char v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *a1;
  uint64_t v19 = self;
  id v20 = [v19 requiredFieldNames];
  uint64_t v21 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  uint64_t v22 = sub_100114BD4(v21, v18);
  swift_bridgeObjectRelease();
  if (*(void *)(v22 + 16))
  {
    uint64_t v53 = 2;
    sub_10002EB60(&qword_1001A4CE0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10014CD00;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v24;
    id v25 = [v19 category];
    unint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v28 = v27;

    unint64_t v51 = countAndFlagsBits;
    unint64_t v52 = v28;
    static CharacterSet.lowercaseLetters.getter();
    sub_1000959C0();
    StringProtocol.rangeOfCharacter(from:options:range:)();
    char v30 = v29;
    (*(void (**)(char *, uint64_t))(v49 + 8))(v10, v50);
    if (v30)
    {
      Swift::String v39 = String.lowercased()();
      unint64_t countAndFlagsBits = v39._countAndFlagsBits;
      object = v39._object;
    }
    else
    {
      unint64_t v31 = String.index(_:offsetBy:limitedBy:)();
      if (v32)
      {
LABEL_11:
        type metadata accessor for ASCMetricsError(0);
        *(void *)(inited + 72) = &type metadata for String;
        *(void *)(inited + 48) = countAndFlagsBits;
        *(void *)(inited + 56) = v28;
        *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(inited + 88) = v41;
        uint64_t v42 = sub_1000661D4(v22);
        swift_release();
        *(void *)(inited + 120) = sub_10002EB60((uint64_t *)&unk_1001A45C0);
        *(void *)(inited + 96) = v42;
        sub_100062F68(inited);
        sub_100114DA0();
        _BridgedStoredNSError.init(_:userInfo:)();
        sub_10002EB60(&qword_1001A5048);
        return Promise.__allocating_init(error:)();
      }
      unint64_t v33 = v31;
      if (v31 >= 0x4000)
      {
        String.subscript.getter();
        Swift::String v40 = Substring.lowercased()();
        swift_bridgeObjectRelease();
        unint64_t countAndFlagsBits = sub_10010E168(0xFuLL, v33, v40._countAndFlagsBits, (unint64_t)v40._object, countAndFlagsBits, v28);
      }
      else
      {
        swift_bridgeObjectRetain();
        String.index(after:)();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        Swift::String v34 = Substring.lowercased()();
        swift_bridgeObjectRelease();
        unint64_t countAndFlagsBits = sub_10010E4B0(0xFuLL, v33, v34._countAndFlagsBits, (unint64_t)v34._object, countAndFlagsBits, v28);
      }
      object = v35;
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    unint64_t v28 = (unint64_t)object;
    goto LABEL_11;
  }
  swift_release();
  swift_bridgeObjectRetain();
  unint64_t v37 = sub_10010FE34(v45, v46, a5, a6);
  sub_10010E0DC(v37, v18);
  MetricsFieldsContext.init()();
  MetricsData.init(topic:shouldFlush:fields:includingFields:excludingFields:)();
  uint64_t v38 = MetricsPipeline.process(_:using:)();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  return v38;
}

void sub_100111514()
{
  static os_signpost_type_t.end.getter();
  sub_10002EE34(0, (unint64_t *)&unk_1001A3180);
  id v0 = (id)static OS_os_log.default.getter();
  os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t sub_100111644(void (*a1)(char *, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v29 = a7;
  uint64_t v32 = a4;
  uint64_t v33 = a6;
  char v30 = a1;
  uint64_t v31 = a3;
  uint64_t v9 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = type metadata accessor for OSLogger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0E78 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_10002F6AC(v10, (uint64_t)qword_1001AE3B0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v15._object = (void *)0x80000001001615A0;
  v15._unint64_t countAndFlagsBits = 0xD00000000000001ALL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v15);
  double v35 = &type metadata for String;
  uint64_t v16 = v30;
  v34[0] = v30;
  v34[1] = a2;
  swift_bridgeObjectRetain();
  LogMessage.StringInterpolation.appendInterpolation(sensitive:)();
  sub_100034B8C((uint64_t)v34, &qword_1001A1C50);
  v17._unint64_t countAndFlagsBits = 0x636F6C20726F6620;
  v17._object = (void *)0xEC0000002070756BLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v17);
  double v35 = (void *)sub_10002EE34(0, &qword_1001A4D40);
  v34[0] = a5;
  id v18 = a5;
  LogMessage.StringInterpolation.appendInterpolation(sensitive:)();
  sub_100034B8C((uint64_t)v34, &qword_1001A1C50);
  v19._unint64_t countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v19);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  sub_10002EC6C((void *)(v28 + OBJC_IVAR____TtC19appstorecomponentsd13MetricsClient_metricsService), *(void *)(v28 + OBJC_IVAR____TtC19appstorecomponentsd13MetricsClient_metricsService + 24));
  sub_1000EF670(v16, a2, v31, v32, v18);
  uint64_t v20 = swift_allocObject();
  uint64_t v21 = v33;
  uint64_t v22 = v29;
  *(void *)(v20 + 16) = v33;
  *(void *)(v20 + 24) = v22;
  *(void *)(v20 + 32) = "recordCampaignToken(_:providerToken:with:withReplyHandler:)";
  *(void *)(v20 + 40) = 59;
  *(unsigned char *)(v20 + 48) = 2;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v21;
  *(void *)(v23 + 24) = v22;
  *(void *)(v23 + 32) = "recordCampaignToken(_:providerToken:with:withReplyHandler:)";
  *(void *)(v23 + 40) = 59;
  *(unsigned char *)(v23 + 48) = 2;
  uint64_t v24 = sub_10002EE34(0, (unint64_t *)&qword_1001A2170);
  swift_retain_n();
  uint64_t v25 = static OS_dispatch_queue.main.getter();
  double v35 = (void *)v24;
  unint64_t v36 = &protocol witness table for OS_dispatch_queue;
  v34[0] = v25;
  Promise.then(perform:orCatchError:on:)();
  swift_release();
  swift_release();
  sub_10002ED08((uint64_t)v34);
  return swift_release();
}

uint64_t sub_100111B78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v35 = a6;
  uint64_t v36 = a8;
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  uint64_t v32 = a3;
  uint64_t v31 = a9;
  uint64_t v12 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v12 - 8);
  uint64_t v13 = type metadata accessor for OSLogger();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0E78 != -1) {
    swift_once();
  }
  uint64_t v17 = sub_10002F6AC(v13, (uint64_t)qword_1001AE3B0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v17, v13);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v18._object = (void *)0x8000000100161530;
  v18._unint64_t countAndFlagsBits = 0xD000000000000013;
  LogMessage.StringInterpolation.appendLiteral(_:)(v18);
  uint64_t v38 = &type metadata for String;
  v37[0] = a1;
  v37[1] = a2;
  swift_bridgeObjectRetain();
  LogMessage.StringInterpolation.appendInterpolation(sensitive:)();
  sub_100034B8C((uint64_t)v37, &qword_1001A1C50);
  v19._unint64_t countAndFlagsBits = 0x636F6C20726F6620;
  v19._object = (void *)0xEC0000002070756BLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v19);
  uint64_t v38 = (void *)sub_10002EE34(0, &qword_1001A4D40);
  v37[0] = a7;
  id v20 = a7;
  LogMessage.StringInterpolation.appendInterpolation(sensitive:)();
  sub_100034B8C((uint64_t)v37, &qword_1001A1C50);
  v21._unint64_t countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v21);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  sub_10002EC6C((void *)(v30 + OBJC_IVAR____TtC19appstorecomponentsd13MetricsClient_metricsService), *(void *)(v30 + OBJC_IVAR____TtC19appstorecomponentsd13MetricsClient_metricsService + 24));
  id v22 = [v20 id];
  sub_1000EFE94(a1, a2, v32, v33, v34, v35, v22);

  uint64_t v23 = swift_allocObject();
  uint64_t v24 = v36;
  uint64_t v25 = v31;
  *(void *)(v23 + 16) = v36;
  *(void *)(v23 + 24) = v25;
  *(void *)(v23 + 32) = "recordQToken(_:campaignToken:advertisementID:with:withReplyHandler:)";
  *(void *)(v23 + 40) = 68;
  *(unsigned char *)(v23 + 48) = 2;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v24;
  *(void *)(v26 + 24) = v25;
  *(void *)(v26 + 32) = "recordQToken(_:campaignToken:advertisementID:with:withReplyHandler:)";
  *(void *)(v26 + 40) = 68;
  *(unsigned char *)(v26 + 48) = 2;
  uint64_t v27 = sub_10002EE34(0, (unint64_t *)&qword_1001A2170);
  swift_retain_n();
  uint64_t v28 = static OS_dispatch_queue.main.getter();
  uint64_t v38 = (void *)v27;
  Swift::String v39 = &protocol witness table for OS_dispatch_queue;
  v37[0] = v28;
  Promise.then(perform:orCatchError:on:)();
  swift_release();
  swift_release();
  sub_10002ED08((uint64_t)v37);
  return swift_release();
}

uint64_t sub_100112108(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LogMessageLevel();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for OSLogger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0E78 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_10002F6AC(v7, (uint64_t)qword_1001AE3B0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v12._object = (void *)0x8000000100161500;
  v12._unint64_t countAndFlagsBits = 0xD000000000000026;
  LogMessage.StringInterpolation.appendLiteral(_:)(v12);
  v17[3] = sub_10002EB60((uint64_t *)&unk_1001A5020);
  v17[0] = a1;
  swift_bridgeObjectRetain();
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)v17, &qword_1001A1C50);
  v13._unint64_t countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v13);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  sub_10010DF0C(a1);
  sub_10002EC6C((void *)(v16 + OBJC_IVAR____TtC19appstorecomponentsd13MetricsClient_metricsLogger), *(void *)(v16 + OBJC_IVAR____TtC19appstorecomponentsd13MetricsClient_metricsLogger + 24));
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for LogMessageLevel.error(_:), v2);
  dispatch thunk of Logger.log(contentsOf:withLevel:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_10011263C()
{
  return type metadata accessor for MetricsClient();
}

uint64_t type metadata accessor for MetricsClient()
{
  uint64_t result = qword_1001A5008;
  if (!qword_1001A5008) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100112690()
{
  uint64_t result = type metadata accessor for Bag();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for MetricsPipeline();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_100112778(void (*a1)(uint64_t *__return_ptr))
{
  a1(&v2);
  Promise.resolve(_:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100112808()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100112840@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  sub_100042EB8((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;

  return swift_bridgeObjectRetain();
}

uint64_t sub_100112894(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v50 = a1;
  uint64_t v51 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v52 = v8;
  uint64_t v53 = 0;
  uint64_t v54 = v11 & v9;
  uint64_t v55 = a2;
  uint64_t v56 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1001135EC(&v48);
  uint64_t v12 = *((void *)&v48 + 1);
  if (!*((void *)&v48 + 1)) {
    goto LABEL_27;
  }
  uint64_t v13 = v48;
  sub_100042EA8(v49, v47);
  uint64_t v14 = *(void **)a5;
  unint64_t v16 = sub_10003A860(v13, v12);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  char v20 = v15;
  if (v14[3] >= v19)
  {
    if (a4)
    {
      if (v15) {
        goto LABEL_12;
      }
    }
    else
    {
      sub_10003F960();
      if (v20) {
        goto LABEL_12;
      }
    }
LABEL_14:
    uint64_t v24 = *(void **)a5;
    *(void *)(*(void *)a5 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    uint64_t v25 = (uint64_t *)(v24[6] + 16 * v16);
    *uint64_t v25 = v13;
    v25[1] = v12;
    sub_100042EA8(v47, (_OWORD *)(v24[7] + 32 * v16));
    uint64_t v26 = v24[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    void v24[2] = v28;
LABEL_16:
    sub_1001135EC(&v48);
    for (uint64_t i = *((void *)&v48 + 1); *((void *)&v48 + 1); uint64_t i = *((void *)&v48 + 1))
    {
      uint64_t v31 = v48;
      sub_100042EA8(v49, v47);
      uint64_t v32 = *(void **)a5;
      unint64_t v34 = sub_10003A860(v31, i);
      uint64_t v35 = v32[2];
      BOOL v36 = (v33 & 1) == 0;
      uint64_t v37 = v35 + v36;
      if (__OFADD__(v35, v36)) {
        goto LABEL_28;
      }
      char v38 = v33;
      if (v32[3] < v37)
      {
        sub_10003B8B4(v37, 1);
        unint64_t v39 = sub_10003A860(v31, i);
        if ((v38 & 1) != (v40 & 1)) {
          goto LABEL_30;
        }
        unint64_t v34 = v39;
      }
      if (v38)
      {
        sub_100042EB8((uint64_t)v47, (uint64_t)v46);
        sub_10002ED08((uint64_t)v47);
        swift_bridgeObjectRelease();
        uint64_t v30 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + 32 * v34);
        sub_10002ED08((uint64_t)v30);
        sub_100042EA8(v46, v30);
      }
      else
      {
        uint64_t v41 = *(void **)a5;
        *(void *)(*(void *)a5 + 8 * (v34 >> 6) + 64) |= 1 << v34;
        uint64_t v42 = (uint64_t *)(v41[6] + 16 * v34);
        *uint64_t v42 = v31;
        v42[1] = i;
        sub_100042EA8(v47, (_OWORD *)(v41[7] + 32 * v34));
        uint64_t v43 = v41[2];
        BOOL v27 = __OFADD__(v43, 1);
        uint64_t v44 = v43 + 1;
        if (v27) {
          goto LABEL_29;
        }
        v41[2] = v44;
      }
      sub_1001135EC(&v48);
    }
LABEL_27:
    swift_release();
    swift_bridgeObjectRelease();
    sub_100034EF8();
    return swift_release();
  }
  sub_10003B8B4(v19, a4 & 1);
  unint64_t v21 = sub_10003A860(v13, v12);
  if ((v20 & 1) == (v22 & 1))
  {
    unint64_t v16 = v21;
    if ((v20 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    sub_100042EB8((uint64_t)v47, (uint64_t)v46);
    sub_10002ED08((uint64_t)v47);
    swift_bridgeObjectRelease();
    uint64_t v23 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + 32 * v16);
    sub_10002ED08((uint64_t)v23);
    sub_100042EA8(v46, v23);
    goto LABEL_16;
  }
LABEL_30:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t sub_100112BEC(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    swift_stdlib_random();
    uint64_t result = (0 * (unsigned __int128)v1) >> 64;
    if (-(uint64_t)v1 % v1)
    {
      while (1)
        swift_stdlib_random();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100112C78()
{
  void (*v14)(uint64_t *__return_ptr, void *);
  uint64_t result;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  void v23[4];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = 16 * v6;
    uint64_t v8 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    uint64_t v11 = (uint64_t *)(*(void *)(v1 + 56) + v7);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    v0[3] = v4;
    v0[4] = v5;
    uint64_t v14 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v23[0] = v9;
    v23[1] = v10;
    void v23[2] = v12;
    void v23[3] = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(&v22, v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v22;
  }
  unint64_t v16 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v17 = (unint64_t)(v0[2] + 64) >> 6;
    if (v16 < v17)
    {
      BOOL v18 = v0[1];
      uint64_t v19 = *(void *)(v18 + 8 * v16);
      if (v19)
      {
LABEL_7:
        uint64_t v5 = (v19 - 1) & v19;
        unint64_t v6 = __clz(__rbit64(v19)) + (v16 << 6);
        int64_t v4 = v16;
        goto LABEL_3;
      }
      char v20 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v17)
      {
        uint64_t v19 = *(void *)(v18 + 8 * v20);
        if (v19)
        {
LABEL_10:
          unint64_t v16 = v20;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v17)
        {
          uint64_t v19 = *(void *)(v18 + 8 * (v3 + 3));
          if (v19)
          {
            unint64_t v16 = v3 + 3;
            goto LABEL_7;
          }
          char v20 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v17)
          {
            uint64_t v19 = *(void *)(v18 + 8 * v20);
            if (v19) {
              goto LABEL_10;
            }
            unint64_t v16 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v17)
            {
              uint64_t v19 = *(void *)(v18 + 8 * v16);
              if (v19) {
                goto LABEL_7;
              }
              int64_t v4 = v17 - 1;
              unint64_t v21 = v3 + 6;
              while (v17 != v21)
              {
                uint64_t v19 = *(void *)(v18 + 8 * v21++);
                if (v19)
                {
                  unint64_t v16 = v21 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    uint64_t result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t sub_100112E1C()
{
  return sub_100112E5C((uint64_t (*)(void))&type metadata accessor for MetricsFieldExclusionRequest, &qword_1001A1D00);
}

uint64_t sub_100112E3C()
{
  return sub_100112E5C((uint64_t (*)(void))&type metadata accessor for MetricsFieldInclusionRequest, &qword_1001A1D10);
}

uint64_t sub_100112E5C(uint64_t (*a1)(void), uint64_t *a2)
{
  void (*v29)(uint64_t *__return_ptr, char *);
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;

  uint64_t v4 = a1(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v32 - v6;
  uint64_t v8 = sub_10002EB60(a2);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v32 - v13;
  uint64_t v16 = *v2;
  uint64_t v15 = v2[1];
  uint64_t v18 = v2[2];
  int64_t v17 = v2[3];
  int64_t v19 = v17;
  unint64_t v20 = v2[4];
  uint64_t v32 = v7;
  char v33 = a2;
  if (!v20)
  {
    int64_t v24 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      return result;
    }
    int64_t v25 = (unint64_t)(v18 + 64) >> 6;
    if (v24 < v25)
    {
      unint64_t v26 = *(void *)(v15 + 8 * v24);
      if (v26)
      {
LABEL_7:
        uint64_t v21 = v15;
        uint64_t v22 = (v26 - 1) & v26;
        unint64_t v23 = __clz(__rbit64(v26)) + (v24 << 6);
        int64_t v19 = v24;
        goto LABEL_3;
      }
      int64_t v27 = v17 + 2;
      int64_t v19 = v17 + 1;
      if (v17 + 2 < v25)
      {
        unint64_t v26 = *(void *)(v15 + 8 * v27);
        if (v26)
        {
LABEL_10:
          int64_t v24 = v27;
          goto LABEL_7;
        }
        int64_t v19 = v17 + 2;
        if (v17 + 3 < v25)
        {
          unint64_t v26 = *(void *)(v15 + 8 * (v17 + 3));
          if (v26)
          {
            int64_t v24 = v17 + 3;
            goto LABEL_7;
          }
          int64_t v27 = v17 + 4;
          int64_t v19 = v17 + 3;
          if (v17 + 4 < v25)
          {
            unint64_t v26 = *(void *)(v15 + 8 * v27);
            if (v26) {
              goto LABEL_10;
            }
            int64_t v24 = v17 + 5;
            int64_t v19 = v17 + 4;
            if (v17 + 5 < v25)
            {
              unint64_t v26 = *(void *)(v15 + 8 * v24);
              if (v26) {
                goto LABEL_7;
              }
              int64_t v19 = v25 - 1;
              int64_t v28 = v17 + 6;
              while (v25 != v28)
              {
                unint64_t v26 = *(void *)(v15 + 8 * v28++);
                if (v26)
                {
                  int64_t v24 = v28 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    uint64_t v21 = v15;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v14, 1, 1, v4);
    uint64_t v22 = 0;
    goto LABEL_23;
  }
  uint64_t v21 = v15;
  uint64_t v22 = (v20 - 1) & v20;
  unint64_t v23 = __clz(__rbit64(v20)) | (v17 << 6);
LABEL_3:
  (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v14, *(void *)(v16 + 48) + *(void *)(v5 + 72) * v23, v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v14, 0, 1, v4);
LABEL_23:
  *unint64_t v2 = v16;
  v2[1] = v21;
  v2[2] = v18;
  v2[3] = v19;
  v2[4] = v22;
  uint64_t v29 = (void (*)(uint64_t *__return_ptr, char *))v2[5];
  sub_100052980((uint64_t)v14, (uint64_t)v11, v33);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4) == 1) {
    return 0;
  }
  uint64_t v31 = v32;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v32, v11, v4);
  v29(&v34, v31);
  uint64_t v30 = v34;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v31, v4);
  return v30;
}

uint64_t (*sub_1001131B4@<X0>(uint64_t a1@<X8>))(void)
{
  return sub_1001131E4((uint64_t (*)(void))&type metadata accessor for MetricsFieldExclusionRequest, a1);
}

uint64_t (*sub_1001131CC@<X0>(uint64_t a1@<X8>))(void)
{
  return sub_1001131E4((uint64_t (*)(void))&type metadata accessor for MetricsFieldInclusionRequest, a1);
}

uint64_t (*sub_1001131E4@<X0>(uint64_t (*result)(void)@<X0>, uint64_t a2@<X8>))(void)
{
  int64_t v3 = result;
  int64_t v6 = v2[3];
  unint64_t v5 = v2[4];
  int64_t v7 = v6;
  if (!v5)
  {
    int64_t v19 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      return result;
    }
    int64_t v20 = (unint64_t)(v2[2] + 64) >> 6;
    if (v19 < v20)
    {
      uint64_t v21 = v2[1];
      unint64_t v22 = *(void *)(v21 + 8 * v19);
      if (v22)
      {
LABEL_7:
        uint64_t v8 = (v22 - 1) & v22;
        unint64_t v9 = __clz(__rbit64(v22)) + (v19 << 6);
        int64_t v7 = v19;
        goto LABEL_3;
      }
      int64_t v23 = v6 + 2;
      int64_t v7 = v6 + 1;
      if (v6 + 2 < v20)
      {
        unint64_t v22 = *(void *)(v21 + 8 * v23);
        if (v22)
        {
LABEL_10:
          int64_t v19 = v23;
          goto LABEL_7;
        }
        int64_t v7 = v6 + 2;
        if (v6 + 3 < v20)
        {
          unint64_t v22 = *(void *)(v21 + 8 * (v6 + 3));
          if (v22)
          {
            int64_t v19 = v6 + 3;
            goto LABEL_7;
          }
          int64_t v23 = v6 + 4;
          int64_t v7 = v6 + 3;
          if (v6 + 4 < v20)
          {
            unint64_t v22 = *(void *)(v21 + 8 * v23);
            if (v22) {
              goto LABEL_10;
            }
            int64_t v19 = v6 + 5;
            int64_t v7 = v6 + 4;
            if (v6 + 5 < v20)
            {
              unint64_t v22 = *(void *)(v21 + 8 * v19);
              if (v22) {
                goto LABEL_7;
              }
              int64_t v7 = v20 - 1;
              int64_t v24 = v6 + 6;
              while (v20 != v24)
              {
                unint64_t v22 = *(void *)(v21 + 8 * v24++);
                if (v22)
                {
                  int64_t v19 = v24 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v2[3] = v7;
    v2[4] = 0;
    uint64_t v25 = result(0);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56);
    uint64_t v16 = v25;
    uint64_t v17 = a2;
    uint64_t v18 = 1;
    goto LABEL_23;
  }
  uint64_t v8 = (v5 - 1) & v5;
  unint64_t v9 = __clz(__rbit64(v5)) | (v6 << 6);
LABEL_3:
  uint64_t v10 = (uint64_t *)(*(void *)(*v2 + 48) + 16 * v9);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  v2[3] = v7;
  v2[4] = v8;
  uint64_t v13 = (void (*)(void *))v2[5];
  v26[0] = v11;
  v26[1] = v12;
  swift_bridgeObjectRetain();
  v13(v26);
  swift_bridgeObjectRelease();
  uint64_t v14 = v3(0);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = a2;
  uint64_t v18 = 0;
LABEL_23:

  return (uint64_t (*)(void))v15(v17, v18, 1, v16);
}

void sub_1001133E4()
{
  void (*v9)(uint64_t *__return_ptr, void **);
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  void *v18;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  if ((*v0 & 0x8000000000000000) != 0)
  {
    uint64_t v10 = __CocoaSet.Iterator.next()();
    if (v10)
    {
      uint64_t v17 = v10;
      sub_10002EE34(0, (unint64_t *)&qword_1001A1CF0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      int64_t v7 = v18;
      swift_unknownObjectRelease();
      if (v18) {
        goto LABEL_6;
      }
    }
    return;
  }
  int64_t v4 = v0[3];
  unint64_t v3 = v1[4];
  if (v3)
  {
    uint64_t v5 = (v3 - 1) & v3;
    unint64_t v6 = __clz(__rbit64(v3)) | (v4 << 6);
LABEL_4:
    int64_t v7 = *(void **)(*(void *)(v2 + 48) + 8 * v6);
    id v8 = v7;
    goto LABEL_5;
  }
  uint64_t v11 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    return;
  }
  uint64_t v12 = (unint64_t)(v1[2] + 64) >> 6;
  if (v11 >= v12)
  {
    int64_t v7 = 0;
    uint64_t v5 = 0;
    goto LABEL_5;
  }
  uint64_t v13 = v1[1];
  uint64_t v14 = *(void *)(v13 + 8 * v11);
  if (v14)
  {
LABEL_13:
    uint64_t v5 = (v14 - 1) & v14;
    unint64_t v6 = __clz(__rbit64(v14)) + (v11 << 6);
    int64_t v4 = v11;
    goto LABEL_4;
  }
  uint64_t v15 = v4 + 2;
  if (v4 + 2 >= v12) {
    goto LABEL_29;
  }
  uint64_t v14 = *(void *)(v13 + 8 * v15);
  if (v14)
  {
LABEL_17:
    uint64_t v11 = v15;
    goto LABEL_13;
  }
  if (v4 + 3 >= v12) {
    goto LABEL_30;
  }
  uint64_t v14 = *(void *)(v13 + 8 * (v4 + 3));
  if (v14)
  {
    uint64_t v11 = v4 + 3;
    goto LABEL_13;
  }
  uint64_t v15 = v4 + 4;
  if (v4 + 4 < v12)
  {
    uint64_t v14 = *(void *)(v13 + 8 * v15);
    if (v14) {
      goto LABEL_17;
    }
    uint64_t v11 = v4 + 5;
    if (v4 + 5 < v12)
    {
      uint64_t v14 = *(void *)(v13 + 8 * v11);
      if (v14) {
        goto LABEL_13;
      }
      uint64_t v11 = v12 - 1;
      uint64_t v16 = v4 + 6;
      while (v12 != v16)
      {
        uint64_t v14 = *(void *)(v13 + 8 * v16++);
        if (v14)
        {
          uint64_t v11 = v16 - 1;
          goto LABEL_13;
        }
      }
LABEL_29:
      int64_t v7 = 0;
      uint64_t v5 = 0;
      int64_t v4 = v11;
      goto LABEL_5;
    }
LABEL_30:
    int64_t v7 = 0;
    uint64_t v5 = 0;
    int64_t v4 = v15;
    goto LABEL_5;
  }
  int64_t v7 = 0;
  uint64_t v5 = 0;
  v4 += 3;
LABEL_5:
  v1[3] = v4;
  v1[4] = v5;
  if (v7)
  {
LABEL_6:
    unint64_t v9 = (void (*)(uint64_t *__return_ptr, void **))v1[5];
    uint64_t v18 = v7;
    v9(&v17, &v18);
  }
}

uint64_t sub_1001135EC@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    uint64_t v11 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    sub_100042EB8(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(void *)&long long v23 = v13;
    *((void *)&v23 + 1) = v12;
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    unint64_t v16 = *(void *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      uint64_t v9 = (v16 - 1) & v16;
      unint64_t v10 = __clz(__rbit64(v16)) + (v14 << 6);
      int64_t v7 = v14;
      goto LABEL_3;
    }
    int64_t v17 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      unint64_t v16 = *(void *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        int64_t v14 = v17;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        unint64_t v16 = *(void *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          int64_t v14 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v17 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          unint64_t v16 = *(void *)(v4 + 8 * v17);
          if (v16) {
            goto LABEL_10;
          }
          int64_t v14 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            unint64_t v16 = *(void *)(v4 + 8 * v14);
            if (v16) {
              goto LABEL_7;
            }
            int64_t v7 = v15 - 1;
            int64_t v18 = v5 + 6;
            while (v15 != v18)
            {
              unint64_t v16 = *(void *)(v4 + 8 * v18++);
              if (v16)
              {
                int64_t v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  memset(v24, 0, sizeof(v24));
  long long v23 = 0u;
LABEL_23:
  *uint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  int64_t v19 = (void (*)(_OWORD *))v1[5];
  uint64_t result = sub_100052980((uint64_t)&v23, (uint64_t)v22, &qword_1001A3FB8);
  if (*((void *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    v21[2] = v22[2];
    v19(v21);
    return sub_100034B8C((uint64_t)v21, (uint64_t *)&unk_1001A5070);
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

void sub_1001137D8(void *a1@<X8>)
{
  *a1 = 0x404E000000000000;
}

void sub_1001137E4(void *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

uint64_t sub_1001137F0(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = a1;
  uint64_t v28 = a2;
  uint64_t v2 = sub_10002EB60((uint64_t *)&unk_1001A3280);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for JSONTimeUnit();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v29 = 0;
  unint64_t v30 = 0xE000000000000000;
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  unint64_t v29 = 0xD000000000000023;
  unint64_t v30 = 0x8000000100161770;
  unint64_t v10 = self;
  id v11 = [v10 category];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  int64_t v14 = v13;

  v15._unint64_t countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for JSONTimeUnit.milliseconds(_:), v6);
  uint64_t v17 = v27;
  Bag.subscript.getter();

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  Bag.Value.current(or:)();
  int64_t v18 = *(void (**)(char *, uint64_t))(v3 + 8);
  v18(v5, v2);
  unint64_t v29 = 0;
  unint64_t v30 = 0xE000000000000000;
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  unint64_t v29 = 0xD00000000000002BLL;
  unint64_t v30 = 0x80000001001617A0;
  id v19 = [v10 category];
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v22 = v21;

  v23._unint64_t countAndFlagsBits = v20;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Bag.subscript.getter();

  Bag.Value.current(or:)();
  uint64_t v25 = type metadata accessor for Bag();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v17, v25);
  v18(v5, v2);
  return v28;
}

uint64_t sub_100113BB0()
{
  swift_release();

  return _swift_deallocObject(v0, 49, 7);
}

uint64_t sub_100113BE8(unsigned __int8 *a1)
{
  return sub_100134734(*a1, *(void (**)(void, __n128))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned char *)(v1 + 48));
}

uint64_t sub_100113BFC(void *a1, uint64_t a2, void (**a3)(void, void))
{
  id v75 = a1;
  uint64_t v5 = type metadata accessor for MetricsPipeline();
  uint64_t v69 = *(void *)(v5 - 8);
  uint64_t v70 = v5;
  __chkstk_darwin(v5);
  uint64_t v66 = v6;
  uint64_t v68 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OSSignpostID();
  uint64_t v72 = *(void *)(v7 - 8);
  uint64_t v73 = v7;
  uint64_t v8 = *(void *)(v72 + 64);
  __chkstk_darwin(v7);
  id v71 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v76 = (char *)&v64 - v10;
  uint64_t v11 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v11 - 8);
  uint64_t v12 = type metadata accessor for OSLogger();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  Swift::String v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Bag();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  id v19 = (char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = swift_allocObject();
  *(void *)(v77 + 16) = a3;
  uint64_t v67 = a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a2 + OBJC_IVAR____TtC19appstorecomponentsd13MetricsClient_bag, v16);
  type metadata accessor for LocalPreferences();
  _Block_copy(a3);
  uint64_t v20 = static LocalPreferences.currentApplication.getter();
  uint64_t v21 = sub_1001137F0((uint64_t)v19, v20);
  double v23 = v22;
  double v25 = v24;
  uint64_t v26 = v21;
  uint64_t v28 = v27;
  if (sub_10010FFA4(v21, v27, v22, v24))
  {
    uint64_t v65 = v28;
    uint64_t v74 = v26;
    if (qword_1001A0E78 != -1) {
      swift_once();
    }
    uint64_t v29 = sub_10002F6AC(v12, (uint64_t)qword_1001AE3B0);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v29, v12);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v30._object = (void *)0x8000000100161640;
    v30._unint64_t countAndFlagsBits = 0xD000000000000024;
    LogMessage.StringInterpolation.appendLiteral(_:)(v30);
    uint64_t v79 = sub_10002EE34(0, (unint64_t *)&unk_1001A5030);
    *(void *)&long long v78 = v75;
    id v31 = v75;
    LogMessage.StringInterpolation.appendInterpolation(sensitive:)();
    sub_100034B8C((uint64_t)&v78, &qword_1001A1C50);
    v32._unint64_t countAndFlagsBits = 0;
    v32._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v32);
    LogMessage.init(stringInterpolation:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    sub_10002EE34(0, (unint64_t *)&unk_1001A3180);
    static OS_os_log.default.getter();
    char v33 = v76;
    OSSignpostID.init(log:)();
    static os_signpost_type_t.begin.getter();
    unint64_t v34 = (void *)static OS_os_log.default.getter();
    os_signpost(_:dso:log:name:signpostID:)();

    if (qword_1001A0DD8 != -1) {
      swift_once();
    }
    id v35 = [v31 predicateByAddingTag:qword_1001AE2F0];
    uint64_t v36 = v67;
    uint64_t v37 = *(void **)(v67 + OBJC_IVAR____TtC19appstorecomponentsd13MetricsClient_collectionQueue);
    sub_100052538(v67 + OBJC_IVAR____TtC19appstorecomponentsd13MetricsClient_signpostExtractor, (uint64_t)&v78);
    uint64_t v38 = swift_allocObject();
    sub_100031C10(&v78, v38 + 16);
    *(void *)(v38 + 56) = v35;
    sub_10002EB60(&qword_1001A5040);
    id v39 = v37;
    id v75 = v35;
    uint64_t v40 = Promise.__allocating_init()();
    uint64_t v41 = (void *)swift_allocObject();
    v41[2] = sub_100114788;
    v41[3] = v38;
    v41[4] = v40;
    uint64_t v64 = v40;
    swift_retain();
    swift_retain();
    OS_dispatch_queue.schedule(task:)();

    swift_release();
    swift_release();
    uint64_t v43 = v68;
    uint64_t v42 = v69;
    uint64_t v44 = v70;
    (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v68, v36 + OBJC_IVAR____TtC19appstorecomponentsd13MetricsClient_metricsPipeline, v70);
    unint64_t v45 = (*(unsigned __int8 *)(v42 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
    uint64_t v46 = (double *)swift_allocObject();
    _OWORD v46[2] = v23;
    void v46[3] = v25;
    uint64_t v47 = v65;
    *((void *)v46 + 4) = v74;
    *((void *)v46 + 5) = v47;
    (*(void (**)(char *, char *, uint64_t))(v42 + 32))((char *)v46 + v45, v43, v44);
    uint64_t v48 = type metadata accessor for SyncTaskScheduler();
    uint64_t v79 = v48;
    uint64_t v80 = &protocol witness table for SyncTaskScheduler;
    sub_100031A88((uint64_t *)&v78);
    swift_unknownObjectRetain();
    SyncTaskScheduler.init()();
    sub_10002EB60(&qword_1001A5048);
    sub_10011494C();
    Promise.flatMap<A>(on:_:)();
    swift_release();
    sub_10002ED08((uint64_t)&v78);
    uint64_t v79 = v48;
    uint64_t v80 = &protocol witness table for SyncTaskScheduler;
    sub_100031A88((uint64_t *)&v78);
    SyncTaskScheduler.init()();
    uint64_t v50 = v71;
    uint64_t v49 = v72;
    uint64_t v51 = v73;
    (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v71, v33, v73);
    unint64_t v52 = (*(unsigned __int8 *)(v49 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
    uint64_t v53 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v49 + 32))(v53 + v52, v50, v51);
    Promise.always(on:perform:)();
    swift_release();
    sub_10002ED08((uint64_t)&v78);
    uint64_t v54 = swift_allocObject();
    uint64_t v55 = v77;
    *(void *)(v54 + 16) = sub_10006239C;
    *(void *)(v54 + 24) = v55;
    *(void *)(v54 + 32) = "processViewRender(with:withReplyHandler:)";
    *(void *)(v54 + 40) = 41;
    *(unsigned char *)(v54 + 48) = 2;
    uint64_t v56 = swift_allocObject();
    *(void *)(v56 + 16) = sub_10006239C;
    *(void *)(v56 + 24) = v55;
    *(void *)(v56 + 32) = "processViewRender(with:withReplyHandler:)";
    *(void *)(v56 + 40) = 41;
    *(unsigned char *)(v56 + 48) = 2;
    uint64_t v57 = sub_10002EE34(0, (unint64_t *)&qword_1001A2170);
    swift_retain_n();
    uint64_t v58 = static OS_dispatch_queue.main.getter();
    uint64_t v79 = v57;
    uint64_t v80 = &protocol witness table for OS_dispatch_queue;
    *(void *)&long long v78 = v58;
    Promise.then(perform:orCatchError:on:)();
    swift_release();
    swift_release();
    sub_10002ED08((uint64_t)&v78);
    swift_unknownObjectRelease();

    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v76, v51);
    return swift_release();
  }
  else
  {
    if (qword_1001A0E78 != -1) {
      swift_once();
    }
    uint64_t v60 = sub_10002F6AC(v12, (uint64_t)qword_1001AE3B0);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v60, v12);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v61._unint64_t countAndFlagsBits = 0xD000000000000030;
    v61._object = (void *)0x8000000100161600;
    LogMessage.StringInterpolation.appendLiteral(_:)(v61);
    uint64_t v79 = sub_10002EE34(0, (unint64_t *)&unk_1001A5030);
    *(void *)&long long v78 = v75;
    id v62 = v75;
    LogMessage.StringInterpolation.appendInterpolation(sensitive:)();
    sub_100034B8C((uint64_t)&v78, &qword_1001A1C50);
    v63._unint64_t countAndFlagsBits = 0;
    v63._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v63);
    LogMessage.init(stringInterpolation:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    a3[2](a3, 0);
    swift_release();
    return swift_unknownObjectRelease();
  }
}

uint64_t sub_100114748()
{
  sub_10002ED08(v0 + 16);

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100114788@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10010ED08(v1 + 16, *(void **)(v1 + 56));
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_1001147BC()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001147FC()
{
  return sub_100112778(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t sub_100114808()
{
  uint64_t v1 = type metadata accessor for MetricsPipeline();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001148D4(uint64_t *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for MetricsPipeline() - 8);
  double v4 = v1[2];
  double v5 = v1[3];
  uint64_t v6 = *((void *)v1 + 4);
  uint64_t v7 = *((void *)v1 + 5);
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100110F38(a1, v6, v7, v8, v4, v5);
}

unint64_t sub_10011494C()
{
  unint64_t result = qword_1001A5050;
  if (!qword_1001A5050)
  {
    sub_10002ED58(&qword_1001A5048);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5050);
  }
  return result;
}

void sub_1001149AC()
{
}

uint64_t sub_1001149C0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v25 = (unint64_t *)result;
  int64_t v6 = 0;
  uint64_t v7 = a3 + 56;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 56);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  if (v10) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v15 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v15 < v11)
    {
      unint64_t v16 = *(void *)(v7 + 8 * v15);
      ++v6;
      if (v16) {
        goto LABEL_21;
      }
      int64_t v6 = v15 + 1;
      if (v15 + 1 >= v11) {
        goto LABEL_26;
      }
      unint64_t v16 = *(void *)(v7 + 8 * v6);
      if (v16) {
        goto LABEL_21;
      }
      int64_t v6 = v15 + 2;
      if (v15 + 2 >= v11) {
        goto LABEL_26;
      }
      unint64_t v16 = *(void *)(v7 + 8 * v6);
      if (v16)
      {
LABEL_21:
        unint64_t v10 = (v16 - 1) & v16;
        for (unint64_t i = __clz(__rbit64(v16)) + (v6 << 6); ; unint64_t i = v13 | (v6 << 6))
        {
          uint64_t v18 = (uint64_t *)(*(void *)(a3 + 48) + 16 * i);
          uint64_t v19 = *v18;
          uint64_t v20 = v18[1];
          uint64_t v21 = *(void *)(a4 + 16);
          swift_bridgeObjectRetain();
          if (v21 && (unint64_t v22 = sub_10003A860(v19, v20), (v23 & 1) != 0))
          {
            sub_100042EB8(*(void *)(a4 + 56) + 32 * v22, (uint64_t)v26);
            sub_100034B8C((uint64_t)v26, &qword_1001A1C50);
            unint64_t result = swift_bridgeObjectRelease();
            if (!v10) {
              goto LABEL_8;
            }
          }
          else
          {
            memset(v26, 0, sizeof(v26));
            sub_100034B8C((uint64_t)v26, &qword_1001A1C50);
            unint64_t result = swift_bridgeObjectRelease();
            *(unint64_t *)((char *)v25 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
            if (__OFADD__(v27++, 1)) {
              goto LABEL_29;
            }
            if (!v10) {
              goto LABEL_8;
            }
          }
LABEL_7:
          unint64_t v13 = __clz(__rbit64(v10));
          v10 &= v10 - 1;
        }
      }
      int64_t v17 = v15 + 3;
      if (v17 < v11)
      {
        unint64_t v16 = *(void *)(v7 + 8 * v17);
        if (v16)
        {
          int64_t v6 = v17;
          goto LABEL_21;
        }
        while (1)
        {
          int64_t v6 = v17 + 1;
          if (__OFADD__(v17, 1)) {
            goto LABEL_28;
          }
          if (v6 >= v11) {
            break;
          }
          unint64_t v16 = *(void *)(v7 + 8 * v6);
          ++v17;
          if (v16) {
            goto LABEL_21;
          }
        }
      }
    }
LABEL_26:
    swift_retain();
    return sub_1000423CC(v25, a2, v27, a3);
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100114BD4(uint64_t a1, uint64_t a2)
{
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v8 = 8 * v7;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1001149C0((uint64_t)&v13 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, a1, a2);
    swift_release();
    swift_bridgeObjectRelease();
    if (v2) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    int64_t v11 = (void *)swift_slowAlloc();
    bzero(v11, v8);
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1001149C0((uint64_t)v11, v7, a1, a2);
    swift_release();
    swift_bridgeObjectRelease();
    swift_slowDealloc();
    swift_bridgeObjectRelease_n();
  }
  return v10;
}

unint64_t sub_100114DA0()
{
  unint64_t result = qword_1001A1370;
  if (!qword_1001A1370)
  {
    type metadata accessor for ASCMetricsError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A1370);
  }
  return result;
}

unint64_t sub_100114DF8()
{
  unint64_t result = qword_1001A5090;
  if (!qword_1001A5090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5090);
  }
  return result;
}

uint64_t sub_100114E4C(uint64_t a1, uint64_t a2)
{
  return sub_100094AA4(a1, a2, *(uint64_t **)(v2 + 16));
}

unint64_t sub_100114E54()
{
  unint64_t result = qword_1001A1CF8;
  if (!qword_1001A1CF8)
  {
    sub_10002EE34(255, (unint64_t *)&qword_1001A1CF0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A1CF8);
  }
  return result;
}

uint64_t sub_100114EBC(unsigned __int8 a1, void *a2, uint64_t a3)
{
  return sub_100093D30(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24), *(void (**)(void))(v3 + 32), *(void *)(v3 + 40), *(void (**)(uint64_t *, uint64_t))(v3 + 48), *(char **)(v3 + 56));
}

uint64_t sub_100114EF0()
{
  uint64_t v1 = type metadata accessor for OSSignpostID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_100114F80()
{
}

void sub_100114F90()
{
}

uint64_t sub_10011500C(uint64_t a1)
{
  return sub_10013441C(a1, *(void (**)(void, __n128))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned char *)(v1 + 48));
}

uint64_t sub_100115044()
{
  uint64_t v0 = type metadata accessor for Bag();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)v23 - v5;
  type metadata accessor for BaseObjectGraph();
  inject<A, B>(_:from:)();
  sub_10002EB60(&qword_1001A3390);
  inject<A, B>(_:from:)();
  sub_10007F7C8();
  inject<A, B>(_:from:)();
  unint64_t v7 = (void *)v28[0];
  sub_10002EB60((uint64_t *)&unk_1001A3320);
  inject<A, B>(_:from:)();
  sub_10002EB60(&qword_1001A32A0);
  inject<A, B>(_:from:)();
  size_t v8 = *(void (**)(char *, char *, uint64_t))(v1 + 16);
  v8(v4, v6, v0);
  sub_100052538((uint64_t)v29, (uint64_t)v24);
  id v9 = [self mainBundle];
  MetricsFieldsAggregator.init(bag:accountProvider:bundle:)();
  double v25 = &type metadata for AppStateMetricsFieldsProvider;
  unint64_t v26 = sub_100115588();
  uint64_t v10 = swift_allocObject();
  v24[0] = v10;
  sub_100052538((uint64_t)v28, v10 + 16);
  sub_100052538((uint64_t)v27, v10 + 56);
  if (qword_1001A0DC8 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for MetricsFieldInclusionRequest();
  sub_10002F6AC(v11, (uint64_t)qword_1001AE2B0);
  MetricsFieldsAggregator.addOptInProvider(_:forRequest:)();
  sub_10002ED08((uint64_t)v24);
  uint64_t v12 = type metadata accessor for UniversalMetricsFieldsProvider();
  double v25 = (ValueMetadata *)v12;
  unint64_t v26 = sub_100115670(&qword_1001A50F0, (void (*)(uint64_t))type metadata accessor for UniversalMetricsFieldsProvider);
  uint64_t v13 = sub_100031A88(v24);
  sub_100052538((uint64_t)v29, (uint64_t)v13);
  v8((char *)v13 + *(int *)(v12 + 24), v6, v0);
  v13[5] = (uint64_t)v7;
  uint64_t v14 = qword_1001A0E98;
  id v15 = v7;
  if (v14 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for MetricsFieldExclusionRequest();
  sub_10002F6AC(v16, (uint64_t)qword_1001AE418);
  MetricsFieldsAggregator.addOptOutProvider(_:forRequest:)();
  sub_10002ED08((uint64_t)v24);
  double v25 = &type metadata for ActivityMetricsFieldsProvider;
  unint64_t v26 = sub_10011561C();
  if (qword_1001A0DA8 != -1) {
    swift_once();
  }
  sub_10002F6AC(v16, (uint64_t)qword_1001AE280);
  MetricsFieldsAggregator.addOptOutProvider(_:forRequest:)();
  sub_10002ED08((uint64_t)v24);
  BaseObjectGraph.inject<A>(_:)();
  uint64_t v17 = type metadata accessor for MetricsIdMetricsFieldsProvider();
  double v25 = (ValueMetadata *)v17;
  unint64_t v26 = sub_100115670(&qword_1001A5100, (void (*)(uint64_t))type metadata accessor for MetricsIdMetricsFieldsProvider);
  v23[0] = v23[1];
  uint64_t v18 = sub_100031A88(v24);
  uint64_t v19 = (char *)v18 + *(int *)(v17 + 20);
  uint64_t v20 = enum case for MetricsFieldsProviderCategory.expensive(_:);
  uint64_t v21 = type metadata accessor for MetricsFieldsProviderCategory();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 104))(v19, v20, v21);
  *(_OWORD *)uint64_t v18 = v23[0];
  if (qword_1001A0E30 != -1) {
    swift_once();
  }
  sub_10002F6AC(v16, (uint64_t)qword_1001AE328);
  MetricsFieldsAggregator.addOptOutProvider(_:forRequest:)();

  sub_10002ED08((uint64_t)v27);
  sub_10002ED08((uint64_t)v28);
  sub_10002ED08((uint64_t)v29);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v6, v0);
  return sub_10002ED08((uint64_t)v24);
}

unint64_t sub_100115588()
{
  unint64_t result = qword_1001A50E8;
  if (!qword_1001A50E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A50E8);
  }
  return result;
}

uint64_t sub_1001155DC()
{
  sub_10002ED08(v0 + 16);
  sub_10002ED08(v0 + 56);

  return _swift_deallocObject(v0, 96, 7);
}

unint64_t sub_10011561C()
{
  unint64_t result = qword_1001A50F8;
  if (!qword_1001A50F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A50F8);
  }
  return result;
}

uint64_t sub_100115670(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001156B8()
{
  uint64_t v0 = type metadata accessor for MetricsFieldExclusionRequest();
  sub_10002F648(v0, qword_1001AE328);
  sub_10002F6AC(v0, (uint64_t)qword_1001AE328);
  return MetricsFieldExclusionRequest.init(rawValue:)();
}

char *sub_100115724(char *a1, char **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    *((void *)a1 + 1) = a2[1];
    uint64_t v6 = *(int *)(a3 + 20);
    unint64_t v7 = &a1[v6];
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for MetricsFieldsProviderCategory();
    uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    uint64_t v11 = v4;
    swift_unknownObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_100115814(id *a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for MetricsFieldsProviderCategory();
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_100115894(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v6 = *(int *)(a3 + 20);
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for MetricsFieldsProviderCategory();
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  id v11 = v5;
  swift_unknownObjectRetain();
  v10(v7, v8, v9);
  return a1;
}

uint64_t sub_100115930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  unint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for MetricsFieldsProviderCategory();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

_OWORD *sub_1001159D8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for MetricsFieldsProviderCategory();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_100115A54(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *a2;

  *(void *)(a1 + 8) = a2[1];
  swift_unknownObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for MetricsFieldsProviderCategory();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_100115AF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100115B04);
}

uint64_t sub_100115B04(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for MetricsFieldsProviderCategory();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100115BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100115BC8);
}

void *sub_100115BC8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for MetricsFieldsProviderCategory();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for MetricsIdMetricsFieldsProvider()
{
  uint64_t result = qword_1001A5160;
  if (!qword_1001A5160) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100115CBC()
{
  uint64_t result = type metadata accessor for MetricsFieldsProviderCategory();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100115D54(uint64_t a1)
{
  *(void *)(v2 + 240) = a1;
  *(void *)(v2 + 248) = v1;
  return _swift_task_switch(sub_100115D74, 0, 0);
}

uint64_t sub_100115D74()
{
  uint64_t v1 = v0[31];
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  sub_10002EB60(&qword_1001A4D70);
  unint64_t inited = swift_initStackObject();
  v0[32] = inited;
  *(_OWORD *)(inited + 16) = xmmword_10014DF90;
  if (qword_1001A0E40 != -1) {
    swift_once();
  }
  uint64_t v5 = (void *)qword_1001A51C8;
  *(void *)(inited + 32) = qword_1001A51C8;
  specialized Array._endMutation()();
  v0[33] = inited;
  id v6 = v5;
  id v7 = objc_msgSend(v2, "ams_activeiTunesAccount");
  v0[34] = v7;
  uint64_t v8 = sub_1001164A8(inited, 0xD000000000000013, 0x8000000100161850);
  v0[35] = v8;
  uint64_t v9 = (void *)swift_task_alloc();
  v0[36] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_100115F04;
  return sub_100116730((uint64_t)v8, (uint64_t)v7, (uint64_t)v2, v3);
}

uint64_t sub_100115F04(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 296) = a1;
  *(void *)(v3 + 304) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_100116300;
  }
  else {
    uint64_t v4 = sub_100116018;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100116018()
{
  uint64_t v1 = *(void *)(v0 + 296);
  uint64_t v2 = *(void **)(v0 + 272);
  uint64_t v23 = *(void *)(v0 + 240);
  swift_bridgeObjectRelease();

  uint64_t result = swift_bridgeObjectRelease();
  int64_t v4 = 0;
  uint64_t v5 = *(void *)(v1 + 64);
  uint64_t v20 = v1 + 64;
  uint64_t v24 = v1;
  uint64_t v6 = -1;
  uint64_t v7 = -1 << *(unsigned char *)(v1 + 32);
  if (-v7 < 64) {
    uint64_t v6 = ~(-1 << -(char)v7);
  }
  unint64_t v8 = v6 & v5;
  unint64_t v22 = (_OWORD *)(v0 + 32);
  int64_t v21 = (unint64_t)(63 - v7) >> 6;
  uint64_t v9 = *(void *)(v0 + 304);
  if ((v6 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v10 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v4 << 6))
  {
    uint64_t v15 = *(void *)(v0 + 240);
    uint64_t v16 = (uint64_t *)(*(void *)(v24 + 48) + 16 * i);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    *(void *)(v0 + 16) = *v16;
    *(void *)(v0 + 24) = v18;
    sub_100042EB8(*(void *)(v24 + 56) + 32 * i, (uint64_t)v22);
    *(void *)(v0 + 64) = v17;
    *(void *)(v0 + 72) = v18;
    sub_100042EA8(v22, (_OWORD *)(v0 + 80));
    swift_bridgeObjectRetain();
    sub_10002EB60((uint64_t *)&unk_1001A5070);
    sub_10002EB60((uint64_t *)&unk_1001A2220);
    swift_dynamicCast();
    sub_100042EA8((_OWORD *)(v0 + 128), (_OWORD *)(v0 + 200));
    sub_10002FE00(v15, *(void *)(v23 + 24));
    dispatch thunk of MetricsFieldsBuilder.addValue(_:forField:)();
    if (v9)
    {
      swift_bridgeObjectRelease();
      sub_10002ED08(v0 + 200);
      swift_release();
      uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_24;
    }
    sub_10002ED08(v0 + 200);
    uint64_t result = swift_bridgeObjectRelease();
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_28:
      __break(1u);
      return result;
    }
    if (v12 >= v21) {
      goto LABEL_23;
    }
    unint64_t v13 = *(void *)(v20 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v21) {
        goto LABEL_23;
      }
      unint64_t v13 = *(void *)(v20 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v21) {
          goto LABEL_23;
        }
        unint64_t v13 = *(void *)(v20 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v8 = (v13 - 1) & v13;
  }
  int64_t v14 = v12 + 3;
  if (v14 < v21)
  {
    unint64_t v13 = *(void *)(v20 + 8 * v14);
    if (!v13)
    {
      while (1)
      {
        int64_t v4 = v14 + 1;
        if (__OFADD__(v14, 1)) {
          goto LABEL_28;
        }
        if (v4 >= v21) {
          goto LABEL_23;
        }
        unint64_t v13 = *(void *)(v20 + 8 * v4);
        ++v14;
        if (v13) {
          goto LABEL_18;
        }
      }
    }
    int64_t v4 = v14;
    goto LABEL_18;
  }
LABEL_23:
  swift_release();
  uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
LABEL_24:
  return v19();
}

uint64_t sub_100116300()
{
  uint64_t v1 = *(void **)(v0 + 272);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100116374(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10002F874;
  v4[30] = a1;
  v4[31] = v1;
  return _swift_task_switch(sub_100115D74, 0, 0);
}

uint64_t sub_100116420@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for MetricsFieldsProviderCategory();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_100116490()
{
  return MetricsFieldsProvider.addMetricsFields(into:using:)();
}

char *sub_1001164A8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v5) {
      return (char *)_swiftEmptyArrayStorage;
    }
    uint64_t result = sub_1000C5134(0, v5 & ~(v5 >> 63), 0);
    if (v5 < 0) {
      break;
    }
    uint64_t v7 = 0;
    while (v5 != v7)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v8 = *(id *)(a1 + 8 * v7 + 32);
      }
      id v9 = v8;
      unint64_t v11 = _swiftEmptyArrayStorage[2];
      unint64_t v10 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain();
      if (v11 >= v10 >> 1) {
        sub_1000C5134((char *)(v10 > 1), v11 + 1, 1);
      }
      ++v7;
      _swiftEmptyArrayStorage[2] = v11 + 1;
      int64_t v12 = &_swiftEmptyArrayStorage[3 * v11];
      v12[4] = v9;
      v12[5] = a2;
      v12[6] = a3;
      if (v5 == v7) {
        return (char *)_swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void *initializeBufferWithCopyOfBuffer for XPCConnectionOwner.ActiveConnection(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t destroy for XPCConnectionOwner.ActiveConnection(id *a1)
{
  return swift_unknownObjectRelease();
}

uint64_t assignWithCopy for XPCConnectionOwner.ActiveConnection(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

id *assignWithTake for XPCConnectionOwner.ActiveConnection(id *a1, _OWORD *a2)
{
  *(_OWORD *)a1 = *a2;
  swift_unknownObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MetricsIdStore()
{
  return &type metadata for MetricsIdStore;
}

uint64_t sub_100116730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[13] = a3;
  v4[14] = a4;
  v4[11] = a1;
  v4[12] = a2;
  return _swift_task_switch(sub_100116754, 0, 0);
}

uint64_t sub_100116754()
{
  uint64_t v1 = *(void *)(v0 + 96);
  unint64_t v2 = sub_100062F68((uint64_t)_swiftEmptyArrayStorage);
  if (v1) {
    id v3 = *(id *)(v0 + 96);
  }
  else {
    id v3 = objc_msgSend(*(id *)(v0 + 104), "ams_activeiTunesAccount");
  }
  *(void *)(v0 + 120) = v3;
  uint64_t v4 = *(void **)(v0 + 88);
  uint64_t v5 = v4[2];
  *(void *)(v0 + 128) = v5;
  if (v5)
  {
    id v6 = *(void **)(v0 + 96);
    *(void *)(v0 + 136) = v2;
    *(void *)(v0 + 144) = 0;
    uint64_t v7 = (void *)v4[4];
    *(void *)(v0 + 152) = v7;
    uint64_t v9 = v4[5];
    uint64_t v8 = v4[6];
    *(void *)(v0 + 160) = v8;
    id v10 = v7;
    swift_bridgeObjectRetain();
    id v11 = v6;
    swift_bridgeObjectRetain();
    id v12 = v3;
    if (!v3)
    {
      id v12 = objc_msgSend(*(id *)(v0 + 104), "ams_activeiTunesAccount");
      id v3 = *(id *)(v0 + 120);
    }
    *(void *)(v0 + 168) = v12;
    id v13 = v3;
    uint64_t v14 = swift_task_alloc();
    *(void *)(v0 + 176) = v14;
    *(void *)uint64_t v14 = v0;
    *(void *)(v14 + 8) = sub_10011699C;
    long long v15 = *(_OWORD *)(v0 + 104);
    *(void *)(v14 + 272) = v9;
    *(void *)(v14 + 280) = v8;
    *(void *)(v14 + 256) = v12;
    *(void *)(v14 + 264) = v10;
    *(_OWORD *)(v14 + 240) = v15;
    return _swift_task_switch(sub_100117000, 0, 0);
  }
  else
  {
    id v16 = *(id *)(v0 + 96);
    *(void *)(v0 + 16) = 0xD000000000000019;
    *(void *)(v0 + 40) = &type metadata for String;
    *(void *)(v0 + 24) = 0x80000001001618D0;
    sub_100042EA8((_OWORD *)(v0 + 16), (_OWORD *)(v0 + 48));
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10003EBAC((_OWORD *)(v0 + 48), 0x734E72657375, 0xE600000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();

    uint64_t v18 = *(uint64_t (**)(unint64_t))(v0 + 8);
    return v18(v2);
  }
}

uint64_t sub_10011699C(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 184) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100116D70;
  }
  else
  {
    *(void *)(v4 + 192) = a1;
    uint64_t v5 = sub_100116AC4;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100116AC4()
{
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 136);

  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v0 + 80) = v3;
  sub_100112894(v1, (uint64_t)sub_100112840, 0, isUniquelyReferenced_nonNull_native, v0 + 80);
  if (v2)
  {
    return swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = *(void **)(v0 + 152);
    uint64_t v7 = *(void *)(v0 + 128);
    uint64_t v8 = *(void *)(v0 + 144) + 1;
    uint64_t v9 = *(void *)(v0 + 80);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    if (v8 == v7)
    {
      swift_bridgeObjectRelease();
      id v10 = *(void **)(v0 + 120);
      *(void *)(v0 + 16) = 0xD000000000000019;
      *(void *)(v0 + 40) = &type metadata for String;
      *(void *)(v0 + 24) = 0x80000001001618D0;
      sub_100042EA8((_OWORD *)(v0 + 16), (_OWORD *)(v0 + 48));
      char v11 = swift_isUniquelyReferenced_nonNull_native();
      sub_10003EBAC((_OWORD *)(v0 + 48), 0x734E72657375, 0xE600000000000000, v11);
      swift_bridgeObjectRelease();

      id v12 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v12(v9);
    }
    else
    {
      uint64_t v13 = *(void *)(v0 + 144) + 1;
      *(void *)(v0 + 136) = v9;
      *(void *)(v0 + 144) = v13;
      uint64_t v14 = *(void **)(v0 + 120);
      long long v15 = (void *)(*(void *)(v0 + 88) + 24 * v13);
      id v16 = (void *)v15[4];
      *(void *)(v0 + 152) = v16;
      uint64_t v18 = v15[5];
      uint64_t v17 = v15[6];
      *(void *)(v0 + 160) = v17;
      id v19 = v16;
      swift_bridgeObjectRetain();
      id v20 = v14;
      if (!v14)
      {
        id v20 = objc_msgSend(*(id *)(v0 + 104), "ams_activeiTunesAccount");
        uint64_t v14 = *(void **)(v0 + 120);
      }
      *(void *)(v0 + 168) = v20;
      id v21 = v14;
      uint64_t v22 = swift_task_alloc();
      *(void *)(v0 + 176) = v22;
      *(void *)uint64_t v22 = v0;
      *(void *)(v22 + 8) = sub_10011699C;
      long long v23 = *(_OWORD *)(v0 + 104);
      *(void *)(v22 + 272) = v18;
      *(void *)(v22 + 280) = v17;
      *(void *)(v22 + 256) = v20;
      *(void *)(v22 + 264) = v19;
      *(_OWORD *)(v22 + 240) = v23;
      return _swift_task_switch(sub_100117000, 0, 0);
    }
  }
}

uint64_t sub_100116D70()
{
  uint64_t v1 = (void *)v0[21];
  uint64_t v2 = (void *)v0[19];
  uint64_t v3 = (void *)v0[15];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100116E10()
{
  uint64_t v0 = type metadata accessor for OSLogger.Subsystem();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OSLogger();
  sub_10002F648(v4, qword_1001A51B0);
  sub_10002F6AC(v4, (uint64_t)qword_1001A51B0);
  if (qword_1001A0E58 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_10002F6AC(v0, (uint64_t)qword_1001AE350);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return OSLogger.init(subsystem:category:)();
}

void sub_100116F6C()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [self keyWithName:v0 crossDeviceSync:1];

  qword_1001A51C8 = (uint64_t)v1;
}

uint64_t sub_100116FD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[34] = a5;
  v6[35] = a6;
  v6[32] = a3;
  v6[33] = a4;
  v6[30] = a1;
  v6[31] = a2;
  return _swift_task_switch(sub_100117000, 0, 0);
}

uint64_t sub_100117000()
{
  id v1 = *(void **)(v0 + 256);
  id v2 = v1;
  if (!v1)
  {
    id v2 = objc_msgSend(*(id *)(v0 + 240), "ams_activeiTunesAccount");
    id v1 = *(void **)(v0 + 256);
  }
  *(void *)(v0 + 288) = v2;
  id v3 = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 296) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1001170D0;
  uint64_t v5 = *(void *)(v0 + 272);
  uint64_t v6 = *(void *)(v0 + 280);
  uint64_t v7 = *(void *)(v0 + 248);
  return sub_100118198((uint64_t)v2, v5, v6, v7);
}

uint64_t sub_1001170D0(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 304) = a1;
  *(void *)(v3 + 312) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_1001176E8;
  }
  else {
    uint64_t v4 = sub_1001171E4;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1001171E4()
{
  uint64_t v1 = v0 + 16;
  uint64_t v2 = v0 + 88;
  uint64_t v3 = (_OWORD *)(v0 + 160);
  uint64_t v46 = (_OWORD *)(v0 + 208);
  uint64_t v4 = *(void **)(v0 + 304);
  uint64_t v5 = *(void **)(v0 + 264);

  sub_10002EB60(&qword_1001A4D70);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_10014DF90;
  *(void *)(v6 + 32) = v5;
  specialized Array._endMutation()();
  sub_10002EE34(0, &qword_1001A5268);
  id v7 = v5;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v9 = [v4 generateEventFieldsForKeys:isa];

  uint64_t v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t result = sub_100062F68((uint64_t)_swiftEmptyArrayStorage);
  int64_t v12 = 0;
  uint64_t v13 = *(void *)(v10 + 64);
  uint64_t v48 = (void *)result;
  uint64_t v49 = v10 + 64;
  uint64_t v14 = -1;
  uint64_t v15 = -1 << *(unsigned char *)(v10 + 32);
  if (-v15 < 64) {
    uint64_t v14 = ~(-1 << -(char)v15);
  }
  unint64_t v16 = v14 & v13;
  int64_t v50 = (unint64_t)(63 - v15) >> 6;
  uint64_t v17 = (_OWORD *)(v0 + 56);
  uint64_t v18 = (_OWORD *)(v0 + 128);
  unint64_t v45 = (void *)v0;
  uint64_t v43 = (_OWORD *)(v0 + 176);
  if ((v14 & v13) == 0) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v19 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v19 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v23)) + (v12 << 6))
  {
    sub_100042F14(*(void *)(v10 + 48) + 40 * i, v1);
    sub_100042EB8(*(void *)(v10 + 56) + 32 * i, (uint64_t)v17);
    long long v21 = *(_OWORD *)(v1 + 16);
    *(_OWORD *)uint64_t v2 = *(_OWORD *)v1;
    *(_OWORD *)(v2 + 16) = v21;
    *(void *)(v2 + 32) = *(void *)(v1 + 32);
    sub_100042EA8(v17, v18);
    sub_10002EB60((uint64_t *)&unk_1001A5270);
    sub_10002EB60((uint64_t *)&unk_1001A2220);
    if ((swift_dynamicCast() & 1) == 0)
    {
      v3[1] = 0u;
      v3[2] = 0u;
      *uint64_t v3 = 0u;
      uint64_t result = sub_100034B8C((uint64_t)v3, &qword_1001A5280);
      if (v16) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
    uint64_t v25 = v45[21];
    uint64_t v47 = v45[20];
    sub_100042EA8(v43, v46);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v26 = sub_10003A860(v47, v25);
    uint64_t v28 = v48;
    unint64_t v29 = v26;
    uint64_t v30 = v48[2];
    BOOL v31 = (v27 & 1) == 0;
    uint64_t result = v30 + v31;
    if (__OFADD__(v30, v31)) {
      goto LABEL_42;
    }
    if (v48[3] < result) {
      break;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      if ((v27 & 1) == 0) {
        goto LABEL_30;
      }
    }
    else
    {
      char v42 = v27;
      sub_10003F960();
      uint64_t v28 = v48;
      if ((v42 & 1) == 0)
      {
LABEL_30:
        v28[(v29 >> 6) + 8] |= 1 << v29;
        id v35 = (uint64_t *)(v48[6] + 16 * v29);
        *id v35 = v47;
        v35[1] = v25;
        uint64_t result = (uint64_t)sub_100042EA8(v46, (_OWORD *)(v48[7] + 32 * v29));
        uint64_t v36 = v48[2];
        BOOL v37 = __OFADD__(v36, 1);
        uint64_t v38 = v36 + 1;
        if (v37) {
          goto LABEL_43;
        }
        v48[2] = v38;
        swift_bridgeObjectRetain();
        goto LABEL_32;
      }
    }
LABEL_28:
    unint64_t v34 = (_OWORD *)(v28[7] + 32 * v29);
    sub_10002ED08((uint64_t)v34);
    sub_100042EA8(v46, v34);
LABEL_32:
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_4;
    }
LABEL_7:
    int64_t v22 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v22 >= v50) {
      goto LABEL_34;
    }
    unint64_t v23 = *(void *)(v49 + 8 * v22);
    ++v12;
    if (!v23)
    {
      int64_t v12 = v22 + 1;
      if (v22 + 1 >= v50) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v49 + 8 * v12);
      if (!v23)
      {
        int64_t v12 = v22 + 2;
        if (v22 + 2 >= v50) {
          goto LABEL_34;
        }
        unint64_t v23 = *(void *)(v49 + 8 * v12);
        if (!v23)
        {
          int64_t v24 = v22 + 3;
          if (v24 >= v50)
          {
LABEL_34:
            id v39 = (void *)v45[38];
            swift_release();

            uint64_t v40 = (uint64_t (*)(void *))v45[1];
            return v40(v48);
          }
          unint64_t v23 = *(void *)(v49 + 8 * v24);
          if (!v23)
          {
            while (1)
            {
              int64_t v12 = v24 + 1;
              if (__OFADD__(v24, 1)) {
                break;
              }
              if (v12 >= v50) {
                goto LABEL_34;
              }
              unint64_t v23 = *(void *)(v49 + 8 * v12);
              ++v24;
              if (v23) {
                goto LABEL_20;
              }
            }
LABEL_41:
            __break(1u);
LABEL_42:
            __break(1u);
LABEL_43:
            __break(1u);
            return result;
          }
          int64_t v12 = v24;
        }
      }
    }
LABEL_20:
    unint64_t v16 = (v23 - 1) & v23;
  }
  char v41 = v27;
  sub_10003B8B4(result, isUniquelyReferenced_nonNull_native);
  unint64_t v32 = sub_10003A860(v47, v25);
  if ((v41 & 1) == (v33 & 1))
  {
    unint64_t v29 = v32;
    uint64_t v28 = v48;
    if ((v41 & 1) == 0) {
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_1001176E8()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10011774C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  return _swift_task_switch(sub_100117770, 0, 0);
}

uint64_t sub_100117770()
{
  if (qword_1001A0E40 != -1) {
    swift_once();
  }
  id v1 = objc_msgSend(*(id *)(v0 + 24), "ams_activeiTunesAccount");
  *(void *)(v0 + 40) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10011786C;
  uint64_t v3 = *(void *)(v0 + 32);
  return sub_100118198((uint64_t)v1, 0xD000000000000013, 0x8000000100161850, v3);
}

uint64_t sub_10011786C(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 56) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10008C5A8;
  }
  else
  {
    *(void *)(v4 + 64) = a1;
    uint64_t v5 = sub_100117994;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100117994()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void **)(v0 + 16);

  *uint64_t v2 = v1;
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

Swift::Int sub_100117A04()
{
  return Hasher._finalize()();
}

uint64_t sub_100117A5C()
{
  return String.hash(into:)();
}

Swift::Int sub_100117A78()
{
  return Hasher._finalize()();
}

uint64_t sub_100117ACC@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100184B38, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void sub_100117B20(void *a1@<X8>)
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x800000010015A730;
}

Swift::Int sub_100117B40(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 16) = a1;
  swift_errorRelease();
  swift_errorRetain();
  return OS_dispatch_semaphore.signal()();
}

Swift::Int sub_100117BA4(void *a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v4 = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = a1;

  id v5 = a1;
  return OS_dispatch_semaphore.signal()();
}

void sub_100117C04(uint64_t a1, void *a2)
{
  Swift::Int v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_100117C6C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_10002EB60((uint64_t *)&unk_1001A3FC0);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    a1 = v3;
    a2 = (void *)v5;
    return _swift_continuation_throwingResumeWithError(a1, a2);
  }
  if (!a2)
  {
    __break(1u);
    return _swift_continuation_throwingResumeWithError(a1, a2);
  }
  **(void **)(*(void *)(v3 + 64) + 40) = a2;
  id v8 = a2;

  return swift_continuation_throwingResume();
}

uint64_t sub_100117D2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_100117D60(a1, a2);
  if (!v3)
  {
    *a3 = result;
    a3[1] = v6;
    a3[2] = v7;
  }
  return result;
}

uint64_t sub_100117D60(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = a2;
  uint64_t v3 = type metadata accessor for JSONObject();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v27 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (uint64_t)&v27 - v11;
  JSONObject.subscript.getter();
  uint64_t v13 = JSONObject.string.getter();
  uint64_t v15 = v14;
  unint64_t v16 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v16(v12, v3);
  if (!v15)
  {
    uint64_t v17 = type metadata accessor for JSONError();
    sub_10002ECB0();
    swift_allocError();
    unint64_t v19 = v18;
    *uint64_t v18 = 1701667182;
    v18[1] = 0xE400000000000000;
LABEL_9:
    v18[2] = &type metadata for MetricsIdentifierKeyContext;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v17 - 8) + 104))(v19, enum case for JSONError.missingProperty(_:), v17);
    swift_willThrow();
    uint64_t v25 = type metadata accessor for JSONContext();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v28, v25);
    v16(a1, v3);
    return v12;
  }
  uint64_t v27 = v13;
  JSONObject.subscript.getter();
  uint64_t v12 = JSONObject.BOOL.getter();
  v16((uint64_t)v10, v3);
  if (v12 == 2)
  {
    swift_bridgeObjectRelease();
    uint64_t v17 = type metadata accessor for JSONError();
    sub_10002ECB0();
    swift_allocError();
    unint64_t v19 = v18;
    *uint64_t v18 = 0x6E795373736F7263;
    unint64_t v20 = 0xEF65636976654463;
LABEL_8:
    v18[1] = v20;
    goto LABEL_9;
  }
  JSONObject.subscript.getter();
  JSONObject.string.getter();
  uint64_t v22 = v21;
  v16((uint64_t)v7, v3);
  if (!v22)
  {
    swift_bridgeObjectRelease();
    uint64_t v17 = type metadata accessor for JSONError();
    sub_10002ECB0();
    swift_allocError();
    unint64_t v19 = v18;
    *uint64_t v18 = 0x73656D614E676162;
    unint64_t v20 = 0xEC00000065636170;
    goto LABEL_8;
  }
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v12 = (uint64_t)[self keyWithName:v23 crossDeviceSync:v12 & 1];

  uint64_t v24 = type metadata accessor for JSONContext();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v28, v24);
  v16(a1, v3);
  return v12;
}

uint64_t sub_100118198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[26] = a3;
  v4[27] = a4;
  v4[24] = a1;
  v4[25] = a2;
  uint64_t v5 = type metadata accessor for OSLogger();
  v4[28] = v5;
  v4[29] = *(void *)(v5 - 8);
  v4[30] = swift_task_alloc();
  return _swift_task_switch(sub_10011825C, 0, 0);
}

uint64_t sub_10011825C()
{
  uint64_t v1 = v0[27];
  uint64_t v2 = v0[24];
  uint64_t v3 = self;
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 identifierStoreWithAccount:v2 bagNamespace:v4 bag:v1];
  v0[31] = v5;

  v0[2] = v0;
  v0[7] = v0 + 23;
  v0[3] = sub_1001183C0;
  uint64_t v6 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_100117C6C;
  v0[13] = &unk_100189AF8;
  v0[14] = v6;
  [v5 resultWithCompletion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1001183C0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 256) = v1;
  if (v1) {
    uint64_t v2 = sub_10011856C;
  }
  else {
    uint64_t v2 = sub_1001184D0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001184D0()
{
  uint64_t v1 = *(void **)(v0 + 184);

  [v1 setIncludeAccountMatchStatus:1];
  [v1 setIsActiveITunesAccountRequired:1];
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void *))(v0 + 8);
  return v2(v1);
}

uint64_t sub_10011856C()
{
  uint64_t v1 = *(void **)(v0 + 248);
  swift_willThrow();

  if (qword_1001A0E38 != -1) {
    swift_once();
  }
  uint64_t v3 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v4 = *(void *)(v0 + 224);
  uint64_t v5 = *(void *)(v0 + 192);
  uint64_t v6 = sub_10002F6AC(v4, (uint64_t)qword_1001A51B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v4);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014DF50;
  LogMessage.init(stringLiteral:)();
  if (v5)
  {
    uint64_t v7 = *(void **)(v0 + 192);
    *(void *)(v0 + 144) = sub_10002EE34(0, (unint64_t *)&unk_1001A5240);
    *(void *)(v0 + 120) = v7;
  }
  else
  {
    *(_OWORD *)(v0 + 120) = 0u;
    *(_OWORD *)(v0 + 136) = 0u;
    uint64_t v7 = *(void **)(v0 + 192);
  }
  uint64_t v9 = *(void *)(v0 + 232);
  uint64_t v8 = *(void *)(v0 + 240);
  uint64_t v10 = *(void *)(v0 + 216);
  uint64_t v14 = *(void *)(v0 + 224);
  id v11 = v7;
  static LogMessage.traceableSensitive(_:)();
  sub_100034B8C(v0 + 120, &qword_1001A1C50);
  LogMessage.init(stringLiteral:)();
  *(void *)(v0 + 176) = swift_getObjectType();
  *(void *)(v0 + 152) = v10;
  swift_unknownObjectRetain();
  static LogMessage.traceableSensitive(_:)();
  sub_100034B8C(v0 + 152, &qword_1001A1C50);
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v14);
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t *sub_100118828(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v51 = type metadata accessor for OSLogger();
  uint64_t v56 = *(void *)(v51 - 8);
  uint64_t v6 = __chkstk_darwin(v51);
  uint64_t v47 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v55 = (char *)&v45 - v8;
  uint64_t v9 = self;
  NSString v10 = String._bridgeToObjectiveC()();
  uint64_t v49 = a1;
  uint64_t v50 = a4;
  id v11 = [v9 identifierStoreWithAccount:a1 bagNamespace:v10 bag:a4];

  id v12 = [v11 promiseWithTimeout:0.5];
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = 0;
  uint64_t v46 = (id *)(v13 + 16);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  dispatch_semaphore_t v15 = dispatch_semaphore_create(0);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v14;
  *(void *)(v16 + 24) = v15;
  Swift::String v61 = sub_1001191B8;
  uint64_t v62 = v16;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v60 = sub_100139BD0;
  *((void *)&v60 + 1) = &unk_100189B88;
  uint64_t v17 = _Block_copy(&aBlock);
  uint64_t v52 = v14;
  swift_retain();
  uint64_t v18 = v15;
  swift_release();
  [v12 addErrorBlock:v17];
  _Block_release(v17);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v13;
  *(void *)(v19 + 24) = v18;
  Swift::String v61 = sub_1001191DC;
  uint64_t v62 = v19;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v60 = sub_100117C04;
  *((void *)&v60 + 1) = &unk_100189BD8;
  unint64_t v20 = _Block_copy(&aBlock);
  uint64_t v21 = v18;
  uint64_t v53 = v13;
  swift_retain();
  swift_release();
  id v54 = v12;
  [v12 addSuccessBlock:v20];
  _Block_release(v20);
  OS_dispatch_semaphore.wait()();
  swift_beginAccess();
  if (*(void *)(v14 + 16))
  {
    uint64_t v48 = v21;
    swift_errorRetain();
    if (qword_1001A0E38 != -1) {
      swift_once();
    }
    uint64_t v22 = v51;
    uint64_t v23 = sub_10002F6AC(v51, (uint64_t)qword_1001A51B0);
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v55, v23, v22);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    uint64_t v24 = *(void *)(type metadata accessor for LogMessage() - 8);
    uint64_t v25 = *(void *)(v24 + 72);
    unint64_t v26 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_10014CEE0;
    unint64_t v28 = v27 + v26;
    LogMessage.init(stringLiteral:)();
    unint64_t v29 = v49;
    if (v49)
    {
      *((void *)&v60 + 1) = sub_10002EE34(0, (unint64_t *)&unk_1001A5240);
      *(void *)&long long aBlock = v29;
    }
    else
    {
      long long aBlock = 0u;
      long long v60 = 0u;
    }
    id v33 = v29;
    static LogMessage.traceableSensitive(_:)();
    sub_100034B8C((uint64_t)&aBlock, &qword_1001A1C50);
    LogMessage.init(stringLiteral:)();
    uint64_t v34 = v50;
    *((void *)&v60 + 1) = swift_getObjectType();
    *(void *)&long long aBlock = v34;
    swift_unknownObjectRetain();
    static LogMessage.traceableSensitive(_:)();
    sub_100034B8C((uint64_t)&aBlock, &qword_1001A1C50);
    LogMessage.init(stringLiteral:)();
    unint64_t v32 = (uint64_t *)(v28 + 5 * v25);
    swift_getErrorValue();
    uint64_t v35 = v57;
    uint64_t v36 = v58;
    *((void *)&v60 + 1) = v58;
    BOOL v37 = sub_100031A88((uint64_t *)&aBlock);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 16))(v37, v35, v36);
    static LogMessage.traceableSensitive(_:)();
    sub_100034B8C((uint64_t)&aBlock, &qword_1001A1C50);
    uint64_t v38 = v55;
    Logger.error(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v38, v22);
    uint64_t v21 = v48;
LABEL_10:
    swift_willThrow();

    swift_release();
    swift_release();

    return v32;
  }
  uint64_t v30 = v47;
  BOOL v31 = v46;
  swift_beginAccess();
  if (!*v31)
  {
    if (qword_1001A0E38 != -1) {
      swift_once();
    }
    uint64_t v40 = v51;
    uint64_t v41 = sub_10002F6AC(v51, (uint64_t)qword_1001A51B0);
    (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v30, v41, v40);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014DF50;
    LogMessage.init(stringLiteral:)();
    char v42 = v49;
    if (v49)
    {
      *((void *)&v60 + 1) = sub_10002EE34(0, (unint64_t *)&unk_1001A5240);
      *(void *)&long long aBlock = v42;
    }
    else
    {
      long long aBlock = 0u;
      long long v60 = 0u;
    }
    id v43 = v42;
    static LogMessage.traceableSensitive(_:)();
    unint64_t v32 = &qword_1001A1C50;
    sub_100034B8C((uint64_t)&aBlock, &qword_1001A1C50);
    LogMessage.init(stringLiteral:)();
    uint64_t v44 = v50;
    *((void *)&v60 + 1) = swift_getObjectType();
    *(void *)&long long aBlock = v44;
    swift_unknownObjectRetain();
    static LogMessage.traceableSensitive(_:)();
    sub_100034B8C((uint64_t)&aBlock, &qword_1001A1C50);
    Logger.error(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v30, v40);
    sub_1001191E4();
    swift_allocError();
    goto LABEL_10;
  }
  unint64_t v32 = (uint64_t *)*v31;
  [v32 setIncludeAccountMatchStatus:1];
  [v32 setIsActiveITunesAccountRequired:1];

  swift_release();
  swift_release();

  return v32;
}

uint64_t sub_100119144()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10011917C()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

Swift::Int sub_1001191B8(uint64_t a1)
{
  return sub_100117B40(a1, *(void *)(v1 + 16));
}

uint64_t sub_1001191C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001191D0()
{
  return swift_release();
}

Swift::Int sub_1001191DC(void *a1)
{
  return sub_100117BA4(a1, *(void *)(v1 + 16));
}

unint64_t sub_1001191E4()
{
  unint64_t result = qword_1001A5288;
  if (!qword_1001A5288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5288);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MetricsIdStore.MetricsIdStoreError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1001192D4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for MetricsIdStore.MetricsIdStoreError()
{
  return &type metadata for MetricsIdStore.MetricsIdStoreError;
}

uint64_t destroy for MetricsIdentifierKeyContext(id *a1)
{
  return swift_bridgeObjectRelease();
}

void *_s19appstorecomponentsd27MetricsIdentifierKeyContextVwCP_0(void *a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  a1[2] = *(void *)(a2 + 16);
  id v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MetricsIdentifierKeyContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MetricsIdentifierKeyContext(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v5 = a2[2];
  *(void *)(a1 + 8) = a2[1];
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricsIdentifierKeyContext(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MetricsIdentifierKeyContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MetricsIdentifierKeyContext()
{
  return &type metadata for MetricsIdentifierKeyContext;
}

unint64_t sub_1001194D4()
{
  unint64_t result = qword_1001A5298;
  if (!qword_1001A5298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5298);
  }
  return result;
}

uint64_t MetricsLogger.Configuration.init(asPartOf:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v19 = type metadata accessor for JSONTimeUnit();
  uint64_t v3 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10002EB60((uint64_t *)&unk_1001A3280);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Bag();
  uint64_t v21 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for BaseObjectGraph();
  uint64_t v20 = v10;
  v18[1] = a1;
  inject<A, B>(_:from:)();
  sub_10002EB60((uint64_t *)&unk_1001A3300);
  inject<A, B>(_:from:)();
  NSString v13 = String._bridgeToObjectiveC()();
  Bag.subscript.getter();

  Bag.Value.current(or:)();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v9, v6);
  NSString v15 = String._bridgeToObjectiveC()();
  uint64_t v16 = v19;
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for JSONTimeUnit.milliseconds(_:), v19);
  Bag.subscript.getter();

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v16);
  Bag.Value.current(or:)();
  v14(v9, v6);
  sub_100052538((uint64_t)v24, (uint64_t)v23);
  MetricsLogger.Configuration.init(recorder:eventTopic:samplingPercentage:samplingDuration:)();
  swift_release();
  sub_10002ED08((uint64_t)v24);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v12, v20);
}

uint64_t sub_1001198D4(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) != 0)
  {
    id v3 = a1;
    char v4 = __CocoaSet.contains(_:)();

    return v4 & 1;
  }
  if (!*(void *)(a2 + 16)
    || (Swift::Int v6 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40)),
        uint64_t v7 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v8 = v6 & ~v7,
        uint64_t v9 = a2 + 56,
        ((*(void *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0))
  {
LABEL_11:
    char v12 = 0;
    return v12 & 1;
  }
  sub_10002EE34(0, (unint64_t *)&qword_1001A1CF0);
  id v10 = *(id *)(*(void *)(a2 + 48) + 8 * v8);
  char v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    uint64_t v13 = ~v7;
    unint64_t v14 = (v8 + 1) & v13;
    if ((*(void *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      do
      {
        id v15 = *(id *)(*(void *)(a2 + 48) + 8 * v14);
        char v12 = static NSObject.== infix(_:_:)();

        if (v12) {
          break;
        }
        unint64_t v14 = (v14 + 1) & v13;
      }
      while (((*(void *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
      return v12 & 1;
    }
    goto LABEL_11;
  }
  char v12 = 1;
  return v12 & 1;
}

BOOL sub_100119A38(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v4 = static Hasher._hash(seed:_:)();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_100119B04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      unint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t MetricsTopicProvider.init(bag:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Bag();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);

  return v5(a2, a1, v4);
}

uint64_t MetricsTopicProvider.currentMetricsTopic.getter()
{
  uint64_t v0 = sub_10002EB60(&qword_1001A19D8);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  id v3 = (char *)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10002EB60(&qword_1001A2528);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v8 = String._bridgeToObjectiveC()();
  Bag.subscript.getter();

  Bag.Value.currentOrNil()();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v11[1]) {
    return v11[0];
  }
  NSString v10 = String._bridgeToObjectiveC()();
  Bag.subscript.getter();

  Bag.Value.current(or:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (LOBYTE(v11[0])) {
    return 0xD000000000000012;
  }
  else {
    return 0x615F706D615F7078;
  }
}

Swift::Int MetricsTopicProvider.anonymousMetricsTopics.getter()
{
  Swift::Int v0 = sub_10011A7F8((uint64_t)&off_100184C88);
  swift_arrayDestroy();
  return v0;
}

uint64_t MetricsTopicProvider.shouldHaveAnonymousEvents.getter()
{
  uint64_t v0 = sub_10002EB60(&qword_1001A19D8);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = &v6[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  NSString v4 = String._bridgeToObjectiveC()();
  Bag.subscript.getter();

  Bag.Value.current(or:)();
  (*(void (**)(unsigned char *, uint64_t))(v1 + 8))(v3, v0);
  return v6[15];
}

Swift::String __swiftcall MetricsTopicProvider.replacementTopic(for:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  if (qword_1001A0E48 != -1) {
    swift_once();
  }
  if (sub_100119B04(countAndFlagsBits, (uint64_t)object, qword_1001A52A0))
  {
    uint64_t countAndFlagsBits = MetricsTopicProvider.currentMetricsTopic.getter();
    object = v3;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v4 = countAndFlagsBits;
  uint64_t v5 = object;
  result._object = v5;
  result._uint64_t countAndFlagsBits = v4;
  return result;
}

uint64_t sub_10011A0F8()
{
  Swift::Int v0 = sub_10011A7F8((uint64_t)&off_100184CB8);
  uint64_t result = swift_arrayDestroy();
  qword_1001A52A0 = v0;
  return result;
}

void *sub_10011A144(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for App();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  BOOL v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_10002EB60(&qword_1001A2F88);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    BOOL v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    unint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    BOOL v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_10011B640(&qword_1001A1D20, (void (*)(uint64_t))&type metadata accessor for App);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_10011B640(&qword_1001A2F80, (void (*)(uint64_t))&type metadata accessor for App);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        uint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

void sub_10011A45C(unint64_t a1)
{
}

void sub_10011A478(unint64_t a1)
{
}

void sub_10011A494(unint64_t a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9)
    {
LABEL_3:
      sub_10002EB60(a2);
      uint64_t v6 = (void *)static _SetStorage.allocate(capacity:)();
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
      if (!v5) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v8) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v6 = &_swiftEmptySetSingleton;
  uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
  if (v5) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8) {
    return;
  }
LABEL_9:
  uint64_t v10 = (char *)(v6 + 7);
  uint64_t v46 = v8;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      BOOL v13 = __OFADD__(v11++, 1);
      if (v13)
      {
        __break(1u);
        goto LABEL_36;
      }
      uint64_t v14 = v12;
      Swift::Int v15 = NSObject._rawHashValue(seed:)(v6[5]);
      uint64_t v16 = -1 << *((unsigned char *)v6 + 32);
      unint64_t v17 = v15 & ~v16;
      unint64_t v18 = v17 >> 6;
      uint64_t v19 = *(void *)&v10[8 * (v17 >> 6)];
      uint64_t v20 = 1 << v17;
      if (((1 << v17) & v19) != 0)
      {
        sub_10002EE34(0, a3);
        id v21 = *(id *)(v6[6] + 8 * v17);
        char v22 = static NSObject.== infix(_:_:)();

        if (v22)
        {
LABEL_11:
          swift_unknownObjectRelease();
          goto LABEL_12;
        }
        uint64_t v23 = ~v16;
        while (1)
        {
          unint64_t v17 = (v17 + 1) & v23;
          unint64_t v18 = v17 >> 6;
          uint64_t v19 = *(void *)&v10[8 * (v17 >> 6)];
          uint64_t v20 = 1 << v17;
          if ((v19 & (1 << v17)) == 0) {
            break;
          }
          id v24 = *(id *)(v6[6] + 8 * v17);
          char v25 = static NSObject.== infix(_:_:)();

          if (v25) {
            goto LABEL_11;
          }
        }
      }
      *(void *)&v10[8 * v18] = v20 | v19;
      *(void *)(v6[6] + 8 * v17) = v14;
      uint64_t v26 = v6[2];
      BOOL v13 = __OFADD__(v26, 1);
      uint64_t v27 = v26 + 1;
      if (v13) {
        goto LABEL_37;
      }
      v6[2] = v27;
LABEL_12:
      if (v11 == v46) {
        return;
      }
    }
  }
  uint64_t v28 = 0;
  uint64_t v44 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v28 != v44)
  {
    Swift::Int v29 = v6[5];
    id v30 = *(id *)(a1 + 32 + 8 * v28);
    Swift::Int v31 = NSObject._rawHashValue(seed:)(v29);
    uint64_t v32 = -1 << *((unsigned char *)v6 + 32);
    unint64_t v33 = v31 & ~v32;
    unint64_t v34 = v33 >> 6;
    uint64_t v35 = *(void *)&v10[8 * (v33 >> 6)];
    uint64_t v36 = 1 << v33;
    if (((1 << v33) & v35) != 0)
    {
      sub_10002EE34(0, a3);
      id v37 = *(id *)(v6[6] + 8 * v33);
      char v38 = static NSObject.== infix(_:_:)();

      if (v38) {
        goto LABEL_23;
      }
      uint64_t v39 = ~v32;
      unint64_t v33 = (v33 + 1) & v39;
      unint64_t v34 = v33 >> 6;
      uint64_t v35 = *(void *)&v10[8 * (v33 >> 6)];
      uint64_t v36 = 1 << v33;
      if ((v35 & (1 << v33)) != 0)
      {
        while (1)
        {
          id v40 = *(id *)(v6[6] + 8 * v33);
          char v41 = static NSObject.== infix(_:_:)();

          if (v41) {
            break;
          }
          unint64_t v33 = (v33 + 1) & v39;
          unint64_t v34 = v33 >> 6;
          uint64_t v35 = *(void *)&v10[8 * (v33 >> 6)];
          uint64_t v36 = 1 << v33;
          if ((v35 & (1 << v33)) == 0) {
            goto LABEL_31;
          }
        }
LABEL_23:

        uint64_t v8 = v46;
        goto LABEL_24;
      }
LABEL_31:
      uint64_t v8 = v46;
    }
    *(void *)&v10[8 * v34] = v36 | v35;
    *(void *)(v6[6] + 8 * v33) = v30;
    uint64_t v42 = v6[2];
    BOOL v13 = __OFADD__(v42, 1);
    uint64_t v43 = v42 + 1;
    if (v13) {
      goto LABEL_38;
    }
    v6[2] = v43;
LABEL_24:
    if (++v28 == v8) {
      return;
    }
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

Swift::Int sub_10011A7F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10002EB60(&qword_1001A1CE8);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        uint64_t v16 = (void *)(v15 + 16 * v11);
        BOOL v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      id v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      void *v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t initializeBufferWithCopyOfBuffer for MetricsTopicProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Bag();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t destroy for MetricsTopicProvider(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Bag();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for MetricsTopicProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Bag();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for MetricsTopicProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Bag();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for MetricsTopicProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Bag();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for MetricsTopicProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Bag();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricsTopicProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10011AC10);
}

uint64_t sub_10011AC10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Bag();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for MetricsTopicProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10011AC90);
}

uint64_t sub_10011AC90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Bag();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for MetricsTopicProvider()
{
  uint64_t result = qword_1001A5300;
  if (!qword_1001A5300) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10011AD4C()
{
  uint64_t result = type metadata accessor for Bag();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_10011ADD8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AdamID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  id v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_10002EB60((uint64_t *)&unk_1001A1C90);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    unint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    Swift::Int v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_10011B640(&qword_1001A1C38, (void (*)(uint64_t))&type metadata accessor for AdamID);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_10011B640((unint64_t *)&unk_1001A1C40, (void (*)(uint64_t))&type metadata accessor for AdamID);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        uint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

void *sub_10011B0F0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Calendar.Component();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  id v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_10002EB60(&qword_1001A5340);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    unint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    Swift::Int v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_10011B640(&qword_1001A5348, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_10011B640(qword_1001A5350, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        uint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

uint64_t sub_10011B408(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10002EB60(&qword_1001A2F90);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = ~(-1 << *(unsigned char *)(v3 + 32));
    while (1)
    {
      uint64_t v7 = *(void *)(a1 + 32 + 8 * v4);
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v9 = result & v6;
      unint64_t v10 = (result & (unint64_t)v6) >> 6;
      uint64_t v11 = *(void *)(v5 + 8 * v10);
      uint64_t v12 = 1 << (result & v6);
      uint64_t v13 = *(void *)(v3 + 48);
      if ((v12 & v11) != 0)
      {
        while (*(void *)(v13 + 8 * v9) != v7)
        {
          unint64_t v9 = (v9 + 1) & v6;
          unint64_t v10 = v9 >> 6;
          uint64_t v11 = *(void *)(v5 + 8 * (v9 >> 6));
          uint64_t v12 = 1 << v9;
          if ((v11 & (1 << v9)) == 0) {
            goto LABEL_7;
          }
        }
      }
      else
      {
LABEL_7:
        *(void *)(v5 + 8 * v10) = v12 | v11;
        *(void *)(v13 + 8 * v9) = v7;
        uint64_t v14 = *(void *)(v3 + 16);
        BOOL v15 = __OFADD__(v14, 1);
        uint64_t v16 = v14 + 1;
        if (v15)
        {
          __break(1u);
          return result;
        }
        *(void *)(v3 + 16) = v16;
      }
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (uint64_t)&_swiftEmptySetSingleton;
}

uint64_t sub_10011B524(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10002EB60(&qword_1001A5338);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = ~(-1 << *(unsigned char *)(v3 + 32));
    while (1)
    {
      uint64_t v7 = *(void *)(a1 + 32 + 8 * v4);
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v9 = result & v6;
      unint64_t v10 = (result & (unint64_t)v6) >> 6;
      uint64_t v11 = *(void *)(v5 + 8 * v10);
      uint64_t v12 = 1 << (result & v6);
      uint64_t v13 = *(void *)(v3 + 48);
      if ((v12 & v11) != 0)
      {
        while (*(void *)(v13 + 8 * v9) != v7)
        {
          unint64_t v9 = (v9 + 1) & v6;
          unint64_t v10 = v9 >> 6;
          uint64_t v11 = *(void *)(v5 + 8 * (v9 >> 6));
          uint64_t v12 = 1 << v9;
          if ((v11 & (1 << v9)) == 0) {
            goto LABEL_7;
          }
        }
      }
      else
      {
LABEL_7:
        *(void *)(v5 + 8 * v10) = v12 | v11;
        *(void *)(v13 + 8 * v9) = v7;
        uint64_t v14 = *(void *)(v3 + 16);
        BOOL v15 = __OFADD__(v14, 1);
        uint64_t v16 = v14 + 1;
        if (v15)
        {
          __break(1u);
          return result;
        }
        *(void *)(v3 + 16) = v16;
      }
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (uint64_t)&_swiftEmptySetSingleton;
}

uint64_t sub_10011B640(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10011B688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t type metadata accessor for ModelThunk()
{
  return sub_1000A9EF4();
}

uint64_t sub_10011B6A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (*(uint64_t (**)(void))(a4 + 8))();
  uint64_t v7 = type metadata accessor for JSONContext();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a2, v7);
  uint64_t v8 = type metadata accessor for JSONObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a1, v8);
  return v6;
}

uint64_t sub_10011B76C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = sub_10011B6A8(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
  if (!v4) {
    *a4 = result;
  }
  return result;
}

uint64_t sub_10011B7A0()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 valueForEntitlement:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_10011C2EC((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    if (swift_dynamicCast()) {
      return v4;
    }
  }
  else
  {
    sub_1000709E0((uint64_t)v6);
  }
  return 0;
}

id sub_10011B884(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = sub_10011BE10(a1, a2, 25705, 0xE200000000000000);
  if (v8) {
    return (id)v7;
  }
  NSString v10 = String._bridgeToObjectiveC()();
  id v9 = [v3 valueForEntitlement:v10];

  if (v9)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_100042EA8(v16, v17);
    sub_100042EB8((uint64_t)v17, (uint64_t)v16);
    if (swift_dynamicCast())
    {
      id v9 = v15;
      sub_10002ED08((uint64_t)v17);
    }
    else
    {
      if (qword_1001A0E70 != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for OSLogger();
      sub_10002F6AC(v11, (uint64_t)qword_1001AE398);
      sub_10002EB60((uint64_t *)&unk_1001A19E0);
      type metadata accessor for LogMessage();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v12._uint64_t countAndFlagsBits = 0;
      v12._object = (void *)0xE000000000000000;
      LogMessage.StringInterpolation.appendLiteral(_:)(v12);
      LogMessage.StringInterpolation.appendInterpolation(identity:)();
      v13._uint64_t countAndFlagsBits = 0xD000000000000035;
      v13._object = (void *)0x8000000100161B40;
      LogMessage.StringInterpolation.appendLiteral(_:)(v13);
      LogMessage.init(stringInterpolation:)();
      Logger.error(_:)();
      swift_bridgeObjectRelease();
      sub_10002ED08((uint64_t)v17);
      return 0;
    }
  }
  return v9;
}

id sub_10011BB44(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = sub_10011BE10(a1, a2, 0x6E6F6973726576, 0xE700000000000000);
  if (v8) {
    return (id)v7;
  }
  NSString v10 = String._bridgeToObjectiveC()();
  id v9 = [v3 valueForEntitlement:v10];

  if (v9)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_100042EA8(v16, v17);
    sub_100042EB8((uint64_t)v17, (uint64_t)v16);
    if (swift_dynamicCast())
    {
      id v9 = v15;
      sub_10002ED08((uint64_t)v17);
    }
    else
    {
      if (qword_1001A0E70 != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for OSLogger();
      sub_10002F6AC(v11, (uint64_t)qword_1001AE398);
      sub_10002EB60((uint64_t *)&unk_1001A19E0);
      type metadata accessor for LogMessage();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v12._uint64_t countAndFlagsBits = 0;
      v12._object = (void *)0xE000000000000000;
      LogMessage.StringInterpolation.appendLiteral(_:)(v12);
      LogMessage.StringInterpolation.appendInterpolation(identity:)();
      v13._object = (void *)0x8000000100161A30;
      v13._uint64_t countAndFlagsBits = 0xD000000000000032;
      LogMessage.StringInterpolation.appendLiteral(_:)(v13);
      LogMessage.init(stringInterpolation:)();
      Logger.error(_:)();
      swift_bridgeObjectRelease();
      sub_10002ED08((uint64_t)v17);
      return 0;
    }
  }
  return v9;
}

uint64_t sub_10011BE10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for OSLogger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2) {
    return a1;
  }
  uint64_t v31 = a3;
  swift_bridgeObjectRetain();
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v5 valueForEntitlement:v15];

  if (v16)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v33, 0, sizeof(v33));
  }
  sub_10011C2EC((uint64_t)v33, (uint64_t)&v34);
  uint64_t v30 = a1;
  if (!*((void *)&v35 + 1))
  {
LABEL_18:
    sub_1000709E0((uint64_t)&v34);
    goto LABEL_19;
  }
  sub_10002EB60(&qword_1001A2300);
  if (swift_dynamicCast())
  {
    uint64_t v17 = v32;
    if (*(void *)(v32 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v18 = sub_10003A860(a1, a2);
      if (v19)
      {
        sub_100042EB8(*(void *)(v17 + 56) + 32 * v18, (uint64_t)&v34);
      }
      else
      {
        long long v34 = 0u;
        long long v35 = 0u;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      long long v34 = 0u;
      long long v35 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v35 + 1))
    {
      sub_10002EB60(&qword_1001A1A10);
      if (swift_dynamicCast())
      {
        uint64_t v20 = *(void *)&v33[0];
        if (*(void *)(*(void *)&v33[0] + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v21 = sub_10003A860(v31, a4);
          if (v22)
          {
            a1 = *(void *)(*(void *)(v20 + 56) + 16 * v21);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return a1;
          }
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
      }
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_19:
  if (qword_1001A0E70 != -1) {
    swift_once();
  }
  uint64_t v23 = sub_10002F6AC(v11, (uint64_t)qword_1001AE398);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v23, v11);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v24._uint64_t countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v24);
  LogMessage.StringInterpolation.appendInterpolation(identity:)();
  v25._object = (void *)0x8000000100161AB0;
  v25._uint64_t countAndFlagsBits = 0xD000000000000018;
  LogMessage.StringInterpolation.appendLiteral(_:)(v25);
  *((void *)&v35 + 1) = &type metadata for String;
  *(void *)&long long v34 = v31;
  *((void *)&v34 + 1) = a4;
  swift_bridgeObjectRetain();
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_1000709E0((uint64_t)&v34);
  v26._uint64_t countAndFlagsBits = 0x646E612079656B20;
  v26._object = (void *)0xE900000000000020;
  LogMessage.StringInterpolation.appendLiteral(_:)(v26);
  *((void *)&v35 + 1) = &type metadata for String;
  *(void *)&long long v34 = v30;
  *((void *)&v34 + 1) = a2;
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_1000709E0((uint64_t)&v34);
  v27._uint64_t countAndFlagsBits = 0xD000000000000028;
  v27._object = (void *)0x8000000100161AD0;
  LogMessage.StringInterpolation.appendLiteral(_:)(v27);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return 0;
}

uint64_t sub_10011C2EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A1C50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for ObjectGraph()
{
  uint64_t result = qword_1001A53F8;
  if (!qword_1001A53F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10011C3A0()
{
  return swift_initClassMetadata2();
}

uint64_t sub_10011C3F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10011C444(a1, a2, a3);
}

uint64_t sub_10011C444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for DependencyDictionary();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0) + 22;
  uint64_t v9 = v3 + qword_1001A53D8;
  *(_OWORD *)uint64_t v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(void *)(v9 + 32) = 0;
  uint64_t v10 = v3 + qword_1001A53E0;
  *(void *)(v10 + 32) = 0;
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  uint64_t v11 = v3 + qword_1001A53E8;
  *(_OWORD *)uint64_t v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(void *)(v11 + 32) = 0;
  uint64_t v12 = v3 + qword_1001A53F0;
  *(void *)(v12 + 32) = 0;
  *(_OWORD *)uint64_t v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v8, a3, v5);
  uint64_t v13 = BaseObjectGraph.init(name:dependencies:)();
  sub_10002EB60((uint64_t *)&unk_1001A3320);
  swift_retain();
  BaseObjectGraph.optional<A>(_:)();
  uint64_t v14 = v13 + qword_1001A53D8;
  swift_beginAccess();
  sub_1000873C8((uint64_t)v20, v14, &qword_1001A1D90);
  swift_endAccess();
  sub_10002EB60(&qword_1001A2480);
  swift_retain();
  BaseObjectGraph.optional<A>(_:)();
  swift_release();
  uint64_t v15 = v13 + qword_1001A53E0;
  swift_beginAccess();
  sub_1000873C8((uint64_t)v20, v15, (uint64_t *)&unk_1001A3290);
  swift_endAccess();
  sub_10002EB60(&qword_1001A19A0);
  swift_retain();
  BaseObjectGraph.optional<A>(_:)();
  swift_release();
  uint64_t v16 = v13 + qword_1001A53E8;
  swift_beginAccess();
  sub_1000873C8((uint64_t)v20, v16, &qword_1001A5448);
  swift_endAccess();
  sub_10002EB60((uint64_t *)&unk_1001A3310);
  swift_retain();
  BaseObjectGraph.optional<A>(_:)();
  swift_release_n();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a3, v5);
  uint64_t v17 = v13 + qword_1001A53F0;
  swift_beginAccess();
  sub_1000873C8((uint64_t)v20, v17, &qword_1001A5450);
  swift_endAccess();
  return v13;
}

uint64_t sub_10011C750()
{
  sub_100034B8C(v0 + qword_1001A53D8, &qword_1001A1D90);
  sub_100034B8C(v0 + qword_1001A53E0, (uint64_t *)&unk_1001A3290);
  sub_100034B8C(v0 + qword_1001A53E8, &qword_1001A5448);
  return sub_100034B8C(v0 + qword_1001A53F0, &qword_1001A5450);
}

uint64_t sub_10011C7C4()
{
  uint64_t v0 = BaseObjectGraph.deinit();
  sub_100034B8C(v0 + qword_1001A53D8, &qword_1001A1D90);
  sub_100034B8C(v0 + qword_1001A53E0, (uint64_t *)&unk_1001A3290);
  sub_100034B8C(v0 + qword_1001A53E8, &qword_1001A5448);
  sub_100034B8C(v0 + qword_1001A53F0, &qword_1001A5450);

  return swift_deallocClassInstance();
}

uint64_t sub_10011C864()
{
  return type metadata accessor for ObjectGraph();
}

uint64_t getEnumTagSinglePayload for OfferAlertOfferActionImplementation(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 8)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OfferAlertOfferActionImplementation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OfferAlertOfferActionImplementation()
{
  return &type metadata for OfferAlertOfferActionImplementation;
}

unint64_t sub_10011C904()
{
  unint64_t result = qword_1001A17C0;
  if (!qword_1001A17C0)
  {
    sub_10002EE34(255, &qword_1001A17B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A17C0);
  }
  return result;
}

uint64_t sub_10011C96C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[49] = a3;
  v4[50] = a4;
  v4[47] = a1;
  v4[48] = a2;
  uint64_t v5 = type metadata accessor for MetricsFieldsContext();
  v4[51] = v5;
  v4[52] = *(void *)(v5 - 8);
  v4[53] = swift_task_alloc();
  v4[54] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ActionOutcome();
  v4[55] = v6;
  v4[56] = *(void *)(v6 - 8);
  v4[57] = swift_task_alloc();
  uint64_t v7 = sub_10002EB60(&qword_1001A19B8);
  v4[58] = v7;
  v4[59] = *(void *)(v7 - 8);
  v4[60] = swift_task_alloc();
  v4[61] = swift_task_alloc();
  type metadata accessor for ScalarDictionary();
  v4[62] = swift_task_alloc();
  v4[63] = type metadata accessor for CancelOrPauseInstallAction();
  v4[64] = swift_task_alloc();
  uint64_t v8 = sub_10002EB60((uint64_t *)&unk_1001A2160);
  v4[65] = v8;
  v4[66] = *(void *)(v8 - 8);
  v4[67] = swift_task_alloc();
  v4[68] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for AppOffer();
  v4[69] = v9;
  v4[70] = *(void *)(v9 - 8);
  v4[71] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for App.Kind();
  unsigned char v4[72] = v10;
  v4[73] = *(void *)(v10 - 8);
  v4[74] = swift_task_alloc();
  type metadata accessor for AdamID();
  v4[75] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for App();
  v4[76] = v11;
  v4[77] = *(void *)(v11 - 8);
  v4[78] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for State();
  v4[79] = v12;
  v4[80] = *(void *)(v12 - 8);
  v4[81] = swift_task_alloc();
  v4[82] = swift_task_alloc();
  return _swift_task_switch(sub_10011CD84, 0, 0);
}

uint64_t sub_10011CD84()
{
  uint64_t v1 = *(void *)(v0 + 384) + qword_1001A53D8;
  swift_beginAccess();
  sub_1000451AC(v1, v0 + 136);
  if (*(void *)(v0 + 160))
  {
    uint64_t v2 = *(void **)(v0 + 392);
    sub_100031C10((long long *)(v0 + 136), v0 + 176);
    sub_10002EC6C((void *)(v0 + 176), *(void *)(v0 + 200));
    id v3 = [v2 id];
    [v3 int64value];
    AdamID.init(value:)();
    uint64_t v31 = *(void *)(v0 + 656);
    uint64_t v5 = *(void *)(v0 + 640);
    uint64_t v33 = *(void *)(v0 + 632);
    uint64_t v35 = *(void *)(v0 + 648);
    uint64_t v6 = *(void *)(v0 + 624);
    uint64_t v7 = *(void *)(v0 + 616);
    uint64_t v32 = *(void *)(v0 + 608);
    uint64_t v8 = *(void *)(v0 + 568);
    uint64_t v9 = *(void *)(v0 + 560);
    uint64_t v30 = *(void *)(v0 + 552);
    (*(void (**)(void, void, void))(*(void *)(v0 + 584) + 104))(*(void *)(v0 + 592), enum case for App.Kind.store(_:), *(void *)(v0 + 576));
    App.init(id:kind:)();

    sub_100053098();
    AppStateController.state(forApp:applying:)();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v30);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v32);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v35, v31, v33);
    int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 88))(v35, v33);
    if (v10 == enum case for State.waiting(_:))
    {
      (*(void (**)(void, void))(*(void *)(v0 + 640) + 96))(*(void *)(v0 + 648), *(void *)(v0 + 632));
      uint64_t v11 = type metadata accessor for AppInstallationType();
LABEL_10:
      uint64_t v12 = *(void *)(v0 + 504);
      uint64_t v13 = *(void *)(v0 + 512);
      uint64_t v36 = *(void *)(v0 + 488);
      uint64_t v14 = *(void *)(v0 + 472);
      uint64_t v34 = *(void *)(v0 + 464);
      uint64_t v15 = *(void **)(v0 + 392);
      (*(void (**)(void))(*(void *)(v11 - 8) + 8))(*(void *)(v0 + 648));
      type metadata accessor for ObjectGraph();
      inject<A, B>(_:from:)();
      id v16 = [v15 metrics];
      sub_10002EE34(0, (unint64_t *)&qword_1001A1D98);
      unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100093170(v17);
      swift_bridgeObjectRelease();
      ScalarDictionary.init()();
      ActionMetrics.init(data:custom:)();
      *(void *)(v13 + *(int *)(v12 + 20)) = [v15 id];
      *(void *)(v0 + 120) = v12;
      *(void *)(v0 + 128) = sub_100120224((unint64_t *)&qword_1001A5480, (void (*)(uint64_t))type metadata accessor for CancelOrPauseInstallAction);
      unint64_t v18 = sub_100031A88((uint64_t *)(v0 + 96));
      sub_100120470(v13, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CancelOrPauseInstallAction);
      (*(void (**)(uint64_t, void, uint64_t))(v14 + 104))(v36, enum case for ActionDispatcher.MetricsBehavior.notProcessed<A>(_:), v34);
      char v19 = (void *)swift_task_alloc();
      *(void *)(v0 + 664) = v19;
      void *v19 = v0;
      v19[1] = sub_10011D67C;
      uint64_t v20 = *(void *)(v0 + 520);
      uint64_t v21 = *(void *)(v0 + 488);
      uint64_t v22 = *(void *)(v0 + 376);
      uint64_t v23 = *(void *)(v0 + 384);
      return ActionDispatcher.perform(_:withMetrics:asPartOf:)(v22, v0 + 96, v21, v23, v20);
    }
    if (v10 == enum case for State.installing(_:))
    {
      (*(void (**)(void, void))(*(void *)(v0 + 640) + 96))(*(void *)(v0 + 648), *(void *)(v0 + 632));
      uint64_t v11 = type metadata accessor for AppInstallation();
      goto LABEL_10;
    }
    if ([*(id *)(v0 + 392) shouldCheckForAvailableDiskSpace])
    {
      if (qword_1001A0E68 != -1) {
        swift_once();
      }
      uint64_t v24 = type metadata accessor for OSLogger();
      sub_10002F6AC(v24, (uint64_t)qword_1001AE380);
      sub_10002EB60((uint64_t *)&unk_1001A19E0);
      type metadata accessor for LogMessage();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
      LogMessage.init(stringLiteral:)();
      Logger.error(_:)();
      swift_bridgeObjectRelease();
    }
    id v25 = [*(id *)(v0 + 392) checkRestrictionsForContentRating];

    if (v25)
    {
      if (qword_1001A0E68 != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for OSLogger();
      sub_10002F6AC(v26, (uint64_t)qword_1001AE380);
      sub_10002EB60((uint64_t *)&unk_1001A19E0);
      type metadata accessor for LogMessage();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
      LogMessage.init(stringLiteral:)();
      Logger.error(_:)();
      swift_bridgeObjectRelease();
    }
    Swift::String v27 = (int8x16_t *)swift_task_alloc();
    *(void *)(v0 + 680) = v27;
    v27->i64[0] = v0;
    v27->i64[1] = (uint64_t)sub_10011D974;
    uint64_t v28 = *(void *)(v0 + 456);
    int8x16_t v29 = *(int8x16_t *)(v0 + 384);
    v27[5].i64[0] = *(void *)(v0 + 400);
    v27[4] = vextq_s8(v29, v29, 8uLL);
    v27[3].i64[1] = v28;
    return _swift_task_switch(sub_10011F0F0, 0, 0);
  }
  else
  {
    sub_100034B8C(v0 + 136, &qword_1001A1D90);
    sub_10002EB60((uint64_t *)&unk_1001A3320);
    return dispatch thunk of BaseObjectGraph.noMemberFound<A>(toSatisfy:)();
  }
}

uint64_t sub_10011D67C()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 672) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[59] + 8))(v2[61], v2[58]);
  if (v0)
  {
    id v3 = sub_10011EF08;
  }
  else
  {
    sub_10002ED08((uint64_t)(v2 + 12));
    id v3 = sub_10011D7CC;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10011D7CC()
{
  uint64_t v1 = v0[80];
  uint64_t v2 = v0[68];
  uint64_t v3 = v0[66];
  uint64_t v4 = v0[65];
  sub_1001204D8(v0[64], (uint64_t (*)(void))type metadata accessor for CancelOrPauseInstallAction);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  (*(void (**)(void, void))(v1 + 8))(v0[82], v0[79]);
  sub_10002ED08((uint64_t)(v0 + 22));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10011D974()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 688) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_10011E5D0;
  }
  else
  {
    (*(void (**)(void, void))(v2[56] + 8))(v2[57], v2[55]);
    uint64_t v3 = sub_10011DAA0;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10011DAA0()
{
  if ([*(id *)(v0 + 392) shouldPromptForConfirmation])
  {
    if (qword_1001A0E68 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for OSLogger();
    sub_10002F6AC(v1, (uint64_t)qword_1001AE380);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.init(stringLiteral:)();
    Logger.error(_:)();
    swift_bridgeObjectRelease();
  }
  id v2 = [*(id *)(v0 + 392) completionOffer];
  *(void *)(v0 + 696) = v2;
  if (v2)
  {
    sub_10002DC48(v0 + 256);
    if (*(void *)(v0 + 280))
    {
      uint64_t v3 = *(void *)(v0 + 392);
      sub_100031C10((long long *)(v0 + 256), v0 + 216);
      sub_10002EE34(0, (unint64_t *)&qword_1001A5470);
      BaseObjectGraph.optional<A>(_:)();
      uint64_t v4 = *(void **)(v0 + 336);
      MetricsFieldsContext.init()();
      *(void *)(v0 + 344) = v3;
      if (qword_1001A0DC0 != -1) {
        swift_once();
      }
      uint64_t v5 = sub_10002EB60(qword_1001A22E0);
      sub_10002F6AC(v5, (uint64_t)qword_1001AE298);
      sub_10002EB60(&qword_1001A1700);
      MetricsFieldsContext.addValue<A>(_:forProperty:)();
      if (v4)
      {
        *(void *)(v0 + 352) = v4;
        uint64_t v6 = qword_1001A0DA0;
        id v7 = v4;
        if (v6 != -1) {
          swift_once();
        }
        uint64_t v8 = sub_10002EB60(&qword_1001A50E0);
        sub_10002F6AC(v8, (uint64_t)qword_1001AE268);
        MetricsFieldsContext.addValue<A>(_:forProperty:)();
      }
      uint64_t v9 = *(void *)(v0 + 472);
      uint64_t v10 = *(void *)(v0 + 480);
      uint64_t v34 = *(void *)(v0 + 464);
      uint64_t v11 = *(void *)(v0 + 432);
      uint64_t v13 = *(void *)(v0 + 408);
      uint64_t v12 = *(void *)(v0 + 416);
      (*(void (**)(uint64_t, void, uint64_t))(v12 + 32))(v11, *(void *)(v0 + 424), v13);

      type metadata accessor for ObjectGraph();
      inject<A, B>(_:from:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v10, v11, v13);
      (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v10, enum case for ActionDispatcher.MetricsBehavior.fromAction<A>(_:), v34);
      uint64_t v14 = (void *)swift_task_alloc();
      *(void *)(v0 + 704) = v14;
      *uint64_t v14 = v0;
      v14[1] = sub_10011E280;
      uint64_t v15 = *(void *)(v0 + 520);
      uint64_t v16 = *(void *)(v0 + 480);
      uint64_t v17 = *(void *)(v0 + 376);
      uint64_t v18 = *(void *)(v0 + 384);
      return ActionDispatcher.perform(_:withMetrics:asPartOf:)(v17, v0 + 216, v16, v18, v15);
    }
    uint64_t v35 = *(void *)(v0 + 656);
    uint64_t v36 = *(void *)(v0 + 648);
    uint64_t v24 = *(void *)(v0 + 640);
    uint64_t v25 = *(void *)(v0 + 632);
    sub_100034B8C(v0 + 256, (uint64_t *)&unk_1001A2180);
    type metadata accessor for ASCAppOfferActionError(0);
    *(void *)(v0 + 368) = 2;
    sub_10002EB60(&qword_1001A4CE0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10014CED0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v27;
    _StringGuts.grow(_:)(32);
    swift_getObjectType();
    uint64_t v28 = _typeName(_:qualified:)();
    uint64_t v30 = v29;
    swift_bridgeObjectRelease();
    v31._object = (void *)0x800000010015B540;
    v31._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v31);
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = v28;
    *(void *)(inited + 56) = v30;
    sub_100062F68(inited);
    sub_100120224((unint64_t *)&qword_1001A1300, type metadata accessor for ASCAppOfferActionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_unknownObjectRelease();
    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v32(v35, v25);
    v32(v36, v25);
    sub_10002ED08(v0 + 176);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    uint64_t v20 = *(void *)(v0 + 440);
    uint64_t v19 = *(void *)(v0 + 448);
    uint64_t v21 = *(void *)(v0 + 376);
    uint64_t v22 = *(void (**)(void, void))(*(void *)(v0 + 640) + 8);
    v22(*(void *)(v0 + 656), *(void *)(v0 + 632));
    (*(void (**)(uint64_t, void, uint64_t))(v19 + 104))(v21, enum case for ActionOutcome.performed(_:), v20);
    v22(*(void *)(v0 + 648), *(void *)(v0 + 632));
    sub_10002ED08(v0 + 176);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v23();
}

uint64_t sub_10011E280()
{
  id v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 712) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[59] + 8))(v2[60], v2[58]);
  if (v0) {
    uint64_t v3 = sub_10011ED18;
  }
  else {
    uint64_t v3 = sub_10011E3E8;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10011E3E8()
{
  uint64_t v12 = v0[82];
  uint64_t v1 = v0[80];
  uint64_t v2 = v0[79];
  uint64_t v3 = v0[67];
  uint64_t v4 = v0[66];
  uint64_t v5 = v0[65];
  uint64_t v6 = v0[54];
  uint64_t v8 = v0[51];
  uint64_t v7 = v0[52];
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  sub_10002ED08((uint64_t)(v0 + 27));
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  v9(v12, v2);
  v9(v0[81], v0[79]);
  sub_10002ED08((uint64_t)(v0 + 22));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_10011E5D0()
{
  *(void *)(v0 + 328) = *(void *)(v0 + 688);
  sub_10002EB60((uint64_t *)&unk_1001A3FC0);
  if (swift_dynamicCast())
  {
    uint64_t v39 = v0 + 176;
    uint64_t v1 = *(void *)(v0 + 440);
    uint64_t v2 = *(void *)(v0 + 448);
    uint64_t v3 = *(void *)(v0 + 376);
    uint64_t v4 = *(void (**)(void, void))(*(void *)(v0 + 640) + 8);
    v4(*(void *)(v0 + 656), *(void *)(v0 + 632));
    (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v3, enum case for ActionOutcome.performed(_:), v1);
    swift_errorRelease();
LABEL_15:
    v4(*(void *)(v0 + 648), *(void *)(v0 + 632));
    sub_10002ED08(v39);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
LABEL_16:
    return v25();
  }
  swift_errorRelease();
  id v5 = [*(id *)(v0 + 392) completionOffer];
  *(void *)(v0 + 696) = v5;
  if (!v5)
  {
    uint64_t v39 = v0 + 176;
    uint64_t v22 = *(void *)(v0 + 440);
    uint64_t v23 = *(void *)(v0 + 448);
    uint64_t v24 = *(void *)(v0 + 376);
    uint64_t v4 = *(void (**)(void, void))(*(void *)(v0 + 640) + 8);
    v4(*(void *)(v0 + 656), *(void *)(v0 + 632));
    (*(void (**)(uint64_t, void, uint64_t))(v23 + 104))(v24, enum case for ActionOutcome.performed(_:), v22);
    goto LABEL_15;
  }
  sub_10002DC48(v0 + 256);
  if (!*(void *)(v0 + 280))
  {
    uint64_t v36 = *(void *)(v0 + 656);
    uint64_t v38 = *(void *)(v0 + 648);
    uint64_t v26 = *(void *)(v0 + 640);
    uint64_t v27 = *(void *)(v0 + 632);
    sub_100034B8C(v0 + 256, (uint64_t *)&unk_1001A2180);
    type metadata accessor for ASCAppOfferActionError(0);
    *(void *)(v0 + 368) = 2;
    sub_10002EB60(&qword_1001A4CE0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10014CED0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v29;
    _StringGuts.grow(_:)(32);
    swift_getObjectType();
    uint64_t v30 = _typeName(_:qualified:)();
    uint64_t v32 = v31;
    swift_bridgeObjectRelease();
    v33._object = (void *)0x800000010015B540;
    v33._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v33);
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = v30;
    *(void *)(inited + 56) = v32;
    sub_100062F68(inited);
    sub_100120224((unint64_t *)&qword_1001A1300, type metadata accessor for ASCAppOfferActionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_unknownObjectRelease();
    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v34(v36, v27);
    v34(v38, v27);
    sub_10002ED08(v0 + 176);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_16;
  }
  uint64_t v6 = *(void *)(v0 + 392);
  sub_100031C10((long long *)(v0 + 256), v0 + 216);
  sub_10002EE34(0, (unint64_t *)&qword_1001A5470);
  BaseObjectGraph.optional<A>(_:)();
  uint64_t v7 = *(void **)(v0 + 336);
  MetricsFieldsContext.init()();
  *(void *)(v0 + 344) = v6;
  if (qword_1001A0DC0 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_10002EB60(qword_1001A22E0);
  sub_10002F6AC(v8, (uint64_t)qword_1001AE298);
  sub_10002EB60(&qword_1001A1700);
  MetricsFieldsContext.addValue<A>(_:forProperty:)();
  if (v7)
  {
    *(void *)(v0 + 352) = v7;
    uint64_t v9 = qword_1001A0DA0;
    id v10 = v7;
    if (v9 != -1) {
      swift_once();
    }
    uint64_t v11 = sub_10002EB60(&qword_1001A50E0);
    sub_10002F6AC(v11, (uint64_t)qword_1001AE268);
    MetricsFieldsContext.addValue<A>(_:forProperty:)();
  }
  uint64_t v12 = *(void *)(v0 + 472);
  uint64_t v13 = *(void *)(v0 + 480);
  uint64_t v37 = *(void *)(v0 + 464);
  uint64_t v14 = *(void *)(v0 + 432);
  uint64_t v16 = *(void *)(v0 + 408);
  uint64_t v15 = *(void *)(v0 + 416);
  (*(void (**)(uint64_t, void, uint64_t))(v15 + 32))(v14, *(void *)(v0 + 424), v16);

  type metadata accessor for ObjectGraph();
  inject<A, B>(_:from:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, v14, v16);
  (*(void (**)(uint64_t, void, uint64_t))(v12 + 104))(v13, enum case for ActionDispatcher.MetricsBehavior.fromAction<A>(_:), v37);
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 704) = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_10011E280;
  uint64_t v18 = *(void *)(v0 + 520);
  uint64_t v19 = *(void *)(v0 + 480);
  uint64_t v20 = *(void *)(v0 + 376);
  uint64_t v21 = *(void *)(v0 + 384);
  return ActionDispatcher.perform(_:withMetrics:asPartOf:)(v20, v0 + 216, v19, v21, v18);
}

uint64_t sub_10011ED18()
{
  uint64_t v12 = v0[82];
  uint64_t v13 = v0[81];
  uint64_t v1 = v0[80];
  uint64_t v2 = v0[79];
  uint64_t v3 = v0[67];
  uint64_t v4 = v0[66];
  uint64_t v5 = v0[65];
  uint64_t v6 = v0[54];
  uint64_t v8 = v0[51];
  uint64_t v7 = v0[52];
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  sub_10002ED08((uint64_t)(v0 + 27));
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  v9(v12, v2);
  v9(v13, v2);
  sub_10002ED08((uint64_t)(v0 + 22));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_10011EF08()
{
  uint64_t v1 = v0[82];
  uint64_t v2 = v0[80];
  uint64_t v3 = v0[79];
  uint64_t v4 = v0[68];
  uint64_t v5 = v0[66];
  uint64_t v6 = v0[65];
  sub_1001204D8(v0[64], (uint64_t (*)(void))type metadata accessor for CancelOrPauseInstallAction);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_10002ED08((uint64_t)(v0 + 12));
  sub_10002ED08((uint64_t)(v0 + 22));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10011F0CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[9] = a3;
  v4[10] = a4;
  v4[7] = a1;
  v4[8] = a2;
  return _swift_task_switch(sub_10011F0F0, 0, 0);
}

uint64_t sub_10011F0F0()
{
  id v1 = [*(id *)(v0 + 64) remoteControllerRequirement];
  *(void *)(v0 + 88) = v1;
  if (!v1)
  {
    uint64_t v9 = *(void *)(v0 + 56);
    uint64_t v10 = enum case for ActionOutcome.performed(_:);
    uint64_t v11 = type metadata accessor for ActionOutcome();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104))(v9, v10, v11);
LABEL_12:
    uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
  uint64_t v2 = v1;
  sub_10002EB60(&qword_1001A19A0);
  type metadata accessor for ObjectGraph();
  inject<A, B>(_:from:)();
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;
  if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v6)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0) {
      goto LABEL_11;
    }
  }
  if ([(id)swift_getObjCClassFromMetadata() userHasPairedGameController])
  {
LABEL_11:
    uint64_t v12 = *(void *)(v0 + 56);

    uint64_t v13 = enum case for ActionOutcome.performed(_:);
    uint64_t v14 = type metadata accessor for ActionOutcome();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 104))(v12, v13, v14);
    sub_10002ED08(v0 + 16);
    goto LABEL_12;
  }
  uint64_t v29 = *(void *)(v0 + 72);
  sub_10002EC6C((void *)(v0 + 16), *(void *)(v0 + 40));
  v17._object = (void *)0x8000000100161D50;
  v17._uint64_t countAndFlagsBits = 0xD000000000000026;
  Swift::String v18 = Localizer.string(forKey:)(v17);
  *(void *)(v0 + 96) = v18._object;
  sub_10002EC6C((void *)(v0 + 16), *(void *)(v0 + 40));
  v19._uint64_t countAndFlagsBits = 0xD000000000000028;
  v19._object = (void *)0x8000000100161D80;
  Swift::String v20 = Localizer.string(forKey:)(v19);
  *(void *)(v0 + 104) = v20._object;
  sub_10002EC6C((void *)(v0 + 16), *(void *)(v0 + 40));
  v21._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  v21._object = (void *)0x8000000100161DB0;
  Swift::String v22 = Localizer.string(forKey:)(v21);
  *(void *)(v0 + 112) = v22._object;
  sub_10002EC6C((void *)(v0 + 16), *(void *)(v0 + 40));
  v23._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
  v23._object = (void *)0x8000000100161DE0;
  Swift::String v24 = Localizer.string(forKey:)(v23);
  *(void *)(v0 + 120) = v24._object;
  uint64_t v25 = (Swift::String *)swift_task_alloc();
  *(void *)(v0 + 128) = v25;
  v25[1] = v24;
  _OWORD v25[2] = v22;
  v25[3] = v18;
  v25[4] = v20;
  v25[5]._uint64_t countAndFlagsBits = v29;
  uint64_t v26 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v26;
  uint64_t v27 = type metadata accessor for ActionOutcome();
  void *v26 = v0;
  v26[1] = sub_10011F518;
  uint64_t v28 = *(void *)(v0 + 56);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v28, 0, 0, 0xD000000000000037, 0x8000000100161E10, sub_10012026C, v25, v27);
}

uint64_t sub_10011F518()
{
  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10011F6D4;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v2 = sub_10011F664;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10011F664()
{
  sub_10002ED08(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10011F6D4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  sub_10002ED08(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10011F784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v53 = a8;
  uint64_t v52 = a7;
  uint64_t v51 = a6;
  uint64_t v43 = a5;
  uint64_t v47 = a4;
  uint64_t v42 = a3;
  uint64_t v45 = a2;
  uint64_t v41 = a1;
  uint64_t v50 = a9;
  id v54 = a10;
  uint64_t v55 = *a10;
  uint64_t v59 = sub_10002EB60(&qword_1001A19B8);
  uint64_t v57 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  uint64_t v56 = (char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_10002EB60((uint64_t *)&unk_1001A2160);
  uint64_t v58 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v48 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for AlertAction();
  __chkstk_darwin(v46);
  uint64_t v44 = (char *)v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10002EB60((uint64_t *)&unk_1001A5490);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14);
  Swift::String v17 = (char *)v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for ActionMetrics();
  __chkstk_darwin(v18 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static ActionMetrics.notInstrumented.getter();
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v40(v17, a1, v14);
  unint64_t v19 = (*(unsigned __int8 *)(v15 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v39[1] = v19 + v16;
  uint64_t v20 = swift_allocObject();
  Swift::String v21 = *(void (**)(unint64_t, char *, uint64_t))(v15 + 32);
  v21(v20 + v19, v17, v14);
  uint64_t v22 = type metadata accessor for ClosureAction();
  v64[1] = v22;
  v64[2] = &protocol witness table for ClosureAction;
  sub_100031A88(v63);
  ClosureAction.init(actionMetrics:body:)();
  v65[0] = v45;
  v65[1] = v42;
  sub_1001202D4((uint64_t)v63, (uint64_t)v66);
  static ActionMetrics.notInstrumented.getter();
  v40(v17, v41, v14);
  uint64_t v23 = swift_allocObject();
  v21(v23 + v19, v17, v14);
  uint64_t v61 = v22;
  uint64_t v62 = &protocol witness table for ClosureAction;
  sub_100031A88(v60);
  ClosureAction.init(actionMetrics:body:)();
  v63[0] = v47;
  v63[1] = v43;
  sub_1001202D4((uint64_t)v60, (uint64_t)v64);
  uint64_t v24 = (uint64_t)v44;
  static ActionMetrics.notInstrumented.getter();
  sub_10002EB60(&qword_1001A23C0);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_10014CD00;
  sub_100031750((uint64_t)v63, v25 + 32);
  sub_100031750((uint64_t)v65, v25 + 88);
  uint64_t v26 = v46;
  uint64_t v27 = (void *)(v24 + *(int *)(v46 + 20));
  uint64_t v28 = v52;
  void *v27 = v51;
  v27[1] = v28;
  uint64_t v29 = (void *)(v24 + *(int *)(v26 + 24));
  uint64_t v30 = v50;
  *uint64_t v29 = v53;
  v29[1] = v30;
  uint64_t v31 = v26;
  *(void *)(v24 + *(int *)(v26 + 28)) = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v32 = v48;
  uint64_t v33 = v49;
  inject<A, B>(_:from:)();
  uint64_t v61 = v31;
  uint64_t v62 = (void *)sub_100120224((unint64_t *)&qword_1001A54A0, (void (*)(uint64_t))type metadata accessor for AlertAction);
  uint64_t v34 = sub_100031A88(v60);
  sub_100120470(v24, (uint64_t)v34, (uint64_t (*)(void))type metadata accessor for AlertAction);
  uint64_t v35 = v57;
  uint64_t v36 = v56;
  uint64_t v37 = v59;
  (*(void (**)(char *, void, uint64_t))(v57 + 104))(v56, enum case for ActionDispatcher.MetricsBehavior.notProcessed<A>(_:), v59);
  ActionDispatcher.perform(_:withMetrics:asPartOf:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v37);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v32, v33);
  sub_1001204D8(v24, (uint64_t (*)(void))type metadata accessor for AlertAction);
  sub_1000317AC((uint64_t)v63);
  sub_1000317AC((uint64_t)v65);
  return sub_10002ED08((uint64_t)v60);
}

uint64_t sub_10011FE2C()
{
  uint64_t v0 = type metadata accessor for ActionOutcome();
  __n128 v1 = __chkstk_darwin(v0);
  (*(void (**)(char *, void, __n128))(v3 + 104))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for ActionOutcome.performed(_:), v1);
  sub_10002EB60((uint64_t *)&unk_1001A5490);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_10011FF10()
{
  return CheckedContinuation.resume(throwing:)();
}

uint64_t sub_10011FF78(void **a1, uint64_t a2)
{
  uint64_t v5 = sub_10002EB60(&qword_1001A2450);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = *a1;
  uint64_t v9 = *v2;
  uint64_t v10 = (void *)swift_allocObject();
  void v10[2] = a2;
  v10[3] = v8;
  void v10[4] = v9;
  sub_10002EB60((uint64_t *)&unk_1001A21F0);
  swift_retain();
  id v11 = v8;
  uint64_t v12 = Promise.__allocating_init()();
  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v7, 1, 1, v13);
  uint64_t v14 = (void *)swift_allocObject();
  void v14[2] = 0;
  v14[3] = 0;
  uint64_t v14[4] = &unk_1001A5460;
  v14[5] = v10;
  v14[6] = v12;
  swift_retain();
  sub_1000F6C04((uint64_t)v7, (uint64_t)&unk_1001A2470, (uint64_t)v14);
  swift_release();
  return v12;
}

uint64_t sub_1001200E8()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100120128(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10002F874;
  return sub_10011C96C(a1, v4, v5, v6);
}

uint64_t sub_1001201DC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100120224(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10012026C(uint64_t a1)
{
  return sub_10011F784(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(void **)(v1 + 80));
}

uint64_t sub_1001202A8()
{
  return sub_100120400((uint64_t (*)(unint64_t))sub_10011FE2C);
}

uint64_t sub_1001202D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60((uint64_t *)&unk_1001A2180);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100120340()
{
  uint64_t v1 = sub_10002EB60((uint64_t *)&unk_1001A5490);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001203D4()
{
  return sub_100120400((uint64_t (*)(unint64_t))sub_10011FF10);
}

uint64_t sub_100120400(uint64_t (*a1)(unint64_t))
{
  uint64_t v3 = *(void *)(sub_10002EB60((uint64_t *)&unk_1001A5490) - 8);
  return a1(v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
}

uint64_t sub_100120470(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001204D8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_100120538()
{
  unint64_t result = qword_1001A54A8;
  if (!qword_1001A54A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A54A8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for OfferAlertOfferActionImplementation.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100120628);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for OfferAlertOfferActionImplementation.Error()
{
  return &type metadata for OfferAlertOfferActionImplementation.Error;
}

unint64_t sub_100120664()
{
  unint64_t result = qword_1001A54B0;
  if (!qword_1001A54B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A54B0);
  }
  return result;
}

ValueMetadata *_s8OpenableVMa()
{
  return &_s8OpenableVN;
}

uint64_t sub_1001206C8(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, char a6)
{
  BOOL v6 = __PAIR128__((unint64_t)(a1 != 0) + a2 - 1, a1 - 1) < 2;
  if (a3 != 6) {
    BOOL v6 = 0;
  }
  unsigned int v7 = a3 < 5u || v6;
  if (a6 == 5) {
    return v7;
  }
  else {
    return 0;
  }
}

void *sub_100120708(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for ActionMetrics();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = *(void **)((char *)a2 + v8);
    *(void *)((char *)a1 + v8) = v10;
    *((unsigned char *)a1 + v9) = *((unsigned char *)a2 + v9);
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    id v11 = v10;
  }
  return a1;
}

uint64_t sub_1001207EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v9;
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  id v10 = v9;
  return a1;
}

uint64_t sub_100120880(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void **)(a2 + v7);
  uint64_t v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100120920(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1001209B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  uint64_t v9 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + v9) = *(unsigned char *)(a2 + v9);
  return a1;
}

uint64_t sub_100120A48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100120A5C);
}

uint64_t sub_100120A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100120B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100120B30);
}

uint64_t sub_100120B30(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ActionMetrics();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for OpenAppAction()
{
  uint64_t result = qword_1001A5518;
  if (!qword_1001A5518) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100120C38()
{
  uint64_t result = type metadata accessor for ActionMetrics();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for OpenAppActionImplementation()
{
  return &type metadata for OpenAppActionImplementation;
}

uint64_t sub_100120CEC()
{
  return sub_100124314((unint64_t *)&qword_1001A1DA0, (void (*)(uint64_t))type metadata accessor for OpenAppAction);
}

void sub_100120D34()
{
  sub_10002EB60(&qword_1001A5590);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10014CED0;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  swift_bridgeObjectRelease();
  *(void *)(inited + 96) = &type metadata for Bool;
  *(unsigned char *)(inited + 72) = 1;
  sub_1000631C4(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v2 = [self optionsWithDictionary:isa];

  qword_1001A5558 = (uint64_t)v2;
}

uint64_t sub_100120E4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for AdamID();
  v3[6] = v4;
  v3[7] = *(void *)(v4 - 8);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_100120F10, 0, 0);
}

uint64_t sub_100120F10()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = type metadata accessor for OpenAppAction();
  v0[9] = v2;
  [*(id *)(v1 + *(int *)(v2 + 20)) int64value];
  AdamID.init(value:)();
  int v3 = (void *)swift_task_alloc();
  v0[10] = v3;
  *int v3 = v0;
  v3[1] = sub_100121028;
  uint64_t v4 = v0[8];
  int v5 = (void *)v0[5];
  return sub_100122658(v4, v5);
}

uint64_t sub_100121028(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 88) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_10012115C;
  }
  else
  {
    *(void *)(v6 + 96) = a2;
    *(void *)(v6 + 104) = a1;
    uint64_t v7 = sub_1001212D0;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_10012115C()
{
  _s3__C4CodeOMa_0(0);
  v0[2] = 0;
  swift_errorRetain();
  sub_100124314(&qword_1001A1548, _s3__C4CodeOMa_0);
  char v1 = static _ErrorCodeProtocol.~= infix(_:_:)();
  swift_errorRelease();
  if (v1)
  {
    swift_errorRelease();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[14] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1001214BC;
    uint64_t v3 = v0[8];
    return sub_100123320(v3);
  }
  else
  {
    (*(void (**)(void, void))(v0[7] + 8))(v0[8], v0[6]);
    swift_task_dealloc();
    int v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_1001212D0()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[4];
  if (*(unsigned char *)(v2 + *(int *)(v1 + 24)))
  {
    id v3 = objc_allocWithZone((Class)ASDApp);
    swift_bridgeObjectRetain();
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v5 = [v3 initWithBundleID:v4];
    v0[18] = v5;

    uint64_t v6 = swift_task_alloc();
    v0[19] = v6;
    *(void *)(v6 + 16) = v5;
    uint64_t v7 = (void *)swift_task_alloc();
    v0[20] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1001218F0;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v7, 0, 0, 0xD00000000000002FLL, 0x8000000100161E50, sub_100123D80, v6, (char *)&type metadata for () + 8);
  }
  else
  {
    char v8 = *(unsigned char *)(v2 + *(int *)(v1 + 28));
    uint64_t v9 = swift_task_alloc();
    v0[16] = v9;
    *(void *)uint64_t v9 = v0;
    *(void *)(v9 + 8) = sub_10012166C;
    uint64_t v11 = v0[12];
    uint64_t v10 = v0[13];
    *(unsigned char *)(v9 + 96) = v8;
    *(void *)(v9 + 40) = v10;
    *(void *)(v9 + 48) = v11;
    return _swift_task_switch(sub_100123DAC, 0, 0);
  }
}

uint64_t sub_1001214BC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 120) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_1001215F0;
  }
  else
  {
    *(void *)(v6 + 96) = a2;
    *(void *)(v6 + 104) = a1;
    uint64_t v7 = sub_1001212D0;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_1001215F0()
{
  (*(void (**)(void, void))(v0[7] + 8))(v0[8], v0[6]);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10012166C()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = sub_100121874;
  }
  else {
    uint64_t v2 = sub_1001217A0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001217A0()
{
  uint64_t v1 = v0[3];
  (*(void (**)(void, void))(v0[7] + 8))(v0[8], v0[6]);
  uint64_t v2 = enum case for ActionOutcome.performed(_:);
  uint64_t v3 = type metadata accessor for ActionOutcome();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104))(v1, v2, v3);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100121874()
{
  (*(void (**)(void, void))(v0[7] + 8))(v0[8], v0[6]);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1001218F0()
{
  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100121AF4;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100121A0C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100121A0C()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 24);
  (*(void (**)(void, void))(*(void *)(v0 + 56) + 8))(*(void *)(v0 + 64), *(void *)(v0 + 48));
  uint64_t v2 = enum case for ActionOutcome.performed(_:);
  uint64_t v3 = type metadata accessor for ActionOutcome();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104))(v1, v2, v3);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_100121AF4()
{
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 48);

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

void sub_100121BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A55A0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = self;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_1001244A8;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100121D60;
  aBlock[3] = &unk_100189FD8;
  uint64_t v10 = _Block_copy(aBlock);
  swift_release();
  [v7 launchMessagesExtensionForApp:a2 withResultHandler:v10];
  _Block_release(v10);
}

uint64_t sub_100121D60(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t sub_100121DB4(uint64_t a1)
{
  if (sub_1000A1D04(a1))
  {
    sub_10002EB60(&qword_1001A55A0);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    sub_10002EB60(&qword_1001A55A0);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_100121E18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A2450);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OpenAppAction();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7 - 8);
  sub_10004526C(a1, (uint64_t)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = swift_allocObject();
  sub_100122120((uint64_t)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10);
  *(void *)(v11 + ((v9 + v10 + 7) & 0xFFFFFFFFFFFFFFF8)) = a2;
  sub_10002EB60((uint64_t *)&unk_1001A21F0);
  swift_retain();
  uint64_t v12 = Promise.__allocating_init()();
  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v6, 1, 1, v13);
  uint64_t v14 = (void *)swift_allocObject();
  void v14[2] = 0;
  v14[3] = 0;
  uint64_t v14[4] = &unk_1001A5568;
  v14[5] = v11;
  v14[6] = v12;
  swift_retain();
  sub_1000F6C04((uint64_t)v6, (uint64_t)&unk_1001A2470, (uint64_t)v14);
  swift_release();
  return v12;
}

uint64_t sub_10012201C()
{
  uint64_t v1 = (int *)(type metadata accessor for OpenAppAction() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for ActionMetrics();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);

  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100122120(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OpenAppAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100122184(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for OpenAppAction() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1 + v5;
  uint64_t v7 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10002F874;
  return sub_100120E4C(a1, v6, v7);
}

void sub_100122294(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = sub_10002EB60(&qword_1001A5598);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  NSString v11 = String._bridgeToObjectiveC()();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  unint64_t v12 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v13 + v12, (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  aBlock[4] = sub_100124374;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10008E9B8;
  aBlock[3] = &unk_100189F88;
  uint64_t v14 = _Block_copy(aBlock);
  swift_release();
  [a2 openApplication:v11 withOptions:a5 completion:v14];
  _Block_release(v14);
}

uint64_t sub_10012246C(void *a1, uint64_t a2)
{
  if (a2)
  {
    swift_errorRetain();
    sub_10002EB60(&qword_1001A5598);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    if (!a1)
    {
      if (qword_1001A0E68 != -1) {
        swift_once();
      }
      uint64_t v4 = type metadata accessor for OSLogger();
      sub_10002F6AC(v4, (uint64_t)qword_1001AE380);
      sub_10002EB60((uint64_t *)&unk_1001A19E0);
      type metadata accessor for LogMessage();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
      LogMessage.init(stringLiteral:)();
      Logger.info(_:)();
      swift_bridgeObjectRelease();
    }
    id v5 = a1;
    sub_10002EB60(&qword_1001A5598);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_100122610()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100122658(uint64_t a1, void *a2)
{
  v2[21] = a1;
  v2[22] = a2;
  v2[23] = *a2;
  type metadata accessor for LogMessage.StringInterpolation();
  v2[24] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for OSLogger();
  v2[25] = v3;
  v2[26] = *(void *)(v3 - 8);
  v2[27] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for DeviceAppQuery();
  v2[28] = v4;
  v2[29] = *(void *)(v4 - 8);
  v2[30] = swift_task_alloc();
  return _swift_task_switch(sub_1001227C8, 0, 0);
}

uint64_t sub_1001227C8()
{
  uint64_t v2 = v0[29];
  uint64_t v1 = (void *)v0[30];
  uint64_t v16 = v0[28];
  uint64_t v3 = v0[21];
  sub_10002EB60(&qword_1001A28E8);
  inject<A, B>(_:from:)();
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[6];
  sub_10002EC6C(v0 + 2, v4);
  sub_10002EB60((uint64_t *)&unk_1001A25E0);
  uint64_t v6 = type metadata accessor for AdamID();
  v0[31] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_10014CED0;
  uint64_t v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 16);
  v0[32] = v10;
  v0[33] = (v7 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v10(v9 + v8, v3, v6);
  NSString v11 = sub_10011ADD8(v9);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *uint64_t v1 = v11;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v1, enum case for DeviceAppQuery.storeIDs(_:), v16);
  uint64_t v12 = *(void *)(v5 + 8);
  uint64_t v13 = (void *)swift_task_alloc();
  v0[34] = v13;
  void *v13 = v0;
  v13[1] = sub_1001229F4;
  uint64_t v14 = v0[30];
  return dispatch thunk of DeviceAppFetcher.fetchQuery(_:)(v14, v4, v12);
}

uint64_t sub_1001229F4(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v4[35] = a1;
  v4[36] = v1;
  swift_task_dealloc();
  (*(void (**)(void, void))(v3[29] + 8))(v3[30], v3[28]);
  if (v1) {
    uint64_t v5 = sub_100123290;
  }
  else {
    uint64_t v5 = sub_100122B64;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100122B64()
{
  uint64_t v1 = v0 + 2;
  unint64_t v2 = v0[35];
  if (!(v2 >> 62))
  {
    if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    type metadata accessor for ASCOpenAppError(0);
    v0[20] = 0;
    sub_100061044((uint64_t)_swiftEmptyArrayStorage);
    sub_100124314((unint64_t *)&qword_1001A1560, type metadata accessor for ASCOpenAppError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v27) {
    goto LABEL_18;
  }
LABEL_3:
  if ((v2 & 0xC000000000000001) != 0)
  {
    id v3 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_24;
    }
    id v3 = *(id *)(v0[35] + 32);
  }
  swift_bridgeObjectRelease();
  if ([v3 isPlaceholder])
  {
    uint64_t v32 = v3;
    uint64_t v33 = v0 + 2;
    uint64_t v1 = v0 + 11;
    if (qword_1001A0E68 == -1)
    {
LABEL_8:
      uint64_t v4 = v0[31];
      uint64_t v30 = (void (*)(uint64_t *, uint64_t, uint64_t))v0[32];
      uint64_t v5 = v0[26];
      uint64_t v6 = v0[27];
      uint64_t v7 = v0[25];
      uint64_t v8 = v0[21];
      uint64_t v9 = sub_10002F6AC(v7, (uint64_t)qword_1001AE380);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v9, v7);
      sub_10002EB60((uint64_t *)&unk_1001A19E0);
      type metadata accessor for LogMessage();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v10._object = (void *)0x8000000100162040;
      v10._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v10);
      v0[14] = v4;
      NSString v11 = sub_100031A88(v1);
      v30(v11, v8, v4);
      LogMessage.StringInterpolation.appendInterpolation(safe:)();
      sub_1000709E0((uint64_t)v1);
      v12._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
      v12._object = (void *)0x8000000100162070;
      LogMessage.StringInterpolation.appendLiteral(_:)(v12);
      LogMessage.init(stringInterpolation:)();
      Logger.error(_:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
      type metadata accessor for ASCOpenAppError(0);
      v0[18] = 0;
      sub_100061044((uint64_t)_swiftEmptyArrayStorage);
      sub_100124314((unint64_t *)&qword_1001A1560, type metadata accessor for ASCOpenAppError);
      _BridgedStoredNSError.init(_:userInfo:)();
LABEL_13:
      swift_willThrow();

      uint64_t v1 = v33;
LABEL_19:
      sub_10002ED08((uint64_t)v1);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v28 = (uint64_t (*)(void))v0[1];
      return v28();
    }
LABEL_24:
    swift_once();
    goto LABEL_8;
  }
  if ([v3 isLaunchProhibited])
  {
    uint64_t v32 = v3;
    uint64_t v33 = v0 + 2;
    if (qword_1001A0E68 != -1) {
      swift_once();
    }
    uint64_t v13 = v0[31];
    uint64_t v31 = (void (*)(uint64_t *, uint64_t, uint64_t))v0[32];
    uint64_t v14 = v0[26];
    uint64_t v15 = v0[27];
    uint64_t v16 = v0[25];
    uint64_t v29 = v0[21];
    uint64_t v17 = sub_10002F6AC(v16, (uint64_t)qword_1001AE380);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v15, v17, v16);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v18._object = (void *)0x8000000100162040;
    v18._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v18);
    v0[10] = v13;
    unint64_t v19 = sub_100031A88(v0 + 7);
    v31(v19, v29, v13);
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_1000709E0((uint64_t)(v0 + 7));
    v20._uint64_t countAndFlagsBits = 0xD000000000000020;
    v20._object = (void *)0x8000000100162010;
    LogMessage.StringInterpolation.appendLiteral(_:)(v20);
    LogMessage.init(stringInterpolation:)();
    Logger.error(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
    type metadata accessor for ASCOpenAppError(0);
    v0[16] = 1;
    sub_100061044((uint64_t)_swiftEmptyArrayStorage);
    sub_100124314((unint64_t *)&qword_1001A1560, type metadata accessor for ASCOpenAppError);
    _BridgedStoredNSError.init(_:userInfo:)();
    goto LABEL_13;
  }
  id v21 = [v3 bundleID];
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v23;

  sub_10002ED08((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v25 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v25(v22, v24);
}

uint64_t sub_100123290()
{
  sub_10002ED08(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100123320(uint64_t a1)
{
  v1[21] = a1;
  type metadata accessor for LogMessage.StringInterpolation();
  v1[22] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for OSLogger();
  v1[23] = v2;
  v1[24] = *(void *)(v2 - 8);
  v1[25] = swift_task_alloc();
  return _swift_task_switch(sub_100123438, 0, 0);
}

uint64_t sub_100123438()
{
  uint64_t v2 = AdamID.int64Value.getter();
  if (v2 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v3 = v2;
  id v4 = objc_allocWithZone((Class)LSApplicationRecord);
  v0[18] = 0;
  id v5 = [v4 initWithStoreItemIdentifier:v3 error:v0 + 18];
  uint64_t v6 = (void *)v0[18];
  if (!v5)
  {
    id v22 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    goto LABEL_10;
  }
  uint64_t v7 = v5;
  id v8 = v6;
  id v9 = [v7 bundleIdentifier];
  if (!v9)
  {

LABEL_10:
    uint64_t v1 = v0 + 6;
    if (qword_1001A0E68 == -1)
    {
LABEL_11:
      uint64_t v23 = v0[24];
      uint64_t v24 = v0[25];
      uint64_t v25 = v0[23];
      uint64_t v26 = v0[21];
      uint64_t v27 = sub_10002F6AC(v25, (uint64_t)qword_1001AE380);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v24, v27, v25);
      sub_10002EB60((uint64_t *)&unk_1001A19E0);
      type metadata accessor for LogMessage();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v28._uint64_t countAndFlagsBits = 0xD000000000000038;
      v28._object = (void *)0x8000000100161F80;
      LogMessage.StringInterpolation.appendLiteral(_:)(v28);
      uint64_t v29 = type metadata accessor for AdamID();
      v0[9] = v29;
      uint64_t v30 = sub_100031A88(v1);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(v30, v26, v29);
      LogMessage.StringInterpolation.appendInterpolation(safe:)();
      sub_1000709E0((uint64_t)v1);
      v31._uint64_t countAndFlagsBits = 46;
      v31._object = (void *)0xE100000000000000;
      LogMessage.StringInterpolation.appendLiteral(_:)(v31);
      LogMessage.init(stringInterpolation:)();
      Logger.error(_:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v24, v25);
      type metadata accessor for ASCOpenAppError(0);
      v0[14] = 0;
      sub_100061044((uint64_t)_swiftEmptyArrayStorage);
      sub_100124314((unint64_t *)&qword_1001A1560, type metadata accessor for ASCOpenAppError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();
LABEL_17:
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v41 = (uint64_t (*)(void))v0[1];
      return v41();
    }
LABEL_24:
    swift_once();
    goto LABEL_11;
  }
  Swift::String v10 = v9;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  if ([v7 isLaunchProhibited])
  {
    swift_bridgeObjectRelease();
    if (qword_1001A0E68 != -1) {
      swift_once();
    }
    uint64_t v15 = v0[24];
    uint64_t v14 = v0[25];
    uint64_t v16 = v0[23];
    uint64_t v44 = v0[21];
    uint64_t v17 = sub_10002F6AC(v16, (uint64_t)qword_1001AE380);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v14, v17, v16);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v18._object = (void *)0x8000000100161FC0;
    v18._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v18);
    uint64_t v19 = type metadata accessor for AdamID();
    v0[5] = v19;
    Swift::String v20 = sub_100031A88(v0 + 2);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v20, v44, v19);
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_1000709E0((uint64_t)(v0 + 2));
    v21._uint64_t countAndFlagsBits = 0xD000000000000020;
    v21._object = (void *)0x8000000100162010;
    LogMessage.StringInterpolation.appendLiteral(_:)(v21);
    LogMessage.init(stringInterpolation:)();
    Logger.error(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    type metadata accessor for ASCOpenAppError(0);
    v0[20] = 1;
    sub_100061044((uint64_t)_swiftEmptyArrayStorage);
    sub_100124314((unint64_t *)&qword_1001A1560, type metadata accessor for ASCOpenAppError);
    _BridgedStoredNSError.init(_:userInfo:)();
LABEL_16:
    swift_willThrow();

    goto LABEL_17;
  }
  id v32 = [v7 appClipMetadata];
  if (v32)
  {

    swift_bridgeObjectRelease();
    if (qword_1001A0E68 != -1) {
      swift_once();
    }
    uint64_t v34 = v0[24];
    uint64_t v33 = v0[25];
    uint64_t v35 = v0[23];
    uint64_t v45 = v0[21];
    uint64_t v36 = sub_10002F6AC(v35, (uint64_t)qword_1001AE380);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v33, v36, v35);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v37._object = (void *)0x8000000100161FC0;
    v37._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v37);
    uint64_t v38 = type metadata accessor for AdamID();
    v0[13] = v38;
    uint64_t v39 = sub_100031A88(v0 + 10);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 16))(v39, v45, v38);
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_1000709E0((uint64_t)(v0 + 10));
    v40._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v40._object = (void *)0x8000000100161FF0;
    LogMessage.StringInterpolation.appendLiteral(_:)(v40);
    LogMessage.init(stringInterpolation:)();
    Logger.error(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
    type metadata accessor for ASCOpenAppError(0);
    v0[17] = 0;
    sub_100061044((uint64_t)_swiftEmptyArrayStorage);
    sub_100124314((unint64_t *)&qword_1001A1560, type metadata accessor for ASCOpenAppError);
    _BridgedStoredNSError.init(_:userInfo:)();
    goto LABEL_16;
  }

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v43 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v43(v11, v13);
}

void sub_100123D80(uint64_t a1)
{
  sub_100121BA4(a1, *(void *)(v1 + 16));
}

uint64_t sub_100123D88(uint64_t a1, uint64_t a2, char a3)
{
  *(unsigned char *)(v3 + 96) = a3;
  *(void *)(v3 + 40) = a1;
  *(void *)(v3 + 48) = a2;
  return _swift_task_switch(sub_100123DAC, 0, 0);
}

uint64_t sub_100123DAC()
{
  id v1 = [self serviceWithDefaultShellEndpoint];
  *(void *)(v0 + 56) = v1;
  if (v1)
  {
    id v2 = v1;
    if (*(unsigned char *)(v0 + 96) == 1)
    {
      if (qword_1001A0E50 != -1) {
        swift_once();
      }
      uint64_t v3 = qword_1001A5558;
      id v4 = (id)qword_1001A5558;
    }
    else
    {
      uint64_t v3 = 0;
    }
    *(void *)(v0 + 64) = v3;
    uint64_t v9 = *(void *)(v0 + 40);
    uint64_t v8 = *(void *)(v0 + 48);
    Swift::String v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 72) = v10;
    void v10[2] = v2;
    v10[3] = v9;
    void v10[4] = v8;
    uint64_t v10[5] = v3;
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v11;
    uint64_t v12 = sub_10002EB60(&qword_1001A5588);
    void *v11 = v0;
    v11[1] = sub_100124118;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 32, 0, 0, 0xD000000000000030, 0x8000000100161EA0, sub_10012435C, v10, v12);
  }
  else
  {
    if (qword_1001A0E68 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for OSLogger();
    sub_10002F6AC(v5, (uint64_t)qword_1001AE380);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.init(stringLiteral:)();
    Logger.error(_:)();
    swift_bridgeObjectRelease();
    type metadata accessor for ASCOpenAppError(0);
    *(void *)(v0 + 24) = 2;
    sub_100061044((uint64_t)_swiftEmptyArrayStorage);
    sub_100124314((unint64_t *)&qword_1001A1560, type metadata accessor for ASCOpenAppError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
}

uint64_t sub_100124118()
{
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = sub_1001242A4;
  }
  else
  {
    swift_task_dealloc();
    id v2 = sub_100124234;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100124234()
{
  uint64_t v1 = *(void **)(v0 + 56);
  id v2 = *(void **)(v0 + 64);

  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1001242A4()
{
  uint64_t v1 = (void *)v0[8];
  id v2 = (void *)v0[7];
  swift_task_dealloc();

  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100124314(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10012435C(uint64_t a1)
{
  sub_100122294(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100124368()
{
  return sub_10012441C(&qword_1001A5598);
}

uint64_t sub_100124374(void *a1, uint64_t a2)
{
  sub_10002EB60(&qword_1001A5598);

  return sub_10012246C(a1, a2);
}

uint64_t sub_1001243F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100124408()
{
  return swift_release();
}

uint64_t sub_100124410()
{
  return sub_10012441C(&qword_1001A55A0);
}

uint64_t sub_10012441C(uint64_t *a1)
{
  uint64_t v2 = sub_10002EB60(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return _swift_deallocObject(v1, v6, v7);
}

uint64_t sub_1001244A8(uint64_t a1)
{
  sub_10002EB60(&qword_1001A55A0);

  return sub_100121DB4(a1);
}

uint64_t sub_100124524()
{
  uint64_t v0 = type metadata accessor for OSLogger.Subsystem();
  sub_10002F648(v0, qword_1001AE350);
  sub_10002F6AC(v0, (uint64_t)qword_1001AE350);
  return OSLogger.Subsystem.init(rawValue:)();
}

uint64_t sub_100124588(uint64_t a1)
{
  return sub_100124650(a1, qword_1001AE368);
}

uint64_t sub_1001245AC(uint64_t a1)
{
  return sub_100124650(a1, qword_1001AE380);
}

uint64_t sub_1001245CC(uint64_t a1)
{
  return sub_100124650(a1, qword_1001AE398);
}

uint64_t sub_1001245EC(uint64_t a1)
{
  return sub_100124650(a1, qword_1001AE3B0);
}

uint64_t sub_10012460C(uint64_t a1)
{
  return sub_100124650(a1, qword_1001AE3C8);
}

uint64_t sub_10012462C(uint64_t a1)
{
  return sub_100124650(a1, qword_1001AE3E0);
}

uint64_t sub_100124650(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for OSLogger.Subsystem();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OSLogger();
  sub_10002F648(v7, a2);
  sub_10002F6AC(v7, (uint64_t)a2);
  if (qword_1001A0E58 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_10002F6AC(v3, (uint64_t)qword_1001AE350);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v8, v3);
  return OSLogger.init(subsystem:category:)();
}

uint64_t sub_1001247A0()
{
  id v0 = [self processInfo];
  [v0 operatingSystemVersion];

  uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
  v1._uint64_t countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 46;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return v6;
}

unint64_t sub_1001248B0()
{
  uint64_t v0 = type metadata accessor for Device();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  Swift::String v3 = &v20[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10002EB60(&qword_1001A25C8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001503A0;
  *(void *)(inited + 32) = 29551;
  *(void *)(inited + 40) = 0xE200000000000000;
  static Device.current.getter();
  uint64_t v5 = Device.systemName.getter();
  uint64_t v7 = v6;
  uint64_t v8 = *(void (**)(unsigned char *, uint64_t))(v1 + 8);
  v8(v3, v0);
  *(void *)(inited + 48) = v5;
  *(void *)(inited + 56) = v7;
  strcpy((char *)(inited + 64), "hardwareFamily");
  *(unsigned char *)(inited + 79) = -18;
  static Device.current.getter();
  uint64_t v9 = Device.modelFamily.getter();
  uint64_t v11 = v10;
  v8(v3, v0);
  *(void *)(inited + 80) = v9;
  *(void *)(inited + 88) = v11;
  strcpy((char *)(inited + 96), "hardwareModel");
  *(_WORD *)(inited + 110) = -4864;
  static Device.current.getter();
  uint64_t v12 = Device.physicalModel.getter();
  uint64_t v14 = v13;
  v8(v3, v0);
  *(void *)(inited + 112) = v12;
  *(void *)(inited + 120) = v14;
  strcpy((char *)(inited + 128), "osBuildNumber");
  *(_WORD *)(inited + 142) = -4864;
  static Device.current.getter();
  uint64_t v15 = Device.buildVersion.getter();
  uint64_t v17 = v16;
  v8(v3, v0);
  *(void *)(inited + 144) = v15;
  *(void *)(inited + 152) = v17;
  *(void *)(inited + 160) = 0x6F6973726556736FLL;
  *(void *)(inited + 168) = 0xE90000000000006ELL;
  *(void *)(inited + 176) = sub_1001247A0();
  *(void *)(inited + 184) = v18;
  return sub_1000630A0(inited);
}

id sub_100124AD8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v31 = a4;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v29 = *(void *)(v7 - 8);
  uint64_t v30 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = 0;
  Swift::String v28 = (void *)(v10 + 16);
  uint64_t v11 = (void *)swift_allocObject();
  void v11[2] = a1;
  v11[3] = a2;
  v11[4] = v10;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_1001253A4;
  *(void *)(v12 + 24) = v11;
  Swift::String v37 = sub_1001253B0;
  uint64_t v38 = v12;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v34 = 1107296256;
  uint64_t v35 = sub_100036C30;
  uint64_t v36 = &unk_10018A0A0;
  uint64_t v13 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  [a3 setBeginEventProcessingBlock:v13];
  _Block_release(v13);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_1001253A4;
  *(void *)(v14 + 24) = v11;
  Swift::String v37 = sub_100125418;
  uint64_t v38 = v14;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v34 = 1107296256;
  uint64_t v35 = sub_100036C30;
  uint64_t v36 = &unk_10018A0F0;
  uint64_t v15 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  [a3 setEndEventProcessingBlock:v15];
  _Block_release(v15);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_1001253A4;
  *(void *)(v16 + 24) = v11;
  Swift::String v37 = sub_100125430;
  uint64_t v38 = v16;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v34 = 1107296256;
  uint64_t v35 = sub_100036C30;
  uint64_t v36 = &unk_10018A140;
  uint64_t v17 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  [a3 setEmitEventProcessingBlock:v17];
  _Block_release(v17);
  Swift::String v37 = sub_10012548C;
  uint64_t v38 = v10;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v34 = 1107296256;
  uint64_t v35 = sub_100125130;
  uint64_t v36 = &unk_10018A168;
  uint64_t v18 = _Block_copy(&aBlock);
  uint64_t v32 = v10;
  swift_retain();
  swift_release();
  [a3 setDeviceRebootProcessingBlock:v18];
  _Block_release(v18);
  DateInterval.start.getter();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v20 = v30;
  Swift::String v21 = *(void (**)(char *, uint64_t))(v29 + 8);
  v21(v9, v30);
  DateInterval.end.getter();
  Class v22 = Date._bridgeToObjectiveC()().super.isa;
  v21(v9, v20);
  long long aBlock = 0;
  LODWORD(v13) = [a3 processLogArchiveWithPath:0 startDate:isa endDate:v22 errorOut:&aBlock];

  uint64_t v23 = aBlock;
  if (!v13)
  {
    uint64_t v25 = v23;
    _convertNSErrorToError(_:)();

    goto LABEL_5;
  }
  uint64_t v24 = v28;
  swift_beginAccess();
  if (*v24)
  {
    swift_errorRetain();
LABEL_5:
    swift_willThrow();
    swift_release();
    swift_release();
    [a3 setBeginEventProcessingBlock:0];
    [a3 setEndEventProcessingBlock:0];
    return [a3 setEmitEventProcessingBlock:0];
  }
  swift_release();
  swift_release();
  [a3 setBeginEventProcessingBlock:0];
  [a3 setEndEventProcessingBlock:0];
  return [a3 setEmitEventProcessingBlock:0];
}

uint64_t sub_100125034(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, unsigned char *))
{
  v4[0] = 0;
  a3(a1, a2, v4);
  return (v4[0] ^ 1) & 1;
}

uint64_t sub_1001250B8(uint64_t a1)
{
  sub_100125494();
  uint64_t v2 = swift_allocError();
  swift_beginAccess();
  *(void *)(a1 + 16) = v2;
  swift_errorRelease();
  return 0;
}

uint64_t sub_100125130(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  LOBYTE(v1) = v1(v2);
  swift_release();
  return v1 & 1;
}

uint64_t sub_100125170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v10 = [objc_allocWithZone((Class)SignpostSupportObjectExtractor) init];
  id v11 = [objc_allocWithZone((Class)SignpostSupportSubsystemCategoryAllowlist) init];
  NSString v12 = String._bridgeToObjectiveC()();
  NSString v13 = String._bridgeToObjectiveC()();
  [v11 addSubsystem:v12 category:v13];

  [v10 setSubsystemCategoryFilter:v11];
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a6;
  *(void *)(v14 + 24) = a7;
  sub_100124AD8((uint64_t)sub_100125304, v14, v10, a1);
  if (v17)
  {

    return swift_release();
  }
  else
  {

    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    uint64_t result = swift_release();
    if (isEscapingClosureAtFileLocation) {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1001252F4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100125304()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10012532C()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100125364()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001253A4(uint64_t a1, uint64_t a2)
{
  return sub_100125034(a1, a2, *(void (**)(uint64_t, uint64_t, unsigned char *))(v2 + 16));
}

uint64_t sub_1001253B0(uint64_t a1)
{
  return sub_100125448(a1, (uint64_t (*)(void))&static os_signpost_type_t.begin.getter);
}

uint64_t sub_1001253C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001253D8()
{
  return swift_release();
}

uint64_t sub_1001253E0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100125418(uint64_t a1)
{
  return sub_100125448(a1, (uint64_t (*)(void))&static os_signpost_type_t.end.getter);
}

uint64_t sub_100125430(uint64_t a1)
{
  return sub_100125448(a1, (uint64_t (*)(void))&static os_signpost_type_t.event.getter);
}

uint64_t sub_100125448(uint64_t a1, uint64_t (*a2)(void))
{
  Swift::String v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16);
  uint64_t v5 = a2();
  return v4(v5, a1) & 1;
}

uint64_t sub_10012548C()
{
  return sub_1001250B8(v0);
}

unint64_t sub_100125494()
{
  unint64_t result = qword_1001A55A8;
  if (!qword_1001A55A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A55A8);
  }
  return result;
}

ValueMetadata *type metadata accessor for OSSignpostExtractor.DeviceRebootError()
{
  return &type metadata for OSSignpostExtractor.DeviceRebootError;
}

ValueMetadata *type metadata accessor for OSSignpostExtractor()
{
  return &type metadata for OSSignpostExtractor;
}

uint64_t *sub_100125528(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for ActionMetrics();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t *)((char *)a2 + v8);
    swift_errorRetain();
    *(uint64_t *)((char *)a1 + v8) = v9;
  }
  return a1;
}

uint64_t sub_1001255FC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ActionMetrics();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_errorRelease();
}

uint64_t sub_100125670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a2 + v7);
  swift_errorRetain();
  *(void *)(a1 + v7) = v8;
  return a1;
}

uint64_t sub_1001256F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a2 + v7);
  swift_errorRetain();
  *(void *)(a1 + v7) = v8;
  swift_errorRelease();
  return a1;
}

uint64_t sub_100125780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_errorRelease();
  return a1;
}

uint64_t sub_100125804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100125818);
}

uint64_t sub_100125818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1001258D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001258EC);
}

uint64_t sub_1001258EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ActionMetrics();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for PresentErrorAction()
{
  uint64_t result = qword_1001A5608;
  if (!qword_1001A5608) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001259F4()
{
  uint64_t result = type metadata accessor for ActionMetrics();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentErrorActionImplementation()
{
  return &type metadata for PresentErrorActionImplementation;
}

uint64_t sub_100125A98()
{
  return sub_100126030((unint64_t *)&unk_1001A2210, (void (*)(uint64_t))type metadata accessor for PresentErrorAction);
}

uint64_t sub_100125AE4()
{
  uint64_t v0 = sub_10002EB60(&qword_1001A19B8);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v35 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v3 = (int *)type metadata accessor for AlertAction();
  __chkstk_darwin(v3);
  int v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10002EB60((uint64_t *)&unk_1001A2160);
  uint64_t v34 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v33 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  inject<A, B>(_:from:)();
  sub_10002EB60(&qword_1001A19A0);
  inject<A, B>(_:from:)();
  type metadata accessor for PresentErrorAction();
  _s3__C4CodeOMa_0(0);
  v36[0] = 1;
  swift_errorRetain();
  sub_100126030(&qword_1001A1548, _s3__C4CodeOMa_0);
  if (static _ErrorCodeProtocol.~= infix(_:_:)())
  {
    swift_errorRelease();
    sub_10002EC6C(v37, v38);
    v8._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
    v8._object = (void *)0x80000001001620F0;
    Swift::String v9 = Localizer.string(forKey:)(v8);
    uint64_t countAndFlagsBits = v9._countAndFlagsBits;
    object = v9._object;
    sub_10002EC6C(v37, v38);
    unint64_t v12 = 0xD000000000000021;
    NSString v13 = "Alert.AppLaunchRestricted.Message";
  }
  else
  {
    _s3__C4CodeOMa_3(0);
    v36[0] = 4;
    sub_100126030(&qword_1001A12E0, _s3__C4CodeOMa_3);
    char v14 = static _ErrorCodeProtocol.~= infix(_:_:)();
    swift_errorRelease();
    sub_10002EC6C(v37, v38);
    if ((v14 & 1) == 0)
    {
      v21._uint64_t countAndFlagsBits = 0x65472E726F727245;
      v21._object = (void *)0xED0000636972656ELL;
      Swift::String v22 = Localizer.string(forKey:)(v21);
      uint64_t countAndFlagsBits = v22._countAndFlagsBits;
      object = v22._object;
      swift_getErrorValue();
      uint64_t v18 = Error.localizedDescription.getter();
      goto LABEL_7;
    }
    v15._object = (void *)0x80000001001620B0;
    v15._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    Swift::String v16 = Localizer.string(forKey:)(v15);
    uint64_t countAndFlagsBits = v16._countAndFlagsBits;
    object = v16._object;
    sub_10002EC6C(v37, v38);
    unint64_t v12 = 0xD00000000000001ELL;
    NSString v13 = "Alert.AppBuyRestricted.Message";
  }
  unint64_t v17 = (unint64_t)(v13 - 32) | 0x8000000000000000;
  Swift::String v20 = Localizer.string(forKey:)(*(Swift::String *)&v12);
  uint64_t v19 = v20._object;
  uint64_t v18 = v20._countAndFlagsBits;
LABEL_7:
  uint64_t v23 = v18;
  uint64_t v24 = v19;
  static ActionMetrics.notInstrumented.getter();
  uint64_t v25 = (uint64_t *)&v5[v3[5]];
  *uint64_t v25 = countAndFlagsBits;
  v25[1] = (uint64_t)object;
  uint64_t v26 = &v5[v3[6]];
  *(void *)uint64_t v26 = v23;
  *((void *)v26 + 1) = v24;
  *(void *)&v5[v3[7]] = _swiftEmptyArrayStorage;
  v36[3] = (uint64_t)v3;
  v36[4] = sub_100126030((unint64_t *)&qword_1001A54A0, (void (*)(uint64_t))type metadata accessor for AlertAction);
  uint64_t v27 = sub_100031A88(v36);
  sub_100031800((uint64_t)v5, (uint64_t)v27);
  Swift::String v28 = v35;
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v35, enum case for ActionDispatcher.MetricsBehavior.notProcessed<A>(_:), v0);
  uint64_t v29 = v33;
  uint64_t v30 = ActionDispatcher.perform(_:withMetrics:asPartOf:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v28, v0);
  sub_10003217C((uint64_t)v5);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v29, v6);
  sub_10002ED08((uint64_t)v36);
  sub_10002ED08((uint64_t)v37);
  return v30;
}

uint64_t sub_100126030(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100126078(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v22 = a6;
  uint64_t v21 = a5;
  uint64_t v8 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v8 - 8);
  uint64_t v9 = type metadata accessor for OSLogger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getErrorValue();
  sub_1000D26A8(v28);
  a2();
  swift_errorRelease();
  if (qword_1001A0E70 != -1) {
    swift_once();
  }
  uint64_t v13 = sub_10002F6AC(v9, (uint64_t)qword_1001AE398);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v13, v9);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v14._uint64_t countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v14);
  uint64_t v27 = &type metadata for StaticString;
  v25[0] = a4;
  v25[1] = v21;
  char v26 = v22;
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_1000709E0((uint64_t)v25);
  v15._object = (void *)0x8000000100162140;
  v15._uint64_t countAndFlagsBits = 0xD000000000000027;
  LogMessage.StringInterpolation.appendLiteral(_:)(v15);
  swift_getErrorValue();
  uint64_t v16 = v23;
  unint64_t v17 = v24;
  uint64_t v27 = v24;
  uint64_t v18 = sub_100031A88(v25);
  (*(void (**)(uint64_t *, uint64_t, void *))(*(v17 - 1) + 16))(v18, v16, v17);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_1000709E0((uint64_t)v25);
  v19._uint64_t countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v19);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

ValueMetadata *_s9PurchasedVMa()
{
  return &_s9PurchasedVN;
}

BOOL sub_1001263D8(uint64_t a1, uint64_t a2, unsigned __int8 a3, char a4, uint64_t a5, char a6)
{
  if (a6 != 1) {
    return 0;
  }
  if (a3)
  {
    if (a3 == 1)
    {
      if (a1 & 1) == 0 && (a4) {
        return 1;
      }
    }
    else if (a3 == 6 && !(a1 & 0xFFFFFFFFFFFFFFFDLL | a2))
    {
      return 1;
    }
  }
  else if ((a1 & 0xFE) == 0)
  {
    return 1;
  }
  if ((a4 & 1) == 0 || a3 > 6u) {
    return 0;
  }
  if (((1 << a3) & 0x37) == 0) {
    return a3 == 6 && __PAIR128__((unint64_t)(a1 != 0) + a2 - 1, a1 - 1) < 2;
  }
  return 1;
}

uint64_t sub_100126484()
{
  uint64_t v0 = type metadata accessor for OSLogger.Subsystem();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  Swift::String v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OSLogger();
  sub_10002F648(v4, qword_1001AE3F8);
  sub_10002F6AC(v4, (uint64_t)qword_1001AE3F8);
  if (qword_1001A0E58 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_10002F6AC(v0, (uint64_t)qword_1001AE350);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return OSLogger.init(subsystem:category:)();
}

uint64_t sub_1001265D8(uint64_t a1)
{
  return sub_1001273F4(a1, (uint64_t)sub_10012A894, (uint64_t)&unk_10018A450);
}

uint64_t sub_100126618()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10002EB60(&qword_1001A2918);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10002EB60(&qword_1001A2920);
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)&double v7 = __chkstk_darwin(v5).n128_u64[0];
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_notificationCenter;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_notificationCenter), "removeObserver:", v1, v7);
  uint64_t v11 = v1 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_accountsSubscription;
  swift_beginAccess();
  sub_1000475F0(v11, (uint64_t)v4, &qword_1001A2918);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100034B8C((uint64_t)v4, &qword_1001A2918);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v4, v5);
    sub_10002EC6C((void *)(v1 + 16), *(void *)(v1 + 40));
    dispatch thunk of AccountProvider.onActiveAccountChange.getter();
    swift_getObjectType();
    dispatch thunk of EventEmitter.removeObserver(_:)();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  sub_10002ED08(v1 + 16);
  sub_100034B8C(v11, &qword_1001A2918);
  sub_10002ED08(v1 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_platform);
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  return v1;
}

uint64_t sub_1001268A0()
{
  sub_100126618();

  return swift_deallocClassInstance();
}

uint64_t sub_1001268F8()
{
  return type metadata accessor for PurchaseHistoryAppStateDataSource();
}

uint64_t type metadata accessor for PurchaseHistoryAppStateDataSource()
{
  uint64_t result = qword_1001A56B0;
  if (!qword_1001A56B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

{
  return type metadata accessor for PurchaseHistoryAppStateDataSource();
}

uint64_t sub_10012694C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (uint64_t *)(a1 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_expectedAppStates);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (*(void *)(v6 + 16))
  {
    id v7 = a2;
    unint64_t v8 = sub_10003A9B4((uint64_t)v7);
    if (v9)
    {
      uint64_t v10 = *(void *)(v6 + 56) + 24 * v8;
      uint64_t v11 = *(void *)v10;
      uint64_t v12 = *(void *)(v10 + 8);
      char v13 = *(unsigned char *)(v10 + 16);
      sub_100042814(*(void *)v10, v12, v13);
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      char v13 = -1;
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    char v13 = -1;
  }
  *(void *)a3 = v11;
  *(void *)(a3 + 8) = v12;
  *(unsigned char *)(a3 + 16) = v13;
  return swift_endAccess();
}

uint64_t sub_100126A24(uint64_t (*a1)(void), uint64_t a2)
{
  if (*(void *)(v2 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_purchaseHistoryContext) == 1)
  {
    uint64_t v5 = swift_allocObject();
    swift_weakInit();
    uint64_t v6 = (void *)swift_allocObject();
    v6[2] = v5;
    v6[3] = a1;
    v6[4] = a2;
    swift_retain();
    swift_retain();
    sub_100126B28((uint64_t)sub_10012A7B4, (uint64_t)v6);
    swift_release();
    return swift_release();
  }
  else
  {
    sub_100126B28(0, 0);
    return a1(0);
  }
}

uint64_t sub_100126B28(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  Swift::String v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = *(uint64_t *)((char *)v3 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_workQueue);
  Swift::String v15 = (void *)swift_allocObject();
  void v15[2] = v3;
  void v15[3] = a1;
  v15[4] = a2;
  uint64_t v15[5] = v6;
  aBlock[4] = sub_10012A5F0;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000C1A88;
  aBlock[3] = &unk_10018A2E8;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  sub_10012A614(a1);
  static DispatchQoS.unspecified.getter();
  v18[1] = _swiftEmptyArrayStorage;
  sub_10012A72C((unint64_t *)&qword_1001A2888, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10002EB60((uint64_t *)&unk_1001A31A0);
  sub_1000A5E6C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

uint64_t sub_100126E0C(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  if (!swift_weakLoadStrong()) {
    return a2();
  }
  sub_100126E8C((uint64_t)a2, a3);
  return swift_release();
}

uint64_t sub_100126E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *v2;
  uint64_t v5 = sub_10002EB60(&qword_1001A19C0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v15[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(uint64_t *)((char *)v2
                  + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_purchaseHistory
                  + 8);
  uint64_t ObjectType = swift_getObjectType();
  sub_10002EC6C(v2 + 2, v2[5]);
  dispatch thunk of AccountProvider.activeAccount.getter();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, (uint64_t)v2 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_platform, ObjectType, v8);
  sub_100034B8C((uint64_t)v7, &qword_1001A19C0);
  uint64_t v10 = swift_allocObject();
  swift_weakInit();
  uint64_t v11 = (void *)swift_allocObject();
  void v11[2] = v10;
  v11[3] = a1;
  v11[4] = a2;
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = a1;
  v12[3] = a2;
  v12[4] = v14;
  void v15[3] = type metadata accessor for SyncTaskScheduler();
  v15[4] = (uint64_t)&protocol witness table for SyncTaskScheduler;
  sub_100031A88(v15);
  sub_10012A614(a1);
  sub_10012A614(a1);
  SyncTaskScheduler.init()();
  Promise.then(perform:orCatchError:on:)();
  swift_release();
  swift_release();
  swift_release();
  return sub_10002ED08((uint64_t)v15);
}

uint64_t sub_1001270D0(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, char a5)
{
  if (!swift_weakLoadStrong()) {
    return a2();
  }
  sub_100127168(a4, a5 & 1, (uint64_t)a2, a3);
  return swift_release();
}

uint64_t sub_100127168(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  int v21 = a2;
  uint64_t v22 = *v4;
  uint64_t v7 = sub_10002EB60(&qword_1001A19C0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(uint64_t *)((char *)v4
                   + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_purchaseHistory
                   + 8);
  uint64_t ObjectType = swift_getObjectType();
  sub_10002EC6C(v4 + 2, v4[5]);
  dispatch thunk of AccountProvider.activeAccount.getter();
  uint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v13 = sub_1000662BC(v12);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, void *, uint64_t, uint64_t, uint64_t))(v10 + 24))(v9, v13, (uint64_t)v4 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_platform, ObjectType, v10);
  swift_release();
  sub_100034B8C((uint64_t)v9, &qword_1001A19C0);
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  *(void *)(v15 + 24) = a3;
  uint64_t v16 = v20;
  *(void *)(v15 + 32) = v20;
  *(void *)(v15 + 40) = a1;
  *(unsigned char *)(v15 + 48) = v21;
  unint64_t v17 = (void *)swift_allocObject();
  _OWORD v17[2] = a1;
  v17[3] = a3;
  uint64_t v18 = v22;
  void v17[4] = v16;
  v17[5] = v18;
  void v23[3] = type metadata accessor for SyncTaskScheduler();
  v23[4] = (uint64_t)&protocol witness table for SyncTaskScheduler;
  sub_100031A88(v23);
  swift_bridgeObjectRetain();
  sub_10012A614(a3);
  swift_bridgeObjectRetain();
  sub_10012A614(a3);
  SyncTaskScheduler.init()();
  Promise.then(perform:orCatchError:on:)();
  swift_release();
  swift_release();
  swift_release();
  return sub_10002ED08((uint64_t)v23);
}

uint64_t sub_1001273F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = *(void *)(v3 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_workQueue);
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = a2;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000C1A88;
  aBlock[3] = a3;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v17[1] = &_swiftEmptyArrayStorage;
  sub_10012A72C((unint64_t *)&qword_1001A2888, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10002EB60((uint64_t *)&unk_1001A31A0);
  sub_1000A5E6C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_release();
  return swift_release();
}

uint64_t sub_10012769C()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (*(void *)(result
                   + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_purchaseHistoryContext) == 1)
    {
      sub_100126E8C(0, 0);
    }
    else
    {
      swift_beginAccess();
      uint64_t v1 = swift_bridgeObjectRetain();
      sub_100039954(v1);
      sub_100127168(v2, 1, 0, 0);
      swift_bridgeObjectRelease();
    }
    return swift_release();
  }
  return result;
}

void sub_100127864()
{
  sub_10010D4E0();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_100127954()
{
  uint64_t v0 = sub_10002EB60(&qword_1001A19C0);
  uint64_t v1 = __chkstk_darwin(v0 - 8);
  uint64_t v3 = (char *)v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  uint64_t v5 = (char *)v14 - v4;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v7 = result;
    sub_10002EC6C((void *)(result + 16), *(void *)(result + 40));
    dispatch thunk of AccountProvider.activeAccount.getter();
    sub_1000475F0((uint64_t)v5, (uint64_t)v3, &qword_1001A19C0);
    uint64_t v8 = type metadata accessor for Account();
    uint64_t v9 = *(void *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v3, 1, v8) == 1)
    {
      sub_100034B8C((uint64_t)v3, &qword_1001A19C0);
    }
    else
    {
      swift_getKeyPath();
      Account.subscript.getter();
      swift_release();
      uint64_t v10 = (void *)v14[0];
      (*(void (**)(char *, uint64_t))(v9 + 8))(v3, v8);
      if (v10)
      {
        id v11 = [v10 longLongValue];

        if ((*(unsigned char *)(v7 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_lastAccountID + 8) & 1) == 0
          && v11 == *(id *)(v7 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_lastAccountID))
        {
          goto LABEL_11;
        }
LABEL_9:
        if (*(void *)(v7
                       + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_purchaseHistoryContext) != 1)
        {
          swift_beginAccess();
          uint64_t v12 = swift_bridgeObjectRetain();
          sub_100039954(v12);
          sub_100127168(v13, 1, 0, 0);
          swift_release();
          swift_bridgeObjectRelease();
          return sub_100034B8C((uint64_t)v5, &qword_1001A19C0);
        }
        sub_100126E8C(0, 0);
LABEL_11:
        swift_release();
        return sub_100034B8C((uint64_t)v5, &qword_1001A19C0);
      }
    }
    if (*(unsigned char *)(v7 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_lastAccountID + 8)) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_100127BF8(unint64_t *a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for OSLogger();
  uint64_t v35 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v34 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v16 = result;
    uint64_t v30 = v8;
    swift_weakInit();
    Swift::String v37 = &_swiftEmptySetSingleton;
    v28[1] = *(void *)(v16 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_workQueue);
    sub_10002EB60(&qword_1001A2880);
    uint64_t v17 = swift_allocObject();
    long long v29 = xmmword_10014CED0;
    *(_OWORD *)(v17 + 16) = xmmword_10014CED0;
    uint64_t v32 = a3;
    uint64_t v33 = a4;
    sub_10012A614((uint64_t)a3);
    static DispatchWorkItemFlags.barrier.getter();
    v36[0] = v17;
    sub_10012A72C((unint64_t *)&qword_1001A2888, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10002EB60((uint64_t *)&unk_1001A31A0);
    sub_1000A5E6C();
    uint64_t v18 = dispatch thunk of SetAlgebra.init<A>(_:)();
    __chkstk_darwin(v18);
    v28[-4] = v16;
    v28[-3] = &v37;
    unint64_t v31 = v14;
    v28[-2] = v14;
    v28[-1] = 0;
    OS_dispatch_queue.sync<A>(flags:execute:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    if (qword_1001A0E90 != -1) {
      swift_once();
    }
    uint64_t v19 = v30;
    uint64_t v20 = sub_10002F6AC(v30, (uint64_t)qword_1001AE3F8);
    uint64_t v22 = v34;
    uint64_t v21 = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v34, v20, v19);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = v29;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v23._object = (void *)0x80000001001622C0;
    v23._uint64_t countAndFlagsBits = 0xD000000000000022;
    LogMessage.StringInterpolation.appendLiteral(_:)(v23);
    if (v31 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v24 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    v36[3] = &type metadata for Int;
    v36[0] = v24;
    LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
    sub_100034B8C((uint64_t)v36, &qword_1001A1C50);
    v25._uint64_t countAndFlagsBits = 0x7370706120;
    v25._object = (void *)0xE500000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v25);
    LogMessage.init(stringInterpolation:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v22, v19);
    uint64_t v26 = swift_bridgeObjectRetain();
    uint64_t v27 = v32;
    sub_100128170(v26, (uint64_t)v38, v32);
    swift_release();
    swift_bridgeObjectRelease_n();
    sub_100034BE8((uint64_t)v27);
    return swift_weakDestroy();
  }
  else if (a3)
  {
    return a3(0);
  }
  return result;
}

uint64_t sub_100128170(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_retain();
    swift_release();
    SyncEvent.post(_:)();
    uint64_t result = swift_release();
  }
  if (a3) {
    return a3(0);
  }
  return result;
}

uint64_t sub_100128220(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  v17[1] = a3;
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for OSLogger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0E90 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_10002F6AC(v6, (uint64_t)qword_1001AE3F8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v11._object = (void *)0x80000001001622F0;
  v11._uint64_t countAndFlagsBits = 0xD000000000000024;
  LogMessage.StringInterpolation.appendLiteral(_:)(v11);
  swift_getErrorValue();
  uint64_t v12 = v17[2];
  uint64_t v13 = v18;
  uint64_t v19[3] = v18;
  unint64_t v14 = sub_100031A88(v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v14, v12, v13);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)v19, &qword_1001A1C50);
  v15._uint64_t countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v15);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (a2) {
    return a2(a1);
  }
  return result;
}

uint64_t sub_10012850C(unint64_t *a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5, int a6)
{
  int v40 = a6;
  uint64_t v37 = a5;
  uint64_t v9 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = type metadata accessor for OSLogger();
  uint64_t v39 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v38 = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  Swift::String v15 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v16 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v18 = result;
    uint64_t v33 = v10;
    swift_weakInit();
    uint64_t v42 = &_swiftEmptySetSingleton;
    v31[1] = *(void *)(v18 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_workQueue);
    sub_10002EB60(&qword_1001A2880);
    uint64_t v19 = swift_allocObject();
    long long v32 = xmmword_10014CED0;
    *(_OWORD *)(v19 + 16) = xmmword_10014CED0;
    uint64_t v35 = a3;
    uint64_t v36 = a4;
    sub_10012A614((uint64_t)a3);
    static DispatchWorkItemFlags.barrier.getter();
    v41[0] = v19;
    sub_10012A72C((unint64_t *)&qword_1001A2888, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10002EB60((uint64_t *)&unk_1001A31A0);
    sub_1000A5E6C();
    uint64_t v20 = dispatch thunk of SetAlgebra.init<A>(_:)();
    __chkstk_darwin(v20);
    v31[-4] = v18;
    v31[-3] = &v42;
    unint64_t v34 = v16;
    uint64_t v21 = v37;
    v31[-2] = v16;
    v31[-1] = v21;
    OS_dispatch_queue.sync<A>(flags:execute:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    if (qword_1001A0E90 != -1) {
      swift_once();
    }
    uint64_t v22 = v33;
    uint64_t v23 = sub_10002F6AC(v33, (uint64_t)qword_1001AE3F8);
    Swift::String v25 = v38;
    uint64_t v24 = v39;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v38, v23, v22);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = v32;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v26._object = (void *)0x80000001001622C0;
    v26._uint64_t countAndFlagsBits = 0xD000000000000022;
    LogMessage.StringInterpolation.appendLiteral(_:)(v26);
    if (v34 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v27 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    v41[3] = &type metadata for Int;
    v41[0] = v27;
    LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
    sub_100034B8C((uint64_t)v41, &qword_1001A1C50);
    v28._uint64_t countAndFlagsBits = 0x7370706120;
    v28._object = (void *)0xE500000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v28);
    LogMessage.init(stringInterpolation:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v25, v22);
    uint64_t v29 = swift_bridgeObjectRetain();
    uint64_t v30 = v35;
    sub_100128AA0(v29, v40 & 1, (uint64_t)v43, v35);
    swift_release();
    swift_bridgeObjectRelease_n();
    sub_100034BE8((uint64_t)v30);
    return swift_weakDestroy();
  }
  else if (a3)
  {
    return a3(0);
  }
  return result;
}

uint64_t sub_100128AA0(uint64_t a1, char a2, uint64_t a3, uint64_t (*a4)(void))
{
  if (a2)
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      swift_retain();
      swift_release();
      SyncEvent.post(_:)();
      uint64_t result = swift_release();
    }
  }
  if (a4) {
    return a4(0);
  }
  return result;
}

uint64_t sub_100128B54(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v20 = a3;
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for OSLogger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0E90 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_10002F6AC(v7, (uint64_t)qword_1001AE3F8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v12._object = (void *)0x80000001001622A0;
  v12._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v12);
  uint64_t v24 = sub_10002EB60(&qword_1001A3BC0);
  v23[0] = a2;
  swift_bridgeObjectRetain();
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_100034B8C((uint64_t)v23, &qword_1001A1C50);
  v13._uint64_t countAndFlagsBits = 0x6E6F73616572202CLL;
  v13._object = (void *)0xEA0000000000203ALL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v13);
  swift_getErrorValue();
  uint64_t v15 = v21;
  uint64_t v14 = v22;
  uint64_t v24 = v22;
  unint64_t v16 = sub_100031A88(v23);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v16, v15, v14);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)v23, &qword_1001A1C50);
  v17._uint64_t countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v17);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v20) {
    return v20(a1);
  }
  return result;
}

uint64_t sub_100128E94(uint64_t result, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v6 = OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_hasRequestedUpdated;
  if (*(unsigned char *)(result + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_hasRequestedUpdated))
  {
    if (a2) {
      return a2();
    }
  }
  else
  {
    uint64_t v8 = result;
    if (qword_1001A0E90 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for OSLogger();
    sub_10002F6AC(v9, (uint64_t)qword_1001AE3F8);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.init(stringLiteral:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    uint64_t v10 = *(void *)(v8 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_purchaseHistory + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void, uint64_t, uint64_t))(v10 + 8))(*(void *)(v8 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_purchaseHistoryContext), ObjectType, v10);
    Swift::String v12 = (void *)swift_allocObject();
    v12[2] = a2;
    v12[3] = a3;
    v12[4] = a4;
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = sub_10012A628;
    *(void *)(v13 + 24) = v12;
    uint64_t v14 = (void *)swift_allocObject();
    void v14[2] = a2;
    void v14[3] = a3;
    uint64_t v14[4] = a4;
    void v15[3] = type metadata accessor for SyncTaskScheduler();
    v15[4] = (uint64_t)&protocol witness table for SyncTaskScheduler;
    sub_100031A88(v15);
    sub_10012A614((uint64_t)a2);
    sub_10012A614((uint64_t)a2);
    SyncTaskScheduler.init()();
    Promise.then(perform:orCatchError:on:)();
    swift_release();
    swift_release();
    swift_release();
    uint64_t result = sub_10002ED08((uint64_t)v15);
    *(unsigned char *)(v8 + v6) = 1;
  }
  return result;
}

uint64_t sub_10012916C(uint64_t (*a1)(uint64_t))
{
  if (qword_1001A0E90 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for OSLogger();
  sub_10002F6AC(v2, (uint64_t)qword_1001AE3F8);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.init(stringLiteral:)();
  Logger.info(_:)();
  uint64_t result = swift_bridgeObjectRelease();
  if (a1) {
    return a1(result);
  }
  return result;
}

uint64_t sub_1001292C0(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = type metadata accessor for OSLogger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0E90 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_10002F6AC(v4, (uint64_t)qword_1001AE3F8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v9._object = (void *)0x8000000100162250;
  v9._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v9);
  swift_getErrorValue();
  uint64_t v10 = v15;
  uint64_t v11 = v16;
  void v17[3] = v16;
  Swift::String v12 = sub_100031A88(v17);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v12, v10, v11);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)v17, &qword_1001A1C50);
  v13._uint64_t countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v13);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (a2) {
    return a2(result);
  }
  return result;
}

void sub_1001295A8(char *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v115 = a3;
  uint64_t v118 = a2;
  uint64_t v6 = sub_10002EB60(&qword_1001A19C0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v109 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002EC6C((void *)a1 + 2, *((void *)a1 + 5));
  dispatch thunk of AccountProvider.activeAccount.getter();
  uint64_t v9 = type metadata accessor for Account();
  uint64_t v10 = *(void *)(v9 - 8);
  p_info = &OBJC_METACLASS____TtC19appstorecomponentsd13MetricsClient.info;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_100034B8C((uint64_t)v8, &qword_1001A19C0);
LABEL_38:
    long long v60 = &a1[OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_expectedAppStates];
    swift_beginAccess();
    uint64_t v61 = swift_bridgeObjectRetain();
    sub_1000C1D80(v61);
    *(void *)long long v60 = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    uint64_t v62 = &a1[OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_lastAccountID];
    *(void *)uint64_t v62 = 0;
    v62[8] = 1;
    return;
  }
  swift_getKeyPath();
  Account.subscript.getter();
  swift_release();
  id v12 = v124[0];
  (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  if (!v12) {
    goto LABEL_38;
  }
  Swift::String v13 = [v12 longLongValue];

  uint64_t v14 = &a1[OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_lastAccountID];
  if ((a1[OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_lastAccountID + 8] & 1) != 0
    || v13 != *(void **)v14)
  {
    uint64_t v15 = &a1[OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_expectedAppStates];
    swift_beginAccess();
    uint64_t v16 = swift_bridgeObjectRetain();
    sub_1000C1D80(v16);
    *(void *)uint64_t v15 = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    *(void *)uint64_t v14 = v13;
    v14[8] = 0;
  }
  uint64_t v114 = v13;
  v127 = &_swiftEmptySetSingleton;
  if (v115 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    if (v17) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v17 = *(void *)((v115 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v17)
    {
LABEL_9:
      unint64_t v109 = a4;
      v110 = a1;
      if (v17 < 1) {
        goto LABEL_94;
      }
      uint64_t v18 = 0;
      uint64_t v119 = &v110[OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_platform];
      uint64_t v19 = (uint64_t *)&v110[OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_expectedAppStates];
      unint64_t v20 = v115;
      int64_t v117 = v115 & 0xC000000000000001;
      long long v116 = xmmword_10014CED0;
      uint64_t v21 = v114;
      uint64_t v120 = v17;
      while (1)
      {
        if (v117) {
          id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v22 = *(id *)(v20 + 8 * v18 + 32);
        }
        uint64_t v23 = v22;
        id v24 = objc_msgSend(objc_allocWithZone((Class)ASCAdamID), "initWithInt64:", objc_msgSend(v22, "storeItemID", v109));
        sub_10009812C(v124, v24);

        sub_10002EB60(&qword_1001A5788);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = v116;
        *(void *)(inited + 32) = v21;
        uint64_t v26 = sub_10011B524(inited);
        swift_setDeallocating();
        sub_100052538((uint64_t)v119, (uint64_t)v124);
        id v27 = v23;
        if ([v27 isHidden])
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v28 = sub_100119A34([v27 purchaserDSID], v26);
          swift_bridgeObjectRelease();
          if (v28)
          {
            if ([v27 isPreorder])
            {

              sub_10002ED08((uint64_t)v124);
              uint64_t v29 = 0;
              uint64_t v30 = 1;
              goto LABEL_28;
            }
            sub_10002EC6C(v124, v125);
            if (dispatch thunk of Platform.isRunnable(_:)())
            {
              id v41 = [v27 cleanedRedownloadParams];
              uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v29 = v42;

              sub_10002ED08((uint64_t)v124);
              swift_bridgeObjectRetain();
              char v43 = 3;
            }
            else
            {

              sub_10002ED08((uint64_t)v124);
              uint64_t v30 = 0;
              uint64_t v29 = 0;
LABEL_28:
              char v43 = 1;
            }
            swift_beginAccess();
            uint64_t v44 = *v19;
            if (*(void *)(*v19 + 16))
            {
              v112 = (char *)v24;
              unint64_t v45 = sub_10003A9B4((uint64_t)v112);
              if (v46)
              {
                uint64_t v47 = *(void *)(v44 + 56) + 24 * v45;
                uint64_t v48 = *(void *)v47;
                uint64_t v49 = *(void *)(v47 + 8);
                uint64_t v113 = v29;
                uint64_t v50 = v30;
                char v51 = *(unsigned char *)(v47 + 16);
                swift_endAccess();
                sub_100042814(v48, v49, v51);

                sub_100042814(v48, v49, v51);
                sub_100042814(v50, v113, v43);
                LODWORD(v111) = sub_100067A4C(v48, v49, v51, v50, v113, v43);
                sub_10004282C(v50, v113, v43);
                sub_10004282C(v48, v49, v51);
                uint64_t v52 = v49;
                unint64_t v20 = v115;
                char v53 = v51;
                uint64_t v30 = v50;
                uint64_t v29 = v113;
                sub_10004282C(v48, v52, v53);
                if (v111)
                {
                  sub_10004282C(v30, v29, v43);
                  sub_100067F10(v30, v29, v43);

                  id v54 = v112;
LABEL_36:

LABEL_37:
                  uint64_t v21 = v114;
                  goto LABEL_12;
                }
LABEL_35:
                sub_100067F10(v30, v29, v43);
                swift_beginAccess();
                id v55 = v24;
                uint64_t v56 = v30;
                id v57 = v55;
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                uint64_t v123 = *v19;
                uint64_t *v19 = 0x8000000000000000;
                sub_10003F4F0(v56, v29, v43, v57, isUniquelyReferenced_nonNull_native);
                uint64_t *v19 = v123;

                swift_bridgeObjectRelease();
                swift_endAccess();
                id v59 = v57;
                sub_10009812C(v124, v59);

                id v54 = v124[0];
                goto LABEL_36;
              }
            }
            swift_endAccess();
            goto LABEL_35;
          }
        }

        sub_10002ED08((uint64_t)v124);
        swift_beginAccess();
        swift_bridgeObjectRetain();
        unint64_t v31 = sub_10003A9B4((uint64_t)v24);
        char v33 = v32;
        swift_bridgeObjectRelease();
        if (v33)
        {
          int v34 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v35 = *v19;
          uint64_t v123 = *v19;
          uint64_t *v19 = 0x8000000000000000;
          if (!v34)
          {
            sub_1000402A4();
            uint64_t v35 = v123;
          }

          uint64_t v36 = *(void *)(v35 + 56) + 24 * v31;
          uint64_t v37 = *(void *)v36;
          uint64_t v38 = *(void *)(v36 + 8);
          char v39 = *(unsigned char *)(v36 + 16);
          sub_10003E678(v31, v35);
          uint64_t *v19 = v35;
          swift_bridgeObjectRelease();
          swift_endAccess();
          sub_10004282C(v37, v38, v39);
          id v40 = v24;
          sub_10009812C(v124, v40);

          unint64_t v20 = v115;
          goto LABEL_37;
        }
        swift_endAccess();

LABEL_12:
        if (v120 == ++v18)
        {
          swift_bridgeObjectRelease();
          int64_t v117 = (int64_t)v127;
          a1 = v110;
          a4 = v109;
          p_info = (__objc2_class_ro **)(&OBJC_METACLASS____TtC19appstorecomponentsd13MetricsClient + 32);
          goto LABEL_42;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  int64_t v117 = (int64_t)&_swiftEmptySetSingleton;
LABEL_42:
  Swift::String v63 = (char *)p_info[206] + (void)a1;
  swift_beginAccess();
  v122[1] = &_swiftEmptySetSingleton;
  uint64_t v64 = swift_bridgeObjectRetain();
  sub_100039954(v64);
  Swift::Int v66 = v65;
  if (a4)
  {
    uint64_t v67 = swift_bridgeObjectRetain();
    Swift::Int v66 = sub_1000D18D8(v67, v66);
    swift_bridgeObjectRelease();
  }
  *(void *)&long long v116 = v63;
  if ((v66 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_10007AC00();
    sub_10012A72C((unint64_t *)&qword_1001A1CB0, (void (*)(uint64_t))sub_10007AC00);
    Set.Iterator.init(_cocoa:)();
    Swift::Int v66 = (Swift::Int)v124[0];
    uint64_t v114 = v124[1];
    uint64_t v69 = (uint64_t)v124[2];
    uint64_t v68 = v125;
    unint64_t v70 = v126;
  }
  else
  {
    uint64_t v68 = 0;
    uint64_t v71 = -1 << *(unsigned char *)(v66 + 32);
    uint64_t v72 = *(void *)(v66 + 56);
    uint64_t v114 = (void *)(v66 + 56);
    uint64_t v69 = ~v71;
    uint64_t v73 = -v71;
    if (v73 < 64) {
      uint64_t v74 = ~(-1 << v73);
    }
    else {
      uint64_t v74 = -1;
    }
    unint64_t v70 = v74 & v72;
  }
  uint64_t v111 = v66 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v113 = (unint64_t)(v69 + 64) >> 6;
  unint64_t v75 = v117 & 0xC000000000000001;
  uint64_t v76 = v117 & 0xFFFFFFFFFFFFFF8;
  if (v117 < 0) {
    uint64_t v76 = v117;
  }
  unint64_t v115 = v76;
  v112 = (char *)(v117 + 56);
  v110 = (char *)&type metadata for Swift.AnyObject + 8;
  unint64_t v109 = v117 & 0xC000000000000001;
  while (v66 < 0)
  {
    uint64_t v85 = __CocoaSet.Iterator.next()();
    if (!v85) {
      goto LABEL_92;
    }
    uint64_t v121 = v85;
    sub_10007AC00();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v86 = v122[0];
    swift_unknownObjectRelease();
    uint64_t v84 = v68;
    uint64_t v82 = v70;
    if (!v86) {
      goto LABEL_92;
    }
LABEL_79:
    uint64_t v119 = (char *)v82;
    uint64_t v120 = v84;
    if (v75)
    {
      id v90 = v86;
      char v91 = __CocoaSet.contains(_:)();

      if (v91)
      {

        goto LABEL_55;
      }
    }
    else if (*(void *)(v117 + 16))
    {
      int64_t v92 = v117;
      Swift::Int v93 = NSObject._rawHashValue(seed:)(*(void *)(v117 + 40));
      uint64_t v94 = -1 << *(unsigned char *)(v92 + 32);
      unint64_t v95 = v93 & ~v94;
      if ((*(void *)&v112[(v95 >> 3) & 0xFFFFFFFFFFFFFF8] >> v95))
      {
        sub_10007AC00();
        id v96 = *(id *)(*(void *)(v117 + 48) + 8 * v95);
        char v97 = static NSObject.== infix(_:_:)();

        if (v97)
        {
LABEL_88:

          goto LABEL_55;
        }
        uint64_t v98 = ~v94;
        while (1)
        {
          unint64_t v95 = (v95 + 1) & v98;
          if (((*(void *)&v112[(v95 >> 3) & 0xFFFFFFFFFFFFFF8] >> v95) & 1) == 0) {
            break;
          }
          id v99 = *(id *)(*(void *)(v117 + 48) + 8 * v95);
          char v100 = static NSObject.== infix(_:_:)();

          if (v100) {
            goto LABEL_88;
          }
        }
      }
    }
    swift_bridgeObjectRetain();
    unint64_t v101 = sub_10003A9B4((uint64_t)v86);
    char v103 = v102;
    swift_bridgeObjectRelease();
    if (v103)
    {
      uint64_t v104 = v69;
      Swift::Int v105 = v66;
      int64_t v106 = (id *)v116;
      char v107 = swift_isUniquelyReferenced_nonNull_native();
      v108 = *v106;
      v122[0] = *v106;
      *int64_t v106 = (id)0x8000000000000000;
      if ((v107 & 1) == 0)
      {
        sub_1000402A4();
        v108 = v122[0];
      }

      uint64_t v77 = v108[7] + 24 * v101;
      uint64_t v79 = *(void *)v77;
      uint64_t v78 = *(void *)(v77 + 8);
      char v80 = *(unsigned char *)(v77 + 16);
      sub_10003E678(v101, (uint64_t)v108);
      *int64_t v106 = v108;
      swift_bridgeObjectRelease();
      sub_10004282C(v79, v78, v80);
      Swift::Int v66 = v105;
      uint64_t v69 = v104;
      unint64_t v75 = v109;
    }
    id v81 = v86;
    sub_10009812C(v122, v81);

    sub_10009812C(v122, v81);
LABEL_55:
    unint64_t v70 = (unint64_t)v119;
    uint64_t v68 = v120;
  }
  if (v70)
  {
    uint64_t v82 = (v70 - 1) & v70;
    unint64_t v83 = __clz(__rbit64(v70)) | (v68 << 6);
    uint64_t v84 = v68;
LABEL_78:
    id v86 = *(id *)(*(void *)(v66 + 48) + 8 * v83);
    if (!v86) {
      goto LABEL_92;
    }
    goto LABEL_79;
  }
  uint64_t v87 = v68 + 1;
  if (!__OFADD__(v68, 1))
  {
    if (v87 >= v113) {
      goto LABEL_92;
    }
    unint64_t v88 = v114[v87];
    uint64_t v84 = v68 + 1;
    if (!v88)
    {
      uint64_t v84 = v68 + 2;
      if (v68 + 2 >= v113) {
        goto LABEL_92;
      }
      unint64_t v88 = v114[v84];
      if (!v88)
      {
        uint64_t v84 = v68 + 3;
        if (v68 + 3 >= v113) {
          goto LABEL_92;
        }
        unint64_t v88 = v114[v84];
        if (!v88)
        {
          uint64_t v84 = v68 + 4;
          if (v68 + 4 >= v113) {
            goto LABEL_92;
          }
          unint64_t v88 = v114[v84];
          if (!v88)
          {
            uint64_t v84 = v68 + 5;
            if (v68 + 5 >= v113) {
              goto LABEL_92;
            }
            unint64_t v88 = v114[v84];
            if (!v88)
            {
              uint64_t v89 = v68 + 6;
              while (v113 != v89)
              {
                unint64_t v88 = v114[v89++];
                if (v88)
                {
                  uint64_t v84 = v89 - 1;
                  goto LABEL_77;
                }
              }
LABEL_92:
              sub_100034EF8();
              swift_bridgeObjectRelease();
              swift_endAccess();
              swift_bridgeObjectRelease();
              return;
            }
          }
        }
      }
    }
LABEL_77:
    uint64_t v82 = (v88 - 1) & v88;
    unint64_t v83 = __clz(__rbit64(v88)) + (v84 << 6);
    goto LABEL_78;
  }
  __break(1u);
LABEL_94:
  __break(1u);
}

BOOL sub_10012A3A4()
{
  return *(void *)(v0 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_purchaseHistoryContext) != 1;
}

uint64_t sub_10012A3BC()
{
  return swift_retain();
}

uint64_t sub_10012A3D0(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = a3;
  *(void *)(v9 + 32) = a4;
  *(void *)(v9 + 40) = a1;
  *(unsigned char *)(v9 + 48) = a2;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100126B28((uint64_t)sub_10012A5C4, v9);
  swift_release();

  return swift_release();
}

uint64_t sub_10012A4AC()
{
  sub_10002EB60(&qword_1001A3EE8);
  OS_dispatch_queue.sync<A>(execute:)();
  return v1;
}

uint64_t sub_10012A528@<X0>(uint64_t a1@<X8>)
{
  return sub_10012694C(*(void *)(v1 + 16), *(void **)(v1 + 24), a1);
}

uint64_t sub_10012A544()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10012A57C()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 49, 7);
}

uint64_t sub_10012A5C4()
{
  return sub_1001270D0(*(void *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
}

uint64_t sub_10012A5D4()
{
  return sub_10012A7DC((void (*)(void))&_swift_release, 48);
}

uint64_t sub_10012A5F0()
{
  return sub_100128E94(*(void *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_10012A5FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10012A60C()
{
  return swift_release();
}

uint64_t sub_10012A614(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_10012A628()
{
  return sub_10012916C(*(uint64_t (**)(uint64_t))(v0 + 16));
}

uint64_t sub_10012A634()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10012A670(uint64_t a1)
{
  return sub_1001292C0(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_10012A67C()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 49, 7);
}

uint64_t sub_10012A6CC(unint64_t *a1)
{
  return sub_10012850C(a1, *(void *)(v1 + 16), *(uint64_t (**)(void))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned __int8 *)(v1 + 48));
}

uint64_t sub_10012A6DC()
{
  return sub_10012A7DC((void (*)(void))&_swift_bridgeObjectRelease, 48);
}

uint64_t sub_10012A6F8(uint64_t a1)
{
  return sub_100128B54(a1, *(void *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32));
}

void sub_10012A704()
{
  sub_1001295A8(*(char **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_10012A72C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10012A774()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10012A7B4()
{
  return sub_100126E0C(*(void *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10012A7C0()
{
  return sub_10012A7DC((void (*)(void))&_swift_release, 40);
}

uint64_t sub_10012A7DC(void (*a1)(void), uint64_t a2)
{
  a1(*(void *)(v2 + 16));
  if (*(void *)(v2 + 24)) {
    swift_release();
  }

  return _swift_deallocObject(v2, a2, 7);
}

uint64_t sub_10012A838(unint64_t *a1)
{
  return sub_100127BF8(a1, *(void *)(v1 + 16), *(uint64_t (**)(void))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10012A848()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10012A888(uint64_t a1)
{
  return sub_100128220(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10012A894()
{
  return sub_100127954();
}

uint64_t sub_10012A89C()
{
  return sub_10012769C();
}

void sub_10012A8AC()
{
}

uint64_t sub_10012A8D4()
{
  if (*v0) {
    return 0xD000000000000010;
  }
  else {
    return 0x6F726665726F7473;
  }
}

uint64_t sub_10012A91C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10012BF24(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10012A944()
{
  return 0;
}

void sub_10012A950(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_10012A95C(uint64_t a1)
{
  unint64_t v2 = sub_10012C1E0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10012A998(uint64_t a1)
{
  unint64_t v2 = sub_10012C1E0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10012A9D4(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  uint64_t v6 = sub_10002EB60(&qword_1001A5878);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002EC6C(a1, a1[3]);
  sub_10012C1E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v4)
  {
    char v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_10012AB48(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v5 = *(void *)(a2 + 8);
  int v6 = *(unsigned __int8 *)(a2 + 16);
  if (!v3)
  {
    if (!v5) {
      return v4 ^ v6 ^ 1u;
    }
    return 0;
  }
  if (!v5) {
    return 0;
  }
  if (*(void *)a1 == *(void *)a2 && v3 == v5) {
    return v4 ^ v6 ^ 1u;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = 0;
  if (v8) {
    return v4 ^ v6 ^ 1u;
  }
  return result;
}

uint64_t sub_10012ABC0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10012C02C(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6 & 1;
  }
  return result;
}

uint64_t sub_10012ABF4(void *a1)
{
  return sub_10012A9D4(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

uint64_t sub_10012AC14()
{
  if (qword_1001A0E60 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for OSLogger();
  sub_10002F6AC(v0, (uint64_t)qword_1001AE368);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.init(stringLiteral:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  return AsyncEvent.post(_:)();
}

uint64_t sub_10012AD6C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v33 = v2;
  uint64_t v34 = v3;
  __chkstk_darwin(v2);
  unint64_t v31 = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for DispatchQoS();
  uint64_t v30 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  char v6 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v0 + 40);
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v29 = (unint64_t)"ting re-bootstrap cycle";
  unint64_t v41 = 0xD000000000000023;
  unint64_t v42 = 0x8000000100162450;
  uint64_t v9 = sub_10002EB60(&qword_1001A5880);
  sub_100061D9C(&qword_1001A5888, &qword_1001A5880);
  Preferences.subscript.getter();
  uint64_t v10 = v36;
  if (v36 == 1)
  {
    uint64_t v11 = *(void *)(v0 + 64);
    char v12 = *(unsigned char *)(v0 + 72);
    long long aBlock = *(void ***)(v0 + 56);
    uint64_t v36 = v11;
    LOBYTE(v37) = v12;
    unint64_t v41 = 0xD000000000000023;
    unint64_t v42 = 0x8000000100162450;
    swift_bridgeObjectRetain();
    Preferences.subscript.setter();
    if (qword_1001A0E60 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for OSLogger();
    sub_10002F6AC(v13, (uint64_t)qword_1001AE368);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
LABEL_18:
    LogMessage.init(stringLiteral:)();
    Logger.debug(_:)();
    return swift_bridgeObjectRelease();
  }
  void v28[2] = ObjectType;
  uint64_t v28[3] = v7;
  char v14 = aBlock;
  int v15 = v37;
  uint64_t v16 = *(void *)(v1 + 64);
  int v17 = *(unsigned __int8 *)(v1 + 72);
  if (v16)
  {
    if (v36)
    {
      if (*(void ***)(v1 + 56) != aBlock || v16 != v36)
      {
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        sub_10012C234((uint64_t)v14, v10);
        if (v18 & 1) == 0 || ((v15 ^ v17)) {
          goto LABEL_19;
        }
LABEL_15:
        if (qword_1001A0E60 != -1) {
          swift_once();
        }
        uint64_t v19 = type metadata accessor for OSLogger();
        sub_10002F6AC(v19, (uint64_t)qword_1001AE368);
        sub_10002EB60((uint64_t *)&unk_1001A19E0);
        type metadata accessor for LogMessage();
        *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CD00;
        LogMessage.init(stringLiteral:)();
        goto LABEL_18;
      }
      goto LABEL_14;
    }
LABEL_13:
    sub_10012C234((uint64_t)aBlock, v36);
    goto LABEL_19;
  }
  if (v36) {
    goto LABEL_13;
  }
LABEL_14:
  sub_10012C234((uint64_t)aBlock, v36);
  if (((v15 ^ v17) & 1) == 0) {
    goto LABEL_15;
  }
LABEL_19:
  v28[1] = v9;
  sub_10004765C();
  uint64_t v21 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v22 = *(void *)(v1 + 80);
  char v39 = sub_10012C248;
  uint64_t v40 = v22;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v36 = 1107296256;
  uint64_t v37 = sub_1000C1A88;
  uint64_t v38 = &unk_10018A5B0;
  uint64_t v23 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  long long aBlock = (void **)_swiftEmptyArrayStorage;
  sub_1000A8E90();
  sub_10002EB60((uint64_t *)&unk_1001A31A0);
  sub_100061D9C((unint64_t *)&qword_1001A2890, (uint64_t *)&unk_1001A31A0);
  id v24 = v31;
  uint64_t v25 = v33;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v34 + 8))(v24, v25);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v32);
  uint64_t v26 = *(void *)(v1 + 64);
  char v27 = *(unsigned char *)(v1 + 72);
  long long aBlock = *(void ***)(v1 + 56);
  uint64_t v36 = v26;
  LOBYTE(v37) = v27;
  unint64_t v41 = 0xD000000000000023;
  unint64_t v42 = v29 | 0x8000000000000000;
  swift_bridgeObjectRetain();
  return Preferences.subscript.setter();
}

uint64_t sub_10012B3E4()
{
  [*(id *)(v0 + 24) removeObserver:v0];
  sub_10002094C(*(_DWORD *)(v0 + 76));

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_10012B448()
{
  sub_10012B3E4();

  return swift_deallocClassInstance();
}

uint64_t sub_10012B47C(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v5 = *(void *)(v3 + 64);
  int v6 = *(unsigned __int8 *)(v3 + 72);
  if (!a2)
  {
    if (v5) {
      goto LABEL_11;
    }
LABEL_10:
    if (((v6 ^ a3) & 1) == 0) {
      return result;
    }
    goto LABEL_11;
  }
  if (v5)
  {
    if (*(void *)(v3 + 56) == result && v5 == a2)
    {
      if (v6 == (a3 & 1)) {
        return result;
      }
      goto LABEL_11;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      goto LABEL_10;
    }
  }
LABEL_11:
  swift_getObjectType();
  swift_bridgeObjectRetain();
  sub_10002EB60(&qword_1001A5880);
  sub_100061D9C(&qword_1001A5888, &qword_1001A5880);
  return Preferences.subscript.setter();
}

uint64_t sub_10012B598()
{
  AsyncEvent.post(_:)();
  if (qword_1001A0E60 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for OSLogger();
  sub_10002F6AC(v0, (uint64_t)qword_1001AE368);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.init(stringLiteral:)();
  Logger.info(_:)();
  return swift_bridgeObjectRelease();
}

id sub_10012B6E4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 48);
  [v2 lock];
  uint64_t v3 = sub_10012BE48(*(id *)(v0 + 16));
  uint64_t v5 = v3;
  uint64_t v6 = v4;
  char v8 = v7;
  uint64_t v9 = *(void *)(v0 + 56);
  uint64_t v10 = *(void *)(v1 + 64);
  int v11 = *(unsigned __int8 *)(v1 + 72);
  if (!v10)
  {
    if (!v4)
    {
LABEL_11:
      char v13 = v8 ^ v11 ^ 1;
      goto LABEL_12;
    }
LABEL_10:
    char v13 = 0;
    goto LABEL_12;
  }
  if (!v4) {
    goto LABEL_10;
  }
  if ((void *)v9 == v3 && v10 == v4) {
    goto LABEL_11;
  }
  char v13 = 0;
  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
    goto LABEL_11;
  }
LABEL_12:
  *(void *)(v1 + 56) = v5;
  *(void *)(v1 + 64) = v6;
  *(unsigned char *)(v1 + 72) = v8 & 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_10012B47C(v9, v10, v11);
  swift_bridgeObjectRelease();
  id result = [v2 unlock];
  if ((v13 & 1) == 0)
  {
    if (qword_1001A0E60 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for OSLogger();
    sub_10002F6AC(v15, (uint64_t)qword_1001AE368);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.init(stringLiteral:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    return (id)AsyncEvent.post(_:)();
  }
  return result;
}

uint64_t type metadata accessor for RebootstrapTrigger()
{
  return self;
}

ValueMetadata *type metadata accessor for RebootstrapTrigger.Target()
{
  return &type metadata for RebootstrapTrigger.Target;
}

uint64_t sub_10012BC60(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RebootstrapTrigger.AccountState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for RebootstrapTrigger.AccountState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for RebootstrapTrigger.AccountState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RebootstrapTrigger.AccountState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)id result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RebootstrapTrigger.AccountState()
{
  return &type metadata for RebootstrapTrigger.AccountState;
}

unint64_t sub_10012BDF4()
{
  unint64_t result = qword_1001A5860;
  if (!qword_1001A5860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5860);
  }
  return result;
}

void *sub_10012BE48(void *a1)
{
  id v2 = objc_msgSend(a1, "ams_localiTunesAccount");
  unint64_t v3 = v2;
  if (v2)
  {
    id v4 = objc_msgSend(v2, "ams_storefront");

    if (v4)
    {
      unint64_t v3 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      unint64_t v3 = 0;
    }
  }
  id v5 = objc_msgSend(a1, "ams_activeiTunesAccount");
  if (v5)
  {
    uint64_t v6 = v5;
    objc_msgSend(v5, "ams_isManagedAppleID");
  }
  return v3;
}

uint64_t sub_10012BF24(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F726665726F7473 && a2 == 0xEC0000004449746ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100160D50)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10012C02C(void *a1)
{
  uint64_t v3 = sub_10002EB60(&qword_1001A5868);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[4];
  sub_10002EC6C(a1, a1[3]);
  sub_10012C1E0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10002ED08((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  else
  {
    v9[15] = 0;
    uint64_t v7 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v9[14] = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    sub_10002ED08((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_10012C1E0()
{
  unint64_t result = qword_1001A5870;
  if (!qword_1001A5870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5870);
  }
  return result;
}

uint64_t sub_10012C234(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10012C248()
{
  return sub_10012B598();
}

uint64_t sub_10012C250(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10012C260()
{
  return swift_release();
}

unsigned char *_s19appstorecomponentsd18RebootstrapTriggerC6TargetOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10012C334);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RebootstrapTrigger.AccountState.CodingKeys()
{
  return &type metadata for RebootstrapTrigger.AccountState.CodingKeys;
}

unint64_t sub_10012C370()
{
  unint64_t result = qword_1001A5890;
  if (!qword_1001A5890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5890);
  }
  return result;
}

unint64_t sub_10012C3C8()
{
  unint64_t result = qword_1001A5898;
  if (!qword_1001A5898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5898);
  }
  return result;
}

unint64_t sub_10012C420()
{
  unint64_t result = qword_1001A58A0;
  if (!qword_1001A58A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A58A0);
  }
  return result;
}

uint64_t sub_10012C484(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a3;
  uint64_t v7 = type metadata accessor for State();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  int v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  char v14 = (char *)&v36 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  int v17 = (char *)&v36 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v36 - v18;
  if (([a1 flags] & 0x10) != 0) {
    return 0;
  }
  unint64_t v41 = v11;
  uint64_t v42 = a4;
  unint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v20(v19, a2, v7);
  int v21 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v19, v7);
  if (v21 != enum case for State.purchased(_:))
  {
    char v39 = v20;
    if (v21 == enum case for State.downloadable(_:))
    {
      (*(void (**)(char *, uint64_t))(v8 + 96))(v19, v7);
      swift_bridgeObjectRelease();
    }
    else if (v21 != enum case for State.buyable(_:) && v21 != enum case for State.unknown(_:))
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v19, v7);
      return 1;
    }
    id v40 = a1;
    if ((dispatch thunk of Restrictions.isAppInstallationAllowed.getter() & 1) == 0
      || (dispatch thunk of Restrictions.isRunningInStoreDemoMode.getter() & 1) != 0
      && ([v40 flags] & 4) == 0)
    {
      return 0;
    }
    char v24 = dispatch thunk of Restrictions.hasManagedAppleID.getter();
    uint64_t v25 = a2;
    uint64_t v26 = (void (*)(char *, char *, uint64_t))v39;
    v39(v17, v25, v7);
    if (v24)
    {
      uint64_t v37 = *(void (**)(char *, void, uint64_t))(v8 + 104);
      v37(v14, enum case for State.unknown(_:), v7);
      int v38 = static State.== infix(_:_:)();
      char v27 = v26;
      char v28 = *(void (**)(char *, uint64_t))(v8 + 8);
      v28(v14, v7);
      unint64_t v29 = v41;
      v27(v41, v17, v7);
      if (v38)
      {
        v28(v29, v7);
        v28(v17, v7);
        return 0;
      }
      v37(v14, enum case for State.buyable(_:), v7);
      char v30 = static State.== infix(_:_:)();
      v28(v14, v7);
      v28(v29, v7);
      v28(v17, v7);
      if (v30) {
        return 0;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v17, v7);
    }
    id v31 = [v40 ageRating];
    if (v31)
    {
      uint64_t v32 = v31;
      id v33 = [v31 integerValue];
      uint64_t v34 = dispatch thunk of Restrictions.maxAppContentRating.getter();

      if (v34 < (uint64_t)v33) {
        return 0;
      }
    }
    return 1;
  }
  (*(void (**)(char *, uint64_t))(v8 + 96))(v19, v7);
  uint64_t v22 = type metadata accessor for AppPurchaseType();
  (*(void (**)(char *, uint64_t))(*(void *)(v22 - 8) + 8))(v19, v22);
  return 0;
}

uint64_t (*sub_10012C8F0(uint64_t a1))(void *a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = sub_10012D120;
  *(void *)(v2 + 24) = a1;
  swift_retain();
  return sub_10012D160;
}

void *sub_10012C968@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for OSLogger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned int v6 = (char *)&v23[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v24 = &type metadata for Feature;
  unint64_t v25 = sub_100070914();
  LOBYTE(v23[0]) = 0;
  char v7 = isFeatureEnabled(_:)();
  sub_10002ED08((uint64_t)v23);
  if (v7)
  {
    if (qword_1001A0E80 != -1) {
      swift_once();
    }
    uint64_t v8 = sub_10002F6AC(v3, (uint64_t)qword_1001AE3C8);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v8, v3);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v9._uint64_t countAndFlagsBits = 0;
    v9._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v9);
    char v24 = &type metadata for Feature;
    LOBYTE(v23[0]) = 0;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_1000709E0((uint64_t)v23);
    v10._object = (void *)0x8000000100162620;
    v10._uint64_t countAndFlagsBits = 0xD000000000000035;
    LogMessage.StringInterpolation.appendLiteral(_:)(v10);
    LogMessage.init(stringInterpolation:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v11 = type metadata accessor for ManagedRestrictions();
    sub_10002EB60(&qword_1001A3390);
    type metadata accessor for BaseObjectGraph();
    inject<A, B>(_:from:)();
    unint64_t result = (void *)ManagedRestrictions.__allocating_init(accounts:)();
    uint64_t v13 = result;
    a1[3] = v11;
    a1[4] = &protocol witness table for ManagedRestrictions;
    goto LABEL_9;
  }
  if (qword_1001A0E80 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_10002F6AC(v3, (uint64_t)qword_1001AE3C8);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v14, v3);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v15._uint64_t countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v15);
  char v24 = &type metadata for Feature;
  LOBYTE(v23[0]) = 0;
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_1000709E0((uint64_t)v23);
  v16._uint64_t countAndFlagsBits = 0xD000000000000036;
  v16._object = (void *)0x80000001001625E0;
  LogMessage.StringInterpolation.appendLiteral(_:)(v16);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_10002EB60(&qword_1001A3390);
  type metadata accessor for BaseObjectGraph();
  inject<A, B>(_:from:)();
  unint64_t result = [self sharedConnection];
  if (result)
  {
    int v17 = result;
    id v18 = [self defaultCenter];
    type metadata accessor for ManagedRestrictions();
    swift_allocObject();
    uint64_t v19 = sub_10010C7D0(v23, v17, v18);
    uint64_t v20 = type metadata accessor for ASCMigrationRestrictionsImplementation();
    int v21 = (void *)swift_allocObject();
    uint64_t v13 = sub_10012CF00(v19, v21);
    a1[3] = v20;
    a1[4] = sub_10008EFC0();
    unint64_t result = (void *)swift_release();
LABEL_9:
    *a1 = v13;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for RestrictionsFactory()
{
  return self;
}

void *sub_10012CF00(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A5940);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2[2] = a1;
  a2[3] = &off_1001896F8;
  sub_10002EB60(&qword_1001A5948);
  swift_allocObject();
  swift_unknownObjectRetain();
  a2[4] = AsyncEvent.init()();
  sub_10002EB60(&qword_1001A4FA0);
  sub_10012D0C4();
  swift_retain();
  dispatch thunk of static EventEmitter.defaultScheduler.getter();
  EventEmitter.addObserver<A>(on:target:method:)();
  swift_release();
  sub_10002ED08((uint64_t)v10);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return a2;
}

unint64_t sub_10012D0C4()
{
  unint64_t result = qword_1001A5950;
  if (!qword_1001A5950)
  {
    sub_10002ED58(&qword_1001A4FA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5950);
  }
  return result;
}

uint64_t sub_10012D120(uint64_t a1, uint64_t a2)
{
  return sub_10008EE4C(a1, a2, v2);
}

uint64_t sub_10012D128()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10012D160(void *a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*a1, a1[1]);
}

uint64_t (*sub_10012D190(void *a1))(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = a1;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_100131340;
  *(void *)(v3 + 24) = v2;
  id v4 = a1;
  return sub_100131348;
}

id (*sub_10012D220(void *a1))(uint64_t a1)
{
  *(void *)(swift_allocObject() + 16) = a1;
  id v2 = a1;
  return sub_100131338;
}

id (*sub_10012D284(void *a1))(uint64_t a1)
{
  *(void *)(swift_allocObject() + 16) = a1;
  id v2 = a1;
  return sub_100131330;
}

uint64_t (*sub_10012D2E8(void *a1))(void *a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = a1;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_100131328;
  *(void *)(v3 + 24) = v2;
  id v4 = a1;
  return sub_1000C7470;
}

uint64_t (*sub_10012D378(void *a1))(unsigned __int8 *a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = a1;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_1001312F4;
  *(void *)(v3 + 24) = v2;
  id v4 = a1;
  return sub_1001312FC;
}

uint64_t sub_10012D408(void *a1, void (*a2)(void *, void), uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v23 = a6;
  uint64_t v10 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for OSLogger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[0] = a1;
  id v15 = a1;
  a2(v24, 0);

  if (qword_1001A0E70 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_10002F6AC(v11, (uint64_t)qword_1001AE398);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v16, v11);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v17._uint64_t countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v17);
  uint64_t v26 = &type metadata for StaticString;
  v24[0] = a4;
  v24[1] = a5;
  char v25 = v23;
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)v24, &qword_1001A1C50);
  v18._object = (void *)0x8000000100162730;
  v18._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v18);
  uint64_t v26 = (void *)sub_10002EE34(0, &qword_1001A4D40);
  v24[0] = v15;
  id v19 = v15;
  LogMessage.StringInterpolation.appendInterpolation(sensitive:)();
  sub_100034B8C((uint64_t)v24, &qword_1001A1C50);
  v20._uint64_t countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v20);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_10012D720(uint64_t a1, void (*a2)(void *, void), uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return sub_10012D7C8(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t))&_swift_bridgeObjectRetain, (void (*)(uint64_t))&_swift_bridgeObjectRelease, (uint64_t *)&unk_1001A5AD0);
}

uint64_t sub_10012D774(uint64_t a1, void (*a2)(void *, void), uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return sub_10012D7C8(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t))&_swift_bridgeObjectRetain, (void (*)(uint64_t))&_swift_bridgeObjectRelease, (uint64_t *)&unk_1001A5AC0);
}

uint64_t sub_10012D7C8(uint64_t a1, void (*a2)(void *, void), uint64_t a3, uint64_t a4, uint64_t a5, int a6, void (*a7)(uint64_t), void (*a8)(uint64_t), uint64_t *a9)
{
  int v26 = a6;
  uint64_t v25 = a5;
  char v27 = a9;
  uint64_t v14 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v14 - 8);
  uint64_t v15 = type metadata accessor for OSLogger();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  Swift::String v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[0] = a1;
  a7(a1);
  a2(v28, 0);
  a8(a1);
  if (qword_1001A0E70 != -1) {
    swift_once();
  }
  uint64_t v19 = sub_10002F6AC(v15, (uint64_t)qword_1001AE398);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v19, v15);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v20._uint64_t countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v20);
  char v30 = &type metadata for StaticString;
  v28[0] = a4;
  v28[1] = v25;
  char v29 = v26;
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)v28, &qword_1001A1C50);
  v21._object = (void *)0x8000000100162730;
  v21._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v21);
  char v30 = (void *)sub_10002EB60(v27);
  v28[0] = a1;
  a7(a1);
  LogMessage.StringInterpolation.appendInterpolation(sensitive:)();
  sub_100034B8C((uint64_t)v28, &qword_1001A1C50);
  v22._uint64_t countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v22);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t sub_10012DAF8(void *a1, void (*a2)(void *, void), uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v23 = a6;
  uint64_t v10 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for OSLogger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[0] = a1;
  id v15 = a1;
  a2(v24, 0);

  if (qword_1001A0E70 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_10002F6AC(v11, (uint64_t)qword_1001AE398);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v16, v11);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v17._uint64_t countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v17);
  int v26 = &type metadata for StaticString;
  v24[0] = a4;
  v24[1] = a5;
  char v25 = v23;
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)v24, &qword_1001A1C50);
  v18._object = (void *)0x8000000100162730;
  v18._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v18);
  int v26 = (void *)type metadata accessor for AppOfferStateClient();
  v24[0] = v15;
  id v19 = v15;
  LogMessage.StringInterpolation.appendInterpolation(sensitive:)();
  sub_100034B8C((uint64_t)v24, &qword_1001A1C50);
  v20._uint64_t countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v20);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_10012DE04(uint64_t a1, void (*a2)(uint64_t *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v23 = a6;
  uint64_t v22 = a5;
  uint64_t v8 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v8 - 8);
  uint64_t v9 = type metadata accessor for OSLogger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[0] = 0;
  swift_getErrorValue();
  uint64_t v13 = sub_1000D26A8(v29);
  a2(v26, v13);
  swift_errorRelease();
  if (qword_1001A0E70 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_10002F6AC(v9, (uint64_t)qword_1001AE398);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v14, v9);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v15._uint64_t countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v15);
  char v28 = &type metadata for StaticString;
  v26[0] = a4;
  v26[1] = v22;
  char v27 = v23;
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)v26, &qword_1001A1C50);
  v16._object = (void *)0x8000000100162140;
  v16._uint64_t countAndFlagsBits = 0xD000000000000027;
  LogMessage.StringInterpolation.appendLiteral(_:)(v16);
  swift_getErrorValue();
  uint64_t v17 = v24;
  Swift::String v18 = v25;
  char v28 = v25;
  id v19 = sub_100031A88(v26);
  (*(void (**)(uint64_t *, uint64_t, void *))(*(v18 - 1) + 16))(v19, v17, v18);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)v26, &qword_1001A1C50);
  v20._uint64_t countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v20);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_10012E170(uint64_t a1, uint64_t a2)
{
  if (qword_1001A0E70 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for OSLogger();
  sub_10002F6AC(v5, (uint64_t)qword_1001AE398);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.init(stringLiteral:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  uint64_t v6 = sub_10002EC6C((void *)(v2 + OBJC_IVAR____TtC19appstorecomponentsd19ServiceBrokerClient_session), *(void *)(v2 + OBJC_IVAR____TtC19appstorecomponentsd19ServiceBrokerClient_session + 24));
  uint64_t v7 = *v6;
  uint64_t v8 = *(void **)(*v6 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_stateLock);
  [v8 lock];
  unint64_t v9 = *(void *)(v7 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_bootstrapState);
  if ((v9 >> 62) - 2 >= 2)
  {
    if (v9 >> 62)
    {
      sub_10002EB60(&qword_1001A3A20);
      v14[0] = v9 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain();
      Promise.__allocating_init(value:)();
    }
    else
    {
      swift_retain();
    }
  }
  else
  {
    sub_1000B2860();
  }
  [v8 unlock];
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  uint64_t v12 = sub_10002EE34(0, (unint64_t *)&qword_1001A2170);
  swift_retain_n();
  void v14[3] = v12;
  uint64_t v14[4] = &protocol witness table for OS_dispatch_queue;
  v14[0] = static OS_dispatch_queue.main.getter();
  Promise.then(perform:orCatchError:on:)();
  swift_release();
  swift_release();
  swift_release();
  return sub_10002ED08((uint64_t)v14);
}

uint64_t sub_10012E440(uint64_t a1, uint64_t (*a2)(void))
{
  if (qword_1001A0E70 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for OSLogger();
  sub_10002F6AC(v3, (uint64_t)qword_1001AE398);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.init(stringLiteral:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  return a2(0);
}

uint64_t sub_10012E594(uint64_t a1, void (*a2)(void))
{
  Swift::String v15 = a2;
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for OSLogger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0E70 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_10002F6AC(v3, (uint64_t)qword_1001AE398);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v8._object = (void *)0x8000000100162860;
  v8._uint64_t countAndFlagsBits = 0xD000000000000027;
  LogMessage.StringInterpolation.appendLiteral(_:)(v8);
  swift_getErrorValue();
  uint64_t v9 = v17;
  uint64_t v10 = v18;
  uint64_t v19[3] = v18;
  uint64_t v11 = sub_100031A88(v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v11, v9, v10);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)v19, &qword_1001A1C50);
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v12);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  swift_getErrorValue();
  sub_1000D26A8(v16);
  v15();
  return swift_errorRelease();
}

uint64_t sub_10012E8D8(uint64_t a1, uint64_t a2)
{
  if (qword_1001A0E70 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for OSLogger();
  sub_10002F6AC(v5, (uint64_t)qword_1001AE398);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.init(stringLiteral:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  uint64_t v6 = sub_10002EC6C((void *)(v2 + OBJC_IVAR____TtC19appstorecomponentsd19ServiceBrokerClient_session), *(void *)(v2 + OBJC_IVAR____TtC19appstorecomponentsd19ServiceBrokerClient_session + 24));
  uint64_t v7 = *v6;
  Swift::String v8 = *(void **)(*v6 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_stateLock);
  [v8 lock];
  unint64_t v9 = *(void *)(v7 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_bootstrapState);
  if ((v9 >> 62) - 2 >= 2)
  {
    if (v9 >> 62)
    {
      sub_10002EB60(&qword_1001A3A20);
      v16[0] = v9 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain();
      Promise.__allocating_init(value:)();
    }
    else
    {
      swift_retain();
    }
  }
  else
  {
    sub_1000B2860();
  }
  [v8 unlock];
  uint64_t v17 = type metadata accessor for SyncTaskScheduler();
  uint64_t v18 = &protocol witness table for SyncTaskScheduler;
  sub_100031A88(v16);
  SyncTaskScheduler.init()();
  sub_10002EB60(&qword_1001A3348);
  Promise.map<A>(on:_:)();
  swift_release();
  sub_10002ED08((uint64_t)v16);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_10010C740;
  *(void *)(v11 + 24) = v10;
  *(void *)(v11 + 32) = "getLockupFetcherService(replyHandler:)";
  *(void *)(v11 + 40) = 38;
  *(unsigned char *)(v11 + 48) = 2;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_10010C740;
  *(void *)(v12 + 24) = v10;
  *(void *)(v12 + 32) = "getLockupFetcherService(replyHandler:)";
  *(void *)(v12 + 40) = 38;
  *(unsigned char *)(v12 + 48) = 2;
  uint64_t v13 = sub_10002EE34(0, (unint64_t *)&qword_1001A2170);
  swift_retain_n();
  swift_retain();
  uint64_t v14 = static OS_dispatch_queue.main.getter();
  uint64_t v17 = v13;
  uint64_t v18 = &protocol witness table for OS_dispatch_queue;
  v16[0] = v14;
  Promise.then(perform:orCatchError:on:)();
  swift_release();
  swift_release();
  sub_10002ED08((uint64_t)v16);
  swift_release();
  return swift_release();
}

uint64_t sub_10012EC7C(uint64_t a1)
{
  return sub_100130270(a1, &qword_1001A3348);
}

uint64_t sub_10012ECD0(uint64_t a1, uint64_t a2)
{
  if (qword_1001A0E70 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for OSLogger();
  sub_10002F6AC(v5, (uint64_t)qword_1001AE398);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.init(stringLiteral:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  uint64_t v6 = sub_10002EC6C((void *)(v2 + OBJC_IVAR____TtC19appstorecomponentsd19ServiceBrokerClient_session), *(void *)(v2 + OBJC_IVAR____TtC19appstorecomponentsd19ServiceBrokerClient_session + 24));
  uint64_t v7 = *v6;
  Swift::String v8 = *(void **)(*v6 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_stateLock);
  [v8 lock];
  unint64_t v9 = *(void *)(v7 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_bootstrapState);
  if ((v9 >> 62) - 2 >= 2)
  {
    if (v9 >> 62)
    {
      sub_10002EB60(&qword_1001A3A20);
      v16[0] = v9 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain();
      Promise.__allocating_init(value:)();
    }
    else
    {
      swift_retain();
    }
  }
  else
  {
    sub_1000B2860();
  }
  [v8 unlock];
  uint64_t v17 = type metadata accessor for SyncTaskScheduler();
  uint64_t v18 = &protocol witness table for SyncTaskScheduler;
  sub_100031A88(v16);
  SyncTaskScheduler.init()();
  sub_10002EB60(&qword_1001A3350);
  Promise.map<A>(on:_:)();
  swift_release();
  sub_10002ED08((uint64_t)v16);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_10010C740;
  *(void *)(v11 + 24) = v10;
  *(void *)(v11 + 32) = "getMetricsService(replyHandler:)";
  *(void *)(v11 + 40) = 32;
  *(unsigned char *)(v11 + 48) = 2;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_10010C740;
  *(void *)(v12 + 24) = v10;
  *(void *)(v12 + 32) = "getMetricsService(replyHandler:)";
  *(void *)(v12 + 40) = 32;
  *(unsigned char *)(v12 + 48) = 2;
  uint64_t v13 = sub_10002EE34(0, (unint64_t *)&qword_1001A2170);
  swift_retain_n();
  swift_retain();
  uint64_t v14 = static OS_dispatch_queue.main.getter();
  uint64_t v17 = v13;
  uint64_t v18 = &protocol witness table for OS_dispatch_queue;
  v16[0] = v14;
  Promise.then(perform:orCatchError:on:)();
  swift_release();
  swift_release();
  sub_10002ED08((uint64_t)v16);
  swift_release();
  return swift_release();
}

uint64_t sub_10012F074(uint64_t a1)
{
  return sub_100130270(a1, &qword_1001A3350);
}

uint64_t sub_10012F0C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1001A0E70 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for OSLogger();
  sub_10002F6AC(v7, (uint64_t)qword_1001AE398);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.init(stringLiteral:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  Swift::String v8 = sub_10002EC6C((void *)(v3 + OBJC_IVAR____TtC19appstorecomponentsd19ServiceBrokerClient_session), *(void *)(v3 + OBJC_IVAR____TtC19appstorecomponentsd19ServiceBrokerClient_session + 24));
  uint64_t v9 = *v8;
  uint64_t v10 = *(void **)(*v8 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_stateLock);
  [v10 lock];
  unint64_t v11 = *(void *)(v9 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_bootstrapState);
  if ((v11 >> 62) - 2 >= 2)
  {
    if (v11 >> 62)
    {
      sub_10002EB60(&qword_1001A3A20);
      v21[0] = v11 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain();
      Promise.__allocating_init(value:)();
    }
    else
    {
      swift_retain();
    }
  }
  else
  {
    sub_1000B2860();
  }
  [v10 unlock];
  uint64_t v12 = type metadata accessor for SyncTaskScheduler();
  uint64_t v22 = v12;
  int v23 = &protocol witness table for SyncTaskScheduler;
  sub_100031A88(v21);
  SyncTaskScheduler.init()();
  sub_10002EB60(&qword_1001A59F8);
  sub_100061D9C((unint64_t *)&unk_1001A5A00, &qword_1001A59F8);
  Promise.flatMap<A>(on:_:)();
  swift_release();
  sub_10002ED08((uint64_t)v21);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a1;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_1001304B4;
  *(void *)(v14 + 24) = v13;
  uint64_t v22 = v12;
  int v23 = &protocol witness table for SyncTaskScheduler;
  sub_100031A88(v21);
  swift_unknownObjectRetain();
  SyncTaskScheduler.init()();
  type metadata accessor for AppOfferStateClient();
  Promise.map<A>(on:_:)();
  swift_release();
  swift_release();
  sub_10002ED08((uint64_t)v21);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a2;
  *(void *)(v15 + 24) = a3;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_10010B9C4;
  *(void *)(v16 + 24) = v15;
  *(void *)(v16 + 32) = "getAppOfferStateService(for:withReplyHandler:)";
  *(void *)(v16 + 40) = 46;
  *(unsigned char *)(v16 + 48) = 2;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = sub_10010B9C4;
  *(void *)(v17 + 24) = v15;
  *(void *)(v17 + 32) = "getAppOfferStateService(for:withReplyHandler:)";
  *(void *)(v17 + 40) = 46;
  *(unsigned char *)(v17 + 48) = 2;
  uint64_t v18 = sub_10002EE34(0, (unint64_t *)&qword_1001A2170);
  swift_retain_n();
  swift_retain();
  uint64_t v19 = static OS_dispatch_queue.main.getter();
  uint64_t v22 = v18;
  int v23 = &protocol witness table for OS_dispatch_queue;
  v21[0] = v19;
  Promise.then(perform:orCatchError:on:)();
  swift_release();
  swift_release();
  sub_10002ED08((uint64_t)v21);
  swift_release();
  return swift_release();
}

uint64_t sub_10012F558(uint64_t *a1)
{
  uint64_t v2 = sub_10002EB60(&qword_1001A2450);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *a1;
  uint64_t v6 = v5 + qword_1001A53D8;
  swift_beginAccess();
  sub_1000475F0(v6, (uint64_t)&v14, &qword_1001A1D90);
  if (v15)
  {
    sub_100031C10(&v14, (uint64_t)v16);
    sub_10002EB60(&qword_1001A3A20);
    *(void *)&long long v14 = v5;
    swift_retain();
    Promise.__allocating_init(value:)();
    sub_100052538((uint64_t)v16, (uint64_t)&v14);
    uint64_t v7 = swift_allocObject();
    sub_100031C10(&v14, v7 + 16);
    sub_10002EB60(&qword_1001A5AA8);
    uint64_t v8 = Promise.__allocating_init()();
    uint64_t v9 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
    uint64_t v10 = (void *)swift_allocObject();
    void v10[2] = 0;
    v10[3] = 0;
    void v10[4] = &unk_1001A5AA0;
    uint64_t v10[5] = v7;
    v10[6] = v8;
    swift_retain();
    sub_1000F6C04((uint64_t)v4, (uint64_t)&unk_1001A5AB0, (uint64_t)v10);
    swift_release();
    sub_100061D9C(&qword_1001A5AB8, &qword_1001A5AA8);
    uint64_t v11 = Promise.join<A>(with:)();
    swift_release();
    swift_release();
    sub_10002ED08((uint64_t)v16);
    return v11;
  }
  else
  {
    sub_100034B8C((uint64_t)&v14, &qword_1001A1D90);
    sub_10002EB60((uint64_t *)&unk_1001A3320);
    uint64_t result = dispatch thunk of BaseObjectGraph.noMemberFound<A>(toSatisfy:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10012F7C4(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_10012F7E4, 0, 0);
}

uint64_t sub_10012F7E4()
{
  uint64_t v1 = *(void **)(v0 + 24);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_10002EC6C(v1, v2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10012F898;
  return dispatch thunk of AppStateController.loadDataSources()(v2, v3);
}

uint64_t sub_10012F898()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_10012F9C8, 0, 0);
  }
}

uint64_t sub_10012F9C8()
{
  sub_100052538(v0[3], v0[2]);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10012FA2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100052538(a2, (uint64_t)v33);
  uint64_t v6 = a1 + qword_1001A53E0;
  swift_beginAccess();
  sub_1000475F0(v6, (uint64_t)&v26, (uint64_t *)&unk_1001A3290);
  if (v27)
  {
    sub_100031C10(&v26, (uint64_t)v32);
    uint64_t v7 = a1 + qword_1001A53F0;
    swift_beginAccess();
    sub_1000475F0(v7, (uint64_t)&v26, &qword_1001A5450);
    if (v27)
    {
      sub_100031C10(&v26, (uint64_t)v31);
      sub_10002EB60(&qword_1001A32A0);
      type metadata accessor for ObjectGraph();
      swift_retain();
      inject<A, B>(_:from:)();
      sub_10002EB60((uint64_t *)&unk_1001A5A10);
      inject<A, B>(_:from:)();
      type metadata accessor for JSStackManager();
      inject<A, B>(_:from:)();
      sub_10002EB60(&qword_1001A19A0);
      inject<A, B>(_:from:)();
      sub_100052538(a2, (uint64_t)&v26);
      swift_unknownObjectRetain();
      inject<A, B>(_:from:)();
      uint64_t v8 = sub_10002FE00((uint64_t)v30, v30[3]);
      __n128 v9 = __chkstk_darwin(v8);
      uint64_t v11 = (uint64_t *)((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *, __n128))(v12 + 16))(v11, v9);
      uint64_t v13 = sub_10002FE00((uint64_t)v29, v29[3]);
      __n128 v14 = __chkstk_darwin(v13);
      uint64_t v16 = (uint64_t *)((char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *, __n128))(v17 + 16))(v16, v14);
      uint64_t v18 = v28[5];
      sub_1000B11C4((uint64_t)&v26, (uint64_t)v25);
      uint64_t v19 = *v11;
      uint64_t v20 = *v16;
      swift_retain();
      id v21 = sub_100130F7C(a1, v33, v32, v31, v19, v20, v18, (uint64_t)v28, a3, v25);
      swift_release();
      swift_unknownObjectRelease();
      sub_1000B1220((uint64_t)&v26);
      swift_release();
      sub_10002ED08((uint64_t)v29);
      sub_10002ED08((uint64_t)v30);
      return (uint64_t)v21;
    }
    swift_retain();
    sub_100034B8C((uint64_t)&v26, &qword_1001A5450);
    int v23 = (uint64_t *)&unk_1001A3310;
  }
  else
  {
    swift_retain();
    sub_100034B8C((uint64_t)&v26, (uint64_t *)&unk_1001A3290);
    int v23 = &qword_1001A2480;
  }
  sub_10002EB60(v23);
  uint64_t result = dispatch thunk of BaseObjectGraph.noMemberFound<A>(toSatisfy:)();
  __break(1u);
  return result;
}

uint64_t sub_10012FEAC(uint64_t a1, uint64_t a2)
{
  if (qword_1001A0E70 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for OSLogger();
  sub_10002F6AC(v5, (uint64_t)qword_1001AE398);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.init(stringLiteral:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  uint64_t v6 = sub_10002EC6C((void *)(v2 + OBJC_IVAR____TtC19appstorecomponentsd19ServiceBrokerClient_session), *(void *)(v2 + OBJC_IVAR____TtC19appstorecomponentsd19ServiceBrokerClient_session + 24));
  uint64_t v7 = *v6;
  uint64_t v8 = *(void **)(*v6 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_stateLock);
  [v8 lock];
  unint64_t v9 = *(void *)(v7 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_bootstrapState);
  if ((v9 >> 62) - 2 >= 2)
  {
    if (v9 >> 62)
    {
      sub_10002EB60(&qword_1001A3A20);
      v16[0] = v9 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain();
      Promise.__allocating_init(value:)();
    }
    else
    {
      swift_retain();
    }
  }
  else
  {
    sub_1000B2860();
  }
  [v8 unlock];
  uint64_t v17 = type metadata accessor for SyncTaskScheduler();
  uint64_t v18 = &protocol witness table for SyncTaskScheduler;
  sub_100031A88(v16);
  SyncTaskScheduler.init()();
  sub_10002EB60(&qword_1001A3358);
  Promise.map<A>(on:_:)();
  swift_release();
  sub_10002ED08((uint64_t)v16);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_10010C740;
  *(void *)(v11 + 24) = v10;
  *(void *)(v11 + 32) = "getUtilityService(replyHandler:)";
  *(void *)(v11 + 40) = 32;
  *(unsigned char *)(v11 + 48) = 2;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_10010C740;
  *(void *)(v12 + 24) = v10;
  *(void *)(v12 + 32) = "getUtilityService(replyHandler:)";
  *(void *)(v12 + 40) = 32;
  *(unsigned char *)(v12 + 48) = 2;
  uint64_t v13 = sub_10002EE34(0, (unint64_t *)&qword_1001A2170);
  swift_retain_n();
  swift_retain();
  uint64_t v14 = static OS_dispatch_queue.main.getter();
  uint64_t v17 = v13;
  uint64_t v18 = &protocol witness table for OS_dispatch_queue;
  v16[0] = v14;
  Promise.then(perform:orCatchError:on:)();
  swift_release();
  swift_release();
  sub_10002ED08((uint64_t)v16);
  swift_release();
  return swift_release();
}

uint64_t sub_100130250(uint64_t a1)
{
  return sub_100130270(a1, &qword_1001A3358);
}

uint64_t sub_100130270(uint64_t a1, uint64_t *a2)
{
  return inject<A, B>(_:from:)();
}

uint64_t sub_100130304(void *a1, int a2, void *aBlock, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  unint64_t v9 = _Block_copy(aBlock);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v9;
  id v11 = a1;
  a6(a5, v10);

  return swift_release();
}

uint64_t type metadata accessor for ServiceBrokerClient()
{
  return self;
}

uint64_t sub_1001303FC()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100130434(uint64_t *a1)
{
  return sub_1001315B8(a1, &qword_1001A3358);
}

uint64_t sub_100130440()
{
  swift_release();

  return _swift_deallocObject(v0, 49, 7);
}

uint64_t sub_10013047C()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001304B4(uint64_t a1, uint64_t a2)
{
  return sub_10012FA2C(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1001304BC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001304F4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void *))(v2 + 16))(*a1, a1 + 1);
  *a2 = result;
  return result;
}

uint64_t sub_10013053C(void **a1)
{
  return sub_10012DAF8(*a1, *(void (**)(void *, void))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned __int8 *)(v1 + 48));
}

id sub_100130550(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _OWORD *a10, char *a11)
{
  uint64_t v59 = a8;
  uint64_t v43 = a4;
  unint64_t v41 = a3;
  uint64_t v40 = a1;
  uint64_t v42 = a9;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v58 = sub_10002EB60(&qword_1001A5A20);
  uint64_t v57 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v56 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_10002EB60(&qword_1001A5A28);
  uint64_t v54 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  char v53 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = sub_10002EB60(&qword_1001A5A30);
  uint64_t v51 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v50 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_10002EB60(&qword_1001A5A38);
  uint64_t v47 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  char v46 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_10002EB60((uint64_t *)&unk_1001A5A40);
  uint64_t v21 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  int v23 = (char *)&v40 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69[3] = type metadata accessor for JSStackManager();
  v69[4] = &off_100188D38;
  v69[0] = a7;
  uint64_t v67 = type metadata accessor for ASDContingentPricingSubscriptionManager();
  uint64_t v68 = &off_100187460;
  uint64_t v66 = a5;
  uint64_t v64 = type metadata accessor for LegacyAppStoreInstallStateMonitor();
  Swift::Int v65 = &off_100188FA8;
  uint64_t v63 = a6;
  v62[3] = &type metadata for DeviceAppDistribution;
  v62[4] = &off_100187AE0;
  uint64_t v24 = (_OWORD *)swift_allocObject();
  v62[0] = v24;
  long long v25 = a10[3];
  uint64_t v24[3] = a10[2];
  v24[4] = v25;
  uint64_t v24[5] = a10[4];
  long long v26 = a10[1];
  v24[1] = *a10;
  void v24[2] = v26;
  *(void *)&a11[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_objectGraph] = v40;
  sub_100052538((uint64_t)a2, (uint64_t)&a11[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStateController]);
  sub_100052538((uint64_t)a3, (uint64_t)&a11[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_arcadeSubscription]);
  sub_100052538((uint64_t)a4, (uint64_t)&a11[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_restrictions]);
  sub_100052538((uint64_t)&v66, (uint64_t)&a11[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_contingentOffers]);
  sub_100052538((uint64_t)&v63, (uint64_t)&a11[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStoreInstallStateMonitor]);
  sub_100052538((uint64_t)v69, (uint64_t)&a11[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_jsStackManager]);
  sub_100052538(v59, (uint64_t)&a11[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_localizer]);
  *(void *)&a11[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_delegate] = v42;
  sub_100052538((uint64_t)v62, (uint64_t)&a11[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appDistribution]);
  id v27 = objc_allocWithZone((Class)NSLock);
  char v28 = a11;
  swift_retain();
  swift_unknownObjectRetain();
  id v29 = [v27 init];
  *(void *)&v28[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_stateLock] = v29;
  *(void *)&v28[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_observations] = sub_100066BC4(_swiftEmptyArrayStorage);
  v28[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_isUpdatingArcadeSubscription] = 0;
  v28[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_isUpdatingContingentOfferSubscription] = 0;

  v61.receiver = v28;
  v61.super_class = ObjectType;
  id v30 = objc_msgSendSuper2(&v61, "init");
  uint64_t v49 = a2;
  sub_10002EC6C(a2, a2[3]);
  id v31 = v30;
  dispatch thunk of AppStateController.onStateChange.getter();
  sub_10002EB60(&qword_1001A28D0);
  sub_100061D9C((unint64_t *)&unk_1001A5A50, &qword_1001A28D0);
  dispatch thunk of static EventEmitter.defaultScheduler.getter();
  EventEmitter.addObserver<A>(on:target:method:)();
  swift_release();
  sub_10002ED08((uint64_t)v60);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v44);
  uint64_t v32 = v41;
  sub_10002EC6C(v41, v41[3]);
  dispatch thunk of ArcadeSubscriptionManager.onSubscriptionStateChange.getter();
  sub_10002EB60(&qword_1001A2540);
  sub_100061D9C((unint64_t *)&unk_1001A5A60, &qword_1001A2540);
  dispatch thunk of static EventEmitter.defaultScheduler.getter();
  id v33 = v46;
  EventEmitter.addObserver<A>(on:target:method:)();
  swift_release();
  sub_10002ED08((uint64_t)v60);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v33, v48);
  uint64_t v34 = v43;
  sub_10002EC6C(v43, v43[3]);
  dispatch thunk of Restrictions.onRestrictionsChange.getter();
  sub_10002EB60(&qword_1001A5948);
  sub_100061D9C((unint64_t *)&unk_1001A5A70, &qword_1001A5948);
  dispatch thunk of static EventEmitter.defaultScheduler.getter();
  uint64_t v35 = v50;
  EventEmitter.addObserver<A>(on:target:method:)();
  swift_release();
  sub_10002ED08((uint64_t)v60);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v35, v52);
  sub_10002EC6C(&v66, v67);
  sub_10002EB60(&qword_1001A38D8);
  sub_100061D9C((unint64_t *)&unk_1001A5A80, &qword_1001A38D8);
  swift_retain();
  dispatch thunk of static EventEmitter.defaultScheduler.getter();
  uint64_t v36 = v53;
  EventEmitter.addObserver<A>(on:target:method:)();
  swift_release();
  sub_10002ED08((uint64_t)v60);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v36, v55);
  sub_10002EC6C(&v63, v64);
  sub_10002EB60(&qword_1001A2428);
  sub_100061D9C(&qword_1001A5A90, &qword_1001A2428);
  swift_retain();
  dispatch thunk of static EventEmitter.defaultScheduler.getter();
  uint64_t v37 = v56;
  EventEmitter.addObserver<A>(on:target:method:)();
  swift_release();
  sub_10002ED08((uint64_t)v60);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v37, v58);
  id v38 = [self defaultCenter];
  [v38 addObserver:v31 selector:"didChangeAppCapabilities:" name:ASDAppCapabilitiesDidChangeNotification object:0];

  sub_10002ED08((uint64_t)v62);
  sub_10002ED08(v59);
  sub_10002ED08((uint64_t)v69);
  sub_10002ED08((uint64_t)&v63);
  sub_10002ED08((uint64_t)&v66);
  sub_10002ED08((uint64_t)v34);
  sub_10002ED08((uint64_t)v32);
  sub_10002ED08((uint64_t)v49);
  return v31;
}

id sub_100130F7C(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _OWORD *a10)
{
  uint64_t v39 = a7;
  uint64_t v40 = a8;
  uint64_t v16 = type metadata accessor for ASDContingentPricingSubscriptionManager();
  v47[3] = v16;
  v47[4] = &off_100187460;
  v47[0] = a5;
  uint64_t v45 = type metadata accessor for LegacyAppStoreInstallStateMonitor();
  char v46 = &off_100188FA8;
  v44[0] = a6;
  uint64_t v42 = &type metadata for DeviceAppDistribution;
  uint64_t v43 = &off_100187AE0;
  uint64_t v17 = (_OWORD *)swift_allocObject();
  v41[0] = v17;
  long long v18 = a10[3];
  void v17[3] = a10[2];
  uint64_t v17[4] = v18;
  v17[5] = a10[4];
  long long v19 = a10[1];
  v17[1] = *a10;
  void v17[2] = v19;
  uint64_t v20 = (char *)objc_allocWithZone((Class)type metadata accessor for AppOfferStateClient());
  uint64_t v21 = sub_10002FE00((uint64_t)v47, v16);
  __n128 v22 = __chkstk_darwin(v21);
  uint64_t v24 = (uint64_t *)((char *)&v38 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v25 + 16))(v24, v22);
  uint64_t v26 = sub_10002FE00((uint64_t)v44, v45);
  __n128 v27 = __chkstk_darwin(v26);
  id v29 = (uint64_t *)((char *)&v38 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, __n128))(v30 + 16))(v29, v27);
  uint64_t v31 = sub_10002FE00((uint64_t)v41, (uint64_t)v42);
  __n128 v32 = __chkstk_darwin(v31);
  uint64_t v34 = (_OWORD *)((char *)&v38 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_OWORD *, __n128))(v35 + 16))(v34, v32);
  id v36 = sub_100130550(a1, a2, a3, a4, *v24, *v29, v39, v40, a9, v34, v20);
  sub_10002ED08((uint64_t)v41);
  sub_10002ED08((uint64_t)v44);
  sub_10002ED08((uint64_t)v47);
  return v36;
}

uint64_t sub_10013127C()
{
  sub_10002ED08(v0 + 16);
  sub_10002ED08(v0 + 56);

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_1001312BC()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_1001312F4(uint64_t a1)
{
  return sub_100053D20(a1, *(void *)(v1 + 16));
}

uint64_t sub_1001312FC(unsigned __int8 *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

id sub_100131328(uint64_t a1)
{
  return sub_100053B8C(a1, *(void *)(v1 + 16));
}

id sub_100131330(uint64_t a1)
{
  return sub_100053A00(a1, *(void *)(v1 + 16));
}

id sub_100131338(uint64_t a1)
{
  return sub_100053874(a1, *(void *)(v1 + 16));
}

uint64_t sub_100131340(char *a1, uint64_t a2)
{
  return sub_100053494(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_100131348(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16);
  uint64_t v4 = sub_10002EB60(&qword_1001A2118);
  return v3(a1, a1 + *(int *)(v4 + 48));
}

uint64_t sub_100131394()
{
  sub_10002ED08(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001313CC(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[2] = a1;
  v4[3] = v1 + 16;
  v4[1] = sub_10002F874;
  return _swift_task_switch(sub_10012F7E4, 0, 0);
}

uint64_t sub_10013147C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001314C4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  unint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *unint64_t v9 = v2;
  v9[1] = sub_10002F874;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t))((char *)&dword_1001A4980
                                                                                   + dword_1001A4980);
  return v10(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1001315A0(uint64_t *a1)
{
  return sub_1001315B8(a1, &qword_1001A3350);
}

uint64_t sub_1001315AC(uint64_t *a1)
{
  return sub_1001315B8(a1, &qword_1001A3348);
}

uint64_t sub_1001315B8(uint64_t *a1, uint64_t *a2)
{
  return sub_10012D7C8(*a1, *(void (**)(void *, void))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(unsigned __int8 *)(v2 + 48), (void (*)(uint64_t))&_swift_unknownObjectRetain, (void (*)(uint64_t))&_swift_unknownObjectRelease, a2);
}

uint64_t sub_100131618(uint64_t a1)
{
  return sub_10012DE04(a1, *(void (**)(uint64_t *, uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned __int8 *)(v1 + 48));
}

uint64_t sub_10013163C(uint64_t a1)
{
  return sub_10012E440(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_100131644(uint64_t a1)
{
  return sub_10012E594(a1, *(void (**)(void))(v1 + 16));
}

id sub_1001316AC()
{
  if (qword_1001A0E60 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for OSLogger();
  sub_10002F6AC(v1, (uint64_t)qword_1001AE368);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.init(stringLiteral:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(v0 + 48);
  [v2 lock];
  if (*(void *)(v0 + 56))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(void *)(v0 + 56) = 0;
  swift_release();

  return [v2 unlock];
}

uint64_t sub_10013184C()
{
  swift_release();

  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ShutdownTimer()
{
  return self;
}

uint64_t sub_1001318C0(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v4 = v3;
  uint64_t v15 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v8 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v11);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v12 - 8);
  *(void *)(v4 + 56) = 0;
  *(void *)(v4 + 24) = a1;
  *(void *)(v4 + 32) = a2;
  *(double *)(v4 + 16) = a3;
  sub_10004765C();
  swift_retain();
  static DispatchQoS.background.getter();
  v14[1] = static OS_dispatch_queue.main.getter();
  uint64_t v16 = _swiftEmptyArrayStorage;
  sub_100131B58((unint64_t *)&qword_1001A3370, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10002EB60(&qword_1001A2910);
  sub_10008A3A0((unint64_t *)&qword_1001A3380, &qword_1001A2910);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v15);
  *(void *)(v4 + 40) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v4 + 48) = [objc_allocWithZone((Class)JEUnfairLock) init];
  return v4;
}

uint64_t sub_100131B58(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for SimpleMetricsFieldsBuilder()
{
  return &type metadata for SimpleMetricsFieldsBuilder;
}

uint64_t sub_100131BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100042EB8(a1, (uint64_t)v6);
  swift_bridgeObjectRetain();
  return sub_100139AF0((uint64_t)v6, a2, a3);
}

uint64_t sub_100131C0C()
{
  return swift_bridgeObjectRetain();
}

ValueMetadata *type metadata accessor for StatefulOfferActionImplementation()
{
  return &type metadata for StatefulOfferActionImplementation;
}

unint64_t sub_100131C28()
{
  unint64_t result = qword_1001A17B0;
  if (!qword_1001A17B0)
  {
    sub_10002EE34(255, &qword_1001A17A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A17B0);
  }
  return result;
}

uint64_t sub_100131C90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[41] = a2;
  v3[42] = a3;
  v3[40] = a1;
  uint64_t v4 = sub_10002EB60(&qword_1001A19B8);
  v3[43] = v4;
  v3[44] = *(void *)(v4 - 8);
  v3[45] = swift_task_alloc();
  uint64_t v5 = sub_10002EB60((uint64_t *)&unk_1001A2160);
  v3[46] = v5;
  v3[47] = *(void *)(v5 - 8);
  v3[48] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for MetricsFieldsContext();
  v3[49] = v6;
  v3[50] = *(void *)(v6 - 8);
  v3[51] = swift_task_alloc();
  v3[52] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for AppOffer();
  v3[53] = v7;
  v3[54] = *(void *)(v7 - 8);
  v3[55] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for State();
  v3[56] = v8;
  v3[57] = *(void *)(v8 - 8);
  v3[58] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for App.Kind();
  v3[59] = v9;
  v3[60] = *(void *)(v9 - 8);
  v3[61] = swift_task_alloc();
  type metadata accessor for AdamID();
  v3[62] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for App();
  v3[63] = v10;
  v3[64] = *(void *)(v10 - 8);
  v3[65] = swift_task_alloc();
  return _swift_task_switch(sub_100131FC0, 0, 0);
}

uint64_t sub_100131FC0()
{
  uint64_t v1 = *(void *)(v0 + 328) + qword_1001A53D8;
  swift_beginAccess();
  sub_1000451AC(v1, v0 + 136);
  if (*(void *)(v0 + 160))
  {
    uint64_t v2 = *(void **)(v0 + 336);
    sub_100031C10((long long *)(v0 + 136), v0 + 96);
    id v3 = [v2 id];
    [v3 int64value];
    AdamID.init(value:)();
    uint64_t v6 = *(void *)(v0 + 464);
    uint64_t v8 = *(void *)(v0 + 432);
    uint64_t v7 = *(void *)(v0 + 440);
    uint64_t v38 = *(void *)(v0 + 424);
    (*(void (**)(void, void, void))(*(void *)(v0 + 480) + 104))(*(void *)(v0 + 488), enum case for App.Kind.store(_:), *(void *)(v0 + 472));
    App.init(id:kind:)();

    sub_10002EC6C((void *)(v0 + 96), *(void *)(v0 + 120));
    sub_100053098();
    uint64_t v9 = (long long *)(v0 + 216);
    AppStateController.state(forApp:applying:)();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v38);
    *(void *)(v0 + 528) = sub_10009F50C(v6);
    sub_10002DC48(v0 + 216);
    if (*(void *)(v0 + 240))
    {
      uint64_t v10 = *(void *)(v0 + 336);
      sub_100031C10(v9, v0 + 176);
      sub_10002EE34(0, (unint64_t *)&qword_1001A5470);
      BaseObjectGraph.optional<A>(_:)();
      uint64_t v11 = *(void **)(v0 + 296);
      MetricsFieldsContext.init()();
      *(void *)(v0 + 304) = v10;
      if (qword_1001A0DC0 != -1) {
        swift_once();
      }
      uint64_t v12 = sub_10002EB60(qword_1001A22E0);
      sub_10002F6AC(v12, (uint64_t)qword_1001AE298);
      sub_10002EB60(&qword_1001A1700);
      MetricsFieldsContext.addValue<A>(_:forProperty:)();
      if (v11)
      {
        *(void *)(v0 + 312) = v11;
        uint64_t v13 = qword_1001A0DA0;
        id v14 = v11;
        if (v13 != -1) {
          swift_once();
        }
        uint64_t v15 = sub_10002EB60(&qword_1001A50E0);
        sub_10002F6AC(v15, (uint64_t)qword_1001AE268);
        MetricsFieldsContext.addValue<A>(_:forProperty:)();
      }
      uint64_t v16 = *(void *)(v0 + 416);
      uint64_t v17 = v11;
      uint64_t v19 = *(void *)(v0 + 392);
      uint64_t v18 = *(void *)(v0 + 400);
      uint64_t v20 = *(void *)(v0 + 360);
      uint64_t v21 = *(void *)(v0 + 352);
      uint64_t v40 = *(void *)(v0 + 344);
      (*(void (**)(uint64_t, void, uint64_t))(v18 + 32))(v16, *(void *)(v0 + 408), v19);

      type metadata accessor for ObjectGraph();
      inject<A, B>(_:from:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v20, v16, v19);
      (*(void (**)(uint64_t, void, uint64_t))(v21 + 104))(v20, enum case for ActionDispatcher.MetricsBehavior.fromAction<A>(_:), v40);
      __n128 v22 = (void *)swift_task_alloc();
      *(void *)(v0 + 536) = v22;
      *__n128 v22 = v0;
      v22[1] = sub_10013262C;
      uint64_t v23 = *(void *)(v0 + 360);
      uint64_t v24 = *(void *)(v0 + 368);
      uint64_t v25 = *(void *)(v0 + 320);
      uint64_t v26 = *(void *)(v0 + 328);
      return ActionDispatcher.perform(_:withMetrics:asPartOf:)(v25, v0 + 176, v23, v26, v24);
    }
    else
    {
      uint64_t v27 = *(void *)(v0 + 512);
      uint64_t v37 = *(void *)(v0 + 504);
      uint64_t v39 = *(void *)(v0 + 520);
      uint64_t v28 = *(void *)(v0 + 456);
      uint64_t v36 = *(void *)(v0 + 464);
      uint64_t v35 = *(void *)(v0 + 448);
      sub_100034B8C((uint64_t)v9, (uint64_t *)&unk_1001A2180);
      type metadata accessor for ASCAppOfferActionError(0);
      *(void *)(v0 + 280) = 2;
      sub_10002EB60(&qword_1001A4CE0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10014CED0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v30;
      _StringGuts.grow(_:)(32);
      swift_getObjectType();
      uint64_t v31 = _typeName(_:qualified:)();
      uint64_t v33 = v32;
      swift_bridgeObjectRelease();
      v34._object = (void *)0x800000010015B540;
      v34._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
      String.append(_:)(v34);
      *(void *)(inited + 72) = &type metadata for String;
      *(void *)(inited + 48) = v31;
      *(void *)(inited + 56) = v33;
      sub_100062F68(inited);
      sub_100070108();
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v36, v35);
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v39, v37);
      sub_10002ED08(v0 + 96);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
      return v4();
    }
  }
  else
  {
    sub_100034B8C(v0 + 136, &qword_1001A1D90);
    sub_10002EB60((uint64_t *)&unk_1001A3320);
    return dispatch thunk of BaseObjectGraph.noMemberFound<A>(toSatisfy:)();
  }
}

uint64_t sub_10013262C()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 544) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[44] + 8))(v2[45], v2[43]);
  if (v0) {
    id v3 = sub_10013291C;
  }
  else {
    id v3 = sub_100132794;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100132794()
{
  uint64_t v1 = v0[65];
  uint64_t v2 = v0[64];
  uint64_t v14 = v0[63];
  uint64_t v3 = v0[57];
  uint64_t v13 = v0[58];
  uint64_t v12 = v0[56];
  uint64_t v4 = v0[52];
  uint64_t v6 = v0[49];
  uint64_t v5 = v0[50];
  uint64_t v7 = v0[47];
  uint64_t v8 = v0[48];
  uint64_t v9 = v0[46];
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  sub_10002ED08((uint64_t)(v0 + 22));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v13, v12);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v14);
  sub_10002ED08((uint64_t)(v0 + 12));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_10013291C()
{
  uint64_t v14 = v0[65];
  uint64_t v1 = v0[64];
  uint64_t v2 = v0[57];
  uint64_t v12 = v0[58];
  uint64_t v13 = v0[63];
  uint64_t v11 = v0[56];
  uint64_t v3 = v0[52];
  uint64_t v5 = v0[49];
  uint64_t v4 = v0[50];
  uint64_t v6 = v0[47];
  uint64_t v7 = v0[48];
  uint64_t v8 = v0[46];
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_10002ED08((uint64_t)(v0 + 22));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v12, v11);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v14, v13);
  sub_10002ED08((uint64_t)(v0 + 12));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100132AA8(void **a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A2450);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *a1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = v7;
  sub_10002EB60((uint64_t *)&unk_1001A21F0);
  swift_retain();
  id v9 = v7;
  uint64_t v10 = Promise.__allocating_init()();
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v6, 1, 1, v11);
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = &unk_1001A5BB0;
  v12[5] = v8;
  v12[6] = v10;
  swift_retain();
  sub_1000F6C04((uint64_t)v6, (uint64_t)&unk_1001A2470, (uint64_t)v12);
  swift_release();
  return v10;
}

uint64_t sub_100132C14()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100132C54(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_10002F874;
  return sub_100131C90(a1, v5, v4);
}

uint64_t sub_100132D00()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100132D48()
{
  uint64_t v0 = type metadata accessor for MetricsFieldExclusionRequest();
  sub_10002F648(v0, qword_1001AE418);
  sub_10002F6AC(v0, (uint64_t)qword_1001AE418);
  return MetricsFieldExclusionRequest.init(rawValue:)();
}

void *sub_100132DA0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    uint64_t v8 = (void *)a2[5];
    uint64_t v4[5] = v8;
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = (uint64_t)a2 + v9;
    uint64_t v12 = type metadata accessor for Bag();
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
    id v14 = v8;
    v13(v10, v11, v12);
  }
  return v4;
}

uint64_t sub_100132EC8(uint64_t a1, uint64_t a2)
{
  sub_10002ED08(a1);

  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Bag();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_100132F44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  long long v7 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Bag();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  id v13 = v7;
  v12(v9, v10, v11);
  return a1;
}

uint64_t *sub_100133014(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  sub_1000300B4(a1, a2);
  long long v6 = (void *)a2[5];
  long long v7 = (void *)a1[5];
  a1[5] = (uint64_t)v6;
  id v8 = v6;

  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Bag();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

uint64_t sub_1001330A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Bag();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

uint64_t sub_10013312C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10002ED08(a1);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(void **)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;

  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Bag();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t sub_1001331C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001331D8);
}

uint64_t sub_1001331D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for MetricsTopicProvider();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100133288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013329C);
}

uint64_t sub_10013329C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for MetricsTopicProvider();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for UniversalMetricsFieldsProvider()
{
  uint64_t result = qword_1001A5C10;
  if (!qword_1001A5C10) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100133390()
{
  uint64_t result = type metadata accessor for Bag();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100133434(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10002EB60(&qword_1001A19D8);
  uint64_t v51 = *(void *)(v4 - 8);
  uint64_t v52 = v4;
  __chkstk_darwin(v4);
  uint64_t v50 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10002EB60(&qword_1001A19C0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10002EB60(&qword_1001A44F0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.init(string:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (result != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
    uint64_t v17 = (void *)v2[5];
    URL._bridgeToObjectiveC()(v18);
    uint64_t v20 = v19;
    id v21 = objc_msgSend(v17, "ams_cookiesForURL:", v19);

    sub_100133BF8();
    __n128 v22 = v15;
    uint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v53 = v23;
    uint64_t v54 = sub_100133B18;
    uint64_t v55 = 0;
    sub_10002EB60(&qword_1001A5C60);
    sub_100133C38();
    uint64_t v24 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v26 = v25;
    swift_bridgeObjectRelease();
    uint64_t v56 = &type metadata for String;
    uint64_t v53 = v24;
    uint64_t v54 = v26;
    sub_10002FE00(a1, *(void *)(a1 + 24));
    uint64_t v27 = v57;
    dispatch thunk of MetricsFieldsBuilder.addValue(_:forField:)();
    if (v27)
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v22, v12);
      return sub_10002ED08((uint64_t)&v53);
    }
    uint64_t v57 = 0;
    uint64_t v48 = v22;
    uint64_t v49 = v12;
    sub_10002ED08((uint64_t)&v53);
    sub_10002EC6C(v2, v2[3]);
    dispatch thunk of AccountProvider.activeAccount.getter();
    uint64_t v28 = type metadata accessor for Account();
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v8, 1, v28) == 1)
    {
      sub_1000A8F50((uint64_t)v8);
    }
    else
    {
      swift_getKeyPath();
      Account.subscript.getter();
      swift_release();
      uint64_t v30 = (void *)v53;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v28);
      if (v30)
      {
        type metadata accessor for UniversalMetricsFieldsProvider();
        NSString v31 = String._bridgeToObjectiveC()();
        uint64_t v32 = v50;
        Bag.subscript.getter();

        uint64_t v33 = v52;
        Bag.Value.current(or:)();
        (*(void (**)(char *, uint64_t))(v51 + 8))(v32, v33);
        uint64_t v34 = v49;
        if (v53)
        {
        }
        else
        {
          id v42 = [v30 stringValue];
          uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v45 = v44;

          uint64_t v56 = &type metadata for String;
          uint64_t v53 = v43;
          uint64_t v54 = v45;
          sub_10002FE00(a1, *(void *)(a1 + 24));
          uint64_t v46 = v57;
          dispatch thunk of MetricsFieldsBuilder.addValue(_:forField:)();
          if (v46)
          {
            (*(void (**)(char *, uint64_t))(v13 + 8))(v48, v34);

            return sub_10002ED08((uint64_t)&v53);
          }
          uint64_t v57 = 0;

          sub_10002ED08((uint64_t)&v53);
        }
LABEL_10:
        uint64_t v35 = self;
        [v35 mainScreenSize];
        uint64_t v37 = v36;
        uint64_t v39 = v38;
        [v35 mainScreenScale];
        uint64_t v56 = &type metadata for CGFloat;
        uint64_t v53 = v40;
        sub_10002FE00(a1, *(void *)(a1 + 24));
        uint64_t v41 = v57;
        dispatch thunk of MetricsFieldsBuilder.addValue(_:forField:)();
        if (!v41)
        {
          sub_10002ED08((uint64_t)&v53);
          uint64_t v56 = &type metadata for CGFloat;
          uint64_t v53 = v39;
          sub_10002FE00(a1, *(void *)(a1 + 24));
          dispatch thunk of MetricsFieldsBuilder.addValue(_:forField:)();
          sub_10002ED08((uint64_t)&v53);
          uint64_t v56 = &type metadata for CGFloat;
          uint64_t v53 = v37;
          sub_10002FE00(a1, *(void *)(a1 + 24));
          dispatch thunk of MetricsFieldsBuilder.addValue(_:forField:)();
        }
        (*(void (**)(char *, uint64_t))(v13 + 8))(v48, v34);
        return sub_10002ED08((uint64_t)&v53);
      }
    }
    uint64_t v34 = v49;
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100133B18@<X0>(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = *a1;
  id v4 = [*a1 name];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  uint64_t v15 = v5;
  v8._uint64_t countAndFlagsBits = 61;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  id v9 = [v3 value];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  v13._uint64_t countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v15;
  a2[1] = v7;
  return result;
}

uint64_t sub_100133BE0(uint64_t a1)
{
  return sub_100133434(a1);
}

unint64_t sub_100133BF8()
{
  unint64_t result = qword_1001A5C58;
  if (!qword_1001A5C58)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001A5C58);
  }
  return result;
}

unint64_t sub_100133C38()
{
  unint64_t result = qword_1001A5C68;
  if (!qword_1001A5C68)
  {
    sub_10002ED58(&qword_1001A5C60);
    sub_100133CAC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5C68);
  }
  return result;
}

unint64_t sub_100133CAC()
{
  unint64_t result = qword_1001A5C70;
  if (!qword_1001A5C70)
  {
    sub_10002ED58(&qword_1001A5C78);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5C70);
  }
  return result;
}

ValueMetadata *_s7UnknownVMa()
{
  return &_s7UnknownVN;
}

ValueMetadata *_s9UpdatableVMa()
{
  return &_s9UpdatableVN;
}

BOOL sub_100133D30(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6 != 2) {
    return 0;
  }
  BOOL result = 0;
  switch(a3)
  {
    case 0:
      BOOL result = (a1 & 0xFD) == 0;
      break;
    case 1:
    case 3:
    case 4:
    case 5:
      BOOL result = 1;
      break;
    case 6:
      BOOL result = __PAIR128__((unint64_t)(a1 != 0) + a2 - 1, a1 - 1) < 2;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for URLOfferActionImplementation()
{
  return &type metadata for URLOfferActionImplementation;
}

unint64_t sub_100133DE0()
{
  unint64_t result = qword_1001A17A0;
  if (!qword_1001A17A0)
  {
    sub_100133E38();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A17A0);
  }
  return result;
}

unint64_t sub_100133E38()
{
  unint64_t result = qword_1001A1798;
  if (!qword_1001A1798)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001A1798);
  }
  return result;
}

uint64_t sub_100133E78@<X0>(uint64_t a1@<X8>)
{
  return sub_100030B84(a1);
}

uint64_t sub_100133E90(void **a1)
{
  return sub_100133E9C(*a1, *v1);
}

uint64_t sub_100133E9C(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)&double v6 = __chkstk_darwin(v4).n128_u64[0];
  Swift::String v8 = (char *)&v19[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v9 = objc_msgSend(a1, "isSensitive", v6);
  sub_10002EB60(&qword_1001A21A0);
  id v10 = [a1 url];
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  URL._bridgeToObjectiveC()(v11);
  Swift::String v13 = v12;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  if (v9) {
    id v14 = [a2 openSensitiveURL:v13];
  }
  else {
    id v15 = [a2 openURL:v13];
  }

  Promise<A>.init(_:)();
  uint64_t v19[3] = type metadata accessor for SyncTaskScheduler();
  uint64_t v19[4] = (uint64_t)&protocol witness table for SyncTaskScheduler;
  sub_100031A88(v19);
  SyncTaskScheduler.init()();
  type metadata accessor for ActionOutcome();
  uint64_t v16 = Promise.map<A>(on:_:)();
  swift_release();
  sub_10002ED08((uint64_t)v19);
  return v16;
}

void sub_1001340E0(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t sub_100134144(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = type metadata accessor for OSLogger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  Swift::String v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(0);
  if (qword_1001A0E70 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_10002F6AC(v10, (uint64_t)qword_1001AE398);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v15._uint64_t countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v15);
  id v21 = (char *)&type metadata for StaticString;
  v19[0] = a3;
  v19[1] = a4;
  char v20 = a5;
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_1000709E0((uint64_t)v19);
  v16._object = (void *)0x8000000100162730;
  v16._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v16);
  id v21 = (char *)&type metadata for () + 8;
  LogMessage.StringInterpolation.appendInterpolation(sensitive:)();
  sub_1000709E0((uint64_t)v19);
  v17._uint64_t countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v17);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_10013441C(uint64_t a1, void (*a2)(void, __n128), uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v24 = a1;
  uint64_t v10 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for OSLogger();
  uint64_t v12 = *(void *)(v11 - 8);
  __n128 v13 = __chkstk_darwin(v11);
  Swift::String v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2(0, v13);
  if (qword_1001A0E70 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_10002F6AC(v11, (uint64_t)qword_1001AE398);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v16, v11);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v17._uint64_t countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v17);
  uint64_t v27 = &type metadata for StaticString;
  v25[0] = a4;
  v25[1] = a5;
  char v26 = a6;
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_1000709E0((uint64_t)v25);
  v18._object = (void *)0x8000000100162730;
  v18._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v18);
  uint64_t v19 = type metadata accessor for LintedMetricsEvent();
  uint64_t v27 = (void *)v19;
  char v20 = sub_100031A88(v25);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v20, v24, v19);
  LogMessage.StringInterpolation.appendInterpolation(sensitive:)();
  sub_1000709E0((uint64_t)v25);
  v21._uint64_t countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v21);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t sub_100134734(int a1, void (*a2)(void, __n128), uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  int v22 = a1;
  uint64_t v10 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for OSLogger();
  uint64_t v12 = *(void *)(v11 - 8);
  __n128 v13 = __chkstk_darwin(v11);
  Swift::String v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2(0, v13);
  if (qword_1001A0E70 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_10002F6AC(v11, (uint64_t)qword_1001AE398);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v16, v11);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v17._uint64_t countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v17);
  uint64_t v25 = &type metadata for StaticString;
  v23[0] = a4;
  v23[1] = a5;
  char v24 = a6;
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_1000709E0((uint64_t)v23);
  v18._object = (void *)0x8000000100162730;
  v18._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v18);
  uint64_t v25 = &type metadata for Bool;
  LOBYTE(v23[0]) = v22 & 1;
  LogMessage.StringInterpolation.appendInterpolation(sensitive:)();
  sub_1000709E0((uint64_t)v23);
  v19._uint64_t countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v19);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t sub_100134B4C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  if (!a2) {
    return a3(0);
  }
  swift_errorRetain();
  a3(a2);

  return swift_errorRelease();
}

uint64_t type metadata accessor for UtilityClient()
{
  return self;
}

uint64_t sub_100134CB4()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100134CEC(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  return sub_100134144(a2, a3, a4, a5, a6);
}

uint64_t sub_100134D04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10002EB60(&qword_1001A21A0);
  id v5 = [self sharedWorkspace];
  URL._bridgeToObjectiveC()(v6);
  Swift::String v8 = v7;
  id v9 = [v5 openURL:v7];

  Promise<A>.init(_:)();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  *(void *)(v10 + 32) = "openURL(_:withReplyHandler:)";
  *(void *)(v10 + 40) = 28;
  *(unsigned char *)(v10 + 48) = 2;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  *(void *)(v11 + 32) = "openURL(_:withReplyHandler:)";
  *(void *)(v11 + 40) = 28;
  *(unsigned char *)(v11 + 48) = 2;
  unint64_t v12 = sub_10004765C();
  swift_retain_n();
  void v14[3] = v12;
  uint64_t v14[4] = &protocol witness table for OS_dispatch_queue;
  v14[0] = static OS_dispatch_queue.main.getter();
  Promise.then(perform:orCatchError:on:)();
  swift_release();
  swift_release();
  sub_10002ED08((uint64_t)v14);
  return swift_release();
}

void sub_100134EA0(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)ASDSystemAppMetadata);
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v4 initWithBundleID:v5];

  [v6 setUserInitiated:1];
  uint64_t v7 = self;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  v11[4] = sub_100135044;
  v11[5] = v8;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  void v11[2] = sub_10008EA44;
  v11[3] = &unk_10018AD00;
  id v9 = _Block_copy(v11);
  id v10 = v6;
  swift_retain();
  swift_release();
  [v7 installApp:v10 withCompletionHandler:v9];
  _Block_release(v9);
}

uint64_t sub_10013500C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100135044(uint64_t a1, uint64_t a2)
{
  return sub_100134B4C(a1, a2, *(uint64_t (**)(uint64_t))(v2 + 16));
}

uint64_t sub_10013504C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10013505C()
{
  return swift_release();
}

uint64_t sub_100135064()
{
  swift_release();

  return _swift_deallocObject(v0, 49, 7);
}

uint64_t sub_10013509C()
{
  return sub_100134144(*(void (**)(void))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
}

ValueMetadata *_s7WaitingVMa()
{
  return &_s7WaitingVN;
}

uint64_t sub_1001350C8(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, char a6)
{
  switch(a3)
  {
    case 1:
      uint64_t result = a1 & (a6 == 0);
      break;
    case 2:
    case 5:
      if (a6) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = (a4 & 0xFD) == 0;
      }
      break;
    case 3:
    case 4:
      uint64_t result = a6 == 0;
      break;
    case 6:
      BOOL v7 = (a4 & 0xFE) == 0;
      if (a6) {
        BOOL v7 = 0;
      }
      if (a1 ^ 2 | a2) {
        BOOL v8 = 0;
      }
      else {
        BOOL v8 = a6 == 0;
      }
      if (a1 | a2) {
        uint64_t result = v8;
      }
      else {
        uint64_t result = v7;
      }
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

void *sub_100135184()
{
  uint64_t v1 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  NSString v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v6);
  v0[2] = sub_100063A04((uint64_t)&_swiftEmptyArrayStorage);
  v9[0] = sub_10004765C();
  sub_10002EB60(&qword_1001A2908);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_10014CED0;
  static OS_dispatch_queue.Attributes.concurrent.getter();
  v9[1] = v7;
  sub_100131B58((unint64_t *)&qword_1001A3370, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10002EB60(&qword_1001A2910);
  sub_10008A3A0((unint64_t *)&qword_1001A3380, &qword_1001A2910);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v2);
  static DispatchQoS.unspecified.getter();
  v0[3] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  sub_10002EB60(&qword_1001A2900);
  swift_allocObject();
  v0[4] = SyncEvent.init()();
  return v0;
}

uint64_t sub_100135470@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  swift_beginAccess();
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(void *)(v6 + 16))
  {
    id v7 = a2;
    unint64_t v8 = sub_10003A9B4((uint64_t)v7);
    if (v9)
    {
      uint64_t v10 = *(void *)(v6 + 56) + 24 * v8;
      uint64_t v11 = *(void *)v10;
      uint64_t v12 = *(void *)(v10 + 8);
      char v13 = *(unsigned char *)(v10 + 16);
      sub_100042814(*(void *)v10, v12, v13);
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      char v13 = -1;
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    char v13 = -1;
  }
  *(void *)a3 = v11;
  *(void *)(a3 + 8) = v12;
  *(unsigned char *)(a3 + 16) = v13;
  return swift_endAccess();
}

uint64_t sub_100135540(void *a1, int a2)
{
  uint64_t v3 = v2;
  int v19 = a2;
  Swift::String v18 = a1;
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v4 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v2 + 24);
  sub_10002EB60(&qword_1001A2880);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_10014CED0;
  static DispatchWorkItemFlags.barrier.getter();
  aBlock[0] = v11;
  sub_100131B58((unint64_t *)&qword_1001A2888, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10002EB60((uint64_t *)&unk_1001A31A0);
  sub_10008A3A0((unint64_t *)&qword_1001A2890, (uint64_t *)&unk_1001A31A0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v12 = swift_allocObject();
  char v13 = v18;
  *(void *)(v12 + 16) = v3;
  *(void *)(v12 + 24) = v13;
  *(unsigned char *)(v12 + 32) = v19;
  aBlock[4] = sub_100135EA4;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000C1A88;
  aBlock[3] = &unk_10018AE88;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  id v15 = v13;
  static DispatchQoS.unspecified.getter();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v20);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_release();
  return 1;
}

uint64_t sub_100135850(uint64_t a1, void *a2, unsigned __int8 a3)
{
  uint64_t v5 = a3;
  swift_beginAccess();
  id v6 = a2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0x8000000000000000;
  sub_10003F4F0(v5, 0, 0, v6, isUniquelyReferenced_nonNull_native);
  *(void *)(a1 + 16) = v9;

  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t sub_1001358F8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v17 = a1;
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v3 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[1] = *(void *)(v1 + 24);
  sub_10002EB60(&qword_1001A2880);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_10014CED0;
  static DispatchWorkItemFlags.barrier.getter();
  aBlock[0] = v10;
  sub_100131B58((unint64_t *)&qword_1001A2888, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10002EB60((uint64_t *)&unk_1001A31A0);
  sub_10008A3A0((unint64_t *)&qword_1001A2890, (uint64_t *)&unk_1001A31A0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = v17;
  *(void *)(v11 + 16) = v2;
  *(void *)(v11 + 24) = v12;
  aBlock[4] = sub_100135E30;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000C1A88;
  aBlock[3] = &unk_10018AE38;
  char v13 = _Block_copy(aBlock);
  swift_retain();
  id v14 = v12;
  static DispatchQoS.unspecified.getter();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v18);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_release();
  return 1;
}

uint64_t sub_100135BFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 16);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_10003A9B4(a2);
  LOBYTE(a2) = v5;
  swift_bridgeObjectRelease();
  if (a2)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v7 = *v3;
    uint64_t v13 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1000402A4();
      uint64_t v7 = v13;
    }

    uint64_t v8 = *(void *)(v7 + 56) + 24 * v4;
    uint64_t v9 = *(void *)v8;
    uint64_t v10 = *(void *)(v8 + 8);
    char v11 = *(unsigned char *)(v8 + 16);
    sub_10003E678(v4, v7);
    *uint64_t v3 = v7;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    char v11 = -1;
  }
  swift_endAccess();
  return sub_100067F10(v9, v10, v11);
}

uint64_t sub_100135D08()
{
  swift_bridgeObjectRelease();

  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for WaitingAppStateDataSource()
{
  return self;
}

{
  return type metadata accessor for WaitingAppStateDataSource();
}

uint64_t sub_100135D74()
{
  return swift_retain();
}

uint64_t sub_100135D7C()
{
  sub_10002EB60(&qword_1001A3EE8);
  OS_dispatch_queue.sync<A>(execute:)();
  return v1;
}

uint64_t sub_100135DF0(void *a1, int a2)
{
  return 1;
}

uint64_t sub_100135E0C(void *a1)
{
  return 1;
}

uint64_t sub_100135E28()
{
  return sub_100135E58(32);
}

uint64_t sub_100135E30()
{
  return sub_100135BFC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100135E38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100135E48()
{
  return swift_release();
}

uint64_t sub_100135E50()
{
  return sub_100135E58(33);
}

uint64_t sub_100135E58(uint64_t a1)
{
  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_100135EA4()
{
  return sub_100135850(*(void *)(v0 + 16), *(void **)(v0 + 24), *(unsigned char *)(v0 + 32));
}

uint64_t sub_100135EB0@<X0>(uint64_t a1@<X8>)
{
  return sub_100135470(*(void *)(v1 + 16), *(void **)(v1 + 24), a1);
}

uint64_t *sub_100135ED4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for ActionMetrics();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    char v11 = *(void **)v10;
    uint64_t v12 = (void *)*((void *)v10 + 1);
    char v13 = v10[16];
    sub_100135FC8(*(void **)v10, v12, v13);
    *(void *)uint64_t v9 = v11;
    *((void *)v9 + 1) = v12;
    unsigned char v9[16] = v13;
  }
  return a1;
}

id sub_100135FC8(void *a1, id a2, char a3)
{
  if (a3) {
    return (id)swift_bridgeObjectRetain();
  }
  else {
    return a1;
  }
}

void sub_100135FD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ActionMetrics();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = *(void **)v5;
  uint64_t v7 = *(void **)(v5 + 8);
  char v8 = *(unsigned char *)(v5 + 16);

  sub_100136054(v6, v7, v8);
}

void sub_100136054(void *a1, id a2, char a3)
{
  if (a3) {
    swift_bridgeObjectRelease();
  }
  else {
}
  }

uint64_t sub_100136064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void **)v9;
  char v11 = *(void **)(v9 + 8);
  char v12 = *(unsigned char *)(v9 + 16);
  sub_100135FC8(*(void **)v9, v11, v12);
  *(void *)uint64_t v8 = v10;
  *(void *)(v8 + 8) = v11;
  *(unsigned char *)(v8 + 16) = v12;
  return a1;
}

uint64_t sub_100136108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void **)v9;
  char v11 = *(void **)(v9 + 8);
  char v12 = *(unsigned char *)(v9 + 16);
  sub_100135FC8(*(void **)v9, v11, v12);
  char v13 = *(void **)v8;
  uint64_t v14 = *(void **)(v8 + 8);
  char v15 = *(unsigned char *)(v8 + 16);
  *(void *)uint64_t v8 = v10;
  *(void *)(v8 + 8) = v11;
  *(unsigned char *)(v8 + 16) = v12;
  sub_100136054(v13, v14, v15);
  return a1;
}

uint64_t sub_1001361B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(unsigned char *)(v8 + 16) = *(unsigned char *)(v9 + 16);
  return a1;
}

uint64_t sub_100136244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 16);
  char v11 = *(void **)v8;
  char v12 = *(void **)(v8 + 8);
  char v13 = *(unsigned char *)(v8 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(unsigned char *)(v8 + 16) = v10;
  sub_100136054(v11, v12, v13);
  return a1;
}

uint64_t sub_1001362DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001362F0);
}

uint64_t sub_1001362F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 16);
    if (v10 > 1) {
      return (v10 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_1001363B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001363C4);
}

uint64_t sub_1001363C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ActionMetrics();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20) + 16) = -(char)a2;
  }
  return result;
}

uint64_t type metadata accessor for WatchReinstallAction()
{
  uint64_t result = qword_1001A5DB0;
  if (!qword_1001A5DB0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001364D0()
{
  uint64_t result = type metadata accessor for ActionMetrics();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100136564(uint64_t a1, uint64_t a2)
{
  return sub_100136730(*(void **)a1, *(void **)(a1 + 8), *(unsigned char *)(a1 + 16), *(void **)a2, *(void **)(a2 + 8), *(unsigned char *)(a2 + 16));
}

void destroy for WatchReinstallAction.Item(uint64_t a1)
{
}

uint64_t _s19appstorecomponentsd20WatchReinstallActionV4ItemOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_100135FC8(*(void **)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for WatchReinstallAction.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_100135FC8(*(void **)a2, v4, v5);
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_100136054(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for WatchReinstallAction.Item(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  char v5 = *(void **)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_100136054(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for WatchReinstallAction.Item(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for WatchReinstallAction.Item(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10013670C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_100136714(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for WatchReinstallAction.Item()
{
  return &type metadata for WatchReinstallAction.Item;
}

uint64_t sub_100136730(void *a1, void *a2, char a3, void *a4, void *a5, char a6)
{
  if ((a3 & 1) == 0)
  {
    if ((a6 & 1) == 0)
    {
      sub_100136830();
      sub_100135FC8(a1, a2, 0);
      sub_100135FC8(a4, a5, 0);
      char v10 = static NSObject.== infix(_:_:)();
      sub_100136054(a4, a5, 0);
      sub_100136054(a1, a2, 0);
      return v10 & 1;
    }
    return 0;
  }
  if ((a6 & 1) == 0) {
    return 0;
  }
  if (a1 == a4 && a2 == a5) {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

unint64_t sub_100136830()
{
  unint64_t result = qword_1001A2120;
  if (!qword_1001A2120)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001A2120);
  }
  return result;
}

id sub_100136870()
{
  id result = [self sharedInstance];
  if (result)
  {
    unint64_t v1 = result;
    id v2 = [result getActivePairedDevice];

    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for WatchReinstallActionImplementation(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for WatchReinstallActionImplementation()
{
  return swift_release();
}

void *assignWithCopy for WatchReinstallActionImplementation(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for WatchReinstallActionImplementation(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for WatchReinstallActionImplementation()
{
  return &type metadata for WatchReinstallActionImplementation;
}

uint64_t sub_100136990()
{
  return sub_100139120((unint64_t *)&unk_1001A5DF0, (void (*)(uint64_t))type metadata accessor for WatchReinstallAction);
}

uint64_t sub_1001369D8(uint64_t a1, uint64_t a2, uint64_t (*a3)(__n128))
{
  uint64_t v78 = a2;
  uint64_t v77 = type metadata accessor for WatchReinstallAction();
  uint64_t v79 = *(void *)(v77 - 8);
  uint64_t v5 = *(void *)(v79 + 64);
  __chkstk_darwin(v77);
  uint64_t v80 = (uint64_t)v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v75 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  uint64_t v74 = (char *)v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10002EB60(&qword_1001A2450);
  __chkstk_darwin(v7 - 8);
  uint64_t v73 = (char *)v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10002EB60(&qword_1001A5E00);
  __chkstk_darwin(v9 - 8);
  char v11 = (char *)v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v71 - v13;
  uint64_t v15 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v15 - 8);
  __chkstk_darwin(v16);
  uint64_t v17 = type metadata accessor for OSLogger();
  uint64_t v81 = *(void *)(v17 - 8);
  __n128 v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v82 = (id)a3(v18);
  if (v82)
  {
    uint64_t v72 = v5;
    uint64_t v21 = a1;
    if (qword_1001A0E68 != -1) {
      swift_once();
    }
    uint64_t v22 = sub_10002F6AC(v17, (uint64_t)qword_1001AE380);
    (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v20, v22, v17);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    uint64_t v23 = *(void *)(type metadata accessor for LogMessage() - 8);
    unint64_t v24 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
    v71[1] = *(void *)(v23 + 72);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_10014CD00;
    uint64_t v26 = v25 + v24;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v27._object = (void *)0x8000000100162A70;
    v27._uint64_t countAndFlagsBits = 0xD000000000000014;
    LogMessage.StringInterpolation.appendLiteral(_:)(v27);
    uint64_t v28 = *(int *)(v77 + 20);
    v71[0] = v21;
    uint64_t v29 = v21 + v28;
    uint64_t v30 = *(void **)v29;
    NSString v31 = *(void **)(v29 + 8);
    char v32 = *(unsigned char *)(v29 + 16);
    *((void *)&v93 + 1) = &type metadata for WatchReinstallAction.Item;
    *(void *)&long long v92 = v30;
    *((void *)&v92 + 1) = v31;
    LOBYTE(v93) = v32;
    sub_100135FC8(v30, v31, v32);
    LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
    sub_100034B8C((uint64_t)&v92, &qword_1001A1C50);
    v33._uint64_t countAndFlagsBits = 0;
    v33._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v33);
    uint64_t v77 = v26;
    LogMessage.init(stringInterpolation:)();
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v34._uint64_t countAndFlagsBits = 2125423;
    v34._object = (void *)0xE300000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v34);
    id v35 = [v82 pairingID];
    if (v35)
    {
      uint64_t v36 = v35;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v37 = type metadata accessor for UUID();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v11, 0, 1, v37);
    }
    else
    {
      uint64_t v37 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v11, 1, 1, v37);
    }
    sub_100139168((uint64_t)v11, (uint64_t)v14);
    type metadata accessor for UUID();
    uint64_t v39 = *(void *)(v37 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v14, 1, v37) == 1)
    {
      sub_100034B8C((uint64_t)v14, &qword_1001A5E00);
      long long v92 = 0u;
      long long v93 = 0u;
    }
    else
    {
      *((void *)&v93 + 1) = v37;
      uint64_t v40 = sub_100031A88((uint64_t *)&v92);
      (*(void (**)(uint64_t *, char *, uint64_t))(v39 + 32))(v40, v14, v37);
    }
    LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
    sub_100034B8C((uint64_t)&v92, &qword_1001A1C50);
    v41._uint64_t countAndFlagsBits = 0;
    v41._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v41);
    LogMessage.init(stringInterpolation:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v81 + 8))(v20, v17);
    id v42 = *(void **)v29;
    uint64_t v43 = *(void **)(v29 + 8);
    if (*(unsigned char *)(v29 + 16))
    {
      sub_10002EB60(&qword_1001A5E08);
      id v44 = objc_allocWithZone((Class)ASDSystemAppMetadata);
      swift_bridgeObjectRetain();
      NSString v45 = String._bridgeToObjectiveC()();
      sub_100136054(v42, v43, 1);
      id v46 = [v44 initWithBundleID:v45];

      *(void *)&long long v92 = v46;
      uint64_t v81 = Promise.__allocating_init(value:)();
    }
    else
    {
      sub_10002EB60(&qword_1001A3390);
      type metadata accessor for ObjectGraph();
      id v47 = v42;
      inject<A, B>(_:from:)();
      sub_10002EB60((uint64_t *)&unk_1001A5E30);
      inject<A, B>(_:from:)();
      sub_10002EB60((uint64_t *)&unk_1001A32F0);
      inject<A, B>(_:from:)();
      sub_100052538((uint64_t)v88, (uint64_t)&v85);
      sub_100052538((uint64_t)&v92, (uint64_t)v84);
      sub_100052538((uint64_t)&v89, (uint64_t)v83);
      uint64_t v48 = swift_allocObject();
      sub_100031C10(&v85, v48 + 16);
      sub_100031C10(v84, v48 + 56);
      *(void *)(v48 + 96) = v47;
      sub_100031C10(v83, v48 + 104);
      sub_10002EB60(&qword_1001A5E50);
      id v49 = v47;
      uint64_t v50 = Promise.__allocating_init()();
      uint64_t v51 = type metadata accessor for TaskPriority();
      uint64_t v52 = (uint64_t)v73;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v73, 1, 1, v51);
      uint64_t v53 = (void *)swift_allocObject();
      v53[2] = 0;
      v53[3] = 0;
      v53[4] = &unk_1001A5E48;
      void v53[5] = v48;
      v53[6] = v50;
      swift_retain();
      sub_1000F6C04(v52, (uint64_t)&unk_1001A5E58, (uint64_t)v53);
      swift_release();
      unint64_t v54 = sub_10004765C();
      uint64_t v55 = v75;
      uint64_t v56 = v74;
      uint64_t v57 = v76;
      (*(void (**)(char *, void, uint64_t))(v75 + 104))(v74, enum case for DispatchQoS.QoSClass.default(_:), v76);
      uint64_t v58 = static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v57);
      unint64_t v86 = v54;
      uint64_t v87 = &protocol witness table for OS_dispatch_queue;
      *(void *)&long long v85 = v58;
      sub_10002EB60(&qword_1001A5E68);
      uint64_t v81 = Promise.map<A>(on:_:)();
      swift_release();
      sub_100136054(v42, v43, 0);
      sub_10002ED08((uint64_t)v88);
      sub_10002ED08((uint64_t)&v89);
      sub_10002ED08((uint64_t)&v92);
      sub_10002ED08((uint64_t)&v85);
    }
    sub_10002EB60((uint64_t *)&unk_1001A5E10);
    type metadata accessor for ObjectGraph();
    inject<A, B>(_:from:)();
    uint64_t v59 = v71[0];
    uint64_t v60 = v80;
    sub_1001391D0(v71[0], v80);
    sub_100052538((uint64_t)&v92, (uint64_t)&v89);
    unint64_t v61 = (*(unsigned __int8 *)(v79 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80);
    unint64_t v62 = (v72 + v61 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v63 = swift_allocObject();
    sub_100139358(v60, v63 + v61);
    id v64 = v82;
    *(void *)(v63 + v62) = v82;
    sub_100031C10(&v89, v63 + ((v62 + 15) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v65 = type metadata accessor for SyncTaskScheduler();
    uint64_t v90 = v65;
    char v91 = &protocol witness table for SyncTaskScheduler;
    sub_100031A88((uint64_t *)&v89);
    id v66 = v64;
    SyncTaskScheduler.init()();
    sub_10002EB60(&qword_1001A2D40);
    sub_100139464();
    Promise.flatMap<A>(on:_:)();
    swift_release();
    sub_10002ED08((uint64_t)&v89);
    sub_1001391D0(v59, v60);
    uint64_t v67 = swift_allocObject();
    sub_100139358(v60, v67 + v61);
    *(void *)(v67 + v62) = v66;
    sub_1001391D0(v59, v60);
    uint64_t v68 = swift_allocObject();
    sub_100139358(v60, v68 + v61);
    *(void *)(v68 + v62) = v66;
    uint64_t v90 = v65;
    char v91 = &protocol witness table for SyncTaskScheduler;
    sub_100031A88((uint64_t *)&v89);
    id v69 = v66;
    SyncTaskScheduler.init()();
    Promise.then(perform:orCatchError:on:)();
    swift_release();
    swift_release();
    sub_10002ED08((uint64_t)&v89);
    uint64_t v90 = v65;
    char v91 = &protocol witness table for SyncTaskScheduler;
    sub_100031A88((uint64_t *)&v89);
    SyncTaskScheduler.init()();
    type metadata accessor for ActionOutcome();
    uint64_t v38 = Promise.map<A>(on:_:)();
    swift_release();

    swift_release();
    sub_10002ED08((uint64_t)&v89);
    sub_10002ED08((uint64_t)&v92);
  }
  else
  {
    sub_10002EB60((uint64_t *)&unk_1001A21F0);
    type metadata accessor for ASCAppOfferActionError(0);
    *(void *)&long long v89 = 5;
    sub_100061044((uint64_t)_swiftEmptyArrayStorage);
    sub_100139120((unint64_t *)&qword_1001A1300, type metadata accessor for ASCAppOfferActionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    return Promise.__allocating_init(error:)();
  }
  return v38;
}

uint64_t sub_1001376F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5[5] = a4;
  void v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  _OWORD v5[2] = a1;
  sub_10002EB60(&qword_1001A19C0);
  v5[7] = swift_task_alloc();
  return _swift_task_switch(sub_100137790, 0, 0);
}

uint64_t sub_100137790()
{
  id v2 = (void *)v0[4];
  unint64_t v1 = (void *)v0[5];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v3[3];
  uint64_t v5 = v3[4];
  sub_10002EC6C(v3, v4);
  sub_10002EC6C(v2, v2[3]);
  dispatch thunk of AccountProvider.activeAccount.getter();
  sub_10002EB60((uint64_t *)&unk_1001A25E0);
  type metadata accessor for AdamID();
  uint64_t v6 = swift_allocObject();
  v0[8] = v6;
  *(_OWORD *)(v6 + 16) = xmmword_10014CED0;
  [v1 int64value];
  AdamID.init(value:)();
  uint64_t v7 = *(void *)(v5 + 8);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[9] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1001379B0;
  uint64_t v9 = v0[6];
  uint64_t v10 = v0[7];
  return dispatch thunk of PurchaseHistory.fetchApps(of:withIDs:compatibleWith:)(v10, v6, v9, v4, v7);
}

uint64_t sub_1001379B0(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[10] = v1;
  swift_task_dealloc();
  uint64_t v5 = v4[7];
  if (v1)
  {
    sub_100034B8C(v5, &qword_1001A19C0);
    swift_bridgeObjectRelease();
    uint64_t v6 = sub_100137B9C;
  }
  else
  {
    v4[11] = a1;
    sub_100034B8C(v5, &qword_1001A19C0);
    swift_bridgeObjectRelease();
    uint64_t v6 = sub_100137B2C;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_100137B2C()
{
  **(void **)(v0 + 16) = *(void *)(v0 + 88);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100137B9C()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_100137C00(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (!((unint64_t)*a1 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    type metadata accessor for ASCAppOfferActionError(0);
    sub_100061044((uint64_t)_swiftEmptyArrayStorage);
    sub_100139120((unint64_t *)&qword_1001A1300, type metadata accessor for ASCAppOfferActionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    return;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_10;
  }
LABEL_3:
  if ((v3 & 0xC000000000000001) != 0)
  {
    id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v5 = *(id *)(v3 + 32);
  }
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  id v7 = [objc_allocWithZone((Class)MIStoreMetadata) init];
  NSString v8 = [v6 redownloadParams];
  if (!v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v7 setRedownloadParams:v8];

  id v9 = [objc_allocWithZone((Class)ASDWatchAppMetadata) initWithStoreMetadata:v7];
  *a2 = v9;
}

uint64_t sub_100137DDC(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v49 = a4;
  id v47 = a3;
  v46[0] = a2;
  uint64_t v5 = sub_10002EB60(&qword_1001A2450);
  __chkstk_darwin(v5 - 8);
  uint64_t v50 = (char *)v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10002EB60(&qword_1001A5E00);
  __chkstk_darwin(v7 - 8);
  id v9 = (char *)v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v46 - v11;
  uint64_t v13 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v13 - 8);
  __chkstk_darwin(v14);
  uint64_t v15 = type metadata accessor for OSLogger();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  __n128 v18 = (char *)v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = *a1;
  if (qword_1001A0E68 != -1) {
    swift_once();
  }
  uint64_t v19 = sub_10002F6AC(v15, (uint64_t)qword_1001AE380);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v19, v15);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  uint64_t v20 = *(void *)(type metadata accessor for LogMessage() - 8);
  unint64_t v21 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  v46[1] = *(void *)(v20 + 72);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_10014CD00;
  unint64_t v23 = v22 + v21;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v24._object = (void *)0x8000000100162A90;
  v24._uint64_t countAndFlagsBits = 0xD000000000000013;
  LogMessage.StringInterpolation.appendLiteral(_:)(v24);
  uint64_t v25 = v46[0] + *(int *)(type metadata accessor for WatchReinstallAction() + 20);
  uint64_t v26 = *(void **)v25;
  Swift::String v27 = *(void **)(v25 + 8);
  char v28 = *(unsigned char *)(v25 + 16);
  *((void *)&v52 + 1) = &type metadata for WatchReinstallAction.Item;
  *(void *)&long long v51 = v26;
  *((void *)&v51 + 1) = v27;
  LOBYTE(v52) = v28;
  sub_100135FC8(v26, v27, v28);
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_100034B8C((uint64_t)&v51, &qword_1001A1C50);
  v29._uint64_t countAndFlagsBits = 0;
  v29._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v29);
  v46[0] = v23;
  LogMessage.init(stringInterpolation:)();
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v30._uint64_t countAndFlagsBits = 2125423;
  v30._object = (void *)0xE300000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v30);
  id v31 = v47;
  id v32 = [v47 pairingID];
  if (v32)
  {
    Swift::String v33 = v32;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v34 = type metadata accessor for UUID();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v9, 0, 1, v34);
  }
  else
  {
    uint64_t v34 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v9, 1, 1, v34);
  }
  sub_100139168((uint64_t)v9, (uint64_t)v12);
  type metadata accessor for UUID();
  uint64_t v35 = *(void *)(v34 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v12, 1, v34) == 1)
  {
    sub_100034B8C((uint64_t)v12, &qword_1001A5E00);
    long long v51 = 0u;
    long long v52 = 0u;
  }
  else
  {
    *((void *)&v52 + 1) = v34;
    uint64_t v36 = sub_100031A88((uint64_t *)&v51);
    (*(void (**)(uint64_t *, char *, uint64_t))(v35 + 32))(v36, v12, v34);
  }
  uint64_t v37 = v31;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_100034B8C((uint64_t)&v51, &qword_1001A1C50);
  v38._uint64_t countAndFlagsBits = 0;
  v38._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v38);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  sub_100052538(v49, (uint64_t)&v51);
  uint64_t v39 = swift_allocObject();
  sub_100031C10(&v51, v39 + 16);
  *(void *)(v39 + 56) = v48;
  *(void *)(v39 + 64) = v37;
  sub_10002EB60(&qword_1001A2D40);
  swift_unknownObjectRetain();
  id v40 = v37;
  uint64_t v41 = Promise.__allocating_init()();
  uint64_t v42 = type metadata accessor for TaskPriority();
  uint64_t v43 = (uint64_t)v50;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v50, 1, 1, v42);
  id v44 = (void *)swift_allocObject();
  v44[2] = 0;
  void v44[3] = 0;
  v44[4] = &unk_1001A5E78;
  v44[5] = v39;
  v44[6] = v41;
  swift_retain();
  sub_1000F6C04(v43, (uint64_t)&unk_1001A5E80, (uint64_t)v44);
  swift_release();
  return v41;
}

uint64_t sub_100138430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  uint64_t v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return _swift_task_switch(sub_100138454, 0, 0);
}

uint64_t sub_100138454()
{
  uint64_t v1 = (void *)v0[3];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_10002EC6C(v1, v2);
  id v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 16) + **(int **)(v3 + 16));
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100138560;
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[2];
  return v9(v7, v5, v6, v2, v3);
}

uint64_t sub_100138560()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100138654(uint64_t a1, uint64_t a2, void *a3)
{
  v31[0] = a3;
  uint64_t v4 = sub_10002EB60(&qword_1001A5E00);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v9 = (char *)v31 - v8;
  uint64_t v10 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v10 - 8);
  __chkstk_darwin(v11);
  uint64_t v12 = type metadata accessor for OSLogger();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0E68 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_10002F6AC(v12, (uint64_t)qword_1001AE380);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v16, v12);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  v31[1] = *(id *)(*(void *)(type metadata accessor for LogMessage() - 8) + 72);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CD00;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v17._uint64_t countAndFlagsBits = 0x6C6174736E696552;
  v17._object = (void *)0xEA0000000000206CLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v17);
  uint64_t v18 = a2 + *(int *)(type metadata accessor for WatchReinstallAction() + 20);
  uint64_t v19 = *(void **)v18;
  uint64_t v20 = *(void **)(v18 + 8);
  char v21 = *(unsigned char *)(v18 + 16);
  *((void *)&v33 + 1) = &type metadata for WatchReinstallAction.Item;
  *(void *)&long long v32 = v19;
  *((void *)&v32 + 1) = v20;
  LOBYTE(v33) = v21;
  sub_100135FC8(v19, v20, v21);
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_100034B8C((uint64_t)&v32, &qword_1001A1C50);
  v22._uint64_t countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v22);
  LogMessage.init(stringInterpolation:)();
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v23._uint64_t countAndFlagsBits = 2125423;
  v23._object = (void *)0xE300000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v23);
  id v24 = [v31[0] pairingID];
  if (v24)
  {
    uint64_t v25 = v24;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v26 = type metadata accessor for UUID();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v6, 0, 1, v26);
  }
  else
  {
    uint64_t v26 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v6, 1, 1, v26);
  }
  sub_100139168((uint64_t)v6, (uint64_t)v9);
  type metadata accessor for UUID();
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v9, 1, v26) == 1)
  {
    sub_100034B8C((uint64_t)v9, &qword_1001A5E00);
    long long v32 = 0u;
    long long v33 = 0u;
  }
  else
  {
    *((void *)&v33 + 1) = v26;
    char v28 = sub_100031A88((uint64_t *)&v32);
    (*(void (**)(uint64_t *, char *, uint64_t))(v27 + 32))(v28, v9, v26);
  }
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_100034B8C((uint64_t)&v32, &qword_1001A1C50);
  v29._uint64_t countAndFlagsBits = 0x6174732073616820;
  v29._object = (void *)0xEC00000064657472;
  LogMessage.StringInterpolation.appendLiteral(_:)(v29);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_100138B4C(uint64_t a1, uint64_t a2, void *a3)
{
  id v38 = a3;
  uint64_t v41 = a1;
  uint64_t v4 = sub_10002EB60(&qword_1001A5E00);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v9 = (char *)&v38 - v8;
  uint64_t v10 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v10 - 8);
  __chkstk_darwin(v11);
  __chkstk_darwin(v12);
  uint64_t v13 = type metadata accessor for OSLogger();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0E68 != -1) {
    swift_once();
  }
  uint64_t v17 = sub_10002F6AC(v13, (uint64_t)qword_1001AE380);
  uint64_t v39 = v16;
  uint64_t v40 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v17, v13);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014E610;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v18._uint64_t countAndFlagsBits = 0x6C6174736E696552;
  v18._object = (void *)0xEA0000000000206CLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v18);
  uint64_t v19 = a2 + *(int *)(type metadata accessor for WatchReinstallAction() + 20);
  uint64_t v20 = *(void **)v19;
  char v21 = *(void **)(v19 + 8);
  char v22 = *(unsigned char *)(v19 + 16);
  *((void *)&v45 + 1) = &type metadata for WatchReinstallAction.Item;
  *(void *)&long long v44 = v20;
  *((void *)&v44 + 1) = v21;
  LOBYTE(v45) = v22;
  sub_100135FC8(v20, v21, v22);
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_100034B8C((uint64_t)&v44, &qword_1001A1C50);
  v23._uint64_t countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v23);
  LogMessage.init(stringInterpolation:)();
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v24._uint64_t countAndFlagsBits = 2125423;
  v24._object = (void *)0xE300000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v24);
  id v25 = [v38 pairingID];
  if (v25)
  {
    uint64_t v26 = v25;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v27 = type metadata accessor for UUID();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v6, 0, 1, v27);
  }
  else
  {
    uint64_t v27 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v6, 1, 1, v27);
  }
  sub_100139168((uint64_t)v6, (uint64_t)v9);
  type metadata accessor for UUID();
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v9, 1, v27) == 1)
  {
    sub_100034B8C((uint64_t)v9, &qword_1001A5E00);
    long long v44 = 0u;
    long long v45 = 0u;
  }
  else
  {
    *((void *)&v45 + 1) = v27;
    Swift::String v29 = sub_100031A88((uint64_t *)&v44);
    (*(void (**)(uint64_t *, char *, uint64_t))(v28 + 32))(v29, v9, v27);
  }
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_100034B8C((uint64_t)&v44, &qword_1001A1C50);
  v30._uint64_t countAndFlagsBits = 0x2C64656C69616620;
  v30._object = (void *)0xE800000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v30);
  LogMessage.init(stringInterpolation:)();
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v31._uint64_t countAndFlagsBits = 0x203A6E6F73616572;
  v31._object = (void *)0xE800000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v31);
  swift_getErrorValue();
  uint64_t v32 = v42;
  uint64_t v33 = v43;
  *((void *)&v45 + 1) = v43;
  uint64_t v34 = sub_100031A88((uint64_t *)&v44);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16))(v34, v32, v33);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)&v44, &qword_1001A1C50);
  v35._uint64_t countAndFlagsBits = 0;
  v35._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v35);
  LogMessage.init(stringInterpolation:)();
  uint64_t v36 = v39;
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v36, v13);
}

uint64_t sub_100139118(uint64_t a1, uint64_t a2)
{
  return sub_1001369D8(a1, a2, *v2);
}

uint64_t sub_100139120(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100139168(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A5E00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001391D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WatchReinstallAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100139234()
{
  uint64_t v1 = (int *)(type metadata accessor for WatchReinstallAction() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = v0 + v3;
  uint64_t v8 = type metadata accessor for ActionMetrics();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  sub_100136054(*(void **)(v7 + v1[7]), *(id *)(v7 + v1[7] + 8), *(unsigned char *)(v7 + v1[7] + 16));

  sub_10002ED08(v0 + v6);

  return _swift_deallocObject(v0, v6 + 40, v4);
}

uint64_t sub_100139358(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WatchReinstallAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001393BC(uint64_t *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for WatchReinstallAction() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = *(void **)(v1 + v5);

  return sub_100137DDC(a1, v1 + v4, v6, v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8));
}

unint64_t sub_100139464()
{
  unint64_t result = qword_1001A5E20;
  if (!qword_1001A5E20)
  {
    sub_10002ED58(&qword_1001A2D40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5E20);
  }
  return result;
}

uint64_t sub_1001394C4(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for WatchReinstallAction() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = *(void **)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100138654(a1, v1 + v4, v5);
}

uint64_t sub_100139564()
{
  uint64_t v1 = (int *)(type metadata accessor for WatchReinstallAction() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for ActionMetrics();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  sub_100136054(*(void **)(v6 + v1[7]), *(id *)(v6 + v1[7] + 8), *(unsigned char *)(v6 + v1[7] + 16));

  return _swift_deallocObject(v0, v5 + 8, v4);
}

uint64_t sub_100139670(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for WatchReinstallAction() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = *(void **)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100138B4C(a1, v1 + v4, v5);
}

uint64_t sub_10013970C()
{
  sub_10002ED08(v0 + 16);
  sub_10002ED08(v0 + 56);

  sub_10002ED08(v0 + 104);

  return _swift_deallocObject(v0, 144, 7);
}

uint64_t sub_10013975C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 96);
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *unint64_t v5 = v2;
  v5[1] = sub_100053090;
  return sub_1001376F4(a1, v1 + 16, v1 + 56, v4, v1 + 104);
}

uint64_t sub_100139828(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  id v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *id v9 = v2;
  v9[1] = sub_100053090;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t))((char *)&dword_1001A4A60
                                                                                   + dword_1001A4A60);
  return v10(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100139904()
{
  sub_10002ED08(v0 + 16);
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10013994C(uint64_t a1)
{
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v1 + 56);
  *(void *)(v2 + 16) = v4;
  *(void *)uint64_t v4 = v2;
  *(void *)(v4 + 8) = sub_10002F874;
  *(_OWORD *)(v4 + 32) = v5;
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = v1 + 16;
  return _swift_task_switch(sub_100138454, 0, 0);
}

uint64_t sub_100139A10(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  id v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *id v9 = v2;
  v9[1] = sub_10002F874;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t))((char *)&dword_1001A4A68
                                                                                   + dword_1001A4A68);
  return v10(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100139AF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_100042EA8((_OWORD *)a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10003EBAC(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_100034B8C(a1, &qword_1001A1C50);
    sub_10003B328(a2, a3, v9);
    swift_bridgeObjectRelease();
    return sub_100034B8C((uint64_t)v9, &qword_1001A1C50);
  }
}

void sub_100139BC8(uint64_t a1, void *a2)
{
}

void sub_100139BD0(uint64_t a1, void *a2)
{
}

void sub_100139BD8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_100139C44(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  id v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100139D0C()
{
  uint64_t v0 = type metadata accessor for OSLogger.Subsystem();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OSLogger();
  sub_10002F648(v4, qword_1001AE430);
  sub_10002F6AC(v4, (uint64_t)qword_1001AE430);
  if (qword_1001A0E58 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_10002F6AC(v0, (uint64_t)qword_1001AE350);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return OSLogger.init(subsystem:category:)();
}

uint64_t sub_100139E60(void *a1, uint64_t a2, void (*a3)(void, void, void, void))
{
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v6 - 8);
  v137 = (char *)v113 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OSLogger();
  uint64_t v139 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  long long v138 = (char *)v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for MetricsEventType();
  uint64_t v128 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  v127 = (char *)v113 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for String.Encoding();
  uint64_t v130 = *(void *)(v12 - 8);
  int64_t v131 = (void (*)(char *, unint64_t, uint64_t))v12;
  __chkstk_darwin(v12);
  unint64_t v129 = (unint64_t)v113 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = type metadata accessor for URLQueryItem();
  uint64_t v135 = *(void *)(v140 - 8);
  __chkstk_darwin(v140);
  v132 = (char *)v113 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v133 = (char *)v113 - v16;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)v113 - v18;
  uint64_t v20 = sub_10002EB60(&qword_1001A2588);
  __chkstk_darwin(v20 - 8);
  uint64_t v125 = (char *)v113 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  unint64_t v134 = (void (*)(uint64_t, uint64_t))((char *)v113 - v23);
  uint64_t v24 = sub_10002EB60((uint64_t *)&unk_1001A5F30);
  __chkstk_darwin(v24 - 8);
  uint64_t v26 = (char *)v113 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for URLComponents();
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  Swift::String v30 = (char *)v113 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = a2;
  uint64_t v32 = v31;
  URLComponents.init(url:resolvingAgainstBaseURL:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v32) == 1)
  {
    sub_100034B8C((uint64_t)v26, (uint64_t *)&unk_1001A5F30);
    uint64_t v33 = a3;
LABEL_20:
    uint64_t v53 = a1;
LABEL_21:
    swift_bridgeObjectRelease();
    unint64_t v54 = 0;
    uint64_t v135 = 0;
    uint64_t v55 = 0;
    goto LABEL_22;
  }
  uint64_t v121 = v10;
  uint64_t v123 = v28;
  uint64_t v124 = v8;
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v30, v26, v32);
  unint64_t v126 = v30;
  uint64_t v34 = URLComponents.queryItems.getter();
  uint64_t v33 = a3;
  uint64_t v35 = v140;
  if (!v34)
  {
LABEL_19:
    (*(void (**)(char *, uint64_t))(v123 + 8))(v126, v32);
    uint64_t v8 = v124;
    goto LABEL_20;
  }
  uint64_t v122 = a1;
  uint64_t v36 = *(void *)(v34 + 16);
  if (v36)
  {
    uint64_t v119 = v33;
    uint64_t v120 = v32;
    uint64_t v37 = *(void (**)(char *, unint64_t, uint64_t))(v135 + 16);
    unint64_t v38 = v34 + ((*(unsigned __int8 *)(v135 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v135 + 80));
    uint64_t v39 = (void (**)(char *, uint64_t))(v135 + 8);
    uint64_t v40 = *(void *)(v135 + 72);
    uint64_t v118 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v34;
    swift_bridgeObjectRetain();
    while (1)
    {
      v37(v19, v38, v35);
      if (URLQueryItem.name.getter() == 0x7363697274656DLL && v41 == 0xE700000000000000)
      {
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
      char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v42) {
        break;
      }
      uint64_t v35 = v140;
      (*v39)(v19, v140);
      v38 += v40;
      if (!--v36)
      {
        swift_bridgeObjectRelease();
        uint64_t v33 = v119;
        uint64_t v32 = v120;
        goto LABEL_11;
      }
    }
    uint64_t v35 = v140;
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v43 = (void *)v135;
    uint64_t v44 = (uint64_t)v134;
    (*(void (**)(void))(v135 + 32))();
    long long v45 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v43[7];
    v45(v44, 0, 1, v35);
    uint64_t v33 = v119;
    uint64_t v32 = v120;
  }
  else
  {
LABEL_11:
    uint64_t v44 = (uint64_t)v134;
    uint64_t v43 = (void *)v135;
    long long v45 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v135 + 56);
    v45((uint64_t)v134, 1, 1, v35);
  }
  a1 = v122;
  swift_bridgeObjectRelease();
  id v46 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v43[6];
  if (v46(v44, 1, v35) == 1)
  {
    sub_100034B8C(v44, &qword_1001A2588);
    goto LABEL_19;
  }
  uint64_t v118 = v46;
  uint64_t v119 = v45;
  URLQueryItem.value.getter();
  uint64_t v48 = v47;
  unint64_t v134 = (void (*)(uint64_t, uint64_t))v43[1];
  int64_t v117 = v43 + 1;
  v134(v44, v35);
  if (!v48) {
    goto LABEL_19;
  }
  unint64_t v49 = v129;
  static String.Encoding.utf8.getter();
  uint64_t v50 = String.data(using:allowLossyConversion:)();
  unint64_t v52 = v51;
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, void (*)(char *, unint64_t, uint64_t)))(v130 + 8))(v49, v131);
  if (v52 >> 60 == 15) {
    goto LABEL_19;
  }
  uint64_t v120 = v32;
  uint64_t v77 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&long long v143 = 0;
  id v79 = [v77 JSONObjectWithData:isa options:0 error:&v143];

  if (!v79)
  {
    id v101 = (id)v143;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_1000E3038(v50, v52);
    uint64_t v53 = v122;
    swift_errorRelease();
    uint64_t v102 = v120;
    uint64_t v103 = v123;
    uint64_t v104 = v126;
LABEL_61:
    (*(void (**)(char *, uint64_t))(v103 + 8))(v104, v102);
    uint64_t v8 = v124;
    goto LABEL_21;
  }
  id v80 = (id)v143;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  uint64_t v81 = sub_10002EB60(&qword_1001A5F40);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_1000E3038(v50, v52);
    uint64_t v102 = v120;
    uint64_t v103 = v123;
    uint64_t v104 = v126;
    uint64_t v53 = a1;
    goto LABEL_61;
  }
  uint64_t v114 = *(void *)&v142[0];
  uint64_t v115 = v81;
  uint64_t v82 = URLComponents.queryItems.getter();
  uint64_t v55 = v82;
  unint64_t v129 = v52;
  uint64_t v116 = v50;
  if (!v82)
  {
    uint64_t v135 = 0;
    goto LABEL_68;
  }
  uint64_t v83 = *(void *)(v82 + 16);
  if (!v83)
  {
    uint64_t v100 = 1;
    uint64_t v99 = (uint64_t)v125;
    goto LABEL_65;
  }
  uint64_t v84 = v35;
  long long v85 = *(void (**)(char *, unint64_t, uint64_t))(v135 + 16);
  unint64_t v86 = v82 + ((*(unsigned __int8 *)(v135 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v135 + 80));
  uint64_t v130 = *(void *)(v135 + 72);
  int64_t v131 = v85;
  v113[1] = v82;
  swift_bridgeObjectRetain();
  uint64_t v87 = v133;
  do
  {
    v131(v87, v86, v84);
    if (URLQueryItem.name.getter() == 0x6369706F74 && v90 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      char v91 = v132;
      v131(v132, (unint64_t)v133, v140);
    }
    else
    {
      char v92 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      char v91 = v132;
      v131(v132, (unint64_t)v133, v140);
      if ((v92 & 1) == 0) {
        goto LABEL_47;
      }
    }
    uint64_t v93 = URLQueryItem.value.getter();
    if (!v94)
    {
LABEL_47:
      unint64_t v88 = v91;
      uint64_t v84 = v140;
      long long v89 = (void (*)(char *, uint64_t))v134;
      v134((uint64_t)v88, v140);
      goto LABEL_48;
    }
    uint64_t v95 = v93;
    unint64_t v96 = v94;
    swift_bridgeObjectRelease();
    if ((v96 & 0x2000000000000000) != 0) {
      uint64_t v97 = HIBYTE(v96) & 0xF;
    }
    else {
      uint64_t v97 = v95 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v98 = v91;
    uint64_t v84 = v140;
    long long v89 = (void (*)(char *, uint64_t))v134;
    v134((uint64_t)v98, v140);
    if (v97)
    {
      swift_bridgeObjectRelease();
      uint64_t v99 = (uint64_t)v125;
      (*(void (**)(char *, char *, uint64_t))(v135 + 32))(v125, v133, v84);
      uint64_t v100 = 0;
      a1 = v122;
      uint64_t v35 = v84;
      goto LABEL_65;
    }
LABEL_48:
    uint64_t v87 = v133;
    v89(v133, v84);
    v86 += v130;
    --v83;
  }
  while (v83);
  swift_bridgeObjectRelease();
  uint64_t v100 = 1;
  a1 = v122;
  uint64_t v35 = v84;
  uint64_t v99 = (uint64_t)v125;
LABEL_65:
  v119(v99, v100, 1, v35);
  swift_bridgeObjectRelease();
  if (v118(v99, 1, v35) == 1)
  {
    sub_100034B8C(v99, &qword_1001A2588);
    uint64_t v135 = 0;
    uint64_t v55 = 0;
  }
  else
  {
    uint64_t v135 = URLQueryItem.value.getter();
    uint64_t v55 = v105;
    v134(v99, v35);
  }
LABEL_68:
  uint64_t v8 = v124;
  uint64_t v53 = a1;
  sub_10002EB60(&qword_1001A4CE0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10014E610;
  *(void *)(inited + 32) = 0x707954746E657665;
  *(void *)(inited + 40) = 0xE900000000000065;
  char v107 = v127;
  static MetricsEventType.click.getter();
  uint64_t v108 = MetricsEventType.rawValue.getter();
  uint64_t v110 = v109;
  uint64_t v111 = (*(uint64_t (**)(char *, uint64_t))(v128 + 8))(v107, v121);
  *(void *)(inited + 48) = v108;
  *(void *)(inited + 56) = v110;
  *(void *)(inited + 72) = &type metadata for String;
  strcpy((char *)(inited + 80), "widgetContext");
  *(_WORD *)(inited + 94) = -4864;
  __chkstk_darwin(v111);
  v113[-2] = &off_100184D28;
  uint64_t v112 = sub_10013C920(v114, (uint64_t (*)(uint64_t, uint64_t, unsigned char *))sub_10013C724, (uint64_t)&v113[-4]);
  swift_bridgeObjectRelease();
  *(void *)(inited + 96) = v112;
  *(void *)(inited + 120) = v115;
  *(void *)(inited + 128) = 0x7954707041666572;
  *(void *)(inited + 168) = &type metadata for String;
  *(void *)(inited + 136) = 0xEA00000000006570;
  *(void *)(inited + 144) = 0x746567646977;
  *(void *)(inited + 152) = 0xE600000000000000;
  unint64_t v54 = sub_100062F68(inited);
  sub_1000E3038(v116, v129);
  (*(void (**)(char *, uint64_t))(v123 + 8))(v126, v120);
  swift_bridgeObjectRelease();
LABEL_22:
  id v56 = [v53 integerValue];
  if (v56 == (id)1)
  {
    uint64_t v140 = v55;
    if (v54)
    {
      v144 = &type metadata for String;
      *(void *)&long long v143 = 0xD000000000000012;
      *((void *)&v143 + 1) = 0x800000010015A8B0;
      sub_100042EA8(&v143, v142);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v141 = v54;
      sub_10003EBAC(v142, 0x6449746567726174, 0xE800000000000000, isUniquelyReferenced_nonNull_native);
      unint64_t v54 = v141;
      swift_bridgeObjectRelease();
    }
    uint64_t v57 = v33;
    if (qword_1001A0EA0 != -1) {
      swift_once();
    }
    uint64_t v66 = sub_10002F6AC(v8, (uint64_t)qword_1001AE430);
    uint64_t v59 = v138;
    uint64_t v60 = v139;
    (*(void (**)(char *, uint64_t, uint64_t))(v139 + 16))(v138, v66, v8);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v67._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
    v67._object = (void *)0x8000000100162BC0;
    LogMessage.StringInterpolation.appendLiteral(_:)(v67);
    uint64_t v68 = type metadata accessor for URL();
    v144 = (void *)v68;
    id v69 = sub_100031A88((uint64_t *)&v143);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v68 - 8) + 16))(v69, v136, v68);
    LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
    sub_100034B8C((uint64_t)&v143, &qword_1001A1C50);
    v70._uint64_t countAndFlagsBits = 0;
    v70._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v70);
LABEL_32:
    LogMessage.init(stringInterpolation:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v59, v8);
    uint64_t v33 = v57;
    uint64_t v55 = v140;
    if (v54) {
      goto LABEL_37;
    }
    goto LABEL_40;
  }
  if (!v56)
  {
    uint64_t v140 = v55;
    uint64_t v57 = v33;
    if (qword_1001A0EA0 != -1) {
      swift_once();
    }
    uint64_t v58 = sub_10002F6AC(v8, (uint64_t)qword_1001AE430);
    uint64_t v59 = v138;
    uint64_t v60 = v139;
    (*(void (**)(char *, uint64_t, uint64_t))(v139 + 16))(v138, v58, v8);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v61._uint64_t countAndFlagsBits = 0xD000000000000024;
    v61._object = (void *)0x8000000100162BF0;
    LogMessage.StringInterpolation.appendLiteral(_:)(v61);
    uint64_t v62 = type metadata accessor for URL();
    v144 = (void *)v62;
    uint64_t v63 = sub_100031A88((uint64_t *)&v143);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v62 - 8) + 16))(v63, v136, v62);
    LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
    sub_100034B8C((uint64_t)&v143, &qword_1001A1C50);
    v64._uint64_t countAndFlagsBits = 0;
    v64._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v64);
    goto LABEL_32;
  }
  if (qword_1001A0EA0 != -1) {
    swift_once();
  }
  sub_10002F6AC(v8, (uint64_t)qword_1001AE430);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.init(stringLiteral:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  if (!v54)
  {
LABEL_40:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
LABEL_37:
  if (v55)
  {
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v72 = (void *)Strong;
      swift_bridgeObjectRetain();
      swift_retain();

      uint64_t v73 = (void *)swift_allocObject();
      v73[2] = v33;
      v73[3] = v54;
      v73[4] = v135;
      v73[5] = v55;
      uint64_t v74 = sub_10002EE34(0, (unint64_t *)&qword_1001A2170);
      swift_retain();
      uint64_t v75 = static OS_dispatch_queue.main.getter();
      v144 = (void *)v74;
      v145 = &protocol witness table for OS_dispatch_queue;
      *(void *)&long long v143 = v75;
      Promise.then(perform:orCatchError:on:)();
      swift_release();
      swift_release();
      sub_10002ED08((uint64_t)&v143);
      return swift_bridgeObjectRelease();
    }
    goto LABEL_40;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_10013B16C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4[2];
  if (!v4) {
    return 0;
  }
  if (a4[4] == a1 && a4[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v4 == 1) {
    return 0;
  }
  uint64_t v10 = a4 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v12 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v13 = *(v10 - 1) == a1 && *v10 == a2;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v10 += 2;
    if (v12 == v4) {
      return result;
    }
  }
  __break(1u);
  return result;
}

void sub_10013B234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v7 = (void *)Strong;
    sub_10013CA98(a3, a4);
  }
}

void sub_10013B2B8(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = a2;
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for OSLogger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0EA0 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_10002F6AC(v3, (uint64_t)qword_1001AE430);
  Swift::String v30 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v31 = v7;
  v30(v6, v7, v3);
  uint64_t v29 = sub_10002EB60((uint64_t *)&unk_1001A19E0);
  uint64_t v8 = *(void *)(type metadata accessor for LogMessage() - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v27 = v10 | 7;
  uint64_t v28 = ((v10 + 32) & ~v10) + v9;
  uint64_t v11 = swift_allocObject();
  long long v26 = xmmword_10014CED0;
  *(_OWORD *)(v11 + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v12._object = (void *)0x8000000100162B30;
  v12._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v12);
  swift_getErrorValue();
  uint64_t v13 = v33;
  uint64_t v14 = v34;
  uint64_t v36 = v34;
  uint64_t v15 = sub_100031A88(v35);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v15, v13, v14);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)v35, &qword_1001A1C50);
  v16._uint64_t countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v16);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v4 + 8);
  v17(v6, v3);
  v30(v6, v31, v3);
  *(_OWORD *)(swift_allocObject() + 16) = v26;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v18._uint64_t countAndFlagsBits = 0xD000000000000032;
  v18._object = (void *)0x8000000100162B50;
  LogMessage.StringInterpolation.appendLiteral(_:)(v18);
  uint64_t v19 = type metadata accessor for URL();
  uint64_t v36 = v19;
  uint64_t v20 = sub_100031A88(v35);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v20, v32, v19);
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_100034B8C((uint64_t)v35, &qword_1001A1C50);
  v21._uint64_t countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v21);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  v17(v6, v3);
  id v22 = [self sharedWorkspace];
  URL._bridgeToObjectiveC()(v23);
  uint64_t v25 = v24;
}

uint64_t type metadata accessor for WidgetEventListener()
{
  return self;
}

uint64_t sub_10013B8B0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_10002EB60(&qword_1001A1D50);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = result;
  uint64_t v32 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= v32) {
        return v9;
      }
      unint64_t v16 = a1[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= v32) {
          return v9;
        }
        unint64_t v16 = a1[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= v32) {
            return v9;
          }
          unint64_t v16 = a1[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= v32) {
              return v9;
            }
            unint64_t v16 = a1[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= v32) {
                  return v9;
                }
                unint64_t v16 = a1[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    Swift::String v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    sub_100042F14(*(void *)(v4 + 56) + 40 * v14, (uint64_t)v36);
    long long v33 = v36[0];
    long long v34 = v36[1];
    uint64_t v35 = v37;
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v21 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v12 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v22) & ~*(void *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v27 = v23 == v26;
        if (v23 == v26) {
          unint64_t v23 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v12 + 8 * v23);
      }
      while (v28 == -1);
      unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(void *)(v12 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    uint64_t v29 = (void *)(*(void *)(v9 + 48) + 16 * v24);
    *uint64_t v29 = v20;
    v29[1] = v19;
    uint64_t v30 = *(void *)(v9 + 56) + 40 * v24;
    *(_OWORD *)uint64_t v30 = v33;
    *(_OWORD *)(v30 + 16) = v34;
    *(void *)(v30 + 32) = v35;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v9;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10013BB78()
{
  uint64_t v0 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v0 - 8);
  uint64_t v1 = type metadata accessor for OSLogger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0EA0 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_10002F6AC(v1, (uint64_t)qword_1001AE430);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v5, v1);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v6._object = (void *)0x8000000100162C20;
  v6._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v6);
  swift_getErrorValue();
  uint64_t v7 = v12;
  uint64_t v8 = v13;
  void v14[3] = v13;
  uint64_t v9 = sub_100031A88(v14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v9, v7, v8);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)v14, &qword_1001A1C50);
  v10._uint64_t countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v10);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

void sub_10013BE40(uint64_t a1)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v39 = v4;
  uint64_t v41 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for OSLogger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0EA0 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_10002F6AC(v6, (uint64_t)qword_1001AE430);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v11._object = (void *)0x8000000100162B10;
  v11._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v11);
  id v46 = (void *)v2;
  uint64_t v12 = sub_100031A88((uint64_t *)&aBlock);
  uint64_t v37 = v3;
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v13((char *)v12, a1, v2);
  long long v34 = v13;
  uint64_t v35 = v3 + 16;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_100034B8C((uint64_t)&aBlock, &qword_1001A1C50);
  v14._uint64_t countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v14);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  id v15 = [objc_allocWithZone((Class)ASCAppLaunchTrampoline) init];
  id v38 = v15;
  URL._bridgeToObjectiveC()(v16);
  Swift::String v18 = v17;
  id v36 = [v15 handleURL:v17];

  uint64_t v19 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v20 = v41;
  v13(v41, a1, v2);
  uint64_t v21 = v37;
  uint64_t v22 = *(unsigned __int8 *)(v37 + 80);
  uint64_t v23 = (v22 + 16) & ~v22;
  uint64_t v33 = v22 | 7;
  unint64_t v24 = (v39 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v40 = v24 + 8;
  uint64_t v25 = v2;
  uint64_t v26 = swift_allocObject();
  uint64_t v39 = a1;
  BOOL v27 = *(void (**)(uint64_t, char *, uint64_t))(v21 + 32);
  v27(v26 + v23, v20, v2);
  *(void *)(v26 + v24) = v19;
  uint64_t v28 = ObjectType;
  *(void *)(v26 + ((v24 + 15) & 0xFFFFFFFFFFFFFFF8)) = ObjectType;
  uint64_t v47 = sub_10013C4D8;
  uint64_t v48 = v26;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v44 = 1107296256;
  long long v45 = sub_100139BC8;
  id v46 = &unk_10018B128;
  uint64_t v29 = _Block_copy(&aBlock);
  swift_release();
  id v30 = v36;
  [v36 addSuccessBlock:v29];
  _Block_release(v29);
  v34(v20, v39, v25);
  uint64_t v31 = swift_allocObject();
  v27(v31 + v23, v20, v25);
  *(void *)(v31 + v24) = v28;
  uint64_t v47 = sub_10013C634;
  uint64_t v48 = v31;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v44 = 1107296256;
  long long v45 = sub_100139BD0;
  id v46 = &unk_10018B178;
  uint64_t v32 = _Block_copy(&aBlock);
  swift_release();
  [v30 addErrorBlock:v32];
  _Block_release(v32);
}

uint64_t sub_10013C3F4()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10013C42C()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10013C4D8(void *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void (**)(void, void, void, void))(v1
                                                             + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100139E60(a1, v1 + v4, v5);
}

uint64_t sub_10013C580(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10013C590()
{
  return swift_release();
}

uint64_t sub_10013C598()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

void sub_10013C634(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  sub_10013B2B8(a1, v4);
}

uint64_t sub_10013C6D0()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_10013C718(uint64_t a1)
{
  sub_10013B234(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10013C724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013B16C(a1, a2, a3, *(void **)(v3 + 16));
}

uint64_t sub_10013C72C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, unsigned char *))
{
  uint64_t v22 = (unint64_t *)result;
  uint64_t v23 = 0;
  int64_t v6 = 0;
  uint64_t v7 = *(void *)(a3 + 64);
  uint64_t v25 = a3 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v7;
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v17 >= v11) {
      return sub_10013B8B0(v22, a2, v23, a3);
    }
    unint64_t v18 = *(void *)(v25 + 8 * v17);
    ++v6;
    if (!v18)
    {
      int64_t v6 = v17 + 1;
      if (v17 + 1 >= v11) {
        return sub_10013B8B0(v22, a2, v23, a3);
      }
      unint64_t v18 = *(void *)(v25 + 8 * v6);
      if (!v18)
      {
        int64_t v6 = v17 + 2;
        if (v17 + 2 >= v11) {
          return sub_10013B8B0(v22, a2, v23, a3);
        }
        unint64_t v18 = *(void *)(v25 + 8 * v6);
        if (!v18) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v10 = (v18 - 1) & v18;
    unint64_t v13 = __clz(__rbit64(v18)) + (v6 << 6);
LABEL_5:
    Swift::String v14 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v13);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    sub_100042F14(*(void *)(a3 + 56) + 40 * v13, (uint64_t)v24);
    swift_bridgeObjectRetain();
    LOBYTE(v15) = a4(v15, v16, v24);
    sub_100042F70((uint64_t)v24);
    uint64_t result = swift_bridgeObjectRelease();
    if (v15)
    {
      *(unint64_t *)((char *)v22 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v23++, 1))
      {
        __break(1u);
        return sub_10013B8B0(v22, a2, v23, a3);
      }
    }
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v11) {
    return sub_10013B8B0(v22, a2, v23, a3);
  }
  unint64_t v18 = *(void *)(v25 + 8 * v19);
  if (v18)
  {
    int64_t v6 = v19;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v6 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v6 >= v11) {
      return sub_10013B8B0(v22, a2, v23, a3);
    }
    unint64_t v18 = *(void *)(v25 + 8 * v6);
    ++v19;
    if (v18) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10013C920(uint64_t isStackAllocationSafe, uint64_t (*a2)(uint64_t, uint64_t, unsigned char *), uint64_t a3)
{
  uint64_t v6 = isStackAllocationSafe;
  char v7 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v8 = (unint64_t)((1 << v7) + 63) >> 6;
  size_t v9 = 8 * v8;
  if ((v7 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    uint64_t v10 = sub_10013C72C((uint64_t)&v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, v6, a2);
    if (v3) {
      swift_willThrow();
    }
    else {
      return v10;
    }
  }
  else
  {
    int64_t v11 = (void *)swift_slowAlloc();
    bzero(v11, v9);
    a3 = sub_10013C72C((uint64_t)v11, v8, v6, a2);
    swift_slowDealloc();
  }
  return a3;
}

uint64_t sub_10013CA98(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a2;
  uint64_t v23 = type metadata accessor for MetricsFieldsContext();
  uint64_t v2 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  char v7 = (char *)&v19 - v6;
  uint64_t v8 = type metadata accessor for MetricsData();
  uint64_t v21 = *(void *)(v8 - 8);
  uint64_t v22 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for MetricsPipeline();
  uint64_t v20 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  inject<A, B>(_:from:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  MetricsData.init(topic:shouldFlush:fields:includingFields:excludingFields:)();
  MetricsFieldsContext.init()();
  id v14 = objc_allocWithZone((Class)ASCMetricsActivity);
  id v24 = objc_msgSend(v14, "init", v19);
  if (qword_1001A0DA0 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_10002EB60(&qword_1001A50E0);
  sub_10002F6AC(v15, (uint64_t)qword_1001AE268);
  sub_10002EE34(0, (unint64_t *)&qword_1001A5470);
  MetricsFieldsContext.addingValue<A>(_:forProperty:)();

  uint64_t v16 = *(void (**)(char *, uint64_t))(v2 + 8);
  v16(v4, v23);
  MetricsPipeline.process(_:using:)();
  swift_release();
  if (qword_1001A0EA0 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for OSLogger();
  sub_10002F6AC(v17, (uint64_t)qword_1001AE430);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.init(stringLiteral:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  v16(v7, v23);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v22);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v13, v11);
}

id sub_10013CF0C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v39 = a2;
  uint64_t v7 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for OSLogger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0E60 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_10002F6AC(v8, (uint64_t)qword_1001AE368);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v13._object = (void *)0x8000000100162CE0;
  v13._uint64_t countAndFlagsBits = 0xD000000000000019;
  LogMessage.StringInterpolation.appendLiteral(_:)(v13);
  uint64_t ObjectType = &type metadata for XPCEntitledConnection;
  aBlock[0] = a3;
  id v14 = a3;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_1000709E0((uint64_t)aBlock);
  v15._uint64_t countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v15);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v16 = *(void **)(v3 + 16);
  [*(id *)(v4 + 16) lock];
  uint64_t v17 = *(char **)(v4 + 24);
  id v18 = v14;
  swift_unknownObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v4 + 24) = v17;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v17 = sub_100076988(0, *((void *)v17 + 2) + 1, 1, v17);
    *(void *)(v4 + 24) = v17;
  }
  unint64_t v21 = *((void *)v17 + 2);
  unint64_t v20 = *((void *)v17 + 3);
  if (v21 >= v20 >> 1)
  {
    uint64_t v17 = sub_100076988((char *)(v20 > 1), v21 + 1, 1, v17);
    *(void *)(v4 + 24) = v17;
  }
  *((void *)v17 + 2) = v21 + 1;
  uint64_t v22 = &v17[16 * v21];
  *((void *)v22 + 4) = v18;
  *((void *)v22 + 5) = a1;
  uint64_t v23 = &selRef_finalizeHash;
  [v16 unlock];
  [v18 setExportedInterface:v39];
  uint64_t ObjectType = (ValueMetadata *)swift_getObjectType();
  aBlock[0] = a1;
  sub_1000EC3CC((uint64_t)aBlock, (uint64_t)v44);
  uint64_t v24 = v45;
  if (v45)
  {
    uint64_t v25 = sub_10002EC6C(v44, v45);
    uint64_t v26 = *(void *)(v24 - 8);
    __chkstk_darwin(v25);
    uint64_t v28 = (char *)&v38 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v26 + 16))(v28);
    id v29 = v18;
    swift_unknownObjectRetain();
    uint64_t v30 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v24);
    uint64_t v23 = &selRef_finalizeHash;
    sub_10002ED08((uint64_t)v44);
  }
  else
  {
    id v31 = v18;
    swift_unknownObjectRetain();
    uint64_t v30 = 0;
  }
  [v18 setExportedObject:v30];
  swift_unknownObjectRelease();
  sub_1000709E0((uint64_t)aBlock);

  uint64_t v32 = swift_allocObject();
  swift_weakInit();
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = v32;
  *(void *)(v33 + 24) = a1;
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = sub_10013DA38;
  *(void *)(v34 + 24) = v33;
  char v42 = sub_10013DA78;
  uint64_t v43 = v34;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000C1A88;
  uint64_t ObjectType = (ValueMetadata *)&unk_10018B2C0;
  uint64_t v35 = _Block_copy(aBlock);
  swift_retain_n();
  id v36 = v18;
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  [v36 setInvalidationHandler:v35];
  _Block_release(v35);
  swift_release();

  swift_release_n();
  [v16 lock];
  if (swift_unknownObjectWeakLoadStrong()) {
    swift_unknownObjectRelease();
  }
  return [v16 v23[273]];
}

uint64_t sub_10013D508()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = 32;
    do
    {
      [*(id *)(v1 + v3) invalidate];
      v3 += 16;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  sub_100043174(v0 + 32);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for XPCConnectionOwner()
{
  return self;
}

ValueMetadata *type metadata accessor for XPCConnectionOwner.ActiveConnection()
{
  return &type metadata for XPCConnectionOwner.ActiveConnection;
}

uint64_t sub_10013D5D8(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void **)(result + 16);
    [v5 lock];
    sub_10013D66C(v4, a2);
    [v5 unlock];
    return swift_release();
  }
  return result;
}

void sub_10013D66C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for OSLogger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 + 24);
  unint64_t v11 = *(void *)(v10 + 16);
  if (!v11) {
    goto LABEL_11;
  }
  unint64_t v12 = 0;
  Swift::String v13 = (void *)(v10 + 40);
  while (*v13 != a2)
  {
    ++v12;
    v13 += 2;
    if (v11 == v12) {
      goto LABEL_11;
    }
  }
  if (v12 >= v11)
  {
    __break(1u);
    goto LABEL_16;
  }
  v20[5] = v2;
  uint64_t v14 = qword_1001A0E60;
  id v19 = (id)*(v13 - 1);
  if (v14 != -1) {
LABEL_16:
  }
    swift_once();
  uint64_t v15 = sub_10002F6AC(v6, (uint64_t)qword_1001AE368);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v15, v6);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v16._object = (void *)0x8000000100162D00;
  v16._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v16);
  v20[3] = &type metadata for XPCEntitledConnection;
  v20[0] = v19;
  id v19 = v19;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_1000709E0((uint64_t)v20);
  v17._uint64_t countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v17);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);

  swift_unknownObjectRelease();
  if (swift_unknownObjectWeakLoadStrong()) {
    swift_unknownObjectRelease();
  }

LABEL_11:
  if (!*(void *)(*(void *)(a1 + 24) + 16))
  {
    if (swift_unknownObjectWeakLoadStrong())
    {
      sub_1000C08B4();
      swift_unknownObjectRelease();
    }
  }
}

uint64_t sub_10013D9C0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10013D9F8()
{
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013DA38()
{
  return sub_10013D5D8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10013DA40()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013DA78()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10013DAA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10013DAB0()
{
  return swift_release();
}

uint64_t sub_10013DAB8()
{
  id v1 = [*v0 description];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

void *sub_10013DB10(void *a1)
{
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [a1 valueForEntitlement:v2];

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  sub_10011C2EC((uint64_t)v7, (uint64_t)v8);
  if (!v9)
  {

    sub_1000709E0((uint64_t)v8);
    return 0;
  }
  sub_100095A14();
  if ((swift_dynamicCast() & 1) == 0 || (unsigned int v4 = [v6 BOOLValue], v6, !v4))
  {

    return 0;
  }
  return a1;
}

ValueMetadata *type metadata accessor for XPCEntitledConnection()
{
  return &type metadata for XPCEntitledConnection;
}

void sub_10013DC30()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Could not decode ASCAdamID because stringValue was missing", v0, 2u);
}

void sub_10013DC78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013DCB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013DCF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013DD2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013DD68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013DDA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013DDE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013DE1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013DE58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013DE94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013DED0(uint64_t a1, NSObject *a2)
{
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unable to open product page, reason %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_10013DF48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013DF84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013DFC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013DFFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E0B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E0EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E1A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E1DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E2CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E3BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E3F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E4AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E4E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E59C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E5D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E68C()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT, "Current process is not eligible to use ASC", v0, 2u);
}

void sub_10013E6D4()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Could not decode ASCLockup because id was missing", v0, 2u);
}

void sub_10013E71C()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Could not decode ASCLockupKind because kind was missing", v0, 2u);
}

void sub_10013E764()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Could not decode ASCLockupFeatureAd because productRating was missing", v0, 2u);
}

void sub_10013E7AC()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Could not decode ASCLockupFeatureSignpostTags because signpostTags was missing", v0, 2u);
}

void sub_10013E7F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E86C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E8A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E8E4()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Could not decode ASCMetricsActivity because fields was missing", v0, 2u);
}

void sub_10013E92C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E9A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013E9E0(const char *a1)
{
  int v1 = 136315138;
  Name = sel_getName(a1);
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "*** Could not get +[NSURLSessionConfiguration %s], appstorecomponentsd will not attribute network traffic to App Store", (uint8_t *)&v1, 0xCu);
}

void sub_10013EA64()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG, "appstorecomponentsd will attribute network traffic to App Store", v0, 2u);
}

void sub_10013EAAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013EAE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013EB24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013EB60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013EB9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013EBD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013EC14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013EC50(uint64_t a1)
{
  int v1 = sub_100029658(a1);
  sub_100020A04();
  sub_100020A18((void *)&_mh_execute_header, &_os_log_default, v2, "%{public}s/notify_set_state failed: %{public}@", v3, v4, v5, v6, 2u);
}

void sub_10013ECE4(uint64_t a1)
{
  int v1 = sub_100029658(a1);
  sub_100020A04();
  sub_100020A18((void *)&_mh_execute_header, &_os_log_default, v2, "%{public}s/notify_get_state failed: %{public}@", v3, v4, v5, v6, 2u);
}

void sub_10013ED78(uint64_t a1)
{
  int v1 = sub_100029658(a1);
  sub_100020A04();
  sub_100020A18((void *)&_mh_execute_header, &_os_log_default, v2, "%{public}s/notify_register_dispatch failed: %{public}@", v3, v4, v5, v6, 2u);
}

void sub_10013EE0C(uint64_t a1)
{
  int v1 = sub_100029658(a1);
  sub_100020A04();
  sub_100020A18((void *)&_mh_execute_header, &_os_log_default, v2, "%{public}s/notify_cancel failed: %{public}@", v3, v4, v5, v6, 2u);
}

void sub_10013EEA0(uint64_t a1)
{
  int v1 = sub_100029658(a1);
  sub_100020A04();
  sub_100020A18((void *)&_mh_execute_header, &_os_log_default, v2, "%{public}s/notify_register_check failed: %{public}@", v3, v4, v5, v6, 2u);
}

void sub_10013EF34()
{
  int v0 = *__error();
  v1[0] = 67109120;
  v1[1] = v0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Could not initialize temporary directory, reason: %{darwin.errno}d", (uint8_t *)v1, 8u);
}

void sub_10013EFBC()
{
  *(_WORD *)int v0 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "nano-malloc is enabled for appstorecomponentsd", v0, 2u);
}

void sub_10013F004()
{
  *(_WORD *)int v0 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Could not decode ASCScreenshots because artwork was missing", v0, 2u);
}

void sub_10013F04C()
{
  *(_WORD *)int v0 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Could not decode ASCScreenshots because mediaPlatform was missing", v0, 2u);
}

void sub_10013F094(uint8_t *buf, uint64_t a2, void *a3)
{
  *(_DWORD *)buf = 138412290;
  *a3 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Discarding span without valid range range %@", buf, 0xCu);
}

void sub_10013F0E0()
{
  *(_WORD *)int v0 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Could not decode ASCSignpostPredicate because tags was missing", v0, 2u);
}

void sub_10013F128()
{
  *(_WORD *)int v0 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Could not decode ASCSignpostPredicate because dateRanges was missing", v0, 2u);
}

void sub_10013F170()
{
  *(_WORD *)int v0 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Could not decode ASCSignpostSpan because supplementaryTags was missing", v0, 2u);
}

void sub_10013F1B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = 136446466;
  uint64_t v3 = "ASCSignpostTag ASCSignpostTagCreateForProcess(uint64_t, pid_t)_block_invoke";
  __int16 v4 = 2050;
  uint64_t v5 = v1;
  _os_log_fault_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT, "*** %{public}s: Value %{public}llul exceeds 47 bits, break on _ASCSignpostTag_valueTooLarge to debug", (uint8_t *)&v2, 0x16u);
}

uint64_t sub_10013F250()
{
  uint64_t v0 = abort_report_np();
  return sub_10013F278(v0);
}

uint64_t sub_10013F278()
{
  uint64_t v0 = abort_report_np();
  return sub_10013F2A0(v0);
}

void sub_10013F2A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013F2DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013F318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013F354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013F390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013F3CC()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Could not decode ASCTrailers because videos was missing", v0, 2u);
}

void sub_10013F414()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Could not decode ASCTrailers because mediaPlatform was missing", v0, 2u);
}

void sub_10013F45C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013F498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013F4D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013F510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013F54C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013F588()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Could not decode ASCVideo because videoURL was missing", v0, 2u);
}

void sub_10013F5D0()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Could not decode ASCVideo because preview was missing", v0, 2u);
}

void sub_10013F618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013F654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013F690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013F6CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013F708(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Found non-universal link, opening application", v1, 2u);
}

void sub_10013F74C(uint64_t a1, NSObject *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  __int16 v4 = [0 targetApplicationRecord];
  uint64_t v5 = [v4 bundleIdentifier];
  int v6 = 138543618;
  uint64_t v7 = v3;
  __int16 v8 = 2114;
  uint64_t v9 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Found valid universal link with mismatching bundle ID, source %{public}@, target %{public}@", (uint8_t *)&v6, 0x16u);
}

void sub_10013F810(void *a1, NSObject *a2)
{
  [a1 count];
  sub_1000278DC();
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Found %lu matching apps for payload URL", v3, 0xCu);
}

void sub_10013F898()
{
  sub_1000278DC();
  sub_1000278C0((void *)&_mh_execute_header, v0, v1, "Failed to open universal link, reason %{public}@", v2, v3, v4, v5, v6);
}

void sub_10013F900()
{
  sub_1000278DC();
  sub_1000278C0((void *)&_mh_execute_header, v0, v1, "Open application with bundle ID failed, reason %{public}@", v2, v3, v4, v5, v6);
}

void sub_10013F968()
{
  sub_1000278DC();
  sub_1000278C0((void *)&_mh_execute_header, v0, v1, "Open resource URL operation failed, reason %{public}@", v2, v3, v4, v5, v6);
}

uint64_t CocoaError._nsError.getter()
{
  return CocoaError._nsError.getter();
}

uint64_t static CocoaError.Code.featureUnsupported.getter()
{
  return static CocoaError.Code.featureUnsupported.getter();
}

uint64_t type metadata accessor for CocoaError.Code()
{
  return type metadata accessor for CocoaError.Code();
}

uint64_t type metadata accessor for CocoaError()
{
  return type metadata accessor for CocoaError();
}

uint64_t static CharacterSet.lowercaseLetters.getter()
{
  return static CharacterSet.lowercaseLetters.getter();
}

uint64_t type metadata accessor for CharacterSet()
{
  return type metadata accessor for CharacterSet();
}

uint64_t DateInterval.end.getter()
{
  return DateInterval.end.getter();
}

uint64_t DateInterval.init(start:end:)()
{
  return DateInterval.init(start:end:)();
}

uint64_t DateInterval.start.getter()
{
  return DateInterval.start.getter();
}

uint64_t type metadata accessor for DateInterval()
{
  return type metadata accessor for DateInterval();
}

uint64_t static Notification._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Notification._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Notification.name.getter()
{
  return Notification.name.getter();
}

uint64_t type metadata accessor for Notification()
{
  return type metadata accessor for Notification();
}

uint64_t URLQueryItem.name.getter()
{
  return URLQueryItem.name.getter();
}

uint64_t URLQueryItem.value.getter()
{
  return URLQueryItem.value.getter();
}

uint64_t type metadata accessor for URLQueryItem()
{
  return type metadata accessor for URLQueryItem();
}

uint64_t URLComponents.queryItems.getter()
{
  return URLComponents.queryItems.getter();
}

uint64_t URLComponents.init(url:resolvingAgainstBaseURL:)()
{
  return URLComponents.init(url:resolvingAgainstBaseURL:)();
}

uint64_t URLComponents.init(string:)()
{
  return URLComponents.init(string:)();
}

uint64_t type metadata accessor for URLComponents()
{
  return type metadata accessor for URLComponents();
}

uint64_t DateComponents.weekOfYear.getter()
{
  return DateComponents.weekOfYear.getter();
}

uint64_t DateComponents.day.getter()
{
  return DateComponents.day.getter();
}

uint64_t DateComponents.hour.getter()
{
  return DateComponents.hour.getter();
}

uint64_t DateComponents.year.getter()
{
  return DateComponents.year.getter();
}

uint64_t DateComponents.month.getter()
{
  return DateComponents.month.getter();
}

uint64_t DateComponents.second.getter()
{
  return DateComponents.second.getter();
}

uint64_t type metadata accessor for DateComponents()
{
  return type metadata accessor for DateComponents();
}

uint64_t static _ErrorCodeProtocol.~= infix(_:_:)()
{
  return static _ErrorCodeProtocol.~= infix(_:_:)();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
}

uint64_t PropertyListDecoder.init()()
{
  return PropertyListDecoder.init()();
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return type metadata accessor for PropertyListDecoder();
}

uint64_t dispatch thunk of PropertyListEncoder.outputFormat.setter()
{
  return dispatch thunk of PropertyListEncoder.outputFormat.setter();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:)()
{
  return dispatch thunk of PropertyListEncoder.encode<A>(_:)();
}

uint64_t PropertyListEncoder.init()()
{
  return PropertyListEncoder.init()();
}

uint64_t type metadata accessor for PropertyListEncoder()
{
  return type metadata accessor for PropertyListEncoder();
}

uint64_t _BridgedStoredNSError.userInfo.getter()
{
  return _BridgedStoredNSError.userInfo.getter();
}

uint64_t _BridgedStoredNSError.init(_:userInfo:)()
{
  return _BridgedStoredNSError.init(_:userInfo:)();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t URL.pathExtension.getter()
{
  return URL.pathExtension.getter();
}

uint64_t URL.absoluteString.getter()
{
  return URL.absoluteString.getter();
}

uint64_t URL.init(fileURLWithPath:)()
{
  return URL.init(fileURLWithPath:)();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

Swift::Void __swiftcall URL.appendPathComponent(_:)(Swift::String a1)
{
}

uint64_t URL.appendingPathComponent(_:isDirectory:)()
{
  return URL.appendingPathComponent(_:isDirectory:)();
}

uint64_t static URL.== infix(_:_:)()
{
  return static URL.== infix(_:_:)();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t URL.init(string:)()
{
  return URL.init(string:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return Date.timeIntervalSince(_:)();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)Date._bridgeToObjectiveC()();
}

uint64_t static Date.> infix(_:_:)()
{
  return static Date.> infix(_:_:)();
}

uint64_t static Date.< infix(_:_:)()
{
  return static Date.< infix(_:_:)();
}

uint64_t static Date.+ infix(_:_:)()
{
  return static Date.+ infix(_:_:)();
}

uint64_t static Date.== infix(_:_:)()
{
  return static Date.== infix(_:_:)();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Date.init()()
{
  return Date.init()();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t UUID.uuidString.getter()
{
  return UUID.uuidString.getter();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t UUID.init()()
{
  return UUID.init()();
}

uint64_t type metadata accessor for UUID()
{
  return type metadata accessor for UUID();
}

uint64_t Locale.identifier.getter()
{
  return Locale.identifier.getter();
}

NSLocale __swiftcall Locale._bridgeToObjectiveC()()
{
  return (NSLocale)Locale._bridgeToObjectiveC()();
}

uint64_t Locale.calendar.getter()
{
  return Locale.calendar.getter();
}

uint64_t type metadata accessor for Locale()
{
  return type metadata accessor for Locale();
}

uint64_t Calendar.dateComponents(_:from:to:)()
{
  return Calendar.dateComponents(_:from:to:)();
}

NSCalendar __swiftcall Calendar._bridgeToObjectiveC()()
{
  return (NSCalendar)Calendar._bridgeToObjectiveC()();
}

uint64_t type metadata accessor for Calendar.Component()
{
  return type metadata accessor for Calendar.Component();
}

uint64_t type metadata accessor for Calendar()
{
  return type metadata accessor for Calendar();
}

uint64_t isFeatureEnabled(_:)()
{
  return isFeatureEnabled(_:)();
}

uint64_t AppVersion.appleVersionID.getter()
{
  return AppVersion.appleVersionID.getter();
}

uint64_t AppVersion.appleItemID.getter()
{
  return AppVersion.appleItemID.getter();
}

uint64_t type metadata accessor for AppVersion()
{
  return type metadata accessor for AppVersion();
}

uint64_t static AppDistributor.AppDistributorsOrTrustedDevelopersChangedNotification.getter()
{
  return static AppDistributor.AppDistributorsOrTrustedDevelopersChangedNotification.getter();
}

uint64_t os_signpost(_:dso:log:name:signpostID:)()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t OSSignpostID.init(log:)()
{
  return OSSignpostID.init(log:)();
}

uint64_t static OSSignpostID.exclusive.getter()
{
  return static OSSignpostID.exclusive.getter();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return type metadata accessor for OSSignpostID();
}

uint64_t StorefrontAppStateController.transitionState(forApp:to:)()
{
  return StorefrontAppStateController.transitionState(forApp:to:)();
}

uint64_t StorefrontAppStateController.prospectiveState(forApp:applying:)()
{
  return StorefrontAppStateController.prospectiveState(forApp:applying:)();
}

uint64_t StorefrontAppStateController.canTransitionState(forApp:to:)()
{
  return StorefrontAppStateController.canTransitionState(forApp:to:)();
}

uint64_t StorefrontAppStateController.onStateChange.getter()
{
  return StorefrontAppStateController.onStateChange.getter();
}

uint64_t StorefrontAppStateController.preloadState(forApps:)()
{
  return StorefrontAppStateController.preloadState(forApps:)();
}

uint64_t StorefrontAppStateController.setWaiting(forApp:installationType:)()
{
  return StorefrontAppStateController.setWaiting(forApp:installationType:)();
}

uint64_t StorefrontAppStateController.clearWaiting(forApp:refreshState:)()
{
  return StorefrontAppStateController.clearWaiting(forApp:refreshState:)();
}

uint64_t StorefrontAppStateController.postsChanges(forApp:)()
{
  return StorefrontAppStateController.postsChanges(forApp:)();
}

uint64_t StorefrontAppStateController.Configuration.init(updateRegistry:)()
{
  return StorefrontAppStateController.Configuration.init(updateRegistry:)();
}

uint64_t StorefrontAppStateController.Configuration.withDataSources(_:)()
{
  return StorefrontAppStateController.Configuration.withDataSources(_:)();
}

uint64_t type metadata accessor for StorefrontAppStateController.Configuration()
{
  return type metadata accessor for StorefrontAppStateController.Configuration();
}

uint64_t StorefrontAppStateController.setPostsChanges(_:forApp:)()
{
  return StorefrontAppStateController.setPostsChanges(_:forApp:)();
}

uint64_t StorefrontAppStateController.isRedownloadable(app:includingPreorders:)()
{
  return StorefrontAppStateController.isRedownloadable(app:includingPreorders:)();
}

uint64_t StorefrontAppStateController.__allocating_init(from:)()
{
  return StorefrontAppStateController.__allocating_init(from:)();
}

uint64_t StorefrontAppStateController.state(forApp:initialState:applying:)()
{
  return StorefrontAppStateController.state(forApp:initialState:applying:)();
}

uint64_t StorefrontAppStateController.onLoad.getter()
{
  return StorefrontAppStateController.onLoad.getter();
}

uint64_t StorefrontAppStateController.isLoaded.getter()
{
  return StorefrontAppStateController.isLoaded.getter();
}

uint64_t type metadata accessor for StorefrontAppStateController()
{
  return type metadata accessor for StorefrontAppStateController();
}

uint64_t PurchaseHistoryAppStateDataSource.__allocating_init(accounts:platform:purchaseHistory:purchaseHistoryContext:)()
{
  return PurchaseHistoryAppStateDataSource.__allocating_init(accounts:platform:purchaseHistory:purchaseHistoryContext:)();
}

uint64_t static ArcadeIntroOfferState.== infix(_:_:)()
{
  return static ArcadeIntroOfferState.== infix(_:_:)();
}

uint64_t type metadata accessor for ArcadeIntroOfferState()
{
  return type metadata accessor for ArcadeIntroOfferState();
}

uint64_t static ArcadeState.== infix(_:_:)()
{
  return static ArcadeState.== infix(_:_:)();
}

uint64_t type metadata accessor for ArcadeState()
{
  return type metadata accessor for ArcadeState();
}

uint64_t type metadata accessor for DeviceAppQuery()
{
  return type metadata accessor for DeviceAppQuery();
}

uint64_t DeviceAppStateDataSource.__allocating_init(query:fetcher:updateRegistry:store:)()
{
  return DeviceAppStateDataSource.__allocating_init(query:fetcher:updateRegistry:store:)();
}

uint64_t DefaultAppStateDataSource.init()()
{
  return DefaultAppStateDataSource.init()();
}

uint64_t WaitingAppStateDataSource.init()()
{
  return WaitingAppStateDataSource.init()();
}

uint64_t ASDDeviceAppFetcher.observeQuery(_:on:using:)()
{
  return ASDDeviceAppFetcher.observeQuery(_:on:using:)();
}

uint64_t ASDDeviceAppFetcher.init(regulatoryLogger:)()
{
  return ASDDeviceAppFetcher.init(regulatoryLogger:)();
}

uint64_t type metadata accessor for ASDDeviceAppFetcher()
{
  return type metadata accessor for ASDDeviceAppFetcher();
}

uint64_t App.init(id:kind:)()
{
  return App.init(id:kind:)();
}

uint64_t App.id.getter()
{
  return App.id.getter();
}

uint64_t type metadata accessor for App.Kind()
{
  return type metadata accessor for App.Kind();
}

uint64_t type metadata accessor for App()
{
  return type metadata accessor for App();
}

uint64_t type metadata accessor for AppInstallation.Phase()
{
  return type metadata accessor for AppInstallation.Phase();
}

uint64_t AppInstallation.init(phase:progress:hasPostProcessingPhase:essentialBackgroundAssetDownloadEstimate:)()
{
  return AppInstallation.init(phase:progress:hasPostProcessingPhase:essentialBackgroundAssetDownloadEstimate:)();
}

uint64_t AppInstallation.phase.getter()
{
  return AppInstallation.phase.getter();
}

uint64_t AppInstallation.Progress.fractionCompleted.getter()
{
  return AppInstallation.Progress.fractionCompleted.getter();
}

uint64_t AppInstallation.Progress.progress.getter()
{
  return AppInstallation.Progress.progress.getter();
}

uint64_t type metadata accessor for AppInstallation.Progress()
{
  return type metadata accessor for AppInstallation.Progress();
}

uint64_t AppInstallation.progress.getter()
{
  return AppInstallation.progress.getter();
}

uint64_t type metadata accessor for AppInstallation()
{
  return type metadata accessor for AppInstallation();
}

uint64_t type metadata accessor for AppPurchaseType()
{
  return type metadata accessor for AppPurchaseType();
}

uint64_t type metadata accessor for AppInstallationType()
{
  return type metadata accessor for AppInstallationType();
}

uint64_t AppInstallationType.init(_:)()
{
  return AppInstallationType.init(_:)();
}

uint64_t type metadata accessor for AppOpenableDestination()
{
  return type metadata accessor for AppOpenableDestination();
}

uint64_t static AppOffer.Flags.none.getter()
{
  return static AppOffer.Flags.none.getter();
}

uint64_t static AppOffer.Flags.dsidLess.getter()
{
  return static AppOffer.Flags.dsidLess.getter();
}

uint64_t type metadata accessor for AppOffer.Flags()
{
  return type metadata accessor for AppOffer.Flags();
}

uint64_t AppOffer.init(flags:ageRating:baseBuyParams:metricsBuyParams:)()
{
  return AppOffer.init(flags:ageRating:baseBuyParams:metricsBuyParams:)();
}

uint64_t AppOffer.flags.getter()
{
  return AppOffer.flags.getter();
}

uint64_t static AppOffer.standard.getter()
{
  return static AppOffer.standard.getter();
}

uint64_t type metadata accessor for AppOffer()
{
  return type metadata accessor for AppOffer();
}

uint64_t type metadata accessor for AppStoreType()
{
  return type metadata accessor for AppStoreType();
}

uint64_t State.overrideBuyParams.getter()
{
  return State.overrideBuyParams.getter();
}

uint64_t static State.== infix(_:_:)()
{
  return static State.== infix(_:_:)();
}

uint64_t State.Key.rawValue.getter()
{
  return State.Key.rawValue.getter();
}

uint64_t type metadata accessor for State.Key()
{
  return type metadata accessor for State.Key();
}

uint64_t State.key.getter()
{
  return State.key.getter();
}

uint64_t type metadata accessor for State()
{
  return type metadata accessor for State();
}

uint64_t dispatch thunk of AppStateController.transitionState(forApp:to:)()
{
  return dispatch thunk of AppStateController.transitionState(forApp:to:)();
}

uint64_t dispatch thunk of AppStateController.onStateChange.getter()
{
  return dispatch thunk of AppStateController.onStateChange.getter();
}

uint64_t dispatch thunk of AppStateController.preloadState(forApps:)()
{
  return dispatch thunk of AppStateController.preloadState(forApps:)();
}

uint64_t dispatch thunk of AppStateController.setWaiting(forApp:installationType:)()
{
  return dispatch thunk of AppStateController.setWaiting(forApp:installationType:)();
}

uint64_t dispatch thunk of AppStateController.clearWaiting(forApp:refreshState:)()
{
  return dispatch thunk of AppStateController.clearWaiting(forApp:refreshState:)();
}

uint64_t dispatch thunk of AppStateController.setPostsChanges(_:forApp:)()
{
  return dispatch thunk of AppStateController.setPostsChanges(_:forApp:)();
}

uint64_t dispatch thunk of AppStateController.isLoaded.getter()
{
  return dispatch thunk of AppStateController.isLoaded.getter();
}

uint64_t AppStateController.state(forApp:applying:)()
{
  return AppStateController.state(forApp:applying:)();
}

uint64_t AppStateController.state(forApp:)()
{
  return AppStateController.state(forApp:)();
}

uint64_t AppStateDataSource.providesState(forApp:)()
{
  return AppStateDataSource.providesState(forApp:)();
}

uint64_t AppStateDataSource.setWaiting(forAppWith:installationType:)()
{
  return AppStateDataSource.setWaiting(forAppWith:installationType:)();
}

uint64_t AppStateDataSource.clearWaiting(forAppWith:)()
{
  return AppStateDataSource.clearWaiting(forAppWith:)();
}

uint64_t AppStateDataSource.isIncremental.getter()
{
  return AppStateDataSource.isIncremental.getter();
}

uint64_t dispatch thunk of Restrictions.isAppInstallationAllowed.getter()
{
  return dispatch thunk of Restrictions.isAppInstallationAllowed.getter();
}

uint64_t dispatch thunk of Restrictions.onRestrictionsChange.getter()
{
  return dispatch thunk of Restrictions.onRestrictionsChange.getter();
}

uint64_t dispatch thunk of Restrictions.maxAppContentRating.getter()
{
  return dispatch thunk of Restrictions.maxAppContentRating.getter();
}

uint64_t dispatch thunk of Restrictions.hasManagedAppleID.getter()
{
  return dispatch thunk of Restrictions.hasManagedAppleID.getter();
}

uint64_t dispatch thunk of Restrictions.isRunningInStoreDemoMode.getter()
{
  return dispatch thunk of Restrictions.isRunningInStoreDemoMode.getter();
}

uint64_t static GreenTeaLogger.shared.getter()
{
  return static GreenTeaLogger.shared.getter();
}

uint64_t type metadata accessor for GreenTeaLogger()
{
  return type metadata accessor for GreenTeaLogger();
}

uint64_t dispatch thunk of PurchaseManager.isDeletableSystemApp(_:)()
{
  return dispatch thunk of PurchaseManager.isDeletableSystemApp(_:)();
}

uint64_t HardwarePlatform.init(bag:device:)()
{
  return HardwarePlatform.init(bag:device:)();
}

uint64_t type metadata accessor for HardwarePlatform()
{
  return type metadata accessor for HardwarePlatform();
}

uint64_t ManagedRestrictions.__allocating_init(accounts:)()
{
  return ManagedRestrictions.__allocating_init(accounts:)();
}

uint64_t DeviceUpdateRegistry.__allocating_init()()
{
  return DeviceUpdateRegistry.__allocating_init()();
}

uint64_t type metadata accessor for DeviceUpdateRegistry()
{
  return type metadata accessor for DeviceUpdateRegistry();
}

uint64_t dispatch thunk of ArcadeSubscriptionManager.subscriptionState.getter()
{
  return dispatch thunk of ArcadeSubscriptionManager.subscriptionState.getter();
}

uint64_t dispatch thunk of ArcadeSubscriptionManager.onSubscriptionStateChange.getter()
{
  return dispatch thunk of ArcadeSubscriptionManager.onSubscriptionStateChange.getter();
}

uint64_t ASDArcadeSubscriptionManager.__allocating_init(objectGraph:requestingBundleID:)()
{
  return ASDArcadeSubscriptionManager.__allocating_init(objectGraph:requestingBundleID:)();
}

uint64_t type metadata accessor for ArcadeEntitlementRefreshCondition()
{
  return type metadata accessor for ArcadeEntitlementRefreshCondition();
}

uint64_t AdamID.int64Value.getter()
{
  return AdamID.int64Value.getter();
}

uint64_t AdamID.init(value:)()
{
  return AdamID.init(value:)();
}

uint64_t type metadata accessor for AdamID()
{
  return type metadata accessor for AdamID();
}

uint64_t dispatch thunk of Platform.isRunnable(_:)()
{
  return dispatch thunk of Platform.isRunnable(_:)();
}

uint64_t static DispatchWorkItemFlags.barrier.getter()
{
  return static DispatchWorkItemFlags.barrier.getter();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t type metadata accessor for DispatchQoS.QoSClass()
{
  return type metadata accessor for DispatchQoS.QoSClass();
}

uint64_t static DispatchQoS.background.getter()
{
  return static DispatchQoS.background.getter();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t static DispatchQoS.userInitiated.getter()
{
  return static DispatchQoS.userInitiated.getter();
}

uint64_t static DispatchQoS.userInteractive.getter()
{
  return static DispatchQoS.userInteractive.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t static DispatchTime.distantFuture.getter()
{
  return static DispatchTime.distantFuture.getter();
}

uint64_t static DispatchTime.< infix(_:_:)()
{
  return static DispatchTime.< infix(_:_:)();
}

uint64_t static DispatchTime.now()()
{
  return static DispatchTime.now()();
}

uint64_t type metadata accessor for DispatchTime()
{
  return type metadata accessor for DispatchTime();
}

uint64_t DispatchWorkItem.init(flags:block:)()
{
  return DispatchWorkItem.init(flags:block:)();
}

uint64_t dispatch thunk of DispatchWorkItem.cancel()()
{
  return dispatch thunk of DispatchWorkItem.cancel()();
}

uint64_t type metadata accessor for DispatchWorkItem()
{
  return type metadata accessor for DispatchWorkItem();
}

uint64_t type metadata accessor for DispatchPredicate()
{
  return type metadata accessor for DispatchPredicate();
}

uint64_t + infix(_:_:)()
{
  return + infix(_:_:)();
}

uint64_t _dispatchPreconditionTest(_:)()
{
  return _dispatchPreconditionTest(_:)();
}

uint64_t type metadata accessor for AccountProviderActiveAccountChange()
{
  return type metadata accessor for AccountProviderActiveAccountChange();
}

uint64_t DiskJetPackLoader.init(signingPolicy:keyProviders:)()
{
  return DiskJetPackLoader.init(signingPolicy:keyProviders:)();
}

uint64_t type metadata accessor for DiskJetPackLoader()
{
  return type metadata accessor for DiskJetPackLoader();
}

uint64_t DiskJetPackResourceBundle.memoryMappedSource(atPath:virtualMachine:cacheURL:)()
{
  return DiskJetPackResourceBundle.memoryMappedSource(atPath:virtualMachine:cacheURL:)();
}

uint64_t DiskJetPackResourceBundle.fileData(atPath:)()
{
  return DiskJetPackResourceBundle.fileData(atPath:)();
}

uint64_t type metadata accessor for DiskJetPackResourceBundle()
{
  return type metadata accessor for DiskJetPackResourceBundle();
}

uint64_t ValidatedJetPackAssetLocations.URLLocation.url.getter()
{
  return ValidatedJetPackAssetLocations.URLLocation.url.getter();
}

uint64_t type metadata accessor for ValidatedJetPackAssetLocations.URLLocation()
{
  return type metadata accessor for ValidatedJetPackAssetLocations.URLLocation();
}

uint64_t ValidatedJetPackAssetLocations.URLLocation.init(_:sourcePolicy:requestConfiguration:)()
{
  return ValidatedJetPackAssetLocations.URLLocation.init(_:sourcePolicy:requestConfiguration:)();
}

uint64_t ValidatedJetPackAssetLocations.URLLocation.init(_:requestConfiguration:)()
{
  return ValidatedJetPackAssetLocations.URLLocation.init(_:requestConfiguration:)();
}

uint64_t type metadata accessor for ValidatedJetPackAssetLocations.BagKeyLocation()
{
  return type metadata accessor for ValidatedJetPackAssetLocations.BagKeyLocation();
}

uint64_t ValidatedJetPackAssetLocations.BagKeyLocation.init(_:bag:urlTransformer:requestConfiguration:)()
{
  return ValidatedJetPackAssetLocations.BagKeyLocation.init(_:bag:urlTransformer:requestConfiguration:)();
}

uint64_t ValidatedJetPackLoadingCoordinator.ValidatedJetPackResult.bundle.getter()
{
  return ValidatedJetPackLoadingCoordinator.ValidatedJetPackResult.bundle.getter();
}

uint64_t ValidatedJetPackLoadingCoordinator.init(session:assetLocation:bag:)()
{
  return ValidatedJetPackLoadingCoordinator.init(session:assetLocation:bag:)();
}

uint64_t type metadata accessor for ValidatedJetPackLoadingCoordinator()
{
  return type metadata accessor for ValidatedJetPackLoadingCoordinator();
}

uint64_t JetPackAssetSession.Configuration.init(cache:)()
{
  return JetPackAssetSession.Configuration.init(cache:)();
}

uint64_t type metadata accessor for JetPackAssetSession.Configuration()
{
  return type metadata accessor for JetPackAssetSession.Configuration();
}

uint64_t JetPackAssetSession.init(configuration:)()
{
  return JetPackAssetSession.init(configuration:)();
}

uint64_t type metadata accessor for JetPackAssetSession()
{
  return type metadata accessor for JetPackAssetSession();
}

uint64_t type metadata accessor for JetPackSigningPolicy()
{
  return type metadata accessor for JetPackSigningPolicy();
}

uint64_t JetPackAssetDiskCache.__allocating_init()()
{
  return JetPackAssetDiskCache.__allocating_init()();
}

uint64_t type metadata accessor for JetPackAssetDiskCache()
{
  return type metadata accessor for JetPackAssetDiskCache();
}

uint64_t JetPackFileKeyProvider.init(keyURLs:)()
{
  return JetPackFileKeyProvider.init(keyURLs:)();
}

uint64_t type metadata accessor for JetPackFileKeyProvider()
{
  return type metadata accessor for JetPackFileKeyProvider();
}

uint64_t JetPackManagedKeyProvider.init()()
{
  return JetPackManagedKeyProvider.init()();
}

uint64_t type metadata accessor for JetPackManagedKeyProvider()
{
  return type metadata accessor for JetPackManagedKeyProvider();
}

uint64_t static JetPackAMSRemoteStreamSource.defaultURLEncoder(forContentsOf:using:from:)()
{
  return static JetPackAMSRemoteStreamSource.defaultURLEncoder(forContentsOf:using:from:)();
}

uint64_t type metadata accessor for JetPackAssetRequestSourcePolicy()
{
  return type metadata accessor for JetPackAssetRequestSourcePolicy();
}

uint64_t static JetPackPath.sourcePath.getter()
{
  return static JetPackPath.sourcePath.getter();
}

uint64_t type metadata accessor for JetPackPath()
{
  return type metadata accessor for JetPackPath();
}

uint64_t JetPackPath.init(_:)()
{
  return JetPackPath.init(_:)();
}

uint64_t JetPackAsset.streamSource.getter()
{
  return JetPackAsset.streamSource.getter();
}

uint64_t type metadata accessor for JetEngineBootstrap.URLProtocolHandler()
{
  return type metadata accessor for JetEngineBootstrap.URLProtocolHandler();
}

uint64_t AsyncEvent.post(_:)()
{
  return AsyncEvent.post(_:)();
}

uint64_t AsyncEvent.init()()
{
  return AsyncEvent.init()();
}

uint64_t Dependency.init<A>(satisfying:with:)()
{
  return Dependency.init<A>(satisfying:with:)();
}

uint64_t type metadata accessor for Dependency()
{
  return type metadata accessor for Dependency();
}

uint64_t JSCallable.call(_:)()
{
  return JSCallable.call(_:)();
}

uint64_t type metadata accessor for JSCallable()
{
  return type metadata accessor for JSCallable();
}

uint64_t JSIncident.contextSummary.getter()
{
  return JSIncident.contextSummary.getter();
}

uint64_t JSIncident.problemSummary.getter()
{
  return JSIncident.problemSummary.getter();
}

uint64_t type metadata accessor for JSIncident()
{
  return type metadata accessor for JSIncident();
}

uint64_t JSONObject.dictionary.getter()
{
  return JSONObject.dictionary.getter();
}

uint64_t JSONObject.stringEnum<A>(or:)()
{
  return JSONObject.stringEnum<A>(or:)();
}

uint64_t JSONObject.stringEnum<A>()()
{
  return JSONObject.stringEnum<A>()();
}

uint64_t JSONObject.init(deserializing:)()
{
  return JSONObject.init(deserializing:)();
}

uint64_t JSONObject.stringEnumOrNil<A>()()
{
  return JSONObject.stringEnumOrNil<A>()();
}

uint64_t JSONObject.int.getter()
{
  return JSONObject.int.getter();
}

uint64_t JSONObject.url.getter()
{
  return JSONObject.url.getter();
}

uint64_t JSONObject.BOOL.getter()
{
  return JSONObject.BOOL.getter();
}

uint64_t JSONObject.array.getter()
{
  return JSONObject.array.getter();
}

uint64_t JSONObject.float.getter()
{
  return JSONObject.float.getter();
}

uint64_t JSONObject.double.getter()
{
  return JSONObject.double.getter();
}

uint64_t JSONObject.isNull.getter()
{
  return JSONObject.isNull.getter();
}

uint64_t JSONObject.number.getter()
{
  return JSONObject.number.getter();
}

uint64_t JSONObject.string.getter()
{
  return JSONObject.string.getter();
}

uint64_t type metadata accessor for JSONObject()
{
  return type metadata accessor for JSONObject();
}

uint64_t JSONObject.subscript.getter()
{
  return JSONObject.subscript.getter();
}

uint64_t JSResponse.body.getter()
{
  return JSResponse.body.getter();
}

uint64_t JSResponse.incidents.getter()
{
  return JSResponse.incidents.getter();
}

uint64_t LogMessage.init(stringLiteral:)()
{
  return LogMessage.init(stringLiteral:)();
}

uint64_t static LogMessage.traceableSensitive(_:)()
{
  return static LogMessage.traceableSensitive(_:)();
}

uint64_t LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)()
{
  return LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
}

uint64_t LogMessage.StringInterpolation.appendInterpolation(safe:)()
{
  return LogMessage.StringInterpolation.appendInterpolation(safe:)();
}

uint64_t LogMessage.StringInterpolation.appendInterpolation(identity:)()
{
  return LogMessage.StringInterpolation.appendInterpolation(identity:)();
}

uint64_t LogMessage.StringInterpolation.appendInterpolation(sensitive:)()
{
  return LogMessage.StringInterpolation.appendInterpolation(sensitive:)();
}

Swift::Void __swiftcall LogMessage.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
}

uint64_t LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t type metadata accessor for LogMessage.StringInterpolation()
{
  return type metadata accessor for LogMessage.StringInterpolation();
}

uint64_t LogMessage.init(stringInterpolation:)()
{
  return LogMessage.init(stringInterpolation:)();
}

uint64_t static LogMessage.safe(_:)()
{
  return static LogMessage.safe(_:)();
}

uint64_t static LogMessage.sensitive(_:)()
{
  return static LogMessage.sensitive(_:)();
}

uint64_t type metadata accessor for LogMessage()
{
  return type metadata accessor for LogMessage();
}

uint64_t JSONContext.addingValue<A>(_:forProperty:)()
{
  return JSONContext.addingValue<A>(_:forProperty:)();
}

uint64_t static JSONContext.initFailureObserver.getter()
{
  return static JSONContext.initFailureObserver.getter();
}

uint64_t JSONContext.init()()
{
  return JSONContext.init()();
}

uint64_t type metadata accessor for JSONContext()
{
  return type metadata accessor for JSONContext();
}

uint64_t JSONContext.subscript.getter()
{
  return JSONContext.subscript.getter();
}

uint64_t MetricsData.shouldFlush.getter()
{
  return MetricsData.shouldFlush.getter();
}

uint64_t MetricsData.init(deserializing:using:)()
{
  return MetricsData.init(deserializing:using:)();
}

uint64_t MetricsData.excludingFields.getter()
{
  return MetricsData.excludingFields.getter();
}

uint64_t MetricsData.includingFields.getter()
{
  return MetricsData.includingFields.getter();
}

uint64_t MetricsData.init(topic:shouldFlush:fields:includingFields:excludingFields:)()
{
  return MetricsData.init(topic:shouldFlush:fields:includingFields:excludingFields:)();
}

uint64_t MetricsData.topic.getter()
{
  return MetricsData.topic.getter();
}

uint64_t MetricsData.fields.getter()
{
  return MetricsData.fields.getter();
}

uint64_t type metadata accessor for MetricsData()
{
  return type metadata accessor for MetricsData();
}

uint64_t Preferences.subscript.getter()
{
  return Preferences.subscript.getter();
}

{
  return Preferences.subscript.getter();
}

uint64_t Preferences.subscript.setter()
{
  return Preferences.subscript.setter();
}

{
  return Preferences.subscript.setter();
}

uint64_t dispatch thunk of EventEmitter.removeObserver(_:)()
{
  return dispatch thunk of EventEmitter.removeObserver(_:)();
}

uint64_t dispatch thunk of static EventEmitter.defaultScheduler.getter()
{
  return dispatch thunk of static EventEmitter.defaultScheduler.getter();
}

uint64_t dispatch thunk of EventEmitter.post(_:)()
{
  return dispatch thunk of EventEmitter.post(_:)();
}

uint64_t EventEmitter.addObserver<A>(on:target:method:)()
{
  return EventEmitter.addObserver<A>(on:target:method:)();
}

uint64_t EventEmitter.addObserver(on:singleUse:_:)()
{
  return EventEmitter.addObserver(on:singleUse:_:)();
}

uint64_t EventEmitter.asyncStream.getter()
{
  return EventEmitter.asyncStream.getter();
}

uint64_t type metadata accessor for JSONTimeUnit()
{
  return type metadata accessor for JSONTimeUnit();
}

uint64_t PipelineTask.eraseToAnyPipelineTask()()
{
  return PipelineTask.eraseToAnyPipelineTask()();
}

uint64_t PipelineTask.mapTaskOutput<A>(_:)()
{
  return PipelineTask.mapTaskOutput<A>(_:)();
}

{
  return PipelineTask.mapTaskOutput<A>(_:)();
}

uint64_t PipelineTask.andThen<A>(_:)()
{
  return PipelineTask.andThen<A>(_:)();
}

uint64_t static ActionMetrics.notInstrumented.getter()
{
  return static ActionMetrics.notInstrumented.getter();
}

uint64_t ActionMetrics.init(data:custom:)()
{
  return ActionMetrics.init(data:custom:)();
}

uint64_t type metadata accessor for ActionMetrics()
{
  return type metadata accessor for ActionMetrics();
}

uint64_t type metadata accessor for ActionOutcome()
{
  return type metadata accessor for ActionOutcome();
}

uint64_t ClosureAction.init(actionMetrics:body:)()
{
  return ClosureAction.init(actionMetrics:body:)();
}

uint64_t type metadata accessor for ClosureAction()
{
  return type metadata accessor for ClosureAction();
}

uint64_t CoarselyTimed.contained.getter()
{
  return CoarselyTimed.contained.getter();
}

uint64_t MetricsLogger.init(loggerName:configuration:)()
{
  return MetricsLogger.init(loggerName:configuration:)();
}

uint64_t MetricsLogger.Configuration.init(recorder:eventTopic:samplingPercentage:samplingDuration:)()
{
  return MetricsLogger.Configuration.init(recorder:eventTopic:samplingPercentage:samplingDuration:)();
}

uint64_t type metadata accessor for MetricsLogger.Configuration()
{
  return type metadata accessor for MetricsLogger.Configuration();
}

uint64_t MetricsLogger.log(contentsOf:withLevel:)()
{
  return MetricsLogger.log(contentsOf:withLevel:)();
}

uint64_t type metadata accessor for MetricsLogger()
{
  return type metadata accessor for MetricsLogger();
}

uint64_t static PipelinePhase.cacheValueIfSuccessful()()
{
  return static PipelinePhase.cacheValueIfSuccessful()();
}

uint64_t PreferenceKey.init(_:in:)()
{
  return PreferenceKey.init(_:in:)();
}

uint64_t dispatch thunk of TaskScheduler.schedule(task:)()
{
  return dispatch thunk of TaskScheduler.schedule(task:)();
}

uint64_t CompoundAction.init(actionMetrics:subactions:)()
{
  return CompoundAction.init(actionMetrics:subactions:)();
}

uint64_t type metadata accessor for CompoundAction()
{
  return type metadata accessor for CompoundAction();
}

uint64_t JSONDictionary.bridgedPrimitiveValues<A, B>()()
{
  return JSONDictionary.bridgedPrimitiveValues<A, B>()();
}

uint64_t type metadata accessor for JSONDictionary()
{
  return type metadata accessor for JSONDictionary();
}

uint64_t JSPackageIndex.properties.getter()
{
  return JSPackageIndex.properties.getter();
}

uint64_t JSPackageIndex.init(deserializing:using:from:)()
{
  return JSPackageIndex.init(deserializing:using:from:)();
}

uint64_t type metadata accessor for JSPackageIndex()
{
  return type metadata accessor for JSPackageIndex();
}

uint64_t type metadata accessor for OptionalLogger()
{
  return type metadata accessor for OptionalLogger();
}

uint64_t dispatch thunk of AccountProvider.activeAccount.getter()
{
  return dispatch thunk of AccountProvider.activeAccount.getter();
}

uint64_t dispatch thunk of AccountProvider.onActiveAccountChange.getter()
{
  return dispatch thunk of AccountProvider.onActiveAccountChange.getter();
}

uint64_t AnyPipelineTask.run()()
{
  return AnyPipelineTask.run()();
}

uint64_t BaseObjectGraph.inject<A>(_:)()
{
  return BaseObjectGraph.inject<A>(_:)();
}

uint64_t dispatch thunk of BaseObjectGraph.noMemberFound<A>(toSatisfy:)()
{
  return dispatch thunk of BaseObjectGraph.noMemberFound<A>(toSatisfy:)();
}

uint64_t BaseObjectGraph.init(name:dependencies:)()
{
  return BaseObjectGraph.init(name:dependencies:)();
}

uint64_t dispatch thunk of BaseObjectGraph.name.setter()
{
  return dispatch thunk of BaseObjectGraph.name.setter();
}

uint64_t static BaseObjectGraph.build(withName:)()
{
  return static BaseObjectGraph.build(withName:)();
}

uint64_t dispatch thunk of BaseObjectGraph.adding(dependency:)()
{
  return dispatch thunk of BaseObjectGraph.adding(dependency:)();
}

uint64_t dispatch thunk of BaseObjectGraph.adding<A>(allDependencies:)()
{
  return dispatch thunk of BaseObjectGraph.adding<A>(allDependencies:)();
}

uint64_t BaseObjectGraph.optional<A>(_:)()
{
  return BaseObjectGraph.optional<A>(_:)();
}

uint64_t type metadata accessor for BaseObjectGraph()
{
  return type metadata accessor for BaseObjectGraph();
}

uint64_t BaseObjectGraph.deinit()
{
  return BaseObjectGraph.deinit();
}

uint64_t BaseObjectGraph.__allocating_init(_:)()
{
  return BaseObjectGraph.__allocating_init(_:)();
}

uint64_t type metadata accessor for LogMessageLevel()
{
  return type metadata accessor for LogMessageLevel();
}

uint64_t MetricsPipeline.init(builderType:aggregator:linter:recorder:)()
{
  return MetricsPipeline.init(builderType:aggregator:linter:recorder:)();
}

uint64_t static MetricsPipeline.unstable_scheduleBarrier(_:)()
{
  return static MetricsPipeline.unstable_scheduleBarrier(_:)();
}

uint64_t MetricsPipeline.process(_:using:)()
{
  return MetricsPipeline.process(_:using:)();
}

uint64_t type metadata accessor for MetricsPipeline()
{
  return type metadata accessor for MetricsPipeline();
}

uint64_t ActionDispatcher.add<A>(_:)()
{
  return ActionDispatcher.add<A>(_:)();
}

uint64_t ActionDispatcher.perform(_:withMetrics:asPartOf:)()
{
  return ActionDispatcher.perform(_:withMetrics:asPartOf:)();
}

uint64_t ActionDispatcher.init()()
{
  return ActionDispatcher.init()();
}

uint64_t static LocalPreferences.currentApplication.getter()
{
  return static LocalPreferences.currentApplication.getter();
}

uint64_t type metadata accessor for LocalPreferences()
{
  return type metadata accessor for LocalPreferences();
}

uint64_t type metadata accessor for LocalizerContext()
{
  return type metadata accessor for LocalizerContext();
}

uint64_t static MetricsEventType.click.getter()
{
  return static MetricsEventType.click.getter();
}

uint64_t MetricsEventType.rawValue.getter()
{
  return MetricsEventType.rawValue.getter();
}

uint64_t type metadata accessor for MetricsEventType()
{
  return type metadata accessor for MetricsEventType();
}

uint64_t ScalarDictionary.init()()
{
  return ScalarDictionary.init()();
}

uint64_t type metadata accessor for ScalarDictionary()
{
  return type metadata accessor for ScalarDictionary();
}

uint64_t BagLanguageSource.init(bag:)()
{
  return BagLanguageSource.init(bag:)();
}

uint64_t type metadata accessor for BagLanguageSource()
{
  return type metadata accessor for BagLanguageSource();
}

uint64_t dispatch thunk of ExpressibleByJSON.init(deserializing:using:)()
{
  return dispatch thunk of ExpressibleByJSON.init(deserializing:using:)();
}

uint64_t ExpressibleByJSON.init(tryDeserializing:using:)()
{
  return ExpressibleByJSON.init(tryDeserializing:using:)();
}

uint64_t SyncTaskScheduler.init()()
{
  return SyncTaskScheduler.init()();
}

uint64_t type metadata accessor for SyncTaskScheduler()
{
  return type metadata accessor for SyncTaskScheduler();
}

uint64_t LintedMetricsEvent.init(fields:issues:)()
{
  return LintedMetricsEvent.init(fields:issues:)();
}

uint64_t LintedMetricsEvent.fields.getter()
{
  return LintedMetricsEvent.fields.getter();
}

uint64_t type metadata accessor for LintedMetricsEvent()
{
  return type metadata accessor for LintedMetricsEvent();
}

uint64_t PreferenceNamespace.init(components:)()
{
  return PreferenceNamespace.init(components:)();
}

uint64_t type metadata accessor for PreferenceNamespace()
{
  return type metadata accessor for PreferenceNamespace();
}

uint64_t type metadata accessor for RunLoopWorkerThread.PendingTask()
{
  return type metadata accessor for RunLoopWorkerThread.PendingTask();
}

uint64_t dispatch thunk of RunLoopWorkerThread.scheduleAfter(delay:execute:)()
{
  return dispatch thunk of RunLoopWorkerThread.scheduleAfter(delay:execute:)();
}

uint64_t static RunLoopWorkerThread.current.getter()
{
  return static RunLoopWorkerThread.current.getter();
}

uint64_t type metadata accessor for RunLoopWorkerThread()
{
  return type metadata accessor for RunLoopWorkerThread();
}

uint64_t type metadata accessor for DependencyDictionary()
{
  return type metadata accessor for DependencyDictionary();
}

uint64_t LocalizedStringTable.init(targetBundle:languageCodes:)()
{
  return LocalizedStringTable.init(targetBundle:languageCodes:)();
}

uint64_t type metadata accessor for LocalizedStringTable()
{
  return type metadata accessor for LocalizedStringTable();
}

uint64_t dispatch thunk of MetricsEventRecorder.flush()()
{
  return dispatch thunk of MetricsEventRecorder.flush()();
}

uint64_t dispatch thunk of MetricsEventRecorder.record(_:on:)()
{
  return dispatch thunk of MetricsEventRecorder.record(_:on:)();
}

uint64_t dispatch thunk of MetricsFieldsBuilder.addValue(_:forField:)()
{
  return dispatch thunk of MetricsFieldsBuilder.addValue(_:forField:)();
}

uint64_t MetricsFieldsContext.addingValue<A>(_:forProperty:)()
{
  return MetricsFieldsContext.addingValue<A>(_:forProperty:)();
}

uint64_t static MetricsFieldsContext.Property<A>.pageFields.getter()
{
  return static MetricsFieldsContext.Property<A>.pageFields.getter();
}

uint64_t MetricsFieldsContext.Property.init(_:)()
{
  return MetricsFieldsContext.Property.init(_:)();
}

uint64_t MetricsFieldsContext.addValue<A>(_:forProperty:)()
{
  return MetricsFieldsContext.addValue<A>(_:forProperty:)();
}

uint64_t MetricsFieldsContext.init()()
{
  return MetricsFieldsContext.init()();
}

uint64_t type metadata accessor for MetricsFieldsContext()
{
  return type metadata accessor for MetricsFieldsContext();
}

uint64_t MetricsFieldsContext.subscript.getter()
{
  return MetricsFieldsContext.subscript.getter();
}

uint64_t MetricsFieldsProvider.addTimeSensitiveMetricsFields(into:using:)()
{
  return MetricsFieldsProvider.addTimeSensitiveMetricsFields(into:using:)();
}

uint64_t MetricsFieldsProvider.addMetricsFields(into:using:)()
{
  return MetricsFieldsProvider.addMetricsFields(into:using:)();
}

uint64_t AppleServicesLocalizer.Configuration.init(dataSource:languageSource:objectGraph:)()
{
  return AppleServicesLocalizer.Configuration.init(dataSource:languageSource:objectGraph:)();
}

uint64_t AppleServicesLocalizer.Configuration.withNativeStringsDataSource(_:)()
{
  return AppleServicesLocalizer.Configuration.withNativeStringsDataSource(_:)();
}

uint64_t type metadata accessor for AppleServicesLocalizer.Configuration()
{
  return type metadata accessor for AppleServicesLocalizer.Configuration();
}

uint64_t type metadata accessor for AppleServicesLocalizer()
{
  return type metadata accessor for AppleServicesLocalizer();
}

uint64_t LocalizedStringsBundle.init(resourceBundle:indexPath:)()
{
  return LocalizedStringsBundle.init(resourceBundle:indexPath:)();
}

uint64_t type metadata accessor for LocalizedStringsBundle()
{
  return type metadata accessor for LocalizedStringsBundle();
}

uint64_t AMSMetricsEventRecorder.withDecorator(_:)()
{
  return AMSMetricsEventRecorder.withDecorator(_:)();
}

uint64_t AMSMetricsEventRecorder.__allocating_init(bag:defaultTopic:anonymousTopics:)()
{
  return AMSMetricsEventRecorder.__allocating_init(bag:defaultTopic:anonymousTopics:)();
}

uint64_t type metadata accessor for AMSMetricsEventRecorder()
{
  return type metadata accessor for AMSMetricsEventRecorder();
}

uint64_t dispatch thunk of AsyncObjectGraphBuilder.makeObjectGraph()()
{
  return dispatch thunk of AsyncObjectGraphBuilder.makeObjectGraph()();
}

uint64_t dispatch thunk of AsyncObjectGraphBuilder.satisfying<A>(_:with:)()
{
  return dispatch thunk of AsyncObjectGraphBuilder.satisfying<A>(_:with:)();
}

uint64_t AsyncObjectGraphBuilder.satisfying<A>(_:with:)()
{
  return AsyncObjectGraphBuilder.satisfying<A>(_:with:)();
}

uint64_t AsyncObjectGraphBuilder.withDependenciesSatisfied.getter()
{
  return AsyncObjectGraphBuilder.withDependenciesSatisfied.getter();
}

uint64_t dispatch thunk of JSONInitFailureObserver.tryingToInitialize(_:didFailWith:)()
{
  return dispatch thunk of JSONInitFailureObserver.tryingToInitialize(_:didFailWith:)();
}

uint64_t JSONInitFailureObserver.tryingToEncode(_:didFailWith:)()
{
  return JSONInitFailureObserver.tryingToEncode(_:didFailWith:)();
}

uint64_t MetricsFieldsAggregator.addOptInProvider(_:forRequest:)()
{
  return MetricsFieldsAggregator.addOptInProvider(_:forRequest:)();
}

uint64_t MetricsFieldsAggregator.addOptOutProvider(_:forRequest:)()
{
  return MetricsFieldsAggregator.addOptOutProvider(_:forRequest:)();
}

uint64_t MetricsFieldsAggregator.init(bag:accountProvider:bundle:)()
{
  return MetricsFieldsAggregator.init(bag:accountProvider:bundle:)();
}

uint64_t type metadata accessor for MetricsFieldsAggregator()
{
  return type metadata accessor for MetricsFieldsAggregator();
}

uint64_t CustomJSValueConvertible.jsRepresentation(in:)()
{
  return CustomJSValueConvertible.jsRepresentation(in:)();
}

JSValue __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CustomJSValueConvertible._jsValue(in:)(JSContext in)
{
  return (JSValue)CustomJSValueConvertible._jsValue(in:)(in.super.isa);
}

uint64_t EmptyActionImplementation.init()()
{
  return EmptyActionImplementation.init()();
}

uint64_t ClosureActionImplementation.init(scheduler:)()
{
  return ClosureActionImplementation.init(scheduler:)();
}

uint64_t CompoundActionImplementation.init()()
{
  return CompoundActionImplementation.init()();
}

uint64_t MetricsFieldExclusionRequest.init(rawValue:)()
{
  return MetricsFieldExclusionRequest.init(rawValue:)();
}

uint64_t MetricsFieldExclusionRequest.rawValue.getter()
{
  return MetricsFieldExclusionRequest.rawValue.getter();
}

uint64_t type metadata accessor for MetricsFieldExclusionRequest()
{
  return type metadata accessor for MetricsFieldExclusionRequest();
}

uint64_t MetricsFieldInclusionRequest.init(rawValue:)()
{
  return MetricsFieldInclusionRequest.init(rawValue:)();
}

uint64_t MetricsFieldInclusionRequest.rawValue.getter()
{
  return MetricsFieldInclusionRequest.rawValue.getter();
}

uint64_t type metadata accessor for MetricsFieldInclusionRequest()
{
  return type metadata accessor for MetricsFieldInclusionRequest();
}

uint64_t type metadata accessor for MetricsFieldsProviderCategory()
{
  return type metadata accessor for MetricsFieldsProviderCategory();
}

uint64_t Bag.amsBag.getter()
{
  return Bag.amsBag.getter();
}

uint64_t static Bag.fetchBag(forProfile:wantsAutomaticUpdates:)()
{
  return static Bag.fetchBag(forProfile:wantsAutomaticUpdates:)();
}

uint64_t Bag.subscript.getter()
{
  return Bag.subscript.getter();
}

{
  return Bag.subscript.getter();
}

{
  return Bag.subscript.getter();
}

{
  return Bag.subscript.getter();
}

uint64_t Bag.init(from:)()
{
  return Bag.init(from:)();
}

uint64_t Bag.Value.currentOrNil()()
{
  return Bag.Value.currentOrNil()();
}

uint64_t Bag.Value.current(or:)()
{
  return Bag.Value.current(or:)();
}

uint64_t Bag.Value.promise()()
{
  return Bag.Value.promise()();
}

uint64_t Bag.Profile.init(name:version:)()
{
  return Bag.Profile.init(name:version:)();
}

uint64_t Bag.Profile.name.getter()
{
  return Bag.Profile.name.getter();
}

uint64_t Bag.Profile.version.getter()
{
  return Bag.Profile.version.getter();
}

uint64_t type metadata accessor for Bag.Profile()
{
  return type metadata accessor for Bag.Profile();
}

uint64_t type metadata accessor for Bag()
{
  return type metadata accessor for Bag();
}

uint64_t Device.systemName.getter()
{
  return Device.systemName.getter();
}

uint64_t Device.modelFamily.getter()
{
  return Device.modelFamily.getter();
}

uint64_t Device.buildVersion.getter()
{
  return Device.buildVersion.getter();
}

uint64_t Device.physicalModel.getter()
{
  return Device.physicalModel.getter();
}

uint64_t static Device.current.getter()
{
  return static Device.current.getter();
}

uint64_t type metadata accessor for Device()
{
  return type metadata accessor for Device();
}

uint64_t dispatch thunk of Logger.log(contentsOf:withLevel:)()
{
  return dispatch thunk of Logger.log(contentsOf:withLevel:)();
}

uint64_t Logger.withOutputFiltered(byName:defaultVerbosityLevel:)()
{
  return Logger.withOutputFiltered(byName:defaultVerbosityLevel:)();
}

uint64_t Logger.info(_:)()
{
  return Logger.info(_:)();
}

uint64_t Logger.debug(_:)()
{
  return Logger.debug(_:)();
}

uint64_t Logger.error(_:)()
{
  return Logger.error(_:)();
}

uint64_t Logger.warning(_:)()
{
  return Logger.warning(_:)();
}

uint64_t inject<A>(_:from:)()
{
  return inject<A>(_:from:)();
}

uint64_t inject<A, B>(_:from:)()
{
  return inject<A, B>(_:from:)();
}

uint64_t Account.acAccountCopy.getter()
{
  return Account.acAccountCopy.getter();
}

uint64_t Account.subscript.getter()
{
  return Account.subscript.getter();
}

uint64_t Account.value(forFlag:)()
{
  return Account.value(forFlag:)();
}

uint64_t Account.cookies(for:)()
{
  return Account.cookies(for:)();
}

uint64_t Account.init(wrapping:)()
{
  return Account.init(wrapping:)();
}

uint64_t type metadata accessor for Account()
{
  return type metadata accessor for Account();
}

uint64_t JSError.jsRepresentation(in:)()
{
  return JSError.jsRepresentation(in:)();
}

uint64_t JSError.line.getter()
{
  return JSError.line.getter();
}

uint64_t JSError.column.getter()
{
  return JSError.column.getter();
}

uint64_t JSError.init(message:line:column:sourceURL:constructorName:)()
{
  return JSError.init(message:line:column:sourceURL:constructorName:)();
}

uint64_t JSError.message.getter()
{
  return JSError.message.getter();
}

uint64_t JSError.init(badValue:expected:)()
{
  return JSError.init(badValue:expected:)();
}

JSValue __swiftcall JSError.makeValue(in:)(JSContext in)
{
  return (JSValue)JSError.makeValue(in:)(in.super.isa);
}

uint64_t JSError.sourceURL.getter()
{
  return JSError.sourceURL.getter();
}

uint64_t type metadata accessor for JSError()
{
  return type metadata accessor for JSError();
}

uint64_t JSRoute.init(service:function:)()
{
  return JSRoute.init(service:function:)();
}

uint64_t type metadata accessor for JSRoute()
{
  return type metadata accessor for JSRoute();
}

uint64_t type metadata accessor for JSStack.Prerequisite()
{
  return type metadata accessor for JSStack.Prerequisite();
}

uint64_t JSStack.performRequest(_:)()
{
  return JSStack.performRequest(_:)();
}

uint64_t JSStack.withUnsafeContext(_:)()
{
  return JSStack.withUnsafeContext(_:)();
}

Swift::Void __swiftcall JSStack.makeRemoteInspectable()()
{
}

Swift::Void __swiftcall JSStack.requestGarbageCollection()()
{
}

uint64_t JSStack.StandardGlobalConfiguration.isProtocolHandlingEnabled.setter()
{
  return JSStack.StandardGlobalConfiguration.isProtocolHandlingEnabled.setter();
}

uint64_t static JSStack.StandardGlobalConfiguration.default.getter()
{
  return static JSStack.StandardGlobalConfiguration.default.getter();
}

uint64_t type metadata accessor for JSStack.StandardGlobalConfiguration()
{
  return type metadata accessor for JSStack.StandardGlobalConfiguration();
}

uint64_t JSStack.notify(withName:)()
{
  return JSStack.notify(withName:)();
}

uint64_t JSStack.__allocating_init(asPartOf:virtualMachine:configuration:customPrerequisites:)()
{
  return JSStack.__allocating_init(asPartOf:virtualMachine:configuration:customPrerequisites:)();
}

uint64_t type metadata accessor for JSStack()
{
  return type metadata accessor for JSStack();
}

uint64_t Promise.makeCompletionAdapter()()
{
  return Promise.makeCompletionAdapter()();
}

uint64_t Promise.map<A>(on:_:)()
{
  return Promise.map<A>(on:_:)();
}

uint64_t Promise.join<A>(with:)()
{
  return Promise.join<A>(with:)();
}

uint64_t Promise.then(perform:orCatchError:on:)()
{
  return Promise.then(perform:orCatchError:on:)();
}

uint64_t Promise.__allocating_init(error:)()
{
  return Promise.__allocating_init(error:)();
}

uint64_t Promise.__allocating_init(value:)()
{
  return Promise.__allocating_init(value:)();
}

uint64_t Promise.always(on:perform:)()
{
  return Promise.always(on:perform:)();
}

uint64_t Promise.reject(_:)()
{
  return Promise.reject(_:)();
}

uint64_t Promise.flatMap<A>(on:_:)()
{
  return Promise.flatMap<A>(on:_:)();
}

uint64_t Promise.resolve(_:)()
{
  return Promise.resolve(_:)();
}

uint64_t Promise<A>.withDependenciesSatisfied.getter()
{
  return Promise<A>.withDependenciesSatisfied.getter();
}

uint64_t Promise<A>.init(_:)()
{
  return Promise<A>.init(_:)();
}

{
  return Promise<A>.init(_:)();
}

uint64_t Promise.__allocating_init()()
{
  return Promise.__allocating_init()();
}

uint64_t OSLogger.Subsystem.init(rawValue:)()
{
  return OSLogger.Subsystem.init(rawValue:)();
}

uint64_t type metadata accessor for OSLogger.Subsystem()
{
  return type metadata accessor for OSLogger.Subsystem();
}

uint64_t OSLogger.init(subsystem:category:)()
{
  return OSLogger.init(subsystem:category:)();
}

uint64_t type metadata accessor for OSLogger()
{
  return type metadata accessor for OSLogger();
}

uint64_t static Pipeline.start<A>(with:)()
{
  return static Pipeline.start<A>(with:)();
}

uint64_t JSONArray.compactMap<A>(_:)()
{
  return JSONArray.compactMap<A>(_:)();
}

uint64_t type metadata accessor for JSONArray()
{
  return type metadata accessor for JSONArray();
}

uint64_t type metadata accessor for JSONError()
{
  return type metadata accessor for JSONError();
}

uint64_t JSPromise.init(in:executor:)()
{
  return JSPromise.init(in:executor:)();
}

uint64_t JSPromise.value.getter()
{
  return JSPromise.value.getter();
}

uint64_t type metadata accessor for JSPromise()
{
  return type metadata accessor for JSPromise();
}

uint64_t JSRequest.addingOption(_:withName:)()
{
  return JSRequest.addingOption(_:withName:)();
}

uint64_t JSRequest.removingOption(withName:)()
{
  return JSRequest.removingOption(withName:)();
}

uint64_t JSRequest.init(route:timeoutInterval:version:)()
{
  return JSRequest.init(route:timeoutInterval:version:)();
}

uint64_t JSRequest.route.getter()
{
  return JSRequest.route.getter();
}

uint64_t JSRequest.options.getter()
{
  return JSRequest.options.getter();
}

uint64_t type metadata accessor for JSRequest()
{
  return type metadata accessor for JSRequest();
}

uint64_t dispatch thunk of Localizer.formattedDate(format:date:inSentence:)()
{
  return dispatch thunk of Localizer.formattedDate(format:date:inSentence:)();
}

uint64_t dispatch thunk of Localizer.formattedCount(_:)()
{
  return dispatch thunk of Localizer.formattedCount(_:)();
}

uint64_t dispatch thunk of Localizer.locale.getter()
{
  return dispatch thunk of Localizer.locale.getter();
}

uint64_t dispatch thunk of Localizer.decimal(forNumber:minimumFractionDigits:maximumFractionDigits:in:)()
{
  return dispatch thunk of Localizer.decimal(forNumber:minimumFractionDigits:maximumFractionDigits:in:)();
}

uint64_t dispatch thunk of Localizer.fileSize(forBytes:)()
{
  return dispatch thunk of Localizer.fileSize(forBytes:)();
}

uint64_t Localizer.relativeDate(_:)()
{
  return Localizer.relativeDate(_:)();
}

uint64_t Localizer.formattedDate(format:date:)()
{
  return Localizer.formattedDate(format:date:)();
}

Swift::String __swiftcall Localizer.string(forKey:)(Swift::String forKey)
{
  uint64_t v1 = Localizer.string(forKey:)(forKey._countAndFlagsBits, forKey._object);
  result._object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

Swift::String __swiftcall Localizer.string(withCount:forKey:)(Swift::Int withCount, Swift::String forKey)
{
  uint64_t v2 = Localizer.string(withCount:forKey:)(withCount, forKey._countAndFlagsBits, forKey._object);
  result._object = v3;
  result._uint64_t countAndFlagsBits = v2;
  return result;
}

uint64_t SyncEvent.addObserver<A>(_:)()
{
  return SyncEvent.addObserver<A>(_:)();
}

uint64_t SyncEvent.removeObserver(_:)()
{
  return SyncEvent.removeObserver(_:)();
}

uint64_t SyncEvent.post(_:)()
{
  return SyncEvent.post(_:)();
}

uint64_t SyncEvent.init()()
{
  return SyncEvent.init()();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

Swift::Void __swiftcall Dictionary.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return String.data(using:allowLossyConversion:)();
}

uint64_t String.init(format:locale:arguments:)()
{
  return String.init(format:locale:arguments:)();
}

uint64_t String.init(format:_:)()
{
  return String.init(format:_:)();
}

uint64_t static String.Encoding.utf8.getter()
{
  return static String.Encoding.utf8.getter();
}

uint64_t type metadata accessor for String.Encoding()
{
  return type metadata accessor for String.Encoding();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = String.lowercased()();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t String.init<A>(reflecting:)()
{
  return String.init<A>(reflecting:)();
}

Swift::Void __swiftcall String.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return static String._uncheckedFromUTF8(_:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

uint64_t String.index(after:)()
{
  return String.index(after:)();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return String.index(_:offsetBy:limitedBy:)();
}

uint64_t String.append<A>(contentsOf:)()
{
  return String.append<A>(contentsOf:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return String.UTF8View._foreignIndex(after:)();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return String.UTF8View._foreignIndex(_:offsetBy:)();
}

uint64_t String.UTF8View._foreignDistance(from:to:)()
{
  return String.UTF8View._foreignDistance(from:to:)();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return String.UTF8View._foreignSubscript(position:)();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return String.UTF16View.index(_:offsetBy:)();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return String.hasPrefix(_:)(a1._countAndFlagsBits, a1._object);
}

uint64_t String.init<A>(_:)()
{
  return String.init<A>(_:)();
}

uint64_t String.subscript.getter()
{
  return String.subscript.getter();
}

uint64_t dispatch thunk of RawRepresentable.init(rawValue:)()
{
  return dispatch thunk of RawRepresentable.init(rawValue:)();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t Array<A>.init(deserializing:using:)()
{
  return Array<A>.init(deserializing:using:)();
}

{
  return Array<A>.init(deserializing:using:)();
}

uint64_t Array<A>.init(tryDeserializing:using:)()
{
  return Array<A>.init(tryDeserializing:using:)();
}

{
  return Array<A>.init(tryDeserializing:using:)();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return CheckedContinuation.resume(throwing:)();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t TaskGroup.makeAsyncIterator()()
{
  return TaskGroup.makeAsyncIterator()();
}

uint64_t static TaskPriority.utility.getter()
{
  return static TaskPriority.utility.getter();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

uint64_t ThrowingTaskGroup.makeAsyncIterator()()
{
  return ThrowingTaskGroup.makeAsyncIterator()();
}

Swift::Void __swiftcall ThrowingTaskGroup.cancelAll()()
{
}

uint64_t dispatch thunk of AsyncSequence.makeAsyncIterator()()
{
  return dispatch thunk of AsyncSequence.makeAsyncIterator()();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)Set._bridgeToObjectiveC()();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t Set.Index._asCocoa.modify()
{
  return Set.Index._asCocoa.modify();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return Set.Iterator.init(_cocoa:)();
}

uint64_t static AMSURLSession.forJetEngineStorefront(with:for:usingProtocol:)()
{
  return static AMSURLSession.forJetEngineStorefront(with:for:usingProtocol:)();
}

uint64_t OS_dispatch_group.wait(timeout:)()
{
  return OS_dispatch_group.wait(timeout:)();
}

uint64_t static OS_dispatch_queue.Attributes.concurrent.getter()
{
  return static OS_dispatch_queue.Attributes.concurrent.getter();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:execute:)()
{
  return OS_dispatch_queue.asyncAfter(deadline:execute:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t OS_dispatch_queue.sync<A>(flags:execute:)()
{
  return OS_dispatch_queue.sync<A>(flags:execute:)();
}

uint64_t OS_dispatch_queue.sync<A>(execute:)()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t static OS_dispatch_queue.global(qos:)()
{
  return static OS_dispatch_queue.global(qos:)();
}

uint64_t OS_dispatch_queue.schedule(task:)()
{
  return OS_dispatch_queue.schedule(task:)();
}

uint64_t static OS_dispatch_source.makeSignalSource(signal:queue:)()
{
  return static OS_dispatch_source.makeSignalSource(signal:queue:)();
}

uint64_t static OS_dispatch_source.MemoryPressureEvent.warning.getter()
{
  return static OS_dispatch_source.MemoryPressureEvent.warning.getter();
}

uint64_t type metadata accessor for OS_dispatch_source.MemoryPressureEvent()
{
  return type metadata accessor for OS_dispatch_source.MemoryPressureEvent();
}

uint64_t static OS_dispatch_source.makeMemoryPressureSource(eventMask:queue:)()
{
  return static OS_dispatch_source.makeMemoryPressureSource(eventMask:queue:)();
}

uint64_t OS_dispatch_source.setEventHandler(qos:flags:handler:)()
{
  return OS_dispatch_source.setEventHandler(qos:flags:handler:)();
}

Swift::Void __swiftcall OS_dispatch_source.resume()()
{
}

uint64_t static os_signpost_type_t.end.getter()
{
  return static os_signpost_type_t.end.getter();
}

uint64_t static os_signpost_type_t.begin.getter()
{
  return static os_signpost_type_t.begin.getter();
}

uint64_t static os_signpost_type_t.event.getter()
{
  return static os_signpost_type_t.event.getter();
}

Swift::Void __swiftcall OS_dispatch_semaphore.wait()()
{
}

Swift::Int __swiftcall OS_dispatch_semaphore.signal()()
{
  return OS_dispatch_semaphore.signal()();
}

uint64_t JSValue.makeJSONObject()()
{
  return JSValue.makeJSONObject()();
}

uint64_t JSValue.string.getter()
{
  return JSValue.string.getter();
}

uint64_t static JSValue.makeError(from:in:)()
{
  return static JSValue.makeError(from:in:)();
}

uint64_t JSValue.subscript.setter()
{
  return JSValue.subscript.setter();
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t NSObject.hash(into:)()
{
  return NSObject.hash(into:)();
}

uint64_t NSObject.hashValue.getter()
{
  return NSObject.hashValue.getter();
}

uint64_t static JSContext.requiredCurrent.getter()
{
  return static JSContext.requiredCurrent.getter();
}

uint64_t JSContext.propagateErrorsToExceptions(_:)()
{
  return JSContext.propagateErrorsToExceptions(_:)();
}

uint64_t static OS_os_log.default.getter()
{
  return static OS_os_log.default.getter();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

Swift::String __swiftcall Substring.lowercased()()
{
  uint64_t v0 = Substring.lowercased()();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t Substring.init<A>(_:)()
{
  return Substring.init<A>(_:)();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return StringProtocol.components<A>(separatedBy:)();
}

uint64_t StringProtocol.rangeOfCharacter(from:options:range:)()
{
  return StringProtocol.rangeOfCharacter(from:options:range:)();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of SetAlgebra.isSuperset(of:)()
{
  return dispatch thunk of SetAlgebra.isSuperset(of:)();
}

uint64_t dispatch thunk of SetAlgebra.intersection(_:)()
{
  return dispatch thunk of SetAlgebra.intersection(_:)();
}

uint64_t dispatch thunk of SetAlgebra.formUnion(_:)()
{
  return dispatch thunk of SetAlgebra.formUnion(_:)();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return _HashTable.nextHole(atOrAfter:)();
}

uint64_t __CocoaSet.startIndex.getter()
{
  return __CocoaSet.startIndex.getter();
}

uint64_t __CocoaSet.makeIterator()()
{
  return __CocoaSet.makeIterator()();
}

uint64_t __CocoaSet.Index.handleBitPattern.getter()
{
  return __CocoaSet.Index.handleBitPattern.getter();
}

uint64_t __CocoaSet.Index.age.getter()
{
  return __CocoaSet.Index.age.getter();
}

uint64_t __CocoaSet.Index.element.getter()
{
  return __CocoaSet.Index.element.getter();
}

uint64_t __CocoaSet.count.getter()
{
  return __CocoaSet.count.getter();
}

uint64_t __CocoaSet.member(for:)()
{
  return __CocoaSet.member(for:)();
}

uint64_t __CocoaSet.element(at:)()
{
  return __CocoaSet.element(at:)();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return __CocoaSet.Iterator.next()();
}

uint64_t __CocoaSet.contains(_:)()
{
  return __CocoaSet.contains(_:)();
}

uint64_t __CocoaSet.formIndex(after:isUnique:)()
{
  return __CocoaSet.formIndex(after:isUnique:)();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return static _SetStorage.convert(_:capacity:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t type metadata accessor for ContinuousClock.Instant()
{
  return type metadata accessor for ContinuousClock.Instant();
}

uint64_t ContinuousClock.init()()
{
  return ContinuousClock.init()();
}

uint64_t type metadata accessor for ContinuousClock()
{
  return type metadata accessor for ContinuousClock();
}

uint64_t dispatch thunk of InstantProtocol.advanced(by:)()
{
  return dispatch thunk of InstantProtocol.advanced(by:)();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t __CocoaDictionary.makeIterator()()
{
  return __CocoaDictionary.makeIterator()();
}

uint64_t __CocoaDictionary.count.getter()
{
  return __CocoaDictionary.count.getter();
}

uint64_t __CocoaDictionary.Iterator.next()()
{
  return __CocoaDictionary.Iterator.next()();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.convert(_:capacity:)()
{
  return static _DictionaryStorage.convert(_:capacity:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _SwiftNewtypeWrapper<>._toCustomAnyHashable()()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t _getErrorEmbeddedNSError<A>(_:)()
{
  return _getErrorEmbeddedNSError<A>(_:)();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return _bridgeAnythingToObjectiveC<A>(_:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()
{
  return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t dispatch thunk of Clock.now.getter()
{
  return dispatch thunk of Clock.now.getter();
}

uint64_t Error.localizedDescription.getter()
{
  return Error.localizedDescription.getter();
}

uint64_t Error._getEmbeddedNSError()()
{
  return Error._getEmbeddedNSError()();
}

uint64_t Error._code.getter()
{
  return Error._code.getter();
}

uint64_t Error._domain.getter()
{
  return Error._domain.getter();
}

uint64_t Error._userInfo.getter()
{
  return Error._userInfo.getter();
}

uint64_t static Hasher._hash(seed:bytes:count:)()
{
  return static Hasher._hash(seed:bytes:count:)();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

NSNumber __swiftcall UInt64._bridgeToObjectiveC()()
{
  return (NSNumber)UInt64._bridgeToObjectiveC()();
}

uint64_t static UInt64._forceBridgeFromObjectiveC(_:result:)()
{
  return static UInt64._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static UInt64._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static UInt64._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static UInt64._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static UInt64._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t _typeName(_:qualified:)()
{
  return _typeName(_:qualified:)();
}

uint64_t AMSHashIfNeeded()
{
  return _AMSHashIfNeeded();
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return _CC_SHA256(data, len, md);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return _CFPreferencesCopyAppValue(key, applicationID);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return _CFPreferencesGetAppBooleanValue(key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
}

void CFRelease(CFTypeRef cf)
{
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return _CFRunLoopGetMain();
}

CFRunLoopRunResult CFRunLoopRunInMode(CFRunLoopMode mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled)
{
  return _CFRunLoopRunInMode(mode, seconds, returnAfterSourceHandled);
}

void CFRunLoopStop(CFRunLoopRef rl)
{
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return _CGAffineTransformMakeScale(retstr, sx, sy);
}

uint64_t JECountFormatterMakeStringFromNumber()
{
  return _JECountFormatterMakeStringFromNumber();
}

uint64_t JSRemoteInspectorSetInspectionEnabledByDefault()
{
  return _JSRemoteInspectorSetInspectionEnabledByDefault();
}

uint64_t MGCopyAnswer()
{
  return _MGCopyAnswer();
}

uint64_t MGGetFloat32Answer()
{
  return _MGGetFloat32Answer();
}

uint64_t MGGetSInt32Answer()
{
  return _MGGetSInt32Answer();
}

uint64_t MGGetStringAnswer()
{
  return _MGGetStringAnswer();
}

uint64_t NSStringFromBOOL()
{
  return _NSStringFromBOOL();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFRunLoopSetPerCalloutAutoreleasepoolEnabled()
{
  return __CFRunLoopSetPerCalloutAutoreleasepoolEnabled();
}

uint64_t _MGCopyAnswerWithMode()
{
  return __MGCopyAnswerWithMode();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

int *__error(void)
{
  return ___error();
}

{
}

{
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _set_user_dir_suffix()
{
  return __set_user_dir_suffix();
}

uint64_t _sl_dlopen()
{
  return __sl_dlopen();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

uint64_t abort_report_np()
{
  return _abort_report_np();
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
}

pid_t audit_token_to_pid(audit_token_t *atoken)
{
  return _audit_token_to_pid(atoken);
}

void bzero(void *a1, size_t a2)
{
}

Method class_getClassMethod(Class cls, SEL name)
{
  return _class_getClassMethod(cls, name);
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

void exit(int a1)
{
}

void free(void *a1)
{
}

pid_t getpid(void)
{
  return _getpid();
}

IMP imp_implementationWithBlock(id block)
{
  return _imp_implementationWithBlock(block);
}

uint64_t malloc_engaged_nano()
{
  return _malloc_engaged_nano();
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

IMP method_getImplementation(Method m)
{
  return _method_getImplementation(m);
}

IMP method_setImplementation(Method m, IMP imp)
{
  return _method_setImplementation(m, imp);
}

uint32_t notify_cancel(int token)
{
  return _notify_cancel(token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return _notify_get_state(token, state64);
}

uint32_t notify_post(const char *name)
{
  return _notify_post(name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return _notify_register_check(name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return _notify_set_state(token, state64);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_begin_catch(void *exc_buf)
{
  return _objc_begin_catch(exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_rethrow(void)
{
}

void objc_exception_throw(id exception)
{
}

Class objc_getClass(const char *name)
{
  return _objc_getClass(name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return _objc_getProperty(self, _cmd, offset, atomic);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return _objc_msgSendSuper2(a1, a2);
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return _objc_storeWeak(location, obj);
}

void objc_terminate(void)
{
}

uint64_t os_eligibility_get_domain_answer()
{
  return _os_eligibility_get_domain_answer();
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return _os_log_create(subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return _os_signpost_enabled(log);
}

uint64_t os_transaction_create()
{
  return _os_transaction_create();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_content()
{
  return _os_variant_has_internal_content();
}

const char *__cdecl sel_getName(SEL sel)
{
  return _sel_getName(sel);
}

int setenv(const char *__name, const char *__value, int __overwrite)
{
  return _setenv(__name, __value, __overwrite);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return _swift_allocateGenericClassMetadata();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_conformsToProtocol2()
{
  return _swift_conformsToProtocol2();
}

uint64_t swift_continuation_init()
{
  return _swift_continuation_init();
}

uint64_t swift_continuation_throwingResume()
{
  return _swift_continuation_throwingResume();
}

uint64_t swift_deallocClassInstance()
{
  return _swift_deallocClassInstance();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getDynamicType()
{
  return _swift_getDynamicType();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getKeyPath()
{
  return _swift_getKeyPath();
}

uint64_t swift_getMetatypeMetadata()
{
  return _swift_getMetatypeMetadata();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTupleTypeLayout2()
{
  return _swift_getTupleTypeLayout2();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initClassMetadata2()
{
  return _swift_initClassMetadata2();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return _swift_initEnumMetadataMultiPayload();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return _swift_initEnumMetadataSinglePayload();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_projectBox()
{
  return _swift_projectBox();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return _swift_stdlib_isStackAllocationSafe();
}

uint64_t swift_stdlib_random()
{
  return _swift_stdlib_random();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRelease_n()
{
  return _swift_unknownObjectRelease_n();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return _swift_unknownObjectWeakAssign();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _[a1 URL];
}

id objc_msgSend_URLForLockupID_ofKind_offerFlags_queryParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForLockupID:ofKind:offerFlags:queryParameters:");
}

id objc_msgSend_URLForLockupID_ofKind_withOfferFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForLockupID:ofKind:withOfferFlags:");
}

id objc_msgSend_URLPathAllowedCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 URLPathAllowedCharacterSet];
}

id objc_msgSend_URLTemplate(void *a1, const char *a2, ...)
{
  return _[a1 URLTemplate];
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _[a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _[a1 UUIDString];
}

id objc_msgSend__init(void *a1, const char *a2, ...)
{
  return _[a1 _init];
}

id objc_msgSend__initWithID_kind_context_clientID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithID:kind:context:clientID:");
}

id objc_msgSend__initWithID_kind_context_clientID_enableAppDistribution_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithID:kind:context:clientID:enableAppDistribution:");
}

id objc_msgSend__initWithID_kind_context_clientID_productVariantID_enableAppDistribution_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithID:kind:context:clientID:productVariantID:enableAppDistribution:");
}

id objc_msgSend__initWithID_kind_context_enableAppDistribution_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithID:kind:context:enableAppDistribution:");
}

id objc_msgSend__initWithID_kind_context_minExternalVersionID_latestReleaseID_productVariantID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithID:kind:context:minExternalVersionID:latestReleaseID:productVariantID:");
}

id objc_msgSend__initWithID_kind_context_platformOverride_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithID:kind:context:platformOverride:");
}

id objc_msgSend__initWithIDs_kind_context_clientID_enableAppDistribution_mediaQueryParams_platformOverride_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithIDs:kind:context:clientID:enableAppDistribution:mediaQueryParams:platformOverride:");
}

id objc_msgSend__lockupRequestWithClientID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lockupRequestWithClientID:");
}

id objc_msgSend__lockupRequestWithPlatformOverride_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lockupRequestWithPlatformOverride:");
}

id objc_msgSend_accountPropertyForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountPropertyForKey:");
}

id objc_msgSend_accountStore(void *a1, const char *a2, ...)
{
  return _[a1 accountStore];
}

id objc_msgSend_activePairedSystemVersion(void *a1, const char *a2, ...)
{
  return _[a1 activePairedSystemVersion];
}

id objc_msgSend_activeiTunesAccount(void *a1, const char *a2, ...)
{
  return _[a1 activeiTunesAccount];
}

id objc_msgSend_addBool_withName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBool:withName:");
}

id objc_msgSend_addDouble_withName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDouble:withName:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addErrorBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addErrorBlock:");
}

id objc_msgSend_addFinishBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFinishBlock:");
}

id objc_msgSend_addInteger_withName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addInteger:withName:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObject_withName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:withName:");
}

id objc_msgSend_addObserver_forKeyPath_options_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:forKeyPath:options:context:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperation:");
}

id objc_msgSend_addSensitiveObject_withName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSensitiveObject:withName:");
}

id objc_msgSend_addSuccessBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSuccessBlock:");
}

id objc_msgSend_addUInt64_withName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addUInt64:withName:");
}

id objc_msgSend_additionalHeaders(void *a1, const char *a2, ...)
{
  return _[a1 additionalHeaders];
}

id objc_msgSend_ageRating(void *a1, const char *a2, ...)
{
  return _[a1 ageRating];
}

id objc_msgSend_alertButtonOffer(void *a1, const char *a2, ...)
{
  return _[a1 alertButtonOffer];
}

id objc_msgSend_alertButtonTitle(void *a1, const char *a2, ...)
{
  return _[a1 alertButtonTitle];
}

id objc_msgSend_alertFooterMessage(void *a1, const char *a2, ...)
{
  return _[a1 alertFooterMessage];
}

id objc_msgSend_alertMessage(void *a1, const char *a2, ...)
{
  return _[a1 alertMessage];
}

id objc_msgSend_alertTitle(void *a1, const char *a2, ...)
{
  return _[a1 alertTitle];
}

id objc_msgSend_ams_activeiTunesAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_activeiTunesAccount");
}

id objc_msgSend_ams_localiTunesAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_localiTunesAccount");
}

id objc_msgSend_ams_storefront(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_storefront");
}

id objc_msgSend_animationName(void *a1, const char *a2, ...)
{
  return _[a1 animationName];
}

id objc_msgSend_appOffer(void *a1, const char *a2, ...)
{
  return _[a1 appOffer];
}

id objc_msgSend_appVersionId(void *a1, const char *a2, ...)
{
  return _[a1 appVersionId];
}

id objc_msgSend_appendBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendBytes:length:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_arrayByAddingObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByAddingObject:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_artwork(void *a1, const char *a2, ...)
{
  return _[a1 artwork];
}

id objc_msgSend_asc_dictionaryByMergingDictionary_uniquingKeysWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "asc_dictionaryByMergingDictionary:uniquingKeysWithBlock:");
}

id objc_msgSend_asc_realMainBundle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "asc_realMainBundle");
}

id objc_msgSend_asc_sha246HashData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "asc_sha246HashData");
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedStringWithOptions:");
}

id objc_msgSend_baseBuyParams(void *a1, const char *a2, ...)
{
  return _[a1 baseBuyParams];
}

id objc_msgSend_baseImageName(void *a1, const char *a2, ...)
{
  return _[a1 baseImageName];
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_buffer(void *a1, const char *a2, ...)
{
  return _[a1 buffer];
}

id objc_msgSend_bundleID(void *a1, const char *a2, ...)
{
  return _[a1 bundleID];
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 bundleIdentifier];
}

id objc_msgSend_bundleWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleWithPath:");
}

id objc_msgSend_buyOffer(void *a1, const char *a2, ...)
{
  return _[a1 buyOffer];
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _[a1 bytes];
}

id objc_msgSend_cachedValues(void *a1, const char *a2, ...)
{
  return _[a1 cachedValues];
}

id objc_msgSend_cancellable(void *a1, const char *a2, ...)
{
  return _[a1 cancellable];
}

id objc_msgSend_capabilities(void *a1, const char *a2, ...)
{
  return _[a1 capabilities];
}

id objc_msgSend_category(void *a1, const char *a2, ...)
{
  return _[a1 category];
}

id objc_msgSend_checkRestrictionsForContentRating(void *a1, const char *a2, ...)
{
  return _[a1 checkRestrictionsForContentRating];
}

id objc_msgSend_clientID(void *a1, const char *a2, ...)
{
  return _[a1 clientID];
}

id objc_msgSend_clone(void *a1, const char *a2, ...)
{
  return _[a1 clone];
}

id objc_msgSend_combineBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "combineBool:");
}

id objc_msgSend_combineBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "combineBytes:length:");
}

id objc_msgSend_combineDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "combineDouble:");
}

id objc_msgSend_combineInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "combineInteger:");
}

id objc_msgSend_combineObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "combineObject:");
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:");
}

id objc_msgSend_compare_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:options:");
}

id objc_msgSend_completionOffer(void *a1, const char *a2, ...)
{
  return _[a1 completionOffer];
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsValueForKey:");
}

id objc_msgSend_contentProviderTeamID(void *a1, const char *a2, ...)
{
  return _[a1 contentProviderTeamID];
}

id objc_msgSend_contentRatingsBySystem(void *a1, const char *a2, ...)
{
  return _[a1 contentRatingsBySystem];
}

id objc_msgSend_context(void *a1, const char *a2, ...)
{
  return _[a1 context];
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_copyWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyWithZone:");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_currentContext(void *a1, const char *a2, ...)
{
  return _[a1 currentContext];
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _[a1 data];
}

id objc_msgSend_dataSource(void *a1, const char *a2, ...)
{
  return _[a1 dataSource];
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataWithLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithLength:");
}

id objc_msgSend_dateRange(void *a1, const char *a2, ...)
{
  return _[a1 dateRange];
}

id objc_msgSend_dateRanges(void *a1, const char *a2, ...)
{
  return _[a1 dateRanges];
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceNow:");
}

id objc_msgSend_decodeArrayOfObjectsOfClass_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeArrayOfObjectsOfClass:forKey:");
}

id objc_msgSend_decodeBoolForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeBoolForKey:");
}

id objc_msgSend_decodeDoubleForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeDoubleForKey:");
}

id objc_msgSend_decodeFloatForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeFloatForKey:");
}

id objc_msgSend_decodeInt64ForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeInt64ForKey:");
}

id objc_msgSend_decodeIntegerForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeIntegerForKey:");
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClass:forKey:");
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClasses:forKey:");
}

id objc_msgSend_decoration(void *a1, const char *a2, ...)
{
  return _[a1 decoration];
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _[a1 defaultCenter];
}

id objc_msgSend_defaultFields(void *a1, const char *a2, ...)
{
  return _[a1 defaultFields];
}

id objc_msgSend_defaultOffer(void *a1, const char *a2, ...)
{
  return _[a1 defaultOffer];
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return _[a1 defaultWorkspace];
}

id objc_msgSend_describeObject(void *a1, const char *a2, ...)
{
  return _[a1 describeObject];
}

id objc_msgSend_describeProperties(void *a1, const char *a2, ...)
{
  return _[a1 describeProperties];
}

id objc_msgSend_developerId(void *a1, const char *a2, ...)
{
  return _[a1 developerId];
}

id objc_msgSend_developerName(void *a1, const char *a2, ...)
{
  return _[a1 developerName];
}

id objc_msgSend_deviceCornerRadiusFactor(void *a1, const char *a2, ...)
{
  return _[a1 deviceCornerRadiusFactor];
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _[a1 dictionary];
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_displayContext(void *a1, const char *a2, ...)
{
  return _[a1 displayContext];
}

id objc_msgSend_distributorBundleId(void *a1, const char *a2, ...)
{
  return _[a1 distributorBundleId];
}

id objc_msgSend_distributorId(void *a1, const char *a2, ...)
{
  return _[a1 distributorId];
}

id objc_msgSend_doesNotRecognizeSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doesNotRecognizeSelector:");
}

id objc_msgSend_enableAppDistribution(void *a1, const char *a2, ...)
{
  return _[a1 enableAppDistribution];
}

id objc_msgSend_encodeBool_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeBool:forKey:");
}

id objc_msgSend_encodeDouble_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeDouble:forKey:");
}

id objc_msgSend_encodeFloat_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeFloat:forKey:");
}

id objc_msgSend_encodeInt64_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInt64:forKey:");
}

id objc_msgSend_encodeInteger_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInteger:forKey:");
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeObject:forKey:");
}

id objc_msgSend_endDate(void *a1, const char *a2, ...)
{
  return _[a1 endDate];
}

id objc_msgSend_enqueueOpenApplicationOperation_pendingResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueOpenApplicationOperation:pendingResult:");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_environment(void *a1, const char *a2, ...)
{
  return _[a1 environment];
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_eula(void *a1, const char *a2, ...)
{
  return _[a1 eula];
}

id objc_msgSend_exceptionWithName_reason_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exceptionWithName:reason:userInfo:");
}

id objc_msgSend_excludingFields(void *a1, const char *a2, ...)
{
  return _[a1 excludingFields];
}

id objc_msgSend_executionSeed(void *a1, const char *a2, ...)
{
  return _[a1 executionSeed];
}

id objc_msgSend_externalDeepLinkURL(void *a1, const char *a2, ...)
{
  return _[a1 externalDeepLinkURL];
}

id objc_msgSend_featureWithClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "featureWithClass:");
}

id objc_msgSend_features(void *a1, const char *a2, ...)
{
  return _[a1 features];
}

id objc_msgSend_fields(void *a1, const char *a2, ...)
{
  return _[a1 fields];
}

id objc_msgSend_finalizeDescription(void *a1, const char *a2, ...)
{
  return _[a1 finalizeDescription];
}

id objc_msgSend_finalizeHash(void *a1, const char *a2, ...)
{
  return _[a1 finalizeHash];
}

id objc_msgSend_finishWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishWithError:");
}

id objc_msgSend_finishWithResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishWithResult:");
}

id objc_msgSend_finishWithSuccess(void *a1, const char *a2, ...)
{
  return _[a1 finishWithSuccess];
}

id objc_msgSend_first(void *a1, const char *a2, ...)
{
  return _[a1 first];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_flags(void *a1, const char *a2, ...)
{
  return _[a1 flags];
}

id objc_msgSend_genreID(void *a1, const char *a2, ...)
{
  return _[a1 genreID];
}

id objc_msgSend_genreName(void *a1, const char *a2, ...)
{
  return _[a1 genreName];
}

id objc_msgSend_getActivePairedDevice(void *a1, const char *a2, ...)
{
  return _[a1 getActivePairedDevice];
}

id objc_msgSend_getAppLinksWithURL_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAppLinksWithURL:completionHandler:");
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _[a1 hash];
}

id objc_msgSend_heading(void *a1, const char *a2, ...)
{
  return _[a1 heading];
}

id objc_msgSend_headingKind(void *a1, const char *a2, ...)
{
  return _[a1 headingKind];
}

id objc_msgSend_height(void *a1, const char *a2, ...)
{
  return _[a1 height];
}

id objc_msgSend_host(void *a1, const char *a2, ...)
{
  return _[a1 host];
}

id objc_msgSend_iapItemID(void *a1, const char *a2, ...)
{
  return _[a1 iapItemID];
}

id objc_msgSend_iapItemName(void *a1, const char *a2, ...)
{
  return _[a1 iapItemName];
}

id objc_msgSend_iapProductName(void *a1, const char *a2, ...)
{
  return _[a1 iapProductName];
}

id objc_msgSend_icon(void *a1, const char *a2, ...)
{
  return _[a1 icon];
}

id objc_msgSend_id(void *a1, const char *a2, ...)
{
  return _[a1 id];
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _[a1 identifier];
}

id objc_msgSend_ids(void *a1, const char *a2, ...)
{
  return _[a1 ids];
}

id objc_msgSend_includingFields(void *a1, const char *a2, ...)
{
  return _[a1 includingFields];
}

id objc_msgSend_indexOfObjectPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObjectPassingTest:");
}

id objc_msgSend_initIndeterminate(void *a1, const char *a2, ...)
{
  return _[a1 initIndeterminate];
}

id objc_msgSend_initWithAppBundleId_isInstallSheetOpen_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAppBundleId:isInstallSheetOpen:completionHandler:");
}

id objc_msgSend_initWithAppOffer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAppOffer:");
}

id objc_msgSend_initWithBaseImageName_animationName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBaseImageName:animationName:");
}

id objc_msgSend_initWithBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleID:");
}

id objc_msgSend_initWithBundleId_productIdentifier_appName_productName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleId:productIdentifier:appName:productName:");
}

id objc_msgSend_initWithBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleIdentifier:");
}

id objc_msgSend_initWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytes:length:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithContentProviderTeamID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentProviderTeamID:");
}

id objc_msgSend_initWithData_invocationPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:invocationPoints:");
}

id objc_msgSend_initWithDeveloperId_webDistributionDomains_supportUrl_contentRatingsBySystem_isDistributor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDeveloperId:webDistributionDomains:supportUrl:contentRatingsBySystem:isDistributor:");
}

id objc_msgSend_initWithDeveloperName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDeveloperName:");
}

id objc_msgSend_initWithDisplayContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDisplayContext:");
}

id objc_msgSend_initWithDistributorBundleId_appVersionId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDistributorBundleId:appVersionId:");
}

id objc_msgSend_initWithEditorsChoice_productRating_productRatingBadge_productDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEditorsChoice:productRating:productRatingBadge:productDescription:");
}

id objc_msgSend_initWithFields_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFields:");
}

id objc_msgSend_initWithFirst_second_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFirst:second:");
}

id objc_msgSend_initWithFlags_presentingSceneIdentifier_presentingSceneBundleIdentifier_externalDeepLinkURL_paymentViewServiceListener_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFlags:presentingSceneIdentifier:presentingSceneBundleIdentifier:externalDeepLinkURL:paymentViewServiceListener:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithGenreName_genreID_subgenres_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithGenreName:genreID:subgenres:");
}

id objc_msgSend_initWithHeadingKind_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHeadingKind:");
}

id objc_msgSend_initWithID_kind_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithID:kind:context:");
}

id objc_msgSend_initWithID_kind_context_limit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithID:kind:context:limit:");
}

id objc_msgSend_initWithID_kind_metrics_icon_heading_title_subtitle_ageRating_offer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithID:kind:metrics:icon:heading:title:subtitle:ageRating:offer:");
}

id objc_msgSend_initWithID_kind_metrics_icon_heading_title_subtitle_ageRating_offer_features_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithID:kind:metrics:icon:heading:title:subtitle:ageRating:offer:features:");
}

id objc_msgSend_initWithID_titles_subtitles_flags_ageRating_metrics_alertTitle_alertMessage_alertButtonOffer_alertButtonTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithID:titles:subtitles:flags:ageRating:metrics:alertTitle:alertMessage:alertButtonOffer:alertButtonTitle:");
}

id objc_msgSend_initWithID_titles_subtitles_flags_ageRating_metrics_alertTitle_alertMessage_alertFooterMessage_isCancelable_checkRestrictionsForContentRating_shouldCheckForAvailableDiskSpace_remoteControllerRequirement_shouldIncludeActiveAccountInFooterMessage_shouldPromptForConfirmation_completionOffer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithID:titles:subtitles:flags:ageRating:metrics:alertTitle:alertMessage:alertFooterMessage:isCancelable:checkRestrictionsForContentRating:shouldCheckForAvailableDiskSpace:remoteControllerRequirement:shouldIncludeActiveAccountInFooterMessage:shouldPromptForConfirmation:completionOffer:");
}

id objc_msgSend_initWithID_titles_subtitles_flags_ageRating_metrics_appVersionId_distributorId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithID:titles:subtitles:flags:ageRating:metrics:appVersionId:distributorId:");
}

id objc_msgSend_initWithID_titles_subtitles_flags_ageRating_metrics_baseBuyParams_metricsBuyParams_additionalHeaders_preflightPackageURL_bundleID_itemName_vendorName_capabilities_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithID:titles:subtitles:flags:ageRating:metrics:baseBuyParams:metricsBuyParams:additionalHeaders:preflightPackageURL:bundleID:itemName:vendorName:capabilities:");
}

id objc_msgSend_initWithID_titles_subtitles_flags_ageRating_metrics_defaultOffer_buyOffer_openOffer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithID:titles:subtitles:flags:ageRating:metrics:defaultOffer:buyOffer:openOffer:");
}

id objc_msgSend_initWithID_titles_subtitles_flags_ageRating_metrics_notSubscribedOffer_subscribedOffer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithID:titles:subtitles:flags:ageRating:metrics:notSubscribedOffer:subscribedOffer:");
}

id objc_msgSend_initWithID_titles_subtitles_flags_ageRating_metrics_organicOffer_streamlinedOffer_offerID_iapItemID_iapItemName_iapProductName_offerType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithID:titles:subtitles:flags:ageRating:metrics:organicOffer:streamlinedOffer:offerID:iapItemID:iapItemName:iapProductName:offerType:");
}

id objc_msgSend_initWithID_titles_subtitles_flags_ageRating_metrics_url_isSensitive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithID:titles:subtitles:flags:ageRating:metrics:url:isSensitive:");
}

id objc_msgSend_initWithIDs_kind_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIDs:kind:context:");
}

id objc_msgSend_initWithInstructions_pageFields_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInstructions:pageFields:");
}

id objc_msgSend_initWithInt64_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInt64:");
}

id objc_msgSend_initWithLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLongLong:");
}

id objc_msgSend_initWithMetadata_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMetadata:description:");
}

id objc_msgSend_initWithName_reason_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:reason:userInfo:");
}

id objc_msgSend_initWithName_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:value:");
}

id objc_msgSend_initWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObject:");
}

id objc_msgSend_initWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjects:");
}

id objc_msgSend_initWithPercent_cancellable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPercent:cancellable:");
}

id objc_msgSend_initWithPrivacyPolicyUrl_eula_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPrivacyPolicyUrl:eula:");
}

id objc_msgSend_initWithProductVariantID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProductVariantID:");
}

id objc_msgSend_initWithScreenshots_trailers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithScreenshots:trailers:");
}

id objc_msgSend_initWithShortName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithShortName:");
}

id objc_msgSend_initWithSignpostTags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSignpostTags:");
}

id objc_msgSend_initWithStartDate_endDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStartDate:endDate:");
}

id objc_msgSend_initWithStringValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStringValue:");
}

id objc_msgSend_initWithSuiteName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSuiteName:");
}

id objc_msgSend_initWithTags_dateRanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTags:dateRanges:");
}

id objc_msgSend_initWithTitle_subtitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTitle:subtitle:");
}

id objc_msgSend_initWithTopic_shouldFlush_fields_includingFields_excludingFields_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTopic:shouldFlush:fields:includingFields:excludingFields:");
}

id objc_msgSend_initWithURL_resolvingAgainstBaseURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:resolvingAgainstBaseURL:");
}

id objc_msgSend_initWithValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithValue:");
}

id objc_msgSend_initWithWorkspace_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWorkspace:");
}

id objc_msgSend_instructions(void *a1, const char *a2, ...)
{
  return _[a1 instructions];
}

id objc_msgSend_int64value(void *a1, const char *a2, ...)
{
  return _[a1 int64value];
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _[a1 integerValue];
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceWithProtocol:");
}

id objc_msgSend_invalidAdamID(void *a1, const char *a2, ...)
{
  return _[a1 invalidAdamID];
}

id objc_msgSend_invocationPoints(void *a1, const char *a2, ...)
{
  return _[a1 invocationPoints];
}

id objc_msgSend_isCancelable(void *a1, const char *a2, ...)
{
  return _[a1 isCancelable];
}

id objc_msgSend_isDistributor(void *a1, const char *a2, ...)
{
  return _[a1 isDistributor];
}

id objc_msgSend_isEditorsChoice(void *a1, const char *a2, ...)
{
  return _[a1 isEditorsChoice];
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isFinalized(void *a1, const char *a2, ...)
{
  return _[a1 isFinalized];
}

id objc_msgSend_isPad(void *a1, const char *a2, ...)
{
  return _[a1 isPad];
}

id objc_msgSend_isSensitive(void *a1, const char *a2, ...)
{
  return _[a1 isSensitive];
}

id objc_msgSend_isString(void *a1, const char *a2, ...)
{
  return _[a1 isString];
}

id objc_msgSend_itemName(void *a1, const char *a2, ...)
{
  return _[a1 itemName];
}

id objc_msgSend_kind(void *a1, const char *a2, ...)
{
  return _[a1 kind];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_limit(void *a1, const char *a2, ...)
{
  return _[a1 limit];
}

id objc_msgSend_lock(void *a1, const char *a2, ...)
{
  return _[a1 lock];
}

id objc_msgSend_lockup(void *a1, const char *a2, ...)
{
  return _[a1 lockup];
}

id objc_msgSend_lockupByAddingFeature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lockupByAddingFeature:");
}

id objc_msgSend_lockupRequestByAddingMediaQueryParams_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lockupRequestByAddingMediaQueryParams:");
}

id objc_msgSend_lockupRequestWithAppDistributionEnabled(void *a1, const char *a2, ...)
{
  return _[a1 lockupRequestWithAppDistributionEnabled];
}

id objc_msgSend_lockupRequestWithClientID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lockupRequestWithClientID:");
}

id objc_msgSend_lockupRequestWithMediaQueryParams_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lockupRequestWithMediaQueryParams:");
}

id objc_msgSend_lockupRequestWithPlatformOverride_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lockupRequestWithPlatformOverride:");
}

id objc_msgSend_log(void *a1, const char *a2, ...)
{
  return _[a1 log];
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return _[a1 longLongValue];
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return _[a1 lowercaseString];
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _[a1 mainBundle];
}

id objc_msgSend_mainScreenScale(void *a1, const char *a2, ...)
{
  return _[a1 mainScreenScale];
}

id objc_msgSend_mainScreenSize(void *a1, const char *a2, ...)
{
  return _[a1 mainScreenSize];
}

id objc_msgSend_mediaPlatform(void *a1, const char *a2, ...)
{
  return _[a1 mediaPlatform];
}

id objc_msgSend_mediaQueryParams(void *a1, const char *a2, ...)
{
  return _[a1 mediaQueryParams];
}

id objc_msgSend_metrics(void *a1, const char *a2, ...)
{
  return _[a1 metrics];
}

id objc_msgSend_metricsBuyParams(void *a1, const char *a2, ...)
{
  return _[a1 metricsBuyParams];
}

id objc_msgSend_mutableBytes(void *a1, const char *a2, ...)
{
  return _[a1 mutableBytes];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_mutableSupplementaryTags(void *a1, const char *a2, ...)
{
  return _[a1 mutableSupplementaryTags];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_nilObject(void *a1, const char *a2, ...)
{
  return _[a1 nilObject];
}

id objc_msgSend_notSubscribedOffer(void *a1, const char *a2, ...)
{
  return _[a1 notSubscribedOffer];
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLongLong:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return _[a1 object];
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_offer(void *a1, const char *a2, ...)
{
  return _[a1 offer];
}

id objc_msgSend_offerID(void *a1, const char *a2, ...)
{
  return _[a1 offerID];
}

id objc_msgSend_offerType(void *a1, const char *a2, ...)
{
  return _[a1 offerType];
}

id objc_msgSend_openApplicationWithBundleIdentifier_configuration_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openApplicationWithBundleIdentifier:configuration:completionHandler:");
}

id objc_msgSend_openApplicationWithBundleIdentifier_configuration_pendingResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openApplicationWithBundleIdentifier:configuration:pendingResult:");
}

id objc_msgSend_openApplicationWithBundleIdentifier_payloadURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openApplicationWithBundleIdentifier:payloadURL:");
}

id objc_msgSend_openApplicationWithBundleIdentifier_payloadURL_universalLinkRequired_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openApplicationWithBundleIdentifier:payloadURL:universalLinkRequired:");
}

id objc_msgSend_openApplicationWithBundleIdentifier_usingOpenResourceOperationWithPayloadURL_options_pendingResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openApplicationWithBundleIdentifier:usingOpenResourceOperationWithPayloadURL:options:pendingResult:");
}

id objc_msgSend_openOffer(void *a1, const char *a2, ...)
{
  return _[a1 openOffer];
}

id objc_msgSend_openProductURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openProductURL:");
}

id objc_msgSend_openURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openURL:");
}

id objc_msgSend_openURL_configuration_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openURL:configuration:completionHandler:");
}

id objc_msgSend_openWithConfiguration_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openWithConfiguration:completionHandler:");
}

id objc_msgSend_operationToOpenResource_usingApplication_uniqueDocumentIdentifier_isContentManaged_sourceAuditToken_userInfo_options_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationToOpenResource:usingApplication:uniqueDocumentIdentifier:isContentManaged:sourceAuditToken:userInfo:options:delegate:");
}

id objc_msgSend_organicOffer(void *a1, const char *a2, ...)
{
  return _[a1 organicOffer];
}

id objc_msgSend_pageFields(void *a1, const char *a2, ...)
{
  return _[a1 pageFields];
}

id objc_msgSend_parameters(void *a1, const char *a2, ...)
{
  return _[a1 parameters];
}

id objc_msgSend_pathWithComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathWithComponents:");
}

id objc_msgSend_paymentViewServiceListener(void *a1, const char *a2, ...)
{
  return _[a1 paymentViewServiceListener];
}

id objc_msgSend_pendingResults(void *a1, const char *a2, ...)
{
  return _[a1 pendingResults];
}

id objc_msgSend_percent(void *a1, const char *a2, ...)
{
  return _[a1 percent];
}

id objc_msgSend_platformOverride(void *a1, const char *a2, ...)
{
  return _[a1 platformOverride];
}

id objc_msgSend_popPendingResultForOperationName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "popPendingResultForOperationName:");
}

id objc_msgSend_preferredCrop(void *a1, const char *a2, ...)
{
  return _[a1 preferredCrop];
}

id objc_msgSend_preferredFormat(void *a1, const char *a2, ...)
{
  return _[a1 preferredFormat];
}

id objc_msgSend_preflightPackageURL(void *a1, const char *a2, ...)
{
  return _[a1 preflightPackageURL];
}

id objc_msgSend_presentingSceneBundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 presentingSceneBundleIdentifier];
}

id objc_msgSend_presentingSceneIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 presentingSceneIdentifier];
}

id objc_msgSend_preview(void *a1, const char *a2, ...)
{
  return _[a1 preview];
}

id objc_msgSend_primaryTag(void *a1, const char *a2, ...)
{
  return _[a1 primaryTag];
}

id objc_msgSend_privacyPolicyUrl(void *a1, const char *a2, ...)
{
  return _[a1 privacyPolicyUrl];
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return _[a1 processInfo];
}

id objc_msgSend_processName(void *a1, const char *a2, ...)
{
  return _[a1 processName];
}

id objc_msgSend_productDescription(void *a1, const char *a2, ...)
{
  return _[a1 productDescription];
}

id objc_msgSend_productPageDescription(void *a1, const char *a2, ...)
{
  return _[a1 productPageDescription];
}

id objc_msgSend_productPageMetadata(void *a1, const char *a2, ...)
{
  return _[a1 productPageMetadata];
}

id objc_msgSend_productPageURLForAdamId_deeplink_eventId_encodedMetrics_sourceApplication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "productPageURLForAdamId:deeplink:eventId:encodedMetrics:sourceApplication:");
}

id objc_msgSend_productRating(void *a1, const char *a2, ...)
{
  return _[a1 productRating];
}

id objc_msgSend_productRatingBadge(void *a1, const char *a2, ...)
{
  return _[a1 productRatingBadge];
}

id objc_msgSend_productVariantID(void *a1, const char *a2, ...)
{
  return _[a1 productVariantID];
}

id objc_msgSend_properties(void *a1, const char *a2, ...)
{
  return _[a1 properties];
}

id objc_msgSend_queryItemWithName_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryItemWithName:value:");
}

id objc_msgSend_queryItems(void *a1, const char *a2, ...)
{
  return _[a1 queryItems];
}

id objc_msgSend_queryParametersForLockup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryParametersForLockup:");
}

id objc_msgSend_raise_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "raise:format:");
}

id objc_msgSend_remoteControllerRequirement(void *a1, const char *a2, ...)
{
  return _[a1 remoteControllerRequirement];
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:");
}

id objc_msgSend_removeObserver_forKeyPath_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:forKeyPath:context:");
}

id objc_msgSend_replaceObjectAtIndex_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceObjectAtIndex:withObject:");
}

id objc_msgSend_replaceOccurrencesOfString_withString_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceOccurrencesOfString:withString:options:range:");
}

id objc_msgSend_requiresSSOEntitlement(void *a1, const char *a2, ...)
{
  return _[a1 requiresSSOEntitlement];
}

id objc_msgSend_screenshots(void *a1, const char *a2, ...)
{
  return _[a1 screenshots];
}

id objc_msgSend_second(void *a1, const char *a2, ...)
{
  return _[a1 second];
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return _[a1 set];
}

id objc_msgSend_setActiveiTunesAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveiTunesAccount:");
}

id objc_msgSend_setByAddingObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setByAddingObject:");
}

id objc_msgSend_setByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setByAddingObjectsFromArray:");
}

id objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClasses:forSelector:argumentIndex:ofReply:");
}

id objc_msgSend_setEndDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEndDate:");
}

id objc_msgSend_setException_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setException:");
}

id objc_msgSend_setFrontBoardOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFrontBoardOptions:");
}

id objc_msgSend_setIgnoreAppLinkEnabledProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIgnoreAppLinkEnabledProperty:");
}

id objc_msgSend_setInterface_forSelector_argumentIndex_ofReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterface:forSelector:argumentIndex:ofReply:");
}

id objc_msgSend_setIsFinalized_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsFinalized:");
}

id objc_msgSend_setLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLength:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setName:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setPercentEncodedHost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPercentEncodedHost:");
}

id objc_msgSend_setPercentEncodedPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPercentEncodedPath:");
}

id objc_msgSend_setQueryItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueryItems:");
}

id objc_msgSend_setScheme_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScheme:");
}

id objc_msgSend_setSensitive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSensitive:");
}

id objc_msgSend_setStartDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartDate:");
}

id objc_msgSend_setSuspended_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuspended:");
}

id objc_msgSend_setValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_set_sourceApplicationBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_sourceApplicationBundleIdentifier:");
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 sharedInstance];
}

id objc_msgSend_sharedWorkspace(void *a1, const char *a2, ...)
{
  return _[a1 sharedWorkspace];
}

id objc_msgSend_shortName(void *a1, const char *a2, ...)
{
  return _[a1 shortName];
}

id objc_msgSend_shouldCheckForAvailableDiskSpace(void *a1, const char *a2, ...)
{
  return _[a1 shouldCheckForAvailableDiskSpace];
}

id objc_msgSend_shouldFlush(void *a1, const char *a2, ...)
{
  return _[a1 shouldFlush];
}

id objc_msgSend_shouldIncludeActiveAccountInFooterMessage(void *a1, const char *a2, ...)
{
  return _[a1 shouldIncludeActiveAccountInFooterMessage];
}

id objc_msgSend_shouldInstallParentApp(void *a1, const char *a2, ...)
{
  return _[a1 shouldInstallParentApp];
}

id objc_msgSend_shouldPromptForConfirmation(void *a1, const char *a2, ...)
{
  return _[a1 shouldPromptForConfirmation];
}

id objc_msgSend_signpostTags(void *a1, const char *a2, ...)
{
  return _[a1 signpostTags];
}

id objc_msgSend_startDate(void *a1, const char *a2, ...)
{
  return _[a1 startDate];
}

id objc_msgSend_stateLock(void *a1, const char *a2, ...)
{
  return _[a1 stateLock];
}

id objc_msgSend_streamlinedOffer(void *a1, const char *a2, ...)
{
  return _[a1 streamlinedOffer];
}

id objc_msgSend_stringByAddingPercentEncodingWithAllowedCharacters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAddingPercentEncodingWithAllowedCharacters:");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByRemovingPercentEncoding(void *a1, const char *a2, ...)
{
  return _[a1 stringByRemovingPercentEncoding];
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return _[a1 stringValue];
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithString:");
}

id objc_msgSend_subarrayWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subarrayWithRange:");
}

id objc_msgSend_subgenres(void *a1, const char *a2, ...)
{
  return _[a1 subgenres];
}

id objc_msgSend_subscribedOffer(void *a1, const char *a2, ...)
{
  return _[a1 subscribedOffer];
}

id objc_msgSend_subsystem(void *a1, const char *a2, ...)
{
  return _[a1 subsystem];
}

id objc_msgSend_subtitle(void *a1, const char *a2, ...)
{
  return _[a1 subtitle];
}

id objc_msgSend_subtitles(void *a1, const char *a2, ...)
{
  return _[a1 subtitles];
}

id objc_msgSend_supplementaryTags(void *a1, const char *a2, ...)
{
  return _[a1 supplementaryTags];
}

id objc_msgSend_supportUrl(void *a1, const char *a2, ...)
{
  return _[a1 supportUrl];
}

id objc_msgSend_supportsDSIDLessInstall(void *a1, const char *a2, ...)
{
  return _[a1 supportsDSIDLessInstall];
}

id objc_msgSend_tags(void *a1, const char *a2, ...)
{
  return _[a1 tags];
}

id objc_msgSend_targetApplicationRecord(void *a1, const char *a2, ...)
{
  return _[a1 targetApplicationRecord];
}

id objc_msgSend_title(void *a1, const char *a2, ...)
{
  return _[a1 title];
}

id objc_msgSend_titles(void *a1, const char *a2, ...)
{
  return _[a1 titles];
}

id objc_msgSend_toInt32(void *a1, const char *a2, ...)
{
  return _[a1 toInt32];
}

id objc_msgSend_toString(void *a1, const char *a2, ...)
{
  return _[a1 toString];
}

id objc_msgSend_topic(void *a1, const char *a2, ...)
{
  return _[a1 topic];
}

id objc_msgSend_trailers(void *a1, const char *a2, ...)
{
  return _[a1 trailers];
}

id objc_msgSend_unionSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unionSet:");
}

id objc_msgSend_universalLinkRequired(void *a1, const char *a2, ...)
{
  return _[a1 universalLinkRequired];
}

id objc_msgSend_unlock(void *a1, const char *a2, ...)
{
  return _[a1 unlock];
}

id objc_msgSend_url(void *a1, const char *a2, ...)
{
  return _[a1 url];
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return _[a1 value];
}

id objc_msgSend_valueWithBool_inContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithBool:inContext:");
}

id objc_msgSend_valueWithNewErrorFromMessage_inContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithNewErrorFromMessage:inContext:");
}

id objc_msgSend_valueWithUndefinedInContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithUndefinedInContext:");
}

id objc_msgSend_vendorName(void *a1, const char *a2, ...)
{
  return _[a1 vendorName];
}

id objc_msgSend_videoURL(void *a1, const char *a2, ...)
{
  return _[a1 videoURL];
}

id objc_msgSend_videos(void *a1, const char *a2, ...)
{
  return _[a1 videos];
}

id objc_msgSend_webDistributionDomains(void *a1, const char *a2, ...)
{
  return _[a1 webDistributionDomains];
}

id objc_msgSend_width(void *a1, const char *a2, ...)
{
  return _[a1 width];
}

id objc_msgSend_willEmitSignpostOfType_withName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willEmitSignpostOfType:withName:");
}