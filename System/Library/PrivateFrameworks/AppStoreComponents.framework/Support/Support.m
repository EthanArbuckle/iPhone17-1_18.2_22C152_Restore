void sub_1000067E0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  uint64_t v9;

  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_1000075FC(id a1)
{
  qword_1001A6008 = (uint64_t)os_log_create("com.apple.AppStoreComponents", "ASCAppLaunchTrampoline");

  _objc_release_x1();
}

void sub_100007FA4(uint64_t a1)
{
  id v2 = +[NSNumber numberWithInt:0];
  [*(id *)(a1 + 32) finishWithResult:v2];
}

void sub_100008004(uint64_t a1, void *a2)
{
  id v3 = a2;
  v4 = +[ASCAppLaunchTrampoline log];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138543362;
    id v19 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Unable to open application, reason %{public}@. Attempting to open product page URL", buf, 0xCu);
  }

  v5 = *(void **)(a1 + 32);
  v6 = [*(id *)(a1 + 40) value];
  v7 = [*(id *)(a1 + 48) value];
  v8 = [*(id *)(a1 + 56) value];
  v9 = [*(id *)(a1 + 64) value];
  v10 = [*(id *)(a1 + 72) value];
  v11 = [v5 productPageURLForAdamId:v6 deeplink:v7 eventId:v8 encodedMetrics:v9 sourceApplication:v10];

  if (v11)
  {
    v12 = [*(id *)(a1 + 88) openProductURL:v11];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10000825C;
    v14[3] = &unk_100183E28;
    id v15 = *(id *)(a1 + 80);
    [v12 addFinishBlock:v14];
  }
  else
  {
    NSErrorUserInfoKey v16 = NSLocalizedDescriptionKey;
    CFStringRef v17 = @"Failed to construct product page URL.";
    v13 = +[NSDictionary dictionaryWithObjects:&v17 forKeys:&v16 count:1];
    v12 = +[NSError errorWithDomain:@"ASCAppLaunchTrampolineErrorDomain" code:3 userInfo:v13];

    [*(id *)(a1 + 80) finishWithError:v12];
  }
}

void sub_10000825C(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    v6 = +[NSNumber numberWithInt:1];
    [*(id *)(a1 + 32) finishWithResult:v6];
  }
  else
  {
    v7 = +[ASCAppLaunchTrampoline log];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10013DED0((uint64_t)v5, v7);
    }

    NSErrorUserInfoKey v9 = NSLocalizedDescriptionKey;
    CFStringRef v10 = @"Failed to open product page.";
    v8 = +[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];
    v6 = +[NSError errorWithDomain:@"ASCAppLaunchTrampolineErrorDomain" code:4 userInfo:v8];

    [*(id *)(a1 + 32) finishWithError:v6];
  }
}

void sub_100008518(uint64_t a1)
{
  id v2 = +[NSNumber numberWithInt:0];
  [*(id *)(a1 + 32) finishWithResult:v2];
}

void sub_100008578(uint64_t a1)
{
  NSErrorUserInfoKey v4 = NSLocalizedDescriptionKey;
  CFStringRef v5 = @"Failed to open app.";
  id v2 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];
  id v3 = +[NSError errorWithDomain:@"ASCAppLaunchTrampolineErrorDomain" code:5 userInfo:v2];

  [*(id *)(a1 + 32) finishWithError:v3];
}

void sub_1000087C4(uint64_t a1)
{
  id v2 = +[NSNumber numberWithInt:0];
  [*(id *)(a1 + 32) finishWithResult:v2];
}

void sub_100008824(uint64_t a1)
{
  NSErrorUserInfoKey v4 = NSLocalizedDescriptionKey;
  CFStringRef v5 = @"Failed to open app.";
  id v2 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];
  id v3 = +[NSError errorWithDomain:@"ASCAppLaunchTrampolineErrorDomain" code:5 userInfo:v2];

  [*(id *)(a1 + 32) finishWithError:v3];
}

void sub_10000BA88(uint64_t a1, void *a2, void *a3)
{
  NSErrorUserInfoKey v4 = *(void **)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  objc_msgSend(v4, "replaceOccurrencesOfString:withString:options:range:", v6, v5, 0, 0, objc_msgSend(v4, "length"));
}

void sub_10000BC8C(id a1)
{
  int has_internal_content = os_variant_has_internal_content();
  CFStringRef v2 = @"production";
  if (has_internal_content) {
    CFStringRef v2 = @"internal";
  }
  qword_1001A6018 = (uint64_t)v2;

  _objc_release_x1();
}

void sub_10000DA9C(id a1)
{
  qword_1001A6028 = [[ASCDefaults alloc] initWithBundleID:@"com.apple.AppStoreComponents"];

  _objc_release_x1();
}

void sub_10000F390()
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT)) {
    sub_10013E68C();
  }
}

void sub_10000F3C4()
{
  self;
  if ((sub_10000F410() & 1) == 0)
  {
    sub_10000F390();
  }
}

uint64_t sub_10000F410()
{
  uint64_t v0 = self;
  v1 = +[NSBundle mainBundle];
  CFStringRef v2 = [v1 bundleIdentifier];
  if (sub_10000F4C0(v0, v2))
  {
    uint64_t v3 = 1;
  }
  else
  {
    NSErrorUserInfoKey v4 = +[NSProcessInfo processInfo];
    id v5 = [v4 processName];
    uint64_t v3 = (uint64_t)sub_10000F50C(v0, v5);
  }
  return v3;
}

id sub_10000F4C0(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = [v2 hasPrefix:@"com.apple."];

  return v3;
}

id sub_10000F50C(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = [v2 isEqualToString:@"Clip"];

  return v3;
}

void sub_10000FB8C(id a1)
{
}

id sub_100010604(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = v2;
  if (!v2)
  {
    id v8 = 0;
    goto LABEL_13;
  }
  NSErrorUserInfoKey v4 = [v2 componentsSeparatedByString:@"."];
  id v5 = (char *)[v4 count];
  if ((unint64_t)v5 >= 4)
  {
    id v6 = objc_msgSend(v4, "subarrayWithRange:", 0, 3);
    id v7 = v6;
LABEL_11:
    id v8 = [v6 componentsJoinedByString:@"."];

    goto LABEL_12;
  }
  NSErrorUserInfoKey v9 = v5 - 3;
  if (v5 != (char *)3)
  {
    id v7 = [v4 mutableCopy];
    do
      [v7 addObject:@"0"];
    while (!__CFADD__(v9++, 1));
    id v6 = v7;
    goto LABEL_11;
  }
  id v8 = v3;
LABEL_12:

LABEL_13:

  return v8;
}

uint64_t sub_1000107C4()
{
  return os_variant_has_internal_content();
}

uint64_t sub_1000119D0(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

void sub_10001753C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = [ASCLockupBatchRequest alloc];
  id v8 = [v6 first];
  NSErrorUserInfoKey v9 = [v6 second];

  id v10 = [(ASCLockupBatchRequest *)v7 _initWithIDs:v5 kind:v8 context:v9 clientID:*(void *)(a1 + 32) enableAppDistribution:*(unsigned __int8 *)(a1 + 64) mediaQueryParams:*(void *)(a1 + 40) platformOverride:*(void *)(a1 + 48)];
  [*(id *)(a1 + 56) addObject:v10];
}

id sub_1000188E8()
{
  id v18 = objc_alloc((Class)NSSet);
  uint64_t v17 = objc_opt_class();
  uint64_t v16 = objc_opt_class();
  uint64_t v15 = objc_opt_class();
  uint64_t v14 = objc_opt_class();
  uint64_t v13 = objc_opt_class();
  uint64_t v12 = objc_opt_class();
  uint64_t v0 = objc_opt_class();
  uint64_t v1 = objc_opt_class();
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  id v10 = objc_msgSend(v18, "initWithObjects:", v17, v16, v15, v14, v13, v12, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, objc_opt_class(),
          0);

  return v10;
}

id sub_100018AA0(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = sub_1000188E8();
  uint64_t v6 = [v4 decodeObjectOfClasses:v5 forKey:v3];

  return v6;
}

void sub_100018E80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = +[NSURLQueryItem queryItemWithName:a2 value:a3];
  [v3 addObject:v4];
}

uint64_t sub_100019478(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10001B19C(id a1)
{
  id v8 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v1 = +[NSBundle asc_realMainBundle];
  id v2 = objc_alloc((Class)AMSProcessInfo);
  id v3 = [v1 bundleIdentifier];
  id v4 = [v2 initWithBundleIdentifier:v3];

  uint64_t v5 = [v4 bundleIdentifier];
  if (v5)
  {
    [v8 setObject:v5 forKeyedSubscript:@"hostApp"];
    [v8 setObject:v5 forKeyedSubscript:@"pageContext"];
  }
  id v6 = [v8 copy];
  uint64_t v7 = (void *)qword_1001A6048;
  qword_1001A6048 = (uint64_t)v6;
}

NSString *__cdecl sub_10001B330(id a1, NSString *a2, NSString *a3, NSString *a4)
{
  id v4 = a4;

  return v4;
}

id sub_10001B880()
{
  id v0 = objc_alloc((Class)NSSet);
  uint64_t v1 = objc_opt_class();
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  id v5 = objc_msgSend(v0, "initWithObjects:", v1, v2, v3, v4, objc_opt_class(), 0);

  return v5;
}

id sub_10001B938(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = sub_10001B880();
  id v6 = [v4 decodeObjectOfClasses:v5 forKey:v3];

  return v6;
}

id sub_10001B9B4(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = objc_alloc((Class)NSSet);
  uint64_t v6 = objc_opt_class();
  id v7 = objc_msgSend(v5, "initWithObjects:", v6, objc_opt_class(), 0);
  id v8 = [v4 decodeObjectOfClasses:v7 forKey:v3];

  return v8;
}

void sub_10001C680(id a1)
{
  uint64_t v1 = +[NRPairedDeviceRegistry sharedInstance];
  id v4 = [v1 getActivePairedDevice];

  objc_opt_class();
  uint64_t v2 = [v4 objectForKeyedSubscript:NRDevicePropertySystemVersion];
  if (v2)
  {
    if (objc_opt_isKindOfClass()) {
      id v3 = v2;
    }
    else {
      id v3 = 0;
    }
  }
  else
  {
    id v3 = 0;
  }
  objc_storeStrong((id *)&qword_1001A6058, v3);
}

void sub_10001C8B8()
{
  id v0 = (objc_class *)objc_opt_class();
  ClassMethod = class_getClassMethod(v0, "defaultSessionConfiguration");
  if (ClassMethod)
  {
    uint64_t v2 = ClassMethod;
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10001C9B4;
    v5[3] = &unk_100184230;
    v5[4] = method_getImplementation(ClassMethod);
    v5[5] = "defaultSessionConfiguration";
    id v3 = objc_retainBlock(v5);
    id v4 = imp_implementationWithBlock(v3);

    method_setImplementation(v2, v4);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG)) {
      sub_10013EA64();
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_10013E9E0("defaultSessionConfiguration");
  }
}

id sub_10001C9B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(void (**)(uint64_t, void))(a1 + 32))(a2, *(void *)(a1 + 40));
  objc_msgSend(v2, "set_sourceApplicationBundleIdentifier:", @"com.apple.AppStore");

  return v2;
}

id ASCOfferFlagsGetDescription(__int16 a1)
{
  sub_10000F3C4();
  id v2 = objc_alloc_init((Class)NSMutableArray);
  id v3 = v2;
  if (a1)
  {
    [v2 addObject:@"ASCOfferHasMessagesExtension"];
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  [v3 addObject:@"ASCOfferCreatesJobs"];
  if ((a1 & 4) == 0)
  {
LABEL_4:
    if ((a1 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  [v3 addObject:@"ASCOfferIsArcadeApp"];
  if ((a1 & 8) == 0)
  {
LABEL_5:
    if ((a1 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  [v3 addObject:@"ASCOfferIsPreorder"];
  if ((a1 & 0x10) == 0)
  {
LABEL_6:
    if ((a1 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  [v3 addObject:@"ASCOfferIsDisabled"];
  if ((a1 & 0x20) == 0)
  {
LABEL_7:
    if ((a1 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  [v3 addObject:@"ASCOfferForceWatchInstall"];
  if ((a1 & 0x40) == 0)
  {
LABEL_8:
    if ((a1 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  [v3 addObject:@"ASCOfferIsDeletableSystemApp"];
  if ((a1 & 0x80) == 0)
  {
LABEL_9:
    if ((a1 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  [v3 addObject:@"ASCOfferIsIOSAppOnMacOS"];
  if ((a1 & 0x100) == 0)
  {
LABEL_10:
    if ((a1 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  [v3 addObject:@"ASCOfferIsFree"];
  if ((a1 & 0x200) == 0)
  {
LABEL_11:
    if ((a1 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  [v3 addObject:@"ASCOfferIsDSIDLess"];
  if ((a1 & 0x400) == 0)
  {
LABEL_12:
    if ((a1 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  [v3 addObject:@"ASCOfferIsContingentOffer"];
  if ((a1 & 0x800) == 0)
  {
LABEL_13:
    if ((a1 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_29:
  [v3 addObject:@"ASCOfferShouldInstallParentApp"];
  if ((a1 & 0x1000) != 0) {
LABEL_14:
  }
    [v3 addObject:@"ASCOfferIsAppDistributionOffer"];
LABEL_15:
  id v4 = [v3 componentsJoinedByString:@" | "];

  return v4;
}

id sub_10001CBAC(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = objc_alloc((Class)NSSet);
  uint64_t v6 = objc_opt_class();
  id v7 = objc_msgSend(v5, "initWithObjects:", v6, objc_opt_class(), 0);
  id v8 = [v4 decodeObjectOfClasses:v7 forKey:v3];

  return v8;
}

id sub_10001CC68()
{
  if (qword_1001A6060 != -1) {
    dispatch_once(&qword_1001A6060, &stru_1001842A0);
  }
  id v0 = (void *)qword_1001A6068;

  return v0;
}

void sub_10001CCBC(id a1)
{
  id v1 = objc_alloc((Class)NSSet);
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  qword_1001A6068 = (uint64_t)objc_msgSend(v1, "initWithObjects:", v2, v3, v4, v5, v6, v7, v8, objc_opt_class(), 0);

  _objc_release_x1();
}

id sub_10001CDBC(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = sub_10001CC68();
  uint64_t v6 = [v4 decodeObjectOfClasses:v5 forKey:v3];

  return v6;
}

uint64_t sub_100020730()
{
  if (qword_1001A6070 != -1) {
    dispatch_once(&qword_1001A6070, &stru_1001842F0);
  }
  int v0 = dword_1001A6078;
  uint64_t state64 = 0;
  uint64_t state = notify_get_state(dword_1001A6078, &state64);
  if (state)
  {
    uint64_t v2 = state;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10013ECE4(v2);
    }
  }
  else
  {
    uint64_t v3 = notify_set_state(v0, ++state64);
    if (v3)
    {
      uint64_t v4 = v3;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_10013EC50(v4);
      }
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "Incremented re-bootstrap counter", v6, 2u);
    }
  }
  return notify_post("com.apple.appstorecomponentsd.rebootstrap");
}

uint64_t sub_100020844(void *a1)
{
  id v1 = a1;
  if (os_variant_has_internal_content())
  {
    int out_token = 0;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10002093C;
    v6[3] = &unk_1001842D0;
    id v7 = v1;
    uint64_t v2 = notify_register_dispatch("com.apple.appstorecomponentsd.rebootstrap-for-qa", &out_token, (dispatch_queue_t)&_dispatch_main_q, v6);
    if (v2)
    {
      uint64_t v3 = v2;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_10013ED78(v3);
      }
      uint64_t v4 = 0xFFFFFFFFLL;
      int out_token = -1;
    }
    else
    {
      uint64_t v4 = out_token;
    }
  }
  else
  {
    uint64_t v4 = 0xFFFFFFFFLL;
  }

  return v4;
}

uint64_t sub_10002093C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10002094C(int a1)
{
  if (a1 != -1)
  {
    uint64_t v1 = notify_cancel(a1);
    if (v1)
    {
      uint64_t v2 = v1;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_10013EE0C(v2);
      }
    }
  }
}

void sub_1000209A0(id a1)
{
  uint64_t v1 = notify_register_check("com.apple.appstorecomponentsd.rebootstrap", &dword_1001A6078);
  if (v1)
  {
    uint64_t v2 = v1;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10013EEA0(v2);
    }
    dword_1001A6078 = -1;
  }
}

void sub_100020A18(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

uint64_t sub_100020A34()
{
  uint64_t result = _set_user_dir_suffix();
  if ((result & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10013EF34();
    }
    exit(1);
  }
  return result;
}

void sub_100020A78(uint64_t a1)
{
  if (os_variant_has_internal_content())
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v18 = a1;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "Environment variables (%{public}s):", buf, 0xCu);
    }
    uint64_t v2 = +[NSProcessInfo processInfo];
    uint64_t v3 = [v2 environment];

    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v4 = v3;
    id v5 = [v4 countByEnumeratingWithState:&v13 objects:v21 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v14;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(void *)v14 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t v9 = *(void *)(*((void *)&v13 + 1) + 8 * i);
          id v10 = [v4 objectForKeyedSubscript:v9];
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138543618;
            uint64_t v18 = v9;
            __int16 v19 = 2114;
            v20 = v10;
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%{public}@=%{public}@", buf, 0x16u);
          }
        }
        id v6 = [v4 countByEnumeratingWithState:&v13 objects:v21 count:16];
      }
      while (v6);
    }

    int v11 = malloc_engaged_nano();
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v18) = v11;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "malloc_engaged_nano=%{public}d", buf, 8u);
    }
    if (v11)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_10013EFBC();
      }
    }
  }
}

unint64_t ASCSignpostTagCreateForProcess(unint64_t a1, int a2)
{
  if (!(a1 >> 47)) {
    return a2 | (a1 << 17);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000224C8;
  block[3] = &unk_100184310;
  block[4] = a1;
  if (qword_1001A6080 != -1) {
    dispatch_once(&qword_1001A6080, block);
  }
  return a1 + a2;
}

void sub_1000224C8(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT)) {
    sub_10013F1B8(a1);
  }
}

unint64_t ASCSignpostTagCreate(unint64_t a1)
{
  pid_t v2 = getpid();

  return ASCSignpostTagCreateForProcess(a1, v2);
}

unint64_t ASCSignpostTagUnique()
{
  unint64_t add_explicit = atomic_fetch_add_explicit(&qword_1001A0D88, 1uLL, memory_order_relaxed);
  pid_t v1 = getpid();

  return ASCSignpostTagCreateForProcess(add_explicit, v1);
}

unint64_t ASCSignpostTagFromIDInProcess(void *a1, int a2)
{
  id v3 = [a1 int64value];

  return ASCSignpostTagCreateForProcess((unint64_t)v3, a2);
}

void sub_1000226FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_100022730(uint64_t a1)
{
  v4[0] = 0;
  if (!qword_1001A6090)
  {
    v4[1] = _NSConcreteStackBlock;
    v4[2] = 3221225472;
    v4[3] = sub_100022874;
    v4[4] = &unk_100184310;
    v4[5] = v4;
    long long v5 = off_100184358;
    uint64_t v6 = 0;
    qword_1001A6090 = _sl_dlopen();
    pid_t v2 = (void *)v4[0];
    if (!qword_1001A6090)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("SKInstallSheetStatusUpdateRequest");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    pid_t v2 = (void *)sub_10013F250();
LABEL_8:
    free(v2);
  }
  qword_1001A6088 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100022874()
{
  uint64_t result = _sl_dlopen();
  qword_1001A6090 = result;
  return result;
}

void sub_100022A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_100022AC4(uint64_t a1)
{
  v4[0] = 0;
  if (!qword_1001A60A0)
  {
    v4[1] = _NSConcreteStackBlock;
    v4[2] = 3221225472;
    v4[3] = sub_100022C08;
    v4[4] = &unk_100184310;
    v4[5] = v4;
    long long v5 = off_100184370;
    uint64_t v6 = 0;
    qword_1001A60A0 = _sl_dlopen();
    pid_t v2 = (void *)v4[0];
    if (!qword_1001A60A0)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("SKPurchaseIntent");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    pid_t v2 = (void *)sub_10013F278();
LABEL_8:
    free(v2);
  }
  qword_1001A6098 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100022C08()
{
  uint64_t result = _sl_dlopen();
  qword_1001A60A0 = result;
  return result;
}

void sub_1000240F4(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = [objc_alloc((Class)NSString) initWithFormat:@"%@ does not have case with value %@", v3, v4];
  id v6 = objc_alloc((Class)NSException);
  v9[0] = @"enumName";
  v9[1] = @"enumValue";
  v10[0] = v3;
  v10[1] = v4;
  uint64_t v7 = +[NSDictionary dictionaryWithObjects:v10 forKeys:v9 count:2];
  id v8 = [v6 initWithName:@"ASCUnknownEnumCaseException" reason:v5 userInfo:v7];

  objc_exception_throw(v8);
}

void sub_10002611C(uint64_t a1)
{
  id v6 = [*(id *)(a1 + 32) subsystem];
  pid_t v2 = (const char *)[v6 UTF8String];
  id v3 = [*(id *)(a1 + 32) category];
  os_log_t v4 = os_log_create(v2, (const char *)[v3 UTF8String]);
  id v5 = (void *)qword_1001A60B0;
  qword_1001A60B0 = (uint64_t)v4;
}

void sub_100026FE4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v5)
  {
    id v27 = v6;
    id v8 = +[ASCWorkspace log];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
      sub_10013F810(v5, v8);
    }

    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    id v9 = v5;
    id v10 = [v9 countByEnumeratingWithState:&v35 objects:v39 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v36;
LABEL_6:
      uint64_t v13 = 0;
      while (1)
      {
        if (*(void *)v36 != v12) {
          objc_enumerationMutation(v9);
        }
        long long v14 = *(void **)(*((void *)&v35 + 1) + 8 * v13);
        long long v15 = [v14 targetApplicationRecord];
        long long v16 = [v15 bundleIdentifier];
        unsigned __int8 v17 = [v16 isEqualToString:*(void *)(a1 + 32)];

        if (v17) {
          break;
        }
        if (v11 == (id)++v13)
        {
          id v11 = [v9 countByEnumeratingWithState:&v35 objects:v39 count:16];
          if (v11) {
            goto LABEL_6;
          }
          goto LABEL_12;
        }
      }
      id v18 = v14;

      if (!v18) {
        goto LABEL_17;
      }
      __int16 v19 = +[ASCWorkspace log];
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Found valid universal link, attempting to open", buf, 2u);
      }

      id v20 = objc_alloc_init((Class)_LSOpenConfiguration);
      [v20 setFrontBoardOptions:*(void *)(a1 + 40)];
      [v20 setIgnoreAppLinkEnabledProperty:1];
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472;
      v28[2] = sub_1000273B0;
      v28[3] = &unk_100184390;
      id v21 = *(id *)(a1 + 48);
      uint64_t v22 = *(void *)(a1 + 56);
      id v29 = v21;
      uint64_t v30 = v22;
      id v31 = *(id *)(a1 + 32);
      id v32 = *(id *)(a1 + 64);
      id v33 = *(id *)(a1 + 40);
      [v18 openWithConfiguration:v20 completionHandler:v28];
    }
    else
    {
LABEL_12:

LABEL_17:
      v23 = +[ASCWorkspace log];
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        sub_10013F74C(a1, v23);
      }

      id v18 = objc_alloc_init((Class)_LSOpenConfiguration);
      [v18 setFrontBoardOptions:*(void *)(a1 + 40)];
      [*(id *)(a1 + 56) openApplicationWithBundleIdentifier:*(void *)(a1 + 32) configuration:v18 pendingResult:*(void *)(a1 + 48)];
    }
    uint64_t v7 = v27;
    goto LABEL_25;
  }
  int v24 = *(unsigned __int8 *)(a1 + 72);
  v25 = +[ASCWorkspace log];
  v26 = v25;
  if (v24)
  {
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      sub_10013F708(v26);
    }

    id v18 = objc_alloc_init((Class)_LSOpenConfiguration);
    [v18 setFrontBoardOptions:*(void *)(a1 + 40)];
    [*(id *)(a1 + 56) openApplicationWithBundleIdentifier:*(void *)(a1 + 32) configuration:v18 pendingResult:*(void *)(a1 + 48)];
LABEL_25:

    goto LABEL_26;
  }
  if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Found non-universal link, opening via open resource operation", buf, 2u);
  }

  [*(id *)(a1 + 56) openApplicationWithBundleIdentifier:*(void *)(a1 + 32) usingOpenResourceOperationWithPayloadURL:*(void *)(a1 + 64) options:*(void *)(a1 + 40) pendingResult:*(void *)(a1 + 48)];
LABEL_26:
}

void sub_1000273B0(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = +[ASCWorkspace log];
  uint64_t v7 = v6;
  if (a2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Successfully opened universal link", v8, 2u);
    }

    [*(id *)(a1 + 32) finishWithSuccess];
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_10013F898();
    }

    [*(id *)(a1 + 40) openApplicationWithBundleIdentifier:*(void *)(a1 + 48) usingOpenResourceOperationWithPayloadURL:*(void *)(a1 + 56) options:*(void *)(a1 + 64) pendingResult:*(void *)(a1 + 32)];
  }
}

void sub_10002767C(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = +[ASCWorkspace log];
  uint64_t v7 = v6;
  if (a2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Open application with bundle ID succeeded.", v8, 2u);
    }

    [*(id *)(a1 + 32) finishWithSuccess];
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_10013F900();
    }

    [*(id *)(a1 + 32) finishWithError:v5];
  }
}

void sub_1000278C0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_10002793C(id a1)
{
  qword_1001A60C8 = (uint64_t)os_log_create("com.apple.AppStoreComponents", "ASCWorkspace");

  _objc_release_x1();
}

void sub_1000279E4(id a1)
{
  qword_1001A60D8 = [[ASCWorkspace alloc] _init];

  _objc_release_x1();
}

void sub_100027B2C(void *a1)
{
  objc_begin_catch(a1);
  objc_storeStrong((id *)&qword_1001A60B8, v1);
  objc_exception_rethrow();
}

void sub_100027B48(_Unwind_Exception *a1)
{
}

id sub_100027C74(uint64_t a1, uint64_t a2)
{
  pid_t v2 = *(void **)(a1 + 32);
  if (a2) {
    return [v2 finishWithSuccess];
  }
  else {
    return objc_msgSend(v2, "finishWithError:");
  }
}

id sub_100027DA8(uint64_t a1, uint64_t a2)
{
  pid_t v2 = *(void **)(a1 + 32);
  if (a2) {
    return [v2 finishWithSuccess];
  }
  else {
    return objc_msgSend(v2, "finishWithError:");
  }
}

id sub_100028074()
{
  if (qword_1001A60E0 != -1) {
    dispatch_once(&qword_1001A60E0, &stru_100184440);
  }
  int v0 = (void *)qword_1001A60E8;

  return v0;
}

void sub_1000280C8(id a1)
{
  uint64_t v1 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___ASCAppOfferStateDelegate];
  pid_t v2 = (void *)qword_1001A60E8;
  qword_1001A60E8 = v1;

  id v3 = (void *)qword_1001A60E8;
  os_log_t v4 = sub_10001CC68();
  [v3 setClasses:v4 forSelector:"offer:didChangeState:withMetadata:flags:" argumentIndex:0 ofReply:0];

  id v5 = (void *)qword_1001A60E8;
  id v6 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v5 setClasses:v6 forSelector:"offer:didChangeState:withMetadata:flags:" argumentIndex:1 ofReply:0];

  uint64_t v7 = (void *)qword_1001A60E8;
  id v8 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v7 setClasses:v8 forSelector:"offer:didChangeState:withMetadata:flags:" argumentIndex:2 ofReply:0];

  uint64_t v9 = (void *)qword_1001A60E8;
  id v10 = sub_10001CC68();
  [v9 setClasses:v10 forSelector:"offer:didChangeStatusText:" argumentIndex:0 ofReply:0];

  id v11 = (void *)qword_1001A60E8;
  id v12 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v11 setClasses:v12 forSelector:"offer:didChangeStatusText:" argumentIndex:1 ofReply:0];
}

id sub_100028280()
{
  if (qword_1001A60F0 != -1) {
    dispatch_once(&qword_1001A60F0, &stru_100184460);
  }
  int v0 = (void *)qword_1001A60F8;

  return v0;
}

void sub_1000282D4(id a1)
{
  uint64_t v1 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___ASCAppOfferStateService];
  pid_t v2 = (void *)qword_1001A60F8;
  qword_1001A60F8 = v1;

  id v3 = (void *)qword_1001A60F8;
  os_log_t v4 = sub_10001CC68();
  id v5 = [v4 setByAddingObject:objc_opt_class()];
  [v3 setClasses:v5 forSelector:"startObservingStateOfOffers:" argumentIndex:0 ofReply:0];

  id v6 = (void *)qword_1001A60F8;
  uint64_t v7 = sub_10001CC68();
  id v8 = [v7 setByAddingObject:objc_opt_class()];
  [v6 setClasses:v8 forSelector:"stopObservingStateOfOffers:" argumentIndex:0 ofReply:0];

  uint64_t v9 = (void *)qword_1001A60F8;
  id v10 = sub_10001CC68();
  [v9 setClasses:v10 forSelector:"performActionOfOffer:withActivity:inContext:withReplyHandler:" argumentIndex:0 ofReply:0];

  id v11 = (void *)qword_1001A60F8;
  id v12 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v11 setClasses:v12 forSelector:"performActionOfOffer:withActivity:inContext:withReplyHandler:" argumentIndex:1 ofReply:0];

  uint64_t v13 = (void *)qword_1001A60F8;
  id v14 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v13 setClasses:v14 forSelector:"performActionOfOffer:withActivity:inContext:withReplyHandler:" argumentIndex:2 ofReply:0];

  long long v15 = (void *)qword_1001A60F8;
  id v16 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v15 setClasses:v16 forSelector:"performActionOfOffer:withActivity:inContext:withReplyHandler:" argumentIndex:0 ofReply:1];

  unsigned __int8 v17 = (void *)qword_1001A60F8;
  id v18 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v17 setClasses:v18 forSelector:"reinstallWatchAppWithID:withReplyHandler:" argumentIndex:0 ofReply:0];

  __int16 v19 = (void *)qword_1001A60F8;
  id v20 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v19 setClasses:v20 forSelector:"reinstallWatchAppWithID:withReplyHandler:" argumentIndex:0 ofReply:1];

  id v21 = (void *)qword_1001A60F8;
  id v22 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v21 setClasses:v22 forSelector:"reinstallWatchSystemAppWithBundleID:withReplyHandler:" argumentIndex:0 ofReply:0];

  v23 = (void *)qword_1001A60F8;
  id v24 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v23 setClasses:v24 forSelector:"reinstallWatchSystemAppWithBundleID:withReplyHandler:" argumentIndex:0 ofReply:1];

  v25 = (void *)qword_1001A60F8;
  id v26 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v25 setClasses:v26 forSelector:"viewAppForAppDistributionOffer:" argumentIndex:0 ofReply:0];

  id v27 = (void *)qword_1001A60F8;
  id v28 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v27 setClasses:v28 forSelector:"decorateBuyParamsForOffer:withActivity:withReplyHandler:" argumentIndex:0 ofReply:0];

  id v29 = (void *)qword_1001A60F8;
  id v30 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v29 setClasses:v30 forSelector:"decorateBuyParamsForOffer:withActivity:withReplyHandler:" argumentIndex:1 ofReply:0];

  id v31 = (void *)qword_1001A60F8;
  id v32 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v31 setClasses:v32 forSelector:"decorateBuyParamsForOffer:withActivity:withReplyHandler:" argumentIndex:0 ofReply:1];

  id v33 = (void *)qword_1001A60F8;
  id v34 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v33 setClasses:v34 forSelector:"decorateBuyParamsForOffer:withActivity:withReplyHandler:" argumentIndex:1 ofReply:1];
}

id sub_1000287BC()
{
  if (qword_1001A6100 != -1) {
    dispatch_once(&qword_1001A6100, &stru_100184480);
  }
  int v0 = (void *)qword_1001A6108;

  return v0;
}

void sub_100028810(id a1)
{
  uint64_t v1 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___ASCUtilityService];
  pid_t v2 = (void *)qword_1001A6108;
  qword_1001A6108 = v1;

  id v3 = (void *)qword_1001A6108;
  id v4 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v3 setClasses:v4 forSelector:"openURL:withReplyHandler:" argumentIndex:0 ofReply:0];

  id v5 = (void *)qword_1001A6108;
  id v6 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v5 setClasses:v6 forSelector:"openURL:withReplyHandler:" argumentIndex:0 ofReply:1];

  uint64_t v7 = (void *)qword_1001A6108;
  id v8 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v7 setClasses:v8 forSelector:"restoreAppStoreWithReplyHandler:" argumentIndex:0 ofReply:1];
}

id sub_10002896C()
{
  if (qword_1001A6110 != -1) {
    dispatch_once(&qword_1001A6110, &stru_1001844A0);
  }
  int v0 = (void *)qword_1001A6118;

  return v0;
}

void sub_1000289C0(id a1)
{
  uint64_t v1 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___ASCLockupFetcherService];
  pid_t v2 = (void *)qword_1001A6118;
  qword_1001A6118 = v1;

  id v3 = (void *)qword_1001A6118;
  id v4 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v3 setClasses:v4 forSelector:"getLockupWithRequest:withReplyHandler:" argumentIndex:0 ofReply:0];

  id v5 = (void *)qword_1001A6118;
  id v6 = sub_1000188E8();
  uint64_t v7 = [v6 setByAddingObject:objc_opt_class()];
  [v5 setClasses:v7 forSelector:"getLockupWithRequest:withReplyHandler:" argumentIndex:0 ofReply:1];

  id v8 = (void *)qword_1001A6118;
  id v9 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v8 setClasses:v9 forSelector:"getLockupWithRequest:withReplyHandler:" argumentIndex:1 ofReply:1];

  id v10 = (void *)qword_1001A6118;
  id v11 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v10 setClasses:v11 forSelector:"getLockupsWithRequest:withReplyHandler:" argumentIndex:0 ofReply:0];

  id v12 = (void *)qword_1001A6118;
  uint64_t v13 = sub_1000188E8();
  uint64_t v35 = objc_opt_class();
  uint64_t v36 = objc_opt_class();
  uint64_t v37 = objc_opt_class();
  id v14 = +[NSArray arrayWithObjects:&v35 count:3];
  long long v15 = [v13 setByAddingObjectsFromArray:v14];
  [v12 setClasses:v15 forSelector:"getLockupsWithRequest:withReplyHandler:" argumentIndex:0 ofReply:1];

  id v16 = (void *)qword_1001A6118;
  id v17 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v16 setClasses:v17 forSelector:"getLockupsWithRequest:withReplyHandler:" argumentIndex:1 ofReply:1];

  id v18 = (void *)qword_1001A6118;
  id v19 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v18 setClasses:v19 forSelector:"getLockupCollectionWithRequest:withReplyHandler:" argumentIndex:0 ofReply:0];

  id v20 = (void *)qword_1001A6118;
  id v21 = objc_alloc((Class)NSSet);
  uint64_t v22 = objc_opt_class();
  id v23 = objc_msgSend(v21, "initWithObjects:", v22, objc_opt_class(), 0, v35, v36);
  [v20 setClasses:v23 forSelector:"getLockupCollectionWithRequest:withReplyHandler:" argumentIndex:0 ofReply:1];

  id v24 = (void *)qword_1001A6118;
  id v25 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v24 setClasses:v25 forSelector:"getLockupCollectionWithRequest:withReplyHandler:" argumentIndex:1 ofReply:1];

  id v26 = (void *)qword_1001A6118;
  id v27 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v26 setClasses:v27 forSelector:"getLockupForBundleID:withContext:enableAppDistribution:withReplyHandler:" argumentIndex:0 ofReply:0];

  id v28 = (void *)qword_1001A6118;
  id v29 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v28 setClasses:v29 forSelector:"getLockupForBundleID:withContext:enableAppDistribution:withReplyHandler:" argumentIndex:1 ofReply:0];

  id v30 = (void *)qword_1001A6118;
  id v31 = sub_1000188E8();
  id v32 = [v31 setByAddingObject:objc_opt_class()];
  [v30 setClasses:v32 forSelector:"getLockupForBundleID:withContext:enableAppDistribution:withReplyHandler:" argumentIndex:0 ofReply:1];

  id v33 = (void *)qword_1001A6118;
  id v34 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v33 setClasses:v34 forSelector:"getLockupForBundleID:withContext:enableAppDistribution:withReplyHandler:" argumentIndex:1 ofReply:1];
}

id sub_100028E94()
{
  if (qword_1001A6120 != -1) {
    dispatch_once(&qword_1001A6120, &stru_1001844C0);
  }
  int v0 = (void *)qword_1001A6128;

  return v0;
}

void sub_100028EE8(id a1)
{
  uint64_t v1 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___ASCMetricsService];
  pid_t v2 = (void *)qword_1001A6128;
  qword_1001A6128 = v1;

  id v3 = (void *)qword_1001A6128;
  id v4 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v3 setClasses:v4 forSelector:"processMetricsData:pageFields:activity:withReplyHandler:" argumentIndex:0 ofReply:0];

  id v5 = (void *)qword_1001A6128;
  id v6 = sub_10001B880();
  [v5 setClasses:v6 forSelector:"processMetricsData:pageFields:activity:withReplyHandler:" argumentIndex:1 ofReply:0];

  uint64_t v7 = (void *)qword_1001A6128;
  id v8 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v7 setClasses:v8 forSelector:"processMetricsData:pageFields:activity:withReplyHandler:" argumentIndex:2 ofReply:0];

  id v9 = (void *)qword_1001A6128;
  id v10 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v9 setClasses:v10 forSelector:"processMetricsData:pageFields:activity:withReplyHandler:" argumentIndex:0 ofReply:1];

  id v11 = (void *)qword_1001A6128;
  id v12 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v11 setClasses:v12 forSelector:"processViewRenderWithPredicate:withReplyHandler:" argumentIndex:0 ofReply:0];

  uint64_t v13 = (void *)qword_1001A6128;
  id v14 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v13 setClasses:v14 forSelector:"processViewRenderWithPredicate:withReplyHandler:" argumentIndex:0 ofReply:1];

  long long v15 = (void *)qword_1001A6128;
  id v16 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v15 setClasses:v16 forSelector:"recordQToken:campaignToken:advertisementID:withLockup:withReplyHandler:" argumentIndex:0 ofReply:0];

  id v17 = (void *)qword_1001A6128;
  id v18 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v17 setClasses:v18 forSelector:"recordQToken:campaignToken:advertisementID:withLockup:withReplyHandler:" argumentIndex:1 ofReply:0];

  id v19 = (void *)qword_1001A6128;
  id v20 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v19 setClasses:v20 forSelector:"recordQToken:campaignToken:advertisementID:withLockup:withReplyHandler:" argumentIndex:2 ofReply:0];

  id v21 = (void *)qword_1001A6128;
  id v22 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v21 setClasses:v22 forSelector:"recordQToken:campaignToken:advertisementID:withLockup:withReplyHandler:" argumentIndex:3 ofReply:0];

  id v23 = (void *)qword_1001A6128;
  id v24 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v23 setClasses:v24 forSelector:"recordQToken:campaignToken:advertisementID:withLockup:withReplyHandler:" argumentIndex:0 ofReply:1];

  id v25 = sub_10001B880();
  v28[0] = objc_opt_class();
  v28[1] = objc_opt_class();
  id v26 = +[NSArray arrayWithObjects:v28 count:2];
  id v27 = [v25 setByAddingObjectsFromArray:v26];

  [(id)qword_1001A6128 setClasses:v27 forSelector:"logErrorMessage:" argumentIndex:0 ofReply:0];
}

id sub_100029328()
{
  if (qword_1001A6130 != -1) {
    dispatch_once(&qword_1001A6130, &stru_1001844E0);
  }
  int v0 = (void *)qword_1001A6138;

  return v0;
}

void sub_10002937C(id a1)
{
  uint64_t v1 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___ASCServiceBroker];
  pid_t v2 = (void *)qword_1001A6138;
  qword_1001A6138 = v1;

  id v3 = (void *)qword_1001A6138;
  id v4 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v3 setClasses:v4 forSelector:"testConnectionWithReplyHandler:" argumentIndex:0 ofReply:1];

  id v5 = (void *)qword_1001A6138;
  id v6 = sub_100028074();
  [v5 setInterface:v6 forSelector:"getAppOfferStateServiceForDelegate:withReplyHandler:" argumentIndex:0 ofReply:0];

  uint64_t v7 = (void *)qword_1001A6138;
  id v8 = sub_100028280();
  [v7 setInterface:v8 forSelector:"getAppOfferStateServiceForDelegate:withReplyHandler:" argumentIndex:0 ofReply:1];

  id v9 = (void *)qword_1001A6138;
  id v10 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v9 setClasses:v10 forSelector:"getAppOfferStateServiceForDelegate:withReplyHandler:" argumentIndex:1 ofReply:1];

  id v11 = (void *)qword_1001A6138;
  id v12 = sub_1000287BC();
  [v11 setInterface:v12 forSelector:"getUtilityServiceWithReplyHandler:" argumentIndex:0 ofReply:1];

  uint64_t v13 = (void *)qword_1001A6138;
  id v14 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v13 setClasses:v14 forSelector:"getUtilityServiceWithReplyHandler:" argumentIndex:1 ofReply:1];

  long long v15 = (void *)qword_1001A6138;
  id v16 = sub_10002896C();
  [v15 setInterface:v16 forSelector:"getLockupFetcherServiceWithReplyHandler:" argumentIndex:0 ofReply:1];

  id v17 = (void *)qword_1001A6138;
  id v18 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v17 setClasses:v18 forSelector:"getLockupFetcherServiceWithReplyHandler:" argumentIndex:1 ofReply:1];

  id v19 = (void *)qword_1001A6138;
  id v20 = sub_100028E94();
  [v19 setInterface:v20 forSelector:"getMetricsServiceWithReplyHandler:" argumentIndex:0 ofReply:1];

  id v21 = (void *)qword_1001A6138;
  id v22 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", objc_opt_class(), 0);
  [v21 setClasses:v22 forSelector:"getMetricsServiceWithReplyHandler:" argumentIndex:1 ofReply:1];
}

__CFString *sub_100029658(uint64_t a1)
{
  int v2 = a1;
  id v3 = @"NOTIFY_STATUS_OK";
  switch(v2)
  {
    case 0:
      break;
    case 1:
      id v3 = @"NOTIFY_STATUS_INVALID_NAME";
      break;
    case 2:
      id v3 = @"NOTIFY_STATUS_INVALID_TOKEN";
      break;
    case 3:
      id v3 = @"NOTIFY_STATUS_INVALID_PORT";
      break;
    case 4:
      id v3 = @"NOTIFY_STATUS_INVALID_FILE";
      break;
    case 5:
      id v3 = @"NOTIFY_STATUS_INVALID_SIGNAL";
      break;
    case 6:
      id v3 = @"NOTIFY_STATUS_INVALID_REQUEST";
      break;
    case 7:
      id v3 = @"NOTIFY_STATUS_NOT_AUTHORIZED";
      break;
    case 8:
      id v3 = @"NOTIFY_STATUS_OPT_DISABLE";
      break;
    case 9:
      id v3 = @"NOTIFY_STATUS_SERVER_NOT_FOUND";
      break;
    case 10:
      id v3 = @"NOTIFY_STATUS_NULL_INPUT";
      break;
    default:
      if (a1 == 1000000) {
        id v3 = @"NOTIFY_STATUS_FAILED";
      }
      else {
        id v3 = (__CFString *)objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"NOTIFY_STATUS_UNKNOWN (%u)", a1);
      }
      break;
  }

  return v3;
}

void sub_100029800(id a1)
{
  uint64_t v1 = +[NSBundle bundleWithPath:@"/System/Library/PrivateFrameworks/AppStoreComponents.framework"];
  int v2 = (void *)qword_1001A6148;
  qword_1001A6148 = v1;

  if (!qword_1001A6148)
  {
    id v3 = +[NSException exceptionWithName:NSInternalInconsistencyException reason:@"Could not find AppStoreComponents framework bundle" userInfo:0];
    objc_exception_throw(v3);
  }
}

void sub_100029978(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  id v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:v10];
  if (!v6
    || (id v7 = v5) != 0 && (v8 = [v6 isEqual:v7], v7, v8))
  {
    [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:v10];
  }
  else
  {
    id v9 = (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    [*(id *)(a1 + 32) setObject:v9 forKeyedSubscript:v10];
  }
}

int main(int argc, const char **argv, const char **envp)
{
  sub_100020A34();
  id v4 = [objc_allocWithZone((Class)type metadata accessor for Daemon()) init];
  qword_1001AE260 = (uint64_t)v4;
  sub_1000BEFAC();
  return 0;
}

void type metadata accessor for ASDPurchaseHistoryContext(uint64_t a1)
{
}

void type metadata accessor for ASCAppState(uint64_t a1)
{
}

uint64_t sub_100029C60(uint64_t a1, uint64_t a2)
{
  return sub_10002C578(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100029C88()
{
  return UInt64.hashValue.getter(*v0);
}

void sub_100029C90()
{
  Hasher._combine(_:)(*v0);
}

uint64_t sub_100029CBC()
{
  return static Hasher._hash(seed:_:)();
}

NSNumber sub_100029CC4()
{
  return UInt64._bridgeToObjectiveC()();
}

uint64_t sub_100029CCC(uint64_t a1, uint64_t a2)
{
  uint64_t result = static UInt64._forceBridgeFromObjectiveC(_:result:)();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  return result;
}

uint64_t sub_100029D20(uint64_t a1, uint64_t a2)
{
  char v3 = static UInt64._conditionallyBridgeFromObjectiveC(_:result:)();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  return v3 & 1;
}

uint64_t sub_100029D78@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static UInt64._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  return result;
}

void *sub_100029DA4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100029DB0(uint64_t a1)
{
  uint64_t v2 = sub_10002B44C(&qword_1001A12C8, type metadata accessor for ASCAppOfferActionError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100029E1C(uint64_t a1)
{
  uint64_t v2 = sub_10002B44C(&qword_1001A12C8, type metadata accessor for ASCAppOfferActionError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100029E8C(uint64_t a1)
{
  uint64_t v2 = sub_10002B44C((unint64_t *)&qword_1001A1300, type metadata accessor for ASCAppOfferActionError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100029EF8@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_100029F08(uint64_t a1, uint64_t a2)
{
  return sub_10002C578(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

BOOL sub_100029F20(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100029F34(uint64_t a1)
{
  uint64_t v2 = sub_10002B44C(&qword_1001A1530, type metadata accessor for ASCOpenAppError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100029FA0(uint64_t a1)
{
  uint64_t v2 = sub_10002B44C(&qword_1001A1530, type metadata accessor for ASCOpenAppError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10002A00C(uint64_t a1)
{
  uint64_t v2 = sub_10002B44C((unint64_t *)&qword_1001A1560, type metadata accessor for ASCOpenAppError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

void sub_10002A078(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_10002A084(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_10002A0FC(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_10002A17C@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

id sub_10002A1C0()
{
  return *v0;
}

uint64_t sub_10002A1C8(uint64_t a1)
{
  uint64_t v2 = sub_10002B44C(&qword_1001A1340, type metadata accessor for ASCMetricsError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10002A234(uint64_t a1)
{
  uint64_t v2 = sub_10002B44C(&qword_1001A1340, type metadata accessor for ASCMetricsError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10002A2A0(uint64_t a1)
{
  uint64_t v2 = sub_10002B44C((unint64_t *)&qword_1001A1370, type metadata accessor for ASCMetricsError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

void sub_10002A30C(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_10002A314@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_10002A328@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_10002A33C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_10002A350(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_10002A380@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_10002A3AC@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_10002A3D0(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_10002A3E4(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_10002A3F8(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_10002A40C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_10002A420(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_10002A434(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_10002A448(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_10002A45C()
{
  return *v0 == 0;
}

uint64_t sub_10002A46C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

void *sub_10002A484(void *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t sub_10002A498()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10002A4A8(uint64_t a1)
{
  uint64_t v2 = sub_10002B44C((unint64_t *)&qword_1001A1300, type metadata accessor for ASCAppOfferActionError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10002A514(uint64_t a1)
{
  uint64_t v2 = sub_10002B44C((unint64_t *)&qword_1001A1300, type metadata accessor for ASCAppOfferActionError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10002A580(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10002B44C((unint64_t *)&qword_1001A1300, type metadata accessor for ASCAppOfferActionError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_10002A610(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002B44C((unint64_t *)&qword_1001A1300, type metadata accessor for ASCAppOfferActionError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

unsigned __int8 *sub_10002A690@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_10002A6A0()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10002A6B0(uint64_t a1)
{
  uint64_t v2 = sub_10002B44C((unint64_t *)&qword_1001A1560, type metadata accessor for ASCOpenAppError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10002A71C(uint64_t a1)
{
  uint64_t v2 = sub_10002B44C((unint64_t *)&qword_1001A1560, type metadata accessor for ASCOpenAppError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10002A788(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10002B44C((unint64_t *)&qword_1001A1560, type metadata accessor for ASCOpenAppError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_10002A818(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002B44C((unint64_t *)&qword_1001A1560, type metadata accessor for ASCOpenAppError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_10002A894()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10002A8A4(uint64_t a1)
{
  uint64_t v2 = sub_10002B44C(&qword_1001A1380, type metadata accessor for ASDServerError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10002A910(uint64_t a1)
{
  uint64_t v2 = sub_10002B44C(&qword_1001A1380, type metadata accessor for ASDServerError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10002A97C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10002B44C(&qword_1001A1380, type metadata accessor for ASDServerError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_10002AA0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002B44C(&qword_1001A1380, type metadata accessor for ASDServerError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_10002AA88()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10002AA98(uint64_t a1)
{
  uint64_t v2 = sub_10002B44C((unint64_t *)&unk_1001A4E10, type metadata accessor for AMSError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10002AB04(uint64_t a1)
{
  uint64_t v2 = sub_10002B44C((unint64_t *)&unk_1001A4E10, type metadata accessor for AMSError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10002AB70(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10002B44C((unint64_t *)&unk_1001A4E10, type metadata accessor for AMSError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_10002AC00()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_10002AC38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002B44C((unint64_t *)&unk_1001A4E10, type metadata accessor for AMSError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

void *sub_10002ACB4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_10002ACC4(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_10002ACD0()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10002ACDC(uint64_t a1)
{
  uint64_t v2 = sub_10002B44C((unint64_t *)&qword_1001A1370, type metadata accessor for ASCMetricsError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10002AD48(uint64_t a1)
{
  uint64_t v2 = sub_10002B44C((unint64_t *)&qword_1001A1370, type metadata accessor for ASCMetricsError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10002ADB4(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10002B44C((unint64_t *)&qword_1001A1370, type metadata accessor for ASCMetricsError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_10002AE44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002B44C((unint64_t *)&qword_1001A1370, type metadata accessor for ASCMetricsError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_10002AEC0()
{
  return Hasher._finalize()();
}

uint64_t sub_10002AF20()
{
  sub_10002B44C(&qword_1001A1488, type metadata accessor for AMSMediaTaskPlatform);
  sub_10002B44C(&qword_1001A1490, type metadata accessor for AMSMediaTaskPlatform);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_10002AFDC()
{
  sub_10002B44C(&qword_1001A14A8, type metadata accessor for Kind);
  sub_10002B44C(&qword_1001A14B0, type metadata accessor for Kind);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_10002B098()
{
  sub_10002B44C(&qword_1001A14B8, type metadata accessor for Context);
  sub_10002B44C(&qword_1001A14C0, type metadata accessor for Context);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_10002B154()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_10002B210@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_10002D8E0(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_10002B250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10002B44C((unint64_t *)&qword_1001A1300, type metadata accessor for ASCAppOfferActionError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10002B2D4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10002B300()
{
  sub_10002B44C(&qword_1001A0ED0, type metadata accessor for ASCAppState);
  sub_10002B44C(&qword_1001A0ED8, type metadata accessor for ASCAppState);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_10002B3BC()
{
  return sub_10002B44C(&qword_1001A0EB8, type metadata accessor for ASCAppState);
}

uint64_t sub_10002B404()
{
  return sub_10002B44C(&qword_1001A0EC0, type metadata accessor for ASCAppState);
}

uint64_t sub_10002B44C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002B494()
{
  return sub_10002B44C(&qword_1001A0EC8, type metadata accessor for ASCAppState);
}

void type metadata accessor for ASCContingentOfferType(uint64_t a1)
{
}

void type metadata accessor for ASCControllerRequirement(uint64_t a1)
{
}

void type metadata accessor for Format(uint64_t a1)
{
}

void type metadata accessor for Crop(uint64_t a1)
{
}

void type metadata accessor for Decoration(uint64_t a1)
{
}

void type metadata accessor for ASCMetricsInvocationPoint(uint64_t a1)
{
}

void type metadata accessor for ASCAppOfferActionError(uint64_t a1)
{
}

void type metadata accessor for Platform(uint64_t a1)
{
}

void type metadata accessor for AMSMediaTaskPlatform(uint64_t a1)
{
}

void type metadata accessor for AMSError(uint64_t a1)
{
}

void type metadata accessor for ASCOfferFlags(uint64_t a1)
{
}

void type metadata accessor for HeadingKind(uint64_t a1)
{
}

void type metadata accessor for Kind(uint64_t a1)
{
}

void type metadata accessor for Context(uint64_t a1)
{
}

void type metadata accessor for OSSignpostType(uint64_t a1)
{
}

void type metadata accessor for ASCMetricsError(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for ASCSignpostTag(uint64_t a1)
{
}

void type metadata accessor for Code(uint64_t a1)
{
}

void type metadata accessor for ASCOfferTitleVariant(uint64_t a1)
{
}

uint64_t sub_10002B66C()
{
  sub_10002B44C((unint64_t *)&qword_1001A14D8, type metadata accessor for ASCOfferTitleVariant);
  sub_10002B44C(&qword_1001A14E0, type metadata accessor for ASCOfferTitleVariant);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_10002B728()
{
  return sub_10002B44C(&qword_1001A1160, type metadata accessor for ASCOfferTitleVariant);
}

uint64_t sub_10002B770()
{
  return sub_10002B44C(&qword_1001A1168, type metadata accessor for ASCOfferTitleVariant);
}

uint64_t sub_10002B7B8()
{
  return sub_10002B44C(&qword_1001A1170, type metadata accessor for ASCSignpostTag);
}

uint64_t sub_10002B800()
{
  return sub_10002B44C(&qword_1001A1178, type metadata accessor for ASCSignpostTag);
}

uint64_t sub_10002B848()
{
  return sub_10002B44C(&qword_1001A1180, type metadata accessor for ASCSignpostTag);
}

uint64_t sub_10002B890()
{
  sub_10002B44C(&qword_1001A1458, type metadata accessor for Decoration);
  sub_10002B44C((unint64_t *)&unk_1001A1460, type metadata accessor for Decoration);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_10002B94C()
{
  sub_10002B44C(&qword_1001A1448, type metadata accessor for Crop);
  sub_10002B44C(&qword_1001A1450, type metadata accessor for Crop);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_10002BA08()
{
  sub_10002B44C(&qword_1001A1438, type metadata accessor for Format);
  sub_10002B44C(&qword_1001A1440, type metadata accessor for Format);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_10002BAC4()
{
  sub_10002B44C(&qword_1001A1498, type metadata accessor for HeadingKind);
  sub_10002B44C(&qword_1001A14A0, type metadata accessor for HeadingKind);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_10002BB80()
{
  sub_10002B44C(&qword_1001A1428, type metadata accessor for ASCControllerRequirement);
  sub_10002B44C(&qword_1001A1430, type metadata accessor for ASCControllerRequirement);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_10002BC3C()
{
  sub_10002B44C((unint64_t *)&unk_1001A1D70, type metadata accessor for ASCMetricsInvocationPoint);
  sub_10002B44C(&qword_1001A1470, type metadata accessor for ASCMetricsInvocationPoint);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_10002BCF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10002B44C((unint64_t *)&qword_1001A1560, type metadata accessor for ASCOpenAppError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10002BD7C(uint64_t a1)
{
  uint64_t v2 = sub_10002B44C(&qword_1001A1388, type metadata accessor for ASDServerError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10002BDE8(uint64_t a1)
{
  uint64_t v2 = sub_10002B44C(&qword_1001A1388, type metadata accessor for ASDServerError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10002BE54(uint64_t a1)
{
  uint64_t v2 = sub_10002B44C(&qword_1001A1380, type metadata accessor for ASDServerError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10002BEC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10002B44C(&qword_1001A1380, type metadata accessor for ASDServerError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10002BF44@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_10002BF8C()
{
  sub_10002B44C(&qword_1001A1478, type metadata accessor for Platform);
  sub_10002B44C(&qword_1001A1480, type metadata accessor for Platform);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t sub_10002C048(uint64_t a1)
{
  uint64_t v2 = sub_10002B44C(&qword_1001A1308, type metadata accessor for AMSError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10002C0B4(uint64_t a1)
{
  uint64_t v2 = sub_10002B44C(&qword_1001A1308, type metadata accessor for AMSError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10002C120(uint64_t a1)
{
  uint64_t v2 = sub_10002B44C((unint64_t *)&unk_1001A4E10, type metadata accessor for AMSError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10002C18C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10002B44C((unint64_t *)&unk_1001A4E10, type metadata accessor for AMSError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

BOOL sub_10002C210(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10002C224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10002B44C((unint64_t *)&qword_1001A1370, type metadata accessor for ASCMetricsError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10002C2A8()
{
  return sub_10002B44C(&qword_1001A1188, type metadata accessor for ASCMetricsError);
}

uint64_t sub_10002C2F0()
{
  return sub_10002B44C(&qword_1001A1190, type metadata accessor for ASCMetricsError);
}

uint64_t sub_10002C338()
{
  return sub_10002B44C(&qword_1001A1198, type metadata accessor for Context);
}

uint64_t sub_10002C380()
{
  return sub_10002B44C(&qword_1001A11A0, type metadata accessor for Context);
}

uint64_t sub_10002C3C8()
{
  return sub_10002B44C(&qword_1001A11A8, type metadata accessor for Context);
}

uint64_t sub_10002C410()
{
  return sub_10002B44C((unint64_t *)&qword_1001A11B0, type metadata accessor for Kind);
}

uint64_t sub_10002C458()
{
  return sub_10002B44C(&qword_1001A11B8, type metadata accessor for Kind);
}

uint64_t sub_10002C4A0()
{
  return sub_10002B44C(&qword_1001A11C0, type metadata accessor for Kind);
}

uint64_t sub_10002C4E8()
{
  return sub_10002B44C((unint64_t *)&qword_1001A11C8, type metadata accessor for HeadingKind);
}

uint64_t sub_10002C530()
{
  return sub_10002B44C(&qword_1001A11D0, type metadata accessor for HeadingKind);
}

uint64_t sub_10002C578(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_10002C5BC()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10002C610()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10002C684()
{
  return sub_10002B44C(&qword_1001A11D8, type metadata accessor for HeadingKind);
}

uint64_t sub_10002C6CC()
{
  return sub_10002B44C(&qword_1001A11E0, type metadata accessor for ASCOfferFlags);
}

uint64_t sub_10002C714()
{
  return sub_10002B44C(&qword_1001A11E8, type metadata accessor for ASCOfferFlags);
}

uint64_t sub_10002C75C()
{
  return sub_10002B44C(&qword_1001A11F0, type metadata accessor for ASCOfferFlags);
}

uint64_t sub_10002C7A4()
{
  return sub_10002B44C(&qword_1001A11F8, type metadata accessor for ASCOfferFlags);
}

uint64_t sub_10002C7EC()
{
  return sub_10002B44C(&qword_1001A1200, type metadata accessor for AMSError);
}

uint64_t sub_10002C834()
{
  return sub_10002B44C(&qword_1001A1208, type metadata accessor for AMSError);
}

uint64_t sub_10002C87C()
{
  return sub_10002B44C(&qword_1001A1210, type metadata accessor for AMSMediaTaskPlatform);
}

uint64_t sub_10002C8C4()
{
  return sub_10002B44C(&qword_1001A1218, type metadata accessor for AMSMediaTaskPlatform);
}

uint64_t sub_10002C90C()
{
  return sub_10002B44C(&qword_1001A1220, type metadata accessor for AMSMediaTaskPlatform);
}

uint64_t sub_10002C954()
{
  return sub_10002B44C(&qword_1001A1228, type metadata accessor for Platform);
}

uint64_t sub_10002C99C()
{
  return sub_10002B44C(&qword_1001A1230, type metadata accessor for Platform);
}

uint64_t sub_10002C9E4()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_10002CA70()
{
  return sub_10002B44C(&qword_1001A1238, type metadata accessor for Platform);
}

uint64_t sub_10002CAB8()
{
  return sub_10002B44C(&qword_1001A1240, type metadata accessor for ASCAppOfferActionError);
}

uint64_t sub_10002CB00()
{
  return sub_10002B44C(&qword_1001A1248, type metadata accessor for ASCAppOfferActionError);
}

uint64_t sub_10002CB48()
{
  return sub_10002B44C(&qword_1001A1250, type metadata accessor for ASCMetricsInvocationPoint);
}

uint64_t sub_10002CB90()
{
  return sub_10002B44C(&qword_1001A1258, type metadata accessor for ASCMetricsInvocationPoint);
}

uint64_t sub_10002CBD8()
{
  return sub_10002B44C(&qword_1001A1260, type metadata accessor for Decoration);
}

uint64_t sub_10002CC20()
{
  return sub_10002B44C(&qword_1001A1268, type metadata accessor for Decoration);
}

uint64_t sub_10002CC68()
{
  return sub_10002B44C(&qword_1001A1270, type metadata accessor for Decoration);
}

uint64_t sub_10002CCB0()
{
  return sub_10002B44C(&qword_1001A1278, type metadata accessor for Crop);
}

uint64_t sub_10002CCF8()
{
  return sub_10002B44C(&qword_1001A1280, type metadata accessor for Crop);
}

uint64_t sub_10002CD40()
{
  return sub_10002B44C(&qword_1001A1288, type metadata accessor for Crop);
}

uint64_t sub_10002CD88()
{
  return sub_10002B44C(&qword_1001A1290, type metadata accessor for Format);
}

uint64_t sub_10002CDD0()
{
  return sub_10002B44C(&qword_1001A1298, type metadata accessor for Format);
}

uint64_t sub_10002CE18()
{
  return sub_10002B44C(&qword_1001A12A0, type metadata accessor for Format);
}

uint64_t sub_10002CE60()
{
  return sub_10002B44C(&qword_1001A12A8, type metadata accessor for ASCControllerRequirement);
}

uint64_t sub_10002CEA8()
{
  return sub_10002B44C(&qword_1001A12B0, type metadata accessor for ASCControllerRequirement);
}

uint64_t sub_10002CEF0()
{
  return sub_10002B44C(&qword_1001A12B8, type metadata accessor for ASCControllerRequirement);
}

uint64_t sub_10002CF38()
{
  return sub_10002B44C(&qword_1001A12C0, type metadata accessor for ASCMetricsInvocationPoint);
}

uint64_t sub_10002CF80()
{
  return sub_10002B44C(&qword_1001A12C8, type metadata accessor for ASCAppOfferActionError);
}

uint64_t sub_10002CFC8()
{
  return sub_10002B44C(&qword_1001A12D0, type metadata accessor for ASCAppOfferActionError);
}

uint64_t sub_10002D010()
{
  return sub_10002B44C(&qword_1001A12D8, type metadata accessor for ASCAppOfferActionError);
}

uint64_t sub_10002D058()
{
  return sub_10002B44C(&qword_1001A12E0, _s3__C4CodeOMa_3);
}

void _s3__C4CodeOMa_3(uint64_t a1)
{
}

uint64_t sub_10002D0B4()
{
  return sub_10002B44C(&qword_1001A12E8, _s3__C4CodeOMa_3);
}

unint64_t sub_10002D100()
{
  unint64_t result = qword_1001A12F0;
  if (!qword_1001A12F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A12F0);
  }
  return result;
}

uint64_t sub_10002D154()
{
  return sub_10002B44C(&qword_1001A12F8, _s3__C4CodeOMa_3);
}

uint64_t sub_10002D19C()
{
  return sub_10002B44C((unint64_t *)&qword_1001A1300, type metadata accessor for ASCAppOfferActionError);
}

uint64_t sub_10002D1E4()
{
  return sub_10002B44C(&qword_1001A1308, type metadata accessor for AMSError);
}

uint64_t sub_10002D22C()
{
  return sub_10002B44C(&qword_1001A1310, type metadata accessor for AMSError);
}

uint64_t sub_10002D274()
{
  return sub_10002B44C(&qword_1001A1318, type metadata accessor for AMSError);
}

uint64_t sub_10002D2BC()
{
  return sub_10002B44C(&qword_1001A1320, _s3__C4CodeOMa_2);
}

void _s3__C4CodeOMa_2(uint64_t a1)
{
}

uint64_t sub_10002D318()
{
  return sub_10002B44C(&qword_1001A1328, _s3__C4CodeOMa_2);
}

uint64_t sub_10002D360()
{
  return sub_10002B44C((unint64_t *)&unk_1001A1330, _s3__C4CodeOMa_2);
}

uint64_t sub_10002D3A8()
{
  return sub_10002B44C((unint64_t *)&unk_1001A4E10, type metadata accessor for AMSError);
}

uint64_t sub_10002D3F0()
{
  return sub_10002B44C(&qword_1001A1340, type metadata accessor for ASCMetricsError);
}

uint64_t sub_10002D438()
{
  return sub_10002B44C(&qword_1001A1348, type metadata accessor for ASCMetricsError);
}

uint64_t sub_10002D480()
{
  return sub_10002B44C(&qword_1001A1350, type metadata accessor for ASCMetricsError);
}

uint64_t sub_10002D4C8()
{
  return sub_10002B44C(&qword_1001A1358, _s3__C4CodeOMa_1);
}

void _s3__C4CodeOMa_1(uint64_t a1)
{
}

uint64_t sub_10002D524()
{
  return sub_10002B44C(&qword_1001A1360, _s3__C4CodeOMa_1);
}

uint64_t sub_10002D56C()
{
  return sub_10002B44C(&qword_1001A1368, _s3__C4CodeOMa_1);
}

uint64_t sub_10002D5B4()
{
  return sub_10002B44C((unint64_t *)&qword_1001A1370, type metadata accessor for ASCMetricsError);
}

uint64_t sub_10002D5FC()
{
  return sub_10002B44C(&qword_1001A1378, type metadata accessor for Code);
}

uint64_t sub_10002D644()
{
  return sub_10002B44C(&qword_1001A1380, type metadata accessor for ASDServerError);
}

void type metadata accessor for ASDServerError(uint64_t a1)
{
}

uint64_t sub_10002D6A0()
{
  return sub_10002B44C(&qword_1001A1388, type metadata accessor for ASDServerError);
}

uint64_t sub_10002D6E8()
{
  return sub_10002B44C(&qword_1001A1390, type metadata accessor for ASDServerError);
}

uint64_t sub_10002D730()
{
  return sub_10002B44C(&qword_1001A1398, type metadata accessor for ASDServerError);
}

uint64_t sub_10002D778()
{
  return sub_10002B44C((unint64_t *)&qword_1001A13A0, type metadata accessor for Code);
}

uint64_t sub_10002D7C0()
{
  return sub_10002B44C(&qword_1001A13A8, type metadata accessor for Code);
}

uint64_t sub_10002D808()
{
  return sub_10002B44C(&qword_1001A13B0, type metadata accessor for ASDServerError);
}

uint64_t sub_10002D850()
{
  return sub_10002B44C(&qword_1001A13B8, type metadata accessor for ASDServerError);
}

uint64_t sub_10002D898()
{
  return sub_10002B44C(&qword_1001A13C0, type metadata accessor for ASCOfferTitleVariant);
}

uint64_t sub_10002D8E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

void type metadata accessor for ASCOpenAppError(uint64_t a1)
{
}

void _s3__C4CodeOMa_0(uint64_t a1)
{
}

void type metadata accessor for AMSMediaTaskType(uint64_t a1)
{
}

void sub_10002D954(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_10002D99C()
{
  return sub_10002B44C(&qword_1001A1520, type metadata accessor for ASCOpenAppError);
}

uint64_t sub_10002D9E4()
{
  return sub_10002B44C(&qword_1001A1528, type metadata accessor for ASCOpenAppError);
}

uint64_t sub_10002DA2C()
{
  return sub_10002B44C(&qword_1001A1530, type metadata accessor for ASCOpenAppError);
}

uint64_t sub_10002DA74()
{
  return sub_10002B44C(&qword_1001A1538, type metadata accessor for ASCOpenAppError);
}

uint64_t sub_10002DABC()
{
  return sub_10002B44C(&qword_1001A1540, type metadata accessor for ASCOpenAppError);
}

uint64_t sub_10002DB04()
{
  return sub_10002B44C(&qword_1001A1548, _s3__C4CodeOMa_0);
}

uint64_t sub_10002DB4C()
{
  return sub_10002B44C(&qword_1001A1550, _s3__C4CodeOMa_0);
}

uint64_t sub_10002DB94()
{
  return sub_10002B44C(&qword_1001A1558, _s3__C4CodeOMa_0);
}

uint64_t sub_10002DBDC()
{
  return sub_10002B44C((unint64_t *)&qword_1001A1560, type metadata accessor for ASCOpenAppError);
}

double sub_10002DC48@<D0>(uint64_t a1@<X8>)
{
  self;
  uint64_t v2 = swift_dynamicCastObjCClass();
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = &qword_1001A1808;
    *(void *)(a1 + 24) = sub_10002EE34(0, (unint64_t *)&qword_1001A1808);
    uint64_t v5 = (uint64_t *)&unk_1001A1810;
  }
  else
  {
    self;
    uint64_t v6 = swift_dynamicCastObjCClass();
    if (v6)
    {
      uint64_t v3 = v6;
      uint64_t v4 = (uint64_t *)&qword_1001A17F8;
      *(void *)(a1 + 24) = sub_10002EE34(0, &qword_1001A17F8);
      uint64_t v5 = &qword_1001A1800;
    }
    else
    {
      self;
      uint64_t v7 = swift_dynamicCastObjCClass();
      if (v7)
      {
        uint64_t v3 = v7;
        uint64_t v4 = &qword_1001A17E8;
        *(void *)(a1 + 24) = sub_10002EE34(0, (unint64_t *)&qword_1001A17E8);
        uint64_t v5 = &qword_1001A17F0;
      }
      else
      {
        self;
        uint64_t v8 = swift_dynamicCastObjCClass();
        if (v8)
        {
          uint64_t v3 = v8;
          uint64_t v4 = (uint64_t *)&qword_1001A17D8;
          *(void *)(a1 + 24) = sub_10002EE34(0, &qword_1001A17D8);
          uint64_t v5 = &qword_1001A17E0;
        }
        else
        {
          self;
          uint64_t v9 = swift_dynamicCastObjCClass();
          if (v9)
          {
            uint64_t v3 = v9;
            uint64_t v4 = (uint64_t *)&qword_1001A17C8;
            *(void *)(a1 + 24) = sub_10002EE34(0, &qword_1001A17C8);
            uint64_t v5 = (uint64_t *)&unk_1001A17D0;
          }
          else
          {
            self;
            uint64_t v10 = swift_dynamicCastObjCClass();
            if (v10)
            {
              uint64_t v3 = v10;
              uint64_t v4 = (uint64_t *)&qword_1001A17B8;
              *(void *)(a1 + 24) = sub_10002EE34(0, &qword_1001A17B8);
              uint64_t v5 = &qword_1001A17C0;
            }
            else
            {
              self;
              uint64_t v11 = swift_dynamicCastObjCClass();
              if (v11)
              {
                uint64_t v3 = v11;
                uint64_t v4 = (uint64_t *)&qword_1001A17A8;
                *(void *)(a1 + 24) = sub_10002EE34(0, &qword_1001A17A8);
                uint64_t v5 = &qword_1001A17B0;
              }
              else
              {
                self;
                uint64_t v12 = swift_dynamicCastObjCClass();
                if (!v12)
                {
                  *(void *)(a1 + 32) = 0;
                  double result = 0.0;
                  *(_OWORD *)a1 = 0u;
                  *(_OWORD *)(a1 + 16) = 0u;
                  return result;
                }
                uint64_t v3 = v12;
                uint64_t v4 = &qword_1001A1798;
                *(void *)(a1 + 24) = sub_10002EE34(0, (unint64_t *)&qword_1001A1798);
                uint64_t v5 = &qword_1001A17A0;
              }
            }
          }
        }
      }
    }
  }
  *(void *)(a1 + 32) = sub_10002EDF0((unint64_t *)v5, (unint64_t *)v4);
  *(void *)a1 = v3;

  swift_unknownObjectRetain();
  return result;
}

uint64_t sub_10002DFC4(uint64_t a1, uint64_t a2)
{
  uint64_t v43 = a2;
  uint64_t v3 = type metadata accessor for JSONError();
  uint64_t v39 = *(void *)(v3 - 8);
  uint64_t v40 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  uint64_t v37 = (uint64_t *)((char *)&v36 - v7);
  uint64_t v8 = sub_10002EB60((uint64_t *)&unk_1001A1690);
  uint64_t v38 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for JSONContext();
  uint64_t v41 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for JSONObject();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  v42 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  id v19 = (char *)&v36 - v18;
  char v20 = JSONObject.isNull.getter();
  uint64_t result = 0;
  if ((v20 & 1) == 0)
  {
    uint64_t v36 = v13;
    JSONObject.subscript.getter();
    uint64_t v22 = JSONObject.string.getter();
    uint64_t v24 = v23;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v14);
    if (v24)
    {
      BOOL v25 = v22 == 0x66664F7472656C61 && v24 == 0xEA00000000007265;
      if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        id v26 = &qword_1001A1788;
        sub_10002EB60(&qword_1001A1788);
        (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v42, a1, v14);
        (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v36, v43, v11);
        id v27 = (unint64_t *)&unk_1001A1790;
LABEL_9:
        sub_10002EDA0(v27, v26);
        ExpressibleByJSON.init(tryDeserializing:using:)();
        return v46[0];
      }
      if (v22 == 0xD000000000000014 && v24 == 0x800000010015A8D0
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        id v26 = &qword_1001A1778;
        sub_10002EB60(&qword_1001A1778);
        (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v42, a1, v14);
        (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v36, v43, v11);
        id v27 = (unint64_t *)&unk_1001A1780;
        goto LABEL_9;
      }
      if (v22 == 0x726566664F707061 && v24 == 0xE800000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        id v26 = &qword_1001A1768;
        sub_10002EB60(&qword_1001A1768);
        (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v42, a1, v14);
        (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v36, v43, v11);
        id v27 = (unint64_t *)&unk_1001A1770;
        goto LABEL_9;
      }
      if (v22 == 0x664F656461637261 && v24 == 0xEB00000000726566
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        id v26 = &qword_1001A1758;
        sub_10002EB60(&qword_1001A1758);
        (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v42, a1, v14);
        (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v36, v43, v11);
        id v27 = (unint64_t *)&unk_1001A1760;
        goto LABEL_9;
      }
      uint64_t v32 = v22;
      if (v22 == 0x65676E69746E6F63 && v24 == 0xEF726566664F746ELL
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        id v26 = &qword_1001A1748;
        sub_10002EB60(&qword_1001A1748);
        (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v42, a1, v14);
        (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v36, v43, v11);
        id v27 = (unint64_t *)&unk_1001A1750;
        goto LABEL_9;
      }
      if (v22 == 0x656C41726566666FLL && v24 == 0xEF726566664F7472
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        id v26 = &qword_1001A1738;
        sub_10002EB60(&qword_1001A1738);
        (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v42, a1, v14);
        (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v36, v43, v11);
        id v27 = (unint64_t *)&unk_1001A1740;
        goto LABEL_9;
      }
      if (v22 == 0x6C75666574617473 && v24 == 0xED0000726566664FLL
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        id v26 = &qword_1001A1728;
        sub_10002EB60(&qword_1001A1728);
        (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v42, a1, v14);
        (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v36, v43, v11);
        id v27 = (unint64_t *)&unk_1001A1730;
        goto LABEL_9;
      }
      if (v22 == 0x726566664F6C7275 && v24 == 0xE800000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        id v26 = &qword_1001A1718;
        sub_10002EB60(&qword_1001A1718);
        (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v42, a1, v14);
        (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v36, v43, v11);
        id v27 = (unint64_t *)&unk_1001A1720;
        goto LABEL_9;
      }
      static JSONContext.initFailureObserver.getter();
      sub_10002EB60(&qword_1001A2760);
      JSONContext.subscript.getter();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v10, v8);
      uint64_t v33 = sub_10002EB60(&qword_1001A1700);
      id v34 = v37;
      *uint64_t v37 = v32;
      v34[1] = v24;
      v34[2] = v33;
      (*(void (**)(void))(v39 + 104))();
      sub_10002EBA4((uint64_t)v46, (uint64_t)v44);
      if (v45)
      {
        sub_10002EC6C(v44, v45);
        sub_10002ECB0();
        uint64_t v29 = v40;
        swift_allocError();
        uint64_t v30 = v39;
        uint64_t v6 = v37;
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(v39 + 16))(v35, v37, v29);
        goto LABEL_12;
      }
      (*(void (**)(uint64_t *, uint64_t))(v39 + 8))(v37, v40);
    }
    else
    {
      static JSONContext.initFailureObserver.getter();
      sub_10002EB60(&qword_1001A2760);
      JSONContext.subscript.getter();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v10, v8);
      uint64_t v28 = sub_10002EB60(&qword_1001A1700);
      uint64_t *v6 = 0x646E696B24;
      v6[1] = 0xE500000000000000;
      v6[2] = v28;
      uint64_t v30 = v39;
      uint64_t v29 = v40;
      (*(void (**)(uint64_t *, void, uint64_t))(v39 + 104))(v6, enum case for JSONError.missingProperty(_:), v40);
      sub_10002EBA4((uint64_t)v46, (uint64_t)v44);
      if (v45)
      {
        sub_10002EC6C(v44, v45);
        sub_10002ECB0();
        swift_allocError();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(v30 + 16))(v31, v6, v29);
LABEL_12:
        dispatch thunk of JSONInitFailureObserver.tryingToInitialize(_:didFailWith:)();
        (*(void (**)(uint64_t *, uint64_t))(v30 + 8))(v6, v29);
        sub_10002EC0C((uint64_t)v46);
        swift_errorRelease();
        sub_10002ED08((uint64_t)v44);
        return 0;
      }
      (*(void (**)(uint64_t *, uint64_t))(v30 + 8))(v6, v29);
    }
    sub_10002EC0C((uint64_t)v46);
    sub_10002EC0C((uint64_t)v44);
    return 0;
  }
  return result;
}

uint64_t sub_10002EB60(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_10002EBA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A1708);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002EC0C(uint64_t a1)
{
  uint64_t v2 = sub_10002EB60(&qword_1001A1708);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_10002EC6C(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_10002ECB0()
{
  unint64_t result = qword_1001A1710;
  if (!qword_1001A1710)
  {
    type metadata accessor for JSONError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A1710);
  }
  return result;
}

uint64_t sub_10002ED08(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10002ED58(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_10002EDA0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10002ED58(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002EDF0(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10002EE34(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002EE34(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void *sub_10002EE70(void *a1, void *a2)
{
  uint64_t v3 = v2;
  v3[5] = 0;
  v3[2] = a1;
  v3[3] = a2;
  sub_10002EB60(&qword_1001A18F0);
  swift_allocObject();
  id v6 = a1;
  id v7 = a2;
  uint64_t v8 = AsyncEvent.init()();
  unint64_t v9 = sub_10002F574();
  v3[6] = v8;
  v3[7] = v9;
  v3[4] = [objc_allocWithZone((Class)JEUnfairLock) init];
  id v10 = objc_msgSend(v6, "ams_activeiTunesAccount");
  uint64_t v11 = (void *)v3[5];
  v3[5] = v10;

  uint64_t v12 = qword_1001A0D90;
  swift_retain();
  if (v12 != -1) {
    swift_once();
  }
  [v7 addObserver:v3 selector:"accountStoreDidChange:" name:qword_1001A1820 object:0];
  swift_release();
  uint64_t v13 = qword_1001A0D98;
  swift_retain();
  if (v13 != -1) {
    swift_once();
  }
  [v7 addObserver:v3 selector:"accountCookiesDidChange:" name:qword_1001A1828 object:0];
  swift_release();

  return v3;
}

uint64_t sub_10002F010()
{
  [v0[3] removeObserver:v0];

  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

id sub_10002F07C()
{
  qword_1001A1820 = ACDAccountStoreDidChangeNotification;
  return ACDAccountStoreDidChangeNotification;
}

id sub_10002F094()
{
  qword_1001A1828 = AMSAccountCookiesChangedNotificationName;
  return AMSAccountCookiesChangedNotificationName;
}

uint64_t sub_10002F1D8()
{
  uint64_t v1 = type metadata accessor for AccountProviderActiveAccountChange();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void **)(v0 + 32);
  [v5 lock];
  id v6 = objc_msgSend(*(id *)(v0 + 16), "ams_activeiTunesAccount");
  id v7 = *(void **)(v0 + 40);
  *(void *)(v0 + 40) = v6;

  [v5 unlock];
  swift_getObjectType();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for AccountProviderActiveAccountChange.account(_:), v1);
  dispatch thunk of EventEmitter.post(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t type metadata accessor for ActiveITunesAccountProvider()
{
  return self;
}

id sub_10002F444@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void **)(v1 + 32);
  [v3 lock];
  uint64_t v4 = *(void **)(v1 + 40);
  if (v4)
  {
    id v5 = v4;
    Account.init(wrapping:)();
    uint64_t v6 = type metadata accessor for Account();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a1, 0, 1, v6);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Account();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a1, 1, 1, v7);
  }

  return [v3 unlock];
}

id sub_10002F524@<X0>(uint64_t a1@<X8>)
{
  return sub_10002F444(a1);
}

uint64_t sub_10002F548()
{
  return swift_unknownObjectRetain();
}

unint64_t sub_10002F574()
{
  unint64_t result = qword_1001A18F8;
  if (!qword_1001A18F8)
  {
    sub_10002ED58(&qword_1001A18F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A18F8);
  }
  return result;
}

uint64_t sub_10002F5D0()
{
  uint64_t v0 = sub_10002EB60(&qword_1001A50E0);
  sub_10002F648(v0, qword_1001AE268);
  sub_10002F6AC(v0, (uint64_t)qword_1001AE268);
  sub_10002F6E4();
  return MetricsFieldsContext.Property.init(_:)();
}

uint64_t *sub_10002F648(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_10002F6AC(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

unint64_t sub_10002F6E4()
{
  unint64_t result = qword_1001A5470;
  if (!qword_1001A5470)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001A5470);
  }
  return result;
}

uint64_t sub_10002F724()
{
  uint64_t v0 = type metadata accessor for MetricsFieldExclusionRequest();
  sub_10002F648(v0, qword_1001AE280);
  sub_10002F6AC(v0, (uint64_t)qword_1001AE280);
  return MetricsFieldExclusionRequest.init(rawValue:)();
}

ValueMetadata *type metadata accessor for ActivityMetricsFieldsProvider()
{
  return &type metadata for ActivityMetricsFieldsProvider;
}

uint64_t sub_10002F79C()
{
  return MetricsFieldsProvider.addTimeSensitiveMetricsFields(into:using:)();
}

uint64_t sub_10002F7B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_10002F874;
  return MetricsFieldsProvider.addExpensiveMetricsFields(into:using:)(a1, a2, a3, a4);
}

uint64_t sub_10002F874()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10002F968@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for MetricsFieldsProviderCategory.expensive(_:);
  uint64_t v3 = type metadata accessor for MetricsFieldsProviderCategory();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t sub_10002F9DC(uint64_t a1)
{
  return sub_10002F9F4(a1);
}

uint64_t sub_10002F9F4(uint64_t a1)
{
  if (qword_1001A0DA0 != -1) {
    goto LABEL_32;
  }
  while (1)
  {
    uint64_t v3 = sub_10002EB60(&qword_1001A50E0);
    sub_10002F6AC(v3, (uint64_t)qword_1001AE268);
    sub_10002F6E4();
    MetricsFieldsContext.subscript.getter();
    if (!v24[0]) {
      break;
    }
    id v21 = v24[0];
    id v4 = [v24[0] fields];
    uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    int64_t v6 = 0;
    uint64_t v7 = *(void *)(v5 + 64);
    uint64_t v22 = v5 + 64;
    uint64_t v25 = v5;
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = -1;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    unint64_t v10 = v9 & v7;
    int64_t v23 = (unint64_t)(v8 + 63) >> 6;
    if ((v9 & v7) != 0)
    {
LABEL_6:
      unint64_t v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v12 = v11 | (v6 << 6);
      goto LABEL_18;
    }
    while (1)
    {
      if (__OFADD__(v6++, 1))
      {
        __break(1u);
        goto LABEL_31;
      }
      if (v6 >= v23) {
        goto LABEL_29;
      }
      unint64_t v14 = *(void *)(v22 + 8 * v6);
      if (!v14) {
        break;
      }
LABEL_17:
      unint64_t v10 = (v14 - 1) & v14;
      unint64_t v12 = __clz(__rbit64(v14)) + (v6 << 6);
LABEL_18:
      uint64_t v16 = *(void *)(v25 + 56) + 16 * v12;
      uint64_t v17 = *(void **)v16;
      uint64_t v18 = *(void **)(v16 + 8);
      v24[3] = &type metadata for String;
      v24[0] = v17;
      v24[1] = v18;
      sub_10002FE00(a1, *(void *)(a1 + 24));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      dispatch thunk of MetricsFieldsBuilder.addValue(_:forField:)();
      swift_bridgeObjectRelease();
      if (v1)
      {

        swift_release();
        return sub_10002ED08((uint64_t)v24);
      }
      sub_10002ED08((uint64_t)v24);
      if (v10) {
        goto LABEL_6;
      }
    }
    int64_t v15 = v6 + 1;
    if (v6 + 1 >= v23) {
      goto LABEL_29;
    }
    unint64_t v14 = *(void *)(v22 + 8 * v15);
    if (v14) {
      goto LABEL_16;
    }
    int64_t v15 = v6 + 2;
    if (v6 + 2 >= v23) {
      goto LABEL_29;
    }
    unint64_t v14 = *(void *)(v22 + 8 * v15);
    if (v14) {
      goto LABEL_16;
    }
    int64_t v15 = v6 + 3;
    if (v6 + 3 >= v23)
    {
LABEL_29:

      return swift_release();
    }
    unint64_t v14 = *(void *)(v22 + 8 * v15);
    if (v14)
    {
LABEL_16:
      int64_t v6 = v15;
      goto LABEL_17;
    }
    while (1)
    {
      int64_t v6 = v15 + 1;
      if (__OFADD__(v15, 1)) {
        break;
      }
      if (v6 >= v23) {
        goto LABEL_29;
      }
      unint64_t v14 = *(void *)(v22 + 8 * v6);
      ++v15;
      if (v14) {
        goto LABEL_17;
      }
    }
LABEL_31:
    __break(1u);
LABEL_32:
    swift_once();
  }
  if (qword_1001A0E78 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for OSLogger();
  sub_10002F6AC(v19, (uint64_t)qword_1001AE3B0);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CD00;
  LogMessage.init(stringLiteral:)();
  LogMessage.init(stringLiteral:)();
  Logger.error(_:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10002FE00(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_10002FE50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ActionMetrics();
  id v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t initializeBufferWithCopyOfBuffer for AlertAction.Button(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for AlertAction.Button(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a1 + 40))
  {
    return sub_10002ED08(a1 + 16);
  }
  return result;
}

uint64_t initializeWithCopy for AlertAction.Button(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = a2 + 2;
  uint64_t v6 = a2[5];
  swift_bridgeObjectRetain();
  if (v6)
  {
    uint64_t v7 = a2[6];
    *(void *)(a1 + 40) = v6;
    *(void *)(a1 + 48) = v7;
    (**(void (***)(uint64_t, void *, uint64_t))(v6 - 8))(a1 + 16, v5, v6);
  }
  else
  {
    long long v8 = *((_OWORD *)v5 + 1);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 32) = v8;
    *(void *)(a1 + 48) = v5[4];
  }
  return a1;
}

uint64_t assignWithCopy for AlertAction.Button(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 40);
  if (!*(void *)(a1 + 40))
  {
    if (v4)
    {
      *(void *)(a1 + 40) = v4;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 16, a2 + 16);
      return a1;
    }
LABEL_7:
    long long v5 = *(_OWORD *)(a2 + 16);
    long long v6 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = v6;
    return a1;
  }
  if (!v4)
  {
    sub_10002ED08(a1 + 16);
    goto LABEL_7;
  }
  sub_1000300B4((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
  return a1;
}

uint64_t *sub_1000300B4(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        unint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for AlertAction.Button(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AlertAction.Button(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 40)) {
    sub_10002ED08(a1 + 16);
  }
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for AlertAction.Button(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AlertAction.Button(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AlertAction.Button()
{
  return &type metadata for AlertAction.Button;
}

uint64_t *sub_100030408(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for ActionMetrics();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    unint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    void *v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (uint64_t *)((char *)a1 + v9);
    unint64_t v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    void *v13 = *v14;
    v13[1] = v15;
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10003050C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ActionMetrics();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000305A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  void *v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  void *v12 = *v13;
  v12[1] = v14;
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100030654(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  void *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  void *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100030738(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1000307C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  void *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  void *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100030884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100030898);
}

uint64_t sub_100030898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 28));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100030958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003096C);
}

uint64_t sub_10003096C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ActionMetrics();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for AlertAction()
{
  uint64_t result = qword_1001A1960;
  if (!qword_1001A1960) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100030A74()
{
  uint64_t result = type metadata accessor for ActionMetrics();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AlertActionImplementation()
{
  return &type metadata for AlertActionImplementation;
}

unint64_t sub_100030B2C()
{
  unint64_t result = qword_1001A54A0;
  if (!qword_1001A54A0)
  {
    type metadata accessor for AlertAction();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A54A0);
  }
  return result;
}

uint64_t sub_100030B84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for ActionOutcome.performed(_:);
  uint64_t v3 = type metadata accessor for ActionOutcome();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104))(a1, v2, v3);
}

void sub_100030BFC(id *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v44 = *a3;
  uint64_t v45 = a2;
  uint64_t v4 = type metadata accessor for ActionOutcome();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10002EB60(&qword_1001A19B8);
  uint64_t v42 = *(void *)(v8 - 8);
  uint64_t v43 = v8;
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10002EB60((uint64_t *)&unk_1001A2160);
  uint64_t v41 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = [*a1 selectedActionIdentifier];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v17 = v16;

  uint64_t v18 = HIBYTE(v17) & 0xF;
  uint64_t v19 = v15 & 0xFFFFFFFFFFFFLL;
  if ((v17 & 0x2000000000000000) != 0) {
    uint64_t v20 = HIBYTE(v17) & 0xF;
  }
  else {
    uint64_t v20 = v15 & 0xFFFFFFFFFFFFLL;
  }
  if (!v20)
  {
    swift_bridgeObjectRelease();
LABEL_50:
    sub_10002EB60((uint64_t *)&unk_1001A21F0);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for ActionOutcome.performed(_:), v4);
    Promise.__allocating_init(value:)();
    return;
  }
  if ((v17 & 0x1000000000000000) != 0)
  {
    uint64_t v22 = sub_100075708(v15, v17, 10);
    LOBYTE(v15) = v40;
    goto LABEL_44;
  }
  if ((v17 & 0x2000000000000000) == 0)
  {
    if ((v15 & 0x1000000000000000) == 0) {
      goto LABEL_60;
    }
    for (i = (unsigned __int8 *)((v17 & 0xFFFFFFFFFFFFFFFLL) + 32);
          ;
          i = (unsigned __int8 *)_StringObject.sharedUTF8.getter())
    {
      uint64_t v22 = (uint64_t)sub_1000756D8(i, v19, 10);
      LOBYTE(v15) = v23 & 1;
LABEL_44:
      swift_bridgeObjectRelease();
      if (v15) {
        break;
      }
      uint64_t v33 = type metadata accessor for AlertAction();
      if ((v22 & 0x8000000000000000) == 0)
      {
        uint64_t v34 = *(void *)(v45 + *(int *)(v33 + 28));
        if ((unint64_t)v22 >= *(void *)(v34 + 16))
        {
          __break(1u);
          goto LABEL_62;
        }
        sub_100031B48(v34 + 56 * v22 + 48, (uint64_t)&v46);
        if (v47)
        {
          sub_100031C10(&v46, (uint64_t)v48);
          inject<A, B>(_:from:)();
          uint64_t v36 = v42;
          uint64_t v35 = v43;
          (*(void (**)(char *, void, uint64_t))(v42 + 104))(v10, enum case for ActionDispatcher.MetricsBehavior.notProcessed<A>(_:), v43);
          ActionDispatcher.perform(_:withMetrics:asPartOf:)();
          (*(void (**)(char *, uint64_t))(v36 + 8))(v10, v35);
          (*(void (**)(char *, uint64_t))(v41 + 8))(v13, v11);
          sub_10002ED08((uint64_t)v48);
          return;
        }
        sub_100031BB0((uint64_t)&v46);
        goto LABEL_50;
      }
      __break(1u);
LABEL_60:
      ;
    }
    goto LABEL_50;
  }
  v48[0] = v15;
  v48[1] = v17 & 0xFFFFFFFFFFFFFFLL;
  if (v15 == 43)
  {
    if (!v18) {
      goto LABEL_63;
    }
    if (v18 == 1 || (BYTE1(v15) - 48) > 9u) {
      goto LABEL_31;
    }
    uint64_t v22 = (BYTE1(v15) - 48);
    if (v18 != 2)
    {
      if ((BYTE2(v15) - 48) > 9u) {
        goto LABEL_31;
      }
      uint64_t v22 = 10 * (BYTE1(v15) - 48) + (BYTE2(v15) - 48);
      uint64_t v24 = v18 - 3;
      if (v24)
      {
        uint64_t v25 = (unsigned __int8 *)v48 + 3;
        while (1)
        {
          unsigned int v26 = *v25 - 48;
          if (v26 > 9) {
            goto LABEL_31;
          }
          uint64_t v27 = 10 * v22;
          if ((unsigned __int128)(v22 * (__int128)10) >> 64 != (10 * v22) >> 63) {
            goto LABEL_31;
          }
          uint64_t v22 = v27 + v26;
          if (__OFADD__(v27, v26)) {
            goto LABEL_31;
          }
          LOBYTE(v15) = 0;
          ++v25;
          if (!--v24) {
            goto LABEL_44;
          }
        }
      }
    }
LABEL_43:
    LOBYTE(v15) = 0;
    goto LABEL_44;
  }
  if (v15 != 45)
  {
    if (!v18 || (v15 - 48) > 9u) {
      goto LABEL_31;
    }
    uint64_t v22 = (v15 - 48);
    if (v18 != 1)
    {
      if ((BYTE1(v15) - 48) > 9u) {
        goto LABEL_31;
      }
      uint64_t v22 = 10 * (v15 - 48) + (BYTE1(v15) - 48);
      uint64_t v28 = v18 - 2;
      if (v28)
      {
        uint64_t v29 = (unsigned __int8 *)v48 + 2;
        while (1)
        {
          unsigned int v30 = *v29 - 48;
          if (v30 > 9) {
            goto LABEL_31;
          }
          uint64_t v31 = 10 * v22;
          if ((unsigned __int128)(v22 * (__int128)10) >> 64 != (10 * v22) >> 63) {
            goto LABEL_31;
          }
          uint64_t v22 = v31 + v30;
          if (__OFADD__(v31, v30)) {
            goto LABEL_31;
          }
          LOBYTE(v15) = 0;
          ++v29;
          if (!--v28) {
            goto LABEL_44;
          }
        }
      }
    }
    goto LABEL_43;
  }
  if (v18)
  {
    if (v18 != 1 && (BYTE1(v15) - 48) <= 9u)
    {
      if (v18 == 2)
      {
        LOBYTE(v15) = 0;
        uint64_t v22 = -(uint64_t)(BYTE1(v15) - 48);
        goto LABEL_44;
      }
      if ((BYTE2(v15) - 48) <= 9u)
      {
        uint64_t v22 = -10 * (BYTE1(v15) - 48) - (BYTE2(v15) - 48);
        uint64_t v32 = v18 - 3;
        if (!v32) {
          goto LABEL_43;
        }
        uint64_t v37 = (unsigned __int8 *)v48 + 3;
        while (1)
        {
          unsigned int v38 = *v37 - 48;
          if (v38 > 9) {
            break;
          }
          uint64_t v39 = 10 * v22;
          if ((unsigned __int128)(v22 * (__int128)10) >> 64 != (10 * v22) >> 63) {
            break;
          }
          uint64_t v22 = v39 - v38;
          if (__OFSUB__(v39, v38)) {
            break;
          }
          LOBYTE(v15) = 0;
          ++v37;
          if (!--v32) {
            goto LABEL_44;
          }
        }
      }
    }
LABEL_31:
    uint64_t v22 = 0;
    LOBYTE(v15) = 1;
    goto LABEL_44;
  }
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
}

void sub_1000311E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (int *)type metadata accessor for AlertAction();
  uint64_t v34 = *((void *)v4 - 1);
  uint64_t v5 = *(void *)(v34 + 64);
  __chkstk_darwin(v4);
  sub_10002EB60(&qword_1001A19A0);
  inject<A, B>(_:from:)();
  uint64_t v6 = *(void *)(a1 + v4[6] + 8);
  if (*(void *)(a1 + v4[5] + 8))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      NSString v8 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    NSString v7 = 0;
    if (v6) {
      goto LABEL_3;
    }
  }
  NSString v8 = 0;
LABEL_6:
  id v9 = [objc_allocWithZone((Class)AMSDialogRequest) initWithTitle:v7 message:v8];

  uint64_t v10 = *(void *)(a1 + v4[7]);
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    uint64_t v30 = v5;
    uint64_t v31 = (uint64_t)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v32 = a1;
    uint64_t v33 = a2;
    uint64_t v12 = v10 + 32;
    swift_bridgeObjectRetain();
    unint64_t v13 = 0;
    while (v13 < *(void *)(v10 + 16))
    {
      unint64_t v14 = v13 + 1;
      unint64_t v36 = v13;
      sub_100031750(v12, (uint64_t)&v37);
      uint64_t v15 = v9;
      swift_bridgeObjectRetain();
      sub_1000317AC((uint64_t)&v37);
      unint64_t v35 = v13;
      dispatch thunk of CustomStringConvertible.description.getter();
      NSString v16 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v17 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v18 = [self actionWithTitle:v16 identifier:v17];

      [v9 addButtonAction:v18];
      v12 += 56;
      unint64_t v13 = v14;
      if (v11 == v14)
      {
        swift_bridgeObjectRelease();
        id v19 = [objc_allocWithZone((Class)AMSSystemAlertDialogTask) initWithRequest:v9];
        sub_10002EB60(&qword_1001A19A8);
        id v20 = [v19 present];
        Promise<A>.init(_:)();
        uint64_t v21 = v31;
        sub_100031800(v32, v31);
        unint64_t v22 = (*(unsigned __int8 *)(v34 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
        unint64_t v23 = (v30 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v24 = swift_allocObject();
        sub_100031988(v21, v24 + v22);
        *(void *)(v24 + v23) = v33;
        uint64_t v38 = type metadata accessor for SyncTaskScheduler();
        uint64_t v39 = &protocol witness table for SyncTaskScheduler;
        sub_100031A88((uint64_t *)&v36);
        swift_retain();
        SyncTaskScheduler.init()();
        sub_10002EB60((uint64_t *)&unk_1001A21F0);
        sub_100031AEC();
        Promise.flatMap<A>(on:_:)();

        swift_release();
        goto LABEL_12;
      }
    }
    __break(1u);
  }
  else
  {
    sub_10002EC6C(v40, v40[3]);
    v25._countAndFlagsBits = 0x4F2E6E6F69746341;
    v25._object = (void *)0xE90000000000004BLL;
    Localizer.string(forKey:)(v25);
    NSString v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v27 = [self actionWithTitle:v26];

    [v9 addButtonAction:v27];
    id v28 = [objc_allocWithZone((Class)AMSSystemAlertDialogTask) initWithRequest:v9];
    sub_10002EB60(&qword_1001A19A8);
    id v29 = [v28 present];
    Promise<A>.init(_:)();
    uint64_t v38 = type metadata accessor for SyncTaskScheduler();
    uint64_t v39 = &protocol witness table for SyncTaskScheduler;
    sub_100031A88((uint64_t *)&v36);
    SyncTaskScheduler.init()();
    type metadata accessor for ActionOutcome();
    Promise.map<A>(on:_:)();

LABEL_12:
    swift_release();
    sub_10002ED08((uint64_t)&v36);
    sub_10002ED08((uint64_t)v40);
  }
}

uint64_t sub_100031750(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000317AC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100031800(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AlertAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100031864()
{
  uint64_t v1 = *(void *)(type metadata accessor for AlertAction() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for ActionMetrics();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100031988(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AlertAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1000319EC(id *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for AlertAction() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = *(uint64_t **)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_100030BFC(a1, v1 + v4, v5);
}

uint64_t *sub_100031A88(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

unint64_t sub_100031AEC()
{
  unint64_t result = qword_1001A19B0;
  if (!qword_1001A19B0)
  {
    sub_10002ED58((uint64_t *)&unk_1001A21F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A19B0);
  }
  return result;
}

uint64_t sub_100031B48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60((uint64_t *)&unk_1001A2180);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100031BB0(uint64_t a1)
{
  uint64_t v2 = sub_10002EB60((uint64_t *)&unk_1001A2180);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100031C10(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100031C28()
{
  return ASCOffer.actionMetrics.getter();
}

ValueMetadata *type metadata accessor for AlertOfferActionImplementation()
{
  return &type metadata for AlertOfferActionImplementation;
}

uint64_t sub_100031C5C()
{
  return sub_100032134((unint64_t *)&unk_1001A1810, (void (*)(uint64_t))sub_100031CA4);
}

unint64_t sub_100031CA4()
{
  unint64_t result = qword_1001A1808;
  if (!qword_1001A1808)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001A1808);
  }
  return result;
}

uint64_t sub_100031CE4(void **a1, uint64_t a2)
{
  return sub_100031CEC(*a1, a2);
}

uint64_t sub_100031CEC(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A19B8);
  uint64_t v35 = *(void *)(v4 - 8);
  uint64_t v36 = v4;
  __chkstk_darwin(v4);
  uint64_t v34 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for ActionMetrics();
  uint64_t v6 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  NSString v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = (int *)type metadata accessor for AlertAction();
  __chkstk_darwin(v9);
  uint64_t v33 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10002EB60((uint64_t *)&unk_1001A2160);
  uint64_t v40 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v39 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  inject<A, B>(_:from:)();
  static ActionMetrics.notInstrumented.getter();
  id v13 = [a1 alertTitle];
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  id v16 = [a1 alertMessage];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  uint64_t v37 = a2;
  id v20 = sub_10007103C();
  uint64_t v21 = (uint64_t)v33;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v33, v8, v38);
  unint64_t v22 = (uint64_t *)(v21 + v9[5]);
  *unint64_t v22 = v32;
  v22[1] = v15;
  unint64_t v23 = (uint64_t *)(v21 + v9[6]);
  uint64_t *v23 = v17;
  v23[1] = v19;
  *(void *)(v21 + v9[7]) = v20;
  v41[3] = (uint64_t)v9;
  v41[4] = sub_100032134((unint64_t *)&qword_1001A54A0, (void (*)(uint64_t))type metadata accessor for AlertAction);
  uint64_t v24 = sub_100031A88(v41);
  sub_100031800(v21, (uint64_t)v24);
  NSString v26 = v34;
  uint64_t v25 = v35;
  uint64_t v27 = v36;
  (*(void (**)(char *, void, uint64_t))(v35 + 104))(v34, enum case for ActionDispatcher.MetricsBehavior.notProcessed<A>(_:), v36);
  id v28 = v39;
  uint64_t v29 = ActionDispatcher.perform(_:withMetrics:asPartOf:)();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v26, v27);
  sub_10003217C(v21);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v28, v11);
  sub_10002ED08((uint64_t)v41);
  return v29;
}

uint64_t sub_100032134(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003217C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AlertAction();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000321D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;
  if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v6)
  {
    uint64_t v9 = 0;
LABEL_17:
    swift_bridgeObjectRelease_n();
    return v9;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = 0;
  if ((v8 & 1) == 0)
  {
    uint64_t v10 = v2 - 1;
    while (1)
    {
      if (v10 == v9) {
        return 0;
      }
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;
      if (v11 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v13 == v14) {
        break;
      }
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      ++v9;
      if (v16) {
        return v9;
      }
    }
    ++v9;
    goto LABEL_17;
  }
  return v9;
}

uint64_t sub_100032324(unint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1000CC280(v3);
    uint64_t v3 = (void *)result;
  }
  unint64_t v5 = v3[2];
  if (v5 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v6 = v5 - 1;
    uint64_t v7 = &v3[a1];
    uint64_t v8 = v7[4];
    memmove(v7 + 4, v7 + 5, 8 * (v5 - 1 - a1));
    v3[2] = v6;
    uint64_t *v1 = v3;
    return v8;
  }
  return result;
}

uint64_t sub_1000323AC(unint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1000CC2A8(v3);
    uint64_t v3 = result;
  }
  unint64_t v5 = *(void *)(v3 + 16);
  if (v5 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v6 = v5 - 1;
    uint64_t v7 = v3 + 16 * a1;
    uint64_t v8 = *(void *)(v7 + 32);
    memmove((void *)(v7 + 32), (const void *)(v7 + 48), 16 * (v5 - 1 - a1));
    *(void *)(v3 + 16) = v6;
    uint64_t *v1 = v3;
    return v8;
  }
  return result;
}

char *sub_100032438(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v49 = a6;
  uint64_t v50 = a7;
  uint64_t v47 = a4;
  uint64_t v48 = a5;
  uint64_t v12 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v12 - 8);
  uint64_t v13 = type metadata accessor for OSLogger();
  uint64_t v45 = *(void *)(v13 - 8);
  uint64_t v46 = v13;
  __chkstk_darwin(v13);
  v43[2] = a1;
  uint64_t v44 = (char *)v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43[1] = a2;
  v43[0] = sub_100032A3C();
  uint64_t v15 = a3 + 56;
  uint64_t v16 = 1 << a3[32];
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *((void *)a3 + 7);
  int64_t v19 = (unint64_t)(v16 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v20 = 0;
  while (1)
  {
    if (v18)
    {
      unint64_t v21 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v22 = v21 | (v20 << 6);
      goto LABEL_5;
    }
    int64_t v23 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v23 >= v19) {
      goto LABEL_21;
    }
    unint64_t v24 = v15[v23];
    ++v20;
    if (!v24)
    {
      int64_t v20 = v23 + 1;
      if (v23 + 1 >= v19) {
        goto LABEL_21;
      }
      unint64_t v24 = v15[v20];
      if (!v24)
      {
        int64_t v20 = v23 + 2;
        if (v23 + 2 >= v19) {
          goto LABEL_21;
        }
        unint64_t v24 = v15[v20];
        if (!v24) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v18 = (v24 - 1) & v24;
    unint64_t v22 = __clz(__rbit64(v24)) + (v20 << 6);
LABEL_5:
    [self requestDidBeginWithTag:*(void *)(*((void *)a3 + 6) + 8 * v22)];
  }
  int64_t v25 = v23 + 3;
  if (v25 < v19)
  {
    unint64_t v24 = v15[v25];
    if (!v24)
    {
      while (1)
      {
        int64_t v20 = v25 + 1;
        if (__OFADD__(v25, 1)) {
          break;
        }
        if (v20 >= v19) {
          goto LABEL_21;
        }
        unint64_t v24 = v15[v20];
        ++v25;
        if (v24) {
          goto LABEL_20;
        }
      }
LABEL_33:
      __break(1u);
LABEL_34:
      swift_once();
      goto LABEL_31;
    }
    int64_t v20 = v25;
    goto LABEL_20;
  }
LABEL_21:
  swift_release();
  NSString v26 = *(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v8
                                                                                      + *(int *)(type metadata accessor for AMSMediaFetcher()
                                                                                               + 28));
  if (v26)
  {
    swift_retain();
    uint64_t v27 = Bag.amsBag.getter();
    uint64_t v28 = v43[0];
    a3 = (char *)v26(v43[0], v47, v48, v49, v50, v27);
    sub_100034BE8((uint64_t)v26);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v29 = Bag.amsBag.getter();
    id v30 = objc_allocWithZone((Class)AMSMediaTask);
    NSString v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v28 = v43[0];
    a3 = (char *)[v30 initWithType:v43[0] clientIdentifier:v31 clientVersion:v32 bag:v29];
  }
  swift_unknownObjectRelease();
  [a3 setClientInfo:*v8];
  if (sub_1000349A4(v28))
  {
    type metadata accessor for AMSMediaTaskPlatform(0);
    v33.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v33.super.isa = 0;
  }
  objc_msgSend(a3, "setAdditionalPlatforms:", v33.super.isa, v43[0]);

  if (sub_100032DC0())
  {
    v34.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v34.super.isa = 0;
  }
  uint64_t v15 = &type metadata for String;
  [a3 setAdditionalQueryParams:v34.super.isa];

  if (qword_1001A0E70 != -1) {
    goto LABEL_34;
  }
LABEL_31:
  uint64_t v35 = v46;
  uint64_t v36 = sub_10002F6AC(v46, (uint64_t)qword_1001AE398);
  uint64_t v37 = v44;
  uint64_t v38 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v44, v36, v35);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v39._object = (void *)0x800000010015AA40;
  v39._countAndFlagsBits = 0xD000000000000026;
  LogMessage.StringInterpolation.appendLiteral(_:)(v39);
  v53 = v15;
  uint64_t v51 = v47;
  uint64_t v52 = v48;
  swift_bridgeObjectRetain();
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)&v51, &qword_1001A1C50);
  v40._countAndFlagsBits = 0x6F6973726576202CLL;
  v40._object = (void *)0xEB00000000203A6ELL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v40);
  v53 = v15;
  uint64_t v51 = v49;
  uint64_t v52 = v50;
  swift_bridgeObjectRetain();
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)&v51, &qword_1001A1C50);
  v41._countAndFlagsBits = 0;
  v41._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v41);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v37, v35);
  return a3;
}

uint64_t sub_100032A3C()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3)
  {
    uint64_t v6 = 6;
LABEL_22:
    swift_bridgeObjectRelease_n();
    return v6;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v5) {
    return 6;
  }
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  if (v7 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v9 == v10) {
    goto LABEL_21;
  }
  char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v12) {
    return 0;
  }
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;
  if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
    goto LABEL_16;
  }
  char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v17) {
    return 7;
  }
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;
  if (v18 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v20 == v21)
  {
LABEL_21:
    uint64_t v6 = 0;
    goto LABEL_22;
  }
  char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v23) {
    return 0;
  }
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v26 = v25;
  if (v24 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v26 == v27)
  {
LABEL_16:
    uint64_t v6 = 7;
    goto LABEL_22;
  }
  char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v28) {
    return 7;
  }
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = v30;
  if (v29 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v31 == v32)
  {
    uint64_t v6 = 1;
    goto LABEL_22;
  }
  char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v33) {
    return 1;
  }
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v36 = v35;
  if (v34 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v36 == v37)
  {
    uint64_t v6 = 2;
    goto LABEL_22;
  }
  char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v38) {
    return 2;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_100032DC0()
{
  unint64_t v0 = sub_100079A18();
  if (!v0) {
    unint64_t v0 = sub_1000630A0((uint64_t)_swiftEmptyArrayStorage);
  }
  unint64_t v1 = v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;
  if (v2 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v4 == v5)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0) {
      return v1;
    }
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_10003ED00(0xD000000000000015, 0x800000010015AA70, 0x646E65747865, 0xE600000000000000, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  char v9 = swift_isUniquelyReferenced_nonNull_native();
  sub_10003ED00(0xD000000000000012, 0x800000010015AA90, 1752459639, 0xE400000000000000, v9);
  swift_bridgeObjectRelease();
  return v1;
}

id sub_100032F14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 56;
  uint64_t v4 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a2 + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  id result = (id)swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
LABEL_25:
      __break(1u);
      return result;
    }
    if (v12 >= v7) {
      goto LABEL_21;
    }
    unint64_t v13 = *(void *)(v3 + 8 * v12);
    ++v9;
    if (!v13)
    {
      int64_t v9 = v12 + 1;
      if (v12 + 1 >= v7) {
        goto LABEL_21;
      }
      unint64_t v13 = *(void *)(v3 + 8 * v9);
      if (!v13)
      {
        int64_t v9 = v12 + 2;
        if (v12 + 2 >= v7) {
          goto LABEL_21;
        }
        unint64_t v13 = *(void *)(v3 + 8 * v9);
        if (!v13) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v6 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v9 << 6);
LABEL_5:
    id result = [self requestDidEndWithTag:*(void *)(*(void *)(a2 + 48) + 8 * v11)];
  }
  int64_t v14 = v12 + 3;
  if (v14 < v7)
  {
    unint64_t v13 = *(void *)(v3 + 8 * v14);
    if (!v13)
    {
      while (1)
      {
        int64_t v9 = v14 + 1;
        if (__OFADD__(v14, 1)) {
          goto LABEL_25;
        }
        if (v9 >= v7) {
          goto LABEL_21;
        }
        unint64_t v13 = *(void *)(v3 + 8 * v9);
        ++v14;
        if (v13) {
          goto LABEL_20;
        }
      }
    }
    int64_t v9 = v14;
    goto LABEL_20;
  }
LABEL_21:

  return (id)swift_release();
}

void sub_100033078(id *a1@<X0>, unint64_t *a2@<X8>)
{
  id v3 = [*a1 responseDictionary];
  if (v3)
  {
    uint64_t v4 = v3;
    unint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    unint64_t v5 = sub_1000631C4((uint64_t)_swiftEmptyArrayStorage);
  }
  *a2 = v5;
}

uint64_t sub_100033108(unint64_t a1)
{
  uint64_t v2 = sub_10002EB60(&qword_1001A19D8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v11[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 > 2)
  {
    sub_10002EB60(&qword_1001A1A08);
    v11[0] = sub_1000630A0((uint64_t)_swiftEmptyArrayStorage);
    return Promise.__allocating_init(value:)();
  }
  else
  {
    type metadata accessor for AMSMediaFetcher();
    NSString v6 = String._bridgeToObjectiveC()();
    Bag.subscript.getter();

    Bag.Value.promise()();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v7 = type metadata accessor for SyncTaskScheduler();
    uint64_t v12 = v7;
    unint64_t v13 = &protocol witness table for SyncTaskScheduler;
    sub_100031A88(v11);
    SyncTaskScheduler.init()();
    Promise.map<A>(on:_:)();
    swift_release();
    sub_10002ED08((uint64_t)v11);
    uint64_t v12 = v7;
    unint64_t v13 = &protocol witness table for SyncTaskScheduler;
    sub_100031A88(v11);
    SyncTaskScheduler.init()();
    sub_10002EB60(&qword_1001A1A10);
    uint64_t v8 = Promise.map<A>(on:_:)();
    swift_release();
    sub_10002ED08((uint64_t)v11);
  }
  return v8;
}

unint64_t sub_10003331C@<X0>(unsigned __int8 *a1@<X0>, unint64_t *a2@<X8>)
{
  int v3 = *a1;
  unint64_t result = sub_1000630A0((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v5 = result;
  if (v3 == 1)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10003ED00(0x72416D6F74737563, 0xED00006B726F7774, 0x615B646E65747865, 0xEC0000005D737070, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    char v7 = swift_isUniquelyReferenced_nonNull_native();
    sub_10003ED00(0x6B726F77747261, 0xE700000000000000, 0xD00000000000001ELL, 0x800000010015AB40, v7);
    unint64_t result = swift_bridgeObjectRelease();
  }
  *a2 = v5;
  return result;
}

uint64_t sub_100033424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  int v51 = a10;
  uint64_t v44 = type metadata accessor for AMSMediaFetcher();
  uint64_t v47 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v48 = v19;
  uint64_t v49 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10002EB60(&qword_1001A19C0);
  __chkstk_darwin(v20 - 8);
  uint64_t v45 = (char *)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = a3;
  uint64_t v22 = a3;
  uint64_t v23 = v10;
  uint64_t v50 = a5;
  uint64_t v24 = sub_100032438(a2, v22, a5, a6, a7, a8, a9);
  sub_1000338A4(a1);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v24 setItemIdentifiers:isa];

  if (a4)
  {
    swift_bridgeObjectRetain();
    id v26 = [v24 additionalQueryParams];
    if (v26)
    {
      uint64_t v27 = v26;
      uint64_t v28 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      uint64_t v28 = sub_1000630A0((uint64_t)_swiftEmptyArrayStorage);
    }
    sub_100034508(a4, v28);
    Class v29 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v24 setAdditionalQueryParams:v29];
  }
  if (v51)
  {
    sub_10002EC6C((void *)(v23 + *(int *)(v44 + 24)), *(void *)(v23 + *(int *)(v44 + 24) + 24));
    uint64_t v30 = (uint64_t)v45;
    dispatch thunk of AccountProvider.activeAccount.getter();
    uint64_t v31 = type metadata accessor for Account();
    uint64_t v32 = *(void *)(v31 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31) == 1)
    {
      sub_100034B8C(v30, &qword_1001A19C0);
      char v33 = 0;
    }
    else
    {
      char v33 = (void *)Account.acAccountCopy.getter();
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v30, v31);
    }
    uint64_t v35 = (uint64_t)v49;
    uint64_t v34 = v50;
    uint64_t v36 = v47;
    uint64_t v37 = v48;
    [v24 setAccount:v33];
  }
  else
  {
    char v33 = (void *)sub_100033B2C();
    [v24 setAccount:v33];
    uint64_t v35 = (uint64_t)v49;
    uint64_t v34 = v50;
    uint64_t v36 = v47;
    uint64_t v37 = v48;
  }

  sub_100033108((unint64_t)[v24 type]);
  sub_100034BF8(v23, v35);
  unint64_t v38 = (*(unsigned __int8 *)(v36 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = v24;
  sub_100034D98(v35, v39 + v38);
  *(void *)(v39 + ((v37 + v38 + 7) & 0xFFFFFFFFFFFFFFF8)) = v34;
  v52[3] = type metadata accessor for SyncTaskScheduler();
  v52[4] = (uint64_t)&protocol witness table for SyncTaskScheduler;
  sub_100031A88(v52);
  Swift::String v40 = v24;
  swift_bridgeObjectRetain();
  SyncTaskScheduler.init()();
  sub_10002EB60(&qword_1001A19F8);
  sub_100034E9C();
  uint64_t v41 = Promise.flatMap<A>(on:_:)();

  swift_release();
  swift_release();
  sub_10002ED08((uint64_t)v52);
  return v41;
}

uint64_t sub_1000338A4(uint64_t a1)
{
  uint64_t v1 = a1;
  unint64_t v27 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v2 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v2 = *(void *)(a1 + 16);
  }
  uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  if (v2)
  {
    uint64_t v32 = _swiftEmptyArrayStorage;
    sub_1000C4FFC(0, v2 & ~(v2 >> 63), 0);
    if (v27)
    {
      uint64_t result = __CocoaSet.startIndex.getter();
      unsigned __int8 v5 = 1;
    }
    else
    {
      uint64_t result = sub_100066B3C(v1);
      unsigned __int8 v5 = v6 & 1;
    }
    uint64_t v29 = result;
    uint64_t v30 = v4;
    unsigned __int8 v31 = v5;
    if (v2 < 0)
    {
      __break(1u);
LABEL_23:
      __break(1u);
    }
    else
    {
      uint64_t v26 = v1;
      do
      {
        while (1)
        {
          uint64_t v13 = v29;
          uint64_t v12 = v30;
          uint64_t v14 = v31;
          sub_1000668C4(v29, v30, v31, v1);
          uint64_t v16 = v15;
          id v17 = [v15 stringValue];
          uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v20 = v19;

          uint64_t v21 = v32;
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_1000C4FFC(0, v21[2] + 1, 1);
            uint64_t v21 = v32;
          }
          unint64_t v23 = v21[2];
          unint64_t v22 = v21[3];
          if (v23 >= v22 >> 1)
          {
            uint64_t result = (uint64_t)sub_1000C4FFC((char *)(v22 > 1), v23 + 1, 1);
            uint64_t v21 = v32;
          }
          v21[2] = v23 + 1;
          uint64_t v24 = &v21[2 * v23];
          id v24[4] = v18;
          v24[5] = v20;
          if (v27) {
            break;
          }
          uint64_t v1 = v26;
          uint64_t v7 = sub_1000843EC(v13, v12, v14, v26);
          uint64_t v9 = v8;
          char v11 = v10;
          sub_100034F00(v13, v12, v14);
          uint64_t v29 = v7;
          uint64_t v30 = v9;
          unsigned __int8 v31 = v11 & 1;
          if (!--v2) {
            goto LABEL_20;
          }
        }
        uint64_t v1 = v26;
        if ((v14 & 1) == 0) {
          goto LABEL_23;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        sub_10002EB60(&qword_1001A1A18);
        uint64_t v25 = (void (*)(char *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v25(v28, 0);
        --v2;
      }
      while (v2);
LABEL_20:
      sub_100034F00(v29, v30, v31);
      return (uint64_t)v32;
    }
  }
  return result;
}

uint64_t sub_100033B2C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10002EB60(&qword_1001A19C0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v27[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = sub_10002EB60(&qword_1001A19D8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v27[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  if (v9 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v11 == v12)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
    {
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v17 = v16;
      if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v20 & 1) == 0) {
          return 0;
        }
      }
      type metadata accessor for AMSMediaFetcher();
      NSString v26 = String._bridgeToObjectiveC()();
      Bag.subscript.getter();

      Bag.Value.current(or:)();
      (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
      uint64_t v24 = 0;
      if (v27[15] != 1) {
        return v24;
      }
    }
  }
  uint64_t v21 = type metadata accessor for AMSMediaFetcher();
  sub_10002EC6C((void *)(v1 + *(int *)(v21 + 24)), *(void *)(v1 + *(int *)(v21 + 24) + 24));
  dispatch thunk of AccountProvider.activeAccount.getter();
  uint64_t v22 = type metadata accessor for Account();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v23 + 48))(v4, 1, v22) != 1)
  {
    uint64_t v24 = Account.acAccountCopy.getter();
    (*(void (**)(unsigned char *, uint64_t))(v23 + 8))(v4, v22);
    return v24;
  }
  sub_100034B8C((uint64_t)v4, &qword_1001A19C0);
  return 0;
}

uint64_t sub_100033E78(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a1;
  swift_bridgeObjectRetain();
  id v7 = [a2 additionalQueryParams];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v9 = sub_1000630A0((uint64_t)_swiftEmptyArrayStorage);
  }
  sub_100034508(v6, v9);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 setAdditionalQueryParams:isa];

  sub_10002EB60(&qword_1001A19C8);
  id v11 = [a2 perform];
  Promise<A>.init(_:)();
  *(void *)(swift_allocObject() + 16) = a4;
  uint64_t v12 = type metadata accessor for SyncTaskScheduler();
  uint64_t v16 = v12;
  uint64_t v17 = &protocol witness table for SyncTaskScheduler;
  sub_100031A88(v15);
  swift_bridgeObjectRetain();
  SyncTaskScheduler.init()();
  Promise.then(perform:orCatchError:on:)();
  swift_release();
  sub_10002ED08((uint64_t)v15);
  uint64_t v16 = v12;
  uint64_t v17 = &protocol witness table for SyncTaskScheduler;
  sub_100031A88(v15);
  SyncTaskScheduler.init()();
  sub_10002EB60(&qword_1001A19D0);
  uint64_t v13 = Promise.map<A>(on:_:)();
  swift_release();
  sub_10002ED08((uint64_t)v15);
  return v13;
}

id sub_10003408C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t v41 = a7;
  uint64_t v42 = a8;
  uint64_t v39 = a5;
  uint64_t v40 = a6;
  uint64_t v44 = a3;
  uint64_t v38 = a2;
  int v43 = a9;
  uint64_t v11 = sub_10002EB60(&qword_1001A19C0);
  __chkstk_darwin(v11 - 8);
  uint64_t v37 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a4 + 56;
  uint64_t v14 = 1 << *(unsigned char *)(a4 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(a4 + 56);
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  id result = (id)swift_bridgeObjectRetain();
  int64_t v19 = 0;
  while (1)
  {
    if (v16)
    {
      unint64_t v20 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v21 = v20 | (v19 << 6);
      goto LABEL_5;
    }
    int64_t v22 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
LABEL_28:
      __break(1u);
      return result;
    }
    if (v22 >= v17) {
      goto LABEL_21;
    }
    unint64_t v23 = *(void *)(v13 + 8 * v22);
    ++v19;
    if (!v23)
    {
      int64_t v19 = v22 + 1;
      if (v22 + 1 >= v17) {
        goto LABEL_21;
      }
      unint64_t v23 = *(void *)(v13 + 8 * v19);
      if (!v23)
      {
        int64_t v19 = v22 + 2;
        if (v22 + 2 >= v17) {
          goto LABEL_21;
        }
        unint64_t v23 = *(void *)(v13 + 8 * v19);
        if (!v23) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v16 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v19 << 6);
LABEL_5:
    id result = [self requestDidBeginWithTag:*(void *)(*(void *)(a4 + 48) + 8 * v21)];
  }
  int64_t v24 = v22 + 3;
  if (v24 < v17)
  {
    unint64_t v23 = *(void *)(v13 + 8 * v24);
    if (!v23)
    {
      while (1)
      {
        int64_t v19 = v24 + 1;
        if (__OFADD__(v24, 1)) {
          goto LABEL_28;
        }
        if (v19 >= v17) {
          goto LABEL_21;
        }
        unint64_t v23 = *(void *)(v13 + 8 * v19);
        ++v24;
        if (v23) {
          goto LABEL_20;
        }
      }
    }
    int64_t v19 = v24;
    goto LABEL_20;
  }
LABEL_21:
  swift_release();
  uint64_t v25 = sub_100032438(v38, v44, (char *)a4, v39, v40, v41, v42);
  uint64_t v26 = swift_bridgeObjectRetain();
  sub_1000661D4(v26);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  [v25 setBundleIdentifiers:isa];

  if (v43)
  {
    uint64_t v28 = type metadata accessor for AMSMediaFetcher();
    sub_10002EC6C((void *)(v9 + *(int *)(v28 + 24)), *(void *)(v9 + *(int *)(v28 + 24) + 24));
    uint64_t v29 = (uint64_t)v37;
    dispatch thunk of AccountProvider.activeAccount.getter();
    uint64_t v30 = type metadata accessor for Account();
    uint64_t v31 = *(void *)(v30 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) == 1)
    {
      sub_100034B8C(v29, &qword_1001A19C0);
      uint64_t v32 = 0;
    }
    else
    {
      uint64_t v32 = (void *)Account.acAccountCopy.getter();
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v29, v30);
    }
  }
  else
  {
    uint64_t v32 = (void *)sub_100033B2C();
  }
  [v25 setAccount:v32];

  sub_10002EB60(&qword_1001A19C8);
  id v33 = [v25 perform];
  Promise<A>.init(_:)();
  *(void *)(swift_allocObject() + 16) = a4;
  uint64_t v34 = type metadata accessor for SyncTaskScheduler();
  uint64_t v46 = v34;
  uint64_t v47 = &protocol witness table for SyncTaskScheduler;
  sub_100031A88(v45);
  swift_bridgeObjectRetain();
  SyncTaskScheduler.init()();
  Promise.then(perform:orCatchError:on:)();
  swift_release();
  sub_10002ED08((uint64_t)v45);
  uint64_t v46 = v34;
  uint64_t v47 = &protocol witness table for SyncTaskScheduler;
  sub_100031A88(v45);
  SyncTaskScheduler.init()();
  sub_10002EB60(&qword_1001A19D0);
  uint64_t v35 = Promise.map<A>(on:_:)();
  swift_release();
  sub_10002ED08((uint64_t)v45);

  return (id)v35;
}

unsigned char *sub_1000344F0@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result & 1;
  return result;
}

void sub_100034500(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_100034508(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = a2;
  sub_100034594(a1, (uint64_t)sub_100034898, 0, isUniquelyReferenced_nonNull_native, &v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease();
  if (v2) {
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_100034594(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v7 = sub_100112C78();
  if (v8)
  {
    uint64_t v11 = v7;
    uint64_t v12 = v8;
    uint64_t v13 = v9;
    uint64_t v14 = v10;
    uint64_t v39 = a5;
    while (1)
    {
      int64_t v22 = (void *)*a5;
      unint64_t v24 = sub_10003A860(v11, v12);
      uint64_t v25 = v22[2];
      BOOL v26 = (v23 & 1) == 0;
      uint64_t v27 = v25 + v26;
      if (__OFADD__(v25, v26)) {
        break;
      }
      char v28 = v23;
      uint64_t v42 = v13;
      if (v22[3] >= v27)
      {
        if ((a4 & 1) == 0) {
          sub_10003FB48();
        }
      }
      else
      {
        sub_10003BBB4(v27, a4 & 1);
        unint64_t v29 = sub_10003A860(v11, v12);
        if ((v28 & 1) != (v30 & 1)) {
          goto LABEL_17;
        }
        unint64_t v24 = v29;
      }
      uint64_t v31 = (void *)*a5;
      uint64_t v32 = 16 * v24;
      if (v28)
      {
        uint64_t v15 = (uint64_t *)(v31[7] + v32);
        uint64_t v40 = *v15;
        uint64_t v41 = v15[1];
        swift_bridgeObjectRetain_n();
        v16._countAndFlagsBits = 44;
        v16._object = (void *)0xE100000000000000;
        String.append(_:)(v16);
        v17._countAndFlagsBits = v42;
        v17._object = v14;
        String.append(_:)(v17);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v18 = (void *)(v31[7] + v32);
        swift_bridgeObjectRelease();
        *uint64_t v18 = v40;
        v18[1] = v41;
      }
      else
      {
        v31[(v24 >> 6) + 8] |= 1 << v24;
        id v33 = (uint64_t *)(v31[6] + v32);
        *id v33 = v11;
        v33[1] = v12;
        uint64_t v34 = (uint64_t *)(v31[7] + v32);
        *uint64_t v34 = v42;
        v34[1] = (uint64_t)v14;
        uint64_t v35 = v31[2];
        BOOL v36 = __OFADD__(v35, 1);
        uint64_t v37 = v35 + 1;
        if (v36) {
          goto LABEL_16;
        }
        v31[2] = v37;
      }
      uint64_t v11 = sub_100112C78();
      uint64_t v12 = v19;
      uint64_t v13 = v20;
      uint64_t v14 = v21;
      a4 = 1;
      a5 = v39;
      if (!v19) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_release();
    swift_bridgeObjectRelease();
    sub_100034EF8();
    return swift_release();
  }
  return result;
}

uint64_t sub_10003480C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

id sub_100034844(uint64_t a1)
{
  return sub_100032F14(a1, *(void *)(v1 + 16));
}

uint64_t type metadata accessor for AMSMediaFetcher()
{
  uint64_t result = qword_1001A1A78;
  if (!qword_1001A1A78) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100034898@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_1000348E0()
{
  sub_10002EB60(&qword_1001A19F0);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10014CEE0;
  uint64_t v1 = (void *)AMSMediaTaskPlatformiPad;
  uint64_t v2 = (void *)AMSMediaTaskPlatformiPhone;
  *(void *)(v0 + 32) = AMSMediaTaskPlatformiPad;
  *(void *)(v0 + 40) = v2;
  uint64_t v3 = (void *)AMSMediaTaskPlatformMac;
  uint64_t v4 = (void *)AMSMediaTaskPlatformAppleTV;
  *(void *)(v0 + 48) = AMSMediaTaskPlatformMac;
  *(void *)(v0 + 56) = v4;
  uint64_t v5 = (void *)AMSMediaTaskPlatformAppleWatch;
  uint64_t v6 = (void *)AMSMediaTaskPlatformReality;
  *(void *)(v0 + 64) = AMSMediaTaskPlatformAppleWatch;
  *(void *)(v0 + 72) = v6;
  id v7 = v1;
  id v8 = v2;
  id v9 = v3;
  id v10 = v4;
  id v11 = v5;
  id v12 = v6;
  return v0;
}

uint64_t sub_1000349A4(uint64_t a1)
{
  if (a1 == 7) {
    return 0;
  }
  uint64_t v1 = sub_1000348E0();
  uint64_t v2 = self;
  swift_bridgeObjectRetain();
  unsigned int v3 = [v2 isPad];
  uint64_t v4 = (id *)&AMSMediaTaskPlatformiPhone;
  if (v3) {
    uint64_t v4 = (id *)&AMSMediaTaskPlatformiPad;
  }
  id v5 = *v4;
  unint64_t v6 = sub_1000321D8((uint64_t)v5, v1);
  char v8 = v7;
  swift_bridgeObjectRelease();

  if (v8)
  {
    if (qword_1001A0E70 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for OSLogger();
    sub_10002F6AC(v9, (uint64_t)qword_1001AE398);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.init(stringLiteral:)();
    Logger.error(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
  }
  return v1;
}

uint64_t sub_100034B8C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10002EB60(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100034BE8(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_100034BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AMSMediaFetcher();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100034C5C()
{
  uint64_t v1 = (int *)(type metadata accessor for AMSMediaFetcher() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);

  uint64_t v5 = v0 + v3 + v1[7];
  uint64_t v6 = type metadata accessor for Bag();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  sub_10002ED08(v0 + v3 + v1[8]);
  if (*(void *)(v0 + v3 + v1[9])) {
    swift_release();
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_100034D98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AMSMediaFetcher();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100034DFC(uint64_t *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for AMSMediaFetcher() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void **)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100033E78(a1, v5, v1 + v4, v6);
}

unint64_t sub_100034E9C()
{
  unint64_t result = qword_1001A1A00;
  if (!qword_1001A1A00)
  {
    sub_10002ED58(&qword_1001A19F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A1A00);
  }
  return result;
}

uint64_t sub_100034EF8()
{
  return swift_release();
}

uint64_t sub_100034F00(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void **sub_100034F0C(void **a1, void **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  unint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    char v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    char v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    id v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Bag();
    id v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    uint64_t v13 = v4;
    v12(v9, v10, v11);
    uint64_t v14 = a3[6];
    long long v15 = *(_OWORD *)((char *)a2 + v14 + 24);
    *(_OWORD *)((char *)v7 + v14 + 24) = v15;
    (**(void (***)(void))(v15 - 8))();
    uint64_t v16 = a3[7];
    Swift::String v17 = (void **)((char *)v7 + v16);
    uint64_t v18 = (void **)((char *)a2 + v16);
    if (*v18)
    {
      uint64_t v19 = v18[1];
      *Swift::String v17 = *v18;
      v17[1] = v19;
      swift_retain();
    }
    else
    {
      *(_OWORD *)Swift::String v17 = *(_OWORD *)v18;
    }
  }
  return v7;
}

uint64_t sub_10003507C(id *a1, int *a2)
{
  unint64_t v4 = (char *)a1 + a2[5];
  uint64_t v5 = type metadata accessor for Bag();
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t result = sub_10002ED08((uint64_t)a1 + a2[6]);
  if (*(id *)((char *)a1 + a2[7]))
  {
    return swift_release();
  }
  return result;
}

void **sub_100035130(void **a1, void **a2, int *a3)
{
  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Bag();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  id v12 = v6;
  v11(v8, v9, v10);
  uint64_t v13 = a3[6];
  long long v14 = *(_OWORD *)((char *)a2 + v13 + 24);
  *(_OWORD *)((char *)a1 + v13 + 24) = v14;
  (**(void (***)(void))(v14 - 8))();
  uint64_t v15 = a3[7];
  uint64_t v16 = (void **)((char *)a1 + v15);
  Swift::String v17 = (void **)((char *)a2 + v15);
  if (*v17)
  {
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  }
  return a1;
}

void **sub_100035254(void **a1, void **a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = a3[5];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Bag();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  sub_1000300B4((uint64_t *)((char *)a1 + a3[6]), (uint64_t *)((char *)a2 + a3[6]));
  uint64_t v13 = a3[7];
  long long v14 = (void **)((char *)a1 + v13);
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = *(uint64_t *)((char *)a1 + v13);
  uint64_t v17 = *(uint64_t *)((char *)a2 + v13);
  if (!v16)
  {
    if (v17)
    {
      uint64_t v19 = *((void *)v15 + 1);
      *long long v14 = v17;
      v14[1] = v19;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)long long v14 = *(_OWORD *)v15;
    return a1;
  }
  if (!v17)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v18 = *((void *)v15 + 1);
  *long long v14 = v17;
  v14[1] = v18;
  swift_retain();
  swift_release();
  return a1;
}

void *sub_100035358(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  id v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Bag();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)a1 + v10;
  uint64_t v13 = (char *)a2 + v10;
  long long v14 = *((_OWORD *)v13 + 1);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = v14;
  *((void *)v12 + 4) = *((void *)v13 + 4);
  uint64_t v15 = (void *)((char *)a1 + v11);
  uint64_t v16 = (void *)((char *)a2 + v11);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = v16[1];
    *uint64_t v15 = v17;
    v15[1] = v18;
  }
  else
  {
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  }
  return a1;
}

void **sub_100035424(void **a1, void **a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = a3[5];
  id v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Bag();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  sub_10002ED08((uint64_t)a1 + v11);
  *((void *)v12 + 4) = *((void *)v13 + 4);
  long long v14 = *((_OWORD *)v13 + 1);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = (void **)((char *)a1 + v15);
  uint64_t v17 = (uint64_t *)((char *)a2 + v15);
  uint64_t v18 = *(uint64_t *)((char *)a1 + v15);
  uint64_t v19 = *v17;
  if (!v18)
  {
    if (v19)
    {
      uint64_t v21 = v17[1];
      *uint64_t v16 = v19;
      v16[1] = v21;
      return a1;
    }
LABEL_7:
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    return a1;
  }
  if (!v19)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v20 = v17[1];
  *uint64_t v16 = v19;
  v16[1] = v20;
  swift_release();
  return a1;
}

uint64_t sub_10003552C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100035540);
}

uint64_t sub_100035540(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Bag();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000355F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100035604);
}

void *sub_100035604(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Bag();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000356AC()
{
  uint64_t result = type metadata accessor for Bag();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_100035764(void *a1)
{
  int v3 = self;
  if (![v3 valueWithNewObjectInContext:a1])
  {
    __break(1u);
    goto LABEL_10;
  }
  long long v14 = *v1;
  long long v15 = v14;
  sub_100035984((uint64_t)&v14);
  id v4 = a1;
  id v5 = [v3 valueWithObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)() inContext:v4];
  swift_unknownObjectRelease();

  if (!v5)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  JSValue.subscript.setter();
  sub_1000359B0((uint64_t)(v1 + 1), (uint64_t)v13);
  sub_1000359B0((uint64_t)v13, (uint64_t)&v15);
  if (*((void *)&v15 + 1))
  {
    long long v12 = v15;
    id v6 = v4;
    sub_100035984((uint64_t)v13);
    uint64_t v7 = _bridgeAnythingToObjectiveC<A>(_:)();
    sub_100035A18((uint64_t)&v12);
  }
  else
  {
    id v8 = v4;
    uint64_t v7 = 0;
  }
  id v9 = [v3 valueWithObject:v7 inContext:v4];
  swift_unknownObjectRelease();

  if (!v9) {
    goto LABEL_11;
  }
  JSValue.subscript.setter();
  long long v12 = v1[2];
  id v10 = v4;
  sub_100035984((uint64_t)&v12);
  id v11 = [v3 valueWithObject:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)() inContext:v10];
  swift_unknownObjectRelease();

  if (v11)
  {
    JSValue.subscript.setter();
    return;
  }
LABEL_12:
  __break(1u);
}

uint64_t sub_100035984(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000359B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A1AB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100035A18(uint64_t a1)
{
  return a1;
}

uint64_t destroy for AppDistributionAppAvailability.Distributor()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for AppDistributionAppAvailability.Distributor(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AppDistributionAppAvailability.Distributor(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for AppDistributionAppAvailability.Distributor(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void *assignWithTake for AppDistributionAppAvailability.Distributor(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AppDistributionAppAvailability.Distributor(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppDistributionAppAvailability.Distributor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppDistributionAppAvailability.Distributor()
{
  return &type metadata for AppDistributionAppAvailability.Distributor;
}

uint64_t destroy for AppDistributionAppAvailability()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s19appstorecomponentsd30AppDistributionAppAvailabilityVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AppDistributionAppAvailability(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for AppDistributionAppAvailability(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AppDistributionAppAvailability(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AppDistributionAppAvailability(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppDistributionAppAvailability(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppDistributionAppAvailability()
{
  return &type metadata for AppDistributionAppAvailability;
}

uint64_t sub_100035E84()
{
  uint64_t v0 = type metadata accessor for OSLogger();
  sub_10002F648(v0, qword_1001A1AC0);
  uint64_t v1 = sub_10002F6AC(v0, (uint64_t)qword_1001A1AC0);
  if (qword_1001A0E80 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10002F6AC(v0, (uint64_t)qword_1001AE3C8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void *sub_100035F4C()
{
  uint64_t v1 = v0;
  sub_10002EB60((uint64_t *)&unk_1001A1CD0);
  swift_allocObject();
  v0[5] = SyncEvent.init()();
  v0[2] = sub_100063308((uint64_t)&_swiftEmptyArrayStorage);
  sub_10002EB60((uint64_t *)&unk_1001A3490);
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 16) = 0;
  v0[3] = v2;
  id v3 = [objc_allocWithZone((Class)type metadata accessor for LSApplicationWorkspaceObserver()) init];
  v1[4] = v3;
  __n128 result = [self defaultWorkspace];
  if (result)
  {
    uint64_t v5 = result;
    [result addObserver:v3];

    *(void *)(v1[4]
              + OBJC_IVAR____TtC19appstorecomponentsdP33_29B18140782058085C16F28BE6542E8A30LSApplicationWorkspaceObserver_changeObserver
              + 8) = &off_100185450;
    swift_unknownObjectWeakAssign();
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100036050(uint64_t a1, int a2)
{
  int v65 = a2;
  uint64_t v64 = *v2;
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v4 - 8);
  v75 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for OSLogger();
  uint64_t v6 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  v73 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AdamID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  long long v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v84 = (char *)&v64 - v13;
  unint64_t v87 = (unint64_t)&_swiftEmptyArrayStorage;
  uint64_t v76 = a1;
  if (a1)
  {
    uint64_t v14 = *(void *)(a1 + 56);
    uint64_t v77 = a1 + 56;
    uint64_t v15 = 1 << *(unsigned char *)(a1 + 32);
    uint64_t v16 = -1;
    if (v15 < 64) {
      uint64_t v16 = ~(-1 << v15);
    }
    unint64_t v17 = v16 & v14;
    int64_t v78 = (unint64_t)(v15 + 63) >> 6;
    uint64_t v82 = v9 + 32;
    uint64_t v83 = v9 + 16;
    v81 = (void (**)(char *, uint64_t))(v9 + 8);
    v70 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v69 = (void (**)(char *, uint64_t))(v6 + 8);
    swift_bridgeObjectRetain();
    int64_t v18 = 0;
    long long v68 = xmmword_10014CED0;
    v67 = (void *)0x800000010015ACC0;
    uint64_t v72 = v8;
    uint64_t v71 = v9;
    while (1)
    {
      if (v17)
      {
        unint64_t v19 = __clz(__rbit64(v17));
        v17 &= v17 - 1;
        unint64_t v20 = v19 | (v18 << 6);
      }
      else
      {
        if (__OFADD__(v18++, 1)) {
          goto LABEL_43;
        }
        if (v18 >= v78)
        {
LABEL_33:
          uint64_t v48 = swift_release();
          uint64_t v49 = v66;
          char i = v65;
          goto LABEL_39;
        }
        unint64_t v22 = *(void *)(v77 + 8 * v18);
        if (!v22)
        {
          int64_t v23 = v18 + 1;
          if (v18 + 1 >= v78) {
            goto LABEL_33;
          }
          unint64_t v22 = *(void *)(v77 + 8 * v23);
          if (!v22)
          {
            int64_t v23 = v18 + 2;
            if (v18 + 2 >= v78) {
              goto LABEL_33;
            }
            unint64_t v22 = *(void *)(v77 + 8 * v23);
            if (!v22)
            {
              int64_t v23 = v18 + 3;
              if (v18 + 3 >= v78) {
                goto LABEL_33;
              }
              unint64_t v22 = *(void *)(v77 + 8 * v23);
              if (!v22)
              {
                while (1)
                {
                  int64_t v18 = v23 + 1;
                  if (__OFADD__(v23, 1)) {
                    goto LABEL_44;
                  }
                  if (v18 >= v78) {
                    goto LABEL_33;
                  }
                  unint64_t v22 = *(void *)(v77 + 8 * v18);
                  ++v23;
                  if (v22) {
                    goto LABEL_18;
                  }
                }
              }
            }
          }
          int64_t v18 = v23;
        }
LABEL_18:
        unint64_t v17 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v18 << 6);
      }
      unint64_t v24 = v84;
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v84, *(void *)(a1 + 48) + *(void *)(v9 + 72) * v20, v8);
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v24, v8);
      uint64_t v25 = AdamID.int64Value.getter();
      if (v25 < 0)
      {
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
      }
      uint64_t v26 = v25;
      id v27 = objc_allocWithZone((Class)LSApplicationRecord);
      aBlock[0] = 0;
      id v28 = objc_msgSend(v27, "initWithStoreItemIdentifier:error:", v26, aBlock, v64);
      if (v28)
      {
        unint64_t v29 = v28;
        id v30 = aBlock[0];
        id v31 = [v29 applicationState];
        unsigned __int8 v32 = [v31 isInstalled];

        if ((v32 & 1) != 0 && [v29 isInstalledFromDistributorOrWeb])
        {
          id v33 = v29;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v87 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v87 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

          (*v81)(v12, v8);
        }
        else
        {
          (*v81)(v12, v8);
        }
      }
      else
      {
        unint64_t v80 = v17;
        id v34 = aBlock[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        if (qword_1001A0DB0 != -1) {
          swift_once();
        }
        uint64_t v35 = v74;
        uint64_t v36 = sub_10002F6AC(v74, (uint64_t)qword_1001A1AC0);
        uint64_t v37 = v73;
        (*v70)(v73, v36, v35);
        sub_10002EB60((uint64_t *)&unk_1001A19E0);
        uint64_t v38 = *(void *)(type metadata accessor for LogMessage() - 8);
        unint64_t v39 = (*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
        uint64_t v40 = swift_allocObject();
        *(_OWORD *)(v40 + 16) = v68;
        unint64_t v79 = v40 + v39;
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
        v41._countAndFlagsBits = 0xD000000000000046;
        v41._object = v67;
        LogMessage.StringInterpolation.appendLiteral(_:)(v41);
        uint64_t v42 = (void *)AdamID.int64Value.getter();
        v89 = &type metadata for Int64;
        aBlock[0] = v42;
        LogMessage.StringInterpolation.appendInterpolation(safe:)();
        sub_100034B8C((uint64_t)aBlock, &qword_1001A1C50);
        v43._countAndFlagsBits = 0x6E6F73616572202CLL;
        v43._object = (void *)0xEA0000000000203ALL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v43);
        swift_getErrorValue();
        uint64_t v44 = v85;
        uint64_t v45 = v86;
        v89 = v86;
        uint64_t v46 = sub_100031A88((uint64_t *)aBlock);
        (*(void (**)(uint64_t *, uint64_t, void *))(*(v45 - 1) + 16))(v46, v44, v45);
        LogMessage.StringInterpolation.appendInterpolation(safe:)();
        sub_100034B8C((uint64_t)aBlock, &qword_1001A1C50);
        v47._countAndFlagsBits = 0;
        v47._object = (void *)0xE000000000000000;
        LogMessage.StringInterpolation.appendLiteral(_:)(v47);
        LogMessage.init(stringInterpolation:)();
        Logger.error(_:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        (*v69)(v37, v35);
        uint64_t v8 = v72;
        (*v81)(v12, v72);
        a1 = v76;
        uint64_t v9 = v71;
        unint64_t v17 = v80;
      }
    }
  }
  id v51 = objc_msgSend(self, "enumeratorWithOptions:", 0, v64);
  v90 = sub_100036BB8;
  uint64_t v91 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100036C30;
  v89 = &unk_100185460;
  uint64_t v52 = _Block_copy(aBlock);
  [v51 setFilter:v52];
  _Block_release(v52);
  id v53 = [v51 nextObject];
  uint64_t v49 = v66;
  for (char i = v65; v53; v53 = [v51 nextObject])
  {
    id v54 = v53;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v87 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v87 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
LABEL_39:
  unint64_t v55 = v87;
  uint64_t v56 = __chkstk_darwin(v48);
  *(&v64 - 4) = v55;
  *(&v64 - 3) = v49;
  *(&v64 - 2) = v57;
  *(&v64 - 1) = v58;
  __chkstk_darwin(v56);
  *(&v64 - 2) = (uint64_t)sub_10003AF40;
  *(&v64 - 1) = v59;
  v61 = v60 + 4;
  os_unfair_lock_lock(v60 + 4);
  sub_100042768(aBlock);
  os_unfair_lock_unlock(v61);
  id v62 = aBlock[0];
  swift_bridgeObjectRelease();
  if (i)
  {
    aBlock[0] = v62;
    SyncEvent.post(_:)();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100036A50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  swift_beginAccess();
  uint64_t v6 = *(void *)(a1 + 16);
  if (*(void *)(v6 + 16) && (unint64_t v7 = sub_10003A91C(a2), (v8 & 1) != 0))
  {
    unint64_t v9 = v7;
    uint64_t v10 = *(void *)(v6 + 56);
    uint64_t v11 = type metadata accessor for State();
    uint64_t v12 = *(void *)(v11 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 16))(a3, v10 + *(void *)(v12 + 72) * v9, v11);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(a3, 0, 1, v11);
  }
  else
  {
    uint64_t v13 = type metadata accessor for State();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a3, 1, 1, v13);
  }
  return swift_endAccess();
}

BOOL sub_100036BB8(void *a1)
{
  id v2 = [a1 applicationState];
  unsigned int v3 = [v2 isInstalled];

  return v3 && ([a1 isInstalledFromDistributorOrWeb] & 1) != 0;
}

uint64_t sub_100036C30(uint64_t a1, void *a2)
{
  unsigned int v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  LOBYTE(v3) = v3();
  swift_release();

  return v3 & 1;
}

uint64_t sub_100036C88@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for OSLogger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [a1 iTunesMetadata];
  uint64_t v10 = (uint64_t)[v9 storeItemIdentifier];

  if (v10 < 0)
  {
    __break(1u);
    swift_once();
    uint64_t v11 = sub_10002F6AC(v5, (uint64_t)qword_1001A1AC0);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v11, v5);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v12._object = (void *)0x800000010015AD10;
    v12._countAndFlagsBits = 0xD000000000000021;
    LogMessage.StringInterpolation.appendLiteral(_:)(v12);
    uint64_t v25 = &type metadata for Int64;
    v24[0] = v10;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_100034B8C((uint64_t)v24, &qword_1001A1C50);
    v13._countAndFlagsBits = 0x6E6F73616572202CLL;
    v13._object = (void *)0xEA0000000000203ALL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v13);
    swift_getErrorValue();
    uint64_t v14 = v22[1];
    uint64_t v15 = v23;
    uint64_t v25 = v23;
    uint64_t v16 = sub_100031A88(v24);
    (*(void (**)(uint64_t *, uint64_t, void *))(*(v15 - 1) + 16))(v16, v14, v15);
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_100034B8C((uint64_t)v24, &qword_1001A1C50);
    v17._countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v17);
    LogMessage.init(stringInterpolation:)();
    Logger.error(_:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v18 = type metadata accessor for AdamID();
    return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v22[0], 1, 1, v18);
  }
  else
  {
    AdamID.init(value:)();
    uint64_t v19 = type metadata accessor for AdamID();
    unint64_t v20 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56);
    return v20(a2, 0, 1, v19);
  }
}

void sub_1000370A4(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  sub_10003713C(a1, a2, a3, a4, &v12);
  if (v5) {
    __break(1u);
  }
  else {
    *a5 = v12;
  }
}

uint64_t sub_10003713C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = v5;
  v144 = a4;
  uint64_t v146 = a3;
  uint64_t v159 = a2;
  v145 = a5;
  uint64_t v184 = type metadata accessor for State();
  uint64_t v172 = *(void *)(v184 - 8);
  __chkstk_darwin(v184);
  v153 = (char *)&v140 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = sub_10002EB60(&qword_1001A1C58);
  __chkstk_darwin(v158);
  uint64_t v10 = (uint64_t)&v140 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10002EB60(&qword_1001A1C60);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (uint64_t)&v140 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for LogMessage.StringInterpolation();
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  v168 = (char *)&v140 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v143 = (char *)&v140 - v17;
  uint64_t v169 = type metadata accessor for OSLogger();
  uint64_t v147 = *(void *)(v169 - 8);
  uint64_t v18 = __chkstk_darwin(v169);
  v167 = (char *)&v140 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v142 = (char *)&v140 - v20;
  uint64_t v21 = sub_10002EB60(&qword_1001A1C68);
  uint64_t v22 = __chkstk_darwin(v21 - 8);
  uint64_t v149 = (uint64_t)&v140 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v155 = (uint64_t)&v140 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v151 = (uint64_t)&v140 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v161 = (uint64_t)&v140 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v186 = (uint64_t)&v140 - v31;
  __chkstk_darwin(v30);
  id v33 = (char *)&v140 - v32;
  unint64_t v34 = a1;
  uint64_t v35 = type metadata accessor for AdamID();
  uint64_t v183 = *(void *)(v35 - 8);
  uint64_t v36 = __chkstk_darwin(v35);
  v154 = (char *)&v140 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __chkstk_darwin(v36);
  v187 = (char *)&v140 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  v179 = (char *)&v140 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v189 = (uint64_t)&v140 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v46 = (uint64_t)&v140 - v45;
  __chkstk_darwin(v44);
  v182 = (char *)&v140 - v47;
  v199 = &_swiftEmptySetSingleton;
  v198 = &_swiftEmptySetSingleton;
  unint64_t v171 = v34;
  unint64_t v141 = v34 >> 62;
  if (v34 >> 62) {
    goto LABEL_82;
  }
  uint64_t v48 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
  for (uint64_t result = swift_bridgeObjectRetain(); ; v48 = result)
  {
    v177 = v33;
    uint64_t v191 = v46;
    if (v48)
    {
      if (v48 < 1)
      {
        __break(1u);
        return result;
      }
      uint64_t v50 = 0;
      v162 = (void **)(v159 + 16);
      unint64_t v180 = v34 & 0xC000000000000001;
      v166 = (void (**)(char *, uint64_t, uint64_t))(v147 + 16);
      v165 = (void (**)(char *, uint64_t))(v147 + 8);
      v176 = (uint64_t *)(v183 + 56);
      v157 = (void (**)(uint64_t, uint64_t, uint64_t))(v183 + 32);
      v175 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v172 + 48);
      v170 = (void (**)(char *, uint64_t, uint64_t))(v183 + 16);
      v160 = (void (**)(uint64_t, uint64_t))(v183 + 8);
      v156 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v172 + 56);
      uint64_t v148 = v172 + 16;
      v152 = (void (**)(char *, uint64_t, uint64_t))(v172 + 32);
      v150 = (void (**)(uint64_t, uint64_t))(v172 + 8);
      long long v164 = xmmword_10014CED0;
      v163 = (void *)0x800000010015AD10;
      int64_t v174 = v10;
      uint64_t v181 = v13;
      v173 = (char *)v48;
      while (1)
      {
        v188 = v50;
        if (v180) {
          id v56 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v56 = *(id *)(v34 + 8 * (void)v50 + 32);
        }
        v190 = v56;
        id v33 = (char *)[v56 iTunesMetadata];
        uint64_t v46 = (uint64_t)[v33 storeItemIdentifier];

        if (v46 < 0)
        {
          __break(1u);
          goto LABEL_80;
        }
        AdamID.init(value:)();
        v178 = v6;
        if (v6)
        {
          if (qword_1001A0DB0 != -1) {
            swift_once();
          }
          uint64_t v57 = v169;
          uint64_t v58 = sub_10002F6AC(v169, (uint64_t)qword_1001A1AC0);
          uint64_t v59 = v167;
          (*v166)(v167, v58, v57);
          sub_10002EB60((uint64_t *)&unk_1001A19E0);
          uint64_t v60 = *(void *)(type metadata accessor for LogMessage() - 8);
          unint64_t v61 = (*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
          uint64_t v62 = swift_allocObject();
          *(_OWORD *)(v62 + 16) = v164;
          uint64_t v185 = v62 + v61;
          LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
          v63._countAndFlagsBits = 0xD000000000000021;
          v63._object = v163;
          LogMessage.StringInterpolation.appendLiteral(_:)(v63);
          v197 = &type metadata for Int64;
          uint64_t v196 = v46;
          LogMessage.StringInterpolation.appendInterpolation(safe:)();
          sub_100034B8C((uint64_t)&v196, &qword_1001A1C50);
          v64._countAndFlagsBits = 0x6E6F73616572202CLL;
          v64._object = (void *)0xEA0000000000203ALL;
          LogMessage.StringInterpolation.appendLiteral(_:)(v64);
          swift_getErrorValue();
          uint64_t v65 = v194;
          uint64_t v66 = v195;
          v197 = v195;
          v67 = sub_100031A88(&v196);
          (*(void (**)(uint64_t *, uint64_t, void *))(*(v66 - 1) + 16))(v67, v65, v66);
          LogMessage.StringInterpolation.appendInterpolation(safe:)();
          sub_100034B8C((uint64_t)&v196, &qword_1001A1C50);
          v68._countAndFlagsBits = 0;
          v68._object = (void *)0xE000000000000000;
          LogMessage.StringInterpolation.appendLiteral(_:)(v68);
          LogMessage.init(stringInterpolation:)();
          Logger.error(_:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          (*v165)(v59, v57);
          uint64_t v13 = v181;
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*v176)(v181, 1, 1, v35);

          sub_100034B8C(v13, &qword_1001A1C60);
          uint64_t v6 = 0;
          uint64_t v10 = v174;
          uint64_t v48 = (uint64_t)v173;
          goto LABEL_8;
        }
        ((void (*)(uint64_t, void, uint64_t, uint64_t))*v176)(v13, 0, 1, v35);
        (*v157)((uint64_t)v187, v13, v35);
        uint64_t v69 = v186;
        sub_100038978(v190, v186);
        v70 = *v175;
        if ((*v175)(v69, 1, v184) != 1)
        {
          uint64_t v71 = v179;
          (*v170)(v179, (uint64_t)v187, v35);
          uint64_t v72 = v189;
          sub_100097AC8(v189, v71);
          uint64_t v73 = v72;
          uint64_t v13 = v181;
          (*v160)(v73, v35);
        }
        uint64_t v74 = v162;
        swift_beginAccess();
        v75 = *v74;
        if (*((void *)*v74 + 2) && (unint64_t v76 = sub_10003A91C((uint64_t)v187), (v77 & 1) != 0))
        {
          uint64_t v78 = v161;
          (*(void (**)(uint64_t, unint64_t, uint64_t))(v172 + 16))(v161, v75[7] + *(void *)(v172 + 72) * v76, v184);
          uint64_t v79 = 0;
        }
        else
        {
          uint64_t v79 = 1;
          uint64_t v78 = v161;
        }
        uint64_t v80 = v184;
        (*v156)(v78, v79, 1, v184);
        swift_endAccess();
        uint64_t v81 = v10 + *(int *)(v158 + 48);
        sub_1000427AC(v78, v10);
        sub_1000427AC(v186, v81);
        if (v70(v10, 1, v80) == 1)
        {
          sub_100034B8C(v78, &qword_1001A1C68);
          if (v70(v81, 1, v184) != 1) {
            goto LABEL_28;
          }
          sub_100034B8C(v10, &qword_1001A1C68);
        }
        else
        {
          uint64_t v82 = v151;
          sub_1000427AC(v10, v151);
          if (v70(v81, 1, v184) == 1)
          {
            sub_100034B8C(v161, &qword_1001A1C68);
            (*v150)(v82, v184);
LABEL_28:
            sub_100034B8C(v10, &qword_1001A1C58);
LABEL_31:
            v88 = *v170;
            uint64_t v89 = (uint64_t)v154;
            (*v170)(v154, (uint64_t)v187, v35);
            uint64_t v90 = v155;
            sub_1000427AC(v186, v155);
            uint64_t v91 = v162;
            swift_beginAccess();
            unsigned int v92 = v70(v90, 1, v184);
            v93 = v160;
            if (v92 == 1)
            {
              sub_100034B8C(v90, &qword_1001A1C68);
              uint64_t v51 = v149;
              sub_10003B514(v89, v149);
              uint64_t v52 = *v93;
              (*v93)(v89, v35);
              sub_100034B8C(v51, &qword_1001A1C68);
            }
            else
            {
              uint64_t v94 = (uint64_t)v153;
              (*v152)(v153, v90, v184);
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v193 = *v91;
              *uint64_t v91 = (void *)0x8000000000000000;
              sub_10003EE88(v94, v89, isUniquelyReferenced_nonNull_native);
              *uint64_t v91 = v193;
              swift_bridgeObjectRelease();
              uint64_t v52 = *v93;
              (*v93)(v89, v35);
            }
            swift_endAccess();
            id v53 = v179;
            uint64_t v54 = (uint64_t)v187;
            v88(v179, (uint64_t)v187, v35);
            uint64_t v55 = v189;
            sub_100097AC8(v189, v53);

            v52(v55, v35);
            v52(v54, v35);
            sub_100034B8C(v186, &qword_1001A1C68);
            uint64_t v6 = v178;
            uint64_t v10 = v174;
            uint64_t v13 = v181;
            uint64_t v48 = (uint64_t)v173;
            goto LABEL_8;
          }
          uint64_t v83 = v82;
          v84 = v153;
          uint64_t v85 = v184;
          (*v152)(v153, v81, v184);
          sub_10003AEE0(&qword_1001A1C70, (void (*)(uint64_t))&type metadata accessor for State);
          LODWORD(v185) = dispatch thunk of static Equatable.== infix(_:_:)();
          v86 = *v150;
          unint64_t v87 = v84;
          uint64_t v13 = v181;
          (*v150)((uint64_t)v87, v85);
          sub_100034B8C(v161, &qword_1001A1C68);
          v86(v83, v85);
          sub_100034B8C(v10, &qword_1001A1C68);
          if ((v185 & 1) == 0) {
            goto LABEL_31;
          }
        }
        (*v160)((uint64_t)v187, v35);

        sub_100034B8C(v186, &qword_1001A1C68);
        uint64_t v6 = v178;
LABEL_8:
        uint64_t v50 = v188 + 1;
        unint64_t v34 = v171;
        if ((unsigned char *)v48 == v188 + 1)
        {
          swift_bridgeObjectRelease();
          v96 = v198;
          uint64_t v97 = v191;
          goto LABEL_35;
        }
      }
    }
    swift_bridgeObjectRelease();
    v96 = &_swiftEmptySetSingleton;
    uint64_t v97 = v46;
LABEL_35:
    v176 = (uint64_t *)(v159 + 16);
    swift_beginAccess();
    v193 = &_swiftEmptySetSingleton;
    uint64_t v98 = swift_bridgeObjectRetain();
    id v33 = (char *)sub_10003964C(v98);
    uint64_t v46 = v146;
    v178 = v6;
    if (v146)
    {
      uint64_t v99 = swift_bridgeObjectRetain();
      id v33 = (char *)sub_100040F04(v99, (uint64_t)v33, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_1000410A0);
      swift_bridgeObjectRelease();
    }
    uint64_t v100 = 0;
    uint64_t v101 = *((void *)v33 + 7);
    v173 = v33 + 56;
    uint64_t v102 = 1 << v33[32];
    if (v102 < 64) {
      uint64_t v103 = ~(-1 << v102);
    }
    else {
      uint64_t v103 = -1;
    }
    unint64_t v104 = v103 & v101;
    int64_t v174 = (unint64_t)(v102 + 63) >> 6;
    v190 = (void *)(v183 + 16);
    uint64_t v181 = v183 + 32;
    v187 = v96 + 56;
    uint64_t v6 = (void (**)(void, uint64_t))(v183 + 8);
    v175 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v172 + 56);
    v170 = (void (**)(char *, uint64_t, uint64_t))(v172 + 32);
    v188 = v96;
    unint64_t v180 = (unint64_t)v33;
    if (v104)
    {
      do
      {
        while (1)
        {
          uint64_t v185 = (v104 - 1) & v104;
          uint64_t v186 = v100;
          unint64_t v105 = __clz(__rbit64(v104)) | (v100 << 6);
LABEL_57:
          uint64_t v110 = *((void *)v33 + 6);
          v112 = v182;
          uint64_t v111 = v183;
          uint64_t v10 = *(void *)(v183 + 72);
          uint64_t v46 = *(void *)(v183 + 16);
          ((void (*)(char *, unint64_t, uint64_t))v46)(v182, v110 + v10 * v105, v35);
          (*(void (**)(uint64_t, char *, uint64_t))(v111 + 32))(v97, v112, v35);
          if (*((void *)v96 + 2))
          {
            sub_10003AEE0(&qword_1001A1C38, (void (*)(uint64_t))&type metadata accessor for AdamID);
            uint64_t v113 = dispatch thunk of Hashable._rawHashValue(seed:)();
            uint64_t v114 = -1 << v96[32];
            unint64_t v115 = v113 & ~v114;
            if ((*(void *)&v187[(v115 >> 3) & 0xFFFFFFFFFFFFFF8] >> v115)) {
              break;
            }
          }
LABEL_62:
          v119 = v176;
          swift_bridgeObjectRetain();
          unint64_t v120 = sub_10003A91C(v191);
          char v122 = v121;
          swift_bridgeObjectRelease();
          if (v122)
          {
            char v123 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v124 = *v119;
            uint64_t v192 = *v119;
            uint64_t *v119 = 0x8000000000000000;
            if ((v123 & 1) == 0)
            {
              sub_10003FD04();
              uint64_t v124 = v192;
            }
            (*v6)(*(void *)(v124 + 48) + v120 * v10, v35);
            uint64_t v125 = v192;
            uint64_t v126 = (uint64_t)v177;
            uint64_t v127 = v184;
            (*(void (**)(char *, unint64_t, uint64_t))(v172 + 32))(v177, *(void *)(v192 + 56) + *(void *)(v172 + 72) * v120, v184);
            sub_10003E330(v120, v125);
            uint64_t *v119 = v125;
            swift_bridgeObjectRelease();
            uint64_t v128 = 0;
          }
          else
          {
            uint64_t v128 = 1;
            uint64_t v127 = v184;
            uint64_t v126 = (uint64_t)v177;
          }
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*v175)(v126, v128, 1, v127);
          sub_100034B8C(v126, &qword_1001A1C68);
          v129 = v179;
          uint64_t v10 = (uint64_t)v190;
          uint64_t v97 = v191;
          ((void (*)(char *, uint64_t, uint64_t))v46)(v179, v191, v35);
          uint64_t v13 = v189;
          sub_100097AC8(v189, v129);
          v130 = *v6;
          (*v6)(v13, v35);
          ((void (*)(char *, uint64_t, uint64_t))v46)(v129, v97, v35);
          sub_100097AC8(v13, v129);
          v130(v13, v35);
          v130(v97, v35);
          v96 = v188;
          unint64_t v104 = v185;
          uint64_t v100 = v186;
          id v33 = (char *)v180;
          if (!v185) {
            goto LABEL_44;
          }
        }
        uint64_t v13 = ~v114;
        while (1)
        {
          uint64_t v116 = v189;
          ((void (*)(uint64_t, unint64_t, uint64_t))v46)(v189, *((void *)v96 + 6) + v115 * v10, v35);
          sub_10003AEE0((unint64_t *)&unk_1001A1C40, (void (*)(uint64_t))&type metadata accessor for AdamID);
          char v117 = dispatch thunk of static Equatable.== infix(_:_:)();
          v118 = *v6;
          (*v6)(v116, v35);
          if (v117) {
            break;
          }
          unint64_t v115 = (v115 + 1) & v13;
          v96 = v188;
          if (((*(void *)&v187[(v115 >> 3) & 0xFFFFFFFFFFFFFF8] >> v115) & 1) == 0) {
            goto LABEL_62;
          }
        }
        uint64_t v97 = v191;
        v118(v191, v35);
        v96 = v188;
        id v33 = (char *)v180;
        unint64_t v104 = v185;
        uint64_t v100 = v186;
      }
      while (v185);
    }
LABEL_44:
    BOOL v106 = __OFADD__(v100, 1);
    uint64_t v107 = v100 + 1;
    if (v106)
    {
LABEL_80:
      __break(1u);
      goto LABEL_81;
    }
    if (v107 >= v174) {
      break;
    }
    unint64_t v108 = *(void *)&v173[8 * v107];
    if (v108) {
      goto LABEL_56;
    }
    uint64_t v109 = v107 + 1;
    if (v107 + 1 >= v174) {
      break;
    }
    unint64_t v108 = *(void *)&v173[8 * v109];
    if (v108) {
      goto LABEL_55;
    }
    uint64_t v109 = v107 + 2;
    if (v107 + 2 >= v174) {
      break;
    }
    unint64_t v108 = *(void *)&v173[8 * v109];
    if (v108) {
      goto LABEL_55;
    }
    uint64_t v109 = v107 + 3;
    if (v107 + 3 >= v174) {
      break;
    }
    unint64_t v108 = *(void *)&v173[8 * v109];
    if (v108)
    {
LABEL_55:
      uint64_t v107 = v109;
LABEL_56:
      uint64_t v185 = (v108 - 1) & v108;
      uint64_t v186 = v107;
      unint64_t v105 = __clz(__rbit64(v108)) + (v107 << 6);
      goto LABEL_57;
    }
    uint64_t v109 = v107 + 4;
    if (v107 + 4 >= v174) {
      break;
    }
    unint64_t v108 = *(void *)&v173[8 * v109];
    if (v108) {
      goto LABEL_55;
    }
    while (1)
    {
      uint64_t v107 = v109 + 1;
      if (__OFADD__(v109, 1)) {
        break;
      }
      if (v107 >= v174) {
        goto LABEL_73;
      }
      unint64_t v108 = *(void *)&v173[8 * v107];
      ++v109;
      if (v108) {
        goto LABEL_56;
      }
    }
LABEL_81:
    __break(1u);
LABEL_82:
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    unint64_t v34 = v171;
  }
LABEL_73:
  swift_release();
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_bridgeObjectRelease();
  uint64_t v131 = v147;
  v132 = v142;
  if (qword_1001A0DB0 != -1) {
    swift_once();
  }
  uint64_t v133 = v169;
  uint64_t v134 = sub_10002F6AC(v169, (uint64_t)qword_1001A1AC0);
  (*(void (**)(char *, uint64_t, uint64_t))(v131 + 16))(v132, v134, v133);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v135._countAndFlagsBits = 0;
  v135._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v135);
  v197 = v144;
  uint64_t v196 = v159;
  swift_retain();
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)&v196, &qword_1001A1C50);
  v136._object = (void *)0x800000010015AD40;
  v136._countAndFlagsBits = 0xD000000000000019;
  LogMessage.StringInterpolation.appendLiteral(_:)(v136);
  if (v141)
  {
    swift_bridgeObjectRetain();
    uint64_t v137 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v137 = *(void *)((v171 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v197 = &type metadata for Int;
  uint64_t v196 = v137;
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)&v196, &qword_1001A1C50);
  v138._countAndFlagsBits = 0x7370706120;
  v138._object = (void *)0xE500000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v138);
  LogMessage.init(stringInterpolation:)();
  uint64_t v139 = v169;
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v131 + 8))(v132, v139);
  void *v145 = v199;
  return result;
}

uint64_t sub_100038978@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for OSLogger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [a1 applicationState];
  unsigned int v12 = [v11 isInstalled];

  if (v12 && [a1 isInstalledFromDistributorOrWeb])
  {
    if (qword_1001A0DB0 != -1) {
      swift_once();
    }
    uint64_t v13 = sub_10002F6AC(v7, (uint64_t)qword_1001A1AC0);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v13, v7);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v14._countAndFlagsBits = 0;
    v14._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v14);
    uint64_t v34 = v5;
    v33[0] = v2;
    swift_retain();
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_100034B8C((uint64_t)v33, &qword_1001A1C50);
    v15._object = (void *)0x800000010015AD80;
    v15._countAndFlagsBits = 0xD000000000000018;
    LogMessage.StringInterpolation.appendLiteral(_:)(v15);
    uint64_t v34 = sub_10002EE34(0, &qword_1001A1C80);
    v33[0] = a1;
    id v16 = a1;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_100034B8C((uint64_t)v33, &qword_1001A1C50);
    v17._countAndFlagsBits = 0x6E65706F20736920;
    v17._object = (void *)0xEC000000656C6261;
    LogMessage.StringInterpolation.appendLiteral(_:)(v17);
    LogMessage.init(stringInterpolation:)();
    Logger.debug(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    id v18 = [v16 iTunesMetadata];
    unint64_t v19 = (unint64_t)[v18 versionIdentifier];

    uint64_t v20 = *(int *)(sub_10002EB60(&qword_1001A1C88) + 48);
    uint64_t v21 = enum case for AppOpenableDestination.app(_:);
    uint64_t v22 = type metadata accessor for AppOpenableDestination();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 104))(a2, v21, v22);
    if ((v19 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      *(void *)(a2 + v20) = v19;
      uint64_t v24 = enum case for State.openable(_:);
      uint64_t v25 = type metadata accessor for State();
      uint64_t v26 = *(void *)(v25 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 104))(a2, v24, v25);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(a2, 0, 1, v25);
    }
  }
  else
  {
    if (qword_1001A0DB0 != -1) {
      swift_once();
    }
    uint64_t v27 = sub_10002F6AC(v7, (uint64_t)qword_1001A1AC0);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v27, v7);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v28._countAndFlagsBits = 0;
    v28._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v28);
    uint64_t v34 = v5;
    v33[0] = v2;
    swift_retain();
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_100034B8C((uint64_t)v33, &qword_1001A1C50);
    v29._countAndFlagsBits = 0xD00000000000001CLL;
    v29._object = (void *)0x800000010015AD60;
    LogMessage.StringInterpolation.appendLiteral(_:)(v29);
    uint64_t v34 = sub_10002EE34(0, &qword_1001A1C80);
    v33[0] = a1;
    id v30 = a1;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_100034B8C((uint64_t)v33, &qword_1001A1C50);
    v31._countAndFlagsBits = 0;
    v31._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v31);
    LogMessage.init(stringInterpolation:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v32 = type metadata accessor for State();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(a2, 1, 1, v32);
  }
  return result;
}

uint64_t sub_100039028()
{
  uint64_t v45 = *v0;
  uint64_t v1 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v1 - 8);
  unsigned int v3 = (char *)v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OSLogger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10002EB60(&qword_1001A1C60);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AdamID();
  uint64_t v44 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v48 = (char *)v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v43 = (char *)v39 - v14;
  unint64_t v15 = swift_bridgeObjectRetain();
  unint64_t v16 = (unint64_t)sub_100042844(v15);
  swift_bridgeObjectRelease();
  if (v16 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v17 = result;
  }
  else
  {
    uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }
  uint64_t v41 = v4;
  uint64_t v42 = v0;
  v39[1] = v3;
  uint64_t v40 = v5;
  v39[0] = v7;
  if (v17)
  {
    if (v17 < 1)
    {
      __break(1u);
      return result;
    }
    uint64_t v19 = 0;
    unint64_t v46 = v16 & 0xC000000000000001;
    uint64_t v47 = v17;
    uint64_t v20 = v45;
    uint64_t v21 = (unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
    uint64_t v22 = (void (**)(char *, char *, uint64_t))(v44 + 32);
    uint64_t v23 = (char *)&_swiftEmptyArrayStorage;
    uint64_t v24 = (id *)v16;
    do
    {
      if (v46) {
        id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v25 = *(id *)(v16 + 8 * v19 + 32);
      }
      uint64_t v26 = v25;
      sub_100036C88(v25, (uint64_t)v10);

      if ((*v21)(v10, 1, v11) == 1)
      {
        sub_100034B8C((uint64_t)v10, &qword_1001A1C60);
      }
      else
      {
        uint64_t v27 = *v22;
        Swift::String v28 = v43;
        (*v22)(v43, v10, v11);
        v27(v48, v28, v11);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v23 = (char *)sub_10007653C(0, *((void *)v23 + 2) + 1, 1, v23);
        }
        unint64_t v30 = *((void *)v23 + 2);
        unint64_t v29 = *((void *)v23 + 3);
        if (v30 >= v29 >> 1) {
          uint64_t v23 = (char *)sub_10007653C(v29 > 1, v30 + 1, 1, v23);
        }
        *((void *)v23 + 2) = v30 + 1;
        v27(&v23[((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80))+ *(void *)(v44 + 72) * v30], v48, v11);
        uint64_t v20 = v45;
      }
      ++v19;
      unint64_t v16 = (unint64_t)v24;
    }
    while (v47 != v19);
  }
  else
  {
    uint64_t v23 = (char *)&_swiftEmptyArrayStorage;
    uint64_t v20 = v45;
  }
  swift_bridgeObjectRelease_n();
  if (qword_1001A0DB0 != -1) {
    swift_once();
  }
  uint64_t v31 = v41;
  uint64_t v32 = sub_10002F6AC(v41, (uint64_t)qword_1001A1AC0);
  uint64_t v33 = v40;
  uint64_t v34 = v39[0];
  (*(void (**)(void, uint64_t, uint64_t))(v40 + 16))(v39[0], v32, v31);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v35._countAndFlagsBits = 0;
  v35._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v35);
  uint64_t v50 = v20;
  v49[0] = v42;
  swift_retain();
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)v49, &qword_1001A1C50);
  v36._object = (void *)0x800000010015ADA0;
  v36._countAndFlagsBits = 0xD000000000000016;
  LogMessage.StringInterpolation.appendLiteral(_:)(v36);
  uint64_t v50 = sub_10002EB60(&qword_1001A1D68);
  v49[0] = v23;
  swift_bridgeObjectRetain();
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)v49, &qword_1001A1C50);
  v37._countAndFlagsBits = 0;
  v37._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v37);
  LogMessage.init(stringInterpolation:)();
  Logger.debug(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v31);
  uint64_t v38 = sub_1000429AC((uint64_t)v23);
  swift_bridgeObjectRelease();
  sub_100036050(v38, 1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10003964C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AdamID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v25 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v25 - v10;
  sub_10003AEE0(&qword_1001A1C38, (void (*)(uint64_t))&type metadata accessor for AdamID);
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v13 = 0;
  uint64_t v29 = a1;
  uint64_t v30 = result;
  uint64_t v16 = *(void *)(a1 + 64);
  uint64_t v15 = a1 + 64;
  uint64_t v14 = v16;
  uint64_t v17 = 1 << *(unsigned char *)(v15 - 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v14;
  uint64_t v26 = v15;
  int64_t v27 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v28 = v3 + 16;
  while (1)
  {
    if (v19)
    {
      unint64_t v20 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_5;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v22 >= v27) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v22);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v27) {
        goto LABEL_23;
      }
      unint64_t v23 = *(void *)(v26 + 8 * v13);
      if (!v23)
      {
        int64_t v13 = v22 + 2;
        if (v22 + 2 >= v27) {
          goto LABEL_23;
        }
        unint64_t v23 = *(void *)(v26 + 8 * v13);
        if (!v23)
        {
          int64_t v13 = v22 + 3;
          if (v22 + 3 >= v27) {
            goto LABEL_23;
          }
          unint64_t v23 = *(void *)(v26 + 8 * v13);
          if (!v23) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v19 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v11, *(void *)(v29 + 48) + *(void *)(v3 + 72) * v21, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v11, v2);
    sub_100097AC8((uint64_t)v9, v6);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
  }
  int64_t v24 = v22 + 4;
  if (v24 >= v27)
  {
LABEL_23:
    swift_release();
    return v30;
  }
  unint64_t v23 = *(void *)(v26 + 8 * v24);
  if (v23)
  {
    int64_t v13 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v13 >= v27) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_100039954(uint64_t a1)
{
  sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
  sub_100042E58((unint64_t *)&qword_1001A1CB0, (unint64_t *)&qword_1001A2110);
  int64_t v2 = 0;
  v13[1] = (id)Set.init(minimumCapacity:)();
  uint64_t v3 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    int64_t v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v10 >= v7) {
      goto LABEL_23;
    }
    unint64_t v11 = *(void *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      int64_t v2 = v10 + 1;
      if (v10 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v11 = *(void *)(v3 + 8 * v2);
      if (!v11)
      {
        int64_t v2 = v10 + 2;
        if (v10 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        if (!v11)
        {
          int64_t v2 = v10 + 3;
          if (v10 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v11 = *(void *)(v3 + 8 * v2);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    sub_10009812C(v13, *(id *)(*(void *)(a1 + 48) + 8 * v9));
  }
  int64_t v12 = v10 + 4;
  if (v12 >= v7)
  {
LABEL_23:
    swift_release();
    return;
  }
  unint64_t v11 = *(void *)(v3 + 8 * v12);
  if (v11)
  {
    int64_t v2 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v2 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v2 >= v7) {
      goto LABEL_23;
    }
    unint64_t v11 = *(void *)(v3 + 8 * v2);
    ++v12;
    if (v11) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_100039B0C(Swift::Int a1, Swift::Int a2, Swift::Int a3)
{
  return sub_100039B3C(a1, a2, a3, sub_100112E3C);
}

uint64_t sub_100039B24(Swift::Int a1, Swift::Int a2, Swift::Int a3)
{
  return sub_100039B3C(a1, a2, a3, sub_100112E1C);
}

uint64_t sub_100039B3C(Swift::Int a1, Swift::Int a2, Swift::Int a3, uint64_t (*a4)(void))
{
  uint64_t v8 = Set.init(minimumCapacity:)();
  uint64_t v22 = v8;
  uint64_t v9 = -1 << *(unsigned char *)(a1 + 32);
  Swift::Int v10 = ~v9;
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = -v9;
  v21[2] = a1;
  v21[3] = a1 + 56;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  else {
    uint64_t v13 = -1;
  }
  v21[4] = v10;
  v21[5] = 0;
  v21[6] = v13 & v11;
  v21[7] = a2;
  v21[8] = a3;
  uint64_t v14 = a4();
  if (v15)
  {
    Swift::Int v16 = v14;
    Swift::Int v17 = v15;
    do
    {
      sub_100098148(v21, v16, v17);
      uint64_t v18 = swift_bridgeObjectRelease();
      Swift::Int v16 = ((uint64_t (*)(uint64_t))a4)(v18);
      Swift::Int v17 = v19;
    }
    while (v19);
    uint64_t v8 = v22;
  }
  sub_100034EF8();
  swift_release();
  return v8;
}

uint64_t sub_100039C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MetricsFieldInclusionRequest();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  Swift::Int v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v25 - v11;
  uint64_t v13 = sub_10002EB60(&qword_1001A1D10);
  __chkstk_darwin(v13 - 8);
  Swift::Int v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003AEE0(&qword_1001A1D18, (void (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest);
  uint64_t v16 = Set.init(minimumCapacity:)();
  v25[6] = a3;
  uint64_t v26 = v16;
  uint64_t v17 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v18 = ~v17;
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = -v17;
  v25[0] = a1;
  v25[1] = a1 + 56;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  else {
    uint64_t v21 = -1;
  }
  v25[2] = v18;
  v25[3] = 0;
  v25[4] = v21 & v19;
  v25[5] = a2;
  sub_1001131CC((uint64_t)v15);
  uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v22(v15, 1, v6) != 1)
  {
    unint64_t v23 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    do
    {
      v23(v10, v15, v6);
      sub_100098848((uint64_t)v12, v10);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
      sub_1001131CC((uint64_t)v15);
    }
    while (v22(v15, 1, v6) != 1);
    uint64_t v16 = v26;
  }
  sub_100034EF8();
  swift_release();
  return v16;
}

uint64_t sub_100039EC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for MetricsFieldExclusionRequest();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  Swift::Int v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v25 - v11;
  uint64_t v13 = sub_10002EB60(&qword_1001A1D00);
  __chkstk_darwin(v13 - 8);
  Swift::Int v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003AEE0(&qword_1001A1D08, (void (*)(uint64_t))&type metadata accessor for MetricsFieldExclusionRequest);
  uint64_t v16 = Set.init(minimumCapacity:)();
  v25[6] = a3;
  uint64_t v26 = v16;
  uint64_t v17 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v18 = ~v17;
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = -v17;
  v25[0] = a1;
  v25[1] = a1 + 56;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  else {
    uint64_t v21 = -1;
  }
  v25[2] = v18;
  v25[3] = 0;
  v25[4] = v21 & v19;
  v25[5] = a2;
  sub_1001131B4((uint64_t)v15);
  uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v22(v15, 1, v6) != 1)
  {
    unint64_t v23 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    do
    {
      v23(v10, v15, v6);
      sub_100098524((uint64_t)v12, v10);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
      sub_1001131B4((uint64_t)v15);
    }
    while (v22(v15, 1, v6) != 1);
    uint64_t v16 = v26;
  }
  sub_100034EF8();
  swift_release();
  return v16;
}

uint64_t sub_10003A148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0xC000000000000001) != 0) {
    __CocoaSet.count.getter();
  }
  uint64_t v6 = Set.init(minimumCapacity:)();
  uint64_t v18 = v6;
  sub_100042664(a1, a2, a3, (uint64_t)v19);
  long long v14 = v19[0];
  long long v15 = v19[1];
  long long v16 = v19[2];
  uint64_t v17 = v20;
  sub_1001133E4();
  if ((v8 & 1) == 0)
  {
    uint64_t v9 = v7;
    do
    {
      sub_100098B6C(&v13, v9);
      sub_1001133E4();
      uint64_t v9 = v10;
    }
    while ((v11 & 1) == 0);
    uint64_t v6 = v18;
  }
  sub_100034EF8();
  swift_release();
  return v6;
}

uint64_t sub_10003A240()
{
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AppDistributionDeviceAppStateDataSource()
{
  return self;
}

uint64_t sub_10003A2B8()
{
  return swift_retain();
}

uint64_t sub_10003A2C4()
{
  *(void *)(v1 + 16) = *v0;
  return _swift_task_switch(sub_10003A2E8, 0, 0);
}

uint64_t sub_10003A2E8()
{
  sub_100036050(0, 1);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10003A354(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 32) = a2;
  uint64_t v4 = *v2;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v4;
  return _swift_task_switch(sub_10003A37C, 0, 0);
}

uint64_t sub_10003A37C()
{
  sub_100036050(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 32));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10003A3E4(char a1)
{
  *(unsigned char *)(v2 + 24) = a1;
  *(void *)(v2 + 16) = *v1;
  return _swift_task_switch(sub_10003A40C, 0, 0);
}

uint64_t sub_10003A40C()
{
  sub_100036050(0, *(unsigned __int8 *)(v0 + 24));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_10003A478()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(*(void *)v0 + 24) + 16);
  os_unfair_lock_lock(v1);
  sub_10003A838();
  os_unfair_lock_unlock(v1);
}

uint64_t sub_10003A500(uint64_t result)
{
  if (result)
  {
    unint64_t v7 = (unint64_t)&_swiftEmptyArrayStorage;
    uint64_t v1 = *(void *)(result + 16);
    if (v1)
    {
      uint64_t v2 = result + 32;
      swift_bridgeObjectRetain_n();
      do
      {
        sub_100042EB8(v2, (uint64_t)v6);
        sub_100042EB8((uint64_t)v6, (uint64_t)v5);
        sub_10002EE34(0, &qword_1001A1D60);
        if (swift_dynamicCast())
        {
          id v3 = [v4 correspondingApplicationRecord];

          sub_10002ED08((uint64_t)v6);
          if (v3)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
        }
        else
        {
          sub_10002ED08((uint64_t)v6);
        }
        v2 += 32;
        --v1;
      }
      while (v1);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    if (swift_unknownObjectWeakLoadStrong())
    {
      sub_100039028();
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10003A7B0()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for LSApplicationWorkspaceObserver()
{
  return self;
}

uint64_t sub_10003A81C@<X0>(uint64_t a1@<X8>)
{
  return sub_100036A50(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_10003A838()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t sub_10003A860(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_10003AB74(a1, a2, v4);
}

unint64_t sub_10003A8D8(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_10003AC58(a1, v4);
}

unint64_t sub_10003A91C(uint64_t a1)
{
  type metadata accessor for AdamID();
  sub_10003AEE0(&qword_1001A1C38, (void (*)(uint64_t))&type metadata accessor for AdamID);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return sub_10003AD20(a1, v2);
}

unint64_t sub_10003A9B4(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10003B09C(a1, v4, (unint64_t *)&qword_1001A2110);
}

unint64_t sub_10003AA04(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return sub_10003AF60(a1, v2);
}

unint64_t sub_10003AA4C(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return sub_10003B1B0(a1, v2);
}

unint64_t sub_10003AADC(unsigned __int16 a1)
{
  uint64_t v2 = static Hasher._hash(seed:bytes:count:)();

  return sub_10003AFFC(a1, v2);
}

unint64_t sub_10003AB24(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10003B09C(a1, v4, &qword_1001A1D40);
}

unint64_t sub_10003AB74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_10003AC58(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_100042F14(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_100042F70((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_10003AD20(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = type metadata accessor for AdamID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    BOOL v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      sub_10003AEE0((unint64_t *)&unk_1001A1C40, (void (*)(uint64_t))&type metadata accessor for AdamID);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

uint64_t sub_10003AEE0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003AF28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10003AF38()
{
  return swift_release();
}

void sub_10003AF40(void *a1@<X8>)
{
  sub_1000370A4(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40), a1);
}

unint64_t sub_10003AF60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_10003AFFC(unsigned __int16 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int16 *)(v7 + 2 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int16 *)(v7 + 2 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_10003B09C(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a2 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_10002EE34(0, a3);
    id v7 = *(id *)(*(void *)(v3 + 48) + 8 * i);
    char v8 = static NSObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v5;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v3 + 48) + 8 * i);
        char v11 = static NSObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_10003B1B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

double sub_10003B328@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_10003A860(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    uint64_t *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10003F960();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_100042EA8((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    sub_10003DF80(v8, v11);
    uint64_t *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_10003B42C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10003A860(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10003FB48();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 16 * v6);
  sub_10003E158(v6, v9);
  *uint64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10003B514@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10003A91C(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10003FD04();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for AdamID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for State();
    uint64_t v20 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a2, v12 + *(void *)(v20 + 72) * v6, v13);
    sub_10003E330(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for State();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_10003B6E4(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_10003A9B4(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v10 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000402A4();
    uint64_t v7 = v10;
  }

  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 24 * v4);
  sub_10003E678(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_10003B7CC(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_10003A9B4(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v10 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10004061C();
    uint64_t v7 = v10;
  }

  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 24 * v4);
  sub_10003E9E4(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_10003B8B4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10002EB60(&qword_1001A1CC0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      uint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      int64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_100042EA8(v24, v35);
      }
      else
      {
        sub_100042EB8((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *uint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_100042EA8(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10003BBB4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10002EB60((uint64_t *)&unk_1001A1D30);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    int64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    Swift::String v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *unint64_t v19 = v34;
    v19[1] = v33;
    int64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    void *v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  int64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10003BEDC(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v53 = type metadata accessor for State();
  uint64_t v5 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v52 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AdamID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  sub_10002EB60(&qword_1001A1C78);
  int v50 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v44 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  char v42 = v2;
  int64_t v43 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v45 = v5 + 16;
  unint64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v48 = v5;
  uint64_t v49 = v8;
  uint64_t v18 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v51 = (uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32);
  uint64_t v19 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v43) {
      break;
    }
    int64_t v26 = v44;
    unint64_t v27 = v44[v25];
    ++v21;
    if (!v27)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v27 = v44[v21];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v42;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v44[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v21 >= v43) {
              goto LABEL_34;
            }
            unint64_t v27 = v44[v21];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v21 = v28;
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_22:
    uint64_t v29 = *(void *)(v49 + 72);
    unint64_t v30 = *(void *)(v11 + 48) + v29 * v24;
    if (v50)
    {
      (*v18)(v10, v30, v7);
      uint64_t v31 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v48 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 32))(v52, v31 + v32 * v24, v53);
    }
    else
    {
      (*v46)(v10, v30, v7);
      uint64_t v33 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v48 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 16))(v52, v33 + v32 * v24, v53);
    }
    sub_10003AEE0(&qword_1001A1C38, (void (*)(uint64_t))&type metadata accessor for AdamID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v34 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v39 = v36 == v38;
        if (v36 == v38) {
          unint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v19 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*v18)((char *)(*(void *)(v13 + 48) + v29 * v22), (unint64_t)v10, v7);
    uint64_t result = (*v51)(*(void *)(v13 + 56) + v32 * v22, v52, v53);
    ++*(void *)(v13 + 16);
  }
  swift_release();
  uint64_t v3 = v42;
  int64_t v26 = v44;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v41 = 1 << *(unsigned char *)(v11 + 32);
  if (v41 >= 64) {
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v26 = -1 << v41;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v13;
  return result;
}

uint64_t sub_10003C3D8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10002EB60(&qword_1001A1D50);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  BOOL v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v40) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v41 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v40) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v41 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v40)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v41 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v40) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v41 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_21:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_22:
    int64_t v25 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v27 = *v25;
    uint64_t v26 = v25[1];
    uint64_t v28 = *(void *)(v5 + 56) + 40 * v20;
    if (v42)
    {
      long long v29 = *(_OWORD *)v28;
      long long v30 = *(_OWORD *)(v28 + 16);
      uint64_t v45 = *(void *)(v28 + 32);
      long long v43 = v29;
      long long v44 = v30;
    }
    else
    {
      sub_100042F14(v28, (uint64_t)&v43);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v31 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v11 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v32) & ~*(void *)(v11 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v11 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v14 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *uint64_t v15 = v27;
    v15[1] = v26;
    uint64_t v16 = *(void *)(v7 + 56) + 40 * v14;
    long long v17 = v43;
    long long v18 = v44;
    *(void *)(v16 + 32) = v45;
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v22, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10003C710(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10002EB60(&qword_1001A1CA0);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    unint64_t v35 = v2;
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v37 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v36 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v19 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v20 = v19 | (v13 << 6);
      }
      else
      {
        int64_t v21 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v21 >= v36) {
          goto LABEL_33;
        }
        unint64_t v22 = v37[v21];
        ++v13;
        if (!v22)
        {
          int64_t v13 = v21 + 1;
          if (v21 + 1 >= v36) {
            goto LABEL_33;
          }
          unint64_t v22 = v37[v13];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v36)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v35;
              if (v38)
              {
                uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v37[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v13 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v36) {
                  goto LABEL_33;
                }
                unint64_t v22 = v37[v13];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v23;
          }
        }
LABEL_30:
        unint64_t v10 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v13 << 6);
      }
      uint64_t v28 = *(void **)(*(void *)(v5 + 48) + 8 * v20);
      uint64_t v29 = *(void *)(v5 + 56) + 24 * v20;
      uint64_t v30 = *(void *)v29;
      uint64_t v31 = *(void *)(v29 + 8);
      char v32 = *(unsigned char *)(v29 + 16);
      if ((v38 & 1) == 0)
      {
        id v33 = v28;
        sub_100042814(v30, v31, v32);
      }
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v11 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(void *)(*(void *)(v7 + 48) + 8 * v17) = v28;
      uint64_t v18 = *(void *)(v7 + 56) + 24 * v17;
      *(void *)uint64_t v18 = v30;
      *(void *)(v18 + 8) = v31;
      *(unsigned char *)(v18 + 16) = v32;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10003CA08(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10002EB60(&qword_1001A1D58);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v10;
    uint64_t v32 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33) {
          goto LABEL_33;
        }
        unint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v22 = v9[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if (a2)
              {
                if (v32 >= 64) {
                  bzero((void *)(v5 + 64), 8 * v33);
                }
                else {
                  uint64_t *v9 = v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                unint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = 8 * v20;
      uint64_t v29 = *(void *)(*(void *)(v5 + 48) + v28);
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v7 + 48) + v18) = v29;
      *(void *)(*(void *)(v7 + 56) + v18) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10003CCC0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10002EB60(&qword_1001A1CB8);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = *(void **)(*(void *)(v5 + 48) + 8 * v21);
    uint64_t v31 = *(void *)(v5 + 56) + 24 * v21;
    long long v38 = *(_OWORD *)v31;
    uint64_t v32 = *(void *)(v31 + 16);
    if ((v37 & 1) == 0)
    {
      id v33 = v30;
      swift_bridgeObjectRetain();
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(void *)(*(void *)(v7 + 48) + 8 * v18) = v30;
    uint64_t v19 = *(void *)(v7 + 56) + 24 * v18;
    *(_OWORD *)uint64_t v19 = v38;
    *(void *)(v19 + 16) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  int64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10003CFBC(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v41 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_10002EB60(&qword_1001A1CE0);
  int v40 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = result;
  if (*(void *)(v8 + 16))
  {
    uint64_t v36 = v3;
    int64_t v11 = 0;
    uint64_t v12 = *(void *)(v8 + 64);
    long long v38 = (void *)(v8 + 64);
    uint64_t v13 = 1 << *(unsigned char *)(v8 + 32);
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v12;
    int64_t v37 = (unint64_t)(v13 + 63) >> 6;
    BOOL v39 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    unint64_t v16 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    uint64_t v17 = result + 64;
    while (1)
    {
      if (v15)
      {
        unint64_t v19 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v20 = v19 | (v11 << 6);
      }
      else
      {
        int64_t v21 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v38;
        if (v21 >= v37) {
          goto LABEL_34;
        }
        unint64_t v22 = v38[v21];
        ++v11;
        if (!v22)
        {
          int64_t v11 = v21 + 1;
          if (v21 + 1 >= v37) {
            goto LABEL_34;
          }
          unint64_t v22 = v38[v11];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v37)
            {
LABEL_34:
              if ((v40 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v36;
                goto LABEL_41;
              }
              uint64_t v35 = 1 << *(unsigned char *)(v8 + 32);
              if (v35 >= 64) {
                bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *long long v38 = -1 << v35;
              }
              uint64_t v3 = v36;
              *(void *)(v8 + 16) = 0;
              break;
            }
            unint64_t v22 = v38[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v11 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_43;
                }
                if (v11 >= v37) {
                  goto LABEL_34;
                }
                unint64_t v22 = v38[v11];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v11 = v23;
          }
        }
LABEL_21:
        unint64_t v15 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v11 << 6);
      }
      __int16 v24 = *(_WORD *)(*(void *)(v8 + 48) + 2 * v20);
      uint64_t v25 = v5;
      uint64_t v26 = *(void *)(v5 + 72);
      unint64_t v27 = *(void *)(v8 + 56) + v26 * v20;
      if (v40) {
        (*v16)(v7, v27, v41);
      }
      else {
        (*v39)(v7, v27, v41);
      }
      uint64_t result = static Hasher._hash(seed:bytes:count:)();
      uint64_t v28 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v29 = result & ~v28;
      unint64_t v30 = v29 >> 6;
      if (((-1 << v29) & ~*(void *)(v17 + 8 * (v29 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v29) & ~*(void *)(v17 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v33 = v30 == v32;
          if (v30 == v32) {
            unint64_t v30 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v17 + 8 * v30);
        }
        while (v34 == -1);
        unint64_t v18 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_WORD *)(*(void *)(v10 + 48) + 2 * v18) = v24;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v16)(*(void *)(v10 + 56) + v26 * v18, v7, v41);
      ++*(void *)(v10 + 16);
      uint64_t v5 = v25;
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_10003D368(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10002EB60(&qword_1001A1D48);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10003D680(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10002EB60(&qword_1001A1CC8);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    char v32 = *(unsigned char *)(*(void *)(v5 + 56) + v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(unsigned char *)(*(void *)(v7 + 56) + v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10003D98C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10002EB60((uint64_t *)&unk_1001A4E30);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v2;
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v36;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    uint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    char v32 = *(void **)(*(void *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      id v33 = v31;
      id v34 = v32;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  unint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10003DC60(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10002EB60(&qword_1001A1D28);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    id v34 = v2;
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v21 = v20 | (v13 << 6);
      }
      else
      {
        int64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v35) {
          goto LABEL_33;
        }
        unint64_t v23 = v36[v22];
        ++v13;
        if (!v23)
        {
          int64_t v13 = v22 + 1;
          if (v22 + 1 >= v35) {
            goto LABEL_33;
          }
          unint64_t v23 = v36[v13];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v34;
              if (v37)
              {
                uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v36 = -1 << v33;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v36[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v35) {
                  goto LABEL_33;
                }
                unint64_t v23 = v36[v13];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v24;
          }
        }
LABEL_30:
        unint64_t v10 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      uint64_t v29 = 8 * v21;
      uint64_t v30 = *(void **)(*(void *)(v5 + 48) + v29);
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + v29);
      if ((v37 & 1) == 0)
      {
        id v32 = v30;
        swift_bridgeObjectRetain();
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      String.hash(into:)();
      Swift::Int v14 = Hasher._finalize()();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v16 = v14 & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v17 == v26;
          if (v17 == v26) {
            unint64_t v17 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v11 + 8 * v17);
        }
        while (v28 == -1);
        unint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(void *)(v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = 8 * v18;
      *(void *)(*(void *)(v7 + 48) + v19) = v30;
      *(void *)(*(void *)(v7 + 56) + v19) = v31;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

unint64_t sub_10003DF80(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          int64_t v13 = (_OWORD *)(v12 + 16 * v3);
          Swift::Int v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            _OWORD *v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          unint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          unint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *unint64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *unint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10003E158(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          int64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            _OWORD *v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          unint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *unint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10003E330(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AdamID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + 64;
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      unint64_t v39 = (result + 1) & v12;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v40 = v13;
      char v37 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      long long v38 = v14;
      uint64_t v36 = v12;
      do
      {
        uint64_t v16 = v9;
        uint64_t v17 = v15;
        int64_t v18 = v15 * v11;
        v38(v8, *(void *)(a2 + 48) + v15 * v11, v4);
        sub_10003AEE0(&qword_1001A1C38, (void (*)(uint64_t))&type metadata accessor for AdamID);
        uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v37)(v8, v4);
        unint64_t v20 = v19 & v12;
        if (a1 >= (uint64_t)v39)
        {
          if (v20 >= v39 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            if (v17 * a1 < v18
              || *(void *)(a2 + 48) + v17 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v18 + v17))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v17 * a1 != v18)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v23 = *(void *)(a2 + 56);
            uint64_t v24 = *(void *)(*(void *)(type metadata accessor for State() - 8) + 72);
            int64_t v25 = v24 * a1;
            unint64_t result = v23 + v24 * a1;
            int64_t v26 = v24 * v11;
            unint64_t v27 = v23 + v24 * v11 + v24;
            BOOL v28 = v25 < v26 || result >= v27;
            uint64_t v9 = v16;
            if (v28)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              a1 = v11;
              uint64_t v12 = v36;
            }
            else
            {
              a1 = v11;
              uint64_t v12 = v36;
              if (v25 != v26)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                a1 = v11;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v39 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        uint64_t v9 = v16;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v12;
        uint64_t v15 = v17;
      }
      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    uint64_t v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1 << a1) - 1;
  }
  *uint64_t v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_10003E678(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v11 = *(void *)(a2 + 40);
        id v12 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v13 = NSObject._rawHashValue(seed:)(v11);

        Swift::Int v14 = v13 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v14 >= v9 && v3 >= v14)
          {
LABEL_16:
            uint64_t v17 = *(void *)(a2 + 48);
            int64_t v18 = (void *)(v17 + 8 * v3);
            uint64_t v19 = (void *)(v17 + 8 * v6);
            if (v3 != v6 || v18 >= v19 + 1) {
              *int64_t v18 = *v19;
            }
            uint64_t v20 = *(void *)(a2 + 56);
            unint64_t v21 = v20 + 24 * v3;
            uint64_t v22 = (long long *)(v20 + 24 * v6);
            if (24 * v3 < (uint64_t)(24 * v6) || v21 >= (unint64_t)v22 + 24 || (v23 = v3 == v6, int64_t v3 = v6, !v23))
            {
              long long v10 = *v22;
              *(void *)(v21 + 16) = *((void *)v22 + 2);
              *(_OWORD *)unint64_t v21 = v10;
              int64_t v3 = v6;
            }
          }
        }
        else if (v14 >= v9 || v3 >= v14)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v25 = *v24;
    uint64_t v26 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v24 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v26 = *v24;
    uint64_t v25 = (-1 << a1) - 1;
  }
  *uint64_t v24 = v26 & v25;
  uint64_t v27 = *(void *)(a2 + 16);
  BOOL v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t sub_10003E84C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        long long v10 = (void *)(v9 + 8 * v6);
        unint64_t result = static Hasher._hash(seed:_:)();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            Swift::Int v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              *Swift::Int v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            uint64_t v16 = (void *)(v15 + 8 * v3);
            uint64_t v17 = (void *)(v15 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              *uint64_t v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    int64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *int64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_10003E9E4(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v11 = *(void *)(a2 + 40);
        id v12 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v13 = NSObject._rawHashValue(seed:)(v11);

        Swift::Int v14 = v13 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v14 >= v9 && v3 >= v14)
          {
LABEL_16:
            uint64_t v17 = *(void *)(a2 + 48);
            int64_t v18 = (void *)(v17 + 8 * v3);
            uint64_t v19 = (void *)(v17 + 8 * v6);
            if (v3 != v6 || v18 >= v19 + 1) {
              *int64_t v18 = *v19;
            }
            uint64_t v20 = *(void *)(a2 + 56);
            unint64_t v21 = v20 + 24 * v3;
            BOOL v22 = (long long *)(v20 + 24 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v21 >= (unint64_t)v22 + 24))
            {
              long long v10 = *v22;
              *(void *)(v21 + 16) = *((void *)v22 + 2);
              *(_OWORD *)unint64_t v21 = v10;
              int64_t v3 = v6;
            }
          }
        }
        else if (v14 >= v9 || v3 >= v14)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v24 = *v23;
    uint64_t v25 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v23 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v25 = *v23;
    uint64_t v24 = (-1 << a1) - 1;
  }
  uint64_t *v23 = v25 & v24;
  uint64_t v26 = *(void *)(a2 + 16);
  BOOL v27 = __OFSUB__(v26, 1);
  uint64_t v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
}

_OWORD *sub_10003EBAC(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  long long v10 = (void *)*v4;
  unint64_t v12 = sub_10003A860(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10003F960();
      goto LABEL_7;
    }
    sub_10003B8B4(v15, a4 & 1);
    unint64_t v21 = sub_10003A860(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      int64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    unint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  int64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    sub_10002ED08((uint64_t)v19);
    return sub_100042EA8(a1, v19);
  }
LABEL_13:
  sub_10003F800(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

uint64_t sub_10003ED00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_10003A860(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_10003FB48();
LABEL_7:
    uint64_t v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      unint64_t v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease();
      *unint64_t v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_10003BBB4(v17, a5 & 1);
  unint64_t v23 = sub_10003A860(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  uint64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
  uint64_t *v25 = a3;
  v25[1] = a4;
  uint64_t v26 = (void *)(v20[7] + 16 * v14);
  void *v26 = a1;
  v26[1] = a2;
  uint64_t v27 = v20[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20[2] = v29;

  return swift_bridgeObjectRetain();
}

uint64_t sub_10003EE88(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for AdamID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10003A91C(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_10003FD04();
      goto LABEL_7;
    }
    sub_10003BEDC(v17, a3 & 1);
    unint64_t v28 = sub_10003A91C(a2);
    if ((v18 & 1) == (v29 & 1))
    {
      unint64_t v14 = v28;
      uint64_t v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_10003F86C(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7];
  uint64_t v22 = type metadata accessor for State();
  uint64_t v23 = *(void *)(v22 - 8);
  char v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 40);
  uint64_t v25 = v22;
  uint64_t v26 = v21 + *(void *)(v23 + 72) * v14;

  return v24(v26, a1, v25);
}

uint64_t sub_10003F08C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_10003A860(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_18;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000400AC();
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7] + 40 * v12;
      return sub_100043118(a1, v19);
    }
    goto LABEL_13;
  }
  sub_10003C3D8(v15, a4 & 1);
  unint64_t v21 = sub_10003A860(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_19:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  char v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_13:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  uint64_t *v23 = a2;
  v23[1] = a3;
  uint64_t v24 = v18[7] + 40 * v12;
  long long v25 = *(_OWORD *)a1;
  long long v26 = *(_OWORD *)(a1 + 16);
  *(void *)(v24 + 32) = *(void *)(a1 + 32);
  *(_OWORD *)uint64_t v24 = v25;
  *(_OWORD *)(v24 + 16) = v26;
  uint64_t v27 = v18[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v18[2] = v29;

  return swift_bridgeObjectRetain();
}

uint64_t sub_10003F21C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_10003AA04(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100040478();
LABEL_7:
    char v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    uint64_t v19 = 8 * v10;
    *(void *)(v16[6] + v19) = a2;
    *(void *)(v16[7] + v19) = a1;
    uint64_t v20 = v16[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return result;
    }
    goto LABEL_14;
  }
  sub_10003CA08(result, a3 & 1);
  uint64_t result = sub_10003AA04(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    unint64_t v10 = result;
    char v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id sub_10003F358(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, char a5)
{
  unint64_t v6 = v5;
  uint64_t v11 = *v5;
  unint64_t v13 = sub_10003A9B4((uint64_t)a4);
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v17 = v12;
  uint64_t v18 = *(void *)(v11 + 24);
  if (v18 >= v16 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v18 >= v16 && (a5 & 1) == 0)
  {
    sub_10004061C();
LABEL_7:
    uint64_t v19 = (void *)*v6;
    if (v17)
    {
LABEL_8:
      uint64_t v20 = (void *)(v19[7] + 24 * v13);
      id result = (id)swift_bridgeObjectRelease();
      void *v20 = a1;
      v20[1] = a2;
      v20[2] = a3;
      return result;
    }
    goto LABEL_11;
  }
  sub_10003CCC0(v16, a5 & 1);
  unint64_t v22 = sub_10003A9B4((uint64_t)a4);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_17:
    sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v13 = v22;
  uint64_t v19 = (void *)*v6;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  v19[(v13 >> 6) + 8] |= 1 << v13;
  *(void *)(v19[6] + 8 * v13) = a4;
  uint64_t v24 = (void *)(v19[7] + 24 * v13);
  *uint64_t v24 = a1;
  v24[1] = a2;
  v24[2] = a3;
  uint64_t v25 = v19[2];
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (v26)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v19[2] = v27;

  return a4;
}

id sub_10003F4F0(uint64_t a1, uint64_t a2, char a3, void *a4, char a5)
{
  unint64_t v6 = v5;
  uint64_t v11 = *v5;
  unint64_t v13 = sub_10003A9B4((uint64_t)a4);
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v17 = v12;
  uint64_t v18 = *(void *)(v11 + 24);
  if (v18 >= v16 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v18 >= v16 && (a5 & 1) == 0)
  {
    sub_1000402A4();
LABEL_7:
    uint64_t v19 = (void *)*v6;
    if (v17)
    {
LABEL_8:
      uint64_t v20 = v19[7] + 24 * v13;
      id result = (id)sub_10004282C(*(void *)v20, *(void *)(v20 + 8), *(unsigned char *)(v20 + 16));
      *(void *)uint64_t v20 = a1;
      *(void *)(v20 + 8) = a2;
      *(unsigned char *)(v20 + 16) = a3;
      return result;
    }
    goto LABEL_11;
  }
  sub_10003C710(v16, a5 & 1);
  unint64_t v22 = sub_10003A9B4((uint64_t)a4);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_17:
    sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v13 = v22;
  uint64_t v19 = (void *)*v6;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  v19[(v13 >> 6) + 8] |= 1 << v13;
  *(void *)(v19[6] + 8 * v13) = a4;
  uint64_t v24 = v19[7] + 24 * v13;
  *(void *)uint64_t v24 = a1;
  *(void *)(v24 + 8) = a2;
  *(unsigned char *)(v24 + 16) = a3;
  uint64_t v25 = v19[2];
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (v26)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v19[2] = v27;

  return a4;
}

void sub_10003F68C(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_10003AB24((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_100040B44();
LABEL_7:
    BOOL v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_10003D98C(v12, a3 & 1);
  unint64_t v17 = sub_10003AB24((uint64_t)a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_17:
    sub_10002EE34(0, &qword_1001A1D40);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v9 = v17;
  BOOL v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v19 = 8 * v9;
  *(void *)(v15[6] + v19) = a2;
  *(void *)(v15[7] + v19) = a1;
  uint64_t v20 = v15[2];
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v15[2] = v22;

  id v23 = a2;
}

_OWORD *sub_10003F800(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  unint64_t v6 = (void *)(a5[6] + 16 * a1);
  void *v6 = a2;
  v6[1] = a3;
  id result = sub_100042EA8(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t sub_10003F86C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for AdamID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for State();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a3, v11);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

void *sub_10003F960()
{
  uint64_t v1 = v0;
  sub_10002EB60(&qword_1001A1CC0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_100042EB8(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    BOOL v21 = (void *)(*(void *)(v4 + 48) + v16);
    *BOOL v21 = v19;
    v21[1] = v18;
    sub_100042EA8(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10003FB48()
{
  uint64_t v1 = v0;
  sub_10002EB60((uint64_t *)&unk_1001A1D30);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    unint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    void *v23 = v19;
    v23[1] = v18;
    int64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *int64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10003FD04()
{
  uint64_t v42 = type metadata accessor for State();
  uint64_t v45 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v32 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for AdamID();
  uint64_t v44 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  unint64_t v39 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002EB60(&qword_1001A1C78);
  uint64_t v32 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v46 = v4;
  if (!v5)
  {
    uint64_t result = (void *)swift_release();
    uint64_t v31 = v46;
    uint64_t v30 = v32;
LABEL_25:
    *uint64_t v30 = v31;
    return result;
  }
  uint64_t v6 = v4;
  uint64_t result = (void *)(v4 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    uint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
    uint64_t v6 = v46;
  }
  int64_t v9 = 0;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v11 = -1;
  uint64_t v43 = v3;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v3 + 64);
  uint64_t v33 = v3 + 64;
  int64_t v34 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v13 = v45;
  uint64_t v14 = v44;
  uint64_t v37 = v45 + 16;
  uint64_t v38 = v44 + 16;
  uint64_t v35 = v45 + 32;
  uint64_t v36 = v44 + 32;
  unint64_t v15 = v39;
  uint64_t v16 = v40;
  uint64_t v17 = v42;
  uint64_t v18 = v46;
  while (1)
  {
    if (v12)
    {
      unint64_t v19 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      int64_t v47 = v9;
      unint64_t v20 = v19 | (v9 << 6);
      uint64_t v21 = v43;
      goto LABEL_9;
    }
    int64_t v26 = v9 + 1;
    uint64_t v21 = v43;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v26 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v26);
    int64_t v28 = v9 + 1;
    if (!v27)
    {
      int64_t v28 = v26 + 1;
      if (v26 + 1 >= v34) {
        goto LABEL_23;
      }
      unint64_t v27 = *(void *)(v33 + 8 * v28);
      if (!v27) {
        break;
      }
    }
LABEL_22:
    unint64_t v12 = (v27 - 1) & v27;
    int64_t v47 = v28;
    unint64_t v20 = __clz(__rbit64(v27)) + (v28 << 6);
LABEL_9:
    unint64_t v22 = *(void *)(v14 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v15, *(void *)(v21 + 48) + v22, v16);
    unint64_t v23 = *(void *)(v13 + 72) * v20;
    unint64_t v24 = *(void *)(v21 + 56) + v23;
    int64_t v25 = v41;
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v41, v24, v17);
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(*(void *)(v18 + 48) + v22, v15, v16);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v13 + 32))(*(void *)(v18 + 56) + v23, v25, v17);
    int64_t v9 = v47;
  }
  int64_t v29 = v26 + 2;
  if (v29 >= v34)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v30 = v32;
    uint64_t v31 = v46;
    goto LABEL_25;
  }
  unint64_t v27 = *(void *)(v33 + 8 * v29);
  if (v27)
  {
    int64_t v28 = v29;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v28 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v28 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v28);
    ++v29;
    if (v27) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1000400AC()
{
  uint64_t v1 = v0;
  sub_10002EB60(&qword_1001A1D50);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  int64_t v28 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 40 * v15;
    sub_100042F14(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v29);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    uint64_t v22 = *(void *)(v4 + 56) + v20;
    uint64_t v23 = v30;
    long long v24 = v29[1];
    *(_OWORD *)uint64_t v22 = v29[0];
    *(_OWORD *)(v22 + 16) = v24;
    *(void *)(v22 + 32) = v23;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v28;
    goto LABEL_28;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1000402A4()
{
  uint64_t v1 = v0;
  sub_10002EB60(&qword_1001A1CA0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 24 * v15;
    uint64_t v19 = *(void *)(v2 + 56) + v18;
    uint64_t v20 = *(void *)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    char v22 = *(unsigned char *)(v19 + 16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v23 = *(void *)(v4 + 56) + v18;
    *(void *)uint64_t v23 = v20;
    *(void *)(v23 + 8) = v21;
    *(unsigned char *)(v23 + 16) = v22;
    id v24 = v17;
    uint64_t result = (void *)sub_100042814(v20, v21, v22);
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100040478()
{
  uint64_t v1 = v0;
  sub_10002EB60(&qword_1001A1D58);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    uint64_t result = (void *)swift_retain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10004061C()
{
  uint64_t v1 = v0;
  sub_10002EB60(&qword_1001A1CB8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 24 * v15;
    uint64_t v19 = *(void *)(v2 + 56) + v18;
    uint64_t v20 = *(void *)(v19 + 16);
    long long v21 = *(_OWORD *)v19;
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v22 = *(void *)(v4 + 56) + v18;
    *(_OWORD *)uint64_t v22 = v21;
    *(void *)(v22 + 16) = v20;
    id v23 = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000407E0()
{
  uint64_t v1 = v0;
  sub_10002EB60(&qword_1001A1D48);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    long long v21 = (void *)(*(void *)(v4 + 48) + v16);
    *long long v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100040998()
{
  uint64_t v1 = v0;
  sub_10002EB60(&qword_1001A1CC8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    LOBYTE(v16) = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + 16 * v15);
    *uint64_t v19 = v18;
    v19[1] = v17;
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = (_BYTE)v16;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100040B44()
{
  uint64_t v1 = v0;
  sub_10002EB60((uint64_t *)&unk_1001A4E30);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    id result = v18;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100040CEC()
{
  uint64_t v1 = v0;
  sub_10002EB60(&qword_1001A1D28);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100040E98(uint64_t a1, uint64_t a2)
{
  return sub_100040F04(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_1000418AC);
}

uint64_t sub_100040F04(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = isStackAllocationSafe;
  char v6 = *(unsigned char *)(a2 + 32);
  unint64_t v7 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    uint64_t v9 = a3((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, a2, v5);
    swift_release();
  }
  else
  {
    uint64_t v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    uint64_t v9 = a3((char *)v10, v7, a2, v5);
    swift_release();
    swift_slowDealloc();
  }
  return v9;
}

uint64_t sub_1000410A0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v66 = a2;
  uint64_t v69 = a1;
  uint64_t v6 = type metadata accessor for AdamID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v66 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  unint64_t v14 = (char *)&v66 - v13;
  uint64_t result = __chkstk_darwin(v12);
  uint64_t v18 = (char *)&v66 - v16;
  unint64_t v19 = *(void *)(a3 + 16);
  unint64_t v20 = *(void *)(a4 + 16);
  uint64_t v81 = v7 + 16;
  uint64_t v78 = a3;
  uint64_t v79 = a4;
  uint64_t v76 = v7;
  if (v20 >= v19)
  {
    uint64_t v73 = 0;
    int64_t v43 = 0;
    uint64_t v44 = *(void *)(a3 + 56);
    int64_t v68 = a3 + 56;
    uint64_t v45 = 1 << *(unsigned char *)(a3 + 32);
    if (v45 < 64) {
      uint64_t v46 = ~(-1 << v45);
    }
    else {
      uint64_t v46 = -1;
    }
    unint64_t v47 = v46 & v44;
    int64_t v70 = (unint64_t)(v45 + 63) >> 6;
    uint64_t v77 = a4 + 56;
    uint64_t v48 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v80 = v17;
    if ((v46 & v44) != 0) {
      goto LABEL_39;
    }
LABEL_40:
    int64_t v50 = v43 + 1;
    if (!__OFADD__(v43, 1))
    {
      if (v50 < v70)
      {
        unint64_t v51 = *(void *)(v68 + 8 * v50);
        int64_t v52 = v43 + 1;
        if (!v51)
        {
          int64_t v52 = v43 + 2;
          if (v43 + 2 >= v70) {
            goto LABEL_62;
          }
          unint64_t v51 = *(void *)(v68 + 8 * v52);
          if (!v51)
          {
            int64_t v52 = v43 + 3;
            if (v43 + 3 >= v70) {
              goto LABEL_62;
            }
            unint64_t v51 = *(void *)(v68 + 8 * v52);
            if (!v51)
            {
              uint64_t v53 = v43 + 4;
              if (v43 + 4 >= v70) {
                goto LABEL_62;
              }
              unint64_t v51 = *(void *)(v68 + 8 * v53);
              if (!v51)
              {
                while (1)
                {
                  int64_t v52 = v53 + 1;
                  if (__OFADD__(v53, 1)) {
                    goto LABEL_68;
                  }
                  if (v52 >= v70) {
                    goto LABEL_62;
                  }
                  unint64_t v51 = *(void *)(v68 + 8 * v52);
                  ++v53;
                  if (v51) {
                    goto LABEL_53;
                  }
                }
              }
              int64_t v52 = v43 + 4;
            }
          }
        }
LABEL_53:
        uint64_t v74 = (v51 - 1) & v51;
        int64_t v75 = v52;
        for (unint64_t i = __clz(__rbit64(v51)) + (v52 << 6); ; unint64_t i = __clz(__rbit64(v47)) | (v43 << 6))
        {
          uint64_t v54 = *(void *)(a3 + 48);
          uint64_t v55 = *(void *)(v7 + 72);
          unint64_t v72 = i;
          id v56 = *(void (**)(void (**)(char *, uint64_t), unint64_t, uint64_t))(v7 + 16);
          v56(v80, v54 + v55 * i, v6);
          sub_10003AEE0(&qword_1001A1C38, (void (*)(uint64_t))&type metadata accessor for AdamID);
          uint64_t v57 = dispatch thunk of Hashable._rawHashValue(seed:)();
          uint64_t v58 = -1 << *(unsigned char *)(a4 + 32);
          unint64_t v59 = v57 & ~v58;
          if ((*(void *)(v77 + ((v59 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v59))
          {
            uint64_t v71 = (char *)((unint64_t)v48 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
            uint64_t v60 = ~v58;
            while (1)
            {
              v56((void (**)(char *, uint64_t))v11, *(void *)(v79 + 48) + v59 * v55, v6);
              sub_10003AEE0((unint64_t *)&unk_1001A1C40, (void (*)(uint64_t))&type metadata accessor for AdamID);
              char v61 = dispatch thunk of static Equatable.== infix(_:_:)();
              uint64_t v62 = *v48;
              (*v48)(v11, v6);
              if (v61) {
                break;
              }
              unint64_t v59 = (v59 + 1) & v60;
              if (((*(void *)(v77 + ((v59 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v59) & 1) == 0)
              {
                a3 = v78;
                a4 = v79;
                int64_t v43 = v75;
                uint64_t v7 = v76;
                Swift::String v63 = v80;
                unint64_t v47 = v74;
                goto LABEL_60;
              }
            }
            uint64_t result = ((uint64_t (*)(void, uint64_t))v62)(v80, v6);
            *(unint64_t *)((char *)v69 + ((v72 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v72;
            unint64_t v47 = v74;
            BOOL v28 = __OFADD__(v73++, 1);
            a3 = v78;
            a4 = v79;
            int64_t v43 = v75;
            uint64_t v7 = v76;
            if (v28) {
              goto LABEL_66;
            }
            if (!v74) {
              goto LABEL_40;
            }
          }
          else
          {
            uint64_t v62 = *v48;
            a3 = v78;
            int64_t v43 = v75;
            uint64_t v7 = v76;
            Swift::String v63 = v80;
            unint64_t v47 = v74;
LABEL_60:
            uint64_t result = ((uint64_t (*)(void, uint64_t))v62)(v63, v6);
            if (!v47) {
              goto LABEL_40;
            }
          }
LABEL_39:
          uint64_t v74 = (v47 - 1) & v47;
          int64_t v75 = v43;
        }
      }
      goto LABEL_62;
    }
  }
  else
  {
    int64_t v21 = 0;
    uint64_t v22 = *(void *)(a4 + 56);
    uint64_t v67 = a4 + 56;
    uint64_t v23 = 1 << *(unsigned char *)(a4 + 32);
    if (v23 < 64) {
      uint64_t v24 = ~(-1 << v23);
    }
    else {
      uint64_t v24 = -1;
    }
    unint64_t v25 = v24 & v22;
    int64_t v68 = (unint64_t)(v23 + 63) >> 6;
    unint64_t v72 = v7 + 32;
    uint64_t v73 = 0;
    uint64_t v77 = a3 + 56;
    uint64_t v80 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v71 = (char *)&v66 - v16;
    if ((v24 & v22) != 0) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v30 = v21 + 1;
    if (!__OFADD__(v21, 1))
    {
      if (v30 < v68)
      {
        unint64_t v31 = *(void *)(v67 + 8 * v30);
        int64_t v32 = v21 + 1;
        if (v31) {
          goto LABEL_23;
        }
        int64_t v32 = v21 + 2;
        if (v21 + 2 >= v68) {
          goto LABEL_62;
        }
        unint64_t v31 = *(void *)(v67 + 8 * v32);
        if (v31) {
          goto LABEL_23;
        }
        int64_t v32 = v21 + 3;
        if (v21 + 3 >= v68) {
          goto LABEL_62;
        }
        unint64_t v31 = *(void *)(v67 + 8 * v32);
        if (v31)
        {
LABEL_23:
          uint64_t v74 = (v31 - 1) & v31;
          int64_t v75 = v32;
          for (unint64_t j = __clz(__rbit64(v31)) + (v32 << 6); ; unint64_t j = __clz(__rbit64(v25)) | (v21 << 6))
          {
            uint64_t v34 = *(void *)(v7 + 72);
            uint64_t v35 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
            v35(v18, *(void *)(a4 + 48) + v34 * j, v6);
            (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v14, v18, v6);
            sub_10003AEE0(&qword_1001A1C38, (void (*)(uint64_t))&type metadata accessor for AdamID);
            uint64_t v36 = v14;
            uint64_t v37 = dispatch thunk of Hashable._rawHashValue(seed:)();
            uint64_t v38 = -1 << *(unsigned char *)(a3 + 32);
            unint64_t v39 = v37 & ~v38;
            if ((*(void *)(v77 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39))
            {
              int64_t v70 = (unint64_t)v80 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
              uint64_t v40 = ~v38;
              while (1)
              {
                v35(v11, *(void *)(v78 + 48) + v39 * v34, v6);
                sub_10003AEE0((unint64_t *)&unk_1001A1C40, (void (*)(uint64_t))&type metadata accessor for AdamID);
                char v41 = dispatch thunk of static Equatable.== infix(_:_:)();
                uint64_t v42 = *v80;
                (*v80)(v11, v6);
                if (v41) {
                  break;
                }
                unint64_t v39 = (v39 + 1) & v40;
                if (((*(void *)(v77 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
                {
                  a3 = v78;
                  int64_t v21 = v75;
                  uint64_t v7 = v76;
                  unint64_t v14 = v36;
                  uint64_t v18 = v71;
                  goto LABEL_30;
                }
              }
              uint64_t result = ((uint64_t (*)(char *, uint64_t))v42)(v36, v6);
              uint64_t v26 = (v39 >> 3) & 0x1FFFFFFFFFFFFFF8;
              uint64_t v27 = 1 << v39;
              unint64_t v14 = v36;
              *(unint64_t *)((char *)v69 + v26) |= v27;
              unint64_t v25 = v74;
              BOOL v28 = __OFADD__(v73++, 1);
              a3 = v78;
              a4 = v79;
              int64_t v21 = v75;
              uint64_t v7 = v76;
              uint64_t v18 = v71;
              if (v28) {
                goto LABEL_65;
              }
              if (!v74) {
                goto LABEL_10;
              }
            }
            else
            {
              uint64_t v42 = *v80;
              int64_t v21 = v75;
              uint64_t v7 = v76;
              unint64_t v14 = v36;
              uint64_t v18 = v71;
LABEL_30:
              unint64_t v25 = v74;
              uint64_t result = ((uint64_t (*)(char *, uint64_t))v42)(v14, v6);
              a4 = v79;
              if (!v25) {
                goto LABEL_10;
              }
            }
LABEL_9:
            uint64_t v74 = (v25 - 1) & v25;
            int64_t v75 = v21;
          }
        }
        uint64_t v33 = v21 + 4;
        if (v21 + 4 < v68)
        {
          unint64_t v31 = *(void *)(v67 + 8 * v33);
          if (v31)
          {
            int64_t v32 = v21 + 4;
            goto LABEL_23;
          }
          while (1)
          {
            int64_t v32 = v33 + 1;
            if (__OFADD__(v33, 1)) {
              goto LABEL_67;
            }
            if (v32 >= v68) {
              break;
            }
            unint64_t v31 = *(void *)(v67 + 8 * v32);
            ++v33;
            if (v31) {
              goto LABEL_23;
            }
          }
        }
      }
LABEL_62:
      uint64_t v64 = v66;
      uint64_t v65 = v73;
      swift_retain();
      return sub_100041DE0(v69, v64, v65, a3);
    }
    __break(1u);
  }
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
  return result;
}

void sub_1000418AC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) < *(void *)(a3 + 16))
  {
    int64_t v6 = 0;
    uint64_t v55 = a4 + 56;
    uint64_t v7 = 1 << *(unsigned char *)(a4 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(a4 + 56);
    int64_t v56 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v58 = 0;
    uint64_t v63 = a3 + 56;
    while (1)
    {
      while (1)
      {
        if (v9)
        {
          uint64_t v59 = (v9 - 1) & v9;
          int64_t v61 = v6;
          unint64_t v10 = __clz(__rbit64(v9)) | (v6 << 6);
          uint64_t v11 = a4;
        }
        else
        {
          int64_t v12 = v6 + 1;
          uint64_t v11 = a4;
          if (__OFADD__(v6, 1))
          {
            __break(1u);
            goto LABEL_65;
          }
          if (v12 >= v56) {
            goto LABEL_63;
          }
          unint64_t v13 = *(void *)(v55 + 8 * v12);
          int64_t v14 = v6 + 1;
          if (!v13)
          {
            int64_t v14 = v12 + 1;
            if (v12 + 1 >= v56) {
              goto LABEL_63;
            }
            unint64_t v13 = *(void *)(v55 + 8 * v14);
            if (!v13)
            {
              int64_t v14 = v12 + 2;
              if (v12 + 2 >= v56) {
                goto LABEL_63;
              }
              unint64_t v13 = *(void *)(v55 + 8 * v14);
              if (!v13)
              {
                int64_t v15 = v12 + 3;
                if (v15 >= v56) {
                  goto LABEL_63;
                }
                unint64_t v13 = *(void *)(v55 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    int64_t v14 = v15 + 1;
                    if (__OFADD__(v15, 1)) {
                      goto LABEL_67;
                    }
                    if (v14 >= v56) {
                      goto LABEL_63;
                    }
                    unint64_t v13 = *(void *)(v55 + 8 * v14);
                    ++v15;
                    if (v13) {
                      goto LABEL_22;
                    }
                  }
                }
                int64_t v14 = v15;
              }
            }
          }
LABEL_22:
          uint64_t v59 = (v13 - 1) & v13;
          int64_t v61 = v14;
          unint64_t v10 = __clz(__rbit64(v13)) + (v14 << 6);
        }
        Swift::Int v16 = *(void *)(v5 + 40);
        id v17 = *(id *)(*(void *)(v11 + 48) + 8 * v10);
        Swift::Int v18 = NSObject._rawHashValue(seed:)(v16);
        uint64_t v19 = v5;
        uint64_t v20 = -1 << *(unsigned char *)(v5 + 32);
        unint64_t v21 = v18 & ~v20;
        unint64_t v22 = v21 >> 6;
        uint64_t v23 = 1 << v21;
        if (((1 << v21) & *(void *)(v63 + 8 * (v21 >> 6))) != 0) {
          break;
        }
LABEL_6:

        uint64_t v5 = v19;
        unint64_t v9 = v59;
        int64_t v6 = v61;
      }
      sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
      id v24 = *(id *)(*(void *)(v19 + 48) + 8 * v21);
      char v25 = static NSObject.== infix(_:_:)();

      if ((v25 & 1) == 0)
      {
        uint64_t v26 = ~v20;
        for (unint64_t i = v21 + 1; ; unint64_t i = v28 + 1)
        {
          unint64_t v28 = i & v26;
          if (((*(void *)(v63 + (((i & v26) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v26)) & 1) == 0) {
            break;
          }
          uint64_t v5 = v19;
          id v29 = *(id *)(*(void *)(v19 + 48) + 8 * v28);
          char v30 = static NSObject.== infix(_:_:)();

          if (v30)
          {

            unint64_t v22 = v28 >> 6;
            uint64_t v23 = 1 << v28;
            goto LABEL_30;
          }
        }
        goto LABEL_6;
      }

      uint64_t v5 = v19;
LABEL_30:
      unint64_t v9 = v59;
      int64_t v6 = v61;
      a1[v22] |= v23;
      BOOL v31 = __OFADD__(v58++, 1);
      if (v31) {
        goto LABEL_66;
      }
    }
  }
  int64_t v32 = 0;
  uint64_t v57 = a3 + 56;
  uint64_t v58 = 0;
  uint64_t v33 = 1 << *(unsigned char *)(a3 + 32);
  if (v33 < 64) {
    uint64_t v34 = ~(-1 << v33);
  }
  else {
    uint64_t v34 = -1;
  }
  unint64_t v35 = v34 & *(void *)(a3 + 56);
  int64_t v60 = (unint64_t)(v33 + 63) >> 6;
  uint64_t v36 = a4 + 56;
  while (1)
  {
    if (v35)
    {
      unint64_t v37 = __clz(__rbit64(v35));
      v35 &= v35 - 1;
      int64_t v64 = v32;
      unint64_t v38 = v37 | (v32 << 6);
      goto LABEL_55;
    }
    int64_t v39 = v32 + 1;
    if (__OFADD__(v32, 1))
    {
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    if (v39 >= v60) {
      goto LABEL_63;
    }
    unint64_t v40 = *(void *)(v57 + 8 * v39);
    int64_t v41 = v32 + 1;
    if (!v40)
    {
      int64_t v41 = v32 + 2;
      if (v32 + 2 >= v60) {
        goto LABEL_63;
      }
      unint64_t v40 = *(void *)(v57 + 8 * v41);
      if (!v40)
      {
        int64_t v41 = v32 + 3;
        if (v32 + 3 >= v60) {
          goto LABEL_63;
        }
        unint64_t v40 = *(void *)(v57 + 8 * v41);
        if (!v40) {
          break;
        }
      }
    }
LABEL_54:
    unint64_t v35 = (v40 - 1) & v40;
    int64_t v64 = v41;
    unint64_t v38 = __clz(__rbit64(v40)) + (v41 << 6);
LABEL_55:
    unint64_t v62 = v38;
    Swift::Int v43 = *(void *)(v4 + 40);
    id v44 = *(id *)(*(void *)(v5 + 48) + 8 * v38);
    Swift::Int v45 = NSObject._rawHashValue(seed:)(v43);
    uint64_t v46 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v47 = v45 & ~v46;
    if (((*(void *)(v36 + ((v47 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v47) & 1) == 0) {
      goto LABEL_38;
    }
    sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
    id v48 = *(id *)(*(void *)(v4 + 48) + 8 * v47);
    char v49 = static NSObject.== infix(_:_:)();

    if (v49)
    {
LABEL_60:

      int64_t v32 = v64;
      *(unint64_t *)((char *)a1 + ((v62 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v62;
      BOOL v31 = __OFADD__(v58++, 1);
      uint64_t v4 = a4;
      if (v31)
      {
        __break(1u);
LABEL_63:
        swift_retain();
        sub_10004216C(a1, a2, v58, v5);
        return;
      }
    }
    else
    {
      uint64_t v50 = ~v46;
      while (1)
      {
        unint64_t v47 = (v47 + 1) & v50;
        uint64_t v4 = a4;
        if (((*(void *)(v36 + ((v47 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v47) & 1) == 0) {
          break;
        }
        id v51 = *(id *)(*(void *)(a4 + 48) + 8 * v47);
        char v52 = static NSObject.== infix(_:_:)();

        if (v52) {
          goto LABEL_60;
        }
      }
LABEL_38:

      int64_t v32 = v64;
    }
  }
  uint64_t v42 = v32 + 4;
  if (v32 + 4 >= v60) {
    goto LABEL_63;
  }
  unint64_t v40 = *(void *)(v57 + 8 * v42);
  if (v40)
  {
    int64_t v41 = v32 + 4;
    goto LABEL_54;
  }
  while (1)
  {
    int64_t v41 = v42 + 1;
    if (__OFADD__(v42, 1)) {
      break;
    }
    if (v41 >= v60) {
      goto LABEL_63;
    }
    unint64_t v40 = *(void *)(v57 + 8 * v41);
    ++v42;
    if (v40) {
      goto LABEL_54;
    }
  }
LABEL_68:
  __break(1u);
}

uint64_t sub_100041DE0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = a1;
  uint64_t v7 = type metadata accessor for AdamID();
  uint64_t v37 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_10002EB60((uint64_t *)&unk_1001A1C90);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = result;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *v34;
  }
  uint64_t v13 = 0;
  uint64_t v14 = result + 56;
  unint64_t v35 = (uint64_t (**)(unint64_t, char *, uint64_t))(v37 + 32);
  uint64_t v36 = v37 + 16;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v13 << 6);
    }
    else
    {
      uint64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_40;
      }
      if (v17 >= v33)
      {
LABEL_37:
        swift_release();
        return v10;
      }
      unint64_t v18 = v34[v17];
      ++v13;
      if (!v18)
      {
        uint64_t v13 = v17 + 1;
        if (v17 + 1 >= v33) {
          goto LABEL_37;
        }
        unint64_t v18 = v34[v13];
        if (!v18)
        {
          uint64_t v13 = v17 + 2;
          if (v17 + 2 >= v33) {
            goto LABEL_37;
          }
          unint64_t v18 = v34[v13];
          if (!v18)
          {
            uint64_t v19 = v17 + 3;
            if (v19 >= v33) {
              goto LABEL_37;
            }
            unint64_t v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                uint64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_37;
                }
                unint64_t v18 = v34[v13];
                ++v19;
                if (v18) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v13 = v19;
          }
        }
      }
LABEL_24:
      unint64_t v12 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
    }
    uint64_t v20 = a4;
    uint64_t v21 = *(void *)(a4 + 48);
    uint64_t v22 = *(void *)(v37 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v37 + 16))(v9, v21 + v22 * v16, v7);
    sub_10003AEE0(&qword_1001A1C38, (void (*)(uint64_t))&type metadata accessor for AdamID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v23 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v14 + 8 * v25);
      }
      while (v30 == -1);
      unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(void *)(v14 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    uint64_t result = (*v35)(*(void *)(v10 + 48) + v26 * v22, v9, v7);
    ++*(void *)(v10 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v20;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10004216C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    unint64_t v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v9;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_10002EB60(&qword_1001A1CA8);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  unint64_t v9 = (void *)result;
  BOOL v29 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_39;
    }
    if (v15 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = v29[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v16 = v29[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v16 = v29[v11];
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    Swift::Int v18 = v9[5];
    id v19 = *(id *)(*(void *)(v4 + 48) + 8 * v14);
    uint64_t result = NSObject._rawHashValue(seed:)(v18);
    uint64_t v20 = -1 << *((unsigned char *)v9 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v12 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(void *)(v9[6] + 8 * v23) = v19;
    ++v9[2];
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v17 = v15 + 3;
  if (v17 >= a2) {
    goto LABEL_36;
  }
  unint64_t v16 = v29[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = v29[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1000423CC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_10002EB60(&qword_1001A1CE8);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = (unsigned char *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << v8[32];
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    unint64_t v28 = (void *)(*((void *)v8 + 6) + 16 * v23);
    *unint64_t v28 = v18;
    v28[1] = v19;
    ++*((void *)v8 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100042664@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if ((result & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_10002EE34(0, (unint64_t *)&qword_1001A1CF0);
    sub_100042E58((unint64_t *)&qword_1001A1CF8, (unint64_t *)&qword_1001A1CF0);
    Set.Iterator.init(_cocoa:)();
    uint64_t result = v14;
    uint64_t v7 = v15;
    long long v8 = v16;
    uint64_t v9 = v17;
  }
  else
  {
    uint64_t v10 = -1;
    uint64_t v11 = -1 << *(unsigned char *)(result + 32);
    uint64_t v12 = ~v11;
    uint64_t v7 = result + 56;
    uint64_t v13 = -v11;
    if (v13 < 64) {
      uint64_t v10 = ~(-1 << v13);
    }
    uint64_t v9 = v10 & *(void *)(result + 56);
    long long v8 = (unint64_t)v12;
  }
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  *(_OWORD *)(a4 + 16) = v8;
  *(void *)(a4 + 32) = v9;
  *(void *)(a4 + 40) = a2;
  *(void *)(a4 + 48) = a3;
  return result;
}

void *sub_100042768@<X0>(void *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t sub_1000427AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A1C68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100042814(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 0xFE) == 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10004282C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 0xFE) == 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *sub_100042844(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = 0;
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        int64_t v6 = v5;
        unint64_t v7 = v3 + 1;
        if (__OFADD__(v3, 1)) {
          goto LABEL_15;
        }
        if ([v5 isInstalledFromDistributorOrWeb])
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
        }
        else
        {
        }
        ++v3;
        if (v7 == v2) {
          return &_swiftEmptyArrayStorage;
        }
      }
      if (v3 < *(void *)(v4 + 16)) {
        break;
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    id v5 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_9;
  }
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_1000429AC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AdamID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  int64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  long long v8 = (char *)&v16 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  sub_10003AEE0(&qword_1001A1C38, (void (*)(uint64_t))&type metadata accessor for AdamID);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v17 = result;
  if (v9)
  {
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v12 = v13;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v15 = *(void *)(v11 + 56);
    do
    {
      v12(v6, v14, v2);
      sub_100097AC8((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v11 - 8))(v8, v2);
      v14 += v15;
      --v9;
    }
    while (v9);
    return v17;
  }
  return result;
}

uint64_t sub_100042B48(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for App();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  int64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  long long v8 = (char *)&v16 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  sub_10003AEE0(&qword_1001A1D20, (void (*)(uint64_t))&type metadata accessor for App);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v17 = result;
  if (v9)
  {
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v12 = v13;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v15 = *(void *)(v11 + 56);
    do
    {
      v12(v6, v14, v2);
      sub_100097E08((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v11 - 8))(v8, v2);
      v14 += v15;
      --v9;
    }
    while (v9);
    return v17;
  }
  return result;
}

uint64_t sub_100042CE4(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
  sub_100042E58((unint64_t *)&qword_1001A1CB0, (unint64_t *)&qword_1001A2110);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v4) {
      return v10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      return v10;
    }
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        int64_t v6 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        sub_10009812C(&v9, v6);
      }
    }
    else
    {
      uint64_t v7 = (void **)(a1 + 32);
      do
      {
        long long v8 = *v7++;
        sub_10009812C(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100042E58(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10002EE34(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

_OWORD *sub_100042EA8(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100042EB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100042F14(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100042F70(uint64_t a1)
{
  return a1;
}

uint64_t sub_100042FC4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  type metadata accessor for ASCMetricsInvocationPoint(0);
  sub_10003AEE0((unint64_t *)&unk_1001A1D70, type metadata accessor for ASCMetricsInvocationPoint);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (void **)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      sub_1000982F8(&v6, v5);

      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_100043080(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_100098148(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_100043118(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100043174(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for AppDistributionOfferActionImplementation()
{
  return &type metadata for AppDistributionOfferActionImplementation;
}

unint64_t sub_1000431B0()
{
  unint64_t result = qword_1001A1800;
  if (!qword_1001A1800)
  {
    sub_10002EE34(255, &qword_1001A17F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A1800);
  }
  return result;
}

uint64_t sub_100043218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[42] = a2;
  v3[43] = a3;
  v3[41] = a1;
  type metadata accessor for LogMessage.StringInterpolation();
  v3[44] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OSLogger();
  v3[45] = v4;
  v3[46] = *(void *)(v4 - 8);
  v3[47] = swift_task_alloc();
  uint64_t v5 = sub_10002EB60(&qword_1001A19B8);
  v3[48] = v5;
  v3[49] = *(void *)(v5 - 8);
  v3[50] = swift_task_alloc();
  type metadata accessor for ScalarDictionary();
  v3[51] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ActionMetrics();
  v3[52] = v6;
  v3[53] = *(void *)(v6 - 8);
  v3[54] = swift_task_alloc();
  v3[55] = type metadata accessor for OpenAppAction();
  v3[56] = swift_task_alloc();
  uint64_t v7 = sub_10002EB60((uint64_t *)&unk_1001A2160);
  v3[57] = v7;
  v3[58] = *(void *)(v7 - 8);
  v3[59] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for AppOpenableDestination();
  v3[60] = v8;
  v3[61] = *(void *)(v8 - 8);
  v3[62] = swift_task_alloc();
  v3[63] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for AppOffer();
  v3[64] = v9;
  v3[65] = *(void *)(v9 - 8);
  v3[66] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for App.Kind();
  v3[67] = v10;
  v3[68] = *(void *)(v10 - 8);
  v3[69] = swift_task_alloc();
  type metadata accessor for AdamID();
  v3[70] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for App();
  v3[71] = v11;
  v3[72] = *(void *)(v11 - 8);
  v3[73] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for State();
  v3[74] = v12;
  v3[75] = *(void *)(v12 - 8);
  v3[76] = swift_task_alloc();
  v3[77] = swift_task_alloc();
  return _swift_task_switch(sub_100043698, 0, 0);
}

uint64_t sub_100043698()
{
  uint64_t v94 = v0;
  uint64_t v1 = *(void *)(v0 + 336) + qword_1001A53D8;
  swift_beginAccess();
  sub_1000451AC(v1, v0 + 96);
  if (*(void *)(v0 + 120))
  {
    uint64_t v2 = *(void **)(v0 + 344);
    sub_100031C10((long long *)(v0 + 96), v0 + 16);
    sub_10002EC6C((void *)(v0 + 16), *(void *)(v0 + 40));
    id v3 = [v2 id];
    [v3 int64value];
    AdamID.init(value:)();
    uint64_t v5 = *(void *)(v0 + 600);
    uint64_t v88 = *(void *)(v0 + 592);
    uint64_t v90 = *(void *)(v0 + 608);
    uint64_t v6 = *(void *)(v0 + 584);
    uint64_t v7 = *(void *)(v0 + 576);
    uint64_t v85 = *(void *)(v0 + 616);
    uint64_t v86 = *(void *)(v0 + 568);
    uint64_t v8 = *(void *)(v0 + 528);
    uint64_t v9 = *(void *)(v0 + 520);
    uint64_t v84 = *(void *)(v0 + 512);
    (*(void (**)(void, void, void))(*(void *)(v0 + 544) + 104))(*(void *)(v0 + 552), enum case for App.Kind.store(_:), *(void *)(v0 + 536));
    App.init(id:kind:)();

    sub_100053098();
    AppStateController.state(forApp:applying:)();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v84);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v86);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v90, v85, v88);
    int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 88))(v90, v88);
    if (v10 == enum case for State.openable(_:))
    {
      uint64_t v11 = *(void *)(v0 + 608);
      uint64_t v12 = *(void *)(v0 + 504);
      uint64_t v91 = *(void *)(v0 + 496);
      uint64_t v13 = *(void *)(v0 + 480);
      uint64_t v14 = *(void *)(v0 + 488);
      uint64_t v15 = *(void **)(v0 + 344);
      (*(void (**)(uint64_t, void))(*(void *)(v0 + 600) + 96))(v11, *(void *)(v0 + 592));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v12, v11, v13);
      type metadata accessor for ObjectGraph();
      inject<A, B>(_:from:)();
      id v16 = [v15 metrics];
      sub_10002EE34(0, (unint64_t *)&qword_1001A1D98);
      unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100093170(v17);
      swift_bridgeObjectRelease();
      ScalarDictionary.init()();
      ActionMetrics.init(data:custom:)();
      id v18 = [v15 id];
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v91, v12, v13);
      int v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 88))(v91, v13);
      id v89 = v18;
      if (v19 != enum case for AppOpenableDestination.app(_:))
      {
        if (v19 == enum case for AppOpenableDestination.messages(_:))
        {
          char v20 = 1;
LABEL_33:
          unint64_t v38 = *(int **)(v0 + 440);
          uint64_t v37 = *(void *)(v0 + 448);
          uint64_t v40 = *(void *)(v0 + 424);
          uint64_t v39 = *(void *)(v0 + 432);
          uint64_t v41 = *(void *)(v0 + 416);
          uint64_t v42 = *(void *)(v0 + 392);
          uint64_t v92 = *(void *)(v0 + 400);
          uint64_t v87 = *(void *)(v0 + 384);
          unsigned __int16 v43 = (unsigned __int16)[*(id *)(v0 + 344) flags];
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(v37, v39, v41);
          *(void *)(v37 + v38[5]) = v89;
          *(unsigned char *)(v37 + v38[6]) = v20;
          *(unsigned char *)(v37 + v38[7]) = (v43 & 0x2000) != 0;
          *(void *)(v0 + 80) = v38;
          *(void *)(v0 + 88) = sub_100045214();
          id v44 = sub_100031A88((uint64_t *)(v0 + 56));
          sub_10004526C(v37, (uint64_t)v44);
          (*(void (**)(uint64_t, void, uint64_t))(v42 + 104))(v92, enum case for ActionDispatcher.MetricsBehavior.notProcessed<A>(_:), v87);
          Swift::Int v45 = (void *)swift_task_alloc();
          *(void *)(v0 + 624) = v45;
          *Swift::Int v45 = v0;
          v45[1] = sub_100044274;
          uint64_t v46 = *(void *)(v0 + 456);
          uint64_t v47 = *(void *)(v0 + 400);
          uint64_t v48 = *(void *)(v0 + 328);
          uint64_t v49 = *(void *)(v0 + 336);
          return ActionDispatcher.perform(_:withMetrics:asPartOf:)(v48, v0 + 56, v47, v49, v46);
        }
        (*(void (**)(void, void))(*(void *)(v0 + 488) + 8))(*(void *)(v0 + 496), *(void *)(v0 + 480));
      }
      char v20 = 0;
      goto LABEL_33;
    }
    id v21 = [*(id *)(v0 + 344) id];
    id v22 = [v21 stringValue];

    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v25 = v24;

    uint64_t v30 = HIBYTE(v25) & 0xF;
    uint64_t v31 = v23 & 0xFFFFFFFFFFFFLL;
    if ((v25 & 0x2000000000000000) != 0) {
      uint64_t v32 = HIBYTE(v25) & 0xF;
    }
    else {
      uint64_t v32 = v23 & 0xFFFFFFFFFFFFLL;
    }
    if (!v32)
    {
      swift_bridgeObjectRelease();
LABEL_79:
      uint64_t v76 = *(void *)(v0 + 608);
      uint64_t v77 = *(void *)(v0 + 592);
      uint64_t v78 = *(void *)(v0 + 328);
      uint64_t v79 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 600) + 8);
      v79(*(void *)(v0 + 616), v77);
      uint64_t v80 = enum case for ActionOutcome.unsupported(_:);
      uint64_t v81 = type metadata accessor for ActionOutcome();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 104))(v78, v80, v81);
      v79(v76, v77);
      sub_10002ED08(v0 + 16);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v82 = *(uint64_t (**)(void))(v0 + 8);
      return v82();
    }
    if ((v25 & 0x1000000000000000) != 0)
    {
      unint64_t v50 = sub_100075720(v23, v25, 10);
      char v52 = v83;
      goto LABEL_54;
    }
    if ((v25 & 0x2000000000000000) == 0)
    {
      if ((v23 & 0x1000000000000000) != 0) {
        uint64_t v33 = (unsigned __int8 *)((v25 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v33 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      unint64_t v50 = (unint64_t)sub_1000756F0(v33, v31, 10);
      char v52 = v51 & 1;
LABEL_54:
      swift_bridgeObjectRelease();
      *(void *)(v0 + 640) = v50;
      if ((v52 & 1) == 0)
      {
        id v56 = [*(id *)(v0 + 344) appVersionId];
        uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v59 = v58;

        unint64_t v60 = sub_1000DAAF8(v57, v59);
        *(void *)(v0 + 648) = v60;
        if ((v61 & 1) == 0)
        {
          unint64_t v62 = v60;
          id v63 = [*(id *)(v0 + 344) distributorId];
          uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v66 = v65;

          *(void *)(v0 + 656) = v66;
          uint64_t v67 = (void *)swift_task_alloc();
          *(void *)(v0 + 664) = v67;
          void *v67 = v0;
          v67[1] = sub_100044574;
          uint64_t v26 = v64;
          uint64_t v31 = v66;
          unint64_t v27 = v50;
          unint64_t v28 = v62;
          uint64_t v29 = 0;
          return static AppDistributor.requestProductPage(_:itemID:versionID:)(v26, v31, v27, v28, v29);
        }
      }
      goto LABEL_79;
    }
    v93[0] = v23;
    v93[1] = v25 & 0xFFFFFFFFFFFFFFLL;
    if (v23 == 43)
    {
      if (v30)
      {
        if (v30 != 1 && (BYTE1(v23) - 48) <= 9u)
        {
          unint64_t v50 = (BYTE1(v23) - 48);
          if (v30 == 2) {
            goto LABEL_53;
          }
          if ((BYTE2(v23) - 48) <= 9u)
          {
            unint64_t v50 = 10 * (BYTE1(v23) - 48) + (BYTE2(v23) - 48);
            uint64_t v53 = v30 - 3;
            if (v53)
            {
              uint64_t v54 = (unsigned __int8 *)v93 + 3;
              while (1)
              {
                unsigned int v55 = *v54 - 48;
                if (v55 > 9) {
                  goto LABEL_50;
                }
                if (!is_mul_ok(v50, 0xAuLL)) {
                  goto LABEL_50;
                }
                BOOL v35 = __CFADD__(10 * v50, v55);
                unint64_t v50 = 10 * v50 + v55;
                if (v35) {
                  goto LABEL_50;
                }
                char v52 = 0;
                ++v54;
                if (!--v53) {
                  goto LABEL_54;
                }
              }
            }
            goto LABEL_53;
          }
        }
        goto LABEL_50;
      }
    }
    else
    {
      if (v23 != 45)
      {
        if (v30 && (v23 - 48) <= 9u)
        {
          unint64_t v50 = (v23 - 48);
          if (v30 == 1) {
            goto LABEL_53;
          }
          if ((BYTE1(v23) - 48) <= 9u)
          {
            unint64_t v50 = 10 * (v23 - 48) + (BYTE1(v23) - 48);
            uint64_t v68 = v30 - 2;
            if (v68)
            {
              uint64_t v69 = (unsigned __int8 *)v93 + 2;
              while (1)
              {
                unsigned int v70 = *v69 - 48;
                if (v70 > 9) {
                  goto LABEL_50;
                }
                if (!is_mul_ok(v50, 0xAuLL)) {
                  goto LABEL_50;
                }
                BOOL v35 = __CFADD__(10 * v50, v70);
                unint64_t v50 = 10 * v50 + v70;
                if (v35) {
                  goto LABEL_50;
                }
                char v52 = 0;
                ++v69;
                if (!--v68) {
                  goto LABEL_54;
                }
              }
            }
            goto LABEL_53;
          }
        }
LABEL_50:
        unint64_t v50 = 0;
LABEL_51:
        char v52 = 1;
        goto LABEL_54;
      }
      if (v30)
      {
        if (v30 != 1)
        {
          unsigned __int8 v34 = BYTE1(v23) - 48;
          if ((BYTE1(v23) - 48) <= 9u)
          {
            unint64_t v50 = 0;
            BOOL v35 = v34 == 0;
            unint64_t v36 = -(uint64_t)v34;
            if (!v35) {
              goto LABEL_51;
            }
            if (v30 == 2)
            {
              char v52 = 0;
              unint64_t v50 = v36;
              goto LABEL_54;
            }
            unsigned __int8 v71 = BYTE2(v23) - 48;
            if ((BYTE2(v23) - 48) <= 9u && is_mul_ok(v36, 0xAuLL))
            {
              unint64_t v72 = 10 * v36;
              unint64_t v50 = v72 - v71;
              if (v72 >= v71)
              {
                uint64_t v73 = v30 - 3;
                if (v73)
                {
                  uint64_t v74 = (unsigned __int8 *)v93 + 3;
                  while (1)
                  {
                    unsigned int v75 = *v74 - 48;
                    if (v75 > 9) {
                      goto LABEL_50;
                    }
                    if (!is_mul_ok(v50, 0xAuLL)) {
                      goto LABEL_50;
                    }
                    BOOL v35 = 10 * v50 >= v75;
                    unint64_t v50 = 10 * v50 - v75;
                    if (!v35) {
                      goto LABEL_50;
                    }
                    char v52 = 0;
                    ++v74;
                    if (!--v73) {
                      goto LABEL_54;
                    }
                  }
                }
LABEL_53:
                char v52 = 0;
                goto LABEL_54;
              }
            }
          }
        }
        goto LABEL_50;
      }
      __break(1u);
    }
    __break(1u);
    return static AppDistributor.requestProductPage(_:itemID:versionID:)(v26, v31, v27, v28, v29);
  }
  sub_100034B8C(v0 + 96, &qword_1001A1D90);
  sub_10002EB60((uint64_t *)&unk_1001A3320);
  return dispatch thunk of BaseObjectGraph.noMemberFound<A>(toSatisfy:)();
}

uint64_t sub_100044274()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 632) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[49] + 8))(v2[50], v2[48]);
  if (v0)
  {
    id v3 = sub_100044860;
  }
  else
  {
    sub_10002ED08((uint64_t)(v2 + 7));
    id v3 = sub_1000443C4;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000443C4()
{
  uint64_t v1 = v0[77];
  uint64_t v2 = v0[75];
  uint64_t v3 = v0[74];
  uint64_t v4 = v0[63];
  uint64_t v5 = v0[60];
  uint64_t v6 = v0[61];
  uint64_t v8 = v0[58];
  uint64_t v7 = v0[59];
  uint64_t v9 = v0[57];
  sub_1000452D0(v0[56]);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_10002ED08((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100044574()
{
  *(void *)(*(void *)v1 + 672) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100044A2C;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_100044690;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100044690()
{
  uint64_t v1 = v0[76];
  uint64_t v2 = v0[74];
  uint64_t v3 = v0[41];
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v0[75] + 8);
  v4(v0[77], v2);
  uint64_t v5 = enum case for ActionOutcome.performed(_:);
  uint64_t v6 = type metadata accessor for ActionOutcome();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104))(v3, v5, v6);
  v4(v1, v2);
  sub_10002ED08((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100044860()
{
  uint64_t v1 = v0[77];
  uint64_t v2 = v0[75];
  uint64_t v3 = v0[74];
  uint64_t v4 = v0[63];
  uint64_t v5 = v0[60];
  uint64_t v6 = v0[61];
  uint64_t v7 = v0[58];
  uint64_t v8 = v0[59];
  uint64_t v9 = v0[57];
  sub_1000452D0(v0[56]);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_10002ED08((uint64_t)(v0 + 7));
  sub_10002ED08((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100044A2C()
{
  uint64_t v1 = v0;
  swift_bridgeObjectRelease();
  if (qword_1001A0E68 != -1) {
    swift_once();
  }
  uint64_t v31 = (uint64_t)(v0 + 2);
  uint64_t v2 = v0[81];
  uint64_t v3 = v0[80];
  uint64_t v26 = v0[75];
  uint64_t v27 = v0[74];
  uint64_t v28 = v0[77];
  uint64_t v4 = v0[46];
  uint64_t v25 = v0[47];
  uint64_t v5 = v0[45];
  id v24 = (id)v0[43];
  uint64_t v29 = v0[41];
  uint64_t v30 = v0[76];
  uint64_t v6 = sub_10002F6AC(v5, (uint64_t)qword_1001AE380);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v25, v6, v5);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v7._object = (void *)0x800000010015ADC0;
  v7._countAndFlagsBits = 0xD000000000000023;
  LogMessage.StringInterpolation.appendLiteral(_:)(v7);
  v0[20] = &type metadata for UInt64;
  v0[17] = v3;
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)(v0 + 17), &qword_1001A1C50);
  v8._countAndFlagsBits = 0x6576206874697720;
  v8._object = (void *)0xEE00206E6F697372;
  LogMessage.StringInterpolation.appendLiteral(_:)(v8);
  v0[24] = &type metadata for UInt64;
  v0[21] = v2;
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)(v0 + 21), &qword_1001A1C50);
  v9._countAndFlagsBits = 544106784;
  v9._object = (void *)0xE400000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v9);
  id v10 = [v24 distributorId];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  v1[28] = &type metadata for String;
  v1[25] = v11;
  v1[26] = v13;
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)(v1 + 25), &qword_1001A1C50);
  v14._countAndFlagsBits = 8238;
  v14._object = (void *)0xE200000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v14);
  swift_getErrorValue();
  uint64_t v16 = v1[36];
  uint64_t v15 = v1[37];
  v1[32] = v15;
  unint64_t v17 = sub_100031A88(v1 + 29);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v17, v16, v15);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)(v1 + 29), &qword_1001A1C50);
  v18._countAndFlagsBits = 46;
  v18._object = (void *)0xE100000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v18);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v25, v5);
  int v19 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
  v19(v28, v27);
  uint64_t v20 = enum case for ActionOutcome.unsupported(_:);
  uint64_t v21 = type metadata accessor for ActionOutcome();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 104))(v29, v20, v21);
  v19(v30, v27);
  sub_10002ED08(v31);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v22 = (uint64_t (*)(void))v1[1];
  return v22();
}

uint64_t sub_100044F0C(void **a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A2450);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v7 = *a1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = v7;
  sub_10002EB60((uint64_t *)&unk_1001A21F0);
  swift_retain();
  id v9 = v7;
  uint64_t v10 = Promise.__allocating_init()();
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v6, 1, 1, v11);
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = &unk_1001A1D88;
  v12[5] = v8;
  v12[6] = v10;
  swift_retain();
  sub_1000F6C04((uint64_t)v6, (uint64_t)&unk_1001A2470, (uint64_t)v12);
  swift_release();
  return v10;
}

uint64_t sub_100045078()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000450B8(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  void *v6 = v2;
  v6[1] = sub_10002F874;
  return sub_100043218(a1, v5, v4);
}

uint64_t sub_100045164()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000451AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A1D90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100045214()
{
  unint64_t result = qword_1001A1DA0;
  if (!qword_1001A1DA0)
  {
    type metadata accessor for OpenAppAction();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A1DA0);
  }
  return result;
}

uint64_t sub_10004526C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OpenAppAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000452D0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OpenAppAction();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10004532C(unsigned __int8 *a1, char *a2)
{
  return sub_100067564(*a1, *a2);
}

Swift::Int sub_100045338()
{
  return Hasher._finalize()();
}

uint64_t sub_100045414()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000454D8()
{
  return Hasher._finalize()();
}

unint64_t sub_1000455B0@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100045888(*a1);
  *a2 = result;
  return result;
}

void sub_1000455E0(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE700000000000000;
  uint64_t v3 = 0x6E776F6E6B6E75;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE800000000000000;
      uint64_t v3 = 0x6573616863727570;
      goto LABEL_3;
    case 2:
      *a1 = 0x657461647075;
      a1[1] = 0xE600000000000000;
      break;
    case 3:
      *a1 = 0x6F6C6E776F646572;
      a1[1] = 0xEA00000000006461;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

unsigned char *initializeBufferWithCopyOfBuffer for AppInstallationType(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AppInstallationType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AppInstallationType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000457E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t sub_100045810(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_100045818(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for AppInstallationType()
{
  return &type metadata for AppInstallationType;
}

unint64_t sub_100045834()
{
  unint64_t result = qword_1001A1DA8;
  if (!qword_1001A1DA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A1DA8);
  }
  return result;
}

unint64_t sub_100045888(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100184A68, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000458D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 32);
  uint64_t v5 = type metadata accessor for ActionMetrics();
  unsigned int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

void *sub_100045944(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    id v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = sub_10002EB60(&qword_1001A44F0);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v16 = a3[7];
    *((unsigned char *)v4 + a3[6]) = *((unsigned char *)a2 + a3[6]);
    unint64_t v17 = (char *)v4 + v16;
    Swift::String v18 = (char *)a2 + v16;
    uint64_t v19 = *(void *)((char *)a2 + v16 + 24);
    if (v19)
    {
      uint64_t v20 = *((void *)v18 + 4);
      *((void *)v17 + 3) = v19;
      *((void *)v17 + 4) = v20;
      (**(void (***)(void))(v19 - 8))();
    }
    else
    {
      long long v21 = *((_OWORD *)v18 + 1);
      *(_OWORD *)unint64_t v17 = *(_OWORD *)v18;
      *((_OWORD *)v17 + 1) = v21;
      *((void *)v17 + 4) = *((void *)v18 + 4);
    }
    uint64_t v22 = a3[8];
    uint64_t v23 = (char *)v4 + v22;
    id v24 = (char *)a2 + v22;
    uint64_t v25 = type metadata accessor for ActionMetrics();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
  }
  return v4;
}

uint64_t sub_100045B70(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v7 = a1 + a2[7];
  if (*(void *)(v7 + 24)) {
    sub_10002ED08(v7);
  }
  uint64_t v8 = a1 + a2[8];
  uint64_t v9 = type metadata accessor for ActionMetrics();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);

  return v10(v8, v9);
}

void *sub_100045C88(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = sub_10002EB60(&qword_1001A44F0);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = *(void *)((char *)a2 + v14 + 24);
  if (v17)
  {
    uint64_t v18 = *((void *)v16 + 4);
    *((void *)v15 + 3) = v17;
    *((void *)v15 + 4) = v18;
    (**(void (***)(void))(v17 - 8))();
  }
  else
  {
    long long v19 = *((_OWORD *)v16 + 1);
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
    *((_OWORD *)v15 + 1) = v19;
    *((void *)v15 + 4) = *((void *)v16 + 4);
  }
  uint64_t v20 = a3[8];
  long long v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  uint64_t v23 = type metadata accessor for ActionMetrics();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
  return a1;
}

void *sub_100045E64(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10002EB60(&qword_1001A44F0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v15 = a3[7];
  uint64_t v16 = (uint64_t)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = *(void *)((char *)a2 + v15 + 24);
  if (!*(void *)((char *)a1 + v15 + 24))
  {
    if (v18)
    {
      *(void *)(v16 + 24) = v18;
      *(void *)(v16 + 32) = *((void *)v17 + 4);
      (**(void (***)(uint64_t, char *))(v18 - 8))(v16, v17);
      goto LABEL_14;
    }
LABEL_13:
    long long v19 = *(_OWORD *)v17;
    long long v20 = *((_OWORD *)v17 + 1);
    *(void *)(v16 + 32) = *((void *)v17 + 4);
    *(_OWORD *)uint64_t v16 = v19;
    *(_OWORD *)(v16 + 16) = v20;
    goto LABEL_14;
  }
  if (!v18)
  {
    sub_10002ED08(v16);
    goto LABEL_13;
  }
  sub_1000300B4((uint64_t *)v16, (uint64_t *)v17);
LABEL_14:
  uint64_t v21 = a3[8];
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = type metadata accessor for ActionMetrics();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 24))(v22, v23, v24);
  return a1;
}

_OWORD *sub_1000460E0(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_10002EB60(&qword_1001A44F0);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  int v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  long long v15 = *((_OWORD *)v14 + 1);
  *(_OWORD *)int v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + 1) = v15;
  *((void *)v13 + 4) = *((void *)v14 + 4);
  uint64_t v16 = a3[8];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for ActionMetrics();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  return a1;
}

void *sub_100046270(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_10002EB60(&qword_1001A44F0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v17 = (char *)a1 + v16;
  if (*(void *)((char *)a1 + v16 + 24)) {
    sub_10002ED08((uint64_t)a1 + v16);
  }
  long long v18 = *(_OWORD *)((char *)a2 + v16 + 16);
  *(_OWORD *)uint64_t v17 = *(_OWORD *)((char *)a2 + v16);
  *((_OWORD *)v17 + 1) = v18;
  *((void *)v17 + 4) = *(void *)((char *)a2 + v16 + 32);
  uint64_t v19 = a3[8];
  long long v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = type metadata accessor for ActionMetrics();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 40))(v20, v21, v22);
  return a1;
}

uint64_t sub_10004647C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100046490);
}

uint64_t sub_100046490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10002EB60(&qword_1001A44F0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for ActionMetrics();
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 32);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_1000465C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000465D4);
}

uint64_t sub_1000465D4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = sub_10002EB60(&qword_1001A44F0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for ActionMetrics();
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 32);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata accessor for AppLaunchTrampolineAction()
{
  uint64_t result = qword_1001A1E08;
  if (!qword_1001A1E08) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100046750()
{
  sub_100046838();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ActionMetrics();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_100046838()
{
  if (!qword_1001A1E18)
  {
    type metadata accessor for URL();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1001A1E18);
    }
  }
}

ValueMetadata *type metadata accessor for AppLaunchTrampolineActionImplementation()
{
  return &type metadata for AppLaunchTrampolineActionImplementation;
}

unint64_t sub_1000468A4()
{
  unint64_t result = qword_1001A1E58;
  if (!qword_1001A1E58)
  {
    type metadata accessor for AppLaunchTrampolineAction();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001A1E58);
  }
  return result;
}

uint64_t sub_1000468FC()
{
  uint64_t v0 = type metadata accessor for ActionOutcome();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  unint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for ActionOutcome.performed(_:), v0);
  Promise.resolve(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_1000469E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a2;
  uint64_t v27 = a4;
  v23[1] = a3;
  uint64_t v28 = a1;
  uint64_t v24 = sub_10002EB60(&qword_1001A19B8);
  v23[0] = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10002EB60((uint64_t *)&unk_1001A2160);
  uint64_t v25 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OSLogger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0E68 != -1) {
    swift_once();
  }
  uint64_t v13 = sub_10002F6AC(v9, (uint64_t)qword_1001AE380);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v13, v9);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CD00;
  LogMessage.init(stringLiteral:)();
  swift_getErrorValue();
  uint64_t v15 = v32[5];
  uint64_t v14 = v33;
  v32[3] = v33;
  uint64_t v16 = sub_100031A88(v32);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v16, v15, v14);
  static LogMessage.sensitive(_:)();
  sub_100034B8C((uint64_t)v32, &qword_1001A1C50);
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v17 = type metadata accessor for AppLaunchTrampolineAction();
  sub_1000475F0(v26 + *(int *)(v17 + 28), (uint64_t)&v29, (uint64_t *)&unk_1001A2180);
  if (v30)
  {
    sub_100031C10(&v29, (uint64_t)v32);
    type metadata accessor for ObjectGraph();
    inject<A, B>(_:from:)();
    uint64_t v18 = v23[0];
    uint64_t v19 = v24;
    (*(void (**)(char *, void, uint64_t))(v23[0] + 104))(v5, enum case for ActionDispatcher.MetricsBehavior.notProcessed<A>(_:), v24);
    ActionDispatcher.perform(_:withMetrics:asPartOf:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v5, v19);
    unint64_t v20 = sub_10004765C();
    swift_retain_n();
    uint64_t v21 = static OS_dispatch_queue.main.getter();
    unint64_t v30 = v20;
    uint64_t v31 = &protocol witness table for OS_dispatch_queue;
    *(void *)&long long v29 = v21;
    Promise.then(perform:orCatchError:on:)();
    swift_release();
    swift_release_n();
    sub_10002ED08((uint64_t)&v29);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v6);
    return sub_10002ED08((uint64_t)v32);
  }
  else
  {
    sub_100034B8C((uint64_t)&v29, (uint64_t *)&unk_1001A2180);
    return Promise.reject(_:)();
  }
}

uint64_t sub_100046EE0(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = a2;
  uint64_t v3 = type metadata accessor for AppLaunchTrampolineAction();
  uint64_t v25 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v26 = v4;
  uint64_t v27 = (uint64_t)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10002EB60(&qword_1001A44F0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002EB60((uint64_t *)&unk_1001A21F0);
  uint64_t v8 = Promise.__allocating_init()();
  id v9 = [objc_allocWithZone((Class)ASCAppLaunchTrampoline) init];
  NSString v10 = String._bridgeToObjectiveC()();
  sub_1000475F0(a1 + *(int *)(v3 + 20), (uint64_t)v7, &qword_1001A44F0);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v14 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v7, 1, v11) != 1)
  {
    URL._bridgeToObjectiveC()(v13);
    uint64_t v14 = v15;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v11);
  }
  uint64_t v16 = v9;
  id v17 = objc_msgSend(v9, "openApplicationWithBundleIdentifier:payloadURL:universalLinkRequired:", v10, v14, *(unsigned __int8 *)(a1 + *(int *)(v3 + 24)), v25);

  uint64_t v33 = sub_1000472A4;
  uint64_t v34 = v8;
  aBlock = _NSConcreteStackBlock;
  uint64_t v30 = 1107296256;
  uint64_t v31 = sub_100139BC8;
  uint64_t v32 = &unk_1001855A8;
  uint64_t v18 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  [v17 addSuccessBlock:v18];
  _Block_release(v18);
  uint64_t v19 = v27;
  sub_1000472C4(a1, v27);
  unint64_t v20 = (*(unsigned __int8 *)(v25 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  unint64_t v21 = (v26 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = swift_allocObject();
  sub_1000474E4(v19, v22 + v20);
  *(void *)(v22 + v21) = v28;
  *(void *)(v22 + ((v21 + 15) & 0xFFFFFFFFFFFFFFF8)) = v8;
  uint64_t v33 = sub_100047548;
  uint64_t v34 = v22;
  aBlock = _NSConcreteStackBlock;
  uint64_t v30 = 1107296256;
  uint64_t v31 = sub_100139BD0;
  uint64_t v32 = &unk_1001855F8;
  uint64_t v23 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  [v17 addErrorBlock:v23];
  _Block_release(v23);

  return v8;
}

uint64_t sub_1000472A4()
{
  return sub_1000468FC();
}

uint64_t sub_1000472AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000472BC()
{
  return swift_release();
}

uint64_t sub_1000472C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppLaunchTrampolineAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100047328()
{
  uint64_t v1 = (int *)type metadata accessor for AppLaunchTrampolineAction();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[5];
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  uint64_t v9 = v5 + v1[7];
  if (*(void *)(v9 + 24)) {
    sub_10002ED08(v9);
  }
  uint64_t v10 = v5 + v1[8];
  uint64_t v11 = type metadata accessor for ActionMetrics();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_1000474E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppLaunchTrampolineAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100047548(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for AppLaunchTrampolineAction() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v1 + v5);
  uint64_t v7 = *(void *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_1000469E8(a1, v1 + v4, v6, v7);
}

uint64_t sub_1000475F0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10002EB60(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_10004765C()
{
  unint64_t result = qword_1001A2170;
  if (!qword_1001A2170)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001A2170);
  }
  return result;
}

ValueMetadata *type metadata accessor for AppOfferActionImplementation()
{
  return &type metadata for AppOfferActionImplementation;
}

unint64_t sub_1000476B8()
{
  unint64_t result = qword_1001A17F0;
  if (!qword_1001A17F0)
  {
    sub_10002EE34(255, (unint64_t *)&qword_1001A17E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A17F0);
  }
  return result;
}

uint64_t sub_100047720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(unsigned char *)(v5 + 705) = a5;
  *(void *)(v5 + 384) = a3;
  *(void *)(v5 + 392) = a4;
  *(void *)(v5 + 368) = a1;
  *(void *)(v5 + 376) = a2;
  uint64_t v6 = type metadata accessor for ActionOutcome();
  *(void *)(v5 + 400) = v6;
  *(void *)(v5 + 408) = *(void *)(v6 - 8);
  *(void *)(v5 + 416) = swift_task_alloc();
  sub_10002EB60(&qword_1001A2450);
  *(void *)(v5 + 424) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass();
  *(void *)(v5 + 432) = v7;
  *(void *)(v5 + 440) = *(void *)(v7 - 8);
  *(void *)(v5 + 448) = swift_task_alloc();
  type metadata accessor for LogMessage.StringInterpolation();
  *(void *)(v5 + 456) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for OSLogger();
  *(void *)(v5 + 464) = v8;
  *(void *)(v5 + 472) = *(void *)(v8 - 8);
  *(void *)(v5 + 480) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for AppInstallationType();
  *(void *)(v5 + 488) = v9;
  *(void *)(v5 + 496) = *(void *)(v9 - 8);
  *(void *)(v5 + 504) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for AppOffer();
  *(void *)(v5 + 512) = v10;
  *(void *)(v5 + 520) = *(void *)(v10 - 8);
  *(void *)(v5 + 528) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for State();
  *(void *)(v5 + 536) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v5 + 544) = v12;
  *(void *)(v5 + 552) = *(void *)(v12 + 64);
  *(void *)(v5 + 560) = swift_task_alloc();
  *(void *)(v5 + 568) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for App.Kind();
  *(void *)(v5 + 576) = v13;
  *(void *)(v5 + 584) = *(void *)(v13 - 8);
  *(void *)(v5 + 592) = swift_task_alloc();
  type metadata accessor for AdamID();
  *(void *)(v5 + 600) = swift_task_alloc();
  uint64_t v14 = type metadata accessor for App();
  *(void *)(v5 + 608) = v14;
  *(void *)(v5 + 616) = *(void *)(v14 - 8);
  *(void *)(v5 + 624) = swift_task_alloc();
  return _swift_task_switch(sub_100047B0C, 0, 0);
}

uint64_t sub_100047B0C()
{
  sub_10002EE34(0, (unint64_t *)&qword_1001A5470);
  type metadata accessor for ObjectGraph();
  inject<A, B>(_:from:)();
  uint64_t v1 = *(void **)(v0 + 352);
  *(void *)(v0 + 632) = v1;
  id v2 = [v1 fields];
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v3 + 16) && (unint64_t v6 = sub_10003A860(v4, v5), (v7 & 1) != 0))
  {
    uint64_t v8 = (uint64_t *)(*(void *)(v3 + 56) + 16 * v6);
    uint64_t v9 = v8[1];
    uint64_t v32 = *v8;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v32 = 0;
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(void *)(v0 + 376);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10002EB60(&qword_1001A3340);
  inject<A, B>(_:from:)();
  uint64_t v11 = v10 + qword_1001A53D8;
  swift_beginAccess();
  sub_1000451AC(v11, v0 + 136);
  if (*(void *)(v0 + 160))
  {
    uint64_t v12 = *(void **)(v0 + 384);
    sub_100031C10((long long *)(v0 + 136), v0 + 96);
    id v13 = [v12 id];
    [v13 int64value];
    AdamID.init(value:)();
    uint64_t v31 = v9;
    uint64_t v15 = *(void *)(v0 + 544);
    uint64_t v28 = *(void *)(v0 + 536);
    uint64_t v16 = *(void *)(v0 + 528);
    uint64_t v17 = *(void *)(v0 + 520);
    uint64_t v23 = *(void *)(v0 + 568);
    uint64_t v24 = *(void *)(v0 + 512);
    uint64_t v26 = *(void *)(v0 + 560);
    uint64_t v27 = *(void *)(v0 + 504);
    uint64_t v29 = *(void *)(v0 + 496);
    uint64_t v30 = *(void *)(v0 + 488);
    id v25 = *(id *)(v0 + 384);
    (*(void (**)(void, void, void))(*(void *)(v0 + 584) + 104))(*(void *)(v0 + 592), enum case for App.Kind.store(_:), *(void *)(v0 + 576));
    App.init(id:kind:)();

    sub_10002EC6C((void *)(v0 + 96), *(void *)(v0 + 120));
    sub_100053098();
    AppStateController.state(forApp:applying:)();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v24);
    sub_10002EC6C((void *)(v0 + 96), *(void *)(v0 + 120));
    uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
    *(void *)(v0 + 640) = v18;
    *(void *)(v0 + 648) = (v15 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v18(v26, v23, v28);
    AppInstallationType.init(_:)();
    dispatch thunk of AppStateController.setWaiting(forApp:installationType:)();
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v30);
    sub_10002EC6C((void *)(v0 + 56), *(void *)(v0 + 80));
    id v19 = [v25 id];
    *(void *)(v0 + 656) = sub_1000F0290(v32, v31, v19);

    swift_bridgeObjectRelease();
    uint64_t v20 = sub_10002EB60(&qword_1001A1EA8);
    uint64_t v21 = sub_100053028(&qword_1001A1EB0, &qword_1001A1EA8);
    uint64_t v22 = (void *)swift_task_alloc();
    *(void *)(v0 + 664) = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_1000480A4;
    return dispatch thunk of Future.then()(v0 + 704, v20, v21);
  }
  else
  {
    sub_100034B8C(v0 + 136, &qword_1001A1D90);
    sub_10002EB60((uint64_t *)&unk_1001A3320);
    return dispatch thunk of BaseObjectGraph.noMemberFound<A>(toSatisfy:)();
  }
}

uint64_t sub_1000480A4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 672) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    uint64_t v3 = sub_100048B90;
  }
  else
  {
    *(unsigned char *)(v2 + 706) = *(unsigned char *)(v2 + 704);
    uint64_t v3 = sub_1000481E4;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000481E4()
{
  if (qword_1001A0E70 != -1) {
    swift_once();
  }
  char v1 = *(unsigned char *)(v0 + 706);
  uint64_t v3 = *(void *)(v0 + 472);
  uint64_t v2 = *(void *)(v0 + 480);
  uint64_t v4 = *(void *)(v0 + 464);
  uint64_t v5 = *(void **)(v0 + 384);
  uint64_t v6 = sub_10002F6AC(v4, (uint64_t)qword_1001AE398);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v4);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v7._object = (void *)0x800000010015AF00;
  v7._countAndFlagsBits = 0xD00000000000001BLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v7);
  id v8 = [v5 id];
  *(void *)(v0 + 264) = sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
  *(void *)(v0 + 240) = v8;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_100034B8C(v0 + 240, &qword_1001A1C50);
  v9._countAndFlagsBits = 0x6572206874697720;
  v9._object = (void *)0xEE00203A746C7573;
  LogMessage.StringInterpolation.appendLiteral(_:)(v9);
  *(void *)(v0 + 200) = &type metadata for Bool;
  *(unsigned char *)(v0 + 176) = v1;
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C(v0 + 176, &qword_1001A1C50);
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v10);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 640);
  uint64_t v11 = *(void *)(v0 + 568);
  uint64_t v12 = *(void *)(v0 + 560);
  uint64_t v13 = *(void *)(v0 + 544);
  uint64_t v14 = *(void *)(v0 + 536);
  uint64_t v15 = *(void *)(v0 + 440);
  uint64_t v16 = *(void *)(v0 + 448);
  uint64_t v17 = *(void *)(v0 + 432);
  uint64_t v35 = *(void *)(v0 + 424);
  char v34 = *(unsigned char *)(v0 + 705);
  uint64_t v30 = *(void *)(v0 + 392);
  uint64_t v18 = *(void *)(v0 + 376);
  uint64_t v32 = *(void *)(v0 + 552);
  uint64_t v33 = *(void **)(v0 + 384);
  (*(void (**)(void, void))(*(void *)(v0 + 472) + 8))(*(void *)(v0 + 480), *(void *)(v0 + 464));
  sub_10002EE34(0, (unint64_t *)&qword_1001A2170);
  (*(void (**)(uint64_t, void, uint64_t))(v15 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v17);
  unint64_t v36 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
  v31(v12, v11, v14);
  sub_100052538(v30, v0 + 16);
  unint64_t v19 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v18;
  *(void *)(v20 + 24) = v33;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v13 + 32))(v20 + v19, v12, v14);
  *(unsigned char *)(v20 + v19 + v32) = v34;
  sub_100031C10((long long *)(v0 + 16), ((v19 + v32) & 0xFFFFFFFFFFFFFFF8) + v20 + 8);
  uint64_t v21 = sub_10002EB60((uint64_t *)&unk_1001A21F0);
  swift_retain();
  id v22 = v33;
  uint64_t v23 = Promise.__allocating_init()();
  *(void *)(v0 + 680) = v23;
  uint64_t v24 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v35, 1, 1, v24);
  id v25 = (void *)swift_allocObject();
  v25[2] = 0;
  v25[3] = 0;
  v25[4] = &unk_1001A1EC0;
  v25[5] = v20;
  v25[6] = v23;
  swift_retain();
  sub_1000F6C04(v35, (uint64_t)&unk_1001A1EC8, (uint64_t)v25);
  swift_release();

  uint64_t v26 = sub_100053028((unint64_t *)&qword_1001A19B0, (uint64_t *)&unk_1001A21F0);
  uint64_t v27 = (void *)swift_task_alloc();
  *(void *)(v0 + 688) = v27;
  *uint64_t v27 = v0;
  v27[1] = sub_1000486FC;
  uint64_t v28 = *(void *)(v0 + 416);
  return dispatch thunk of Future.then()(v28, v21, v26);
}

uint64_t sub_1000486FC()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 696) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_release();
    uint64_t v3 = sub_100048A08;
  }
  else
  {
    (*(void (**)(void, void))(v2[51] + 8))(v2[52], v2[50]);
    swift_release();
    uint64_t v3 = sub_100048854;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100048854()
{
  uint64_t v1 = *(void *)(v0 + 624);
  uint64_t v2 = *(void *)(v0 + 616);
  uint64_t v3 = *(void *)(v0 + 608);
  uint64_t v4 = *(void *)(v0 + 568);
  uint64_t v5 = *(void *)(v0 + 544);
  uint64_t v6 = *(void *)(v0 + 536);
  uint64_t v7 = *(void *)(v0 + 408);
  uint64_t v8 = *(void *)(v0 + 400);
  uint64_t v9 = *(void *)(v0 + 368);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v9, enum case for ActionOutcome.performed(_:), v8);
  sub_10002ED08(v0 + 96);
  sub_10002ED08(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_100048A08()
{
  uint64_t v1 = *(void *)(v0 + 624);
  uint64_t v2 = *(void *)(v0 + 616);
  uint64_t v3 = *(void *)(v0 + 608);
  uint64_t v4 = *(void *)(v0 + 568);
  uint64_t v5 = *(void *)(v0 + 544);
  uint64_t v6 = *(void *)(v0 + 536);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_10002ED08(v0 + 96);
  sub_10002ED08(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100048B90()
{
  if (qword_1001A0E68 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 472);
  uint64_t v2 = *(void *)(v0 + 480);
  uint64_t v3 = *(void *)(v0 + 464);
  uint64_t v4 = *(void **)(v0 + 384);
  uint64_t v5 = sub_10002F6AC(v3, (uint64_t)qword_1001AE380);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, v5, v3);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v6._countAndFlagsBits = 0xD00000000000001CLL;
  v6._object = (void *)0x800000010015AEE0;
  LogMessage.StringInterpolation.appendLiteral(_:)(v6);
  id v7 = [v4 id];
  *(void *)(v0 + 296) = sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
  *(void *)(v0 + 272) = v7;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_100034B8C(v0 + 272, &qword_1001A1C50);
  v8._object = (void *)0x800000010015AEC0;
  v8._countAndFlagsBits = 0xD000000000000011;
  LogMessage.StringInterpolation.appendLiteral(_:)(v8);
  swift_getErrorValue();
  uint64_t v9 = *(void *)(v0 + 304);
  uint64_t v10 = *(void *)(v0 + 312);
  *(void *)(v0 + 232) = v10;
  uint64_t v11 = sub_100031A88((uint64_t *)(v0 + 208));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v11, v9, v10);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C(v0 + 208, &qword_1001A1C50);
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v12);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 640);
  uint64_t v13 = *(void *)(v0 + 568);
  uint64_t v14 = *(void *)(v0 + 560);
  uint64_t v15 = *(void *)(v0 + 544);
  uint64_t v16 = *(void *)(v0 + 536);
  uint64_t v17 = *(void *)(v0 + 440);
  uint64_t v18 = *(void *)(v0 + 448);
  uint64_t v19 = *(void *)(v0 + 432);
  uint64_t v37 = *(void *)(v0 + 424);
  char v36 = *(unsigned char *)(v0 + 705);
  uint64_t v32 = *(void *)(v0 + 392);
  uint64_t v20 = *(void *)(v0 + 376);
  uint64_t v34 = *(void *)(v0 + 552);
  uint64_t v35 = *(void **)(v0 + 384);
  (*(void (**)(void, void))(*(void *)(v0 + 472) + 8))(*(void *)(v0 + 480), *(void *)(v0 + 464));
  sub_10002EE34(0, (unint64_t *)&qword_1001A2170);
  (*(void (**)(uint64_t, void, uint64_t))(v17 + 104))(v18, enum case for DispatchQoS.QoSClass.default(_:), v19);
  unint64_t v38 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v19);
  v33(v14, v13, v16);
  sub_100052538(v32, v0 + 16);
  unint64_t v21 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v20;
  *(void *)(v22 + 24) = v35;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v15 + 32))(v22 + v21, v14, v16);
  *(unsigned char *)(v22 + v21 + v34) = v36;
  sub_100031C10((long long *)(v0 + 16), ((v21 + v34) & 0xFFFFFFFFFFFFFFF8) + v22 + 8);
  uint64_t v23 = sub_10002EB60((uint64_t *)&unk_1001A21F0);
  swift_retain();
  id v24 = v35;
  uint64_t v25 = Promise.__allocating_init()();
  *(void *)(v0 + 680) = v25;
  uint64_t v26 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v37, 1, 1, v26);
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = 0;
  v27[3] = 0;
  v27[4] = &unk_1001A1EC0;
  v27[5] = v22;
  v27[6] = v25;
  swift_retain();
  sub_1000F6C04(v37, (uint64_t)&unk_1001A1EC8, (uint64_t)v27);

  swift_release();
  uint64_t v28 = sub_100053028((unint64_t *)&qword_1001A19B0, (uint64_t *)&unk_1001A21F0);
  uint64_t v29 = (void *)swift_task_alloc();
  *(void *)(v0 + 688) = v29;
  *uint64_t v29 = v0;
  v29[1] = sub_1000486FC;
  uint64_t v30 = *(void *)(v0 + 416);
  return dispatch thunk of Future.then()(v30, v23, v28);
}

uint64_t sub_1000490FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

id sub_100049130(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v1(v2, v4, v5, v7, v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();

  return v10;
}

uint64_t sub_100049208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  *(void *)(v6 + 728) = a6;
  *(unsigned char *)(v6 + 1124) = a5;
  *(void *)(v6 + 720) = a4;
  *(void *)(v6 + 712) = a3;
  *(void *)(v6 + 704) = a2;
  *(void *)(v6 + 696) = a1;
  uint64_t v7 = type metadata accessor for AppOffer();
  *(void *)(v6 + 736) = v7;
  *(void *)(v6 + 744) = *(void *)(v7 - 8);
  *(void *)(v6 + 752) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for State();
  *(void *)(v6 + 760) = v8;
  *(void *)(v6 + 768) = *(void *)(v8 - 8);
  *(void *)(v6 + 776) = swift_task_alloc();
  *(void *)(v6 + 784) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for App.Kind();
  *(void *)(v6 + 792) = v9;
  *(void *)(v6 + 800) = *(void *)(v9 - 8);
  *(void *)(v6 + 808) = swift_task_alloc();
  type metadata accessor for AdamID();
  *(void *)(v6 + 816) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for App();
  *(void *)(v6 + 824) = v10;
  *(void *)(v6 + 832) = *(void *)(v10 - 8);
  *(void *)(v6 + 840) = swift_task_alloc();
  type metadata accessor for LogMessage.StringInterpolation();
  *(void *)(v6 + 848) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for OSLogger();
  *(void *)(v6 + 856) = v11;
  *(void *)(v6 + 864) = *(void *)(v11 - 8);
  *(void *)(v6 + 872) = swift_task_alloc();
  return _swift_task_switch(sub_1000494B4, 0, 0);
}

uint64_t sub_1000494B4()
{
  uint64_t v1 = *(void *)(v0 + 704) + qword_1001A53D8;
  swift_beginAccess();
  sub_1000451AC(v1, v0 + 96);
  if (*(void *)(v0 + 120))
  {
    uint64_t v11 = *(void *)(v0 + 720);
    uint64_t v2 = *(void *)(v0 + 712);
    sub_100031C10((long long *)(v0 + 96), v0 + 16);
    sub_10002EB60(&qword_1001A2130);
    type metadata accessor for ObjectGraph();
    inject<A, B>(_:from:)();
    sub_10002EB60((uint64_t *)&unk_1001A32F0);
    inject<A, B>(_:from:)();
    sub_10002EE34(0, (unint64_t *)&qword_1001A5470);
    inject<A, B>(_:from:)();
    uint64_t v3 = *(void **)(v0 + 632);
    uint64_t v4 = (void *)sub_100052D14(v3);
    *(void *)(v0 + 880) = v4;

    sub_10002EE34(0, &qword_1001A21D0);
    inject<A, B>(_:from:)();
    *(void *)(v0 + 888) = *(void *)(v0 + 680);
    uint64_t v5 = sub_10002EC6C((void *)(v0 + 136), *(void *)(v0 + 160));
    inject<A, B>(_:from:)();
    uint64_t v6 = *(void **)(v0 + 672);
    *(void *)(v0 + 896) = sub_1000F0800(v2, v11, v4, (uint64_t)v6, *v5);

    uint64_t v7 = sub_10002EB60(&qword_1001A1ED0);
    uint64_t v8 = sub_100053028((unint64_t *)&qword_1001A2150, &qword_1001A1ED0);
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 904) = v9;
    void *v9 = v0;
    v9[1] = sub_100049784;
    return dispatch thunk of Future.then()(v0 + 656, v7, v8);
  }
  else
  {
    sub_100034B8C(v0 + 96, &qword_1001A1D90);
    sub_10002EB60((uint64_t *)&unk_1001A3320);
    return dispatch thunk of BaseObjectGraph.noMemberFound<A>(toSatisfy:)();
  }
}

uint64_t sub_100049784()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 912) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    uint64_t v3 = sub_1000498C0;
  }
  else
  {
    *(void *)(v2 + 920) = *(void *)(v2 + 656);
    uint64_t v3 = sub_1000499DC;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000498C0()
{
  uint64_t v1 = *(void **)(v0 + 880);

  sub_10002ED08(v0 + 56);
  sub_10002ED08(v0 + 136);
  sub_10002ED08(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000499DC()
{
  uint64_t v42 = (void *)(v0 + 16);
  if (qword_1001A0E68 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 920);
  uint64_t v47 = *(void *)(v0 + 912);
  uint64_t v2 = *(void *)(v0 + 872);
  uint64_t v3 = *(void *)(v0 + 864);
  uint64_t v4 = *(void *)(v0 + 856);
  uint64_t v5 = sub_10002F6AC(v4, (uint64_t)qword_1001AE380);
  *(void *)(v0 + 928) = v5;
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(void *)(v0 + 936) = v6;
  *(void *)(v0 + 944) = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  uint64_t v40 = v6;
  uint64_t v41 = v5;
  ((void (*)(uint64_t))v6)(v2);
  *(void *)(v0 + 952) = sub_10002EB60((uint64_t *)&unk_1001A19E0);
  uint64_t v7 = *(void *)(type metadata accessor for LogMessage() - 8);
  *(void *)(v0 + 960) = *(void *)(v7 + 72);
  *(_DWORD *)(v0 + 1120) = *(_DWORD *)(v7 + 80);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v8._countAndFlagsBits = 0xD000000000000014;
  v8._object = (void *)0x800000010015AF20;
  LogMessage.StringInterpolation.appendLiteral(_:)(v8);
  id v9 = [v1 id];
  *(void *)(v0 + 360) = sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
  *(void *)(v0 + 336) = v9;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_100034B8C(v0 + 336, &qword_1001A1C50);
  v10._object = (void *)0x800000010015AF40;
  v10._countAndFlagsBits = 0xD000000000000011;
  LogMessage.StringInterpolation.appendLiteral(_:)(v10);
  uint64_t v11 = sub_100073184();
  *(void *)(v0 + 392) = &type metadata for String;
  *(void *)(v0 + 368) = v11;
  *(void *)(v0 + 376) = v12;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_100034B8C(v0 + 368, &qword_1001A1C50);
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v13);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(void *)(v0 + 968) = v14;
  *(void *)(v0 + 976) = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v14(v2, v4);
  id v15 = [v1 id];
  [v15 int64value];
  AdamID.init(value:)();
  uint64_t v16 = *(void **)(v0 + 920);
  uint64_t v17 = *(void **)(v0 + 888);
  if (v47)
  {
    uint64_t v18 = *(void **)(v0 + 880);

LABEL_5:
    sub_10002ED08(v0 + 56);
    sub_10002ED08(v0 + 136);
    sub_10002ED08((uint64_t)v42);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
    return v19();
  }
  unsigned __int16 v43 = v14;
  unint64_t v21 = *(char **)(v0 + 784);
  uint64_t v22 = *(void *)(v0 + 768);
  uint64_t v45 = *(void *)(v0 + 760);
  int v48 = *(unsigned __int8 *)(v0 + 1124);
  uint64_t v23 = *(void *)(v0 + 720);
  (*(void (**)(void, void, void))(*(void *)(v0 + 800) + 104))(*(void *)(v0 + 808), enum case for App.Kind.store(_:), *(void *)(v0 + 792));
  App.init(id:kind:)();

  sub_10002EE34(0, &qword_1001A1ED8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v21, v23, v45);
  id v24 = sub_1000A6448(v16, (void (**)(char *, uint64_t))v17, v21, v48);
  *(void *)(v0 + 984) = v24;
  if (!v24)
  {
    id v44 = *(void **)(v0 + 888);
    uint64_t v46 = *(void **)(v0 + 920);
    uint64_t v37 = *(void **)(v0 + 880);
    uint64_t v38 = *(void *)(v0 + 840);
    uint64_t v39 = *(void *)(v0 + 832);
    uint64_t v49 = *(void *)(v0 + 824);
    sub_10002EC6C(v42, *(void *)(v0 + 40));
    dispatch thunk of AppStateController.clearWaiting(forApp:refreshState:)();
    type metadata accessor for ASCAppOfferActionError(0);
    *(void *)(v0 + 640) = 1;
    sub_100061044((uint64_t)&_swiftEmptyArrayStorage);
    sub_100052938((unint64_t *)&qword_1001A1300, type metadata accessor for ASCAppOfferActionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();

    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v49);
    goto LABEL_5;
  }
  uint64_t v25 = v24;
  uint64_t v26 = *(void *)(v0 + 872);
  uint64_t v27 = *(void *)(v0 + 856);
  uint64_t v28 = *(void **)(v0 + 728);
  v40(v26, v41, v27);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v29._countAndFlagsBits = 0x697474696D627553;
  v29._object = (void *)0xEB0000000020676ELL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v29);
  id v30 = [v25 itemID];
  uint64_t v31 = sub_10002EE34(0, (unint64_t *)&qword_1001A1CF0);
  *(void *)(v0 + 992) = v31;
  *(void *)(v0 + 200) = v31;
  *(void *)(v0 + 176) = v30;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_100034B8C(v0 + 176, &qword_1001A1C50);
  v32._countAndFlagsBits = 0x73707061206F7420;
  v32._object = (void *)0xED00006465726F74;
  LogMessage.StringInterpolation.appendLiteral(_:)(v32);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  v43(v26, v27);
  uint64_t v33 = v28[3];
  uint64_t v34 = v28[4];
  sub_10002EC6C(v28, v33);
  uint64_t v35 = *(void *)(v34 + 8);
  char v36 = (void *)swift_task_alloc();
  *(void *)(v0 + 1000) = v36;
  *char v36 = v0;
  v36[1] = sub_10004A174;
  return dispatch thunk of PurchaseManager.start(_:)(v25, v33, v35);
}

uint64_t sub_10004A174(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 1008) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10004BB04;
  }
  else
  {
    *(unsigned char *)(v4 + 1125) = a1 & 1;
    uint64_t v5 = sub_10004A2A0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10004A2A0()
{
  int v1 = *(unsigned __int8 *)(v0 + 1125);
  (*(void (**)(void, void, void))(v0 + 936))(*(void *)(v0 + 872), *(void *)(v0 + 928), *(void *)(v0 + 856));
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  uint64_t v2 = *(void *)(v0 + 992);
  uint64_t v3 = *(void **)(v0 + 984);
  uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v0 + 968);
  if (v1 == 1)
  {
    uint64_t v4 = *(void *)(v0 + 872);
    uint64_t v5 = *(void *)(v0 + 856);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v6._countAndFlagsBits = 0xD000000000000017;
    v6._object = (void *)0x800000010015AF80;
    LogMessage.StringInterpolation.appendLiteral(_:)(v6);
    id v7 = [v3 itemID];
    *(void *)(v0 + 488) = v2;
    *(void *)(v0 + 464) = v7;
    LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
    sub_100034B8C(v0 + 464, &qword_1001A1C50);
    v8._countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v8);
    LogMessage.init(stringInterpolation:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    v38(v4, v5);
    if (sub_1000733D0())
    {
      id v9 = *(void **)(v0 + 984);
      uint64_t v36 = *(void *)(v0 + 992);
      uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v0 + 968);
      uint64_t v10 = *(void *)(v0 + 872);
      uint64_t v11 = *(void *)(v0 + 856);
      (*(void (**)(uint64_t, void, uint64_t))(v0 + 936))(v10, *(void *)(v0 + 928), v11);
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v12._countAndFlagsBits = 0xD000000000000018;
      v12._object = (void *)0x800000010015AFA0;
      LogMessage.StringInterpolation.appendLiteral(_:)(v12);
      id v13 = [v9 itemID];
      *(void *)(v0 + 456) = v36;
      *(void *)(v0 + 432) = v13;
      LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
      sub_100034B8C(v0 + 432, &qword_1001A1C50);
      v14._countAndFlagsBits = 0;
      v14._object = (void *)0xE000000000000000;
      LogMessage.StringInterpolation.appendLiteral(_:)(v14);
      LogMessage.init(stringInterpolation:)();
      Logger.info(_:)();
      swift_bridgeObjectRelease();
      v37(v10, v11);
      uint64_t v16 = *(void *)(v0 + 80);
      uint64_t v15 = *(void *)(v0 + 88);
      sub_10002EC6C((void *)(v0 + 56), v16);
      uint64_t v17 = *(void *)(v15 + 8);
      uint64_t v18 = (void *)swift_task_alloc();
      *(void *)(v0 + 1016) = v18;
      *uint64_t v18 = v0;
      v18[1] = sub_10004A8A4;
      return dispatch thunk of PurchaseHistory.update(in:)(0, v16, v17);
    }
  }
  else
  {
    uint64_t v19 = *(void *)(v0 + 872);
    uint64_t v20 = *(void *)(v0 + 856);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v21._countAndFlagsBits = 0x6573616863727550;
    v21._object = (void *)0xED000020726F6620;
    LogMessage.StringInterpolation.appendLiteral(_:)(v21);
    id v22 = [v3 itemID];
    *(void *)(v0 + 296) = v2;
    *(void *)(v0 + 272) = v22;
    LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
    sub_100034B8C(v0 + 272, &qword_1001A1C50);
    v23._object = (void *)0x800000010015AF60;
    v23._countAndFlagsBits = 0xD000000000000011;
    LogMessage.StringInterpolation.appendLiteral(_:)(v23);
    LogMessage.init(stringInterpolation:)();
    Logger.warning(_:)();
    swift_bridgeObjectRelease();
    v38(v19, v20);
  }
  if ([*(id *)(v0 + 888) shouldInstallParentApp])
  {
    id v24 = (void *)swift_task_alloc();
    *(void *)(v0 + 1056) = v24;
    *id v24 = v0;
    v24[1] = sub_10004B298;
    uint64_t v25 = *(void *)(v0 + 840);
    return sub_1000B99B0(v25, v0 + 16);
  }
  else
  {
    uint64_t v26 = *(void *)(v0 + 840);
    uint64_t v27 = *(void *)(v0 + 832);
    uint64_t v28 = *(void *)(v0 + 824);
    uint64_t v29 = *(void *)(v0 + 40);
    uint64_t v30 = *(void *)(v0 + 48);
    sub_10002EC6C((void *)(v0 + 16), v29);
    sub_10002EB60((uint64_t *)&unk_1001A1EE0);
    unint64_t v31 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
    uint64_t v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = xmmword_10014CED0;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v27 + 16))(v32 + v31, v26, v28);
    uint64_t v33 = sub_10011A144(v32);
    *(void *)(v0 + 1064) = v33;
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    uint64_t v34 = (void *)swift_task_alloc();
    *(void *)(v0 + 1072) = v34;
    *uint64_t v34 = v0;
    v34[1] = sub_10004B528;
    return dispatch thunk of AppStateController.reloadState(forApps:synchronizing:)(v33, 0, v29, v30);
  }
}

uint64_t sub_10004A8A4()
{
  *(void *)(*(void *)v1 + 1024) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10004BE58;
  }
  else {
    uint64_t v2 = sub_10004A9B8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10004A9B8()
{
  uint64_t v1 = *(void *)(v0 + 992);
  uint64_t v2 = *(void **)(v0 + 984);
  (*(void (**)(void, void, void))(v0 + 936))(*(void *)(v0 + 872), *(void *)(v0 + 928), *(void *)(v0 + 856));
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v3._object = (void *)0x800000010015B000;
  v3._countAndFlagsBits = 0xD000000000000017;
  LogMessage.StringInterpolation.appendLiteral(_:)(v3);
  id v4 = [v2 itemID];
  *(void *)(v0 + 232) = v1;
  *(void *)(v0 + 208) = v4;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_100034B8C(v0 + 208, &qword_1001A1C50);
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v5);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(v0 + 840);
  uint64_t v7 = *(void *)(v0 + 832);
  uint64_t v8 = *(void *)(v0 + 824);
  (*(void (**)(void, void))(v0 + 968))(*(void *)(v0 + 872), *(void *)(v0 + 856));
  uint64_t v9 = *(void *)(v0 + 40);
  uint64_t v10 = *(void *)(v0 + 48);
  sub_10002EC6C((void *)(v0 + 16), v9);
  sub_10002EB60((uint64_t *)&unk_1001A1EE0);
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_10014CED0;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 16))(v12 + v11, v6, v8);
  id v13 = sub_10011A144(v12);
  *(void *)(v0 + 1032) = v13;
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  Swift::String v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 1040) = v14;
  *Swift::String v14 = v0;
  v14[1] = sub_10004AC50;
  return dispatch thunk of AppStateController.reloadState(forApps:synchronizing:)(v13, 0, v9, v10);
}

uint64_t sub_10004AC50()
{
  *(void *)(*(void *)v1 + 1048) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10004C190;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_10004AD6C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10004AD6C()
{
  uint64_t v1 = *(void *)(v0 + 784);
  uint64_t v38 = *(void *)(v0 + 768);
  uint64_t v36 = *(void *)(v0 + 760);
  uint64_t v2 = *(void *)(v0 + 752);
  uint64_t v3 = *(void *)(v0 + 744);
  uint64_t v34 = *(void *)(v0 + 736);
  sub_10002EC6C((void *)(v0 + 16), *(void *)(v0 + 40));
  dispatch thunk of AppStateController.clearWaiting(forApp:refreshState:)();
  uint64_t v37 = (void *)(v0 + 16);
  sub_10002EC6C((void *)(v0 + 16), *(void *)(v0 + 40));
  sub_100053098();
  AppStateController.state(forApp:applying:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v34);
  uint64_t v4 = *(void (**)(uint64_t, void, uint64_t))(v38 + 104);
  v4(v1, enum case for State.unknown(_:), v36);
  char v5 = static State.== infix(_:_:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
  v6(v1, v36);
  if (v5)
  {
    uint64_t v35 = v4;
    uint64_t v28 = *(void *)(v0 + 992);
    uint64_t v7 = *(void **)(v0 + 984);
    unint64_t v31 = *(void (**)(uint64_t, uint64_t))(v0 + 968);
    id v29 = *(id *)(v0 + 920);
    uint64_t v8 = *(void *)(v0 + 872);
    uint64_t v9 = *(void *)(v0 + 856);
    (*(void (**)(uint64_t, void, uint64_t))(v0 + 936))(v8, *(void *)(v0 + 928), v9);
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v10._object = (void *)0x800000010015AFE0;
    v10._countAndFlagsBits = 0xD00000000000001CLL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v10);
    *(void *)(v0 + 240) = [v7 itemID];
    *(void *)(v0 + 264) = v28;
    LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
    sub_100034B8C(v0 + 240, &qword_1001A1C50);
    v11._countAndFlagsBits = 0;
    v11._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v11);
    LogMessage.init(stringInterpolation:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    v31(v8, v9);
    LOBYTE(v7) = [v29 flags];
    sub_10002EC6C(v37, *(void *)(v0 + 40));
    uint64_t v12 = type metadata accessor for AppPurchaseType();
    uint64_t v27 = *(void **)(v0 + 984);
    id v30 = *(id *)(v0 + 888);
    uint64_t v32 = *(void **)(v0 + 920);
    id v13 = *(void **)(v0 + 880);
    uint64_t v14 = *(void *)(v0 + 784);
    uint64_t v33 = *(void *)(v0 + 776);
    uint64_t v15 = *(void *)(v0 + 760);
    if ((v7 & 8) != 0) {
      uint64_t v16 = (unsigned int *)&enum case for AppPurchaseType.preorder(_:);
    }
    else {
      uint64_t v16 = (unsigned int *)&enum case for AppPurchaseType.standard(_:);
    }
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v12 - 8) + 104))(v14, *v16, v12);
    v35(v14, enum case for State.purchased(_:), v15);
    dispatch thunk of AppStateController.transitionState(forApp:to:)();

    v6(v14, v15);
    v6(v33, v15);
  }
  else
  {
    uint64_t v17 = *(void **)(v0 + 984);
    uint64_t v18 = *(void **)(v0 + 920);
    uint64_t v19 = *(void **)(v0 + 888);
    uint64_t v20 = *(void *)(v0 + 776);
    uint64_t v21 = *(void *)(v0 + 760);

    v6(v20, v21);
  }
  uint64_t v22 = *(void *)(v0 + 696);
  (*(void (**)(void, void))(*(void *)(v0 + 832) + 8))(*(void *)(v0 + 840), *(void *)(v0 + 824));
  uint64_t v23 = enum case for ActionOutcome.performed(_:);
  uint64_t v24 = type metadata accessor for ActionOutcome();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 104))(v22, v23, v24);
  sub_10002ED08(v0 + 56);
  sub_10002ED08(v0 + 136);
  sub_10002ED08((uint64_t)v37);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
  return v25();
}

uint64_t sub_10004B298()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10004B394, 0, 0);
}

uint64_t sub_10004B394()
{
  uint64_t v1 = *(void **)(v0 + 984);
  uint64_t v2 = *(void **)(v0 + 920);
  uint64_t v3 = *(void **)(v0 + 888);

  uint64_t v4 = *(void *)(v0 + 696);
  (*(void (**)(void, void))(*(void *)(v0 + 832) + 8))(*(void *)(v0 + 840), *(void *)(v0 + 824));
  uint64_t v5 = enum case for ActionOutcome.performed(_:);
  uint64_t v6 = type metadata accessor for ActionOutcome();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104))(v4, v5, v6);
  sub_10002ED08(v0 + 56);
  sub_10002ED08(v0 + 136);
  sub_10002ED08(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_10004B528()
{
  *(void *)(*(void *)v1 + 1080) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10004C4EC;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_10004B644;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10004B644()
{
  uint64_t v1 = (void *)v0[123];
  uint64_t v2 = (void *)v0[115];
  uint64_t v3 = (void *)v0[111];
  uint64_t v4 = (void *)v0[110];
  sub_10002EC6C(v0 + 2, v0[5]);
  dispatch thunk of AppStateController.clearWaiting(forApp:refreshState:)();

  uint64_t v5 = v0[87];
  (*(void (**)(void, void))(v0[104] + 8))(v0[105], v0[103]);
  uint64_t v6 = enum case for ActionOutcome.performed(_:);
  uint64_t v7 = type metadata accessor for ActionOutcome();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 104))(v5, v6, v7);
  sub_10002ED08((uint64_t)(v0 + 7));
  sub_10002ED08((uint64_t)(v0 + 17));
  sub_10002ED08((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10004B804()
{
  *(void *)(*(void *)v1 + 1112) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = sub_10004C848;
  }
  else {
    uint64_t v2 = sub_10004B938;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10004B938()
{
  uint64_t v1 = (void *)v0[123];
  uint64_t v2 = (void *)v0[115];
  uint64_t v3 = (void *)v0[111];
  uint64_t v4 = (void *)v0[110];
  sub_10002EC6C(v0 + 2, v0[5]);
  dispatch thunk of AppStateController.clearWaiting(forApp:refreshState:)();

  swift_errorRelease();
  uint64_t v5 = v0[87];
  (*(void (**)(void, void))(v0[104] + 8))(v0[105], v0[103]);
  uint64_t v6 = enum case for ActionOutcome.performed(_:);
  uint64_t v7 = type metadata accessor for ActionOutcome();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 104))(v5, v6, v7);
  sub_10002ED08((uint64_t)(v0 + 7));
  sub_10002ED08((uint64_t)(v0 + 17));
  sub_10002ED08((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10004BB04()
{
  *(void *)(v0 + 1088) = *(void *)(v0 + 1008);
  id v16 = *(id *)(v0 + 984);
  uint64_t v17 = *(void *)(v0 + 992);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v0 + 968);
  uint64_t v18 = *(void *)(v0 + 856);
  uint64_t v19 = *(void *)(v0 + 872);
  uint64_t v22 = *(void *)(v0 + 840);
  uint64_t v1 = *(void *)(v0 + 832);
  uint64_t v21 = *(void *)(v0 + 824);
  (*(void (**)(void))(v0 + 936))();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v2._countAndFlagsBits = 0x6573616863727550;
  v2._object = (void *)0xED000020726F6620;
  LogMessage.StringInterpolation.appendLiteral(_:)(v2);
  id v3 = [v16 itemID];
  *(void *)(v0 + 520) = v17;
  *(void *)(v0 + 496) = v3;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_100034B8C(v0 + 496, &qword_1001A1C50);
  v4._object = (void *)0x800000010015AEC0;
  v4._countAndFlagsBits = 0xD000000000000011;
  LogMessage.StringInterpolation.appendLiteral(_:)(v4);
  swift_getErrorValue();
  uint64_t v5 = *(void *)(v0 + 584);
  uint64_t v6 = *(void *)(v0 + 592);
  *(void *)(v0 + 552) = v6;
  uint64_t v7 = sub_100031A88((uint64_t *)(v0 + 528));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(v7, v5, v6);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C(v0 + 528, &qword_1001A1C50);
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v8);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  v20(v19, v18);
  uint64_t v9 = *(void *)(v0 + 40);
  uint64_t v10 = *(void *)(v0 + 48);
  sub_10002EC6C((void *)(v0 + 16), v9);
  sub_10002EB60((uint64_t *)&unk_1001A1EE0);
  unint64_t v11 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_10014CED0;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v1 + 16))(v12 + v11, v22, v21);
  id v13 = sub_10011A144(v12);
  *(void *)(v0 + 1096) = v13;
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 1104) = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_10004B804;
  return dispatch thunk of AppStateController.reloadState(forApps:synchronizing:)(v13, 0, v9, v10);
}

uint64_t sub_10004BE58()
{
  uint64_t v1 = *(void *)(v0 + 992);
  Swift::String v2 = *(void **)(v0 + 984);
  (*(void (**)(void))(v0 + 936))();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v3._object = (void *)0x800000010015AFC0;
  v3._countAndFlagsBits = 0xD00000000000001FLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v3);
  id v4 = [v2 itemID];
  *(void *)(v0 + 424) = v1;
  *(void *)(v0 + 400) = v4;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_100034B8C(v0 + 400, &qword_1001A1C50);
  v5._countAndFlagsBits = 0x6E6F73616572202CLL;
  v5._object = (void *)0xEA0000000000203ALL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v5);
  swift_getErrorValue();
  uint64_t v6 = *(void *)(v0 + 608);
  uint64_t v7 = *(void *)(v0 + 616);
  *(void *)(v0 + 328) = v7;
  Swift::String v8 = sub_100031A88((uint64_t *)(v0 + 304));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v8, v6, v7);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C(v0 + 304, &qword_1001A1C50);
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v9);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  uint64_t v10 = *(void *)(v0 + 840);
  uint64_t v11 = *(void *)(v0 + 832);
  uint64_t v12 = *(void *)(v0 + 824);
  (*(void (**)(void, void))(v0 + 968))(*(void *)(v0 + 872), *(void *)(v0 + 856));
  uint64_t v13 = *(void *)(v0 + 40);
  uint64_t v14 = *(void *)(v0 + 48);
  sub_10002EC6C((void *)(v0 + 16), v13);
  sub_10002EB60((uint64_t *)&unk_1001A1EE0);
  unint64_t v15 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_10014CED0;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 16))(v16 + v15, v10, v12);
  uint64_t v17 = sub_10011A144(v16);
  *(void *)(v0 + 1032) = v17;
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 1040) = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_10004AC50;
  return dispatch thunk of AppStateController.reloadState(forApps:synchronizing:)(v17, 0, v13, v14);
}

uint64_t sub_10004C190()
{
  swift_bridgeObjectRelease();
  *(void *)(v0 + 1088) = *(void *)(v0 + 1048);
  id v16 = *(id *)(v0 + 984);
  uint64_t v17 = *(void *)(v0 + 992);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v0 + 968);
  uint64_t v18 = *(void *)(v0 + 856);
  uint64_t v19 = *(void *)(v0 + 872);
  uint64_t v22 = *(void *)(v0 + 840);
  uint64_t v1 = *(void *)(v0 + 832);
  uint64_t v21 = *(void *)(v0 + 824);
  (*(void (**)(void))(v0 + 936))();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v2._countAndFlagsBits = 0x6573616863727550;
  v2._object = (void *)0xED000020726F6620;
  LogMessage.StringInterpolation.appendLiteral(_:)(v2);
  id v3 = [v16 itemID];
  *(void *)(v0 + 520) = v17;
  *(void *)(v0 + 496) = v3;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_100034B8C(v0 + 496, &qword_1001A1C50);
  v4._object = (void *)0x800000010015AEC0;
  v4._countAndFlagsBits = 0xD000000000000011;
  LogMessage.StringInterpolation.appendLiteral(_:)(v4);
  swift_getErrorValue();
  uint64_t v5 = *(void *)(v0 + 584);
  uint64_t v6 = *(void *)(v0 + 592);
  *(void *)(v0 + 552) = v6;
  uint64_t v7 = sub_100031A88((uint64_t *)(v0 + 528));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(v7, v5, v6);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C(v0 + 528, &qword_1001A1C50);
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v8);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  v20(v19, v18);
  uint64_t v9 = *(void *)(v0 + 40);
  uint64_t v10 = *(void *)(v0 + 48);
  sub_10002EC6C((void *)(v0 + 16), v9);
  sub_10002EB60((uint64_t *)&unk_1001A1EE0);
  unint64_t v11 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_10014CED0;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v1 + 16))(v12 + v11, v22, v21);
  uint64_t v13 = sub_10011A144(v12);
  *(void *)(v0 + 1096) = v13;
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 1104) = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_10004B804;
  return dispatch thunk of AppStateController.reloadState(forApps:synchronizing:)(v13, 0, v9, v10);
}

uint64_t sub_10004C4EC()
{
  swift_bridgeObjectRelease();
  *(void *)(v0 + 1088) = *(void *)(v0 + 1080);
  id v16 = *(id *)(v0 + 984);
  uint64_t v17 = *(void *)(v0 + 992);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v0 + 968);
  uint64_t v18 = *(void *)(v0 + 856);
  uint64_t v19 = *(void *)(v0 + 872);
  uint64_t v22 = *(void *)(v0 + 840);
  uint64_t v1 = *(void *)(v0 + 832);
  uint64_t v21 = *(void *)(v0 + 824);
  (*(void (**)(void))(v0 + 936))();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v2._countAndFlagsBits = 0x6573616863727550;
  v2._object = (void *)0xED000020726F6620;
  LogMessage.StringInterpolation.appendLiteral(_:)(v2);
  id v3 = [v16 itemID];
  *(void *)(v0 + 520) = v17;
  *(void *)(v0 + 496) = v3;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_100034B8C(v0 + 496, &qword_1001A1C50);
  v4._object = (void *)0x800000010015AEC0;
  v4._countAndFlagsBits = 0xD000000000000011;
  LogMessage.StringInterpolation.appendLiteral(_:)(v4);
  swift_getErrorValue();
  uint64_t v5 = *(void *)(v0 + 584);
  uint64_t v6 = *(void *)(v0 + 592);
  *(void *)(v0 + 552) = v6;
  uint64_t v7 = sub_100031A88((uint64_t *)(v0 + 528));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(v7, v5, v6);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C(v0 + 528, &qword_1001A1C50);
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v8);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  v20(v19, v18);
  uint64_t v9 = *(void *)(v0 + 40);
  uint64_t v10 = *(void *)(v0 + 48);
  sub_10002EC6C((void *)(v0 + 16), v9);
  sub_10002EB60((uint64_t *)&unk_1001A1EE0);
  unint64_t v11 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_10014CED0;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v1 + 16))(v12 + v11, v22, v21);
  uint64_t v13 = sub_10011A144(v12);
  *(void *)(v0 + 1096) = v13;
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 1104) = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_10004B804;
  return dispatch thunk of AppStateController.reloadState(forApps:synchronizing:)(v13, 0, v9, v10);
}

uint64_t sub_10004C848()
{
  uint64_t v1 = *(void **)(v0 + 984);
  Swift::String v2 = *(void **)(v0 + 920);
  id v3 = *(void **)(v0 + 888);
  uint64_t v4 = *(void *)(v0 + 840);
  uint64_t v5 = *(void *)(v0 + 832);
  uint64_t v6 = *(void *)(v0 + 824);

  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  sub_10002ED08(v0 + 56);
  sub_10002ED08(v0 + 136);
  sub_10002ED08(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_10004C9A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[37] = a3;
  v4[38] = a4;
  v4[35] = a1;
  v4[36] = a2;
  uint64_t v5 = type metadata accessor for UUID();
  v4[39] = v5;
  v4[40] = *(void *)(v5 - 8);
  v4[41] = swift_task_alloc();
  type metadata accessor for LogMessage.StringInterpolation();
  v4[42] = swift_task_alloc();
  v4[43] = swift_task_alloc();
  v4[44] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OSLogger();
  v4[45] = v6;
  v4[46] = *(void *)(v6 - 8);
  v4[47] = swift_task_alloc();
  v4[48] = swift_task_alloc();
  v4[49] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for AppInstallationType();
  v4[50] = v7;
  v4[51] = *(void *)(v7 - 8);
  v4[52] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for AppOffer();
  v4[53] = v8;
  v4[54] = *(void *)(v8 - 8);
  v4[55] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for State();
  v4[56] = v9;
  v4[57] = *(void *)(v9 - 8);
  v4[58] = swift_task_alloc();
  v4[59] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for App.Kind();
  v4[60] = v10;
  v4[61] = *(void *)(v10 - 8);
  v4[62] = swift_task_alloc();
  type metadata accessor for AdamID();
  v4[63] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for App();
  v4[64] = v11;
  v4[65] = *(void *)(v11 - 8);
  v4[66] = swift_task_alloc();
  return _swift_task_switch(sub_10004CD30, 0, 0);
}

uint64_t sub_10004CD30()
{
  uint64_t v1 = *(void *)(v0 + 288) + qword_1001A53D8;
  swift_beginAccess();
  sub_1000451AC(v1, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    Swift::String v2 = *(void **)(v0 + 296);
    sub_100031C10((long long *)(v0 + 56), v0 + 16);
    id v3 = [v2 id];
    [v3 int64value];
    AdamID.init(value:)();
    uint64_t v5 = *(void *)(v0 + 472);
    uint64_t v38 = *(void *)(v0 + 456);
    uint64_t v39 = *(void *)(v0 + 464);
    uint64_t v6 = *(void *)(v0 + 440);
    uint64_t v7 = *(void *)(v0 + 432);
    uint64_t v40 = *(void *)(v0 + 416);
    uint64_t v41 = *(void *)(v0 + 448);
    uint64_t v42 = *(void *)(v0 + 408);
    uint64_t v43 = *(void *)(v0 + 400);
    uint64_t v36 = *(void *)(v0 + 424);
    id v37 = *(id *)(v0 + 296);
    (*(void (**)(void, void, void))(*(void *)(v0 + 488) + 104))(*(void *)(v0 + 496), enum case for App.Kind.store(_:), *(void *)(v0 + 480));
    App.init(id:kind:)();

    sub_10002EC6C((void *)(v0 + 16), *(void *)(v0 + 40));
    sub_100053098();
    AppStateController.state(forApp:applying:)();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v36);
    sub_10002EC6C((void *)(v0 + 16), *(void *)(v0 + 40));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v39, v5, v41);
    AppInstallationType.init(_:)();
    dispatch thunk of AppStateController.setWaiting(forApp:installationType:)();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v40, v43);
    id v8 = [v37 bundleID];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v9 = objc_allocWithZone((Class)ASDSystemAppMetadata);
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v11 = [v9 initWithBundleID:v10];
    *(void *)(v0 + 536) = v11;

    [v11 setUserInitiated:1];
    if (qword_1001A0E68 != -1) {
      swift_once();
    }
    uint64_t v12 = *(void *)(v0 + 392);
    uint64_t v13 = *(void *)(v0 + 360);
    uint64_t v14 = *(void *)(v0 + 368);
    uint64_t v15 = sub_10002F6AC(v13, (uint64_t)qword_1001AE380);
    *(void *)(v0 + 544) = v15;
    id v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
    *(void *)(v0 + 552) = v16;
    *(void *)(v0 + 560) = (v14 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v16(v12, v15, v13);
    *(void *)(v0 + 568) = sub_10002EB60((uint64_t *)&unk_1001A19E0);
    uint64_t v17 = *(void *)(type metadata accessor for LogMessage() - 8);
    *(void *)(v0 + 576) = *(void *)(v17 + 72);
    *(_DWORD *)(v0 + 616) = *(_DWORD *)(v17 + 80);
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v18._object = (void *)0x800000010015AEA0;
    v18._countAndFlagsBits = 0xD000000000000016;
    LogMessage.StringInterpolation.appendLiteral(_:)(v18);
    id v19 = [v11 bundleID];
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v23 = v22;

      *(void *)(v0 + 152) = &type metadata for String;
      *(void *)(v0 + 128) = v21;
      *(void *)(v0 + 136) = v23;
    }
    else
    {
      *(_OWORD *)(v0 + 128) = 0u;
      *(_OWORD *)(v0 + 144) = 0u;
    }
    uint64_t v24 = *(void *)(v0 + 392);
    uint64_t v25 = *(void *)(v0 + 360);
    uint64_t v26 = *(void *)(v0 + 368);
    uint64_t v27 = *(void **)(v0 + 304);
    LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
    sub_100034B8C(v0 + 128, &qword_1001A1C50);
    v28._countAndFlagsBits = 0;
    v28._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v28);
    LogMessage.init(stringInterpolation:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    id v29 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    *(void *)(v0 + 584) = v29;
    *(void *)(v0 + 592) = (v26 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v29(v24, v25);
    uint64_t v30 = v27[3];
    uint64_t v31 = v27[4];
    sub_10002EC6C(v27, v30);
    uint64_t v32 = *(void *)(v31 + 8);
    id v33 = v11;
    uint64_t v34 = (void *)swift_task_alloc();
    *(void *)(v0 + 600) = v34;
    *uint64_t v34 = v0;
    v34[1] = sub_10004D3BC;
    uint64_t v35 = *(void *)(v0 + 328);
    return dispatch thunk of PurchaseManager.install(_:)(v35, v33, v30, v32);
  }
  else
  {
    sub_100034B8C(v0 + 56, &qword_1001A1D90);
    sub_10002EB60((uint64_t *)&unk_1001A3320);
    return dispatch thunk of BaseObjectGraph.noMemberFound<A>(toSatisfy:)();
  }
}

uint64_t sub_10004D3BC()
{
  Swift::String v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 608) = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v3 = sub_10004D864;
  }
  else
  {
    uint64_t v4 = (void *)v2[67];
    (*(void (**)(void, void))(v2[40] + 8))(v2[41], v2[39]);

    id v3 = sub_10004D4F0;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10004D4F0()
{
  uint64_t v1 = *(void **)(v0 + 536);
  (*(void (**)(void, void, void))(v0 + 552))(*(void *)(v0 + 384), *(void *)(v0 + 544), *(void *)(v0 + 360));
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v2._countAndFlagsBits = 0x6C6174736E696552;
  v2._object = (void *)0xED000020666F206CLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v2);
  id v3 = [v1 bundleID];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;

    *(void *)(v0 + 216) = &type metadata for String;
    *(void *)(v0 + 192) = v5;
    *(void *)(v0 + 200) = v7;
  }
  else
  {
    *(_OWORD *)(v0 + 192) = 0u;
    *(_OWORD *)(v0 + 208) = 0u;
  }
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_100034B8C(v0 + 192, &qword_1001A1C50);
  v8._countAndFlagsBits = 0x6174732073616820;
  v8._object = (void *)0xEC00000064657472;
  LogMessage.StringInterpolation.appendLiteral(_:)(v8);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(v0 + 528);
  uint64_t v10 = *(void *)(v0 + 520);
  Swift::String v18 = *(void **)(v0 + 536);
  uint64_t v19 = *(void *)(v0 + 512);
  uint64_t v11 = *(void *)(v0 + 472);
  uint64_t v13 = *(void *)(v0 + 448);
  uint64_t v12 = *(void *)(v0 + 456);
  uint64_t v20 = *(void *)(v0 + 280);
  (*(void (**)(void))(v0 + 584))();
  sub_10002EC6C((void *)(v0 + 16), *(void *)(v0 + 40));
  dispatch thunk of AppStateController.clearWaiting(forApp:refreshState:)();

  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v19);
  uint64_t v14 = enum case for ActionOutcome.performed(_:);
  uint64_t v15 = type metadata accessor for ActionOutcome();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104))(v20, v14, v15);
  sub_10002ED08(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t sub_10004D864()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 552);
  uint64_t v2 = *(void *)(v0 + 544);
  id v29 = *(void **)(v0 + 536);
  uint64_t v3 = *(void *)(v0 + 376);
  uint64_t v4 = *(void *)(v0 + 360);

  v1(v3, v2, v4);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v5._countAndFlagsBits = 0x6C6174736E696552;
  v5._object = (void *)0xED000020666F206CLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v5);
  id v6 = [v29 bundleID];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;

    *(void *)(v0 + 120) = &type metadata for String;
    *(void *)(v0 + 96) = v8;
    *(void *)(v0 + 104) = v10;
    uint64_t v11 = v0 + 96;
  }
  else
  {
    uint64_t v11 = v0 + 96;
    *(_OWORD *)(v0 + 96) = 0u;
    *(_OWORD *)(v0 + 112) = 0u;
  }
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_100034B8C(v11, &qword_1001A1C50);
  v12._object = (void *)0x800000010015AEC0;
  v12._countAndFlagsBits = 0xD000000000000011;
  LogMessage.StringInterpolation.appendLiteral(_:)(v12);
  swift_getErrorValue();
  uint64_t v13 = *(void *)(v0 + 248);
  uint64_t v14 = *(void *)(v0 + 256);
  *(void *)(v0 + 184) = v14;
  uint64_t v15 = sub_100031A88((uint64_t *)(v0 + 160));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v15, v13, v14);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C(v0 + 160, &qword_1001A1C50);
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v16);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  uint64_t v26 = *(void **)(v0 + 536);
  uint64_t v17 = *(void *)(v0 + 528);
  uint64_t v18 = *(void *)(v0 + 520);
  uint64_t v28 = *(void *)(v0 + 512);
  uint64_t v19 = *(void *)(v0 + 472);
  uint64_t v20 = *(void *)(v0 + 448);
  uint64_t v21 = *(void *)(v0 + 456);
  uint64_t v27 = *(void *)(v0 + 280);
  (*(void (**)(void))(v0 + 584))();
  sub_10002EC6C((void *)(v0 + 16), *(void *)(v0 + 40));
  dispatch thunk of AppStateController.clearWaiting(forApp:refreshState:)();

  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v28);
  uint64_t v22 = enum case for ActionOutcome.performed(_:);
  uint64_t v23 = type metadata accessor for ActionOutcome();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 104))(v27, v22, v23);
  sub_10002ED08(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t sub_10004DC90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[58] = a2;
  v3[59] = a3;
  v3[57] = a1;
  sub_10002EB60(&qword_1001A2450);
  v3[60] = swift_task_alloc();
  type metadata accessor for LogMessage.StringInterpolation();
  v3[61] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OSLogger();
  v3[62] = v4;
  v3[63] = *(void *)(v4 - 8);
  v3[64] = swift_task_alloc();
  v3[65] = type metadata accessor for AppLaunchTrampolineAction();
  v3[66] = swift_task_alloc();
  uint64_t v5 = sub_10002EB60(&qword_1001A19B8);
  v3[67] = v5;
  v3[68] = *(void *)(v5 - 8);
  v3[69] = swift_task_alloc();
  v3[70] = swift_task_alloc();
  sub_10002EB60(&qword_1001A44F0);
  v3[71] = swift_task_alloc();
  v3[72] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URL();
  v3[73] = v6;
  v3[74] = *(void *)(v6 - 8);
  v3[75] = swift_task_alloc();
  v3[76] = swift_task_alloc();
  type metadata accessor for ScalarDictionary();
  v3[77] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ActionMetrics();
  v3[78] = v7;
  v3[79] = *(void *)(v7 - 8);
  v3[80] = swift_task_alloc();
  v3[81] = type metadata accessor for OpenAppAction();
  v3[82] = swift_task_alloc();
  uint64_t v8 = sub_10002EB60((uint64_t *)&unk_1001A2160);
  v3[83] = v8;
  v3[84] = *(void *)(v8 - 8);
  v3[85] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for AppOpenableDestination();
  v3[86] = v9;
  v3[87] = *(void *)(v9 - 8);
  v3[88] = swift_task_alloc();
  v3[89] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for AppInstallation();
  v3[90] = v10;
  v3[91] = *(void *)(v10 - 8);
  v3[92] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for AppOffer();
  v3[93] = v11;
  v3[94] = *(void *)(v11 - 8);
  v3[95] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for App.Kind();
  v3[96] = v12;
  v3[97] = *(void *)(v12 - 8);
  v3[98] = swift_task_alloc();
  type metadata accessor for AdamID();
  v3[99] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for App();
  v3[100] = v13;
  v3[101] = *(void *)(v13 - 8);
  v3[102] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for State();
  v3[103] = v14;
  v3[104] = *(void *)(v14 - 8);
  v3[105] = swift_task_alloc();
  v3[106] = swift_task_alloc();
  return _swift_task_switch(sub_10004E288, 0, 0);
}

uint64_t sub_10004E288()
{
  uint64_t v1 = *(void *)(v0 + 464) + qword_1001A53D8;
  swift_beginAccess();
  sub_1000451AC(v1, v0 + 96);
  if (!*(void *)(v0 + 120))
  {
    sub_100034B8C(v0 + 96, &qword_1001A1D90);
    sub_10002EB60((uint64_t *)&unk_1001A3320);
    return dispatch thunk of BaseObjectGraph.noMemberFound<A>(toSatisfy:)();
  }
  uint64_t v2 = *(void **)(v0 + 472);
  sub_100031C10((long long *)(v0 + 96), v0 + 16);
  sub_10002EC6C((void *)(v0 + 16), *(void *)(v0 + 40));
  id v3 = [v2 id];
  [v3 int64value];
  AdamID.init(value:)();
  uint64_t v124 = *(void *)(v0 + 848);
  uint64_t v5 = *(void *)(v0 + 832);
  uint64_t v127 = *(void *)(v0 + 824);
  uint64_t v129 = *(void *)(v0 + 840);
  uint64_t v6 = *(void *)(v0 + 816);
  uint64_t v7 = *(void *)(v0 + 808);
  uint64_t v125 = *(void *)(v0 + 800);
  uint64_t v8 = *(void *)(v0 + 760);
  uint64_t v9 = *(void *)(v0 + 752);
  uint64_t v122 = *(void *)(v0 + 744);
  (*(void (**)(void, void, void))(*(void *)(v0 + 776) + 104))(*(void *)(v0 + 784), enum case for App.Kind.store(_:), *(void *)(v0 + 768));
  App.init(id:kind:)();

  sub_100053098();
  AppStateController.state(forApp:applying:)();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v122);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v125);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v129, v124, v127);
  int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 88))(v129, v127);
  if (v10 == enum case for State.waiting(_:))
  {
    (*(void (**)(void, void))(*(void *)(v0 + 832) + 96))(*(void *)(v0 + 840), *(void *)(v0 + 824));
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 856) = v11;
    void *v11 = v0;
    uint64_t v12 = sub_10004F760;
LABEL_11:
    v11[1] = v12;
    uint64_t v14 = *(void *)(v0 + 464);
    uint64_t v13 = *(void *)(v0 + 472);
    uint64_t v15 = *(void *)(v0 + 456);
    return sub_100051C24(v15, v13, v14);
  }
  if (v10 != enum case for State.installing(_:))
  {
    if (v10 != enum case for State.openable(_:))
    {
      sub_10002EB60((uint64_t *)&unk_1001A5A10);
      type metadata accessor for ObjectGraph();
      inject<A, B>(_:from:)();
      if (*(unsigned char *)(*sub_10002EC6C((void *)(v0 + 136), *(void *)(v0 + 160)) + 16))
      {
        uint64_t v42 = *(void **)(v0 + 472);
        sub_10002EB60((uint64_t *)&unk_1001A5E10);
        inject<A, B>(_:from:)();
        sub_10002EC6C((void *)(v0 + 216), *(void *)(v0 + 240));
        id v43 = [v42 bundleID];
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        char v44 = dispatch thunk of PurchaseManager.isDeletableSystemApp(_:)();
        swift_bridgeObjectRelease();
        uint64_t v46 = *(void **)(v0 + 472);
        uint64_t v45 = *(void *)(v0 + 480);
        uint64_t v47 = *(void *)(v0 + 464);
        if (v44)
        {
          sub_100052538(v0 + 216, v0 + 296);
          uint64_t v48 = swift_allocObject();
          *(void *)(v48 + 16) = v47;
          *(void *)(v48 + 24) = v46;
          sub_100031C10((long long *)(v0 + 296), v48 + 32);
          uint64_t v49 = sub_10002EB60((uint64_t *)&unk_1001A21F0);
          swift_retain();
          id v50 = v46;
          uint64_t v51 = Promise.__allocating_init()();
          *(void *)(v0 + 944) = v51;
          uint64_t v52 = type metadata accessor for TaskPriority();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v45, 1, 1, v52);
          uint64_t v53 = (void *)swift_allocObject();
          v53[2] = 0;
          v53[3] = 0;
          v53[4] = &unk_1001A1E90;
          v53[5] = v48;
          v53[6] = v51;
          swift_retain();
          sub_1000F6C04(v45, (uint64_t)&unk_1001A1E98, (uint64_t)v53);
          swift_release();
          uint64_t v54 = sub_100053028((unint64_t *)&qword_1001A19B0, (uint64_t *)&unk_1001A21F0);
          unsigned int v55 = (void *)swift_task_alloc();
          *(void *)(v0 + 952) = v55;
          *unsigned int v55 = v0;
          id v56 = sub_100050848;
        }
        else
        {
          sub_100052538(v0 + 216, v0 + 256);
          uint64_t v109 = swift_allocObject();
          *(void *)(v109 + 16) = v47;
          *(void *)(v109 + 24) = v46;
          sub_100031C10((long long *)(v0 + 256), v109 + 32);
          *(unsigned char *)(v109 + 72) = 0;
          uint64_t v49 = sub_10002EB60((uint64_t *)&unk_1001A21F0);
          swift_retain();
          id v110 = v46;
          uint64_t v111 = Promise.__allocating_init()();
          *(void *)(v0 + 968) = v111;
          uint64_t v112 = type metadata accessor for TaskPriority();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v112 - 8) + 56))(v45, 1, 1, v112);
          uint64_t v113 = (void *)swift_allocObject();
          v113[2] = 0;
          v113[3] = 0;
          v113[4] = &unk_1001A1E78;
          v113[5] = v109;
          v113[6] = v111;
          swift_retain();
          sub_1000F6C04(v45, (uint64_t)&unk_1001A1E80, (uint64_t)v113);
          swift_release();
          uint64_t v54 = sub_100053028((unint64_t *)&qword_1001A19B0, (uint64_t *)&unk_1001A21F0);
          unsigned int v55 = (void *)swift_task_alloc();
          *(void *)(v0 + 976) = v55;
          *unsigned int v55 = v0;
          id v56 = sub_100050D9C;
        }
        v55[1] = v56;
        uint64_t v114 = *(void *)(v0 + 456);
        return dispatch thunk of Future.then()(v114, v49, v54);
      }
      else
      {
        if (qword_1001A0E68 != -1) {
          swift_once();
        }
        uint64_t v58 = *(void *)(v0 + 504);
        uint64_t v57 = *(void *)(v0 + 512);
        uint64_t v59 = *(void *)(v0 + 496);
        unint64_t v60 = *(void **)(v0 + 472);
        uint64_t v61 = sub_10002F6AC(v59, (uint64_t)qword_1001AE380);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16))(v57, v61, v59);
        sub_10002EB60((uint64_t *)&unk_1001A19E0);
        type metadata accessor for LogMessage();
        *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
        v62._object = (void *)0x800000010015AE60;
        v62._countAndFlagsBits = 0xD00000000000003ELL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v62);
        id v63 = [v60 id];
        *(void *)(v0 + 400) = sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
        *(void *)(v0 + 376) = v63;
        LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
        sub_100034B8C(v0 + 376, &qword_1001A1C50);
        v64._countAndFlagsBits = 0;
        v64._object = (void *)0xE000000000000000;
        LogMessage.StringInterpolation.appendLiteral(_:)(v64);
        LogMessage.init(stringInterpolation:)();
        Logger.warning(_:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v57, v59);
        uint64_t v65 = (void *)swift_task_alloc();
        *(void *)(v0 + 928) = v65;
        *uint64_t v65 = v0;
        v65[1] = sub_100050534;
        uint64_t v67 = *(void **)(v0 + 464);
        uint64_t v66 = *(void *)(v0 + 472);
        uint64_t v68 = *(void *)(v0 + 456);
        return sub_100069D1C(v68, v66, v67);
      }
    }
    uint64_t v32 = *(void *)(v0 + 840);
    uint64_t v33 = *(void *)(v0 + 712);
    uint64_t v128 = *(void *)(v0 + 704);
    uint64_t v34 = *(void *)(v0 + 696);
    uint64_t v35 = *(void *)(v0 + 688);
    uint64_t v36 = *(void **)(v0 + 472);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 832) + 96))(v32, *(void *)(v0 + 824));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32))(v33, v32, v35);
    type metadata accessor for ObjectGraph();
    inject<A, B>(_:from:)();
    sub_10002EE34(0, &qword_1001A21D0);
    inject<A, B>(_:from:)();
    v130 = *(void **)(v0 + 440);
    *(void *)(v0 + 888) = v130;
    id v37 = [v36 metrics];
    sub_10002EE34(0, (unint64_t *)&qword_1001A1D98);
    unint64_t v38 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100093170(v38);
    swift_bridgeObjectRelease();
    ScalarDictionary.init()();
    ActionMetrics.init(data:custom:)();
    id v39 = [v36 id];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v128, v33, v35);
    int v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 88))(v128, v35);
    if (v40 != enum case for AppOpenableDestination.app(_:))
    {
      if (v40 == enum case for AppOpenableDestination.messages(_:))
      {
        char v41 = 1;
        goto LABEL_32;
      }
      (*(void (**)(void, void))(*(void *)(v0 + 696) + 8))(*(void *)(v0 + 704), *(void *)(v0 + 688));
    }
    char v41 = 0;
LABEL_32:
    uint64_t v69 = *(void *)(v0 + 656);
    unsigned int v70 = *(int **)(v0 + 648);
    uint64_t v71 = *(void *)(v0 + 640);
    uint64_t v72 = *(void *)(v0 + 632);
    uint64_t v73 = *(void *)(v0 + 624);
    unsigned __int16 v74 = (unsigned __int16)[*(id *)(v0 + 472) flags];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 32))(v69, v71, v73);
    *(void *)(v69 + v70[5]) = v39;
    *(unsigned char *)(v69 + v70[6]) = v41;
    *(unsigned char *)(v69 + v70[7]) = (v74 & 0x2000) != 0;
    id v75 = [v130 externalDeepLinkURL];
    if (v75)
    {
      uint64_t v76 = v75;
      uint64_t v77 = *(void *)(v0 + 600);
      uint64_t v78 = *(void *)(v0 + 592);
      uint64_t v79 = *(void *)(v0 + 584);
      uint64_t v80 = *(void *)(v0 + 576);
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v81 = *(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 32);
      v81(v80, v77, v79);
      uint64_t v82 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v78 + 56);
      v82(v80, 0, 1, v79);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v80, 1, v79) != 1)
      {
        uint64_t v117 = *(void *)(v0 + 656);
        unint64_t v115 = v82;
        uint64_t v116 = *(void *)(v0 + 648);
        uint64_t v83 = *(void *)(v0 + 608);
        uint64_t v84 = *(void *)(v0 + 592);
        uint64_t v85 = *(void *)(v0 + 584);
        uint64_t v126 = *(void *)(v0 + 568);
        uint64_t v120 = *(void *)(v0 + 544);
        uint64_t v121 = *(void *)(v0 + 536);
        uint64_t v123 = *(void *)(v0 + 552);
        uint64_t v86 = *(uint64_t **)(v0 + 528);
        uint64_t v87 = *(int **)(v0 + 520);
        uint64_t v88 = *(void **)(v0 + 472);
        v81(v83, *(void *)(v0 + 576), v85);
        id v89 = [v88 bundleID];
        uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v118 = v91;
        uint64_t v119 = v90;

        (*(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 16))(v126, v83, v85);
        v115(v126, 0, 1, v85);
        LOBYTE(v85) = [v130 universalLinkRequired];
        *(void *)(v0 + 200) = v116;
        *(void *)(v0 + 208) = sub_100052938((unint64_t *)&qword_1001A1DA0, (void (*)(uint64_t))type metadata accessor for OpenAppAction);
        uint64_t v92 = sub_100031A88((uint64_t *)(v0 + 176));
        sub_1000529E4(v117, (uint64_t)v92, (uint64_t (*)(void))type metadata accessor for OpenAppAction);
        id v93 = [v88 metrics];
        unint64_t v94 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        sub_100093170(v94);
        swift_bridgeObjectRelease();
        ScalarDictionary.init()();
        ActionMetrics.init(data:custom:)();
        uint64_t *v86 = v119;
        v86[1] = v118;
        sub_100052980(v126, (uint64_t)v86 + v87[5], &qword_1001A44F0);
        *((unsigned char *)v86 + v87[6]) = v85;
        sub_100052980(v0 + 176, (uint64_t)v86 + v87[7], (uint64_t *)&unk_1001A2180);
        *(void *)(v0 + 80) = v87;
        *(void *)(v0 + 88) = sub_100052938(&qword_1001A1E58, (void (*)(uint64_t))type metadata accessor for AppLaunchTrampolineAction);
        uint64_t v95 = sub_100031A88((uint64_t *)(v0 + 56));
        sub_1000529E4((uint64_t)v86, (uint64_t)v95, (uint64_t (*)(void))type metadata accessor for AppLaunchTrampolineAction);
        (*(void (**)(uint64_t, void, uint64_t))(v120 + 104))(v123, enum case for ActionDispatcher.MetricsBehavior.notProcessed<A>(_:), v121);
        v96 = (void *)swift_task_alloc();
        *(void *)(v0 + 912) = v96;
        void *v96 = v0;
        v96[1] = sub_10004FEF0;
        uint64_t v97 = *(void *)(v0 + 664);
        uint64_t v98 = *(void *)(v0 + 552);
        uint64_t v99 = *(void *)(v0 + 456);
        uint64_t v100 = *(void *)(v0 + 464);
        uint64_t v101 = v0 + 56;
LABEL_37:
        return ActionDispatcher.perform(_:withMetrics:asPartOf:)(v99, v101, v98, v100, v97);
      }
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 592) + 56))(*(void *)(v0 + 576), 1, 1, *(void *)(v0 + 584));
    }
    uint64_t v102 = *(void *)(v0 + 656);
    uint64_t v103 = *(void *)(v0 + 648);
    uint64_t v104 = *(void *)(v0 + 560);
    uint64_t v105 = *(void *)(v0 + 544);
    uint64_t v106 = *(void *)(v0 + 536);
    sub_100034B8C(*(void *)(v0 + 576), &qword_1001A44F0);
    *(void *)(v0 + 360) = v103;
    *(void *)(v0 + 368) = sub_100052938((unint64_t *)&qword_1001A1DA0, (void (*)(uint64_t))type metadata accessor for OpenAppAction);
    uint64_t v107 = sub_100031A88((uint64_t *)(v0 + 336));
    sub_1000529E4(v102, (uint64_t)v107, (uint64_t (*)(void))type metadata accessor for OpenAppAction);
    (*(void (**)(uint64_t, void, uint64_t))(v105 + 104))(v104, enum case for ActionDispatcher.MetricsBehavior.notProcessed<A>(_:), v106);
    unint64_t v108 = (void *)swift_task_alloc();
    *(void *)(v0 + 896) = v108;
    *unint64_t v108 = v0;
    v108[1] = sub_10004FD98;
    uint64_t v97 = *(void *)(v0 + 664);
    uint64_t v98 = *(void *)(v0 + 560);
    uint64_t v99 = *(void *)(v0 + 456);
    uint64_t v100 = *(void *)(v0 + 464);
    uint64_t v101 = v0 + 336;
    goto LABEL_37;
  }
  uint64_t v16 = *(void *)(v0 + 840);
  uint64_t v17 = *(void *)(v0 + 736);
  uint64_t v18 = *(void *)(v0 + 728);
  uint64_t v19 = *(void *)(v0 + 720);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 832) + 96))(v16, *(void *)(v0 + 824));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v17, v16, v19);
  uint64_t v20 = (void *)sub_100062C28();
  if (!v20)
  {
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 872) = v11;
    void *v11 = v0;
    uint64_t v12 = sub_10004FA88;
    goto LABEL_11;
  }
  uint64_t v21 = v20;
  uint64_t v22 = *(void *)(v0 + 848);
  uint64_t v23 = *(void *)(v0 + 832);
  uint64_t v24 = *(void *)(v0 + 824);
  uint64_t v25 = *(void *)(v0 + 736);
  uint64_t v26 = *(void *)(v0 + 728);
  uint64_t v27 = *(void *)(v0 + 720);
  uint64_t v28 = *(void *)(v0 + 456);
  [v20 resume];

  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  uint64_t v29 = enum case for ActionOutcome.performed(_:);
  uint64_t v30 = type metadata accessor for ActionOutcome();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 104))(v28, v29, v30);
  sub_10002ED08(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
  return v31();
}

uint64_t sub_10004F760()
{
  *(void *)(*(void *)v1 + 864) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000510E4;
  }
  else {
    uint64_t v2 = sub_10004F874;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10004F874()
{
  uint64_t v1 = v0[105];
  (*(void (**)(void, void))(v0[104] + 8))(v0[106], v0[103]);
  uint64_t v2 = type metadata accessor for AppInstallationType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_10002ED08((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10004FA88()
{
  *(void *)(*(void *)v1 + 880) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100051300;
  }
  else {
    uint64_t v2 = sub_10004FB9C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10004FB9C()
{
  uint64_t v1 = v0[106];
  uint64_t v2 = v0[104];
  uint64_t v3 = v0[103];
  (*(void (**)(void, void))(v0[91] + 8))(v0[92], v0[90]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_10002ED08((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10004FD98()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 904) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[68] + 8))(v2[70], v2[67]);
  if (v0)
  {
    uint64_t v3 = sub_1000517B4;
  }
  else
  {
    sub_10002ED08((uint64_t)(v2 + 42));
    uint64_t v3 = sub_1000502E0;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10004FEF0()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 920) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[68] + 8))(v2[69], v2[67]);
  if (v0)
  {
    uint64_t v3 = sub_100051504;
  }
  else
  {
    sub_10002ED08((uint64_t)(v2 + 7));
    uint64_t v3 = sub_100050048;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100050048()
{
  uint64_t v1 = *(void *)(v0 + 832);
  uint64_t v15 = *(void *)(v0 + 824);
  uint64_t v16 = *(void *)(v0 + 848);
  uint64_t v2 = *(void *)(v0 + 696);
  uint64_t v13 = *(void *)(v0 + 688);
  uint64_t v14 = *(void *)(v0 + 712);
  uint64_t v12 = *(void *)(v0 + 680);
  uint64_t v3 = *(void *)(v0 + 672);
  uint64_t v4 = *(void *)(v0 + 664);
  uint64_t v5 = *(void *)(v0 + 656);
  uint64_t v6 = *(void *)(v0 + 608);
  uint64_t v7 = *(void *)(v0 + 592);
  uint64_t v8 = *(void *)(v0 + 584);
  uint64_t v9 = *(void *)(v0 + 528);

  sub_100052A4C(v9, (uint64_t (*)(void))type metadata accessor for AppLaunchTrampolineAction);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  sub_100052A4C(v5, (uint64_t (*)(void))type metadata accessor for OpenAppAction);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v12, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v14, v13);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v16, v15);
  sub_10002ED08(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_1000502E0()
{
  uint64_t v12 = *(void *)(v0 + 848);
  uint64_t v1 = *(void *)(v0 + 832);
  uint64_t v2 = *(void *)(v0 + 824);
  uint64_t v3 = *(void *)(v0 + 712);
  uint64_t v4 = *(void *)(v0 + 696);
  uint64_t v5 = *(void *)(v0 + 688);
  uint64_t v6 = *(void *)(v0 + 680);
  uint64_t v7 = *(void *)(v0 + 672);
  uint64_t v8 = *(void *)(v0 + 664);
  uint64_t v9 = *(void *)(v0 + 656);

  sub_100052A4C(v9, (uint64_t (*)(void))type metadata accessor for OpenAppAction);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v12, v2);
  sub_10002ED08(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_100050534()
{
  *(void *)(*(void *)v1 + 936) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100051A1C;
  }
  else {
    uint64_t v2 = sub_100050648;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100050648()
{
  uint64_t v1 = v0[105];
  uint64_t v2 = v0[103];
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v0[104] + 8);
  v3(v0[106], v2);
  sub_10002ED08((uint64_t)(v0 + 17));
  v3(v1, v2);
  sub_10002ED08((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100050848()
{
  *(void *)(*(void *)v1 + 960) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    uint64_t v2 = sub_100050B88;
  }
  else {
    uint64_t v2 = sub_10005097C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10005097C()
{
  uint64_t v1 = v0[105];
  uint64_t v2 = v0[103];
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v0[104] + 8);
  v3(v0[106], v2);
  sub_10002ED08((uint64_t)(v0 + 27));
  sub_10002ED08((uint64_t)(v0 + 17));
  v3(v1, v2);
  sub_10002ED08((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100050B88()
{
  uint64_t v1 = v0[105];
  uint64_t v2 = v0[103];
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v0[104] + 8);
  v3(v0[106], v2);
  sub_10002ED08((uint64_t)(v0 + 27));
  sub_10002ED08((uint64_t)(v0 + 17));
  v3(v1, v2);
  sub_10002ED08((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100050D9C()
{
  *(void *)(*(void *)v1 + 984) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    uint64_t v2 = sub_100050ED0;
  }
  else {
    uint64_t v2 = sub_100053094;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100050ED0()
{
  uint64_t v1 = v0[105];
  uint64_t v2 = v0[103];
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v0[104] + 8);
  v3(v0[106], v2);
  sub_10002ED08((uint64_t)(v0 + 27));
  sub_10002ED08((uint64_t)(v0 + 17));
  v3(v1, v2);
  sub_10002ED08((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000510E4()
{
  uint64_t v1 = v0[105];
  (*(void (**)(void, void))(v0[104] + 8))(v0[106], v0[103]);
  uint64_t v2 = type metadata accessor for AppInstallationType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_10002ED08((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100051300()
{
  uint64_t v1 = v0[106];
  uint64_t v2 = v0[104];
  uint64_t v3 = v0[103];
  (*(void (**)(void, void))(v0[91] + 8))(v0[92], v0[90]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_10002ED08((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100051504()
{
  uint64_t v16 = *(void *)(v0 + 848);
  uint64_t v1 = *(void *)(v0 + 832);
  uint64_t v15 = *(void *)(v0 + 824);
  uint64_t v2 = *(void *)(v0 + 696);
  uint64_t v13 = *(void *)(v0 + 688);
  uint64_t v14 = *(void *)(v0 + 712);
  uint64_t v12 = *(void *)(v0 + 680);
  uint64_t v3 = *(void *)(v0 + 672);
  uint64_t v4 = *(void *)(v0 + 664);
  uint64_t v5 = *(void *)(v0 + 656);
  uint64_t v6 = *(void *)(v0 + 608);
  uint64_t v7 = *(void *)(v0 + 592);
  uint64_t v8 = *(void *)(v0 + 584);
  uint64_t v9 = *(void *)(v0 + 528);

  sub_100052A4C(v9, (uint64_t (*)(void))type metadata accessor for AppLaunchTrampolineAction);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  sub_100052A4C(v5, (uint64_t (*)(void))type metadata accessor for OpenAppAction);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v12, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v14, v13);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v16, v15);
  sub_10002ED08(v0 + 56);
  sub_10002ED08(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_1000517B4()
{
  uint64_t v12 = *(void *)(v0 + 848);
  uint64_t v1 = *(void *)(v0 + 832);
  uint64_t v2 = *(void *)(v0 + 824);
  uint64_t v3 = *(void *)(v0 + 712);
  uint64_t v4 = *(void *)(v0 + 696);
  uint64_t v5 = *(void *)(v0 + 688);
  uint64_t v6 = *(void *)(v0 + 680);
  uint64_t v7 = *(void *)(v0 + 672);
  uint64_t v8 = *(void *)(v0 + 664);
  uint64_t v9 = *(void *)(v0 + 656);

  sub_100052A4C(v9, (uint64_t (*)(void))type metadata accessor for OpenAppAction);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v12, v2);
  sub_10002ED08(v0 + 336);
  sub_10002ED08(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_100051A1C()
{
  uint64_t v1 = v0[105];
  uint64_t v2 = v0[103];
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v0[104] + 8);
  v3(v0[106], v2);
  sub_10002ED08((uint64_t)(v0 + 17));
  v3(v1, v2);
  sub_10002ED08((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100051C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[9] = a2;
  v3[10] = a3;
  v3[8] = a1;
  uint64_t v4 = sub_10002EB60(&qword_1001A19B8);
  v3[11] = v4;
  v3[12] = *(void *)(v4 - 8);
  v3[13] = swift_task_alloc();
  type metadata accessor for ScalarDictionary();
  v3[14] = swift_task_alloc();
  v3[15] = type metadata accessor for CancelOrPauseInstallAction();
  v3[16] = swift_task_alloc();
  uint64_t v5 = sub_10002EB60((uint64_t *)&unk_1001A2160);
  v3[17] = v5;
  v3[18] = *(void *)(v5 - 8);
  v3[19] = swift_task_alloc();
  return _swift_task_switch(sub_100051DA8, 0, 0);
}

uint64_t sub_100051DA8()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[12];
  uint64_t v15 = v0[13];
  uint64_t v14 = v0[11];
  uint64_t v4 = (void *)v0[9];
  type metadata accessor for ObjectGraph();
  inject<A, B>(_:from:)();
  id v5 = [v4 metrics];
  sub_10002EE34(0, (unint64_t *)&qword_1001A1D98);
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  sub_100093170(v6);
  swift_bridgeObjectRelease();
  ScalarDictionary.init()();
  ActionMetrics.init(data:custom:)();
  *(void *)(v1 + *(int *)(v2 + 20)) = [v4 id];
  v0[5] = v2;
  v0[6] = sub_100052938((unint64_t *)&qword_1001A5480, (void (*)(uint64_t))type metadata accessor for CancelOrPauseInstallAction);
  uint64_t v7 = sub_100031A88(v0 + 2);
  sub_1000529E4(v1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for CancelOrPauseInstallAction);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v15, enum case for ActionDispatcher.MetricsBehavior.notProcessed<A>(_:), v14);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[20] = (uint64_t)v8;
  void *v8 = v0;
  v8[1] = sub_100051FE0;
  uint64_t v9 = v0[17];
  uint64_t v10 = v0[13];
  uint64_t v11 = v0[10];
  uint64_t v12 = v0[8];
  return ActionDispatcher.perform(_:withMetrics:asPartOf:)(v12, v0 + 2, v10, v11, v9);
}

uint64_t sub_100051FE0()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[12] + 8))(v2[13], v2[11]);
  if (v0)
  {
    uint64_t v3 = sub_1000521FC;
  }
  else
  {
    sub_10002ED08((uint64_t)(v2 + 2));
    uint64_t v3 = sub_100052130;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100052130()
{
  uint64_t v2 = v0[18];
  uint64_t v1 = v0[19];
  uint64_t v3 = v0[17];
  sub_100052A4C(v0[16], (uint64_t (*)(void))type metadata accessor for CancelOrPauseInstallAction);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000521FC()
{
  uint64_t v2 = v0[18];
  uint64_t v1 = v0[19];
  uint64_t v3 = v0[17];
  sub_100052A4C(v0[16], (uint64_t (*)(void))type metadata accessor for CancelOrPauseInstallAction);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_10002ED08((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000522DC(void **a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A2450);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *a1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = v7;
  sub_10002EB60((uint64_t *)&unk_1001A21F0);
  swift_retain();
  id v9 = v7;
  uint64_t v10 = Promise.__allocating_init()();
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v6, 1, 1, v11);
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = &unk_1001A1E68;
  v12[5] = v8;
  v12[6] = v10;
  swift_retain();
  sub_1000F6C04((uint64_t)v6, (uint64_t)&unk_1001A2470, (uint64_t)v12);
  swift_release();
  return v10;
}

uint64_t sub_100052448()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100052488(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  void *v6 = v2;
  v6[1] = sub_100053090;
  return sub_10004DC90(a1, v5, v4);
}

uint64_t sub_100052538(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10005259C()
{
  return sub_100052750(73);
}

uint64_t sub_1000525A4(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = v1 + 32;
  char v7 = *(unsigned char *)(v1 + 72);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_100053090;
  return sub_100047720(a1, v4, v5, v6, v7);
}

uint64_t sub_10005266C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  id v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_10002F874;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t))((char *)&dword_1001A4A58
                                                                                   + dword_1001A4A58);
  return v10(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100052748()
{
  return sub_100052750(72);
}

uint64_t sub_100052750(uint64_t a1)
{
  swift_release();

  sub_10002ED08(v1 + 32);

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_1000527A4(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  void *v6 = v2;
  v6[1] = sub_10002F874;
  return sub_10004C9A4(a1, v4, v5, v1 + 32);
}

uint64_t sub_10005285C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  id v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_100053090;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t))((char *)&dword_1001A4A58
                                                                                   + dword_1001A4A58);
  return v10(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100052938(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100052980(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10002EB60(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000529E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100052A4C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100052AAC()
{
  uint64_t v1 = type metadata accessor for State();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + v0;
  unint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 48;
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  sub_10002ED08(v7 + 8);

  return _swift_deallocObject(v0, v8, v6);
}

uint64_t sub_100052B9C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for State() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = v5 + *(void *)(v4 + 64);
  uint64_t v7 = (v6 & 0xFFFFFFFFFFFFFFF8) + v1;
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v9 = *(void *)(v1 + 24);
  uint64_t v10 = v1 + v5;
  char v11 = *(unsigned char *)(v1 + v6);
  uint64_t v12 = v7 + 8;
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  void *v13 = v2;
  v13[1] = sub_100053090;
  return sub_100049208(a1, v8, v9, v10, v11, v12);
}

uint64_t sub_100052CCC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100052D14(void *a1)
{
  uint64_t v25 = _swiftEmptyDictionarySingleton;
  id v1 = [a1 fields];
  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v2 + 16))
  {
    sub_10003A860(v3, v4);
    if (v5)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (_swiftEmptyDictionarySingleton[2]) {
        goto LABEL_7;
      }
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  id v9 = [a1 fields];
  uint64_t v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v10 + 16))
  {
    unint64_t v13 = sub_10003A860(v11, v12);
    if (v14)
    {
      uint64_t v15 = (uint64_t *)(*(void *)(v10 + 56) + 16 * v13);
      uint64_t v16 = *v15;
      uint64_t v17 = v15[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = _swiftEmptyDictionarySingleton;
      uint64_t v25 = (void *)0x8000000000000000;
      sub_10003ED00(v16, v17, v6, v8, isUniquelyReferenced_nonNull_native);
      goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10003B42C(v6, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v25[2])
  {
LABEL_7:
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    aBlock[4] = sub_1000490FC;
    aBlock[5] = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100049130;
    id aBlock[3] = &unk_100185780;
    uint64_t v20 = _Block_copy(aBlock);
    swift_release();
    id v21 = [a1 metricsActivityByMergingFields:isa uniquingFieldsWithBlock:v20];

    _Block_release(v20);
    uint64_t result = swift_isEscapingClosureAtFileLocation();
    if ((result & 1) == 0) {
      return (uint64_t)v21;
    }
    __break(1u);
    return result;
  }
LABEL_10:
  swift_bridgeObjectRelease();

  return (uint64_t)a1;
}

uint64_t sub_100053028(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10002ED58(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100053078(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100053088()
{
  return swift_release();
}

void sub_10005309C()
{
  id v1 = v0;
  uint64_t v2 = type metadata accessor for AppOffer.Flags();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v32 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v31 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v34 = (char *)&v31 - v10;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v31 - v11;
  swift_getObjectType();
  uint64_t v13 = swift_conformsToProtocol2();
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (!v13) {
    uint64_t v0 = 0;
  }
  if (!v0) {
    goto LABEL_11;
  }
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v33 = v8;
  uint64_t v16 = v3;
  uint64_t v17 = ObjectType;
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 8);
  swift_unknownObjectRetain();
  uint64_t v19 = v17;
  uint64_t v20 = v12;
  uint64_t v21 = v2;
  uint64_t v22 = v16;
  uint64_t v23 = v33;
  uint64_t v24 = (void *)v18(v19, v14);

  if (v24)
  {
    unsigned __int16 v25 = (unsigned __int16)[v24 flags];
    uint64_t v26 = v34;
    static AppOffer.Flags.none.getter();
    if ((v25 & 0x200) != 0)
    {
      uint64_t v27 = (uint64_t)v32;
      static AppOffer.Flags.dsidLess.getter();
      sub_1000640C4(v23, v27);
      uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
      v28(v27, v21);
      v28((uint64_t)v23, v21);
    }
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v20, v26, v21);
    id v29 = [v24 baseBuyParams];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v30 = [v24 metricsBuyParams];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    AppOffer.init(flags:ageRating:baseBuyParams:metricsBuyParams:)();
  }
  else
  {
LABEL_11:
    static AppOffer.Flags.none.getter();
    AppOffer.init(flags:ageRating:baseBuyParams:metricsBuyParams:)();
  }
}

uint64_t sub_100053394()
{
  uint64_t v0 = type metadata accessor for OSLogger();
  sub_10002F648(v0, qword_1001A1EF0);
  uint64_t v1 = sub_10002F6AC(v0, (uint64_t)qword_1001A1EF0);
  if (qword_1001A0E88 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10002F6AC(v0, (uint64_t)qword_1001AE3E0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10005345C()
{
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_100053494(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v4 = sub_10002EB60(&qword_1001A2118);
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v22 = (char *)&v21 + *(int *)(v5 + 56) - v9;
  uint64_t v11 = v22;
  uint64_t v12 = type metadata accessor for App();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  uint64_t v23 = v12;
  uint64_t v24 = v14;
  v14(v10, a1, v12);
  uint64_t v15 = type metadata accessor for State();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v17(v11, v25, v15);
  uint64_t v18 = (uint64_t)&v7[*(int *)(v5 + 56)];
  uint64_t v19 = v23;
  v24(v7, v10, v23);
  v17((char *)v18, (uint64_t)v22, v15);
  sub_100053694((uint64_t)v7, v18);
  sub_100034B8C((uint64_t)v10, &qword_1001A2118);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v15);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v7, v19);
}

uint64_t sub_100053694(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10002EB60(&qword_1001A2118);
  uint64_t v6 = v5 - 8;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v20 - v10;
  uint64_t v20 = (char *)&v20 + *(int *)(v6 + 56) - v10;
  uint64_t v12 = v20;
  uint64_t v13 = type metadata accessor for App();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v22 = v14 + 16;
  v21(v11, a1, v13);
  uint64_t v15 = type metadata accessor for State();
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16);
  v16(v12, a2, v15);
  uint64_t v17 = *(void **)(v2 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_stateLock);
  uint64_t v18 = &v8[*(int *)(v6 + 56)];
  v21(v8, (uint64_t)v11, v13);
  v16(v18, (uint64_t)v20, v15);
  [v17 lock];
  sub_100054AF4(v2, (uint64_t)v8);
  [v17 unlock];
  sub_100034B8C((uint64_t)v11, &qword_1001A2118);
  return sub_100034B8C((uint64_t)v8, &qword_1001A2118);
}

id sub_100053874(uint64_t a1, uint64_t a2)
{
  if (qword_1001A0DB8 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for OSLogger();
  sub_10002F6AC(v3, (uint64_t)qword_1001A1EF0);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.init(stringLiteral:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a2 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_stateLock);
  [v4 lock];
  sub_100054F88(a2);

  return [v4 unlock];
}

id sub_100053A00(uint64_t a1, uint64_t a2)
{
  if (qword_1001A0DB8 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for OSLogger();
  sub_10002F6AC(v3, (uint64_t)qword_1001A1EF0);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.init(stringLiteral:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a2 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_stateLock);
  [v4 lock];
  sub_1000556A0(a2);

  return [v4 unlock];
}

id sub_100053B8C(uint64_t a1, uint64_t a2)
{
  if (qword_1001A0DB8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for OSLogger();
  sub_10002F6AC(v4, (uint64_t)qword_1001A1EF0);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.init(stringLiteral:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a2 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_stateLock);
  [v5 lock];
  sub_100055DB8(a2, a1);

  return [v5 unlock];
}

id sub_100053D20(uint64_t a1, uint64_t a2)
{
  if (qword_1001A0DB8 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for OSLogger();
  sub_10002F6AC(v3, (uint64_t)qword_1001A1EF0);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.init(stringLiteral:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a2 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_stateLock);
  [v4 lock];
  sub_1000566E0(a2);

  return [v4 unlock];
}

id sub_100053EAC()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = &v0[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_observations];
  swift_beginAccess();
  if (*(void *)(*(void *)v3 + 16))
  {
    uint64_t v4 = *(void *)&v1[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_jsStackManager + 24];
    uint64_t v5 = *(void *)&v1[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_jsStackManager + 32];
    sub_10002EC6C(&v1[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_jsStackManager], v4);
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  }
  id v6 = [self defaultCenter];
  [v6 removeObserver:v1];

  v8.receiver = v1;
  v8.super_class = ObjectType;
  return objc_msgSendSuper2(&v8, "dealloc");
}

uint64_t sub_1000540B4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v90 = a3;
  uint64_t v5 = type metadata accessor for State.Key();
  uint64_t v92 = *(void *)(v5 - 8);
  uint64_t v93 = v5;
  __chkstk_darwin(v5);
  uint64_t v91 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = type metadata accessor for ArcadeState();
  uint64_t v84 = *(void *)(v85 - 8);
  __chkstk_darwin(v85);
  uint64_t v97 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for LogMessage.StringInterpolation();
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v95 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = type metadata accessor for OSLogger();
  uint64_t v100 = *(void (***)(void, void))(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  unint64_t v94 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v74 - v14;
  uint64_t v16 = type metadata accessor for State();
  uint64_t v98 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getObjectType();
  id v19 = [objc_allocWithZone((Class)ASCOfferContext) init];
  uint64_t v88 = v18;
  uint64_t v96 = a2;
  sub_1000934DC(a2, v19, (uint64_t)v18);

  if (qword_1001A0DB8 != -1) {
    swift_once();
  }
  uint64_t v20 = sub_10002F6AC(v11, (uint64_t)qword_1001A1EF0);
  uint64_t v21 = v100;
  uint64_t v22 = (void (*)(char *, uint64_t, uint64_t))v100[2];
  uint64_t v87 = (void (*)(void, void))v15;
  uint64_t v82 = v20;
  uint64_t v83 = v100 + 2;
  uint64_t v81 = v22;
  ((void (*)(char *))v22)(v15);
  uint64_t v23 = sub_10002EB60((uint64_t *)&unk_1001A19E0);
  uint64_t v24 = *(void *)(type metadata accessor for LogMessage() - 8);
  uint64_t v25 = *(unsigned __int8 *)(v24 + 80);
  uint64_t v26 = (v25 + 32) & ~v25;
  uint64_t v27 = v26 + *(void *)(v24 + 72);
  uint64_t v80 = v23;
  uint64_t v78 = v27;
  uint64_t v77 = v25 | 7;
  uint64_t v28 = swift_allocObject();
  long long v76 = xmmword_10014CED0;
  *(_OWORD *)(v28 + 16) = xmmword_10014CED0;
  uint64_t v79 = v26;
  uint64_t v86 = v28 + v26;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v29._countAndFlagsBits = 0x747320726566664FLL;
  v29._object = (void *)0xEF20666F20657461;
  LogMessage.StringInterpolation.appendLiteral(_:)(v29);
  id v30 = [a1 id];
  uint64_t v75 = sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
  *((void *)&v102 + 1) = v75;
  *(void *)&long long v101 = v30;
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)&v101, &qword_1001A1C50);
  unint64_t v74 = (unint64_t)"t offer ID to AppState app";
  v31._object = (void *)0x800000010015B300;
  v31._countAndFlagsBits = 0xD000000000000010;
  LogMessage.StringInterpolation.appendLiteral(_:)(v31);
  *((void *)&v102 + 1) = v16;
  uint64_t v32 = sub_100031A88((uint64_t *)&v101);
  uint64_t v99 = v11;
  uint64_t v33 = a1;
  uint64_t v34 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v98 + 16);
  v34(v32, v96, v16);
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_100034B8C((uint64_t)&v101, &qword_1001A1C50);
  v35._countAndFlagsBits = 0xD00000000000001BLL;
  v35._object = (void *)0x800000010015B320;
  LogMessage.StringInterpolation.appendLiteral(_:)(v35);
  *((void *)&v102 + 1) = v16;
  uint64_t v36 = sub_100031A88((uint64_t *)&v101);
  uint64_t v37 = (uint64_t)v88;
  uint64_t v96 = v16;
  v34(v36, (uint64_t)v88, v16);
  unint64_t v38 = v33;
  uint64_t v39 = v99;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_100034B8C((uint64_t)&v101, &qword_1001A1C50);
  v40._countAndFlagsBits = 0;
  v40._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v40);
  LogMessage.init(stringInterpolation:)();
  char v41 = v87;
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  uint64_t v87 = *++v21;
  v87(v41, v39);
  uint64_t v42 = v89;
  sub_10002EC6C((void *)(v89 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_arcadeSubscription), *(void *)(v89 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_arcadeSubscription + 24));
  uint64_t v43 = (uint64_t)v97;
  dispatch thunk of ArcadeSubscriptionManager.subscriptionState.getter();
  char v44 = *(unsigned char *)(*sub_10002EC6C((void *)(v42+ OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStoreInstallStateMonitor), *(void *)(v42+ OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStoreInstallStateMonitor+ 24))+ 16);
  uint64_t v45 = v42;
  uint64_t v46 = *(void *)(v42 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_restrictions + 24);
  uint64_t v47 = *(void *)(v42 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_restrictions + 32);
  sub_10002EC6C((void *)(v42 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_restrictions), v46);
  char v48 = sub_10012C484(v38, v37, v46, v47);
  uint64_t v49 = v37;
  uint64_t v100 = v21;
  if (v48 & 1) != 0 && (sub_100061330((uint64_t)v38, v37)) {
    unint64_t v50 = v90 | 2;
  }
  else {
    unint64_t v50 = v90 & 0xFFFFFFFFFFFFFFFDLL;
  }
  uint64_t v51 = *(os_unfair_lock_s **)(*sub_10002EC6C((void *)(v45+ OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_contingentOffers), *(void *)(v45+ OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_contingentOffers+ 24))+ 16);
  uint64_t v52 = v51 + 4;
  uint64_t v53 = v51 + 6;
  os_unfair_lock_lock(v51 + 6);
  sub_1000BCEA4(v52, &v101);
  os_unfair_lock_unlock(v53);
  uint64_t v54 = (void *)(v45 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_localizer);
  id v55 = sub_1000929D4(v49, v38, v44, v43, v101, (void *)(v45 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_localizer));
  swift_bridgeObjectRelease();
  id v56 = *(void **)(v45 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_delegate);
  uint64_t v57 = v91;
  State.key.getter();
  State.Key.rawValue.getter();
  (*(void (**)(char *, uint64_t))(v92 + 8))(v57, v93);
  NSString v58 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v56 offer:v38 didChangeState:v58 withMetadata:v55 flags:v50];

  if (([v38 flags] & 8) != 0)
  {
    uint64_t v62 = sub_100092B54(v49, v38, v43, v54);
    uint64_t v64 = v63;
    v81(v94, v82, v99);
    *(_OWORD *)(swift_allocObject() + 16) = v76;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v65._countAndFlagsBits = 0xD000000000000015;
    v65._object = (void *)0x800000010015B340;
    LogMessage.StringInterpolation.appendLiteral(_:)(v65);
    id v66 = [v38 id];
    *((void *)&v102 + 1) = v75;
    *(void *)&long long v101 = v66;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_100034B8C((uint64_t)&v101, &qword_1001A1C50);
    v67._object = (void *)(v74 | 0x8000000000000000);
    v67._countAndFlagsBits = 0xD000000000000010;
    LogMessage.StringInterpolation.appendLiteral(_:)(v67);
    uint64_t v93 = v62;
    if (v64)
    {
      *((void *)&v102 + 1) = &type metadata for String;
      *(void *)&long long v101 = v62;
      *((void *)&v101 + 1) = v64;
    }
    else
    {
      long long v101 = 0u;
      long long v102 = 0u;
    }
    uint64_t v68 = (void (*)(char *, uint64_t))v87;
    swift_bridgeObjectRetain();
    LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
    sub_100034B8C((uint64_t)&v101, &qword_1001A1C50);
    v69._countAndFlagsBits = 0;
    v69._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v69);
    LogMessage.init(stringInterpolation:)();
    uint64_t v70 = v99;
    uint64_t v71 = v94;
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    v68(v71, v70);
    if (v64)
    {
      NSString v72 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v72 = 0;
    }
    uint64_t v59 = v85;
    uint64_t v60 = v84;
    uint64_t v43 = (uint64_t)v97;
    uint64_t v61 = v98;
    [v56 offer:v38 didChangeStatusText:v72];

    id v55 = v72;
  }
  else
  {
    uint64_t v59 = v85;
    uint64_t v60 = v84;
    uint64_t v61 = v98;
  }

  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v43, v59);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 8))(v49, v96);
}

uint64_t sub_100054AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v43 = a2;
  uint64_t v42 = type metadata accessor for AdamID();
  uint64_t v3 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  char v41 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_10002EB60(&qword_1001A2118);
  __chkstk_darwin(v40);
  uint64_t v39 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35[1] = a1;
  uint64_t v6 = (uint64_t *)(a1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_observations);
  swift_beginAccess();
  uint64_t v7 = *v6;
  uint64_t v8 = *(void *)(*v6 + 64);
  uint64_t v36 = *v6 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & v8;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  unint64_t v38 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v44 = v7;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v13 = 0;
  uint64_t v14 = v39;
  while (1)
  {
    if (v11)
    {
      uint64_t v48 = (v11 - 1) & v11;
      int64_t v49 = v13;
      unint64_t v15 = __clz(__rbit64(v11)) | (v13 << 6);
      goto LABEL_23;
    }
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v16 >= v37) {
      return swift_release();
    }
    unint64_t v17 = *(void *)(v36 + 8 * v16);
    int64_t v18 = v13 + 1;
    if (!v17)
    {
      int64_t v18 = v13 + 2;
      if (v13 + 2 >= v37) {
        return swift_release();
      }
      unint64_t v17 = *(void *)(v36 + 8 * v18);
      if (!v17)
      {
        int64_t v18 = v13 + 3;
        if (v13 + 3 >= v37) {
          return swift_release();
        }
        unint64_t v17 = *(void *)(v36 + 8 * v18);
        if (!v17)
        {
          int64_t v18 = v13 + 4;
          if (v13 + 4 >= v37) {
            return swift_release();
          }
          unint64_t v17 = *(void *)(v36 + 8 * v18);
          if (!v17) {
            break;
          }
        }
      }
    }
LABEL_22:
    uint64_t v48 = (v17 - 1) & v17;
    int64_t v49 = v18;
    unint64_t v15 = __clz(__rbit64(v17)) + (v18 << 6);
LABEL_23:
    uint64_t v20 = *(void *)(*(void *)(v44 + 56) + 8 * v15);
    uint64_t v47 = sub_10002EE34(0, (unint64_t *)&qword_1001A2120);
    uint64_t v21 = *(void **)(v20 + 24);
    swift_retain();
    id v46 = [v21 id];
    uint64_t v22 = *(int *)(v40 + 48);
    uint64_t v23 = &v14[v22];
    uint64_t v24 = v43;
    uint64_t v25 = v43 + v22;
    uint64_t v26 = type metadata accessor for App();
    uint64_t v27 = *(void *)(v26 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v14, v24, v26);
    uint64_t v28 = type metadata accessor for State();
    uint64_t v29 = *(void *)(v28 - 8);
    id v30 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
    uint64_t v45 = v25;
    v30(v23, v25, v28);
    Swift::String v31 = v41;
    App.id.getter();
    uint64_t v32 = AdamID.int64Value.getter();
    (*v38)(v31, v42);
    id v33 = [objc_allocWithZone((Class)ASCAdamID) initWithInt64:v32];
    (*(void (**)(char *, uint64_t))(v27 + 8))(v14, v26);
    uint64_t v34 = v46;
    LOBYTE(v32) = static NSObject.== infix(_:_:)();

    (*(void (**)(char *, uint64_t))(v29 + 8))(v23, v28);
    if (v32) {
      sub_1000540B4(*(void **)(v20 + 24), v45, 0);
    }
    uint64_t result = swift_release();
    int64_t v13 = v49;
    unint64_t v11 = v48;
  }
  uint64_t v19 = v13 + 5;
  if (v13 + 5 >= v37) {
    return swift_release();
  }
  unint64_t v17 = *(void *)(v36 + 8 * v19);
  if (v17)
  {
    int64_t v18 = v13 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v18 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v18 >= v37) {
      return swift_release();
    }
    unint64_t v17 = *(void *)(v36 + 8 * v18);
    ++v19;
    if (v17) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_100054F88(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v52 = type metadata accessor for AppOffer();
  uint64_t v4 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v51 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = type metadata accessor for State();
  uint64_t v6 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  int64_t v49 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for App.Kind();
  uint64_t v8 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v47 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AdamID();
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for App();
  uint64_t v13 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v59 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v15 = (uint64_t *)(a1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_observations);
  swift_beginAccess();
  uint64_t v16 = *v15;
  uint64_t v17 = *(void *)(*v15 + 64);
  uint64_t v61 = *v15 + 64;
  uint64_t v18 = 1 << *(unsigned char *)(v16 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v17;
  uint64_t v53 = a1;
  uint64_t v44 = (void *)(a1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStateController);
  int64_t v62 = (unint64_t)(v18 + 63) >> 6;
  unsigned int v43 = enum case for App.Kind.store(_:);
  uint64_t v42 = (void (**)(char *, void, uint64_t))(v8 + 104);
  char v41 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v40 = (void (**)(uint64_t, uint64_t))(v6 + 8);
  uint64_t v39 = (void (**)(char *, uint64_t))(v13 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v22 = 0;
  uint64_t v23 = &selRef_finalizeHash;
  long long v55 = xmmword_10014CED0;
  unint64_t v54 = 0x800000010015B2D0;
  uint64_t v60 = v16;
  id v46 = v12;
  while (1)
  {
    if (v20)
    {
      unint64_t v31 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v32 = v31 | (v22 << 6);
      goto LABEL_22;
    }
    if (__OFADD__(v22++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v22 >= v62) {
      return swift_release();
    }
    unint64_t v34 = *(void *)(v61 + 8 * v22);
    if (!v34) {
      break;
    }
LABEL_21:
    unint64_t v20 = (v34 - 1) & v34;
    unint64_t v32 = __clz(__rbit64(v34)) + (v22 << 6);
LABEL_22:
    uint64_t v36 = *(void **)(*(void *)(*(void *)(v16 + 56) + 8 * v32) + 24);
    swift_getObjectType();
    swift_retain();
    if (([v36 v23[6]] & 4) != 0)
    {
      id v37 = [v36 id];
      [v37 int64value];
      AdamID.init(value:)();
      if (v2)
      {

        if (qword_1001A0DB8 != -1) {
          swift_once();
        }
        uint64_t v38 = type metadata accessor for OSLogger();
        sub_10002F6AC(v38, (uint64_t)qword_1001A1EF0);
        sub_10002EB60((uint64_t *)&unk_1001A19E0);
        type metadata accessor for LogMessage();
        *(_OWORD *)(swift_allocObject() + 16) = v55;
        LogMessage.init(stringLiteral:)();
        Logger.error(_:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        uint64_t v2 = 0;
        uint64_t v16 = v60;
      }
      else
      {
        (*v42)(v47, v43, v48);
        App.init(id:kind:)();

        uint64_t v24 = v44[3];
        uint64_t v57 = v44[4];
        id v56 = sub_10002EC6C(v44, v24);
        uint64_t v58 = 0;
        uint64_t v25 = v51;
        sub_100063DC8();
        uint64_t v26 = (uint64_t)v49;
        uint64_t v27 = v59;
        uint64_t v28 = v60;
        AppStateController.state(forApp:applying:)();
        uint64_t v29 = v25;
        uint64_t v2 = v58;
        (*v41)(v29, v52);
        sub_1000540B4(v36, v26, 0);
        (*v40)(v26, v50);
        id v30 = v27;
        uint64_t v16 = v28;
        (*v39)(v30, v45);
      }
      uint64_t v23 = &selRef_finalizeHash;
    }
    uint64_t result = swift_release();
  }
  int64_t v35 = v22 + 1;
  if (v22 + 1 >= v62) {
    return swift_release();
  }
  unint64_t v34 = *(void *)(v61 + 8 * v35);
  if (v34) {
    goto LABEL_20;
  }
  int64_t v35 = v22 + 2;
  if (v22 + 2 >= v62) {
    return swift_release();
  }
  unint64_t v34 = *(void *)(v61 + 8 * v35);
  if (v34) {
    goto LABEL_20;
  }
  int64_t v35 = v22 + 3;
  if (v22 + 3 >= v62) {
    return swift_release();
  }
  unint64_t v34 = *(void *)(v61 + 8 * v35);
  if (v34) {
    goto LABEL_20;
  }
  int64_t v35 = v22 + 4;
  if (v22 + 4 >= v62) {
    return swift_release();
  }
  unint64_t v34 = *(void *)(v61 + 8 * v35);
  if (v34)
  {
LABEL_20:
    int64_t v22 = v35;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v22 = v35 + 1;
    if (__OFADD__(v35, 1)) {
      break;
    }
    if (v22 >= v62) {
      return swift_release();
    }
    unint64_t v34 = *(void *)(v61 + 8 * v22);
    ++v35;
    if (v34) {
      goto LABEL_21;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_1000556A0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v52 = type metadata accessor for AppOffer();
  uint64_t v4 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v51 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = type metadata accessor for State();
  uint64_t v6 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  int64_t v49 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for App.Kind();
  uint64_t v8 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v47 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AdamID();
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for App();
  uint64_t v13 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v59 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v15 = (uint64_t *)(a1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_observations);
  swift_beginAccess();
  uint64_t v16 = *v15;
  uint64_t v17 = *(void *)(*v15 + 64);
  uint64_t v61 = *v15 + 64;
  uint64_t v18 = 1 << *(unsigned char *)(v16 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v17;
  uint64_t v53 = a1;
  uint64_t v44 = (void *)(a1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStateController);
  int64_t v62 = (unint64_t)(v18 + 63) >> 6;
  unsigned int v43 = enum case for App.Kind.store(_:);
  uint64_t v42 = (void (**)(char *, void, uint64_t))(v8 + 104);
  char v41 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v40 = (void (**)(uint64_t, uint64_t))(v6 + 8);
  uint64_t v39 = (void (**)(char *, uint64_t))(v13 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v22 = 0;
  uint64_t v23 = &selRef_finalizeHash;
  long long v55 = xmmword_10014CED0;
  unint64_t v54 = 0x800000010015B2D0;
  uint64_t v60 = v16;
  id v46 = v12;
  while (1)
  {
    if (v20)
    {
      unint64_t v31 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v32 = v31 | (v22 << 6);
      goto LABEL_22;
    }
    if (__OFADD__(v22++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v22 >= v62) {
      return swift_release();
    }
    unint64_t v34 = *(void *)(v61 + 8 * v22);
    if (!v34) {
      break;
    }
LABEL_21:
    unint64_t v20 = (v34 - 1) & v34;
    unint64_t v32 = __clz(__rbit64(v34)) + (v22 << 6);
LABEL_22:
    uint64_t v36 = *(void **)(*(void *)(*(void *)(v16 + 56) + 8 * v32) + 24);
    swift_getObjectType();
    swift_retain();
    if (([v36 v23[6]] & 0x10) == 0)
    {
      id v37 = [v36 id];
      [v37 int64value];
      AdamID.init(value:)();
      if (v2)
      {

        if (qword_1001A0DB8 != -1) {
          swift_once();
        }
        uint64_t v38 = type metadata accessor for OSLogger();
        sub_10002F6AC(v38, (uint64_t)qword_1001A1EF0);
        sub_10002EB60((uint64_t *)&unk_1001A19E0);
        type metadata accessor for LogMessage();
        *(_OWORD *)(swift_allocObject() + 16) = v55;
        LogMessage.init(stringLiteral:)();
        Logger.error(_:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        uint64_t v2 = 0;
        uint64_t v16 = v60;
      }
      else
      {
        (*v42)(v47, v43, v48);
        App.init(id:kind:)();

        uint64_t v24 = v44[3];
        uint64_t v57 = v44[4];
        id v56 = sub_10002EC6C(v44, v24);
        uint64_t v58 = 0;
        uint64_t v25 = v51;
        sub_100063DC8();
        uint64_t v26 = (uint64_t)v49;
        uint64_t v27 = v59;
        uint64_t v28 = v60;
        AppStateController.state(forApp:applying:)();
        uint64_t v29 = v25;
        uint64_t v2 = v58;
        (*v41)(v29, v52);
        sub_1000540B4(v36, v26, 0);
        (*v40)(v26, v50);
        id v30 = v27;
        uint64_t v16 = v28;
        (*v39)(v30, v45);
      }
      uint64_t v23 = &selRef_finalizeHash;
    }
    uint64_t result = swift_release();
  }
  int64_t v35 = v22 + 1;
  if (v22 + 1 >= v62) {
    return swift_release();
  }
  unint64_t v34 = *(void *)(v61 + 8 * v35);
  if (v34) {
    goto LABEL_20;
  }
  int64_t v35 = v22 + 2;
  if (v22 + 2 >= v62) {
    return swift_release();
  }
  unint64_t v34 = *(void *)(v61 + 8 * v35);
  if (v34) {
    goto LABEL_20;
  }
  int64_t v35 = v22 + 3;
  if (v22 + 3 >= v62) {
    return swift_release();
  }
  unint64_t v34 = *(void *)(v61 + 8 * v35);
  if (v34) {
    goto LABEL_20;
  }
  int64_t v35 = v22 + 4;
  if (v22 + 4 >= v62) {
    return swift_release();
  }
  unint64_t v34 = *(void *)(v61 + 8 * v35);
  if (v34)
  {
LABEL_20:
    int64_t v22 = v35;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v22 = v35 + 1;
    if (__OFADD__(v35, 1)) {
      break;
    }
    if (v22 >= v62) {
      return swift_release();
    }
    unint64_t v34 = *(void *)(v61 + 8 * v22);
    ++v35;
    if (v34) {
      goto LABEL_21;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_100055DB8(uint64_t a1, uint64_t a2)
{
  uint64_t v70 = type metadata accessor for AppOffer();
  uint64_t v4 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  Swift::String v69 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = type metadata accessor for State();
  uint64_t v6 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  Swift::String v67 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for App.Kind();
  uint64_t v8 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  Swift::String v65 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AdamID();
  __chkstk_darwin(v10 - 8);
  long long v76 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for App();
  uint64_t v12 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v77 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (uint64_t *)(a1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_observations);
  swift_beginAccess();
  uint64_t v15 = *v14;
  uint64_t v16 = *v14 + 64;
  uint64_t v17 = 1 << *(unsigned char *)(*v14 + 32);
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  else {
    uint64_t v18 = -1;
  }
  unint64_t v19 = v18 & *(void *)(*v14 + 64);
  uint64_t v71 = a1;
  uint64_t v63 = (void *)(a1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStateController);
  uint64_t v20 = v16;
  int64_t v21 = (unint64_t)(v17 + 63) >> 6;
  unint64_t v86 = a2 & 0xC000000000000001;
  uint64_t v22 = a2 & 0xFFFFFFFFFFFFFF8;
  if (a2 < 0) {
    uint64_t v22 = a2;
  }
  uint64_t v82 = v22;
  uint64_t v81 = a2 + 56;
  unsigned int v62 = enum case for App.Kind.store(_:);
  uint64_t v61 = (void (**)(char *, void, uint64_t))(v8 + 104);
  uint64_t v60 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v59 = (void (**)(uint64_t, uint64_t))(v6 + 8);
  uint64_t v58 = (void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v23 = a2;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v25 = 0;
  long long v73 = xmmword_10014CED0;
  unint64_t v72 = 0x800000010015B2D0;
  uint64_t v83 = v23;
  int64_t v84 = v21;
  uint64_t v79 = v20;
  uint64_t v80 = v15;
  while (v19)
  {
    unint64_t v26 = __clz(__rbit64(v19));
    v19 &= v19 - 1;
    unint64_t v27 = v26 | (v25 << 6);
LABEL_24:
    uint64_t v31 = *(void *)(*(void *)(v15 + 56) + 8 * v27);
    self;
    uint64_t result = swift_dynamicCastObjCClass();
    if (result)
    {
      unint64_t v32 = (void *)result;
      swift_retain();
      id v33 = [v32 iapItemID];
      if (v33)
      {
        unint64_t v34 = v33;
        if (v86)
        {
          id v35 = v33;
          char v36 = __CocoaSet.contains(_:)();

          if (v36)
          {
            uint64_t v37 = v85;
            goto LABEL_35;
          }

          uint64_t result = swift_release();
          int64_t v21 = v84;
        }
        else
        {
          if (!*(void *)(v23 + 16))
          {

            goto LABEL_8;
          }
          Swift::Int v38 = NSObject._rawHashValue(seed:)(*(void *)(v23 + 40));
          uint64_t v39 = -1 << *(unsigned char *)(v23 + 32);
          unint64_t v40 = v38 & ~v39;
          if ((*(void *)(v81 + ((v40 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v40))
          {
            sub_10002EE34(0, (unint64_t *)&qword_1001A1CF0);
            id v41 = *(id *)(*(void *)(v23 + 48) + 8 * v40);
            char v42 = static NSObject.== infix(_:_:)();

            if ((v42 & 1) == 0)
            {
              uint64_t v43 = ~v39;
              unint64_t v44 = (v40 + 1) & v43;
              if (((*(void *)(v81 + ((v44 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v44) & 1) == 0) {
                goto LABEL_41;
              }
              id v45 = *(id *)(*(void *)(v83 + 48) + 8 * v44);
              char v46 = static NSObject.== infix(_:_:)();

              if ((v46 & 1) == 0)
              {
                unint64_t v54 = (v44 + 1) & v43;
                if (((*(void *)(v81 + ((v54 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v54) & 1) == 0) {
                  goto LABEL_41;
                }
                uint64_t v23 = v83;
                while (1)
                {
                  id v55 = *(id *)(*(void *)(v23 + 48) + 8 * v54);
                  char v56 = static NSObject.== infix(_:_:)();

                  if (v56) {
                    break;
                  }
                  unint64_t v54 = (v54 + 1) & v43;
                  uint64_t v23 = v83;
                  if (((*(void *)(v81 + ((v54 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v54) & 1) == 0)
                  {

                    uint64_t result = swift_release();
                    goto LABEL_43;
                  }
                }
              }
            }
            uint64_t v37 = v85;
LABEL_35:
            uint64_t v47 = *(void **)(v31 + 24);
            uint64_t ObjectType = swift_getObjectType();
            id v48 = [v47 id];
            [v48 int64value];
            AdamID.init(value:)();
            if (v37)
            {

              if (qword_1001A0DB8 != -1) {
                swift_once();
              }
              uint64_t v49 = type metadata accessor for OSLogger();
              sub_10002F6AC(v49, (uint64_t)qword_1001A1EF0);
              sub_10002EB60((uint64_t *)&unk_1001A19E0);
              type metadata accessor for LogMessage();
              *(_OWORD *)(swift_allocObject() + 16) = v73;
              LogMessage.init(stringLiteral:)();
              Logger.error(_:)();
              swift_bridgeObjectRelease();
              swift_errorRelease();

              uint64_t result = swift_release();
              uint64_t v85 = 0;
              goto LABEL_42;
            }
            (*v61)(v65, v62, v66);
            App.init(id:kind:)();

            uint64_t v50 = v63[3];
            uint64_t v75 = v63[4];
            uint64_t v51 = sub_10002EC6C(v63, v50);
            uint64_t v85 = 0;
            unint64_t v74 = v51;
            uint64_t v52 = v69;
            sub_100063DC8();
            uint64_t v53 = (uint64_t)v67;
            AppStateController.state(forApp:applying:)();
            (*v60)(v52, v70);
            sub_1000540B4(v47, v53, 0);
            (*v59)(v53, v68);
            (*v58)(v77, v64);
LABEL_41:

            uint64_t result = swift_release();
LABEL_42:
            uint64_t v23 = v83;
LABEL_43:
            uint64_t v20 = v79;
            uint64_t v15 = v80;
            int64_t v21 = v84;
          }
          else
          {

            uint64_t result = swift_release();
            uint64_t v20 = v79;
            uint64_t v15 = v80;
          }
        }
      }
      else
      {
LABEL_8:
        uint64_t result = swift_release();
      }
    }
  }
  if (__OFADD__(v25++, 1))
  {
    __break(1u);
    goto LABEL_56;
  }
  if (v25 >= v21) {
    return swift_release();
  }
  unint64_t v29 = *(void *)(v20 + 8 * v25);
  if (v29)
  {
LABEL_23:
    unint64_t v19 = (v29 - 1) & v29;
    unint64_t v27 = __clz(__rbit64(v29)) + (v25 << 6);
    goto LABEL_24;
  }
  int64_t v30 = v25 + 1;
  if (v25 + 1 >= v21) {
    return swift_release();
  }
  unint64_t v29 = *(void *)(v20 + 8 * v30);
  if (v29) {
    goto LABEL_22;
  }
  int64_t v30 = v25 + 2;
  if (v25 + 2 >= v21) {
    return swift_release();
  }
  unint64_t v29 = *(void *)(v20 + 8 * v30);
  if (v29) {
    goto LABEL_22;
  }
  int64_t v30 = v25 + 3;
  if (v25 + 3 >= v21) {
    return swift_release();
  }
  unint64_t v29 = *(void *)(v20 + 8 * v30);
  if (v29) {
    goto LABEL_22;
  }
  int64_t v30 = v25 + 4;
  if (v25 + 4 >= v21) {
    return swift_release();
  }
  unint64_t v29 = *(void *)(v20 + 8 * v30);
  if (v29)
  {
LABEL_22:
    int64_t v25 = v30;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v25 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v25 >= v21) {
      return swift_release();
    }
    unint64_t v29 = *(void *)(v20 + 8 * v25);
    ++v30;
    if (v29) {
      goto LABEL_23;
    }
  }
LABEL_56:
  __break(1u);
  return result;
}

uint64_t sub_1000566E0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v52 = type metadata accessor for AppOffer();
  uint64_t v4 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v51 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = type metadata accessor for State();
  uint64_t v6 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v49 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for App.Kind();
  uint64_t v8 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v47 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AdamID();
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for App();
  uint64_t v13 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v59 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t *)(a1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_observations);
  swift_beginAccess();
  uint64_t v16 = *v15;
  uint64_t v17 = *(void *)(*v15 + 64);
  uint64_t v61 = *v15 + 64;
  uint64_t v18 = 1 << *(unsigned char *)(v16 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v17;
  uint64_t v53 = a1;
  unint64_t v44 = (void *)(a1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStateController);
  int64_t v62 = (unint64_t)(v18 + 63) >> 6;
  unsigned int v43 = enum case for App.Kind.store(_:);
  char v42 = (void (**)(char *, void, uint64_t))(v8 + 104);
  id v41 = (void (**)(char *, uint64_t))(v4 + 8);
  unint64_t v40 = (void (**)(uint64_t, uint64_t))(v6 + 8);
  uint64_t v39 = (void (**)(char *, uint64_t))(v13 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v22 = 0;
  uint64_t v23 = &selRef_finalizeHash;
  long long v55 = xmmword_10014CED0;
  unint64_t v54 = 0x800000010015B2D0;
  uint64_t v60 = v16;
  char v46 = v12;
  while (1)
  {
    if (v20)
    {
      unint64_t v31 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v32 = v31 | (v22 << 6);
      goto LABEL_22;
    }
    if (__OFADD__(v22++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v22 >= v62) {
      return swift_release();
    }
    unint64_t v34 = *(void *)(v61 + 8 * v22);
    if (!v34) {
      break;
    }
LABEL_21:
    unint64_t v20 = (v34 - 1) & v34;
    unint64_t v32 = __clz(__rbit64(v34)) + (v22 << 6);
LABEL_22:
    char v36 = *(void **)(*(void *)(*(void *)(v16 + 56) + 8 * v32) + 24);
    swift_getObjectType();
    swift_retain();
    if (([v36 v23[6]] & 0x1000) == 0)
    {
      id v37 = [v36 id];
      [v37 int64value];
      AdamID.init(value:)();
      if (v2)
      {

        if (qword_1001A0DB8 != -1) {
          swift_once();
        }
        uint64_t v38 = type metadata accessor for OSLogger();
        sub_10002F6AC(v38, (uint64_t)qword_1001A1EF0);
        sub_10002EB60((uint64_t *)&unk_1001A19E0);
        type metadata accessor for LogMessage();
        *(_OWORD *)(swift_allocObject() + 16) = v55;
        LogMessage.init(stringLiteral:)();
        Logger.error(_:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        uint64_t v2 = 0;
        uint64_t v16 = v60;
      }
      else
      {
        (*v42)(v47, v43, v48);
        App.init(id:kind:)();

        uint64_t v24 = v44[3];
        uint64_t v57 = v44[4];
        char v56 = sub_10002EC6C(v44, v24);
        uint64_t v58 = 0;
        int64_t v25 = v51;
        sub_100063DC8();
        uint64_t v26 = (uint64_t)v49;
        unint64_t v27 = v59;
        uint64_t v28 = v60;
        AppStateController.state(forApp:applying:)();
        unint64_t v29 = v25;
        uint64_t v2 = v58;
        (*v41)(v29, v52);
        sub_1000540B4(v36, v26, 0);
        (*v40)(v26, v50);
        int64_t v30 = v27;
        uint64_t v16 = v28;
        (*v39)(v30, v45);
      }
      uint64_t v23 = &selRef_finalizeHash;
    }
    uint64_t result = swift_release();
  }
  int64_t v35 = v22 + 1;
  if (v22 + 1 >= v62) {
    return swift_release();
  }
  unint64_t v34 = *(void *)(v61 + 8 * v35);
  if (v34) {
    goto LABEL_20;
  }
  int64_t v35 = v22 + 2;
  if (v22 + 2 >= v62) {
    return swift_release();
  }
  unint64_t v34 = *(void *)(v61 + 8 * v35);
  if (v34) {
    goto LABEL_20;
  }
  int64_t v35 = v22 + 3;
  if (v22 + 3 >= v62) {
    return swift_release();
  }
  unint64_t v34 = *(void *)(v61 + 8 * v35);
  if (v34) {
    goto LABEL_20;
  }
  int64_t v35 = v22 + 4;
  if (v22 + 4 >= v62) {
    return swift_release();
  }
  unint64_t v34 = *(void *)(v61 + 8 * v35);
  if (v34)
  {
LABEL_20:
    int64_t v22 = v35;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v22 = v35 + 1;
    if (__OFADD__(v35, 1)) {
      break;
    }
    if (v22 >= v62) {
      return swift_release();
    }
    unint64_t v34 = *(void *)(v61 + 8 * v22);
    ++v35;
    if (v34) {
      goto LABEL_21;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

id sub_100056DF8()
{
  uint64_t v1 = v0;
  if (qword_1001A0DB8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for OSLogger();
  sub_10002F6AC(v2, (uint64_t)qword_1001A1EF0);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.init(stringLiteral:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_stateLock);
  [*(id *)(v1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_stateLock) lock];
  sub_100056F84(v1);

  return [v3 unlock];
}

uint64_t sub_100056F84(uint64_t a1)
{
  uint64_t v58 = type metadata accessor for AppOffer();
  uint64_t v2 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v57 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for State();
  uint64_t v4 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  long long v55 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for App.Kind();
  uint64_t v6 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v53 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AdamID();
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for App();
  uint64_t v11 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v68 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (uint64_t *)(a1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_observations);
  swift_beginAccess();
  uint64_t v14 = *v13;
  uint64_t v17 = *(void *)(*v13 + 64);
  uint64_t v16 = *v13 + 64;
  uint64_t v15 = v17;
  uint64_t v18 = 1 << *(unsigned char *)(v14 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v15;
  uint64_t v59 = a1;
  uint64_t v51 = (void *)(a1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStateController);
  int64_t v70 = (unint64_t)(v18 + 63) >> 6;
  unsigned int v50 = enum case for App.Kind.store(_:);
  uint64_t v49 = (void (**)(char *, void, uint64_t))(v6 + 104);
  uint64_t v48 = (void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v47 = (void (**)(uint64_t, uint64_t))(v4 + 8);
  char v46 = (void (**)(char *, uint64_t))(v11 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v22 = 0;
  long long v61 = xmmword_10014CED0;
  unint64_t v60 = 0x800000010015B2D0;
  uint64_t v66 = v14;
  Swift::String v67 = v10;
  uint64_t v65 = v16;
  while (v20)
  {
    unint64_t v23 = __clz(__rbit64(v20));
    v20 &= v20 - 1;
    unint64_t v24 = v23 | (v22 << 6);
LABEL_20:
    uint64_t v28 = *(void *)(*(void *)(v14 + 56) + 8 * v24);
    self;
    uint64_t result = swift_dynamicCastObjCClass();
    if (result)
    {
      unint64_t v29 = (void *)result;
      swift_retain();
      swift_unknownObjectRetain();
      id v30 = [v29 capabilities];
      if (v30
        && (unint64_t v31 = v30,
            uint64_t v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)(),
            v31,
            uint64_t v33 = *(void *)(v32 + 16),
            swift_bridgeObjectRelease(),
            v33))
      {
        unint64_t v34 = *(void **)(v28 + 24);
        uint64_t ObjectType = swift_getObjectType();
        id v36 = [v34 id];
        [v36 int64value];
        uint64_t v37 = v69;
        AdamID.init(value:)();
        if (v37)
        {

          if (qword_1001A0DB8 != -1) {
            swift_once();
          }
          uint64_t v38 = type metadata accessor for OSLogger();
          sub_10002F6AC(v38, (uint64_t)qword_1001A1EF0);
          sub_10002EB60((uint64_t *)&unk_1001A19E0);
          type metadata accessor for LogMessage();
          *(_OWORD *)(swift_allocObject() + 16) = v61;
          LogMessage.init(stringLiteral:)();
          Logger.error(_:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_release();
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v69 = 0;
          uint64_t v14 = v66;
        }
        else
        {
          uint64_t v39 = *v49;
          uint64_t v64 = ObjectType;
          v39(v53, v50, v54);
          App.init(id:kind:)();

          uint64_t v41 = v51[3];
          uint64_t v40 = v51[4];
          uint64_t v69 = 0;
          uint64_t v63 = v40;
          int64_t v62 = sub_10002EC6C(v51, v41);
          char v42 = v57;
          sub_100063DC8();
          uint64_t v43 = (uint64_t)v55;
          AppStateController.state(forApp:applying:)();
          (*v48)(v42, v58);
          sub_1000540B4(v34, v43, 0);
          uint64_t v44 = v43;
          uint64_t v14 = v66;
          (*v47)(v44, v56);
          (*v46)(v68, v52);
          swift_release();
          uint64_t result = swift_unknownObjectRelease();
        }
        uint64_t v16 = v65;
      }
      else
      {
        swift_unknownObjectRelease();
        uint64_t result = swift_release();
      }
    }
  }
  if (__OFADD__(v22++, 1))
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v22 >= v70) {
    return swift_release();
  }
  unint64_t v26 = *(void *)(v16 + 8 * v22);
  if (v26)
  {
LABEL_19:
    unint64_t v20 = (v26 - 1) & v26;
    unint64_t v24 = __clz(__rbit64(v26)) + (v22 << 6);
    goto LABEL_20;
  }
  int64_t v27 = v22 + 1;
  if (v22 + 1 >= v70) {
    return swift_release();
  }
  unint64_t v26 = *(void *)(v16 + 8 * v27);
  if (v26) {
    goto LABEL_18;
  }
  int64_t v27 = v22 + 2;
  if (v22 + 2 >= v70) {
    return swift_release();
  }
  unint64_t v26 = *(void *)(v16 + 8 * v27);
  if (v26) {
    goto LABEL_18;
  }
  int64_t v27 = v22 + 3;
  if (v22 + 3 >= v70) {
    return swift_release();
  }
  unint64_t v26 = *(void *)(v16 + 8 * v27);
  if (v26) {
    goto LABEL_18;
  }
  int64_t v27 = v22 + 4;
  if (v22 + 4 >= v70) {
    return swift_release();
  }
  unint64_t v26 = *(void *)(v16 + 8 * v27);
  if (v26)
  {
LABEL_18:
    int64_t v22 = v27;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v22 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v22 >= v70) {
      return swift_release();
    }
    unint64_t v26 = *(void *)(v16 + 8 * v22);
    ++v27;
    if (v26) {
      goto LABEL_19;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_10005781C()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = sub_10002EB60(&qword_1001A2450);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ArcadeState();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v24 - v12;
  uint64_t v14 = OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_isUpdatingArcadeSubscription;
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_isUpdatingArcadeSubscription) & 1) == 0)
  {
    int64_t v25 = v5;
    uint64_t v15 = ObjectType;
    sub_10002EC6C((void *)(v1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_arcadeSubscription), *(void *)(v1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_arcadeSubscription + 24));
    dispatch thunk of ArcadeSubscriptionManager.subscriptionState.getter();
    char *v10 = 1;
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v10, enum case for ArcadeState.unknown(_:), v6);
    char v16 = static ArcadeState.== infix(_:_:)();
    uint64_t v17 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
    v17(v10, v6);
    uint64_t result = v17(v13, v6);
    uint64_t v18 = v14;
    uint64_t v19 = (uint64_t)v25;
    if (v16)
    {
      if (qword_1001A0DB8 != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for OSLogger();
      sub_10002F6AC(v20, (uint64_t)qword_1001A1EF0);
      sub_10002EB60((uint64_t *)&unk_1001A19E0);
      type metadata accessor for LogMessage();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
      LogMessage.init(stringLiteral:)();
      Logger.info(_:)();
      swift_bridgeObjectRelease();
      *(unsigned char *)(v1 + v18) = 1;
      uint64_t v21 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v19, 1, 1, v21);
      uint64_t v22 = swift_allocObject();
      swift_unknownObjectWeakInit();
      unint64_t v23 = (void *)swift_allocObject();
      void v23[2] = 0;
      v23[3] = 0;
      v23[4] = v22;
      v23[5] = v15;
      sub_1000AA270(v19, (uint64_t)&unk_1001A2240, (uint64_t)v23);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_100057BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[17] = a4;
  type metadata accessor for LogMessage.StringInterpolation();
  v4[18] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OSLogger();
  v4[19] = v5;
  v4[20] = *(void *)(v5 - 8);
  v4[21] = swift_task_alloc();
  uint64_t refreshed = type metadata accessor for ArcadeEntitlementRefreshCondition();
  v4[22] = refreshed;
  v4[23] = *(void *)(refreshed - 8);
  v4[24] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ArcadeState();
  v4[25] = v7;
  v4[26] = *(void *)(v7 - 8);
  v4[27] = swift_task_alloc();
  return _swift_task_switch(sub_100057D6C, 0, 0);
}

uint64_t sub_100057D6C()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[28] = Strong;
  if (Strong)
  {
    uint64_t v3 = v0[23];
    uint64_t v2 = (unsigned char *)v0[24];
    uint64_t v4 = v0[22];
    uint64_t v5 = (void *)(Strong + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_arcadeSubscription);
    uint64_t v6 = v5[3];
    uint64_t v7 = v5[4];
    sub_10002EC6C(v5, v6);
    *uint64_t v2 = 0;
    (*(void (**)(unsigned char *, void, uint64_t))(v3 + 104))(v2, enum case for ArcadeEntitlementRefreshCondition.ifCacheIsExpired(_:), v4);
    uint64_t v8 = (void *)swift_task_alloc();
    v0[29] = v8;
    void *v8 = v0;
    v8[1] = sub_100057F00;
    uint64_t v9 = v0[27];
    uint64_t v10 = v0[24];
    return dispatch thunk of ArcadeSubscriptionManager.updateStateFromEntitlements(refreshingCache:)(v9, v10, v6, v7);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_100057F00()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 192);
  uint64_t v3 = *(void *)(*(void *)v1 + 184);
  uint64_t v4 = *(void *)(*(void *)v1 + 176);
  *(void *)(*(void *)v1 + 240) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    uint64_t v5 = sub_100058338;
  }
  else {
    uint64_t v5 = sub_100058070;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100058070()
{
  if (qword_1001A0DB8 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[26];
  uint64_t v13 = v0[27];
  uint64_t v14 = (unsigned char *)v0[28];
  uint64_t v2 = v0[25];
  uint64_t v4 = v0[20];
  uint64_t v3 = v0[21];
  uint64_t v5 = v0[19];
  uint64_t v6 = sub_10002F6AC(v5, (uint64_t)qword_1001A1EF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v7._object = (void *)0x800000010015B7E0;
  v7._countAndFlagsBits = 0xD000000000000025;
  LogMessage.StringInterpolation.appendLiteral(_:)(v7);
  v0[9] = v2;
  uint64_t v8 = sub_100031A88(v0 + 6);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v1 + 16))(v8, v13, v2);
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_100034B8C((uint64_t)(v0 + 6), &qword_1001A1C50);
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v9);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v10 = *(void **)&v14[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_stateLock];
  [v10 lock];
  v14[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_isUpdatingArcadeSubscription] = 0;
  [v10 unlock];
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v13, v2);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_100058338()
{
  if (qword_1001A0DB8 != -1) {
    swift_once();
  }
  uint64_t v13 = (unsigned char *)v0[28];
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[21];
  uint64_t v3 = v0[19];
  uint64_t v4 = sub_10002F6AC(v3, (uint64_t)qword_1001A1EF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, v4, v3);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v5._object = (void *)0x800000010015B7A0;
  v5._countAndFlagsBits = 0xD000000000000034;
  LogMessage.StringInterpolation.appendLiteral(_:)(v5);
  swift_getErrorValue();
  uint64_t v6 = v0[13];
  uint64_t v7 = v0[14];
  v0[5] = v7;
  uint64_t v8 = sub_100031A88(v0 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v8, v6, v7);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)(v0 + 2), &qword_1001A1C50);
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v9);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  id v10 = *(id *)&v13[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_stateLock];
  [v10 lock];
  v13[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_isUpdatingArcadeSubscription] = 0;
  [v10 unlock];
  swift_errorRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_10005861C()
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v2 = sub_10002EB60(&qword_1001A2450);
  uint64_t result = __chkstk_darwin(v2 - 8);
  Swift::String v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_isUpdatingContingentOfferSubscription;
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_isUpdatingContingentOfferSubscription) & 1) == 0)
  {
    if (qword_1001A0DB8 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for OSLogger();
    sub_10002F6AC(v7, (uint64_t)qword_1001A1EF0);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.init(stringLiteral:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    *(unsigned char *)(v0 + v6) = 1;
    uint64_t v8 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v5, 1, 1, v8);
    uint64_t v9 = swift_allocObject();
    swift_unknownObjectWeakInit();
    id v10 = (void *)swift_allocObject();
    void v10[2] = 0;
    v10[3] = 0;
    v10[4] = v9;
    v10[5] = ObjectType;
    sub_1000AA270((uint64_t)v5, (uint64_t)&unk_1001A2250, (uint64_t)v10);
    return swift_release();
  }
  return result;
}

uint64_t sub_100058878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[17] = a4;
  type metadata accessor for LogMessage.StringInterpolation();
  v4[18] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OSLogger();
  v4[19] = v5;
  v4[20] = *(void *)(v5 - 8);
  v4[21] = swift_task_alloc();
  return _swift_task_switch(sub_100058964, 0, 0);
}

uint64_t sub_100058964()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[22] = Strong;
  if (Strong)
  {
    sub_10002EC6C((void *)(Strong + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_contingentOffers), *(void *)(Strong + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_contingentOffers + 24));
    uint64_t v2 = (void *)swift_task_alloc();
    v0[23] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100058A78;
    return sub_1000BD6B4();
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_100058A78(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 192) = a1;
  *(void *)(v3 + 200) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_100058E04;
  }
  else {
    uint64_t v4 = sub_100058B8C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100058B8C()
{
  if (qword_1001A0DB8 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[21];
  uint64_t v3 = v0[22];
  uint64_t v4 = v0[19];
  uint64_t v5 = v0[20];
  uint64_t v6 = sub_10002F6AC(v4, (uint64_t)qword_1001A1EF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v6, v4);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v7._object = (void *)0x800000010015B880;
  v7._countAndFlagsBits = 0xD000000000000030;
  LogMessage.StringInterpolation.appendLiteral(_:)(v7);
  v0[9] = sub_10002EB60(&qword_1001A2258);
  v0[6] = v1;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_100034B8C((uint64_t)(v0 + 6), &qword_1001A1C50);
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v8);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  id v9 = *(id *)(v3 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_stateLock);
  [v9 lock];
  *(unsigned char *)(v3 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_isUpdatingContingentOfferSubscription) = 0;
  [v9 unlock];
  id v10 = (void *)v0[22];

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_100058E04()
{
  if (qword_1001A0DB8 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[21];
  uint64_t v14 = v0[22];
  uint64_t v3 = v0[19];
  uint64_t v2 = v0[20];
  uint64_t v4 = sub_10002F6AC(v3, (uint64_t)qword_1001A1EF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v5._object = (void *)0x800000010015B840;
  v5._countAndFlagsBits = 0xD00000000000003FLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v5);
  swift_getErrorValue();
  uint64_t v6 = v0[13];
  uint64_t v7 = v0[14];
  v0[5] = v7;
  Swift::String v8 = sub_100031A88(v0 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v8, v6, v7);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)(v0 + 2), &qword_1001A1C50);
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v9);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  id v10 = *(id *)(v14 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_stateLock);
  [v10 lock];
  *(unsigned char *)(v14 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_isUpdatingContingentOfferSubscription) = 0;
  [v10 unlock];
  swift_errorRelease();
  uint64_t v11 = (void *)v0[22];

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_1000590D4(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v6 - 8);
  uint64_t v104 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = (__objc2_prot *)type metadata accessor for OSLogger();
  uint64_t v8 = *(void *)&v92[-1].cb;
  __chkstk_darwin(v92);
  uint64_t v105 = (__objc2_meth *)((char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v77 = type metadata accessor for AppOffer();
  id v10 = *(__objc2_prot **)(v77 - 8);
  __chkstk_darwin(v77);
  long long v76 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for State();
  *(void *)&long long v101 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  unint64_t v74 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = type metadata accessor for App.Kind();
  uint64_t v95 = *(char **)(v91 - 8);
  __chkstk_darwin(v91);
  uint64_t v90 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for AdamID();
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v98 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  int64_t v84 = (char *)&v71 - v17;
  uint64_t v89 = type metadata accessor for App();
  unint64_t v94 = *(void (***)(char *, uint64_t))(v89 - 8);
  uint64_t v18 = __chkstk_darwin(v89);
  uint64_t v83 = (char *)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v82 = (char *)&v71 - v20;
  uint64_t v106 = a1;
  uint64_t v21 = (uint64_t *)(a1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_observations);
  swift_beginAccess();
  uint64_t v22 = (__objc2_meth *)(a2 >> 62);
  if (!*(void *)(*v21 + 16))
  {
    if (v22) {
      goto LABEL_57;
    }
    if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_4:
      uint64_t v23 = *(void *)(v106 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_jsStackManager + 24);
      uint64_t v24 = *(void *)(v106 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_jsStackManager + 32);
      sub_10002EC6C((void *)(v106 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_jsStackManager), v23);
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
      goto LABEL_5;
    }
  }
  while (1)
  {
LABEL_5:
    if (v22) {
      goto LABEL_53;
    }
    swift_bridgeObjectRetain();
LABEL_7:
    uint64_t v25 = sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
    sub_100062134();
    uint64_t v96 = v25;
    uint64_t v26 = Set.init(minimumCapacity:)();
    uint64_t v110 = v26;
    if (v22)
    {
      swift_bridgeObjectRetain();
      uint64_t v108 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v108 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t ObjectType = (uint64_t)v10;
    if (v108)
    {
      if (v108 < 1)
      {
        __break(1u);
LABEL_55:
        swift_once();
LABEL_21:
        uint64_t v31 = (uint64_t)v92;
        uint64_t v32 = sub_10002F6AC((uint64_t)v92, (uint64_t)qword_1001A1EF0);
        uint64_t v22 = v105;
        (*(void (**)(__objc2_meth *, uint64_t, uint64_t))(v8 + 16))(v105, v32, v31);
        sub_10002EB60((uint64_t *)&unk_1001A19E0);
        type metadata accessor for LogMessage();
        *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
        v33._countAndFlagsBits = 0xD00000000000001ALL;
        v33._object = (void *)0x800000010015B700;
        LogMessage.StringInterpolation.appendLiteral(_:)(v33);
        uint64_t v111 = sub_10002EB60(&qword_1001A2230);
        uint64_t v110 = a2;
        swift_bridgeObjectRetain();
        LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
        sub_100034B8C((uint64_t)&v110, &qword_1001A1C50);
        v34._countAndFlagsBits = 0xD000000000000011;
        v34._object = (void *)0x800000010015B720;
        LogMessage.StringInterpolation.appendLiteral(_:)(v34);
        LogMessage.init(stringInterpolation:)();
        Logger.error(_:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        uint64_t result = (*(uint64_t (**)(__objc2_meth *, uint64_t))(v8 + 8))(v22, v31);
        id v10 = 0;
        uint64_t v3 = &OBJC_PROTOCOL___ASCMetricsService;
        if (!v108) {
          return result;
        }
        goto LABEL_24;
      }
      uint64_t v27 = 0;
      do
      {
        if ((a2 & 0xC000000000000001) != 0)
        {
          uint64_t v28 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t v28 = *(void **)(a2 + 8 * v27 + 32);
          swift_unknownObjectRetain();
        }
        ++v27;
        id v29 = [v28 id];
        swift_unknownObjectRelease();
        sub_10009812C(&v112, v29);
      }
      while (v108 != v27);
      swift_bridgeObjectRelease();
      uint64_t v26 = v110;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    id v30 = v3;
    sub_1000643BC(v26);
    id v10 = v3;
    uint64_t v22 = &stru_1001A0000;
    uint64_t v3 = &OBJC_PROTOCOL___ASCMetricsService;
    unint64_t v100 = a2;
    if (v30)
    {
      uint64_t v109 = v30;
      swift_bridgeObjectRelease();
      if (qword_1001A0DB8 == -1) {
        goto LABEL_21;
      }
      goto LABEL_55;
    }
    swift_bridgeObjectRelease();
    sub_10002EC6C((void *)(v106 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStateController), *(void *)(v106 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStateController + 24));
    a2 = v100;
    dispatch thunk of AppStateController.preloadState(forApps:)();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v108) {
      return result;
    }
LABEL_24:
    if (v108 >= 1)
    {
      uint64_t v97 = (void *)((char *)v3[53].opt_inst_meths + v106);
      unint64_t v99 = a2 & 0xC000000000000001;
      uint64_t v103 = (void (**)(char *, uint64_t, __objc2_prot *))(v8 + 16);
      long long v102 = (void (**)(__objc2_meth *, __objc2_prot *))(v8 + 8);
      unsigned int v87 = enum case for App.Kind.store(_:);
      unint64_t v86 = (void (**)(char *, void, uint64_t))(v95 + 104);
      long long v73 = (void (**)(char *, uint64_t))(ObjectType + 8);
      unint64_t v72 = (void (**)(uint64_t, uint64_t))(v101 + 8);
      uint64_t v85 = v94 + 1;
      swift_bridgeObjectRetain();
      uint64_t v22 = 0;
      long long v101 = xmmword_10014CED0;
      uint64_t v95 = (char *)0x800000010015B740;
      unint64_t v79 = (unint64_t)" because we never started";
      unint64_t v94 = (void (**)(char *, uint64_t))0x800000010015B6A0;
      unint64_t v78 = (unint64_t)"Failed to convert offer: ";
      uint64_t v93 = (void *)0x800000010015B6C0;
      uint64_t v3 = v92;
      uint64_t v88 = v21;
      while (1)
      {
        if (v99)
        {
          uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t v8 = *(void *)(a2 + 8 * (void)v22 + 32);
          swift_unknownObjectRetain();
        }
        uint64_t ObjectType = swift_getObjectType();
        id v42 = [(id)v8 hash];
        swift_beginAccess();
        uint64_t v43 = *v21;
        if (*(void *)(*v21 + 16) && (unint64_t v44 = sub_10003AA04((uint64_t)v42), (v45 & 1) != 0))
        {
          uint64_t v46 = *(void *)(*(void *)(v43 + 56) + 8 * v44);
          swift_endAccess();
          uint64_t v47 = *(void *)(v46 + 16);
          BOOL v48 = __OFADD__(v47, 1);
          uint64_t v49 = v47 + 1;
          if (v48)
          {
            __break(1u);
LABEL_53:
            swift_bridgeObjectRetain();
            _CocoaArrayWrapper.endIndex.getter();
            goto LABEL_7;
          }
          *(void *)(v46 + 16) = v49;
          swift_retain();
          id v50 = [(id)v8 id];
          [v50 int64value];
          AdamID.init(value:)();
          uint64_t v109 = v10;
          if (v10)
          {

            if (qword_1001A0DB8 != -1) {
              swift_once();
            }
            uint64_t v51 = sub_10002F6AC((uint64_t)v3, (uint64_t)qword_1001A1EF0);
            uint64_t v52 = v105;
            (*v103)((char *)v105, v51, v3);
            sub_10002EB60((uint64_t *)&unk_1001A19E0);
            type metadata accessor for LogMessage();
            *(_OWORD *)(swift_allocObject() + 16) = v101;
            LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
            v53._countAndFlagsBits = 0xD000000000000019;
            v53._object = (void *)(v79 | 0x8000000000000000);
            LogMessage.StringInterpolation.appendLiteral(_:)(v53);
            uint64_t v111 = ObjectType;
            uint64_t v110 = v8;
            swift_unknownObjectRetain();
            LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
            sub_100034B8C((uint64_t)&v110, &qword_1001A1C50);
            v54._object = (void *)(v78 | 0x8000000000000000);
            v54._countAndFlagsBits = 0xD000000000000010;
            LogMessage.StringInterpolation.appendLiteral(_:)(v54);
            uint64_t v3 = v92;
            LogMessage.init(stringInterpolation:)();
            Logger.error(_:)();
            swift_bridgeObjectRelease();
            swift_errorRelease();
            (*v102)(v52, v3);
            swift_unknownObjectRelease();
            swift_release();
            uint64_t v109 = 0;
          }
          else
          {
            (*v86)(v90, v87, v91);
            App.init(id:kind:)();

            id v36 = v97;
            uint64_t v37 = v97[3];
            uint64_t v81 = v97[4];
            uint64_t v80 = sub_10002EC6C(v97, v37);
            uint64_t v38 = v76;
            sub_100063DC8();
            uint64_t v39 = (uint64_t)v74;
            AppStateController.state(forApp:applying:)();
            uint64_t v40 = v38;
            uint64_t v21 = v88;
            (*v73)(v40, v77);
            sub_10002EC6C(v36, v36[3]);
            uint64_t v3 = v92;
            char v41 = dispatch thunk of AppStateController.isLoaded.getter();
            sub_1000540B4((void *)v8, v39, (v41 & 1) == 0);
            (*v72)(v39, v75);
            (*v85)(v82, v89);
            swift_unknownObjectRelease();
            swift_release();
          }
        }
        else
        {
          swift_endAccess();
          if (([(id)v8 flags] & 4) != 0) {
            sub_10005781C();
          }
          if (([(id)v8 flags] & 0x400) != 0) {
            sub_10005861C();
          }
          id v55 = [(id)v8 hash];
          type metadata accessor for AppOfferStateClient.Observation();
          uint64_t v56 = swift_allocObject();
          *(void *)(v56 + 16) = 1;
          *(void *)(v56 + 24) = v8;
          swift_beginAccess();
          swift_unknownObjectRetain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          id v112 = (id)*v21;
          *uint64_t v21 = 0x8000000000000000;
          sub_10003F21C(v56, (uint64_t)v55, isUniquelyReferenced_nonNull_native);
          *uint64_t v21 = (uint64_t)v112;
          swift_bridgeObjectRelease();
          swift_endAccess();
          sub_10005A3C0((void *)v8);
          sub_100052538((uint64_t)v97, (uint64_t)&v110);
          sub_10002EC6C(&v110, v111);
          id v58 = [(id)v8 id];
          [v58 int64value];
          AdamID.init(value:)();
          if (v10)
          {

            sub_10002ED08((uint64_t)&v110);
            if (qword_1001A0DB8 != -1) {
              swift_once();
            }
            uint64_t v59 = sub_10002F6AC((uint64_t)v3, (uint64_t)qword_1001A1EF0);
            unint64_t v60 = v105;
            (*v103)((char *)v105, v59, v3);
            sub_10002EB60((uint64_t *)&unk_1001A19E0);
            type metadata accessor for LogMessage();
            *(_OWORD *)(swift_allocObject() + 16) = v101;
            LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
            v61._countAndFlagsBits = 0xD000000000000019;
            v61._object = v94;
            LogMessage.StringInterpolation.appendLiteral(_:)(v61);
            uint64_t v111 = ObjectType;
            uint64_t v110 = v8;
            swift_unknownObjectRetain();
            LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
            sub_100034B8C((uint64_t)&v110, &qword_1001A1C50);
            v62._countAndFlagsBits = 0xD000000000000010;
            v62._object = v93;
            LogMessage.StringInterpolation.appendLiteral(_:)(v62);
            LogMessage.init(stringInterpolation:)();
            Logger.error(_:)();
            swift_bridgeObjectRelease();
            swift_errorRelease();
            (*v102)(v60, v3);
            uint64_t v109 = 0;
          }
          else
          {
            uint64_t v109 = 0;
            (*v86)(v90, v87, v91);
            uint64_t v63 = v83;
            App.init(id:kind:)();

            dispatch thunk of AppStateController.setPostsChanges(_:forApp:)();
            uint64_t v64 = v63;
            uint64_t v21 = v88;
            (*v85)(v64, v89);
            sub_10002ED08((uint64_t)&v110);
          }
          if (qword_1001A0DB8 != -1) {
            swift_once();
          }
          uint64_t v65 = sub_10002F6AC((uint64_t)v3, (uint64_t)qword_1001A1EF0);
          uint64_t v66 = v105;
          (*v103)((char *)v105, v65, v3);
          sub_10002EB60((uint64_t *)&unk_1001A19E0);
          type metadata accessor for LogMessage();
          *(_OWORD *)(swift_allocObject() + 16) = v101;
          LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
          v67._countAndFlagsBits = 0xD00000000000001FLL;
          v67._object = v95;
          LogMessage.StringInterpolation.appendLiteral(_:)(v67);
          id v68 = [(id)v8 id];
          uint64_t v111 = v96;
          uint64_t v110 = (uint64_t)v68;
          LogMessage.StringInterpolation.appendInterpolation(safe:)();
          sub_100034B8C((uint64_t)&v110, &qword_1001A1C50);
          v69._countAndFlagsBits = 0;
          v69._object = (void *)0xE000000000000000;
          LogMessage.StringInterpolation.appendLiteral(_:)(v69);
          LogMessage.init(stringInterpolation:)();
          Logger.info(_:)();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          (*v102)(v66, v3);
        }
        uint64_t v22 = (__objc2_meth *)((char *)v22 + 1);
        id v10 = v109;
        a2 = v100;
        if ((__objc2_meth *)v108 == v22) {
          return swift_bridgeObjectRelease();
        }
      }
    }
    __break(1u);
LABEL_57:
    swift_bridgeObjectRetain();
    uint64_t v70 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v70) {
      goto LABEL_4;
    }
  }
}

uint64_t sub_10005A3C0(void *a1)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for OSLogger();
  uint64_t v33 = *(void *)(v3 - 8);
  uint64_t v34 = v3;
  __chkstk_darwin(v3);
  uint64_t v32 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AppOffer();
  uint64_t v28 = *(void *)(v5 - 8);
  uint64_t v29 = v5;
  __chkstk_darwin(v5);
  uint64_t v26 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for State();
  uint64_t v30 = *(void *)(v7 - 8);
  uint64_t v31 = v7;
  __chkstk_darwin(v7);
  uint64_t v27 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for App.Kind();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AdamID();
  __chkstk_darwin(v13 - 8);
  uint64_t v14 = type metadata accessor for App();
  uint64_t v24 = *(void *)(v14 - 8);
  uint64_t v25 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getObjectType();
  id v17 = [a1 id];
  [v17 int64value];
  AdamID.init(value:)();
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for App.Kind.store(_:), v9);
  App.init(id:kind:)();

  uint64_t v18 = (void *)(v35 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStateController);
  sub_10002EC6C((void *)(v35 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStateController), *(void *)(v35 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStateController + 24));
  uint64_t v19 = v26;
  sub_100063DC8();
  uint64_t v20 = (uint64_t)v27;
  AppStateController.state(forApp:applying:)();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v19, v29);
  sub_10002EC6C(v18, v18[3]);
  char v21 = dispatch thunk of AppStateController.isLoaded.getter();
  sub_1000540B4(a1, v20, (v21 & 1) == 0);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v20, v31);
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v16, v25);
}

uint64_t sub_10005AA10(uint64_t a1, unint64_t a2)
{
  uint64_t v57 = type metadata accessor for App.Kind();
  uint64_t v4 = *(char **)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v56 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AdamID();
  __chkstk_darwin(v6 - 8);
  uint64_t v65 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for App();
  uint64_t v8 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  Swift::String v54 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for OSLogger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = a1;
  uint64_t v15 = (uint64_t *)(a1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_observations);
  unint64_t v16 = a2;
  swift_beginAccess();
  uint64_t v58 = *(void *)(*v15 + 16);
  if (a2 >> 62)
  {
LABEL_31:
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v17 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_32:
    uint64_t result = swift_bridgeObjectRelease();
    if (v58)
    {
      if (!*(void *)(*v15 + 16))
      {
        uint64_t v48 = *(void *)(v53 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_jsStackManager + 24);
        uint64_t v49 = *(void *)(v53 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_jsStackManager + 32);
        sub_10002EC6C((void *)(v53 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_jsStackManager), v48);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 16))(v48, v49);
      }
    }
    return result;
  }
  uint64_t v17 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v17) {
    goto LABEL_32;
  }
LABEL_3:
  if (v17 >= 1)
  {
    uint64_t v19 = 0;
    uint64_t v62 = v53 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStateController;
    unint64_t v76 = v16 & 0xC000000000000001;
    long long v73 = (void (**)(char *, uint64_t))(v12 + 8);
    unint64_t v74 = (void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    unsigned int v52 = enum case for App.Kind.store(_:);
    uint64_t v51 = (void (**)(char *, void, uint64_t))(v4 + 104);
    id v50 = (void (**)(char *, uint64_t))(v8 + 8);
    long long v72 = xmmword_10014CED0;
    Swift::String v69 = (void *)0x800000010015B680;
    uint64_t v70 = (void *)0x800000010015B660;
    Swift::String v61 = (void *)0x800000010015B6E0;
    unint64_t v60 = (void *)0x800000010015B6A0;
    uint64_t v59 = (void *)0x800000010015B6C0;
    unint64_t v71 = v16;
    uint64_t v66 = v15;
    Swift::String v67 = v14;
    uint64_t v75 = v17;
    while (1)
    {
      if (v76)
      {
        uint64_t v4 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v4 = *(char **)(v16 + 8 * v19 + 32);
        swift_unknownObjectRetain();
      }
      uint64_t ObjectType = swift_getObjectType();
      id v24 = [v4 hash];
      swift_beginAccess();
      uint64_t v8 = *v15;
      if (*(void *)(*v15 + 16) && (unint64_t v25 = sub_10003AA04((uint64_t)v24), (v26 & 1) != 0))
      {
        uint64_t v12 = *(void *)(*(void *)(v8 + 56) + 8 * v25);
        swift_endAccess();
        uint64_t v27 = *(void *)(v12 + 16);
        BOOL v28 = __OFSUB__(v27, 1);
        uint64_t v29 = v27 - 1;
        if (v28)
        {
          __break(1u);
          goto LABEL_31;
        }
        *(void *)(v12 + 16) = v29;
        if (v29)
        {
          swift_unknownObjectRelease();
          goto LABEL_9;
        }
        swift_retain();
        id v30 = [v4 hash];
        swift_beginAccess();
        unint64_t v31 = sub_10003AA04((uint64_t)v30);
        if (v32)
        {
          unint64_t v33 = v31;
          uint64_t v34 = v66;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v36 = *v34;
          uint64_t v81 = *v34;
          *uint64_t v34 = 0x8000000000000000;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100040478();
            uint64_t v36 = v81;
          }
          sub_10003E84C(v33, v36);
          *uint64_t v34 = v36;
          swift_bridgeObjectRelease();
          uint64_t v14 = v67;
        }
        swift_endAccess();
        swift_release();
        sub_100052538(v62, (uint64_t)v78);
        uint64_t v37 = v79;
        uint64_t v64 = v80;
        uint64_t v63 = sub_10002EC6C(v78, v79);
        id v38 = [v4 id];
        [v38 int64value];
        uint64_t v39 = v68;
        AdamID.init(value:)();
        uint64_t v68 = v39;
        if (v39)
        {

          sub_10002ED08((uint64_t)v78);
          if (qword_1001A0DB8 != -1) {
            swift_once();
          }
          uint64_t v40 = sub_10002F6AC(v11, (uint64_t)qword_1001A1EF0);
          (*v74)(v14, v40, v11);
          sub_10002EB60((uint64_t *)&unk_1001A19E0);
          type metadata accessor for LogMessage();
          *(_OWORD *)(swift_allocObject() + 16) = v72;
          LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
          v41._countAndFlagsBits = 0xD000000000000019;
          v41._object = v60;
          LogMessage.StringInterpolation.appendLiteral(_:)(v41);
          uint64_t v79 = ObjectType;
          v78[0] = v4;
          swift_unknownObjectRetain();
          LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
          sub_100034B8C((uint64_t)v78, &qword_1001A1C50);
          v42._countAndFlagsBits = 0xD000000000000010;
          v42._object = v59;
          LogMessage.StringInterpolation.appendLiteral(_:)(v42);
          LogMessage.init(stringInterpolation:)();
          Logger.error(_:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          (*v73)(v14, v11);
          uint64_t v68 = 0;
        }
        else
        {
          (*v51)(v56, v52, v57);
          uint64_t ObjectType = v37;
          uint64_t v43 = v54;
          uint64_t v14 = v67;
          App.init(id:kind:)();

          dispatch thunk of AppStateController.setPostsChanges(_:forApp:)();
          (*v50)(v43, v55);
          sub_10002ED08((uint64_t)v78);
        }
        uint64_t v15 = v66;
        if (qword_1001A0DB8 != -1) {
          swift_once();
        }
        uint64_t v44 = sub_10002F6AC(v11, (uint64_t)qword_1001A1EF0);
        (*v74)(v14, v44, v11);
        sub_10002EB60((uint64_t *)&unk_1001A19E0);
        type metadata accessor for LogMessage();
        *(_OWORD *)(swift_allocObject() + 16) = v72;
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
        v45._countAndFlagsBits = 0xD00000000000001ELL;
        v45._object = v61;
        LogMessage.StringInterpolation.appendLiteral(_:)(v45);
        id v46 = [v4 id];
        uint64_t v79 = sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
        v78[0] = v46;
        LogMessage.StringInterpolation.appendInterpolation(safe:)();
        sub_100034B8C((uint64_t)v78, &qword_1001A1C50);
        v47._countAndFlagsBits = 0;
        v47._object = (void *)0xE000000000000000;
        LogMessage.StringInterpolation.appendLiteral(_:)(v47);
        LogMessage.init(stringInterpolation:)();
        Logger.info(_:)();
        swift_unknownObjectRelease();
        swift_release();
        uint64_t v14 = v67;
      }
      else
      {
        swift_endAccess();
        if (qword_1001A0DB8 != -1) {
          swift_once();
        }
        uint64_t v20 = sub_10002F6AC(v11, (uint64_t)qword_1001A1EF0);
        (*v74)(v14, v20, v11);
        sub_10002EB60((uint64_t *)&unk_1001A19E0);
        type metadata accessor for LogMessage();
        *(_OWORD *)(swift_allocObject() + 16) = v72;
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
        v21._countAndFlagsBits = 0xD000000000000019;
        v21._object = v70;
        LogMessage.StringInterpolation.appendLiteral(_:)(v21);
        id v22 = [v4 id];
        uint64_t v79 = sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
        v78[0] = v22;
        LogMessage.StringInterpolation.appendInterpolation(safe:)();
        sub_100034B8C((uint64_t)v78, &qword_1001A1C50);
        v23._countAndFlagsBits = 0xD000000000000019;
        v23._object = v69;
        LogMessage.StringInterpolation.appendLiteral(_:)(v23);
        LogMessage.init(stringInterpolation:)();
        Logger.error(_:)();
        swift_unknownObjectRelease();
      }
      swift_bridgeObjectRelease();
      (*v73)(v14, v11);
      unint64_t v16 = v71;
LABEL_9:
      if (v75 == ++v19) {
        goto LABEL_32;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10005B618(char *a1, uint64_t a2, uint64_t a3, void (*a4)(char *, uint64_t, uint64_t))
{
  uint64_t ObjectType = swift_getObjectType();
  sub_10002EB60(&qword_1001A1700);
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = *(void **)&a1[OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_stateLock];
  uint64_t v9 = a1;
  [v8 lock];
  a4(v9, v7, ObjectType);
  [v8 unlock];

  return swift_bridgeObjectRelease();
}

void sub_10005B6E0(void *a1, void *a2, void *a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v6 = v5;
  Swift::String v45 = a4;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v12 = sub_10002EB60(&qword_1001A2450);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void **)(v5 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_stateLock);
  [v15 lock];
  id v16 = [a1 hash];
  uint64_t v17 = (uint64_t *)(v5 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_observations);
  swift_beginAccess();
  uint64_t v18 = *v17;
  if (*(void *)(v18 + 16) && (unint64_t v19 = sub_10003AA04((uint64_t)v16), (v20 & 1) != 0))
  {
    uint64_t v21 = *(void *)(*(void *)(v18 + 56) + 8 * v19);
    swift_retain();
  }
  else
  {
    uint64_t v21 = 0;
  }
  swift_endAccess();
  swift_release();
  [v15 unlock];
  if (v21)
  {
    sub_10002DC48((uint64_t)&v48);
    if (v49)
    {
      sub_100031C10(&v48, (uint64_t)&v51);
      uint64_t v22 = *(void *)(v6 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_objectGraph);
      uint64_t v23 = v6 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_restrictions;
      sub_100052538(v6 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStateController, (uint64_t)&v48);
      sub_100052538(v23, (uint64_t)v47);
      sub_100052538((uint64_t)&v51, (uint64_t)v46);
      id v24 = (void *)swift_allocObject();
      v24[2] = v22;
      uint64_t v24[3] = a1;
      sub_100031C10(&v48, (uint64_t)(v24 + 4));
      sub_100031C10(v47, (uint64_t)(v24 + 9));
      v24[14] = a2;
      v24[15] = a3;
      sub_100031C10(v46, (uint64_t)(v24 + 16));
      v24[21] = ObjectType;
      sub_10002EB60(&qword_1001A21A0);
      swift_retain();
      swift_unknownObjectRetain();
      id v25 = a2;
      id v26 = a3;
      uint64_t v27 = Promise.__allocating_init()();
      uint64_t v28 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v14, 1, 1, v28);
      uint64_t v29 = (void *)swift_allocObject();
      _OWORD v29[2] = 0;
      v29[3] = 0;
      v29[4] = &unk_1001A2198;
      v29[5] = v24;
      v29[6] = v27;
      swift_retain();
      sub_1000F6C04((uint64_t)v14, (uint64_t)&unk_1001A21A8, (uint64_t)v29);
      swift_release();
      uint64_t v30 = swift_allocObject();
      unint64_t v31 = v45;
      *(void *)(v30 + 16) = v45;
      *(void *)(v30 + 24) = a5;
      *(void *)(v30 + 32) = "performAction(of:with:in:withReplyHandler:)";
      *(void *)(v30 + 40) = 43;
      *(unsigned char *)(v30 + 48) = 2;
      uint64_t v32 = swift_allocObject();
      *(void *)(v32 + 16) = v31;
      *(void *)(v32 + 24) = a5;
      *(void *)(v32 + 32) = "performAction(of:with:in:withReplyHandler:)";
      *(void *)(v32 + 40) = 43;
      *(unsigned char *)(v32 + 48) = 2;
      uint64_t v33 = sub_10002EE34(0, (unint64_t *)&qword_1001A2170);
      swift_retain_n();
      uint64_t v34 = static OS_dispatch_queue.main.getter();
      uint64_t v49 = v33;
      id v50 = &protocol witness table for OS_dispatch_queue;
      *(void *)&long long v48 = v34;
      Promise.then(perform:orCatchError:on:)();
      swift_release();
      swift_release();
      sub_10002ED08((uint64_t)&v48);
      swift_release();
      sub_10002ED08((uint64_t)&v51);
      return;
    }
    sub_100034B8C((uint64_t)&v48, (uint64_t *)&unk_1001A2180);
    type metadata accessor for ASCAppOfferActionError(0);
    *(void *)&long long v48 = 2;
    sub_10002EB60(&qword_1001A4CE0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10014CED0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v37;
    id v51 = 0;
    unint64_t v52 = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    swift_getObjectType();
    id v38 = (void *)_typeName(_:qualified:)();
    unint64_t v40 = v39;
    swift_bridgeObjectRelease();
    id v51 = v38;
    unint64_t v52 = v40;
    v41._object = (void *)0x800000010015B540;
    v41._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v41);
    id v42 = v51;
    unint64_t v43 = v52;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = v42;
    *(void *)(inited + 56) = v43;
    sub_100062F68(inited);
    sub_100061858((unint64_t *)&qword_1001A1300, type metadata accessor for ASCAppOfferActionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    id v44 = v51;
    id v35 = v51;
    v45(v44);
  }
  else
  {
    type metadata accessor for ASCAppOfferActionError(0);
    *(void *)&long long v48 = 0;
    sub_100061044((uint64_t)&_swiftEmptyArrayStorage);
    sub_100061858((unint64_t *)&qword_1001A1300, type metadata accessor for ASCAppOfferActionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    id v35 = v51;
    v45(v51);
  }
}

uint64_t sub_10005BC9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[75] = a8;
  v8[74] = a7;
  v8[73] = a6;
  v8[72] = a5;
  v8[71] = a4;
  v8[70] = a3;
  v8[69] = a2;
  sub_10002EB60(&qword_1001A2450);
  v8[76] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for ActionOutcome();
  v8[77] = v9;
  v8[78] = *(void *)(v9 - 8);
  v8[79] = swift_task_alloc();
  uint64_t v10 = sub_10002EB60(&qword_1001A19B8);
  v8[80] = v10;
  v8[81] = *(void *)(v10 - 8);
  v8[82] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for MetricsFieldsContext();
  v8[83] = v11;
  v8[84] = *(void *)(v11 - 8);
  v8[85] = swift_task_alloc();
  v8[86] = swift_task_alloc();
  type metadata accessor for LogMessage.StringInterpolation();
  v8[87] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for OSLogger();
  v8[88] = v12;
  v8[89] = *(void *)(v12 - 8);
  v8[90] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for AppOffer();
  v8[91] = v13;
  v8[92] = *(void *)(v13 - 8);
  v8[93] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for State();
  v8[94] = v14;
  v8[95] = *(void *)(v14 - 8);
  v8[96] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for App.Kind();
  v8[97] = v15;
  v8[98] = *(void *)(v15 - 8);
  v8[99] = swift_task_alloc();
  type metadata accessor for AdamID();
  v8[100] = swift_task_alloc();
  uint64_t v16 = type metadata accessor for App();
  v8[101] = v16;
  v8[102] = *(void *)(v16 - 8);
  v8[103] = swift_task_alloc();
  uint64_t v17 = sub_10002EB60((uint64_t *)&unk_1001A2160);
  v8[104] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v8[105] = v18;
  v8[106] = *(void *)(v18 + 64);
  v8[107] = swift_task_alloc();
  v8[108] = swift_task_alloc();
  return _swift_task_switch(sub_10005C110, 0, 0);
}

uint64_t sub_10005C110()
{
  uint64_t v1 = *(void **)(v0 + 560);
  type metadata accessor for ObjectGraph();
  inject<A, B>(_:from:)();
  swift_getObjectType();
  id v2 = [v1 id];
  [v2 int64value];
  AdamID.init(value:)();
  uint64_t v71 = *(void *)(v0 + 768);
  uint64_t v3 = *(void *)(v0 + 744);
  uint64_t v4 = *(void *)(v0 + 736);
  uint64_t v74 = *(void *)(v0 + 728);
  uint64_t v5 = *(void **)(v0 + 576);
  uint64_t v6 = *(void **)(v0 + 568);
  Swift::String v69 = *(void **)(v0 + 560);
  (*(void (**)(void, void, void))(*(void *)(v0 + 784) + 104))(*(void *)(v0 + 792), enum case for App.Kind.store(_:), *(void *)(v0 + 776));
  App.init(id:kind:)();

  sub_10002EC6C(v6, v6[3]);
  sub_100063DC8();
  AppStateController.state(forApp:applying:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v74);
  uint64_t v8 = v5[3];
  uint64_t v7 = v5[4];
  sub_10002EC6C(v5, v8);
  if (sub_10012C484(v69, v71, v8, v7))
  {
    if (qword_1001A0DB8 != -1) {
      swift_once();
    }
    uint64_t v9 = *(void *)(v0 + 720);
    uint64_t v10 = *(void *)(v0 + 712);
    uint64_t v11 = *(void *)(v0 + 704);
    uint64_t v12 = *(void **)(v0 + 584);
    uint64_t v13 = *(void **)(v0 + 560);
    uint64_t v62 = v13;
    uint64_t v64 = *(void **)(v0 + 592);
    uint64_t v14 = sub_10002F6AC(v11, (uint64_t)qword_1001A1EF0);
    *(void *)(v0 + 872) = v14;
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
    *(void *)(v0 + 880) = v15;
    *(void *)(v0 + 888) = (v10 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v15(v9, v14, v11);
    *(void *)(v0 + 896) = sub_10002EB60((uint64_t *)&unk_1001A19E0);
    uint64_t v16 = *(void *)(type metadata accessor for LogMessage() - 8);
    *(void *)(v0 + 904) = *(void *)(v16 + 72);
    *(_DWORD *)(v0 + 968) = *(_DWORD *)(v16 + 80);
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v17._countAndFlagsBits = 0xD00000000000001BLL;
    v17._object = (void *)0x800000010015B620;
    LogMessage.StringInterpolation.appendLiteral(_:)(v17);
    id v18 = [v13 id];
    uint64_t v19 = sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
    *(void *)(v0 + 912) = v19;
    *(void *)(v0 + 312) = v19;
    *(void *)(v0 + 288) = v18;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_100034B8C(v0 + 288, &qword_1001A1C50);
    v20._countAndFlagsBits = 0;
    v20._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v20);
    LogMessage.init(stringInterpolation:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    *(void *)(v0 + 920) = v21;
    *(void *)(v0 + 928) = (v10 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v21(v9, v11);
    sub_10002EB60((uint64_t *)&unk_1001A21C0);
    type metadata accessor for Dependency();
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_10014CD00;
    sub_10002EE34(0, (unint64_t *)&qword_1001A5470);
    *(void *)(v0 + 536) = v12;
    id v23 = v12;
    Dependency.init<A>(satisfying:with:)();
    sub_10002EE34(0, &qword_1001A21D0);
    *(void *)(v0 + 520) = v64;
    id v24 = v64;
    Dependency.init<A>(satisfying:with:)();
    *(void *)(v0 + 504) = v22;
    sub_10002EB60(&qword_1001A21D8);
    sub_100061D9C((unint64_t *)&unk_1001A21E0, &qword_1001A21D8);
    *(void *)(v0 + 936) = dispatch thunk of BaseObjectGraph.adding<A>(allDependencies:)();
    swift_bridgeObjectRelease();
    MetricsFieldsContext.init()();
    *(void *)(v0 + 480) = v62;
    if (qword_1001A0DC0 != -1) {
      swift_once();
    }
    id v25 = *(void **)(v0 + 584);
    uint64_t v26 = sub_10002EB60(qword_1001A22E0);
    sub_10002F6AC(v26, (uint64_t)qword_1001AE298);
    sub_10002EB60(&qword_1001A1700);
    MetricsFieldsContext.addValue<A>(_:forProperty:)();
    *(void *)(v0 + 456) = v25;
    uint64_t v27 = qword_1001A0DA0;
    id v28 = v25;
    if (v27 != -1) {
      swift_once();
    }
    uint64_t v29 = *(void *)(v0 + 688);
    uint64_t v30 = *(void *)(v0 + 680);
    uint64_t v31 = *(void *)(v0 + 672);
    uint64_t v32 = *(void *)(v0 + 664);
    uint64_t v33 = *(void *)(v0 + 656);
    uint64_t v34 = *(void *)(v0 + 648);
    uint64_t v35 = *(void *)(v0 + 640);
    uint64_t v36 = *(void **)(v0 + 584);
    uint64_t v37 = sub_10002EB60(&qword_1001A50E0);
    sub_10002F6AC(v37, (uint64_t)qword_1001AE268);
    MetricsFieldsContext.addValue<A>(_:forProperty:)();

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32))(v29, v30, v32);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v33, v29, v32);
    (*(void (**)(uint64_t, void, uint64_t))(v34 + 104))(v33, enum case for ActionDispatcher.MetricsBehavior.fromAction<A>(_:), v35);
    *(void *)(v0 + 944) = ActionDispatcher.perform(_:withMetrics:asPartOf:)();
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
    uint64_t v38 = sub_10002EB60((uint64_t *)&unk_1001A21F0);
    uint64_t v39 = sub_100061D9C((unint64_t *)&qword_1001A19B0, (uint64_t *)&unk_1001A21F0);
    unint64_t v40 = (void *)swift_task_alloc();
    *(void *)(v0 + 952) = v40;
    *unint64_t v40 = v0;
    v40[1] = sub_10005CE78;
    uint64_t v41 = *(void *)(v0 + 632);
    return dispatch thunk of Future.then()(v41, v38, v39);
  }
  else
  {
    if (qword_1001A0DB8 != -1) {
      swift_once();
    }
    uint64_t v61 = *(void *)(v0 + 856);
    uint64_t v63 = *(void *)(v0 + 864);
    uint64_t v65 = *(void *)(v0 + 848);
    uint64_t v42 = *(void *)(v0 + 840);
    uint64_t v60 = *(void *)(v0 + 832);
    uint64_t v73 = *(void *)(v0 + 824);
    uint64_t v70 = *(void *)(v0 + 816);
    uint64_t v72 = *(void *)(v0 + 808);
    uint64_t v66 = *(void *)(v0 + 760);
    uint64_t v67 = *(void *)(v0 + 752);
    uint64_t v68 = *(void *)(v0 + 768);
    uint64_t v43 = *(void *)(v0 + 720);
    uint64_t v44 = *(void *)(v0 + 712);
    uint64_t v45 = *(void *)(v0 + 704);
    uint64_t v59 = *(void *)(v0 + 608);
    id v46 = *(void **)(v0 + 560);
    uint64_t v75 = *(void *)(v0 + 552);
    uint64_t v47 = sub_10002F6AC(v45, (uint64_t)qword_1001A1EF0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v43, v47, v45);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CD00;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v48._object = (void *)0x800000010015B590;
    v48._countAndFlagsBits = 0xD000000000000022;
    LogMessage.StringInterpolation.appendLiteral(_:)(v48);
    id v49 = [v46 id];
    *(void *)(v0 + 344) = sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
    *(void *)(v0 + 320) = v49;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_100034B8C(v0 + 320, &qword_1001A1C50);
    v50._countAndFlagsBits = 0;
    v50._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v50);
    LogMessage.init(stringInterpolation:)();
    LogMessage.init(stringLiteral:)();
    Logger.error(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
    type metadata accessor for ASCAppOfferActionError(0);
    *(void *)(v0 + 464) = 4;
    sub_10002EB60(&qword_1001A4CE0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10014CED0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v52;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = 0xD000000000000022;
    *(void *)(inited + 56) = 0x800000010015B5F0;
    sub_100062F68(inited);
    sub_100061858((unint64_t *)&qword_1001A1300, type metadata accessor for ASCAppOfferActionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v53 = *(void **)(v0 + 472);
    uint64_t v54 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v59, 1, 1, v54);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v61, v63, v60);
    unint64_t v55 = (*(unsigned __int8 *)(v42 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
    uint64_t v56 = (char *)swift_allocObject();
    *((void *)v56 + 2) = 0;
    *((void *)v56 + 3) = 0;
    *((void *)v56 + 4) = v53;
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(&v56[v55], v61, v60);
    *(void *)&v56[(v65 + v55 + 7) & 0xFFFFFFFFFFFFFFF8] = v75;
    v53;
    swift_retain();
    sub_1000AA41C(v59, (uint64_t)&unk_1001A21B8, (uint64_t)v56);
    swift_release();
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v68, v67);
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v73, v72);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v63, v60);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v57 = *(uint64_t (**)(void))(v0 + 8);
    return v57();
  }
}

uint64_t sub_10005CE78()
{
  id v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 960) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_release();
    uint64_t v3 = sub_10005D2F0;
  }
  else
  {
    (*(void (**)(void, void))(v2[78] + 8))(v2[79], v2[77]);
    swift_release();
    uint64_t v3 = sub_10005CFD4;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10005CFD4()
{
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v0 + 920);
  uint64_t v11 = *(void *)(v0 + 912);
  uint64_t v22 = *(void *)(v0 + 864);
  uint64_t v20 = *(void *)(v0 + 840);
  uint64_t v21 = *(void *)(v0 + 832);
  uint64_t v17 = *(void *)(v0 + 816);
  uint64_t v18 = *(void *)(v0 + 808);
  uint64_t v19 = *(void *)(v0 + 824);
  uint64_t v1 = *(void *)(v0 + 760);
  uint64_t v14 = *(void *)(v0 + 752);
  uint64_t v15 = *(void *)(v0 + 768);
  uint64_t v10 = *(void *)(v0 + 720);
  uint64_t v2 = *(void *)(v0 + 704);
  uint64_t v13 = *(void *)(v0 + 688);
  uint64_t v3 = *(void *)(v0 + 672);
  uint64_t v12 = *(void *)(v0 + 664);
  uint64_t v4 = *(void **)(v0 + 560);
  (*(void (**)(void))(v0 + 880))();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v5._object = (void *)0x800000010015B640;
  v5._countAndFlagsBits = 0xD000000000000014;
  LogMessage.StringInterpolation.appendLiteral(_:)(v5);
  id v6 = [v4 id];
  *(void *)(v0 + 280) = v11;
  *(void *)(v0 + 256) = v6;
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C(v0 + 256, &qword_1001A1C50);
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v7);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  v16(v10, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v13, v12);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v15, v14);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v19, v18);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v22, v21);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_10005D2F0()
{
  uint64_t v25 = *(void *)(v0 + 960);
  uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v0 + 920);
  uint64_t v24 = *(void *)(v0 + 912);
  uint64_t v42 = *(void *)(v0 + 864);
  uint64_t v32 = *(void *)(v0 + 848);
  uint64_t v28 = *(void *)(v0 + 840);
  uint64_t v29 = *(void *)(v0 + 856);
  uint64_t v30 = *(void *)(v0 + 832);
  uint64_t v40 = *(void *)(v0 + 816);
  uint64_t v41 = *(void *)(v0 + 824);
  uint64_t v39 = *(void *)(v0 + 808);
  uint64_t v36 = *(void *)(v0 + 760);
  uint64_t v37 = *(void *)(v0 + 752);
  uint64_t v38 = *(void *)(v0 + 768);
  uint64_t v1 = *(void *)(v0 + 720);
  uint64_t v2 = *(void *)(v0 + 704);
  uint64_t v33 = *(void *)(v0 + 672);
  uint64_t v34 = *(void *)(v0 + 664);
  uint64_t v35 = *(void *)(v0 + 688);
  uint64_t v26 = *(void *)(v0 + 608);
  uint64_t v3 = *(void **)(v0 + 560);
  uint64_t v31 = *(void *)(v0 + 552);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 880))(v1, *(void *)(v0 + 872), v2);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v4._object = (void *)0x800000010015B590;
  v4._countAndFlagsBits = 0xD000000000000022;
  LogMessage.StringInterpolation.appendLiteral(_:)(v4);
  id v5 = [v3 id];
  *(void *)(v0 + 376) = v24;
  *(void *)(v0 + 352) = v5;
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C(v0 + 352, &qword_1001A1C50);
  v6._countAndFlagsBits = 0x6E6F73616572202CLL;
  v6._object = (void *)0xEA0000000000203ALL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v6);
  swift_getErrorValue();
  uint64_t v8 = *(void *)(v0 + 408);
  uint64_t v7 = *(void *)(v0 + 416);
  *(void *)(v0 + 248) = v7;
  uint64_t v9 = sub_100031A88((uint64_t *)(v0 + 224));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v9, v8, v7);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C(v0 + 224, &qword_1001A1C50);
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v10);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  v27(v1, v2);
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v26, 1, 1, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v29, v42, v30);
  unint64_t v12 = (*(unsigned __int8 *)(v28 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  uint64_t v13 = (char *)swift_allocObject();
  *((void *)v13 + 2) = 0;
  *((void *)v13 + 3) = 0;
  *((void *)v13 + 4) = v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 32))(&v13[v12], v29, v30);
  *(void *)&v13[(v32 + v12 + 7) & 0xFFFFFFFFFFFFFFF8] = v31;
  swift_retain();
  swift_errorRetain();
  sub_1000AA41C(v26, (uint64_t)&unk_1001A2208, (uint64_t)v13);
  swift_release();
  type metadata accessor for ASCAppOfferActionError(0);
  *(void *)(v0 + 496) = 3;
  sub_10002EB60(&qword_1001A4CE0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10014CD00;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v15;
  swift_getErrorValue();
  uint64_t v16 = *(void *)(v0 + 432);
  uint64_t v17 = *(void *)(v0 + 440);
  *(void *)(inited + 72) = v17;
  uint64_t v18 = sub_100031A88((uint64_t *)(inited + 48));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v18, v16, v17);
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v19;
  swift_getErrorValue();
  uint64_t v20 = Error.localizedDescription.getter();
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 96) = v20;
  *(void *)(inited + 104) = v21;
  sub_100062F68(inited);
  sub_100061858((unint64_t *)&qword_1001A1300, type metadata accessor for ASCAppOfferActionError);
  _BridgedStoredNSError.init(_:userInfo:)();
  swift_willThrow();
  swift_release();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v35, v34);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v38, v37);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v41, v39);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v42, v30);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
  return v22();
}

uint64_t sub_10005D950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint8_t v6[8] = a5;
  v6[9] = a6;
  v6[7] = a4;
  uint64_t v7 = sub_10002EB60(&qword_1001A19B8);
  v6[10] = v7;
  v6[11] = *(void *)(v7 - 8);
  v6[12] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ActionOutcome();
  v6[13] = v8;
  v6[14] = *(void *)(v8 - 8);
  v6[15] = swift_task_alloc();
  v6[16] = type metadata accessor for PresentErrorAction();
  v6[17] = swift_task_alloc();
  return _swift_task_switch(sub_10005DAA4, 0, 0);
}

uint64_t sub_10005DAA4()
{
  uint64_t v2 = v0[16];
  uint64_t v1 = v0[17];
  uint64_t v4 = v0[11];
  uint64_t v3 = v0[12];
  uint64_t v5 = v0[10];
  Swift::String v6 = (void *)v0[7];
  static ActionMetrics.notInstrumented.getter();
  *(void *)(v1 + *(int *)(v2 + 20)) = v6;
  v0[5] = v2;
  v0[6] = sub_100061858((unint64_t *)&unk_1001A2210, (void (*)(uint64_t))type metadata accessor for PresentErrorAction);
  uint64_t v7 = sub_100031A88(v0 + 2);
  sub_100062004(v1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PresentErrorAction);
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v3, enum case for ActionDispatcher.MetricsBehavior.notProcessed<A>(_:), v5);
  id v8 = v6;
  uint64_t v9 = (void *)swift_task_alloc();
  v0[18] = (uint64_t)v9;
  uint64_t v10 = sub_10002EB60((uint64_t *)&unk_1001A2160);
  void *v9 = v0;
  v9[1] = sub_10005DC24;
  uint64_t v11 = v0[15];
  uint64_t v12 = v0[12];
  uint64_t v13 = v0[9];
  return ActionDispatcher.perform(_:withMetrics:asPartOf:)(v11, v0 + 2, v12, v13, v10);
}

uint64_t sub_10005DC24()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 96);
  uint64_t v4 = *(void *)(*(void *)v1 + 88);
  uint64_t v5 = *(void *)(*(void *)v1 + 80);
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
  {
    Swift::String v6 = sub_1000623B0;
  }
  else
  {
    (*(void (**)(void, void))(v2[14] + 8))(v2[15], v2[13]);
    sub_10002ED08((uint64_t)(v2 + 2));
    Swift::String v6 = sub_1000623B4;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_10005DDC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint8_t v6[8] = a5;
  v6[9] = a6;
  v6[7] = a4;
  uint64_t v7 = sub_10002EB60(&qword_1001A19B8);
  v6[10] = v7;
  v6[11] = *(void *)(v7 - 8);
  v6[12] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ActionOutcome();
  v6[13] = v8;
  v6[14] = *(void *)(v8 - 8);
  v6[15] = swift_task_alloc();
  v6[16] = type metadata accessor for PresentErrorAction();
  v6[17] = swift_task_alloc();
  return _swift_task_switch(sub_10005DF14, 0, 0);
}

uint64_t sub_10005DF14()
{
  uint64_t v2 = v0[16];
  uint64_t v1 = v0[17];
  uint64_t v4 = v0[11];
  uint64_t v3 = v0[12];
  uint64_t v5 = v0[10];
  uint64_t v6 = v0[7];
  static ActionMetrics.notInstrumented.getter();
  *(void *)(v1 + *(int *)(v2 + 20)) = v6;
  v0[5] = v2;
  v0[6] = sub_100061858((unint64_t *)&unk_1001A2210, (void (*)(uint64_t))type metadata accessor for PresentErrorAction);
  uint64_t v7 = sub_100031A88(v0 + 2);
  sub_100062004(v1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PresentErrorAction);
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v3, enum case for ActionDispatcher.MetricsBehavior.notProcessed<A>(_:), v5);
  swift_errorRetain();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[18] = (uint64_t)v8;
  uint64_t v9 = sub_10002EB60((uint64_t *)&unk_1001A2160);
  void *v8 = v0;
  v8[1] = sub_10005E094;
  uint64_t v10 = v0[15];
  uint64_t v11 = v0[12];
  uint64_t v12 = v0[9];
  return ActionDispatcher.perform(_:withMetrics:asPartOf:)(v10, v0 + 2, v11, v12, v9);
}

uint64_t sub_10005E094()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 96);
  uint64_t v4 = *(void *)(*(void *)v1 + 88);
  uint64_t v5 = *(void *)(*(void *)v1 + 80);
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
  {
    uint64_t v6 = sub_10005E2D4;
  }
  else
  {
    (*(void (**)(void, void))(v2[14] + 8))(v2[15], v2[13]);
    sub_10002ED08((uint64_t)(v2 + 2));
    uint64_t v6 = sub_10005E230;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_10005E230()
{
  sub_10006206C(*(void *)(v0 + 136), (uint64_t (*)(void))type metadata accessor for PresentErrorAction);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10005E2D4()
{
  sub_10006206C(*(void *)(v0 + 136), (uint64_t (*)(void))type metadata accessor for PresentErrorAction);
  sub_10002ED08(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10005E458(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v48 = a2;
  uint64_t v49 = a3;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = sub_10002EB60(&qword_1001A19B8);
  uint64_t v43 = *(void *)(v5 - 8);
  uint64_t v44 = v5;
  __chkstk_darwin(v5);
  uint64_t v42 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for WatchReinstallAction();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for OSLogger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10002EB60((uint64_t *)&unk_1001A2160);
  uint64_t v46 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(v3 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_objectGraph);
  type metadata accessor for ObjectGraph();
  uint64_t v45 = v17;
  uint64_t v19 = v15;
  uint64_t v41 = v18;
  inject<A, B>(_:from:)();
  if (qword_1001A0DB8 != -1) {
    swift_once();
  }
  uint64_t v20 = sub_10002F6AC(v11, (uint64_t)qword_1001A1EF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v20, v11);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v21._object = (void *)0x800000010015B4E0;
  v21._countAndFlagsBits = 0xD000000000000015;
  LogMessage.StringInterpolation.appendLiteral(_:)(v21);
  uint64_t v51 = sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
  v50[0] = (uint64_t)a1;
  id v22 = a1;
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)v50, &qword_1001A1C50);
  v23._countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v23);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  static ActionMetrics.notInstrumented.getter();
  uint64_t v24 = &v9[*(int *)(v7 + 20)];
  *(void *)uint64_t v24 = v22;
  *((void *)v24 + 1) = 0;
  v24[16] = 0;
  uint64_t v51 = v7;
  uint64_t v52 = (void *)sub_100061858((unint64_t *)&unk_1001A5DF0, (void (*)(uint64_t))type metadata accessor for WatchReinstallAction);
  uint64_t v25 = sub_100031A88(v50);
  sub_100062004((uint64_t)v9, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for WatchReinstallAction);
  uint64_t v27 = v42;
  uint64_t v26 = v43;
  uint64_t v28 = v44;
  (*(void (**)(char *, void, uint64_t))(v43 + 104))(v42, enum case for ActionDispatcher.MetricsBehavior.notProcessed<A>(_:), v44);
  id v29 = v22;
  uint64_t v41 = v19;
  uint64_t v30 = v45;
  ActionDispatcher.perform(_:withMetrics:asPartOf:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v28);
  sub_10002ED08((uint64_t)v50);
  uint64_t v31 = (void *)swift_allocObject();
  uint64_t v32 = v48;
  uint64_t v33 = v49;
  v31[2] = v29;
  v31[3] = v32;
  uint64_t v34 = ObjectType;
  v31[4] = v33;
  v31[5] = v34;
  uint64_t v35 = (void *)swift_allocObject();
  void v35[2] = v29;
  v35[3] = v32;
  v35[4] = v33;
  v35[5] = v34;
  uint64_t v36 = sub_10002EE34(0, (unint64_t *)&qword_1001A2170);
  id v37 = v29;
  swift_retain_n();
  id v38 = v37;
  uint64_t v39 = static OS_dispatch_queue.main.getter();
  uint64_t v51 = v36;
  uint64_t v52 = &protocol witness table for OS_dispatch_queue;
  v50[0] = v39;
  Promise.then(perform:orCatchError:on:)();
  swift_release();
  swift_release();
  swift_release();
  sub_10002ED08((uint64_t)v50);
  sub_10006206C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for WatchReinstallAction);
  return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v30, v41);
}

uint64_t sub_10005EAA4(uint64_t a1, void *a2, uint64_t (*a3)(void))
{
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for OSLogger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0DB8 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_10002F6AC(v6, (uint64_t)qword_1001A1EF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v11._object = (void *)0x800000010015B520;
  v11._countAndFlagsBits = 0xD00000000000001DLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v11);
  uint64_t v15[3] = sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
  v15[0] = a2;
  id v12 = a2;
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)v15, &qword_1001A1C50);
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v13);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return a3(0);
}

uint64_t sub_10005ED60(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v20 = a4;
  Swift::String v21 = a3;
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for OSLogger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0DB8 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_10002F6AC(v7, (uint64_t)qword_1001A1EF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v12._object = (void *)0x800000010015B500;
  v12._countAndFlagsBits = 0xD00000000000001CLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v12);
  uint64_t v25 = sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
  v24[0] = (uint64_t)a2;
  id v13 = a2;
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)v24, &qword_1001A1C50);
  v14._countAndFlagsBits = 0x6E6F73616572202CLL;
  v14._object = (void *)0xEA0000000000203ALL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v14);
  swift_getErrorValue();
  uint64_t v16 = v22;
  uint64_t v15 = v23;
  uint64_t v25 = v23;
  uint64_t v17 = sub_100031A88(v24);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v17, v16, v15);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)v24, &qword_1001A1C50);
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v18);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v21(a1);
}

uint64_t sub_10005F140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v47 = a4;
  uint64_t v44 = a1;
  uint64_t v45 = a3;
  uint64_t v39 = a2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v41 = sub_10002EB60(&qword_1001A19B8);
  uint64_t v38 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v6 = (char *)v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for WatchReinstallAction();
  __chkstk_darwin(v7);
  uint64_t v46 = (char *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v9 - 8);
  uint64_t v10 = type metadata accessor for OSLogger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10002EB60((uint64_t *)&unk_1001A2160);
  uint64_t v42 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(uint64_t (**)(void))(v4 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_objectGraph);
  type metadata accessor for ObjectGraph();
  uint64_t v40 = v16;
  v37[1] = v17;
  uint64_t v48 = v14;
  inject<A, B>(_:from:)();
  if (qword_1001A0DB8 != -1) {
    swift_once();
  }
  uint64_t v18 = sub_10002F6AC(v10, (uint64_t)qword_1001A1EF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v18, v10);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v19._object = (void *)0x800000010015B460;
  v19._countAndFlagsBits = 0xD00000000000001CLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v19);
  Swift::String v50 = &type metadata for String;
  uint64_t v20 = v44;
  uint64_t v21 = v39;
  v49[0] = v44;
  v49[1] = v39;
  swift_bridgeObjectRetain();
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)v49, &qword_1001A1C50);
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v22);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v23 = (uint64_t)v46;
  static ActionMetrics.notInstrumented.getter();
  uint64_t v24 = v23 + *(int *)(v7 + 20);
  *(void *)uint64_t v24 = v20;
  *(void *)(v24 + 8) = v21;
  *(unsigned char *)(v24 + 16) = 1;
  Swift::String v50 = (void *)v7;
  uint64_t v51 = (void *)sub_100061858((unint64_t *)&unk_1001A5DF0, (void (*)(uint64_t))type metadata accessor for WatchReinstallAction);
  uint64_t v25 = sub_100031A88(v49);
  v37[0] = (uint64_t (*)(void))type metadata accessor for WatchReinstallAction;
  sub_100062004(v23, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for WatchReinstallAction);
  uint64_t v26 = v38;
  uint64_t v27 = v41;
  (*(void (**)(char *, void, uint64_t))(v38 + 104))(v6, enum case for ActionDispatcher.MetricsBehavior.notProcessed<A>(_:), v41);
  swift_bridgeObjectRetain();
  uint64_t v28 = v40;
  ActionDispatcher.perform(_:withMetrics:asPartOf:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v6, v27);
  sub_10002ED08((uint64_t)v49);
  id v29 = (void *)swift_allocObject();
  _OWORD v29[2] = v20;
  v29[3] = v21;
  uint64_t v30 = v45;
  uint64_t v31 = v47;
  v29[4] = v45;
  v29[5] = v31;
  uint64_t v32 = ObjectType;
  v29[6] = ObjectType;
  uint64_t v33 = (void *)swift_allocObject();
  v33[2] = v20;
  void v33[3] = v21;
  v33[4] = v30;
  v33[5] = v31;
  v33[6] = v32;
  uint64_t v34 = sub_10002EE34(0, (unint64_t *)&qword_1001A2170);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v35 = static OS_dispatch_queue.main.getter();
  Swift::String v50 = (void *)v34;
  uint64_t v51 = &protocol witness table for OS_dispatch_queue;
  v49[0] = v35;
  Promise.then(perform:orCatchError:on:)();
  swift_release();
  swift_release();
  swift_release();
  sub_10002ED08((uint64_t)v49);
  sub_10006206C(v23, v37[0]);
  return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v28, v48);
}

uint64_t sub_10005F798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for OSLogger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0DB8 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_10002F6AC(v8, (uint64_t)qword_1001A1EF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v13._object = (void *)0x800000010015B4B0;
  v13._countAndFlagsBits = 0xD000000000000024;
  LogMessage.StringInterpolation.appendLiteral(_:)(v13);
  v16[3] = &type metadata for String;
  v16[0] = a2;
  v16[1] = a3;
  swift_bridgeObjectRetain();
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)v16, &qword_1001A1C50);
  v14._countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v14);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return a4(0);
}

uint64_t sub_10005FA4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v21 = a5;
  Swift::String v22 = a4;
  uint64_t v8 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v8 - 8);
  uint64_t v9 = type metadata accessor for OSLogger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0DB8 != -1) {
    swift_once();
  }
  uint64_t v13 = sub_10002F6AC(v9, (uint64_t)qword_1001A1EF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v13, v9);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v14._object = (void *)0x800000010015B480;
  v14._countAndFlagsBits = 0xD000000000000023;
  LogMessage.StringInterpolation.appendLiteral(_:)(v14);
  uint64_t v26 = &type metadata for String;
  v25[0] = a2;
  v25[1] = a3;
  swift_bridgeObjectRetain();
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)v25, &qword_1001A1C50);
  v15._countAndFlagsBits = 0x6E6F73616572202CLL;
  v15._object = (void *)0xEA0000000000203ALL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v15);
  swift_getErrorValue();
  uint64_t v17 = v23;
  uint64_t v16 = v24;
  uint64_t v26 = v24;
  uint64_t v18 = sub_100031A88(v25);
  (*(void (**)(uint64_t *, uint64_t, void *))(*(v16 - 1) + 16))(v18, v17, v16);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)v25, &qword_1001A1C50);
  v19._countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v19);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v22(a1);
}

uint64_t sub_10005FE3C(void *a1)
{
  sub_10002EC6C((void *)(v1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appDistribution), *(void *)(v1 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appDistribution + 24));
  id v3 = [a1 id];
  id v4 = [v3 stringValue];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v7 = v6;

  id v8 = [a1 appVersionId];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v11 = v10;

  id v12 = [a1 distributorId];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  sub_1000CB880(v5, v7, v9, v11, v13, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10005FFD8(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v11 = sub_10002EB60(&qword_1001A2450);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002EB60(&qword_1001A2130);
  BaseObjectGraph.inject<A>(_:)();
  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  sub_100052538((uint64_t)v21, (uint64_t)v20);
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = 0;
  uint64_t v15[3] = 0;
  void v15[4] = a1;
  v15[5] = v5;
  sub_100031C10(v20, (uint64_t)(v15 + 6));
  v15[11] = a2;
  v15[12] = a3;
  v15[13] = a4;
  v15[14] = ObjectType;
  id v16 = a1;
  id v17 = v5;
  id v18 = a2;
  swift_retain();
  sub_1000AA270((uint64_t)v13, (uint64_t)&unk_1001A2140, (uint64_t)v15);
  swift_release();
  return sub_10002ED08((uint64_t)v21);
}

uint64_t sub_100060160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[15] = a8;
  uint8_t v8[16] = v16;
  v8[13] = a6;
  v8[14] = a7;
  v8[11] = a4;
  v8[12] = a5;
  type metadata accessor for LogMessage.StringInterpolation();
  v8[17] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for OSLogger();
  v8[18] = v9;
  v8[19] = *(void *)(v9 - 8);
  v8[20] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for AppOffer();
  v8[21] = v10;
  v8[22] = *(void *)(v10 - 8);
  v8[23] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for State();
  v8[24] = v11;
  v8[25] = *(void *)(v11 - 8);
  v8[26] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for App.Kind();
  v8[27] = v12;
  v8[28] = *(void *)(v12 - 8);
  v8[29] = swift_task_alloc();
  type metadata accessor for AdamID();
  v8[30] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for App();
  v8[31] = v13;
  v8[32] = *(void *)(v13 - 8);
  v8[33] = swift_task_alloc();
  return _swift_task_switch(sub_1000603F8, 0, 0);
}

uint64_t sub_1000603F8()
{
  id v1 = [*(id *)(v0 + 88) id];
  [v1 int64value];
  AdamID.init(value:)();
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v15 = *(void **)(v0 + 112);
  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v13 = *(void *)(v0 + 168);
  uint64_t v14 = *(void **)(v0 + 104);
  uint64_t v6 = *(void *)(v0 + 88);
  (*(void (**)(void, void, void))(*(void *)(v0 + 224) + 104))(*(void *)(v0 + 232), enum case for App.Kind.store(_:), *(void *)(v0 + 216));
  App.init(id:kind:)();

  sub_10002EC6C((void *)(v5 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStateController), *(void *)(v5 + OBJC_IVAR____TtC19appstorecomponentsd19AppOfferStateClient_appStateController + 24));
  sub_10005309C();
  AppStateController.state(forApp:applying:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v13);
  unint64_t v7 = sub_10002EC6C(v14, v14[3]);
  id v8 = [objc_allocWithZone((Class)ASCOfferContext) init];
  *(void *)(v0 + 272) = sub_1000F0800(v6, v2, v15, (uint64_t)v8, *v7);

  uint64_t v9 = sub_10002EB60(&qword_1001A1ED0);
  uint64_t v10 = sub_100061D9C((unint64_t *)&qword_1001A2150, &qword_1001A1ED0);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 280) = v11;
  void *v11 = v0;
  v11[1] = sub_1000608F0;
  return dispatch thunk of Future.then()(v0 + 80, v9, v10);
}

uint64_t sub_1000608F0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 288) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    uint64_t v3 = sub_100060B60;
  }
  else
  {
    *(void *)(v2 + 296) = *(void *)(v2 + 80);
    uint64_t v3 = sub_100060A2C;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100060A2C()
{
  id v1 = (void *)v0[37];
  uint64_t v2 = v0[32];
  uint64_t v10 = v0[31];
  uint64_t v11 = v0[33];
  uint64_t v3 = v0[25];
  uint64_t v4 = v0[26];
  uint64_t v5 = v0[24];
  uint64_t v6 = (void (*)(uint64_t))v0[15];
  uint64_t v7 = sub_100073184();
  v6(v7);
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v11, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100060B60()
{
  uint64_t v2 = v0[32];
  uint64_t v1 = v0[33];
  uint64_t v3 = v0[31];
  (*(void (**)(void, void))(v0[25] + 8))(v0[26], v0[24]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = v0[36];
  if (qword_1001A0DB8 != -1) {
    swift_once();
  }
  uint64_t v6 = v0[19];
  uint64_t v5 = v0[20];
  uint64_t v7 = v0[18];
  uint64_t v16 = (void (*)(void, void, uint64_t))v0[15];
  uint64_t v8 = sub_10002F6AC(v7, (uint64_t)qword_1001A1EF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v9._object = (void *)0x800000010015B430;
  v9._countAndFlagsBits = 0xD000000000000027;
  LogMessage.StringInterpolation.appendLiteral(_:)(v9);
  swift_getErrorValue();
  uint64_t v10 = v0[6];
  uint64_t v11 = v0[7];
  v0[5] = v11;
  uint64_t v12 = sub_100031A88(v0 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v12, v10, v11);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)(v0 + 2), &qword_1001A1C50);
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v13);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_errorRetain();
  v16(0, 0, v4);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

void sub_100060F3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    if (a3)
    {
LABEL_3:
      uint64_t v7 = _convertErrorToNSError(_:)();
      goto LABEL_6;
    }
  }
  else
  {
    NSString v6 = 0;
    if (a3) {
      goto LABEL_3;
    }
  }
  uint64_t v7 = 0;
LABEL_6:
  id v8 = (id)v7;
  (*(void (**)(uint64_t, NSString))(a4 + 16))(a4, v6);
}

uint64_t type metadata accessor for AppOfferStateClient()
{
  return self;
}

uint64_t type metadata accessor for AppOfferStateClient.Observation()
{
  return self;
}

unint64_t sub_100061044(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10002EB60(&qword_1001A1CC0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000620CC(v6, (uint64_t)&v15);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_100061170(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_100042EA8(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100061170(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_1000611E8(a1, a2, v4);
}

unint64_t sub_1000611E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      unint64_t i = (i + 1) & v12;
      if ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
      {
        BOOL v13 = (void *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v12; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v12)
          {
            uint64_t v15 = (void *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
          }
        }
      }
    }
  }
  return i;
}

uint64_t sub_100061330(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for State();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a2, v3);
  int v7 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v3);
  if (v7 == enum case for State.updatable(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v6, v3);
    swift_bridgeObjectRelease();
    uint64_t v8 = 1;
    goto LABEL_13;
  }
  if (v7 == enum case for State.downloadable(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v6, v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (v7 == enum case for State.openable(_:))
    {
      (*(void (**)(char *, uint64_t))(v4 + 96))(v6, v3);
      uint64_t v9 = type metadata accessor for AppOpenableDestination();
      (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8))(v6, v9);
      uint64_t v8 = 3;
      goto LABEL_13;
    }
    if (v7 != enum case for State.buyable(_:) && v7 != enum case for State.unknown(_:))
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      return 1;
    }
  }
  uint64_t v8 = 0;
LABEL_13:
  self;
  uint64_t v11 = swift_dynamicCastObjCClass();
  if (!v11) {
    return 1;
  }
  uint64_t v12 = (void *)v11;
  swift_unknownObjectRetain();
  id v13 = [v12 capabilities];
  if (!v13)
  {
    swift_unknownObjectRelease();
    return 1;
  }
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(static Array._unconditionallyBridgeFromObjectiveC(_:)() + 16);
  swift_bridgeObjectRelease();
  if (!v15)
  {
    swift_unknownObjectRelease();

    return 1;
  }
  id v16 = [self isCapableOfAction:v8 capabilities:v14];
  swift_unknownObjectRelease();

  return (uint64_t)v16;
}

uint64_t sub_1000615F4()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10006162C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100060F3C(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t sub_100061634()
{
  swift_unknownObjectRelease();

  sub_10002ED08((uint64_t)(v0 + 6));
  swift_release();

  return _swift_deallocObject(v0, 120, 7);
}

uint64_t sub_100061694(uint64_t a1)
{
  uint64_t v4 = v1[3];
  uint64_t v11 = v1[2];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[11];
  uint64_t v8 = v1[12];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_100053090;
  return sub_100060160(a1, v11, v4, v5, v6, (uint64_t)(v1 + 6), v7, v8);
}

void sub_100061788(uint64_t a1)
{
  sub_1001340E0(a1, *(void *)(v1 + 16));
}

uint64_t sub_100061794(uint64_t a1)
{
  return sub_10005F798(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(uint64_t (**)(void))(v1 + 32));
}

uint64_t sub_1000617A8()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000617E8(uint64_t a1)
{
  return sub_10005FA4C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(uint64_t (**)(uint64_t))(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1000617FC(uint64_t a1)
{
  return sub_10005EAA4(a1, *(void **)(v1 + 16), *(uint64_t (**)(void))(v1 + 24));
}

uint64_t sub_10006180C()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10006184C(uint64_t a1)
{
  return sub_10005ED60(a1, *(void **)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100061858(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000618A0()
{
  swift_release();
  swift_unknownObjectRelease();
  sub_10002ED08(v0 + 32);
  sub_10002ED08(v0 + 72);

  sub_10002ED08(v0 + 128);

  return _swift_deallocObject(v0, 176, 7);
}

uint64_t sub_100061908(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[14];
  uint64_t v7 = v1[15];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10002F874;
  return sub_10005BC9C(a1, v4, v5, (uint64_t)(v1 + 4), (uint64_t)(v1 + 9), v6, v7, (uint64_t)(v1 + 16));
}

uint64_t sub_1000619FC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100061A44(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_100053090;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t))((char *)&dword_1001A49B8
                                                                                   + dword_1001A49B8);
  return v10(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100061B20()
{
  swift_release();

  return _swift_deallocObject(v0, 49, 7);
}

uint64_t sub_100061B58(uint64_t a1)
{
  return sub_100134CEC(a1, *(void (**)(void))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned char *)(v1 + 48));
}

uint64_t sub_100061B68(uint64_t a1)
{
  return sub_100126078(a1, *(void (**)(void))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned __int8 *)(v1 + 48));
}

uint64_t sub_100061B78()
{
  uint64_t v1 = sub_10002EB60((uint64_t *)&unk_1001A2160);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100061C6C(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10002EB60((uint64_t *)&unk_1001A2160) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  void *v11 = v2;
  v11[1] = sub_100053090;
  return sub_10005D950(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_100061D9C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10002ED58(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100061DE0()
{
  uint64_t v1 = sub_10002EB60((uint64_t *)&unk_1001A2160);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100061ED4(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10002EB60((uint64_t *)&unk_1001A2160) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  void *v11 = v2;
  v11[1] = sub_100053090;
  return sub_10005DDC0(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_100062004(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10006206C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000620CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60((uint64_t *)&unk_1001A2220);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100062134()
{
  unint64_t result = qword_1001A1CB0;
  if (!qword_1001A1CB0)
  {
    sub_10002EE34(255, (unint64_t *)&qword_1001A2110);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A1CB0);
  }
  return result;
}

uint64_t sub_10006219C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000621D8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100053090;
  return sub_100057BC8(a1, v4, v5, v6);
}

uint64_t sub_10006229C()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000622DC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10002F874;
  return sub_100058878(a1, v4, v5, v6);
}

uint64_t sub_1000623B8(char *a1, char *a2)
{
  return sub_1000674C4(*a1, *a2);
}

Swift::Int sub_1000623C4()
{
  return Hasher._finalize()();
}

uint64_t sub_100062440()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000624A8()
{
  return Hasher._finalize()();
}

uint64_t sub_100062520@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100184AE8, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_100062580(uint64_t *a1@<X8>)
{
  uint64_t v2 = 7368801;
  if (*v1) {
    uint64_t v2 = 0x736567617373656DLL;
  }
  unint64_t v3 = 0xE300000000000000;
  if (*v1) {
    unint64_t v3 = 0xE800000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t getEnumTagSinglePayload for AppOpenableDestination(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AppOpenableDestination(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100062714);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_10006273C(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AppOpenableDestination()
{
  return &type metadata for AppOpenableDestination;
}

unint64_t sub_10006275C()
{
  unint64_t result = qword_1001A2260;
  if (!qword_1001A2260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A2260);
  }
  return result;
}

BOOL sub_1000627B0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_1000627C8()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100062810()
{
  Hasher._combine(_:)(*v0);
}

unsigned char *storeEnumTagSinglePayload for AppPurchaseType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100062908);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppPurchaseType()
{
  return &type metadata for AppPurchaseType;
}

unint64_t sub_100062944()
{
  unint64_t result = qword_1001A2268;
  if (!qword_1001A2268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A2268);
  }
  return result;
}

Swift::Int sub_100062998()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1000629DC(void *a1)
{
  if (([a1 isBetaApp] & 1) == 0
    && (![a1 isFamilyShared]
     || ([a1 isOpenable] & 1) != 0
     || ([a1 isUpdateAvailable] & 1) != 0
     || (id v4 = [a1 progress], v4, v4))
    && (([a1 isInstalled] & 1) != 0
     || (id v5 = [a1 progress], v5, v5)))
  {
    id v6 = [a1 progress];
    if (v6)
    {
      BOOL v7 = v6;
      if ([v6 isIndeterminate])
      {

        return 0;
      }
      else
      {
        [v7 fractionCompleted];
        uint64_t v11 = v10;

        return v11;
      }
    }
    else if (([a1 isUpdateAvailable] & 1) != 0 {
           && (id v8 = [a1 updateBuyParams]) != 0)
    }
    {
      uint64_t v9 = v8;
      uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else if ([a1 hasMessagesExtension] {
           && [a1 isLaunchProhibited])
    }
    {
      [a1 storeExternalVersionID];

      return 1;
    }
    else if ([a1 isLaunchProhibited])
    {

      return 1;
    }
    else
    {
      [a1 storeExternalVersionID];

      return 0;
    }
  }
  else
  {

    return 0;
  }
  return v2;
}

uint64_t sub_100062C28()
{
  uint64_t v0 = type metadata accessor for AppInstallation.Progress();
  uint64_t v28 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v25 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for AppInstallation.Phase();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  BOOL v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v25 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v25 - v11;
  AppInstallation.phase.getter();
  uint64_t v13 = *(unsigned int (**)(char *, uint64_t))(v4 + 88);
  if (v13(v12, v3) != enum case for AppInstallation.Phase.paused(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v12, v3);
    return 0;
  }
  uint64_t v26 = v2;
  uint64_t v27 = v0;
  uint64_t v25 = *(void (**)(char *, uint64_t))(v4 + 96);
  v25(v12, v3);
  uint64_t v14 = swift_projectBox();
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v15(v10, v14, v3);
  v15(v7, (uint64_t)v10, v3);
  unsigned int v16 = v13(v7, v3);
  if (v16 != enum case for AppInstallation.Phase.downloading(_:)
    && v16 != enum case for AppInstallation.Phase.installing(_:)
    && v16 != enum case for AppInstallation.Phase.postProcessing(_:))
  {
    uint64_t v23 = *(void (**)(char *, uint64_t))(v4 + 8);
    v23(v10, v3);
    v23(v7, v3);
    swift_release();
    return 0;
  }
  v25(v7, v3);
  uint64_t v19 = v27;
  uint64_t v20 = v28;
  uint64_t v21 = v26;
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v26, v7, v27);
  uint64_t v22 = AppInstallation.Progress.progress.getter();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v21, v19);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v3);
  swift_release();
  return v22;
}

unint64_t sub_100062F68(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10002EB60(&qword_1001A1CC0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000475F0(v6, (uint64_t)&v15, (uint64_t *)&unk_1001A2220);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_10003A860(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_100042EA8(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000630A0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10002EB60((uint64_t *)&unk_1001A1D30);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_10003A860(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    void *v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000631C4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10002EB60(&qword_1001A22B8);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000475F0(v6, (uint64_t)v15, &qword_1001A22C0);
    unint64_t result = sub_10003A8D8((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_100042EA8(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100063308(uint64_t a1)
{
  uint64_t v2 = sub_10002EB60(&qword_1001A2288);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10002EB60(&qword_1001A1C78);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1000475F0(v12, (uint64_t)v5, &qword_1001A2288);
    unint64_t result = sub_10003A91C((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for AdamID();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    uint64_t v19 = v7[7];
    uint64_t v20 = type metadata accessor for State();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v19 + *(void *)(*(void *)(v20 - 8) + 72) * v16, v9, v20);
    uint64_t v21 = v7[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10006353C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10002EB60(&qword_1001A1D50);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  uint64_t v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000475F0(v4, (uint64_t)&v16, &qword_1001A22C8);
    uint64_t v5 = v16;
    uint64_t v6 = v17;
    unint64_t result = sub_10003A860(v16, v17);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v9 = v5;
    v9[1] = v6;
    uint64_t v10 = v2[7] + 40 * result;
    long long v11 = v18;
    long long v12 = v19;
    *(void *)(v10 + 32) = v20;
    *(_OWORD *)uint64_t v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v2[2] = v15;
    v4 += 56;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100063688(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10002EB60(&qword_1001A2278);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 1);
    uint64_t v6 = *v4;
    id v7 = (id)*(v4 - 2);
    swift_bridgeObjectRetain();
    unint64_t result = sub_10003AA48(v7);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v7;
    uint64_t v10 = (void *)(v2[7] + 16 * result);
    void *v10 = v5;
    v10[1] = v6;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000637A0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10002EB60(&qword_1001A2290);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000475F0(v6, (uint64_t)&v13, &qword_1001A2298);
    uint64_t v7 = v13;
    unint64_t result = sub_10003AA48(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = sub_100031C10(&v14, v3[7] + 40 * result);
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000638D4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10002EB60(&qword_1001A1CB8);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    id v8 = (id)*(v4 - 3);
    swift_bridgeObjectRetain();
    unint64_t result = sub_10003A9B4((uint64_t)v8);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v8;
    BOOL v11 = (void *)(v2[7] + 24 * result);
    void *v11 = v5;
    v11[1] = v6;
    v11[2] = v7;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 4;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100063A04(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10002EB60(&qword_1001A1CA0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (char *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    char v7 = *v4;
    id v8 = *((id *)v4 - 3);
    sub_100042814(v5, v6, v7);
    unint64_t result = sub_10003A9B4((uint64_t)v8);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v8;
    uint64_t v11 = v2[7] + 24 * result;
    *(void *)uint64_t v11 = v5;
    *(void *)(v11 + 8) = v6;
    *(unsigned char *)(v11 + 16) = v7;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v4 += 32;
    v2[2] = v14;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void *sub_100063B40(uint64_t a1)
{
  uint64_t v23 = type metadata accessor for AdamID();
  uint64_t v3 = *(void *)(v23 - 8);
  uint64_t v4 = __chkstk_darwin(v23);
  BOOL v22 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v21 = (char *)v19 - v6;
  uint64_t v7 = *(void *)(a1 + 16);
  unint64_t result = &_swiftEmptyArrayStorage;
  if (v7)
  {
    v19[0] = v1;
    uint64_t v24 = &_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    unint64_t result = (void *)sub_100084348(a1);
    uint64_t v9 = (uint64_t)result;
    uint64_t v11 = v10;
    char v13 = v12 & 1;
    _OWORD v19[3] = v3 + 16;
    uint64_t v20 = a1 + 56;
    v19[1] = v3 + 8;
    v19[2] = v3 + 32;
    while ((v9 & 0x8000000000000000) == 0 && v9 < 1 << *(unsigned char *)(a1 + 32))
    {
      if (((*(void *)(v20 + (((unint64_t)v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_11;
      }
      if (*(_DWORD *)(a1 + 36) != v11) {
        goto LABEL_12;
      }
      uint64_t v14 = v21;
      uint64_t v15 = v23;
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v21, *(void *)(a1 + 48) + *(void *)(v3 + 72) * v9, v23);
      uint64_t v16 = v22;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v22, v14, v15);
      [objc_allocWithZone((Class)ASCAdamID) initWithInt64:AdamID.int64Value.getter()];
      (*(void (**)(char *, uint64_t))(v3 + 8))(v16, v15);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      unint64_t result = (void *)sub_1000843EC(v9, v11, v13 & 1, a1);
      uint64_t v9 = (uint64_t)result;
      uint64_t v11 = v17;
      char v13 = v18 & 1;
      if (!--v7)
      {
        sub_100034F00((uint64_t)result, v17, v18 & 1);
        return v24;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  return result;
}

void sub_100063DC8()
{
  uint64_t v1 = type metadata accessor for AppOffer.Flags();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v31 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v30 - v6;
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v33 = (char *)&v30 - v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v30 - v10;
  swift_getObjectType();
  uint64_t v12 = swift_conformsToProtocol2();
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  if (!v12) {
    uint64_t v0 = 0;
  }
  if (!v0) {
    goto LABEL_11;
  }
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v32 = v7;
  uint64_t v15 = v2;
  uint64_t v16 = ObjectType;
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8);
  swift_unknownObjectRetain();
  uint64_t v18 = v16;
  long long v19 = v11;
  uint64_t v20 = v1;
  uint64_t v21 = v15;
  BOOL v22 = v32;
  uint64_t v23 = (void *)v17(v18, v13);
  swift_unknownObjectRelease();
  if (v23)
  {
    unsigned __int16 v24 = (unsigned __int16)[v23 flags];
    uint64_t v25 = v33;
    static AppOffer.Flags.none.getter();
    if ((v24 & 0x200) != 0)
    {
      uint64_t v26 = (uint64_t)v31;
      static AppOffer.Flags.dsidLess.getter();
      sub_1000640C4(v22, v26);
      uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
      v27(v26, v20);
      v27((uint64_t)v22, v20);
    }
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v19, v25, v20);
    id v28 = [v23 baseBuyParams];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v29 = [v23 metricsBuyParams];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    AppOffer.init(flags:ageRating:baseBuyParams:metricsBuyParams:)();
  }
  else
  {
LABEL_11:
    static AppOffer.Flags.none.getter();
    AppOffer.init(flags:ageRating:baseBuyParams:metricsBuyParams:)();
  }
}

uint64_t sub_1000640C4(char *a1, uint64_t a2)
{
  uint64_t v30 = a1;
  uint64_t v4 = sub_10002EB60(&qword_1001A22A8);
  uint64_t v5 = __chkstk_darwin(v4);
  id v28 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v24 - v7;
  uint64_t v9 = type metadata accessor for AppOffer.Flags();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v24 - v14;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v27 = v2;
  uint64_t v25 = v16;
  v16(v13, v2, v9);
  v24[1] = sub_10006711C(&qword_1001A2270, (void (*)(uint64_t))&type metadata accessor for AppOffer.Flags);
  dispatch thunk of SetAlgebra.intersection(_:)();
  sub_10006711C(&qword_1001A22B0, (void (*)(uint64_t))&type metadata accessor for AppOffer.Flags);
  uint64_t v26 = a2;
  char v17 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
  uint64_t v29 = v4;
  uint64_t v18 = &v8[*(int *)(v4 + 48)];
  unsigned char *v8 = v17 & 1;
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    uint64_t v21 = v25;
    uint64_t v20 = v26;
    v25(v18, v26, v9);
    v21(v13, v20, v9);
    dispatch thunk of SetAlgebra.formUnion(_:)();
    long long v19 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  }
  else
  {
    long long v19 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v19(v18, v15, v9);
  }
  BOOL v22 = &v28[*(int *)(v29 + 48)];
  v19(v22, v18, v9);
  v19(v30, v22, v9);
  return v17 & 1;
}

uint64_t sub_1000643BC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v45 = type metadata accessor for App.Kind();
  uint64_t v4 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AdamID();
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for App();
  uint64_t v46 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v48 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v47 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v11 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v11 = *(void *)(a1 + 16);
  }
  uint64_t v12 = &_swiftEmptyArrayStorage;
  if (v11)
  {
    uint64_t v53 = &_swiftEmptyArrayStorage;
    sub_1000C503C(0, v11 & ~(v11 >> 63), 0);
    if (v47)
    {
      uint64_t result = __CocoaSet.startIndex.getter();
      unsigned __int8 v15 = 1;
    }
    else
    {
      uint64_t result = sub_100066B3C(a1);
      unsigned __int8 v15 = v16 & 1;
    }
    uint64_t v50 = result;
    uint64_t v51 = v14;
    unsigned __int8 v52 = v15;
    if (v11 < 0)
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    uint64_t v43 = (void (**)(char *, void, uint64_t))(v4 + 104);
    unsigned int v42 = enum case for App.Kind.store(_:);
    uint64_t v41 = v46 + 32;
    uint64_t v17 = a1 & 0xFFFFFFFFFFFFFF8;
    if (a1 < 0) {
      uint64_t v17 = a1;
    }
    uint64_t v38 = v9;
    uint64_t v39 = v17;
    do
    {
      while (1)
      {
        uint64_t v30 = v50;
        uint64_t v29 = v51;
        char v31 = v52;
        sub_1000668C4(v50, v51, v52, a1);
        uint64_t v33 = v32;
        objc_msgSend(v32, "int64value", v38, v39);
        AdamID.init(value:)();
        if (v2)
        {

          sub_100034F00(v30, v29, v31);
          swift_release();
          return v29;
        }
        (*v43)(v6, v42, v45);
        App.init(id:kind:)();

        uint64_t v34 = v53;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000C503C(0, v34[2] + 1, 1);
          uint64_t v34 = v53;
        }
        unint64_t v36 = v34[2];
        unint64_t v35 = v34[3];
        if (v36 >= v35 >> 1)
        {
          sub_1000C503C(v35 > 1, v36 + 1, 1);
          uint64_t v34 = v53;
        }
        v34[2] = v36 + 1;
        uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v46 + 32))((unint64_t)v34+ ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))+ *(void *)(v46 + 72) * v36, v48, v44);
        uint64_t v53 = v34;
        if (v47) {
          break;
        }
        uint64_t v18 = v50;
        uint64_t v19 = v51;
        char v20 = v52;
        uint64_t v21 = sub_1000843EC(v50, v51, v52, a1);
        uint64_t v40 = 0;
        uint64_t v22 = a1;
        uint64_t v24 = v23;
        uint64_t v25 = v6;
        char v27 = v26;
        sub_100034F00(v18, v19, v20);
        uint64_t v50 = v21;
        uint64_t v51 = v24;
        a1 = v22;
        uint64_t v2 = v40;
        unsigned __int8 v28 = v27 & 1;
        uint64_t v6 = v25;
        unsigned __int8 v52 = v28;
        if (!--v11) {
          goto LABEL_25;
        }
      }
      if ((v52 & 1) == 0) {
        goto LABEL_29;
      }
      if (__CocoaSet.Index.handleBitPattern.getter()) {
        swift_isUniquelyReferenced_nonNull_native();
      }
      sub_10002EB60(&qword_1001A1A18);
      id v37 = (void (*)(char *, void))Set.Index._asCocoa.modify();
      __CocoaSet.formIndex(after:isUnique:)();
      v37(v49, 0);
      --v11;
    }
    while (v11);
LABEL_25:
    sub_100034F00(v50, v51, v52);
    uint64_t v12 = v53;
  }
  uint64_t v29 = sub_100042B48((uint64_t)v12);
  swift_bridgeObjectRelease();
  return v29;
}

uint64_t sub_100064850()
{
  uint64_t v0 = type metadata accessor for AppOpenableDestination();
  uint64_t v43 = *(void *)(v0 - 8);
  uint64_t v44 = v0;
  uint64_t v1 = __chkstk_darwin(v0);
  uint64_t v41 = (char *)&v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  unsigned int v42 = (char *)&v41 - v3;
  uint64_t v4 = type metadata accessor for AppInstallation.Progress();
  uint64_t v49 = *(void *)(v4 - 8);
  uint64_t v50 = v4;
  __chkstk_darwin(v4);
  unint64_t v47 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for AppInstallation();
  uint64_t v46 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v45 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AppPurchaseType();
  uint64_t v51 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v41 - v11;
  uint64_t v13 = type metadata accessor for AppInstallationType();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v41 - v18;
  uint64_t v20 = type metadata accessor for State();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, v52, v20);
  int v24 = (*(uint64_t (**)(char *, uint64_t))(v21 + 88))(v23, v20);
  if (v24 == enum case for State.waiting(_:))
  {
    (*(void (**)(char *, uint64_t))(v21 + 96))(v23, v20);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v19, v23, v13);
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v19, v13);
    int v25 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v17, v13);
    if (v25 == enum case for AppInstallationType.purchase(_:))
    {
      uint64_t v26 = 1;
    }
    else if (v25 == enum case for AppInstallationType.update(_:))
    {
      uint64_t v26 = 2;
    }
    else if (v25 == enum case for AppInstallationType.redownload(_:))
    {
      uint64_t v26 = 3;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
      uint64_t v26 = 0;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
    return v26;
  }
  if (v24 == enum case for State.purchased(_:))
  {
    (*(void (**)(char *, uint64_t))(v21 + 96))(v23, v20);
    uint64_t v27 = v51;
    (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v12, v23, v7);
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v10, v12, v7);
    int v28 = (*(uint64_t (**)(char *, uint64_t))(v27 + 88))(v10, v7);
    if (v28 != enum case for AppPurchaseType.standard(_:))
    {
      if (v28 == enum case for AppPurchaseType.preorder(_:))
      {
        uint64_t v26 = 1;
LABEL_18:
        (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v7);
        return v26;
      }
      (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v7);
    }
    uint64_t v26 = 0;
    goto LABEL_18;
  }
  if (v24 == enum case for State.updatable(_:) || v24 == enum case for State.downloadable(_:))
  {
    (*(void (**)(char *, uint64_t))(v21 + 96))(v23, v20);
    return *(void *)v23;
  }
  if (v24 == enum case for State.installing(_:))
  {
    (*(void (**)(char *, uint64_t))(v21 + 96))(v23, v20);
    char v31 = v45;
    uint64_t v30 = v46;
    uint64_t v32 = v48;
    (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v45, v23, v48);
    uint64_t v33 = v47;
    AppInstallation.progress.getter();
    AppInstallation.Progress.fractionCompleted.getter();
    uint64_t v35 = v34;
    (*(void (**)(char *, uint64_t))(v49 + 8))(v33, v50);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v32);
    return v35;
  }
  if (v24 == enum case for State.openable(_:))
  {
    (*(void (**)(char *, uint64_t))(v21 + 96))(v23, v20);
    sub_10002EB60(&qword_1001A1C88);
    id v37 = v42;
    uint64_t v36 = v43;
    uint64_t v38 = v44;
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v42, v23, v44);
    uint64_t v39 = v41;
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v41, v37, v38);
    int v40 = (*(uint64_t (**)(char *, uint64_t))(v36 + 88))(v39, v38);
    if (v40 != enum case for AppOpenableDestination.app(_:))
    {
      if (v40 == enum case for AppOpenableDestination.messages(_:))
      {
        uint64_t v26 = 1;
LABEL_34:
        (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v38);
        return v26;
      }
      (*(void (**)(char *, uint64_t))(v36 + 8))(v39, v38);
    }
    uint64_t v26 = 0;
    goto LABEL_34;
  }
  if (v24 == enum case for State.buyable(_:)) {
    return 0;
  }
  if (v24 == enum case for State.installed(_:)) {
    return 1;
  }
  if (v24 != enum case for State.unknown(_:)) {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  }
  return 2;
}

uint64_t sub_1000650F4()
{
  uint64_t v1 = v0;
  uint64_t refreshed = type metadata accessor for ArcadeEntitlementRefreshCondition();
  uint64_t v3 = *(void *)(refreshed - 8);
  __chkstk_darwin(refreshed);
  uint64_t v5 = (unsigned __int8 *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(v3 + 16))(v5, v1, refreshed);
  int v6 = (*(uint64_t (**)(unsigned __int8 *, uint64_t))(v3 + 88))(v5, refreshed);
  if (v6 == enum case for ArcadeEntitlementRefreshCondition.ifCacheIsExpired(_:))
  {
    (*(void (**)(unsigned __int8 *, uint64_t))(v3 + 96))(v5, refreshed);
    return *v5;
  }
  else if (v6 == enum case for ArcadeEntitlementRefreshCondition.ifCacheIsExpiredOrSubscribed(_:))
  {
    (*(void (**)(unsigned __int8 *, uint64_t))(v3 + 96))(v5, refreshed);
    return *v5 | 0x40u;
  }
  else if (v6 == enum case for ArcadeEntitlementRefreshCondition.ifCacheIsExpiredOrUnsubscribed(_:))
  {
    (*(void (**)(unsigned __int8 *, uint64_t))(v3 + 96))(v5, refreshed);
    return *v5 | 0xFFFFFF80;
  }
  else if (v6 == enum case for ArcadeEntitlementRefreshCondition.never(_:))
  {
    return 192;
  }
  else
  {
    if (v6 != enum case for ArcadeEntitlementRefreshCondition.always(_:)) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v3 + 8))(v5, refreshed);
    }
    return 193;
  }
}

void *sub_1000652C4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DeviceAppQuery();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)&v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  int v6 = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for DeviceAppQuery.storeIDs(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v7 = sub_100063B40(*v5);
    uint64_t v8 = sub_100042CE4((unint64_t)v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = sub_1000662BC(v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (v6 != enum case for DeviceAppQuery.bundleIDs(_:))
    {
      if (v6 == enum case for DeviceAppQuery.custom(_:))
      {
        (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
      }
      else
      {
        if (v6 == enum case for DeviceAppQuery.allStoreApps(_:)) {
          return 0;
        }
        if (v6 != enum case for DeviceAppQuery.betaApps(_:)) {
          (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
        }
      }
      return &_swiftEmptyArrayStorage;
    }
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v9 = sub_1000661D4(*v5);
    swift_bridgeObjectRelease();
  }
  return v9;
}

uint64_t sub_100065500(double a1)
{
  id v2 = [self progressWithTotalUnitCount:100];
  double v3 = round(a1 * 100.0);
  if ((~*(void *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v3 >= 9.22337204e18)
  {
LABEL_9:
    __break(1u);
    return AppInstallation.Progress.init(_:)(v2);
  }
  id v4 = v2;
  [v2 setCompletedUnitCount:(uint64_t)v3];
  id v2 = v4;

  return AppInstallation.Progress.init(_:)(v2);
}

uint64_t sub_1000655CC@<X0>(double a1@<X0>, void (*a2)(void, void, void)@<X1>, char a3@<W2>, double *a4@<X8>)
{
  unint64_t v54 = (unint64_t)a2;
  unint64_t v55 = a4;
  uint64_t v6 = type metadata accessor for AppInstallation();
  uint64_t v52 = *(void *)(v6 - 8);
  uint64_t v53 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AppInstallation.Phase();
  uint64_t v51 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v50 - v13;
  uint64_t v15 = type metadata accessor for AppInstallation.Progress();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v50 - v20;
  switch(a3)
  {
    case 1:
      uint64_t v24 = type metadata accessor for AppPurchaseType();
      int v25 = (unsigned int *)&enum case for AppPurchaseType.standard(_:);
      if (LOBYTE(a1)) {
        int v25 = (unsigned int *)&enum case for AppPurchaseType.preorder(_:);
      }
      uint64_t v22 = v55;
      (*(void (**)(double *, void, uint64_t))(*(void *)(v24 - 8) + 104))(v55, *v25, v24);
      uint64_t v26 = (unsigned int *)&enum case for State.purchased(_:);
      goto LABEL_26;
    case 2:
      unint64_t v28 = v54;
      uint64_t v27 = v55;
      *unint64_t v55 = a1;
      *((void *)v27 + 1) = v28;
      uint64_t v29 = (unsigned int *)&enum case for State.updatable(_:);
      goto LABEL_9;
    case 3:
      unint64_t v30 = v54;
      uint64_t v27 = v55;
      *unint64_t v55 = a1;
      *((void *)v27 + 1) = v30;
      uint64_t v29 = (unsigned int *)&enum case for State.downloadable(_:);
LABEL_9:
      uint64_t v31 = *v29;
      uint64_t v32 = type metadata accessor for State();
      (*(void (**)(double *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 104))(v27, v31, v32);
      return swift_bridgeObjectRetain();
    case 4:
      sub_100065500(a1);
      unint64_t v54 = *(void *)(v16 + 16);
      ((void (*)(char *, char *, uint64_t))v54)(v14, v21, v15);
      uint64_t v34 = v51;
      (*(void (**)(char *, void, uint64_t))(v51 + 104))(v14, enum case for AppInstallation.Phase.downloading(_:), v9);
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v12, v14, v9);
      ((void (*)(char *, char *, uint64_t))v54)(v19, v21, v15);
      AppInstallation.init(phase:progress:hasPostProcessingPhase:essentialBackgroundAssetDownloadEstimate:)();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v9);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v15);
      uint64_t v35 = v55;
      (*(void (**)(double *, char *, uint64_t))(v52 + 32))(v55, v8, v53);
      uint64_t v36 = enum case for State.installing(_:);
      uint64_t v37 = type metadata accessor for State();
      return (*(uint64_t (**)(double *, uint64_t, uint64_t))(*(void *)(v37 - 8) + 104))(v35, v36, v37);
    case 5:
      uint64_t v38 = type metadata accessor for AppOpenableDestination();
      uint64_t v39 = (unsigned int *)&enum case for AppOpenableDestination.app(_:);
      if (LOBYTE(a1)) {
        uint64_t v39 = (unsigned int *)&enum case for AppOpenableDestination.messages(_:);
      }
      uint64_t v22 = v55;
      (*(void (**)(double *, void, uint64_t))(*(void *)(v38 - 8) + 104))(v55, *v39, v38);
      uint64_t v40 = sub_10002EB60(&qword_1001A1C88);
      *(void *)((char *)v22 + *(int *)(v40 + 48)) = v54;
      uint64_t v26 = (unsigned int *)&enum case for State.openable(_:);
      goto LABEL_26;
    case 6:
      if (*(void *)&a1 | v54)
      {
        if (*(void *)&a1 ^ 1 | v54) {
          uint64_t v41 = (unsigned int *)&enum case for State.unknown(_:);
        }
        else {
          uint64_t v41 = (unsigned int *)&enum case for State.installed(_:);
        }
      }
      else
      {
        uint64_t v41 = (unsigned int *)&enum case for State.buyable(_:);
      }
      uint64_t v42 = *v41;
      uint64_t v43 = type metadata accessor for State();
      uint64_t v44 = *(uint64_t (**)(double *, uint64_t, uint64_t))(*(void *)(v43 - 8) + 104);
      uint64_t v45 = v43;
      uint64_t v46 = v55;
      goto LABEL_27;
    default:
      uint64_t v22 = v55;
      switch(LOBYTE(a1))
      {
        case 1:
          uint64_t v23 = (unsigned int *)&enum case for AppInstallationType.purchase(_:);
          break;
        case 2:
          uint64_t v23 = (unsigned int *)&enum case for AppInstallationType.update(_:);
          break;
        case 3:
          uint64_t v23 = (unsigned int *)&enum case for AppInstallationType.redownload(_:);
          break;
        default:
          uint64_t v23 = (unsigned int *)&enum case for AppInstallationType.unknown(_:);
          break;
      }
      uint64_t v47 = *v23;
      uint64_t v48 = type metadata accessor for AppInstallationType();
      (*(void (**)(double *, uint64_t, uint64_t))(*(void *)(v48 - 8) + 104))(v22, v47, v48);
      uint64_t v26 = (unsigned int *)&enum case for State.waiting(_:);
LABEL_26:
      uint64_t v42 = *v26;
      uint64_t v49 = type metadata accessor for State();
      uint64_t v44 = *(uint64_t (**)(double *, uint64_t, uint64_t))(*(void *)(v49 - 8) + 104);
      uint64_t v45 = v49;
      uint64_t v46 = v22;
LABEL_27:
      return v44(v46, v42, v45);
  }
}

id sub_100065C44@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  switch(a2)
  {
    case 1:
      uint64_t v5 = *(void **)(a1 + 16);
      uint64_t v6 = *(unsigned __int8 *)(a1 + 24);
      sub_10002EB60(&qword_1001A2280);
      uint64_t v7 = swift_allocBox();
      sub_100067164(v5, v6);
      sub_100065C44(v5, v6);
      sub_100067184(v5, v6);
      *a3 = v7;
      uint64_t v8 = (unsigned int *)&enum case for ArcadeState.purchasing(_:);
      goto LABEL_13;
    case 2:
      *a3 = a1;
      uint64_t v9 = enum case for ArcadeState.subscribed(_:);
      uint64_t v10 = type metadata accessor for ArcadeState();
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 104))(a3, v9, v10);
      return (id)a1;
    case 3:
      *(unsigned char *)a3 = a1 & 1;
      uint64_t v8 = (unsigned int *)&enum case for ArcadeState.unknown(_:);
      goto LABEL_13;
    default:
      if ((_BYTE)a1)
      {
        if (a1 == 1) {
          id v4 = (unsigned int *)&enum case for ArcadeIntroOfferState.available(_:);
        }
        else {
          id v4 = (unsigned int *)&enum case for ArcadeIntroOfferState.consumed(_:);
        }
      }
      else
      {
        id v4 = (unsigned int *)&enum case for ArcadeIntroOfferState.unknown(_:);
      }
      uint64_t v12 = *v4;
      uint64_t v13 = type metadata accessor for ArcadeIntroOfferState();
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104))(a3, v12, v13);
      uint64_t v8 = (unsigned int *)&enum case for ArcadeState.notSubscribed(_:);
LABEL_13:
      uint64_t v14 = *v8;
      uint64_t v15 = type metadata accessor for ArcadeState();
      uint64_t v16 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104);
      return (id)v16(a3, v14, v15);
  }
}

id sub_100065E5C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  type metadata accessor for ASCOfferTitleVariant(0);
  sub_10006711C((unint64_t *)&qword_1001A14D8, type metadata accessor for ASCOfferTitleVariant);
  v34.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v33.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_10002EE34(0, (unint64_t *)&qword_1001A1D98);
  v32.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a11)
  {
    v21.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v21.super.Class isa = 0;
  }
  uint64_t v22 = type metadata accessor for URL();
  uint64_t v23 = *(void *)(v22 - 8);
  int v25 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(a12, 1, v22) != 1)
  {
    URL._bridgeToObjectiveC()(v24);
    int v25 = v26;
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(a12, v22);
  }
  NSString v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a19)
  {
    v30.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v30.super.Class isa = 0;
  }
  id v37 = [v35 initWithID:a1 titles:v34.super.isa subtitles:v33.super.isa flags:a4 ageRating:a5 metrics:v32.super.isa baseBuyParams:v19 metricsBuyParams:v20 additionalHeaders:v21.super.isa preflightPackageURL:v25 bundleID:v27 itemName:v28 vendorName:v29 capabilities:v30.super.isa];

  return v37;
}

void *sub_1000661D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return &_swiftEmptyArrayStorage;
  }
  sub_10002EB60(&qword_1001A4DA0);
  double v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_1000663B8((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_100034EF8();
  if (v6 != v1)
  {
    __break(1u);
    return &_swiftEmptyArrayStorage;
  }
  return v3;
}

void *sub_1000662BC(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = __CocoaSet.count.getter();
    if (v2) {
      goto LABEL_3;
    }
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
LABEL_3:
  if (v2 <= 0)
  {
    double v3 = &_swiftEmptyArrayStorage;
  }
  else
  {
    sub_10002EB60(&qword_1001A4D70);
    double v3 = (void *)swift_allocObject();
    int64_t v4 = j__malloc_size(v3);
    uint64_t v5 = v4 - 32;
    if (v4 < 32) {
      uint64_t v5 = v4 - 25;
    }
    v3[2] = v2;
    v3[3] = (2 * (v5 >> 3)) | 1;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_1000665B8(&v8, v3 + 4, v2, a1);
  uint64_t result = (void *)sub_100034EF8();
  if (v6 == (void *)v2) {
    return v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000663B8(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    NSString v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    void *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void *sub_1000665B8(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
    sub_100062134();
    uint64_t result = (void *)Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v27;
    uint64_t v8 = v28;
    uint64_t v9 = v29;
    int64_t v10 = v30;
    unint64_t v11 = v31;
    uint64_t v24 = v7;
    if (v6) {
      goto LABEL_3;
    }
LABEL_36:
    uint64_t v12 = 0;
LABEL_46:
    *uint64_t v24 = v4;
    v24[1] = v8;
    void v24[2] = v9;
    uint64_t v24[3] = v10;
    id v24[4] = v11;
    return (void *)v12;
  }
  int64_t v10 = 0;
  uint64_t v20 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v8 = a4 + 56;
  uint64_t v9 = ~v20;
  uint64_t v21 = -v20;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  else {
    uint64_t v22 = -1;
  }
  unint64_t v11 = v22 & *(void *)(a4 + 56);
  uint64_t v24 = result;
  if (!a2) {
    goto LABEL_36;
  }
LABEL_3:
  if (!a3)
  {
    uint64_t v12 = 0;
    goto LABEL_46;
  }
  if (a3 < 0) {
    goto LABEL_48;
  }
  uint64_t v12 = 0;
  int64_t v25 = (unint64_t)(v9 + 64) >> 6;
  uint64_t v23 = v9;
  while (1)
  {
    if (v4 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_45;
      }
      sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      unint64_t v15 = v26;
      uint64_t result = (void *)swift_unknownObjectRelease();
      if (!v26) {
        goto LABEL_45;
      }
      goto LABEL_8;
    }
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v10 << 6);
      goto LABEL_7;
    }
    int64_t v16 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v16 >= v25)
    {
      unint64_t v11 = 0;
      goto LABEL_45;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    if (v17) {
      goto LABEL_23;
    }
    int64_t v18 = v10 + 2;
    if (v10 + 2 >= v25)
    {
      unint64_t v11 = 0;
      ++v10;
      goto LABEL_45;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v18);
    if (!v17)
    {
      if (v10 + 3 >= v25) {
        goto LABEL_42;
      }
      unint64_t v17 = *(void *)(v8 + 8 * (v10 + 3));
      if (v17)
      {
        int64_t v16 = v10 + 3;
        goto LABEL_23;
      }
      int64_t v18 = v10 + 4;
      if (v10 + 4 >= v25)
      {
        unint64_t v11 = 0;
        v10 += 3;
        goto LABEL_45;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v18);
      if (!v17)
      {
        int64_t v16 = v10 + 5;
        if (v10 + 5 >= v25)
        {
LABEL_42:
          unint64_t v11 = 0;
          int64_t v10 = v18;
          goto LABEL_45;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v16);
        if (!v17)
        {
          int64_t v19 = v10 + 6;
          while (v25 != v19)
          {
            unint64_t v17 = *(void *)(v8 + 8 * v19++);
            if (v17)
            {
              int64_t v16 = v19 - 1;
              goto LABEL_23;
            }
          }
          unint64_t v11 = 0;
          int64_t v10 = v25 - 1;
          goto LABEL_45;
        }
        goto LABEL_23;
      }
    }
    int64_t v16 = v18;
LABEL_23:
    unint64_t v11 = (v17 - 1) & v17;
    unint64_t v14 = __clz(__rbit64(v17)) + (v16 << 6);
    int64_t v10 = v16;
LABEL_7:
    uint64_t result = *(id *)(*(void *)(v4 + 48) + 8 * v14);
    unint64_t v15 = result;
    if (!result) {
      goto LABEL_45;
    }
LABEL_8:
    ++v12;
    *v6++ = v15;
    if (v12 == a3)
    {
      uint64_t v12 = a3;
LABEL_45:
      uint64_t v9 = v23;
      goto LABEL_46;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

void sub_1000668C4(uint64_t a1, int a2, char a3, uint64_t a4)
{
  unint64_t v6 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      __CocoaSet.element(at:)();
      sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_24;
  }
  if (a3) {
    goto LABEL_10;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_17;
  }
  __break(1u);
LABEL_10:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  __CocoaSet.Index.element.getter();
  sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v4 = v16;
  swift_unknownObjectRelease();
  Swift::Int v7 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
  uint64_t v8 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v6 = v7 & ~v8;
  if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
  {
LABEL_23:

    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  id v9 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
  char v10 = static NSObject.== infix(_:_:)();

  if ((v10 & 1) == 0)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v6 = (v6 + 1) & v11;
      if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_23;
      }
      id v12 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
      char v13 = static NSObject.== infix(_:_:)();
    }
    while ((v13 & 1) == 0);
  }

LABEL_17:
  unint64_t v14 = *(void **)(*(void *)(a4 + 48) + 8 * v6);

  id v15 = v14;
}

uint64_t sub_100066B3C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  id v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

unint64_t sub_100066BC4(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (unint64_t)_swiftEmptyDictionarySingleton;
  }
  sub_10002EB60(&qword_1001A1D58);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v5 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t result = sub_10003AA04(v5);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  unint64_t v8 = a1 + 7;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v3[6] + v9) = v5;
    *(void *)(v3[7] + v9) = v4;
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      break;
    }
    v3[2] = v12;
    if (!--v1) {
      goto LABEL_8;
    }
    char v13 = v8 + 2;
    uint64_t v5 = *(v8 - 1);
    uint64_t v14 = *v8;
    swift_retain();
    unint64_t result = sub_10003AA04(v5);
    unint64_t v8 = v13;
    uint64_t v4 = v14;
    if (v15) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_100066CC4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (unint64_t)_swiftEmptyDictionarySingleton;
  }
  sub_10002EB60(&qword_1001A22A0);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unsigned __int16 v4 = *(_WORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  unint64_t result = sub_10003AADC(v4);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v9 = (void *)(a1 + 72);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_WORD *)(v3[6] + 2 * result) = v4;
    uint64_t v10 = (void *)(v3[7] + 16 * result);
    void *v10 = v6;
    v10[1] = v5;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v14 = v9 + 3;
    unsigned __int16 v4 = *((_WORD *)v9 - 8);
    uint64_t v6 = *(v9 - 1);
    uint64_t v15 = *v9;
    swift_bridgeObjectRetain();
    unint64_t result = sub_10003AADC(v4);
    uint64_t v9 = v14;
    uint64_t v5 = v15;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

id sub_100066DD4(uint64_t a1, uint64_t a2)
{
  v25[1] = a2;
  uint64_t v2 = sub_10002EB60(&qword_1001A44F0);
  __chkstk_darwin(v2 - 8);
  unsigned __int16 v4 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AppOffer.Flags();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v25 - v10;
  uint64_t v12 = type metadata accessor for AdamID();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  App.id.getter();
  uint64_t v16 = AdamID.int64Value.getter();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  id v17 = [objc_allocWithZone((Class)ASCAdamID) initWithInt64:v16];
  unint64_t v18 = sub_100063688((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v19 = sub_100063688((uint64_t)_swiftEmptyArrayStorage);
  AppOffer.flags.getter();
  static AppOffer.Flags.dsidLess.getter();
  sub_10006711C(&qword_1001A2270, (void (*)(uint64_t))&type metadata accessor for AppOffer.Flags);
  LOBYTE(v16) = dispatch thunk of SetAlgebra.isSuperset(of:)();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v6 + 8);
  v20(v9, v5);
  v20(v11, v5);
  if (v16) {
    uint64_t v21 = 512;
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v4, 1, 1, v22);
  id v23 = objc_allocWithZone((Class)ASCAppOffer);
  return sub_100065E5C(v17, v18, v19, v21, 0, (uint64_t)_swiftEmptyArrayStorage, 0, 0xE000000000000000, 0, 0xE000000000000000, 0, (uint64_t)v4, 0, 0xE000000000000000, 0, 0xE000000000000000, 0, 0xE000000000000000, 0);
}

uint64_t sub_10006711C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_100067164(id result, char a2)
{
  if (a2 == 2) {
    return result;
  }
  if (a2 == 1) {
    return (id)swift_retain();
  }
  return result;
}

void sub_100067184(void *a1, char a2)
{
  if (a2 == 2)
  {
  }
  else if (a2 == 1)
  {
    swift_release();
  }
}

uint64_t destroy for AppState_V1(uint64_t a1)
{
  return sub_10004282C(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s19appstorecomponentsd11AppState_V1OwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_100042814(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AppState_V1(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_100042814(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_10004282C(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for AppState_V1(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AppState_V1(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_10004282C(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppState_V1(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFA && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 6) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AppState_V1(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 250;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100067348(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 5u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 6);
  }
}

uint64_t sub_100067360(uint64_t result, unsigned int a2)
{
  if (a2 >= 6)
  {
    *(void *)__n128 result = a2 - 6;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 6;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AppState_V1()
{
  return &type metadata for AppState_V1;
}

uint64_t sub_100067388(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xED0000305F325F65;
  unint64_t v3 = 0x746174735F707061;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0x325F6E6F6273696CLL;
    }
    else {
      unint64_t v5 = 0xD000000000000013;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xEC00000043343230;
    }
    else {
      unint64_t v6 = 0x800000010015A750;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  unint64_t v5 = 0x746174735F707061;
  unint64_t v6 = 0xED0000305F325F65;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      unint64_t v3 = 0x325F6E6F6273696CLL;
    }
    else {
      unint64_t v3 = 0xD000000000000013;
    }
    if (v7 == 1) {
      unint64_t v2 = 0xEC00000043343230;
    }
    else {
      unint64_t v2 = 0x800000010015A750;
    }
  }
LABEL_15:
  if (v5 == v3 && v6 == v2) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1000674C4(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x736567617373656DLL;
  }
  else {
    uint64_t v3 = 7368801;
  }
  if (v2) {
    unint64_t v4 = 0xE300000000000000;
  }
  else {
    unint64_t v4 = 0xE800000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x736567617373656DLL;
  }
  else {
    uint64_t v5 = 7368801;
  }
  if (a2) {
    unint64_t v6 = 0xE800000000000000;
  }
  else {
    unint64_t v6 = 0xE300000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100067564(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x6E776F6E6B6E75;
  unint64_t v3 = 0xE700000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x6E776F6E6B6E75;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE800000000000000;
      uint64_t v5 = 0x6573616863727570;
      break;
    case 2:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x657461647075;
      break;
    case 3:
      uint64_t v5 = 0x6F6C6E776F646572;
      unint64_t v3 = 0xEA00000000006461;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE700000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE800000000000000;
      if (v5 == 0x6573616863727570) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v2 = 0x657461647075;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xEA00000000006461;
      if (v5 == 0x6F6C6E776F646572) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

void sub_1000676F4(uint64_t a1, Swift::UInt64 a2, Swift::UInt64 a3, char a4)
{
  switch(a4)
  {
    case 1:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(a2 & 1);
      return;
    case 2:
      Swift::UInt v6 = 3;
      goto LABEL_6;
    case 3:
      Swift::UInt v6 = 4;
LABEL_6:
      Hasher._combine(_:)(v6);
      String.hash(into:)();
      return;
    case 4:
      Hasher._combine(_:)(5uLL);
      if ((a2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v7 = a2;
      }
      else {
        Swift::UInt64 v7 = 0;
      }
      goto LABEL_13;
    case 5:
      Hasher._combine(_:)(7uLL);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Swift::UInt64 v7 = a3;
LABEL_13:
      Hasher._combine(_:)(v7);
      break;
    case 6:
      if (a2 | a3)
      {
        if (a2 ^ 1 | a3) {
          Hasher._combine(_:)(8uLL);
        }
        else {
          Hasher._combine(_:)(6uLL);
        }
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      break;
    default:
      Hasher._combine(_:)(1uLL);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      break;
  }
}

Swift::Int sub_100067918()
{
  Swift::UInt64 v1 = *(void *)v0;
  Swift::UInt64 v2 = *(void *)(v0 + 8);
  char v3 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  sub_1000676F4((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

void sub_100067974(uint64_t a1)
{
  sub_1000676F4(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
}

Swift::Int sub_100067980()
{
  Swift::UInt64 v1 = *(void *)v0;
  Swift::UInt64 v2 = *(void *)(v0 + 8);
  char v3 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  sub_1000676F4((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_1000679D8(uint64_t a1, uint64_t a2)
{
  return sub_100067A4C(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

unint64_t sub_1000679F8()
{
  unint64_t result = qword_1001A22D0;
  if (!qword_1001A22D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A22D0);
  }
  return result;
}

uint64_t sub_100067A4C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  switch(a3)
  {
    case 1:
      if (a6 != 1) {
        return 0;
      }
      return ((a4 ^ a1) & 1) == 0;
    case 2:
      if (a6 != 2) {
        return 0;
      }
      goto LABEL_10;
    case 3:
      if (a6 != 3) {
        return 0;
      }
LABEL_10:
      if (a1 == a4 && a2 == a5) {
        return 1;
      }
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    case 4:
      if (a6 != 4) {
        return 0;
      }
      return *(double *)&a1 == *(double *)&a4;
    case 5:
      if (a6 != 5) {
        return 0;
      }
      BOOL v13 = (a1 & 1) == 0;
      if (a1) {
        uint64_t v14 = 0x736567617373656DLL;
      }
      else {
        uint64_t v14 = 7368801;
      }
      if (v13) {
        unint64_t v15 = 0xE300000000000000;
      }
      else {
        unint64_t v15 = 0xE800000000000000;
      }
      if (a4) {
        uint64_t v16 = 0x736567617373656DLL;
      }
      else {
        uint64_t v16 = 7368801;
      }
      if (a4) {
        unint64_t v17 = 0xE800000000000000;
      }
      else {
        unint64_t v17 = 0xE300000000000000;
      }
      if (v14 == v16 && v15 == v17)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = 0;
        if ((v18 & 1) == 0) {
          return result;
        }
      }
      return a2 == a5;
    case 6:
      if (!(a1 | a2)) {
        return a6 == 6 && !(a5 | a4);
      }
      if (a1 ^ 1 | a2) {
        return a6 == 6 && a4 == 2 && !a5;
      }
      return a6 == 6 && a4 == 1 && !a5;
    default:
      if (a6) {
        return 0;
      }
      uint64_t v8 = 0x6E776F6E6B6E75;
      unint64_t v9 = 0xE700000000000000;
      uint64_t v10 = a1;
      uint64_t v11 = 0x6E776F6E6B6E75;
      switch(v10)
      {
        case 1:
          unint64_t v9 = 0xE800000000000000;
          uint64_t v11 = 0x6573616863727570;
          break;
        case 2:
          unint64_t v9 = 0xE600000000000000;
          uint64_t v11 = 0x657461647075;
          break;
        case 3:
          uint64_t v11 = 0x6F6C6E776F646572;
          unint64_t v9 = 0xEA00000000006461;
          break;
        default:
          break;
      }
      unint64_t v19 = 0xE700000000000000;
      switch((char)a4)
      {
        case 1:
          unint64_t v19 = 0xE800000000000000;
          uint64_t v8 = 0x6573616863727570;
          break;
        case 2:
          unint64_t v19 = 0xE600000000000000;
          uint64_t v8 = 0x657461647075;
          break;
        case 3:
          uint64_t v8 = 0x6F6C6E776F646572;
          unint64_t v19 = 0xEA00000000006461;
          break;
        default:
          break;
      }
      if (v11 == v8 && v9 == v19)
      {
        swift_bridgeObjectRelease_n();
        return 1;
      }
      else
      {
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v20 & 1;
      }
  }
}

uint64_t sub_100067DD8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = 0;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = a1 + 56;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 48);
  uint64_t v9 = 1;
  uint64_t v10 = v5;
  uint64_t v11 = v6;
  int v12 = v8;
  if (!v8) {
    goto LABEL_6;
  }
LABEL_3:
  if (v12 == 4) {
    return v10;
  }
  int v12 = 1;
  if (v1 == v9)
  {
LABEL_12:
    if (v12)
    {
      sub_100042814(v5, v6, v8);
      return v5;
    }
  }
  else
  {
    while (1)
    {
      if (__OFADD__(v9, 1))
      {
LABEL_23:
        __break(1u);
        return result;
      }
      int v13 = *(unsigned __int8 *)(v7 + 16);
      if ((v12 & 1) == 0) {
        break;
      }
      uint64_t v10 = *(void *)v7;
      uint64_t v11 = *(void *)(v7 + 8);
      v7 += 24;
      ++v9;
      int v12 = v13;
      if ((_BYTE)v13) {
        goto LABEL_3;
      }
LABEL_6:
      uint64_t result = v10;
      uint64_t v4 = v11;
      if (v1 == v9) {
        goto LABEL_12;
      }
    }
    if (v13 == 4)
    {
LABEL_19:
      uint64_t v5 = *(void *)v7;
      sub_100067F10(result, v4, 0);
      return v5;
    }
    uint64_t v14 = v9 + 1;
    while (v1 != v14)
    {
      if (__OFADD__(v14, 1)) {
        goto LABEL_23;
      }
      int v15 = *(unsigned __int8 *)(v7 + 40);
      v7 += 24;
      ++v14;
      if (v15 == 4) {
        goto LABEL_19;
      }
    }
  }
  return result;
}

uint64_t sub_100067F10(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return sub_10004282C(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_100067F24()
{
  return 0;
}

uint64_t sub_100067F2C()
{
  uint64_t v0 = sub_10002EB60(qword_1001A22E0);
  sub_10002F648(v0, qword_1001AE298);
  sub_10002F6AC(v0, (uint64_t)qword_1001AE298);
  sub_10002EB60(&qword_1001A1700);
  return MetricsFieldsContext.Property.init(_:)();
}

uint64_t sub_100067FA8()
{
  uint64_t v0 = type metadata accessor for MetricsFieldInclusionRequest();
  sub_10002F648(v0, qword_1001AE2B0);
  sub_10002F6AC(v0, (uint64_t)qword_1001AE2B0);
  return MetricsFieldInclusionRequest.init(rawValue:)();
}

uint64_t destroy for AppStateMetricsFieldsProvider(uint64_t a1)
{
  return sub_10002ED08(a1 + 40);
}

uint64_t initializeWithCopy for AppStateMetricsFieldsProvider(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  return a1;
}

uint64_t *assignWithCopy for AppStateMetricsFieldsProvider(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

__n128 initializeWithTake for AppStateMetricsFieldsProvider(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for AppStateMetricsFieldsProvider(uint64_t a1, uint64_t a2)
{
  sub_10002ED08(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  sub_10002ED08(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppStateMetricsFieldsProvider(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppStateMetricsFieldsProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppStateMetricsFieldsProvider()
{
  return &type metadata for AppStateMetricsFieldsProvider;
}

uint64_t sub_10006823C(uint64_t a1)
{
  uint64_t v50 = a1;
  uint64_t v45 = type metadata accessor for AppOffer();
  uint64_t v44 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  long long v3 = (char *)v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for App.Kind();
  uint64_t v43 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AdamID();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for App();
  uint64_t v42 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for State();
  uint64_t v47 = *(void *)(v48 - 8);
  uint64_t v11 = __chkstk_darwin(v48);
  uint64_t v46 = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v49 = (char *)v41 - v13;
  if (qword_1001A0DC0 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_10002EB60(qword_1001A22E0);
  sub_10002F6AC(v14, (uint64_t)qword_1001AE298);
  sub_10002EB60(&qword_1001A1700);
  MetricsFieldsContext.subscript.getter();
  int v15 = (void *)v51[0];
  if (v51[0])
  {
    self;
    uint64_t v16 = swift_dynamicCastObjCClass();
    if (v16)
    {
      unint64_t v17 = (void *)v16;
      swift_unknownObjectRetain();
      sub_100068CA4(v17, v50);
      return swift_unknownObjectRelease_n();
    }
    sub_100052538(v1, (uint64_t)v51);
    v41[2] = v53;
    v41[1] = sub_10002EC6C(v51, (uint64_t)v52);
    id v20 = objc_msgSend(v15, "id", swift_getObjectType());
    [v20 int64value];
    uint64_t v21 = v54;
    AdamID.init(value:)();
    uint64_t v54 = v21;
    if (v21)
    {
      swift_unknownObjectRelease();

      return sub_10002ED08((uint64_t)v51);
    }
    (*(void (**)(char *, void, uint64_t))(v43 + 104))(v6, enum case for App.Kind.store(_:), v4);
    App.init(id:kind:)();

    sub_100063DC8();
    uint64_t v22 = v49;
    AppStateController.state(forApp:applying:)();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v3, v45);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v10, v8);
    sub_10002ED08((uint64_t)v51);
    uint64_t v23 = v47;
    uint64_t v24 = v46;
    uint64_t v25 = v48;
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v46, v22, v48);
    int v26 = (*(uint64_t (**)(char *, uint64_t))(v23 + 88))(v24, v25);
    if (v26 == enum case for State.updatable(_:))
    {
      (*(void (**)(char *, uint64_t))(v23 + 96))(v24, v25);
      uint64_t v27 = *(void *)v24;
      uint64_t v28 = *((void *)v24 + 1);
      sub_10002EB60(&qword_1001A4CE0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10014CED0;
      *(void *)(inited + 32) = 0x6D61726150797562;
      *(void *)(inited + 40) = 0xE900000000000073;
      *(void *)(inited + 72) = &type metadata for String;
      *(void *)(inited + 48) = v27;
      *(void *)(inited + 56) = v28;
      unint64_t v30 = sub_100062F68(inited);
      unint64_t v31 = 0xE600000000000000;
      uint64_t v32 = 0x657461647075;
      uint64_t v33 = v54;
      uint64_t v34 = v50;
    }
    else
    {
      uint64_t v33 = v54;
      uint64_t v34 = v50;
      if (v26 == enum case for State.downloadable(_:))
      {
        (*(void (**)(char *, uint64_t))(v23 + 96))(v24, v25);
        uint64_t v35 = *(void *)v24;
        uint64_t v36 = *((void *)v24 + 1);
        sub_10002EB60(&qword_1001A4CE0);
        uint64_t v37 = swift_initStackObject();
        *(_OWORD *)(v37 + 16) = xmmword_10014CED0;
        *(void *)(v37 + 32) = 0x6D61726150797562;
        *(void *)(v37 + 40) = 0xE900000000000073;
        *(void *)(v37 + 72) = &type metadata for String;
        *(void *)(v37 + 48) = v35;
        *(void *)(v37 + 56) = v36;
        unint64_t v30 = sub_100062F68(v37);
        unint64_t v31 = 0xE800000000000000;
        uint64_t v32 = 0x64616F6C6E776F64;
      }
      else if (v26 == enum case for State.installing(_:))
      {
        (*(void (**)(char *, uint64_t))(v23 + 96))(v24, v25);
        uint64_t v38 = type metadata accessor for AppInstallation();
        (*(void (**)(char *, uint64_t))(*(void *)(v38 - 8) + 8))(v24, v38);
        unint64_t v30 = 0;
        unint64_t v31 = 0xE600000000000000;
        uint64_t v32 = 0x6C65636E6163;
      }
      else if (v26 == enum case for State.openable(_:))
      {
        (*(void (**)(char *, uint64_t))(v23 + 96))(v24, v25);
        uint64_t v39 = type metadata accessor for AppOpenableDestination();
        (*(void (**)(char *, uint64_t))(*(void *)(v39 - 8) + 8))(v24, v39);
        unint64_t v30 = 0;
        unint64_t v31 = 0xE400000000000000;
        uint64_t v32 = 1852141679;
      }
      else
      {
        unint64_t v30 = 0;
        unint64_t v31 = 0xE300000000000000;
        uint64_t v32 = 7959906;
        if (v26 != enum case for State.buyable(_:) && v26 != enum case for State.unknown(_:))
        {
          swift_unknownObjectRelease();
          uint64_t v40 = *(void (**)(char *, uint64_t))(v23 + 8);
          v40(v24, v25);
          return ((uint64_t (*)(char *, uint64_t))v40)(v49, v25);
        }
      }
    }
    uint64_t v52 = &type metadata for String;
    v51[0] = v32;
    v51[1] = v31;
    sub_10002FE00(v34, *(void *)(v34 + 24));
    dispatch thunk of MetricsFieldsBuilder.addValue(_:forField:)();
    if (v33)
    {
      (*(void (**)(char *, uint64_t))(v23 + 8))(v49, v25);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      return sub_10002ED08((uint64_t)v51);
    }
    sub_10002ED08((uint64_t)v51);
    if (v30)
    {
      uint64_t v52 = (void *)sub_10002EB60(&qword_1001A2300);
      v51[0] = v30;
      sub_10002FE00(v34, *(void *)(v34 + 24));
      dispatch thunk of MetricsFieldsBuilder.addValue(_:forField:)();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v49, v25);
      swift_unknownObjectRelease();
      return sub_10002ED08((uint64_t)v51);
    }
    swift_unknownObjectRelease();
    uint64_t v40 = *(void (**)(char *, uint64_t))(v23 + 8);
    return ((uint64_t (*)(char *, uint64_t))v40)(v49, v25);
  }
  if (qword_1001A0E78 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for OSLogger();
  sub_10002F6AC(v19, (uint64_t)qword_1001AE3B0);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CD00;
  LogMessage.init(stringLiteral:)();
  LogMessage.init(stringLiteral:)();
  Logger.error(_:)();
  return swift_bridgeObjectRelease();
}

void sub_100068CA4(void *a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v68 = a2;
  uint64_t v6 = type metadata accessor for AppOffer();
  uint64_t v60 = *(void *)(v6 - 8);
  uint64_t v61 = v6;
  __chkstk_darwin(v6);
  uint64_t v59 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for App.Kind();
  uint64_t v56 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AdamID();
  __chkstk_darwin(v10 - 8);
  uint64_t v57 = type metadata accessor for App();
  uint64_t v55 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for State();
  uint64_t v64 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  char v18 = (char *)&v50 - v17;
  uint64_t v62 = v4;
  sub_100052538(v4, (uint64_t)v65);
  uint64_t v54 = v67;
  uint64_t v53 = sub_10002EC6C(v65, (uint64_t)v66);
  uint64_t v63 = a1;
  id v19 = [a1 id];
  [v19 int64value];
  AdamID.init(value:)();
  if (v3)
  {

LABEL_33:
    sub_10002ED08((uint64_t)v65);
    return;
  }
  uint64_t v51 = v13;
  uint64_t v52 = v16;
  (*(void (**)(char *, void, uint64_t))(v56 + 104))(v9, enum case for App.Kind.store(_:), v58);
  App.init(id:kind:)();

  id v20 = v59;
  uint64_t v21 = v63;
  sub_100053098();
  AppStateController.state(forApp:applying:)();
  (*(void (**)(char *, uint64_t))(v60 + 8))(v20, v61);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v12, v57);
  sub_10002ED08((uint64_t)v65);
  uint64_t v22 = *(os_unfair_lock_s **)(*sub_10002EC6C((void *)(v62 + 40), *(void *)(v62 + 64)) + 16);
  uint64_t v23 = v22 + 4;
  uint64_t v24 = v22 + 6;
  os_unfair_lock_lock(v22 + 6);
  sub_1000BCEA4(v23, v65);
  uint64_t v25 = v18;
  os_unfair_lock_unlock(v24);
  uint64_t v26 = v65[0];
  id v27 = [v21 iapItemID];
  unsigned __int8 v28 = sub_1001198D4(v27, v26);

  swift_bridgeObjectRelease();
  id v29 = [v21 streamlinedOffer];
  uint64_t v30 = v64;
  if (v29)
  {
    id v31 = v29;
    swift_getObjectType();
    uint64_t v32 = swift_conformsToProtocol2();
    if (v32) {
      uint64_t v33 = v32;
    }
    else {
      uint64_t v33 = 0;
    }
    if (v32) {
      id v34 = v31;
    }
    else {
      id v34 = 0;
    }
    if (v34)
    {
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t))(v33 + 8);
      swift_unknownObjectRetain();
      uint64_t v37 = (void *)v36(ObjectType, v33);
      swift_unknownObjectRelease_n();
      if (v37)
      {

        char v38 = 0;
        goto LABEL_15;
      }
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  char v38 = 1;
LABEL_15:
  uint64_t v40 = v51;
  uint64_t v39 = v52;
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v52, v25, v51);
  int v41 = (*(uint64_t (**)(char *, uint64_t))(v30 + 88))(v39, v40);
  if (v41 == enum case for State.updatable(_:))
  {
    (*(void (**)(char *, uint64_t))(v30 + 96))(v39, v40);
    swift_bridgeObjectRelease();
    unint64_t v42 = 0xE600000000000000;
    uint64_t v43 = 0x657461647075;
    goto LABEL_31;
  }
  if (v41 == enum case for State.downloadable(_:))
  {
    (*(void (**)(char *, uint64_t))(v30 + 96))(v39, v40);
    swift_bridgeObjectRelease();
    if ((v38 | v28)) {
      uint64_t v43 = 0x64616F6C6E776F64;
    }
    else {
      uint64_t v43 = 7959906;
    }
    if ((v38 | v28)) {
      unint64_t v42 = 0xE800000000000000;
    }
    else {
      unint64_t v42 = 0xE300000000000000;
    }
    goto LABEL_31;
  }
  if (v41 == enum case for State.installing(_:))
  {
    (*(void (**)(char *, uint64_t))(v30 + 96))(v39, v40);
    uint64_t v44 = type metadata accessor for AppInstallation();
    (*(void (**)(char *, uint64_t))(*(void *)(v44 - 8) + 8))(v39, v44);
    unint64_t v42 = 0xE600000000000000;
    uint64_t v43 = 0x6C65636E6163;
    goto LABEL_31;
  }
  uint64_t v43 = 7959906;
  if (v41 == enum case for State.openable(_:))
  {
    uint64_t v45 = v52;
    (*(void (**)(char *, uint64_t))(v30 + 96))(v52, v40);
    if ((v38 | v28))
    {
      uint64_t v43 = 1852141679;
      unint64_t v42 = 0xE400000000000000;
    }
    else
    {
      unint64_t v42 = 0xE300000000000000;
    }
    uint64_t v46 = type metadata accessor for AppOpenableDestination();
    (*(void (**)(char *, uint64_t))(*(void *)(v46 - 8) + 8))(v45, v46);
    goto LABEL_31;
  }
  unint64_t v42 = 0xE300000000000000;
  if (v41 == enum case for State.buyable(_:))
  {
LABEL_31:
    uint64_t v47 = v68;
LABEL_32:
    uint64_t v66 = &type metadata for String;
    v65[0] = v43;
    v65[1] = v42;
    sub_10002FE00(v47, *(void *)(v47 + 24));
    dispatch thunk of MetricsFieldsBuilder.addValue(_:forField:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v25, v40);
    goto LABEL_33;
  }
  BOOL v48 = v41 == enum case for State.unknown(_:);
  uint64_t v47 = v68;
  if (v48) {
    goto LABEL_32;
  }
  uint64_t v49 = *(void (**)(char *, uint64_t))(v30 + 8);
  v49(v52, v40);
  v49(v25, v40);
}

uint64_t sub_100069474@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for MetricsFieldsProviderCategory.timeSensitive(_:);
  uint64_t v3 = type metadata accessor for MetricsFieldsProviderCategory();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t sub_1000694E8(uint64_t a1)
{
  return sub_10006823C(a1);
}

unint64_t sub_100069500()
{
  sub_10002EB60(&qword_1001A2308);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10014D6A0;
  *(void *)(inited + 32) = @"buyable";
  *(void *)(inited + 64) = &_s7BuyableVN;
  *(void *)(inited + 72) = &off_100187170;
  *(void *)(inited + 80) = @"waiting";
  *(void *)(inited + 112) = &_s7WaitingVN;
  *(void *)(inited + 120) = &off_10018ADC0;
  *(void *)(inited + 128) = @"installing";
  *(void *)(inited + 160) = &_s10InstallingVN;
  *(void *)(inited + 168) = &off_100188048;
  *(void *)(inited + 176) = @"installed";
  *(void *)(inited + 208) = &_s9InstalledVN;
  *(void *)(inited + 216) = &off_100188018;
  *(void *)(inited + 224) = @"purchased";
  *(void *)(inited + 256) = &_s9PurchasedVN;
  *(void *)(inited + 264) = &off_10018A220;
  *(void *)(inited + 272) = @"updatable";
  *(void *)(inited + 304) = &_s9UpdatableVN;
  *(void *)(inited + 312) = &off_10018AC78;
  *(void *)(inited + 320) = @"downloadable";
  *(void *)(inited + 352) = &_s12DownloadableVN;
  *(void *)(inited + 360) = &off_100187CF0;
  *(void *)(inited + 368) = @"openable";
  *(void *)(inited + 400) = &_s8OpenableVN;
  *(void *)(inited + 408) = &off_100189EE0;
  *(void *)(inited + 416) = @"unknown";
  *(void *)(inited + 448) = &_s7UnknownVN;
  *(void *)(inited + 456) = &off_10018AC48;
  uint64_t v1 = @"buyable";
  uint64_t v2 = @"waiting";
  uint64_t v3 = @"installing";
  uint64_t v4 = @"installed";
  uint64_t v5 = @"purchased";
  uint64_t v6 = @"updatable";
  uint64_t v7 = @"downloadable";
  uint64_t v8 = @"openable";
  uint64_t v9 = @"unknown";
  return sub_1000637A0(inited);
}

uint64_t *sub_1000696D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for ActionMetrics();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
    id v10 = v9;
  }
  return a1;
}

void sub_1000697A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ActionMetrics();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  int v5 = *(void **)(a1 + *(int *)(a2 + 20));
}

uint64_t sub_10006981C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v8;
  id v9 = v8;
  return a1;
}

uint64_t sub_10006989C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a1 + v7);
  id v9 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v9;
  id v10 = v9;

  return a1;
}

uint64_t sub_100069924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000699A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  return a1;
}

uint64_t sub_100069A24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100069A38);
}

uint64_t sub_100069A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_100069B04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100069B18);
}

uint64_t sub_100069B18(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ActionMetrics();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
  return result;
}

uint64_t type metadata accessor for AppStoreRepairAction()
{
  uint64_t result = qword_1001A2368;
  if (!qword_1001A2368) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100069C20()
{
  uint64_t result = type metadata accessor for ActionMetrics();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppStoreRepairActionImplementation()
{
  return &type metadata for AppStoreRepairActionImplementation;
}

unint64_t sub_100069CC8()
{
  unint64_t result = qword_1001A33F0;
  if (!qword_1001A33F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A33F0);
  }
  return result;
}

uint64_t sub_100069D1C(uint64_t a1, uint64_t a2, void *a3)
{
  v3[47] = a2;
  v3[48] = a3;
  v3[46] = a1;
  v3[49] = *a3;
  uint64_t v4 = sub_10002EB60(&qword_1001A19B8);
  v3[50] = v4;
  v3[51] = *(void *)(v4 - 8);
  v3[52] = swift_task_alloc();
  v3[53] = type metadata accessor for AlertAction();
  v3[54] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for CompoundAction();
  v3[55] = v5;
  v3[56] = *(void *)(v5 - 8);
  v3[57] = swift_task_alloc();
  type metadata accessor for ActionMetrics();
  v3[58] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URL();
  v3[59] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[60] = v7;
  v3[61] = *(void *)(v7 + 64);
  v3[62] = swift_task_alloc();
  v3[63] = swift_task_alloc();
  v3[64] = type metadata accessor for AppStoreRepairAction();
  v3[65] = swift_task_alloc();
  uint64_t v8 = sub_10002EB60((uint64_t *)&unk_1001A2160);
  v3[66] = v8;
  v3[67] = *(void *)(v8 - 8);
  v3[68] = swift_task_alloc();
  return _swift_task_switch(sub_100069FC8, 0, 0);
}

uint64_t sub_100069FC8()
{
  uint64_t v1 = *(void *)(v0 + 520);
  uint64_t v2 = *(void *)(v0 + 512);
  uint64_t v3 = *(void **)(v0 + 376);
  inject<A, B>(_:from:)();
  sub_10002EB60(&qword_1001A19A0);
  inject<A, B>(_:from:)();
  sub_10002EC6C((void *)(v0 + 208), *(void *)(v0 + 232));
  v4._countAndFlagsBits = 0x432E6E6F69746341;
  v4._object = (void *)0xED00006C65636E61;
  Swift::String v5 = Localizer.string(forKey:)(v4);
  *(void *)(v0 + 96) = v5._countAndFlagsBits;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(void *)(v0 + 144) = 0;
  *(void *)(v0 + 104) = v5._object;
  swift_getObjectType();
  ASCOffer.actionMetrics.getter();
  *(void *)(v1 + *(int *)(v2 + 20)) = [v3 id];
  uint64_t v55 = (void *)(v0 + 208);
  if (([v3 flags] & 0x200) != 0
    && (self, (uint64_t v6 = swift_dynamicCastObjCClass()) != 0))
  {
    uint64_t v7 = v6;
    *(void *)(v0 + 312) = sub_10006D960();
    *(void *)(v0 + 320) = sub_10006D9A0((unint64_t *)&qword_1001A17F0, (void (*)(uint64_t))sub_10006D960);
    *(void *)(v0 + 288) = v7;
    swift_unknownObjectRetain();
    uint64_t v8 = v0 + 288;
  }
  else
  {
    uint64_t v51 = (uint64_t *)(v0 + 248);
    self;
    uint64_t v9 = swift_dynamicCastObjCClass();
    uint64_t v10 = *(void **)(v0 + 376);
    if (v9)
    {
      int v11 = (void *)v9;
      swift_unknownObjectRetain();
      id v12 = [v11 url];
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      unsigned __int8 v50 = [v11 isSensitive];
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v13 = self;
      id v14 = [v10 id];
      id v15 = objc_msgSend(v13, "URLForLockupID:ofKind:withOfferFlags:", v14, @"app", objc_msgSend(v10, "flags"));

      static URL._unconditionallyBridgeFromObjectiveC(_:)();
      unsigned __int8 v50 = 0;
    }
    uint64_t v16 = *(void *)(v0 + 496);
    uint64_t v17 = *(void *)(v0 + 504);
    uint64_t v18 = *(void *)(v0 + 480);
    uint64_t v19 = *(void *)(v0 + 488);
    uint64_t v20 = *(void *)(v0 + 472);
    sub_10002EB60(&qword_1001A4CE0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10014CED0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v22;
    *(void *)(inited + 72) = &type metadata for Int;
    *(void *)(inited + 48) = 10;
    unint64_t v23 = sub_100062F68(inited);
    static ActionMetrics.notInstrumented.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v16, v17, v20);
    unint64_t v24 = (*(unsigned __int8 *)(v18 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
    uint64_t v25 = swift_allocObject();
    *(unsigned char *)(v25 + 16) = v50;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v18 + 32))(v25 + v24, v16, v20);
    *(void *)(v25 + ((v19 + v24 + 7) & 0xFFFFFFFFFFFFFFF8)) = v23;
    *(void *)(v0 + 272) = type metadata accessor for ClosureAction();
    *(void *)(v0 + 280) = &protocol witness table for ClosureAction;
    sub_100031A88(v51);
    ClosureAction.init(actionMetrics:body:)();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v20);
    uint64_t v8 = v0 + 288;
    sub_100031C10((long long *)v51, v0 + 288);
  }
  uint64_t v26 = *(void *)(v0 + 520);
  uint64_t v27 = *(void *)(v0 + 512);
  uint64_t v48 = *(void *)(v0 + 456);
  uint64_t v29 = *(void *)(v0 + 440);
  uint64_t v28 = *(void *)(v0 + 448);
  uint64_t v30 = *(void *)(v0 + 432);
  uint64_t v49 = *(int **)(v0 + 424);
  uint64_t v52 = *(void *)(v0 + 408);
  uint64_t v53 = *(void *)(v0 + 400);
  uint64_t v54 = *(void *)(v0 + 416);
  ASCOffer.actionMetrics.getter();
  sub_10002EB60(&qword_1001A23B8);
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_10014CD00;
  *(void *)(v31 + 56) = v27;
  *(void *)(v31 + 64) = sub_10006D9A0(&qword_1001A23A8, (void (*)(uint64_t))type metadata accessor for AppStoreRepairAction);
  uint64_t v32 = sub_100031A88((uint64_t *)(v31 + 32));
  sub_10006D898(v26, (uint64_t)v32, (uint64_t (*)(void))type metadata accessor for AppStoreRepairAction);
  sub_100052538(v8, v31 + 72);
  CompoundAction.init(actionMetrics:subactions:)();
  sub_10002EC6C(v55, *(void *)(v0 + 232));
  v33._countAndFlagsBits = 0xD000000000000023;
  v33._object = (void *)0x800000010015B980;
  Swift::String v34 = Localizer.string(forKey:)(v33);
  *(void *)(v0 + 192) = v29;
  *(void *)(v0 + 200) = &protocol witness table for CompoundAction;
  uint64_t v35 = sub_100031A88((uint64_t *)(v0 + 168));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v28 + 16))(v35, v48, v29);
  *(Swift::String *)(v0 + 152) = v34;
  sub_10002EC6C(v55, *(void *)(v0 + 232));
  v36._object = (void *)0x800000010015B9B0;
  v36._countAndFlagsBits = 0xD00000000000001ALL;
  Swift::String v37 = Localizer.string(forKey:)(v36);
  sub_10002EC6C(v55, *(void *)(v0 + 232));
  v38._countAndFlagsBits = 0xD00000000000001CLL;
  v38._object = (void *)0x800000010015B9D0;
  Swift::String v39 = Localizer.string(forKey:)(v38);
  static ActionMetrics.notInstrumented.getter();
  sub_10002EB60(&qword_1001A23C0);
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_10014CD00;
  sub_100031750(v0 + 96, v40 + 32);
  sub_100031750(v0 + 152, v40 + 88);
  *(Swift::String *)(v30 + v49[5]) = v37;
  *(Swift::String *)(v30 + v49[6]) = v39;
  *(void *)(v30 + v49[7]) = v40;
  *(void *)(v0 + 352) = v49;
  *(void *)(v0 + 360) = sub_10006D9A0((unint64_t *)&qword_1001A54A0, (void (*)(uint64_t))type metadata accessor for AlertAction);
  int v41 = sub_100031A88((uint64_t *)(v0 + 328));
  sub_10006D898(v30, (uint64_t)v41, (uint64_t (*)(void))type metadata accessor for AlertAction);
  (*(void (**)(uint64_t, void, uint64_t))(v52 + 104))(v54, enum case for ActionDispatcher.MetricsBehavior.notProcessed<A>(_:), v53);
  unint64_t v42 = (void *)swift_task_alloc();
  *(void *)(v0 + 552) = v42;
  void *v42 = v0;
  v42[1] = sub_10006A760;
  uint64_t v43 = *(void *)(v0 + 528);
  uint64_t v44 = *(void *)(v0 + 416);
  uint64_t v45 = *(void *)(v0 + 384);
  uint64_t v46 = *(void *)(v0 + 368);
  return ActionDispatcher.perform(_:withMetrics:asPartOf:)(v46, v0 + 328, v44, v45, v43);
}

uint64_t sub_10006A760()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 416);
  uint64_t v4 = *(void *)(*v1 + 408);
  uint64_t v5 = *(void *)(*v1 + 400);
  *(void *)(*v1 + 560) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
  {
    uint64_t v6 = sub_10006AA6C;
  }
  else
  {
    sub_10002ED08(v2 + 328);
    uint64_t v6 = sub_10006A8E0;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_10006A8E0()
{
  uint64_t v1 = v0[68];
  uint64_t v2 = v0[67];
  uint64_t v9 = v0[66];
  uint64_t v3 = v0[65];
  uint64_t v4 = v0[57];
  uint64_t v5 = v0[55];
  uint64_t v6 = v0[56];
  sub_10006D900(v0[54], (uint64_t (*)(void))type metadata accessor for AlertAction);
  sub_1000317AC((uint64_t)(v0 + 19));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  sub_10002ED08((uint64_t)(v0 + 36));
  sub_10006D900(v3, (uint64_t (*)(void))type metadata accessor for AppStoreRepairAction);
  sub_1000317AC((uint64_t)(v0 + 12));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v9);
  sub_10002ED08((uint64_t)(v0 + 26));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10006AA6C()
{
  uint64_t v1 = v0[68];
  uint64_t v2 = v0[67];
  uint64_t v9 = v0[66];
  uint64_t v3 = v0[65];
  uint64_t v4 = v0[57];
  uint64_t v5 = v0[55];
  uint64_t v6 = v0[56];
  sub_10006D900(v0[54], (uint64_t (*)(void))type metadata accessor for AlertAction);
  sub_1000317AC((uint64_t)(v0 + 19));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  sub_10002ED08((uint64_t)(v0 + 36));
  sub_10006D900(v3, (uint64_t (*)(void))type metadata accessor for AppStoreRepairAction);
  sub_1000317AC((uint64_t)(v0 + 12));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v9);
  sub_10002ED08((uint64_t)(v0 + 41));
  sub_10002ED08((uint64_t)(v0 + 26));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10006AC04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[30] = a2;
  v3[31] = a3;
  v3[29] = a1;
  type metadata accessor for LogMessage.StringInterpolation();
  v3[32] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OSLogger();
  v3[33] = v4;
  v3[34] = *(void *)(v4 - 8);
  v3[35] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v3[36] = v5;
  v3[37] = *(void *)(v5 - 8);
  v3[38] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for AppInstallationType();
  v3[39] = v6;
  v3[40] = *(void *)(v6 - 8);
  v3[41] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for App();
  v3[42] = v7;
  v3[43] = *(void *)(v7 - 8);
  v3[44] = swift_task_alloc();
  v3[45] = swift_task_alloc();
  v3[46] = swift_task_alloc();
  v3[47] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for App.Kind();
  v3[48] = v8;
  v3[49] = *(void *)(v8 - 8);
  v3[50] = swift_task_alloc();
  type metadata accessor for AdamID();
  v3[51] = swift_task_alloc();
  sub_10002EB60(&qword_1001A23D8);
  v3[52] = swift_task_alloc();
  v3[53] = swift_task_alloc();
  v3[54] = swift_task_alloc();
  v3[55] = swift_task_alloc();
  v3[56] = swift_task_alloc();
  return _swift_task_switch(sub_10006AF1C, 0, 0);
}

uint64_t sub_10006AF1C()
{
  uint64_t v1 = (void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 248);
  sub_10002EB60((uint64_t *)&unk_1001A5E10);
  *(void *)(v0 + 456) = type metadata accessor for ObjectGraph();
  inject<A, B>(_:from:)();
  uint64_t v3 = v2 + qword_1001A53D8;
  swift_beginAccess();
  sub_1000475F0(v3, v0 + 96, &qword_1001A1D90);
  if (*(void *)(v0 + 120))
  {
    uint64_t v4 = *(void *)(v0 + 240);
    sub_100031C10((long long *)(v0 + 96), v0 + 56);
    id v5 = objc_allocWithZone((Class)ASDSystemAppMetadata);
    NSString v6 = String._bridgeToObjectiveC()();
    id v7 = [v5 initWithBundleID:v6];
    *(void *)(v0 + 464) = v7;

    uint64_t v8 = 1;
    [v7 setUserInitiated:1];
    uint64_t v9 = *(void **)(v4 + *(int *)(type metadata accessor for AppStoreRepairAction() + 20));
    if (v9)
    {
      [v9 int64value];
      AdamID.init(value:)();
      (*(void (**)(void, void, void))(*(void *)(v0 + 392) + 104))(*(void *)(v0 + 400), enum case for App.Kind.store(_:), *(void *)(v0 + 384));
      App.init(id:kind:)();
      uint64_t v8 = 0;
    }
    uint64_t v12 = *(void *)(v0 + 440);
    uint64_t v11 = *(void *)(v0 + 448);
    uint64_t v13 = *(void *)(v0 + 336);
    uint64_t v14 = *(void *)(v0 + 344);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v11, v8, 1, v13);
    sub_1000475F0(v11, v12, &qword_1001A23D8);
    id v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    *(void *)(v0 + 472) = v15;
    *(void *)(v0 + 480) = (v14 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
    if (v15(v12, 1, v13) == 1)
    {
      sub_100034B8C(*(void *)(v0 + 440), &qword_1001A23D8);
    }
    else
    {
      uint64_t v16 = *(void *)(v0 + 376);
      uint64_t v17 = *(void *)(v0 + 344);
      uint64_t v27 = *(void *)(v0 + 336);
      id v28 = v7;
      uint64_t v18 = *(void *)(v0 + 320);
      uint64_t v19 = *(void *)(v0 + 328);
      uint64_t v20 = *(void *)(v0 + 312);
      (*(void (**)(uint64_t, void))(v17 + 32))(v16, *(void *)(v0 + 440));
      sub_10002EC6C((void *)(v0 + 56), *(void *)(v0 + 80));
      (*(void (**)(uint64_t, void, uint64_t))(v18 + 104))(v19, enum case for AppInstallationType.unknown(_:), v20);
      uint64_t v1 = (void *)(v0 + 16);
      dispatch thunk of AppStateController.setWaiting(forApp:installationType:)();
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v20);
      id v7 = v28;
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v27);
    }
    uint64_t v22 = *(void *)(v0 + 40);
    uint64_t v21 = *(void *)(v0 + 48);
    sub_10002EC6C(v1, v22);
    uint64_t v23 = *(void *)(v21 + 8);
    id v24 = v7;
    uint64_t v25 = (void *)swift_task_alloc();
    *(void *)(v0 + 488) = v25;
    void *v25 = v0;
    v25[1] = sub_10006B318;
    uint64_t v26 = *(void *)(v0 + 304);
    return dispatch thunk of PurchaseManager.install(_:)(v26, v24, v22, v23);
  }
  else
  {
    sub_100034B8C(v0 + 96, &qword_1001A1D90);
    sub_10002EB60((uint64_t *)&unk_1001A3320);
    return dispatch thunk of BaseObjectGraph.noMemberFound<A>(toSatisfy:)();
  }
}

uint64_t sub_10006B318()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 496) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_10006BFB0;
  }
  else
  {

    uint64_t v3 = sub_10006B434;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10006B434()
{
  uint64_t v31 = (void *)(v0 + 136);
  if (qword_1001A0E68 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 296);
  uint64_t v28 = *(void *)(v0 + 304);
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 288);
  uint64_t v5 = *(void *)(v0 + 264);
  uint64_t v4 = *(void *)(v0 + 272);
  uint64_t v6 = sub_10002F6AC(v5, (uint64_t)qword_1001AE380);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v6, v5);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v7._countAndFlagsBits = 0xD000000000000036;
  v7._object = (void *)0x800000010015B9F0;
  LogMessage.StringInterpolation.appendLiteral(_:)(v7);
  *(void *)(v0 + 200) = v3;
  uint64_t v8 = sub_100031A88((uint64_t *)(v0 + 176));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v1 + 16))(v8, v28, v3);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C(v0 + 176, &qword_1001A1C50);
  v9._object = (void *)0x800000010015BA30;
  v9._countAndFlagsBits = 0xD00000000000001FLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v9);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v5);
  sub_10002EB60((uint64_t *)&unk_1001A5A10);
  inject<A, B>(_:from:)();
  if (*(unsigned char *)(*sub_10002EC6C(v31, *(void *)(v0 + 160)) + 16))
  {
    uint64_t v29 = (void *)(v0 + 56);
    uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 472);
    uint64_t v11 = *(void *)(v0 + 448);
    uint64_t v12 = *(void *)(v0 + 432);
    uint64_t v13 = *(void *)(v0 + 336);
    uint64_t v14 = *(void *)(v0 + 296);
    uint64_t v15 = *(void *)(v0 + 304);
    uint64_t v16 = *(void *)(v0 + 288);
    uint64_t v17 = *(void *)(v0 + 232);
    sub_10002ED08((uint64_t)v31);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
    uint64_t v18 = enum case for ActionOutcome.performed(_:);
    uint64_t v19 = type metadata accessor for ActionOutcome();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 104))(v17, v18, v19);
    sub_1000475F0(v11, v12, &qword_1001A23D8);
    if (v10(v12, 1, v13) == 1)
    {
      sub_100034B8C(*(void *)(v0 + 432), &qword_1001A23D8);
    }
    else
    {
      uint64_t v22 = *(void *)(v0 + 368);
      uint64_t v24 = *(void *)(v0 + 336);
      uint64_t v23 = *(void *)(v0 + 344);
      (*(void (**)(uint64_t, void, uint64_t))(v23 + 32))(v22, *(void *)(v0 + 432), v24);
      sub_10002EC6C(v29, *(void *)(v0 + 80));
      dispatch thunk of AppStateController.clearWaiting(forApp:refreshState:)();
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    }
    uint64_t v25 = *(void *)(v0 + 448);

    sub_100034B8C(v25, &qword_1001A23D8);
    sub_10002ED08((uint64_t)v29);
    sub_10002ED08(v0 + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
    return v26();
  }
  else
  {
    uint64_t v20 = swift_task_alloc();
    *(void *)(v0 + 504) = v20;
    *(void *)(v20 + 16) = v31;
    uint64_t v21 = (void *)swift_task_alloc();
    *(void *)(v0 + 512) = v21;
    *uint64_t v21 = v0;
    v21[1] = sub_10006B9A4;
    return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
  }
}

uint64_t sub_10006B9A4()
{
  *(void *)(*(void *)v1 + 520) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10006BD54;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_10006BAC0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10006BAC0()
{
  uint64_t v17 = (void *)(v0 + 56);
  uint64_t v1 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 472);
  uint64_t v2 = *(void *)(v0 + 448);
  uint64_t v3 = *(void *)(v0 + 432);
  uint64_t v4 = *(void *)(v0 + 336);
  uint64_t v6 = *(void *)(v0 + 296);
  uint64_t v5 = *(void *)(v0 + 304);
  uint64_t v7 = *(void *)(v0 + 288);
  uint64_t v8 = *(void *)(v0 + 232);
  sub_10002ED08(v0 + 136);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v9 = enum case for ActionOutcome.performed(_:);
  uint64_t v10 = type metadata accessor for ActionOutcome();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 104))(v8, v9, v10);
  sub_1000475F0(v2, v3, &qword_1001A23D8);
  if (v1(v3, 1, v4) == 1)
  {
    sub_100034B8C(*(void *)(v0 + 432), &qword_1001A23D8);
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 368);
    uint64_t v13 = *(void *)(v0 + 336);
    uint64_t v12 = *(void *)(v0 + 344);
    (*(void (**)(uint64_t, void, uint64_t))(v12 + 32))(v11, *(void *)(v0 + 432), v13);
    sub_10002EC6C(v17, *(void *)(v0 + 80));
    dispatch thunk of AppStateController.clearWaiting(forApp:refreshState:)();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }
  uint64_t v14 = *(void *)(v0 + 448);

  sub_100034B8C(v14, &qword_1001A23D8);
  sub_10002ED08((uint64_t)v17);
  sub_10002ED08(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t sub_10006BD54()
{
  uint64_t v14 = (void *)(v0 + 56);
  uint64_t v1 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 472);
  uint64_t v2 = *(void *)(v0 + 448);
  uint64_t v3 = *(void *)(v0 + 424);
  uint64_t v4 = *(void *)(v0 + 336);
  uint64_t v6 = *(void *)(v0 + 296);
  uint64_t v5 = *(void *)(v0 + 304);
  uint64_t v7 = *(void *)(v0 + 288);
  swift_task_dealloc();
  sub_10002ED08(v0 + 136);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  sub_1000475F0(v2, v3, &qword_1001A23D8);
  if (v1(v3, 1, v4) == 1)
  {
    sub_100034B8C(*(void *)(v0 + 424), &qword_1001A23D8);
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 360);
    uint64_t v10 = *(void *)(v0 + 336);
    uint64_t v9 = *(void *)(v0 + 344);
    (*(void (**)(uint64_t, void, uint64_t))(v9 + 32))(v8, *(void *)(v0 + 424), v10);
    sub_10002EC6C(v14, *(void *)(v0 + 80));
    dispatch thunk of AppStateController.clearWaiting(forApp:refreshState:)();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  uint64_t v11 = *(void *)(v0 + 448);

  sub_100034B8C(v11, &qword_1001A23D8);
  sub_10002ED08((uint64_t)v14);
  sub_10002ED08(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_10006BFB0()
{
  uint64_t v1 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 472);
  uint64_t v2 = *(void *)(v0 + 448);
  uint64_t v3 = *(void *)(v0 + 416);
  uint64_t v4 = *(void *)(v0 + 336);

  sub_1000475F0(v2, v3, &qword_1001A23D8);
  if (v1(v3, 1, v4) == 1)
  {
    sub_100034B8C(*(void *)(v0 + 416), &qword_1001A23D8);
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 344);
    uint64_t v6 = *(void *)(v0 + 352);
    uint64_t v7 = *(void *)(v0 + 336);
    (*(void (**)(uint64_t, void, uint64_t))(v5 + 32))(v6, *(void *)(v0 + 416), v7);
    sub_10002EC6C((void *)(v0 + 56), *(void *)(v0 + 80));
    dispatch thunk of AppStateController.clearWaiting(forApp:refreshState:)();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  }
  uint64_t v8 = *(void *)(v0 + 448);

  sub_100034B8C(v8, &qword_1001A23D8);
  sub_10002ED08(v0 + 56);
  sub_10002ED08(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_10006C1E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[15] = a2;
  v3[16] = a3;
  type metadata accessor for LogMessage.StringInterpolation();
  v3[17] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OSLogger();
  v3[18] = v4;
  v3[19] = *(void *)(v4 - 8);
  v3[20] = swift_task_alloc();
  sub_10002EB60(&qword_1001A2450);
  v3[21] = swift_task_alloc();
  return _swift_task_switch(sub_10006C2FC, 0, 0);
}

uint64_t sub_10006C2FC()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v3 = type metadata accessor for TaskPriority();
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
  v4(v1, 1, 1, v3);
  sub_100052538(v2, v0 + 16);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = 0;
  sub_100031C10((long long *)(v0 + 16), v5 + 32);
  sub_1000BA9BC(v1, (uint64_t)&unk_1001A23F8, v5);
  sub_100034B8C(v1, &qword_1001A2450);
  v4(v1, 1, 1, v3);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  sub_1000BA9BC(v1, (uint64_t)&unk_1001A2408, v6);
  sub_100034B8C(v1, &qword_1001A2450);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v7;
  uint64_t v8 = sub_10002EB60(&qword_1001A2410);
  void *v7 = v0;
  v7[1] = sub_10006C4E4;
  return ThrowingTaskGroup.next(isolation:)(v0 + 192, 0, 0, v8);
}

uint64_t sub_10006C4E4()
{
  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10006C6B0;
  }
  else {
    uint64_t v2 = sub_10006C5F8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10006C5F8()
{
  sub_10002EB60((uint64_t *)&unk_1001A3FC0);
  ThrowingTaskGroup.cancelAll()();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10006C6B0()
{
  if (qword_1001A0E68 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[19];
  uint64_t v4 = sub_10002F6AC(v2, (uint64_t)qword_1001AE380);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v5._object = (void *)0x800000010015BA50;
  v5._countAndFlagsBits = 0x100000000000003DLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v5);
  swift_getErrorValue();
  uint64_t v6 = v0[11];
  uint64_t v7 = v0[12];
  v0[10] = v7;
  uint64_t v8 = sub_100031A88(v0 + 7);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v8, v6, v7);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)(v0 + 7), &qword_1001A1C50);
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v9);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  sub_10002EB60((uint64_t *)&unk_1001A3FC0);
  ThrowingTaskGroup.cancelAll()();
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_10006C97C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v5 = sub_10002EB60(&qword_1001A2418);
  v4[3] = v5;
  v4[4] = *(void *)(v5 - 8);
  v4[5] = swift_task_alloc();
  uint64_t v6 = sub_10002EB60(&qword_1001A2420);
  void v4[6] = v6;
  v4[7] = *(void *)(v6 - 8);
  v4[8] = swift_task_alloc();
  v4[9] = swift_task_alloc();
  return _swift_task_switch(sub_10006CAB0, 0, 0);
}

uint64_t sub_10006CAB0()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 56);
  sub_10002EC6C(*(void **)(v0 + 16), *(void *)(*(void *)(v0 + 16) + 24));
  swift_retain();
  sub_10002EB60(&qword_1001A2428);
  sub_100061D9C(&qword_1001A5A90, &qword_1001A2428);
  EventEmitter.asyncStream.getter();
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v3);
  sub_100061D9C(&qword_1001A2430, &qword_1001A2420);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  uint64_t v5 = sub_100061D9C(&qword_1001A2438, &qword_1001A2418);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v6;
  void *v6 = v0;
  v6[1] = sub_10006CC78;
  uint64_t v7 = *(void *)(v0 + 24);
  return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 88, v7, v5);
}

uint64_t sub_10006CC78()
{
  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[5];
    uint64_t v4 = v2[3];
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v2[4] + 8);
    return v5(v3, v4);
  }
  else
  {
    return _swift_task_switch(sub_10006CDAC, 0, 0);
  }
}

uint64_t sub_10006CDAC()
{
  int v1 = *(unsigned __int8 *)(v0 + 88);
  if (v1 != 2)
  {
    if ((v1 & 1) == 0)
    {
      uint64_t v2 = sub_100061D9C(&qword_1001A2438, &qword_1001A2418);
      uint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 80) = v3;
      *uint64_t v3 = v0;
      v3[1] = sub_10006CC78;
      uint64_t v4 = *(void *)(v0 + 24);
      return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 88, v4, v2);
    }
    if (qword_1001A0E68 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for OSLogger();
    sub_10002F6AC(v5, (uint64_t)qword_1001AE380);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.init(stringLiteral:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = *(void *)(v0 + 72);
  uint64_t v7 = *(void *)(v0 + 48);
  uint64_t v8 = *(void *)(v0 + 56);
  (*(void (**)(void, void))(*(void *)(v0 + 32) + 8))(*(void *)(v0 + 40), *(void *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_10006D040()
{
  uint64_t v1 = type metadata accessor for ContinuousClock();
  v0[2] = v1;
  v0[3] = *(void *)(v1 - 8);
  v0[4] = swift_task_alloc();
  return _swift_task_switch(sub_10006D0FC, 0, 0);
}

uint64_t sub_10006D0FC()
{
  ContinuousClock.init()();
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1001A3790 + dword_1001A3790);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  void *v1 = v0;
  v1[1] = sub_10006D1CC;
  return v3(0x70801D946C940000, 2, 1000000000000000000, 0, 0);
}

uint64_t sub_10006D1CC()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 32);
  uint64_t v3 = *(void *)(*(void *)v1 + 24);
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    uint64_t v5 = sub_10006D33C;
  }
  else {
    uint64_t v5 = sub_10006D3A0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10006D33C()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10006D3A0()
{
  if (qword_1001A0E68 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for OSLogger();
  sub_10002F6AC(v1, (uint64_t)qword_1001AE380);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.init(stringLiteral:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10006D528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_10002F874;
  return sub_10006AC04(a1, a2, a3);
}

uint64_t sub_10006D5D8()
{
  return sub_10006D9A0(&qword_1001A23A8, (void (*)(uint64_t))type metadata accessor for AppStoreRepairAction);
}

uint64_t sub_10006D620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10006D9E8();

  return AsyncActionImplementation.perform(_:asPartOf:)(a1, a2, a3, v6);
}

void sub_10006D674(char a1, uint64_t a2, uint64_t a3)
{
  id v5 = [self sharedWorkspace];
  URL._bridgeToObjectiveC()(v6);
  uint64_t v8 = v7;
  sub_1000A7660(a3);
  v9.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v10 = &selRef_openSensitiveURL_frontBoardOptions_;
  if ((a1 & 1) == 0) {
    uint64_t v10 = &selRef_openURL_frontBoardOptions_;
  }
}

uint64_t sub_10006D760()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 17) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6, v5);
}

void sub_10006D804()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_10006D674(*(unsigned char *)(v0 + 16), v0 + v2, *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_10006D898(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10006D900(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_10006D960()
{
  unint64_t result = qword_1001A17E8;
  if (!qword_1001A17E8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001A17E8);
  }
  return result;
}

uint64_t sub_10006D9A0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10006D9E8()
{
  unint64_t result = qword_1001A23C8;
  if (!qword_1001A23C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001A23C8);
  }
  return result;
}

uint64_t sub_10006DA3C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_10002F874;
  return sub_10006C1E0(a1, a2, v6);
}

uint64_t sub_10006DAEC()
{
  swift_unknownObjectRelease();
  sub_10002ED08(v0 + 32);

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10006DB2C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  void *v6 = v2;
  v6[1] = sub_100053090;
  return sub_10006C97C(a1, v4, v5, v1 + 32);
}

uint64_t sub_10006DBE0()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006DC18()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100053090;
  return sub_10006D040();
}

uint64_t getEnumTagSinglePayload for ArcadeEntitlementRefreshCondition(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0x7D) {
    goto LABEL_17;
  }
  if (a2 + 131 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 131) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 131;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 131;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 131;
    }
  }
LABEL_17:
  unsigned int v6 = ((*a1 >> 6) & 0xFFFFFF83 | (4 * ((*a1 >> 1) & 0x1F))) ^ 0x7F;
  if (v6 >= 0x7C) {
    unsigned int v6 = -1;
  }
  return v6 + 1;
}

unsigned char *storeEnumTagSinglePayload for ArcadeEntitlementRefreshCondition(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 131 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 131) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0x7D) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0x7C)
  {
    unsigned int v6 = ((a2 - 125) >> 8) + 1;
    *unint64_t result = a2 - 125;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10006DE3CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
        break;
    }
  }
  return result;
}

uint64_t sub_10006DE64(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  unsigned int v2 = v1 >> 6;
  unsigned int v3 = (v1 & 1) + 3;
  if (v2 == 3) {
    return v3;
  }
  else {
    return v2;
  }
}

unsigned char *sub_10006DE80(unsigned char *result)
{
  *result &= 0x3Fu;
  return result;
}

unsigned char *sub_10006DE90(unsigned char *result, unsigned int a2)
{
  if (a2 < 3) {
    *unint64_t result = *result & 1 | ((_BYTE)a2 << 6);
  }
  else {
    *unint64_t result = a2 & 1 ^ 0xC1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ArcadeEntitlementRefreshCondition()
{
  return &type metadata for ArcadeEntitlementRefreshCondition;
}

unint64_t sub_10006DECC(unsigned __int8 a1)
{
  switch(a1 >> 6)
  {
    case 1:
      unint64_t v10 = 0;
      _StringGuts.grow(_:)(62);
      unint64_t v2 = 0xD00000000000003BLL;
      unsigned int v3 = "refresh if cache is expired or is subscribed, (may prompt: ";
      goto LABEL_9;
    case 2:
      unint64_t v10 = 0;
      _StringGuts.grow(_:)(64);
      unint64_t v2 = 0xD00000000000003DLL;
      unsigned int v3 = "refresh if cache is expired or is unsubscribed, (may prompt: ";
LABEL_9:
      unint64_t v5 = (unint64_t)(v3 - 32) | 0x8000000000000000;
      String.append(_:)(*(Swift::String *)&v2);
      goto LABEL_10;
    case 3:
      if (a1 == 192) {
        return 0xD000000000000013;
      }
      else {
        return 0xD000000000000014;
      }
    default:
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      unint64_t v10 = 0xD00000000000002ALL;
LABEL_10:
      if (a1) {
        uint64_t v6 = 1702195828;
      }
      else {
        uint64_t v6 = 0x65736C6166;
      }
      if (a1) {
        unint64_t v7 = 0xE400000000000000;
      }
      else {
        unint64_t v7 = 0xE500000000000000;
      }
      unint64_t v8 = v7;
      String.append(_:)(*(Swift::String *)&v6);
      swift_bridgeObjectRelease();
      v9._countAndFlagsBits = 41;
      v9._object = (void *)0xE100000000000000;
      String.append(_:)(v9);
      return v10;
  }
}

void sub_10006E068(uint64_t a1, unsigned __int8 a2)
{
  switch(a2 >> 6)
  {
    case 1:
      Swift::UInt8 v2 = a2 & 1;
      Swift::UInt v3 = 2;
      goto LABEL_7;
    case 2:
      Swift::UInt8 v2 = a2 & 1;
      Swift::UInt v3 = 3;
      goto LABEL_7;
    case 3:
      if (a2 == 192) {
        Swift::UInt v4 = 0;
      }
      else {
        Swift::UInt v4 = 4;
      }
      Hasher._combine(_:)(v4);
      return;
    default:
      Swift::UInt8 v2 = a2 & 1;
      Swift::UInt v3 = 1;
LABEL_7:
      Hasher._combine(_:)(v3);
      Hasher._combine(_:)(v2);
      return;
  }
}

unint64_t sub_10006E108()
{
  return sub_10006DECC(*v0);
}

Swift::Int sub_10006E110()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)();
  sub_10006E068((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_10006E158(uint64_t a1)
{
  sub_10006E068(a1, *v1);
}

Swift::Int sub_10006E160()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)();
  sub_10006E068((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t sub_10006E1A4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10006E208(*a1, *a2);
}

unint64_t sub_10006E1B4()
{
  unint64_t result = qword_1001A2440;
  if (!qword_1001A2440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A2440);
  }
  return result;
}

uint64_t sub_10006E208(unsigned __int8 a1, unsigned __int8 a2)
{
  switch(a1 >> 6)
  {
    case 1:
      if ((a2 & 0xC0) != 0x40) {
        return 0;
      }
      return (((a1 & 1) == 0) ^ a2) & 1;
    case 2:
      if ((a2 & 0xC0) != 0x80) {
        return 0;
      }
      return (((a1 & 1) == 0) ^ a2) & 1;
    case 3:
      if (a1 == 192)
      {
        if (a2 == 192) {
          return 1;
        }
      }
      else if (a2 == 193)
      {
        return 1;
      }
      return 0;
    default:
      if (a2 >= 0x40u) {
        return 0;
      }
      return (((a1 & 1) == 0) ^ a2) & 1;
  }
}

uint64_t getEnumTagSinglePayload for ArcadeIntroOfferState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ArcadeIntroOfferState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10006E40CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ArcadeIntroOfferState()
{
  return &type metadata for ArcadeIntroOfferState;
}

unint64_t sub_10006E448()
{
  unint64_t result = qword_1001A2448;
  if (!qword_1001A2448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A2448);
  }
  return result;
}

ValueMetadata *type metadata accessor for ArcadeOfferActionImplementation()
{
  return &type metadata for ArcadeOfferActionImplementation;
}

unint64_t sub_10006E4B0()
{
  unint64_t result = qword_1001A17E0;
  if (!qword_1001A17E0)
  {
    sub_10002EE34(255, &qword_1001A17D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A17E0);
  }
  return result;
}

uint64_t sub_10006E518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[73] = a3;
  unsigned char v3[72] = a2;
  v3[71] = a1;
  type metadata accessor for LogMessage.StringInterpolation();
  v3[74] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OSLogger();
  v3[75] = v4;
  v3[76] = *(void *)(v4 - 8);
  v3[77] = swift_task_alloc();
  uint64_t v5 = sub_10002EB60(&qword_1001A19B8);
  v3[78] = v5;
  v3[79] = *(void *)(v5 - 8);
  v3[80] = swift_task_alloc();
  v3[81] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ArcadeState();
  v3[82] = v6;
  v3[83] = *(void *)(v6 - 8);
  v3[84] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for MetricsFieldsContext();
  v3[85] = v7;
  v3[86] = *(void *)(v7 - 8);
  v3[87] = swift_task_alloc();
  v3[88] = swift_task_alloc();
  uint64_t v8 = sub_10002EB60((uint64_t *)&unk_1001A2160);
  v3[89] = v8;
  v3[90] = *(void *)(v8 - 8);
  v3[91] = swift_task_alloc();
  return _swift_task_switch(sub_10006E7A4, 0, 0);
}

uint64_t sub_10006E7A4()
{
  uint64_t v1 = *(void *)(v0 + 576);
  type metadata accessor for ObjectGraph();
  inject<A, B>(_:from:)();
  uint64_t v2 = v1 + qword_1001A53E0;
  swift_beginAccess();
  sub_1000700A0(v2, v0 + 176);
  if (*(void *)(v0 + 200))
  {
    uint64_t v3 = *(void *)(v0 + 584);
    uint64_t v77 = (void *)(v0 + 256);
    sub_100031C10((long long *)(v0 + 176), v0 + 256);
    sub_10002EE34(0, (unint64_t *)&qword_1001A5470);
    BaseObjectGraph.optional<A>(_:)();
    uint64_t v4 = *(void **)(v0 + 512);
    MetricsFieldsContext.init()();
    *(void *)(v0 + 552) = v3;
    if (qword_1001A0DC0 != -1) {
      swift_once();
    }
    uint64_t v5 = sub_10002EB60(qword_1001A22E0);
    sub_10002F6AC(v5, (uint64_t)qword_1001AE298);
    sub_10002EB60(&qword_1001A1700);
    MetricsFieldsContext.addValue<A>(_:forProperty:)();
    if (v4)
    {
      *(void *)(v0 + 560) = v4;
      uint64_t v6 = qword_1001A0DA0;
      id v7 = v4;
      if (v6 != -1) {
        swift_once();
      }
      uint64_t v8 = sub_10002EB60(&qword_1001A50E0);
      sub_10002F6AC(v8, (uint64_t)qword_1001AE268);
      MetricsFieldsContext.addValue<A>(_:forProperty:)();
    }
    uint64_t v9 = *(void *)(v0 + 672);
    uint64_t v10 = *(void *)(v0 + 664);
    uint64_t v11 = *(void *)(v0 + 656);
    (*(void (**)(void, void, void))(*(void *)(v0 + 688) + 32))(*(void *)(v0 + 704), *(void *)(v0 + 696), *(void *)(v0 + 680));

    sub_10002EC6C(v77, *(void *)(v0 + 280));
    dispatch thunk of ArcadeSubscriptionManager.subscriptionState.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v10 + 88))(v9, v11) == enum case for ArcadeState.subscribed(_:))
    {
      uint64_t v12 = *(id **)(v0 + 672);
      uint64_t v13 = *(void **)(v0 + 584);
      (*(void (**)(id *, void))(*(void *)(v0 + 664) + 96))(v12, *(void *)(v0 + 656));

      id v14 = [v13 subscribedOffer];
      sub_10002DC48(v0 + 376);
      swift_unknownObjectRelease();
      if (*(void *)(v0 + 400))
      {
        uint64_t v15 = *(void *)(v0 + 704);
        uint64_t v16 = *(void *)(v0 + 688);
        uint64_t v17 = *(void *)(v0 + 680);
        uint64_t v18 = *(void *)(v0 + 648);
        uint64_t v19 = *(void *)(v0 + 632);
        uint64_t v20 = *(void *)(v0 + 624);
        sub_100031C10((long long *)(v0 + 376), v0 + 416);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v18, v15, v17);
        (*(void (**)(uint64_t, void, uint64_t))(v19 + 104))(v18, enum case for ActionDispatcher.MetricsBehavior.fromAction<A>(_:), v20);
        uint64_t v21 = (void *)swift_task_alloc();
        *(void *)(v0 + 736) = v21;
        *uint64_t v21 = v0;
        v21[1] = sub_10006F340;
        uint64_t v22 = *(void *)(v0 + 712);
        uint64_t v23 = *(void *)(v0 + 648);
        uint64_t v24 = *(void *)(v0 + 576);
        uint64_t v25 = *(void *)(v0 + 568);
        uint64_t v26 = v0 + 416;
LABEL_17:
        return ActionDispatcher.perform(_:withMetrics:asPartOf:)(v25, v26, v23, v24, v22);
      }
      uint64_t v33 = *(void *)(v0 + 720);
      uint64_t v73 = *(void *)(v0 + 712);
      uint64_t v75 = *(void *)(v0 + 728);
      uint64_t v34 = *(void *)(v0 + 688);
      uint64_t v69 = *(void *)(v0 + 680);
      uint64_t v71 = *(void *)(v0 + 704);
      uint64_t v35 = *(void **)(v0 + 584);
      sub_100034B8C(v0 + 376, (uint64_t *)&unk_1001A2180);
      type metadata accessor for ASCAppOfferActionError(0);
      *(void *)(v0 + 544) = 2;
      sub_10002EB60(&qword_1001A4CE0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10014CED0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v37;
      _StringGuts.grow(_:)(32);
      id v38 = [v35 subscribedOffer];
      swift_getObjectType();
      swift_unknownObjectRelease();
      uint64_t v39 = _typeName(_:qualified:)();
      uint64_t v41 = v40;
      swift_bridgeObjectRelease();
      v42._object = (void *)0x800000010015B540;
      v42._countAndFlagsBits = 0xD00000000000001ELL;
      String.append(_:)(v42);
      *(void *)(inited + 72) = &type metadata for String;
      *(void *)(inited + 48) = v39;
      *(void *)(inited + 56) = v41;
      sub_100062F68(inited);
      sub_100070108();
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v71, v69);
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v75, v73);
      goto LABEL_22;
    }
    id v28 = [*(id *)(v0 + 584) notSubscribedOffer];
    sub_10002DC48(v0 + 336);
    swift_unknownObjectRelease();
    if (!*(void *)(v0 + 360))
    {
      uint64_t v43 = *(void *)(v0 + 720);
      uint64_t v68 = *(void *)(v0 + 704);
      uint64_t v70 = *(void *)(v0 + 712);
      uint64_t v44 = *(void *)(v0 + 688);
      uint64_t v67 = *(void *)(v0 + 680);
      uint64_t v74 = *(void *)(v0 + 728);
      uint64_t v76 = *(void *)(v0 + 672);
      uint64_t v45 = *(void *)(v0 + 664);
      uint64_t v72 = *(void *)(v0 + 656);
      uint64_t v46 = *(void **)(v0 + 584);
      sub_100034B8C(v0 + 336, (uint64_t *)&unk_1001A2180);
      type metadata accessor for ASCAppOfferActionError(0);
      *(void *)(v0 + 520) = 2;
      sub_10002EB60(&qword_1001A4CE0);
      uint64_t v47 = swift_initStackObject();
      *(_OWORD *)(v47 + 16) = xmmword_10014CED0;
      *(void *)(v47 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v47 + 40) = v48;
      _StringGuts.grow(_:)(32);
      id v49 = [v46 notSubscribedOffer];
      swift_getObjectType();
      swift_unknownObjectRelease();
      uint64_t v50 = _typeName(_:qualified:)();
      uint64_t v52 = v51;
      swift_bridgeObjectRelease();
      v53._object = (void *)0x800000010015B540;
      v53._countAndFlagsBits = 0xD00000000000001ELL;
      String.append(_:)(v53);
      *(void *)(v47 + 72) = &type metadata for String;
      *(void *)(v47 + 48) = v50;
      *(void *)(v47 + 56) = v52;
      sub_100062F68(v47);
      sub_100070108();
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v68, v67);
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v74, v70);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v76, v72);
LABEL_22:
      sub_10002ED08((uint64_t)v77);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v54 = *(uint64_t (**)(void))(v0 + 8);
      return v54();
    }
    sub_100031C10((long long *)(v0 + 336), v0 + 296);
    sub_10002EB60((uint64_t *)&unk_1001A5A10);
    inject<A, B>(_:from:)();
    if (*(unsigned char *)(*sub_10002EC6C((void *)(v0 + 216), *(void *)(v0 + 240)) + 16))
    {
      uint64_t v29 = *(void *)(v0 + 640);
      uint64_t v30 = *(void *)(v0 + 632);
      uint64_t v31 = *(void *)(v0 + 624);
      (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 688) + 16))(v29, *(void *)(v0 + 704), *(void *)(v0 + 680));
      (*(void (**)(uint64_t, void, uint64_t))(v30 + 104))(v29, enum case for ActionDispatcher.MetricsBehavior.fromAction<A>(_:), v31);
      uint64_t v32 = (void *)swift_task_alloc();
      *(void *)(v0 + 776) = v32;
      *uint64_t v32 = v0;
      v32[1] = sub_10006F880;
      uint64_t v22 = *(void *)(v0 + 712);
      uint64_t v23 = *(void *)(v0 + 640);
      uint64_t v24 = *(void *)(v0 + 576);
      uint64_t v25 = *(void *)(v0 + 568);
      uint64_t v26 = v0 + 296;
      goto LABEL_17;
    }
    if (qword_1001A0E68 != -1) {
      swift_once();
    }
    uint64_t v55 = *(void *)(v0 + 616);
    uint64_t v56 = *(void *)(v0 + 608);
    uint64_t v57 = *(void *)(v0 + 600);
    uint64_t v58 = *(void **)(v0 + 584);
    uint64_t v59 = sub_10002F6AC(v57, (uint64_t)qword_1001AE380);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v55, v59, v57);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v60._countAndFlagsBits = 0xD00000000000003ELL;
    v60._object = (void *)0x800000010015AE60;
    LogMessage.StringInterpolation.appendLiteral(_:)(v60);
    id v61 = [v58 id];
    *(void *)(v0 + 480) = sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
    *(void *)(v0 + 456) = v61;
    LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
    sub_100034B8C(v0 + 456, &qword_1001A1C50);
    v62._countAndFlagsBits = 0;
    v62._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v62);
    LogMessage.init(stringInterpolation:)();
    Logger.warning(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
    id v63 = [v58 notSubscribedOffer];
    *(void *)(v0 + 752) = v63;
    uint64_t v64 = (void *)swift_task_alloc();
    *(void *)(v0 + 760) = v64;
    *uint64_t v64 = v0;
    v64[1] = sub_10006F5E0;
    uint64_t v65 = *(void **)(v0 + 576);
    uint64_t v66 = *(void *)(v0 + 568);
    return sub_100069D1C(v66, (uint64_t)v63, v65);
  }
  else
  {
    sub_100034B8C(v0 + 176, (uint64_t *)&unk_1001A3290);
    sub_10002EB60(&qword_1001A2480);
    return dispatch thunk of BaseObjectGraph.noMemberFound<A>(toSatisfy:)();
  }
}

uint64_t sub_10006F340()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 744) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[79] + 8))(v2[81], v2[78]);
  if (v0) {
    uint64_t v3 = sub_10006F9E8;
  }
  else {
    uint64_t v3 = sub_10006F4A8;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10006F4A8()
{
  uint64_t v1 = v0[91];
  uint64_t v2 = v0[90];
  uint64_t v3 = v0[89];
  uint64_t v4 = v0[88];
  uint64_t v5 = v0[86];
  uint64_t v6 = v0[85];
  sub_10002ED08((uint64_t)(v0 + 52));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_10002ED08((uint64_t)(v0 + 32));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10006F5E0()
{
  *(void *)(*(void *)v1 + 768) = v0;
  swift_task_dealloc();
  swift_unknownObjectRelease();
  if (v0) {
    uint64_t v2 = sub_10006FB28;
  }
  else {
    uint64_t v2 = sub_10006F714;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10006F714()
{
  uint64_t v1 = v0[91];
  uint64_t v2 = v0[90];
  uint64_t v3 = v0[89];
  uint64_t v4 = v0[88];
  uint64_t v5 = v0[86];
  uint64_t v6 = v0[85];
  uint64_t v11 = v0[84];
  uint64_t v7 = v0[83];
  uint64_t v8 = v0[82];
  sub_10002ED08((uint64_t)(v0 + 37));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_10002ED08((uint64_t)(v0 + 27));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v8);
  sub_10002ED08((uint64_t)(v0 + 32));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_10006F880()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 784) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[79] + 8))(v2[80], v2[78]);
  if (v0) {
    uint64_t v3 = sub_10006FC94;
  }
  else {
    uint64_t v3 = sub_100070160;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10006F9E8()
{
  uint64_t v1 = v0[91];
  uint64_t v2 = v0[90];
  uint64_t v3 = v0[89];
  uint64_t v4 = v0[88];
  uint64_t v5 = v0[86];
  uint64_t v6 = v0[85];
  sub_10002ED08((uint64_t)(v0 + 52));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_10002ED08((uint64_t)(v0 + 32));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10006FB28()
{
  uint64_t v1 = v0[91];
  uint64_t v2 = v0[90];
  uint64_t v3 = v0[89];
  uint64_t v4 = v0[88];
  uint64_t v5 = v0[86];
  uint64_t v6 = v0[85];
  uint64_t v11 = v0[84];
  uint64_t v7 = v0[83];
  uint64_t v8 = v0[82];
  sub_10002ED08((uint64_t)(v0 + 37));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_10002ED08((uint64_t)(v0 + 27));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v8);
  sub_10002ED08((uint64_t)(v0 + 32));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_10006FC94()
{
  uint64_t v1 = v0[91];
  uint64_t v2 = v0[90];
  uint64_t v3 = v0[89];
  uint64_t v4 = v0[88];
  uint64_t v5 = v0[86];
  uint64_t v6 = v0[85];
  uint64_t v11 = v0[84];
  uint64_t v7 = v0[83];
  uint64_t v8 = v0[82];
  sub_10002ED08((uint64_t)(v0 + 37));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_10002ED08((uint64_t)(v0 + 27));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v8);
  sub_10002ED08((uint64_t)(v0 + 32));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_10006FE00(void **a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A2450);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *a1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = v7;
  sub_10002EB60((uint64_t *)&unk_1001A21F0);
  swift_retain();
  id v9 = v7;
  uint64_t v10 = Promise.__allocating_init()();
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v6, 1, 1, v11);
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = &unk_1001A2460;
  v12[5] = v8;
  v12[6] = v10;
  swift_retain();
  sub_1000F6C04((uint64_t)v6, (uint64_t)&unk_1001A2470, (uint64_t)v12);
  swift_release();
  return v10;
}

uint64_t sub_10006FF6C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006FFAC(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  void *v6 = v2;
  v6[1] = sub_10002F874;
  return sub_10006E518(a1, v5, v4);
}

uint64_t sub_100070058()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000700A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60((uint64_t *)&unk_1001A3290);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100070108()
{
  unint64_t result = qword_1001A1300;
  if (!qword_1001A1300)
  {
    type metadata accessor for ASCAppOfferActionError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A1300);
  }
  return result;
}

uint64_t sub_100070164@<X0>(void *a1@<X8>)
{
  uint64_t v2 = sub_10002EB60(&qword_1001A2528);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Bag();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  id v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002EB60(&qword_1001A3390);
  type metadata accessor for BaseObjectGraph();
  inject<A, B>(_:from:)();
  inject<A, B>(_:from:)();
  NSString v10 = String._bridgeToObjectiveC()();
  Bag.subscript.getter();

  Bag.Value.currentOrNil()();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v11 = v23[0];
  uint64_t v12 = v23[1];
  id v13 = [self sharedInstance];
  sub_100052538((uint64_t)v24, (uint64_t)v23);
  uint64_t v14 = self;
  id v15 = v13;
  id v16 = [v14 defaultCenter];
  type metadata accessor for ASDArcadeSubscriptionManager();
  uint64_t v17 = swift_allocObject();
  sub_100070A40(v11, v12, (uint64_t)v15, (uint64_t)v23, v16, v17);

  uint64_t v18 = type metadata accessor for ASCMigrationArcadeSubscriptionManagerImplementation();
  uint64_t v19 = (void *)swift_allocObject();
  uint64_t v20 = swift_retain();
  uint64_t v21 = sub_100070B5C(v20, v19);
  swift_release();
  a1[3] = v18;
  a1[4] = sub_100070D14();

  swift_release();
  *a1 = v21;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return sub_10002ED08((uint64_t)v24);
}

uint64_t sub_10007045C@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin();
  uint64_t v2 = type metadata accessor for OSLogger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v17 = &type metadata for Feature;
  unint64_t v18 = sub_100070914();
  v16[0] = 0;
  char v6 = isFeatureEnabled(_:)();
  sub_10002ED08((uint64_t)v16);
  if (v6)
  {
    if (qword_1001A0E80 != -1) {
      swift_once();
    }
    uint64_t v7 = sub_10002F6AC(v2, (uint64_t)qword_1001AE3C8);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 16))(v5, v7, v2);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v8._countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v8);
    uint64_t v17 = &type metadata for Feature;
    v16[0] = 0;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_1000709E0((uint64_t)v16);
    v9._countAndFlagsBits = 0xD000000000000035;
    v9._object = (void *)0x800000010015BC70;
    LogMessage.StringInterpolation.appendLiteral(_:)(v9);
    LogMessage.init(stringInterpolation:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v10 = type metadata accessor for ASDArcadeSubscriptionManager();
    swift_retain();
    uint64_t result = ASDArcadeSubscriptionManager.__allocating_init(objectGraph:requestingBundleID:)();
    a1[3] = v10;
    a1[4] = (uint64_t)&protocol witness table for ASDArcadeSubscriptionManager;
    *a1 = result;
  }
  else
  {
    if (qword_1001A0E80 != -1) {
      swift_once();
    }
    uint64_t v12 = sub_10002F6AC(v2, (uint64_t)qword_1001AE3C8);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 16))(v5, v12, v2);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v13._countAndFlagsBits = 0;
    v13._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v13);
    uint64_t v17 = &type metadata for Feature;
    v16[0] = 0;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_1000709E0((uint64_t)v16);
    v14._countAndFlagsBits = 0xD000000000000036;
    v14._object = (void *)0x800000010015BC30;
    LogMessage.StringInterpolation.appendLiteral(_:)(v14);
    LogMessage.init(stringInterpolation:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
    return sub_100070164(a1);
  }
  return result;
}

uint64_t sub_1000708E0()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ArcadeSubscriptionManagerFactory()
{
  return self;
}

unint64_t sub_100070914()
{
  unint64_t result = qword_1001A2520;
  if (!qword_1001A2520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A2520);
  }
  return result;
}

uint64_t (*sub_100070968(uint64_t a1))(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = sub_100070DC8;
  *(void *)(v2 + 24) = a1;
  swift_retain();
  return sub_100070E08;
}

uint64_t sub_1000709E0(uint64_t a1)
{
  uint64_t v2 = sub_10002EB60(&qword_1001A1C50);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100070A40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v15[3] = sub_100070E3C();
  void v15[4] = &off_100186C60;
  v15[0] = a3;
  *(void *)(a6 + 16) = a1;
  *(void *)(a6 + 24) = a2;
  sub_100052538((uint64_t)v15, a6 + 32);
  sub_100052538(a4, a6 + 72);
  *(void *)(a6 + 112) = a5;
  id v12 = objc_allocWithZone((Class)NSRecursiveLock);
  id v13 = a5;
  *(void *)(a6 + 120) = [v12 init];
  *(void *)(a6 + 128) = 0;
  *(unsigned char *)(a6 + 136) = 3;
  sub_10002EB60(&qword_1001A2548);
  swift_allocObject();
  *(void *)(a6 + 144) = AsyncEvent.init()();
  [v13 addObserver:a6 selector:"entitlementsDidChange:" name:ASDSubscriptionEntitlementsAppStoreDidChangeNotification object:0];
  sub_10002ED08(a4);
  sub_10002ED08((uint64_t)v15);
  return a6;
}

void *sub_100070B5C(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A2538);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2[2] = a1;
  a2[3] = &off_100186698;
  sub_10002EB60(&qword_1001A2540);
  swift_allocObject();
  swift_unknownObjectRetain();
  a2[4] = AsyncEvent.init()();
  sub_10002EB60(&qword_1001A2548);
  sub_100070D6C();
  swift_retain();
  dispatch thunk of static EventEmitter.defaultScheduler.getter();
  EventEmitter.addObserver<A>(on:target:method:)();
  swift_release();
  sub_10002ED08((uint64_t)v10);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return a2;
}

unint64_t sub_100070D14()
{
  unint64_t result = qword_1001A2530;
  if (!qword_1001A2530)
  {
    type metadata accessor for ASCMigrationArcadeSubscriptionManagerImplementation();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A2530);
  }
  return result;
}

unint64_t sub_100070D6C()
{
  unint64_t result = qword_1001A2550;
  if (!qword_1001A2550)
  {
    sub_10002ED58(&qword_1001A2548);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A2550);
  }
  return result;
}

uint64_t sub_100070DC8(uint64_t a1, char a2)
{
  return sub_100087454(a1, a2);
}

uint64_t sub_100070DD0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100070E08(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

unint64_t sub_100070E3C()
{
  unint64_t result = qword_1001A2558;
  if (!qword_1001A2558)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001A2558);
  }
  return result;
}

uint64_t sub_100070E7C()
{
  JSONObject.string.getter();
  if (v0)
  {
    id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    NSString v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v3 = [v1 initWithStringValue:v2];

    return (uint64_t)v3;
  }
  else
  {
    uint64_t v5 = type metadata accessor for JSONError();
    sub_10002ECB0();
    swift_allocError();
    uint64_t v7 = v6;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    sub_10002EB60(&qword_1001A2560);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_10014CED0;
    *(void *)(v9 + 32) = swift_allocError();
    uint64_t *v10 = 0x65756C6156776172;
    v10[1] = 0xE800000000000000;
    void v10[2] = MetatypeMetadata;
    uint64_t v11 = *(void (**)(uint64_t *, void, uint64_t))(*(void *)(v5 - 8) + 104);
    v11(v10, enum case for JSONError.missingProperty(_:), v5);
    uint64_t *v7 = MetatypeMetadata;
    v7[1] = v9;
    v11(v7, enum case for JSONError.malformedDocument(_:), v5);
    return swift_willThrow();
  }
}

uint64_t sub_100071024()
{
  return sub_100070E7C();
}

void *sub_10007103C()
{
  if ([v0 alertButtonOffer])
  {
    sub_10002EB60(&qword_1001A19A0);
    type metadata accessor for ObjectGraph();
    inject<A, B>(_:from:)();
    sub_10002DC48((uint64_t)&v24);
    if (v25)
    {
      sub_100031C10(&v24, (uint64_t)&v26);
      sub_10002EB60(&qword_1001A23C0);
      uint64_t inited = swift_allocObject();
      *(_OWORD *)(inited + 16) = xmmword_10014CD00;
      sub_10002EC6C(v28, v28[3]);
      v2._uint64_t countAndFlagsBits = 0x432E6E6F69746341;
      v2._object = (void *)0xED00006C65636E61;
      Swift::String v3 = Localizer.string(forKey:)(v2);
      *(_OWORD *)(inited + 48) = 0u;
      *(_OWORD *)(inited + 64) = 0u;
      *(void *)(inited + 80) = 0;
      *(Swift::String *)(inited + 32) = v3;
      id v4 = [v0 alertButtonTitle];
      if (v4)
      {
        uint64_t v5 = v4;
        uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
        object = v7;

        sub_100052538((uint64_t)v28, (uint64_t)&v24);
        if (object)
        {
LABEL_11:
          sub_10002ED08((uint64_t)&v24);
          sub_100052538((uint64_t)&v26, inited + 104);
          *(void *)(inited + 88) = countAndFlagsBits;
          *(void *)(inited + 96) = object;
          swift_unknownObjectRelease();
          sub_10002ED08((uint64_t)&v26);
          sub_10002ED08((uint64_t)v28);
          return (void *)inited;
        }
      }
      else
      {
        sub_100052538((uint64_t)v28, (uint64_t)&v24);
      }
      sub_10002EC6C(&v24, v25);
      v21._uint64_t countAndFlagsBits = 0x4F2E6E6F69746341;
      v21._object = (void *)0xE90000000000004BLL;
      Swift::String v22 = Localizer.string(forKey:)(v21);
      uint64_t countAndFlagsBits = v22._countAndFlagsBits;
      object = v22._object;
      goto LABEL_11;
    }
    sub_100034B8C((uint64_t)&v24, (uint64_t *)&unk_1001A2180);
    type metadata accessor for ASCAppOfferActionError(0);
    *(void *)&long long v24 = 2;
    sub_10002EB60(&qword_1001A4CE0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10014CED0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v14;
    uint64_t v26 = 0;
    unint64_t v27 = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    swift_getObjectType();
    uint64_t v15 = _typeName(_:qualified:)();
    unint64_t v17 = v16;
    swift_bridgeObjectRelease();
    uint64_t v26 = v15;
    unint64_t v27 = v17;
    v18._object = (void *)0x800000010015B540;
    v18._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v18);
    uint64_t v19 = v26;
    unint64_t v20 = v27;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = v19;
    *(void *)(inited + 56) = v20;
    sub_100062F68(inited);
    sub_100072280((unint64_t *)&qword_1001A1300, type metadata accessor for ASCAppOfferActionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_unknownObjectRelease();
    sub_10002ED08((uint64_t)v28);
  }
  else
  {
    id v9 = [v0 alertButtonTitle];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;

      sub_10002EB60(&qword_1001A23C0);
      uint64_t inited = swift_allocObject();
      *(_OWORD *)(inited + 16) = xmmword_10014CED0;
      *(_OWORD *)(inited + 48) = 0u;
      *(_OWORD *)(inited + 64) = 0u;
      *(void *)(inited + 80) = 0;
      *(void *)(inited + 32) = v11;
      *(void *)(inited + 40) = v13;
    }
    else
    {
      return &_swiftEmptyArrayStorage;
    }
  }
  return (void *)inited;
}

void *sub_1000713FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t result = &_swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    id v4 = (void **)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      id v6 = v5;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

id sub_1000714AC(uint64_t a1, uint64_t a2)
{
  uint64_t v103 = a2;
  uint64_t v3 = sub_10002EB60(&qword_1001A2568);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v98 = (uint64_t)v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  unint64_t v97 = (unint64_t)v83 - v6;
  uint64_t v102 = type metadata accessor for JSONContext();
  uint64_t v100 = *(void *)(v102 - 8);
  uint64_t v7 = __chkstk_darwin(v102);
  uint64_t v92 = (char *)v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v83 - v9;
  uint64_t v11 = type metadata accessor for JSONObject();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v93 = (char *)v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v90 = (char *)v83 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v95 = (char *)v83 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  unint64_t v94 = (char *)v83 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v96 = (char *)v83 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = (char *)v83 - v24;
  uint64_t v26 = __chkstk_darwin(v23);
  id v28 = (char *)v83 - v27;
  __chkstk_darwin(v26);
  uint64_t v30 = (char *)v83 - v29;
  uint64_t v31 = a1;
  JSONObject.subscript.getter();
  uint64_t v91 = JSONObject.string.getter();
  uint64_t v33 = v32;
  uint64_t v34 = *(void (**)(char *, uint64_t))(v12 + 8);
  v34(v30, v11);
  if (!v33)
  {
    uint64_t v43 = type metadata accessor for JSONError();
    sub_100072280((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
    swift_allocError();
    uint64_t v45 = v44;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    *uint64_t v45 = 0x7469547472656C61;
    unint64_t v47 = 0xEA0000000000656CLL;
LABEL_7:
    v45[1] = v47;
    v45[2] = MetatypeMetadata;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v43 - 8) + 104))(v45, enum case for JSONError.missingProperty(_:), v43);
    return (id)swift_willThrow();
  }
  uint64_t v99 = v33;
  JSONObject.subscript.getter();
  uint64_t v86 = JSONObject.string.getter();
  uint64_t v36 = v35;
  v34(v28, v11);
  if (!v36)
  {
    swift_bridgeObjectRelease();
    uint64_t v43 = type metadata accessor for JSONError();
    sub_100072280((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
    swift_allocError();
    uint64_t v45 = v48;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    *uint64_t v45 = 0x73654D7472656C61;
    unint64_t v47 = 0xEC00000065676173;
    goto LABEL_7;
  }
  uint64_t v87 = v36;
  uint64_t v88 = v11;
  uint64_t v89 = v34;
  JSONObject.subscript.getter();
  uint64_t v37 = v100;
  uint64_t v38 = v100 + 16;
  uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v100 + 16);
  uint64_t v40 = v102;
  v39(v10, v103, v102);
  sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
  uint64_t v41 = v101;
  uint64_t v85 = (void *)sub_100070E7C();
  uint64_t v101 = v41;
  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v10, v40);
    v89(v25, v88);
    swift_bridgeObjectRelease();
    return (id)swift_bridgeObjectRelease();
  }
  int64_t v84 = v39;
  (*(void (**)(char *, uint64_t))(v37 + 8))(v10, v40);
  id v49 = v25;
  uint64_t v50 = v88;
  uint64_t v51 = v89;
  v89(v49, v88);
  uint64_t v52 = v96;
  uint64_t v100 = v31;
  JSONObject.subscript.getter();
  uint64_t v53 = v97;
  JSONObject.dictionary.getter();
  v51(v52, v50);
  uint64_t v54 = type metadata accessor for JSONDictionary();
  uint64_t v55 = *(void *)(v54 - 8);
  uint64_t v56 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 48);
  int v57 = v56(v53, 1, v54);
  v83[1] = v38;
  if (v57 == 1)
  {
    sub_100034B8C(v53, &qword_1001A2568);
    uint64_t v58 = v94;
  }
  else
  {
    type metadata accessor for ASCOfferTitleVariant(0);
    sub_100072280((unint64_t *)&qword_1001A14D8, type metadata accessor for ASCOfferTitleVariant);
    uint64_t v59 = JSONDictionary.bridgedPrimitiveValues<A, B>()();
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v53, v54);
    uint64_t v58 = v94;
    if (v59)
    {
      uint64_t v60 = v55;
      unint64_t v97 = v59;
      goto LABEL_14;
    }
  }
  uint64_t v60 = v55;
  unint64_t v97 = sub_100063688((uint64_t)&_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
LABEL_14:
  JSONObject.subscript.getter();
  uint64_t v61 = v98;
  JSONObject.dictionary.getter();
  v89(v58, v50);
  uint64_t v62 = v50;
  if (v56(v61, 1, v54) == 1)
  {
    sub_100034B8C(v61, &qword_1001A2568);
    id v63 = v95;
  }
  else
  {
    type metadata accessor for ASCOfferTitleVariant(0);
    sub_100072280((unint64_t *)&qword_1001A14D8, type metadata accessor for ASCOfferTitleVariant);
    uint64_t v64 = JSONDictionary.bridgedPrimitiveValues<A, B>()();
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v61, v54);
    id v63 = v95;
    if (v64) {
      goto LABEL_18;
    }
  }
  uint64_t v64 = sub_100063688((uint64_t)&_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
LABEL_18:
  JSONObject.subscript.getter();
  uint64_t v65 = JSONObject.int.getter();
  if (v66)
  {
    uint64_t v79 = type metadata accessor for JSONError();
    sub_100072280((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
    swift_allocError();
    uint64_t v81 = v80;
    type metadata accessor for ASCOfferFlags(0);
    *uint64_t v81 = 0x65756C6156776172;
    v81[1] = 0xE800000000000000;
    v81[2] = v82;
    v81[3] = &_swiftEmptyArrayStorage;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v79 - 8) + 104))(v81, enum case for JSONError.malformedProperty(_:), v79);
    swift_willThrow();
    v89(v63, v62);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return (id)swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v100 = v65;
    uint64_t v98 = v64;
    uint64_t v67 = v62;
    uint64_t v68 = v89;
    v89(v63, v62);
    uint64_t v69 = v90;
    JSONObject.subscript.getter();
    uint64_t v96 = (char *)JSONObject.number.getter();
    v68(v69, v62);
    uint64_t v70 = (uint64_t)v93;
    JSONObject.subscript.getter();
    uint64_t v71 = v103;
    v84(v92, v103, v102);
    sub_10002EB60(&qword_1001A2570);
    sub_100072224();
    uint64_t v72 = Array<A>.init(tryDeserializing:using:)();
    uint64_t v73 = sub_1000713FC(v72);
    swift_bridgeObjectRelease();
    JSONObject.subscript.getter();
    uint64_t v74 = sub_10002DFC4(v70, v71);
    v68((char *)v70, v67);
    JSONObject.subscript.getter();
    uint64_t v75 = JSONObject.string.getter();
    uint64_t v77 = v76;
    v68((char *)v70, v67);
    id v78 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    return sub_100072034(v85, v97, v98, v100, v96, (uint64_t)v73, v91, v99, v86, v87, v74, v75, v77);
  }
}

id sub_10007201C(uint64_t a1, uint64_t a2)
{
  return sub_1000714AC(a1, a2);
}

id sub_100072034(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  type metadata accessor for ASCOfferTitleVariant(0);
  sub_100072280((unint64_t *)&qword_1001A14D8, type metadata accessor for ASCOfferTitleVariant);
  v13.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v14.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_10002EE34(0, (unint64_t *)&qword_1001A1D98);
  v15.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a13)
  {
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v18 = 0;
  }
  id v19 = [v21 initWithID:a1 titles:v13.super.isa subtitles:v14.super.isa flags:a4 ageRating:a5 metrics:v15.super.isa alertTitle:v16 alertMessage:v17 alertButtonOffer:a11 alertButtonTitle:v18];

  swift_unknownObjectRelease();
  return v19;
}

unint64_t sub_100072224()
{
  unint64_t result = qword_1001A2578;
  if (!qword_1001A2578)
  {
    sub_10002ED58(&qword_1001A2570);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A2578);
  }
  return result;
}

uint64_t sub_100072280(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_1000722C8(uint64_t a1, uint64_t a2)
{
  uint64_t v97 = a2;
  uint64_t v3 = sub_10002EB60(&qword_1001A2568);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v91 = (char *)v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  unint64_t v90 = (unint64_t)v77 - v6;
  uint64_t v96 = type metadata accessor for JSONContext();
  uint64_t v94 = *(void *)(v96 - 8);
  uint64_t v7 = __chkstk_darwin(v96);
  uint64_t v86 = (char *)v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v77 - v9;
  uint64_t v11 = type metadata accessor for JSONObject();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v85 = (char *)v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v83 = (char *)v77 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v87 = (char *)v77 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v89 = (char *)v77 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v88 = (char *)v77 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = (char *)v77 - v24;
  uint64_t v26 = __chkstk_darwin(v23);
  id v28 = (char *)v77 - v27;
  __chkstk_darwin(v26);
  uint64_t v30 = (char *)v77 - v29;
  uint64_t v31 = a1;
  JSONObject.subscript.getter();
  uint64_t v84 = JSONObject.string.getter();
  uint64_t v33 = v32;
  uint64_t v36 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v35 = v12 + 8;
  uint64_t v34 = v36;
  v36(v30, v11);
  if (!v33)
  {
    uint64_t v46 = type metadata accessor for JSONError();
    sub_100072FE0((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
    swift_allocError();
    uint64_t v48 = v47;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    strcpy((char *)v48, "appVersionId");
    *(unsigned char *)(v48 + 13) = 0;
    *(_WORD *)(v48 + 14) = -5120;
LABEL_7:
    *(void *)(v48 + 16) = MetatypeMetadata;
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v46 - 8) + 104))(v48, enum case for JSONError.missingProperty(_:), v46);
    return (id)swift_willThrow();
  }
  uint64_t v92 = v33;
  JSONObject.subscript.getter();
  uint64_t v79 = JSONObject.string.getter();
  uint64_t v38 = v37;
  uint64_t v93 = v35;
  v34(v28, v11);
  if (!v38)
  {
    swift_bridgeObjectRelease();
    uint64_t v46 = type metadata accessor for JSONError();
    sub_100072FE0((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
    swift_allocError();
    uint64_t v48 = v50;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    strcpy((char *)v48, "distributorId");
    *(_WORD *)(v48 + 14) = -4864;
    goto LABEL_7;
  }
  uint64_t v80 = v38;
  uint64_t v81 = v34;
  uint64_t v82 = v11;
  JSONObject.subscript.getter();
  uint64_t v39 = v94;
  uint64_t v40 = v94 + 16;
  uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t))(v94 + 16);
  uint64_t v42 = v96;
  v41(v10, v97, v96);
  sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
  uint64_t v43 = v95;
  uint64_t v44 = (void *)sub_100070E7C();
  uint64_t v95 = v43;
  if (v43)
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(v10, v42);
    v81(v25, v82);
    swift_bridgeObjectRelease();
    return (id)swift_bridgeObjectRelease();
  }
  v77[0] = v41;
  v77[1] = v40;
  id v78 = v44;
  (*(void (**)(char *, uint64_t))(v39 + 8))(v10, v42);
  uint64_t v51 = v25;
  uint64_t v53 = v81;
  uint64_t v52 = v82;
  v81(v51, v82);
  uint64_t v54 = v88;
  uint64_t v94 = v31;
  JSONObject.subscript.getter();
  uint64_t v55 = v90;
  JSONObject.dictionary.getter();
  v53(v54, v52);
  uint64_t v56 = type metadata accessor for JSONDictionary();
  uint64_t v57 = *(void *)(v56 - 8);
  uint64_t v58 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48);
  if (v58(v55, 1, v56) == 1)
  {
    sub_100072F80(v55);
    uint64_t v59 = v87;
  }
  else
  {
    type metadata accessor for ASCOfferTitleVariant(0);
    sub_100072FE0((unint64_t *)&qword_1001A14D8, type metadata accessor for ASCOfferTitleVariant);
    uint64_t v60 = JSONDictionary.bridgedPrimitiveValues<A, B>()();
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v55, v56);
    uint64_t v59 = v87;
    if (v60)
    {
      unint64_t v90 = v60;
      goto LABEL_14;
    }
  }
  unint64_t v90 = sub_100063688((uint64_t)&_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
LABEL_14:
  uint64_t v61 = v89;
  JSONObject.subscript.getter();
  uint64_t v62 = (uint64_t)v91;
  JSONObject.dictionary.getter();
  v81(v61, v82);
  if (v58(v62, 1, v56) == 1)
  {
    sub_100072F80(v62);
  }
  else
  {
    type metadata accessor for ASCOfferTitleVariant(0);
    sub_100072FE0((unint64_t *)&qword_1001A14D8, type metadata accessor for ASCOfferTitleVariant);
    uint64_t v63 = JSONDictionary.bridgedPrimitiveValues<A, B>()();
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v62, v56);
    if (v63) {
      goto LABEL_18;
    }
  }
  uint64_t v63 = sub_100063688((uint64_t)&_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
LABEL_18:
  JSONObject.subscript.getter();
  uint64_t v64 = JSONObject.int.getter();
  if (v65)
  {
    uint64_t v73 = type metadata accessor for JSONError();
    sub_100072FE0((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
    swift_allocError();
    uint64_t v75 = v74;
    type metadata accessor for ASCOfferFlags(0);
    void *v75 = 0x65756C6156776172;
    v75[1] = 0xE800000000000000;
    v75[2] = v76;
    v75[3] = &_swiftEmptyArrayStorage;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v73 - 8) + 104))(v75, enum case for JSONError.malformedProperty(_:), v73);
    swift_willThrow();
    v81(v59, v82);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return (id)swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v66 = v64;
    uint64_t v67 = v59;
    uint64_t v68 = v82;
    uint64_t v98 = v63;
    uint64_t v69 = v81;
    v81(v67, v82);
    uint64_t v70 = v83;
    JSONObject.subscript.getter();
    uint64_t v71 = (void *)JSONObject.number.getter();
    v69(v70, v68);
    JSONObject.subscript.getter();
    ((void (*)(char *, uint64_t, uint64_t))v77[0])(v86, v97, v96);
    sub_10002EB60(&qword_1001A2570);
    sub_100072224();
    uint64_t v72 = Array<A>.init(tryDeserializing:using:)();
    sub_1000713FC(v72);
    swift_bridgeObjectRelease();
    return sub_100072DAC(v78, v90, v98, v66, v71);
  }
}

id sub_100072DAC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v13 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  type metadata accessor for ASCOfferTitleVariant(0);
  sub_100072FE0((unint64_t *)&qword_1001A14D8, type metadata accessor for ASCOfferTitleVariant);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v7 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_10002EE34(0, (unint64_t *)&qword_1001A1D98);
  Class v8 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = [v13 initWithID:a1 titles:isa subtitles:v7 flags:a4 ageRating:a5 metrics:v8 appVersionId:v9 distributorId:v10];

  return v11;
}

id sub_100072F68(uint64_t a1, uint64_t a2)
{
  return sub_1000722C8(a1, a2);
}

uint64_t sub_100072F80(uint64_t a1)
{
  uint64_t v2 = sub_10002EB60(&qword_1001A2568);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100072FE0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

char *sub_100073028(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v3 = (unint64_t *)&_swiftEmptyArrayStorage;
    if (!v2) {
      return (char *)v3;
    }
    id v11 = (unint64_t *)&_swiftEmptyArrayStorage;
    uint64_t result = sub_1000C501C(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v5 = 0;
    uint64_t v3 = v11;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v6 = *(id *)(a1 + 8 * v5 + 32);
      }
      Class v7 = v6;
      sub_10007E9AC((unint64_t *)v10);

      id v11 = v3;
      unint64_t v9 = v3[2];
      unint64_t v8 = v3[3];
      if (v9 >= v8 >> 1)
      {
        sub_1000C501C((char *)(v8 > 1), v9 + 1, 1);
        uint64_t v3 = v11;
      }
      ++v5;
      v3[2] = v9 + 1;
      sub_100042EA8(v10, &v3[4 * v9 + 4]);
      if (v2 == v5) {
        return (char *)v3;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_100073184()
{
  id v1 = [v0 baseBuyParams];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v4 = v3;

  swift_bridgeObjectRelease();
  uint64_t v5 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    uint64_t v5 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    id v6 = [v0 baseBuyParams];
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;

    NSString v10 = sub_100076438(0, 1, 1, (char *)&_swiftEmptyArrayStorage);
    unint64_t v12 = *((void *)v10 + 2);
    unint64_t v11 = *((void *)v10 + 3);
    if (v12 >= v11 >> 1) {
      NSString v10 = sub_100076438((char *)(v11 > 1), v12 + 1, 1, v10);
    }
    *((void *)v10 + 2) = v12 + 1;
    id v13 = &v10[16 * v12];
    *((void *)v13 + 4) = v7;
    *((void *)v13 + 5) = v9;
  }
  else
  {
    NSString v10 = (char *)&_swiftEmptyArrayStorage;
  }
  id v14 = [v0 metricsBuyParams];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v17 = v16;

  swift_bridgeObjectRelease();
  uint64_t v18 = HIBYTE(v17) & 0xF;
  if ((v17 & 0x2000000000000000) == 0) {
    uint64_t v18 = v15 & 0xFFFFFFFFFFFFLL;
  }
  if (v18)
  {
    id v19 = [v0 metricsBuyParams];
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v22 = v21;

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      NSString v10 = sub_100076438(0, *((void *)v10 + 2) + 1, 1, v10);
    }
    unint64_t v24 = *((void *)v10 + 2);
    unint64_t v23 = *((void *)v10 + 3);
    if (v24 >= v23 >> 1) {
      NSString v10 = sub_100076438((char *)(v23 > 1), v24 + 1, 1, v10);
    }
    *((void *)v10 + 2) = v24 + 1;
    uint64_t v25 = &v10[16 * v24];
    *((void *)v25 + 4) = v20;
    *((void *)v25 + 5) = v22;
  }
  sub_10002EB60((uint64_t *)&unk_1001A45C0);
  sub_100061D9C((unint64_t *)&qword_1001A2580, (uint64_t *)&unk_1001A45C0);
  uint64_t v26 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v26;
}

BOOL sub_1000733D0()
{
  return ([v0 flags] & 4) == 0
      && (([v0 flags] & 2) == 0 || (objc_msgSend(v0, "flags") & 8) != 0)
      && ((unint64_t)[v0 flags] & 0x200) == 0;
}

id sub_10007343C(uint64_t a1, uint64_t a2)
{
  uint64_t v167 = a2;
  uint64_t v3 = sub_10002EB60(&qword_1001A25F0);
  __chkstk_darwin(v3 - 8);
  v156 = (char *)v134 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10002EB60(&qword_1001A44F0);
  __chkstk_darwin(v5 - 8);
  uint64_t v157 = (uint64_t)v134 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10002EB60(&qword_1001A2568);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v155 = (char *)v134 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v159 = (char *)v134 - v11;
  __chkstk_darwin(v10);
  uint64_t v162 = (uint64_t)v134 - v12;
  uint64_t v168 = type metadata accessor for JSONContext();
  uint64_t v165 = *(void *)(v168 - 8);
  uint64_t v13 = __chkstk_darwin(v168);
  uint64_t v151 = (char *)v134 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  long long v164 = (char *)v134 - v15;
  uint64_t v16 = type metadata accessor for JSONObject();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  v154 = (char *)v134 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  v152 = (char *)v134 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  v150 = (char *)v134 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v149 = (char *)v134 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v148 = (char *)v134 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v160 = (uint64_t)v134 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v158 = (char *)v134 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v161 = (char *)v134 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  v163 = (char *)v134 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v169 = (char *)v134 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v40 = (char *)v134 - v39;
  uint64_t v41 = __chkstk_darwin(v38);
  uint64_t v43 = (char *)v134 - v42;
  uint64_t v44 = __chkstk_darwin(v41);
  uint64_t v46 = (char *)v134 - v45;
  __chkstk_darwin(v44);
  uint64_t v48 = (char *)v134 - v47;
  uint64_t v49 = a1;
  JSONObject.subscript.getter();
  uint64_t v153 = JSONObject.string.getter();
  uint64_t v51 = v50;
  uint64_t v54 = *(void (**)(char *, uint64_t))(v17 + 8);
  uint64_t v53 = v17 + 8;
  uint64_t v52 = v54;
  v54(v48, v16);
  if (!v51)
  {
    uint64_t v77 = type metadata accessor for JSONError();
    sub_100076DC8((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
    swift_allocError();
    uint64_t v79 = v78;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    strcpy((char *)v79, "baseBuyParams");
    *(_WORD *)(v79 + 14) = -4864;
LABEL_14:
    *(void *)(v79 + 16) = MetatypeMetadata;
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v77 - 8) + 104))(v79, enum case for JSONError.missingProperty(_:), v77);
    return (id)swift_willThrow();
  }
  uint64_t v170 = v51;
  JSONObject.subscript.getter();
  uint64_t v146 = JSONObject.string.getter();
  uint64_t v56 = v55;
  v52(v46, v16);
  if (!v56)
  {
    swift_bridgeObjectRelease();
    uint64_t v81 = type metadata accessor for JSONError();
    sub_100076DC8((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
    swift_allocError();
    uint64_t v83 = v82;
    uint64_t v84 = swift_getMetatypeMetadata();
    *uint64_t v83 = 0xD000000000000010;
    v83[1] = 0x800000010015BD10;
    void v83[2] = v84;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v81 - 8) + 104))(v83, enum case for JSONError.missingProperty(_:), v81);
    return (id)swift_willThrow();
  }
  uint64_t v147 = v56;
  uint64_t v57 = v52;
  JSONObject.subscript.getter();
  uint64_t v145 = JSONObject.string.getter();
  uint64_t v59 = v58;
  v57(v43, v16);
  if (!v59)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v77 = type metadata accessor for JSONError();
    sub_100076DC8((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
    swift_allocError();
    uint64_t v79 = v85;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    *(void *)uint64_t v79 = 0x4449656C646E7562;
    *(void *)(v79 + 8) = 0xE800000000000000;
    goto LABEL_14;
  }
  uint64_t v60 = v49;
  unint64_t v61 = 0xE800000000000000;
  JSONObject.subscript.getter();
  uint64_t v141 = JSONObject.string.getter();
  uint64_t v63 = v62;
  v57(v40, v16);
  if (!v63)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v77 = type metadata accessor for JSONError();
    sub_100076DC8((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
    swift_allocError();
    uint64_t v79 = v86;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    *(void *)uint64_t v79 = 0x656D614E6D657469;
LABEL_13:
    *(void *)(v79 + 8) = v61;
    goto LABEL_14;
  }
  uint64_t v144 = v63;
  unint64_t v61 = 0xEA0000000000656DLL;
  uint64_t v64 = v169;
  JSONObject.subscript.getter();
  uint64_t v139 = JSONObject.string.getter();
  uint64_t v66 = v65;
  v57(v64, v16);
  if (!v66)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v77 = type metadata accessor for JSONError();
    sub_100076DC8((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
    swift_allocError();
    uint64_t v79 = v87;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    *(void *)uint64_t v79 = 0x614E726F646E6576;
    goto LABEL_13;
  }
  uint64_t v169 = (char *)v16;
  uint64_t v143 = v53;
  uint64_t v140 = v66;
  v142 = (void (*)(char *, char *))v57;
  uint64_t v67 = v163;
  JSONObject.subscript.getter();
  uint64_t v138 = v60;
  uint64_t v69 = v164;
  uint64_t v68 = v165;
  uint64_t v70 = v165 + 16;
  uint64_t v71 = *(void (**)(char *, uint64_t, uint64_t))(v165 + 16);
  uint64_t v73 = v167;
  uint64_t v72 = v168;
  v71(v164, v167, v168);
  sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
  uint64_t v74 = v166;
  uint64_t v75 = (void *)sub_100070E7C();
  uint64_t v166 = v74;
  if (v74)
  {
    (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v72);
    v142(v67, v169);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (id)swift_bridgeObjectRelease();
  }
  v134[1] = v70;
  Swift::String v135 = v71;
  Swift::String v136 = v75;
  uint64_t v137 = v59;
  (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v72);
  uint64_t v88 = v67;
  uint64_t v89 = v169;
  unint64_t v90 = v142;
  v142(v88, v169);
  uint64_t v91 = v161;
  JSONObject.subscript.getter();
  uint64_t v92 = v162;
  JSONObject.dictionary.getter();
  v90(v91, v89);
  uint64_t v93 = type metadata accessor for JSONDictionary();
  uint64_t v94 = *(char **)(v93 - 8);
  uint64_t v95 = v94 + 48;
  long long v164 = (char *)*((void *)v94 + 6);
  int v96 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v164)(v92, 1, v93);
  uint64_t v165 = v93;
  v163 = v94;
  if (v96 == 1)
  {
    sub_100034B8C(v92, &qword_1001A2568);
  }
  else
  {
    type metadata accessor for ASCOfferTitleVariant(0);
    sub_100076DC8((unint64_t *)&qword_1001A14D8, type metadata accessor for ASCOfferTitleVariant);
    uint64_t v97 = JSONDictionary.bridgedPrimitiveValues<A, B>()();
    (*((void (**)(uint64_t, uint64_t))v94 + 1))(v92, v93);
    if (v97) {
      goto LABEL_21;
    }
  }
  uint64_t v97 = sub_100063688((uint64_t)&_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
LABEL_21:
  uint64_t v99 = v159;
  uint64_t v98 = v160;
  uint64_t v100 = v158;
  JSONObject.subscript.getter();
  JSONObject.dictionary.getter();
  v142(v100, v169);
  uint64_t v101 = v165;
  if (((unsigned int (*)(void *, uint64_t, uint64_t))v164)(v99, 1, v165) == 1)
  {
    sub_100034B8C((uint64_t)v99, &qword_1001A2568);
  }
  else
  {
    type metadata accessor for ASCOfferTitleVariant(0);
    sub_100076DC8((unint64_t *)&qword_1001A14D8, type metadata accessor for ASCOfferTitleVariant);
    uint64_t v102 = JSONDictionary.bridgedPrimitiveValues<A, B>()();
    uint64_t v103 = v101;
    unint64_t v104 = v102;
    (*((void (**)(void *, uint64_t))v163 + 1))(v99, v103);
    if (v104) {
      goto LABEL_25;
    }
  }
  unint64_t v104 = sub_100063688((uint64_t)&_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
LABEL_25:
  JSONObject.subscript.getter();
  uint64_t v105 = JSONObject.int.getter();
  if (v106)
  {
    uint64_t v117 = type metadata accessor for JSONError();
    sub_100076DC8((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
    swift_allocError();
    uint64_t v119 = v118;
    type metadata accessor for ASCOfferFlags(0);
    void *v119 = 0x65756C6156776172;
    v119[1] = 0xE800000000000000;
    v119[2] = v120;
    v119[3] = &_swiftEmptyArrayStorage;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v117 - 8) + 104))(v119, enum case for JSONError.malformedProperty(_:), v117);
    swift_willThrow();
    v142((char *)v98, v169);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return (id)swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v160 = v105;
    uint64_t v161 = (char *)v104;
    uint64_t v162 = v97;
    uint64_t v107 = v98;
    uint64_t v108 = v169;
    uint64_t v158 = v95;
    uint64_t v109 = v73;
    uint64_t v110 = v142;
    v142((char *)v107, v169);
    uint64_t v111 = v148;
    JSONObject.subscript.getter();
    uint64_t v159 = (char *)JSONObject.number.getter();
    v110(v111, v108);
    JSONObject.subscript.getter();
    v135(v151, v109, v168);
    sub_10002EB60(&qword_1001A2570);
    sub_100061D9C((unint64_t *)&qword_1001A2578, &qword_1001A2570);
    uint64_t v112 = Array<A>.init(tryDeserializing:using:)();
    uint64_t v168 = (uint64_t)sub_1000713FC(v112);
    swift_bridgeObjectRelease();
    uint64_t v113 = v150;
    JSONObject.subscript.getter();
    uint64_t v114 = (uint64_t)v155;
    JSONObject.dictionary.getter();
    v110(v113, v108);
    uint64_t v115 = v165;
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v164)(v114, 1, v165) == 1)
    {
      sub_100034B8C(v114, &qword_1001A2568);
      uint64_t v116 = 0;
    }
    else
    {
      uint64_t v116 = JSONDictionary.bridgedPrimitiveValues<A, B>()();
      (*((void (**)(uint64_t, uint64_t))v163 + 1))(v114, v115);
    }
    uint64_t v121 = v152;
    JSONObject.subscript.getter();
    JSONObject.url.getter();
    uint64_t v122 = v121;
    uint64_t v123 = v169;
    uint64_t v124 = v142;
    v142(v122, v169);
    uint64_t v125 = v154;
    JSONObject.subscript.getter();
    uint64_t v126 = v156;
    JSONObject.array.getter();
    v124(v125, v123);
    uint64_t v127 = (uint64_t)v126;
    uint64_t v128 = type metadata accessor for JSONArray();
    uint64_t v129 = *(void *)(v128 - 8);
    int v130 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v129 + 48))(v126, 1, v128);
    uint64_t v131 = (uint64_t)v161;
    if (v130 == 1)
    {
      sub_100034B8C(v127, &qword_1001A25F0);
      uint64_t v132 = 0;
    }
    else
    {
      uint64_t v132 = JSONArray.compactMap<A>(_:)();
      (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v127, v128);
    }
    id v133 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    return sub_100065E5C(v136, v162, v131, v160, v159, v168, v153, v170, v146, v147, v116, v157, v145, v137, v141, v144, v139, v140, v132);
  }
}

uint64_t sub_100074788@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = JSONObject.string.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

id sub_1000747C4(uint64_t a1, uint64_t a2)
{
  return sub_10007343C(a1, a2);
}

uint64_t sub_1000747DC()
{
  uint64_t v1 = type metadata accessor for URLQueryItem();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10002EB60((uint64_t *)&unk_1001A5F30);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10002EB60(&qword_1001A2588);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = 0x2F2F3A7370747468;
  uint64_t v55 = 0xE90000000000003FLL;
  id v11 = [v0 baseBuyParams];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  v15._uint64_t countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  URLComponents.init(string:)();
  swift_bridgeObjectRelease();
  uint64_t v16 = type metadata accessor for URLComponents();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v7, 1, v16) == 1)
  {
    sub_100034B8C((uint64_t)v7, (uint64_t *)&unk_1001A5F30);
    return 0;
  }
  uint64_t v18 = URLComponents.queryItems.getter();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v16);
  if (!v18) {
    return 0;
  }
  uint64_t v19 = *(void *)(v18 + 16);
  if (v19)
  {
    uint64_t v52 = v10;
    uint64_t v53 = v2;
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v2 + 16);
    unint64_t v21 = v18 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    uint64_t v22 = (void (**)(char *, uint64_t))(v2 + 8);
    uint64_t v23 = *(void *)(v2 + 72);
    v51[1] = v18;
    swift_bridgeObjectRetain();
    while (1)
    {
      v20(v4, v21, v1);
      if (URLQueryItem.name.getter() == 0x7256747845707061 && v24 == 0xEB00000000644973) {
        break;
      }
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v25) {
        goto LABEL_13;
      }
      (*v22)(v4, v1);
      v21 += v23;
      if (!--v19)
      {
        swift_bridgeObjectRelease();
        uint64_t v26 = 1;
        uint64_t v10 = v52;
        uint64_t v2 = v53;
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease();
LABEL_13:
    swift_bridgeObjectRelease();
    uint64_t v10 = v52;
    uint64_t v2 = v53;
    (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v52, v4, v1);
    uint64_t v26 = 0;
  }
  else
  {
    uint64_t v26 = 1;
  }
LABEL_14:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v10, v26, 1, v1);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v10, 1, v1) == 1)
  {
    sub_100034B8C((uint64_t)v10, &qword_1001A2588);
    return 0;
  }
  uint64_t v27 = URLQueryItem.value.getter();
  unint64_t v29 = v28;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v10, v1);
  if (!v29) {
    return 0;
  }
  uint64_t v31 = HIBYTE(v29) & 0xF;
  uint64_t v32 = v27 & 0xFFFFFFFFFFFFLL;
  if ((v29 & 0x2000000000000000) != 0) {
    uint64_t v33 = HIBYTE(v29) & 0xF;
  }
  else {
    uint64_t v33 = v27 & 0xFFFFFFFFFFFFLL;
  }
  if (!v33)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((v29 & 0x1000000000000000) == 0)
  {
    if ((v29 & 0x2000000000000000) == 0)
    {
      if ((v27 & 0x1000000000000000) != 0) {
        uint64_t v34 = (unsigned __int8 *)((v29 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v34 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v35 = (uint64_t)sub_100075AAC(v34, v32, 10);
      char v37 = v36 & 1;
      goto LABEL_60;
    }
    uint64_t v54 = v27;
    uint64_t v55 = v29 & 0xFFFFFFFFFFFFFFLL;
    if (v27 == 43)
    {
      if (!v31) {
        goto LABEL_74;
      }
      if (v31 == 1 || (BYTE1(v27) - 48) > 9u) {
        goto LABEL_47;
      }
      uint64_t v35 = (BYTE1(v27) - 48);
      if (v31 != 2)
      {
        if ((BYTE2(v27) - 48) > 9u) {
          goto LABEL_47;
        }
        uint64_t v35 = 10 * (BYTE1(v27) - 48) + (BYTE2(v27) - 48);
        uint64_t v38 = v31 - 3;
        if (v38)
        {
          uint64_t v39 = (unsigned __int8 *)&v54 + 3;
          while (1)
          {
            unsigned int v40 = *v39 - 48;
            if (v40 > 9) {
              goto LABEL_47;
            }
            uint64_t v41 = 10 * v35;
            if ((unsigned __int128)(v35 * (__int128)10) >> 64 != (10 * v35) >> 63) {
              goto LABEL_47;
            }
            uint64_t v35 = v41 + v40;
            if (__OFADD__(v41, v40)) {
              goto LABEL_47;
            }
            char v37 = 0;
            ++v39;
            if (!--v38) {
              goto LABEL_60;
            }
          }
        }
      }
    }
    else
    {
      if (v27 == 45)
      {
        if (v31)
        {
          if (v31 != 1 && (BYTE1(v27) - 48) <= 9u)
          {
            if (v31 == 2)
            {
              char v37 = 0;
              uint64_t v35 = -(uint64_t)(BYTE1(v27) - 48);
              goto LABEL_60;
            }
            if ((BYTE2(v27) - 48) <= 9u)
            {
              uint64_t v35 = -10 * (BYTE1(v27) - 48) - (BYTE2(v27) - 48);
              uint64_t v46 = v31 - 3;
              if (!v46) {
                goto LABEL_59;
              }
              uint64_t v47 = (unsigned __int8 *)&v54 + 3;
              while (1)
              {
                unsigned int v48 = *v47 - 48;
                if (v48 > 9) {
                  break;
                }
                uint64_t v49 = 10 * v35;
                if ((unsigned __int128)(v35 * (__int128)10) >> 64 != (10 * v35) >> 63) {
                  break;
                }
                uint64_t v35 = v49 - v48;
                if (__OFSUB__(v49, v48)) {
                  break;
                }
                char v37 = 0;
                ++v47;
                if (!--v46) {
                  goto LABEL_60;
                }
              }
            }
          }
LABEL_47:
          uint64_t v35 = 0;
          char v37 = 1;
          goto LABEL_60;
        }
        __break(1u);
LABEL_74:
        __break(1u);
        return result;
      }
      if (!v31 || (v27 - 48) > 9u) {
        goto LABEL_47;
      }
      uint64_t v35 = (v27 - 48);
      if (v31 != 1)
      {
        if ((BYTE1(v27) - 48) > 9u) {
          goto LABEL_47;
        }
        uint64_t v35 = 10 * (v27 - 48) + (BYTE1(v27) - 48);
        uint64_t v42 = v31 - 2;
        if (v42)
        {
          uint64_t v43 = (unsigned __int8 *)&v54 + 2;
          while (1)
          {
            unsigned int v44 = *v43 - 48;
            if (v44 > 9) {
              goto LABEL_47;
            }
            uint64_t v45 = 10 * v35;
            if ((unsigned __int128)(v35 * (__int128)10) >> 64 != (10 * v35) >> 63) {
              goto LABEL_47;
            }
            uint64_t v35 = v45 + v44;
            if (__OFADD__(v45, v44)) {
              goto LABEL_47;
            }
            char v37 = 0;
            ++v43;
            if (!--v42) {
              goto LABEL_60;
            }
          }
        }
      }
    }
LABEL_59:
    char v37 = 0;
    goto LABEL_60;
  }
  uint64_t v35 = sub_100075738(v27, v29, 10, (uint64_t (*)(void *, uint64_t, uint64_t))sub_100075AAC);
  char v37 = v50;
LABEL_60:
  swift_bridgeObjectRelease();
  if (v37) {
    return 0;
  }
  else {
    return v35;
  }
}

unint64_t sub_100074EDC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10002EB60(&qword_1001A44F0);
  __chkstk_darwin(v2 - 8);
  uint64_t v69 = (char *)&v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v71 - 8);
  uint64_t v5 = __chkstk_darwin(v71);
  uint64_t v68 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v67 = (char *)&v66 - v7;
  uint64_t v8 = State.overrideBuyParams.getter();
  uint64_t v70 = v4;
  if (v9)
  {
    uint64_t v10 = v8;
    uint64_t v11 = v9;
    if (([v0 flags] & 0x800) == 0) {
      goto LABEL_5;
    }
    swift_bridgeObjectRelease();
  }
  id v12 = [v0 baseBuyParams];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v13;

LABEL_5:
  sub_10002EB60(&qword_1001A4CE0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10014DA40;
  *(void *)(inited + 32) = 25705;
  *(void *)(inited + 40) = 0xE200000000000000;
  id v15 = [v1 id];
  id v16 = [v15 stringValue];

  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  *(void *)(inited + 48) = v17;
  *(void *)(inited + 56) = v19;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = 0x73656C746974;
  *(void *)(inited + 88) = 0xE600000000000000;
  id v20 = [v1 titles];
  type metadata accessor for ASCOfferTitleVariant(0);
  sub_100076DC8((unint64_t *)&qword_1001A14D8, type metadata accessor for ASCOfferTitleVariant);
  uint64_t v21 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v22 = sub_10002EB60(&qword_1001A25B0);
  *(void *)(inited + 96) = v21;
  *(void *)(inited + 120) = v22;
  *(void *)(inited + 128) = 0x656C746974627573;
  *(void *)(inited + 136) = 0xE900000000000073;
  id v23 = [v1 subtitles];
  uint64_t v24 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  *(void *)(inited + 144) = v24;
  *(void *)(inited + 168) = v22;
  *(void *)(inited + 176) = 0x7367616C66;
  *(void *)(inited + 184) = 0xE500000000000000;
  *(void *)(inited + 192) = [v1 flags];
  *(void *)(inited + 216) = &type metadata for Int;
  *(void *)(inited + 224) = 0x7363697274656DLL;
  *(void *)(inited + 232) = 0xE700000000000000;
  id v25 = [v1 metrics];
  sub_10002EE34(0, (unint64_t *)&qword_1001A1D98);
  unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v27 = sub_100073028(v26);
  swift_bridgeObjectRelease();
  uint64_t v28 = sub_10002EB60((uint64_t *)&unk_1001A5020);
  *(void *)(inited + 240) = v27;
  *(void *)(inited + 264) = v28;
  strcpy((char *)(inited + 272), "baseBuyParams");
  *(_WORD *)(inited + 286) = -4864;
  *(void *)(inited + 288) = v10;
  *(void *)(inited + 296) = v11;
  *(void *)(inited + 312) = &type metadata for String;
  *(void *)(inited + 320) = 0xD000000000000010;
  *(void *)(inited + 328) = 0x800000010015BD10;
  id v29 = [v1 metricsBuyParams];
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v32 = v31;

  *(void *)(inited + 336) = v30;
  *(void *)(inited + 344) = v32;
  *(void *)(inited + 360) = &type metadata for String;
  *(void *)(inited + 368) = 0x4449656C646E7562;
  *(void *)(inited + 376) = 0xE800000000000000;
  id v33 = [v1 bundleID];
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v36 = v35;

  *(void *)(inited + 384) = v34;
  *(void *)(inited + 392) = v36;
  *(void *)(inited + 408) = &type metadata for String;
  *(void *)(inited + 416) = 0x656D614E6D657469;
  *(void *)(inited + 424) = 0xE800000000000000;
  id v37 = [v1 itemName];
  uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v40 = v39;

  *(void *)(inited + 432) = v38;
  *(void *)(inited + 440) = v40;
  *(void *)(inited + 456) = &type metadata for String;
  *(void *)(inited + 464) = 0x614E726F646E6576;
  *(void *)(inited + 472) = 0xEA0000000000656DLL;
  id v41 = [v1 vendorName];
  uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v44 = v43;

  *(void *)(inited + 504) = &type metadata for String;
  *(void *)(inited + 480) = v42;
  *(void *)(inited + 488) = v44;
  unint64_t v45 = sub_100062F68(inited);
  id v46 = [v1 additionalHeaders];
  if (v46)
  {
    uint64_t v47 = v46;
    uint64_t v48 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v75 = (void *)sub_10002EB60(&qword_1001A1A10);
    *(void *)&long long v74 = v48;
    sub_100042EA8(&v74, v73);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v72 = v45;
    sub_10003EBAC(v73, 0xD000000000000011, 0x800000010015BD50, isUniquelyReferenced_nonNull_native);
    unint64_t v45 = v72;
    swift_bridgeObjectRelease();
  }
  uint64_t v51 = v70;
  uint64_t v50 = v71;
  uint64_t v52 = (uint64_t)v69;
  id v53 = [v1 preflightPackageURL];
  if (v53)
  {
    uint64_t v54 = v53;
    uint64_t v55 = v68;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v56 = *(void (**)(uint64_t, char *, uint64_t))(v51 + 32);
    v56(v52, v55, v50);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v51 + 56))(v52, 0, 1, v50);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v52, 1, v50) != 1)
    {
      uint64_t v57 = v67;
      v56((uint64_t)v67, (char *)v52, v50);
      uint64_t v58 = URL.absoluteString.getter();
      uint64_t v75 = &type metadata for String;
      *(void *)&long long v74 = v58;
      *((void *)&v74 + 1) = v59;
      sub_100042EA8(&v74, v73);
      char v60 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v72 = v45;
      sub_10003EBAC(v73, 0xD000000000000013, 0x800000010015BD30, v60);
      unint64_t v45 = v72;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v57, v50);
      goto LABEL_12;
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 56))(v52, 1, 1, v50);
  }
  sub_100034B8C(v52, &qword_1001A44F0);
LABEL_12:
  id v61 = [v1 ageRating];
  if (v61)
  {
    uint64_t v62 = v61;
    uint64_t v75 = (void *)sub_10002EE34(0, (unint64_t *)&qword_1001A1CF0);
    *(void *)&long long v74 = v62;
    sub_100042EA8(&v74, v73);
    id v63 = v62;
    char v64 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v72 = v45;
    sub_10003EBAC(v73, 0x6E69746152656761, 0xE900000000000067, v64);
    unint64_t v45 = v72;

    swift_bridgeObjectRelease();
  }
  return v45;
}

unsigned __int8 *sub_1000756D8(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_100075AAC(a1, a2, a3);
}

unsigned __int8 *sub_1000756F0(unsigned __int8 *a1, uint64_t a2, int64_t a3)
{
  return sub_100075830(a1, a2, a3);
}

uint64_t sub_100075708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100075738(a1, a2, a3, (uint64_t (*)(void *, uint64_t, uint64_t))sub_100075AAC);
}

uint64_t sub_100075720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100075738(a1, a2, a3, (uint64_t (*)(void *, uint64_t, uint64_t))sub_100075830);
}

uint64_t sub_100075738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t))
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  swift_bridgeObjectRetain();
  uint64_t v7 = String.init<A>(_:)();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = &v15;
    goto LABEL_7;
  }
  uint64_t v7 = sub_100075D28();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = (void *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v9 = (void *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v13 = a4(v9, v10, a3);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *sub_100075830(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            unint64_t v9 = 0;
            for (unint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              if (!is_mul_ok(v9, a3)) {
                return 0;
              }
              unint64_t v13 = v9 * a3;
              unsigned __int8 v14 = v11 + v12;
              BOOL v15 = v13 >= v14;
              unint64_t v9 = v13 - v14;
              if (!v15) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      unsigned __int8 v25 = a3 + 48;
      unsigned __int8 v26 = a3 + 55;
      unsigned __int8 v27 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v25 = 58;
      }
      else
      {
        unsigned __int8 v27 = 97;
        unsigned __int8 v26 = 65;
      }
      if (result)
      {
        unint64_t v28 = 0;
        do
        {
          unsigned int v29 = *result;
          if (v29 < 0x30 || v29 >= v25)
          {
            if (v29 < 0x41 || v29 >= v26)
            {
              if (v29 < 0x61 || v29 >= v27) {
                return 0;
              }
              char v30 = -87;
            }
            else
            {
              char v30 = -55;
            }
          }
          else
          {
            char v30 = -48;
          }
          if (!is_mul_ok(v28, a3)) {
            return 0;
          }
          unint64_t v31 = v28 * a3;
          unsigned __int8 v32 = v29 + v30;
          BOOL v15 = __CFADD__(v31, v32);
          unint64_t v28 = v31 + v32;
          if (v15) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v28;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  uint64_t v16 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v17 = a3 + 48;
  unsigned __int8 v18 = a3 + 55;
  unsigned __int8 v19 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v17 = 58;
  }
  else
  {
    unsigned __int8 v19 = 97;
    unsigned __int8 v18 = 65;
  }
  if (!result) {
    return 0;
  }
  unint64_t v9 = 0;
  id v20 = result + 1;
  do
  {
    unsigned int v21 = *v20;
    if (v21 < 0x30 || v21 >= v17)
    {
      if (v21 < 0x41 || v21 >= v18)
      {
        if (v21 < 0x61 || v21 >= v19) {
          return 0;
        }
        char v22 = -87;
      }
      else
      {
        char v22 = -55;
      }
    }
    else
    {
      char v22 = -48;
    }
    if (!is_mul_ok(v9, a3)) {
      return 0;
    }
    unint64_t v23 = v9 * a3;
    unsigned __int8 v24 = v21 + v22;
    BOOL v15 = __CFADD__(v23, v24);
    unint64_t v9 = v23 + v24;
    if (v15) {
      return 0;
    }
    ++v20;
    --v16;
  }
  while (v16);
  return (unsigned __int8 *)v9;
}

unsigned __int8 *sub_100075AAC(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (unint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      unsigned __int8 v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v22 = 58;
      }
      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }
      if (result)
      {
        uint64_t v25 = 0;
        do
        {
          unsigned int v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0;
              }
              char v27 = -87;
            }
            else
            {
              char v27 = -55;
            }
          }
          else
          {
            char v27 = -48;
          }
          uint64_t v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63) {
            return 0;
          }
          uint64_t v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v15 = 58;
  }
  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  unsigned __int8 v18 = result + 1;
  do
  {
    unsigned int v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0;
        }
        char v20 = -87;
      }
      else
      {
        char v20 = -55;
      }
    }
    else
    {
      char v20 = -48;
    }
    uint64_t v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20))) {
      return 0;
    }
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_100075D28()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = sub_100075DA8(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_100075DA8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_100075F00(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          unsigned int v11 = sub_100076000(v9, 0),
          unint64_t v12 = sub_100076068((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          v12 == v10))
    {
      uint64_t v13 = static String._uncheckedFromUTF8(_:)();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return static String._uncheckedFromUTF8(_:)();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  _StringObject.sharedUTF8.getter();
LABEL_4:

  return static String._uncheckedFromUTF8(_:)();
}

uint64_t sub_100075F00(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    uint64_t result = sub_10007627C(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_10007627C(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  return String.UTF8View._foreignDistance(from:to:)();
}

void *sub_100076000(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_10002EB60(&qword_1001A2590);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

unint64_t sub_100076068(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    void *v9 = a4;
    v9[1] = a5;
    void v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_10007627C(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t result = sub_10007627C(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_10007627C(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = String.UTF8View._foreignIndex(_:offsetBy:)();
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

size_t sub_1000762F8(size_t a1, int64_t a2, char a3, void *a4)
{
  return sub_10007655C(a1, a2, a3, a4, (uint64_t *)&unk_1001A19E0, (uint64_t (*)(void))&type metadata accessor for LogMessage);
}

void *sub_100076318(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10002EB60(&qword_1001A19F0);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    _OWORD v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for AMSMediaTaskPlatform(0);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_100076438(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10002EB60(&qword_1001A4DA0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

size_t sub_10007653C(size_t a1, int64_t a2, char a3, void *a4)
{
  return sub_10007655C(a1, a2, a3, a4, (uint64_t *)&unk_1001A25E0, (uint64_t (*)(void))&type metadata accessor for AdamID);
}

size_t sub_10007655C(size_t result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  char v8 = result;
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10002EB60(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  uint64_t result = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_29;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(result - v15) / v14);
LABEL_19:
  uint64_t v18 = *(void *)(a6(0) - 8);
  if (v8)
  {
    if (v16 < a4
      || (unint64_t v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80),
          (char *)v16 + v19 >= (char *)a4 + v19 + *(void *)(v18 + 72) * v11))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v16;
}

char *sub_100076738(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10002EB60(&qword_1001A2598);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    int64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_100076850(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10002EB60(&qword_1001A25A0);
    int64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    _OWORD v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    int64_t v10 = &_swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_10002EB60(&qword_1001A25A8);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_100076988(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10002EB60(&qword_1001A25D8);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_100076A8C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10002EB60(&qword_1001A25C8);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    _OWORD v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[4 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_10002EB60(&qword_1001A25D0);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_100076BB0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10002EB60(&qword_1001A25C0);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_100076CAC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10002EB60(&qword_1001A25B8);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8]) {
      memmove(v12, v13, 48 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100076DC8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_100076E10()
{
  id v1 = v0;
  return v0;
}

uint64_t sub_100076E2C(uint64_t a1, uint64_t a2)
{
  return sub_100076E5C(a1, a2, (SEL *)&selRef_subscribedOffer);
}

uint64_t sub_100076E38(uint64_t a1, uint64_t a2)
{
  return sub_100076E5C(a1, a2, (SEL *)&selRef_buyOffer);
}

uint64_t sub_100076E44(uint64_t a1, uint64_t a2)
{
  return sub_100076E5C(a1, a2, (SEL *)&selRef_alertButtonOffer);
}

uint64_t sub_100076E50(uint64_t a1, uint64_t a2)
{
  return sub_100076E5C(a1, a2, (SEL *)&selRef_completionOffer);
}

uint64_t sub_100076E5C(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v4 = [v3 *a3];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = (uint64_t)v4;
  swift_getObjectType();
  uint64_t v6 = swift_conformsToProtocol2();
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v6) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8)
  {
    uint64_t ObjectType = swift_getObjectType();
    int64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
    swift_unknownObjectRetain();
    uint64_t v8 = v10(ObjectType, v7);
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRelease();
  return v8;
}

char *sub_100076F20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A2568);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  unint64_t v90 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v89 = (char *)&v78 - v7;
  uint64_t v97 = type metadata accessor for JSONContext();
  unint64_t v95 = *(void *)(v97 - 8);
  uint64_t v8 = __chkstk_darwin(v97);
  uint64_t v85 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v94 = (char *)&v78 - v10;
  uint64_t v11 = type metadata accessor for JSONObject();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v84 = (char *)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v86 = (char *)&v78 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v88 = (char *)&v78 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v87 = (char *)&v78 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  unint64_t v23 = (char *)&v78 - v22;
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v78 - v24;
  uint64_t v26 = a1;
  JSONObject.subscript.getter();
  uint64_t v27 = sub_10002DFC4((uint64_t)v25, a2);
  char v30 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v28 = v12 + 8;
  unsigned int v29 = v30;
  v30(v25, v11);
  if (!v27)
  {
    uint64_t v25 = (char *)type metadata accessor for JSONError();
    sub_100072FE0((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
    swift_allocError();
    uint64_t v39 = v38;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    *uint64_t v39 = 0xD000000000000012;
    v39[1] = 0x800000010015BD70;
    void v39[2] = MetatypeMetadata;
    (*(void (**)(void *, void, char *))(*((void *)v25 - 1) + 104))(v39, enum case for JSONError.missingProperty(_:), v25);
    swift_willThrow();
    return v25;
  }
  uint64_t v91 = v27;
  JSONObject.subscript.getter();
  uint64_t v31 = sub_10002DFC4((uint64_t)v25, a2);
  uint64_t v93 = v11;
  v29(v25, v11);
  uint64_t v92 = v28;
  if (!v31)
  {
    uint64_t v25 = (char *)type metadata accessor for JSONError();
    sub_100072FE0((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
    swift_allocError();
    uint64_t v42 = v41;
    uint64_t v43 = swift_getMetatypeMetadata();
    void *v42 = 0x6269726373627573;
    v42[1] = 0xEF726566664F6465;
    v42[2] = v43;
    (*(void (**)(void *, void, char *))(*((void *)v25 - 1) + 104))(v42, enum case for JSONError.missingProperty(_:), v25);
    swift_willThrow();
LABEL_20:
    swift_unknownObjectRelease();
    return v25;
  }
  uint64_t v82 = v31;
  uint64_t v83 = v29;
  JSONObject.subscript.getter();
  unsigned __int8 v32 = v94;
  unint64_t v33 = v95;
  unint64_t v34 = v95 + 16;
  uint64_t v35 = v97;
  uint64_t v81 = *(void (**)(char *, uint64_t, uint64_t))(v95 + 16);
  v81(v94, a2, v97);
  sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
  uint64_t v36 = v96;
  id v37 = (void *)sub_100070E7C();
  if (v36)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v32, v35);
    v83(v23, v93);
LABEL_19:
    swift_unknownObjectRelease();
    goto LABEL_20;
  }
  uint64_t v79 = a2;
  id v80 = v37;
  (*(void (**)(char *, uint64_t))(v33 + 8))(v32, v35);
  uint64_t v44 = v23;
  uint64_t v45 = v93;
  id v46 = v83;
  v83(v44, v93);
  uint64_t v47 = v87;
  uint64_t v96 = v26;
  JSONObject.subscript.getter();
  uint64_t v48 = v89;
  JSONObject.dictionary.getter();
  uint64_t v49 = v45;
  uint64_t v50 = (uint64_t)v48;
  v46(v47, v49);
  uint64_t v51 = type metadata accessor for JSONDictionary();
  uint64_t v52 = *(void *)(v51 - 8);
  id v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 48);
  int v54 = v53(v50, 1, v51);
  unint64_t v78 = v34;
  if (v54 == 1)
  {
    sub_100072F80(v50);
  }
  else
  {
    type metadata accessor for ASCOfferTitleVariant(0);
    sub_100072FE0((unint64_t *)&qword_1001A14D8, type metadata accessor for ASCOfferTitleVariant);
    uint64_t v55 = JSONDictionary.bridgedPrimitiveValues<A, B>()();
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v50, v51);
    if (v55)
    {
      uint64_t v56 = v52;
      unint64_t v95 = v55;
      goto LABEL_12;
    }
  }
  uint64_t v56 = v52;
  unint64_t v95 = sub_100063688((uint64_t)&_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
LABEL_12:
  uint64_t v57 = v88;
  JSONObject.subscript.getter();
  uint64_t v58 = (uint64_t)v90;
  JSONObject.dictionary.getter();
  v83(v57, v93);
  if (v53(v58, 1, v51) == 1)
  {
    sub_100072F80(v58);
    uint64_t v59 = v93;
    char v60 = v86;
LABEL_15:
    sub_100063688((uint64_t)&_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  type metadata accessor for ASCOfferTitleVariant(0);
  sub_100072FE0((unint64_t *)&qword_1001A14D8, type metadata accessor for ASCOfferTitleVariant);
  uint64_t v61 = JSONDictionary.bridgedPrimitiveValues<A, B>()();
  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v58, v51);
  uint64_t v59 = v93;
  char v60 = v86;
  if (!v61) {
    goto LABEL_15;
  }
LABEL_16:
  JSONObject.subscript.getter();
  uint64_t v62 = JSONObject.int.getter();
  if (v63)
  {
    uint64_t v25 = (char *)type metadata accessor for JSONError();
    sub_100072FE0((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
    swift_allocError();
    uint64_t v75 = v74;
    type metadata accessor for ASCOfferFlags(0);
    void *v75 = 0x65756C6156776172;
    v75[1] = 0xE800000000000000;
    v75[2] = v76;
    v75[3] = &_swiftEmptyArrayStorage;
    (*(void (**)(void *, void, char *))(*((void *)v25 - 1) + 104))(v75, enum case for JSONError.malformedProperty(_:), v25);
    swift_willThrow();
    v83(v60, v59);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  uint64_t v98 = v62;
  char v64 = v60;
  uint64_t v65 = v83;
  v83(v64, v59);
  JSONObject.subscript.getter();
  uint64_t v94 = (char *)JSONObject.number.getter();
  v65(v25, v59);
  JSONObject.subscript.getter();
  v81(v85, v79, v97);
  sub_10002EB60(&qword_1001A2570);
  sub_100072224();
  uint64_t v66 = Array<A>.init(tryDeserializing:using:)();
  sub_1000713FC(v66);
  swift_bridgeObjectRelease();
  id v67 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  type metadata accessor for ASCOfferTitleVariant(0);
  sub_100072FE0((unint64_t *)&qword_1001A14D8, type metadata accessor for ASCOfferTitleVariant);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v69 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_10002EE34(0, (unint64_t *)&qword_1001A1D98);
  Class v70 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v71 = v67;
  id v72 = v80;
  uint64_t v73 = v94;
  uint64_t v25 = (char *)objc_msgSend(v71, "initWithID:titles:subtitles:flags:ageRating:metrics:notSubscribedOffer:subscribedOffer:", v80, isa, v69, v98, v94, v70, v91, v82, v78);

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v25;
}

char *sub_100077ADC(uint64_t a1, uint64_t a2)
{
  return sub_100076F20(a1, a2);
}

void *sub_100077AF4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for JSONObject();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v55 = (char *)v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v56 = (char *)v54 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v57 = (char *)v54 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v54 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)v54 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)v54 - v16;
  JSONObject.subscript.getter();
  v54[1] = JSONObject.string.getter();
  uint64_t v19 = v18;
  uint64_t v20 = *(void (**)(char *, uint64_t))(v3 + 8);
  v20(v17, v2);
  if (!v19)
  {
    unsigned __int8 v32 = (void *)type metadata accessor for JSONError();
    sub_100078328((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
    swift_allocError();
    uint64_t v35 = v34;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    *uint64_t v35 = 0x6C706D65546C7275;
    unint64_t v37 = 0xEB00000000657461;
LABEL_10:
    v35[1] = v37;
LABEL_11:
    void v35[2] = MetatypeMetadata;
    uint64_t v39 = (unsigned int *)&enum case for JSONError.missingProperty(_:);
LABEL_14:
    (*(void (**)(uint64_t *, void, void *))(*(v32 - 1) + 104))(v35, *v39, v32);
    swift_willThrow();
    return v32;
  }
  uint64_t v59 = v1;
  uint64_t v60 = v19;
  uint64_t v21 = 0x6874646977;
  JSONObject.subscript.getter();
  double v22 = COERCE_DOUBLE(JSONObject.double.getter());
  char v24 = v23;
  v20(v15, v2);
  if (v24)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v32 = (void *)type metadata accessor for JSONError();
    sub_100078328((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
    swift_allocError();
    uint64_t v35 = v38;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    *uint64_t v35 = 0x6874646977;
    unint64_t v37 = 0xE500000000000000;
    goto LABEL_10;
  }
  double v25 = v22;
  if (v22 <= 0.0)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v32 = (void *)type metadata accessor for JSONError();
    sub_100078328((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
    swift_allocError();
    uint64_t v35 = v40;
    uint64_t v41 = swift_getMetatypeMetadata();
    unint64_t v42 = 0xE500000000000000;
LABEL_13:
    *uint64_t v35 = v21;
    v35[1] = v42;
    void v35[2] = v41;
    v35[3] = (uint64_t)&_swiftEmptyArrayStorage;
    uint64_t v39 = (unsigned int *)&enum case for JSONError.malformedProperty(_:);
    goto LABEL_14;
  }
  uint64_t v21 = 0x746867696568;
  JSONObject.subscript.getter();
  double v26 = COERCE_DOUBLE(JSONObject.double.getter());
  char v28 = v27;
  v20(v12, v2);
  if (v28)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v32 = (void *)type metadata accessor for JSONError();
    sub_100078328((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
    swift_allocError();
    uint64_t v35 = v44;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    *uint64_t v35 = 0x746867696568;
    v35[1] = 0xE600000000000000;
    goto LABEL_11;
  }
  double v29 = v26;
  if (v26 <= 0.0)
  {
    swift_bridgeObjectRelease();
    unsigned __int8 v32 = (void *)type metadata accessor for JSONError();
    sub_100078328((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
    swift_allocError();
    uint64_t v35 = v45;
    uint64_t v41 = swift_getMetatypeMetadata();
    unint64_t v42 = 0xE600000000000000;
    goto LABEL_13;
  }
  char v30 = v57;
  JSONObject.subscript.getter();
  type metadata accessor for Decoration(0);
  unsigned __int8 v32 = v31;
  sub_100078328(&qword_1001A1260, type metadata accessor for Decoration);
  unint64_t v33 = v58;
  JSONObject.stringEnum<A>()();
  v20(v30, v2);
  if (v33)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    id v46 = v61;
    uint64_t v47 = v56;
    JSONObject.subscript.getter();
    type metadata accessor for Crop(0);
    sub_100078328(&qword_1001A1278, type metadata accessor for Crop);
    JSONObject.stringEnum<A>()();
    uint64_t v58 = v46;
    v20(v47, v2);
    uint64_t v48 = v61;
    uint64_t v49 = v55;
    JSONObject.subscript.getter();
    type metadata accessor for Format(0);
    sub_100078328(&qword_1001A1290, type metadata accessor for Format);
    JSONObject.stringEnum<A>()();
    v20(v49, v2);
    uint64_t v50 = v61;
    id v51 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    NSString v52 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v53 = v58;
    unsigned __int8 v32 = [v51 initWithURLTemplate:v52 width:v58 height:v48 decoration:v50 preferredCrop:v25 preferredFormat:v29];
  }
  return v32;
}

void *sub_100078310()
{
  return sub_100077AF4();
}

uint64_t sub_100078328(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100078370(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A2568);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v129 = (char *)v116 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v133 = (uint64_t)v116 - v7;
  uint64_t v138 = type metadata accessor for JSONContext();
  uint64_t v136 = *(void *)(v138 - 8);
  uint64_t v8 = __chkstk_darwin(v138);
  uint64_t v127 = (char *)v116 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  Swift::String v135 = (char *)v116 - v10;
  uint64_t v11 = type metadata accessor for JSONObject();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v128 = (char *)v116 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v126 = (char *)v116 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  int v130 = (char *)v116 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v132 = (char *)v116 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v131 = (uint64_t)v116 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  unint64_t v134 = (unint64_t)v116 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v139 = (char *)v116 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v140 = (char *)v116 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v31 = (char *)v116 - v30;
  uint64_t v32 = __chkstk_darwin(v29);
  unint64_t v34 = (char *)v116 - v33;
  uint64_t v35 = __chkstk_darwin(v32);
  unint64_t v37 = (char *)v116 - v36;
  __chkstk_darwin(v35);
  uint64_t v39 = (char *)v116 - v38;
  JSONObject.subscript.getter();
  uint64_t v144 = a2;
  uint64_t v40 = sub_10002DFC4((uint64_t)v39, (uint64_t)a2);
  uint64_t v43 = *(char **)(v12 + 8);
  unint64_t v42 = (char *)(v12 + 8);
  uint64_t v41 = v43;
  uint64_t v143 = v39;
  ((void (*)(char *, uint64_t))v43)(v39, v11);
  if (!v40)
  {
    uint64_t v45 = type metadata accessor for JSONError();
    sub_100072FE0((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
    swift_allocError();
    uint64_t v47 = v46;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    strcpy((char *)v47, "organicOffer");
    *(unsigned char *)(v47 + 13) = 0;
    *(_WORD *)(v47 + 14) = -5120;
    *(void *)(v47 + 16) = MetatypeMetadata;
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v45 - 8) + 104))(v47, enum case for JSONError.missingProperty(_:), v45);
    swift_willThrow();
    return;
  }
  uint64_t v141 = v40;
  JSONObject.subscript.getter();
  char v44 = JSONObject.BOOL.getter();
  ((void (*)(char *, uint64_t))v41)(v37, v11);
  if (v44)
  {
    uint64_t v49 = (uint64_t)v143;
    JSONObject.subscript.getter();
    uint64_t v142 = sub_10002DFC4(v49, (uint64_t)v144);
    ((void (*)(uint64_t, uint64_t))v41)(v49, v11);
  }
  else
  {
    uint64_t v142 = 0;
  }
  uint64_t v50 = (void (*)(char *, uint64_t))v41;
  JSONObject.subscript.getter();
  uint64_t v51 = a1;
  uint64_t v52 = JSONObject.string.getter();
  uint64_t v54 = v53;
  v50(v34, v11);
  if (!v54)
  {
    uint64_t v72 = type metadata accessor for JSONError();
    sub_100072FE0((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
    swift_allocError();
    long long v74 = v73;
    uint64_t v75 = swift_getMetatypeMetadata();
    *long long v74 = 0x4449726566666FLL;
    unint64_t v76 = 0xE700000000000000;
LABEL_14:
    v74[1] = v76;
    v74[2] = v75;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v72 - 8) + 104))(v74, enum case for JSONError.missingProperty(_:), v72);
    swift_willThrow();
LABEL_19:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return;
  }
  uint64_t v55 = v42;
  JSONObject.subscript.getter();
  id v56 = (id)JSONObject.number.getter();
  v50(v31, v11);
  if (!v56)
  {
    swift_bridgeObjectRelease();
    uint64_t v72 = type metadata accessor for JSONError();
    sub_100072FE0((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
    swift_allocError();
    long long v74 = v77;
    uint64_t v75 = swift_getMetatypeMetadata();
    *long long v74 = 0x496D657449706169;
    unint64_t v76 = 0xE900000000000044;
    goto LABEL_14;
  }
  uint64_t v57 = v140;
  JSONObject.subscript.getter();
  uint64_t v123 = JSONObject.string.getter();
  uint64_t v59 = v58;
  v50(v57, v11);
  if (!v59)
  {
    swift_bridgeObjectRelease();
    uint64_t v78 = type metadata accessor for JSONError();
    sub_100072FE0((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
    swift_allocError();
    id v80 = v79;
    uint64_t v81 = swift_getMetatypeMetadata();
    *id v80 = 0x4E6D657449706169;
    unint64_t v82 = 0xEB00000000656D61;
LABEL_17:
    v80[1] = v82;
    v80[2] = v81;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v78 - 8) + 104))(v80, enum case for JSONError.missingProperty(_:), v78);
    swift_willThrow();
LABEL_18:

    goto LABEL_19;
  }
  uint64_t v125 = v54;
  uint64_t v124 = v59;
  uint64_t v60 = v139;
  JSONObject.subscript.getter();
  uint64_t v120 = JSONObject.string.getter();
  uint64_t v62 = v61;
  uint64_t v140 = (char *)v50;
  v50(v60, v11);
  uint64_t v139 = v62;
  if (!v62)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v78 = type metadata accessor for JSONError();
    sub_100072FE0((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
    swift_allocError();
    id v80 = v83;
    uint64_t v81 = swift_getMetatypeMetadata();
    *id v80 = 0x75646F7250706169;
    unint64_t v82 = 0xEE00656D614E7463;
    goto LABEL_17;
  }
  uint64_t v63 = v51;
  id v121 = v56;
  uint64_t v119 = v52;
  unint64_t v64 = v134;
  JSONObject.subscript.getter();
  uint64_t v122 = v63;
  uint64_t v66 = v135;
  uint64_t v65 = v136;
  uint64_t v68 = v136 + 16;
  id v67 = *(void (**)(char *, void *, uint64_t))(v136 + 16);
  uint64_t v69 = v138;
  v67(v135, v144, v138);
  sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
  uint64_t v70 = v137;
  uint64_t v71 = (void *)sub_100070E7C();
  uint64_t v137 = v70;
  if (v70)
  {
    (*(void (**)(char *, uint64_t))(v65 + 8))(v66, v69);
    ((void (*)(unint64_t, uint64_t))v140)(v64, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return;
  }
  v116[1] = v68;
  uint64_t v117 = v67;
  uint64_t v118 = v71;
  (*(void (**)(char *, uint64_t))(v65 + 8))(v66, v69);
  uint64_t v84 = (void (*)(uint64_t, uint64_t))v140;
  ((void (*)(unint64_t, uint64_t))v140)(v64, v11);
  uint64_t v85 = v131;
  JSONObject.subscript.getter();
  uint64_t v86 = v133;
  JSONObject.dictionary.getter();
  Swift::String v135 = v55;
  uint64_t v136 = v11;
  v84(v85, v11);
  uint64_t v87 = type metadata accessor for JSONDictionary();
  uint64_t v88 = *(void *)(v87 - 8);
  uint64_t v89 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48);
  if (v89(v86, 1, v87) == 1)
  {
    sub_100072F80(v86);
    uint64_t v90 = (uint64_t)v129;
  }
  else
  {
    type metadata accessor for ASCOfferTitleVariant(0);
    sub_100072FE0((unint64_t *)&qword_1001A14D8, type metadata accessor for ASCOfferTitleVariant);
    uint64_t v91 = JSONDictionary.bridgedPrimitiveValues<A, B>()();
    (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v86, v87);
    uint64_t v90 = (uint64_t)v129;
    if (v91)
    {
      unint64_t v134 = v91;
      goto LABEL_26;
    }
  }
  unint64_t v134 = sub_100063688((uint64_t)&_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
LABEL_26:
  uint64_t v92 = v130;
  uint64_t v93 = v132;
  JSONObject.subscript.getter();
  JSONObject.dictionary.getter();
  ((void (*)(char *, uint64_t))v140)(v93, v136);
  if (v89(v90, 1, v87) == 1)
  {
    sub_100072F80(v90);
    id v56 = v121;
  }
  else
  {
    type metadata accessor for ASCOfferTitleVariant(0);
    sub_100072FE0((unint64_t *)&qword_1001A14D8, type metadata accessor for ASCOfferTitleVariant);
    uint64_t v94 = JSONDictionary.bridgedPrimitiveValues<A, B>()();
    (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v90, v87);
    id v56 = v121;
    if (v94) {
      goto LABEL_30;
    }
  }
  uint64_t v94 = sub_100063688((uint64_t)&_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
LABEL_30:
  JSONObject.subscript.getter();
  uint64_t v95 = JSONObject.int.getter();
  if (v96)
  {
    uint64_t v108 = type metadata accessor for JSONError();
    sub_100072FE0((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
    swift_allocError();
    uint64_t v110 = v109;
    type metadata accessor for ASCOfferFlags(0);
    *uint64_t v110 = 0x65756C6156776172;
    v110[1] = 0xE800000000000000;
    v110[2] = v111;
    v110[3] = &_swiftEmptyArrayStorage;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v108 - 8) + 104))(v110, enum case for JSONError.malformedProperty(_:), v108);
    swift_willThrow();
    ((void (*)(char *, uint64_t))v140)(v92, v136);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  uint64_t v131 = v95;
  uint64_t v133 = v94;
  uint64_t v97 = v136;
  uint64_t v98 = (void (*)(char *, uint64_t))v140;
  ((void (*)(char *, uint64_t))v140)(v92, v136);
  uint64_t v99 = v126;
  JSONObject.subscript.getter();
  uint64_t v132 = (char *)JSONObject.number.getter();
  v98(v99, v97);
  JSONObject.subscript.getter();
  v117(v127, v144, v138);
  sub_10002EB60(&qword_1001A2570);
  sub_100072224();
  uint64_t v100 = Array<A>.init(tryDeserializing:using:)();
  uint64_t v144 = sub_1000713FC(v100);
  swift_bridgeObjectRelease();
  uint64_t v101 = v128;
  JSONObject.subscript.getter();
  uint64_t v102 = JSONObject.int.getter();
  uint64_t v103 = v142;
  uint64_t v104 = (uint64_t)v139;
  if (v105)
  {
    uint64_t v112 = type metadata accessor for JSONError();
    sub_100072FE0((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
    swift_allocError();
    uint64_t v142 = v103;
    uint64_t v114 = v113;
    type metadata accessor for ASCContingentOfferType(0);
    *uint64_t v114 = 0x65756C6156776172;
    v114[1] = 0xE800000000000000;
    v114[2] = v115;
    v114[3] = &_swiftEmptyArrayStorage;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v112 - 8) + 104))(v114, enum case for JSONError.malformedProperty(_:), v112);
    swift_willThrow();
    v98(v101, v97);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v106 = v102;
    v98(v101, v97);
    id v107 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    sub_100079538(v118, v134, v133, v131, v132, (uint64_t)v144, v141, v103, v119, v125, v56, v123, v124, v120, v104, v106);
  }
}

void sub_100079520(uint64_t a1, void *a2)
{
}

id sub_100079538(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  type metadata accessor for ASCOfferTitleVariant(0);
  sub_100072FE0((unint64_t *)&qword_1001A14D8, type metadata accessor for ASCOfferTitleVariant);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v23 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_10002EE34(0, (unint64_t *)&qword_1001A1D98);
  Class v17 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v29 = [v27 initWithID:a1 titles:isa subtitles:v23 flags:a4 ageRating:a5 metrics:v17 organicOffer:a7 streamlinedOffer:a8 offerID:v18 iapItemID:a11 iapItemName:v19 iapProductName:v20 offerType:a16];

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return v29;
}

void *sub_100079760()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for JSONObject();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v22 - v7;
  JSONObject.subscript.getter();
  JSONObject.string.getter();
  uint64_t v10 = v9;
  uint64_t v11 = *(void (**)(char *, uint64_t))(v3 + 8);
  v11(v8, v2);
  if (!v10)
  {
    Class v17 = (void *)type metadata accessor for JSONError();
    sub_10002ECB0();
    swift_allocError();
    NSString v19 = v18;
    *NSString v18 = 1701667182;
    unint64_t v20 = 0xE400000000000000;
LABEL_6:
    v18[1] = v20;
    v18[2] = v1;
    (*(void (**)(void *, void, void *))(*(v17 - 1) + 104))(v19, enum case for JSONError.missingProperty(_:), v17);
    swift_willThrow();
    return v17;
  }
  JSONObject.subscript.getter();
  JSONObject.string.getter();
  uint64_t v13 = v12;
  v11(v6, v2);
  if (!v13)
  {
    swift_bridgeObjectRelease();
    Class v17 = (void *)type metadata accessor for JSONError();
    sub_10002ECB0();
    swift_allocError();
    NSString v19 = v18;
    *NSString v18 = 25705;
    unint64_t v20 = 0xE200000000000000;
    goto LABEL_6;
  }
  id v14 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class v17 = [v14 initWithName:v15 identifier:v16];

  return v17;
}

void *sub_100079A00()
{
  return sub_100079760();
}

unint64_t sub_100079A18()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    goto LABEL_15;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v5)
  {
LABEL_6:
    uint64_t v6 = &off_100184658;
    return sub_1000630A0((uint64_t)v6);
  }
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  if (v7 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v9 == v10)
  {
LABEL_15:
    uint64_t v6 = &off_100184658;
    goto LABEL_16;
  }
  char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v12) {
    goto LABEL_6;
  }
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;
  if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16)
  {
    uint64_t v6 = &off_100184698;
LABEL_16:
    swift_bridgeObjectRelease_n();
    return sub_1000630A0((uint64_t)v6);
  }
  char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v18)
  {
    uint64_t v6 = &off_100184698;
    return sub_1000630A0((uint64_t)v6);
  }
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;
  if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v21 == v22)
  {
LABEL_22:
    uint64_t v6 = &off_1001846D8;
    goto LABEL_16;
  }
  char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v23) {
    goto LABEL_24;
  }
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v26 = v25;
  if (v24 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v26 == v27) {
    goto LABEL_22;
  }
  char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v28) {
    goto LABEL_24;
  }
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = v30;
  if (v29 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v31 == v32) {
    goto LABEL_22;
  }
  char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v33) {
    goto LABEL_24;
  }
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v36 = v35;
  if (v34 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v36 == v37) {
    goto LABEL_22;
  }
  char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v38) {
    goto LABEL_24;
  }
  uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v41 = v40;
  if (v39 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v41 == v42) {
    goto LABEL_22;
  }
  char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v43) {
    goto LABEL_24;
  }
  uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v46 = v45;
  if (v44 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v46 == v47) {
    goto LABEL_22;
  }
  char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v48)
  {
LABEL_24:
    uint64_t v6 = &off_1001846D8;
    return sub_1000630A0((uint64_t)v6);
  }
  uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v51 = v50;
  if (v49 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v51 == v52)
  {
LABEL_42:
    uint64_t v6 = &off_100184718;
    goto LABEL_16;
  }
  char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v53) {
    goto LABEL_44;
  }
  uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v56 = v55;
  if (v54 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v56 == v57) {
    goto LABEL_42;
  }
  char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v58)
  {
LABEL_44:
    uint64_t v6 = &off_100184718;
    return sub_1000630A0((uint64_t)v6);
  }
  uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v61 = v60;
  if (v59 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v61 == v62)
  {
    uint64_t v6 = &off_100184758;
    goto LABEL_16;
  }
  char v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v63)
  {
    uint64_t v6 = &off_100184758;
    return sub_1000630A0((uint64_t)v6);
  }
  uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v66 = v65;
  if (v64 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v66 == v67)
  {
    uint64_t v6 = &off_1001847D8;
    goto LABEL_16;
  }
  char v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v68)
  {
    uint64_t v6 = &off_1001847D8;
    return sub_1000630A0((uint64_t)v6);
  }
  uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v71 = v70;
  if (v69 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v71 == v72)
  {
    uint64_t v6 = &off_100184838;
    goto LABEL_16;
  }
  char v73 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v73)
  {
    uint64_t v6 = &off_100184838;
    return sub_1000630A0((uint64_t)v6);
  }
  uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v76 = v75;
  if (v74 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v76 == v77)
  {
    uint64_t v6 = &off_1001848B8;
    goto LABEL_16;
  }
  char v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v78)
  {
    uint64_t v6 = &off_1001848B8;
    return sub_1000630A0((uint64_t)v6);
  }
  uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v81 = v80;
  if (v79 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v81 == v82)
  {
    uint64_t v6 = &off_1001848F8;
    goto LABEL_16;
  }
  char v83 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v83)
  {
    uint64_t v6 = &off_1001848F8;
    return sub_1000630A0((uint64_t)v6);
  }
  uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v86 = v85;
  if (v84 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v86 == v87)
  {
    uint64_t v6 = &off_100184938;
    goto LABEL_16;
  }
  char v88 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v88)
  {
    uint64_t v6 = &off_100184938;
    return sub_1000630A0((uint64_t)v6);
  }
  uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v91 = v90;
  if (v89 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v91 == v92)
  {
    uint64_t v6 = &off_100184978;
    goto LABEL_16;
  }
  char v93 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v93)
  {
    uint64_t v6 = &off_100184978;
    return sub_1000630A0((uint64_t)v6);
  }
  uint64_t v94 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v96 = v95;
  if (v94 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v96 == v97)
  {
    uint64_t v6 = &off_1001849D8;
    goto LABEL_16;
  }
  char v98 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v98)
  {
    uint64_t v6 = &off_1001849D8;
    return sub_1000630A0((uint64_t)v6);
  }
  return 0;
}

void sub_10007A2DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A25F0);
  __chkstk_darwin(v4 - 8);
  uint64_t v79 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for JSONArray();
  uint64_t v80 = *(void *)(v6 - 8);
  uint64_t v81 = v6;
  __chkstk_darwin(v6);
  char v73 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (void *)type metadata accessor for JSONContext();
  uint64_t v9 = *(v8 - 1);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v75 = (uint64_t)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v63 - v12;
  uint64_t v85 = type metadata accessor for JSONObject();
  uint64_t v87 = *(void *)(v85 - 8);
  uint64_t v14 = __chkstk_darwin(v85);
  char v78 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v77 = (uint64_t)&v63 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v76 = (uint64_t)&v63 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v74 = (uint64_t)&v63 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v63 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v63 - v26;
  uint64_t v28 = __chkstk_darwin(v25);
  uint64_t v82 = (char *)&v63 - v29;
  __chkstk_darwin(v28);
  uint64_t v31 = (char *)&v63 - v30;
  uint64_t v83 = a1;
  JSONObject.subscript.getter();
  uint64_t v32 = *(void (**)(uint64_t, uint64_t, void *))(v9 + 16);
  uint64_t v86 = v8;
  v32((uint64_t)v13, a2, v8);
  sub_10007AC00();
  char v33 = v84;
  uint64_t v34 = (void *)sub_100070E7C();
  if (v33)
  {
    (*(void (**)(char *, void *))(v9 + 8))(v13, v86);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v31, v85);
  }
  else
  {
    char v68 = v32;
    uint64_t v69 = v9 + 16;
    uint64_t v70 = v24;
    uint64_t v71 = v27;
    uint64_t v72 = a2;
    uint64_t v84 = v34;
    (*(void (**)(char *, void *))(v9 + 8))(v13, v86);
    uint64_t v35 = v87 + 8;
    uint64_t v36 = *(void (**)(char *, uint64_t))(v87 + 8);
    uint64_t v37 = v85;
    v36(v31, v85);
    char v38 = v82;
    JSONObject.subscript.getter();
    type metadata accessor for Kind(0);
    sub_10007AC40();
    JSONObject.stringEnum<A>()();
    uint64_t v67 = 0;
    v36(v38, v37);
    uint64_t v82 = v89;
    sub_10002EB60(&qword_1001A25F8);
    uint64_t v39 = (uint64_t)v71;
    JSONObject.subscript.getter();
    uint64_t v40 = v75;
    uint64_t v87 = v35;
    uint64_t v41 = v72;
    uint64_t v42 = v86;
    uint64_t v64 = (void (*)(uint64_t, uint64_t))v36;
    char v43 = v68;
    v68(v75, v72, v86);
    sub_10002EDA0(&qword_1001A2600, &qword_1001A25F8);
    ExpressibleByJSON.init(tryDeserializing:using:)();
    uint64_t v66 = v88;
    sub_10002EB60(&qword_1001A2608);
    JSONObject.subscript.getter();
    v43(v40, v41, v42);
    uint64_t v44 = v64;
    sub_10002EDA0((unint64_t *)&qword_1001A2610, &qword_1001A2608);
    ExpressibleByJSON.init(tryDeserializing:using:)();
    uint64_t v86 = v88;
    uint64_t v45 = (uint64_t)v70;
    JSONObject.subscript.getter();
    uint64_t v75 = JSONObject.string.getter();
    uint64_t v69 = v46;
    uint64_t v47 = v85;
    v44(v45, v85);
    uint64_t v48 = v74;
    JSONObject.subscript.getter();
    uint64_t v70 = (char *)JSONObject.string.getter();
    char v68 = v49;
    v44(v48, v47);
    uint64_t v50 = v76;
    JSONObject.subscript.getter();
    uint64_t v74 = JSONObject.string.getter();
    uint64_t v65 = v51;
    v44(v50, v47);
    uint64_t v52 = v77;
    JSONObject.subscript.getter();
    uint64_t v76 = JSONObject.string.getter();
    uint64_t v63 = v53;
    v44(v52, v47);
    JSONObject.subscript.getter();
    uint64_t v77 = sub_10002DFC4(v39, v41);
    uint64_t v54 = v47;
    v44(v39, v47);
    uint64_t v55 = v78;
    JSONObject.subscript.getter();
    uint64_t v56 = (uint64_t)v79;
    JSONObject.array.getter();
    uint64_t v57 = v80;
    uint64_t v58 = v81;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48))(v56, 1, v81) == 1)
    {
      sub_10007AE40(v56);
    }
    else
    {
      uint64_t v59 = v73;
      uint64_t v60 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v57 + 32))(v73, v56, v58);
      __chkstk_darwin(v60);
      sub_10002EB60((uint64_t *)&unk_1001A26D0);
      uint64_t v61 = v67;
      JSONArray.compactMap<A>(_:)();
      uint64_t v67 = v61;
      (*(void (**)(char *, uint64_t))(v57 + 8))(v59, v58);
    }
    v44((uint64_t)v55, v54);
    id v62 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    sub_10007AC98(v84, v82, v66, v86, v75, v69, (uint64_t)v70, (uint64_t)v68, v74, v65, v76, v63, v77);
  }
}

void sub_10007ABE8(uint64_t a1, uint64_t a2)
{
}

unint64_t sub_10007AC00()
{
  unint64_t result = qword_1001A2110;
  if (!qword_1001A2110)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001A2110);
  }
  return result;
}

unint64_t sub_10007AC40()
{
  unint64_t result = qword_1001A11B0;
  if (!qword_1001A11B0)
  {
    type metadata accessor for Kind(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A11B0);
  }
  return result;
}

id sub_10007AC98(void *a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14 = v13;
  if (a6)
  {
    NSString v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v19 = a10;
    if (a8)
    {
LABEL_3:
      NSString v26 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    NSString v27 = 0;
    uint64_t v19 = a10;
    if (a8) {
      goto LABEL_3;
    }
  }
  NSString v26 = 0;
LABEL_6:
  if (!v19)
  {
    NSString v20 = 0;
    uint64_t v21 = a13;
    if (a12) {
      goto LABEL_8;
    }
LABEL_10:
    NSString v22 = 0;
    goto LABEL_11;
  }
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v21 = a13;
  if (!a12) {
    goto LABEL_10;
  }
LABEL_8:
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
LABEL_11:
  sub_10002EB60((uint64_t *)&unk_1001A26D0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v24 = [v14 initWithID:a1 kind:a2 metrics:a3 icon:a4 heading:v27 title:v26 subtitle:v20 ageRating:v22 offer:v21 features:isa];

  swift_unknownObjectRelease();
  return v24;
}

uint64_t sub_10007AE40(uint64_t a1)
{
  uint64_t v2 = sub_10002EB60(&qword_1001A25F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_10007AEA0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_10007B3B4(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_10007AEBC(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = a2;
  uint64_t v2 = type metadata accessor for JSONContext();
  uint64_t v26 = *(void *)(v2 - 8);
  uint64_t v27 = v2;
  __chkstk_darwin(v2);
  uint64_t v28 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10002EB60(&qword_1001A25F0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for JSONObject();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for JSONArray();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v26 - v16;
  JSONObject.subscript.getter();
  JSONObject.array.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v6, 1, v11) == 1)
  {
    sub_10007AE40((uint64_t)v6);
    uint64_t v18 = type metadata accessor for JSONError();
    sub_10002ECB0();
    swift_allocError();
    NSString v20 = v19;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    void *v20 = 0x7370756B636F6CLL;
    v20[1] = 0xE700000000000000;
    long long v20[2] = MetatypeMetadata;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, enum case for JSONError.missingProperty(_:), v18);
    return swift_willThrow();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v6, v11);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v28, v29, v27);
    sub_10002EB60(&qword_1001A26B8);
    sub_10007B358();
    uint64_t v23 = v30;
    uint64_t v24 = Array<A>.init(deserializing:using:)();
    if (v23)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v17, v11);
    }
    else
    {
      uint64_t v25 = sub_1000713FC(v24);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
      type metadata accessor for ASCLockupContainer();
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = v25;
    }
  }
  return result;
}

uint64_t sub_10007B2E4()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ASCLockupContainer()
{
  return self;
}

uint64_t sub_10007B340(uint64_t a1, uint64_t a2)
{
  return sub_10007AEBC(a1, a2);
}

unint64_t sub_10007B358()
{
  unint64_t result = qword_1001A26C0;
  if (!qword_1001A26C0)
  {
    sub_10002ED58(&qword_1001A26B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A26C0);
  }
  return result;
}

void *sub_10007B3B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t result = sub_10007B540(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10007B3E4()
{
  uint64_t v0 = sub_10002EB60((uint64_t *)&unk_1001A1690);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static JSONContext.initFailureObserver.getter();
  sub_10002EB60(&qword_1001A2760);
  JSONContext.subscript.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  sub_10002EBA4((uint64_t)v7, (uint64_t)v5);
  if (v6)
  {
    sub_10002EC6C(v5, v6);
    sub_10002EB60((uint64_t *)&unk_1001A26D0);
    dispatch thunk of JSONInitFailureObserver.tryingToInitialize(_:didFailWith:)();
    sub_10002EC0C((uint64_t)v7);
    return sub_10002ED08((uint64_t)v5);
  }
  else
  {
    sub_10002EC0C((uint64_t)v7);
    return sub_10002EC0C((uint64_t)v5);
  }
}

void *sub_10007B540(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for JSONError();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for JSONObject();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v12 = JSONObject.isNull.getter();
  unint64_t result = 0;
  if ((v12 & 1) == 0)
  {
    uint64_t v25 = v5;
    uint64_t v26 = a2;
    JSONObject.subscript.getter();
    uint64_t v14 = JSONObject.string.getter();
    uint64_t v16 = v15;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    if (v16)
    {
      BOOL v17 = v14 == 0x70756B636F4C6461 && v16 == 0xEF65727574616546;
      if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        sub_10002EE34(0, (unint64_t *)&unk_1001A2750);
        return sub_10007BFE0();
      }
      uint64_t v22 = v26;
      if (v14 == 0xD000000000000014 && v16 == 0x800000010015BDF0
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        sub_10002EE34(0, &qword_1001A2748);
        return sub_10007E150();
      }
      if (v14 == 0xD000000000000015 && v16 == 0x800000010015BE10
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        sub_10002EE34(0, &qword_1001A2740);
        return sub_10007D23C();
      }
      if (v14 == 0x61654665726E6567 && v16 == 0xEC00000065727574
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        sub_10002EE34(0, &qword_1001A2738);
        return (void *)sub_10007D60C(a1, v22);
      }
      if (v14 == 0xD000000000000016 && v16 == 0x800000010015BE30
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        sub_10002EE34(0, &qword_1001A2730);
        return sub_10007E2BC();
      }
      if (v14 == 0xD000000000000013 && v16 == 0x800000010015BE50
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        sub_10002EE34(0, &qword_1001A2728);
        return sub_10007E6B8();
      }
      if (v14 == 0xD000000000000010 && v16 == 0x800000010015BE70
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        sub_10002EE34(0, &qword_1001A2720);
        return sub_10007E4B4();
      }
      if (v14 == 0x616546616964656DLL && v16 == 0xEC00000065727574
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        sub_10002EE34(0, &qword_1001A2718);
        return sub_10007DCE4(a1, v26);
      }
      if (v14 == 0xD000000000000016 && v16 == 0x800000010015BE90
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        sub_10002EE34(0, &qword_1001A2710);
        return sub_10007DF40();
      }
      if (v14 == 0x4449656C646E7562 && v16 == 0xEF65727574616546
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        sub_10002EE34(0, &qword_1001A2708);
        return sub_10007CC98();
      }
      if (v14 == 0xD000000000000016 && v16 == 0x800000010015BEB0
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        sub_10002EE34(0, &qword_1001A2700);
        return sub_10007C428();
      }
      if (v14 == 0xD00000000000001DLL && v16 == 0x800000010015BED0
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        sub_10002EE34(0, &qword_1001A26F8);
        return sub_10007C61C(a1);
      }
      if (v14 == 0xD000000000000019 && v16 == 0x800000010015BEF0
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        sub_10002EE34(0, &qword_1001A26F0);
        return sub_10007D428();
      }
      if (v14 == 0xD000000000000014 && v16 == 0x800000010015BF10
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        sub_10002EE34(0, &qword_1001A26E8);
        return sub_10007D0E0();
      }
      if (v14 == 0xD000000000000010 && v16 == 0x800000010015BF30
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        sub_10002EE34(0, &qword_1001A26E0);
        return sub_10007CE94(a1, v26);
      }
      uint64_t v23 = sub_10002EB60((uint64_t *)&unk_1001A26D0);
      uint64_t *v7 = v14;
      v7[1] = v16;
      v7[2] = v23;
      uint64_t v19 = (unsigned int *)&enum case for JSONError.unknownCase(_:);
    }
    else
    {
      uint64_t v18 = sub_10002EB60((uint64_t *)&unk_1001A26D0);
      uint64_t *v7 = 0x646E696B24;
      v7[1] = 0xE500000000000000;
      v7[2] = v18;
      uint64_t v19 = (unsigned int *)&enum case for JSONError.missingProperty(_:);
    }
    uint64_t v20 = v25;
    (*(void (**)(uint64_t *, void, uint64_t))(v25 + 104))(v7, *v19, v4);
    sub_10002ECB0();
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v20 + 16))(v21, v7, v4);
    sub_10007B3E4();
    (*(void (**)(uint64_t *, uint64_t))(v20 + 8))(v7, v4);
    swift_errorRelease();
    return 0;
  }
  return result;
}

void *sub_10007BFE0()
{
  uint64_t v0 = type metadata accessor for JSONObject();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = &v34[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = &v34[-v6];
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = &v34[-v9];
  __chkstk_darwin(v8);
  char v12 = &v34[-v11];
  JSONObject.subscript.getter();
  int v35 = JSONObject.BOOL.getter();
  int v13 = v35;
  uint64_t v14 = *(void (**)(unsigned char *, uint64_t))(v1 + 8);
  v14(v12, v0);
  if (v13 == 2)
  {
    uint64_t v15 = type metadata accessor for JSONError();
    sub_10002ECB0();
    swift_allocError();
    BOOL v17 = v16;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    *BOOL v17 = 0x726F746964457369;
    unint64_t v19 = 0xEF6563696F684373;
LABEL_9:
    v17[1] = v19;
    v17[2] = MetatypeMetadata;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v15 - 8) + 104))(v17, enum case for JSONError.missingProperty(_:), v15);
    swift_willThrow();
    return v17;
  }
  JSONObject.subscript.getter();
  uint64_t v20 = JSONObject.float.getter();
  v14(v10, v0);
  if ((v20 & 0x100000000) != 0)
  {
    uint64_t v15 = type metadata accessor for JSONError();
    sub_10002ECB0();
    swift_allocError();
    BOOL v17 = v28;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    *BOOL v17 = 0x676E69746172;
    unint64_t v19 = 0xE600000000000000;
    goto LABEL_9;
  }
  JSONObject.subscript.getter();
  JSONObject.string.getter();
  uint64_t v22 = v21;
  v14(v7, v0);
  if (!v22)
  {
    uint64_t v15 = type metadata accessor for JSONError();
    sub_10002ECB0();
    swift_allocError();
    BOOL v17 = v29;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    *BOOL v17 = 0x6F43676E69746172;
    unint64_t v19 = 0xEB00000000746E75;
    goto LABEL_9;
  }
  int v23 = v20;
  JSONObject.subscript.getter();
  JSONObject.string.getter();
  uint64_t v25 = v24;
  v14(v4, v0);
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (v25)
  {
    NSString v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v27 = 0;
  }
  char v31 = v35;
  id v32 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  LODWORD(v33) = v23;
  BOOL v17 = [v32 initWithEditorsChoice:v31 & 1 productRating:v26 productRatingBadge:v27 productDescription:v33];

  return v17;
}

void *sub_10007C410()
{
  return sub_10007BFE0();
}

id sub_10007C428()
{
  uint64_t v0 = type metadata accessor for JSONObject();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  JSONObject.subscript.getter();
  JSONObject.string.getter();
  uint64_t v5 = v4;
  uint64_t v6 = *(void (**)(char *, uint64_t))(v1 + 8);
  v6(v3, v0);
  JSONObject.subscript.getter();
  JSONObject.string.getter();
  uint64_t v8 = v7;
  v6(v3, v0);
  if (!v5)
  {
    NSString v9 = 0;
    if (v8) {
      goto LABEL_3;
    }
LABEL_5:
    NSString v10 = 0;
    goto LABEL_6;
  }
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (!v8) {
    goto LABEL_5;
  }
LABEL_3:
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
LABEL_6:
  id v11 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithDistributorBundleId:v9 appVersionId:v10];

  return v11;
}

id sub_10007C604()
{
  return sub_10007C428();
}

id sub_10007C61C(uint64_t a1)
{
  uint64_t v2 = sub_10002EB60(&qword_1001A2568);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v44 = (uint64_t)&v36 - v6;
  uint64_t v7 = sub_10002EB60(&qword_1001A25F0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  NSString v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  char v12 = (char *)&v36 - v11;
  uint64_t v13 = type metadata accessor for JSONObject();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v41 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v36 - v17;
  JSONObject.subscript.getter();
  uint64_t v19 = JSONObject.string.getter();
  uint64_t v39 = v20;
  uint64_t v40 = v19;
  uint64_t v21 = *(void (**)(char *, uint64_t))(v14 + 8);
  v21(v18, v13);
  uint64_t v43 = a1;
  JSONObject.subscript.getter();
  JSONObject.array.getter();
  v21(v18, v13);
  uint64_t v42 = v12;
  sub_1000475F0((uint64_t)v12, (uint64_t)v10, &qword_1001A25F0);
  uint64_t v22 = type metadata accessor for JSONArray();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v10, 1, v22) == 1)
  {
    sub_100034B8C((uint64_t)v10, &qword_1001A25F0);
    uint64_t v38 = 0;
  }
  else
  {
    uint64_t v24 = v45;
    uint64_t v38 = JSONArray.compactMap<A>(_:)();
    uint64_t v45 = v24;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v22);
  }
  JSONObject.subscript.getter();
  uint64_t v25 = JSONObject.string.getter();
  uint64_t v37 = v26;
  v21(v18, v13);
  JSONObject.subscript.getter();
  uint64_t v27 = v44;
  JSONObject.dictionary.getter();
  v21(v18, v13);
  sub_1000475F0(v27, (uint64_t)v5, &qword_1001A2568);
  uint64_t v28 = type metadata accessor for JSONDictionary();
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v5, 1, v28) == 1)
  {
    sub_100034B8C((uint64_t)v5, &qword_1001A2568);
    uint64_t v30 = 0;
  }
  else
  {
    uint64_t v30 = JSONDictionary.bridgedPrimitiveValues<A, B>()();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v5, v28);
  }
  char v31 = v41;
  JSONObject.subscript.getter();
  char v32 = JSONObject.BOOL.getter();
  v21(v31, v13);
  id v33 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v34 = sub_10007CB6C(v40, v39, v38, v25, v37, v30, v32 & 1);
  sub_100034B8C(v44, &qword_1001A2568);
  sub_100034B8C((uint64_t)v42, &qword_1001A25F0);
  return v34;
}

id sub_10007CB54(uint64_t a1)
{
  return sub_10007C61C(a1);
}

id sub_10007CB6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a2)
  {
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    if (a3) {
      goto LABEL_3;
    }
  }
  else
  {
    NSString v12 = 0;
    if (a3)
    {
LABEL_3:
      v13.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      if (a5) {
        goto LABEL_4;
      }
LABEL_8:
      NSString v14 = 0;
      if (a6) {
        goto LABEL_5;
      }
LABEL_9:
      v15.super.Class isa = 0;
      goto LABEL_10;
    }
  }
  v13.super.Class isa = 0;
  if (!a5) {
    goto LABEL_8;
  }
LABEL_4:
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (!a6) {
    goto LABEL_9;
  }
LABEL_5:
  v15.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
LABEL_10:
  id v16 = [v7 initWithDeveloperId:v12 webDistributionDomains:v13.super.isa supportUrl:v14 contentRatingsBySystem:v15.super.isa isDistributor:a7 & 1];

  return v16;
}

void *sub_10007CC98()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for JSONObject();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  JSONObject.subscript.getter();
  JSONObject.string.getter();
  uint64_t v7 = v6;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v7)
  {
    id v8 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v10 = [v8 initWithBundleID:v9];
  }
  else
  {
    NSString v10 = (void *)type metadata accessor for JSONError();
    sub_10002ECB0();
    swift_allocError();
    void *v11 = 0x4449656C646E7562;
    v11[1] = 0xE800000000000000;
    v11[2] = v1;
    (*(void (**)(void *, void, void *))(*(v10 - 1) + 104))(v11, enum case for JSONError.missingProperty(_:), v10);
    swift_willThrow();
  }
  return v10;
}

void *sub_10007CE7C()
{
  return sub_10007CC98();
}

id sub_10007CE94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for JSONContext();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for JSONObject();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  JSONObject.subscript.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  sub_10006D960();
  id v12 = sub_10007343C((uint64_t)v11, (uint64_t)v7);
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    NSString v14 = *(void (**)(char *, uint64_t))(v9 + 8);
    id v13 = (id)(v9 + 8);
    v14(v11, v8);
  }
  else
  {
    NSDictionary v15 = v12;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    id v13 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithAppOffer:v15];
  }
  return v13;
}

id sub_10007D0C8(uint64_t a1, uint64_t a2)
{
  return sub_10007CE94(a1, a2);
}

id sub_10007D0E0()
{
  uint64_t v0 = type metadata accessor for JSONObject();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  JSONObject.subscript.getter();
  JSONObject.string.getter();
  uint64_t v5 = v4;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v5)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v6 = 0;
  }
  id v7 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithDeveloperName:v6];

  return v7;
}

id sub_10007D23C()
{
  uint64_t v0 = type metadata accessor for JSONObject();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  JSONObject.subscript.getter();
  type metadata accessor for HeadingKind(0);
  sub_10007D3D0();
  JSONObject.stringEnum<A>(or:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v4 = v9;
  id v5 = [objc_allocWithZone((Class)ASCLockupDisplayContext) initWithHeadingKind:v9];

  id v6 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithDisplayContext:v5];
  return v6;
}

__CFString *sub_10007D3C0@<X0>(void *a1@<X8>)
{
  *a1 = @"standard";
  return @"standard";
}

unint64_t sub_10007D3D0()
{
  unint64_t result = qword_1001A11C8;
  if (!qword_1001A11C8)
  {
    type metadata accessor for HeadingKind(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A11C8);
  }
  return result;
}

id sub_10007D428()
{
  uint64_t v0 = type metadata accessor for JSONObject();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  JSONObject.subscript.getter();
  JSONObject.string.getter();
  uint64_t v5 = v4;
  id v6 = *(void (**)(char *, uint64_t))(v1 + 8);
  v6(v3, v0);
  JSONObject.subscript.getter();
  JSONObject.string.getter();
  uint64_t v8 = v7;
  v6(v3, v0);
  if (!v5)
  {
    NSString v9 = 0;
    if (v8) {
      goto LABEL_3;
    }
LABEL_5:
    NSString v10 = 0;
    goto LABEL_6;
  }
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (!v8) {
    goto LABEL_5;
  }
LABEL_3:
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
LABEL_6:
  id v11 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithPrivacyPolicyUrl:v9 eula:v10];

  return v11;
}

id sub_10007D5F4()
{
  return sub_10007D428();
}

uint64_t sub_10007D60C(uint64_t a1, uint64_t a2)
{
  uint64_t v47 = a2;
  uint64_t v2 = type metadata accessor for JSONContext();
  uint64_t v44 = *(void *)(v2 - 8);
  uint64_t v45 = v2;
  __chkstk_darwin(v2);
  uint64_t v46 = (char *)v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10002EB60(&qword_1001A25F0);
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for JSONArray();
  uint64_t v50 = *(void *)(v7 - 8);
  uint64_t v51 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v43 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v48 = (char *)v42 - v10;
  uint64_t v11 = type metadata accessor for JSONObject();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  NSDictionary v15 = (char *)v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)v42 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)v42 - v19;
  JSONObject.subscript.getter();
  v42[2] = JSONObject.string.getter();
  uint64_t v22 = v21;
  uint64_t v23 = *(void (**)(char *, uint64_t))(v12 + 8);
  v23(v20, v11);
  if (!v22)
  {
    uint64_t v29 = type metadata accessor for JSONError();
    sub_10002ECB0();
    swift_allocError();
    char v31 = v30;
    *uint64_t v30 = 0x6D614E65726E6567;
    unint64_t v32 = 0xE900000000000065;
LABEL_7:
    v30[1] = v32;
    goto LABEL_8;
  }
  uint64_t v49 = v22;
  JSONObject.subscript.getter();
  uint64_t v24 = JSONObject.string.getter();
  uint64_t v26 = v25;
  v23(v18, v11);
  if (!v26)
  {
    swift_bridgeObjectRelease();
    uint64_t v29 = type metadata accessor for JSONError();
    sub_10002ECB0();
    swift_allocError();
    char v31 = v30;
    *uint64_t v30 = 0x444965726E6567;
    unint64_t v32 = 0xE700000000000000;
    goto LABEL_7;
  }
  v42[1] = v24;
  JSONObject.subscript.getter();
  JSONObject.array.getter();
  v23(v15, v11);
  uint64_t v27 = v50;
  uint64_t v28 = v51;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v6, 1, v51) != 1)
  {
    id v33 = v48;
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v48, v6, v28);
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v43, v33, v28);
    (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v46, v47, v45);
    sub_10002EB60(&qword_1001A2768);
    sub_10007DC48();
    uint64_t v34 = Array<A>.init(tryDeserializing:using:)();
    sub_1000713FC(v34);
    swift_bridgeObjectRelease();
    id v35 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    NSString v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v37 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    sub_10007DCA4();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v39 = [v35 initWithGenreName:v36 genreID:v37 subgenres:isa];
    uint64_t v40 = v27;
    uint64_t v29 = (uint64_t)v39;

    (*(void (**)(char *, uint64_t))(v40 + 8))(v33, v28);
    return v29;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10007AE40((uint64_t)v6);
  uint64_t v29 = type metadata accessor for JSONError();
  sub_10002ECB0();
  swift_allocError();
  char v31 = v30;
  *uint64_t v30 = 0x65726E6567627573;
  v30[1] = 0xE900000000000073;
LABEL_8:
  v30[2] = v52;
  (*(void (**)(void *, void, uint64_t))(*(void *)(v29 - 8) + 104))(v31, enum case for JSONError.missingProperty(_:), v29);
  swift_willThrow();
  return v29;
}

uint64_t sub_10007DC30(uint64_t a1, uint64_t a2)
{
  return sub_10007D60C(a1, a2);
}

unint64_t sub_10007DC48()
{
  unint64_t result = qword_1001A2770;
  if (!qword_1001A2770)
  {
    sub_10002ED58(&qword_1001A2768);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A2770);
  }
  return result;
}

unint64_t sub_10007DCA4()
{
  unint64_t result = qword_1001A2778;
  if (!qword_1001A2778)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001A2778);
  }
  return result;
}

id sub_10007DCE4(uint64_t a1, uint64_t a2)
{
  v13[0] = a2;
  v13[1] = a1;
  uint64_t v3 = type metadata accessor for JSONContext();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for JSONObject();
  __chkstk_darwin(v7 - 8);
  sub_10002EB60(&qword_1001A2780);
  JSONObject.subscript.getter();
  uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v8(v6, a2, v3);
  sub_10002EDA0(&qword_1001A2788, &qword_1001A2780);
  ExpressibleByJSON.init(tryDeserializing:using:)();
  uint64_t v9 = v14;
  sub_10002EB60(&qword_1001A2790);
  JSONObject.subscript.getter();
  v8(v6, v13[0], v3);
  sub_10002EDA0(&qword_1001A2798, &qword_1001A2790);
  ExpressibleByJSON.init(tryDeserializing:using:)();
  uint64_t v10 = v14;
  id v11 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithScreenshots:v9 trailers:v14];

  return v11;
}

id sub_10007DF28(uint64_t a1, uint64_t a2)
{
  return sub_10007DCE4(a1, a2);
}

id sub_10007DF40()
{
  uint64_t v0 = type metadata accessor for JSONObject();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  id v6 = (char *)&v16 - v5;
  JSONObject.subscript.getter();
  JSONObject.string.getter();
  uint64_t v8 = v7;
  uint64_t v9 = *(void (**)(char *, uint64_t))(v1 + 8);
  v9(v6, v0);
  JSONObject.subscript.getter();
  JSONObject.string.getter();
  uint64_t v11 = v10;
  v9(v4, v0);
  if (!v8)
  {
    NSString v12 = 0;
    if (v11) {
      goto LABEL_3;
    }
LABEL_5:
    NSString v13 = 0;
    goto LABEL_6;
  }
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (!v11) {
    goto LABEL_5;
  }
LABEL_3:
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
LABEL_6:
  id v14 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithMetadata:v12 description:v13];

  return v14;
}

id sub_10007E138()
{
  return sub_10007DF40();
}

id sub_10007E150()
{
  uint64_t v0 = type metadata accessor for JSONObject();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  JSONObject.subscript.getter();
  JSONObject.string.getter();
  uint64_t v5 = v4;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v5)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v6 = 0;
  }
  id v7 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithProductVariantID:v6];

  return v7;
}

id sub_10007E2A4()
{
  return sub_10007E150();
}

void *sub_10007E2BC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for JSONObject();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  JSONObject.subscript.getter();
  JSONObject.string.getter();
  uint64_t v7 = v6;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v7)
  {
    id v8 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v10 = [v8 initWithContentProviderTeamID:v9];
  }
  else
  {
    uint64_t v10 = (void *)type metadata accessor for JSONError();
    sub_10002ECB0();
    swift_allocError();
    void *v11 = 0xD000000000000015;
    v11[1] = 0x800000010015BFD0;
    v11[2] = v1;
    (*(void (**)(void *, void, void *))(*(v10 - 1) + 104))(v11, enum case for JSONError.missingProperty(_:), v10);
    swift_willThrow();
  }
  return v10;
}

void *sub_10007E49C()
{
  return sub_10007E2BC();
}

void *sub_10007E4B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for JSONObject();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  JSONObject.subscript.getter();
  JSONObject.string.getter();
  uint64_t v7 = v6;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v7)
  {
    id v8 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v10 = [v8 initWithShortName:v9];
  }
  else
  {
    uint64_t v10 = (void *)type metadata accessor for JSONError();
    sub_10002ECB0();
    swift_allocError();
    void *v11 = 0x6D614E74726F6873;
    v11[1] = 0xE900000000000065;
    v11[2] = v1;
    (*(void (**)(void *, void, void *))(*(v10 - 1) + 104))(v11, enum case for JSONError.missingProperty(_:), v10);
    swift_willThrow();
  }
  return v10;
}

void *sub_10007E6A0()
{
  return sub_10007E4B4();
}

id sub_10007E6B8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for JSONObject();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  JSONObject.subscript.getter();
  char v6 = JSONObject.BOOL.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v6 != 2) {
    return [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithRequiresSSOEntitlement:v6 & 1];
  }
  uint64_t v7 = type metadata accessor for JSONError();
  sub_10002ECB0();
  swift_allocError();
  void *v8 = 0xD000000000000016;
  v8[1] = 0x800000010015BFF0;
  v8[2] = v1;
  (*(void (**)(void *, void, uint64_t))(*(void *)(v7 - 8) + 104))(v8, enum case for JSONError.missingProperty(_:), v7);
  return (id)swift_willThrow();
}

id sub_10007E870()
{
  return sub_10007E6B8();
}

id sub_10007E888()
{
  uint64_t v0 = type metadata accessor for JSONObject();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  JSONObject.subscript.getter();
  uint64_t v4 = (void *)JSONObject.number.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  id v5 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithDeviceCornerRadiusFactor:v4];

  return v5;
}

id sub_10007E9AC@<X0>(unint64_t *a1@<X8>)
{
  sub_10002EB60(&qword_1001A4CE0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10014DF50;
  *(void *)(inited + 32) = 0x6C46646C756F6873;
  *(void *)(inited + 40) = 0xEB00000000687375;
  *(unsigned char *)(inited + 48) = [v1 shouldFlush];
  *(void *)(inited + 72) = &type metadata for Bool;
  *(void *)(inited + 80) = 0x73646C656966;
  *(void *)(inited + 88) = 0xE600000000000000;
  id v4 = [v1 fields];
  uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v6 = sub_10002EB60(&qword_1001A2300);
  *(void *)(inited + 96) = v5;
  *(void *)(inited + 120) = v6;
  *(void *)(inited + 128) = 0x6E6964756C636E69;
  *(void *)(inited + 136) = 0xEF73646C65694667;
  id v7 = [v1 includingFields];
  uint64_t v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  NSString v9 = sub_1000661D4(v8);
  swift_bridgeObjectRelease();
  uint64_t v10 = sub_10002EB60((uint64_t *)&unk_1001A45C0);
  *(void *)(inited + 144) = v9;
  *(void *)(inited + 168) = v10;
  *(void *)(inited + 176) = 0x6E6964756C637865;
  *(void *)(inited + 184) = 0xEF73646C65694667;
  id v11 = [v1 excludingFields];
  uint64_t v12 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v13 = sub_1000661D4(v12);
  swift_bridgeObjectRelease();
  *(void *)(inited + 216) = v10;
  *(void *)(inited + 192) = v13;
  unint64_t v14 = sub_100062F68(inited);
  id result = [v1 topic];
  if (result)
  {
    uint64_t v16 = result;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;

    uint64_t v23 = &type metadata for String;
    *(void *)&long long v22 = v17;
    *((void *)&v22 + 1) = v19;
    sub_100042EA8(&v22, v21);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10003EBAC(v21, 0x6369706F74, 0xE500000000000000, isUniquelyReferenced_nonNull_native);
    id result = (id)swift_bridgeObjectRelease();
  }
  a1[3] = v6;
  *a1 = v14;
  return result;
}

char *sub_10007EC34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for JSONContext();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for JSONObject();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for MetricsData();
  uint64_t v24 = *(void *)(v12 - 8);
  uint64_t v25 = v12;
  __chkstk_darwin(v12);
  unint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v15 = v26;
  MetricsData.init(deserializing:using:)();
  if (!v15)
  {
    uint64_t v16 = MetricsData.topic.getter();
    uint64_t v18 = v17;
    char v19 = MetricsData.shouldFlush.getter();
    MetricsData.fields.getter();
    Swift::Int v20 = MetricsData.includingFields.getter();
    sub_100039B0C(v20, (Swift::Int)sub_10007EEEC, 0);
    Swift::Int v21 = MetricsData.excludingFields.getter();
    sub_100039B24(v21, (Swift::Int)sub_10007EF18, 0);
    id v11 = (char *)sub_10007EF44(v16, v18, v19 & 1);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v25);
  }
  return v11;
}

uint64_t sub_10007EEEC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MetricsFieldInclusionRequest.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10007EF18@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MetricsFieldExclusionRequest.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

id sub_10007EF44(uint64_t a1, uint64_t a2, char a3)
{
  if (a2)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v4 = 0;
  }
  id v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v7 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v8 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v9 = [v5 initWithTopic:v4 shouldFlush:a3 & 1 fields:isa includingFields:v7 excludingFields:v8];

  return v9;
}

char *sub_10007F070(uint64_t a1, uint64_t a2)
{
  return sub_10007EC34(a1, a2);
}

uint64_t sub_10007F088()
{
  id v1 = [v0 topic];
  if (v1)
  {
    uint64_t v2 = v1;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  [v0 shouldFlush];
  id v3 = [v0 fields];
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  id v4 = [v0 includingFields];
  uint64_t v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  sub_100039C48(v5, (uint64_t)sub_10007F23C, 0);
  id v6 = [v0 includingFields];
  uint64_t v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  sub_100039EC8(v7, (uint64_t)sub_10007F254, 0);

  return MetricsData.init(topic:shouldFlush:fields:includingFields:excludingFields:)();
}

uint64_t sub_10007F23C(uint64_t *a1)
{
  return sub_10007F26C(a1, (uint64_t (*)(uint64_t, uint64_t))&MetricsFieldInclusionRequest.init(rawValue:));
}

uint64_t sub_10007F254(uint64_t *a1)
{
  return sub_10007F26C(a1, (uint64_t (*)(uint64_t, uint64_t))&MetricsFieldExclusionRequest.init(rawValue:));
}

uint64_t sub_10007F26C(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  swift_bridgeObjectRetain();

  return a2(v2, v3);
}

unint64_t sub_10007F2D0@<X0>(void *a1@<X8>)
{
  type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin();
  uint64_t v2 = type metadata accessor for OSLogger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v19[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::Int v20 = &type metadata for Feature;
  unint64_t v21 = sub_100070914();
  LOBYTE(v19[0]) = 0;
  char v6 = isFeatureEnabled(_:)();
  sub_10002ED08((uint64_t)v19);
  if (v6)
  {
    if (qword_1001A0E80 != -1) {
      swift_once();
    }
    uint64_t v7 = sub_10002F6AC(v2, (uint64_t)qword_1001AE3C8);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v7, v2);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v8._uint64_t countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v8);
    Swift::Int v20 = &type metadata for Feature;
    LOBYTE(v19[0]) = 0;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_1000709E0((uint64_t)v19);
    v9._object = (void *)0x800000010015C060;
    v9._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v9);
    LogMessage.init(stringInterpolation:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    a1[3] = sub_10007F7C8();
    a1[4] = &protocol witness table for ACAccountStore;
    type metadata accessor for BaseObjectGraph();
    return inject<A, B>(_:from:)();
  }
  else
  {
    if (qword_1001A0E80 != -1) {
      swift_once();
    }
    uint64_t v11 = sub_10002F6AC(v2, (uint64_t)qword_1001AE3C8);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v11, v2);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v12._uint64_t countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v12);
    Swift::Int v20 = &type metadata for Feature;
    LOBYTE(v19[0]) = 0;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_1000709E0((uint64_t)v19);
    v13._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
    v13._object = (void *)0x800000010015C030;
    LogMessage.StringInterpolation.appendLiteral(_:)(v13);
    LogMessage.init(stringInterpolation:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    sub_10007F7C8();
    type metadata accessor for BaseObjectGraph();
    inject<A, B>(_:from:)();
    unint64_t v14 = (void *)v19[0];
    id v15 = [self defaultCenter];
    uint64_t active = type metadata accessor for ActiveITunesAccountProvider();
    swift_allocObject();
    uint64_t v17 = sub_10002EE70(v14, v15);
    a1[3] = active;
    unint64_t result = sub_10007F808();
    a1[4] = result;
    *a1 = v17;
  }
  return result;
}

unint64_t sub_10007F7C8()
{
  unint64_t result = qword_1001A27A0;
  if (!qword_1001A27A0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001A27A0);
  }
  return result;
}

unint64_t sub_10007F808()
{
  unint64_t result = qword_1001A27A8;
  if (!qword_1001A27A8)
  {
    type metadata accessor for ActiveITunesAccountProvider();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A27A8);
  }
  return result;
}

void *sub_10007F860(uint64_t a1)
{
  uint64_t v37 = type metadata accessor for AdamID();
  uint64_t v3 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  NSString v36 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for App();
  uint64_t v5 = *(void *)(v35 - 8);
  uint64_t v6 = __chkstk_darwin(v35);
  uint64_t v34 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v33 = (char *)v27 - v8;
  uint64_t v9 = *(void *)(a1 + 16);
  unint64_t result = _swiftEmptyArrayStorage;
  if (v9)
  {
    v27[1] = v1;
    id v39 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    unint64_t result = (void *)sub_10008434C(a1);
    uint64_t v11 = v5;
    int64_t v12 = (int64_t)result;
    int v14 = v13;
    int v16 = v15 & 1;
    uint64_t v31 = v11;
    uint64_t v32 = a1 + 56;
    uint64_t v29 = v11 + 32;
    uint64_t v30 = v11 + 16;
    v27[2] = v11 + 8;
    uint64_t v28 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v17 = v11;
    uint64_t v18 = v34;
    while ((v12 & 0x8000000000000000) == 0 && v12 < 1 << *(unsigned char *)(a1 + 32))
    {
      if (((*(void *)(v32 + (((unint64_t)v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
        goto LABEL_11;
      }
      if (*(_DWORD *)(a1 + 36) != v14) {
        goto LABEL_12;
      }
      int64_t v19 = *(void *)(a1 + 48) + *(void *)(v17 + 72) * v12;
      Swift::Int v20 = *(void (**)(char *, int64_t, uint64_t))(v17 + 16);
      unint64_t v21 = v33;
      uint64_t v22 = v35;
      int v38 = v16;
      v20(v33, v19, v35);
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v18, v21, v22);
      uint64_t v23 = v36;
      App.id.getter();
      uint64_t v24 = AdamID.int64Value.getter();
      (*v28)(v23, v37);
      [objc_allocWithZone((Class)ASCAdamID) initWithInt64:v24];
      (*(void (**)(char *, uint64_t))(v17 + 8))(v18, v22);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      unint64_t result = (void *)sub_1000843F0(v12, v14, v38 & 1, a1);
      int64_t v12 = (int64_t)result;
      int v14 = v25;
      int v16 = v26 & 1;
      if (!--v9)
      {
        sub_100034F00((uint64_t)result, v25, v16);
        return v39;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  return result;
}

uint64_t sub_10007FBA8()
{
  return dispatch thunk of static EventEmitter.defaultScheduler.getter();
}

void *sub_10007FBD0(void *result)
{
  uint64_t v2 = result[2];
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  unint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= v3[3] >> 1)
  {
    if (v6[2]) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  unint64_t result = sub_100076850(result, v10, 1, v3);
  uint64_t v3 = result;
  if (!v6[2])
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((v3[3] >> 1) - v3[2] < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  sub_10002EB60(&qword_1001A25A8);
  unint64_t result = (void *)swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    unint64_t result = (void *)swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = v3[2];
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    v3[2] = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

void *sub_10007FCD0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10002EB60(&qword_1001A28C0);
  uint64_t v24 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for OSLogger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v26 = &type metadata for Feature;
  unint64_t v27 = sub_100070914();
  v25[0] = 0;
  char v12 = isFeatureEnabled(_:)();
  sub_10002ED08((uint64_t)v25);
  if (v12)
  {
    if (qword_1001A0E80 != -1) {
      swift_once();
    }
    uint64_t v13 = sub_10002F6AC(v8, (uint64_t)qword_1001AE3C8);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v13, v8);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v14._uint64_t countAndFlagsBits = 0;
    v14._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v14);
    char v26 = &type metadata for Feature;
    v25[0] = 0;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_100034B8C((uint64_t)v25, &qword_1001A1C50);
    v15._object = (void *)0x800000010015C230;
    v15._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v15);
    LogMessage.init(stringInterpolation:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v1[2] = sub_100086728() | 0x8000000000000000;
    swift_retain();
    v1[3] = StorefrontAppStateController.onLoad.getter();
    uint64_t v16 = StorefrontAppStateController.onStateChange.getter();
    swift_release();
    swift_release();
    v1[4] = v16;
  }
  else
  {
    v23[1] = a1;
    if (qword_1001A0E80 != -1) {
      swift_once();
    }
    uint64_t v17 = sub_10002F6AC(v8, (uint64_t)qword_1001AE3C8);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v17, v8);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v18._uint64_t countAndFlagsBits = 0;
    v18._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v18);
    char v26 = &type metadata for Feature;
    v25[0] = 0;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_100034B8C((uint64_t)v25, &qword_1001A1C50);
    v19._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
    v19._object = (void *)0x800000010015C200;
    LogMessage.StringInterpolation.appendLiteral(_:)(v19);
    LogMessage.init(stringInterpolation:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v1[2] = sub_1000861A0();
    sub_10002EB60(&qword_1001A28C8);
    swift_allocObject();
    swift_retain();
    v1[3] = AsyncEvent.init()();
    sub_10002EB60(&qword_1001A28D0);
    swift_allocObject();
    v1[4] = AsyncEvent.init()();
    uint64_t v20 = swift_allocObject();
    swift_weakInit();
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = sub_100087200;
    *(void *)(v21 + 24) = v20;
    sub_10002EB60(&qword_1001A28D8);
    sub_100061D9C(&qword_1001A28E0, &qword_1001A28D8);
    dispatch thunk of static EventEmitter.defaultScheduler.getter();
    EventEmitter.addObserver(on:singleUse:_:)();
    swift_release();
    swift_release();
    sub_10002ED08((uint64_t)v25);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v6, v4);
    swift_release();
  }
  return v2;
}

uint64_t sub_100080348(void *a1, uint64_t a2, void (*a3)(void, void, void), int a4, uint64_t a5)
{
  double v35 = *(double *)&a2;
  uint64_t v36 = a5;
  int v33 = a4;
  uint64_t v32 = a3;
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v6 - 8);
  uint64_t v37 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for OSLogger();
  uint64_t v41 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v40 = (uint64_t (**)(char *, uint64_t))((char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v34 = sub_10002EB60(&qword_1001A2118);
  __chkstk_darwin(v34);
  uint64_t v31 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for State();
  uint64_t v30 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  char v12 = (double *)((char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for App.Kind();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for AdamID();
  __chkstk_darwin(v17 - 8);
  uint64_t v18 = type metadata accessor for App();
  Swift::String v19 = *(uint64_t (***)(char *, uint64_t))(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v39 = a1;
  [a1 int64value];
  AdamID.init(value:)();
  uint64_t v40 = v19;
  uint64_t v41 = v18;
  id v39 = (void *)v10;
  uint64_t v23 = v34;
  double v22 = v35;
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, enum case for App.Kind.store(_:), v13);
  App.init(id:kind:)();
  swift_beginAccess();
  if (!swift_weakLoadStrong()) {
    return v40[1](v21, v41);
  }
  swift_retain();
  swift_release();
  sub_1000655CC(v22, v32, v33, v12);
  uint64_t v24 = (uint64_t)v31;
  uint64_t v25 = &v31[*(int *)(v23 + 48)];
  unint64_t v27 = v40;
  uint64_t v26 = v41;
  ((void (*)(char *, char *, uint64_t))v40[2])(v31, v21, v41);
  (*(void (**)(char *, double *, void *))(v30 + 32))(v25, v12, v39);
  AsyncEvent.post(_:)();
  swift_release();
  sub_100034B8C(v24, &qword_1001A2118);
  return v27[1](v21, v26);
}

uint64_t sub_10008098C()
{
  if ((*(void *)(v0 + 16) & 0x8000000000000000) != 0)
  {
    swift_retain();
    char v2 = StorefrontAppStateController.isLoaded.getter();
    swift_release();
    return v2 & 1;
  }
  else
  {
    swift_retain();
    OS_dispatch_queue.sync<A>(execute:)();
    swift_release();
    return v3;
  }
}

uint64_t sub_100080A28()
{
  *(void *)(v1 + 56) = v0;
  return _swift_task_switch(sub_100080A48, 0, 0);
}

uint64_t sub_100080A48()
{
  uint64_t v1 = *(void *)(v0[7] + 16);
  v0[8] = v1;
  if (v1 < 0)
  {
    swift_retain();
    uint64_t v6 = (void *)swift_task_alloc();
    v0[9] = v6;
    void *v6 = v0;
    v6[1] = sub_100080BD8;
    return StorefrontAppStateController.loadDataSources()();
  }
  else
  {
    swift_retain();
    sub_1000C0B0C();
    uint64_t v2 = sub_10002EE34(0, (unint64_t *)&qword_1001A2170);
    swift_retain();
    uint64_t v3 = static OS_dispatch_queue.main.getter();
    v0[5] = v2;
    v0[6] = &protocol witness table for OS_dispatch_queue;
    v0[2] = v3;
    Promise.always(on:perform:)();
    swift_release();
    swift_release();
    swift_release();
    sub_10002ED08((uint64_t)(v0 + 2));
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_100080BD8()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100080D54;
  }
  else {
    uint64_t v2 = sub_100080CEC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100080CEC()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100080D54()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100080DBC()
{
  return AsyncEvent.post(_:)();
}

uint64_t sub_100080DE0(char a1)
{
  *(void *)(v2 + 16) = v1;
  *(unsigned char *)(v2 + 48) = a1;
  return _swift_task_switch(sub_100080E04, 0, 0);
}

uint64_t sub_100080E04()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + 16);
  *(void *)(v0 + 24) = v1;
  if (v1 < 0)
  {
    swift_retain();
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 32) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100080F3C;
    uint64_t v4 = *(unsigned __int8 *)(v0 + 48);
    return StorefrontAppStateController.reloadAllStates(synchronizing:)(v4);
  }
  else
  {
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    return _assertionFailure(_:_:file:line:flags:)();
  }
}

uint64_t sub_100080F3C()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000810B8;
  }
  else {
    uint64_t v2 = sub_100081050;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100081050()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000810B8()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100081120(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 72) = a2;
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = v2;
  return _swift_task_switch(sub_100081144, 0, 0);
}

uint64_t sub_100081144()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + 16);
  *(void *)(v0 + 32) = v1;
  if (v1 < 0)
  {
    swift_retain();
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 56) = v6;
    void *v6 = v0;
    v6[1] = sub_100081460;
    uint64_t v7 = *(unsigned __int8 *)(v0 + 72);
    uint64_t v8 = *(void *)(v0 + 16);
    return StorefrontAppStateController.reloadState(forApps:synchronizing:)(v8, v7);
  }
  else
  {
    char v2 = *(unsigned char *)(v0 + 72);
    uint64_t v3 = *(void *)(v0 + 16);
    uint64_t v4 = swift_task_alloc();
    *(void *)(v0 + 40) = v4;
    *(void *)(v4 + 16) = v1;
    *(void *)(v4 + 24) = v3;
    *(unsigned char *)(v4 + 32) = v2;
    swift_retain();
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 48) = v5;
    void *v5 = v0;
    v5[1] = sub_1000812E4;
    return withCheckedContinuation<A>(isolation:function:_:)();
  }
}

uint64_t sub_1000812E4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1000813FC, 0, 0);
}

uint64_t sub_1000813FC()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100081460()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    char v2 = sub_1000815DC;
  }
  else {
    char v2 = sub_100081574;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100081574()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000815DC()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100081644(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = sub_10002EB60(&qword_1001A28A8);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = sub_10007F860(a3);
  uint64_t v11 = sub_100042CE4((unint64_t)v10);
  swift_bridgeObjectRelease();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16))(&v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v7);
  unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = swift_allocObject();
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v8 + 32))(v13 + v12, &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], v7);
  sub_1000C1020(v11, a4, (uint64_t)sub_100087100, v13, 30.0);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000817D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, double *a3@<X8>)
{
  uint64_t v7 = *(void *)(v3 + 16);
  swift_retain();
  if (v7 < 0)
  {
    StorefrontAppStateController.state(forApp:initialState:applying:)();
  }
  else
  {
    id v8 = sub_100066DD4(a1, a2);
    uint64_t v9 = sub_100064850();
    uint64_t v11 = v10;
    char v13 = v12;
    id v14 = [objc_allocWithZone((Class)ASCOfferContext) init];
    uint64_t v15 = sub_1000858BC(v8, v14, v9, v11, v13, v7);
    uint64_t v17 = v16;
    char v19 = v18;

    sub_10004282C(v9, v11, v13);
    sub_1000655CC(*(double *)&v15, v17, v19, a3);
    sub_10004282C(v15, (uint64_t)v17, v19);
  }

  return swift_release();
}

uint64_t sub_10008190C@<X0>(double *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AdamID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v1 + 16);
  if ((v7 & 0x8000000000000000) == 0)
  {
    swift_retain();
    App.id.getter();
    uint64_t v8 = AdamID.int64Value.getter();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    id v9 = [objc_allocWithZone((Class)ASCAdamID) initWithInt64:v8];
    uint64_t v10 = swift_bridgeObjectRetain();
    uint64_t v11 = sub_100085E58(v10, (uint64_t)v9);
    swift_bridgeObjectRelease();
    uint64_t v12 = sub_100067DD8((uint64_t)v11);
    id v14 = v13;
    char v16 = v15;
    LODWORD(v8) = ~v15;
    uint64_t v17 = swift_bridgeObjectRelease();
    if (v8)
    {
      __chkstk_darwin(v17);
      v19[-6] = v7;
      v19[-5] = v12;
      v19[-4] = v14;
      LOBYTE(v19[-3]) = v16;
      v19[-2] = v9;
      OS_dispatch_queue.sync<A>(execute:)();
      if (LOBYTE(v19[0]) == 1)
      {

LABEL_10:
        sub_1000655CC(*(double *)&v12, v14, v16, a1);
        sub_10004282C(v12, (uint64_t)v14, v16);
        return swift_release();
      }
      uint64_t v17 = sub_100067F10(v12, (uint64_t)v14, v16);
    }
    __chkstk_darwin(v17);
    v19[-6] = v7;
    v19[-5] = v9;
    *(_OWORD *)&v19[-4] = xmmword_10014DF80;
    LOBYTE(v19[-2]) = 6;
    OS_dispatch_queue.sync<A>(execute:)();

    uint64_t v12 = v19[0];
    id v14 = (void (*)(void, void, void))v19[1];
    char v16 = v20;
    goto LABEL_10;
  }
  swift_retain();
  StorefrontAppStateController.prospectiveState(forApp:applying:)();

  return swift_release();
}

uint64_t sub_100081BF4()
{
  uint64_t v1 = type metadata accessor for AdamID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = *(void *)(v0 + 16);
  swift_retain();
  if (v5 < 0)
  {
    char v16 = StorefrontAppStateController.canTransitionState(forApp:to:)();
    swift_release();
    return v16 & 1;
  }
  else
  {
    App.id.getter();
    uint64_t v6 = AdamID.int64Value.getter();
    (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
    id v7 = [objc_allocWithZone((Class)ASCAdamID) initWithInt64:v6];
    uint64_t v8 = sub_100064850();
    uint64_t v10 = v9;
    char v12 = v11;
    uint64_t v13 = __chkstk_darwin(v8);
    *(void *)&v17[-48] = v5;
    *(void *)&v17[-40] = v13;
    *(void *)&v17[-32] = v10;
    v17[-24] = v14;
    *(void *)&v17[-16] = v7;
    OS_dispatch_queue.sync<A>(execute:)();
    sub_10004282C(v8, v10, v12);
    swift_release();

    return v17[15];
  }
}

uint64_t sub_100081DD4()
{
  uint64_t v1 = type metadata accessor for AdamID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(void *)(v0 + 16) & 0x8000000000000000) != 0)
  {
    swift_retain();
    char v13 = StorefrontAppStateController.transitionState(forApp:to:)();
    swift_release();
    return v13 & 1;
  }
  else
  {
    swift_retain();
    App.id.getter();
    uint64_t v5 = AdamID.int64Value.getter();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    id v6 = [objc_allocWithZone((Class)ASCAdamID) initWithInt64:v5];
    uint64_t v7 = sub_100064850();
    uint64_t v9 = v8;
    char v11 = v10;
    LOBYTE(v5) = sub_1000C16FC((uint64_t)v6, v7, v8, v10);
    sub_10004282C(v7, v9, v11);
    swift_release();

    return v5 & 1;
  }
}

uint64_t sub_100081F68()
{
  uint64_t v1 = type metadata accessor for AdamID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v11[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = *(void *)(v0 + 16);
  swift_retain();
  if (v5 < 0)
  {
    char v10 = StorefrontAppStateController.postsChanges(forApp:)();
    swift_release();
    return v10 & 1;
  }
  else
  {
    App.id.getter();
    uint64_t v6 = AdamID.int64Value.getter();
    (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
    id v7 = [objc_allocWithZone((Class)ASCAdamID) initWithInt64:v6];
    uint64_t v8 = __chkstk_darwin(v7);
    *(void *)&v11[-16] = v5;
    *(void *)&v11[-8] = v8;
    OS_dispatch_queue.sync<A>(execute:)();
    swift_release();

    return v11[15];
  }
}

void sub_100082108(char a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AdamID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  char v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v1 + 16);
  if (v11 < 0)
  {
    swift_retain();
    StorefrontAppStateController.setPostsChanges(_:forApp:)();
    swift_release();
  }
  else
  {
    swift_retain();
    App.id.getter();
    uint64_t v12 = AdamID.int64Value.getter();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    id v13 = [objc_allocWithZone((Class)ASCAdamID) initWithInt64:v12];
    sub_10002EB60(&qword_1001A2880);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_10014CED0;
    static DispatchWorkItemFlags.barrier.getter();
    v16[1] = v14;
    sub_100087278((unint64_t *)&qword_1001A2888, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10002EB60((uint64_t *)&unk_1001A31A0);
    sub_100061D9C((unint64_t *)&qword_1001A2890, (uint64_t *)&unk_1001A31A0);
    uint64_t v15 = dispatch thunk of SetAlgebra.init<A>(_:)();
    __chkstk_darwin(v15);
    LOBYTE(v16[-4]) = a1 & 1;
    v16[-3] = v11;
    v16[-2] = v13;
    OS_dispatch_queue.sync<A>(flags:execute:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_release();
  }
}

uint64_t sub_100082450(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AppInstallationType();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AdamID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(void *)(v2 + 16) & 0x8000000000000000) != 0)
  {
    swift_retain();
    char v16 = StorefrontAppStateController.setWaiting(forApp:installationType:)();
    swift_release();
    return v16 & 1;
  }
  else
  {
    swift_retain();
    App.id.getter();
    uint64_t v12 = AdamID.int64Value.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    id v13 = [objc_allocWithZone((Class)ASCAdamID) initWithInt64:v12];
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
    int v14 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
    if (v14 == enum case for AppInstallationType.purchase(_:))
    {
      uint64_t v15 = 1;
    }
    else if (v14 == enum case for AppInstallationType.update(_:))
    {
      uint64_t v15 = 2;
    }
    else if (v14 == enum case for AppInstallationType.redownload(_:))
    {
      uint64_t v15 = 3;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      uint64_t v15 = 0;
    }
    sub_1000C1918((uint64_t)v13, v15);

    swift_release();
    return 1;
  }
}

uint64_t sub_1000826DC()
{
  uint64_t v1 = type metadata accessor for AdamID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v0 + 16);
  if (v5 < 0)
  {
    swift_retain();
    char v16 = StorefrontAppStateController.clearWaiting(forApp:refreshState:)();
    swift_release();
    return v16 & 1;
  }
  else
  {
    swift_retain();
    App.id.getter();
    uint64_t v6 = AdamID.int64Value.getter();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    id v7 = [objc_allocWithZone((Class)ASCAdamID) initWithInt64:v6];
    uint64_t v8 = *(void *)(v5 + 16);
    uint64_t v9 = *(void *)(v8 + 16);
    if (v9)
    {
      swift_bridgeObjectRetain();
      uint64_t v10 = (uint64_t *)(v8 + 40);
      do
      {
        uint64_t v11 = *v10;
        uint64_t ObjectType = swift_getObjectType();
        id v13 = *(void (**)(id, uint64_t, uint64_t))(v11 + 56);
        swift_unknownObjectRetain();
        v13(v7, ObjectType, v11);
        swift_unknownObjectRelease();
        v10 += 2;
        --v9;
      }
      while (v9);
      swift_bridgeObjectRelease();
    }
    id v14 = v7;
    sub_1000832D4((uint64_t)v14);

    swift_release();
    return 1;
  }
}

uint64_t sub_1000828B8()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ASCMigrationAppStateControllerImplementation()
{
  return self;
}

void *initializeBufferWithCopyOfBuffer for ASCMigrationAppStateControllerImplementation.Store(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for ASCMigrationAppStateControllerImplementation.Store()
{
  return swift_release();
}

void *assignWithCopy for ASCMigrationAppStateControllerImplementation.Store(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for DefaultAppStateController.DataSourceState(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

void *assignWithTake for ASCMigrationAppStateControllerImplementation.Store(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ASCMigrationAppStateControllerImplementation.Store(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7F && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 127);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 6) | (2 * ((*(void *)a1 >> 57) & 0x38 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ASCMigrationAppStateControllerImplementation.Store(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(void *)unint64_t result = a2 - 127;
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_100082A9C(void *a1)
{
  return *a1 >> 63;
}

void *sub_100082AA8(void *result)
{
  *result &= ~0x8000000000000000;
  return result;
}

uint64_t *sub_100082AB8(uint64_t *result, uint64_t a2)
{
  *unint64_t result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for ASCMigrationAppStateControllerImplementation.Store()
{
  return &type metadata for ASCMigrationAppStateControllerImplementation.Store;
}

uint64_t sub_100082ADC()
{
  return sub_10008098C() & 1;
}

uint64_t sub_100082B04()
{
  return swift_retain();
}

uint64_t sub_100082B10()
{
  uint64_t v2 = *v0;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100053090;
  v3[7] = v2;
  return _swift_task_switch(sub_100080A48, 0, 0);
}

uint64_t sub_100082BBC(char a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = sub_100053090;
  *(void *)(v5 + 16) = v4;
  *(unsigned char *)(v5 + 48) = a1;
  return _swift_task_switch(sub_100080E04, 0, 0);
}

uint64_t sub_100082C6C(uint64_t a1, char a2)
{
  uint64_t v6 = *v2;
  uint64_t v7 = swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *(void *)uint64_t v7 = v3;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = v6;
  *(unsigned char *)(v7 + 72) = a2;
  *(void *)(v7 + 8) = sub_10002F874;
  return _swift_task_switch(sub_100081144, 0, 0);
}

uint64_t sub_100082D2C(uint64_t a1)
{
  if ((*(void *)(*(void *)v1 + 16) & 0x8000000000000000) != 0)
  {
    swift_retain();
    StorefrontAppStateController.preloadState(forApps:)();
    return swift_release();
  }
  else
  {
    swift_retain();
    uint64_t v3 = sub_10007F860(a1);
    uint64_t v4 = sub_100042CE4((unint64_t)v3);
    swift_bridgeObjectRelease();
    sub_1000C1318(v4);
    swift_release();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100082DE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, double *a3@<X8>)
{
  return sub_1000817D0(a1, a2, a3);
}

uint64_t sub_100082E0C@<X0>(double *a1@<X8>)
{
  return sub_10008190C(a1);
}

uint64_t sub_100082E30()
{
  return sub_100081BF4() & 1;
}

uint64_t sub_100082E58()
{
  return sub_100081DD4() & 1;
}

uint64_t sub_100082E80()
{
  return swift_retain();
}

uint64_t sub_100082E8C()
{
  return sub_100081F68() & 1;
}

void sub_100082EB4(char a1)
{
}

uint64_t sub_100082ED8(uint64_t a1, uint64_t a2)
{
  return sub_100082450(a1, a2) & 1;
}

uint64_t sub_100082F00()
{
  return sub_1000826DC() & 1;
}

uint64_t sub_100082F28(uint64_t a1, uint64_t a2)
{
  v3[2] = a1;
  v3[3] = a2;
  v3[4] = *v2;
  return _swift_task_switch(sub_100082F50, 0, 0);
}

uint64_t sub_100082F50()
{
  uint64_t v1 = *(void *)(v0[4] + 16);
  v0[5] = v1;
  if (v1 < 0)
  {
    swift_retain();
    uint64_t v7 = (void *)swift_task_alloc();
    v0[6] = v7;
    void *v7 = v0;
    v7[1] = sub_100083074;
    uint64_t v9 = v0[2];
    uint64_t v8 = v0[3];
    return StorefrontAppStateController.refreshUpdateRegistry(forApp:with:)(v9, v8);
  }
  else
  {
    uint64_t v3 = v0[2];
    uint64_t v2 = v0[3];
    swift_retain();
    id v4 = sub_100066DD4(v3, v2);
    sub_100085B84(v4, v1);

    swift_release();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_100083074()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100083170, 0, 0);
}

uint64_t sub_100083170()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000831D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10008326C(a1, a2, a3, (uint64_t (*)(uint64_t))&StorefrontAppStateController.isLocal(app:));
}

uint64_t sub_1000831EC()
{
  if ((*(void *)(*(void *)v0 + 16) & 0x8000000000000000) == 0) {
    return 0;
  }
  swift_retain();
  char v2 = StorefrontAppStateController.isRedownloadable(app:includingPreorders:)();
  swift_release();
  return v2 & 1;
}

uint64_t sub_100083254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10008326C(a1, a2, a3, (uint64_t (*)(uint64_t))&StorefrontAppStateController.purchaseHistoryIncludes(app:));
}

uint64_t sub_10008326C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  if ((*(void *)(*(void *)v4 + 16) & 0x8000000000000000) == 0) {
    return 0;
  }
  swift_retain();
  LOBYTE(a4) = a4(a1);
  swift_release();
  return a4 & 1;
}

uint64_t sub_1000832D4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v15 = *(void *)(v8 - 8);
  uint64_t v16 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = a1;
  sub_10002EE34(0, (unint64_t *)&unk_1001A3180);
  static OS_os_log.default.getter();
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  uint64_t v11 = (void *)static OS_os_log.default.getter();
  os_signpost(_:dso:log:name:signpostID:)();

  sub_10002EB60(&qword_1001A2880);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_10014CED0;
  static DispatchWorkItemFlags.barrier.getter();
  uint64_t v19 = v12;
  sub_100087278((unint64_t *)&qword_1001A2888, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10002EB60((uint64_t *)&unk_1001A31A0);
  sub_100061D9C((unint64_t *)&qword_1001A2890, (uint64_t *)&unk_1001A31A0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v17 = v2;
  uint64_t v18 = &v20;
  OS_dispatch_queue.sync<A>(flags:execute:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  static os_signpost_type_t.end.getter();
  id v13 = (void *)static OS_os_log.default.getter();
  os_signpost(_:dso:log:name:signpostID:)();

  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v10, v16);
}

uint64_t sub_100083610(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v15 = *(void *)(v8 - 8);
  uint64_t v16 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = a1;
  sub_10002EE34(0, (unint64_t *)&unk_1001A3180);
  static OS_os_log.default.getter();
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  uint64_t v11 = (void *)static OS_os_log.default.getter();
  os_signpost(_:dso:log:name:signpostID:)();

  sub_10002EB60(&qword_1001A2880);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_10014CED0;
  static DispatchWorkItemFlags.barrier.getter();
  uint64_t v19 = v12;
  sub_100087278((unint64_t *)&qword_1001A2888, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10002EB60((uint64_t *)&unk_1001A31A0);
  sub_100061D9C((unint64_t *)&qword_1001A2890, (uint64_t *)&unk_1001A31A0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v17 = v2;
  uint64_t v18 = &v20;
  OS_dispatch_queue.sync<A>(flags:execute:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  static os_signpost_type_t.end.getter();
  id v13 = (void *)static OS_os_log.default.getter();
  os_signpost(_:dso:log:name:signpostID:)();

  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v10, v16);
}

void sub_10008394C(uint64_t a1, void *a2)
{
  swift_beginAccess();
  sub_10002EB60(&qword_1001A2898);
  Dictionary.reserveCapacity(_:)(1);
  swift_endAccess();
  uint64_t v35 = a1;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v34 = a2;
    id v6 = a2;
    swift_bridgeObjectRetain();
    uint64_t v7 = (uint64_t *)(v4 + 40);
    uint64_t v8 = (char *)_swiftEmptyArrayStorage;
    do
    {
      uint64_t v10 = *v7;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v12 = *(uint64_t (**)(id, uint64_t, uint64_t))(v10 + 40);
      swift_unknownObjectRetain();
      uint64_t v13 = v12(v6, ObjectType, v10);
      uint64_t v15 = v14;
      char v17 = v16;
      int v18 = ~v16;
      swift_unknownObjectRelease();
      if (v18)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v8 = sub_100076738(0, *((void *)v8 + 2) + 1, 1, v8);
        }
        unint64_t v20 = *((void *)v8 + 2);
        unint64_t v19 = *((void *)v8 + 3);
        if (v20 >= v19 >> 1) {
          uint64_t v8 = sub_100076738((char *)(v19 > 1), v20 + 1, 1, v8);
        }
        *((void *)v8 + 2) = v20 + 1;
        uint64_t v9 = &v8[24 * v20];
        *((void *)v9 + 4) = v13;
        *((void *)v9 + 5) = v15;
        v9[48] = v17;
      }
      v7 += 2;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    a2 = v34;
  }
  else
  {
    id v21 = a2;
    uint64_t v8 = (char *)_swiftEmptyArrayStorage;
  }
  if (*((void *)v8 + 2) == 1 && v8[48] >= 6u && *((_OWORD *)v8 + 2) >= 2uLL)
  {
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v28 = sub_10003B6E4((uint64_t)a2);
    uint64_t v30 = v29;
    char v32 = v31;
    swift_endAccess();
    sub_100067F10(v28, v30, v32);
    if ([*(id *)(v35 + 40) containsObject:a2])
    {
      id v33 = a2;
      AsyncEvent.post(_:)();

      return;
    }
  }
  else
  {
    uint64_t v22 = sub_100067DD8((uint64_t)v8);
    uint64_t v24 = v23;
    uint64_t v26 = v25;
    int v27 = ~(_BYTE)v25;
    swift_bridgeObjectRelease();
    if (v27)
    {
      sub_1000C1FC4(a2, v22, v24, v26);

      sub_100067F10(v22, v24, v26);
      return;
    }
  }
}

void sub_100083C24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0) {
    Swift::Int v4 = __CocoaSet.count.getter();
  }
  else {
    Swift::Int v4 = *(void *)(a2 + 16);
  }
  swift_beginAccess();
  sub_10002EB60(&qword_1001A2898);
  uint64_t v57 = (uint64_t *)(a1 + 32);
  Dictionary.reserveCapacity(_:)(v4);
  swift_endAccess();
  if (v3)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
    sub_100062134();
    Set.Iterator.init(_cocoa:)();
    uint64_t v2 = v65;
    uint64_t v59 = v66;
    uint64_t v6 = v67;
    uint64_t v5 = v68;
    unint64_t v7 = v69;
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
    uint64_t v59 = v2 + 56;
    uint64_t v6 = ~v8;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v7 = v10 & *(void *)(v2 + 56);
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
  }
  int64_t v58 = (unint64_t)(v6 + 64) >> 6;
  uint64_t v11 = a1;
  uint64_t v60 = v2;
  while (v2 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_78;
    }
    sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v16 = v64;
    swift_unknownObjectRelease();
    uint64_t v62 = v7;
    uint64_t v63 = v5;
    if (!v64) {
      goto LABEL_78;
    }
LABEL_37:
    uint64_t v21 = *(void *)(*(void *)(v11 + 16) + 16);
    if (v21)
    {
      uint64_t v22 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
      uint64_t v23 = (char *)_swiftEmptyArrayStorage;
      do
      {
        uint64_t v25 = *v22;
        uint64_t ObjectType = swift_getObjectType();
        int v27 = *(uint64_t (**)(id, uint64_t, uint64_t))(v25 + 40);
        swift_unknownObjectRetain();
        uint64_t v28 = v27(v16, ObjectType, v25);
        uint64_t v30 = v29;
        char v32 = v31;
        int v33 = ~v31;
        swift_unknownObjectRelease();
        if (v33)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v23 = sub_100076738(0, *((void *)v23 + 2) + 1, 1, v23);
          }
          unint64_t v35 = *((void *)v23 + 2);
          unint64_t v34 = *((void *)v23 + 3);
          if (v35 >= v34 >> 1) {
            uint64_t v23 = sub_100076738((char *)(v34 > 1), v35 + 1, 1, v23);
          }
          *((void *)v23 + 2) = v35 + 1;
          uint64_t v24 = &v23[24 * v35];
          *((void *)v24 + 4) = v28;
          *((void *)v24 + 5) = v30;
          v24[48] = v32;
        }
        v22 += 2;
        --v21;
      }
      while (v21);
      swift_bridgeObjectRelease();
      uint64_t v2 = v60;
      uint64_t v11 = a1;
      uint64_t v36 = *((void *)v23 + 2);
      if (!v36)
      {
LABEL_55:

        swift_bridgeObjectRelease();
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v23 = (char *)_swiftEmptyArrayStorage;
      uint64_t v36 = _swiftEmptyArrayStorage[2];
      if (!v36) {
        goto LABEL_55;
      }
    }
    if (v36 != 1)
    {
      uint64_t v12 = v23[48];
LABEL_57:
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      uint64_t v48 = v23 + 56;
      uint64_t v49 = 2;
      uint64_t v13 = *((void *)v23 + 4);
      uint64_t v14 = *((void *)v23 + 5);
      uint64_t v50 = 1;
      uint64_t v51 = v13;
      uint64_t v52 = v14;
      uint64_t v53 = v12;
      int v54 = v12;
      if (!(_BYTE)v12) {
        goto LABEL_61;
      }
LABEL_58:
      if (v54 == 4)
      {
        uint64_t v13 = v51;
        uint64_t v14 = v52;
        uint64_t v12 = v53;
        goto LABEL_12;
      }
      LOBYTE(v54) = 1;
      if (v36 == v50)
      {
LABEL_66:
        if (v54)
        {
          sub_100042814(*((void *)v23 + 4), *((void *)v23 + 5), v12);
          goto LABEL_12;
        }
      }
      else
      {
        while (1)
        {
          if (__OFADD__(v50, 1))
          {
LABEL_79:
            __break(1u);
LABEL_80:
            __break(1u);
            __break(1u);
            return;
          }
          uint64_t v53 = v48[16];
          if ((v54 & 1) == 0) {
            break;
          }
          uint64_t v51 = *(void *)v48;
          uint64_t v52 = *((void *)v48 + 1);
          v48 += 24;
          ++v50;
          ++v49;
          int v54 = v53;
          if ((_BYTE)v53) {
            goto LABEL_58;
          }
LABEL_61:
          uint64_t v46 = v51;
          uint64_t v47 = v52;
          if (v36 == v50) {
            goto LABEL_66;
          }
        }
        if (v53 == 4)
        {
LABEL_72:
          uint64_t v13 = *(void *)v48;
          uint64_t v14 = *((void *)v48 + 1);
          sub_100067F10(v46, v47, 0);
          uint64_t v12 = 4;
          goto LABEL_12;
        }
        while (v36 != v49)
        {
          if (__OFADD__(v49, 1)) {
            goto LABEL_79;
          }
          int v55 = v48[40];
          v48 += 24;
          ++v49;
          if (v55 == 4) {
            goto LABEL_72;
          }
        }
      }
      uint64_t v12 = 0;
      uint64_t v13 = v46;
      uint64_t v14 = v47;
LABEL_12:
      swift_bridgeObjectRelease();
      sub_1000C1FC4(v16, v13, v14, v12);

      sub_10004282C(v13, v14, v12);
      goto LABEL_13;
    }
    uint64_t v12 = v23[48];
    if (v12 < 6 || *((void *)v23 + 4) <= 1uLL) {
      goto LABEL_57;
    }
    swift_bridgeObjectRelease();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    unint64_t v37 = sub_10003A9B4((uint64_t)v16);
    char v39 = v38;
    swift_bridgeObjectRelease();
    if (v39)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v41 = *v57;
      uint64_t v70 = *v57;
      *uint64_t v57 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1000402A4();
        uint64_t v41 = v70;
      }

      uint64_t v42 = *(void *)(v41 + 56) + 24 * v37;
      uint64_t v43 = *(void *)v42;
      uint64_t v44 = *(void *)(v42 + 8);
      char v45 = *(unsigned char *)(v42 + 16);
      sub_10003E678(v37, v41);
      *uint64_t v57 = v41;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      char v45 = -1;
    }
    swift_endAccess();
    sub_100067F10(v43, v44, v45);
    if ([*(id *)(v11 + 40) containsObject:v16])
    {
      id v64 = v16;
      id v56 = v16;
      AsyncEvent.post(_:)();
    }
    else
    {
    }
LABEL_13:
    unint64_t v7 = v62;
    uint64_t v5 = v63;
  }
  if (v7)
  {
    uint64_t v62 = (v7 - 1) & v7;
    uint64_t v63 = v5;
    unint64_t v15 = __clz(__rbit64(v7)) | (v5 << 6);
    goto LABEL_36;
  }
  int64_t v17 = v5 + 1;
  if (__OFADD__(v5, 1)) {
    goto LABEL_80;
  }
  if (v17 < v58)
  {
    unint64_t v18 = *(void *)(v59 + 8 * v17);
    uint64_t v19 = v5 + 1;
    if (!v18)
    {
      uint64_t v19 = v5 + 2;
      if (v5 + 2 >= v58) {
        goto LABEL_78;
      }
      unint64_t v18 = *(void *)(v59 + 8 * v19);
      if (!v18)
      {
        uint64_t v19 = v5 + 3;
        if (v5 + 3 >= v58) {
          goto LABEL_78;
        }
        unint64_t v18 = *(void *)(v59 + 8 * v19);
        if (!v18)
        {
          uint64_t v19 = v5 + 4;
          if (v5 + 4 >= v58) {
            goto LABEL_78;
          }
          unint64_t v18 = *(void *)(v59 + 8 * v19);
          if (!v18)
          {
            uint64_t v19 = v5 + 5;
            if (v5 + 5 >= v58) {
              goto LABEL_78;
            }
            unint64_t v18 = *(void *)(v59 + 8 * v19);
            if (!v18)
            {
              uint64_t v20 = v5 + 6;
              do
              {
                if (v58 == v20) {
                  goto LABEL_78;
                }
                unint64_t v18 = *(void *)(v59 + 8 * v20++);
              }
              while (!v18);
              uint64_t v19 = v20 - 1;
            }
          }
        }
      }
    }
    uint64_t v62 = (v18 - 1) & v18;
    uint64_t v63 = v19;
    unint64_t v15 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_36:
    id v16 = *(id *)(*(void *)(v2 + 48) + 8 * v15);
    if (!v16) {
      goto LABEL_78;
    }
    goto LABEL_37;
  }
LABEL_78:
  sub_100034EF8();
}

uint64_t (*sub_100084308())(uint64_t a1)
{
  return sub_100087380;
}

uint64_t sub_10008434C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t sub_1000843F0(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (unint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

id sub_1000844D4(unint64_t a1, int a2, uint64_t a3, char *a4)
{
  uint64_t v37 = a3;
  char v5 = a2;
  int v40 = a2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v41 = type metadata accessor for SyncTaskScheduler();
  uint64_t v45 = *(void *)(v41 - 8);
  uint64_t v7 = __chkstk_darwin(v41);
  uint64_t v44 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v43 = (char *)&v37 - v10;
  __chkstk_darwin(v9);
  uint64_t v46 = (char *)&v37 - v11;
  uint64_t v12 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v12 - 8);
  char v39 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v14 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  id v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v17);
  uint64_t v51 = &type metadata for ASDDeviceAppFetcher;
  uint64_t v52 = &off_1001869F0;
  uint64_t v49[3] = type metadata accessor for DefaultAvailableUpdatesRegistry();
  v49[4] = &off_1001879C0;
  v49[0] = v37;
  unint64_t v18 = &a4[OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_queryObservation];
  *(_OWORD *)unint64_t v18 = 0u;
  *((_OWORD *)v18 + 1) = 0u;
  uint64_t v19 = &a4[OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_query];
  *(void *)uint64_t v19 = a1;
  v19[8] = v5;
  sub_100052538((uint64_t)v50, (uint64_t)&a4[OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_fetcher]);
  sub_100052538((uint64_t)v49, (uint64_t)&a4[OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_availableUpdatesRegistry]);
  uint64_t v37 = sub_10002EE34(0, (unint64_t *)&qword_1001A2170);
  sub_10002EB60(&qword_1001A2908);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_10014CED0;
  swift_bridgeObjectRetain();
  uint64_t v21 = a4;
  static OS_dispatch_queue.Attributes.concurrent.getter();
  v47[0] = v20;
  sub_100087278((unint64_t *)&qword_1001A3370, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10002EB60(&qword_1001A2910);
  sub_100061D9C((unint64_t *)&qword_1001A3380, &qword_1001A2910);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v38);
  static DispatchQoS.unspecified.getter();
  uint64_t v22 = v41;
  *(void *)&v21[OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_workQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)&v21[OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_expectedAppStates] = sub_100063A04((uint64_t)&_swiftEmptyArrayStorage);
  sub_10002EB60(&qword_1001A2900);
  swift_allocObject();
  *(void *)&v21[OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_onSynchronizeAppStates] = SyncEvent.init()();

  v48.receiver = v21;
  v48.super_class = ObjectType;
  id v23 = objc_msgSendSuper2(&v48, "init");
  SyncTaskScheduler.init()();
  uint64_t v24 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v25 = *(void (**)(void))(v45 + 16);
  uint64_t v26 = v43;
  v25();
  if ((_BYTE)v40)
  {
    if (v40 != 1)
    {
      uint64_t v30 = self;
      swift_retain();
      id v29 = [v30 queryForStoreApps];
      goto LABEL_7;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    v27.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v28 = [self queryForBundleIDs:v27.super.isa];
  }
  else
  {
    swift_retain();
    sub_1000A4F74(a1);
    sub_10002EE34(0, (unint64_t *)&qword_1001A1CF0);
    v27.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v28 = [self queryForStoreItemIDs:v27.super.isa];
  }
  id v29 = v28;

LABEL_7:
  char v31 = (char *)objc_allocWithZone((Class)type metadata accessor for ASDDeviceAppFetcher.QueryObservation());
  uint64_t v32 = (uint64_t)v44;
  ((void (*)(char *, char *, uint64_t))v25)(v44, v26, v22);
  swift_retain();
  id v33 = sub_100085FD0(v29, v32, (uint64_t)sub_1000873C0, v24, v31);

  swift_release();
  sub_100087278((unint64_t *)&unk_1001A31B0, (void (*)(uint64_t))type metadata accessor for ASDDeviceAppFetcher.QueryObservation);
  unint64_t v34 = *(void (**)(char *, uint64_t))(v45 + 8);
  v34(v26, v22);
  swift_release_n();
  swift_bridgeObjectRelease();
  v34(v46, v22);
  v47[3] = swift_getObjectType();

  v47[0] = v33;
  sub_10002ED08((uint64_t)v49);
  uint64_t v35 = (uint64_t)v23 + OBJC_IVAR____TtC19appstorecomponentsd24DeviceAppStateDataSource_queryObservation;
  swift_beginAccess();
  sub_1000873C8((uint64_t)v47, v35, &qword_1001A1C50);
  swift_endAccess();
  sub_10002ED08((uint64_t)v50);
  return v23;
}

void *sub_100084CC4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v8 - 8);
  char v31 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v32 = v10;
  uint64_t v33 = v11;
  __chkstk_darwin(v10);
  uint64_t v30 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.Attributes();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  v35[3] = type metadata accessor for DefaultAvailableUpdatesRegistry();
  v35[4] = &off_1001879C0;
  v35[0] = a3;
  a4[2] = a1;
  a4[3] = a2;
  sub_100052538((uint64_t)v35, (uint64_t)(a4 + 10));
  a4[4] = &_swiftEmptyDictionarySingleton;
  a4[5] = [objc_allocWithZone((Class)NSCountedSet) init];
  a4[6] = &_swiftEmptySetSingleton;
  sub_10002EE34(0, (unint64_t *)&qword_1001A2170);
  uint64_t v29 = sub_10002EB60(&qword_1001A2908);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v26 = (v16 + 32) & ~v16;
  uint64_t v27 = v16 | 7;
  uint64_t v28 = v26 + v15;
  uint64_t v17 = swift_allocObject();
  long long v25 = xmmword_10014CED0;
  *(_OWORD *)(v17 + 16) = xmmword_10014CED0;
  static OS_dispatch_queue.Attributes.concurrent.getter();
  uint64_t v34 = v17;
  v24[1] = sub_100087278((unint64_t *)&qword_1001A3370, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  v24[0] = sub_10002EB60(&qword_1001A2910);
  sub_100061D9C((unint64_t *)&qword_1001A3380, &qword_1001A2910);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v18 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 104);
  v33 += 104;
  uint64_t v20 = v30;
  v19(v30, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v32);
  static DispatchQoS.unspecified.getter();
  a4[7] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  static DispatchQoS.userInteractive.getter();
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = v25;
  static OS_dispatch_queue.Attributes.concurrent.getter();
  uint64_t v34 = v21;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v19(v20, v18, v32);
  a4[8] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  a4[9] = 0;
  sub_10002EB60(&qword_1001A28D8);
  swift_allocObject();
  uint64_t v22 = AsyncEvent.init()();
  sub_10002ED08((uint64_t)v35);
  a4[15] = v22;
  return a4;
}

id sub_100085110(unint64_t a1, int a2, uint64_t a3)
{
  uint64_t v19 = &type metadata for ASDDeviceAppFetcher;
  uint64_t v20 = &off_1001869F0;
  uint64_t v6 = type metadata accessor for DefaultAvailableUpdatesRegistry();
  v17[3] = v6;
  v17[4] = &off_1001879C0;
  v17[0] = a3;
  uint64_t v7 = (char *)objc_allocWithZone((Class)type metadata accessor for DeviceAppStateDataSource());
  uint64_t v8 = sub_10002FE00((uint64_t)v18, (uint64_t)&type metadata for ASDDeviceAppFetcher);
  __chkstk_darwin(v8);
  (*(void (**)(char *))(v10 + 16))((char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = sub_10002FE00((uint64_t)v17, v6);
  __chkstk_darwin(v11);
  uint64_t v13 = (void *)((char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  id v15 = sub_1000844D4(a1, a2, *v13, v7);
  sub_10002ED08((uint64_t)v17);
  sub_10002ED08((uint64_t)v18);
  return v15;
}

void *sub_1000852E0(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v26 = a5;
  uint64_t v29 = a1;
  id v30 = a4;
  uint64_t v36 = *a6;
  uint64_t v37 = a2;
  uint64_t v9 = sub_10002EB60(&qword_1001A2918);
  __chkstk_darwin(v9 - 8);
  uint64_t v35 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v11 - 8);
  uint64_t v31 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v28 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v27 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.Attributes();
  uint64_t v25 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v14 = (char *)a6 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_accountsSubscription;
  uint64_t v33 = sub_10002EB60(&qword_1001A2920);
  uint64_t v15 = *(void *)(v33 - 8);
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  uint64_t v34 = v15 + 56;
  v32(v14, 1, 1, v33);
  uint64_t v16 = (char *)a6 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_lastAccountID;
  *(void *)uint64_t v16 = 0;
  v16[8] = 1;
  sub_100052538((uint64_t)a1, (uint64_t)(a6 + 2));
  sub_100052538(v37, (uint64_t)a6 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_platform);
  uint64_t v17 = (void *)((char *)a6 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_purchaseHistory);
  *uint64_t v17 = a3;
  v17[1] = &off_100186A08;
  *(void *)((char *)a6
            + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_purchaseHistoryContext) = v30;
  uint64_t v18 = v26;
  *(void *)((char *)a6 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_notificationCenter) = v26;
  sub_10002EE34(0, (unint64_t *)&qword_1001A2170);
  sub_10002EB60(&qword_1001A2908);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_10014CED0;
  id v30 = a3;
  id v20 = v18;
  static OS_dispatch_queue.Attributes.concurrent.getter();
  v38[0] = v19;
  sub_100087278((unint64_t *)&qword_1001A3370, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10002EB60(&qword_1001A2910);
  sub_100061D9C((unint64_t *)&qword_1001A3380, &qword_1001A2910);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v28 + 104))(v27, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v31);
  static DispatchQoS.unspecified.getter();
  *(void *)((char *)a6 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_workQueue) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)((char *)a6 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_expectedAppStates) = sub_100063A04((uint64_t)&_swiftEmptyArrayStorage);
  *((unsigned char *)a6 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_hasRequestedUpdated) = 0;
  sub_10002EB60(&qword_1001A2900);
  swift_allocObject();
  *(void *)((char *)a6
            + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_onSynchronizeAppStates) = SyncEvent.init()();
  [v20 addObserver:a6 selector:"purchaseHistoryUpdated:" name:ASDPurchaseHistoryDidChangeNotification object:0];
  uint64_t v21 = v29;
  sub_10002EC6C(v29, v29[3]);
  dispatch thunk of AccountProvider.onActiveAccountChange.getter();
  swift_getObjectType();
  dispatch thunk of static EventEmitter.defaultScheduler.getter();
  uint64_t v22 = (uint64_t)v35;
  EventEmitter.addObserver<A>(on:target:method:)();

  swift_unknownObjectRelease();
  sub_10002ED08(v37);
  sub_10002ED08((uint64_t)v38);
  v32((char *)v22, 0, 1, v33);
  uint64_t v23 = (uint64_t)a6 + OBJC_IVAR____TtC19appstorecomponentsd33PurchaseHistoryAppStateDataSource_accountsSubscription;
  swift_beginAccess();
  sub_1000873C8(v22, v23, &qword_1001A2918);
  swift_endAccess();
  sub_10002ED08((uint64_t)v21);
  return a6;
}

uint64_t sub_1000858BC(void *a1, void *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  id v30 = a2;
  uint64_t v11 = type metadata accessor for State();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (double *)((char *)&v29 - v17);
  __chkstk_darwin(v16);
  id v31 = a1;
  uint64_t v32 = (char *)&v29 - v19;
  id v20 = [a1 id];
  uint64_t v33 = a6;
  id v34 = v20;
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  char v37 = a5;
  OS_dispatch_queue.sync<A>(execute:)();

  uint64_t v21 = *(void *)&v38;
  uint64_t v22 = v39;
  LOBYTE(v20) = v40;
  sub_1000655CC(v38, v39, v40, v18);
  sub_10004282C(v21, (uint64_t)v22, (char)v20);
  uint64_t v23 = *(void (**)(char *, double *, uint64_t))(v12 + 16);
  v23(v15, v18, v11);
  LODWORD(v21) = (*(uint64_t (**)(char *, uint64_t))(v12 + 88))(v15, v11);
  int v24 = enum case for State.downloadable(_:);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v12 + 8);
  v25(v15, v11);
  if (v21 == v24
    && (([v31 flags] & 0x200) != 0
     || [v30 supportsDSIDLessInstall]))
  {
    uint64_t v26 = v32;
    (*(void (**)(char *, void, uint64_t))(v12 + 104))(v32, enum case for State.buyable(_:), v11);
  }
  else
  {
    uint64_t v26 = v32;
    v23(v32, v18, v11);
  }
  v25((char *)v18, v11);
  uint64_t v27 = sub_100064850();
  v25(v26, v11);
  return v27;
}

void sub_100085B84(void *a1, uint64_t a2)
{
  swift_getObjectType();
  uint64_t v4 = swift_conformsToProtocol2();
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v4) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    swift_unknownObjectRetain();
    uint64_t v9 = (void *)v8(ObjectType, v5);

    if (v9)
    {
      id v10 = [v9 id];
      __chkstk_darwin(v10);
      OS_dispatch_queue.sync<A>(execute:)();

      if (v25 == 5)
      {
        uint64_t v11 = sub_1000747DC();
        if ((v12 & 1) == 0)
        {
          if (v24)
          {
            uint64_t v13 = v11;
            if (v24 < v11)
            {
              sub_100052538(a2 + 80, (uint64_t)&v23);
              sub_10002EC6C(&v23, v26);
              uint64_t v14 = sub_100073184();
              uint64_t v16 = v15;
              id v17 = [v9 id];
              sub_1000C772C(v13, v14, v16, v17);
              swift_bridgeObjectRelease();

              sub_10002ED08((uint64_t)&v23);
              sub_10002EB60(&qword_1001A4D70);
              uint64_t inited = swift_initStackObject();
              *(_OWORD *)(inited + 16) = xmmword_10014DF90;
              *(void *)(inited + 32) = [v9 id];
              unint64_t v23 = inited;
              specialized Array._endMutation()();
              unint64_t v19 = v23;
              if (v23 >> 62)
              {
                swift_bridgeObjectRetain();
                uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                if (v22) {
                  goto LABEL_15;
                }
              }
              else if (*(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
LABEL_15:
                sub_10011A45C(v19);
                uint64_t v21 = v20;
LABEL_21:
                swift_bridgeObjectRelease();
                sub_1000C1020((uint64_t)v21, 1, (uint64_t)MetricsIdStore.init(accountStore:amsBag:), 0, 30.0);

                swift_bridgeObjectRelease();
                return;
              }
              uint64_t v21 = &_swiftEmptySetSingleton;
              goto LABEL_21;
            }
          }
        }
      }
      else
      {
        sub_10004282C(v23, v24, v25);
      }
    }
  }
}

char *sub_100085E58(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v4 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  uint64_t v5 = (char *)_swiftEmptyArrayStorage;
  do
  {
    uint64_t v7 = *v4;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
    swift_unknownObjectRetain();
    uint64_t v10 = v9(a2, ObjectType, v7);
    uint64_t v12 = v11;
    char v14 = v13;
    int v15 = ~v13;
    swift_unknownObjectRelease();
    if (v15)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = sub_100076738(0, *((void *)v5 + 2) + 1, 1, v5);
      }
      unint64_t v17 = *((void *)v5 + 2);
      unint64_t v16 = *((void *)v5 + 3);
      if (v17 >= v16 >> 1) {
        uint64_t v5 = sub_100076738((char *)(v16 > 1), v17 + 1, 1, v5);
      }
      *((void *)v5 + 2) = v17 + 1;
      uint64_t v6 = &v5[24 * v17];
      *((void *)v6 + 4) = v10;
      *((void *)v6 + 5) = v12;
      v6[48] = v14;
    }
    v4 += 2;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v5;
}

void sub_100085FB8(uint64_t a1@<X8>)
{
}

id sub_100085FD0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v11 = type metadata accessor for SyncTaskScheduler();
  v22[3] = v11;
  v22[4] = (uint64_t)&protocol witness table for SyncTaskScheduler;
  uint64_t v12 = sub_100031A88(v22);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v12, a2, v11);
  *(void *)&a5[OBJC_IVAR____TtCV19appstorecomponentsd19ASDDeviceAppFetcherP33_602223BA61A39827BF84AE6E0E050E1316QueryObservation_appQuery] = a1;
  sub_100052538((uint64_t)v22, (uint64_t)&a5[OBJC_IVAR____TtCV19appstorecomponentsd19ASDDeviceAppFetcherP33_602223BA61A39827BF84AE6E0E050E1316QueryObservation_taskScheduler]);
  char v13 = &a5[OBJC_IVAR____TtCV19appstorecomponentsd19ASDDeviceAppFetcherP33_602223BA61A39827BF84AE6E0E050E1316QueryObservation_observer];
  *(void *)char v13 = a3;
  *((void *)v13 + 1) = a4;
  v21.receiver = a5;
  v21.super_class = ObjectType;
  id v14 = a1;
  swift_retain();
  id v15 = objc_msgSendSuper2(&v21, "init");
  uint64_t v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = sub_10008742C;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A5160;
  id aBlock[3] = &unk_100186250;
  unint64_t v17 = _Block_copy(aBlock);
  id v18 = v15;
  swift_release();
  [v14 executeQueryWithResultHandler:v17];

  _Block_release(v17);
  sub_10002ED08((uint64_t)v22);
  return v18;
}

uint64_t sub_1000861A0()
{
  uint64_t v0 = type metadata accessor for ASCMigrationDeviceAppFetcherImplementation.Store(0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v29[-1] - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DefaultAvailableUpdatesRegistry();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = sub_1000638D4((uint64_t)&_swiftEmptyArrayStorage);
  *(void *)(v4 + 24) = [objc_allocWithZone((Class)JEUnfairLock) init];
  sub_10002EB60(&qword_1001A28F8);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_10014DF50;
  type metadata accessor for WaitingAppStateDataSource();
  swift_allocObject();
  *(void *)(v5 + 32) = sub_100135184();
  *(void *)(v5 + 40) = &off_10018ADD0;
  sub_10002EB60(&qword_1001A28E8);
  type metadata accessor for BaseObjectGraph();
  inject<A, B>(_:from:)();
  uint64_t v6 = sub_10002EC6C(v33, v34);
  sub_1000872C0(*v6 + OBJC_IVAR____TtC19appstorecomponentsd42ASCMigrationDeviceAppFetcherImplementation_store, (uint64_t)v2);
  uint64_t v7 = type metadata accessor for ASDDeviceAppFetcher();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v2, 1, v7) == 1)
  {
    id v31 = &type metadata for ASDDeviceAppFetcher;
    uint64_t v32 = &off_1001869F0;
    uint64_t v8 = sub_10002FE00((uint64_t)v30, (uint64_t)&type metadata for ASDDeviceAppFetcher);
    __chkstk_darwin(v8);
    (*(void (**)(void))(v9 + 16))();
    swift_retain();
    id v10 = sub_100085110(0, 2, v4);
    sub_10002ED08((uint64_t)v30);
    sub_10002ED08((uint64_t)v33);
    *(void *)(v5 + 48) = v10;
    *(void *)(v5 + 56) = &off_100187BA8;
    sub_10002EB60(&qword_1001A3390);
    inject<A, B>(_:from:)();
    sub_10002EB60((uint64_t *)&unk_1001A5E30);
    inject<A, B>(_:from:)();
    sub_10002EB60((uint64_t *)&unk_1001A32F0);
    inject<A, B>(_:from:)();
    uint64_t v11 = sub_10002EC6C(v29, v29[3]);
    if ((*(unsigned char *)(*v11 + 24) & 1) == 0)
    {
      uint64_t v12 = *(void **)(*v11 + 16);
      char v13 = self;
      id v14 = v12;
      id v15 = [v13 defaultCenter];
      type metadata accessor for PurchaseHistoryAppStateDataSource();
      uint64_t v16 = (void *)swift_allocObject();
      unint64_t v17 = sub_1000852E0(v33, (uint64_t)v30, v14, 0, v15, v16);
      sub_10002ED08((uint64_t)v29);
      *(void *)(v5 + 64) = v17;
      *(void *)(v5 + 72) = &off_10018A230;
      type metadata accessor for DefaultAppStateDataSource();
      uint64_t v18 = swift_allocObject();
      sub_10002EB60(&qword_1001A2900);
      swift_allocObject();
      *(void *)(v18 + 16) = SyncEvent.init()();
      *(void *)(v5 + 80) = v18;
      *(void *)(v5 + 88) = &off_100187980;
      unint64_t v19 = sub_100069500();
      uint64_t v34 = v3;
      uint64_t v35 = &off_1001879C0;
      v33[0] = v4;
      type metadata accessor for DefaultAppStateController();
      id v20 = (void *)swift_allocObject();
      uint64_t v21 = sub_10002FE00((uint64_t)v33, v3);
      __chkstk_darwin(v21);
      unint64_t v23 = (void *)((char *)&v29[-1] - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *))(v24 + 16))(v23);
      uint64_t v25 = *v23;
      swift_retain();
      uint64_t v26 = sub_100084CC4(v5, v19, v25, v20);
      sub_10002ED08((uint64_t)v33);
      swift_release();
      return (uint64_t)v26;
    }
  }
  else
  {
    sub_100087324((uint64_t)v2);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100086728()
{
  uint64_t v0 = type metadata accessor for StorefrontAppStateController.Configuration();
  uint64_t v68 = *(void *)(v0 - 8);
  uint64_t v69 = v0;
  uint64_t v1 = __chkstk_darwin(v0);
  uint64_t v66 = (char *)&v54 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  uint64_t v67 = (char *)&v54 - v3;
  uint64_t v4 = sub_10002EB60(&qword_1001A19D8);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v61 = v4;
  uint64_t v62 = v5;
  __chkstk_darwin(v4);
  uint64_t v60 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Bag();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v58 = v7;
  uint64_t v59 = v8;
  __chkstk_darwin(v7);
  uint64_t v57 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AppStoreType();
  uint64_t v55 = *(void *)(v10 - 8);
  uint64_t v56 = v10;
  __chkstk_darwin(v10);
  int v54 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DeviceAppQuery();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for DeviceUpdateRegistry();
  uint64_t v17 = DeviceUpdateRegistry.__allocating_init()();
  uint64_t v65 = sub_10002EB60(&qword_1001A25A0);
  uint64_t v18 = swift_allocObject();
  long long v64 = xmmword_10014CD00;
  *(_OWORD *)(v18 + 16) = xmmword_10014CD00;
  uint64_t v19 = type metadata accessor for WaitingAppStateDataSource();
  swift_allocObject();
  uint64_t v20 = WaitingAppStateDataSource.init()();
  *(void *)(v18 + 56) = v19;
  *(void *)(v18 + 64) = &protocol witness table for WaitingAppStateDataSource;
  *(void *)(v18 + 32) = v20;
  uint64_t v21 = type metadata accessor for DeviceAppStateDataSource();
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for DeviceAppQuery.allStoreApps(_:), v12);
  sub_10002EB60(&qword_1001A28E8);
  uint64_t v63 = type metadata accessor for BaseObjectGraph();
  inject<A, B>(_:from:)();
  uint64_t v22 = v77;
  unint64_t v23 = v78;
  uint64_t v24 = sub_10002EC6C(&v76, v77);
  v75[3] = v22;
  v75[4] = v23[1];
  uint64_t v25 = sub_100031A88(v75);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v22 - 8) + 16))(v25, v24, v22);
  uint64_t v73 = updated;
  uint64_t v74 = &protocol witness table for DeviceUpdateRegistry;
  uint64_t v26 = updated;
  v72[0] = v17;
  (*(void (**)(char *, void, uint64_t))(v55 + 104))(v54, enum case for AppStoreType.default(_:), v56);
  swift_retain();
  uint64_t v27 = DeviceAppStateDataSource.__allocating_init(query:fetcher:updateRegistry:store:)();
  sub_10002ED08((uint64_t)&v76);
  *(void *)(v18 + 96) = v21;
  *(void *)(v18 + 104) = &protocol witness table for DeviceAppStateDataSource;
  *(void *)(v18 + 72) = v27;
  uint64_t v70 = (void *)v18;
  uint64_t v29 = v57;
  uint64_t v28 = v58;
  BaseObjectGraph.inject<A>(_:)();
  NSString v30 = String._bridgeToObjectiveC()();
  id v31 = v60;
  Bag.subscript.getter();

  (*(void (**)(char *, uint64_t))(v59 + 8))(v29, v28);
  uint64_t v32 = v61;
  Bag.Value.current(or:)();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v31, v32);
  if (v76 == 1)
  {
    *(void *)&long long v76 = 0;
    os_eligibility_get_domain_answer();
    if ((void)v76 == 4)
    {
      uint64_t v33 = type metadata accessor for AppDistributionDeviceAppStateDataSource();
      swift_allocObject();
      uint64_t v34 = sub_100035F4C();
      uint64_t v35 = v70;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v35 = sub_100076850(0, v35[2] + 1, 1, v35);
      }
      unint64_t v37 = v35[2];
      unint64_t v36 = v35[3];
      if (v37 >= v36 >> 1) {
        uint64_t v35 = sub_100076850((void *)(v36 > 1), v37 + 1, 1, v35);
      }
      uint64_t v77 = v33;
      char v78 = (void *)sub_100087278(&qword_1001A28F0, (void (*)(uint64_t))type metadata accessor for AppDistributionDeviceAppStateDataSource);
      *(void *)&long long v76 = v34;
      void v35[2] = v37 + 1;
      sub_100031C10(&v76, (uint64_t)&v35[5 * v37 + 4]);
      uint64_t v70 = v35;
    }
  }
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = v64;
  uint64_t v39 = type metadata accessor for PurchaseHistoryAppStateDataSource();
  sub_10002EB60(&qword_1001A3390);
  inject<A, B>(_:from:)();
  sub_10002EB60((uint64_t *)&unk_1001A5E30);
  inject<A, B>(_:from:)();
  sub_10002EB60((uint64_t *)&unk_1001A32F0);
  inject<A, B>(_:from:)();
  uint64_t v40 = v73;
  uint64_t v41 = v74;
  uint64_t v42 = sub_10002EC6C(v72, v73);
  v71[3] = v40;
  v71[4] = v41[1];
  uint64_t v43 = sub_100031A88(v71);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v40 - 8) + 16))(v43, v42, v40);
  uint64_t v44 = PurchaseHistoryAppStateDataSource.__allocating_init(accounts:platform:purchaseHistory:purchaseHistoryContext:)();
  sub_10002ED08((uint64_t)v72);
  *(void *)(inited + 56) = v39;
  *(void *)(inited + 64) = &protocol witness table for PurchaseHistoryAppStateDataSource;
  *(void *)(inited + 32) = v44;
  uint64_t v45 = type metadata accessor for DefaultAppStateDataSource();
  swift_allocObject();
  uint64_t v46 = DefaultAppStateDataSource.init()();
  *(void *)(inited + 96) = v45;
  *(void *)(inited + 104) = &protocol witness table for DefaultAppStateDataSource;
  *(void *)(inited + 72) = v46;
  sub_10007FBD0((void *)inited);
  uint64_t v77 = v26;
  char v78 = &protocol witness table for DeviceUpdateRegistry;
  *(void *)&long long v76 = v17;
  swift_retain();
  uint64_t v47 = v66;
  StorefrontAppStateController.Configuration.init(updateRegistry:)();
  objc_super v48 = v67;
  StorefrontAppStateController.Configuration.withDataSources(_:)();
  swift_bridgeObjectRelease();
  uint64_t v50 = v68;
  uint64_t v49 = v69;
  uint64_t v51 = *(void (**)(char *, uint64_t))(v68 + 8);
  v51(v47, v69);
  type metadata accessor for StorefrontAppStateController();
  (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v47, v48, v49);
  uint64_t v52 = StorefrontAppStateController.__allocating_init(from:)();
  swift_release();
  v51(v48, v49);
  return v52;
}

void sub_100086FA0()
{
  sub_10008394C(*(void *)(v0 + 16), **(void ***)(v0 + 24));
}

id sub_100086FC0()
{
  return sub_1000C2C4C(*(unsigned char *)(v0 + 16), *(void *)(v0 + 24));
}

id sub_100086FE0@<X0>(unsigned char *a1@<X8>)
{
  return sub_1000C2C0C(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_100086FFC@<X0>(char *a1@<X8>)
{
  return sub_100087014(a1);
}

uint64_t sub_100087014@<X0>(char *a1@<X8>)
{
  return sub_1000C2960(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(void **)(v1 + 48), a1);
}

void sub_10008703C(uint64_t a1@<X8>)
{
  sub_1000C2898(*(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned char *)(v1 + 48), a1);
}

uint64_t sub_100087060(uint64_t a1)
{
  return sub_100081644(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32));
}

uint64_t sub_10008706C()
{
  uint64_t v1 = sub_10002EB60(&qword_1001A28A8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100087100()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_100087168()
{
  return AsyncEvent.post(_:)();
}

void sub_10008718C()
{
  sub_100083C24(*(void *)(v0 + 16), **(void **)(v0 + 24));
}

uint64_t sub_1000871AC@<X0>(BOOL *a1@<X8>)
{
  return sub_1000C1FB0(v1, a1);
}

uint64_t sub_1000871C8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100087200(void *a1, uint64_t a2, void (*a3)(void, void, void), int a4)
{
  return sub_100080348(a1, a2, a3, a4, v4);
}

uint64_t sub_100087208()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100087240(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(v1 + 16))(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
}

uint64_t sub_100087278(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000872C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ASCMigrationDeviceAppFetcherImplementation.Store(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100087324(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ASCMigrationDeviceAppFetcherImplementation.Store(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100087380(uint64_t a1)
{
  return sub_1001265D8(a1);
}

uint64_t sub_100087388()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000873C0(unint64_t a1)
{
}

uint64_t sub_1000873C8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10002EB60(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

void sub_10008742C()
{
}

uint64_t sub_100087434(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100087444()
{
  return swift_release();
}

uint64_t sub_100087454(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for ArcadeState();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (uint64_t *)((char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100065C44(a1, a2, v7);
  AsyncEvent.post(_:)();
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100087544(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return _swift_task_switch(sub_100087568, 0, 0);
}

uint64_t sub_100087568()
{
  uint64_t v1 = *(void *)(v0[6] + 24);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = sub_1000650F4();
  v0[7] = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 24))(v3, ObjectType, v1);
  uint64_t v4 = sub_10002EB60(&qword_1001A29E0);
  unint64_t v5 = sub_100087A00();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[8] = v6;
  void *v6 = v0;
  v6[1] = sub_100087674;
  return dispatch thunk of Future.then()(v0 + 2, v4, v5);
}

uint64_t sub_100087674()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    *(void *)(v2 + 72) = *(void *)(v2 + 16);
    *(unsigned char *)(v2 + 25) = *(unsigned char *)(v2 + 24);
    return _swift_task_switch(sub_1000877E4, 0, 0);
  }
}

uint64_t sub_1000877E4()
{
  uint64_t v1 = *(void **)(v0 + 72);
  char v2 = *(unsigned char *)(v0 + 25);
  sub_100065C44((uint64_t)v1, v2, *(uint64_t **)(v0 + 32));
  sub_100067184(v1, v2);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100087864()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ASCMigrationArcadeSubscriptionManagerImplementation()
{
  return self;
}

void sub_1000878C8(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 24);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3);
  char v7 = v6;
  sub_100065C44((uint64_t)v5, v6, a1);

  sub_100067184(v5, v7);
}

uint64_t sub_100087940(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  char v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_10002F874;
  v7[5] = a2;
  v7[6] = v6;
  v7[4] = a1;
  return _swift_task_switch(sub_100087568, 0, 0);
}

unint64_t sub_100087A00()
{
  unint64_t result = qword_1001A29E8;
  if (!qword_1001A29E8)
  {
    sub_10002ED58(&qword_1001A29E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A29E8);
  }
  return result;
}

uint64_t sub_100087A5C()
{
  uint64_t v1 = v0;
  type metadata accessor for ASCMigrationDeviceAppFetcherImplementation.Store(0);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v20[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin();
  uint64_t v4 = type metadata accessor for OSLogger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  char v7 = (char *)&v20[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = &type metadata for Feature;
  uint64_t v22 = (void *)sub_100070914();
  LOBYTE(v20[0]) = 0;
  char v8 = isFeatureEnabled(_:)();
  sub_10002ED08((uint64_t)v20);
  if (v8)
  {
    if (qword_1001A0E80 != -1) {
      swift_once();
    }
    uint64_t v9 = sub_10002F6AC(v4, (uint64_t)qword_1001AE3C8);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v10._uint64_t countAndFlagsBits = 0;
    v10._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v10);
    uint64_t v21 = &type metadata for Feature;
    LOBYTE(v20[0]) = 0;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_1000709E0((uint64_t)v20);
    v11._object = (void *)0x800000010015C610;
    v11._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v11);
    LogMessage.init(stringInterpolation:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v21 = (ValueMetadata *)type metadata accessor for GreenTeaLogger();
    uint64_t v22 = &protocol witness table for GreenTeaLogger;
    sub_100031A88(v20);
    static GreenTeaLogger.shared.getter();
    ASDDeviceAppFetcher.init(regulatoryLogger:)();
    uint64_t v12 = type metadata accessor for ASDDeviceAppFetcher();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v3, 0, 1, v12);
    sub_1000896BC((uint64_t)v3, v0 + OBJC_IVAR____TtC19appstorecomponentsd42ASCMigrationDeviceAppFetcherImplementation_store);
  }
  else
  {
    if (qword_1001A0E80 != -1) {
      swift_once();
    }
    uint64_t v13 = sub_10002F6AC(v4, (uint64_t)qword_1001AE3C8);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v13, v4);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v14._uint64_t countAndFlagsBits = 0;
    v14._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v14);
    uint64_t v21 = &type metadata for Feature;
    LOBYTE(v20[0]) = 0;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_1000709E0((uint64_t)v20);
    v15._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
    v15._object = (void *)0x800000010015C5E0;
    LogMessage.StringInterpolation.appendLiteral(_:)(v15);
    LogMessage.init(stringInterpolation:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v16 = v0 + OBJC_IVAR____TtC19appstorecomponentsd42ASCMigrationDeviceAppFetcherImplementation_store;
    uint64_t v17 = type metadata accessor for ASDDeviceAppFetcher();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
  }
  return v1;
}

uint64_t sub_100087F9C(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for ASDDeviceAppFetcher();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  type metadata accessor for ASCMigrationDeviceAppFetcherImplementation.Store(0);
  v2[8] = swift_task_alloc();
  return _swift_task_switch(sub_100088088, 0, 0);
}

uint64_t sub_100088088()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  sub_1000872C0(v0[4] + OBJC_IVAR____TtC19appstorecomponentsd42ASCMigrationDeviceAppFetcherImplementation_store, v1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    uint64_t v4 = sub_1000652C4();
    v0[9] = sub_1000A593C((unint64_t)v4, v5);
    swift_bridgeObjectRelease();
    uint64_t v6 = sub_10002EB60(&qword_1001A2B40);
    unint64_t v7 = sub_100089660();
    char v8 = (void *)swift_task_alloc();
    v0[10] = v8;
    void *v8 = v0;
    v8[1] = sub_100088250;
    return dispatch thunk of Future.then()(v0 + 2, v6, v7);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[6] + 32))(v0[7], v0[8], v0[5]);
    uint64_t v9 = (void *)swift_task_alloc();
    v0[13] = v9;
    void *v9 = v0;
    v9[1] = sub_100088470;
    uint64_t v10 = v0[3];
    return ASDDeviceAppFetcher.fetchQuery(_:)(v10);
  }
}

uint64_t sub_100088250()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    uint64_t v3 = sub_100088404;
  }
  else
  {
    *(void *)(v2 + 96) = *(void *)(v2 + 16);
    uint64_t v3 = sub_100088390;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100088390()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_100088404()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100088470(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 112) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100088624;
  }
  else
  {
    *(void *)(v4 + 120) = a1;
    uint64_t v5 = sub_100088598;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100088598()
{
  (*(void (**)(void, void))(v0[6] + 8))(v0[7], v0[5]);
  uint64_t v1 = v0[15];
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
  return v2(v1);
}

uint64_t sub_100088624()
{
  (*(void (**)(void, void))(v0[6] + 8))(v0[7], v0[5]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000886A8()
{
  sub_100087324(v0 + OBJC_IVAR____TtC19appstorecomponentsd42ASCMigrationDeviceAppFetcherImplementation_store);

  return swift_deallocClassInstance();
}

uint64_t sub_10008870C()
{
  return type metadata accessor for ASCMigrationDeviceAppFetcherImplementation(0);
}

uint64_t type metadata accessor for ASCMigrationDeviceAppFetcherImplementation(uint64_t a1)
{
  return sub_1000887E4(a1, qword_1001A2A20);
}

uint64_t sub_100088734()
{
  uint64_t result = type metadata accessor for ASCMigrationDeviceAppFetcherImplementation.Store(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for ASCMigrationDeviceAppFetcherImplementation.Store(uint64_t a1)
{
  return sub_1000887E4(a1, qword_1001A2B18);
}

uint64_t sub_1000887E4(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *sub_10008881C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = type metadata accessor for ASDDeviceAppFetcher();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_100088968(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ASDDeviceAppFetcher();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *sub_100088A38(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ASDDeviceAppFetcher();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_100088B48(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ASDDeviceAppFetcher();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

void *sub_100088CBC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ASDDeviceAppFetcher();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_100088DCC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ASDDeviceAppFetcher();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t sub_100088F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100088F54);
}

uint64_t sub_100088F54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ASDDeviceAppFetcher();
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_100088FC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100088FD4);
}

uint64_t sub_100088FD4(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = type metadata accessor for ASDDeviceAppFetcher();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t sub_100089054(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ASDDeviceAppFetcher();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 1, v2);
}

uint64_t sub_1000890BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ASDDeviceAppFetcher();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 1, v4);
}

uint64_t sub_10008912C()
{
  uint64_t result = type metadata accessor for ASDDeviceAppFetcher();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t sub_1000891A4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *v4;
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  Swift::String v11 = sub_10002EC6C(a2, v9);

  return sub_100089434(a1, (uint64_t)v11, a3, a4, v8, v9, v10);
}

uint64_t sub_10008921C(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000892B4;
  return sub_100087F9C(a1);
}

uint64_t sub_1000892B4(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

unint64_t sub_1000893B4(uint64_t a1)
{
  unint64_t result = sub_1000893DC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000893DC()
{
  unint64_t result = qword_1001A2B30;
  if (!qword_1001A2B30)
  {
    type metadata accessor for ASCMigrationDeviceAppFetcherImplementation(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001A2B30);
  }
  return result;
}

uint64_t sub_100089434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v11 = type metadata accessor for ASDDeviceAppFetcher();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  Swift::String v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for ASCMigrationDeviceAppFetcherImplementation.Store(0);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[3] = a6;
  v26[4] = a7;
  uint64_t v18 = sub_100031A88(v26);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 16))(v18, a2, a6);
  sub_1000872C0(a5 + OBJC_IVAR____TtC19appstorecomponentsd42ASCMigrationDeviceAppFetcherImplementation_store, (uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v17, 1, v11) == 1)
  {
    uint64_t v19 = sub_1000652C4();
    uint64_t v21 = (uint64_t)sub_1000A608C((unint64_t)v19, v20, (uint64_t)v18, v24, v25, a6, a7);
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v17, v11);
    uint64_t v21 = ASDDeviceAppFetcher.observeQuery(_:on:using:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  sub_10002ED08((uint64_t)v26);
  return v21;
}

unint64_t sub_100089660()
{
  unint64_t result = qword_1001A2B48;
  if (!qword_1001A2B48)
  {
    sub_10002ED58(&qword_1001A2B40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A2B48);
  }
  return result;
}

uint64_t sub_1000896BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ASCMigrationDeviceAppFetcherImplementation.Store(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100089720@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  uint64_t v2 = type metadata accessor for Device();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for Bag();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for OSLogger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = &type metadata for Feature;
  unint64_t v30 = sub_100070914();
  v28[0] = 0;
  char v12 = isFeatureEnabled(_:)();
  sub_10002ED08((uint64_t)v28);
  if (v12)
  {
    if (qword_1001A0E80 != -1) {
      swift_once();
    }
    uint64_t v13 = sub_10002F6AC(v8, (uint64_t)qword_1001AE3C8);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v13, v8);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v14._uint64_t countAndFlagsBits = 0;
    v14._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v14);
    uint64_t v29 = &type metadata for Feature;
    v28[0] = 0;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_1000709E0((uint64_t)v28);
    v15._object = (void *)0x800000010015C670;
    v15._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v15);
    LogMessage.init(stringInterpolation:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v26, v3);
    static Device.current.getter();
    uint64_t v16 = type metadata accessor for HardwarePlatform();
    uint64_t v17 = v27;
    void v27[3] = v16;
    v17[4] = (uint64_t)&protocol witness table for HardwarePlatform;
    sub_100031A88(v17);
    return HardwarePlatform.init(bag:device:)();
  }
  else
  {
    if (qword_1001A0E80 != -1) {
      swift_once();
    }
    uint64_t v19 = sub_10002F6AC(v8, (uint64_t)qword_1001AE3C8);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v19, v8);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v20._uint64_t countAndFlagsBits = 0;
    v20._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v20);
    uint64_t v29 = &type metadata for Feature;
    v28[0] = 0;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_1000709E0((uint64_t)v28);
    v21._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    v21._object = (void *)0x800000010015C640;
    LogMessage.StringInterpolation.appendLiteral(_:)(v21);
    LogMessage.init(stringInterpolation:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v22 = swift_allocObject();
    *(unsigned char *)(v22 + 16) = 0;
    sub_10002EB60(&qword_1001A2B50);
    swift_allocObject();
    uint64_t v23 = sub_100089CE4((uint64_t)sub_10008A2FC, v22);
    uint64_t v24 = v27;
    void v27[3] = (uint64_t)&type metadata for HardwarePlatform;
    unint64_t result = sub_10008A304();
    id v24[4] = result;
    *uint64_t v24 = v23;
    *((unsigned char *)v24 + 8) = 0;
  }
  return result;
}

uint64_t sub_100089CE4(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  uint64_t v31 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v31 - 8);
  uint64_t v25 = v24;
  __chkstk_darwin(v31);
  uint64_t v26 = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for DispatchQoS();
  uint64_t v27 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v9);
  *(unsigned char *)(v2 + 24) = 2;
  v21[1] = sub_10004765C();
  sub_10002EB60(&qword_1001A2908);
  uint64_t v10 = swift_allocObject();
  long long v22 = xmmword_10014CED0;
  *(_OWORD *)(v10 + 16) = xmmword_10014CED0;
  static OS_dispatch_queue.Attributes.concurrent.getter();
  aBlock[0] = v10;
  sub_10008A358((unint64_t *)&qword_1001A3370, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10002EB60(&qword_1001A2910);
  sub_10008A3A0((unint64_t *)&qword_1001A3380, &qword_1001A2910);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  static DispatchQoS.unspecified.getter();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v23);
  uint64_t v11 = v2;
  *(void *)(v2 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  sub_10002EB60(&qword_1001A2880);
  uint64_t v12 = v25;
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = v22;
  static DispatchWorkItemFlags.barrier.getter();
  aBlock[0] = v13;
  sub_10008A358((unint64_t *)&qword_1001A2888, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10002EB60((uint64_t *)&unk_1001A31A0);
  sub_10008A3A0((unint64_t *)&qword_1001A2890, (uint64_t *)&unk_1001A31A0);
  Swift::String v14 = v26;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v15 = swift_allocObject();
  swift_weakInit();
  uint64_t v16 = (void *)swift_allocObject();
  uint64_t v17 = v28;
  uint64_t v18 = v29;
  void v16[2] = v15;
  v16[3] = v17;
  void v16[4] = v18;
  aBlock[4] = sub_10008A468;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000C1A88;
  id aBlock[3] = &unk_100186328;
  uint64_t v19 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);
  swift_release();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v30);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v31);
  swift_release();
  swift_release();
  return v11;
}

uint64_t sub_10008A274(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = result;
    a2(&v5);
    *(unsigned char *)(v4 + 24) = v5;
    return swift_release();
  }
  return result;
}

uint64_t sub_10008A2EC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10008A2FC@<X0>(unsigned char *a1@<X8>)
{
  return sub_1000D4AB8(*(unsigned __int8 *)(v1 + 16), a1);
}

unint64_t sub_10008A304()
{
  unint64_t result = qword_1001A2B58;
  if (!qword_1001A2B58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A2B58);
  }
  return result;
}

uint64_t sub_10008A358(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10008A3A0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10002ED58(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10008A3F0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10008A428()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10008A468()
{
  return sub_10008A274(*(void *)(v0 + 16), *(void (**)(uint64_t *__return_ptr))(v0 + 24));
}

uint64_t sub_10008A474(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10008A484()
{
  return swift_release();
}

void *sub_10008A48C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = *(void *)(type metadata accessor for AdamID() - 8);
    uint64_t v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = *(void *)(v4 + 72);
    do
    {
      [objc_allocWithZone((Class)ASCAdamID) initWithInt64:AdamID.int64Value.getter()];
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v5 += v6;
      --v2;
    }
    while (v2);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_10008A5BC()
{
  type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin();
  uint64_t v1 = type metadata accessor for OSLogger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = &v14[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v15 = &type metadata for Feature;
  unint64_t v16 = sub_100070914();
  v14[0] = 0;
  char v5 = isFeatureEnabled(_:)();
  sub_10002ED08((uint64_t)v14);
  if (v5)
  {
    if (qword_1001A0E80 != -1) {
      swift_once();
    }
    uint64_t v6 = sub_10002F6AC(v1, (uint64_t)qword_1001AE3C8);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v2 + 16))(v4, v6, v1);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v7._uint64_t countAndFlagsBits = 0;
    v7._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v7);
    uint64_t v15 = &type metadata for Feature;
    v14[0] = 0;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_1000709E0((uint64_t)v14);
    unint64_t v8 = 0x800000010015C7F0;
    unint64_t v9 = 0xD00000000000002ALL;
  }
  else
  {
    if (qword_1001A0E80 != -1) {
      swift_once();
    }
    uint64_t v10 = sub_10002F6AC(v1, (uint64_t)qword_1001AE3C8);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v2 + 16))(v4, v10, v1);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v11._uint64_t countAndFlagsBits = 0;
    v11._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v11);
    uint64_t v15 = &type metadata for Feature;
    v14[0] = 0;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_1000709E0((uint64_t)v14);
    unint64_t v9 = 0xD00000000000002BLL;
    unint64_t v8 = 0x800000010015C7C0;
  }
  LogMessage.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&v9);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
  *(void *)(v0 + 16) = [self sharedInstance];
  *(unsigned char *)(v0 + 24) = v5 & 1;
  return v0;
}

uint64_t sub_10008A9CC(uint64_t a1)
{
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = v1;
  return _swift_task_switch(sub_10008A9EC, 0, 0);
}

uint64_t sub_10008A9EC()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = *(void **)(v1 + 16);
  v0[17] = v2;
  if (*(unsigned char *)(v1 + 24))
  {
    uint64_t v3 = v0[15];
    v0[2] = v0;
    v0[3] = sub_10008ACD0;
    uint64_t v4 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_10008AF84;
    v0[13] = &unk_100186410;
    v0[14] = v4;
    [v2 updateWithContext:v3 withCompletionHandler:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    uint64_t v5 = v0[15];
    id v6 = v2;
    v0[18] = sub_1000A7A90(v5);
    uint64_t v7 = sub_10002EB60(&qword_1001A21A0);
    uint64_t v8 = sub_100053028(&qword_1001A2C70, &qword_1001A21A0);
    unint64_t v9 = (void *)swift_task_alloc();
    v0[19] = v9;
    void *v9 = v0;
    v9[1] = sub_10008ABB4;
    return dispatch thunk of Future.then()(v9, v7, v8);
  }
}

uint64_t sub_10008ABB4()
{
  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_release();
    uint64_t v2 = sub_10008AE48;
  }
  else
  {
    uint64_t v2 = sub_10008ADE0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10008ACD0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 168) = v1;
  if (v1) {
    uint64_t v2 = sub_10008AF10;
  }
  else {
    uint64_t v2 = sub_10008AEAC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10008ADE0()
{
  uint64_t v1 = *(void **)(v0 + 136);
  swift_release();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10008AE48()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10008AEAC()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10008AF10()
{
  uint64_t v1 = *(void **)(v0 + 136);
  swift_willThrow();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10008AF84(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    sub_10002EB60((uint64_t *)&unk_1001A3FC0);
    uint64_t v4 = swift_allocError();
    void *v5 = a2;
    id v6 = a2;
    return _swift_continuation_throwingResumeWithError(v2, v4);
  }
  else
  {
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_10008B01C(uint64_t a1, uint64_t a2)
{
  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  return _swift_task_switch(sub_10008B040, 0, 0);
}

uint64_t sub_10008B040()
{
  uint64_t v1 = v0[17];
  if (*(unsigned char *)(v1 + 24))
  {
    uint64_t v3 = v0[15];
    uint64_t v2 = v0[16];
    uint64_t v4 = *(void **)(v1 + 16);
    v0[18] = v4;
    v0[2] = v0;
    v0[3] = sub_10008B1D4;
    uint64_t v5 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_10008AF84;
    v0[13] = &unk_1001863F8;
    v0[14] = v5;
    [v4 updateForAccountID:v3 withContext:v2 withCompletionHandler:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease();
    return _assertionFailure(_:_:file:line:flags:)();
  }
}

uint64_t sub_10008B1D4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 152) = v1;
  if (v1) {
    uint64_t v2 = sub_10008B348;
  }
  else {
    uint64_t v2 = sub_10008B2E4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10008B2E4()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10008B348()
{
  uint64_t v1 = *(void **)(v0 + 144);
  swift_willThrow();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10008B3B8(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  return _swift_task_switch(sub_10008B3DC, 0, 0);
}

uint64_t sub_10008B3DC()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = *(void **)(v1 + 16);
  v0[6] = v2;
  if (*(unsigned char *)(v1 + 24))
  {
    v2;
    uint64_t v3 = (void *)swift_task_alloc();
    v0[10] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10008B6AC;
    uint64_t v5 = v0[3];
    uint64_t v4 = v0[4];
    return ASDPurchaseHistory.fetchAllApps(of:compatibleWith:)(v5, v4);
  }
  else
  {
    uint64_t v6 = v0[3];
    id v7 = v2;
    v0[7] = sub_1000A7D18(v6);
    uint64_t v8 = sub_10002EB60(&qword_1001A5E50);
    uint64_t v9 = sub_100053028(&qword_1001A2C50, &qword_1001A5E50);
    uint64_t v10 = (void *)swift_task_alloc();
    v0[8] = v10;
    void *v10 = v0;
    v10[1] = sub_10008B56C;
    return dispatch thunk of Future.then()(v0 + 2, v8, v9);
  }
}

uint64_t sub_10008B56C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 72) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    uint64_t v3 = sub_10008B83C;
  }
  else
  {
    *(void *)(v2 + 96) = *(void *)(v2 + 16);
    uint64_t v3 = sub_10008B7D4;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10008B6AC(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 88) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10008B908;
  }
  else
  {
    *(void *)(v4 + 104) = a1;
    uint64_t v5 = sub_10008B8A0;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10008B7D4()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_10008B83C()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10008B8A0()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_10008B908()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10008B96C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  return _swift_task_switch(sub_10008B990, 0, 0);
}

uint64_t sub_10008B990()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = *(void **)(v1 + 16);
  v0[8] = v2;
  if (*(unsigned char *)(v1 + 24))
  {
    v2;
    uint64_t v3 = (void *)swift_task_alloc();
    v0[12] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10008BCA0;
    uint64_t v4 = v0[5];
    uint64_t v5 = v0[6];
    uint64_t v6 = v0[4];
    return ASDPurchaseHistory.fetchApps(of:withIDs:compatibleWith:)(v6, v4, v5);
  }
  else
  {
    uint64_t v7 = v0[5];
    uint64_t v8 = v0[4];
    id v9 = v2;
    uint64_t v10 = sub_10008A48C(v7);
    v0[9] = sub_1000A7FB8(v8, (unint64_t)v10);
    swift_bridgeObjectRelease();
    uint64_t v11 = sub_10002EB60(&qword_1001A5E50);
    uint64_t v12 = sub_100053028(&qword_1001A2C50, &qword_1001A5E50);
    uint64_t v13 = (void *)swift_task_alloc();
    v0[10] = v13;
    void *v13 = v0;
    v13[1] = sub_10008BB64;
    return dispatch thunk of Future.then()(v0 + 3, v11, v12);
  }
}

uint64_t sub_10008BB64()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    uint64_t v3 = sub_10008BE30;
  }
  else
  {
    *(void *)(v2 + 112) = *(void *)(v2 + 24);
    uint64_t v3 = sub_10008BDC8;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10008BCA0(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 104) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10008BEFC;
  }
  else
  {
    *(void *)(v4 + 120) = a1;
    uint64_t v5 = sub_10008BE94;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10008BDC8()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_10008BE30()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10008BE94()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_10008BEFC()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10008BF60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return _swift_task_switch(sub_10008BF84, 0, 0);
}

uint64_t sub_10008BF84()
{
  uint64_t v1 = v0[5];
  if (*(unsigned char *)(v1 + 24))
  {
    uint64_t v2 = *(void **)(v1 + 16);
    v0[6] = v2;
    v2;
    uint64_t v3 = (void *)swift_task_alloc();
    v0[7] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10008C0C4;
    uint64_t v4 = v0[3];
    uint64_t v5 = v0[4];
    uint64_t v6 = v0[2];
    return ASDPurchaseHistory.fetchApps(of:withIDs:compatibleWith:)(v6, v4, v5);
  }
  else
  {
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease();
    return _assertionFailure(_:_:file:line:flags:)();
  }
}

uint64_t sub_10008C0C4(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 64) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10008C254;
  }
  else
  {
    *(void *)(v4 + 72) = a1;
    uint64_t v5 = sub_10008C1EC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10008C1EC()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 72);
  return v1(v2);
}

uint64_t sub_10008C254()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10008C2B8(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return _swift_task_switch(sub_10008C2DC, 0, 0);
}

uint64_t sub_10008C2DC()
{
  uint64_t v1 = v0[4];
  if (*(unsigned char *)(v1 + 24))
  {
    uint64_t v2 = *(void **)(v1 + 16);
    v0[5] = v2;
    v2;
    uint64_t v3 = (void *)swift_task_alloc();
    v0[6] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10008C418;
    uint64_t v5 = v0[2];
    uint64_t v4 = v0[3];
    return ASDPurchaseHistory.fetchAllApps(for:compatibleWith:)(v5, v4);
  }
  else
  {
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease();
    return _assertionFailure(_:_:file:line:flags:)();
  }
}

uint64_t sub_10008C418(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 56) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10008C5A8;
  }
  else
  {
    *(void *)(v4 + 64) = a1;
    uint64_t v5 = sub_10008C540;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10008C540()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 64);
  return v1(v2);
}

uint64_t sub_10008C5A8()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10008C60C()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ASCMigrationPurchaseHistoryImplementation()
{
  return self;
}

uint64_t initializeBufferWithCopyOfBuffer for ASCMigrationPurchaseHistoryImplementation.Store(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  id v5 = v3;
  return a1;
}

void destroy for ASCMigrationPurchaseHistoryImplementation.Store(id *a1)
{
}

uint64_t assignWithCopy for ASCMigrationPurchaseHistoryImplementation.Store(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  id v6 = v3;

  return a1;
}

uint64_t initializeWithTake for ASCMigrationPurchaseHistoryImplementation.Store(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for ASCMigrationPurchaseHistoryImplementation.Store(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;

  return a1;
}

uint64_t getEnumTagSinglePayload for ASCMigrationPurchaseHistoryImplementation.Store(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ASCMigrationPurchaseHistoryImplementation.Store(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10008C7C4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_10008C7CC(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ASCMigrationPurchaseHistoryImplementation.Store()
{
  return &type metadata for ASCMigrationPurchaseHistoryImplementation.Store;
}

uint64_t sub_10008C7E8(uint64_t a1)
{
  uint64_t v4 = *v1;
  id v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10002F874;
  v5[15] = a1;
  v5[16] = v4;
  return _swift_task_switch(sub_10008A9EC, 0, 0);
}

uint64_t sub_10008C898(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_100053090;
  v7[16] = a2;
  v7[17] = v6;
  v7[15] = a1;
  return _swift_task_switch(sub_10008B040, 0, 0);
}

uint64_t sub_10008C958(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_1000892B4;
  v7[4] = a2;
  v7[5] = v6;
  v7[3] = a1;
  return _swift_task_switch(sub_10008B3DC, 0, 0);
}

uint64_t sub_10008CA18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v3;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_10008CCDC;
  v9[6] = a3;
  v9[7] = v8;
  v9[4] = a1;
  v9[5] = a2;
  return _swift_task_switch(sub_10008B990, 0, 0);
}

uint64_t sub_10008CADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v3;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[4] = a3;
  v9[5] = v8;
  void v9[2] = a1;
  v9[3] = a2;
  v9[1] = sub_10008CCDC;
  return _swift_task_switch(sub_10008BF84, 0, 0);
}

uint64_t sub_10008CBA0(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[3] = a2;
  v7[4] = v6;
  v7[1] = sub_10008CCDC;
  v7[2] = a1;
  return _swift_task_switch(sub_10008C2DC, 0, 0);
}

unint64_t sub_10008CC5C(uint64_t a1)
{
  unint64_t result = sub_10008CC84();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10008CC84()
{
  unint64_t result = qword_1001A2C30;
  if (!qword_1001A2C30)
  {
    type metadata accessor for ASCMigrationPurchaseHistoryImplementation();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001A2C30);
  }
  return result;
}

uint64_t sub_10008CCE0()
{
  type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin();
  uint64_t v1 = type metadata accessor for OSLogger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = &v14[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v15 = &type metadata for Feature;
  unint64_t v16 = sub_100070914();
  v14[0] = 0;
  char v5 = isFeatureEnabled(_:)();
  sub_10002ED08((uint64_t)v14);
  if (v5)
  {
    if (qword_1001A0E80 != -1) {
      swift_once();
    }
    uint64_t v6 = sub_10002F6AC(v1, (uint64_t)qword_1001AE3C8);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v2 + 16))(v4, v6, v1);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v7._uint64_t countAndFlagsBits = 0;
    v7._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v7);
    uint64_t v15 = &type metadata for Feature;
    v14[0] = 0;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_100034B8C((uint64_t)v14, &qword_1001A1C50);
    unint64_t v8 = 0x800000010015C8F0;
    unint64_t v9 = 0xD00000000000002ALL;
  }
  else
  {
    if (qword_1001A0E80 != -1) {
      swift_once();
    }
    uint64_t v10 = sub_10002F6AC(v1, (uint64_t)qword_1001AE3C8);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v2 + 16))(v4, v10, v1);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v11._uint64_t countAndFlagsBits = 0;
    v11._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v11);
    uint64_t v15 = &type metadata for Feature;
    v14[0] = 0;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_100034B8C((uint64_t)v14, &qword_1001A1C50);
    unint64_t v9 = 0xD00000000000002BLL;
    unint64_t v8 = 0x800000010015C8C0;
  }
  LogMessage.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&v9);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
  *(void *)(v0 + 16) = [self sharedManager];
  *(unsigned char *)(v0 + 24) = v5 & 1;
  return v0;
}

uint64_t sub_10008D100()
{
  id v1 = *(id *)(v0 + 16);
  id v3 = objc_allocWithZone((Class)LSApplicationRecord);
  swift_bridgeObjectRetain();
  id v4 = sub_10008ED70();
  if (v4)
  {

    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

uint64_t sub_10008D1AC(uint64_t a1)
{
  *(void *)(v2 + 72) = a1;
  *(void *)(v2 + 80) = v1;
  return _swift_task_switch(sub_10008D1CC, 0, 0);
}

uint64_t sub_10008D1CC()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = *(void **)(v1 + 16);
  v0[11] = v2;
  if (*(unsigned char *)(v1 + 24))
  {
    v2;
    id v3 = (void *)swift_task_alloc();
    v0[15] = v3;
    *id v3 = v0;
    v3[1] = sub_10008D568;
    uint64_t v4 = v0[9];
    return ASDPurchaseManager.start(_:)(v4);
  }
  else
  {
    uint64_t v5 = v0[9];
    uint64_t v6 = sub_10002EB60(&qword_1001A2D58);
    id v7 = v2;
    v0[12] = Promise.__allocating_init()();
    uint64_t v8 = Promise.makeCompletionAdapter()();
    uint64_t v10 = v9;
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v8;
    *(void *)(v11 + 24) = v10;
    v0[6] = sub_10008ED38;
    v0[7] = v11;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_10008E9B8;
    v0[5] = &unk_100186560;
    uint64_t v12 = _Block_copy(v0 + 2);
    swift_release();
    [v7 startPurchase:v5 withResultHandler:v12];
    _Block_release(v12);
    uint64_t v13 = sub_100053028(&qword_1001A2D60, &qword_1001A2D58);
    Swift::String v14 = (void *)swift_task_alloc();
    v0[13] = v14;
    *Swift::String v14 = v0;
    v14[1] = sub_10008D428;
    return dispatch thunk of Future.then()(v0 + 8, v6, v13);
  }
}

uint64_t sub_10008D428()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    id v3 = sub_10008D720;
  }
  else
  {
    *(void *)(v2 + 136) = *(void *)(v2 + 64);
    id v3 = sub_10008D694;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10008D568(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 128) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_10008D7F0;
  }
  else
  {
    *(unsigned char *)(v4 + 144) = a1 & 1;
    uint64_t v5 = sub_10008D788;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_10008D694()
{
  uint64_t v1 = (void *)v0[17];
  uint64_t v2 = (void *)v0[11];
  id v3 = [v1 success];

  uint64_t v4 = (uint64_t (*)(id))v0[1];
  return v4(v3);
}

uint64_t sub_10008D720()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_10008D788()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 144);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_10008D7F0()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_10008D858(uint64_t a1, uint64_t a2)
{
  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  return _swift_task_switch(sub_10008D87C, 0, 0);
}

uint64_t sub_10008D87C()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = *(void **)(v1 + 16);
  v0[11] = v2;
  if (*(unsigned char *)(v1 + 24))
  {
    v2;
    uint64_t v3 = (void *)swift_task_alloc();
    v0[15] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10008DBAC;
    uint64_t v4 = v0[8];
    uint64_t v5 = v0[9];
    return ASDPurchaseManager.install(_:)(v4, v5);
  }
  else
  {
    uint64_t v6 = v0[9];
    uint64_t v7 = sub_10002EB60(&qword_1001A2D40);
    id v8 = v2;
    v0[12] = Promise.__allocating_init()();
    uint64_t v9 = self;
    v0[6] = Promise.makeCompletionAdapter()();
    v0[7] = v10;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_10008EA44;
    v0[5] = &unk_100186510;
    uint64_t v11 = _Block_copy(v0 + 2);
    swift_release();
    [v9 installApp:v6 withCompletionHandler:v11];
    _Block_release(v11);
    uint64_t v12 = sub_100053028((unint64_t *)&qword_1001A5E20, &qword_1001A2D40);
    uint64_t v13 = (void *)swift_task_alloc();
    v0[13] = v13;
    void *v13 = v0;
    v13[1] = sub_10008DA98;
    uint64_t v14 = v0[8];
    return dispatch thunk of Future.then()(v14, v7, v12);
  }
}

uint64_t sub_10008DA98()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10008DD28;
  }
  else {
    uint64_t v2 = sub_10008DCC0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10008DBAC()
{
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10008DDF4;
  }
  else {
    uint64_t v2 = sub_10008DD90;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10008DCC0()
{
  uint64_t v1 = *(void **)(v0 + 88);
  swift_release();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10008DD28()
{
  uint64_t v1 = *(void **)(v0 + 88);
  swift_release();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10008DD90()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10008DDF4()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10008DE58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[23] = a3;
  v4[24] = v3;
  v4[21] = a1;
  v4[22] = a2;
  uint64_t v5 = type metadata accessor for UUID();
  v4[25] = v5;
  v4[26] = *(void *)(v5 - 8);
  v4[27] = swift_task_alloc();
  return _swift_task_switch(sub_10008DF1C, 0, 0);
}

uint64_t sub_10008DF1C()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = *(void **)(v1 + 16);
  v0[28] = v2;
  if (*(unsigned char *)(v1 + 24))
  {
    uint64_t v3 = v0[27];
    uint64_t v5 = v0[22];
    uint64_t v4 = v0[23];
    id v6 = v2;
    uint64_t v7 = self;
    v0[2] = v0;
    v0[7] = v3;
    v0[3] = sub_10008E2C4;
    uint64_t v8 = swift_continuation_init();
    v0[16] = _NSConcreteStackBlock;
    v0[17] = 0x40000000;
    v0[18] = sub_10008EB8C;
    v0[19] = &unk_1001864D0;
    v0[20] = v8;
    [v7 installApp:v5 onPairedDevice:v4 withCompletionHandler:v0 + 16];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    uint64_t v10 = v0[22];
    uint64_t v9 = v0[23];
    uint64_t v11 = sub_10002EB60(&qword_1001A2D40);
    id v12 = v2;
    v0[29] = Promise.__allocating_init()();
    uint64_t v13 = self;
    v0[14] = Promise.makeCompletionAdapter()();
    v0[15] = v14;
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 1107296256;
    v0[12] = sub_10008EA44;
    v0[13] = &unk_1001864E8;
    uint64_t v15 = _Block_copy(v0 + 10);
    swift_release();
    [v13 installApp:v10 onPairedDevice:v9 withCompletionHandler:v15];
    _Block_release(v15);
    uint64_t v16 = sub_100053028((unint64_t *)&qword_1001A5E20, &qword_1001A2D40);
    uint64_t v17 = (void *)swift_task_alloc();
    v0[30] = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_10008E1B0;
    uint64_t v18 = v0[21];
    return dispatch thunk of Future.then()(v18, v11, v16);
  }
}

uint64_t sub_10008E1B0()
{
  *(void *)(*(void *)v1 + 248) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10008E444;
  }
  else {
    uint64_t v2 = sub_10008E3D4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10008E2C4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 256) = v1;
  if (v1) {
    uint64_t v2 = sub_10008E538;
  }
  else {
    uint64_t v2 = sub_10008E4B4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10008E3D4()
{
  uint64_t v1 = *(void **)(v0 + 224);
  swift_release();

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10008E444()
{
  uint64_t v1 = *(void **)(v0 + 224);
  swift_release();

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10008E4B4()
{
  uint64_t v1 = (void *)v0[28];
  (*(void (**)(void, void, void))(v0[26] + 32))(v0[21], v0[27], v0[25]);

  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_10008E538()
{
  uint64_t v1 = *(void **)(v0 + 224);
  swift_willThrow();

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t type metadata accessor for ASCMigrationPurchaseManagerImplementation()
{
  return self;
}

ValueMetadata *type metadata accessor for ASCMigrationPurchaseManagerImplementation.Store()
{
  return &type metadata for ASCMigrationPurchaseManagerImplementation.Store;
}

uint64_t sub_10008E5E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_100053090;
  return sub_10008DE58(a1, a2, a3);
}

uint64_t sub_10008E69C()
{
  return sub_10008D100() & 1;
}

uint64_t sub_10008E6C4(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10008E774;
  v5[9] = a1;
  v5[10] = v4;
  return _swift_task_switch(sub_10008D1CC, 0, 0);
}

uint64_t sub_10008E774(char a1)
{
  uint64_t v7 = *v2;
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (v1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = a1 & 1;
  }
  return v4(v5);
}

uint64_t sub_10008E87C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_10002F874;
  v7[9] = a2;
  v7[10] = v6;
  v7[8] = a1;
  return _swift_task_switch(sub_10008D87C, 0, 0);
}

unint64_t sub_10008E93C(uint64_t a1)
{
  unint64_t result = sub_10008E964();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10008E964()
{
  unint64_t result = qword_1001A2D30;
  if (!qword_1001A2D30)
  {
    type metadata accessor for ASCMigrationPurchaseManagerImplementation();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1001A2D30);
  }
  return result;
}

void sub_10008E9B8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t sub_10008EA44(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_10002EB60(&qword_1001A5E00);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void (**)(char *, void *))(a1 + 32);
  if (a2)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = type metadata accessor for UUID();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v8, 0, 1, v10);
  }
  else
  {
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v8, 1, 1, v11);
  }
  swift_retain();
  id v12 = a3;
  v9(v8, a3);
  swift_release();

  return sub_100034B8C((uint64_t)v8, &qword_1001A5E00);
}

uint64_t sub_10008EB8C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_10002EB60((uint64_t *)&unk_1001A3FC0);
    uint64_t v10 = swift_allocError();
    void *v11 = a3;
    id v12 = a3;
    return _swift_continuation_throwingResumeWithError(v9, v10);
  }
  else
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(void, char *, uint64_t))(v6 + 32))(*(void *)(*(void *)(v9 + 64) + 40), v8, v5);
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_10008ECE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10008ECF8()
{
  return swift_release();
}

uint64_t sub_10008ED00()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008ED38(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

id sub_10008ED70()
{
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = 0;
  id v2 = [v0 initWithBundleIdentifierOfSystemPlaceholder:v1 error:&v6];

  if (v2)
  {
    id v3 = v6;
  }
  else
  {
    id v4 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

uint64_t sub_10008EE4C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = swift_unknownObjectRetain();
  uint64_t v6 = sub_10012CF00(v5, v4);
  swift_unknownObjectRelease();
  v8[3] = v3;
  v8[4] = sub_10008EFC0();
  v8[0] = v6;
  AsyncEvent.post(_:)();
  return sub_10002ED08((uint64_t)v8);
}

uint64_t type metadata accessor for ASCMigrationRestrictionsImplementation()
{
  return self;
}

uint64_t sub_10008EF1C()
{
  return sub_10010D53C();
}

id sub_10008EF54()
{
  return [*(id *)(*(void *)(*(void *)v0 + 16) + OBJC_IVAR____TtC19appstorecomponentsd19ManagedRestrictions_profile) isOnDeviceAppInstallationAllowed];
}

uint64_t sub_10008EF88()
{
  return 1;
}

uint64_t sub_10008EF94()
{
  return sub_10010CF90() & 1;
}

unint64_t sub_10008EFC0()
{
  unint64_t result = qword_1001A2E10;
  if (!qword_1001A2E10)
  {
    type metadata accessor for ASCMigrationRestrictionsImplementation();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A2E10);
  }
  return result;
}

id sub_10008F014(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A2568);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v118 = (uint64_t)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v117 = (char *)&v97 - v7;
  uint64_t v8 = type metadata accessor for JSONContext();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v108 = (uint64_t)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v97 - v12;
  uint64_t v14 = type metadata accessor for JSONObject();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v122 = v14;
  uint64_t v123 = v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v113 = (char *)&v97 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  char v105 = (char *)&v97 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v112 = (char *)&v97 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v111 = (char *)&v97 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v110 = (char *)&v97 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v109 = (char *)&v97 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v107 = (uint64_t)&v97 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v106 = (uint64_t)&v97 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v115 = (uint64_t)&v97 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v104 = (uint64_t)&v97 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v114 = (uint64_t)&v97 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v40 = (char *)&v97 - v39;
  uint64_t v41 = __chkstk_darwin(v38);
  uint64_t v116 = (char *)&v97 - v42;
  __chkstk_darwin(v41);
  uint64_t v44 = (char *)&v97 - v43;
  uint64_t v121 = a1;
  JSONObject.subscript.getter();
  uint64_t v45 = v9;
  objc_super v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  uint64_t v47 = v9 + 16;
  uint64_t v46 = v48;
  uint64_t v119 = a2;
  v48((uint64_t)v13, a2, v8);
  sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
  uint64_t v49 = v120;
  uint64_t v50 = (void *)sub_100070E7C();
  if (v49)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v13, v8);
    return (id)(*(uint64_t (**)(char *, uint64_t))(v123 + 8))(v44, v122);
  }
  uint64_t v100 = v40;
  char v98 = v46;
  uint64_t v99 = v47;
  uint64_t v102 = v50;
  uint64_t v103 = 0;
  uint64_t v52 = *(void (**)(char *, uint64_t))(v45 + 8);
  uint64_t v101 = v8;
  v52(v13, v8);
  uint64_t v53 = v123 + 8;
  int v54 = *(void (**)(char *, uint64_t))(v123 + 8);
  uint64_t v55 = v44;
  uint64_t v56 = v122;
  v54(v55, v122);
  uint64_t v57 = v116;
  JSONObject.subscript.getter();
  uint64_t v58 = v117;
  JSONObject.dictionary.getter();
  uint64_t v123 = v53;
  uint64_t v120 = v54;
  v54(v57, v56);
  uint64_t v59 = type metadata accessor for JSONDictionary();
  uint64_t v60 = *(void *)(v59 - 8);
  uint64_t v61 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v60 + 48);
  if (v61(v58, 1, v59) == 1)
  {
    sub_100072F80((uint64_t)v58);
    uint64_t v62 = v122;
    uint64_t v63 = v100;
  }
  else
  {
    type metadata accessor for ASCOfferTitleVariant(0);
    sub_100090004((unint64_t *)&qword_1001A14D8, type metadata accessor for ASCOfferTitleVariant);
    uint64_t v64 = JSONDictionary.bridgedPrimitiveValues<A, B>()();
    (*(void (**)(void *, uint64_t))(v60 + 8))(v58, v59);
    uint64_t v62 = v122;
    uint64_t v63 = v100;
    if (v64) {
      goto LABEL_7;
    }
  }
  uint64_t v64 = sub_100063688((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
LABEL_7:
  JSONObject.subscript.getter();
  uint64_t v65 = v118;
  JSONObject.dictionary.getter();
  v120(v63, v62);
  unsigned int v66 = v61((void *)v65, 1, v59);
  uint64_t v122 = v64;
  if (v66 == 1)
  {
    sub_100072F80(v65);
    uint64_t v67 = v119;
    uint64_t v69 = v114;
    uint64_t v68 = v115;
    uint64_t v70 = v101;
  }
  else
  {
    type metadata accessor for ASCOfferTitleVariant(0);
    sub_100090004((unint64_t *)&qword_1001A14D8, type metadata accessor for ASCOfferTitleVariant);
    uint64_t v71 = JSONDictionary.bridgedPrimitiveValues<A, B>()();
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v65, v59);
    uint64_t v67 = v119;
    uint64_t v69 = v114;
    uint64_t v68 = v115;
    uint64_t v70 = v101;
    if (v71) {
      goto LABEL_11;
    }
  }
  uint64_t v71 = sub_100063688((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
LABEL_11:
  JSONObject.subscript.getter();
  uint64_t v72 = JSONObject.int.getter();
  if (v73)
  {
    uint64_t v92 = type metadata accessor for JSONError();
    sub_100090004((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
    swift_allocError();
    uint64_t v94 = v93;
    type metadata accessor for ASCOfferFlags(0);
    *uint64_t v94 = 0x65756C6156776172;
    v94[1] = 0xE800000000000000;
    v94[2] = v95;
    v94[3] = _swiftEmptyArrayStorage;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v92 - 8) + 104))(v94, enum case for JSONError.malformedProperty(_:), v92);
    swift_willThrow();
    v120((char *)v69, v62);

    swift_bridgeObjectRelease();
    return (id)swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v121 = v72;
    uint64_t v118 = v71;
    uint64_t v74 = (void (*)(uint64_t, uint64_t))v120;
    v120((char *)v69, v62);
    uint64_t v75 = v104;
    JSONObject.subscript.getter();
    uint64_t v117 = (char *)JSONObject.number.getter();
    v74(v75, v62);
    JSONObject.subscript.getter();
    v98(v108, v67, v70);
    sub_10002EB60(&qword_1001A2570);
    sub_100072224();
    uint64_t v76 = Array<A>.init(tryDeserializing:using:)();
    uint64_t v77 = v103;
    uint64_t v116 = (char *)sub_1000713FC(v76);
    uint64_t v103 = v77;
    swift_bridgeObjectRelease();
    uint64_t v78 = v106;
    JSONObject.subscript.getter();
    uint64_t v79 = JSONObject.string.getter();
    uint64_t v114 = v80;
    uint64_t v115 = v79;
    v74(v78, v62);
    uint64_t v81 = v107;
    JSONObject.subscript.getter();
    uint64_t v108 = JSONObject.string.getter();
    uint64_t v106 = v82;
    v74(v81, v62);
    uint64_t v83 = v109;
    JSONObject.subscript.getter();
    uint64_t v107 = JSONObject.string.getter();
    uint64_t v104 = v84;
    v74((uint64_t)v83, v62);
    uint64_t v85 = v110;
    JSONObject.subscript.getter();
    LODWORD(v83) = JSONObject.BOOL.getter();
    v74((uint64_t)v85, v62);
    LODWORD(v110) = (v83 == 2) | v83;
    uint64_t v86 = v111;
    JSONObject.subscript.getter();
    uint64_t v109 = (char *)JSONObject.number.getter();
    v74((uint64_t)v86, v62);
    uint64_t v87 = v112;
    JSONObject.subscript.getter();
    LOBYTE(v86) = JSONObject.BOOL.getter();
    v74((uint64_t)v87, v62);
    LODWORD(v112) = v86 & 1;
    JSONObject.subscript.getter();
    type metadata accessor for ASCControllerRequirement(0);
    sub_100090004(&qword_1001A12A8, type metadata accessor for ASCControllerRequirement);
    JSONObject.stringEnumOrNil<A>()();
    v74(v68, v62);
    uint64_t v111 = v124;
    char v88 = v105;
    JSONObject.subscript.getter();
    LOBYTE(v86) = JSONObject.BOOL.getter();
    v74((uint64_t)v88, v62);
    LOBYTE(v88) = v86 & 1;
    uint64_t v89 = v113;
    JSONObject.subscript.getter();
    LOBYTE(v86) = JSONObject.BOOL.getter();
    v74((uint64_t)v89, v62);
    LOBYTE(v89) = v86 & 1;
    JSONObject.subscript.getter();
    uint64_t v90 = sub_10002DFC4(v68, v119);
    v74(v68, v62);
    id v91 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    HIBYTE(v96) = (_BYTE)v89;
    LOBYTE(v96) = (_BYTE)v88;
    return sub_10008FDA4(v102, v122, v118, v121, v117, (uint64_t)v116, v115, v114, v108, v106, v107, v104, v110 & 1, v109, (char)v112, v111, v96, v90);
  }
}

id sub_10008FD8C(uint64_t a1, uint64_t a2)
{
  return sub_10008F014(a1, a2);
}

id sub_10008FDA4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14, char a15, void *a16, __int16 a17, uint64_t a18)
{
  type metadata accessor for ASCOfferTitleVariant(0);
  sub_100090004((unint64_t *)&qword_1001A14D8, type metadata accessor for ASCOfferTitleVariant);
  v29.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v28.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_10002EE34(0, (unint64_t *)&qword_1001A1D98);
  v27.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (a8)
  {
    NSString v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v19 = a12;
    if (a10)
    {
LABEL_3:
      NSString v20 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    NSString v26 = 0;
    uint64_t v19 = a12;
    if (a10) {
      goto LABEL_3;
    }
  }
  NSString v20 = 0;
LABEL_6:
  if (v19)
  {
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v21 = 0;
  }
  LOWORD(v25) = a17 & 0x101;
  LOBYTE(v24) = a15 & 1;
  LOBYTE(v23) = a13 & 1;
  id v32 = objc_msgSend(v30, "initWithID:titles:subtitles:flags:ageRating:metrics:alertTitle:alertMessage:alertFooterMessage:isCancelable:checkRestrictionsForContentRating:shouldCheckForAvailableDiskSpace:remoteControllerRequirement:shouldIncludeActiveAccountInFooterMessage:shouldPromptForConfirmation:completionOffer:", a1, v29.super.isa, v28.super.isa, a4, a5, v27.super.isa, v26, v20, v21, v23, a14, v24, a16, v25, a18);

  swift_unknownObjectRelease();
  return v32;
}

uint64_t sub_100090004(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10009004C()
{
  unint64_t v1 = sub_10006353C((uint64_t)&_swiftEmptyArrayStorage);
  if ([v0 supportsDSIDLessInstall])
  {
    AnyHashable.init<A>(_:)();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v5 = v1;
    sub_10003F08C((uint64_t)v6, 0x654C444953447369, 0xEA00000000007373, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  if (objc_msgSend(v0, "shouldInstallParentApp", v5))
  {
    AnyHashable.init<A>(_:)();
    char v3 = swift_isUniquelyReferenced_nonNull_native();
    sub_10003F08C((uint64_t)v6, 0xD000000000000016, 0x800000010015CA80, v3);
    swift_bridgeObjectRelease();
  }
  return v1;
}

id sub_100090180(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for State();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  int v10 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  if (v10 != enum case for State.waiting(_:))
  {
    if (v10 == enum case for State.purchased(_:))
    {
      (*(void (**)(char *, uint64_t))(v7 + 96))(v9, v6);
      uint64_t v11 = type metadata accessor for AppPurchaseType();
      goto LABEL_5;
    }
    if (v10 == enum case for State.updatable(_:) || v10 == enum case for State.downloadable(_:))
    {
      (*(void (**)(char *, uint64_t))(v7 + 96))(v9, v6);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    if (v10 == enum case for State.installing(_:))
    {
      (*(void (**)(char *, uint64_t))(v7 + 96))(v9, v6);
      uint64_t v11 = type metadata accessor for AppInstallation();
      goto LABEL_5;
    }
    if (v10 != enum case for State.openable(_:))
    {
      if (v10 != enum case for State.buyable(_:)
        && v10 != enum case for State.installed(_:)
        && v10 != enum case for State.unknown(_:))
      {
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      }
      goto LABEL_6;
    }
    (*(void (**)(char *, uint64_t))(v7 + 96))(v9, v6);
    id v14 = [a2 titles];
    type metadata accessor for ASCOfferTitleVariant(0);
    sub_100092F90();
    uint64_t v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(void *)(v15 + 16))
    {
      uint64_t v16 = @"open";
      uint64_t v17 = sub_10003AA48(v16);
      if (v18)
      {
        uint64_t v19 = *(void *)(*(void *)(v15 + 56) + 16 * v17 + 8);
        swift_bridgeObjectRetain();

        swift_bridgeObjectRelease();
        sub_100052538(a3, (uint64_t)v28);
        if (v19)
        {
LABEL_30:
          sub_10002ED08((uint64_t)v28);
          uint64_t v23 = self;
          NSString v24 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v25 = [v23 textMetadataWithTitle:v24 subtitle:0];

          uint64_t v26 = type metadata accessor for AppOpenableDestination();
          (*(void (**)(char *, uint64_t))(*(void *)(v26 - 8) + 8))(v9, v26);
          return v25;
        }
LABEL_29:
        sub_10002EC6C(v28, v28[3]);
        v22._object = (void *)0x800000010015CAE0;
        v22._uint64_t countAndFlagsBits = 0xD000000000000016;
        Localizer.string(forKey:)(v22);
        goto LABEL_30;
      }
    }
    swift_bridgeObjectRelease();
    sub_100052538(a3, (uint64_t)v28);
    goto LABEL_29;
  }
  (*(void (**)(char *, uint64_t))(v7 + 96))(v9, v6);
  uint64_t v11 = type metadata accessor for AppInstallationType();
LABEL_5:
  (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8))(v9, v11);
LABEL_6:
  id v12 = [self deeplinkMetadata];

  return v12;
}

id sub_1000905EC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v56 = a4;
  uint64_t v58 = a1;
  uint64_t v6 = type metadata accessor for State();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  int v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  int v54 = (char *)&v52 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v55 = (char *)&v52 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v52 = (char *)&v52 - v16;
  __chkstk_darwin(v15);
  uint64_t v53 = (char *)&v52 - v17;
  uint64_t v18 = sub_10002EB60(&qword_1001A2E18);
  __chkstk_darwin(v18);
  NSString v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for ArcadeState();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  NSString v24 = (id *)((char *)&v52 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v57 = a2;
  unint64_t v25 = (unint64_t)[a2 flags] & 4;
  (*(void (**)(id *, uint64_t, uint64_t))(v22 + 16))(v24, a3, v21);
  int v26 = (*(uint64_t (**)(id *, uint64_t))(v22 + 88))(v24, v21);
  if (v26 == enum case for ArcadeState.notSubscribed(_:))
  {
    (*(void (**)(id *, uint64_t))(v22 + 96))(v24, v21);
    uint64_t v27 = type metadata accessor for ArcadeIntroOfferState();
    (*(void (**)(id *, uint64_t))(*(void *)(v27 - 8) + 8))(v24, v27);
LABEL_3:
    char v28 = 0;
    goto LABEL_9;
  }
  if (v26 == enum case for ArcadeState.purchasing(_:))
  {
    (*(void (**)(id *, uint64_t))(v22 + 96))(v24, v21);
    swift_release();
  }
  else
  {
    if (v26 != enum case for ArcadeState.subscribed(_:))
    {
      if (v26 != enum case for ArcadeState.unknown(_:)) {
        (*(void (**)(id *, uint64_t))(v22 + 8))(v24, v21);
      }
      goto LABEL_3;
    }
    (*(void (**)(id *, uint64_t))(v22 + 96))(v24, v21);
  }
  char v28 = 1;
LABEL_9:
  uint64_t v29 = *(int *)(v18 + 48);
  uint64_t v30 = *(int *)(v18 + 64);
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v31(v20, v58, v6);
  v20[v29] = v25 >> 2;
  v20[v30] = v28;
  int v32 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v20, v6);
  if (v32 != enum case for State.waiting(_:))
  {
    if (v32 == enum case for State.purchased(_:))
    {
      uint64_t v35 = v55;
      v31(v55, (uint64_t)v20, v6);
      (*(void (**)(char *, uint64_t))(v7 + 96))(v35, v6);
      uint64_t v36 = type metadata accessor for AppPurchaseType();
LABEL_17:
      (*(void (**)(char *, uint64_t))(*(void *)(v36 - 8) + 8))(v35, v36);
      goto LABEL_21;
    }
    if (v32 == enum case for State.updatable(_:))
    {
      uint64_t v39 = v54;
      v31(v54, (uint64_t)v20, v6);
      (*(void (**)(char *, uint64_t))(v7 + 96))(v39, v6);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (v32 == enum case for State.downloadable(_:))
      {
        uint64_t v41 = v53;
        v31(v53, (uint64_t)v20, v6);
        (*(void (**)(char *, uint64_t))(v7 + 96))(v41, v6);
        swift_bridgeObjectRelease();
        goto LABEL_35;
      }
      if (v32 == enum case for State.openable(_:))
      {
        uint64_t v35 = v52;
        v31(v52, (uint64_t)v20, v6);
        (*(void (**)(char *, uint64_t))(v7 + 96))(v35, v6);
        uint64_t v36 = type metadata accessor for AppOpenableDestination();
        goto LABEL_17;
      }
      if (v32 == enum case for State.buyable(_:)) {
        goto LABEL_35;
      }
      if (v32 != enum case for State.installed(_:))
      {
        if (v32 != enum case for State.unknown(_:)) {
          goto LABEL_25;
        }
LABEL_35:
        (*(void (**)(char *, uint64_t))(v7 + 8))(v20, v6);
        id v42 = [v57 titles];
        type metadata accessor for ASCOfferTitleVariant(0);
        sub_100092F90();
        uint64_t v43 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        if (*(void *)(v43 + 16))
        {
          uint64_t v44 = @"appStoreRepair";
          uint64_t v45 = sub_10003AA48(v44);
          if (v46)
          {
            uint64_t v47 = *(void *)(*(void *)(v43 + 56) + 16 * v45 + 8);
            swift_bridgeObjectRetain();

            swift_bridgeObjectRelease();
            sub_100052538(v56, (uint64_t)v59);
            if (v47)
            {
LABEL_42:
              sub_10002ED08((uint64_t)v59);
              uint64_t v49 = self;
              NSString v50 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              id v37 = [v49 textMetadataWithTitle:v50 subtitle:0];

              return v37;
            }
LABEL_41:
            sub_10002EC6C(v59, v59[3]);
            v48._object = (void *)0x800000010015CC00;
            v48._uint64_t countAndFlagsBits = 0xD000000000000016;
            Localizer.string(forKey:)(v48);
            goto LABEL_42;
          }
        }
        swift_bridgeObjectRelease();
        sub_100052538(v56, (uint64_t)v59);
        goto LABEL_41;
      }
    }
LABEL_21:
    if (v25) {
      char v40 = v28;
    }
    else {
      char v40 = 1;
    }
    if (v40) {
      goto LABEL_25;
    }
    goto LABEL_35;
  }
  v31(v10, (uint64_t)v20, v6);
  (*(void (**)(char *, uint64_t))(v7 + 96))(v10, v6);
  if (v25) {
    char v33 = v28;
  }
  else {
    char v33 = 1;
  }
  if (v33)
  {
    uint64_t v34 = type metadata accessor for AppInstallationType();
    (*(void (**)(char *, uint64_t))(*(void *)(v34 - 8) + 8))(v10, v34);
LABEL_25:
    sub_100092FE8((uint64_t)v20);
    return 0;
  }
  id v37 = [self indeterminateProgressMetadata];
  uint64_t v38 = type metadata accessor for AppInstallationType();
  (*(void (**)(char *, uint64_t))(*(void *)(v38 - 8) + 8))(v10, v38);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v20, v6);
  return v37;
}

id sub_100090E20(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v64 = a4;
  id v62 = a3;
  uint64_t v6 = type metadata accessor for AppInstallation.Progress();
  uint64_t v63 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AppInstallation();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for State();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
  int v17 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v16, v13);
  if (v17 == enum case for State.waiting(_:))
  {
    (*(void (**)(char *, uint64_t))(v14 + 96))(v16, v13);
    id v18 = objc_msgSend(self, "indeterminateProgressMetadata", v62);
    uint64_t v19 = type metadata accessor for AppInstallationType();
LABEL_5:
    (*(void (**)(char *, uint64_t))(*(void *)(v19 - 8) + 8))(v16, v19);
    return v18;
  }
  if (v17 == enum case for State.purchased(_:))
  {
    (*(void (**)(char *, uint64_t))(v14 + 96))(v16, v13);
    NSString v20 = self;
    sub_10002EC6C(v64, v64[3]);
    v21._object = (void *)0x800000010015CBA0;
    v21._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    Localizer.string(forKey:)(v21);
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v18 = objc_msgSend(v20, "textMetadataWithTitle:subtitle:", v22, 0, v62);

    uint64_t v19 = type metadata accessor for AppPurchaseType();
    goto LABEL_5;
  }
  if (v17 == enum case for State.updatable(_:))
  {
    (*(void (**)(char *, uint64_t))(v14 + 96))(v16, v13);
    swift_bridgeObjectRelease();
    NSString v24 = self;
    sub_10002EC6C(v64, v64[3]);
    v25._uint64_t countAndFlagsBits = 0xD000000000000018;
    v25._object = (void *)0x800000010015CBC0;
    Localizer.string(forKey:)(v25);
    NSString v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v27 = objc_msgSend(v24, "textMetadataWithTitle:subtitle:", v26, 0, v62);
LABEL_8:
    id v28 = v27;

    return v28;
  }
  if (v17 == enum case for State.downloadable(_:))
  {
    (*(void (**)(char *, uint64_t))(v14 + 96))(v16, v13);
    swift_bridgeObjectRelease();
    id v29 = objc_msgSend(self, "redownloadMetadata", v62);
LABEL_12:
    return v29;
  }
  if (v17 == enum case for State.installing(_:))
  {
    (*(void (**)(char *, uint64_t))(v14 + 96))(v16, v13);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v16, v9);
    uint64_t v30 = (void *)sub_100062C28();
    if (v30)
    {

      id v31 = objc_msgSend(self, "redownloadMetadata", v62);
    }
    else
    {
      char v40 = self;
      AppInstallation.progress.getter();
      AppInstallation.Progress.fractionCompleted.getter();
      double v42 = v41;
      (*(void (**)(char *, uint64_t))(v63 + 8))(v8, v6);
      id v31 = objc_msgSend(v40, "progressMetadataWithValue:cancellable:", 1, v42, v62);
    }
    id v28 = v31;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return v28;
  }
  if (v17 == enum case for State.openable(_:))
  {
    (*(void (**)(char *, uint64_t))(v14 + 96))(v16, v13);
    id v32 = objc_msgSend(a2, "titles", v62);
    type metadata accessor for ASCOfferTitleVariant(0);
    sub_100092F90();
    uint64_t v33 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(void *)(v33 + 16))
    {
      uint64_t v34 = @"open";
      uint64_t v35 = sub_10003AA48(v34);
      if (v36)
      {
        uint64_t v37 = *(void *)(*(void *)(v33 + 56) + 16 * v35 + 8);
        swift_bridgeObjectRetain();

        swift_bridgeObjectRelease();
        sub_100052538((uint64_t)v64, (uint64_t)v65);
        if (v37)
        {
LABEL_31:
          sub_10002ED08((uint64_t)v65);
          uint64_t v44 = self;
          NSString v45 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v18 = [v44 textMetadataWithTitle:v45 subtitle:0];

          uint64_t v19 = type metadata accessor for AppOpenableDestination();
          goto LABEL_5;
        }
LABEL_30:
        sub_10002EC6C(v65, v66);
        v43._uint64_t countAndFlagsBits = 0xD000000000000016;
        v43._object = (void *)0x800000010015CAE0;
        Localizer.string(forKey:)(v43);
        goto LABEL_31;
      }
    }
    swift_bridgeObjectRelease();
    sub_100052538((uint64_t)v64, (uint64_t)v65);
    goto LABEL_30;
  }
  if (v17 != enum case for State.buyable(_:))
  {
    if (v17 == enum case for State.installed(_:))
    {
      uint64_t v38 = self;
      sub_10002EC6C(v64, v64[3]);
      v39._object = (void *)0x800000010015CBE0;
      v39._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      Localizer.string(forKey:)(v39);
      NSString v26 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v27 = objc_msgSend(v38, "textMetadataWithTitle:subtitle:", v26, 0, v62);
      goto LABEL_8;
    }
    if (v17 != enum case for State.unknown(_:)) {
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    }
  }
  if ((objc_msgSend(a2, "flags", v62) & 0x40) != 0)
  {
    id v29 = [self redownloadMetadata];
    goto LABEL_12;
  }
  id v46 = [a2 titles];
  type metadata accessor for ASCOfferTitleVariant(0);
  sub_100092F90();
  uint64_t v47 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v47 + 16)) {
    goto LABEL_41;
  }
  id v48 = v62;
  uint64_t v49 = sub_10003AA48(v48);
  if ((v50 & 1) == 0)
  {

LABEL_41:
    swift_bridgeObjectRelease();
    sub_100052538((uint64_t)v64, (uint64_t)v65);
LABEL_42:
    sub_10002EC6C(v65, v66);
    v52._uint64_t countAndFlagsBits = 0xD000000000000015;
    v52._object = (void *)0x800000010015CB50;
    Localizer.string(forKey:)(v52);
    goto LABEL_43;
  }
  uint64_t v51 = *(void *)(*(void *)(v47 + 56) + 16 * v49 + 8);
  swift_bridgeObjectRetain();

  swift_bridgeObjectRelease();
  sub_100052538((uint64_t)v64, (uint64_t)v65);
  if (!v51) {
    goto LABEL_42;
  }
LABEL_43:
  sub_10002ED08((uint64_t)v65);
  id v53 = [a2 subtitles];
  uint64_t v54 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(v54 + 16))
  {
    id v55 = v62;
    uint64_t v56 = sub_10003AA48(v55);
    if (v57)
    {
      uint64_t v58 = *(void *)(*(void *)(v54 + 56) + 16 * v56 + 8);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v58 = 0;
    }
  }
  else
  {
    uint64_t v58 = 0;
  }
  swift_bridgeObjectRelease();
  NSString v59 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (v58)
  {
    NSString v60 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v60 = 0;
  }
  id v61 = [self textMetadataWithTitle:v59 subtitle:v60];

  return v61;
}

id sub_100091864(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for State();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  self;
  uint64_t v12 = swift_dynamicCastObjCClass();
  if (v12)
  {
    uint64_t v13 = (void *)v12;
    uint64_t v62 = a1;
    swift_unknownObjectRetain();
    id v14 = [v13 iapItemID];
    int v61 = sub_1001198D4(v14, a3);

    id v15 = [v13 streamlinedOffer];
    if (v15)
    {
      id v16 = v15;
      swift_getObjectType();
      uint64_t v17 = swift_conformsToProtocol2();
      if (v17) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 0;
      }
      if (v17) {
        id v19 = v16;
      }
      else {
        id v19 = 0;
      }
      if (v19)
      {
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v60 = v8;
        uint64_t v21 = v9;
        NSString v22 = a4;
        uint64_t v23 = a2;
        NSString v24 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8);
        swift_unknownObjectRetain();
        uint64_t v25 = ObjectType;
        NSString v26 = v11;
        uint64_t v27 = v24(v25, v18);
        a2 = v23;
        a4 = v22;
        uint64_t v28 = v21;
        uint64_t v29 = v60;
        uint64_t v30 = (void *)v27;
        swift_unknownObjectRelease_n();
        if (v30)
        {

          if ((v61 & 1) == 0)
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v11, v62, v29);
            int v31 = (*(uint64_t (**)(char *, uint64_t))(v28 + 88))(v11, v29);
            if (v31 == enum case for State.downloadable(_:))
            {
              (*(void (**)(char *, uint64_t))(v28 + 96))(v11, v29);
              swift_bridgeObjectRelease();
              goto LABEL_14;
            }
            if (v31 == enum case for State.openable(_:))
            {
              (*(void (**)(char *, uint64_t))(v28 + 96))(v11, v29);
              id v40 = [a2 titles];
              type metadata accessor for ASCOfferTitleVariant(0);
              sub_100092F90();
              uint64_t v41 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

              if (*(void *)(v41 + 16))
              {
                double v42 = @"discountOwnedParent";
                uint64_t v43 = sub_10003AA48(v42);
                if (v44)
                {
                  uint64_t v45 = *(void *)(*(void *)(v41 + 56) + 16 * v43 + 8);
                  swift_bridgeObjectRetain();

                  swift_bridgeObjectRelease();
                  sub_100052538((uint64_t)v22, (uint64_t)v63);
                  if (v45)
                  {
LABEL_48:
                    sub_10002ED08((uint64_t)v63);
                    char v57 = self;
                    NSString v58 = String._bridgeToObjectiveC()();
                    swift_bridgeObjectRelease();
                    id v39 = [v57 textMetadataWithTitle:v58 subtitle:0];

                    swift_unknownObjectRelease();
                    uint64_t v59 = type metadata accessor for AppOpenableDestination();
                    (*(void (**)(char *, uint64_t))(*(void *)(v59 - 8) + 8))(v26, v59);
                    return v39;
                  }
LABEL_47:
                  sub_10002EC6C(v63, v64);
                  v56._object = (void *)0x800000010015CB00;
                  v56._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
                  Localizer.string(forKey:)(v56);
                  goto LABEL_48;
                }
              }
              swift_bridgeObjectRelease();
              sub_100052538((uint64_t)v22, (uint64_t)v63);
              goto LABEL_47;
            }
            if (v31 == enum case for State.buyable(_:) || v31 == enum case for State.unknown(_:))
            {
LABEL_14:
              id v32 = [a2 titles];
              type metadata accessor for ASCOfferTitleVariant(0);
              sub_100092F90();
              uint64_t v33 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

              if (*(void *)(v33 + 16))
              {
                uint64_t v34 = @"discountUnownedParent";
                uint64_t v35 = sub_10003AA48(v34);
                if (v36)
                {
                  uint64_t v37 = *(void *)(*(void *)(v33 + 56) + 16 * v35 + 8);
                  swift_bridgeObjectRetain();

                  swift_bridgeObjectRelease();
                  sub_100052538((uint64_t)a4, (uint64_t)v63);
                  if (v37)
                  {
LABEL_35:
                    sub_10002ED08((uint64_t)v63);
                    id v47 = [a2 subtitles];
                    uint64_t v48 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

                    if (*(void *)(v48 + 16))
                    {
                      uint64_t v49 = @"standard";
                      uint64_t v50 = sub_10003AA48(v49);
                      if (v51)
                      {
                        uint64_t v52 = *(void *)(*(void *)(v48 + 56) + 16 * v50 + 8);
                        swift_bridgeObjectRetain();
                      }
                      else
                      {
                        uint64_t v52 = 0;
                      }
                    }
                    else
                    {
                      uint64_t v52 = 0;
                    }
                    swift_bridgeObjectRelease();
                    NSString v53 = String._bridgeToObjectiveC()();
                    swift_bridgeObjectRelease();
                    if (v52)
                    {
                      NSString v54 = String._bridgeToObjectiveC()();
                      swift_bridgeObjectRelease();
                    }
                    else
                    {
                      NSString v54 = 0;
                    }
                    id v55 = [self textMetadataWithTitle:v53 subtitle:v54];
                    swift_unknownObjectRelease();

                    return v55;
                  }
LABEL_34:
                  sub_10002EC6C(v63, v64);
                  v46._uint64_t countAndFlagsBits = 0xD000000000000025;
                  v46._object = (void *)0x800000010015CB20;
                  Localizer.string(forKey:)(v46);
                  goto LABEL_35;
                }
              }
              swift_bridgeObjectRelease();
              sub_100052538((uint64_t)a4, (uint64_t)v63);
              goto LABEL_34;
            }
            id v39 = sub_100090E20(v62, a2, @"standard", v22);
            swift_unknownObjectRelease();
            (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v29);
            return v39;
          }
        }
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    id v39 = sub_100090E20(v62, a2, @"standard", a4);
    swift_unknownObjectRelease();
    return v39;
  }

  return sub_100090E20(a1, a2, @"standard", a4);
}

id sub_100091F90(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v74 = a4;
  uint64_t v7 = type metadata accessor for ArcadeIntroOfferState();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v72 - v12;
  uint64_t v14 = type metadata accessor for ArcadeState();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (id *)((char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(id *, uint64_t, uint64_t))(v15 + 16))(v17, a3, v14);
  int v18 = (*(uint64_t (**)(id *, uint64_t))(v15 + 88))(v17, v14);
  if (v18 != enum case for ArcadeState.notSubscribed(_:))
  {
    if (v18 == enum case for ArcadeState.purchasing(_:))
    {
      (*(void (**)(id *, uint64_t))(v15 + 96))(v17, v14);
      swift_release();
      uint64_t v28 = self;
      NSString v29 = String._bridgeToObjectiveC()();
      id v30 = [v28 textMetadataWithTitle:v29 subtitle:0];

      return v30;
    }
    if (v18 == enum case for ArcadeState.subscribed(_:))
    {
      (*(void (**)(id *, uint64_t))(v15 + 96))(v17, v14);

      unsigned __int8 v38 = [a2 flags];
      id v39 = &ASCOfferTitleVariantPreorderSubscribed;
      if ((v38 & 8) == 0) {
        id v39 = &ASCOfferTitleVariantStandard;
      }
      id v40 = *v39;
      id v41 = sub_100090E20(a1, a2, v40, v74);

      return v41;
    }
    if (v18 != enum case for ArcadeState.unknown(_:)) {
      (*(void (**)(id *, uint64_t))(v15 + 8))(v17, v14);
    }
    id v46 = [a2 titles];
    type metadata accessor for ASCOfferTitleVariant(0);
    sub_100092F90();
    uint64_t v47 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(void *)(v47 + 16))
    {
      uint64_t v48 = @"notSubscribed";
      uint64_t v49 = sub_10003AA48(v48);
      if (v50)
      {
        uint64_t v51 = *(void *)(*(void *)(v47 + 56) + 16 * v49 + 8);
        swift_bridgeObjectRetain();

        swift_bridgeObjectRelease();
        sub_100052538((uint64_t)v74, (uint64_t)v75);
        if (v51)
        {
LABEL_48:
          sub_10002ED08((uint64_t)v75);
          uint64_t v67 = self;
          NSString v68 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v69 = [v67 textMetadataWithTitle:v68 subtitle:0];

          return v69;
        }
LABEL_47:
        sub_10002EC6C(v75, v76);
        v66._object = (void *)0x800000010015CB50;
        v66._uint64_t countAndFlagsBits = 0xD000000000000015;
        Localizer.string(forKey:)(v66);
        goto LABEL_48;
      }
    }
    swift_bridgeObjectRelease();
    sub_100052538((uint64_t)v74, (uint64_t)v75);
    goto LABEL_47;
  }
  (*(void (**)(id *, uint64_t))(v15 + 96))(v17, v14);
  (*(void (**)(char *, id *, uint64_t))(v8 + 32))(v13, v17, v7);
  id v19 = v13;
  if (([a2 flags] & 8) != 0)
  {
    id v32 = [a2 titles];
    type metadata accessor for ASCOfferTitleVariant(0);
    sub_100092F90();
    uint64_t v33 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(void *)(v33 + 16))
    {
      uint64_t v34 = @"preorderNotSubscribed";
      uint64_t v35 = sub_10003AA48(v34);
      if (v36)
      {
        uint64_t v37 = *(void *)(*(void *)(v33 + 56) + 16 * v35 + 8);
        swift_bridgeObjectRetain();

        swift_bridgeObjectRelease();
        sub_100052538((uint64_t)v74, (uint64_t)v75);
        if (v37)
        {
LABEL_31:
          sub_10002ED08((uint64_t)v75);
          NSString v53 = self;
          NSString v54 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v41 = [v53 textMetadataWithTitle:v54 subtitle:0];

          (*(void (**)(char *, uint64_t))(v8 + 8))(v19, v7);
          return v41;
        }
LABEL_30:
        sub_10002EC6C(v75, v76);
        v52._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
        v52._object = (void *)0x800000010015CB70;
        Localizer.string(forKey:)(v52);
        goto LABEL_31;
      }
    }
    swift_bridgeObjectRelease();
    sub_100052538((uint64_t)v74, (uint64_t)v75);
    goto LABEL_30;
  }
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v11, enum case for ArcadeIntroOfferState.available(_:), v7);
  char v20 = static ArcadeIntroOfferState.== infix(_:_:)();
  char v73 = *(void (**)(char *, uint64_t))(v8 + 8);
  v73(v11, v7);
  id v21 = [a2 titles];
  type metadata accessor for ASCOfferTitleVariant(0);
  sub_100092F90();
  uint64_t v22 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v23 = *(void *)(v22 + 16);
  if (v20)
  {
    uint64_t v72 = @"trial";
    if (v23)
    {
      NSString v24 = @"trial";
      uint64_t v25 = sub_10003AA48(v24);
      if (v26)
      {
        uint64_t v27 = *(void *)(*(void *)(v22 + 56) + 16 * v25 + 8);
        swift_bridgeObjectRetain();

        swift_bridgeObjectRelease();
        sub_100052538((uint64_t)v74, (uint64_t)v75);
        id v19 = v13;
        if (v27) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }

      id v19 = v13;
    }
    swift_bridgeObjectRelease();
    sub_100052538((uint64_t)v74, (uint64_t)v75);
LABEL_35:
    sub_10002EC6C(v75, v76);
    v55._object = (void *)0x800000010015CB50;
    v55._uint64_t countAndFlagsBits = 0xD000000000000015;
    Localizer.string(forKey:)(v55);
LABEL_36:
    sub_10002ED08((uint64_t)v75);
    NSString v56 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v57 = [a2 subtitles];
    uint64_t v58 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(void *)(v58 + 16))
    {
      uint64_t v59 = v72;
      sub_10003AA48(v59);
      if (v60) {
        goto LABEL_44;
      }
    }
LABEL_52:
    swift_bridgeObjectRelease();
    NSString v65 = 0;
    goto LABEL_53;
  }
  uint64_t v72 = @"notSubscribed";
  if (v23)
  {
    double v42 = @"notSubscribed";
    uint64_t v43 = sub_10003AA48(v42);
    if (v44)
    {
      uint64_t v45 = *(void *)(*(void *)(v22 + 56) + 16 * v43 + 8);
      swift_bridgeObjectRetain();

      swift_bridgeObjectRelease();
      sub_100052538((uint64_t)v74, (uint64_t)v75);
      id v19 = v13;
      if (v45) {
        goto LABEL_42;
      }
      goto LABEL_41;
    }

    id v19 = v13;
  }
  swift_bridgeObjectRelease();
  sub_100052538((uint64_t)v74, (uint64_t)v75);
LABEL_41:
  sub_10002EC6C(v75, v76);
  v61._object = (void *)0x800000010015CB50;
  v61._uint64_t countAndFlagsBits = 0xD000000000000015;
  Localizer.string(forKey:)(v61);
LABEL_42:
  sub_10002ED08((uint64_t)v75);
  NSString v56 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v62 = [a2 subtitles];
  uint64_t v63 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v63 + 16)) {
    goto LABEL_52;
  }
  uint64_t v59 = v72;
  sub_10003AA48(v59);
  if ((v64 & 1) == 0)
  {

    goto LABEL_52;
  }
LABEL_44:
  swift_bridgeObjectRetain();

  swift_bridgeObjectRelease();
  NSString v65 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
LABEL_53:
  uint64_t v70 = v73;
  id v71 = [self textMetadataWithTitle:v56 subtitle:v65];

  v70(v19, v7);
  return v71;
}

id sub_1000929D4(uint64_t a1, id a2, char a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (([a2 flags] & 0x1000) != 0)
  {
    return sub_100090180(a1, a2, (uint64_t)a6);
  }
  else if ((a3 & 1) != 0 || (id result = sub_1000905EC(a1, a2, a4, (uint64_t)a6)) == 0)
  {
    if (([a2 flags] & 0x400) != 0)
    {
      return sub_100091864(a1, a2, a5, a6);
    }
    else if (([a2 flags] & 4) != 0)
    {
      return sub_100091F90(a1, a2, a4, a6);
    }
    else
    {
      return sub_100090E20(a1, a2, @"standard", a6);
    }
  }
  return result;
}

uint64_t sub_100092B54(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7 = type metadata accessor for State();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v32 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v32 - v15;
  id v17 = [a2 titles];
  type metadata accessor for ASCOfferTitleVariant(0);
  sub_100092F90();
  uint64_t v18 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v18 + 16))
  {
LABEL_5:
    swift_bridgeObjectRelease();
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    v23(v16, a1, v7);
    int v24 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v16, v7);
    if (v24 == enum case for State.waiting(_:))
    {
      v23(v14, (uint64_t)v16, v7);
      (*(void (**)(char *, uint64_t))(v8 + 96))(v14, v7);
      uint64_t v25 = type metadata accessor for AppInstallationType();
      (*(void (**)(char *, uint64_t))(*(void *)(v25 - 8) + 8))(v14, v25);
LABEL_7:
      (*(void (**)(char *, uint64_t))(v8 + 8))(v16, v7);
      sub_10002EC6C(a4, a4[3]);
      v26._object = (void *)0x800000010015CAC0;
      v26._uint64_t countAndFlagsBits = 0xD000000000000014;
      return Localizer.string(forKey:)(v26)._countAndFlagsBits;
    }
    if (v24 == enum case for State.purchased(_:))
    {
      v23(v11, (uint64_t)v16, v7);
      (*(void (**)(char *, uint64_t))(v8 + 96))(v11, v7);
      uint64_t v27 = type metadata accessor for AppPurchaseType();
      uint64_t v28 = *(void *)(v27 - 8);
      if ((*(unsigned int (**)(char *, uint64_t))(v28 + 88))(v11, v27) == enum case for AppPurchaseType.preorder(_:))
      {
        sub_10002EC6C(a4, a4[3]);
        v29._uint64_t countAndFlagsBits = 0xD000000000000016;
        v29._object = (void *)0x800000010015CAA0;
        uint64_t countAndFlagsBits = Localizer.string(forKey:)(v29)._countAndFlagsBits;
        (*(void (**)(char *, uint64_t))(v8 + 8))(v16, v7);
        return countAndFlagsBits;
      }
      (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v27);
    }
    else if (v24 == enum case for State.buyable(_:) || v24 == enum case for State.unknown(_:))
    {
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v16, v7);
    return 0;
  }
  id v19 = @"preorderStatus";
  uint64_t v20 = sub_10003AA48(v19);
  if ((v21 & 1) == 0)
  {

    goto LABEL_5;
  }
  uint64_t countAndFlagsBits = *(void *)(*(void *)(v18 + 56) + 16 * v20);
  swift_bridgeObjectRetain();

  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

unint64_t sub_100092F90()
{
  unint64_t result = qword_1001A14D8;
  if (!qword_1001A14D8)
  {
    type metadata accessor for ASCOfferTitleVariant(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A14D8);
  }
  return result;
}

uint64_t sub_100092FE8(uint64_t a1)
{
  uint64_t v2 = sub_10002EB60(&qword_1001A2E18);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ASCOffer.actionMetrics.getter()
{
  uint64_t v1 = type metadata accessor for ScalarDictionary();
  __chkstk_darwin(v1 - 8);
  id v2 = [v0 metrics];
  sub_100093130();
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  sub_100093170(v3);
  swift_bridgeObjectRelease();
  ScalarDictionary.init()();
  return ActionMetrics.init(data:custom:)();
}

unint64_t sub_100093130()
{
  unint64_t result = qword_1001A1D98;
  if (!qword_1001A1D98)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001A1D98);
  }
  return result;
}

size_t sub_100093170(unint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for MetricsData();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v33 = v4;
  uint64_t v34 = v5;
  __chkstk_darwin(v4);
  uint64_t v7 = (char **)((char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v9 = (unint64_t *)&_swiftEmptyArrayStorage;
    if (!v8) {
      return (size_t)v9;
    }
    unsigned __int8 v38 = (unint64_t *)&_swiftEmptyArrayStorage;
    size_t result = sub_1000C4FC0(0, v8 & ~(v8 >> 63), 0);
    if (v8 < 0) {
      break;
    }
    unint64_t v26 = v2;
    uint64_t v11 = 0;
    uint64_t v9 = v38;
    uint64_t v28 = v34 + 32;
    unint64_t v29 = a1 & 0xC000000000000001;
    uint64_t v27 = (char *)&type metadata for Any + 8;
    int v31 = v7;
    unint64_t v32 = a1;
    uint64_t v30 = v8;
    while (v8 != v11)
    {
      if (v29) {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v12 = *(id *)(a1 + 8 * v11 + 32);
      }
      uint64_t v13 = v12;
      id v14 = objc_msgSend(v12, "topic", v26, v27, v28);
      if (v14)
      {
        uint64_t v15 = v14;
        uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v35 = v17;
        uint64_t v36 = v16;
      }
      else
      {
        uint64_t v35 = 0;
        uint64_t v36 = 0;
      }
      unsigned int v37 = [v13 shouldFlush];
      id v18 = [v13 fields];
      static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v7 = &selRef_finalizeHash;
      id v19 = [v13 includingFields];
      uint64_t v20 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100039C48(v20, (uint64_t)sub_10007F23C, 0);
      id v21 = [v13 includingFields];
      uint64_t v22 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100039EC8(v22, (uint64_t)sub_10007F254, 0);
      uint64_t v23 = v31;
      MetricsData.init(topic:shouldFlush:fields:includingFields:excludingFields:)();

      unsigned __int8 v38 = v9;
      unint64_t v25 = v9[2];
      unint64_t v24 = v9[3];
      unint64_t v2 = v25 + 1;
      if (v25 >= v24 >> 1)
      {
        sub_1000C4FC0(v24 > 1, v25 + 1, 1);
        uint64_t v9 = v38;
      }
      ++v11;
      void v9[2] = v2;
      (*(void (**)(unint64_t, char **, uint64_t))(v34 + 32))((unint64_t)v9+ ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80))+ *(void *)(v34 + 72) * v25, v23, v33);
      uint64_t v8 = v30;
      a1 = v32;
      if (v30 == v11) {
        return (size_t)v9;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1000934DC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v15 = a2;
  uint64_t v6 = type metadata accessor for State();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v10(v9, a1, v6);
  int v11 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v9, v6);
  int v12 = enum case for State.downloadable(_:);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (v11 == v12
    && (([v3 flags] & 0x200) != 0
     || [v15 supportsDSIDLessInstall]))
  {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(v7 + 104))(a3, enum case for State.buyable(_:), v6);
  }
  else
  {
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v10)(a3, a1, v6);
  }
}

Swift::Bool __swiftcall ASCOffer.isDSIDLessInContext(_:)(ASCOfferContext *a1)
{
  if (([v1 flags] & 0x200) != 0) {
    return 1;
  }
  else {
    return [(ASCOfferContext *)a1 supportsDSIDLessInstall];
  }
}

void *sub_1000936C8(uint64_t a1, uint64_t a2)
{
  uint64_t v47 = a2;
  uint64_t v3 = type metadata accessor for JSONContext();
  uint64_t v51 = *(void *)(v3 - 8);
  Swift::String v52 = (void *)v3;
  uint64_t v4 = __chkstk_darwin(v3);
  char v50 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v40 - v6;
  uint64_t v8 = sub_10002EB60(&qword_1001A25F0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for JSONObject();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v48 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v40 - v15;
  uint64_t v17 = type metadata accessor for JSONArray();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  id v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v49 = (char *)&v40 - v22;
  uint64_t v46 = a1;
  JSONObject.subscript.getter();
  JSONObject.array.getter();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v45 = v11;
  v23(v16, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v10, 1, v17) == 1)
  {
    sub_10007AE40((uint64_t)v10);
    unint64_t v24 = (void *)type metadata accessor for JSONError();
    sub_10002ECB0();
    swift_allocError();
    unint64_t v26 = v25;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    void *v26 = 0x6B726F77747261;
    v26[1] = 0xE700000000000000;
    _OWORD v26[2] = MetatypeMetadata;
    (*(void (**)(void *, void, void *))(*(v24 - 1) + 104))(v26, enum case for JSONError.missingProperty(_:), v24);
    swift_willThrow();
  }
  else
  {
    double v42 = v23;
    uint64_t v28 = v49;
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v49, v10, v17);
    unint64_t v29 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
    uint64_t v43 = v17;
    v29(v21, v28, v17);
    unint64_t v24 = v52;
    uint64_t v30 = *(void (**)(char *, uint64_t, void *))(v51 + 16);
    uint64_t v31 = v47;
    v30(v7, v47, v52);
    sub_10002EB60(&qword_1001A2608);
    sub_100093CA0();
    uint64_t v32 = Array<A>.init(tryDeserializing:using:)();
    uint64_t v33 = v44;
    char v44 = sub_1000713FC(v32);
    id v41 = v33;
    swift_bridgeObjectRelease();
    JSONObject.subscript.getter();
    v30(v50, v31, v24);
    sub_10002EE34(0, &qword_1001A2E20);
    uint64_t v34 = v41;
    id v35 = sub_10007E888();
    if (v34)
    {
      (*(void (**)(char *, void *))(v51 + 8))(v50, v52);
      v42(v48, v45);
      (*(void (**)(char *, uint64_t))(v18 + 8))(v49, v43);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v36 = v35;
      (*(void (**)(char *, void *))(v51 + 8))(v50, v52);
      v42(v48, v45);
      id v37 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
      sub_10002EE34(0, (unint64_t *)&qword_1001A2E28);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      unint64_t v24 = [v37 initWithArtwork:isa mediaPlatform:v36];

      (*(void (**)(char *, uint64_t))(v18 + 8))(v49, v43);
    }
  }
  return v24;
}

void *sub_100093C88(uint64_t a1, uint64_t a2)
{
  return sub_1000936C8(a1, a2);
}

unint64_t sub_100093CA0()
{
  unint64_t result = qword_1001A2610;
  if (!qword_1001A2610)
  {
    sub_10002ED58(&qword_1001A2608);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A2610);
  }
  return result;
}

id sub_100093CFC@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 unsignedLongLongValue];
  *a2 = result;
  return result;
}

uint64_t sub_100093D30(unsigned __int8 a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void), uint64_t a7, void (*a8)(uint64_t *, uint64_t), char *a9)
{
  v163 = a6;
  uint64_t v158 = a8;
  uint64_t v162 = a7;
  uint64_t v156 = a3;
  uint64_t v155 = type metadata accessor for ASCSignpostGroupValue();
  __chkstk_darwin(v155);
  uint64_t v157 = (uint64_t *)((char *)&v153 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = sub_10002EB60((uint64_t *)&unk_1001A50C0);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v153 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v153 - v17;
  __chkstk_darwin(v19);
  id v21 = (char *)&v153 - v20;
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v160 = v22;
  uint64_t v161 = v23;
  __chkstk_darwin(v22);
  v154 = (char *)&v153 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v153 - v26;
  __chkstk_darwin(v28);
  uint64_t v159 = (char *)&v153 - v29;
  *(void *)&double v31 = __chkstk_darwin(v30).n128_u64[0];
  uint64_t v33 = (char *)&v153 - v32;
  id v166 = a2;
  uint64_t result = sub_100119A34(objc_msgSend(a2, "signpostId", v31), a4);
  if (result)
  {
    if (static os_signpost_type_t.begin.getter() == a1)
    {
      v154 = a9;
      id v35 = v166;
      id v36 = [v166 name];
      Swift::Int v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::Int v39 = v38;

      LOBYTE(v36) = sub_100098148(&v165, v37, v39);
      swift_bridgeObjectRelease();
      if (v36)
      {
        uint64_t v40 = v163;
LABEL_13:
        id v69 = [v166 beginDate];
        if (v69)
        {
          uint64_t v70 = v69;
          id v71 = v159;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v72 = v161;
          char v73 = *(void (**)(char *, char *, uint64_t))(v161 + 32);
          uint64_t v74 = v71;
          uint64_t v75 = v160;
          v73(v21, v74, v160);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v72 + 56))(v21, 0, 1, v75);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v21, 1, v75) != 1)
          {
            v73(v33, v21, v75);
            uint64_t v76 = sub_10002EB60(&qword_1001A2E38);
            uint64_t v77 = v157;
            uint64_t v78 = (char *)v157 + *(int *)(v76 + 48);
            id v79 = [v166 name];
            uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v82 = v81;

            *uint64_t v77 = v80;
            v77[1] = v82;
            (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v78, v33, v75);
            swift_storeEnumTagMultiPayload();
            v158(v77, v156);
            sub_100095900((uint64_t)v77);
            return (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v33, v75);
          }
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v161 + 56))(v21, 1, 1, v160);
        }
        sub_100034B8C((uint64_t)v21, (uint64_t *)&unk_1001A50C0);
        id v94 = [v166 name];
        uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v97 = v96;

        sub_1000958AC();
        swift_allocError();
        *(void *)uint64_t v98 = v95;
        *(void *)(v98 + 8) = v97;
        *(void *)(v98 + 16) = 0;
        *(void *)(v98 + 24) = 0;
        *(unsigned char *)(v98 + 32) = 1;
        v40();
        return swift_errorRelease();
      }
      id v63 = [v35 name];
      uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v66 = v65;

      sub_1000958AC();
      swift_allocError();
      *(void *)uint64_t v67 = v64;
      *(void *)(v67 + 8) = v66;
      *(void *)(v67 + 16) = 0;
      *(void *)(v67 + 24) = 0;
      *(unsigned char *)(v67 + 32) = 0;
      uint64_t v40 = v163;
      uint64_t v68 = v164;
      v163();
      if (!v68)
      {
        swift_errorRelease();
        goto LABEL_13;
      }
      return swift_errorRelease();
    }
    if (static os_signpost_type_t.end.getter() == a1)
    {
      v154 = a9;
      id v41 = v166;
      id v42 = [v166 name];
      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v45 = v44;

      sub_1000C5BA0(v43, v45);
      uint64_t v47 = v46;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v47)
      {
        uint64_t v48 = v163;
      }
      else
      {
        id v99 = [v41 name];
        uint64_t v100 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v102 = v101;

        sub_1000958AC();
        swift_allocError();
        *(void *)uint64_t v103 = v100;
        *(void *)(v103 + 8) = v102;
        *(void *)(v103 + 16) = 0;
        *(void *)(v103 + 24) = 0;
        *(unsigned char *)(v103 + 32) = 3;
        uint64_t v48 = v163;
        uint64_t v104 = v164;
        v163();
        if (v104) {
          return swift_errorRelease();
        }
        swift_errorRelease();
      }
      id v49 = [v166 endDate];
      if (v49)
      {
        char v50 = v49;
        uint64_t v51 = v159;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v52 = v161;
        NSString v53 = *(void (**)(char *, char *, uint64_t))(v161 + 32);
        NSString v54 = v51;
        uint64_t v55 = v160;
        v53(v18, v54, v160);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v18, 0, 1, v55);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v18, 1, v55) != 1)
        {
          v53(v27, v18, v55);
          uint64_t v56 = sub_10002EB60(&qword_1001A2E38);
          id v57 = v157;
          uint64_t v58 = (char *)v157 + *(int *)(v56 + 48);
          id v59 = [v166 name];
          uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v62 = v61;

          *id v57 = v60;
          v57[1] = v62;
          (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v58, v27, v55);
          swift_storeEnumTagMultiPayload();
          v158(v57, v156);
          sub_100095900((uint64_t)v57);
          return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v27, v55);
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v161 + 56))(v18, 1, 1, v160);
      }
      sub_100034B8C((uint64_t)v18, (uint64_t *)&unk_1001A50C0);
      id v105 = [v166 name];
      uint64_t v106 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v108 = v107;

      sub_1000958AC();
      swift_allocError();
      *(void *)uint64_t v109 = v106;
      *(void *)(v109 + 8) = v108;
      *(void *)(v109 + 16) = 0;
      *(void *)(v109 + 24) = 0;
      *(unsigned char *)(v109 + 32) = 2;
      v48();
      return swift_errorRelease();
    }
    uint64_t result = static os_signpost_type_t.event.getter();
    if (result == a1)
    {
      id v83 = [v166 attributes];
      uint64_t v84 = v163;
      uint64_t v85 = v161;
      if (v83)
      {
        uint64_t v86 = v83;
        uint64_t v87 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        if (*(void *)(v87 + 16))
        {
          unint64_t v88 = sub_10003A860(1734437958, 0xE400000000000000);
          if (v89)
          {
            uint64_t v90 = (uint64_t *)(*(void *)(v87 + 56) + 16 * v88);
            uint64_t v92 = *v90;
            uint64_t v91 = v90[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            if (v92 == 1702195828 && v91 == 0xE400000000000000
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              char v93 = 1;
            }
            else
            {
              if ((v92 != 0x65736C6166 || v91 != 0xE500000000000000)
                && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
              {
                id v148 = [v166 name];
                uint64_t v149 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v151 = v150;

                sub_1000958AC();
                swift_allocError();
                *(void *)uint64_t v152 = v149;
                *(void *)(v152 + 8) = v151;
                *(void *)(v152 + 16) = v92;
                *(void *)(v152 + 24) = v91;
                *(unsigned char *)(v152 + 32) = 4;
                v84();
                return swift_errorRelease();
              }
              swift_bridgeObjectRelease();
              char v93 = 0;
            }
            id v143 = [v166 name];
            uint64_t v144 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v146 = v145;

            uint64_t v147 = (uint64_t)v157;
            *uint64_t v157 = v144;
            *(void *)(v147 + 8) = v146;
            *(unsigned char *)(v147 + 16) = v93;
            swift_storeEnumTagMultiPayload();
            v158((uint64_t *)v147, v156);
            return sub_100095900(v147);
          }
        }
        swift_bridgeObjectRelease();
      }
      id v110 = [v166 attributes];
      if (v110)
      {
        uint64_t v111 = v110;
        uint64_t v112 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        if (*(void *)(v112 + 16))
        {
          unint64_t v113 = sub_10003A860(0x676E69727453, 0xE600000000000000);
          if (v114)
          {
            uint64_t v115 = (uint64_t *)(*(void *)(v112 + 56) + 16 * v113);
            uint64_t v117 = *v115;
            uint64_t v116 = v115[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            id v118 = [v166 name];
            uint64_t v119 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v121 = v120;

            uint64_t v122 = v157;
            *uint64_t v157 = v119;
            v122[1] = v121;
            v122[2] = v117;
            v122[3] = v116;
            swift_storeEnumTagMultiPayload();
            v158(v122, v156);
            return sub_100095900((uint64_t)v122);
          }
        }
        swift_bridgeObjectRelease();
      }
      id v123 = [v166 beginDate];
      if (v123)
      {
        uint64_t v124 = v123;
        uint64_t v125 = v159;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v126 = *(void (**)(char *, char *, uint64_t))(v85 + 32);
        uint64_t v127 = v125;
        uint64_t v128 = v160;
        v126(v15, v127, v160);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v85 + 56))(v15, 0, 1, v128);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v15, 1, v128) != 1)
        {
          uint64_t v129 = v154;
          v126(v154, v15, v128);
          uint64_t v130 = sub_10002EB60(&qword_1001A2E38);
          uint64_t v131 = v157;
          uint64_t v132 = (char *)v157 + *(int *)(v130 + 48);
          id v133 = [v166 name];
          uint64_t v134 = v128;
          uint64_t v135 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v137 = v136;

          *uint64_t v131 = v135;
          v131[1] = v137;
          (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v132, v129, v134);
          swift_storeEnumTagMultiPayload();
          v158(v131, v156);
          sub_100095900((uint64_t)v131);
          return (*(uint64_t (**)(char *, uint64_t))(v85 + 8))(v129, v134);
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v85 + 56))(v15, 1, 1, v160);
      }
      sub_100034B8C((uint64_t)v15, (uint64_t *)&unk_1001A50C0);
      id v138 = [v166 name];
      uint64_t v139 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v141 = v140;

      sub_1000958AC();
      swift_allocError();
      *(void *)uint64_t v142 = v139;
      *(void *)(v142 + 8) = v141;
      *(void *)(v142 + 16) = 0;
      *(void *)(v142 + 24) = 0;
      *(unsigned char *)(v142 + 32) = 5;
      v84();
      return swift_errorRelease();
    }
  }
  return result;
}

uint64_t sub_100094AA4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  id v110 = a3;
  uint64_t v4 = type metadata accessor for CharacterSet();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v110 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v111 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v110 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v110 - v12;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v110 - v15;
  uint64_t v17 = type metadata accessor for ASCSignpostGroupValue();
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v110 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10009595C(a1, (uint64_t)v19);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t countAndFlagsBits = *(void *)v19;
      uint64_t v65 = (void *)*((void *)v19 + 1);
      uint64_t v67 = sub_10002EB60(&qword_1001A2E38);
      uint64_t v68 = v8;
      (*(void (**)(char *, char *, uint64_t))(v111 + 32))(v13, &v19[*(int *)(v67 + 48)], v8);
      *(void *)&long long v112 = 0;
      *((void *)&v112 + 1) = 0xE000000000000000;
      uint64_t v114 = countAndFlagsBits;
      uint64_t v115 = v65;
      static CharacterSet.lowercaseLetters.getter();
      sub_1000959C0();
      StringProtocol.rangeOfCharacter(from:options:range:)();
      char v70 = v69;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      if (v70)
      {
        Swift::String v82 = String.lowercased()();
        uint64_t countAndFlagsBits = v82._countAndFlagsBits;
        object = v82._object;
      }
      else
      {
        unint64_t v71 = String.index(_:offsetBy:limitedBy:)();
        if (v72) {
          goto LABEL_44;
        }
        unint64_t v73 = v71;
        if (v71 >= 0x4000)
        {
          String.subscript.getter();
          Swift::String v109 = Substring.lowercased()();
          swift_bridgeObjectRelease();
          uint64_t countAndFlagsBits = sub_10010E168(0xFuLL, v73, v109._countAndFlagsBits, (unint64_t)v109._object, countAndFlagsBits, (unint64_t)v65);
        }
        else
        {
          swift_bridgeObjectRetain();
          String.index(after:)();
          String.subscript.getter();
          swift_bridgeObjectRelease();
          Swift::String v74 = Substring.lowercased()();
          uint64_t v68 = v8;
          swift_bridgeObjectRelease();
          uint64_t countAndFlagsBits = sub_10010E4B0(0xFuLL, v73, v74._countAndFlagsBits, (unint64_t)v74._object, countAndFlagsBits, (unint64_t)v65);
        }
        object = v75;
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      uint64_t v65 = object;
LABEL_44:
      v93._uint64_t countAndFlagsBits = countAndFlagsBits;
      v93._object = v65;
      String.append(_:)(v93);
      swift_bridgeObjectRelease();
      v94._uint64_t countAndFlagsBits = 0x656D6954646E45;
      v94._object = (void *)0xE700000000000000;
      String.append(_:)(v94);
      long long v95 = v112;
      uint64_t v96 = self;
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      id v98 = [v96 serverTimeFromDate:isa];

      *((void *)&v113 + 1) = sub_100095A14();
      *(void *)&long long v112 = v98;
      sub_100139AF0((uint64_t)&v112, v95, *((uint64_t *)&v95 + 1));
      return (*(uint64_t (**)(char *, uint64_t))(v111 + 8))(v13, v68);
    case 2u:
      uint64_t v32 = *(void *)v19;
      unint64_t v33 = *((void *)v19 + 1);
      char v34 = v19[16];
      *(void *)&long long v112 = v32;
      *((void *)&v112 + 1) = v33;
      static CharacterSet.lowercaseLetters.getter();
      sub_1000959C0();
      StringProtocol.rangeOfCharacter(from:options:range:)();
      char v36 = v35;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      if (v36)
      {
        Swift::String v77 = String.lowercased()();
        uint64_t v32 = v77._countAndFlagsBits;
        id v42 = v77._object;
      }
      else
      {
        unint64_t v37 = String.index(_:offsetBy:limitedBy:)();
        if (v38)
        {
LABEL_47:
          *((void *)&v113 + 1) = &type metadata for Bool;
          LOBYTE(v112) = v34;
          return sub_100139AF0((uint64_t)&v112, v32, v33);
        }
        unint64_t v39 = v37;
        if (v37 >= 0x4000)
        {
          String.subscript.getter();
          Swift::String v99 = Substring.lowercased()();
          swift_bridgeObjectRelease();
          uint64_t v32 = sub_10010E168(0xFuLL, v39, v99._countAndFlagsBits, (unint64_t)v99._object, v32, v33);
        }
        else
        {
          swift_bridgeObjectRetain();
          String.index(after:)();
          String.subscript.getter();
          swift_bridgeObjectRelease();
          Swift::String v40 = Substring.lowercased()();
          swift_bridgeObjectRelease();
          uint64_t v32 = sub_10010E4B0(0xFuLL, v39, v40._countAndFlagsBits, (unint64_t)v40._object, v32, v33);
        }
        id v42 = v41;
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      unint64_t v33 = (unint64_t)v42;
      goto LABEL_47;
    case 3u:
      uint64_t v32 = *(void *)v19;
      unint64_t v33 = *((void *)v19 + 1);
      uint64_t v44 = *((void *)v19 + 2);
      uint64_t v43 = *((void *)v19 + 3);
      *(void *)&long long v112 = *(void *)v19;
      *((void *)&v112 + 1) = v33;
      static CharacterSet.lowercaseLetters.getter();
      sub_1000959C0();
      StringProtocol.rangeOfCharacter(from:options:range:)();
      char v46 = v45;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      if (v46)
      {
        Swift::String v78 = String.lowercased()();
        uint64_t v32 = v78._countAndFlagsBits;
        uint64_t v52 = v78._object;
      }
      else
      {
        unint64_t v47 = String.index(_:offsetBy:limitedBy:)();
        if (v48) {
          goto LABEL_50;
        }
        unint64_t v49 = v47;
        if (v47 >= 0x4000)
        {
          String.subscript.getter();
          Swift::String v100 = Substring.lowercased()();
          swift_bridgeObjectRelease();
          uint64_t v32 = sub_10010E168(0xFuLL, v49, v100._countAndFlagsBits, (unint64_t)v100._object, v32, v33);
        }
        else
        {
          swift_bridgeObjectRetain();
          String.index(after:)();
          String.subscript.getter();
          swift_bridgeObjectRelease();
          Swift::String v50 = Substring.lowercased()();
          swift_bridgeObjectRelease();
          uint64_t v32 = sub_10010E4B0(0xFuLL, v49, v50._countAndFlagsBits, (unint64_t)v50._object, v32, v33);
        }
        uint64_t v52 = v51;
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      unint64_t v33 = (unint64_t)v52;
LABEL_50:
      *((void *)&v113 + 1) = &type metadata for String;
      *(void *)&long long v112 = v44;
      *((void *)&v112 + 1) = v43;
      return sub_100139AF0((uint64_t)&v112, v32, v33);
    case 4u:
      uint64_t v54 = *(void *)v19;
      NSString v53 = (void *)*((void *)v19 + 1);
      uint64_t v55 = sub_10002EB60(&qword_1001A2E38);
      uint64_t v56 = v8;
      (*(void (**)(char *, char *, uint64_t))(v111 + 32))(v10, &v19[*(int *)(v55 + 48)], v8);
      *(void *)&long long v112 = 0;
      *((void *)&v112 + 1) = 0xE000000000000000;
      uint64_t v114 = v54;
      uint64_t v115 = v53;
      static CharacterSet.lowercaseLetters.getter();
      sub_1000959C0();
      StringProtocol.rangeOfCharacter(from:options:range:)();
      char v58 = v57;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      if (v58)
      {
        Swift::String v79 = String.lowercased()();
        uint64_t v54 = v79._countAndFlagsBits;
        uint64_t v64 = v79._object;
      }
      else
      {
        unint64_t v59 = String.index(_:offsetBy:limitedBy:)();
        if (v60) {
          goto LABEL_54;
        }
        unint64_t v61 = v59;
        if (v59 >= 0x4000)
        {
          String.subscript.getter();
          Swift::String v101 = Substring.lowercased()();
          swift_bridgeObjectRelease();
          uint64_t v54 = sub_10010E168(0xFuLL, v61, v101._countAndFlagsBits, (unint64_t)v101._object, v54, (unint64_t)v53);
        }
        else
        {
          swift_bridgeObjectRetain();
          String.index(after:)();
          String.subscript.getter();
          swift_bridgeObjectRelease();
          Swift::String v62 = Substring.lowercased()();
          uint64_t v56 = v8;
          swift_bridgeObjectRelease();
          uint64_t v54 = sub_10010E4B0(0xFuLL, v61, v62._countAndFlagsBits, (unint64_t)v62._object, v54, (unint64_t)v53);
        }
        uint64_t v64 = v63;
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      NSString v53 = v64;
LABEL_54:
      v102._uint64_t countAndFlagsBits = v54;
      v102._object = v53;
      String.append(_:)(v102);
      swift_bridgeObjectRelease();
      v103._uint64_t countAndFlagsBits = 1701669204;
      v103._object = (void *)0xE400000000000000;
      String.append(_:)(v103);
      long long v104 = v112;
      id v105 = self;
      Class v106 = Date._bridgeToObjectiveC()().super.isa;
      id v107 = [v105 serverTimeFromDate:v106];

      *((void *)&v113 + 1) = sub_100095A14();
      *(void *)&long long v112 = v107;
      sub_100139AF0((uint64_t)&v112, v104, *((uint64_t *)&v104 + 1));
      return (*(uint64_t (**)(char *, uint64_t))(v111 + 8))(v10, v56);
    default:
      uint64_t v21 = *(void *)v19;
      uint64_t v20 = (void *)*((void *)v19 + 1);
      uint64_t v22 = sub_10002EB60(&qword_1001A2E38);
      uint64_t v23 = v8;
      (*(void (**)(char *, char *, uint64_t))(v111 + 32))(v16, &v19[*(int *)(v22 + 48)], v8);
      *(void *)&long long v112 = 0;
      *((void *)&v112 + 1) = 0xE000000000000000;
      uint64_t v114 = v21;
      uint64_t v115 = v20;
      static CharacterSet.lowercaseLetters.getter();
      sub_1000959C0();
      StringProtocol.rangeOfCharacter(from:options:range:)();
      char v25 = v24;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      if (v25)
      {
        Swift::String v80 = String.lowercased()();
        uint64_t v21 = v80._countAndFlagsBits;
        double v31 = v80._object;
LABEL_31:
        uint64_t v81 = v110;
        swift_bridgeObjectRelease();
        uint64_t v20 = v31;
        goto LABEL_35;
      }
      unint64_t v26 = String.index(_:offsetBy:limitedBy:)();
      if ((v27 & 1) == 0)
      {
        unint64_t v28 = v26;
        if (v26 >= 0x4000)
        {
          String.subscript.getter();
          Swift::String v108 = Substring.lowercased()();
          swift_bridgeObjectRelease();
          uint64_t v21 = sub_10010E168(0xFuLL, v28, v108._countAndFlagsBits, (unint64_t)v108._object, v21, (unint64_t)v20);
        }
        else
        {
          swift_bridgeObjectRetain();
          String.index(after:)();
          String.subscript.getter();
          swift_bridgeObjectRelease();
          Swift::String v29 = Substring.lowercased()();
          uint64_t v23 = v8;
          swift_bridgeObjectRelease();
          uint64_t v21 = sub_10010E4B0(0xFuLL, v28, v29._countAndFlagsBits, (unint64_t)v29._object, v21, (unint64_t)v20);
        }
        double v31 = v30;
        swift_bridgeObjectRelease();
        goto LABEL_31;
      }
      uint64_t v81 = v110;
LABEL_35:
      v83._uint64_t countAndFlagsBits = v21;
      v83._object = v20;
      String.append(_:)(v83);
      swift_bridgeObjectRelease();
      v84._uint64_t countAndFlagsBits = 0x6D69547472617453;
      v84._object = (void *)0xE900000000000065;
      String.append(_:)(v84);
      long long v85 = v112;
      uint64_t v86 = *v81;
      if (*(void *)(*v81 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v87 = sub_10003A860(v85, *((uint64_t *)&v85 + 1));
        if (v88)
        {
          sub_100042EB8(*(void *)(v86 + 56) + 32 * v87, (uint64_t)&v112);
        }
        else
        {
          long long v112 = 0u;
          long long v113 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((void *)&v113 + 1))
        {
          swift_bridgeObjectRelease();
          sub_100034B8C((uint64_t)&v112, &qword_1001A1C50);
          return (*(uint64_t (**)(char *, uint64_t))(v111 + 8))(v16, v23);
        }
      }
      else
      {
        long long v112 = 0u;
        long long v113 = 0u;
      }
      sub_100034B8C((uint64_t)&v112, &qword_1001A1C50);
      char v89 = self;
      Class v90 = Date._bridgeToObjectiveC()().super.isa;
      id v91 = [v89 serverTimeFromDate:v90];

      *((void *)&v113 + 1) = sub_100095A14();
      *(void *)&long long v112 = v91;
      sub_100139AF0((uint64_t)&v112, v85, *((uint64_t *)&v85 + 1));
      return (*(uint64_t (**)(char *, uint64_t))(v111 + 8))(v16, v23);
  }
}

unint64_t sub_1000958AC()
{
  unint64_t result = qword_1001A2E30;
  if (!qword_1001A2E30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A2E30);
  }
  return result;
}

uint64_t sub_100095900(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ASCSignpostGroupValue();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10009595C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ASCSignpostGroupValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000959C0()
{
  unint64_t result = qword_1001A5060;
  if (!qword_1001A5060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5060);
  }
  return result;
}

unint64_t sub_100095A14()
{
  unint64_t result = qword_1001A1CF0;
  if (!qword_1001A1CF0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001A1CF0);
  }
  return result;
}

uint64_t sub_100095A54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  switch(a5)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
      goto LABEL_4;
    case 4:
      swift_bridgeObjectRetain();
      goto LABEL_4;
    case 6:
LABEL_4:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for ASCSignpostGroupError(uint64_t a1)
{
  return sub_100095B24(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t sub_100095B24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  switch(a5)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
      goto LABEL_4;
    case 4:
      swift_bridgeObjectRelease();
      goto LABEL_4;
    case 6:
LABEL_4:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for ASCSignpostGroupError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_100095A54(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for ASCSignpostGroupError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_100095A54(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  char v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  sub_100095B24(v8, v9, v10, v11, v12);
  return a1;
}

__n128 initializeWithTake for ASCSignpostGroupError(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ASCSignpostGroupError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  char v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  sub_100095B24(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ASCSignpostGroupError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF9 && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 249);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 7) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ASCSignpostGroupError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 249;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100095DA8(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 6u) {
    return *(unsigned __int8 *)(a1 + 32);
  }
  else {
    return (*(_DWORD *)a1 + 7);
  }
}

uint64_t sub_100095DC0(uint64_t result, unsigned int a2)
{
  if (a2 >= 7)
  {
    *(void *)__n128 result = a2 - 7;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 7;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
  }
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ASCSignpostGroupError()
{
  return &type metadata for ASCSignpostGroupError;
}

uint64_t sub_100095DF8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v6 = *a2;
    *(void *)a1 = *a2;
    a1 = v6 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        uint64_t v7 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v7;
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v8 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v8;
        uint64_t v9 = a2[2];
        uint64_t v10 = a2[3];
        *(void *)(a1 + 16) = v9;
        *(void *)(a1 + 24) = v10;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v11 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v11;
        swift_bridgeObjectRetain();
        uint64_t v12 = *(int *)(sub_10002EB60(&qword_1001A2E38) + 48);
        uint64_t v13 = a1 + v12;
        uint64_t v14 = (uint64_t)a2 + v12;
        uint64_t v15 = type metadata accessor for Date();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100096060(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 1:
    case 4:
      swift_bridgeObjectRelease();
      uint64_t v3 = a1 + *(int *)(sub_10002EB60(&qword_1001A2E38) + 48);
      uint64_t v4 = type metadata accessor for Date();
      int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
      uint64_t result = v5(v3, v4);
      break;
    case 2:
      goto LABEL_6;
    case 3:
      swift_bridgeObjectRelease();
LABEL_6:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100096160(uint64_t a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      uint64_t v9 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v9;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      goto LABEL_5;
    case 3u:
      uint64_t v10 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v10;
      uint64_t v11 = *(void *)(a2 + 16);
      uint64_t v12 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = v11;
      *(void *)(a1 + 24) = v12;
      swift_bridgeObjectRetain();
LABEL_5:
      swift_bridgeObjectRetain();
      break;
    default:
      uint64_t v4 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      swift_bridgeObjectRetain();
      uint64_t v5 = *(int *)(sub_10002EB60(&qword_1001A2E38) + 48);
      uint64_t v6 = a1 + v5;
      uint64_t v7 = a2 + v5;
      uint64_t v8 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_100096288(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_100095900(a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
        goto LABEL_6;
      case 3u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        swift_bridgeObjectRetain();
LABEL_6:
        swift_bridgeObjectRetain();
        break;
      default:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        swift_bridgeObjectRetain();
        uint64_t v4 = *(int *)(sub_10002EB60(&qword_1001A2E38) + 48);
        uint64_t v5 = a1 + v4;
        uint64_t v6 = a2 + v4;
        uint64_t v7 = type metadata accessor for Date();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for ASCSignpostGroupValue()
{
  uint64_t result = qword_1001A2F10;
  if (!qword_1001A2F10) {
    return swift_getSingletonMetadata();
  }
  return result;
}

_OWORD *sub_10009642C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 4 || EnumCaseMultiPayload <= 1)
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(sub_10002EB60(&qword_1001A2E38) + 48);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *sub_1000965F0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100095900((uint64_t)a1);
    unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 4 || EnumCaseMultiPayload <= 1)
    {
      *a1 = *a2;
      uint64_t v7 = *(int *)(sub_10002EB60(&qword_1001A2E38) + 48);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000967C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_1000967EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_100096818()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_100096828()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    uint64_t v5 = &v4;
    swift_getTupleTypeLayout2();
    uint64_t v6 = &v3;
    uint64_t v7 = &unk_10014E4E0;
    uint64_t v8 = &unk_10014E4F8;
    swift_getTupleTypeLayout2();
    uint64_t v9 = &v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_10009691C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v99 = v4;
  uint64_t v100 = v5;
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v97 = (char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  id v98 = (char *)&v93 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  long long v95 = (char *)&v93 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v96 = (char *)&v93 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  Swift::String v93 = (char *)&v93 - v15;
  __chkstk_darwin(v14);
  Swift::String v94 = (char *)&v93 - v16;
  uint64_t v17 = type metadata accessor for ASCSignpostGroupValue();
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (uint64_t *)((char *)&v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (uint64_t *)((char *)&v93 - v22);
  uint64_t v24 = __chkstk_darwin(v21);
  unint64_t v26 = (char *)&v93 - v25;
  uint64_t v27 = __chkstk_darwin(v24);
  Swift::String v29 = (uint64_t *)((char *)&v93 - v28);
  __chkstk_darwin(v27);
  double v31 = (uint64_t *)((char *)&v93 - v30);
  uint64_t v32 = sub_10002EB60(&qword_1001A2F48);
  uint64_t v33 = __chkstk_darwin(v32 - 8);
  char v35 = (char *)&v93 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = (uint64_t)&v35[*(int *)(v33 + 56)];
  sub_10009595C(a1, (uint64_t)v35);
  sub_10009595C(a2, v36);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_10009595C((uint64_t)v35, (uint64_t)v29);
      uint64_t v52 = *v29;
      uint64_t v51 = v29[1];
      uint64_t v53 = *(int *)(sub_10002EB60(&qword_1001A2E38) + 48);
      Swift::String v40 = (char *)v29 + v53;
      if (swift_getEnumCaseMultiPayload() != 1) {
        goto LABEL_38;
      }
      uint64_t v55 = *(void *)v36;
      uint64_t v54 = *(void *)(v36 + 8);
      uint64_t v56 = (char *)(v36 + v53);
      uint64_t v43 = v100;
      char v57 = *(void (**)(char *, char *, uint64_t))(v100 + 32);
      char v58 = v40;
      uint64_t v46 = v99;
      v57(v96, v58, v99);
      v57(v95, v56, v46);
      if (v52 == v55 && v51 == v54)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v60 & 1) == 0)
        {
          unint64_t v49 = *(void (**)(char *, uint64_t))(v43 + 8);
          v49(v95, v46);
          Swift::String v50 = v96;
          goto LABEL_37;
        }
      }
      unint64_t v87 = v95;
      uint64_t v86 = v96;
      goto LABEL_59;
    case 2u:
      sub_10009595C((uint64_t)v35, (uint64_t)v26);
      uint64_t v62 = *(void *)v26;
      uint64_t v61 = *((void *)v26 + 1);
      char v63 = v26[16];
      if (swift_getEnumCaseMultiPayload() != 2) {
        goto LABEL_40;
      }
      char v64 = *(unsigned char *)(v36 + 16);
      if (v62 == *(void *)v36 && v61 == *(void *)(v36 + 8))
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v66 & 1) == 0) {
          goto LABEL_51;
        }
      }
      sub_100095900((uint64_t)v35);
      char v88 = v63 ^ v64 ^ 1;
      return v88 & 1;
    case 3u:
      sub_10009595C((uint64_t)v35, (uint64_t)v23);
      uint64_t v68 = *v23;
      uint64_t v67 = v23[1];
      uint64_t v70 = v23[2];
      uint64_t v69 = v23[3];
      if (swift_getEnumCaseMultiPayload() != 3)
      {
        swift_bridgeObjectRelease();
        goto LABEL_40;
      }
      uint64_t v71 = *(void *)v36;
      uint64_t v72 = *(void *)(v36 + 8);
      uint64_t v74 = *(void *)(v36 + 16);
      uint64_t v73 = *(void *)(v36 + 24);
      if (v68 == v71 && v67 == v72)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v76 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_51;
        }
      }
      if (v70 == v74 && v69 == v73)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v90 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v90 & 1) == 0) {
          goto LABEL_51;
        }
      }
      sub_100095900((uint64_t)v35);
      char v88 = 1;
      return v88 & 1;
    case 4u:
      sub_10009595C((uint64_t)v35, (uint64_t)v20);
      uint64_t v78 = *v20;
      uint64_t v77 = v20[1];
      uint64_t v79 = *(int *)(sub_10002EB60(&qword_1001A2E38) + 48);
      Swift::String v40 = (char *)v20 + v79;
      if (swift_getEnumCaseMultiPayload() != 4) {
        goto LABEL_38;
      }
      uint64_t v81 = *(void *)v36;
      uint64_t v80 = *(void *)(v36 + 8);
      uint64_t v43 = v100;
      Swift::String v82 = *(void (**)(char *, char *, uint64_t))(v100 + 32);
      Swift::String v83 = v40;
      uint64_t v46 = v99;
      v82(v98, v83, v99);
      v82(v97, (char *)(v36 + v79), v46);
      if (v78 == v81 && v77 == v80)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v85 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v85 & 1) == 0)
        {
          unint64_t v49 = *(void (**)(char *, uint64_t))(v43 + 8);
          v49(v97, v46);
          Swift::String v50 = v98;
          goto LABEL_37;
        }
      }
      unint64_t v87 = v97;
      uint64_t v86 = v98;
      goto LABEL_59;
    default:
      sub_10009595C((uint64_t)v35, (uint64_t)v31);
      uint64_t v38 = *v31;
      uint64_t v37 = v31[1];
      uint64_t v39 = *(int *)(sub_10002EB60(&qword_1001A2E38) + 48);
      Swift::String v40 = (char *)v31 + v39;
      if (swift_getEnumCaseMultiPayload())
      {
LABEL_38:
        (*(void (**)(char *, uint64_t))(v100 + 8))(v40, v99);
LABEL_40:
        swift_bridgeObjectRelease();
        sub_1000970DC((uint64_t)v35);
LABEL_52:
        char v88 = 0;
        return v88 & 1;
      }
      uint64_t v42 = *(void *)v36;
      uint64_t v41 = *(void *)(v36 + 8);
      uint64_t v43 = v100;
      uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v100 + 32);
      char v45 = v40;
      uint64_t v46 = v99;
      v44(v94, v45, v99);
      v44(v93, (char *)(v36 + v39), v46);
      if (v38 == v42 && v37 == v41)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v48 & 1) == 0)
        {
          unint64_t v49 = *(void (**)(char *, uint64_t))(v43 + 8);
          v49(v93, v46);
          Swift::String v50 = v94;
LABEL_37:
          v49(v50, v46);
LABEL_51:
          sub_100095900((uint64_t)v35);
          goto LABEL_52;
        }
      }
      unint64_t v87 = v93;
      uint64_t v86 = v94;
LABEL_59:
      char v88 = static Date.== infix(_:_:)();
      id v91 = *(void (**)(char *, uint64_t))(v43 + 8);
      v91(v87, v46);
      v91(v86, v46);
      sub_100095900((uint64_t)v35);
      return v88 & 1;
  }
}

uint64_t sub_1000970DC(uint64_t a1)
{
  uint64_t v2 = sub_10002EB60(&qword_1001A2F48);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10009713C(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10002EB60(&qword_1001A50A0);
  __chkstk_darwin(v4 - 8);
  Swift::String v84 = (char *)v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DateInterval();
  uint64_t v88 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v81 = (char *)v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v69 - v9;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v72 = (char *)v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v69 - v15;
  __chkstk_darwin(v17);
  char v85 = (char *)v69 - v18;
  *(void *)&double v20 = __chkstk_darwin(v19).n128_u64[0];
  unint64_t v87 = (char *)v69 - v21;
  id v22 = objc_msgSend(v2, "dateRanges", v20);
  uint64_t v86 = v6;
  uint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v24 = *(void *)(v23 + 16);
  swift_bridgeObjectRelease();
  if (v24 == 1)
  {
    id v29 = [v2 dateRanges];
    uint64_t v30 = v86;
    uint64_t v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(void *)(v31 + 16))
    {
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v88 + 16))(a1, v31 + ((*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80)), v30);
      swift_bridgeObjectRelease();
      uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v88 + 56);
      uint64_t v26 = a1;
      uint64_t v27 = 0;
      uint64_t v28 = v30;
      goto LABEL_6;
    }
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (!v24)
  {
    uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v88 + 56);
    uint64_t v26 = a1;
    uint64_t v27 = 1;
    uint64_t v28 = v86;
LABEL_6:
    v25(v26, v27, 1, v28);
    return;
  }
  id v32 = [v2 dateRanges];
  uint64_t v33 = v86;
  uint64_t v34 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v34 + 16)) {
    goto LABEL_28;
  }
  uint64_t v82 = v11;
  uint64_t v70 = a1;
  uint64_t v71 = v12;
  unint64_t v35 = (*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80);
  uint64_t v36 = *(void (**)(char *, unint64_t, uint64_t))(v88 + 16);
  v36(v10, v34 + v35, v33);
  swift_bridgeObjectRelease();
  DateInterval.start.getter();
  uint64_t v38 = v88 + 8;
  uint64_t v37 = *(void (**)(char *, uint64_t))(v88 + 8);
  v37(v10, v33);
  id v83 = v2;
  id v39 = [v2 dateRanges];
  uint64_t v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v40 + 16))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  unint64_t v79 = v35;
  uint64_t v80 = v36;
  v36(v10, v40 + v35, v33);
  swift_bridgeObjectRelease();
  DateInterval.end.getter();
  v37(v10, v33);
  id v41 = [v83 dateRanges];
  uint64_t v42 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v43 = *(void *)(v42 + 16);
  uint64_t v44 = v33;
  v69[1] = v42;
  if (v43 != 1)
  {
    uint64_t v45 = v38;
    uint64_t v46 = v84;
    if (!v43)
    {
LABEL_30:
      __break(1u);
      return;
    }
    uint64_t v74 = v37;
    uint64_t v75 = v45;
    v79 += v42;
    char v76 = (void (**)(char *, char *, uint64_t))(v88 + 32);
    uint64_t v77 = v88 + 48;
    unint64_t v47 = (void (**)(char *, uint64_t))(v71 + 8);
    uint64_t v73 = (void (**)(char *, char *, uint64_t))(v71 + 32);
    uint64_t v48 = 1;
    uint64_t v78 = v88 + 56;
    unint64_t v49 = v81;
    id v83 = (id)((v88 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000);
    while (v43 != v48)
    {
      uint64_t v51 = v43;
      v80(v46, v79 + *(void *)(v88 + 72) * v48, v44);
      uint64_t v81 = *(char **)(v88 + 56);
      ((void (*)(char *, void, uint64_t, uint64_t))v81)(v46, 0, 1, v44);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v46, 1, v44) == 1)
      {
        uint64_t v61 = v44;
        char v60 = (void (*)(uint64_t, void, uint64_t, uint64_t))v81;
        goto LABEL_25;
      }
      (*v76)(v49, v46, v44);
      DateInterval.start.getter();
      char v52 = static Date.< infix(_:_:)();
      uint64_t v53 = *v47;
      uint64_t v54 = v82;
      (*v47)(v16, v82);
      if (v52)
      {
        DateInterval.start.getter();
        uint64_t v55 = v87;
        v53(v87, v54);
        (*v73)(v55, v16, v54);
      }
      DateInterval.end.getter();
      uint64_t v56 = v49;
      char v57 = v85;
      char v58 = static Date.> infix(_:_:)();
      v53(v16, v54);
      if (v58)
      {
        DateInterval.end.getter();
        uint64_t v59 = v86;
        v74(v56, v86);
        v53(v57, v54);
        uint64_t v44 = v59;
        (*v73)(v57, v16, v54);
      }
      else
      {
        uint64_t v44 = v86;
        v74(v56, v86);
      }
      id v50 = v83;
      uint64_t v46 = v84;
      unint64_t v49 = v56;
      ++v48;
      uint64_t v43 = v51;
      if (v51 == v48) {
        goto LABEL_23;
      }
    }
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v81 = *(char **)(v88 + 56);
  id v50 = (id)((v88 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000);
  uint64_t v46 = v84;
LABEL_23:
  id v83 = v50;
  char v60 = (void (*)(uint64_t, void, uint64_t, uint64_t))v81;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v81)(v46, 1, 1, v44);
  uint64_t v61 = v44;
LABEL_25:
  swift_bridgeObjectRelease();
  uint64_t v62 = v71;
  char v63 = *(void (**)(char *, char *, uint64_t))(v71 + 16);
  char v64 = v87;
  uint64_t v65 = v82;
  v63(v16, v87, v82);
  char v66 = v85;
  v63(v72, v85, v65);
  uint64_t v67 = v70;
  DateInterval.init(start:end:)();
  uint64_t v68 = *(void (**)(char *, uint64_t))(v62 + 8);
  v68(v66, v65);
  v68(v64, v65);
  v60(v67, 0, 1, v61);
}

void Set<>.nsNumbers.getter(uint64_t a1)
{
  v13[1] = &_swiftEmptySetSingleton;
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v7 << 6);
      goto LABEL_5;
    }
    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v10 >= v6) {
      goto LABEL_21;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v10);
    ++v7;
    if (!v11)
    {
      int64_t v7 = v10 + 1;
      if (v10 + 1 >= v6) {
        goto LABEL_21;
      }
      unint64_t v11 = *(void *)(v2 + 8 * v7);
      if (!v11)
      {
        int64_t v7 = v10 + 2;
        if (v10 + 2 >= v6) {
          goto LABEL_21;
        }
        unint64_t v11 = *(void *)(v2 + 8 * v7);
        if (!v11) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_5:
    sub_100098C68(v13, [objc_allocWithZone((Class)NSNumber) initWithUnsignedLongLong:*(void *)(*(void *)(a1 + 48) + 8 * v9)], (unint64_t *)&qword_1001A1CF0, (uint64_t)NSNumber_ptr, &qword_1001A2F50);
  }
  int64_t v12 = v10 + 3;
  if (v12 >= v6)
  {
LABEL_21:
    swift_release();
    return;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v12);
  if (v11)
  {
    int64_t v7 = v12;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v7 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_21;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v7);
    ++v12;
    if (v11) {
      goto LABEL_20;
    }
  }
LABEL_23:
  __break(1u);
}

uint64_t sub_100097AC8(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for AdamID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_10009E4A4(&qword_1001A1C38, (void (*)(uint64_t))&type metadata accessor for AdamID);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    uint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      double v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_10009E4A4((unint64_t *)&unk_1001A1C40, (void (*)(uint64_t))&type metadata accessor for AdamID);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      id v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10009B068((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_100097DEC(void *a1, void *a2)
{
  return sub_100098C68(a1, a2, (unint64_t *)&qword_1001A1CF0, (uint64_t)NSNumber_ptr, &qword_1001A2F50);
}

uint64_t sub_100097E08(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for App();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_10009E4A4(&qword_1001A1D20, (void (*)(uint64_t))&type metadata accessor for App);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    uint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      double v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_10009E4A4(&qword_1001A2F80, (void (*)(uint64_t))&type metadata accessor for App);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      id v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10009B324((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_10009812C(void *a1, void *a2)
{
  return sub_100098C68(a1, a2, (unint64_t *)&qword_1001A2110, (uint64_t)off_1001827D0, &qword_1001A1CA8);
}

uint64_t sub_100098148(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_10009B774(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1000982F8(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v7 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    id v24 = a2;
    sub_10009B910((uint64_t)v24, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v28;
    swift_bridgeObjectRelease();
    *a1 = v24;
    return 1;
  }
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v12 == v13)
  {
LABEL_16:
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      uint64_t v16 = ~v8;
      do
      {
        unint64_t v9 = (v9 + 1) & v16;
        if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
          goto LABEL_15;
        }
        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v19 = v18;
        if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v19 == v20) {
          goto LABEL_16;
        }
        char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      while ((v22 & 1) == 0);
    }
  }

  swift_bridgeObjectRelease();
  uint64_t v26 = *(void **)(*(void *)(*v3 + 48) + 8 * v9);
  *a1 = v26;
  id v27 = v26;
  return 0;
}

uint64_t sub_100098524(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for MetricsFieldExclusionRequest();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_10009E4A4(&qword_1001A1D08, (void (*)(uint64_t))&type metadata accessor for MetricsFieldExclusionRequest);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    uint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_10009E4A4(&qword_1001A2F60, (void (*)(uint64_t))&type metadata accessor for MetricsFieldExclusionRequest);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10009BB40((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_100098848(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for MetricsFieldInclusionRequest();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_10009E4A4(&qword_1001A1D18, (void (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    uint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_10009E4A4(&qword_1001A2F70, (void (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10009BDFC((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_100098B6C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10009C0B8(a2, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_100098C68(void *a1, void *a2, unint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = v5;
  uint64_t v11 = *v5;
  if ((*v5 & 0xC000000000000001) != 0)
  {
    if (v11 < 0) {
      uint64_t v12 = *v5;
    }
    else {
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v13 = a2;
    uint64_t v14 = __CocoaSet.member(for:)();

    if (v14)
    {
      swift_bridgeObjectRelease();

      sub_10002EE34(0, a3);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v37;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v27 = sub_10009904C(v12, result + 1, a5, a3);
    uint64_t v38 = (void *)v27;
    unint64_t v28 = *(void *)(v27 + 16);
    if (*(void *)(v27 + 24) <= v28)
    {
      uint64_t v33 = v28 + 1;
      id v34 = v13;
      sub_10009AAC4(v33, a5);
      uint64_t v29 = v38;
    }
    else
    {
      uint64_t v29 = (void *)v27;
      id v30 = v13;
    }
    sub_10009AFE4((uint64_t)v13, v29);
    uint64_t *v8 = (uint64_t)v29;
    swift_bridgeObjectRelease();
    *a1 = v13;
  }
  else
  {
    Swift::Int v16 = *(void *)(v11 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v17 = NSObject._rawHashValue(seed:)(v16);
    uint64_t v18 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v19 = v17 & ~v18;
    if ((*(void *)(v11 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19))
    {
      sub_10002EE34(0, a3);
      id v20 = *(id *)(*(void *)(v11 + 48) + 8 * v19);
      char v21 = static NSObject.== infix(_:_:)();

      if (v21)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v25 = *(void **)(*(void *)(*v8 + 48) + 8 * v19);
        *a1 = v25;
        id v26 = v25;
        return 0;
      }
      uint64_t v22 = ~v18;
      while (1)
      {
        unint64_t v19 = (v19 + 1) & v22;
        if (((*(void *)(v11 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
          break;
        }
        id v23 = *(id *)(*(void *)(v11 + 48) + 8 * v19);
        char v24 = static NSObject.== infix(_:_:)();

        if (v24) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v39 = *v8;
    uint64_t *v8 = 0x8000000000000000;
    id v32 = a2;
    sub_10009B5E0((uint64_t)v32, v19, isUniquelyReferenced_nonNull_native, a5, a3);
    uint64_t *v8 = v39;
    swift_bridgeObjectRelease();
    *a1 = v32;
  }
  return 1;
}

uint64_t sub_100098F34(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10009C1DC(a2, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

Swift::Int sub_100099030(uint64_t a1, uint64_t a2)
{
  return sub_10009904C(a1, a2, &qword_1001A1CA8, (unint64_t *)&qword_1001A2110);
}

Swift::Int sub_10009904C(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  if (a2)
  {
    sub_10002EB60(a3);
    uint64_t v6 = static _SetStorage.convert(_:capacity:)();
    uint64_t v19 = v6;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      sub_10002EE34(0, a4);
      do
      {
        swift_dynamicCast();
        uint64_t v6 = v19;
        unint64_t v13 = *(void *)(v19 + 16);
        if (*(void *)(v19 + 24) <= v13)
        {
          sub_10009AAC4(v13 + 1, a3);
          uint64_t v6 = v19;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
        uint64_t v8 = v6 + 56;
        uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
        unint64_t v10 = result & ~v9;
        unint64_t v11 = v10 >> 6;
        if (((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6))) != 0)
        {
          unint64_t v12 = __clz(__rbit64((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6)))) | v10 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v14 = 0;
          unint64_t v15 = (unint64_t)(63 - v9) >> 6;
          do
          {
            if (++v11 == v15 && (v14 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v16 = v11 == v15;
            if (v11 == v15) {
              unint64_t v11 = 0;
            }
            v14 |= v16;
            uint64_t v17 = *(void *)(v8 + 8 * v11);
          }
          while (v17 == -1);
          unint64_t v12 = __clz(__rbit64(~v17)) + (v11 << 6);
        }
        *(void *)(v8 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
        *(void *)(*(void *)(v6 + 48) + 8 * v12) = v18;
        ++*(void *)(v6 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v6;
}

uint64_t sub_100099250()
{
  unint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for AdamID();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  id v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_10002EB60((uint64_t *)&unk_1001A1C90);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    unint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    char v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                unint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      id v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_10009E4A4(&qword_1001A1C38, (void (*)(uint64_t))&type metadata accessor for AdamID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v6;
  return result;
}

uint64_t sub_10009964C()
{
  unint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for App();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  id v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_10002EB60(&qword_1001A2F88);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    unint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    char v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                unint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      id v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_10009E4A4(&qword_1001A1D20, (void (*)(uint64_t))&type metadata accessor for App);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v6;
  return result;
}

uint64_t sub_100099A48(uint64_t a1)
{
  return sub_10009AAC4(a1, &qword_1001A1CA8);
}

uint64_t sub_100099A54()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10002EB60(&qword_1001A1CE8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    char v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                unint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      int64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      void *v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_100099D34()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10002EB60(&qword_1001A2F98);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    BOOL v27 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v29 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v28 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v12 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v13 = v12 | (v10 << 6);
      }
      else
      {
        int64_t v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v28) {
          goto LABEL_33;
        }
        unint64_t v15 = v29[v14];
        ++v10;
        if (!v15)
        {
          int64_t v10 = v14 + 1;
          if (v14 + 1 >= v28) {
            goto LABEL_33;
          }
          unint64_t v15 = v29[v10];
          if (!v15)
          {
            int64_t v10 = v14 + 2;
            if (v14 + 2 >= v28) {
              goto LABEL_33;
            }
            unint64_t v15 = v29[v10];
            if (!v15)
            {
              int64_t v16 = v14 + 3;
              if (v16 >= v28)
              {
LABEL_33:
                swift_release();
                unint64_t v1 = v27;
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero(v29, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v29 = -1 << v26;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v15 = v29[v16];
              if (!v15)
              {
                while (1)
                {
                  int64_t v10 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v28) {
                    goto LABEL_33;
                  }
                  unint64_t v15 = v29[v10];
                  ++v16;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v16;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v15 - 1) & v15;
        unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }
      uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      String.hash(into:)();
      Swift::Int v18 = Hasher._finalize()();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = v18 & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v8 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v20) & ~*(void *)(v8 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v8 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v11 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_10009A048()
{
  unint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for MetricsFieldExclusionRequest();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  id v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_10002EB60(&qword_1001A2F68);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    unint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    int64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                unint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_10009E4A4(&qword_1001A1D08, (void (*)(uint64_t))&type metadata accessor for MetricsFieldExclusionRequest);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v6;
  return result;
}

uint64_t sub_10009A444()
{
  unint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for MetricsFieldInclusionRequest();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  id v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_10002EB60(&qword_1001A2F78);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    unint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    int64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                unint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_10009E4A4(&qword_1001A1D18, (void (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v6;
  return result;
}

uint64_t sub_10009A840()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10002EB60(&qword_1001A2F58);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    uint64_t v27 = v1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  uint64_t *v6 = v26;
                }
                unint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_10009AAC4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  sub_10002EB60(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    char v30 = v2;
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v4 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }
      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v11) {
          goto LABEL_33;
        }
        unint64_t v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v11) {
            goto LABEL_33;
          }
          unint64_t v19 = v8[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v11) {
              goto LABEL_33;
            }
            unint64_t v19 = v8[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_33:
                swift_release();
                uint64_t v3 = v30;
                uint64_t v29 = 1 << *(unsigned char *)(v4 + 32);
                if (v29 > 63) {
                  bzero((void *)(v4 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v8 = -1 << v29;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_39;
                  }
                  if (v14 >= v11) {
                    goto LABEL_33;
                  }
                  unint64_t v19 = v8[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v14 = v20;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      uint64_t v21 = *(void *)(*(void *)(v4 + 48) + 8 * v17);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v22 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v6 + 48) + 8 * v15) = v21;
      ++*(void *)(v6 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v6;
  return result;
}

uint64_t sub_10009AD60()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10002EB60(&qword_1001A2F90);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    BOOL v27 = v1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  uint64_t *v6 = v26;
                }
                unint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

unint64_t sub_10009AFE4(uint64_t a1, void *a2)
{
  NSObject._rawHashValue(seed:)(a2[5]);
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(void *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

uint64_t sub_10009B068(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for AdamID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100099250();
  }
  else
  {
    if (v11 > v10)
    {
      sub_10009C66C((uint64_t (*)(void))&type metadata accessor for AdamID, (uint64_t *)&unk_1001A1C90);
      goto LABEL_12;
    }
    sub_10009CDF0();
  }
  uint64_t v12 = *v3;
  sub_10009E4A4(&qword_1001A1C38, (void (*)(uint64_t))&type metadata accessor for AdamID);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    uint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    int64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_10009E4A4((unint64_t *)&unk_1001A1C40, (void (*)(uint64_t))&type metadata accessor for AdamID);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10009B324(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for App();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_10009964C();
  }
  else
  {
    if (v11 > v10)
    {
      sub_10009C66C((uint64_t (*)(void))&type metadata accessor for App, &qword_1001A2F88);
      goto LABEL_12;
    }
    sub_10009D1A0();
  }
  uint64_t v12 = *v3;
  sub_10009E4A4(&qword_1001A1D20, (void (*)(uint64_t))&type metadata accessor for App);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    uint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    int64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_10009E4A4(&qword_1001A2F80, (void (*)(uint64_t))&type metadata accessor for App);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_10009B5E0(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, unint64_t *a5)
{
  unint64_t v9 = *(void *)(*v5 + 16);
  unint64_t v10 = *(void *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v11 = v9 + 1;
  if (a3)
  {
    sub_10009AAC4(v11, a4);
  }
  else
  {
    if (v10 > v9)
    {
      sub_10009CAB4(a4);
      goto LABEL_14;
    }
    sub_10009E4EC(v11, a4);
  }
  uint64_t v12 = *v5;
  Swift::Int v13 = NSObject._rawHashValue(seed:)(*(void *)(*v5 + 40));
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    sub_10002EE34(0, a5);
    id v15 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
    char v16 = static NSObject.== infix(_:_:)();

    if (v16)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v14;
      while (1)
      {
        a2 = (a2 + 1) & v17;
        if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v20 + 48) + 8 * a2) = a1;
  uint64_t v21 = *(void *)(v20 + 16);
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v23;
  }
}

Swift::Int sub_10009B774(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  int64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_100099A54();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_10009C30C();
      goto LABEL_22;
    }
    sub_10009D550();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    id v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        id v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t sub_10009B910(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_22;
  }
  if (a3)
  {
    sub_100099D34();
  }
  else
  {
    if (v8 > v7)
    {
      uint64_t result = (uint64_t)sub_10009C4C0();
LABEL_22:
      uint64_t v25 = *v4;
      *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
      *(void *)(*(void *)(v25 + 48) + 8 * a2) = v6;
      uint64_t v26 = *(void *)(v25 + 16);
      BOOL v27 = __OFADD__(v26, 1);
      uint64_t v28 = v26 + 1;
      if (!v27)
      {
        *(void *)(v25 + 16) = v28;
        return result;
      }
      __break(1u);
      goto LABEL_25;
    }
    sub_10009D800();
  }
  uint64_t v9 = *v3;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v10 = Hasher._finalize()();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
    goto LABEL_22;
  }
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;
  if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v15)
  {
LABEL_25:
    swift_bridgeObjectRelease_n();
    goto LABEL_26;
  }
  char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v17 & 1) == 0)
  {
    uint64_t v18 = ~v11;
    do
    {
      a2 = (a2 + 1) & v18;
      if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
        goto LABEL_22;
      }
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;
      if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v21 == v22) {
        goto LABEL_25;
      }
      char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
    }
    while ((v24 & 1) == 0);
  }
LABEL_26:
  type metadata accessor for ASCMetricsInvocationPoint(0);
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10009BB40(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for MetricsFieldExclusionRequest();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_10009A048();
  }
  else
  {
    if (v11 > v10)
    {
      sub_10009C66C((uint64_t (*)(void))&type metadata accessor for MetricsFieldExclusionRequest, &qword_1001A2F68);
      goto LABEL_12;
    }
    sub_10009DAE0();
  }
  uint64_t v12 = *v3;
  sub_10009E4A4(&qword_1001A1D08, (void (*)(uint64_t))&type metadata accessor for MetricsFieldExclusionRequest);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    uint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    char v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_10009E4A4(&qword_1001A2F60, (void (*)(uint64_t))&type metadata accessor for MetricsFieldExclusionRequest);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10009BDFC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for MetricsFieldInclusionRequest();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_10009A444();
  }
  else
  {
    if (v11 > v10)
    {
      sub_10009C66C((uint64_t (*)(void))&type metadata accessor for MetricsFieldInclusionRequest, &qword_1001A2F78);
      goto LABEL_12;
    }
    sub_10009DE90();
  }
  uint64_t v12 = *v3;
  sub_10009E4A4(&qword_1001A1D18, (void (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    uint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    char v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_10009E4A4(&qword_1001A2F70, (void (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10009C0B8(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_10009A840();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_10009C91C();
      goto LABEL_14;
    }
    sub_10009E240();
  }
  uint64_t v8 = *v3;
  uint64_t result = static Hasher._hash(seed:_:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

uint64_t sub_10009C1DC(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_10009AD60();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_10009CC58();
      goto LABEL_14;
    }
    sub_10009E764();
  }
  uint64_t v8 = *v3;
  uint64_t result = static Hasher._hash(seed:_:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      type metadata accessor for ASCSignpostTag(0);
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

id sub_10009C300()
{
  return sub_10009CAB4(&qword_1001A1CA8);
}

void *sub_10009C30C()
{
  unint64_t v1 = v0;
  sub_10002EB60(&qword_1001A1CE8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    char v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_10009C4C0()
{
  unint64_t v1 = v0;
  sub_10002EB60(&qword_1001A2F98);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    char v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10009C66C(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = a1(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - v7;
  sub_10002EB60(a2);
  uint64_t v9 = *v2;
  uint64_t v10 = static _SetStorage.copy(original:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    id result = (void *)swift_release();
LABEL_30:
    uint64_t *v4 = v11;
    return result;
  }
  id result = (void *)(v10 + 56);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  BOOL v26 = v4;
  uint64_t v27 = (const void *)(v9 + 56);
  if (v11 != v9 || (unint64_t)result >= v9 + 56 + 8 * v13) {
    id result = memmove(result, v27, 8 * v13);
  }
  int64_t v15 = 0;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 56);
  int64_t v28 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v15 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v22 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v22);
    ++v15;
    if (!v23)
    {
      int64_t v15 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_28;
      }
      unint64_t v23 = *((void *)v27 + v15);
      if (!v23)
      {
        int64_t v15 = v22 + 2;
        if (v22 + 2 >= v28) {
          goto LABEL_28;
        }
        unint64_t v23 = *((void *)v27 + v15);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v18 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v15 << 6);
LABEL_12:
    unint64_t v21 = *(void *)(v6 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(void *)(v9 + 48) + v21, v5);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(v11 + 48) + v21, v8, v5);
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v28)
  {
LABEL_28:
    id result = (void *)swift_release();
    uint64_t v4 = v26;
    goto LABEL_30;
  }
  unint64_t v23 = *((void *)v27 + v24);
  if (v23)
  {
    int64_t v15 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v15 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v15);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

void *sub_10009C91C()
{
  unint64_t v1 = v0;
  sub_10002EB60(&qword_1001A2F58);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_10009CAB4(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10002EB60(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20)
      {
        int64_t v10 = v19 + 2;
        if (v19 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v20 = *(void *)(v7 + 8 * v10);
        if (!v20) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    int64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    id result = v18;
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v14) {
    goto LABEL_28;
  }
  unint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10009CC58()
{
  unint64_t v1 = v0;
  sub_10002EB60(&qword_1001A2F90);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10009CDF0()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for AdamID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_10002EB60((uint64_t *)&unk_1001A1C90);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_10009E4A4(&qword_1001A1C38, (void (*)(uint64_t))&type metadata accessor for AdamID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    unint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10009D1A0()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for App();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_10002EB60(&qword_1001A2F88);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_10009E4A4(&qword_1001A1D20, (void (*)(uint64_t))&type metadata accessor for App);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    unint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10009D550()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10002EB60(&qword_1001A1CE8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    void *v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    unint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10009D800()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10002EB60(&qword_1001A2F98);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  BOOL v27 = v0;
  uint64_t v28 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v29) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v14);
    ++v10;
    if (!v15)
    {
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v28 + 8 * v10);
      if (!v15)
      {
        int64_t v10 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v28 + 8 * v10);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v13);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    id v18 = v17;
    String.hash(into:)();
    Swift::Int v19 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = v19 & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v8 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v21) & ~*(void *)(v8 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v8 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v11 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(void *)(*(void *)(v4 + 48) + 8 * v11) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    unint64_t v1 = v27;
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v28 + 8 * v16);
  if (v15)
  {
    int64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v29) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10009DAE0()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for MetricsFieldExclusionRequest();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_10002EB60(&qword_1001A2F68);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  int64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_10009E4A4(&qword_1001A1D08, (void (*)(uint64_t))&type metadata accessor for MetricsFieldExclusionRequest);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    unint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10009DE90()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for MetricsFieldInclusionRequest();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_10002EB60(&qword_1001A2F78);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  int64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_10009E4A4(&qword_1001A1D18, (void (*)(uint64_t))&type metadata accessor for MetricsFieldInclusionRequest);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    unint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10009E240()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10002EB60(&qword_1001A2F58);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    unint64_t v1 = v26;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10009E4A4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10009E4EC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  sub_10002EB60(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v3 = v6;
    return result;
  }
  unint64_t v30 = v2;
  uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v8 = v4 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1 << v7);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v4 + 56);
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v11) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v11) {
          goto LABEL_33;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    Swift::Int v21 = *(void *)(v6 + 40);
    id v22 = *(id *)(*(void *)(v4 + 48) + 8 * v17);
    uint64_t result = NSObject._rawHashValue(seed:)(v21);
    uint64_t v23 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(void *)(*(void *)(v6 + 48) + 8 * v15) = v22;
    ++*(void *)(v6 + 16);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v3 = v30;
    goto LABEL_35;
  }
  unint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    int64_t v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10009E764()
{
  unint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10002EB60(&qword_1001A2F90);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  char v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    unint64_t v1 = v26;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

void (*sub_10009E9C8(uint64_t a1, uint64_t a2))(char *, uint64_t, uint64_t)
{
  uint64_t v3 = sub_10002EB60(&qword_1001A2568);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  char v85 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  char v89 = (char *)&v77 - v6;
  uint64_t v93 = type metadata accessor for JSONContext();
  unint64_t v91 = *(void *)(v93 - 8);
  uint64_t v7 = __chkstk_darwin(v93);
  id v83 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  int64_t v10 = (char *)&v77 - v9;
  uint64_t v11 = type metadata accessor for JSONObject();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  Swift::String v84 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v86 = (char *)&v77 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v88 = (char *)&v77 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  unint64_t v87 = (char *)&v77 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  unint64_t v23 = (char *)&v77 - v22;
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v77 - v24;
  JSONObject.subscript.getter();
  uint64_t v26 = a2;
  uint64_t v27 = sub_10002DFC4((uint64_t)v25, a2);
  BOOL v28 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v82 = v25;
  uint64_t v95 = v12 + 8;
  uint64_t v96 = v11;
  Swift::String v94 = v28;
  v28(v25, v11);
  if (!v27)
  {
    uint64_t v37 = type metadata accessor for JSONError();
    sub_100072FE0((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
    BOOL v31 = (void (*)(char *, uint64_t, uint64_t))swift_allocError();
    uint64_t v39 = v38;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    strcpy((char *)v39, "defaultOffer");
    *(unsigned char *)(v39 + 13) = 0;
    *(_WORD *)(v39 + 14) = -5120;
    *(void *)(v39 + 16) = MetatypeMetadata;
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v37 - 8) + 104))(v39, enum case for JSONError.missingProperty(_:), v37);
    swift_willThrow();
    return v31;
  }
  uint64_t v90 = v27;
  JSONObject.subscript.getter();
  unint64_t v29 = v91;
  unint64_t v30 = v91 + 16;
  BOOL v31 = *(void (**)(char *, uint64_t, uint64_t))(v91 + 16);
  uint64_t v32 = v26;
  uint64_t v33 = v26;
  uint64_t v34 = v93;
  v31(v10, v33, v93);
  sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
  uint64_t v35 = v92;
  int64_t v36 = (void *)sub_100070E7C();
  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v34);
    v94(v23, v96);
LABEL_17:
    swift_unknownObjectRelease();
    return v31;
  }
  uint64_t v78 = v31;
  unint64_t v79 = v30;
  uint64_t v80 = v32;
  id v81 = v36;
  uint64_t v92 = 0;
  (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v34);
  id v41 = v23;
  uint64_t v42 = v96;
  uint64_t v43 = v94;
  v94(v41, v96);
  uint64_t v44 = v87;
  JSONObject.subscript.getter();
  uint64_t v45 = v89;
  JSONObject.dictionary.getter();
  v43(v44, v42);
  uint64_t v46 = (uint64_t)v45;
  uint64_t v47 = type metadata accessor for JSONDictionary();
  uint64_t v48 = *(void *)(v47 - 8);
  unint64_t v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48);
  if (v49(v46, 1, v47) == 1)
  {
    sub_100072F80(v46);
    uint64_t v51 = (uint64_t)v85;
    id v50 = v86;
  }
  else
  {
    type metadata accessor for ASCOfferTitleVariant(0);
    sub_100072FE0((unint64_t *)&qword_1001A14D8, type metadata accessor for ASCOfferTitleVariant);
    uint64_t v52 = JSONDictionary.bridgedPrimitiveValues<A, B>()();
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v47);
    uint64_t v51 = (uint64_t)v85;
    id v50 = v86;
    if (v52)
    {
      unint64_t v91 = v52;
      goto LABEL_10;
    }
  }
  unint64_t v91 = sub_100063688((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
LABEL_10:
  uint64_t v53 = v88;
  JSONObject.subscript.getter();
  JSONObject.dictionary.getter();
  v94(v53, v96);
  if (v49(v51, 1, v47) == 1)
  {
    sub_100072F80(v51);
LABEL_13:
    unint64_t v54 = sub_100063688((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  type metadata accessor for ASCOfferTitleVariant(0);
  sub_100072FE0((unint64_t *)&qword_1001A14D8, type metadata accessor for ASCOfferTitleVariant);
  unint64_t v54 = JSONDictionary.bridgedPrimitiveValues<A, B>()();
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v51, v47);
  if (!v54) {
    goto LABEL_13;
  }
LABEL_14:
  JSONObject.subscript.getter();
  uint64_t v55 = JSONObject.int.getter();
  if (v56)
  {
    BOOL v31 = (void (*)(char *, uint64_t, uint64_t))type metadata accessor for JSONError();
    sub_100072FE0((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
    swift_allocError();
    uint64_t v74 = v73;
    type metadata accessor for ASCOfferFlags(0);
    *uint64_t v74 = 0x65756C6156776172;
    v74[1] = 0xE800000000000000;
    v74[2] = v75;
    v74[3] = _swiftEmptyArrayStorage;
    (*(void (**)(void *, void, id))(*((void *)v31 - 1) + 104))(v74, enum case for JSONError.malformedProperty(_:), v31);
    swift_willThrow();
    v94(v50, v96);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  char v89 = (char *)v55;
  uint64_t v57 = v96;
  unint64_t v87 = (char *)v54;
  char v58 = v94;
  v94(v50, v96);
  uint64_t v59 = v82;
  JSONObject.subscript.getter();
  uint64_t v88 = (char *)JSONObject.number.getter();
  v58(v59, v57);
  uint64_t v60 = (uint64_t)v84;
  JSONObject.subscript.getter();
  uint64_t v61 = v80;
  v78(v83, v80, v93);
  sub_10002EB60(&qword_1001A2570);
  sub_100072224();
  uint64_t v62 = Array<A>.init(tryDeserializing:using:)();
  uint64_t v63 = v92;
  sub_1000713FC(v62);
  uint64_t v92 = v63;
  swift_bridgeObjectRelease();
  JSONObject.subscript.getter();
  uint64_t v64 = sub_10002DFC4(v60, v61);
  v58((char *)v60, v57);
  JSONObject.subscript.getter();
  uint64_t v65 = sub_10002DFC4(v60, v61);
  v58((char *)v60, v57);
  id v66 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  type metadata accessor for ASCOfferTitleVariant(0);
  sub_100072FE0((unint64_t *)&qword_1001A14D8, type metadata accessor for ASCOfferTitleVariant);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v68 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_10002EE34(0, (unint64_t *)&qword_1001A1D98);
  Class v69 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v70 = v66;
  id v71 = v81;
  uint64_t v72 = v88;
  BOOL v31 = (void (*)(char *, uint64_t, uint64_t))[v70 initWithID:v81 titles:isa subtitles:v68 flags:v89 ageRating:v88 metrics:v69 defaultOffer:v90 buyOffer:v64 openOffer:v65];

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v31;
}

void (*sub_10009F4F4(uint64_t a1, uint64_t a2))(char *, uint64_t, uint64_t)
{
  return sub_10009E9C8(a1, a2);
}

id sub_10009F50C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for State();
  uint64_t v4 = *(void *)(v3 - 8);
  __n128 v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16))(v7, a1, v3, v5);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
  if (v8 == enum case for State.updatable(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
LABEL_11:
    id v9 = [v1 buyOffer];
    if (v9) {
      return v9;
    }
    goto LABEL_13;
  }
  if (v8 != enum case for State.openable(_:))
  {
    if (v8 != enum case for State.buyable(_:) && v8 != enum case for State.unknown(_:))
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  (*(void (**)(char *, uint64_t))(v4 + 96))(v7, v3);
  id v9 = [v1 openOffer];
  uint64_t v10 = type metadata accessor for AppOpenableDestination();
  (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8))(v7, v10);
  if (v9) {
    return v9;
  }
LABEL_13:
  id v13 = [v1 defaultOffer];

  return v13;
}

void *sub_10009F748(uint64_t a1, uint64_t a2)
{
  uint64_t v47 = a2;
  uint64_t v3 = type metadata accessor for JSONContext();
  uint64_t v51 = *(void *)(v3 - 8);
  uint64_t v52 = (void *)v3;
  uint64_t v4 = __chkstk_darwin(v3);
  id v50 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v40 - v6;
  uint64_t v8 = sub_10002EB60(&qword_1001A25F0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for JSONObject();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v48 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v40 - v15;
  uint64_t v17 = type metadata accessor for JSONArray();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  unint64_t v49 = (char *)&v40 - v22;
  uint64_t v46 = a1;
  JSONObject.subscript.getter();
  JSONObject.array.getter();
  unint64_t v23 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v45 = v11;
  v23(v16, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v10, 1, v17) == 1)
  {
    sub_10007AE40((uint64_t)v10);
    uint64_t v24 = (void *)type metadata accessor for JSONError();
    sub_10002ECB0();
    swift_allocError();
    uint64_t v26 = v25;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    void *v26 = 0x736F65646976;
    v26[1] = 0xE600000000000000;
    void v26[2] = MetatypeMetadata;
    (*(void (**)(void *, void, void *))(*(v24 - 1) + 104))(v26, enum case for JSONError.missingProperty(_:), v24);
    swift_willThrow();
  }
  else
  {
    uint64_t v42 = v23;
    BOOL v28 = v49;
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v49, v10, v17);
    unint64_t v29 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
    uint64_t v43 = v17;
    v29(v21, v28, v17);
    uint64_t v24 = v52;
    unint64_t v30 = *(void (**)(char *, uint64_t, void *))(v51 + 16);
    uint64_t v31 = v47;
    v30(v7, v47, v52);
    sub_10002EB60(&qword_1001A2FA0);
    sub_10009FD18();
    uint64_t v32 = Array<A>.init(tryDeserializing:using:)();
    uint64_t v33 = v44;
    uint64_t v44 = sub_1000713FC(v32);
    id v41 = v33;
    swift_bridgeObjectRelease();
    JSONObject.subscript.getter();
    v30(v50, v31, v24);
    sub_10002EE34(0, &qword_1001A2E20);
    uint64_t v34 = v41;
    id v35 = sub_10007E888();
    if (v34)
    {
      (*(void (**)(char *, void *))(v51 + 8))(v50, v52);
      v42(v48, v45);
      (*(void (**)(char *, uint64_t))(v18 + 8))(v49, v43);
      swift_bridgeObjectRelease();
    }
    else
    {
      int64_t v36 = v35;
      (*(void (**)(char *, void *))(v51 + 8))(v50, v52);
      v42(v48, v45);
      id v37 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
      sub_10002EE34(0, &qword_1001A2FB0);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v24 = [v37 initWithVideos:isa mediaPlatform:v36];

      (*(void (**)(char *, uint64_t))(v18 + 8))(v49, v43);
    }
  }
  return v24;
}

void *sub_10009FD00(uint64_t a1, uint64_t a2)
{
  return sub_10009F748(a1, a2);
}

unint64_t sub_10009FD18()
{
  unint64_t result = qword_1001A2FA8;
  if (!qword_1001A2FA8)
  {
    sub_10002ED58(&qword_1001A2FA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A2FA8);
  }
  return result;
}

void *sub_10009FD74(uint64_t a1, uint64_t a2)
{
  uint64_t v113 = a2;
  uint64_t v3 = sub_10002EB60(&qword_1001A2568);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  id v110 = (char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  Swift::String v109 = (char *)&v95 - v6;
  uint64_t v118 = type metadata accessor for JSONContext();
  unint64_t v116 = *(void *)(v118 - 8);
  uint64_t v7 = __chkstk_darwin(v118);
  long long v104 = (char *)&v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v115 = (char *)&v95 - v9;
  uint64_t v10 = sub_10002EB60(&qword_1001A44F0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for JSONObject();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  Swift::String v103 = (char *)&v95 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  Swift::String v102 = (char *)&v95 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  Swift::String v101 = (char *)&v95 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  Class v106 = (char *)&v95 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  Swift::String v108 = (char *)&v95 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  id v107 = (char *)&v95 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  unint64_t v29 = (char *)&v95 - v28;
  __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v95 - v30;
  uint64_t v32 = type metadata accessor for URL();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = __chkstk_darwin(v32);
  id v105 = (char *)&v95 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  id v37 = (char *)&v95 - v36;
  uint64_t v117 = a1;
  JSONObject.subscript.getter();
  JSONObject.url.getter();
  uint64_t v38 = *(void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v39 = v31;
  uint64_t v40 = v33;
  uint64_t v41 = v13;
  uint64_t v111 = v14 + 8;
  uint64_t v114 = v38;
  v38(v39, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v12, 1, v32) == 1)
  {
    sub_100034B8C((uint64_t)v12, &qword_1001A44F0);
    uint64_t v42 = type metadata accessor for JSONError();
    sub_100072FE0((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
    swift_allocError();
    uint64_t v44 = v43;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    *uint64_t v44 = 7107189;
    v44[1] = 0xE300000000000000;
    v44[2] = MetatypeMetadata;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v42 - 8) + 104))(v44, enum case for JSONError.missingProperty(_:), v42);
    swift_willThrow();
    return v44;
  }
  (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v37, v12, v32);
  JSONObject.subscript.getter();
  uint64_t v46 = v40;
  unint64_t v48 = v116 + 16;
  uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t))(v116 + 16);
  v47(v115, v113, v118);
  uint64_t v44 = (void *)sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
  uint64_t v49 = v112;
  id v50 = (void *)sub_100070E7C();
  if (v49)
  {
    (*(void (**)(char *, uint64_t))(v116 + 8))(v115, v118);
    v114(v29, v41);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v37, v32);
    return v44;
  }
  unint64_t v95 = v48;
  uint64_t v96 = v47;
  uint64_t v99 = v37;
  id v97 = v50;
  uint64_t v112 = 0;
  uint64_t v98 = v46;
  uint64_t v100 = v32;
  (*(void (**)(char *, uint64_t))(v116 + 8))(v115, v118);
  uint64_t v51 = v114;
  v114(v29, v41);
  uint64_t v52 = v107;
  JSONObject.subscript.getter();
  uint64_t v53 = (uint64_t)v109;
  JSONObject.dictionary.getter();
  v51(v52, v41);
  uint64_t v54 = type metadata accessor for JSONDictionary();
  uint64_t v55 = *(void *)(v54 - 8);
  char v56 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48);
  if (v56(v53, 1, v54) == 1)
  {
    sub_100034B8C(v53, &qword_1001A2568);
  }
  else
  {
    type metadata accessor for ASCOfferTitleVariant(0);
    sub_100072FE0((unint64_t *)&qword_1001A14D8, type metadata accessor for ASCOfferTitleVariant);
    uint64_t v57 = JSONDictionary.bridgedPrimitiveValues<A, B>()();
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v53, v54);
    if (v57)
    {
      unint64_t v116 = v57;
      goto LABEL_10;
    }
  }
  unint64_t v116 = sub_100063688((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
LABEL_10:
  char v58 = v108;
  JSONObject.subscript.getter();
  uint64_t v59 = (uint64_t)v110;
  JSONObject.dictionary.getter();
  v114(v58, v41);
  if (v56(v59, 1, v54) == 1)
  {
    sub_100034B8C(v59, &qword_1001A2568);
    uint64_t v60 = v113;
  }
  else
  {
    type metadata accessor for ASCOfferTitleVariant(0);
    sub_100072FE0((unint64_t *)&qword_1001A14D8, type metadata accessor for ASCOfferTitleVariant);
    uint64_t v61 = JSONDictionary.bridgedPrimitiveValues<A, B>()();
    uint64_t v62 = v54;
    unint64_t v63 = v61;
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v59, v62);
    uint64_t v60 = v113;
    if (v63) {
      goto LABEL_14;
    }
  }
  unint64_t v63 = sub_100063688((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
LABEL_14:
  uint64_t v64 = v112;
  uint64_t v65 = v118;
  id v66 = v106;
  JSONObject.subscript.getter();
  uint64_t v67 = JSONObject.int.getter();
  if (v68)
  {
    uint64_t v89 = type metadata accessor for JSONError();
    sub_100072FE0((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
    swift_allocError();
    uint64_t v44 = v90;
    type metadata accessor for ASCOfferFlags(0);
    *uint64_t v44 = 0x65756C6156776172;
    v44[1] = 0xE800000000000000;
    v44[2] = v91;
    void v44[3] = _swiftEmptyArrayStorage;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v89 - 8) + 104))(v44, enum case for JSONError.malformedProperty(_:), v89);
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v114(v66, v41);
    (*(void (**)(char *, uint64_t))(v98 + 8))(v99, v100);
  }
  else
  {
    uint64_t v118 = v67;
    Class v69 = v66;
    uint64_t v70 = v114;
    v114(v69, v41);
    uint64_t v115 = (char *)v63;
    id v71 = v101;
    JSONObject.subscript.getter();
    uint64_t v117 = JSONObject.number.getter();
    v70(v71, v41);
    JSONObject.subscript.getter();
    v96(v104, v60, v65);
    sub_10002EB60(&qword_1001A2570);
    sub_100072224();
    uint64_t v72 = Array<A>.init(tryDeserializing:using:)();
    sub_1000713FC(v72);
    uint64_t v112 = v64;
    swift_bridgeObjectRelease();
    uint64_t v73 = v98;
    (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v105, v99, v100);
    uint64_t v74 = v103;
    JSONObject.subscript.getter();
    char v75 = JSONObject.BOOL.getter();
    v70(v74, v41);
    LODWORD(v114) = v75 & 1;
    id v76 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    type metadata accessor for ASCOfferTitleVariant(0);
    sub_100072FE0((unint64_t *)&qword_1001A14D8, type metadata accessor for ASCOfferTitleVariant);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Class v78 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    sub_10002EE34(0, (unint64_t *)&qword_1001A1D98);
    Class v79 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v80 = v105;
    URL._bridgeToObjectiveC()(v81);
    id v83 = v82;
    LOBYTE(v94) = (_BYTE)v114;
    uint64_t v93 = v82;
    Swift::String v84 = v76;
    id v85 = v97;
    uint64_t v86 = (void *)v117;
    uint64_t v44 = [v84 initWithID:v97 titles:isa subtitles:v78 flags:v118 ageRating:v117 metrics:v79 url:v93 isSensitive:v94];

    unint64_t v87 = *(void (**)(char *, uint64_t))(v73 + 8);
    uint64_t v88 = v100;
    v87(v80, v100);
    v87(v99, v88);
  }
  return v44;
}

void *sub_1000A0A74(uint64_t a1, uint64_t a2)
{
  return sub_10009FD74(a1, a2);
}

void *sub_1000A0A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = a2;
  uint64_t v29 = type metadata accessor for JSONContext();
  uint64_t v2 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for JSONObject();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v26 - v10;
  JSONObject.subscript.getter();
  uint64_t v26 = JSONObject.string.getter();
  uint64_t v13 = v12;
  uint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v14 = (void *)(v6 + 8);
  uint64_t v15 = v16;
  v16(v11, v5);
  if (v13)
  {
    JSONObject.subscript.getter();
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v27, v29);
    sub_1000A0E0C();
    uint64_t v17 = v28;
    uint64_t v18 = sub_100077AF4();
    if (v17)
    {
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v29);
      v15(v9, v5);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v22 = v18;
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v29);
      v15(v9, v5);
      id v23 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
      NSString v24 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      uint64_t v14 = [v23 initWithVideoURL:v24 preview:v22];
    }
  }
  else
  {
    uint64_t v19 = type metadata accessor for JSONError();
    sub_10002ECB0();
    swift_allocError();
    uint64_t v14 = v20;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    *uint64_t v14 = 0x4C52556F65646976;
    v14[1] = 0xE800000000000000;
    v14[2] = MetatypeMetadata;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104))(v14, enum case for JSONError.missingProperty(_:), v19);
    swift_willThrow();
  }
  return v14;
}

void *sub_1000A0DF4(uint64_t a1, uint64_t a2)
{
  return sub_1000A0A8C(a1, a2);
}

unint64_t sub_1000A0E0C()
{
  unint64_t result = qword_1001A2E28;
  if (!qword_1001A2E28)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001A2E28);
  }
  return result;
}

void *sub_1000A0E4C(uint64_t a1, uint64_t a2)
{
  uint64_t v54 = a2;
  uint64_t v3 = sub_10002EB60(&qword_1001A2568);
  __chkstk_darwin(v3 - 8);
  char v56 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for JSONDictionary();
  uint64_t v57 = *(void *)(v5 - 8);
  uint64_t v58 = v5;
  __chkstk_darwin(v5);
  id v50 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for JSONContext();
  uint64_t v51 = *(void *)(v7 - 8);
  uint64_t v52 = v7;
  __chkstk_darwin(v7);
  uint64_t v53 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10002EB60(&qword_1001A25F0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for JSONObject();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v49 - v17;
  uint64_t v19 = type metadata accessor for JSONArray();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = __chkstk_darwin(v19);
  id v23 = (char *)&v49 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v59 = (char *)&v49 - v24;
  uint64_t v55 = a1;
  JSONObject.subscript.getter();
  JSONObject.array.getter();
  uint64_t v25 = v19;
  uint64_t v26 = *(void (**)(char *, uint64_t))(v13 + 8);
  v26(v18, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v11, 1, v25) == 1)
  {
    sub_100034B8C((uint64_t)v11, &qword_1001A25F0);
    uint64_t v27 = (void *)type metadata accessor for JSONError();
    sub_1000A1C60((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
    swift_allocError();
    uint64_t v29 = v28;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    strcpy((char *)v29, "instructions");
    *(unsigned char *)(v29 + 13) = 0;
    *(_WORD *)(v29 + 14) = -5120;
    *(void *)(v29 + 16) = MetatypeMetadata;
    (*(void (**)(uint64_t, void, void *))(*(v27 - 1) + 104))(v29, enum case for JSONError.missingProperty(_:), v27);
    swift_willThrow();
  }
  else
  {
    uint64_t v31 = v20;
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    uint64_t v33 = v59;
    v32(v59, v11, v25);
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v23, v33, v25);
    (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v53, v54, v52);
    sub_10002EB60(&qword_1001A2FB8);
    sub_1000A1CA8();
    uint64_t v34 = Array<A>.init(tryDeserializing:using:)();
    JSONObject.subscript.getter();
    uint64_t v35 = (uint64_t)v56;
    JSONObject.dictionary.getter();
    v26(v16, v12);
    uint64_t v37 = v57;
    uint64_t v36 = v58;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v35, 1, v58) == 1)
    {
      swift_bridgeObjectRelease();
      sub_100034B8C(v35, &qword_1001A2568);
      uint64_t v27 = (void *)type metadata accessor for JSONError();
      sub_1000A1C60((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
      swift_allocError();
      uint64_t v39 = v38;
      uint64_t v40 = swift_getMetatypeMetadata();
      *uint64_t v39 = 0x6C65694665676170;
      v39[1] = 0xEA00000000007364;
      void v39[2] = v40;
      (*(void (**)(void *, void, void *))(*(v27 - 1) + 104))(v39, enum case for JSONError.missingProperty(_:), v27);
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v59, v25);
    }
    else
    {
      uint64_t v54 = v31;
      uint64_t v55 = v25;
      uint64_t v41 = v50;
      (*(void (**)(char *, uint64_t, uint64_t))(v37 + 32))(v50, v35, v36);
      if (JSONDictionary.bridgedPrimitiveValues<A, B>()())
      {
        sub_1000713FC(v34);
        swift_bridgeObjectRelease();
        id v42 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
        sub_10002EE34(0, &qword_1001A2FC8);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        Class v44 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        uint64_t v27 = [v42 initWithInstructions:isa pageFields:v44];
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v27 = (void *)type metadata accessor for JSONError();
        sub_1000A1C60((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
        swift_allocError();
        uint64_t v46 = v45;
        uint64_t v47 = swift_getMetatypeMetadata();
        *uint64_t v46 = 0x6C65694665676170;
        v46[1] = 0xEA00000000007364;
        long long v46[2] = v47;
        v46[3] = _swiftEmptyArrayStorage;
        (*(void (**)(void *, void, void *))(*(v27 - 1) + 104))(v46, enum case for JSONError.malformedProperty(_:), v27);
        swift_willThrow();
      }
      (*(void (**)(char *, uint64_t))(v37 + 8))(v41, v36);
      (*(void (**)(char *, uint64_t))(v54 + 8))(v59, v55);
    }
  }
  return v27;
}

void *sub_1000A1708(uint64_t a1, uint64_t a2)
{
  return sub_1000A0E4C(a1, a2);
}

char *sub_1000A1720(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = (char *)a2;
  uint64_t v2 = sub_10002EB60(&qword_1001A25F0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for JSONArray();
  uint64_t v31 = *(void *)(v5 - 8);
  uint64_t v32 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for JSONObject();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v30 - v13;
  sub_10002EE34(0, (unint64_t *)&qword_1001A1D98);
  JSONObject.subscript.getter();
  uint64_t v15 = v34;
  uint64_t v16 = sub_10007EC34((uint64_t)v14, (uint64_t)v33);
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
  else
  {
    v30[1] = 0;
    uint64_t v34 = v16;
    uint64_t v33 = v7;
    uint64_t v17 = *(void (**)(char *, uint64_t))(v9 + 8);
    v17(v14, v8);
    JSONObject.subscript.getter();
    JSONObject.array.getter();
    v17(v12, v8);
    uint64_t v19 = v31;
    uint64_t v18 = v32;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v4, 1, v32) == 1)
    {
      sub_100034B8C((uint64_t)v4, &qword_1001A25F0);
      uint64_t v12 = (char *)type metadata accessor for JSONError();
      sub_1000A1C60((unint64_t *)&qword_1001A1710, (void (*)(uint64_t))&type metadata accessor for JSONError);
      swift_allocError();
      uint64_t v21 = v20;
      uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
      *uint64_t v21 = 0xD000000000000010;
      v21[1] = 0x800000010015CC20;
      void v21[2] = MetatypeMetadata;
      (*(void (**)(void *, void, char *))(*((void *)v12 - 1) + 104))(v21, enum case for JSONError.missingProperty(_:), v12);
      swift_willThrow();
    }
    else
    {
      uint64_t v23 = (uint64_t)v33;
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v33, v4, v18);
      type metadata accessor for ASCMetricsInvocationPoint(0);
      uint64_t v24 = JSONArray.compactMap<A>(_:)();
      sub_100042FC4(v24);
      swift_bridgeObjectRelease();
      id v25 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
      sub_1000A1C60((unint64_t *)&unk_1001A1D70, type metadata accessor for ASCMetricsInvocationPoint);
      Class isa = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v27 = v25;
      uint64_t v28 = v34;
      uint64_t v12 = (char *)[v27 initWithData:v34 invocationPoints:isa];

      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v23, v18);
    }
  }
  return v12;
}

uint64_t sub_1000A1BC4()
{
  return JSONObject.stringEnumOrNil<A>()();
}

char *sub_1000A1C48(uint64_t a1, uint64_t a2)
{
  return sub_1000A1720(a1, a2);
}

uint64_t sub_1000A1C60(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000A1CA8()
{
  unint64_t result = qword_1001A2FC0;
  if (!qword_1001A2FC0)
  {
    sub_10002ED58(&qword_1001A2FB8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A2FC0);
  }
  return result;
}

uint64_t sub_1000A1D04(uint64_t a1)
{
  switch(a1)
  {
    case 3:
      type metadata accessor for ASCOpenAppError(0);
      sub_10002EB60(&qword_1001A4CE0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10014CED0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v5;
      *(void *)(inited + 72) = &type metadata for String;
      unint64_t v3 = 0xD000000000000018;
      uint64_t v4 = "Companion phone required";
      goto LABEL_7;
    case 2:
      type metadata accessor for ASCOpenAppError(0);
      sub_10002EB60(&qword_1001A4CE0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10014CED0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v6;
      *(void *)(inited + 72) = &type metadata for String;
      unint64_t v3 = 0xD000000000000011;
      uint64_t v4 = "App launch failed";
      goto LABEL_7;
    case 1:
      type metadata accessor for ASCOpenAppError(0);
      sub_10002EB60(&qword_1001A4CE0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10014CED0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v2;
      *(void *)(inited + 72) = &type metadata for String;
      unint64_t v3 = 0xD000000000000013;
      uint64_t v4 = "App launch disabled";
LABEL_7:
      *(void *)(inited + 48) = v3;
      *(void *)(inited + 56) = (unint64_t)(v4 - 32) | 0x8000000000000000;
      sub_100062F68(inited);
      sub_1000A1ED0();
      _BridgedStoredNSError.init(_:userInfo:)();
      return v8;
  }
  return 0;
}

unint64_t sub_1000A1ED0()
{
  unint64_t result = qword_1001A1560;
  if (!qword_1001A1560)
  {
    type metadata accessor for ASCOpenAppError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A1560);
  }
  return result;
}

uint64_t sub_1000A1F28()
{
  uint64_t v0 = type metadata accessor for LogMessageLevel();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  unint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OSLogger.Subsystem();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OSLogger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0E58 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_10002F6AC(v4, (uint64_t)qword_1001AE350);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v12, v4);
  OSLogger.init(subsystem:category:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for LogMessageLevel.info(_:), v0);
  uint64_t v13 = Logger.withOutputFiltered(byName:defaultVerbosityLevel:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t result = type metadata accessor for OptionalLogger();
  qword_1001AE2E0 = result;
  unk_1001AE2E8 = &protocol witness table for OptionalLogger;
  qword_1001AE2C8 = v13;
  return result;
}

uint64_t sub_1000A21FC()
{
  [*(id *)(v0 + 112) removeObserver:v0];
  swift_bridgeObjectRelease();
  sub_10002ED08(v0 + 32);
  sub_10002ED08(v0 + 72);

  sub_100067184(*(void **)(v0 + 128), *(unsigned char *)(v0 + 136));
  swift_release();
  return v0;
}

uint64_t sub_1000A2264()
{
  sub_1000A21FC();

  return swift_deallocClassInstance();
}

void sub_1000A2298(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = *(void **)(v3 + 128);
  char v8 = *(unsigned char *)(v3 + 136);
  sub_100067164(v7, v8);
  char v9 = sub_1000FF5C0((uint64_t)v7, v8, a1, a2);
  sub_100067184(v7, v8);
  if ((v9 & 1) == 0)
  {
    char v10 = *(unsigned char *)(v3 + 136);
    uint64_t v19 = *(void **)(v3 + 128);
    char v20 = v10;
    sub_100067164(v19, v10);
    AsyncEvent.post(_:)();
    sub_100067184(v19, v10);
    if (qword_1001A0DD0 != -1) {
      swift_once();
    }
    sub_100052538((uint64_t)&qword_1001AE2C8, (uint64_t)&v19);
    sub_10002EC6C(&v19, v21);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v11._object = (void *)0x800000010015CE40;
    v11._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v11);
    uint64_t v12 = *(void **)(v3 + 128);
    char v13 = *(unsigned char *)(v3 + 136);
    sub_100067164(v12, v13);
    unint64_t v14 = sub_1000FF43C((char)v12, v13);
    uint64_t v16 = v15;
    sub_100067184(v12, v13);
    v18[3] = &type metadata for String;
    v18[0] = v14;
    v18[1] = v16;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_100034B8C((uint64_t)v18, &qword_1001A1C50);
    v17._uint64_t countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v17);
    LogMessage.init(stringInterpolation:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    sub_10002ED08((uint64_t)&v19);
  }
}

uint64_t sub_1000A2544()
{
  uint64_t v0 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v0 - 8);
  if (qword_1001A0DD0 != -1) {
    swift_once();
  }
  sub_100052538((uint64_t)&qword_1001AE2C8, (uint64_t)v9);
  sub_10002EC6C(v9, v9[3]);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v1._uint64_t countAndFlagsBits = 0x6465766965636552;
  v1._object = (void *)0xE900000000000020;
  LogMessage.StringInterpolation.appendLiteral(_:)(v1);
  uint64_t v2 = (void *)Notification.name.getter();
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  v8[3] = &type metadata for String;
  v8[0] = v3;
  v8[1] = v5;
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)v8, &qword_1001A1C50);
  v6._uint64_t countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v6);
  LogMessage.init(stringInterpolation:)();
  Logger.debug(_:)();
  swift_bridgeObjectRelease();
  sub_10002ED08((uint64_t)v9);
  sub_1000A2774(0);
  return swift_release();
}

uint64_t sub_1000A2774(unsigned __int8 a1)
{
  uint64_t v2 = v1;
  uint64_t v45 = *v1;
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation();
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  __chkstk_darwin(v6);
  if (qword_1001A0DD0 != -1) {
    swift_once();
  }
  sub_100052538((uint64_t)&qword_1001AE2C8, (uint64_t)v49);
  sub_10002EC6C(v49, v50);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014E610;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v7._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v7._object = (void *)0x800000010015CD50;
  LogMessage.StringInterpolation.appendLiteral(_:)(v7);
  *((void *)&v48 + 1) = &type metadata for ArcadeEntitlementRefreshCondition;
  unsigned __int8 v44 = a1;
  LOBYTE(v47) = a1;
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)&v47, &qword_1001A1C50);
  v8._uint64_t countAndFlagsBits = 0x746E657272756320;
  v8._object = (void *)0xEF3A657461747320;
  LogMessage.StringInterpolation.appendLiteral(_:)(v8);
  LogMessage.init(stringInterpolation:)();
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v9._uint64_t countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v9);
  char v10 = (void *)v1[16];
  char v11 = *((unsigned char *)v2 + 136);
  sub_100067164((id)v2[16], v11);
  unint64_t v12 = sub_1000FF43C((char)v10, v11);
  uint64_t v46 = v2;
  uint64_t v14 = v13;
  sub_100067184(v10, v11);
  *((void *)&v48 + 1) = &type metadata for String;
  *(void *)&long long v47 = v12;
  *((void *)&v47 + 1) = v14;
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)&v47, &qword_1001A1C50);
  v15._uint64_t countAndFlagsBits = 0xD000000000000025;
  v15._object = (void *)0x800000010015CD70;
  LogMessage.StringInterpolation.appendLiteral(_:)(v15);
  LogMessage.init(stringInterpolation:)();
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v16._uint64_t countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v16);
  uint64_t v17 = v46[3];
  if (v17)
  {
    uint64_t v18 = v46[2];
    *((void *)&v48 + 1) = &type metadata for String;
    *(void *)&long long v47 = v18;
    *((void *)&v47 + 1) = v17;
  }
  else
  {
    long long v47 = 0u;
    long long v48 = 0u;
  }
  swift_bridgeObjectRetain();
  LogMessage.StringInterpolation.appendInterpolation(sensitive:)();
  sub_100034B8C((uint64_t)&v47, &qword_1001A1C50);
  v19._uint64_t countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v19);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  sub_10002ED08((uint64_t)v49);
  switch(v44 >> 6)
  {
    case 3:
      sub_10002EB60(&qword_1001A30A0);
      uint64_t v35 = Promise.__allocating_init()();
      if (v44 == 192)
      {
        uint64_t v36 = v46[7];
        uint64_t v37 = v46[8];
        sub_10002EC6C(v46 + 4, v36);
        uint64_t v38 = *(void (**)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v37 + 16);
        swift_retain();
        v38(1, sub_1000A4530, v35, v36, v37);
        swift_release();
        uint64_t v25 = v45;
      }
      else
      {
        uint64_t v25 = v45;
        uint64_t v39 = sub_1000A32BC(1, v35, (uint64_t)v46, v45);
        uint64_t v41 = v40;
        uint64_t v42 = v46[7];
        uint64_t v43 = v46[8];
        sub_10002EC6C(v46 + 4, v42);
        (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t, uint64_t (*)(uint64_t, char, char, uint64_t), uint64_t, uint64_t, uint64_t))(v43 + 8))(1, 1, 0xD000000000000012, 0x800000010015A8B0, v39, v41, v42, v43);
        swift_release();
      }
      break;
    default:
      sub_10002EB60(&qword_1001A30A0);
      uint64_t v20 = Promise.__allocating_init()();
      uint64_t v21 = v46[7];
      uint64_t v22 = v46[8];
      sub_10002EC6C(v46 + 4, v21);
      uint64_t v23 = *(void (**)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v22 + 16);
      swift_retain();
      v23(1, sub_1000A4530, v20, v21, v22);
      uint64_t v24 = swift_allocObject();
      *(void *)(v24 + 16) = v46;
      *(unsigned char *)(v24 + 24) = v44 & 1;
      uint64_t v25 = v45;
      *(void *)(v24 + 32) = v45;
      uint64_t v50 = type metadata accessor for SyncTaskScheduler();
      uint64_t v51 = &protocol witness table for SyncTaskScheduler;
      sub_100031A88(v49);
      swift_retain();
      SyncTaskScheduler.init()();
      sub_100053028(&qword_1001A30B8, &qword_1001A30A0);
      Promise.flatMap<A>(on:_:)();
      swift_release_n();
      swift_release();
      sub_10002ED08((uint64_t)v49);
      break;
  }
  uint64_t v50 = type metadata accessor for SyncTaskScheduler();
  uint64_t v51 = &protocol witness table for SyncTaskScheduler;
  sub_100031A88(v49);
  swift_retain();
  SyncTaskScheduler.init()();
  sub_10002EB60(&qword_1001A30A8);
  sub_100053028(&qword_1001A30B0, &qword_1001A30A8);
  Promise.flatMap<A>(on:_:)();
  swift_release();
  sub_10002ED08((uint64_t)v49);
  sub_10002EB60(&qword_1001A29E0);
  uint64_t v26 = Promise.__allocating_init()();
  uint64_t v27 = swift_allocObject();
  swift_weakInit();
  uint64_t v28 = (void *)swift_allocObject();
  void v28[2] = v27;
  v28[3] = v26;
  void v28[4] = v25;
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = sub_1000A4594;
  *(void *)(v29 + 24) = v28;
  uint64_t v30 = swift_allocObject();
  swift_weakInit();
  uint64_t v31 = (void *)swift_allocObject();
  v31[2] = v30;
  v31[3] = v26;
  v31[4] = v25;
  unint64_t v32 = sub_10004765C();
  swift_retain_n();
  swift_retain();
  uint64_t v33 = static OS_dispatch_queue.main.getter();
  uint64_t v50 = v32;
  uint64_t v51 = &protocol witness table for OS_dispatch_queue;
  v49[0] = v33;
  Promise.then(perform:orCatchError:on:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10002ED08((uint64_t)v49);
  swift_release();
  return v26;
}

uint64_t type metadata accessor for ASDArcadeSubscriptionManager()
{
  return self;
}

{
  return type metadata accessor for ASDArcadeSubscriptionManager();
}

uint64_t (*sub_1000A32BC(char a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, char a2, char a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  *(unsigned char *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a3;
  *(void *)(v8 + 32) = a2;
  *(void *)(v8 + 40) = a4;
  swift_retain();
  swift_retain();
  return sub_1000A46D8;
}

uint64_t sub_1000A3348(uint64_t a1, char a2, char a3, uint64_t a4, char a5, void *a6, uint64_t a7)
{
  if (!a4)
  {
    swift_bridgeObjectRetain();
    Promise.resolve(_:)();
    return swift_bridgeObjectRelease();
  }
  if ((a5 & 1) == 0 || (a2 & 1) == 0 || (a3 & 1) == 0)
  {
    swift_errorRetain();
    goto LABEL_11;
  }
  type metadata accessor for Code(0);
  swift_errorRetain();
  sub_1000A46E8();
  if ((static _ErrorCodeProtocol.~= infix(_:_:)() & 1) == 0)
  {
LABEL_11:
    Promise.reject(_:)();
    return swift_errorRelease();
  }
  if (qword_1001A0DD0 != -1) {
    swift_once();
  }
  sub_10002EC6C(&qword_1001AE2C8, qword_1001AE2E0);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CD00;
  LogMessage.init(stringLiteral:)();
  LogMessage.init(stringLiteral:)();
  Logger.debug(_:)();
  swift_bridgeObjectRelease();
  Swift::String v9 = a6 + 4;
  uint64_t v11 = a6[7];
  uint64_t v10 = a6[8];
  sub_10002EC6C(v9, v11);
  unint64_t v12 = *(void (**)(uint64_t, uint64_t, unint64_t, unint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 8);
  swift_retain();
  v12(1, 1, 0xD000000000000012, 0x800000010015A8B0, sub_1000A4740, a7, v11, v10, 3027);
  swift_errorRelease();
  return swift_release();
}

uint64_t sub_1000A35E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_errorRetain();
    Promise.reject(_:)();
    return swift_errorRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    Promise.resolve(_:)();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000A3680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_errorRetain();
    Promise.reject(_:)();
    return swift_errorRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    Promise.resolve(_:)();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000A371C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 9) == 1)
  {
    sub_10002EB60(&qword_1001A30A0);
    uint64_t v7 = Promise.__allocating_init()();
    uint64_t v8 = sub_1000A32BC(a3 & 1, v7, a2, a4);
    uint64_t v10 = v9;
    uint64_t v11 = (void *)(a2 + 32);
    uint64_t v13 = *(void *)(a2 + 56);
    uint64_t v12 = *(void *)(a2 + 64);
    sub_10002EC6C(v11, v13);
    (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t, uint64_t (*)(uint64_t, char, char, uint64_t), uint64_t, uint64_t, uint64_t))(v12 + 8))(1, 1, 0xD000000000000012, 0x800000010015A8B0, v8, v10, v13, v12);
    swift_release();
  }
  else
  {
    sub_10002EB60(&qword_1001A30A0);
    swift_bridgeObjectRetain();
    return Promise.__allocating_init(value:)();
  }
  return v7;
}

uint64_t sub_1000A3840(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  int v7 = *(unsigned __int8 *)(a1 + 9);
  BOOL v8 = *(unsigned char *)(a1 + 8) != 1 || *(void *)a1 == 0;
  if (v8
    || (swift_retain(),
        unint64_t v9 = swift_bridgeObjectRetain(),
        uint64_t v10 = sub_1000A48E8(v9, a2),
        swift_bridgeObjectRelease(),
        swift_release(),
        !v10))
  {
    if (!v7)
    {
      sub_10002EB60(&qword_1001A30A0);
      swift_bridgeObjectRetain();
      return Promise.__allocating_init(value:)();
    }
  }
  else
  {
  }
  sub_10002EB60(&qword_1001A30A0);
  uint64_t v11 = Promise.__allocating_init()();
  uint64_t v12 = sub_1000A32BC(a3 & 1, v11, a2, a4);
  uint64_t v14 = v13;
  Swift::String v15 = (void *)(a2 + 32);
  uint64_t v17 = *(void *)(a2 + 56);
  uint64_t v16 = *(void *)(a2 + 64);
  sub_10002EC6C(v15, v17);
  (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t, uint64_t (*)(uint64_t, char, char, uint64_t), uint64_t, uint64_t, uint64_t))(v16 + 8))(1, 1, 0xD000000000000012, 0x800000010015A8B0, v12, v14, v17, v16);
  swift_release();
  return v11;
}

uint64_t sub_1000A39B4(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  int v7 = *(unsigned __int8 *)(a1 + 9);
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    if (!*(void *)a1) {
      goto LABEL_6;
    }
    swift_retain();
    unint64_t v8 = swift_bridgeObjectRetain();
    unint64_t v9 = sub_1000A48E8(v8, a2);
    swift_bridgeObjectRelease();
    swift_release();
    if (!v9) {
      goto LABEL_6;
    }
  }
  if (!v7)
  {
    sub_10002EB60(&qword_1001A30A0);
    swift_bridgeObjectRetain();
    return Promise.__allocating_init(value:)();
  }
LABEL_6:
  sub_10002EB60(&qword_1001A30A0);
  uint64_t v10 = Promise.__allocating_init()();
  uint64_t v11 = sub_1000A32BC(a3 & 1, v10, a2, a4);
  uint64_t v13 = v12;
  uint64_t v14 = (void *)(a2 + 32);
  uint64_t v16 = *(void *)(a2 + 56);
  uint64_t v15 = *(void *)(a2 + 64);
  sub_10002EC6C(v14, v16);
  (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t, uint64_t (*)(uint64_t, char, char, uint64_t), uint64_t, uint64_t, uint64_t))(v15 + 8))(1, 1, 0xD000000000000012, 0x800000010015A8B0, v11, v13, v16, v15);
  swift_release();
  return v10;
}

uint64_t sub_1000A3B24(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  char v5 = *((unsigned char *)a1 + 9);
  sub_10002EB60(&qword_1001A30A8);
  uint64_t v6 = Promise.__allocating_init()();
  int v7 = a2 + 4;
  uint64_t v9 = a2[7];
  uint64_t v8 = a2[8];
  sub_10002EC6C(v7, v9);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v6;
  *(void *)(v10 + 24) = v3;
  *(unsigned char *)(v10 + 32) = v4;
  *(unsigned char *)(v10 + 33) = v5;
  uint64_t v11 = *(void (**)(uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v8 + 24);
  swift_bridgeObjectRetain();
  swift_retain();
  v11(sub_1000A4D94, v10, v9, v8);
  swift_release();
  return v6;
}

uint64_t sub_1000A3C08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_errorRetain();
    Promise.reject(_:)();
    return swift_errorRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Promise.resolve(_:)();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

void sub_1000A3CA8(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_10002EB60(&qword_1001A19C0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for LogMessage.StringInterpolation();
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  __chkstk_darwin(v11);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v13 = Strong;
    void v30[2] = a4;
    if (qword_1001A0DD0 != -1) {
      swift_once();
    }
    sub_100052538((uint64_t)&qword_1001AE2C8, (uint64_t)&v33);
    v30[1] = v36;
    v30[0] = sub_10002EC6C(&v33, v35);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CD00;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v14._object = (void *)0x800000010015CE60;
    v14._uint64_t countAndFlagsBits = 0xD000000000000012;
    LogMessage.StringInterpolation.appendLiteral(_:)(v14);
    if (a1)
    {
      *((void *)&v32 + 1) = sub_10002EB60(&qword_1001A30C8);
      *(void *)&long long v31 = a1;
    }
    else
    {
      long long v31 = 0u;
      long long v32 = 0u;
    }
    swift_bridgeObjectRetain();
    LogMessage.StringInterpolation.appendInterpolation(sensitive:)();
    sub_100034B8C((uint64_t)&v31, &qword_1001A1C50);
    v15._uint64_t countAndFlagsBits = 0;
    v15._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v15);
    LogMessage.init(stringInterpolation:)();
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v16._uint64_t countAndFlagsBits = 0x736449726566666FLL;
    v16._object = (void *)0xEA0000000000203ALL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v16);
    if (a2)
    {
      *((void *)&v32 + 1) = sub_10002EB60(&qword_1001A30C0);
      *(void *)&long long v31 = a2;
    }
    else
    {
      long long v31 = 0u;
      long long v32 = 0u;
    }
    swift_bridgeObjectRetain();
    LogMessage.StringInterpolation.appendInterpolation(sensitive:)();
    sub_100034B8C((uint64_t)&v31, &qword_1001A1C50);
    v17._uint64_t countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v17);
    LogMessage.init(stringInterpolation:)();
    Logger.debug(_:)();
    swift_bridgeObjectRelease();
    sub_10002ED08((uint64_t)&v33);
    if (a1
      && (swift_bridgeObjectRetain(),
          swift_retain(),
          uint64_t v18 = sub_1000A48E8(a1, v13),
          swift_bridgeObjectRelease(),
          swift_release(),
          v18))
    {

      sub_10002EC6C((void *)(v13 + 72), *(void *)(v13 + 96));
      dispatch thunk of AccountProvider.activeAccount.getter();
      uint64_t v19 = type metadata accessor for Account();
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v9, 1, v19) == 1)
      {
        sub_100034B8C((uint64_t)v9, &qword_1001A19C0);
        uint64_t v21 = 0;
      }
      else
      {
        swift_getKeyPath();
        Account.subscript.getter();
        swift_release();
        uint64_t v21 = v33;
        (*(void (**)(char *, uint64_t))(v20 + 8))(v9, v19);
      }
      uint64_t v25 = *(void **)(v13 + 128);
      *(void *)(v13 + 128) = v21;
      char v26 = *(unsigned char *)(v13 + 136);
      *(unsigned char *)(v13 + 136) = 2;
      sub_100067164(v25, v26);
      id v27 = v21;
      sub_100067184(v25, v26);
      sub_1000A2298((uint64_t)v25, v26);
    }
    else
    {
      if (a2
        && (uint64_t v22 = *(void *)(v13 + 24)) != 0
        && (uint64_t v23 = *(void *)(v13 + 16),
            swift_bridgeObjectRetain(),
            LOBYTE(v23) = sub_1000A4748(a2, v23, v22),
            swift_bridgeObjectRelease(),
            (v23 & 1) != 0))
      {
        uint64_t v24 = 2;
      }
      else
      {
        uint64_t v24 = 1;
      }
      uint64_t v25 = *(void **)(v13 + 128);
      *(void *)(v13 + 128) = v24;
      char v26 = *(unsigned char *)(v13 + 136);
      *(unsigned char *)(v13 + 136) = 0;
      sub_100067164(v25, v26);
      sub_100067184(v25, v26);
      sub_1000A2298((uint64_t)v25, v26);
    }
    sub_100067184(v25, v26);
    uint64_t v28 = *(void **)(v13 + 128);
    char v29 = *(unsigned char *)(v13 + 136);
    uint64_t v33 = v28;
    char v34 = v29;
    sub_100067164(v28, v29);
    Promise.resolve(_:)();
    swift_release();
    sub_100067184(v28, v29);
  }
}

uint64_t sub_1000A4228()
{
  uint64_t v0 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v0 - 8);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = *(void **)(Strong + 128);
    *(void *)(Strong + 128) = 1;
    char v3 = *(unsigned char *)(Strong + 136);
    *(unsigned char *)(Strong + 136) = 3;
    sub_100067164(v2, v3);
    sub_100067184(v2, v3);
    sub_1000A2298((uint64_t)v2, v3);
    sub_100067184(v2, v3);
    swift_release();
  }
  if (qword_1001A0DD0 != -1) {
    swift_once();
  }
  sub_100052538((uint64_t)&qword_1001AE2C8, (uint64_t)v10);
  sub_10002EC6C(v10, v10[3]);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v4._object = (void *)0x800000010015CE10;
  v4._uint64_t countAndFlagsBits = 0xD000000000000029;
  LogMessage.StringInterpolation.appendLiteral(_:)(v4);
  swift_getErrorValue();
  v9[3] = v8;
  char v5 = sub_100031A88(v9);
  (*(void (**)(uint64_t *))(*(void *)(v8 - 8) + 16))(v5);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)v9, &qword_1001A1C50);
  v6._uint64_t countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v6);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  sub_10002ED08((uint64_t)v10);
  return Promise.reject(_:)();
}

void *sub_1000A44F4()
{
  Swift::String v1 = *(void **)(v0 + 128);
  sub_100067164(v1, *(unsigned char *)(v0 + 136));
  return v1;
}

uint64_t sub_1000A4530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A3680(a1, a2, a3);
}

uint64_t sub_1000A4538(uint64_t *a1)
{
  return sub_1000A3B24(a1, v1);
}

uint64_t sub_1000A4540()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A4578()
{
  return sub_1000A4D38((void (*)(void))&_swift_release, 40);
}

void sub_1000A4594(unint64_t a1, unint64_t a2)
{
  sub_1000A3CA8(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1000A45A0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A45D8(void *a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*a1, a1[1]);
}

uint64_t sub_1000A4608()
{
  return sub_1000A4D38((void (*)(void))&_swift_release, 40);
}

uint64_t sub_1000A4624()
{
  return sub_1000A4228();
}

uint64_t sub_1000A4630()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000A4668(uint64_t a1)
{
  return sub_1000A39B4(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1000A4678(uint64_t a1)
{
  return sub_1000A3840(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1000A4688(uint64_t a1)
{
  return sub_1000A371C(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1000A4698()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000A46D8(uint64_t a1, char a2, char a3, uint64_t a4)
{
  return sub_1000A3348(a1, a2, a3, a4, *(unsigned char *)(v4 + 16), *(void **)(v4 + 24), *(void *)(v4 + 32));
}

unint64_t sub_1000A46E8()
{
  unint64_t result = qword_1001A13A0;
  if (!qword_1001A13A0)
  {
    type metadata accessor for Code(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A13A0);
  }
  return result;
}

uint64_t sub_1000A4740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000A35E4(a1, a2, a3, a4);
}

uint64_t sub_1000A4748(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v7 = a1;
  if (a1 >> 62)
  {
LABEL_20:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8)
    {
LABEL_3:
      uint64_t v22 = v4;
      unint64_t v23 = v7;
      unint64_t v24 = v7 & 0xC000000000000001;
      uint64_t v9 = 4;
      while (1)
      {
        uint64_t v10 = v9 - 4;
        if (v24)
        {
          id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v4 = v9 - 3;
          if (__OFADD__(v10, 1)) {
            goto LABEL_19;
          }
        }
        else
        {
          id v11 = *(id *)(v7 + 8 * v9);
          uint64_t v4 = v9 - 3;
          if (__OFADD__(v10, 1))
          {
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
        }
        uint64_t v12 = v8;
        uint64_t v13 = v11;
        uint64_t v14 = a3;
        id v15 = objc_msgSend(v11, "stringValue", v22);
        uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v18 = v17;

        a3 = v14;
        BOOL v19 = v16 == a2 && v18 == v14;
        if (v19)
        {
          swift_bridgeObjectRelease();

          char v20 = 1;
          goto LABEL_22;
        }
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        if ((v20 & 1) == 0)
        {
          ++v9;
          uint64_t v8 = v12;
          BOOL v19 = v4 == v12;
          unint64_t v7 = v23;
          if (!v19) {
            continue;
          }
        }
        goto LABEL_22;
      }
    }
  }
  char v20 = 0;
LABEL_22:
  swift_bridgeObjectRelease();
  return v20 & 1;
}

char *sub_1000A48E8(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10002EB60((uint64_t *)&unk_1001A50C0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (void (**)(void, void))type metadata accessor for Date();
  uint64_t v10 = (char *)*(v9 - 1);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (uint64_t)v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v42 = (char *)v35 - v14;
  if (a1 >> 62)
  {
LABEL_26:
    swift_bridgeObjectRetain();
    uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
    if (v43) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v43 = v15;
    if (v15)
    {
LABEL_3:
      uint64_t v38 = v13;
      uint64_t v39 = v9;
      v35[1] = v3;
      unint64_t v45 = a1;
      unint64_t v46 = a1 & 0xC000000000000001;
      uint64_t v40 = (void (**)(void, uint64_t, uint64_t, void))(v10 + 56);
      uint64_t v41 = v8;
      uint64_t v36 = (unsigned int (**)(uint64_t, uint64_t, void))(v10 + 48);
      uint64_t v37 = (void (**)(char *, uint64_t, void (**)(void, void)))(v10 + 32);
      uint64_t v3 = *(void *)(a2 + 24);
      uint64_t v44 = *(void *)(a2 + 16);
      void v35[2] = v10 + 8;
      uint64_t v13 = 4;
      a2 = v43;
      uint64_t v47 = v3;
      uint64_t v9 = (void (**)(void, void))(v10 + 8);
      do
      {
        if (v46) {
          uint64_t v16 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          uint64_t v16 = (char *)*(id *)(a1 + 8 * v13);
        }
        uint64_t v10 = v16;
        uint64_t v8 = (char *)(v13 - 3);
        if (__OFADD__(v13 - 4, 1))
        {
          __break(1u);
          goto LABEL_26;
        }
        if (v3)
        {
          id v17 = [v16 familyID];
          id v18 = [v17 stringValue];

          uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v21 = v20;

          if (v19 == v44 && v47 == v21)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v23 & 1) == 0) {
              goto LABEL_4;
            }
          }
          id v24 = [v10 expiryDate];
          if (!v24)
          {
            uint64_t v28 = (uint64_t)v41;
            (*v40)(v41, 1, 1, v39);
LABEL_23:
            sub_100034B8C(v28, (uint64_t *)&unk_1001A50C0);
LABEL_24:
            swift_bridgeObjectRelease();
            return v10;
          }
          uint64_t v25 = v24;
          uint64_t v26 = v38;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          id v27 = *v37;
          uint64_t v28 = (uint64_t)v41;
          char v29 = v39;
          (*v37)(v41, v26, v39);
          (*v40)(v28, 0, 1, v29);
          if ((*v36)(v28, 1, v29) == 1) {
            goto LABEL_23;
          }
          uint64_t v30 = v42;
          v27(v42, v28, v29);
          Date.init()();
          char v31 = static Date.> infix(_:_:)();
          long long v32 = (void (*)(char *, void))*v9;
          (*v9)(v26, v29);
          uint64_t v33 = v30;
          a2 = v43;
          v32(v33, v29);
          if (v31) {
            goto LABEL_24;
          }
        }
LABEL_4:

        ++v13;
        a1 = v45;
        uint64_t v3 = v47;
      }
      while (v8 != (char *)a2);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

const char *sub_1000A4D08()
{
  return "ams_DSID";
}

uint64_t sub_1000A4D1C()
{
  return sub_1000A4D38((void (*)(void))&_swift_bridgeObjectRelease, 34);
}

uint64_t sub_1000A4D38(void (*a1)(void), uint64_t a2)
{
  swift_release();
  a1(*(void *)(v2 + 24));

  return _swift_deallocObject(v2, a2, 7);
}

uint64_t sub_1000A4D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A3C08(a1, a2, a3);
}

uint64_t destroy for ASDArcadeSubscriptionManager.EntitlementsResult()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s19appstorecomponentsd28ASDArcadeSubscriptionManagerC18EntitlementsResultVwCP_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ASDArcadeSubscriptionManager.EntitlementsResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  return a1;
}

uint64_t initializeWithTake for ASDArcadeSubscriptionManager.EntitlementsResult(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t assignWithTake for ASDArcadeSubscriptionManager.EntitlementsResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ASDArcadeSubscriptionManager.EntitlementsResult(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 10)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ASDArcadeSubscriptionManager.EntitlementsResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 10) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 10) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ASDArcadeSubscriptionManager.EntitlementsResult()
{
  return &type metadata for ASDArcadeSubscriptionManager.EntitlementsResult;
}

void *sub_1000A4F74(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    unint64_t result = &_swiftEmptyArrayStorage;
    if (!v2) {
      break;
    }
    unint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v5 = *(id *)(a1 + 8 * v4 + 32);
      }
      uint64_t v6 = v5;
      ++v4;
      id v7 = [v5 numberValue];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v2 == v4) {
        return &_swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1000A50B8()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    id v2 = objc_retain(*(id *)(Strong
                           + OBJC_IVAR____TtCV19appstorecomponentsd19ASDDeviceAppFetcherP33_602223BA61A39827BF84AE6E0E050E1316QueryObservation_appQuery));

    swift_beginAccess();
    uint64_t v3 = (void *)swift_unknownObjectWeakLoadStrong();
    [v2 setObserver:v3];
  }
}

uint64_t sub_1000A5160(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  id v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_10002EE34(0, (unint64_t *)&unk_1001A3190);
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

unint64_t sub_1000A526C()
{
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtCV19appstorecomponentsd19ASDDeviceAppFetcherP33_602223BA61A39827BF84AE6E0E050E1316QueryObservation_appQuery));
  id v2 = [v1 description];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v5 = v4;

  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);

  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 41;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0xD00000000000001BLL;
}

uint64_t type metadata accessor for ASDDeviceAppFetcher.QueryObservation()
{
  return self;
}

uint64_t sub_1000A551C(uint64_t a1)
{
  uint64_t result = sub_1000A6338((unint64_t *)&unk_1001A3170, (void (*)(uint64_t))type metadata accessor for ASDDeviceAppFetcher.QueryObservation);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000A5574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.end.getter();
  sub_10002EE34(0, (unint64_t *)&unk_1001A3180);
  uint64_t v13 = (void *)static OS_os_log.default.getter();
  os_signpost(_:dso:log:name:signpostID:)();

  if (qword_1001A0E18 != -1) {
    swift_once();
  }
  uint64_t v14 = (void *)swift_allocObject();
  uint64_t v15 = v19;
  v14[2] = a2;
  void v14[3] = v15;
  void v14[4] = a1;
  aBlock[4] = sub_1000A5E60;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000C1A88;
  id aBlock[3] = &unk_100186930;
  uint64_t v16 = _Block_copy(aBlock);
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v21 = _swiftEmptyArrayStorage;
  sub_1000A6338((unint64_t *)&qword_1001A2888, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10002EB60((uint64_t *)&unk_1001A31A0);
  sub_1000A5E6C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v20);
  return swift_release();
}

uint64_t sub_1000A58BC(uint64_t a1)
{
  if (!a1) {
    return Promise.resolve(_:)();
  }
  swift_errorRetain();
  Promise.reject(_:)();

  return swift_errorRelease();
}

uint64_t sub_1000A593C(unint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for OSSignpostID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v8 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  uint64_t v10 = &v20[-v9];
  if (a2)
  {
    if (a2 != 1)
    {
      id v13 = [self queryForStoreApps];
      goto LABEL_7;
    }
    swift_bridgeObjectRetain();
    v11.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v12 = [self queryForBundleIDs:v11.super.isa];
  }
  else
  {
    sub_1000A4F74(a1);
    sub_10002EE34(0, (unint64_t *)&qword_1001A1CF0);
    v11.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v12 = [self queryForStoreItemIDs:v11.super.isa];
  }
  id v13 = v12;

LABEL_7:
  sub_10002EB60(&qword_1001A2B40);
  uint64_t v14 = Promise.__allocating_init()();
  sub_10002EE34(0, (unint64_t *)&unk_1001A3180);
  static OS_os_log.default.getter();
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  uint64_t v15 = (void *)static OS_os_log.default.getter();
  os_signpost(_:dso:log:name:signpostID:)();

  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 16))(v8, v10, v4);
  unint64_t v16 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v17 = swift_allocObject();
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v5 + 32))(v17 + v16, v8, v4);
  *(void *)(v17 + ((v6 + v16 + 7) & 0xFFFFFFFFFFFFFFF8)) = v14;
  aBlock[4] = sub_1000A5D54;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A5160;
  id aBlock[3] = &unk_1001868E0;
  uint64_t v18 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v13 executeQueryWithResultHandler:v18];
  _Block_release(v18);

  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v10, v4);
  return v14;
}

uint64_t sub_1000A5CB0()
{
  uint64_t v1 = type metadata accessor for OSSignpostID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1000A5D54(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for OSSignpostID() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_1000A5574(a1, a2, v2 + v6, v7);
}

uint64_t sub_1000A5E00(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000A5E10()
{
  return swift_release();
}

uint64_t sub_1000A5E18()
{
  swift_errorRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000A5E60()
{
  return sub_1000A58BC(*(void *)(v0 + 16));
}

unint64_t sub_1000A5E6C()
{
  unint64_t result = qword_1001A2890;
  if (!qword_1001A2890)
  {
    sub_10002ED58((uint64_t *)&unk_1001A31A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A2890);
  }
  return result;
}

id sub_1000A5EC8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, uint64_t a7)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v25[3] = a6;
  v25[4] = a7;
  uint64_t v15 = sub_100031A88(v25);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(v15, a2, a6);
  *(void *)&a5[OBJC_IVAR____TtCV19appstorecomponentsd19ASDDeviceAppFetcherP33_602223BA61A39827BF84AE6E0E050E1316QueryObservation_appQuery] = a1;
  sub_100052538((uint64_t)v25, (uint64_t)&a5[OBJC_IVAR____TtCV19appstorecomponentsd19ASDDeviceAppFetcherP33_602223BA61A39827BF84AE6E0E050E1316QueryObservation_taskScheduler]);
  unint64_t v16 = &a5[OBJC_IVAR____TtCV19appstorecomponentsd19ASDDeviceAppFetcherP33_602223BA61A39827BF84AE6E0E050E1316QueryObservation_observer];
  *(void *)unint64_t v16 = a3;
  *((void *)v16 + 1) = a4;
  v24.receiver = a5;
  v24.super_class = ObjectType;
  id v17 = a1;
  swift_retain();
  id v18 = objc_msgSendSuper2(&v24, "init");
  uint64_t v19 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = sub_10008742C;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A5160;
  id aBlock[3] = &unk_100186980;
  uint64_t v20 = _Block_copy(aBlock);
  id v21 = v18;
  swift_release();
  [v17 executeQueryWithResultHandler:v20];

  _Block_release(v20);
  sub_10002ED08((uint64_t)v25);
  return v21;
}

id sub_1000A608C(unint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v28 = a7;
  uint64_t v12 = *(void *)(a6 - 8);
  uint64_t v13 = __chkstk_darwin(a1);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  id v17 = (char *)&v27 - v16;
  id v18 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v18((char *)&v27 - v16, v19, v20);
  if (a2)
  {
    if (a2 != 1)
    {
      id v23 = [self queryForStoreApps];
      goto LABEL_7;
    }
    swift_bridgeObjectRetain();
    v21.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v22 = [self queryForBundleIDs:v21.super.isa];
  }
  else
  {
    sub_1000A4F74(a1);
    sub_10002EE34(0, (unint64_t *)&qword_1001A1CF0);
    v21.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v22 = [self queryForStoreItemIDs:v21.super.isa];
  }
  id v23 = v22;

LABEL_7:
  objc_super v24 = (char *)objc_allocWithZone((Class)type metadata accessor for ASDDeviceAppFetcher.QueryObservation());
  v18(v15, (uint64_t)v17, a6);
  swift_retain();
  id v25 = sub_1000A5EC8(v23, (uint64_t)v15, a4, a5, v24, a6, v28);

  swift_release();
  sub_1000A6338((unint64_t *)&unk_1001A31B0, (void (*)(uint64_t))type metadata accessor for ASDDeviceAppFetcher.QueryObservation);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v17, a6);
  return v25;
}

uint64_t sub_1000A6338(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000A6380()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A63B8()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000A63F8()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

ValueMetadata *type metadata accessor for ASDDeviceAppFetcher()
{
  return &type metadata for ASDDeviceAppFetcher;
}

id sub_1000A6448(void *a1, void (**a2)(char *, uint64_t), char *a3, int a4)
{
  int v99 = a4;
  Swift::String v109 = a2;
  id v110 = a3;
  uint64_t v5 = sub_10002EB60(&qword_1001A44F0);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  Swift::String v103 = (char *)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  Swift::String v102 = (char *)&v88 - v8;
  uint64_t v9 = type metadata accessor for State();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  Swift::String v101 = (char *)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v100 = (char *)&v88 - v14;
  __chkstk_darwin(v13);
  id v107 = (char *)&v88 - v15;
  uint64_t v16 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v16 - 8);
  id v18 = (char *)&v88 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for OSLogger();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  id v22 = (char *)&v88 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0E68 != -1) {
    swift_once();
  }
  uint64_t v23 = sub_10002F6AC(v19, (uint64_t)qword_1001AE380);
  objc_super v24 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  uint64_t v96 = v23;
  uint64_t v97 = v20 + 16;
  unint64_t v95 = v24;
  ((void (*)(char *))v24)(v22);
  uint64_t v25 = sub_10002EB60((uint64_t *)&unk_1001A19E0);
  uint64_t v26 = *(void *)(type metadata accessor for LogMessage() - 8);
  uint64_t v27 = *(unsigned __int8 *)(v26 + 80);
  uint64_t v28 = (v27 + 32) & ~v27;
  uint64_t v29 = v28 + *(void *)(v26 + 72);
  uint64_t v94 = v25;
  uint64_t v92 = v29;
  uint64_t v91 = v27 | 7;
  uint64_t v30 = swift_allocObject();
  long long v90 = xmmword_10014CED0;
  *(_OWORD *)(v30 + 16) = xmmword_10014CED0;
  uint64_t v93 = v28;
  uint64_t v106 = v30 + v28;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v31._uint64_t countAndFlagsBits = 0xD000000000000017;
  v31._object = (void *)0x800000010015D010;
  uint64_t v108 = v19;
  long long v32 = v22;
  LogMessage.StringInterpolation.appendLiteral(_:)(v31);
  id v105 = a1;
  id v33 = [a1 id];
  uint64_t v89 = sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
  uint64_t v112 = v89;
  v111[0] = (uint64_t)v33;
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)v111, &qword_1001A1C50);
  v34._uint64_t countAndFlagsBits = 0x74617473206E6920;
  v34._object = (void *)0xEA00000000002065;
  LogMessage.StringInterpolation.appendLiteral(_:)(v34);
  uint64_t v112 = v9;
  uint64_t v35 = sub_100031A88(v111);
  uint64_t v36 = v9;
  uint64_t v37 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v38 = v110;
  v37(v35, (uint64_t)v110, v9);
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_100034B8C((uint64_t)v111, &qword_1001A1C50);
  v39._uint64_t countAndFlagsBits = 0x20646E6120;
  v39._object = (void *)0xE500000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v39);
  uint64_t v112 = sub_10002EE34(0, &qword_1001A21D0);
  v111[0] = (uint64_t)v109;
  long long v104 = v109;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_100034B8C((uint64_t)v111, &qword_1001A1C50);
  v40._uint64_t countAndFlagsBits = 0x747865746E6F6320;
  v40._object = (void *)0xE800000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v40);
  uint64_t v88 = v18;
  LogMessage.init(stringInterpolation:)();
  uint64_t v41 = v108;
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  uint64_t v42 = *(void (**)(char *, uint64_t))(v20 + 8);
  uint64_t v98 = v32;
  uint64_t v43 = v32;
  uint64_t v44 = (void (*)(char *, char *, uint64_t))v37;
  uint64_t v106 = v20 + 8;
  v42(v43, v41);
  unint64_t v45 = v107;
  v37((uint64_t *)v107, (uint64_t)v38, v9);
  int v46 = (*(uint64_t (**)(char *, uint64_t))(v10 + 88))(v45, v9);
  Swift::String v109 = (void (**)(char *, uint64_t))v10;
  if (v46 == enum case for State.purchased(_:))
  {
    uint64_t v47 = v42;
    long long v48 = v101;
    v44(v101, v45, v9);
    (*(void (**)(char *, uint64_t))(v10 + 96))(v48, v9);
    uint64_t v49 = type metadata accessor for AppPurchaseType();
    uint64_t v50 = *(void *)(v49 - 8);
    uint64_t v51 = (void (**)(char *, uint64_t))v10;
    if ((*(unsigned int (**)(char *, uint64_t))(v50 + 88))(v48, v49) != enum case for AppPurchaseType.preorder(_:))
    {
      (*(void (**)(char *, uint64_t))(v50 + 8))(v48, v49);
      uint64_t v42 = v47;
LABEL_6:
      if ((v99 & 1) == 0)
      {
        uint64_t v80 = v98;
        uint64_t v81 = v108;
        v95(v98, v96, v108);
        uint64_t v82 = swift_allocObject();
        Swift::String v109 = (void (**)(char *, uint64_t))v42;
        *(_OWORD *)(v82 + 16) = v90;
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
        v83._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
        v83._object = (void *)0x800000010015D030;
        LogMessage.StringInterpolation.appendLiteral(_:)(v83);
        id v84 = v105;
        id v85 = [v105 id];
        uint64_t v112 = v89;
        v111[0] = (uint64_t)v85;
        LogMessage.StringInterpolation.appendInterpolation(safe:)();
        sub_100034B8C((uint64_t)v111, &qword_1001A1C50);
        v86._uint64_t countAndFlagsBits = 0xD000000000000029;
        v86._object = (void *)0x800000010015D050;
        LogMessage.StringInterpolation.appendLiteral(_:)(v86);
        LogMessage.init(stringInterpolation:)();
        Logger.error(_:)();

        swift_bridgeObjectRelease();
        unint64_t v87 = (void (*)(uint64_t, uint64_t))v51[1];
        v87((uint64_t)v110, v36);
        ((void (*)(char *, uint64_t))v109)(v80, v81);
        v87((uint64_t)v45, v36);
        return 0;
      }
      id v52 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
      uint64_t v53 = v51;
      id v54 = v52;
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  if (v46 != enum case for State.updatable(_:))
  {
    if (v46 != enum case for State.downloadable(_:))
    {
      uint64_t v51 = v109;
      if (v46 == enum case for State.buyable(_:) || v46 == enum case for State.unknown(_:))
      {
        uint64_t v57 = v109[1];
        v57(v45, v36);
        id v54 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
        goto LABEL_14;
      }
      goto LABEL_6;
    }
    uint64_t v58 = v100;
    v37((uint64_t *)v100, (uint64_t)v45, v9);
    uint64_t v51 = v109;
    v109[12](v58, v36);
    swift_bridgeObjectRelease();
LABEL_13:
    uint64_t v57 = v51[1];
    v57(v45, v36);
    id v54 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
    [v54 setIsRedownload:1];
    goto LABEL_14;
  }
  uint64_t v55 = v100;
  v37((uint64_t *)v100, (uint64_t)v45, v9);
  char v56 = v109;
  v109[12](v55, v9);
  swift_bridgeObjectRelease();
  id v54 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  [v54 setIsUpdate:1];
  uint64_t v53 = v56;
LABEL_10:
  uint64_t v57 = v53[1];
  v57(v45, v36);
LABEL_14:
  id v59 = v105;
  sub_100073184();
  NSString v60 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v54 setBuyParameters:v60];

  Class isa = (Class)[v59 additionalHeaders];
  uint64_t v62 = (uint64_t)v102;
  if (isa)
  {
    uint64_t v63 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000A72A0(v63);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  uint64_t v64 = (uint64_t)v103;
  [v54 setAdditionalHeaders:isa];

  id v65 = [v59 preflightPackageURL];
  if (v65)
  {
    id v66 = v65;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v67 = type metadata accessor for URL();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v64, 0, 1, v67);
  }
  else
  {
    uint64_t v67 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v64, 1, 1, v67);
  }
  sub_1000A7A28(v64, v62);
  type metadata accessor for URL();
  uint64_t v68 = *(void *)(v67 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v62, 1, v67) == 1)
  {
    sub_100034B8C(v62, &qword_1001A44F0);
    NSString v69 = 0;
  }
  else
  {
    URL.absoluteString.getter();
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v62, v67);
    NSString v69 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v54 setPreflightURLString:v69];

  NSString v70 = [v59 bundleID];
  if (!v70)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v70 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v54 setBundleID:v70];

  id v71 = [v59 id];
  id v72 = [v71 numberValue];

  [v54 setItemID:v72];
  NSString v73 = [v59 itemName];
  if (!v73)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v73 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v54 setItemName:v73];

  NSString v74 = [v59 vendorName];
  if (!v74)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v74 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v54 setVendorName:v74];

  objc_msgSend(v54, "setCreatesJobs:", ((unint64_t)objc_msgSend(v59, "flags") >> 1) & 1);
  NSString v75 = String._bridgeToObjectiveC()();
  [v54 setClientID:v75];

  if ([v59 flags]) {
    [v54 setExtensionsToEnable:1];
  }
  if (([v59 flags] & 0x20) != 0) {
    [v54 setForceWatchInstall:1];
  }
  id v76 = [v59 capabilities];
  [v54 setAppCapabilities:v76];

  unsigned __int16 v77 = (unsigned __int16)[v59 flags];
  Class v78 = v104;
  if ((v77 & 0x200) != 0 || [v104 supportsDSIDLessInstall]) {
    [v54 setIsDSIDLess:1];
  }

  v57(v110, v36);
  return v54;
}

uint64_t sub_1000A72A0(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10002EB60(&qword_1001A22B8);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (void *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v18 = v17[1];
    *(void *)&v36[0] = *v17;
    *((void *)&v36[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    swift_dynamicCast();
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    sub_100042EA8(&v31, v35);
    long long v28 = v32;
    long long v29 = v33;
    uint64_t v30 = v34;
    sub_100042EA8(v35, v36);
    sub_100042EA8(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v19 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)&v6[8 * v21];
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)sub_100042EA8(&v32, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    sub_100034EF8();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1000A7660(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10002EB60(&qword_1001A22B8);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    sub_100042EB8(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(void *)&long long v39 = v19;
    *((void *)&v39 + 1) = v18;
    v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(void *)&v37[0] = v19;
    *((void *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_100042EA8(v38, v32);
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    sub_100042EA8(v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    sub_100042EA8(v36, v37);
    sub_100042EA8(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v20 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)])) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)&v6[8 * v22];
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)sub_100042EA8(&v33, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_100034EF8();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1000A7A28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A44F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A7A90(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for OSSignpostID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = __chkstk_darwin(v4);
  int64_t v8 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)aBlock - v9;
  sub_10002EB60(&qword_1001A21A0);
  uint64_t v11 = Promise.__allocating_init()();
  sub_10002EE34(0, (unint64_t *)&unk_1001A3180);
  static OS_os_log.default.getter();
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  unint64_t v12 = (void *)static OS_os_log.default.getter();
  os_signpost(_:dso:log:name:signpostID:)();

  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
  unint64_t v13 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v14 + v13, v8, v4);
  *(void *)(v14 + ((v6 + v13 + 7) & 0xFFFFFFFFFFFFFFF8)) = v11;
  aBlock[4] = sub_1000A9200;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A8768;
  id aBlock[3] = &unk_100186B90;
  int64_t v15 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v2 updateWithContext:a1 withCompletionHandler:v15];
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  return v11;
}

uint64_t sub_1000A7D18(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  int64_t v8 = (char *)v17 - v7;
  sub_10002EB60(&qword_1001A5E50);
  uint64_t v9 = Promise.__allocating_init()();
  sub_10002EE34(0, (unint64_t *)&unk_1001A3180);
  static OS_os_log.default.getter();
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  uint64_t v10 = (void *)static OS_os_log.default.getter();
  os_signpost(_:dso:log:name:signpostID:)();

  id v11 = sub_1000A8B90(a1);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v13 = (v4 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v14 + v12, v6, v2);
  *(void *)(v14 + v13) = v9;
  aBlock[4] = sub_1000A9004;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A87D4;
  id aBlock[3] = &unk_100186AF0;
  int64_t v15 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v17[1] executeQuery:v11 withResultHandler:v15];
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  return v9;
}

uint64_t sub_1000A7FB8(uint64_t a1, unint64_t a2)
{
  v18[0] = a2;
  uint64_t v3 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v18 - v8;
  sub_10002EB60(&qword_1001A5E50);
  uint64_t v10 = Promise.__allocating_init()();
  sub_10002EE34(0, (unint64_t *)&unk_1001A3180);
  static OS_os_log.default.getter();
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  id v11 = (void *)static OS_os_log.default.getter();
  os_signpost(_:dso:log:name:signpostID:)();

  id v12 = sub_1000A8B90(a1);
  sub_1000A4F74(v18[0]);
  sub_10002EE34(0, (unint64_t *)&qword_1001A1CF0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v12 setStoreIDs:isa];

  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
  unint64_t v14 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v15 + v14, v7, v3);
  *(void *)(v15 + ((v5 + v14 + 7) & 0xFFFFFFFFFFFFFFF8)) = v10;
  aBlock[4] = sub_1000A8E4C;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A87D4;
  id aBlock[3] = &unk_100186A50;
  int64_t v16 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [(id)v18[1] executeQuery:v12 withResultHandler:v16];
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  return v10;
}

id sub_1000A82B4@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, "ams_DSID");
  *a2 = result;
  return result;
}

id sub_1000A82F0(void *a1, id *a2)
{
  return objc_msgSend(*a2, "ams_setDSID:", *a1);
}

uint64_t sub_1000A8304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a1;
  uint64_t v22 = a3;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v25 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v23 = *(void *)(v7 - 8);
  uint64_t v24 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OSSignpostID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0E18 != -1) {
    swift_once();
  }
  v20[1] = qword_1001AE318;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v10);
  unint64_t v14 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v15 = (v12 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v16 + v14, v13, v10);
  uint64_t v17 = v22;
  *(void *)(v16 + v15) = v21;
  *(void *)(v16 + ((v15 + 15) & 0xFFFFFFFFFFFFFFF8)) = v17;
  aBlock[4] = sub_1000A9358;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000C1A88;
  id aBlock[3] = &unk_100186BE0;
  uint64_t v18 = _Block_copy(aBlock);
  swift_errorRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v26 = _swiftEmptyArrayStorage;
  sub_1000A8E90();
  sub_10002EB60((uint64_t *)&unk_1001A31A0);
  sub_1000A5E6C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v24);
  return swift_release();
}

uint64_t sub_1000A8690(uint64_t a1, uint64_t a2)
{
  static os_signpost_type_t.end.getter();
  sub_10002EE34(0, (unint64_t *)&unk_1001A3180);
  uint64_t v3 = (void *)static OS_os_log.default.getter();
  os_signpost(_:dso:log:name:signpostID:)();

  if (!a2) {
    return Promise.resolve(_:)();
  }
  swift_errorRetain();
  Promise.reject(_:)();

  return swift_errorRelease();
}

void sub_1000A8768(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t sub_1000A87D4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_10002EE34(0, &qword_1001A31C0);
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000A8878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v22 = a6;
  uint64_t v23 = a7;
  uint64_t v21 = a5;
  uint64_t v24 = a4;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  unint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.end.getter();
  sub_10002EE34(0, (unint64_t *)&unk_1001A3180);
  uint64_t v16 = (void *)static OS_os_log.default.getter();
  os_signpost(_:dso:log:name:signpostID:)();

  if (qword_1001A0E18 != -1) {
    swift_once();
  }
  uint64_t v17 = (void *)swift_allocObject();
  uint64_t v18 = v24;
  id v17[2] = a2;
  v17[3] = v18;
  v17[4] = a1;
  aBlock[4] = v22;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000C1A88;
  id aBlock[3] = v23;
  uint64_t v19 = _Block_copy(aBlock);
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v26 = _swiftEmptyArrayStorage;
  sub_1000A8E90();
  sub_10002EB60((uint64_t *)&unk_1001A31A0);
  sub_1000A5E6C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v25);
  return swift_release();
}

id sub_1000A8B90(uint64_t a1)
{
  uint64_t v2 = sub_10002EB60(&qword_1001A19C0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = [objc_allocWithZone((Class)ASDPurchaseHistoryQuery) init];
  sub_1000A8EE8(a1, (uint64_t)v4);
  uint64_t v6 = type metadata accessor for Account();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6) == 1)
  {
    sub_1000A8F50((uint64_t)v4);
LABEL_5:
    [v5 setAccountID:0];
    goto LABEL_6;
  }
  swift_getKeyPath();
  Account.subscript.getter();
  swift_release();
  uint64_t v8 = v16;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
  if (!v8) {
    goto LABEL_5;
  }
  objc_msgSend(v5, "setAccountID:", objc_msgSend(v8, "longLongValue"));

LABEL_6:
  [v5 setIsHidden:2];
  [v5 setIsFirstParty:2];
  [v5 setIsPreorder:0];
  sub_10002EB60(&qword_1001A4D70);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_10014DF90;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v10 = objc_allocWithZone((Class)ASDPurchaseHistoryQuerySortOption);
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [v10 initWithName:v11 ascending:0];

  *(void *)(v9 + 32) = v12;
  uint64_t v16 = (void *)v9;
  specialized Array._endMutation()();
  sub_10002EE34(0, &qword_1001A31C8);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v5 setSortOptions:isa];

  return v5;
}

uint64_t sub_1000A8E4C(uint64_t a1, uint64_t a2)
{
  return sub_1000A902C(a1, a2, (uint64_t)&unk_100186A88, (uint64_t)sub_1000A9418, (uint64_t)&unk_100186AA0);
}

uint64_t sub_1000A8E74(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000A8E84()
{
  return swift_release();
}

unint64_t sub_1000A8E90()
{
  unint64_t result = qword_1001A2888;
  if (!qword_1001A2888)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A2888);
  }
  return result;
}

uint64_t sub_1000A8EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A19C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A8F50(uint64_t a1)
{
  uint64_t v2 = sub_10002EB60(&qword_1001A19C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_1000A8FB0@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, "ams_DSID");
  *a2 = result;
  return result;
}

id sub_1000A8FEC(void *a1, id *a2)
{
  return objc_msgSend(*a2, "ams_setDSID:", *a1);
}

uint64_t sub_1000A9004(uint64_t a1, uint64_t a2)
{
  return sub_1000A902C(a1, a2, (uint64_t)&unk_100186B28, (uint64_t)sub_1000A9138, (uint64_t)&unk_100186B40);
}

uint64_t sub_1000A902C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = *(void *)(type metadata accessor for OSSignpostID() - 8);
  unint64_t v12 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  return sub_1000A8878(a1, a2, v5 + v12, *(void *)(v5 + ((*(void *)(v11 + 64) + v12 + 7) & 0xFFFFFFFFFFFFFFF8)), a3, a4, a5);
}

uint64_t sub_1000A90F0()
{
  swift_errorRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000A9138()
{
  return sub_1000A58BC(*(void *)(v0 + 16));
}

uint64_t sub_1000A915C()
{
  uint64_t v1 = type metadata accessor for OSSignpostID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1000A9200(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OSSignpostID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_1000A8304(a1, v1 + v4, v5);
}

uint64_t sub_1000A929C()
{
  uint64_t v1 = type metadata accessor for OSSignpostID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_errorRelease();
  swift_release();

  return _swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1000A9358()
{
  uint64_t v1 = *(void *)(type metadata accessor for OSSignpostID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_1000A8690(v0 + v2, v3);
}

BOOL sub_1000A953C()
{
  v0._uint64_t countAndFlagsBits = 0x7256747845707061;
  v0._object = (void *)0xEB00000000644973;
  return !String.hasPrefix(_:)(v0);
}

unint64_t sub_1000A957C()
{
  unint64_t result = qword_1001A31D8;
  if (!qword_1001A31D8)
  {
    sub_10002ED58(&qword_1001A31D0);
    sub_1000A95F0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A31D8);
  }
  return result;
}

unint64_t sub_1000A95F0()
{
  unint64_t result = qword_1001A2580;
  if (!qword_1001A2580)
  {
    sub_10002ED58((uint64_t *)&unk_1001A45C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A2580);
  }
  return result;
}

uint64_t sub_1000A964C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[16] = a2;
  v3[17] = a3;
  v3[15] = a1;
  return _swift_task_switch(sub_1000A9670, 0, 0);
}

uint64_t sub_1000A9670()
{
  uint64_t v2 = v0[16];
  uint64_t v1 = v0[17];
  uint64_t v3 = v0[15];
  uint64_t v4 = self;
  v0[2] = v0;
  v0[7] = v3;
  v0[3] = sub_1000A978C;
  uint64_t v5 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10008EB8C;
  v0[13] = &unk_100186C48;
  v0[14] = v5;
  [v4 installApp:v2 onPairedDevice:v1 withCompletionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000A978C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 144) = v2;
  if (v2)
  {
    return _swift_task_switch(sub_1000A98C8, 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
    return v3();
  }
}

uint64_t sub_1000A98C8()
{
  swift_willThrow();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000A9934(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *v6;
  if (a4) {
    NSString v12 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v12 = 0;
  }
  void v15[4] = a5;
  void v15[5] = a6;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  _OWORD v15[2] = sub_1000A9A28;
  uint64_t v15[3] = &unk_100186CD0;
  uint64_t v13 = _Block_copy(v15);
  swift_retain();
  [v11 getSubscriptionEntitlementsForSegment:a1 ignoreCaches:a2 & 1 requestingBundleId:v12 withCacheInfoResultHandler:v13];
  _Block_release(v13);

  return swift_release();
}

uint64_t sub_1000A9A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = a2;
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_10002EE34(0, qword_1001A31E8);
    uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v10 = a5;
  v9(v8, a3, a4, a5);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000A9AE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *v3;
  void v8[4] = a2;
  void v8[5] = a3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_1000A9BA4;
  v8[3] = &unk_100186CA8;
  unint64_t v6 = _Block_copy(v8);
  swift_retain();
  [v5 getCachedSubscriptionEntitlementsForSegment:a1 withResultHandler:v6];
  _Block_release(v6);
  return swift_release();
}

uint64_t sub_1000A9BA4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_1000A9C80(a1, a2, a3, a4, qword_1001A31E8);
}

uint64_t sub_1000A9BB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  void v6[4] = a1;
  v6[5] = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  v6[2] = sub_1000A9C6C;
  v6[3] = &unk_100186C80;
  uint64_t v4 = _Block_copy(v6);
  swift_retain();
  [v3 getAppStoreConsumedIntroOfferFamilyIdsWithResultHandler:v4];
  _Block_release(v4);
  return swift_release();
}

uint64_t sub_1000A9C6C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_1000A9C80(a1, a2, a3, a4, (unint64_t *)&qword_1001A1CF0);
}

uint64_t sub_1000A9C80(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unint64_t *a5)
{
  uint64_t v7 = a2;
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_10002EE34(0, a5);
    uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v9 = a4;
  v8(v7, a3, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000A9D24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000A9D34()
{
  return swift_release();
}

uint64_t sub_1000A9D50()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

id *sub_1000A9DF4()
{
  unint64_t v1 = (char *)v0 + *((void *)*v0 + 12);
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_1000A9E84()
{
  sub_1000A9DF4();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AsyncExpensive()
{
  return sub_1000A9EF4();
}

uint64_t sub_1000A9EF4()
{
  return swift_getGenericMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for AvailableUpdate(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for AvailableUpdate()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for AvailableUpdate(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AvailableUpdate(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AvailableUpdate(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AvailableUpdate(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AvailableUpdate()
{
  return &type metadata for AvailableUpdate;
}

Swift::Int sub_1000AA084()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1000AA0F8()
{
  Hasher._combine(_:)(*v0);
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000AA15C()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1000AA1CC(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  if (a1[1] == a2[1] && a1[2] == a2[2]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

unint64_t sub_1000AA218()
{
  unint64_t result = qword_1001A3270;
  if (!qword_1001A3270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A3270);
  }
  return result;
}

uint64_t sub_1000AA270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_100034B8C(a1, &qword_1001A2450);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1000AA41C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_100034B8C(a1, &qword_1001A2450);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_1000AA5A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_100034B8C(a1, &qword_1001A2450);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  sub_10002EE34(0, &qword_1001A34C0);
  return swift_task_create();
}

uint64_t sub_1000AA738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_100034B8C(a1, &qword_1001A2450);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  sub_10002EB60(&qword_1001A34B0);
  return swift_task_create();
}

unint64_t sub_1000AA8C0()
{
  unint64_t result = ASCSignpostTagCreate(0);
  qword_1001AE2F0 = result;
  return result;
}

id sub_1000AA8E4@<X0>(void *a1@<X8>)
{
  id v2 = [self currentProcess];
  id result = [v2 setAccountMediaType:AMSAccountMediaTypeProduction];
  *a1 = v2;
  return result;
}

void sub_1000AA954(void *a1@<X8>)
{
  sub_10002EE34(0, &qword_1001A3388);
  type metadata accessor for BaseObjectGraph();
  inject<A, B>(_:from:)();
  id v2 = objc_msgSend(self, "ams_sharedAccountStoreForClient:", v3);

  *a1 = v2;
}

unint64_t sub_1000AAA00@<X0>(void *a1@<X8>)
{
  return sub_10007F2D0(a1);
}

uint64_t sub_1000AAA28(uint64_t a1)
{
  sub_10002EB60(&qword_1001A2450);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002EB60(&qword_1001A34E0);
  swift_retain();
  uint64_t v4 = Promise.__allocating_init()();
  uint64_t v5 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v3, 1, 1, v5);
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = 0;
  v6[3] = 0;
  void v6[4] = &unk_1001A34D8;
  v6[5] = a1;
  void v6[6] = v4;
  swift_retain();
  sub_1000F6C04((uint64_t)v3, (uint64_t)&unk_1001A34E8, (uint64_t)v6);
  swift_release();
  return v4;
}

uint64_t sub_1000AAB60(uint64_t a1, uint64_t a2)
{
  v2[8] = a1;
  v2[9] = a2;
  type metadata accessor for JSJetPackFetcher.ScriptOrigin(0);
  v2[10] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Bag.Profile();
  v2[11] = v3;
  v2[12] = *(void *)(v3 - 8);
  v2[13] = swift_task_alloc();
  return _swift_task_switch(sub_1000AAC4C, 0, 0);
}

uint64_t sub_1000AAC4C()
{
  uint64_t v1 = v0[10];
  sub_10002EE34(0, &qword_1001A3388);
  type metadata accessor for BaseObjectGraph();
  inject<A, B>(_:from:)();
  uint64_t v2 = (void *)v0[7];
  Bag.Profile.init(name:version:)();
  Bag.Profile.name.getter();
  Bag.Profile.version.getter();
  id v3 = v2;
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [self bagForProfile:v4 profileVersion:v5 processInfo:v3];

  id v7 = v3;
  id v8 = v6;
  sub_1000DDDE4(v1);
  type metadata accessor for JSJetPackFetcher(0);
  swift_allocObject();
  uint64_t v9 = sub_1000DF630((uint64_t)v8, v7, v1);
  uint64_t v10 = v0[12];
  uint64_t v11 = v0[13];
  uint64_t v12 = v0[11];
  uint64_t v15 = (uint64_t *)v0[8];
  sub_10002EB60((uint64_t *)&unk_1001A34F0);
  AnyPipelineTask.run()();
  v0[5] = type metadata accessor for SyncTaskScheduler();
  v0[6] = &protocol witness table for SyncTaskScheduler;
  sub_100031A88(v0 + 2);
  SyncTaskScheduler.init()();
  type metadata accessor for DiskJetPackResourceBundle();
  Promise.map<A>(on:_:)();
  swift_release();
  sub_10002ED08((uint64_t)(v0 + 2));
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
  *uint64_t v15 = v9;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_1000AAF30()
{
  uint64_t v0 = type metadata accessor for Bag.Profile();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  id v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Bag.Profile.init(name:version:)();
  uint64_t v4 = static Bag.fetchBag(forProfile:wantsAutomaticUpdates:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t sub_1000AB024@<X0>(uint64_t a1@<X8>)
{
  v12[0] = a1;
  uint64_t v1 = type metadata accessor for JetEngineBootstrap.URLProtocolHandler();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Bag();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  id v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002EE34(0, &qword_1001A34C8);
  type metadata accessor for BaseObjectGraph();
  inject<A, B>(_:from:)();
  sub_10002EE34(0, &qword_1001A3388);
  inject<A, B>(_:from:)();
  uint64_t v9 = (void *)v12[3];
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for JetEngineBootstrap.URLProtocolHandler.standard(_:), v1);
  uint64_t v10 = static AMSURLSession.forJetEngineStorefront(with:for:usingProtocol:)();

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(void *)v12[0] = v10;
  return result;
}

uint64_t sub_1000AB24C@<X0>(void *a1@<X8>)
{
  sub_10002EB60(&qword_1001A2450);
  __chkstk_darwin();
  uint64_t v3 = (char *)v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Bag();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002EE34(0, (unint64_t *)&qword_1001A27A0);
  BaseObjectGraph.inject<A>(_:)();
  id v8 = (void *)v15[1];
  BaseObjectGraph.inject<A>(_:)();
  id v9 = v8;
  uint64_t v10 = Bag.amsBag.getter();
  static TaskPriority.utility.getter();
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v3, 0, 1, v11);
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  void v12[4] = v9;
  v12[5] = v10;
  id v13 = v9;
  swift_unknownObjectRetain();
  sub_1000AA5A4((uint64_t)v3, (uint64_t)&unk_1001A34B8, (uint64_t)v12);

  swift_release();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *a1 = v13;
  a1[1] = v10;
  return result;
}

uint64_t sub_1000AB46C@<X0>(uint64_t *a1@<X8>)
{
  return sub_10007045C(a1);
}

void *sub_1000AB4BC@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ASDContingentPricingSubscriptionManager();
  swift_allocObject();
  uint64_t result = sub_1000BCEC4();
  a1[3] = v2;
  a1[4] = &off_100187460;
  *a1 = result;
  return result;
}

uint64_t sub_1000AB51C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ASCMigrationDeviceAppFetcherImplementation(0);
  swift_allocObject();
  uint64_t v3 = sub_100087A5C();
  a1[3] = v2;
  uint64_t result = sub_1000B2168((unint64_t *)&unk_1001A3480, (void (*)(uint64_t))type metadata accessor for ASCMigrationDeviceAppFetcherImplementation);
  a1[4] = result;
  *a1 = v3;
  return result;
}

uint64_t sub_1000AB5B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ASCMigrationPurchaseHistoryImplementation();
  swift_allocObject();
  uint64_t v3 = sub_10008A5BC();
  a1[3] = v2;
  uint64_t result = sub_1000B2168(&qword_1001A34A8, (void (*)(uint64_t))type metadata accessor for ASCMigrationPurchaseHistoryImplementation);
  a1[4] = result;
  *a1 = v3;
  return result;
}

uint64_t sub_1000AB644@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ASCMigrationPurchaseManagerImplementation();
  swift_allocObject();
  uint64_t v3 = sub_10008CCE0();
  a1[3] = v2;
  uint64_t result = sub_1000B2168(&qword_1001A34A0, (void (*)(uint64_t))type metadata accessor for ASCMigrationPurchaseManagerImplementation);
  a1[4] = result;
  *a1 = v3;
  return result;
}

uint64_t sub_1000AB6D8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v22 = a1;
  uint64_t v21 = *(void *)(type metadata accessor for MetricsTopicProvider() - 8);
  uint64_t v1 = *(void *)(v21 + 64);
  uint64_t v2 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v19 = (uint64_t)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v17 - v3;
  uint64_t v5 = type metadata accessor for Bag();
  uint64_t v20 = *(void *)(v5 - 8);
  uint64_t v6 = v20;
  uint64_t v7 = __chkstk_darwin(v5);
  __chkstk_darwin(v7);
  id v9 = (char *)&v17 - v8;
  BaseObjectGraph.inject<A>(_:)();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v4, v9, v5);
  uint64_t v18 = type metadata accessor for AMSMetricsEventRecorder();
  type metadata accessor for BaseObjectGraph();
  inject<A, B>(_:from:)();
  MetricsTopicProvider.currentMetricsTopic.getter();
  sub_10011A7F8((uint64_t)&off_100184C58);
  swift_arrayDestroy();
  uint64_t v10 = v18;
  AMSMetricsEventRecorder.__allocating_init(bag:defaultTopic:anonymousTopics:)();
  uint64_t v11 = v19;
  sub_1000B1EE8((uint64_t)v4, v19, (uint64_t (*)(void))type metadata accessor for MetricsTopicProvider);
  unint64_t v12 = (*(unsigned __int8 *)(v21 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  uint64_t v13 = swift_allocObject();
  sub_1000B2028(v11, v13 + v12, (uint64_t (*)(void))type metadata accessor for MetricsTopicProvider);
  uint64_t v14 = AMSMetricsEventRecorder.withDecorator(_:)();
  swift_release();
  swift_release();
  uint64_t v15 = v22;
  v22[3] = v10;
  void v15[4] = (uint64_t)&protocol witness table for AMSMetricsEventRecorder;
  *uint64_t v15 = v14;
  sub_1000B2108((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for MetricsTopicProvider);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v9, v5);
}

uint64_t sub_1000AB9E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Bag();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for BaseObjectGraph();
  inject<A, B>(_:from:)();
  sub_100089720((uint64_t)v5, a1);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

id sub_1000ABAE4@<X0>(void *a1@<X8>)
{
  id result = [self daemonDefaults];
  *a1 = result;
  return result;
}

void *sub_1000ABB30@<X0>(void *a1@<X8>)
{
  return sub_10012C968(a1);
}

uint64_t sub_1000ABB80@<X0>(void *a1@<X8>)
{
  sub_10002EB60(&qword_1001A28E8);
  type metadata accessor for BaseObjectGraph();
  inject<A, B>(_:from:)();
  uint64_t v2 = sub_10002FE00((uint64_t)v17, v18);
  __chkstk_darwin(v2);
  uint64_t v4 = (void *)((char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v5 + 16))(v4);
  uint64_t v6 = *v4;
  uint64_t v7 = type metadata accessor for ASCMigrationDeviceAppFetcherImplementation(0);
  v16[3] = v7;
  void v16[4] = sub_1000B2168((unint64_t *)&unk_1001A3480, (void (*)(uint64_t))type metadata accessor for ASCMigrationDeviceAppFetcherImplementation);
  v16[0] = v6;
  uint64_t v8 = type metadata accessor for LegacyAppStoreInstallStateMonitor();
  uint64_t v9 = swift_allocObject();
  uint64_t v10 = sub_10002FE00((uint64_t)v16, v7);
  __chkstk_darwin(v10);
  unint64_t v12 = (void *)((char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v13 + 16))(v12);
  id v14 = sub_1000B1B40(*v12, v9);
  swift_release();
  sub_10002ED08((uint64_t)v16);
  uint64_t result = sub_10002ED08((uint64_t)v17);
  a1[3] = v8;
  a1[4] = &off_100188FA8;
  *a1 = v14;
  return result;
}

uint64_t sub_1000ABDC8@<X0>(void *a1@<X8>)
{
  uint64_t v2 = sub_10002EB60(&qword_1001A2450);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ASCMigrationAppStateControllerImplementation();
  swift_allocObject();
  uint64_t v6 = swift_retain();
  uint64_t v7 = sub_10007FCD0(v6);
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v4, 1, 1, v8);
  uint64_t v9 = (void *)swift_allocObject();
  void v9[2] = 0;
  v9[3] = 0;
  uint64_t v9[4] = v7;
  swift_retain();
  sub_1000AA41C((uint64_t)v4, (uint64_t)&unk_1001A3470, (uint64_t)v9);
  swift_release();
  a1[3] = v5;
  uint64_t result = sub_1000B2168(&qword_1001A3478, (void (*)(uint64_t))type metadata accessor for ASCMigrationAppStateControllerImplementation);
  a1[4] = result;
  *a1 = v7;
  return result;
}

uint64_t sub_1000ABF4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 56) = a4;
  return _swift_task_switch(sub_1000ABF6C, 0, 0);
}

uint64_t sub_1000ABF6C()
{
  uint64_t v1 = *(void *)(v0[7] + 16);
  v0[8] = v1;
  if (v1 < 0)
  {
    swift_retain();
    uint64_t v6 = (void *)swift_task_alloc();
    v0[9] = v6;
    void *v6 = v0;
    v6[1] = sub_100080BD8;
    return StorefrontAppStateController.loadDataSources()();
  }
  else
  {
    swift_retain();
    sub_1000C0B0C();
    uint64_t v2 = sub_10002EE34(0, (unint64_t *)&qword_1001A2170);
    swift_retain();
    uint64_t v3 = static OS_dispatch_queue.main.getter();
    v0[5] = v2;
    v0[6] = &protocol witness table for OS_dispatch_queue;
    v0[2] = v3;
    Promise.always(on:perform:)();
    swift_release();
    swift_release();
    swift_release();
    sub_10002ED08((uint64_t)(v0 + 2));
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

void *sub_1000AC0FC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = self;
  swift_retain();
  id v5 = [v4 defaultCenter];
  type metadata accessor for JSStackManager();
  swift_allocObject();
  uint64_t result = sub_1000F9A34(a1, v5);
  *a2 = result;
  return result;
}

uint64_t sub_1000AC190()
{
  type metadata accessor for JSStackManager();
  type metadata accessor for BaseObjectGraph();
  inject<A, B>(_:from:)();
  sub_10002EB60(&qword_1001A3460);
  OS_dispatch_queue.sync<A>(execute:)();
  v2[3] = type metadata accessor for SyncTaskScheduler();
  v2[4] = (uint64_t)&protocol witness table for SyncTaskScheduler;
  sub_100031A88(v2);
  SyncTaskScheduler.init()();
  sub_10002EB60(&qword_1001A19A0);
  uint64_t v0 = Promise.map<A>(on:_:)();
  swift_release();
  sub_10002ED08((uint64_t)v2);
  swift_release();
  return v0;
}

uint64_t sub_1000AC2A4@<X0>(char *a1@<X8>)
{
  long long v104 = a1;
  uint64_t v1 = sub_10002EB60(&qword_1001A33B0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v102 = v1;
  uint64_t v103 = v2;
  __chkstk_darwin(v1);
  Swift::String v101 = (char *)v80 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10002EB60(&qword_1001A33B8);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v98 = v4;
  uint64_t v99 = v5;
  __chkstk_darwin(v4);
  uint64_t v96 = (char *)v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10002EB60(&qword_1001A33C0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v93 = v7;
  uint64_t v94 = v8;
  __chkstk_darwin(v7);
  long long v90 = (char *)v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10002EB60((uint64_t *)&unk_1001A2160);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  id v14 = (char *)v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)v80 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)v80 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v81 = (char *)v80 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v82 = (char *)v80 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  Swift::String v83 = (char *)v80 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  id v84 = (char *)v80 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  id v85 = (char *)v80 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  Swift::String v86 = (char *)v80 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  unint64_t v87 = (char *)v80 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v108 = (char *)v80 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v88 = (char *)v80 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v89 = (char *)v80 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v91 = (char *)v80 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v92 = (char *)v80 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  unint64_t v95 = (char *)v80 - v46;
  uint64_t v47 = __chkstk_darwin(v45);
  uint64_t v97 = (char *)v80 - v48;
  __chkstk_darwin(v47);
  uint64_t v100 = (char *)v80 - v49;
  uint64_t v106 = type metadata accessor for ObjectGraph();
  ActionDispatcher.init()();
  uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v50(v17, v14, v10);
  uint64_t v51 = v50;
  sub_1000B135C();
  ActionDispatcher.add<A>(_:)();
  id v52 = *(void (**)(char *, uint64_t))(v11 + 8);
  v52(v14, v10);
  v50(v20, v17, v10);
  sub_1000B13B0();
  ActionDispatcher.add<A>(_:)();
  v52(v17, v10);
  uint64_t v53 = v81;
  v51(v81, v20, v10);
  sub_1000B1404();
  ActionDispatcher.add<A>(_:)();
  v52(v20, v10);
  id v54 = v82;
  v51(v82, v53, v10);
  sub_1000B1458();
  ActionDispatcher.add<A>(_:)();
  v52(v53, v10);
  uint64_t v55 = v83;
  v51(v83, v54, v10);
  sub_1000B14AC();
  ActionDispatcher.add<A>(_:)();
  v52(v54, v10);
  char v56 = v84;
  v51(v84, v55, v10);
  sub_100069CC8();
  ActionDispatcher.add<A>(_:)();
  v52(v55, v10);
  uint64_t v57 = v85;
  v51(v85, v56, v10);
  sub_1000B1500();
  ActionDispatcher.add<A>(_:)();
  v52(v56, v10);
  uint64_t v58 = v86;
  v51(v86, v57, v10);
  sub_1000B1554();
  ActionDispatcher.add<A>(_:)();
  v52(v57, v10);
  id v105 = v52;
  v80[2] = v11 + 8;
  id v59 = v87;
  v51(v87, v58, v10);
  v80[1] = v11 + 16;
  sub_1000B15A8();
  ActionDispatcher.add<A>(_:)();
  v52(v58, v10);
  v107[3] = type metadata accessor for SyncTaskScheduler();
  v107[4] = (uint64_t)&protocol witness table for SyncTaskScheduler;
  sub_100031A88(v107);
  SyncTaskScheduler.init()();
  NSString v60 = v90;
  ClosureActionImplementation.init(scheduler:)();
  uint64_t v61 = v108;
  v51(v108, v59, v10);
  sub_100061D9C(&qword_1001A3410, &qword_1001A33C0);
  uint64_t v62 = v93;
  ActionDispatcher.add<A>(_:)();
  (*(void (**)(char *, uint64_t))(v94 + 8))(v60, v62);
  uint64_t v63 = v59;
  uint64_t v64 = v105;
  v105(v63, v10);
  id v65 = v96;
  CompoundActionImplementation.init()();
  id v66 = v88;
  v51(v88, v61, v10);
  sub_100061D9C(&qword_1001A3418, &qword_1001A33B8);
  uint64_t v67 = v98;
  ActionDispatcher.add<A>(_:)();
  (*(void (**)(char *, uint64_t))(v99 + 8))(v65, v67);
  v64(v108, v10);
  uint64_t v68 = v101;
  EmptyActionImplementation.init()();
  NSString v69 = v89;
  v51(v89, v66, v10);
  sub_100061D9C(&qword_1001A3420, &qword_1001A33B0);
  uint64_t v70 = v102;
  ActionDispatcher.add<A>(_:)();
  (*(void (**)(char *, uint64_t))(v103 + 8))(v68, v70);
  id v71 = v105;
  v105(v66, v10);
  id v72 = v91;
  v51(v91, v69, v10);
  sub_1000B15FC();
  ActionDispatcher.add<A>(_:)();
  v71(v69, v10);
  NSString v73 = v71;
  NSString v74 = v92;
  v51(v92, v72, v10);
  sub_1000B1650();
  ActionDispatcher.add<A>(_:)();
  v73(v72, v10);
  NSString v75 = v95;
  v51(v95, v74, v10);
  sub_1000B16A4();
  ActionDispatcher.add<A>(_:)();
  v73(v74, v10);
  v107[0] = sub_10002EE34(0, &qword_1001A3440);
  id v76 = v97;
  v51(v97, v75, v10);
  sub_1000B16F8();
  ActionDispatcher.add<A>(_:)();
  v73(v75, v10);
  id v77 = [self sharedWorkspace];
  v107[0] = (uint64_t)v77;
  Class v78 = v100;
  v51(v100, v76, v10);
  sub_1000B174C();
  ActionDispatcher.add<A>(_:)();

  v73(v76, v10);
  v107[0] = (uint64_t)sub_100136870;
  v107[1] = 0;
  v51(v104, v78, v10);
  sub_1000B17A0();
  ActionDispatcher.add<A>(_:)();
  return ((uint64_t (*)(char *, uint64_t))v73)(v78, v10);
}

uint64_t sub_1000ACEE8@<X0>(void *a1@<X8>)
{
  return sub_1000ACF38((uint64_t)&type metadata for JSLockupService, (uint64_t)&off_100188600, a1);
}

uint64_t sub_1000ACF10@<X0>(void *a1@<X8>)
{
  return sub_1000ACF38((uint64_t)&type metadata for JSOfferService, (uint64_t)&off_100188968, a1);
}

uint64_t sub_1000ACF38@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  type metadata accessor for JSStackManager();
  type metadata accessor for BaseObjectGraph();
  uint64_t result = inject<A, B>(_:from:)();
  a3[3] = a1;
  a3[4] = a2;
  *a3 = v7;
  return result;
}

uint64_t sub_1000ACFBC@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for JSStackManager();
  type metadata accessor for BaseObjectGraph();
  inject<A, B>(_:from:)();
  sub_10002EB60(&qword_1001A3390);
  a1[3] = (uint64_t)&type metadata for JSMetricsService;
  a1[4] = (uint64_t)&off_1001888C8;
  uint64_t v2 = swift_allocObject();
  *a1 = v2;
  inject<A, B>(_:from:)();
  sub_10002EE34(0, (unint64_t *)&qword_1001A27A0);
  uint64_t result = inject<A, B>(_:from:)();
  *(void *)(v2 + 16) = v5;
  *(void *)(v2 + 64) = v4;
  return result;
}

uint64_t sub_1000AD0CC()
{
  uint64_t v0 = type metadata accessor for MetricsFieldsAggregator();
  __chkstk_darwin(v0 - 8);
  type metadata accessor for JSStackManager();
  type metadata accessor for BaseObjectGraph();
  inject<A, B>(_:from:)();
  sub_1000B12B4();
  sub_100115044();
  sub_1000B1308();
  sub_10002EB60((uint64_t *)&unk_1001A3300);
  swift_retain();
  inject<A, B>(_:from:)();
  MetricsPipeline.init(builderType:aggregator:linter:recorder:)();
  return swift_release();
}

uint64_t sub_1000AD214@<X0>(void *a1@<X8>)
{
  uint64_t v19 = a1;
  uint64_t v1 = type metadata accessor for Bag();
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AMSMediaFetcher();
  uint64_t v5 = v4 - 8;
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (void **)((char *)&v19 - v9);
  sub_10002EE34(0, &qword_1001A3388);
  type metadata accessor for BaseObjectGraph();
  inject<A, B>(_:from:)();
  uint64_t v11 = v21[0];
  inject<A, B>(_:from:)();
  sub_10002EB60(&qword_1001A3390);
  inject<A, B>(_:from:)();
  void *v10 = v11;
  uint64_t v12 = (void *)((char *)v10 + *(int *)(v5 + 36));
  void *v12 = 0;
  v12[1] = 0;
  sub_10002EB60((uint64_t *)&unk_1001A3330);
  inject<A, B>(_:from:)();
  sub_10002EB60((uint64_t *)&unk_1001A3320);
  inject<A, B>(_:from:)();
  inject<A, B>(_:from:)();
  inject<A, B>(_:from:)();
  sub_10002EB60((uint64_t *)&unk_1001A5A10);
  inject<A, B>(_:from:)();
  uint64_t v13 = sub_10002FE00((uint64_t)v23, v24);
  __chkstk_darwin(v13);
  uint64_t v15 = (uint64_t *)((char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  sub_1000B1EE8((uint64_t)v10, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for AMSMediaFetcher);
  sub_1000B11C4((uint64_t)v21, (uint64_t)v20);
  id v17 = sub_1000AFAD4((uint64_t)v8, *v15, (uint64_t)v22, (uint64_t)v3, v20);
  sub_1000B1220((uint64_t)v21);
  sub_10002ED08((uint64_t)v23);
  uint64_t result = sub_1000B2108((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for AMSMediaFetcher);
  *uint64_t v19 = v17;
  return result;
}

uint64_t sub_1000AD564@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for MetricsLogger.Configuration();
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for MetricsPipeline();
  __chkstk_darwin(v3);
  uint64_t v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v6 = type metadata accessor for Bag();
  __chkstk_darwin(v6);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  type metadata accessor for BaseObjectGraph();
  inject<A, B>(_:from:)();
  inject<A, B>(_:from:)();
  sub_10002EB60(&qword_1001A3340);
  inject<A, B>(_:from:)();
  sub_1000B2168((unint64_t *)&unk_1001A3360, (void (*)(uint64_t))&type metadata accessor for MetricsLogger.Configuration);
  inject<A>(_:from:)();
  type metadata accessor for MetricsLogger();
  swift_allocObject();
  uint64_t v9 = MetricsLogger.init(loggerName:configuration:)();
  uint64_t v10 = sub_10002FE00((uint64_t)v17, v18);
  __chkstk_darwin(v10);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(unsigned char *))(v13 + 16))(v12);
  id v14 = sub_1000AFDD0((uint64_t)v8, (uint64_t)v5, (uint64_t)v12, v9);
  uint64_t result = sub_10002ED08((uint64_t)v17);
  *a1 = v14;
  return result;
}

id sub_1000AD840@<X0>(void *a1@<X8>)
{
  id result = [objc_allocWithZone((Class)type metadata accessor for UtilityClient()) init];
  *a1 = result;
  return result;
}

uint64_t sub_1000AD884@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for ObjectGraph();
  swift_retain();
  uint64_t v2 = BaseObjectGraph.__allocating_init(_:)();
  swift_retain();
  dispatch thunk of BaseObjectGraph.name.setter();
  uint64_t result = swift_release();
  *a1 = v2;
  return result;
}

uint64_t sub_1000AD904(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000AD90C(*a1, a2, a3);
}

uint64_t sub_1000AD90C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v38 = a3;
  uint64_t v37 = a2;
  uint64_t v4 = sub_10002EB60((uint64_t *)&unk_1001A3280);
  uint64_t v36 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for Bag();
  uint64_t v39 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v35 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for Locale();
  uint64_t v33 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10002EB60(&qword_1001A2450);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1 + qword_1001A53E0;
  swift_beginAccess();
  sub_1000700A0(v13, (uint64_t)&v45);
  if (v46)
  {
    sub_100031C10(&v45, (uint64_t)v47);
    sub_10002EB60(&qword_1001A32A0);
    type metadata accessor for ObjectGraph();
    inject<A, B>(_:from:)();
    uint64_t v14 = type metadata accessor for TaskPriority();
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
    v15(v12, 1, 1, v14);
    sub_100052538((uint64_t)v47, (uint64_t)&v43);
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = 0;
    *(void *)(v16 + 24) = 0;
    sub_100031C10(&v43, v16 + 32);
    sub_1000AA270((uint64_t)v12, (uint64_t)&unk_1001A32B0, v16);
    swift_release();
    v15(v12, 1, 1, v14);
    sub_100052538((uint64_t)&v45, (uint64_t)&v43);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = 0;
    *(void *)(v17 + 24) = 0;
    sub_100031C10(&v43, v17 + 32);
    sub_1000AA270((uint64_t)v12, (uint64_t)&unk_1001A32C0, v17);
    swift_release();
    sub_10002EB60(&qword_1001A19A0);
    inject<A, B>(_:from:)();
    sub_10002EE34(0, &qword_1001A32D0);
    inject<A, B>(_:from:)();
    double v18 = v41;
    sub_10002EC6C(&v43, v44);
    dispatch thunk of Localizer.locale.getter();
    Locale.identifier.getter();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v34);
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [*(id *)&v18 setStorefrontLocaleID:v19];

    uint64_t v20 = v35;
    inject<A, B>(_:from:)();
    NSString v21 = String._bridgeToObjectiveC()();
    Bag.subscript.getter();

    Bag.Value.currentOrNil()();
    uint64_t v22 = *(void (**)(char *, uint64_t))(v36 + 8);
    v22(v6, v4);
    id v23 = 0;
    if ((v42 & 1) == 0) {
      id v23 = [objc_allocWithZone((Class)NSNumber) initWithDouble:v41];
    }
    [*(id *)&v18 setOverlaysRateLimitRequestsPerSecond:v23];

    NSString v24 = String._bridgeToObjectiveC()();
    Bag.subscript.getter();

    Bag.Value.currentOrNil()();
    v22(v6, v4);
    if (v42) {
      id v25 = 0;
    }
    else {
      id v25 = [objc_allocWithZone((Class)NSNumber) initWithDouble:v41];
    }
    [*(id *)&v18 setOverlaysRateLimitTimeWindow:v25];

    NSString v26 = String._bridgeToObjectiveC()();
    Bag.subscript.getter();

    Bag.Value.currentOrNil()();
    v22(v6, v4);
    if (v42) {
      id v27 = 0;
    }
    else {
      id v27 = [objc_allocWithZone((Class)NSNumber) initWithDouble:v41];
    }
    [*(id *)&v18 setOverlaysLoadTimeout:v27];

    uint64_t v28 = self;
    if (qword_1001A0DD8 != -1) {
      swift_once();
    }
    uint64_t v29 = qword_1001AE2F0;
    NSString v30 = String._bridgeToObjectiveC()();
    [v28 launchCorrelationKeyWithTag:v29 withString:v30];

    [v28 bootstrapDidEndWithTag:qword_1001AE2F0];
    (*(void (**)(char *, uint64_t))(v39 + 8))(v20, v40);
    sub_10002ED08((uint64_t)&v45);
    sub_10002ED08((uint64_t)v47);
    return sub_10002ED08((uint64_t)&v43);
  }
  else
  {
    sub_100034B8C((uint64_t)&v45, (uint64_t *)&unk_1001A3290);
    sub_10002EB60(&qword_1001A2480);
    uint64_t result = dispatch thunk of BaseObjectGraph.noMemberFound<A>(toSatisfy:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1000AE0B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[10] = a4;
  type metadata accessor for LogMessage.StringInterpolation();
  v4[11] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OSLogger();
  v4[12] = v5;
  v4[13] = *(void *)(v5 - 8);
  v4[14] = swift_task_alloc();
  uint64_t refreshed = type metadata accessor for ArcadeEntitlementRefreshCondition();
  v4[15] = refreshed;
  v4[16] = *(void *)(refreshed - 8);
  v4[17] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ArcadeState();
  v4[18] = v7;
  v4[19] = *(void *)(v7 - 8);
  v4[20] = swift_task_alloc();
  return _swift_task_switch(sub_1000AE258, 0, 0);
}

uint64_t sub_1000AE258()
{
  uint64_t v2 = v0[16];
  uint64_t v1 = (unsigned char *)v0[17];
  uint64_t v3 = v0[15];
  uint64_t v4 = (void *)v0[10];
  uint64_t v5 = v4[3];
  uint64_t v6 = v4[4];
  sub_10002EC6C(v4, v5);
  unsigned char *v1 = 0;
  (*(void (**)(unsigned char *, void, uint64_t))(v2 + 104))(v1, enum case for ArcadeEntitlementRefreshCondition.ifCacheIsExpired(_:), v3);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[21] = v7;
  void *v7 = v0;
  v7[1] = sub_1000AE354;
  uint64_t v8 = v0[20];
  uint64_t v9 = v0[17];
  return dispatch thunk of ArcadeSubscriptionManager.updateStateFromEntitlements(refreshingCache:)(v8, v9, v5, v6);
}

uint64_t sub_1000AE354()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 136);
  uint64_t v4 = *(void *)(*(void *)v1 + 128);
  uint64_t v5 = *(void *)(*(void *)v1 + 120);
  *(void *)(*(void *)v1 + 176) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
  {
    uint64_t v6 = sub_1000AE570;
  }
  else
  {
    (*(void (**)(void, void))(v2[19] + 8))(v2[20], v2[18]);
    uint64_t v6 = sub_1000AE4E4;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000AE4E4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000AE570()
{
  if (qword_1001A0E80 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  uint64_t v4 = sub_10002F6AC(v3, (uint64_t)qword_1001AE3C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v5._object = (void *)0x800000010015D230;
  v5._uint64_t countAndFlagsBits = 0xD000000000000045;
  LogMessage.StringInterpolation.appendLiteral(_:)(v5);
  swift_getErrorValue();
  uint64_t v6 = v0[6];
  uint64_t v7 = v0[7];
  v0[5] = v7;
  uint64_t v8 = sub_100031A88(v0 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v8, v6, v7);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)(v0 + 2), &qword_1001A1C50);
  v9._uint64_t countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v9);
  LogMessage.init(stringInterpolation:)();
  Logger.warning(_:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1000AE810(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  void *v6 = v2;
  v6[1] = sub_100053090;
  return sub_1000AE0B4(a1, v4, v5, v1 + 32);
}

uint64_t sub_1000AE8C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[10] = a4;
  type metadata accessor for LogMessage.StringInterpolation();
  v4[11] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OSLogger();
  v4[12] = v5;
  v4[13] = *(void *)(v5 - 8);
  v4[14] = swift_task_alloc();
  return _swift_task_switch(sub_1000AE9B0, 0, 0);
}

uint64_t sub_1000AE9B0()
{
  sub_10002EC6C(*(void **)(v0 + 80), *(void *)(*(void *)(v0 + 80) + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v1;
  void *v1 = v0;
  v1[1] = sub_1000AEA4C;
  return sub_1000BD6B4();
}

uint64_t sub_1000AEA4C()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 128) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000AEBAC, 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1000AEBAC()
{
  if (qword_1001A0E80 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  uint64_t v4 = sub_10002F6AC(v3, (uint64_t)qword_1001AE3C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v5._object = (void *)0x800000010015D1E0;
  v5._uint64_t countAndFlagsBits = 0xD00000000000004FLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v5);
  swift_getErrorValue();
  uint64_t v6 = v0[6];
  uint64_t v7 = v0[7];
  v0[5] = v7;
  uint64_t v8 = sub_100031A88(v0 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v8, v6, v7);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)(v0 + 2), &qword_1001A1C50);
  v9._uint64_t countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v9);
  LogMessage.init(stringInterpolation:)();
  Logger.warning(_:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1000AEE34()
{
  swift_unknownObjectRelease();
  sub_10002ED08(v0 + 32);

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1000AEE74(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  void *v6 = v2;
  v6[1] = sub_10002F874;
  return sub_1000AE8C4(a1, v4, v5, v1 + 32);
}

uint64_t sub_1000AEF28(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v2 - 8);
  swift_beginAccess();
  uint64_t v3 = *(void *)(a1 + 56);
  if (v3)
  {
    swift_retain();
  }
  else
  {
    if (qword_1001A0E70 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for OSLogger();
    sub_10002F6AC(v4, (uint64_t)qword_1001AE398);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v5._uint64_t countAndFlagsBits = 0;
    v5._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v5);
    LogMessage.StringInterpolation.appendInterpolation(identity:)();
    v6._object = (void *)0x800000010015D2C0;
    v6._uint64_t countAndFlagsBits = 0xD000000000000019;
    LogMessage.StringInterpolation.appendLiteral(_:)(v6);
    LogMessage.init(stringInterpolation:)();
    Logger.debug(_:)();
    uint64_t v7 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(a1 + 24))(&v9, v7);
    uint64_t v3 = v9;
    *(void *)(a1 + 56) = v9;
    swift_retain();
    swift_release();
    *(void *)(a1 + 72) = os_transaction_create();
    swift_unknownObjectRelease();
  }
  sub_1000F8AFC();
  return v3;
}

uint64_t sub_1000AF170(uint64_t a1, int *a2)
{
  Swift::String v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_1000AF24C;
  return v6(a1);
}

uint64_t sub_1000AF24C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000AF344()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000AF37C(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  Swift::String v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_100053090;
  Swift::String v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1001A32D8 + dword_1001A32D8);
  return v6(a1, v4);
}

uint64_t sub_1000AF434@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000AEF28(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1000AF460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v38 = a3;
  uint64_t v39 = a4;
  uint64_t v40 = a1;
  uint64_t v7 = type metadata accessor for ASDDeviceAppFetcher();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SyncTaskScheduler();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v36 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v36 - v15;
  uint64_t v17 = type metadata accessor for ASCMigrationDeviceAppFetcherImplementation.Store(0);
  __chkstk_darwin(v17 - 8);
  NSString v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  void v41[3] = v11;
  v41[4] = (uint64_t)&protocol witness table for SyncTaskScheduler;
  uint64_t v20 = sub_100031A88(v41);
  uint64_t v37 = v12;
  uint64_t v21 = a2;
  uint64_t v22 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v12 + 16);
  v22(v20, v21, v11);
  sub_1000B1EE8(a5 + OBJC_IVAR____TtC19appstorecomponentsd42ASCMigrationDeviceAppFetcherImplementation_store, (uint64_t)v19, type metadata accessor for ASCMigrationDeviceAppFetcherImplementation.Store);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v19, 1, v7) == 1)
  {
    uint64_t v24 = v38;
    uint64_t v23 = v39;
    id v25 = sub_1000652C4();
    char v27 = v26;
    v22((uint64_t *)v16, (uint64_t)v20, v11);
    if (v27)
    {
      if (v27 == 1)
      {
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        id v29 = [self queryForBundleIDs:isa];
      }
      else
      {
        id v29 = [self queryForStoreApps];
      }
    }
    else
    {
      sub_1000A4F74((unint64_t)v25);
      sub_10002EE34(0, (unint64_t *)&qword_1001A1CF0);
      Class v31 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v29 = [self queryForStoreItemIDs:v31];
    }
    uint64_t v32 = v24;
    uint64_t v33 = (char *)objc_allocWithZone((Class)type metadata accessor for ASDDeviceAppFetcher.QueryObservation());
    uint64_t v34 = (uint64_t)v36;
    v22((uint64_t *)v36, (uint64_t)v16, v11);
    swift_retain();
    uint64_t v30 = (uint64_t)sub_100085FD0(v29, v34, v32, v23, v33);

    swift_release();
    sub_1000B2168((unint64_t *)&unk_1001A31B0, (void (*)(uint64_t))type metadata accessor for ASDDeviceAppFetcher.QueryObservation);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v16, v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v19, v7);
    uint64_t v30 = ASDDeviceAppFetcher.observeQuery(_:on:using:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  sub_10002ED08((uint64_t)v41);
  return v30;
}

id sub_1000AF8D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, char *a6)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v25[3] = type metadata accessor for AMSMediaFetcher();
  v25[4] = (uint64_t)&off_100185330;
  uint64_t v13 = sub_100031A88(v25);
  sub_1000B2028(a1, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for AMSMediaFetcher);
  uint64_t v24[3] = &type metadata for JSLockupService;
  id v24[4] = &off_100188600;
  v24[0] = a2;
  v23[3] = &type metadata for DeviceAppDistribution;
  v23[4] = &off_100187AE0;
  uint64_t v14 = (_OWORD *)swift_allocObject();
  v23[0] = v14;
  long long v15 = a5[3];
  void v14[3] = a5[2];
  void v14[4] = v15;
  v14[5] = a5[4];
  long long v16 = a5[1];
  v14[1] = *a5;
  v14[2] = v16;
  sub_100052538((uint64_t)v25, (uint64_t)&a6[OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_fetcher]);
  sub_100052538((uint64_t)v24, (uint64_t)&a6[OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_service]);
  sub_100052538(a3, (uint64_t)&a6[OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_appStateController]);
  uint64_t v17 = &a6[OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_bag];
  uint64_t v18 = type metadata accessor for Bag();
  uint64_t v19 = *(void *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v17, a4, v18);
  sub_100052538((uint64_t)v23, (uint64_t)&a6[OBJC_IVAR____TtC19appstorecomponentsd19LockupFetcherClient_appDistribution]);
  v22.receiver = a6;
  v22.super_class = ObjectType;
  id v20 = objc_msgSendSuper2(&v22, "init");
  sub_10002ED08((uint64_t)v23);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a4, v18);
  sub_10002ED08(a3);
  sub_10002ED08((uint64_t)v24);
  sub_10002ED08((uint64_t)v25);
  return v20;
}

id sub_1000AFAD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  uint64_t v37 = type metadata accessor for AMSMediaFetcher();
  uint64_t v38 = &off_100185330;
  uint64_t v10 = sub_100031A88(v36);
  sub_1000B2028(a1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for AMSMediaFetcher);
  uint64_t v34 = &type metadata for JSLockupService;
  uint64_t v35 = &off_100188600;
  v33[0] = a2;
  Class v31 = &type metadata for DeviceAppDistribution;
  uint64_t v32 = &off_100187AE0;
  uint64_t v11 = (_OWORD *)swift_allocObject();
  v30[0] = v11;
  long long v12 = a5[3];
  uint64_t v11[3] = a5[2];
  v11[4] = v12;
  v11[5] = a5[4];
  long long v13 = a5[1];
  v11[1] = *a5;
  v11[2] = v13;
  uint64_t v14 = (char *)objc_allocWithZone((Class)type metadata accessor for LockupFetcherClient());
  uint64_t v15 = sub_10002FE00((uint64_t)v36, v37);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v30[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v18 + 16))(v17);
  uint64_t v19 = sub_10002FE00((uint64_t)v33, (uint64_t)v34);
  __chkstk_darwin(v19);
  uint64_t v21 = (void *)((char *)&v30[-1] - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  uint64_t v23 = sub_10002FE00((uint64_t)v30, (uint64_t)v31);
  __chkstk_darwin(v23);
  id v25 = (_OWORD *)((char *)&v30[-1] - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_OWORD *))(v26 + 16))(v25);
  id v27 = sub_1000AF8D4((uint64_t)v17, *v21, a3, a4, v25, v14);
  sub_10002ED08((uint64_t)v30);
  sub_10002ED08((uint64_t)v33);
  sub_10002ED08((uint64_t)v36);
  return v27;
}

id sub_1000AFDD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v22[3] = &type metadata for JSMetricsService;
  v22[4] = &off_1001888C8;
  uint64_t v8 = swift_allocObject();
  v22[0] = v8;
  long long v9 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)a3;
  *(_OWORD *)(v8 + 32) = v9;
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a3 + 32);
  *(void *)(v8 + 64) = *(void *)(a3 + 48);
  uint64_t v20 = &type metadata for OSSignpostExtractor;
  uint64_t v21 = &off_10018A1D0;
  uint64_t v10 = (char *)objc_allocWithZone((Class)type metadata accessor for MetricsClient());
  uint64_t v11 = sub_10002FE00((uint64_t)v22, (uint64_t)&type metadata for JSMetricsService);
  __chkstk_darwin(v11);
  long long v13 = &v19[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *))(v14 + 16))(v13);
  uint64_t v15 = sub_10002FE00((uint64_t)v19, (uint64_t)&type metadata for OSSignpostExtractor);
  __chkstk_darwin(v15);
  (*(void (**)(void))(v16 + 16))();
  id v17 = sub_1000AFFD8(a1, a2, (uint64_t)v13, a4, v10);
  sub_10002ED08((uint64_t)v19);
  sub_10002ED08((uint64_t)v22);
  return v17;
}

id sub_1000AFFD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v29 = a2;
  uint64_t v32 = a1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v34 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v34);
  uint64_t v33 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v11 - 8);
  uint64_t v30 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v28 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  void v42[3] = type metadata accessor for MetricsLogger();
  v42[4] = &protocol witness table for MetricsLogger;
  v42[0] = a4;
  void v41[3] = &type metadata for JSMetricsService;
  v41[4] = &off_1001888C8;
  uint64_t v16 = swift_allocObject();
  v41[0] = v16;
  long long v17 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v16 + 16) = *(_OWORD *)a3;
  *(_OWORD *)(v16 + 32) = v17;
  long long v18 = *(_OWORD *)(a3 + 32);
  *(void *)(v16 + 64) = *(void *)(a3 + 48);
  *(_OWORD *)(v16 + 48) = v18;
  uint64_t v19 = &a5[OBJC_IVAR____TtC19appstorecomponentsd13MetricsClient_bag];
  uint64_t v39 = &type metadata for OSSignpostExtractor;
  uint64_t v40 = &off_10018A1D0;
  uint64_t v31 = type metadata accessor for Bag();
  uint64_t v20 = *(void *)(v31 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v19, a1, v31);
  uint64_t v21 = &a5[OBJC_IVAR____TtC19appstorecomponentsd13MetricsClient_metricsPipeline];
  uint64_t v22 = type metadata accessor for MetricsPipeline();
  uint64_t v23 = *(void *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v21, a2, v22);
  sub_100052538((uint64_t)v41, (uint64_t)&a5[OBJC_IVAR____TtC19appstorecomponentsd13MetricsClient_metricsService]);
  sub_100052538((uint64_t)v42, (uint64_t)&a5[OBJC_IVAR____TtC19appstorecomponentsd13MetricsClient_metricsLogger]);
  sub_100052538((uint64_t)v38, (uint64_t)&a5[OBJC_IVAR____TtC19appstorecomponentsd13MetricsClient_signpostExtractor]);
  uint64_t v27 = sub_10002EE34(0, (unint64_t *)&qword_1001A2170);
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v28, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v13);
  uint64_t v24 = a5;
  static DispatchQoS.unspecified.getter();
  uint64_t v37 = &_swiftEmptyArrayStorage;
  sub_1000B2168((unint64_t *)&qword_1001A3370, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10002EB60(&qword_1001A2910);
  sub_100061D9C((unint64_t *)&qword_1001A3380, &qword_1001A2910);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)&v24[OBJC_IVAR____TtC19appstorecomponentsd13MetricsClient_collectionQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();

  v36.receiver = v24;
  v36.super_class = ObjectType;
  id v25 = objc_msgSendSuper2(&v36, "init");
  sub_10002ED08((uint64_t)v38);
  sub_10002ED08((uint64_t)v42);
  sub_10002ED08((uint64_t)v41);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v29, v22);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v32, v31);
  return v25;
}

uint64_t sub_1000B0498()
{
  type metadata accessor for BaseObjectGraph();
  static BaseObjectGraph.build(withName:)();
  sub_10002EC6C(v11, v11[3]);
  sub_10002EE34(0, &qword_1001A3388);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)();
  sub_10002EC6C(v10, v10[3]);
  AsyncObjectGraphBuilder.withDependenciesSatisfied.getter();
  sub_10002EC6C(v9, v9[3]);
  sub_10002EE34(0, (unint64_t *)&qword_1001A27A0);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)();
  sub_10002EC6C(v8, v8[3]);
  AsyncObjectGraphBuilder.withDependenciesSatisfied.getter();
  sub_10002EC6C(v7, v7[3]);
  sub_10002EB60(&qword_1001A3390);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)();
  sub_10002EC6C(v6, v6[3]);
  type metadata accessor for JSJetPackFetcher(0);
  dispatch thunk of AsyncObjectGraphBuilder.satisfying<A>(_:with:)();
  sub_10002EC6C(v5, v5[3]);
  type metadata accessor for Bag();
  dispatch thunk of AsyncObjectGraphBuilder.satisfying<A>(_:with:)();
  sub_10002EC6C(v4, v4[3]);
  AsyncObjectGraphBuilder.withDependenciesSatisfied.getter();
  sub_10002EC6C(v3, v3[3]);
  sub_10002EE34(0, &qword_1001A34C8);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)();
  sub_10002EC6C(v2, v2[3]);
  uint64_t v0 = dispatch thunk of AsyncObjectGraphBuilder.makeObjectGraph()();
  sub_10002ED08((uint64_t)v2);
  sub_10002ED08((uint64_t)v3);
  sub_10002ED08((uint64_t)v4);
  sub_10002ED08((uint64_t)v5);
  sub_10002ED08((uint64_t)v6);
  sub_10002ED08((uint64_t)v7);
  sub_10002ED08((uint64_t)v8);
  sub_10002ED08((uint64_t)v9);
  sub_10002ED08((uint64_t)v10);
  sub_10002ED08((uint64_t)v11);
  return v0;
}

uint64_t sub_1000B07D4()
{
  Promise<A>.withDependenciesSatisfied.getter();
  sub_10002EC6C(v31, v31[3]);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)();
  sub_10002EC6C(v30, v30[3]);
  sub_10002EB60(&qword_1001A2480);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)();
  sub_10002EC6C(v29, v29[3]);
  sub_10002EB60(&qword_1001A32A0);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)();
  sub_10002EC6C(v28, v28[3]);
  sub_10002EB60(&qword_1001A28E8);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)();
  sub_10002EC6C(v27, v27[3]);
  sub_10002EB60((uint64_t *)&unk_1001A32F0);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)();
  sub_10002EC6C(v26, v26[3]);
  sub_10002EB60((uint64_t *)&unk_1001A5E10);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)();
  sub_10002EC6C(v25, v25[3]);
  sub_10002EB60((uint64_t *)&unk_1001A3300);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)();
  sub_10002EC6C(v24, v24[3]);
  sub_10002EB60((uint64_t *)&unk_1001A5E30);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)();
  sub_10002EC6C(v23, v23[3]);
  sub_10002EE34(0, &qword_1001A32D0);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)();
  sub_10002EC6C(v22, v22[3]);
  sub_10002EB60((uint64_t *)&unk_1001A3310);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)();
  sub_10002EC6C(v21, v21[3]);
  AsyncObjectGraphBuilder.withDependenciesSatisfied.getter();
  sub_10002EC6C(v20, v20[3]);
  sub_10002EB60((uint64_t *)&unk_1001A5A10);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)();
  sub_10002EC6C(v19, v19[3]);
  sub_10002EB60((uint64_t *)&unk_1001A3320);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)();
  sub_10002EC6C(v18, v18[3]);
  AsyncObjectGraphBuilder.withDependenciesSatisfied.getter();
  sub_10002EC6C(v17, v17[3]);
  type metadata accessor for JSStackManager();
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)();
  sub_10002EC6C(v16, v16[3]);
  AsyncObjectGraphBuilder.withDependenciesSatisfied.getter();
  sub_10002EC6C(v15, v15[3]);
  sub_10002EB60(&qword_1001A19A0);
  dispatch thunk of AsyncObjectGraphBuilder.satisfying<A>(_:with:)();
  sub_10002EC6C(v14, v14[3]);
  AsyncObjectGraphBuilder.withDependenciesSatisfied.getter();
  sub_10002EC6C(v13, v13[3]);
  sub_10002EB60((uint64_t *)&unk_1001A2160);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)();
  sub_10002EC6C(v12, v12[3]);
  AsyncObjectGraphBuilder.withDependenciesSatisfied.getter();
  sub_10002EC6C(v11, v11[3]);
  sub_10002EB60((uint64_t *)&unk_1001A3330);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)();
  sub_10002EC6C(v10, v10[3]);
  sub_10002EB60(&qword_1001A2130);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)();
  sub_10002EC6C(v9, v9[3]);
  sub_10002EB60(&qword_1001A3340);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)();
  sub_10002EC6C(v8, v8[3]);
  type metadata accessor for MetricsPipeline();
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)();
  sub_10002EC6C(v7, v7[3]);
  AsyncObjectGraphBuilder.withDependenciesSatisfied.getter();
  sub_10002EC6C(v6, v6[3]);
  sub_10002EB60(&qword_1001A3348);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)();
  sub_10002EC6C(v5, v5[3]);
  sub_10002EB60(&qword_1001A3350);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)();
  sub_10002EC6C(v4, v4[3]);
  sub_10002EB60(&qword_1001A3358);
  AsyncObjectGraphBuilder.satisfying<A>(_:with:)();
  sub_10002EC6C(v3, v3[3]);
  dispatch thunk of AsyncObjectGraphBuilder.makeObjectGraph()();
  v2[3] = type metadata accessor for SyncTaskScheduler();
  void v2[4] = (uint64_t)&protocol witness table for SyncTaskScheduler;
  sub_100031A88(v2);
  SyncTaskScheduler.init()();
  type metadata accessor for ObjectGraph();
  uint64_t v0 = Promise.map<A>(on:_:)();
  swift_release();
  sub_10002ED08((uint64_t)v2);
  sub_10002ED08((uint64_t)v3);
  sub_10002ED08((uint64_t)v4);
  sub_10002ED08((uint64_t)v5);
  sub_10002ED08((uint64_t)v6);
  sub_10002ED08((uint64_t)v7);
  sub_10002ED08((uint64_t)v8);
  sub_10002ED08((uint64_t)v9);
  sub_10002ED08((uint64_t)v10);
  sub_10002ED08((uint64_t)v11);
  sub_10002ED08((uint64_t)v12);
  sub_10002ED08((uint64_t)v13);
  sub_10002ED08((uint64_t)v14);
  sub_10002ED08((uint64_t)v15);
  sub_10002ED08((uint64_t)v16);
  sub_10002ED08((uint64_t)v17);
  sub_10002ED08((uint64_t)v18);
  sub_10002ED08((uint64_t)v19);
  sub_10002ED08((uint64_t)v20);
  sub_10002ED08((uint64_t)v21);
  sub_10002ED08((uint64_t)v22);
  sub_10002ED08((uint64_t)v23);
  sub_10002ED08((uint64_t)v24);
  sub_10002ED08((uint64_t)v25);
  sub_10002ED08((uint64_t)v26);
  sub_10002ED08((uint64_t)v27);
  sub_10002ED08((uint64_t)v28);
  sub_10002ED08((uint64_t)v29);
  sub_10002ED08((uint64_t)v30);
  sub_10002ED08((uint64_t)v31);
  return v0;
}

uint64_t sub_1000B117C()
{
  swift_release();
  sub_10002ED08(v0 + 24);

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1000B11C4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000B1220(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B1274()
{
  sub_10002ED08(v0 + 16);
  sub_10002ED08(v0 + 56);

  return _swift_deallocObject(v0, 96, 7);
}

unint64_t sub_1000B12B4()
{
  unint64_t result = qword_1001A3398;
  if (!qword_1001A3398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A3398);
  }
  return result;
}

unint64_t sub_1000B1308()
{
  unint64_t result = qword_1001A33A0;
  if (!qword_1001A33A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A33A0);
  }
  return result;
}

unint64_t sub_1000B135C()
{
  unint64_t result = qword_1001A33C8;
  if (!qword_1001A33C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A33C8);
  }
  return result;
}

unint64_t sub_1000B13B0()
{
  unint64_t result = qword_1001A33D0;
  if (!qword_1001A33D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A33D0);
  }
  return result;
}

unint64_t sub_1000B1404()
{
  unint64_t result = qword_1001A33D8;
  if (!qword_1001A33D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A33D8);
  }
  return result;
}

unint64_t sub_1000B1458()
{
  unint64_t result = qword_1001A33E0;
  if (!qword_1001A33E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A33E0);
  }
  return result;
}

unint64_t sub_1000B14AC()
{
  unint64_t result = qword_1001A33E8;
  if (!qword_1001A33E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A33E8);
  }
  return result;
}

unint64_t sub_1000B1500()
{
  unint64_t result = qword_1001A33F8;
  if (!qword_1001A33F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A33F8);
  }
  return result;
}

unint64_t sub_1000B1554()
{
  unint64_t result = qword_1001A3400;
  if (!qword_1001A3400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A3400);
  }
  return result;
}

unint64_t sub_1000B15A8()
{
  unint64_t result = qword_1001A3408;
  if (!qword_1001A3408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A3408);
  }
  return result;
}

unint64_t sub_1000B15FC()
{
  unint64_t result = qword_1001A3428;
  if (!qword_1001A3428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A3428);
  }
  return result;
}

unint64_t sub_1000B1650()
{
  unint64_t result = qword_1001A3430;
  if (!qword_1001A3430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A3430);
  }
  return result;
}

unint64_t sub_1000B16A4()
{
  unint64_t result = qword_1001A3438;
  if (!qword_1001A3438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A3438);
  }
  return result;
}

unint64_t sub_1000B16F8()
{
  unint64_t result = qword_1001A3448;
  if (!qword_1001A3448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A3448);
  }
  return result;
}

unint64_t sub_1000B174C()
{
  unint64_t result = qword_1001A3450;
  if (!qword_1001A3450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A3450);
  }
  return result;
}

unint64_t sub_1000B17A0()
{
  unint64_t result = qword_1001A3458;
  if (!qword_1001A3458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A3458);
  }
  return result;
}

uint64_t sub_1000B17F4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000AEF28(v1);
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000B1824()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000B1864()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100053090;
  v3[7] = v2;
  return _swift_task_switch(sub_1000ABF6C, 0, 0);
}

uint64_t sub_1000B1910()
{
  return sub_100080DBC();
}

void *sub_1000B1918(void *a1)
{
  uint64_t v2 = sub_10002EB60(&qword_1001A19D8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  NSString v6 = String._bridgeToObjectiveC()();
  Bag.subscript.getter();

  Bag.Value.current(or:)();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  if (v13[15] == 1)
  {
    [a1 setAnonymous:1];
    [a1 setAccount:0];
  }
  id v7 = [a1 topic];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  if (qword_1001A0E48 != -1) {
    swift_once();
  }
  if (sub_100119B04(v8, v10, qword_1001A52A0))
  {
    MetricsTopicProvider.currentMetricsTopic.getter();
    swift_bridgeObjectRelease();
  }
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a1 setTopic:v11];

  return a1;
}

id sub_1000B1B40(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = a1;
  uint64_t v30 = type metadata accessor for DeviceAppQuery();
  uint64_t v3 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v5 = (Swift::Int *)((char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v29 = type metadata accessor for SyncTaskScheduler();
  uint64_t v6 = *(void *)(v29 - 8);
  uint64_t v7 = __chkstk_darwin(v29);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  NSString v11 = (char *)&v28 - v10;
  sub_10002EB60(&qword_1001A2428);
  swift_allocObject();
  uint64_t v12 = AsyncEvent.init()();
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 24) = v12;
  sub_10002EB60((uint64_t *)&unk_1001A3490);
  uint64_t v13 = swift_allocObject();
  *(_DWORD *)(v13 + 16) = 0;
  *(void *)(a2 + 48) = v13;
  id result = [self defaultWorkspace];
  if (result)
  {
    uint64_t v15 = result;
    NSString v16 = String._bridgeToObjectiveC()();
    unsigned __int8 v17 = [v15 applicationIsInstalled:v16];

    *(unsigned char *)(a2 + 16) = v17;
    uint64_t v28 = v11;
    SyncTaskScheduler.init()();
    Swift::Int v18 = sub_10011A7F8((uint64_t)&off_100184CF8);
    swift_arrayDestroy();
    Swift::Int *v5 = v18;
    uint64_t v19 = v30;
    (*(void (**)(Swift::Int *, void, uint64_t))(v3 + 104))(v5, enum case for DeviceAppQuery.bundleIDs(_:), v30);
    uint64_t v20 = v6;
    uint64_t v21 = v11;
    uint64_t v22 = v29;
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v21, v29);
    uint64_t v23 = swift_allocObject();
    swift_weakInit();
    swift_retain();
    uint64_t v24 = sub_1000AF460((uint64_t)v5, (uint64_t)v9, (uint64_t)sub_1000B1EE0, v23, v31);
    uint64_t v26 = v25;
    swift_release();
    (*(void (**)(Swift::Int *, uint64_t))(v3 + 8))(v5, v19);
    uint64_t v27 = *(void (**)(char *, uint64_t))(v20 + 8);
    v27(v28, v22);
    swift_release();
    v27(v9, v22);
    *(void *)(a2 + 32) = v24;
    *(void *)(a2 + 40) = v26;
    swift_unknownObjectRelease();
    return (id)a2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000B1EA8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000B1EE0(unint64_t a1)
{
}

uint64_t sub_1000B1EE8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000B1F50()
{
  uint64_t v1 = *(void *)(type metadata accessor for MetricsTopicProvider() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for Bag();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1000B2028(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

id sub_1000B2090(void *a1)
{
  type metadata accessor for MetricsTopicProvider();
  uint64_t v2 = sub_1000B1918(a1);

  return v2;
}

uint64_t sub_1000B2108(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000B2168(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B21B0()
{
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000B21F8(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10002F874;
  return sub_10011774C(a1, v4, v5, v7, v6);
}

uint64_t sub_1000B22B8(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_100053090;
  return sub_1000AAB60(a1, v1);
}

uint64_t sub_1000B2354()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000B239C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_100053090;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *, uint64_t, uint64_t))((char *)&dword_1001A4970
                                                                                   + dword_1001A4970);
  return v10(a1, v4, v5, v6, v7, v8);
}

id sub_1000B2478()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = sub_10002EB60(&qword_1001A3540);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v6 = self;
  uint64_t v7 = v0;
  id v8 = [v6 currentProcess];
  [v8 setAccountMediaType:AMSAccountMediaTypeProduction];
  id v9 = objc_msgSend(self, "ams_sharedAccountStoreForClient:", v8);

  type metadata accessor for LocalPreferences();
  uint64_t v10 = static LocalPreferences.currentApplication.getter();
  id v11 = [self defaultCenter];
  type metadata accessor for RebootstrapTrigger();
  uint64_t v12 = swift_allocObject();
  *(void *)&v7[OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_rebootstrapTrigger] = sub_1000B3B84(v9, v10, v11, v12);
  id v13 = [objc_allocWithZone((Class)JEUnfairLock) init];
  *(void *)&v7[OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_stateLock] = v13;
  *(void *)&v7[OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_bootstrapState] = 0xC000000000000000;

  v19.receiver = v7;
  v19.super_class = ObjectType;
  id v14 = objc_msgSendSuper2(&v19, "init");
  sub_10002EB60(&qword_1001A3548);
  sub_1000B3E04();
  id v15 = v14;
  swift_retain();
  dispatch thunk of static EventEmitter.defaultScheduler.getter();
  EventEmitter.addObserver<A>(on:target:method:)();
  swift_release();

  sub_10002ED08((uint64_t)v18);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v15;
}

id sub_1000B2724(char a1, uint64_t a2)
{
  if (a1)
  {
    return (id)sub_100020730();
  }
  else
  {
    uint64_t v4 = *(void **)(a2 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_stateLock);
    [v4 lock];
    sub_1000B3608(a2);
    return [v4 unlock];
  }
}

uint64_t (*sub_1000B27AC(void *a1))(unsigned __int8 *a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = a1;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_1000B3E98;
  *(void *)(v3 + 24) = v2;
  id v4 = a1;
  return sub_1000B3EDC;
}

uint64_t sub_1000B2860()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v19[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0E60 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for OSLogger();
  sub_10002F6AC(v6, (uint64_t)qword_1001AE368);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.init(stringLiteral:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  UUID.init()();
  uint64_t v7 = UUID.uuidString.getter();
  uint64_t v9 = v8;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v10 = self;
  if (qword_1001A0DD8 != -1) {
    swift_once();
  }
  [v10 bootstrapDidBeginWithTag:qword_1001AE2F0];
  sub_1000B0498();
  uint64_t v11 = sub_1000B07D4();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v7;
  *(void *)(v12 + 24) = v9;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v7;
  *(void *)(v13 + 24) = v9;
  uint64_t v20 = type metadata accessor for SyncTaskScheduler();
  uint64_t v21 = &protocol witness table for SyncTaskScheduler;
  sub_100031A88(v19);
  swift_bridgeObjectRetain_n();
  SyncTaskScheduler.init()();
  Promise.then(perform:orCatchError:on:)();
  swift_release();
  swift_release();
  swift_release();
  sub_10002ED08((uint64_t)v19);
  swift_bridgeObjectRelease();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  unint64_t v14 = sub_10004765C();
  swift_retain();
  uint64_t v15 = static OS_dispatch_queue.main.getter();
  uint64_t v20 = v14;
  uint64_t v21 = &protocol witness table for OS_dispatch_queue;
  v19[0] = v15;
  Promise.then(perform:orCatchError:on:)();
  swift_release();
  swift_release();
  sub_10002ED08((uint64_t)v19);
  swift_release();
  unint64_t v16 = *(void *)(v1 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_bootstrapState);
  *(void *)(v1 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_bootstrapState) = v11;
  swift_retain();
  sub_1000B39D0(v16);
  return v11;
}

id sub_1000B2C80(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for OSLogger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0E60 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_10002F6AC(v5, (uint64_t)qword_1001AE368);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v10._object = (void *)0x800000010015D400;
  v10._uint64_t countAndFlagsBits = 0xD000000000000021;
  LogMessage.StringInterpolation.appendLiteral(_:)(v10);
  uint64_t v15[3] = type metadata accessor for ObjectGraph();
  v15[0] = a1;
  swift_retain();
  LogMessage.StringInterpolation.appendInterpolation(sensitive:)();
  sub_1000709E0((uint64_t)v15);
  v11._uint64_t countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v11);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v12 = *(void **)(v1 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_stateLock);
  [*(id *)(v2 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_stateLock) lock];
  unint64_t v13 = *(void *)(v2 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_bootstrapState);
  *(void *)(v2 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_bootstrapState) = a1 | 0x4000000000000000;
  swift_retain();
  sub_1000B39D0(v13);
  return [v12 unlock];
}

id sub_1000B2F5C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for OSLogger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0E60 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_10002F6AC(v5, (uint64_t)qword_1001AE368);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v10._object = (void *)0x800000010015D3E0;
  v10._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v10);
  swift_getErrorValue();
  uint64_t v11 = v18;
  uint64_t v12 = v19;
  uint64_t v20[3] = v19;
  unint64_t v13 = sub_100031A88(v20);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v13, v11, v12);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_1000709E0((uint64_t)v20);
  v14._uint64_t countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v14);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v15 = *(void **)(v1 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_stateLock);
  [*(id *)(v2 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_stateLock) lock];
  unint64_t v16 = *(void *)(v2 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_bootstrapState);
  *(void *)(v2 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_bootstrapState) = a1 | 0x8000000000000000;
  swift_errorRetain();
  sub_1000B39D0(v16);
  return [v15 unlock];
}

void sub_1000B3278(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    sub_1000B2C80(v1);
  }
}

void sub_1000B32D4(uint64_t a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    sub_1000B2F5C(a1);
  }
}

uint64_t sub_1000B3330(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for OSLogger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_bootstrapState;
  unint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_bootstrapState);
  if (v8 >> 62 == 2 || (v8 >> 62 == 3 ? (BOOL v9 = v8 == 0xC000000000000000) : (BOOL v9 = 0), v9))
  {
    sub_1000B2860();
    return swift_release();
  }
  else
  {
    if (qword_1001A0E60 != -1) {
      swift_once();
    }
    uint64_t v10 = sub_10002F6AC(v3, (uint64_t)qword_1001AE368);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v10, v3);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v11._object = (void *)0x800000010015D460;
    v11._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v11);
    unint64_t v12 = *(void *)(a1 + v7);
    uint64_t v15[3] = &type metadata for BootstrapSession.BootstrapState;
    v15[0] = v12;
    sub_1000B3998(v12);
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_1000709E0((uint64_t)v15);
    v13._uint64_t countAndFlagsBits = 0x657461747320;
    v13._object = (void *)0xE600000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v13);
    LogMessage.init(stringInterpolation:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
}

uint64_t sub_1000B3608(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for OSLogger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_bootstrapState;
  unint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_bootstrapState);
  if (v8 >> 62 == 2 || (v8 >> 62 == 3 ? (BOOL v9 = v8 == 0xC000000000000000) : (BOOL v9 = 0), v9))
  {
    if (qword_1001A0E60 != -1) {
      swift_once();
    }
    uint64_t v11 = sub_10002F6AC(v3, (uint64_t)qword_1001AE368);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v11, v3);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v12._object = (void *)0x800000010015D430;
    v12._uint64_t countAndFlagsBits = 0xD000000000000021;
    LogMessage.StringInterpolation.appendLiteral(_:)(v12);
    unint64_t v13 = *(void *)(a1 + v7);
    uint64_t v15[3] = &type metadata for BootstrapSession.BootstrapState;
    v15[0] = v13;
    sub_1000B3998(v13);
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_1000709E0((uint64_t)v15);
    v14._uint64_t countAndFlagsBits = 0x657461747320;
    v14._object = (void *)0xE600000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v14);
    LogMessage.init(stringInterpolation:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  else
  {
    sub_1000B2860();
    swift_release();
    return sub_100020730();
  }
}

uint64_t type metadata accessor for BootstrapSession()
{
  return self;
}

unint64_t *initializeBufferWithCopyOfBuffer for BootstrapSession.BootstrapState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_1000B3998(*a2);
  *a1 = v3;
  return a1;
}

unint64_t sub_1000B3998(unint64_t result)
{
  if (result >> 62 == 2) {
    return swift_errorRetain();
  }
  if ((result >> 62) <= 1) {
    return swift_retain();
  }
  return result;
}

unint64_t destroy for BootstrapSession.BootstrapState(unint64_t *a1)
{
  return sub_1000B39D0(*a1);
}

unint64_t sub_1000B39D0(unint64_t result)
{
  if (result >> 62 == 2) {
    return swift_errorRelease();
  }
  if ((result >> 62) <= 1) {
    return swift_release();
  }
  return result;
}

unint64_t *assignWithCopy for BootstrapSession.BootstrapState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_1000B3998(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  sub_1000B39D0(v4);
  return a1;
}

unint64_t *assignWithTake for BootstrapSession.BootstrapState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  sub_1000B39D0(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for BootstrapSession.BootstrapState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7D && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 125);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7C) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for BootstrapSession.BootstrapState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7C)
  {
    *(void *)uint64_t result = a2 - 125;
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1000B3B1C(void *a1)
{
  uint64_t v1 = *a1 >> 62;
  if (v1 == 3) {
    return (*a1 >> 3) + 3;
  }
  else {
    return v1;
  }
}

void *sub_1000B3B38(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_1000B3B48(unint64_t *result, uint64_t a2)
{
  if (a2 < 3)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8;
    unint64_t v3 = a2 << 62;
  }
  else
  {
    uint64_t v2 = 8 * (a2 - 3);
    unint64_t v3 = 0xC000000000000000;
  }
  *uint64_t result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for BootstrapSession.BootstrapState()
{
  return &type metadata for BootstrapSession.BootstrapState;
}

uint64_t sub_1000B3B84(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5 = a3;
  *(void *)(a4 + 32) = a2;
  *(void *)(a4 + 40) = &protocol witness table for LocalPreferences;
  *(void *)(a4 + 16) = a1;
  *(void *)(a4 + 24) = a3;
  id v7 = objc_allocWithZone((Class)JEUnfairLock);
  id v8 = a1;
  swift_retain();
  id v9 = v5;
  *(void *)(a4 + 48) = [v7 init];
  id v10 = v8;
  *(void *)(a4 + 56) = sub_10012BE48(v10);
  *(void *)(a4 + 64) = v11;
  *(unsigned char *)(a4 + 72) = v12 & 1;
  sub_10002EB60(&qword_1001A3548);
  swift_allocObject();
  uint64_t v13 = AsyncEvent.init()();
  *(void *)(a4 + 80) = v13;
  void v17[4] = sub_1000B3F08;
  void v17[5] = v13;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  id v17[2] = sub_1000C1A88;
  v17[3] = &unk_100187128;
  Swift::String v14 = _Block_copy(v17);
  swift_retain();
  swift_release();
  LODWORD(v5) = sub_100020844(v14);
  _Block_release(v14);
  *(_DWORD *)(a4 + 76) = v5;
  sub_10012AD6C();
  [v9 addObserver:a4 selector:"accountStoreDidChange:" name:ACDAccountStoreDidChangeNotification object:0];
  swift_retain();
  uint64_t v15 = (void *)static AppDistributor.AppDistributorsOrTrustedDevelopersChangedNotification.getter();
  [v9 addObserver:a4 selector:"appDistributorsDidChange:" name:v15 object:0];
  swift_release();

  swift_release();
  return a4;
}

uint64_t sub_1000B3D74()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B3DAC(uint64_t *a1)
{
  return sub_1000AD904(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000B3DB4(uint64_t a1)
{
  return MetricsIdStore.init(accountStore:amsBag:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000B3DBC()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000B3DF4(uint64_t *a1)
{
}

void sub_1000B3DFC(uint64_t a1)
{
}

unint64_t sub_1000B3E04()
{
  unint64_t result = qword_1001A3550;
  if (!qword_1001A3550)
  {
    sub_10002ED58(&qword_1001A3548);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A3550);
  }
  return result;
}

uint64_t sub_1000B3E60()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_1000B3E98(char a1)
{
  return sub_1000B2724(a1 & 1, *(void *)(v1 + 16));
}

uint64_t sub_1000B3EA4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B3EDC(unsigned __int8 *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_1000B3F08()
{
  return sub_10012AC14();
}

uint64_t sub_1000B3F10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000B3F20()
{
  return swift_release();
}

ValueMetadata *_s7BuyableVMa()
{
  return &_s7BuyableVN;
}

BOOL sub_1000B3F40(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6 != 6 || (a5 | a4) != 0) {
    return 0;
  }
  if (a3) {
    return a3 == 6 && a1 == 2 && !a2;
  }
  return (a1 & 0xFE) == 0;
}

uint64_t sub_1000B3F8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  id v8 = *(void **)(a2 + v7);
  id v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  return a1;
}

uint64_t sub_1000B4014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  id v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  return a1;
}

uint64_t sub_1000B4098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B40AC);
}

uint64_t sub_1000B40AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionMetrics();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    id v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1000B416C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B4180);
}

uint64_t sub_1000B4180(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ActionMetrics();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for CancelOrPauseInstallAction()
{
  uint64_t result = qword_1001A35B0;
  if (!qword_1001A35B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000B4288()
{
  uint64_t result = type metadata accessor for ActionMetrics();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CancelOrPauseInstallActionImplementation()
{
  return &type metadata for CancelOrPauseInstallActionImplementation;
}

unint64_t sub_1000B4334()
{
  unint64_t result = qword_1001A5480;
  if (!qword_1001A5480)
  {
    type metadata accessor for CancelOrPauseInstallAction();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A5480);
  }
  return result;
}

uint64_t sub_1000B438C(uint64_t a1, uint64_t a2, void *a3)
{
  v3[24] = a2;
  v3[25] = a3;
  v3[23] = a1;
  v3[26] = *a3;
  uint64_t v4 = type metadata accessor for DeviceAppQuery();
  v3[27] = v4;
  v3[28] = *(void *)(v4 - 8);
  v3[29] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for AdamID();
  v3[30] = v5;
  v3[31] = *(void *)(v5 - 8);
  v3[32] = swift_task_alloc();
  type metadata accessor for LogMessage.StringInterpolation();
  v3[33] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OSLogger();
  v3[34] = v6;
  v3[35] = *(void *)(v6 - 8);
  v3[36] = swift_task_alloc();
  return _swift_task_switch(sub_1000B455C, 0, 0);
}

uint64_t sub_1000B455C()
{
  if (qword_1001A0E68 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 272);
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v5 = sub_10002F6AC(v3, (uint64_t)qword_1001AE380);
  *(void *)(v0 + 296) = v5;
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
  *(void *)(v0 + 304) = v6;
  *(void *)(v0 + 312) = (v1 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v5, v3);
  *(void *)(v0 + 320) = sub_10002EB60((uint64_t *)&unk_1001A19E0);
  uint64_t v7 = *(void *)(type metadata accessor for LogMessage() - 8);
  *(void *)(v0 + 328) = *(void *)(v7 + 72);
  *(_DWORD *)(v0 + 384) = *(_DWORD *)(v7 + 80);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v8._object = (void *)0x800000010015D480;
  v8._uint64_t countAndFlagsBits = 0xD000000000000015;
  LogMessage.StringInterpolation.appendLiteral(_:)(v8);
  uint64_t v9 = *(int *)(type metadata accessor for CancelOrPauseInstallAction() + 20);
  *(_DWORD *)(v0 + 388) = v9;
  unint64_t v10 = *(void **)(v4 + v9);
  unint64_t v11 = sub_10007AC00();
  *(void *)(v0 + 336) = v11;
  *(void *)(v0 + 80) = v11;
  *(void *)(v0 + 56) = v10;
  id v12 = v10;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_1000709E0(v0 + 56);
  v13._uint64_t countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v13);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  Swift::String v14 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  *(void *)(v0 + 344) = v14;
  *(void *)(v0 + 352) = (v1 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v14(v2, v3);
  sub_10002EB60(&qword_1001A28E8);
  inject<A, B>(_:from:)();
  [*(id *)(v4 + v9) int64value];
  AdamID.init(value:)();
  uint64_t v15 = *(void *)(v0 + 248);
  uint64_t v16 = *(void *)(v0 + 256);
  unsigned __int8 v17 = *(void **)(v0 + 232);
  uint64_t v18 = *(void *)(v0 + 240);
  uint64_t v19 = *(void *)(v0 + 216);
  uint64_t v20 = *(void *)(v0 + 224);
  uint64_t v21 = *(void *)(v0 + 40);
  uint64_t v29 = *(void *)(v0 + 48);
  sub_10002EC6C((void *)(v0 + 16), v21);
  sub_10002EB60((uint64_t *)&unk_1001A25E0);
  unint64_t v22 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_10014CED0;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v15 + 16))(v23 + v22, v16, v18);
  uint64_t v24 = sub_10011ADD8(v23);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *unsigned __int8 v17 = v24;
  (*(void (**)(void *, void, uint64_t))(v20 + 104))(v17, enum case for DeviceAppQuery.storeIDs(_:), v19);
  uint64_t v25 = *(void *)(v29 + 8);
  uint64_t v26 = (void *)swift_task_alloc();
  *(void *)(v0 + 360) = v26;
  void *v26 = v0;
  v26[1] = sub_1000B49B0;
  uint64_t v27 = *(void *)(v0 + 232);
  return dispatch thunk of DeviceAppFetcher.fetchQuery(_:)(v27, v21, v25);
}

uint64_t sub_1000B49B0(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v4[46] = a1;
  v4[47] = v1;
  swift_task_dealloc();
  (*(void (**)(void, void))(v3[28] + 8))(v3[29], v3[27]);
  if (v1) {
    uint64_t v5 = sub_1000B5080;
  }
  else {
    uint64_t v5 = sub_1000B4B20;
  }
  return _swift_task_switch(v5, 0, 0);
}

void sub_1000B4B20()
{
  unint64_t v1 = *(void *)(v0 + 368);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v17) {
      goto LABEL_3;
    }
LABEL_12:
    uint64_t v38 = *(void *)(v0 + 336);
    uint64_t v19 = *(void *)(v0 + 296);
    uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 304);
    uint64_t v20 = *(void *)(v0 + 288);
    uint64_t v21 = *(void *)(v0 + 272);
    uint64_t v33 = *(void *)(v0 + 192);
    uint64_t v35 = *(int *)(v0 + 388);
    swift_bridgeObjectRelease();
    v18(v20, v19, v21);
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CD00;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v22._object = (void *)0x800000010015D4A0;
    v22._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v22);
    uint64_t v23 = *(void **)(v33 + v35);
    *(void *)(v0 + 176) = v38;
    *(void *)(v0 + 152) = v23;
    id v24 = v23;
    LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
    sub_1000709E0(v0 + 152);
    v25._uint64_t countAndFlagsBits = 0;
    v25._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v25);
    LogMessage.init(stringInterpolation:)();
    LogMessage.init(stringLiteral:)();
    Logger.error(_:)();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_12;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    id v2 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v2 = *(id *)(*(void *)(v0 + 368) + 32);
  }
  swift_bridgeObjectRelease();
  id v3 = [v2 progress];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v40 = v2;
    id v5 = [v3 cancellationHandler];
    if (v5)
    {
      uint64_t v6 = v5;
      (*((void (**)(void))v5 + 2))();
      _Block_release(v6);
    }
    uint64_t v34 = *(int *)(v0 + 388);
    uint64_t v36 = *(void *)(v0 + 336);
    uint64_t v7 = *(void *)(v0 + 192);
    (*(void (**)(void, void, void))(v0 + 304))(*(void *)(v0 + 288), *(void *)(v0 + 296), *(void *)(v0 + 272));
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v8._uint64_t countAndFlagsBits = 0xD000000000000014;
    v8._object = (void *)0x800000010015D4E0;
    LogMessage.StringInterpolation.appendLiteral(_:)(v8);
    uint64_t v9 = *(void **)(v7 + v34);
    *(void *)(v0 + 144) = v36;
    *(void *)(v0 + 120) = v9;
    id v10 = v9;
    LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
    sub_1000709E0(v0 + 120);
    v11._uint64_t countAndFlagsBits = 0;
    v11._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v11);
    LogMessage.init(stringInterpolation:)();
    Logger.info(_:)();

    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v37 = *(int *)(v0 + 388);
    uint64_t v39 = *(void *)(v0 + 336);
    uint64_t v12 = *(void *)(v0 + 192);
    (*(void (**)(void))(v0 + 304))();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CD00;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v13._object = (void *)0x800000010015D4A0;
    v13._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v13);
    Swift::String v14 = *(void **)(v12 + v37);
    *(void *)(v0 + 112) = v39;
    *(void *)(v0 + 88) = v14;
    id v15 = v14;
    LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
    sub_1000709E0(v0 + 88);
    v16._uint64_t countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v16);
    LogMessage.init(stringInterpolation:)();
    LogMessage.init(stringLiteral:)();
    Logger.error(_:)();
    swift_bridgeObjectRelease();
  }
LABEL_13:
  uint64_t v27 = *(void *)(v0 + 248);
  uint64_t v26 = *(void *)(v0 + 256);
  uint64_t v28 = *(void *)(v0 + 240);
  uint64_t v29 = *(void *)(v0 + 184);
  (*(void (**)(void, void))(v0 + 344))(*(void *)(v0 + 288), *(void *)(v0 + 272));
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
  uint64_t v30 = enum case for ActionOutcome.performed(_:);
  uint64_t v31 = type metadata accessor for ActionOutcome();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 104))(v29, v30, v31);
  sub_10002ED08(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v32 = *(void (**)(void))(v0 + 8);
  v32();
}

uint64_t sub_1000B5080()
{
  (*(void (**)(void, void))(v0[31] + 8))(v0[32], v0[30]);
  sub_10002ED08((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000B513C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A2450);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CancelOrPauseInstallAction();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7 - 8);
  sub_1000B5340(a1, (uint64_t)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = swift_allocObject();
  sub_1000B54A8((uint64_t)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10);
  *(void *)(v11 + ((v9 + v10 + 7) & 0xFFFFFFFFFFFFFFF8)) = a2;
  sub_10002EB60((uint64_t *)&unk_1001A21F0);
  swift_retain();
  uint64_t v12 = Promise.__allocating_init()();
  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v6, 1, 1, v13);
  Swift::String v14 = (void *)swift_allocObject();
  v14[2] = 0;
  void v14[3] = 0;
  void v14[4] = &unk_1001A35F0;
  v14[5] = v11;
  v14[6] = v12;
  swift_retain();
  sub_1000F6C04((uint64_t)v6, (uint64_t)&unk_1001A2470, (uint64_t)v14);
  swift_release();
  return v12;
}

uint64_t sub_1000B5340(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CancelOrPauseInstallAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B53A4()
{
  unint64_t v1 = (int *)(type metadata accessor for CancelOrPauseInstallAction() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for ActionMetrics();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);

  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_1000B54A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CancelOrPauseInstallAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B550C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for CancelOrPauseInstallAction() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1 + v5;
  uint64_t v7 = *(void **)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_10002F874;
  return sub_1000B438C(a1, v6, v7);
}

uint64_t sub_1000B561C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000B5664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

void *sub_1000B566C(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for RebootstrapTrigger.AccountState()
{
  return swift_bridgeObjectRelease();
}

void *sub_1000B56A4(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for XPCConnectionOwner.ActiveConnection(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *sub_1000B56F4(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000B5728(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000B5770(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for CodablePreferenceKey()
{
  return sub_1000A9EF4();
}

uint64_t sub_1000B57C4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation();
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  __chkstk_darwin(v3);
  uint64_t v4 = type metadata accessor for OSLogger();
  __chkstk_darwin(v4);
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  uint64_t v5 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v7 = v6;
  a1[3] = (uint64_t)&type metadata for Data;
  uint64_t result = swift_release();
  *a1 = v5;
  a1[1] = v7;
  return result;
}

uint64_t sub_1000B5C48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation();
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  __chkstk_darwin(v7);
  uint64_t v8 = type metadata accessor for OSLogger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = a1;
  sub_100042EB8(a1, (uint64_t)v25);
  if (swift_dynamicCast())
  {
    uint64_t v21 = v8;
    uint64_t v13 = v23;
    unint64_t v12 = v24;
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, 0, 1, a2);
    swift_release();
    return sub_1000B6358(v13, v12);
  }
  else
  {
    uint64_t v22 = a3;
    if (qword_1001A0E60 != -1) {
      swift_once();
    }
    uint64_t v14 = sub_10002F6AC(v8, (uint64_t)qword_1001AE368);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v14, v8);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CD00;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v15._object = (void *)0x800000010015D520;
    v15._uint64_t countAndFlagsBits = 0xD000000000000011;
    LogMessage.StringInterpolation.appendLiteral(_:)(v15);
    uint64_t v25[3] = swift_getMetatypeMetadata();
    v25[0] = a2;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_1000709E0((uint64_t)v25);
    v16._uint64_t countAndFlagsBits = 0x6573756163656220;
    v16._object = (void *)0xE800000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v16);
    LogMessage.init(stringInterpolation:)();
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v17._uint64_t countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v17);
    sub_100042EB8(v21, (uint64_t)v25);
    LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
    sub_1000709E0((uint64_t)v25);
    v18._uint64_t countAndFlagsBits = 0x20746F6E20736920;
    v18._object = (void *)0xEC00000061746144;
    LogMessage.StringInterpolation.appendLiteral(_:)(v18);
    LogMessage.init(stringInterpolation:)();
    Logger.error(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(v22, 1, 1, a2);
  }
}

uint64_t sub_1000B62F8@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000B57C4(a1);
}

uint64_t sub_1000B6304@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1000B5C48(a1, *(void *)(a2 + 16), a3);
}

uint64_t sub_1000B630C()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1000B633C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1000B6358(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

unint64_t sub_1000B63B0()
{
  unint64_t result = qword_1001A3678;
  if (!qword_1001A3678)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001A3678);
  }
  return result;
}

void sub_1000B675C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

uint64_t type metadata accessor for CommerceDialogHandler()
{
  return self;
}

uint64_t sub_1000B67F0()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000B6828(uint64_t a1, uint64_t a2)
{
  sub_1000B675C(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1000B6844(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000B6854()
{
  return swift_release();
}

ValueMetadata *type metadata accessor for ContingentOfferActionImplementation()
{
  return &type metadata for ContingentOfferActionImplementation;
}

uint64_t sub_1000B687C()
{
  return sub_10002EDF0(&qword_1001A17D0, &qword_1001A17C8);
}

uint64_t sub_1000B68C0()
{
  uint64_t v0 = type metadata accessor for OSLogger.Subsystem();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OSLogger();
  sub_10002F648(v4, qword_1001A3710);
  sub_10002F6AC(v4, (uint64_t)qword_1001A3710);
  if (qword_1001A0E58 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_10002F6AC(v0, (uint64_t)qword_1001AE350);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return OSLogger.init(subsystem:category:)();
}

uint64_t sub_1000B6A14(uint64_t a1, uint64_t a2, void *a3)
{
  v3[92] = a3;
  v3[91] = a2;
  v3[90] = a1;
  v3[93] = *a3;
  uint64_t v4 = sub_10002EB60(&qword_1001A19B8);
  v3[94] = v4;
  v3[95] = *(void *)(v4 - 8);
  v3[96] = swift_task_alloc();
  sub_10002EB60(&qword_1001A2450);
  v3[97] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Dependency();
  v3[98] = v5;
  v3[99] = *(void *)(v5 - 8);
  v3[100] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for AppOffer();
  v3[101] = v6;
  v3[102] = *(void *)(v6 - 8);
  v3[103] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for App.Kind();
  v3[104] = v7;
  v3[105] = *(void *)(v7 - 8);
  v3[106] = swift_task_alloc();
  type metadata accessor for AdamID();
  v3[107] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for App();
  v3[108] = v8;
  v3[109] = *(void *)(v8 - 8);
  v3[110] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for State();
  v3[111] = v9;
  v3[112] = *(void *)(v9 - 8);
  v3[113] = swift_task_alloc();
  v3[114] = swift_task_alloc();
  uint64_t v10 = sub_10002EB60((uint64_t *)&unk_1001A2160);
  v3[115] = v10;
  v3[116] = *(void *)(v10 - 8);
  v3[117] = swift_task_alloc();
  type metadata accessor for LogMessage.StringInterpolation();
  v3[118] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for OSLogger();
  v3[119] = v11;
  v3[120] = *(void *)(v11 - 8);
  v3[121] = swift_task_alloc();
  return _swift_task_switch(sub_1000B6E28, 0, 0);
}

uint64_t sub_1000B6E28()
{
  uint64_t v146 = v0;
  id v1 = [*(id *)(v0 + 728) organicOffer];
  if (!v1) {
    goto LABEL_20;
  }
  id v2 = v1;
  swift_getObjectType();
  uint64_t v3 = swift_conformsToProtocol2();
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v3) {
    id v5 = v2;
  }
  else {
    id v5 = 0;
  }
  if (!v5)
  {
    swift_unknownObjectRelease();
    goto LABEL_20;
  }
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  swift_unknownObjectRetain();
  uint64_t v8 = v7(ObjectType, v4);
  *(void *)(v0 + 976) = v8;
  swift_unknownObjectRelease_n();
  if (!v8)
  {
LABEL_20:
    if (qword_1001A0DE0 != -1) {
      swift_once();
    }
    uint64_t v21 = *(void *)(v0 + 968);
    uint64_t v22 = *(void *)(v0 + 960);
    uint64_t v23 = *(void *)(v0 + 952);
    unint64_t v24 = *(void **)(v0 + 728);
    uint64_t v25 = *(void *)(v0 + 720);
    uint64_t v26 = sub_10002F6AC(v23, (uint64_t)qword_1001A3710);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v21, v26, v23);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v27._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
    v27._object = (void *)0x800000010015D600;
    LogMessage.StringInterpolation.appendLiteral(_:)(v27);
    id v28 = [v24 id];
    *(void *)(v0 + 672) = sub_10002EE34(0, (unint64_t *)&qword_1001A2110);
    *(void *)(v0 + 648) = v28;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_100034B8C(v0 + 648, &qword_1001A1C50);
    v29._object = (void *)0x800000010015D630;
    v29._uint64_t countAndFlagsBits = 0x100000000000001FLL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v29);
    LogMessage.init(stringInterpolation:)();
    Logger.error(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    uint64_t v30 = enum case for ActionOutcome.unsupported(_:);
    uint64_t v31 = type metadata accessor for ActionOutcome();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 104))(v25, v30, v31);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
    return v32();
  }
  uint64_t v9 = (void *)(v0 + 80);
  uint64_t v10 = (long long *)(v0 + 200);
  id v11 = [*(id *)(v0 + 728) streamlinedOffer];
  if (v11)
  {
    id v12 = v11;
    swift_getObjectType();
    uint64_t v13 = swift_conformsToProtocol2();
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    if (v13) {
      id v15 = v12;
    }
    else {
      id v15 = 0;
    }
    if (v15)
    {
      uint64_t v16 = swift_getObjectType();
      uint64_t v17 = v8;
      Swift::String v18 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 8);
      swift_unknownObjectRetain();
      uint64_t v19 = v18(v16, v14);
      uint64_t v9 = (void *)(v0 + 80);
      uint64_t v8 = v17;
      uint64_t v20 = (void *)v19;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v20 = 0;
    }
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v20 = 0;
  }
  *(void *)(v0 + 984) = v20;
  uint64_t v34 = *(void *)(v0 + 736);
  inject<A, B>(_:from:)();
  sub_10002EB60(&qword_1001A32A0);
  inject<A, B>(_:from:)();
  uint64_t v35 = v34 + qword_1001A53D8;
  swift_beginAccess();
  sub_1000451AC(v35, (uint64_t)v10);
  if (*(void *)(v0 + 224))
  {
    sub_100031C10(v10, v0 + 120);
    uint64_t v36 = *(os_unfair_lock_s **)(*sub_10002EC6C(v9, *(void *)(v0 + 104)) + 16);
    uint64_t v37 = v36 + 4;
    uint64_t v38 = v36 + 6;
    os_unfair_lock_lock(v36 + 6);
    sub_1000BCEA4(v37, v145);
    os_unfair_lock_unlock(v38);
    uint64_t v39 = *(void **)(v0 + 728);
    uint64_t v40 = v145[0];
    id v41 = [v39 iapItemID];
    char v143 = sub_1001198D4(v41, v40);
    swift_bridgeObjectRelease();

    sub_10002EC6C((void *)(v0 + 120), *(void *)(v0 + 144));
    id v42 = [v39 id];
    [v42 int64value];
    AdamID.init(value:)();
    uint64_t v144 = v20;
    uint64_t v124 = (void *)v8;
    uint64_t v130 = v0 + 360;
    uint64_t v131 = v0 + 392;
    uint64_t v133 = v0 + 424;
    uint64_t v137 = v0 + 456;
    uint64_t v140 = v0 + 488;
    uint64_t v141 = (uint64_t *)(v0 + 520);
    uint64_t v129 = v0 + 552;
    uint64_t v126 = v0 + 616;
    uint64_t v127 = v0 + 584;
    uint64_t v43 = *(void *)(v0 + 880);
    uint64_t v44 = *(void *)(v0 + 872);
    uint64_t v138 = *(void *)(v0 + 864);
    uint64_t v45 = *(void *)(v0 + 824);
    uint64_t v46 = *(void *)(v0 + 816);
    uint64_t v135 = *(void *)(v0 + 808);
    uint64_t v47 = v0;
    (*(void (**)(void, void, void))(*(void *)(v0 + 840) + 104))(*(void *)(v0 + 848), enum case for App.Kind.store(_:), *(void *)(v0 + 832));
    App.init(id:kind:)();

    sub_100053098();
    AppStateController.state(forApp:applying:)();
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v135);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v138);
    if (qword_1001A0DE0 != -1) {
      swift_once();
    }
    uint64_t v48 = *(void *)(v0 + 968);
    uint64_t v136 = v48;
    uint64_t v139 = *(void *)(v0 + 960);
    uint64_t v128 = *(void *)(v0 + 912);
    uint64_t v142 = *(uint64_t **)(v0 + 904);
    uint64_t v125 = *(void *)(v0 + 896);
    uint64_t v132 = *(void *)(v0 + 888);
    uint64_t v49 = *(void **)(v0 + 728);
    uint64_t v134 = *(void *)(v0 + 952);
    *(void *)(v0 + 992) = sub_10002F6AC(v134, (uint64_t)qword_1001A3710);
    (*(void (**)(uint64_t))(v139 + 16))(v48);
    *(void *)(v0 + 1000) = sub_10002EB60((uint64_t *)&unk_1001A19E0);
    uint64_t v50 = *(void *)(type metadata accessor for LogMessage() - 8);
    *(void *)(v0 + 1008) = *(void *)(v50 + 72);
    *(_DWORD *)(v0 + 1104) = *(_DWORD *)(v50 + 80);
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v51._uint64_t countAndFlagsBits = 0xD000000000000036;
    v51._object = (void *)0x800000010015D650;
    LogMessage.StringInterpolation.appendLiteral(_:)(v51);
    id v52 = [v49 offerID];
    uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v55 = v54;

    *(void *)(v47 + 640) = &type metadata for String;
    *(void *)(v47 + 616) = v53;
    *(void *)(v47 + 624) = v55;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_100034B8C(v126, &qword_1001A1C50);
    v56._uint64_t countAndFlagsBits = 0x7954726566666F0ALL;
    v56._object = (void *)0xEC000000203A6570;
    LogMessage.StringInterpolation.appendLiteral(_:)(v56);
    id v57 = [v49 offerType];
    type metadata accessor for ASCContingentOfferType(0);
    *(void *)(v47 + 608) = v58;
    *(void *)(v47 + 584) = v57;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_100034B8C(v127, &qword_1001A1C50);
    v59._uint64_t countAndFlagsBits = 0x6C6D61657274730ALL;
    v59._object = (void *)0xEE00203A64656E69;
    LogMessage.StringInterpolation.appendLiteral(_:)(v59);
    *(void *)(v47 + 576) = &type metadata for Bool;
    *(unsigned char *)(v47 + 552) = v144 != 0;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_100034B8C(v129, &qword_1001A1C50);
    v60._object = (void *)0x800000010015D690;
    v60._uint64_t countAndFlagsBits = 0xD000000000000010;
    LogMessage.StringInterpolation.appendLiteral(_:)(v60);
    id v61 = [v49 iapItemID];
    uint64_t v62 = sub_10002EE34(0, (unint64_t *)&qword_1001A1CF0);
    *(void *)(v47 + 384) = v62;
    *(void *)(v47 + 360) = v61;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_100034B8C(v130, &qword_1001A1C50);
    v63._uint64_t countAndFlagsBits = 0xD000000000000017;
    v63._object = (void *)0x800000010015D6B0;
    LogMessage.StringInterpolation.appendLiteral(_:)(v63);
    id v64 = [v49 iapItemName];
    uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v67 = v66;

    *(void *)(v47 + 416) = &type metadata for String;
    *(void *)(v47 + 392) = v65;
    *(void *)(v47 + 400) = v67;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_100034B8C(v131, &qword_1001A1C50);
    v68._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    v68._object = (void *)0x800000010015D6D0;
    LogMessage.StringInterpolation.appendLiteral(_:)(v68);
    id v69 = [v49 iapProductName];
    uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v72 = v71;

    *(void *)(v47 + 448) = &type metadata for String;
    *(void *)(v47 + 424) = v70;
    *(void *)(v47 + 432) = v72;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_100034B8C(v133, &qword_1001A1C50);
    v73._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    v73._object = (void *)0x800000010015D6F0;
    LogMessage.StringInterpolation.appendLiteral(_:)(v73);
    *(void *)(v47 + 480) = &type metadata for Bool;
    *(unsigned char *)(v47 + 456) = v143 & 1;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_100034B8C(v137, &qword_1001A1C50);
    v74._object = (void *)0x800000010015D710;
    v74._uint64_t countAndFlagsBits = 0xD000000000000010;
    LogMessage.StringInterpolation.appendLiteral(_:)(v74);
    id v75 = [v49 id];
    id v76 = [v75 numberValue];

    *(void *)(v47 + 512) = v62;
    *(void *)(v47 + 488) = v76;
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_100034B8C(v140, &qword_1001A1C50);
    v77._uint64_t countAndFlagsBits = 0xD000000000000013;
    v77._object = (void *)0x800000010015D730;
    LogMessage.StringInterpolation.appendLiteral(_:)(v77);
    *(void *)(v47 + 544) = v132;
    Class v78 = sub_100031A88(v141);
    Class v79 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v125 + 16);
    v79(v78, v128, v132);
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_100034B8C((uint64_t)v141, &qword_1001A1C50);
    v80._uint64_t countAndFlagsBits = 0;
    v80._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v80);
    LogMessage.init(stringInterpolation:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v136, v134);
    v79(v142, v128, v132);
    int v81 = (*(uint64_t (**)(uint64_t *, uint64_t))(v125 + 88))(v142, v132);
    if (v81 == enum case for State.downloadable(_:))
    {
      (*(void (**)(void, void))(*(void *)(v47 + 896) + 96))(*(void *)(v47 + 904), *(void *)(v47 + 888));
      swift_bridgeObjectRelease();
      uint64_t v82 = v47;
      Swift::String v83 = v144;
LABEL_37:
      if ((v83 == 0) | v143 & 1)
      {
        uint64_t v84 = *(void *)(v82 + 736);
        id v85 = v124;
        swift_retain();
      }
      else
      {
        uint64_t v98 = *(void *)(v82 + 800);
        uint64_t v99 = *(void *)(v82 + 792);
        uint64_t v100 = v83;
        uint64_t v101 = *(void *)(v82 + 784);
        sub_10002EE34(0, &qword_1001A21D0);
        id v85 = v100;
        inject<A, B>(_:from:)();
        uint64_t v102 = *(void **)(v82 + 704);
        *(void *)(v82 + 712) = [v102 offerContextByAddingFlags:2];
        Dependency.init<A>(satisfying:with:)();
        uint64_t v84 = dispatch thunk of BaseObjectGraph.adding(dependency:)();

        (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v98, v101);
      }
LABEL_52:
      *(void *)(v82 + 1080) = v85;
      *(void *)(v82 + 1072) = v84;
      uint64_t v109 = *(void *)(v82 + 768);
      uint64_t v110 = *(void *)(v82 + 760);
      uint64_t v111 = *(void *)(v82 + 752);
      *(void *)(v82 + 344) = sub_10002EE34(0, (unint64_t *)&qword_1001A17E8);
      *(void *)(v82 + 352) = sub_10002EDF0((unint64_t *)&qword_1001A17F0, (unint64_t *)&qword_1001A17E8);
      *(void *)(v82 + 320) = v85;
      (*(void (**)(uint64_t, void, uint64_t))(v110 + 104))(v109, enum case for ActionDispatcher.MetricsBehavior.notProcessed<A>(_:), v111);
      id v112 = v85;
      uint64_t v113 = (void *)swift_task_alloc();
      *(void *)(v82 + 1088) = v113;
      *uint64_t v113 = v82;
      v113[1] = sub_1000B8FAC;
      uint64_t v114 = *(void *)(v82 + 920);
      uint64_t v115 = *(void *)(v82 + 768);
      uint64_t v116 = *(void *)(v82 + 720);
      return ActionDispatcher.perform(_:withMetrics:asPartOf:)(v116, v82 + 320, v115, v84, v114);
    }
    uint64_t v82 = v47;
    if (v81 != enum case for State.openable(_:))
    {
      Swift::String v83 = v144;
      if (v81 == enum case for State.buyable(_:) || v81 == enum case for State.unknown(_:)) {
        goto LABEL_37;
      }
      uint64_t v103 = *(void *)(v47 + 904);
      uint64_t v104 = *(void *)(v47 + 888);
      id v105 = *(void (**)(uint64_t, uint64_t))(*(void *)(v47 + 896) + 8);
      id v85 = v124;
      v105(v103, v104);
LABEL_51:
      swift_retain();
      uint64_t v84 = *(void *)(v82 + 736);
      goto LABEL_52;
    }
    (*(void (**)(void, void))(*(void *)(v47 + 896) + 96))(*(void *)(v47 + 904), *(void *)(v47 + 888));
    if (v144)
    {
      if ((v143 & 1) == 0)
      {
        uint64_t v86 = *(void *)(v47 + 776);
        uint64_t v87 = *(void *)(v82 + 736);
        sub_10002EB60((uint64_t *)&unk_1001A5E10);
        id v88 = v144;
        inject<A, B>(_:from:)();
        sub_100052538(v82 + 160, v82 + 280);
        uint64_t v89 = swift_allocObject();
        *(void *)(v89 + 16) = v87;
        *(void *)(v89 + 24) = v88;
        sub_100031C10((long long *)(v82 + 280), v89 + 32);
        *(unsigned char *)(v89 + 72) = 1;
        uint64_t v90 = sub_10002EB60((uint64_t *)&unk_1001A21F0);
        id v91 = v88;
        swift_retain();
        uint64_t v92 = Promise.__allocating_init()();
        *(void *)(v82 + 1016) = v92;
        uint64_t v93 = type metadata accessor for TaskPriority();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v93 - 8) + 56))(v86, 1, 1, v93);
        uint64_t v94 = (void *)swift_allocObject();
        v94[2] = 0;
        v94[3] = 0;
        v94[4] = &unk_1001A1E78;
        v94[5] = v89;
        v94[6] = v92;
        swift_retain();
        sub_1000F6C04(v86, (uint64_t)&unk_1001A3738, (uint64_t)v94);
        swift_release();
        unint64_t v95 = sub_100031AEC();
        uint64_t v96 = (void *)swift_task_alloc();
        *(void *)(v82 + 1024) = v96;
        void *v96 = v82;
        v96[1] = sub_1000B82CC;
        uint64_t v97 = *(void *)(v82 + 720);
        return dispatch thunk of Future.then()(v97, v90, v95);
      }
      goto LABEL_50;
    }
    if (v143)
    {
LABEL_50:
      uint64_t v106 = *(void *)(v47 + 904);
      uint64_t v107 = type metadata accessor for AppOpenableDestination();
      uint64_t v108 = *(void (**)(uint64_t, uint64_t))(*(void *)(v107 - 8) + 8);
      id v85 = v124;
      v108(v106, v107);
      goto LABEL_51;
    }
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    id v117 = v124;
    LogMessage.init(stringLiteral:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    id v118 = [v117 bundleID];
    uint64_t v119 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v121 = v120;

    *(void *)(v82 + 1040) = v121;
    uint64_t v122 = swift_task_alloc();
    *(void *)(v82 + 1048) = v122;
    *(void *)(v122 + 16) = v119;
    *(void *)(v122 + 24) = v121;
    id v123 = (void *)swift_task_alloc();
    *(void *)(v82 + 1056) = v123;
    *id v123 = v82;
    v123[1] = sub_1000B87B0;
    return withCheckedContinuation<A>(isolation:function:_:)();
  }
  else
  {
    sub_100034B8C((uint64_t)v10, &qword_1001A1D90);
    sub_10002EB60((uint64_t *)&unk_1001A3320);
    return dispatch thunk of BaseObjectGraph.noMemberFound<A>(toSatisfy:)();
  }
}

uint64_t sub_1000B82CC()
{
  *(void *)(*(void *)v1 + 1032) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    id v2 = sub_1000B85D0;
  }
  else {
    id v2 = sub_1000B8400;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000B8400()
{
  uint64_t v1 = (void *)v0[123];
  id v2 = (void *)v0[122];
  uint64_t v3 = v0[117];
  uint64_t v4 = v0[116];
  uint64_t v5 = v0[115];
  uint64_t v6 = v0[114];
  uint64_t v12 = v0[113];
  uint64_t v7 = v0[112];
  uint64_t v8 = v0[111];

  sub_10002ED08((uint64_t)(v0 + 20));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v9 = type metadata accessor for AppOpenableDestination();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v12, v9);
  sub_10002ED08((uint64_t)(v0 + 15));
  sub_10002ED08((uint64_t)(v0 + 10));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1000B85D0()
{
  uint64_t v1 = (void *)v0[123];
  id v2 = (void *)v0[122];
  uint64_t v3 = v0[117];
  uint64_t v4 = v0[116];
  uint64_t v5 = v0[115];
  uint64_t v6 = v0[114];
  uint64_t v12 = v0[113];
  uint64_t v7 = v0[112];
  uint64_t v8 = v0[111];

  sub_10002ED08((uint64_t)(v0 + 20));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v9 = type metadata accessor for AppOpenableDestination();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v12, v9);
  sub_10002ED08((uint64_t)(v0 + 15));
  sub_10002ED08((uint64_t)(v0 + 10));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1000B87B0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1000B88C8, 0, 0);
}

uint64_t sub_1000B88C8()
{
  uint64_t v1 = (void *)v0[122];
  id v2 = (void *)v0[91];
  swift_bridgeObjectRelease();
  id v3 = [v1 bundleID];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v4 = [v2 iapItemName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v5 = [v1 itemName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v6 = [v2 iapProductName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v7 = objc_allocWithZone((Class)ASCSKPurchaseIntent);
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [v7 initWithBundleId:v8 productIdentifier:v9 appName:v10 productName:v11];
  v0[133] = v12;

  id v13 = [v2 offerType];
  uint64_t v14 = (void *)v0[91];
  if (v13 != (id)1)
  {
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
  }
  id v15 = [v14 offerID];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v18 = v17;

  v19._uint64_t countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v12 setAdditionalBuyParams:v20];

  v0[2] = v0;
  v0[3] = sub_1000B8C40;
  uint64_t v21 = swift_continuation_init();
  v0[30] = _NSConcreteStackBlock;
  v0[31] = 0x40000000;
  v0[32] = sub_1000B944C;
  v0[33] = &unk_100187358;
  v0[34] = v21;
  [v12 send:v0 + 30];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000B8C40()
{
  return _swift_task_switch(sub_1000B8D20, 0, 0);
}

uint64_t sub_1000B8D20()
{
  uint64_t v1 = (void *)v0[122];
  uint64_t v13 = v0[117];
  uint64_t v2 = v0[116];
  NSString v11 = (void *)v0[133];
  uint64_t v12 = v0[115];
  uint64_t v3 = v0[114];
  uint64_t v4 = v0[112];
  uint64_t v5 = v0[111];
  uint64_t v14 = v0[90];
  uint64_t v15 = v0[113];
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.init(stringLiteral:)();
  Logger.info(_:)();

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v13, v12);
  uint64_t v6 = enum case for ActionOutcome.performed(_:);
  uint64_t v7 = type metadata accessor for ActionOutcome();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 104))(v14, v6, v7);
  uint64_t v8 = type metadata accessor for AppOpenableDestination();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v15, v8);
  sub_10002ED08((uint64_t)(v0 + 15));
  sub_10002ED08((uint64_t)(v0 + 10));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  NSString v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1000B8FAC()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 1096) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[95] + 8))(v2[96], v2[94]);
  if (v0)
  {
    uint64_t v3 = sub_1000B9298;
  }
  else
  {
    sub_10002ED08((uint64_t)(v2 + 40));
    uint64_t v3 = sub_1000B9104;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000B9104()
{
  uint64_t v1 = *(void **)(v0 + 984);
  uint64_t v2 = *(void **)(v0 + 976);
  uint64_t v3 = *(void *)(v0 + 936);
  uint64_t v4 = *(void *)(v0 + 928);
  uint64_t v5 = *(void *)(v0 + 920);
  uint64_t v6 = *(void *)(v0 + 912);
  uint64_t v7 = *(void *)(v0 + 896);
  uint64_t v8 = *(void *)(v0 + 888);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_10002ED08(v0 + 120);
  sub_10002ED08(v0 + 80);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  NSString v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_1000B9298()
{
  uint64_t v1 = *(void **)(v0 + 984);
  uint64_t v2 = *(void **)(v0 + 976);
  uint64_t v3 = *(void *)(v0 + 936);
  uint64_t v4 = *(void *)(v0 + 928);
  uint64_t v5 = *(void *)(v0 + 920);
  uint64_t v6 = *(void *)(v0 + 912);
  uint64_t v7 = *(void *)(v0 + 896);
  uint64_t v8 = *(void *)(v0 + 888);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_10002ED08(v0 + 320);
  sub_10002ED08(v0 + 120);
  sub_10002ED08(v0 + 80);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  NSString v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_1000B944C(uint64_t a1)
{
  return _swift_continuation_resume(*(void *)(a1 + 32));
}

uint64_t sub_1000B9454(void **a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A2450);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *a1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  *(void *)(v8 + 24) = a2;
  sub_10002EB60((uint64_t *)&unk_1001A21F0);
  id v9 = v7;
  swift_retain();
  uint64_t v10 = Promise.__allocating_init()();
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v6, 1, 1, v11);
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  void v12[4] = &unk_1001A3730;
  v12[5] = v8;
  v12[6] = v10;
  swift_retain();
  sub_1000F6C04((uint64_t)v6, (uint64_t)&unk_1001A2470, (uint64_t)v12);
  swift_release();
  return v10;
}

uint64_t sub_1000B95C0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B9600(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void **)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  void *v6 = v2;
  v6[1] = sub_100053090;
  return sub_1000B6A14(a1, v5, v4);
}

void sub_1000B96AC(uint64_t a1)
{
  uint64_t v2 = sub_10002EB60(&qword_1001A28A8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v6 + v5, (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  id v7 = objc_allocWithZone((Class)ASCSKInstallSheetStatusUpdateRequest);
  swift_bridgeObjectRetain();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  aBlock[4] = sub_100087100;
  aBlock[5] = v6;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A8768;
  id aBlock[3] = &unk_1001873E8;
  id v9 = _Block_copy(aBlock);
  swift_release();
  id v10 = [v7 initWithAppBundleId:v8 isInstallSheetOpen:1 completionHandler:v9];
  _Block_release(v9);

  [v10 start];
}

void sub_1000B98B0(uint64_t a1)
{
}

uint64_t sub_1000B98B8()
{
  swift_release();

  sub_10002ED08(v0 + 32);

  return _swift_deallocObject(v0, 73, 7);
}

uint64_t sub_1000B9904()
{
  uint64_t v1 = sub_10002EB60(&qword_1001A28A8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000B9998(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000B99A8()
{
  return swift_release();
}

uint64_t sub_1000B99B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2[6] = a1;
  v2[7] = a2;
  type metadata accessor for LogMessage.StringInterpolation();
  v2[8] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for OSLogger();
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  return _swift_task_switch(sub_1000B9A9C, 0, 0);
}

uint64_t sub_1000B9A9C()
{
  if (qword_1001A0DE8 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[5].i64[0];
  uint64_t v1 = v0[5].i64[1];
  uint64_t v3 = v0[4].i64[1];
  int8x16_t v10 = v0[3];
  uint64_t v4 = sub_10002F6AC(v3, (uint64_t)qword_1001A3740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v5._object = (void *)0x800000010015D820;
  v5._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v5);
  v0[2].i64[1] = type metadata accessor for AdamID();
  sub_100031A88(v0[1].i64);
  App.id.getter();
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)v0[1].i64, &qword_1001A1C50);
  v6._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  v6._object = (void *)0x800000010015D840;
  LogMessage.StringInterpolation.appendLiteral(_:)(v6);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  id v7 = (int8x16_t *)swift_task_alloc();
  v0[6].i64[0] = (uint64_t)v7;
  v7[1] = vextq_s8(v10, v10, 8uLL);
  NSString v8 = (void *)swift_task_alloc();
  v0[6].i64[1] = (uint64_t)v8;
  void *v8 = v0;
  v8[1] = sub_1000B9D74;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_1000B9D74()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1000B9E8C, 0, 0);
}

uint64_t sub_1000B9E8C()
{
  sub_10002EC6C(*(void **)(v0 + 56), *(void *)(*(void *)(v0 + 56) + 24));
  dispatch thunk of AppStateController.clearWaiting(forApp:refreshState:)();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000B9F38(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for State();
  void v2[4] = v3;
  uint64_t v2[5] = *(void *)(v3 - 8);
  uint64_t v2[6] = swift_task_alloc();
  uint64_t v4 = sub_10002EB60(&qword_1001A2118);
  v2[7] = v4;
  v2[8] = *(void *)(v4 - 8);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  sub_10002EB60(&qword_1001A37B0);
  v2[13] = swift_task_alloc();
  uint64_t v5 = sub_10002EB60(&qword_1001A37A8);
  v2[14] = v5;
  v2[15] = *(void *)(v5 - 8);
  v2[16] = swift_task_alloc();
  uint64_t v6 = sub_10002EB60(&qword_1001A37C0);
  v2[17] = v6;
  v2[18] = *(void *)(v6 - 8);
  v2[19] = swift_task_alloc();
  return _swift_task_switch(sub_1000BA170, 0, 0);
}

uint64_t sub_1000BA170()
{
  (*(void (**)(void, void, void))(*(void *)(v0 + 120) + 16))(*(void *)(v0 + 128), *(void *)(v0 + 24), *(void *)(v0 + 112));
  sub_100061D9C(&qword_1001A37C8, &qword_1001A37A8);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  int v1 = enum case for State.openable(_:);
  *(_DWORD *)(v0 + 176) = enum case for State.installing(_:);
  *(_DWORD *)(v0 + 180) = v1;
  *(_DWORD *)(v0 + 184) = enum case for State.installed(_:);
  uint64_t v2 = sub_100061D9C(&qword_1001A37D0, &qword_1001A37C0);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000BA2D8;
  uint64_t v4 = *(void *)(v0 + 136);
  uint64_t v5 = *(void *)(v0 + 104);
  return dispatch thunk of AsyncIteratorProtocol.next()(v5, v4, v2);
}

uint64_t sub_1000BA2D8()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(void, void))(v2[18] + 8))(v2[19], v2[17]);
    uint64_t v3 = sub_1000BA8F4;
  }
  else
  {
    uint64_t v3 = sub_1000BA404;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000BA404()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 56);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 64) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 144) + 8))(*(void *)(v0 + 152), *(void *)(v0 + 136));
    uint64_t v3 = 1;
LABEL_9:
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 64) + 56))(*(void *)(v0 + 16), v3, 1, *(void *)(v0 + 56));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    Swift::String v27 = *(uint64_t (**)(void))(v0 + 8);
    return v27();
  }
  int v42 = *(_DWORD *)(v0 + 176);
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v44 = *(void *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v40 = *(void *)(v0 + 72);
  uint64_t v41 = *(void *)(v0 + 48);
  uint64_t v7 = *(void *)(v0 + 32);
  sub_1000BCCE8(v1, v4);
  uint64_t v8 = *(int *)(v2 + 48);
  uint64_t v9 = v5 + v8;
  uint64_t v38 = v5 + v8;
  uint64_t v39 = v4 + v8;
  uint64_t v10 = type metadata accessor for App();
  uint64_t v43 = *(void *)(v10 - 8);
  uint64_t v11 = *(void (**)(void))(v43 + 16);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v5, v4, v10);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v12(v9, v39, v7);
  uint64_t v13 = v44 + *(int *)(v2 + 48);
  v11();
  v12(v13, v38, v7);
  uint64_t v14 = v44;
  uint64_t v45 = v10;
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v40, v14, v10);
  uint64_t v15 = v13;
  uint64_t v16 = v40 + *(int *)(v2 + 48);
  v12(v16, v13, v7);
  v12(v41, v16, v7);
  sub_100034B8C(v40, &qword_1001A2118);
  int v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 88))(v41, v7);
  if (v17 == v42)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 40) + 96))(*(void *)(v0 + 48), *(void *)(v0 + 32));
    uint64_t v18 = type metadata accessor for AppInstallation();
LABEL_7:
    (*(void (**)(void))(*(void *)(v18 - 8) + 8))(*(void *)(v0 + 48));
LABEL_8:
    uint64_t v19 = *(void *)(v0 + 144);
    uint64_t v20 = *(void *)(v0 + 152);
    uint64_t v21 = *(void *)(v0 + 136);
    uint64_t v22 = *(void *)(v0 + 96);
    uint64_t v23 = *(void *)(v0 + 80);
    uint64_t v24 = *(void *)(v0 + 32);
    uint64_t v25 = *(void *)(v0 + 40);
    uint64_t v26 = *(void *)(v0 + 16);
    sub_100034B8C(*(void *)(v0 + 88), &qword_1001A2118);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v15, v24);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v23, v45);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v21);
    sub_1000BCCE8(v22, v26);
    uint64_t v3 = 0;
    goto LABEL_9;
  }
  if (v17 == *(_DWORD *)(v0 + 180))
  {
    (*(void (**)(void, void))(*(void *)(v0 + 40) + 96))(*(void *)(v0 + 48), *(void *)(v0 + 32));
    uint64_t v18 = type metadata accessor for AppOpenableDestination();
    goto LABEL_7;
  }
  if (v17 == *(_DWORD *)(v0 + 184)) {
    goto LABEL_8;
  }
  uint64_t v30 = *(void *)(v0 + 88);
  uint64_t v29 = *(void *)(v0 + 96);
  uint64_t v31 = *(void *)(v0 + 80);
  uint64_t v32 = *(void *)(v0 + 32);
  uint64_t v33 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 40) + 8);
  v33(*(void *)(v0 + 48), v32);
  sub_100034B8C(v30, &qword_1001A2118);
  v33(v15, v32);
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v31, v45);
  sub_100034B8C(v29, &qword_1001A2118);
  uint64_t v34 = sub_100061D9C(&qword_1001A37D0, &qword_1001A37C0);
  uint64_t v35 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v35;
  *uint64_t v35 = v0;
  v35[1] = sub_1000BA2D8;
  uint64_t v36 = *(void *)(v0 + 136);
  uint64_t v37 = *(void *)(v0 + 104);
  return dispatch thunk of AsyncIteratorProtocol.next()(v37, v36, v34);
}

uint64_t sub_1000BA8F4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000BA9BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = sub_10002EB60(&qword_1001A2450);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BCC80(a1, (uint64_t)v9);
  uint64_t v10 = type metadata accessor for TaskPriority();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_100034B8C((uint64_t)v9, &qword_1001A2450);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v12 = 0;
  uint64_t v14 = 0;
LABEL_6:
  uint64_t v15 = *v4;
  uint64_t v16 = (void *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    uint64_t v16 = v19;
    void v19[2] = v12;
    uint64_t v19[3] = v14;
  }
  v18[1] = 1;
  unint64_t v18[2] = v16;
  v18[3] = v15;
  swift_task_create();
  return swift_release();
}

uint64_t sub_1000BAB94()
{
  uint64_t v0 = type metadata accessor for OSLogger.Subsystem();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OSLogger();
  sub_10002F648(v4, qword_1001A3740);
  sub_10002F6AC(v4, (uint64_t)qword_1001A3740);
  if (qword_1001A0E58 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_10002F6AC(v0, (uint64_t)qword_1001AE350);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return OSLogger.init(subsystem:category:)();
}

uint64_t sub_1000BACE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[20] = a3;
  v4[21] = a4;
  v4[19] = a2;
  type metadata accessor for LogMessage.StringInterpolation();
  v4[22] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OSLogger();
  v4[23] = v5;
  v4[24] = *(void *)(v5 - 8);
  v4[25] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for App();
  v4[26] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[27] = v7;
  v4[28] = *(void *)(v7 + 64);
  v4[29] = swift_task_alloc();
  sub_10002EB60(&qword_1001A2450);
  v4[30] = swift_task_alloc();
  return _swift_task_switch(sub_1000BAE6C, 0, 0);
}

uint64_t sub_1000BAE6C()
{
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v16 = v2;
  uint64_t v3 = *(void *)(v0 + 216);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v6 = *(void *)(v0 + 160);
  uint64_t v5 = *(void *)(v0 + 168);
  uint64_t v17 = type metadata accessor for TaskPriority();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  v18(v2, 1, 1, v17);
  sub_100052538(v6, v0 + 16);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  uint64_t v8 = v1;
  v7(v1, v5, v4);
  uint64_t v9 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = 0;
  *(void *)(v10 + 24) = 0;
  sub_100031C10((long long *)(v0 + 16), v10 + 32);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
  v15(v10 + ((v9 + 72) & ~v9), v8, v4);
  sub_1000BA9BC(v16, (uint64_t)&unk_1001A3778, v10);
  sub_100034B8C(v16, &qword_1001A2450);
  v18(v16, 1, 1, v17);
  v7(v8, v5, v4);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0;
  *(void *)(v11 + 24) = 0;
  v15(v11 + ((v9 + 32) & ~v9), v8, v4);
  sub_1000BA9BC(v16, (uint64_t)&unk_1001A3788, v11);
  sub_100034B8C(v16, &qword_1001A2450);
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 248) = v12;
  uint64_t v13 = sub_10002EB60(&qword_1001A2410);
  void *v12 = v0;
  v12[1] = sub_1000BB12C;
  return ThrowingTaskGroup.next(isolation:)(v0 + 264, 0, 0, v13);
}

uint64_t sub_1000BB12C()
{
  *(void *)(*(void *)v1 + 256) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000BB300;
  }
  else {
    uint64_t v2 = sub_1000BB240;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000BB240()
{
  sub_10002EB60((uint64_t *)&unk_1001A3FC0);
  ThrowingTaskGroup.cancelAll()();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000BB300()
{
  if (qword_1001A0DE8 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[24];
  uint64_t v1 = v0[25];
  uint64_t v3 = v0[23];
  uint64_t v13 = v1;
  uint64_t v4 = sub_10002F6AC(v3, (uint64_t)qword_1001A3740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v5._object = (void *)0x800000010015D870;
  v5._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v5);
  v0[10] = type metadata accessor for AdamID();
  sub_100031A88(v0 + 7);
  App.id.getter();
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)(v0 + 7), &qword_1001A1C50);
  v6._object = (void *)0x800000010015D890;
  v6._uint64_t countAndFlagsBits = 0x1000000000000019;
  LogMessage.StringInterpolation.appendLiteral(_:)(v6);
  swift_getErrorValue();
  uint64_t v8 = v0[15];
  uint64_t v7 = v0[16];
  v0[14] = v7;
  uint64_t v9 = sub_100031A88(v0 + 11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v9, v8, v7);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)(v0 + 11), &qword_1001A1C50);
  v10._uint64_t countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v10);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v13, v3);
  sub_10002EB60((uint64_t *)&unk_1001A3FC0);
  ThrowingTaskGroup.cancelAll()();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_1000BB63C(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  void *v8 = v3;
  v8[1] = sub_10002F874;
  return sub_1000BACE8(a1, a2, v7, v6);
}

uint64_t sub_1000BB6F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[6] = a4;
  v5[7] = a5;
  type metadata accessor for LogMessage.StringInterpolation();
  v5[8] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OSLogger();
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  uint64_t v7 = sub_10002EB60(&qword_1001A37A8);
  v5[12] = v7;
  v5[13] = *(void *)(v7 - 8);
  v5[14] = swift_task_alloc();
  sub_10002EB60(&qword_1001A37B0);
  v5[15] = swift_task_alloc();
  return _swift_task_switch(sub_1000BB86C, 0, 0);
}

uint64_t sub_1000BB86C()
{
  sub_10002EC6C(*(void **)(v0 + 48), *(void *)(*(void *)(v0 + 48) + 24));
  dispatch thunk of AppStateController.onStateChange.getter();
  sub_10002EB60(&qword_1001A28D0);
  sub_100061D9C((unint64_t *)&unk_1001A5A50, &qword_1001A28D0);
  EventEmitter.asyncStream.getter();
  swift_release();
  Swift::String v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1001A37B8 + dword_1001A37B8);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v1;
  void *v1 = v0;
  v1[1] = sub_1000BB998;
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 120);
  return v5(v2, v3);
}

uint64_t sub_1000BB998()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 120);
  uint64_t v2 = *(void *)(*(void *)v0 + 112);
  uint64_t v3 = *(void *)(*(void *)v0 + 104);
  uint64_t v4 = *(void *)(*(void *)v0 + 96);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_100034B8C(v1, &qword_1001A37B0);
  return _swift_task_switch(sub_1000BBB14, 0, 0);
}

uint64_t sub_1000BBB14()
{
  if (qword_1001A0DE8 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  uint64_t v4 = sub_10002F6AC(v3, (uint64_t)qword_1001A3740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v5._object = (void *)0x800000010015D870;
  v5._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v5);
  v0[5] = type metadata accessor for AdamID();
  sub_100031A88(v0 + 2);
  App.id.getter();
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)(v0 + 2), &qword_1001A1C50);
  v6._object = (void *)0x800000010015D8D0;
  v6._uint64_t countAndFlagsBits = 0x1000000000000014;
  LogMessage.StringInterpolation.appendLiteral(_:)(v6);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1000BBD80()
{
  uint64_t v1 = type metadata accessor for App();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 72) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  sub_10002ED08(v0 + 32);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000BBE54(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for App() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + 32;
  uint64_t v8 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_100053090;
  return sub_1000BB6F0(a1, v5, v6, v7, v8);
}

uint64_t sub_1000BBF50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[6] = a4;
  type metadata accessor for LogMessage.StringInterpolation();
  v4[7] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OSLogger();
  v4[8] = v5;
  v4[9] = *(void *)(v5 - 8);
  v4[10] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ContinuousClock();
  v4[11] = v6;
  v4[12] = *(void *)(v6 - 8);
  v4[13] = swift_task_alloc();
  return _swift_task_switch(sub_1000BC098, 0, 0);
}

uint64_t sub_1000BC098()
{
  ContinuousClock.init()();
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1001A3790 + dword_1001A3790);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v1;
  void *v1 = v0;
  v1[1] = sub_1000BC168;
  return v3(0xA055690D9DB80000, 1, 1000000000000000000, 0, 0);
}

uint64_t sub_1000BC168()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 104);
  uint64_t v3 = *(void *)(*(void *)v1 + 96);
  uint64_t v4 = *(void *)(*(void *)v1 + 88);
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    uint64_t v5 = sub_1000BC2D8;
  }
  else {
    uint64_t v5 = sub_1000BC354;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000BC2D8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000BC354()
{
  if (qword_1001A0DE8 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  uint64_t v4 = sub_10002F6AC(v3, (uint64_t)qword_1001A3740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v5._object = (void *)0x800000010015D870;
  v5._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v5);
  v0[5] = type metadata accessor for AdamID();
  sub_100031A88(v0 + 2);
  App.id.getter();
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)(v0 + 2), &qword_1001A1C50);
  v6._object = (void *)0x800000010015D8B0;
  v6._uint64_t countAndFlagsBits = 0x1000000000000014;
  LogMessage.StringInterpolation.appendLiteral(_:)(v6);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1000BC5B4()
{
  uint64_t v1 = type metadata accessor for App();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000BC680(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for App() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_100053090;
  return sub_1000BBF50(a1, v5, v6, v7);
}

uint64_t sub_1000BC76C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant();
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 72) = *(void *)(v12 - 8);
  *(void *)(v6 + 80) = swift_task_alloc();
  *(void *)(v6 + 88) = swift_task_alloc();
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(unsigned char *)(v6 + 32) = a5 & 1;
  return _swift_task_switch(sub_1000BC870, 0, 0);
}

uint64_t sub_1000BC870()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock();
  uint64_t v5 = sub_1000BCC38(&qword_1001A3798, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  dispatch thunk of Clock.now.getter();
  sub_1000BCC38(&qword_1001A37A0, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v6;
  v0[13] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  void *v7 = v0;
  v7[1] = sub_1000BCA10;
  uint64_t v8 = v0[11];
  return dispatch thunk of Clock.sleep(until:tolerance:)(v8, v0 + 2, v4, v5);
}

uint64_t sub_1000BCA10()
{
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *v1;
  *(void *)(v5 + 120) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
  {
    return _swift_task_switch(sub_1000BCBCC, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_1000BCBCC()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000BCC38(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BCC80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A2450);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BCCE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A2118);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BCD50()
{
  uint64_t v0 = type metadata accessor for OSLogger.Subsystem();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OSLogger();
  sub_10002F648(v4, qword_1001A37D8);
  sub_10002F6AC(v4, (uint64_t)qword_1001A37D8);
  if (qword_1001A0E58 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_10002F6AC(v0, (uint64_t)qword_1001AE350);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return OSLogger.init(subsystem:category:)();
}

uint64_t sub_1000BCEA4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

void *sub_1000BCEC4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    sub_10011A478((unint64_t)&_swiftEmptyArrayStorage);
    uint64_t v7 = v14;
  }
  else
  {
    uint64_t v7 = &_swiftEmptySetSingleton;
  }
  sub_10002EB60(&qword_1001A38D0);
  uint64_t v8 = swift_allocObject();
  *(_DWORD *)(v8 + 24) = 0;
  *(void *)(v8 + 16) = v7;
  v1[2] = v8;
  *((_DWORD *)v1 + 6) = 0;
  sub_10002EB60(&qword_1001A38D8);
  swift_allocObject();
  v1[4] = AsyncEvent.init()();
  sub_10002EE34(0, (unint64_t *)&qword_1001A2170);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchQoS.QoSClass.default(_:), v3);
  uint64_t v9 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v10 = swift_allocObject();
  swift_weakInit();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  *(void *)(v11 + 24) = v2;
  aBlock[4] = sub_1000BEEAC;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000BDEC0;
  id aBlock[3] = &unk_100187538;
  uint64_t v12 = _Block_copy(aBlock);
  swift_release();
  swift_beginAccess();
  notify_register_dispatch("com.apple.appstored.IAPInfoDatabaseUpdated", (int *)v1 + 6, v9, v12);
  swift_endAccess();
  _Block_release(v12);

  return v1;
}

uint64_t sub_1000BD184()
{
  sub_10002EB60(&qword_1001A2450);
  __chkstk_darwin();
  uint64_t v1 = (char *)&v7 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0DF0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for OSLogger();
  sub_10002F6AC(v2, (uint64_t)qword_1001A37D8);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.init(stringLiteral:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  uint64_t v3 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v1, 1, 1, v3);
  uint64_t v4 = swift_allocObject();
  swift_beginAccess();
  swift_weakLoadStrong();
  swift_weakInit();
  swift_release();
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = 0;
  void v5[3] = 0;
  void v5[4] = v4;
  sub_1000AA738((uint64_t)v1, (uint64_t)&unk_1001A38E8, (uint64_t)v5);
  return swift_release();
}

uint64_t sub_1000BD3E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a1;
  *(void *)(v4 + 48) = a4;
  return _swift_task_switch(sub_1000BD408, 0, 0);
}

uint64_t sub_1000BD408()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v0 + 56) = Strong;
  if (Strong)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 64) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1000BD4FC;
    return sub_1000BD6B4();
  }
  else
  {
    **(void **)(v0 + 40) = 0;
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
}

uint64_t sub_1000BD4FC(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 72) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1000BD650;
  }
  else
  {
    swift_release();
    *(void *)(v4 + 80) = a1;
    uint64_t v5 = sub_1000BD62C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000BD62C()
{
  **(void **)(v0 + 40) = *(void *)(v0 + 80);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000BD650()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000BD6B4()
{
  v1[15] = v0;
  type metadata accessor for LogMessage.StringInterpolation();
  v1[16] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for OSLogger();
  v1[17] = v2;
  v1[18] = *(void *)(v2 - 8);
  v1[19] = swift_task_alloc();
  return _swift_task_switch(sub_1000BD7A0, 0, 0);
}

uint64_t sub_1000BD7A0()
{
  if (qword_1001A0DF0 != -1) {
    swift_once();
  }
  *(void *)(v0 + 160) = sub_10002F6AC(*(void *)(v0 + 136), (uint64_t)qword_1001A37D8);
  *(void *)(v0 + 168) = sub_10002EB60((uint64_t *)&unk_1001A19E0);
  uint64_t v1 = *(void *)(type metadata accessor for LogMessage() - 8);
  *(void *)(v0 + 176) = *(void *)(v1 + 72);
  *(_DWORD *)(v0 + 208) = *(_DWORD *)(v1 + 80);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.init(stringLiteral:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000BD954;
  return sub_1000BE260();
}

uint64_t sub_1000BD954(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 192) = a1;
  *(void *)(v3 + 200) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_1000BDCC0;
  }
  else {
    uint64_t v4 = sub_1000BDA68;
  }
  return _swift_task_switch(v4, 0, 0);
}

void sub_1000BDA68()
{
  uint64_t v14 = v0;
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[18];
  uint64_t v11 = v0[15];
  uint64_t v12 = v0[25];
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 16))(v2, v0[20], v3);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v5._object = (void *)0x800000010015D9F0;
  v5._uint64_t countAndFlagsBits = 0xD000000000000043;
  LogMessage.StringInterpolation.appendLiteral(_:)(v5);
  v0[9] = sub_10002EB60(&qword_1001A2258);
  v0[6] = v1;
  swift_bridgeObjectRetain();
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_100034B8C((uint64_t)(v0 + 6), &qword_1001A1C50);
  v6._uint64_t countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v6);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  v0[14] = v1;
  AsyncEvent.post(_:)();
  uint64_t v7 = *(void *)(v11 + 16);
  *(void *)(swift_task_alloc() + 16) = v1;
  uint64_t v8 = (os_unfair_lock_s *)(v7 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 24));
  sub_1000BEC58((void *)(v7 + 16), &v13);
  if (v12)
  {
    os_unfair_lock_unlock(v8);
  }
  else
  {
    os_unfair_lock_unlock(v8);
    uint64_t v9 = v13;
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (void (*)(uint64_t))v0[1];
    v10(v9);
  }
}

uint64_t sub_1000BDCC0()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[18];
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 16))(v1, v0[20], v2);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v4._object = (void *)0x800000010015D9B0;
  v4._uint64_t countAndFlagsBits = 0xD00000000000003CLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v4);
  swift_getErrorValue();
  uint64_t v5 = v0[10];
  uint64_t v6 = v0[11];
  v0[5] = v6;
  uint64_t v7 = sub_100031A88(v0 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(v7, v5, v6);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)(v0 + 2), &qword_1001A1C50);
  v8._uint64_t countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v8);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_1000BDEC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t sub_1000BDF14()
{
  swift_beginAccess();
  notify_cancel(*(_DWORD *)(v0 + 24));
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ASDContingentPricingSubscriptionManager()
{
  return self;
}

void sub_1000BDF90(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10002EB60(&qword_1001A38C0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v8 + v7, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_1000BEDA0;
  aBlock[5] = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000BE1BC;
  id aBlock[3] = &unk_1001874C0;
  uint64_t v9 = _Block_copy(aBlock);
  swift_release();
  [a2 getAllIAPsForActiveAccountWithResultHandler:v9];
  _Block_release(v9);
}

uint64_t sub_1000BE138(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_errorRetain();
    sub_10002EB60(&qword_1001A38C0);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_10002EB60(&qword_1001A38C0);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_1000BE1BC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_10002EE34(0, &qword_1001A38C8);
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000BE260()
{
  sub_10002EB60((uint64_t *)&unk_1001A50C0);
  v0[16] = swift_task_alloc();
  uint64_t v1 = type metadata accessor for Date();
  v0[17] = v1;
  v0[18] = *(void *)(v1 - 8);
  v0[19] = swift_task_alloc();
  v0[20] = swift_task_alloc();
  return _swift_task_switch(sub_1000BE35C, 0, 0);
}

uint64_t sub_1000BE35C()
{
  uint64_t v1 = self;
  v0[21] = v1;
  id v2 = [v1 sharedInstance];
  v0[22] = v2;
  v0[2] = v0;
  v0[3] = sub_1000BE47C;
  uint64_t v3 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10008AF84;
  v0[13] = &unk_100187480;
  v0[14] = v3;
  [v2 refreshIAPsForActiveAccountWithCompletionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000BE47C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 184) = v1;
  if (v1) {
    id v2 = sub_1000BEBC0;
  }
  else {
    id v2 = sub_1000BE58C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000BE58C()
{
  uint64_t v1 = *(void **)(v0 + 168);

  id v2 = [v1 sharedInstance];
  *(void *)(v0 + 192) = v2;
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 200) = v3;
  *(void *)(v3 + 16) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 208) = v4;
  uint64_t v5 = sub_10002EB60(&qword_1001A38B0);
  void *v4 = v0;
  v4[1] = sub_1000BE6B4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 120, 0, 0, 0xD000000000000019, 0x800000010015DA40, sub_1000BECAC, v3, v5);
}

uint64_t sub_1000BE6B4()
{
  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = sub_1000BEB2C;
  }
  else
  {
    swift_task_dealloc();
    id v2 = sub_1000BE7D0;
  }
  return _swift_task_switch(v2, 0, 0);
}

void sub_1000BE7D0()
{
  uint64_t v29 = v0;

  unint64_t v1 = *(void *)(v0 + 120);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v2) {
      goto LABEL_3;
    }
LABEL_21:
    swift_bridgeObjectRelease();
LABEL_22:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = *(void (**)(void *))(v0 + 8);
    v21(&_swiftEmptySetSingleton);
    return;
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    goto LABEL_21;
  }
LABEL_3:
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(v0 + 144);
    uint64_t v25 = (void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
    unint64_t v26 = v1 & 0xC000000000000001;
    uint64_t v5 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
    uint64_t v23 = (void (**)(uint64_t, uint64_t))(v4 + 8);
    uint64_t v24 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
    uint64_t v27 = v2;
    uint64_t v22 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
    while (1)
    {
      if (v26) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v6 = *(id *)(v1 + 8 * v3 + 32);
      }
      uint64_t v7 = v6;
      id v8 = [v6 expirationDate];
      if (v8)
      {
        uint64_t v9 = v8;
        unint64_t v10 = v1;
        uint64_t v11 = *(void *)(v0 + 152);
        uint64_t v13 = *(void *)(v0 + 128);
        uint64_t v12 = *(void *)(v0 + 136);
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v14 = *v25;
        uint64_t v15 = v11;
        unint64_t v1 = v10;
        (*v25)(v13, v15, v12);
        (*v5)(v13, 0, 1, v12);
        if ((*v24)(v13, 1, v12) != 1)
        {
          uint64_t v17 = *(void *)(v0 + 152);
          uint64_t v16 = *(void *)(v0 + 160);
          uint64_t v18 = *(void *)(v0 + 136);
          v14(v16, *(void *)(v0 + 128), v18);
          Date.init()();
          sub_1000BECB4();
          char v19 = dispatch thunk of static Comparable.< infix(_:_:)();
          uint64_t v20 = *v23;
          (*v23)(v17, v18);
          v20(v16, v18);
          if (v19)
          {
            unint64_t v1 = v10;
            if ([v7 type] == 2 || objc_msgSend(v7, "type") == 3)
            {
              sub_100097DEC(&v28, [v7 adamId]);

              uint64_t v5 = v22;
            }
            else
            {

              uint64_t v5 = v22;
            }
          }
          else
          {

            unint64_t v1 = v10;
            uint64_t v5 = v22;
          }
          goto LABEL_7;
        }
      }
      else
      {
        (*v5)(*(void *)(v0 + 128), 1, 1, *(void *)(v0 + 136));
      }
      sub_100034B8C(*(void *)(v0 + 128), (uint64_t *)&unk_1001A50C0);

LABEL_7:
      if (v27 == ++v3)
      {
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
    }
  }
  __break(1u);
}

uint64_t sub_1000BEB2C()
{
  swift_task_dealloc();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000BEBC0()
{
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000BEC58@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  swift_bridgeObjectRelease();
  *a1 = v5;
  *a2 = v5;
  return swift_bridgeObjectRetain_n();
}

void sub_1000BECAC(uint64_t a1)
{
  sub_1000BDF90(a1, *(void **)(v1 + 16));
}

unint64_t sub_1000BECB4()
{
  unint64_t result = qword_1001A38B8;
  if (!qword_1001A38B8)
  {
    type metadata accessor for Date();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001A38B8);
  }
  return result;
}

uint64_t sub_1000BED0C()
{
  uint64_t v1 = sub_10002EB60(&qword_1001A38C0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000BEDA0(uint64_t a1, uint64_t a2)
{
  sub_10002EB60(&qword_1001A38C0);

  return sub_1000BE138(a1, a2);
}

uint64_t sub_1000BEE24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000BEE34()
{
  return swift_release();
}

uint64_t sub_1000BEE3C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000BEE74()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000BEEAC()
{
  return sub_1000BD184();
}

uint64_t sub_1000BEEB4()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000BEEF4(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10002F874;
  v5[5] = a1;
  void v5[6] = v4;
  return _swift_task_switch(sub_1000BD408, 0, 0);
}

uint64_t sub_1000BEFAC()
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v0 = type metadata accessor for OS_dispatch_source.MemoryPressureEvent();
  uint64_t v36 = *(void *)(v0 - 8);
  uint64_t v37 = v0;
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v5 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  v34[0] = v6;
  uint64_t v40 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002EE34(0, &qword_1001A3A28);
  sub_10002EE34(0, (unint64_t *)&qword_1001A2170);
  uint64_t v9 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v10 = static OS_dispatch_source.makeSignalSource(signal:queue:)();

  swift_getObjectType();
  uint64_t v46 = sub_1000BFAA8;
  uint64_t v47 = 0;
  aBlock = _NSConcreteStackBlock;
  uint64_t v43 = 1107296256;
  uint64_t v44 = sub_1000C1A88;
  uint64_t v45 = &unk_1001875A8;
  uint64_t v11 = _Block_copy(&aBlock);
  static DispatchQoS.unspecified.getter();
  sub_1000BFBD0();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v11);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  v34[1] = v3 + 8;
  uint64_t v35 = v12;
  v12(v5, v41);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v40 + 8);
  v13(v8, v6);
  uint64_t v40 = v10;
  OS_dispatch_source.resume()();
  static OS_dispatch_source.MemoryPressureEvent.warning.getter();
  static OS_dispatch_source.makeMemoryPressureSource(eventMask:queue:)();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v2, v37);
  swift_getObjectType();
  uint64_t v14 = swift_allocObject();
  uint64_t v15 = v38;
  swift_unknownObjectWeakInit();
  uint64_t v16 = swift_allocObject();
  uint64_t v17 = ObjectType;
  *(void *)(v16 + 16) = v14;
  *(void *)(v16 + 24) = v17;
  uint64_t v46 = sub_1000C0AB0;
  uint64_t v47 = v16;
  aBlock = _NSConcreteStackBlock;
  uint64_t v43 = 1107296256;
  uint64_t v44 = sub_1000C1A88;
  uint64_t v45 = &unk_100187620;
  uint64_t v18 = _Block_copy(&aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  sub_1000BFBD0();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v18);
  v35(v5, v41);
  v13(v8, v34[0]);
  swift_release();
  swift_release();
  OS_dispatch_source.resume()();
  JSRemoteInspectorSetInspectionEnabledByDefault();
  [self setFlushDelayEnabled:1];
  setenv("JSC_criticalGCMemoryThreshold", "0.25", 1);
  uint64_t v20 = *(void *)(v15 + OBJC_IVAR____TtC19appstorecomponentsd6Daemon_session);
  uint64_t v21 = *(void **)(v20 + OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_stateLock);
  [v21 lock];
  sub_1000B3330(v20);
  [v21 unlock];
  [*(id *)(v15 + OBJC_IVAR____TtC19appstorecomponentsd6Daemon_listener) resume];
  uint64_t v22 = *(void **)(v15 + OBJC_IVAR____TtC19appstorecomponentsd6Daemon_widgetEventListener);
  id v23 = objc_allocWithZone((Class)CHSWidgetEventServiceListener);
  uint64_t v24 = v22;
  NSString v25 = String._bridgeToObjectiveC()();
  id v26 = [v23 initWithServiceDomain:v25 delegate:v24];

  uint64_t v27 = OBJC_IVAR____TtC19appstorecomponentsd19WidgetEventListener_listener;
  id v28 = *(void **)&v24[OBJC_IVAR____TtC19appstorecomponentsd19WidgetEventListener_listener];
  *(void *)&v24[OBJC_IVAR____TtC19appstorecomponentsd19WidgetEventListener_listener] = v26;

  uint64_t v29 = *(void **)&v24[v27];
  if (v29) {
    [v29 activate];
  }
  if (qword_1001A0EA0 != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for OSLogger();
  sub_10002F6AC(v30, (uint64_t)qword_1001AE430);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.init(stringLiteral:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  _CFRunLoopSetPerCalloutAutoreleasepoolEnabled();
  do
  {
    CFRunLoopRunResult v32 = CFRunLoopRunInMode(kCFRunLoopDefaultMode, 15.0, 1u);
  }
  while ((v32 - 1) > 1);
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

NSString sub_1000BF6AC()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_1001AE2F8 = (uint64_t)result;
  return result;
}

char *sub_1000BF6E4()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = OBJC_IVAR____TtC19appstorecomponentsd6Daemon_keepAlive;
  *(void *)&v0[OBJC_IVAR____TtC19appstorecomponentsd6Daemon_keepAlive] = 0;
  uint64_t v4 = v0;
  sub_100020A78((uint64_t)"Startup");
  [self setDefaultMediaTypeForCurrentProcess:AMSAccountMediaTypeProduction];
  *(void *)&v4[OBJC_IVAR____TtC19appstorecomponentsd6Daemon_dialogHandler] = [objc_allocWithZone((Class)type metadata accessor for CommerceDialogHandler()) init];
  id v5 = objc_allocWithZone((Class)NSXPCListener);
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 initWithMachServiceName:v6];

  *(void *)&v4[OBJC_IVAR____TtC19appstorecomponentsd6Daemon_listener] = v7;
  type metadata accessor for XPCConnectionOwner();
  id v8 = (void *)swift_allocObject();
  void v8[5] = 0;
  swift_unknownObjectWeakInit();
  v8[2] = [objc_allocWithZone((Class)JEUnfairLock) init];
  v8[3] = _swiftEmptyArrayStorage;
  *(void *)&v4[OBJC_IVAR____TtC19appstorecomponentsd6Daemon_connections] = v8;
  uint64_t v9 = (char *)[objc_allocWithZone((Class)type metadata accessor for BootstrapSession()) init];
  *(void *)&v4[OBJC_IVAR____TtC19appstorecomponentsd6Daemon_session] = v9;
  type metadata accessor for ShutdownTimer();
  swift_allocObject();
  *(void *)&v4[OBJC_IVAR____TtC19appstorecomponentsd6Daemon_shutdownTimer] = sub_1001318C0((uint64_t)sub_1000C02D4, 0, 0.0);
  uint64_t v10 = *(void **)&v9[OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_stateLock];
  [v10 lock];
  unint64_t v11 = *(void *)&v9[OBJC_IVAR____TtC19appstorecomponentsd16BootstrapSession_bootstrapState];
  if ((v11 >> 62) - 2 < 2)
  {
    uint64_t v12 = sub_1000B2860();
LABEL_6:
    unint64_t v11 = v12;
    goto LABEL_7;
  }
  if (v11 >> 62)
  {
    sub_10002EB60(&qword_1001A3A20);
    swift_retain();
    uint64_t v12 = Promise.__allocating_init(value:)();
    goto LABEL_6;
  }
  swift_retain();
LABEL_7:
  [v10 unlock];
  uint64_t v13 = (objc_class *)type metadata accessor for WidgetEventListener();
  uint64_t v14 = (char *)objc_allocWithZone(v13);
  *(void *)&v14[OBJC_IVAR____TtC19appstorecomponentsd19WidgetEventListener_listener] = 0;
  *(void *)&v14[OBJC_IVAR____TtC19appstorecomponentsd19WidgetEventListener_objectGraph] = v11;
  v26.receiver = v14;
  v26.super_class = v13;
  *(void *)&v4[OBJC_IVAR____TtC19appstorecomponentsd6Daemon_widgetEventListener] = objc_msgSendSuper2(&v26, "init");
  *(void *)&v1[v3] = 0;

  swift_unknownObjectRelease();
  v25.receiver = v4;
  v25.super_class = ObjectType;
  uint64_t v15 = (char *)objc_msgSendSuper2(&v25, "init");
  uint64_t v16 = OBJC_IVAR____TtC19appstorecomponentsd6Daemon_listener;
  uint64_t v17 = *(void **)&v15[OBJC_IVAR____TtC19appstorecomponentsd6Daemon_listener];
  sub_10002EE34(0, (unint64_t *)&qword_1001A2170);
  uint64_t v18 = v15;
  id v19 = v17;
  uint64_t v20 = (void *)static OS_dispatch_queue.main.getter();
  [v19 _setQueue:v20];

  [*(id *)&v15[v16] setDelegate:v18];
  uint64_t v21 = *(void *)&v18[OBJC_IVAR____TtC19appstorecomponentsd6Daemon_connections];
  uint64_t v22 = *(void **)(v21 + 16);
  id v23 = v18;
  swift_retain();
  [v22 lock];
  *(void *)(v21 + 40) = &off_100187588;
  swift_unknownObjectWeakAssign();
  [v22 unlock];
  swift_release();

  return v23;
}

void sub_1000BFAA8()
{
  if (qword_1001A0E60 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for OSLogger();
  sub_10002F6AC(v0, (uint64_t)qword_1001AE368);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.init(stringLiteral:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  exit(0);
}

uint64_t sub_1000BFBD0()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_1000BFC50(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a2;
  uint64_t v21 = a1;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v22 = *(void *)(v5 - 8);
  uint64_t v23 = v5;
  __chkstk_darwin(v5);
  id v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OSSignpostID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0E60 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for OSLogger();
  sub_10002F6AC(v12, (uint64_t)qword_1001AE368);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.init(stringLiteral:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  static os_signpost_type_t.event.getter();
  sub_10002EE34(0, (unint64_t *)&unk_1001A3180);
  uint64_t v13 = (void *)static OS_os_log.default.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  sub_10002EE34(0, (unint64_t *)&qword_1001A2170);
  uint64_t v14 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v15 = swift_allocObject();
  uint64_t v16 = v20;
  *(void *)(v15 + 16) = v21;
  *(void *)(v15 + 24) = v16;
  aBlock[4] = sub_1000C0AF0;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000C1A88;
  id aBlock[3] = &unk_100187670;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = &_swiftEmptyArrayStorage;
  sub_1000A8E90();
  sub_10002EB60((uint64_t *)&unk_1001A31A0);
  sub_1000A5E6C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v4, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v7, v23);
}

void sub_1000C00E4()
{
  id v0 = [self defaultCenter];
  if (qword_1001A0DF8 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_1001AE2F8;
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  [v0 postNotificationName:v1 object:Strong];
}

uint64_t type metadata accessor for Daemon()
{
  return self;
}

void sub_1000C02D4()
{
  if (qword_1001A0E60 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for OSLogger();
  sub_10002F6AC(v0, (uint64_t)qword_1001AE368);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.init(stringLiteral:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  uint64_t v1 = CFRunLoopGetMain();
  CFRunLoopStop(v1);

  exit(0);
}

BOOL sub_1000C0414(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for OSLogger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = a1;
  uint64_t v10 = sub_10013DB10(v9);
  if (v10)
  {
    sub_1001316AC();
    uint64_t v11 = OBJC_IVAR____TtC19appstorecomponentsd6Daemon_keepAlive;
    if (!*(void *)(v2 + OBJC_IVAR____TtC19appstorecomponentsd6Daemon_keepAlive))
    {
      *(void *)(v2 + v11) = os_transaction_create();
      swift_unknownObjectRelease();
    }
    uint64_t v12 = *(void **)(v2 + OBJC_IVAR____TtC19appstorecomponentsd6Daemon_session);
    uint64_t v13 = type metadata accessor for BootstrapSession();
    uint64_t v33 = v13;
    uint64_t v34 = &off_100187050;
    v32[0] = v12;
    uint64_t v14 = (objc_class *)type metadata accessor for ServiceBrokerClient();
    id v15 = objc_allocWithZone(v14);
    uint64_t v16 = sub_10002FE00((uint64_t)v32, v13);
    __chkstk_darwin(v16);
    uint64_t v18 = (uint64_t *)((char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v19 + 16))(v18);
    uint64_t v20 = *v18;
    v31[3] = v13;
    void v31[4] = &off_100187050;
    v31[0] = v20;
    sub_100052538((uint64_t)v31, (uint64_t)v15 + OBJC_IVAR____TtC19appstorecomponentsd19ServiceBrokerClient_session);
    v30.receiver = v15;
    v30.super_class = v14;
    id v21 = v12;
    id v22 = objc_msgSendSuper2(&v30, "init");
    sub_10002ED08((uint64_t)v31);
    sub_10002ED08((uint64_t)v32);

    id v23 = v22;
    id v24 = sub_100029328();
    sub_10013CF0C((uint64_t)v23, (uint64_t)v24, v10);

    [v10 resume];
  }
  else
  {
    if (qword_1001A0E60 != -1) {
      swift_once();
    }
    uint64_t v25 = sub_10002F6AC(v5, (uint64_t)qword_1001AE368);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v25, v5);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v26._uint64_t countAndFlagsBits = 0xD000000000000032;
    v26._object = (void *)0x800000010015DBF0;
    LogMessage.StringInterpolation.appendLiteral(_:)(v26);
    uint64_t v33 = sub_10002EE34(0, &qword_1001A3A18);
    v32[0] = v9;
    id v27 = v9;
    LogMessage.StringInterpolation.appendInterpolation(sensitive:)();
    sub_1000709E0((uint64_t)v32);
    v28._uint64_t countAndFlagsBits = 0;
    v28._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v28);
    LogMessage.init(stringInterpolation:)();
    Logger.error(_:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return v10 != 0;
}

uint64_t sub_1000C08B4()
{
  id v1 = [self daemonDefaults];
  unsigned __int8 v2 = [v1 disableShutdownTimer];

  if ((v2 & 1) == 0)
  {
    if (qword_1001A0E60 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for OSLogger();
    sub_10002F6AC(v4, (uint64_t)qword_1001AE368);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.init(stringLiteral:)();
    Logger.info(_:)();
    swift_bridgeObjectRelease();
    uint64_t v5 = CFRunLoopGetMain();
    CFRunLoopStop(v5);

    exit(0);
  }
  *(void *)(v0 + OBJC_IVAR____TtC19appstorecomponentsd6Daemon_keepAlive) = 0;

  return swift_unknownObjectRelease();
}

uint64_t sub_1000C0A60(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000C0A70()
{
  return swift_release();
}

uint64_t sub_1000C0A78()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000C0AB0()
{
  return sub_1000BFC50(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000C0AB8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000C0AF0()
{
}

uint64_t sub_1000C0B0C()
{
  id v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v1[2] + 16))
  {
    sub_10002EB60(&qword_1001A2880);
    uint64_t v8 = swift_allocObject();
    long long v20 = xmmword_10014CED0;
    *(_OWORD *)(v8 + 16) = xmmword_10014CED0;
    static DispatchWorkItemFlags.barrier.getter();
    uint64_t v21 = v8;
    sub_1000C749C((unint64_t *)&qword_1001A2888, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10002EB60((uint64_t *)&unk_1001A31A0);
    sub_100061D9C((unint64_t *)&qword_1001A2890, (uint64_t *)&unk_1001A31A0);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    sub_10002EB60(&qword_1001A3BD0);
    OS_dispatch_queue.sync<A>(flags:execute:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v9 = v22;
    if (v21 == 1)
    {
      if (qword_1001A0E80 != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for OSLogger();
      sub_10002F6AC(v10, (uint64_t)qword_1001AE3C8);
      sub_10002EB60((uint64_t *)&unk_1001A19E0);
      type metadata accessor for LogMessage();
      *(_OWORD *)(swift_allocObject() + 16) = v20;
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v11._uint64_t countAndFlagsBits = 0;
      v11._object = (void *)0xE000000000000000;
      LogMessage.StringInterpolation.appendLiteral(_:)(v11);
      LogMessage.StringInterpolation.appendInterpolation(identity:)();
      v12._object = (void *)0x800000010015DFC0;
      v12._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v12);
      LogMessage.init(stringInterpolation:)();
      Logger.info(_:)();
      swift_bridgeObjectRelease();
      type metadata accessor for DefaultAppStateController.DataSourceLoadObserver();
      uint64_t v13 = (void *)swift_allocObject();
      id v13[2] = [objc_allocWithZone((Class)JEUnfairLock) init];
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
        && _CocoaArrayWrapper.endIndex.getter())
      {
        sub_10011A45C((unint64_t)_swiftEmptyArrayStorage);
      }
      else
      {
        uint64_t v14 = &_swiftEmptySetSingleton;
      }
      v13[3] = v14;
      swift_retain();
      uint64_t v15 = swift_bridgeObjectRetain();
      uint64_t v16 = sub_1000C70AC(v15, v13);
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v17 = (void *)swift_allocObject();
      id v17[2] = v1;
      v17[3] = v16;
      void v17[4] = v13;
      void v17[5] = v9;
      swift_retain();
      swift_retain();
      swift_retain();
      sub_1000C35A8((uint64_t)sub_1000C7354, (uint64_t)v17, 30.0);
      swift_release();
      swift_release();
    }
  }
  else
  {
    unint64_t v18 = v1[9];
    v1[9] = 1;
    sub_1000C7360(v18);
    sub_10002EB60(&qword_1001A3BD8);
    uint64_t v23 = v2;
    id v24 = &off_100187728;
    uint64_t v21 = (uint64_t)v1;
    swift_retain();
    return Promise.__allocating_init(value:)();
  }
  return v9;
}

uint64_t sub_1000C1020(uint64_t a1, char a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DispatchQoS();
  uint64_t v15 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v17 = (char *)v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[1] = *(void *)(v5 + 64);
  uint64_t v18 = *(void *)(v5 + 16);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v18;
  *(void *)(v19 + 24) = a3;
  *(void *)(v19 + 32) = a4;
  *(void *)(v19 + 40) = a1;
  *(unsigned char *)(v19 + 48) = a2;
  *(double *)(v19 + 56) = a5;
  aBlock[4] = sub_1000C4F4C;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000C1A88;
  id aBlock[3] = &unk_1001877D8;
  long long v20 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  id v24 = _swiftEmptyArrayStorage;
  sub_1000C749C((unint64_t *)&qword_1001A2888, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10002EB60((uint64_t *)&unk_1001A31A0);
  sub_100061D9C((unint64_t *)&qword_1001A2890, (uint64_t *)&unk_1001A31A0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v23);
  return swift_release();
}

uint64_t sub_1000C1318(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v24 = type metadata accessor for DispatchQoS();
  uint64_t v4 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v22 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002EB60(&qword_1001A2880);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_10014CED0;
  static DispatchWorkItemFlags.barrier.getter();
  aBlock[0] = v10;
  uint64_t v11 = sub_1000C749C((unint64_t *)&qword_1001A2888, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v12 = sub_10002EB60((uint64_t *)&unk_1001A31A0);
  v21[1] = sub_100061D9C((unint64_t *)&qword_1001A2890, (uint64_t *)&unk_1001A31A0);
  void v21[2] = v12;
  uint64_t v23 = v11;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v25 = a1;
  uint64_t v26 = v2;
  sub_10002EB60(&qword_1001A3BC0);
  OS_dispatch_queue.sync<A>(flags:execute:)();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v7 + 8);
  v13(v9, v6);
  uint64_t v14 = aBlock[0];
  if ((aBlock[0] & 0xC000000000000001) != 0)
  {
    if (__CocoaSet.count.getter())
    {
LABEL_3:
      uint64_t v15 = *(void *)(v2 + 16);
      uint64_t v16 = (void *)swift_allocObject();
      void v16[2] = v15;
      v16[3] = v14;
      void v16[4] = a1;
      aBlock[4] = sub_1000C7044;
      aBlock[5] = v16;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000C1A88;
      id aBlock[3] = &unk_100187850;
      uint64_t v17 = _Block_copy(aBlock);
      uint64_t v18 = v22;
      uint64_t v19 = v17;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      static DispatchQoS.unspecified.getter();
      id v27 = _swiftEmptyArrayStorage;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v19);
      v13(v9, v6);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v18, v24);
      return swift_release();
    }
  }
  else if (*(void *)(aBlock[0] + 16))
  {
    goto LABEL_3;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000C16FC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = v4;
  int v15 = a4;
  uint64_t v14 = a3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002EB60(&qword_1001A2880);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_10014CED0;
  static DispatchWorkItemFlags.barrier.getter();
  uint64_t v21 = v12;
  sub_1000C749C((unint64_t *)&qword_1001A2888, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10002EB60((uint64_t *)&unk_1001A31A0);
  sub_100061D9C((unint64_t *)&qword_1001A2890, (uint64_t *)&unk_1001A31A0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v16 = v5;
  uint64_t v17 = a1;
  uint64_t v18 = a2;
  uint64_t v19 = v14;
  char v20 = v15;
  OS_dispatch_queue.sync<A>(flags:execute:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v21;
}

uint64_t sub_1000C1918(uint64_t a1, uint64_t a2)
{
  OS_dispatch_queue.sync<A>(execute:)();
  if (((1 << v16) & 0x72) == 0)
  {
    if (((1 << v16) & 0xC) != 0)
    {
      sub_10004282C(v14, v15, v16);
    }
    else
    {
      uint64_t result = sub_100067564(v14, a2);
      if (result) {
        return result;
      }
    }
  }
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = v7 - 1;
    uint64_t v9 = (uint64_t *)(v6 + 40);
    do
    {
      uint64_t v10 = v8;
      uint64_t v11 = *v9;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 48);
      swift_unknownObjectRetain();
      LOBYTE(v11) = v13(a1, a2, ObjectType, v11);
      swift_unknownObjectRelease();
      if (v11) {
        break;
      }
      uint64_t v8 = v10 - 1;
      v9 += 2;
    }
    while (v10);
    swift_bridgeObjectRelease();
  }
  return sub_1000C16FC(a1, a2, 0, 0);
}

uint64_t sub_1000C1A88(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

void sub_1000C1ACC(unint64_t a1)
{
  unint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_10007AC00();
    sub_1000C749C((unint64_t *)&qword_1001A1CB0, (void (*)(uint64_t))sub_10007AC00);
    Set.Iterator.init(_cocoa:)();
    unint64_t v1 = (unint64_t)v17[1];
    char v16 = v17[2];
    uint64_t v2 = (uint64_t)v17[3];
    id v3 = v17[4];
    unint64_t v4 = (unint64_t)v17[5];
  }
  else
  {
    id v3 = 0;
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    char v16 = (void *)(a1 + 56);
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
  }
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  if ((v1 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v4)
    {
      uint64_t v9 = (v4 - 1) & v4;
      unint64_t v10 = __clz(__rbit64(v4)) | ((void)v3 << 6);
      uint64_t v11 = (char *)v3;
      goto LABEL_29;
    }
    uint64_t v13 = (uint64_t)v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v13 >= v8) {
      goto LABEL_32;
    }
    unint64_t v14 = v16[v13];
    uint64_t v11 = (char *)v3 + 1;
    if (!v14)
    {
      uint64_t v11 = (char *)v3 + 2;
      if ((uint64_t)v3 + 2 >= v8) {
        goto LABEL_32;
      }
      unint64_t v14 = v16[(void)v11];
      if (!v14)
      {
        uint64_t v11 = (char *)v3 + 3;
        if ((uint64_t)v3 + 3 >= v8) {
          goto LABEL_32;
        }
        unint64_t v14 = v16[(void)v11];
        if (!v14)
        {
          uint64_t v11 = (char *)v3 + 4;
          if ((uint64_t)v3 + 4 >= v8) {
            goto LABEL_32;
          }
          unint64_t v14 = v16[(void)v11];
          if (!v14)
          {
            uint64_t v11 = (char *)v3 + 5;
            if ((uint64_t)v3 + 5 >= v8) {
              goto LABEL_32;
            }
            unint64_t v14 = v16[(void)v11];
            if (!v14)
            {
              uint64_t v15 = (char *)v3 + 6;
              while ((char *)v8 != v15)
              {
                unint64_t v14 = v16[(void)v15++];
                if (v14)
                {
                  uint64_t v11 = v15 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              sub_100034EF8();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v9 = (v14 - 1) & v14;
    unint64_t v10 = __clz(__rbit64(v14)) + ((void)v11 << 6);
LABEL_29:
    id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_32;
    }
    while (1)
    {
      sub_10009812C(v17, v12);

      id v3 = v11;
      unint64_t v4 = v9;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        sub_10007AC00();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v12 = v17[0];
        swift_unknownObjectRelease();
        uint64_t v11 = (char *)v3;
        uint64_t v9 = v4;
        if (v12) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

void sub_1000C1D80(uint64_t a1)
{
  int64_t v2 = 0;
  uint64_t v3 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    int64_t v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return;
    }
    if (v10 >= v7) {
      goto LABEL_23;
    }
    unint64_t v11 = *(void *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      int64_t v2 = v10 + 1;
      if (v10 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v11 = *(void *)(v3 + 8 * v2);
      if (!v11)
      {
        int64_t v2 = v10 + 2;
        if (v10 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        if (!v11)
        {
          int64_t v2 = v10 + 3;
          if (v10 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v11 = *(void *)(v3 + 8 * v2);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    sub_10009812C(&v13, *(id *)(*(void *)(a1 + 48) + 8 * v9));
  }
  int64_t v12 = v10 + 4;
  if (v12 < v7)
  {
    unint64_t v11 = *(void *)(v3 + 8 * v12);
    if (!v11)
    {
      while (1)
      {
        int64_t v2 = v12 + 1;
        if (__OFADD__(v12, 1)) {
          goto LABEL_27;
        }
        if (v2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        ++v12;
        if (v11) {
          goto LABEL_22;
        }
      }
    }
    int64_t v2 = v12;
    goto LABEL_22;
  }
LABEL_23:

  swift_release();
}

uint64_t sub_1000C1EEC()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

id sub_1000C1F2C()
{
  unint64_t v1 = *(void **)(*(void *)v0 + 16);
  [v1 lock];
  swift_beginAccess();
  unint64_t v2 = swift_bridgeObjectRetain();
  sub_1000C1ACC(v2);
  swift_endAccess();
  return [v1 unlock];
}

uint64_t sub_1000C1FB0@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(void *)(result + 72) == 1;
  return result;
}

uint64_t sub_1000C1FC4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for LogMessage.StringInterpolation();
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  id v13 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  id v69 = (char *)&v62 - v15;
  __chkstk_darwin(v14);
  uint64_t v65 = (char *)&v62 - v16;
  uint64_t v66 = type metadata accessor for OSLogger();
  uint64_t v68 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v67 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = v4 + 32;
  swift_beginAccess();
  uint64_t v18 = *(void *)(v4 + 32);
  uint64_t v19 = *(void *)(v18 + 16);
  id v71 = a1;
  if (v19)
  {
    id v20 = a1;
    unint64_t v21 = sub_10003A9B4((uint64_t)v20);
    if (v22)
    {
      uint64_t v23 = *(void *)(v18 + 56) + 24 * v21;
      uint64_t v24 = *(void *)v23;
      uint64_t v25 = *(void *)(v23 + 8);
      uint64_t v26 = *(unsigned __int8 *)(v23 + 16);
      sub_100042814(*(void *)v23, v25, *(unsigned char *)(v23 + 16));
    }
    else
    {
      uint64_t v25 = 0;
      uint64_t v26 = 6;
      uint64_t v24 = 2;
    }
  }
  else
  {
    uint64_t v25 = 0;
    uint64_t v26 = 6;
    uint64_t v24 = 2;
  }
  swift_endAccess();
  if (sub_100067A4C(v24, v25, v26, a2, a3, a4))
  {
    uint64_t v27 = v24;
    uint64_t v28 = v25;
    char v29 = v26;
    goto LABEL_35;
  }
  uint64_t v30 = *(void *)(v5 + 24);
  uint64_t v31 = ASCAppStateWaiting;
  switch((char)a4)
  {
    case 1:
      uint64_t v31 = ASCAppStatePurchased;
      if (*(void *)(v30 + 16)) {
        goto LABEL_20;
      }
      goto LABEL_31;
    case 2:
      uint64_t v31 = ASCAppStateUpdatable;
      if (!*(void *)(v30 + 16)) {
        goto LABEL_31;
      }
      goto LABEL_20;
    case 3:
      uint64_t v31 = ASCAppStateDownloadable;
      if (!*(void *)(v30 + 16)) {
        goto LABEL_31;
      }
      goto LABEL_20;
    case 4:
      uint64_t v31 = ASCAppStateInstalling;
      if (!*(void *)(v30 + 16)) {
        goto LABEL_31;
      }
      goto LABEL_20;
    case 5:
      uint64_t v31 = ASCAppStateOpenable;
      goto LABEL_19;
    case 6:
      uint64_t v31 = off_100187968[a2];
      if (!*(void *)(v30 + 16)) {
        goto LABEL_31;
      }
      goto LABEL_20;
    default:
LABEL_19:
      if (!*(void *)(v30 + 16))
      {
LABEL_31:
        uint64_t v74 = 0;
        long long v72 = 0u;
        long long v73 = 0u;
LABEL_32:
        sub_10004282C(v24, v25, v26);
        sub_100034B8C((uint64_t)&v72, &qword_1001A3BC8);
        goto LABEL_33;
      }
LABEL_20:
      CFRunLoopRunResult v32 = *v31;
      uint64_t v33 = sub_10003AA48(v32);
      if (v34)
      {
        sub_100052538(*(void *)(v30 + 56) + 40 * v33, (uint64_t)&v72);
      }
      else
      {
        uint64_t v74 = 0;
        long long v72 = 0u;
        long long v73 = 0u;
      }

      if (!*((void *)&v73 + 1)) {
        goto LABEL_32;
      }
      uint64_t v62 = v13;
      sub_100031C10(&v72, (uint64_t)v75);
      uint64_t v35 = v76;
      uint64_t v36 = v77;
      sub_10002EC6C(v75, v76);
      uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 8);
      uint64_t v63 = a2;
      uint64_t v64 = a4;
      if ((v37(v24, v25, v26, a2, a3, a4, v35, v36) & 1) == 0)
      {
        if (qword_1001A0E80 != -1) {
          swift_once();
        }
        uint64_t v38 = v66;
        uint64_t v39 = sub_10002F6AC(v66, (uint64_t)qword_1001AE3C8);
        (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v67, v39, v38);
        sub_10002EB60((uint64_t *)&unk_1001A19E0);
        type metadata accessor for LogMessage();
        *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014E610;
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
        v40._uint64_t countAndFlagsBits = 0;
        v40._object = (void *)0xE000000000000000;
        LogMessage.StringInterpolation.appendLiteral(_:)(v40);
        *((void *)&v73 + 1) = sub_10007AC00();
        *(void *)&long long v72 = v71;
        id v41 = v71;
        LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
        sub_100034B8C((uint64_t)&v72, &qword_1001A1C50);
        v42._object = (void *)0x800000010015DF60;
        v42._uint64_t countAndFlagsBits = 0xD000000000000015;
        LogMessage.StringInterpolation.appendLiteral(_:)(v42);
        LogMessage.init(stringInterpolation:)();
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
        v43._uint64_t countAndFlagsBits = 0;
        v43._object = (void *)0xE000000000000000;
        LogMessage.StringInterpolation.appendLiteral(_:)(v43);
        uint64_t v44 = ASCAppStateWaiting;
        char v45 = v64;
        switch((int)v26)
        {
          case 1:
            uint64_t v44 = ASCAppStatePurchased;
            break;
          case 2:
            uint64_t v44 = ASCAppStateUpdatable;
            break;
          case 3:
            uint64_t v44 = ASCAppStateDownloadable;
            break;
          case 4:
            uint64_t v44 = ASCAppStateInstalling;
            break;
          case 5:
            uint64_t v44 = ASCAppStateOpenable;
            break;
          case 6:
            uint64_t v44 = off_100187968[v24];
            break;
          default:
            break;
        }
        uint64_t v50 = *v44;
        sub_10004282C(v24, v25, v26);
        type metadata accessor for ASCAppState(0);
        uint64_t v52 = v51;
        *((void *)&v73 + 1) = v51;
        *(void *)&long long v72 = v50;
        LogMessage.StringInterpolation.appendInterpolation(safe:)();
        sub_100034B8C((uint64_t)&v72, &qword_1001A1C50);
        v53._uint64_t countAndFlagsBits = 540945696;
        v53._object = (void *)0xE400000000000000;
        LogMessage.StringInterpolation.appendLiteral(_:)(v53);
        uint64_t v54 = ASCAppStateWaiting;
        switch(v45)
        {
          case 1:
            uint64_t v54 = ASCAppStatePurchased;
            break;
          case 2:
            uint64_t v54 = ASCAppStateUpdatable;
            break;
          case 3:
            uint64_t v54 = ASCAppStateDownloadable;
            break;
          case 4:
            uint64_t v54 = ASCAppStateInstalling;
            break;
          case 5:
            uint64_t v54 = ASCAppStateOpenable;
            break;
          case 6:
            uint64_t v54 = off_100187968[v63];
            break;
          default:
            break;
        }
        uint64_t v55 = *v54;
        *((void *)&v73 + 1) = v52;
        *(void *)&long long v72 = v55;
        Swift::String v56 = v55;
        LogMessage.StringInterpolation.appendInterpolation(safe:)();
        sub_100034B8C((uint64_t)&v72, &qword_1001A1C50);
        v57._uint64_t countAndFlagsBits = 0;
        v57._object = (void *)0xE000000000000000;
        LogMessage.StringInterpolation.appendLiteral(_:)(v57);
        LogMessage.init(stringInterpolation:)();
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
        v58._uint64_t countAndFlagsBits = 0x203A656C7572;
        v58._object = (void *)0xE600000000000000;
        LogMessage.StringInterpolation.appendLiteral(_:)(v58);
        sub_10002EC6C(v75, v76);
        uint64_t DynamicType = swift_getDynamicType();
        *((void *)&v73 + 1) = swift_getMetatypeMetadata();
        *(void *)&long long v72 = DynamicType;
        LogMessage.StringInterpolation.appendInterpolation(safe:)();
        sub_100034B8C((uint64_t)&v72, &qword_1001A1C50);
        v60._uint64_t countAndFlagsBits = 0;
        v60._object = (void *)0xE000000000000000;
        LogMessage.StringInterpolation.appendLiteral(_:)(v60);
        LogMessage.init(stringInterpolation:)();
        id v61 = v67;
        Logger.error(_:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v68 + 8))(v61, v38);
        sub_10002ED08((uint64_t)v75);
        return 0;
      }
      sub_10004282C(v24, v25, v26);
      sub_10002ED08((uint64_t)v75);
      a2 = v63;
      LOBYTE(a4) = v64;
LABEL_33:
      swift_beginAccess();
      id v46 = v71;
      sub_100042814(a2, a3, a4);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v72 = *(void *)(v5 + 32);
      *(void *)(v5 + 32) = 0x8000000000000000;
      sub_10003F4F0(a2, a3, a4, v46, isUniquelyReferenced_nonNull_native);
      *(void *)(v5 + 32) = v72;

      swift_bridgeObjectRelease();
      swift_endAccess();
      if (![*(id *)(v5 + 40) containsObject:v46]) {
        return 1;
      }
      v75[0] = v46;
      v75[1] = a2;
      v75[2] = a3;
      LOBYTE(v76) = a4;
      id v48 = v46;
      sub_100042814(a2, a3, a4);
      AsyncEvent.post(_:)();

      uint64_t v27 = a2;
      uint64_t v28 = a3;
      char v29 = a4;
LABEL_35:
      sub_10004282C(v27, v28, v29);
      return 1;
  }
}

void sub_1000C2898(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  swift_beginAccess();
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(void *)(v12 + 16);
  id v14 = a2;
  uint64_t v15 = v14;
  if (v13)
  {
    unint64_t v16 = sub_10003A9B4((uint64_t)v14);
    if (v17)
    {
      uint64_t v18 = *(void *)(v12 + 56) + 24 * v16;
      a3 = *(void *)v18;
      a4 = *(void *)(v18 + 8);
      a5 = *(unsigned char *)(v18 + 16);
    }
  }
  *(void *)a6 = a3;
  *(void *)(a6 + 8) = a4;
  *(unsigned char *)(a6 + 16) = a5;
  swift_endAccess();
  sub_100042814(a3, a4, a5);
}

uint64_t sub_1000C2960@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, char *a6@<X8>)
{
  uint64_t v8 = *(void *)(a1 + 24);
  unint64_t v9 = ASCAppStateWaiting;
  switch((char)a4)
  {
    case 1:
      unint64_t v9 = ASCAppStatePurchased;
      if (*(void *)(v8 + 16)) {
        goto LABEL_12;
      }
      goto LABEL_19;
    case 2:
      unint64_t v9 = ASCAppStateUpdatable;
      if (!*(void *)(v8 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_12;
    case 3:
      unint64_t v9 = ASCAppStateDownloadable;
      if (!*(void *)(v8 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_12;
    case 4:
      unint64_t v9 = ASCAppStateInstalling;
      if (!*(void *)(v8 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_12;
    case 5:
      unint64_t v9 = ASCAppStateOpenable;
      goto LABEL_11;
    case 6:
      unint64_t v9 = off_100187968[a2];
      if (!*(void *)(v8 + 16)) {
        goto LABEL_19;
      }
      goto LABEL_12;
    default:
LABEL_11:
      if (!*(void *)(v8 + 16))
      {
LABEL_19:
        uint64_t v36 = 0;
        long long v34 = 0u;
        long long v35 = 0u;
        goto LABEL_20;
      }
LABEL_12:
      id v14 = *v9;
      uint64_t v15 = sub_10003AA48(v14);
      if ((v16 & 1) == 0)
      {
        uint64_t v36 = 0;
        long long v34 = 0u;
        long long v35 = 0u;

        goto LABEL_20;
      }
      sub_100052538(*(void *)(v8 + 56) + 40 * v15, (uint64_t)&v34);

      if (!*((void *)&v35 + 1))
      {
LABEL_20:
        uint64_t result = sub_100034B8C((uint64_t)&v34, &qword_1001A3BC8);
        *a6 = 0;
        return result;
      }
      sub_100031C10(&v34, (uint64_t)v37);
      swift_beginAccess();
      uint64_t v17 = *(void *)(a1 + 32);
      uint64_t v18 = *(void *)(v17 + 16);
      uint64_t v40 = a3;
      uint64_t v33 = a2;
      if (v18)
      {
        id v32 = a5;
        unint64_t v19 = sub_10003A9B4((uint64_t)v32);
        if (v20)
        {
          uint64_t v21 = *(void *)(v17 + 56) + 24 * v19;
          unint64_t v23 = *(void *)v21;
          uint64_t v22 = *(void *)(v21 + 8);
          uint64_t v24 = *(unsigned __int8 *)(v21 + 16);
          sub_100042814(*(void *)v21, v22, *(unsigned char *)(v21 + 16));
        }
        else
        {
          uint64_t v22 = 0;
          uint64_t v24 = 6;
          unint64_t v23 = 2;
        }
      }
      else
      {
        uint64_t v22 = 0;
        uint64_t v24 = 6;
        unint64_t v23 = 2;
      }
      swift_endAccess();
      uint64_t v26 = v38;
      uint64_t v27 = v39;
      sub_10002EC6C(v37, v38);
      char v28 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 8))(v23, v22, v24, v33, v40, a4, v26, v27);
      BOOL v30 = v23 > 1 && v24 > 5;
      char v31 = (v28 & 1) != 0 || v30;
      sub_10004282C(v23, v22, v24);
      *a6 = v31;
      return sub_10002ED08((uint64_t)v37);
  }
}

id sub_1000C2C0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  id result = [*(id *)(a1 + 40) containsObject:a2];
  *a3 = (_BYTE)result;
  return result;
}

id sub_1000C2C4C(char a1, uint64_t a2)
{
  unint64_t v2 = &selRef_addObject_;
  if ((a1 & 1) == 0) {
    unint64_t v2 = &selRef_removeObject_;
  }
  return [*(id *)(a2 + 40) *v2];
}

unint64_t sub_1000C2C98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *(void *)(a1 + 72);
  if (v4)
  {
    *(unsigned char *)a2 = 0;
    if (v4 == 1)
    {
      sub_10002EB60(&qword_1001A3BD8);
      swift_retain();
      *(void *)(a2 + 8) = Promise.__allocating_init(value:)();
    }
    else
    {
      *(void *)(a2 + 8) = v4;
    }
  }
  else
  {
    sub_10002EB60(&qword_1001A3BD8);
    uint64_t v5 = Promise.__allocating_init()();
    unint64_t v6 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v5;
    swift_retain();
    sub_1000C7360(v6);
    *(unsigned char *)a2 = 1;
    *(void *)(a2 + 8) = v5;
  }
  return sub_1000C74E4(v4);
}

uint64_t sub_1000C2DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v8 - 8);
  uint64_t v44 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v43 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  Swift::String v42 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_10002EB60(&qword_1001A3BE0);
  uint64_t v12 = *(void *)(v53 - 8);
  uint64_t v13 = __chkstk_darwin(v53);
  uint64_t v55 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v54 = (char *)&v38 - v15;
  uint64_t v52 = sub_10002EB60(&qword_1001A3BE8);
  __chkstk_darwin(v52);
  uint64_t v51 = (long long *)((char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = *(void *)(a1 + 16);
  uint64_t v50 = *(void *)(v17 + 16);
  if (v50)
  {
    uint64_t v39 = a3;
    uint64_t v40 = v10;
    uint64_t v56 = a1;
    uint64_t v41 = a4;
    uint64_t v49 = *(void *)(a2 + 16);
    uint64_t v47 = v12 + 16;
    uint64_t v46 = v12 + 32;
    uint64_t v45 = v12 + 8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v18 = 0;
    uint64_t v48 = v17;
    unint64_t v19 = v54;
    do
    {
      if (v49 == v18) {
        break;
      }
      uint64_t v57 = v18 + 1;
      unint64_t v20 = a2
          + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
          + *(void *)(v12 + 72) * v18;
      uint64_t v21 = (char *)v51 + *(int *)(v52 + 48);
      long long v58 = *(_OWORD *)(v17 + 16 * v18 + 32);
      *uint64_t v51 = v58;
      uint64_t v22 = v53;
      (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v21, v20, v53);
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v19, v21, v22);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v24 = *((void *)&v58 + 1);
      uint64_t v25 = *(void (**)(uint64_t, uint64_t))(*((void *)&v58 + 1) + 16);
      swift_unknownObjectRetain();
      v25(ObjectType, v24);
      SyncEvent.removeObserver(_:)();
      sub_10002EB60(&qword_1001A2900);
      sub_100061D9C(&qword_1001A3BF0, &qword_1001A2900);
      dispatch thunk of static EventEmitter.defaultScheduler.getter();
      type metadata accessor for DefaultAppStateController();
      uint64_t v26 = v55;
      EventEmitter.addObserver<A>(on:target:method:)();
      swift_unknownObjectRelease();
      swift_release();
      sub_10002ED08((uint64_t)v59);
      uint64_t v27 = *(void (**)(char *, uint64_t))(v12 + 8);
      v27(v26, v22);
      uint64_t v28 = v22;
      uint64_t v17 = v48;
      v27(v19, v28);
      uint64_t v18 = v57;
    }
    while (v50 != v57);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a1 = v56;
    uint64_t v10 = v40;
    a3 = v39;
  }
  char v29 = *(void **)(a3 + 16);
  [v29 lock];
  swift_beginAccess();
  uint64_t v30 = *(void *)(a3 + 24);
  swift_bridgeObjectRetain();
  [v29 unlock];
  sub_100083610(v30);
  swift_bridgeObjectRelease();
  sub_10002EB60(&qword_1001A2880);
  uint64_t v31 = v43;
  uint64_t v32 = swift_allocObject();
  long long v58 = xmmword_10014CED0;
  *(_OWORD *)(v32 + 16) = xmmword_10014CED0;
  static DispatchWorkItemFlags.barrier.getter();
  v59[0] = v32;
  sub_1000C749C((unint64_t *)&qword_1001A2888, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10002EB60((uint64_t *)&unk_1001A31A0);
  sub_100061D9C((unint64_t *)&qword_1001A2890, (uint64_t *)&unk_1001A31A0);
  uint64_t v33 = v42;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.sync<A>(flags:execute:)();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v10);
  if (qword_1001A0E80 != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for OSLogger();
  sub_10002F6AC(v34, (uint64_t)qword_1001AE3C8);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = v58;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v35._uint64_t countAndFlagsBits = 0;
  v35._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v35);
  LogMessage.StringInterpolation.appendInterpolation(identity:)();
  v36._object = (void *)0x800000010015E010;
  v36._uint64_t countAndFlagsBits = 0xD000000000000014;
  LogMessage.StringInterpolation.appendLiteral(_:)(v36);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  v59[3] = type metadata accessor for DefaultAppStateController();
  void v59[4] = &off_100187728;
  v59[0] = a1;
  swift_retain();
  Promise.resolve(_:)();
  return sub_10002ED08((uint64_t)v59);
}

uint64_t (*sub_1000C3530(uint64_t a1))(void *a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = sub_1000C7434;
  *(void *)(v2 + 24) = a1;
  swift_retain();
  return sub_1000C7470;
}

uint64_t sub_1000C35A8(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = *(void *)(v3 + 64);
  uint64_t v15 = *(void *)(v3 + 16);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v15;
  *(void *)(v16 + 24) = a1;
  *(void *)(v16 + 32) = a2;
  *(double *)(v16 + 40) = a3;
  aBlock[4] = sub_1000C73B0;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000C1A88;
  id aBlock[3] = &unk_1001878F0;
  uint64_t v17 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v19[1] = &_swiftEmptyArrayStorage;
  sub_1000C749C((unint64_t *)&qword_1001A2888, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10002EB60((uint64_t *)&unk_1001A31A0);
  sub_100061D9C((unint64_t *)&qword_1001A2890, (uint64_t *)&unk_1001A31A0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

void sub_1000C388C(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchTime();
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12)
  {
    uint64_t v26 = v11;
    uint64_t v27 = (char *)&v25 - v9;
    uint64_t v29 = v10;
    uint64_t v30 = v8;
    uint64_t v31 = a3;
    uint64_t v32 = a2;
    uint64_t v13 = dispatch_group_create();
    swift_bridgeObjectRetain();
    uint64_t v28 = a1;
    uint64_t v14 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v15 = *v14;
      swift_unknownObjectRetain();
      dispatch_group_enter(v13);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = v13;
      uint64_t v18 = *(void (**)(void (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v15 + 24);
      unint64_t v19 = v13;
      v18(sub_1000C73F8, v17, ObjectType, v15);
      swift_unknownObjectRelease();
      swift_release();
      v14 += 2;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    uint64_t v20 = v26;
    static DispatchTime.now()();
    uint64_t v21 = v27;
    + infix(_:_:)();
    uint64_t v22 = v30;
    unint64_t v23 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    v23(v20, v30);
    OS_dispatch_group.wait(timeout:)();
    uint64_t v24 = ((uint64_t (*)(char *, uint64_t))v23)(v21, v22);
    v32(v24);
  }
  else
  {
    a2(v8);
  }
}

void sub_1000C3ABC(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for OSLogger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain();
    if (qword_1001A0E80 != -1) {
      swift_once();
    }
    uint64_t v9 = sub_10002F6AC(v5, (uint64_t)qword_1001AE3C8);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v10._object = (void *)0x800000010015DFE0;
    v10._uint64_t countAndFlagsBits = 0xD000000000000024;
    LogMessage.StringInterpolation.appendLiteral(_:)(v10);
    swift_getErrorValue();
    uint64_t v11 = v15;
    uint64_t v12 = v16;
    v17[3] = v16;
    uint64_t v13 = sub_100031A88(v17);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v13, v11, v12);
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_100034B8C((uint64_t)v17, &qword_1001A1C50);
    v14._uint64_t countAndFlagsBits = 0;
    v14._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v14);
    LogMessage.init(stringInterpolation:)();
    Logger.error(_:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  dispatch_group_leave(a2);
}

void sub_1000C3DAC(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = type metadata accessor for DispatchTime();
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v16 = *(void *)(a1 + 16);
  if (v16)
  {
    uint64_t v30 = v15;
    uint64_t v31 = (char *)&v29 - v13;
    uint64_t v33 = v14;
    uint64_t v34 = v12;
    uint64_t v35 = a3;
    Swift::String v36 = a2;
    dispatch_group_t v38 = dispatch_group_create();
    swift_bridgeObjectRetain();
    uint64_t v32 = a1;
    uint64_t v17 = (uint64_t *)(a1 + 40);
    unsigned int v37 = a5 & 1;
    do
    {
      uint64_t v18 = *v17;
      swift_unknownObjectRetain();
      dispatch_group_t v19 = v38;
      dispatch_group_enter(v38);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v21 = swift_allocObject();
      *(void *)(v21 + 16) = a4;
      *(void *)(v21 + 24) = v19;
      uint64_t v22 = *(void (**)(uint64_t, void, void (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v18 + 32);
      swift_bridgeObjectRetain();
      unint64_t v23 = v19;
      v22(a4, v37, sub_1000C4FB8, v21, ObjectType, v18);
      swift_unknownObjectRelease();
      swift_release();
      v17 += 2;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
    uint64_t v24 = v30;
    static DispatchTime.now()();
    uint64_t v25 = v31;
    + infix(_:_:)();
    uint64_t v26 = v34;
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
    v27(v24, v34);
    OS_dispatch_group.wait(timeout:)();
    uint64_t v28 = ((uint64_t (*)(char *, uint64_t))v27)(v25, v26);
    v36(v28);
  }
  else
  {
    a2(v12);
  }
}

void sub_1000C4000(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for OSLogger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    dispatch_group_t v19 = a3;
    swift_errorRetain();
    if (qword_1001A0E80 != -1) {
      swift_once();
    }
    uint64_t v11 = sub_10002F6AC(v7, (uint64_t)qword_1001AE3C8);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v12._object = (void *)0x800000010015DF40;
    v12._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v12);
    uint64_t v23 = sub_10002EB60(&qword_1001A3BC0);
    v22[0] = a2;
    swift_bridgeObjectRetain();
    LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
    sub_100034B8C((uint64_t)v22, &qword_1001A1C50);
    v13._uint64_t countAndFlagsBits = 0x6E6F73616572202CLL;
    v13._object = (void *)0xEA0000000000203ALL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v13);
    swift_getErrorValue();
    uint64_t v14 = v20;
    uint64_t v15 = v21;
    uint64_t v23 = v21;
    uint64_t v16 = sub_100031A88(v22);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v16, v14, v15);
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_100034B8C((uint64_t)v22, &qword_1001A1C50);
    v17._uint64_t countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v17);
    LogMessage.init(stringInterpolation:)();
    Logger.error(_:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    a3 = v19;
  }
  dispatch_group_leave(a3);
}

uint64_t sub_1000C434C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_1000C4404(v4, a1);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  unint64_t v6 = swift_bridgeObjectRetain();
  sub_1000C1ACC(v6);
  uint64_t result = swift_endAccess();
  *a2 = v5;
  return result;
}

void *sub_1000C4404(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = __CocoaSet.count.getter();
    if ((v2 & 0xC000000000000001) != 0) {
      goto LABEL_3;
    }
LABEL_9:
    if (v4 > *(void *)(v2 + 16) >> 3) {
      goto LABEL_10;
    }
LABEL_13:
    sub_1000C63F0(a1);
    return (void *)v2;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if ((a2 & 0xC000000000000001) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  if (v2 < 0) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = v2 & 0xFFFFFFFFFFFFFF8;
  }
  if (v4 <= __CocoaSet.count.getter() / 8) {
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = __CocoaSet.count.getter();
  Swift::Int v7 = sub_100099030(v5, v6);
  swift_bridgeObjectRelease();
  uint64_t v2 = v7;
LABEL_10:

  return sub_1000C66E4(a1, v2);
}

uint64_t sub_1000C450C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OSLogger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  Swift::String v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    uint64_t v25 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v26 = v8;
    uint64_t v27 = v10;
    uint64_t v28 = v9;
    swift_bridgeObjectRetain();
    v24[1] = a1;
    uint64_t v14 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v17 = *v14;
      uint64_t ObjectType = swift_getObjectType();
      dispatch_group_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8);
      swift_unknownObjectRetain();
      if (v19(ObjectType, v17))
      {
        uint64_t v15 = swift_allocObject();
        *(void *)(v15 + 16) = a3;
        uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v17 + 32);
        swift_bridgeObjectRetain();
        v16(a2, 1, sub_1000C7088, v15, ObjectType, v17);
        swift_unknownObjectRelease();
        swift_release();
      }
      else
      {
        swift_unknownObjectRelease();
      }
      v14 += 2;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    uint64_t v10 = v27;
    uint64_t v9 = v28;
    Swift::String v12 = v25;
  }
  if (qword_1001A0E80 != -1) {
    swift_once();
  }
  uint64_t v20 = sub_10002F6AC(v9, (uint64_t)qword_1001AE3C8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v20, v9);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v21._object = (void *)0x800000010015DF80;
  v21._uint64_t countAndFlagsBits = 0xD000000000000015;
  LogMessage.StringInterpolation.appendLiteral(_:)(v21);
  v29[3] = sub_10002EB60(&qword_1001A3BC0);
  v29[0] = a2;
  swift_bridgeObjectRetain();
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_100034B8C((uint64_t)v29, &qword_1001A1C50);
  v22._uint64_t countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v22);
  LogMessage.init(stringInterpolation:)();
  Logger.debug(_:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1000C48A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for OSLogger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain();
    if (qword_1001A0E80 != -1) {
      swift_once();
    }
    uint64_t v10 = sub_10002F6AC(v5, (uint64_t)qword_1001AE3C8);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v10, v5);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v11._object = (void *)0x800000010015DFA0;
    v11._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v11);
    uint64_t v20 = sub_10002EB60(&qword_1001A3BC0);
    v19[0] = a2;
    swift_bridgeObjectRetain();
    LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
    sub_100034B8C((uint64_t)v19, &qword_1001A1C50);
    v12._uint64_t countAndFlagsBits = 0x6E6F73616572202CLL;
    v12._object = (void *)0xEA0000000000203ALL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v12);
    swift_getErrorValue();
    uint64_t v13 = v17;
    uint64_t v14 = v18;
    uint64_t v20 = v18;
    uint64_t v15 = sub_100031A88(v19);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v15, v13, v14);
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_100034B8C((uint64_t)v19, &qword_1001A1C50);
    v16._uint64_t countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v16);
    LogMessage.init(stringInterpolation:)();
    Logger.error(_:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  return result;
}

uint64_t sub_1000C4BDC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_1000C7360(*(void *)(v0 + 72));
  sub_10002ED08(v0 + 80);
  swift_release();
  return v0;
}

uint64_t sub_1000C4C44()
{
  sub_1000C4BDC();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DefaultAppStateController()
{
  return self;
}

uint64_t type metadata accessor for DefaultAppStateController.DataSourceLoadObserver()
{
  return self;
}

uint64_t *initializeBufferWithCopyOfBuffer for DefaultAppStateController.DataSourceState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    uint64_t v3 = swift_retain();
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for DefaultAppStateController.DataSourceState(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_release();
  }
  return result;
}

unint64_t *assignWithCopy for DefaultAppStateController.DataSourceState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_retain();
    }
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_retain();
    swift_release();
  }
  return a1;
}

unint64_t *assignWithTake for DefaultAppStateController.DataSourceState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v3 < 0xFFFFFFFF)
  {
    swift_release();
LABEL_6:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DefaultAppStateController.DataSourceState(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DefaultAppStateController.DataSourceState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_1000C4EBC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_1000C4ED4(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for DefaultAppStateController.DataSourceState()
{
  return &type metadata for DefaultAppStateController.DataSourceState;
}

uint64_t sub_1000C4F04()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_1000C4F4C()
{
  sub_1000C3DAC(*(void *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
}

uint64_t sub_1000C4F60(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000C4F70()
{
  return swift_release();
}

uint64_t sub_1000C4F78()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000C4FB8(uint64_t a1)
{
  sub_1000C4000(a1, *(void *)(v1 + 16), *(NSObject **)(v1 + 24));
}

size_t sub_1000C4FC0(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_1000C58A8(a1, a2, a3, (void *)*v3, &qword_1001A3C30, (uint64_t (*)(void))&type metadata accessor for MetricsData);
  *uint64_t v3 = result;
  return result;
}

char *sub_1000C4FFC(char *a1, int64_t a2, char a3)
{
  size_t result = sub_1000C5154(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_1000C501C(char *a1, int64_t a2, char a3)
{
  size_t result = sub_1000C5258(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

size_t sub_1000C503C(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_1000C58A8(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_1001A1EE0, (uint64_t (*)(void))&type metadata accessor for App);
  *uint64_t v3 = result;
  return result;
}

size_t sub_1000C5078(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_1000C5360(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_1000C5098(char *a1, int64_t a2, char a3)
{
  size_t result = sub_1000C553C(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_1000C50B8(char *a1, int64_t a2, char a3)
{
  size_t result = sub_1000C5658(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void *sub_1000C50D8(void *a1, int64_t a2, char a3)
{
  size_t result = sub_1000C5770(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

size_t sub_1000C50F8(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_1000C58A8(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_1001A19E0, (uint64_t (*)(void))&type metadata accessor for LogMessage);
  *uint64_t v3 = result;
  return result;
}

char *sub_1000C5134(char *a1, int64_t a2, char a3)
{
  size_t result = sub_1000C5A84(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_1000C5154(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10002EB60(&qword_1001A4DA0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1000C5258(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10002EB60(&qword_1001A3C10);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

size_t sub_1000C5360(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10002EB60(&qword_1001A3C00);
  uint64_t v10 = *(void *)(sub_10002EB60(&qword_1001A3BE0) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_29;
  }
  id v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(sub_10002EB60(&qword_1001A3BE0) - 8);
  if (v5)
  {
    if (v13 < a4
      || (unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(void *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v13;
}

char *sub_1000C553C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10002EB60(&qword_1001A3C28);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_1000C5658(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10002EB60(&qword_1001A3C08);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  unint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8]) {
      memmove(v12, v13, 40 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

void *sub_1000C5770(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10002EB60(&qword_1001A3C18);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    _OWORD v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_10002EB60(&qword_1001A3C20);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

size_t sub_1000C58A8(size_t result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  char v8 = result;
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    unint64_t v16 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10002EB60(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v16 = (void *)swift_allocObject();
  size_t result = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_29;
  }
  void v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(result - v15) / v14);
LABEL_19:
  uint64_t v18 = *(void *)(a6(0) - 8);
  if (v8)
  {
    if (v16 < a4
      || (unint64_t v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80),
          (char *)v16 + v19 >= (char *)a4 + v19 + *(void *)(v18 + 72) * v11))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v16;
}

char *sub_1000C5A84(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10002EB60(&qword_1001A3C38);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t sub_1000C5BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  int64_t v10 = (void *)(v9 + 16 * v8);
  BOOL v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v15 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v15;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      unint64_t v16 = (void *)(v9 + 16 * v8);
      BOOL v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v19 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10009C30C();
    uint64_t v13 = v19;
  }
  uint64_t v14 = *(void *)(*(void *)(v13 + 48) + 16 * v8);
  sub_1000C6084(v8);
  *uint64_t v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_1000C5D30(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    id v5 = a1;
    char v6 = __CocoaSet.contains(_:)();

    if (v6)
    {
      uint64_t v7 = sub_1000C5EF8();
      swift_bridgeObjectRelease();
      return v7;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  Swift::Int v8 = *(void *)(v4 + 40);
  swift_bridgeObjectRetain();
  Swift::Int v9 = NSObject._rawHashValue(seed:)(v8);
  uint64_t v10 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v11 = v9 & ~v10;
  if (((*(void *)(v4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    goto LABEL_12;
  }
  sub_10007AC00();
  id v12 = *(id *)(*(void *)(v4 + 48) + 8 * v11);
  char v13 = static NSObject.== infix(_:_:)();

  if ((v13 & 1) == 0)
  {
    uint64_t v14 = ~v10;
    do
    {
      unint64_t v11 = (v11 + 1) & v14;
      if (((*(void *)(v4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
        goto LABEL_12;
      }
      id v15 = *(id *)(*(void *)(v4 + 48) + 8 * v11);
      char v16 = static NSObject.== infix(_:_:)();
    }
    while ((v16 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v18 = *v2;
  uint64_t v20 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10009C300();
    uint64_t v18 = v20;
  }
  uint64_t v7 = *(void *)(*(void *)(v18 + 48) + 8 * v11);
  sub_1000C624C(v11);
  *uint64_t v2 = v20;
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1000C5EF8()
{
  uint64_t v1 = v0;
  swift_bridgeObjectRelease();
  uint64_t v2 = __CocoaSet.count.getter();
  uint64_t v3 = swift_unknownObjectRetain();
  Swift::Int v4 = sub_100099030(v3, v2);
  Swift::Int v16 = v4;
  Swift::Int v5 = *(void *)(v4 + 40);
  swift_retain();
  Swift::Int v6 = NSObject._rawHashValue(seed:)(v5);
  uint64_t v7 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v8 = v6 & ~v7;
  if ((*(void *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    sub_10007AC00();
    id v9 = *(id *)(*(void *)(v4 + 48) + 8 * v8);
    char v10 = static NSObject.== infix(_:_:)();

    if (v10)
    {
LABEL_6:
      swift_release();
      uint64_t v14 = *(void *)(*(void *)(v4 + 48) + 8 * v8);
      sub_1000C624C(v8);
      if (static NSObject.== infix(_:_:)())
      {
        Swift::Int *v1 = v16;
        return v14;
      }
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v7;
      while (1)
      {
        unint64_t v8 = (v8 + 1) & v11;
        if (((*(void *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
          break;
        }
        id v12 = *(id *)(*(void *)(v4 + 48) + 8 * v8);
        char v13 = static NSObject.== infix(_:_:)();

        if (v13) {
          goto LABEL_6;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

unint64_t sub_1000C6084(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          char v13 = (_OWORD *)(v12 + 16 * v2);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            _OWORD *v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_1000C624C(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(v3 + 40);
        id v11 = *(id *)(*(void *)(v3 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(v3 + 48);
            uint64_t v17 = (void *)(v16 + 8 * v2);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v17 >= v18 + 1))
            {
              *uint64_t v17 = *v18;
              int64_t v2 = v6;
            }
          }
        }
        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

void sub_1000C63F0(uint64_t a1)
{
  if ((*(void *)v1 & 0xC000000000000001) != 0)
  {
    if (!__CocoaSet.count.getter()) {
      return;
    }
LABEL_5:
    if ((a1 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      __CocoaSet.makeIterator()();
      sub_10007AC00();
      sub_1000C749C((unint64_t *)&qword_1001A1CB0, (void (*)(uint64_t))sub_10007AC00);
      Set.Iterator.init(_cocoa:)();
      a1 = v20;
      uint64_t v18 = v21;
      uint64_t v3 = v22;
      uint64_t v4 = v23;
      unint64_t v5 = v24;
    }
    else
    {
      uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
      uint64_t v18 = a1 + 56;
      uint64_t v3 = ~v6;
      uint64_t v7 = -v6;
      if (v7 < 64) {
        uint64_t v8 = ~(-1 << v7);
      }
      else {
        uint64_t v8 = -1;
      }
      unint64_t v5 = v8 & *(void *)(a1 + 56);
      swift_bridgeObjectRetain();
      uint64_t v4 = 0;
    }
    int64_t v9 = (unint64_t)(v3 + 64) >> 6;
    if (a1 < 0) {
      goto LABEL_14;
    }
    while (1)
    {
      if (v5)
      {
        uint64_t v10 = (v5 - 1) & v5;
        unint64_t v11 = __clz(__rbit64(v5)) | (v4 << 6);
        uint64_t v12 = v4;
      }
      else
      {
        int64_t v14 = v4 + 1;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
          return;
        }
        if (v14 >= v9) {
          goto LABEL_36;
        }
        unint64_t v15 = *(void *)(v18 + 8 * v14);
        uint64_t v12 = v4 + 1;
        if (!v15)
        {
          uint64_t v12 = v4 + 2;
          if (v4 + 2 >= v9) {
            goto LABEL_36;
          }
          unint64_t v15 = *(void *)(v18 + 8 * v12);
          if (!v15)
          {
            uint64_t v12 = v4 + 3;
            if (v4 + 3 >= v9) {
              goto LABEL_36;
            }
            unint64_t v15 = *(void *)(v18 + 8 * v12);
            if (!v15)
            {
              uint64_t v12 = v4 + 4;
              if (v4 + 4 >= v9) {
                goto LABEL_36;
              }
              unint64_t v15 = *(void *)(v18 + 8 * v12);
              if (!v15)
              {
                uint64_t v12 = v4 + 5;
                if (v4 + 5 >= v9) {
                  goto LABEL_36;
                }
                unint64_t v15 = *(void *)(v18 + 8 * v12);
                if (!v15)
                {
                  uint64_t v16 = v4 + 6;
                  while (v9 != v16)
                  {
                    unint64_t v15 = *(void *)(v18 + 8 * v16++);
                    if (v15)
                    {
                      uint64_t v12 = v16 - 1;
                      goto LABEL_32;
                    }
                  }
LABEL_36:
                  sub_100034EF8();
                  return;
                }
              }
            }
          }
        }
LABEL_32:
        uint64_t v10 = (v15 - 1) & v15;
        unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
      }
      id v13 = *(id *)(*(void *)(a1 + 48) + 8 * v11);
      if (!v13) {
        goto LABEL_36;
      }
      while (1)
      {
        uint64_t v17 = (void *)sub_1000C5D30(v13);

        uint64_t v4 = v12;
        unint64_t v5 = v10;
        if ((a1 & 0x8000000000000000) == 0) {
          break;
        }
LABEL_14:
        if (__CocoaSet.Iterator.next()())
        {
          sub_10007AC00();
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v13 = v19;
          swift_unknownObjectRelease();
          uint64_t v12 = v4;
          uint64_t v10 = v5;
          if (v19) {
            continue;
          }
        }
        goto LABEL_36;
      }
    }
  }
  if (*(void *)(*(void *)v1 + 16)) {
    goto LABEL_5;
  }
}

void *sub_1000C66E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10007AC00();
    sub_1000C749C((unint64_t *)&qword_1001A1CB0, (void (*)(uint64_t))sub_10007AC00);
    Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v46;
    uint64_t v4 = v47;
    uint64_t v6 = v48;
    int64_t v5 = v49;
    unint64_t v7 = v50;
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v4 = a1 + 56;
    uint64_t v6 = ~v8;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v7 = v10 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v5 = 0;
  }
  uint64_t v41 = v3;
  uint64_t v42 = v4;
  uint64_t v43 = v6;
  int64_t v44 = v5;
  unint64_t v45 = v7;
  uint64_t v11 = v2 + 56;
  while (1)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v7)
      {
        uint64_t v12 = (v7 - 1) & v7;
        unint64_t v13 = __clz(__rbit64(v7)) | (v5 << 6);
LABEL_14:
        int64_t v14 = *(void **)(*(void *)(v3 + 48) + 8 * v13);
        id v15 = v14;
        goto LABEL_15;
      }
      int64_t v25 = v5 + 1;
      if (__OFADD__(v5, 1)) {
        __break(1u);
      }
      int64_t v26 = (unint64_t)(v6 + 64) >> 6;
      if (v25 >= v26)
      {
        int64_t v14 = 0;
        uint64_t v12 = 0;
        goto LABEL_15;
      }
      unint64_t v27 = *(void *)(v42 + 8 * v25);
      if (v27)
      {
LABEL_28:
        uint64_t v12 = (v27 - 1) & v27;
        unint64_t v13 = __clz(__rbit64(v27)) + (v25 << 6);
        int64_t v5 = v25;
        goto LABEL_14;
      }
      int64_t v28 = v5 + 2;
      if (v5 + 2 >= v26) {
        goto LABEL_44;
      }
      unint64_t v27 = *(void *)(v42 + 8 * v28);
      if (v27)
      {
LABEL_32:
        int64_t v25 = v28;
        goto LABEL_28;
      }
      if (v5 + 3 < v26)
      {
        unint64_t v27 = *(void *)(v42 + 8 * (v5 + 3));
        if (v27)
        {
          int64_t v25 = v5 + 3;
          goto LABEL_28;
        }
        int64_t v28 = v5 + 4;
        if (v5 + 4 >= v26)
        {
          int64_t v14 = 0;
          uint64_t v12 = 0;
          v5 += 3;
LABEL_15:
          int64_t v44 = v5;
          unint64_t v45 = v12;
          if (!v14) {
            goto LABEL_53;
          }
          goto LABEL_19;
        }
        unint64_t v27 = *(void *)(v42 + 8 * v28);
        if (v27) {
          goto LABEL_32;
        }
        int64_t v25 = v5 + 5;
        if (v5 + 5 < v26)
        {
          unint64_t v27 = *(void *)(v42 + 8 * v25);
          if (v27) {
            goto LABEL_28;
          }
          int64_t v25 = v26 - 1;
          int64_t v29 = v5 + 6;
          while (v26 != v29)
          {
            unint64_t v27 = *(void *)(v42 + 8 * v29++);
            if (v27)
            {
              int64_t v25 = v29 - 1;
              goto LABEL_28;
            }
          }
LABEL_44:
          int64_t v14 = 0;
          uint64_t v12 = 0;
          int64_t v5 = v25;
          goto LABEL_15;
        }
      }
      int64_t v14 = 0;
      uint64_t v12 = 0;
      int64_t v5 = v28;
      goto LABEL_15;
    }
    uint64_t v16 = __CocoaSet.Iterator.next()();
    if (!v16
      || (uint64_t v39 = v16,
          sub_10007AC00(),
          swift_unknownObjectRetain(),
          swift_dynamicCast(),
          int64_t v14 = v40,
          swift_unknownObjectRelease(),
          !v40))
    {
LABEL_53:
      sub_100034EF8();
      return (void *)v2;
    }
LABEL_19:
    Swift::Int v17 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
    uint64_t v18 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v19 = v17 & ~v18;
    if (((*(void *)(v11 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
      goto LABEL_10;
    }
    sub_10007AC00();
    id v20 = *(id *)(*(void *)(v2 + 48) + 8 * v19);
    char v21 = static NSObject.== infix(_:_:)();

    if (v21) {
      break;
    }
    uint64_t v22 = ~v18;
    while (1)
    {
      unint64_t v19 = (v19 + 1) & v22;
      if (((*(void *)(v11 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
        break;
      }
      id v23 = *(id *)(*(void *)(v2 + 48) + 8 * v19);
      char v24 = static NSObject.== infix(_:_:)();

      if (v24) {
        goto LABEL_47;
      }
    }
LABEL_10:

    uint64_t v3 = v41;
    uint64_t v6 = v43;
    int64_t v5 = v44;
    unint64_t v7 = v45;
  }
LABEL_47:

  char v31 = *(unsigned char *)(v2 + 32);
  unint64_t v32 = (unint64_t)((1 << v31) + 63) >> 6;
  size_t v33 = 8 * v32;
  if ((v31 & 0x3Fu) < 0xE
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v39 - ((v33 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v33);
    sub_1000C6C24((unint64_t *)((char *)&v39 - ((v33 + 15) & 0x3FFFFFFFFFFFFFF0)), v32, v2, v19, &v41);
    uint64_t v35 = v34;
    swift_release();
    sub_100034EF8();
  }
  else
  {
    Swift::String v36 = (void *)swift_slowAlloc();
    memcpy(v36, (const void *)(v2 + 56), v33);
    sub_1000C6C24((unint64_t *)v36, v32, v2, v19, &v41);
    uint64_t v35 = v37;
    swift_release();
    sub_100034EF8();
    swift_slowDealloc();
  }
  return (void *)v35;
}

void sub_1000C6C24(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  int64_t v5 = a5;
  uint64_t v7 = *(void *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v39 = a3 + 56;
  while (2)
  {
    uint64_t v36 = v8;
    do
    {
      while (1)
      {
        if ((*v5 & 0x8000000000000000) == 0)
        {
          int64_t v10 = v5[3];
          unint64_t v9 = v5[4];
          if (v9)
          {
            uint64_t v11 = (v9 - 1) & v9;
            unint64_t v12 = __clz(__rbit64(v9)) | (v10 << 6);
LABEL_7:
            unint64_t v13 = *(void **)(*(void *)(*v5 + 48) + 8 * v12);
            id v14 = v13;
            goto LABEL_8;
          }
          int64_t v27 = v10 + 1;
          if (__OFADD__(v10, 1))
          {
            __break(1u);
            goto LABEL_49;
          }
          int64_t v28 = (unint64_t)(v5[2] + 64) >> 6;
          if (v27 >= v28)
          {
            unint64_t v13 = 0;
            uint64_t v11 = 0;
            goto LABEL_8;
          }
          uint64_t v29 = v5[1];
          unint64_t v30 = *(void *)(v29 + 8 * v27);
          if (v30)
          {
LABEL_22:
            uint64_t v11 = (v30 - 1) & v30;
            unint64_t v12 = __clz(__rbit64(v30)) + (v27 << 6);
            int64_t v10 = v27;
            goto LABEL_7;
          }
          int64_t v33 = v10 + 2;
          if (v10 + 2 >= v28) {
            goto LABEL_41;
          }
          unint64_t v30 = *(void *)(v29 + 8 * v33);
          if (v30)
          {
LABEL_29:
            int64_t v27 = v33;
            goto LABEL_22;
          }
          if (v10 + 3 < v28)
          {
            unint64_t v30 = *(void *)(v29 + 8 * (v10 + 3));
            if (v30)
            {
              int64_t v27 = v10 + 3;
              goto LABEL_22;
            }
            int64_t v33 = v10 + 4;
            if (v10 + 4 >= v28)
            {
              unint64_t v13 = 0;
              uint64_t v11 = 0;
              v10 += 3;
LABEL_8:
              void v5[3] = v10;
              void v5[4] = v11;
              if (!v13) {
                goto LABEL_47;
              }
              goto LABEL_12;
            }
            unint64_t v30 = *(void *)(v29 + 8 * v33);
            if (v30) {
              goto LABEL_29;
            }
            int64_t v27 = v10 + 5;
            if (v10 + 5 < v28)
            {
              unint64_t v30 = *(void *)(v29 + 8 * v27);
              if (v30) {
                goto LABEL_22;
              }
              int64_t v27 = v28 - 1;
              int64_t v34 = v10 + 6;
              while (v28 != v34)
              {
                unint64_t v30 = *(void *)(v29 + 8 * v34++);
                if (v30)
                {
                  int64_t v27 = v34 - 1;
                  goto LABEL_22;
                }
              }
LABEL_41:
              unint64_t v13 = 0;
              uint64_t v11 = 0;
              int64_t v10 = v27;
              goto LABEL_8;
            }
          }
          unint64_t v13 = 0;
          uint64_t v11 = 0;
          int64_t v10 = v33;
          goto LABEL_8;
        }
        if (!__CocoaSet.Iterator.next()()
          || (sub_10007AC00(),
              swift_unknownObjectRetain(),
              swift_dynamicCast(),
              unint64_t v13 = v40,
              swift_unknownObjectRelease(),
              !v40))
        {
LABEL_47:
          swift_retain();
          sub_10004216C(a1, a2, v36, a3);
          return;
        }
LABEL_12:
        Swift::Int v15 = NSObject._rawHashValue(seed:)(*(void *)(a3 + 40));
        uint64_t v16 = -1 << *(unsigned char *)(a3 + 32);
        unint64_t v17 = v15 & ~v16;
        unint64_t v18 = v17 >> 6;
        uint64_t v19 = 1 << v17;
        if (((1 << v17) & *(void *)(v39 + 8 * (v17 >> 6))) == 0) {
          goto LABEL_3;
        }
        sub_10007AC00();
        id v20 = *(id *)(*(void *)(a3 + 48) + 8 * v17);
        char v21 = static NSObject.== infix(_:_:)();

        if (v21) {
          break;
        }
        uint64_t v22 = ~v16;
        for (unint64_t i = v17 + 1; ; unint64_t i = v24 + 1)
        {
          unint64_t v24 = i & v22;
          if (((*(void *)(v39 + (((i & v22) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v22)) & 1) == 0) {
            break;
          }
          id v25 = *(id *)(*(void *)(a3 + 48) + 8 * v24);
          char v26 = static NSObject.== infix(_:_:)();

          if (v26)
          {

            unint64_t v18 = v24 >> 6;
            uint64_t v19 = 1 << v24;
            goto LABEL_25;
          }
        }
LABEL_3:

        int64_t v5 = a5;
      }

LABEL_25:
      unint64_t v31 = a1[v18];
      a1[v18] = v31 & ~v19;
      BOOL v32 = (v19 & v31) == 0;
      int64_t v5 = a5;
    }
    while (v32);
    uint64_t v8 = v36 - 1;
    if (__OFSUB__(v36, 1))
    {
LABEL_49:
      __break(1u);
      return;
    }
    if (v36 != 1) {
      continue;
    }
    break;
  }
}

uint64_t sub_1000C6F94@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1000C1FC4(*(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned __int8 *)(v1 + 48));
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000C6FE0@<X0>(void *a1@<X8>)
{
  return sub_1000C434C(*(void *)(v1 + 16), a1);
}

uint64_t sub_1000C6FFC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000C7044()
{
  return sub_1000C450C(v0[2], v0[3], v0[4]);
}

uint64_t sub_1000C7050()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000C7088(uint64_t a1)
{
  return sub_1000C48A4(a1, *(void *)(v1 + 16));
}

unint64_t sub_1000C7090@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C2C98(v1, a1);
}

unint64_t *sub_1000C70AC(uint64_t a1, void *a2)
{
  uint64_t v21 = *a2;
  uint64_t v22 = a2;
  uint64_t v20 = sub_10002EB60(&qword_1001A3BE0);
  uint64_t v4 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = (unint64_t *)&_swiftEmptyArrayStorage;
  if (v7)
  {
    v18[1] = v2;
    unint64_t v24 = (unint64_t *)&_swiftEmptyArrayStorage;
    sub_1000C5078(0, v7, 0);
    uint64_t v8 = v24;
    unint64_t v18[2] = v4 + 32;
    uint64_t v19 = v4;
    unint64_t v9 = (uint64_t *)(a1 + 40);
    do
    {
      int64_t v10 = v6;
      uint64_t v11 = *v9;
      uint64_t ObjectType = swift_getObjectType();
      unint64_t v13 = *(void (**)(uint64_t, uint64_t))(v11 + 16);
      swift_unknownObjectRetain();
      uint64_t v14 = v11;
      uint64_t v6 = v10;
      v13(ObjectType, v14);
      id v23 = v22;
      sub_1000C749C(&qword_1001A3BF8, (void (*)(uint64_t))type metadata accessor for DefaultAppStateController.DataSourceLoadObserver);
      SyncEvent.addObserver<A>(_:)();
      swift_unknownObjectRelease();
      swift_release();
      unint64_t v24 = v8;
      unint64_t v16 = v8[2];
      unint64_t v15 = v8[3];
      if (v16 >= v15 >> 1)
      {
        sub_1000C5078(v15 > 1, v16 + 1, 1);
        uint64_t v8 = v24;
      }
      v8[2] = v16 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v19 + 32))((unint64_t)v8+ ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))+ *(void *)(v19 + 72) * v16, v10, v20);
      v9 += 2;
      --v7;
    }
    while (v7);
  }
  return v8;
}

uint64_t sub_1000C7304()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000C7354()
{
  return sub_1000C2DA0(v0[2], v0[3], v0[4], v0[5]);
}

unint64_t sub_1000C7360(unint64_t result)
{
  if (result >= 2) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1000C7370()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1000C73B0()
{
  sub_1000C388C(*(void *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1000C73C0()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000C73F8(uint64_t a1)
{
  sub_1000C3ABC(a1, *(NSObject **)(v1 + 16));
}

unint64_t sub_1000C7400()
{
  unint64_t v1 = *(void *)(v0 + 72);
  *(void *)(v0 + 72) = 1;
  return sub_1000C7360(v1);
}

uint64_t sub_1000C7438()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C7470(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_1000C749C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000C74E4(unint64_t result)
{
  if (result >= 2) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_1000C7508()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DefaultAppStateDataSource()
{
  return self;
}

{
  return type metadata accessor for DefaultAppStateDataSource();
}

uint64_t sub_1000C7564()
{
  return swift_retain();
}

uint64_t sub_1000C756C(uint64_t (*a1)(void))
{
  return a1(0);
}

uint64_t sub_1000C759C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3(0);
}

uint64_t sub_1000C75C8()
{
  return 2;
}

uint64_t sub_1000C75D8()
{
  uint64_t v0 = type metadata accessor for OSLogger.Subsystem();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OSLogger();
  sub_10002F648(v4, qword_1001A3CE0);
  sub_10002F6AC(v4, (uint64_t)qword_1001A3CE0);
  if (qword_1001A0E58 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_10002F6AC(v0, (uint64_t)qword_1001AE350);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return OSLogger.init(subsystem:category:)();
}

id sub_1000C772C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v27 = a3;
  uint64_t v28 = a2;
  uint64_t v7 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for OSLogger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0E00 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_10002F6AC(v8, (uint64_t)qword_1001A3CE0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  uint64_t v13 = *(void *)(type metadata accessor for LogMessage() - 8);
  unint64_t v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_10014CED0;
  unint64_t v26 = v15 + v14;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v16._uint64_t countAndFlagsBits = 0x72746E6520646441;
  v16._object = (void *)0xEA00000000002079;
  LogMessage.StringInterpolation.appendLiteral(_:)(v16);
  uint64_t v18 = v27;
  uint64_t v17 = v28;
  v30[0] = a1;
  v30[1] = v28;
  void v30[2] = v27;
  unint64_t v31 = &type metadata for AvailableUpdate;
  swift_bridgeObjectRetain();
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_1000709E0((uint64_t)v30);
  v19._uint64_t countAndFlagsBits = 0x61644120726F6620;
  v19._object = (void *)0xED0000204449206DLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v19);
  unint64_t v31 = (ValueMetadata *)sub_10007AC00();
  v30[0] = a4;
  id v20 = a4;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_1000709E0((uint64_t)v30);
  v21._uint64_t countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v21);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v22 = *(void **)(v4 + 24);
  [v22 lock];
  swift_beginAccess();
  swift_bridgeObjectRetain();
  id v23 = v20;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v29 = *(void *)(v4 + 16);
  *(void *)(v4 + 16) = 0x8000000000000000;
  sub_10003F358(a1, v17, v18, v23, isUniquelyReferenced_nonNull_native);
  *(void *)(v4 + 16) = v29;

  swift_bridgeObjectRelease();
  swift_endAccess();
  return [v22 unlock];
}

uint64_t sub_1000C7AB8(void *a1)
{
  uint64_t v3 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = type metadata accessor for OSLogger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001A0E00 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_10002F6AC(v4, (uint64_t)qword_1001A3CE0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v9._object = (void *)0x800000010015E0C0;
  v9._uint64_t countAndFlagsBits = 0xD000000000000019;
  LogMessage.StringInterpolation.appendLiteral(_:)(v9);
  void v14[3] = sub_10007AC00();
  v14[0] = a1;
  id v10 = a1;
  LogMessage.StringInterpolation.appendInterpolation(traceableSensitive:)();
  sub_1000709E0((uint64_t)v14);
  v11._uint64_t countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v11);
  LogMessage.init(stringInterpolation:)();
  Logger.info(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v12 = *(void **)(v1 + 24);
  [v12 lock];
  swift_beginAccess();
  sub_10003B7CC((uint64_t)v10);
  swift_endAccess();
  [v12 unlock];
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000C7D9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10007AC00();
    sub_100062134();
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v27;
    uint64_t v25 = v28;
    uint64_t v5 = v29;
    uint64_t v6 = v30;
    unint64_t v7 = v31;
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v25 = a1 + 56;
    uint64_t v5 = ~v8;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v7 = v10 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v6 = 0;
  }
  int64_t v24 = (unint64_t)(v5 + 64) >> 6;
  Swift::String v11 = (uint64_t *)(a2 + 16);
  while (v3 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      return sub_100034EF8();
    }
    sub_10007AC00();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v15 = v26;
    swift_unknownObjectRelease();
    uint64_t v14 = v6;
    uint64_t v12 = v7;
    if (!v26) {
      return sub_100034EF8();
    }
LABEL_31:
    swift_beginAccess();
    swift_bridgeObjectRetain();
    unint64_t v19 = sub_10003A9B4((uint64_t)v15);
    char v21 = v20;
    swift_bridgeObjectRelease();
    if (v21)
    {
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v23 = *v11;
      uint64_t v32 = *v11;
      uint64_t *v11 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_10004061C();
        uint64_t v23 = v32;
      }

      sub_10003E9E4(v19, v23);
      uint64_t *v11 = v23;
      swift_bridgeObjectRelease();
    }
    swift_endAccess();

    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v6 = v14;
    unint64_t v7 = v12;
  }
  if (v7)
  {
    uint64_t v12 = (v7 - 1) & v7;
    unint64_t v13 = __clz(__rbit64(v7)) | (v6 << 6);
    uint64_t v14 = v6;
LABEL_30:
    id v15 = *(id *)(*(void *)(v3 + 48) + 8 * v13);
    if (!v15) {
      return sub_100034EF8();
    }
    goto LABEL_31;
  }
  int64_t v16 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v16 >= v24) {
      return sub_100034EF8();
    }
    unint64_t v17 = *(void *)(v25 + 8 * v16);
    uint64_t v14 = v6 + 1;
    if (!v17)
    {
      uint64_t v14 = v6 + 2;
      if (v6 + 2 >= v24) {
        return sub_100034EF8();
      }
      unint64_t v17 = *(void *)(v25 + 8 * v14);
      if (!v17)
      {
        uint64_t v14 = v6 + 3;
        if (v6 + 3 >= v24) {
          return sub_100034EF8();
        }
        unint64_t v17 = *(void *)(v25 + 8 * v14);
        if (!v17)
        {
          uint64_t v14 = v6 + 4;
          if (v6 + 4 >= v24) {
            return sub_100034EF8();
          }
          unint64_t v17 = *(void *)(v25 + 8 * v14);
          if (!v17)
          {
            uint64_t v18 = v6 + 5;
            while (v24 != v18)
            {
              unint64_t v17 = *(void *)(v25 + 8 * v18++);
              if (v17)
              {
                uint64_t v14 = v18 - 1;
                goto LABEL_29;
              }
            }
            return sub_100034EF8();
          }
        }
      }
    }
LABEL_29:
    uint64_t v12 = (v17 - 1) & v17;
    unint64_t v13 = __clz(__rbit64(v17)) + (v14 << 6);
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000C80D8()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DefaultAvailableUpdatesRegistry()
{
  return self;
}

void *sub_1000C813C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = a1;
  sub_1000C5098(0, v1, 0);
  uint64_t result = (void *)sub_1000CC9EC(v2);
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = 0;
  uint64_t v7 = v2 + 64;
  uint64_t v23 = v2 + 80;
  int64_t v24 = v1;
  int v25 = v4;
  uint64_t v26 = v2 + 64;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(v2 + 32))
  {
    unint64_t v10 = (unint64_t)v5 >> 6;
    if ((*(void *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(v2 + 36) != v4) {
      goto LABEL_24;
    }
    uint64_t v27 = v6;
    Swift::String v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v5);
    uint64_t v12 = v11[1];
    uint64_t v28 = *v11;
    uint64_t v13 = *(void *)(*(void *)(v2 + 56) + 8 * v5);
    uint64_t v14 = v2;
    unint64_t v16 = _swiftEmptyArrayStorage[2];
    unint64_t v15 = _swiftEmptyArrayStorage[3];
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v16 >= v15 >> 1) {
      uint64_t result = sub_1000C5098((char *)(v15 > 1), v16 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v16 + 1;
    unint64_t v17 = &_swiftEmptyArrayStorage[3 * v16];
    uint64_t v17[4] = v28;
    void v17[5] = v12;
    id v17[6] = v13;
    int64_t v8 = 1 << *(unsigned char *)(v14 + 32);
    if (v5 >= v8) {
      goto LABEL_25;
    }
    uint64_t v7 = v26;
    uint64_t v18 = *(void *)(v26 + 8 * v10);
    if ((v18 & (1 << v5)) == 0) {
      goto LABEL_26;
    }
    uint64_t v2 = v14;
    int v4 = v25;
    if (*(_DWORD *)(v14 + 36) != v25) {
      goto LABEL_27;
    }
    unint64_t v19 = v18 & (-2 << (v5 & 0x3F));
    if (v19)
    {
      int64_t v8 = __clz(__rbit64(v19)) | v5 & 0xFFFFFFFFFFFFFFC0;
      int64_t v9 = v24;
    }
    else
    {
      unint64_t v20 = v10 + 1;
      unint64_t v21 = (unint64_t)(v8 + 63) >> 6;
      int64_t v9 = v24;
      if (v10 + 1 < v21)
      {
        unint64_t v22 = *(void *)(v26 + 8 * v20);
        if (v22)
        {
LABEL_20:
          int64_t v8 = __clz(__rbit64(v22)) + (v20 << 6);
        }
        else
        {
          while (v21 - 2 != v10)
          {
            unint64_t v22 = *(void *)(v23 + 8 * v10++);
            if (v22)
            {
              unint64_t v20 = v10 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    uint64_t v6 = v27 + 1;
    uint64_t v5 = v8;
    if (v27 + 1 == v9) {
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1000C836C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v2 - 8);
  uint64_t v48 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for OSLogger();
  __chkstk_darwin(v49);
  uint64_t v47 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v41 = a1 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & v6;
  int64_t v42 = (unint64_t)(v7 + 63) >> 6;
  unint64_t v45 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v46 = (void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v50 = a1;
  swift_bridgeObjectRetain();
  int64_t v10 = 0;
  uint64_t v40 = _swiftEmptyArrayStorage;
  long long v44 = xmmword_10014CED0;
  uint64_t v43 = (void *)0x800000010015E160;
  while (v9)
  {
    unint64_t v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v12 = v11 | (v10 << 6);
LABEL_19:
    uint64_t v16 = *(void *)(v50 + 48) + 16 * v12;
    uint64_t v18 = *(void **)v16;
    unint64_t v17 = *(void **)(v16 + 8);
    id v19 = objc_allocWithZone((Class)LSApplicationRecord);
    swift_bridgeObjectRetain_n();
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v52[0] = 0;
    id v21 = [v19 initWithBundleIdentifier:v20 allowPlaceholder:1 error:v52];

    id v22 = v52[0];
    if (v21)
    {
      swift_bridgeObjectRetain();
      id v30 = v22;
      id v31 = [v21 localizedName];
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v34 = v33;
      swift_bridgeObjectRelease();

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v40 = sub_100076A8C(0, v40[2] + 1, 1, v40);
      }
      unint64_t v36 = v40[2];
      unint64_t v35 = v40[3];
      if (v36 >= v35 >> 1) {
        uint64_t v40 = sub_100076A8C((void *)(v35 > 1), v36 + 1, 1, v40);
      }
      uint64_t v37 = v40;
      _OWORD v40[2] = v36 + 1;
      dispatch_group_t v38 = &v37[4 * v36];
      v38[4] = v18;
      uint64_t v38[5] = v17;
      v38[6] = v32;
      v38[7] = v34;
    }
    else
    {
      unint64_t v51 = v9;
      int64_t v23 = v10;
      id v24 = v52[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_1001A0E08 != -1) {
        swift_once();
      }
      uint64_t v25 = v49;
      uint64_t v26 = sub_10002F6AC(v49, (uint64_t)qword_1001A3DD8);
      uint64_t v27 = v47;
      (*v46)(v47, v26, v25);
      sub_10002EB60((uint64_t *)&unk_1001A19E0);
      type metadata accessor for LogMessage();
      *(_OWORD *)(swift_allocObject() + 16) = v44;
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
      v28._uint64_t countAndFlagsBits = 0xD000000000000032;
      v28._object = v43;
      LogMessage.StringInterpolation.appendLiteral(_:)(v28);
      v52[3] = &type metadata for String;
      v52[0] = v18;
      v52[1] = v17;
      swift_bridgeObjectRetain();
      LogMessage.StringInterpolation.appendInterpolation(safe:)();
      sub_100034B8C((uint64_t)v52, &qword_1001A1C50);
      v29._uint64_t countAndFlagsBits = 0;
      v29._object = (void *)0xE000000000000000;
      LogMessage.StringInterpolation.appendLiteral(_:)(v29);
      LogMessage.init(stringInterpolation:)();
      Logger.error(_:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      (*v45)(v27, v25);
      swift_bridgeObjectRelease();
      int64_t v10 = v23;
      unint64_t v9 = v51;
    }
  }
  if (__OFADD__(v10++, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v10 >= v42) {
    goto LABEL_32;
  }
  unint64_t v14 = *(void *)(v41 + 8 * v10);
  if (v14)
  {
LABEL_18:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
    goto LABEL_19;
  }
  int64_t v15 = v10 + 1;
  if (v10 + 1 >= v42) {
    goto LABEL_32;
  }
  unint64_t v14 = *(void *)(v41 + 8 * v15);
  if (v14) {
    goto LABEL_17;
  }
  int64_t v15 = v10 + 2;
  if (v10 + 2 >= v42) {
    goto LABEL_32;
  }
  unint64_t v14 = *(void *)(v41 + 8 * v15);
  if (v14) {
    goto LABEL_17;
  }
  int64_t v15 = v10 + 3;
  if (v10 + 3 >= v42) {
    goto LABEL_32;
  }
  unint64_t v14 = *(void *)(v41 + 8 * v15);
  if (v14)
  {
LABEL_17:
    int64_t v10 = v15;
    goto LABEL_18;
  }
  int64_t v15 = v10 + 4;
  if (v10 + 4 < v42)
  {
    unint64_t v14 = *(void *)(v41 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        int64_t v10 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          break;
        }
        if (v10 >= v42) {
          goto LABEL_32;
        }
        unint64_t v14 = *(void *)(v41 + 8 * v10);
        ++v15;
        if (v14) {
          goto LABEL_18;
        }
      }
LABEL_34:
      __break(1u);
    }
    goto LABEL_17;
  }
LABEL_32:
  swift_release();
  return v40;
}

uint64_t sub_1000C8934()
{
  uint64_t v0 = type metadata accessor for OSLogger.Subsystem();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OSLogger();
  sub_10002F648(v4, qword_1001A3DD8);
  sub_10002F6AC(v4, (uint64_t)qword_1001A3DD8);
  if (qword_1001A0E58 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_10002F6AC(v0, (uint64_t)qword_1001AE350);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return OSLogger.init(subsystem:category:)();
}

uint64_t sub_1000C8A88()
{
  *(void *)(v1 + 24) = v0;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 32) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1000C8B1C;
  return static AppDistributor.distributorPriorityList.getter();
}

uint64_t sub_1000C8B1C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 40) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000C8C1C, 0, 0);
}

uint64_t sub_1000C8C1C()
{
  v1[2] = v1[5];
  uint64_t v2 = (char **)(v1 + 2);
  uint64_t v3 = sub_10002EC6C((void *)(v1[3] + 40), *(void *)(v1[3] + 64));
  uint64_t v5 = (void *)v1[5];
  if ((*(unsigned char *)(*v3 + 16) & 1) == 0)
  {
    uint64_t v6 = (const char *)v5[2];
    if (!v6)
    {
      int64_t v15 = 0;
      uint64_t v13 = 0;
      goto LABEL_16;
    }
    uint64_t result = v5[4];
    if (result == 0xD000000000000012 && v5[5] == 0x800000010015A8B0
      || (uint64_t v0 = "xp_ase_appstore_ue", result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      uint64_t v13 = 0;
    }
    else
    {
      if (v6 == (const char *)1)
      {
LABEL_42:
        uint64_t v0 = (char *)v1[5];
        uint64_t v13 = (uint64_t)v6;
LABEL_43:
        int64_t v15 = *((void *)v0 + 2);
        if (v15 < v13)
        {
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
LABEL_16:
        sub_1000DD440(v13, v15);
        uint64_t v4 = *v2;
        goto LABEL_17;
      }
      uint64_t v25 = v5 + 7;
      uint64_t v13 = 1;
      while (1)
      {
        uint64_t result = *(v25 - 1);
        if (result == 0xD000000000000012 && *v25 == 0x800000010015A8B0) {
          break;
        }
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if (result) {
          break;
        }
        uint64_t v26 = (const char *)(v13 + 1);
        if (__OFADD__(v13, 1)) {
          goto LABEL_49;
        }
        ++v13;
        v25 += 2;
        if (v26 == v6) {
          goto LABEL_42;
        }
      }
    }
    unint64_t v14 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    if ((const char *)v14 != v6)
    {
      if ((v14 & 0x8000000000000000) != 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v0 = (char *)v1[5];
      uint64_t v6 = (const char *)*((void *)v0 + 2);
      uint64_t v17 = 16 * v13;
      while (v14 < (unint64_t)v6)
      {
        NSString v20 = &v0[v17];
        if ((*(void *)&v0[v17 + 48] != 0xD000000000000012 || *(void *)&v0[v17 + 56] != 0x800000010015A8B0)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v14 != v13)
          {
            if (v13 >= (unint64_t)v6) {
              goto LABEL_47;
            }
            id v21 = &v0[16 * v13 + 32];
            uint64_t v6 = (const char *)*((void *)v21 + 1);
            uint64_t v27 = *(void *)v21;
            uint64_t v23 = *((void *)v20 + 6);
            uint64_t v22 = *((void *)v20 + 7);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v0 = sub_1000CC294((uint64_t)v0);
            }
            id v24 = &v0[16 * v13];
            *((void *)v24 + 4) = v23;
            *((void *)v24 + 5) = v22;
            swift_bridgeObjectRelease();
            if (v14 >= *((void *)v0 + 2)) {
              goto LABEL_48;
            }
            uint64_t v18 = &v0[v17];
            *((void *)v18 + 6) = v27;
            *((void *)v18 + 7) = v6;
            swift_bridgeObjectRelease();
            *uint64_t v2 = v0;
          }
          if (__OFADD__(v13++, 1)) {
            goto LABEL_46;
          }
        }
        ++v14;
        uint64_t v6 = (const char *)*((void *)v0 + 2);
        v17 += 16;
        if ((const char *)v14 == v6) {
          goto LABEL_43;
        }
      }
      goto LABEL_45;
    }
    uint64_t v6 = (const char *)v13;
    goto LABEL_42;
  }
  uint64_t v0 = (char *)0xD000000000000012;
  uint64_t v6 = "xp_ase_appstore_ue";
  char v7 = sub_100139C44(0xD000000000000012, 0x800000010015A8B0, (void *)v1[5]);
  uint64_t v4 = (char *)v1[5];
  if ((v7 & 1) == 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v4 = (char *)v1[5];
    if (isUniquelyReferenced_nonNull_native)
    {
LABEL_4:
      unint64_t v10 = *((void *)v4 + 2);
      unint64_t v9 = *((void *)v4 + 3);
      if (v10 >= v9 >> 1) {
        uint64_t v4 = sub_100076438((char *)(v9 > 1), v10 + 1, 1, v4);
      }
      *((void *)v4 + 2) = v10 + 1;
      unint64_t v11 = &v4[16 * v10];
      *((void *)v11 + 4) = v0;
      *((void *)v11 + 5) = (unint64_t)v6 | 0x8000000000000000;
      goto LABEL_17;
    }
LABEL_51:
    uint64_t v4 = sub_100076438(0, *((void *)v4 + 2) + 1, 1, v4);
    goto LABEL_4;
  }
LABEL_17:
  uint64_t v16 = (uint64_t (*)(char *))v1[1];
  return v16(v4);
}

uint64_t sub_1000C8F74(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  type metadata accessor for LogMessage.StringInterpolation();
  v2[11] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for OSLogger();
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  return _swift_task_switch(sub_1000C908C, 0, 0);
}

uint64_t sub_1000C908C()
{
  uint64_t v26 = v0;
  v0[6] = 0;
  os_eligibility_get_domain_answer();
  uint64_t v1 = v0[6];
  swift_bridgeObjectRetain();
  if (v1 == 4)
  {
    uint64_t v2 = v0[9];
  }
  else
  {
    uint64_t v3 = v0[9];
    uint64_t v4 = v0[10];
    uint64_t v5 = sub_1000C9788(v3);
    swift_bridgeObjectRelease();
    uint64_t v6 = sub_100043080((uint64_t)v5);
    swift_bridgeObjectRelease();
    uint64_t v7 = swift_task_alloc();
    *(void *)(v7 + 16) = v4;
    uint64_t v8 = sub_1000CC65C((uint64_t)sub_1000CCEA0, v7, v6);
    swift_task_dealloc();
    uint64_t v2 = sub_1000CCEC0(v3, v8);
    swift_release();
  }
  v0[15] = v2;
  if (qword_1001A0E08 != -1) {
    swift_once();
  }
  uint64_t v9 = v0[13];
  uint64_t v10 = v0[14];
  uint64_t v11 = v0[12];
  uint64_t v12 = sub_10002F6AC(v11, (uint64_t)qword_1001A3DD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v10, v12, v11);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v13._object = (void *)0x800000010015E0E0;
  v13._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v13);
  v0[5] = sub_10002EB60(&qword_1001A3E00);
  v0[2] = v2;
  swift_bridgeObjectRetain();
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)(v0 + 2), &qword_1001A1C50);
  v14._uint64_t countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v14);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  uint64_t v15 = swift_bridgeObjectRetain();
  uint64_t v16 = sub_1000C836C(v15);
  swift_bridgeObjectRelease();
  if (v16[2])
  {
    sub_10002EB60((uint64_t *)&unk_1001A1D30);
    uint64_t v17 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v17 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v25 = v17;
  uint64_t v18 = (void *)swift_bridgeObjectRetain();
  sub_1000CC2BC(v18, 1, &v25);
  v0[16] = 0;
  swift_bridgeObjectRelease();
  id v19 = v25;
  v0[17] = v25;
  uint64_t v20 = sub_10002EB60(&qword_1001A3E08);
  uint64_t v21 = swift_task_alloc();
  v0[18] = v21;
  *(void *)(v21 + 16) = v2;
  *(void *)(v21 + 24) = v19;
  uint64_t v22 = sub_10002EB60(&qword_1001A3E20);
  uint64_t v23 = (void *)swift_task_alloc();
  v0[19] = v23;
  void *v23 = v0;
  v23[1] = sub_1000C9534;
  uint64_t v28 = v22;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 7, v20, v22, 0, 0, &unk_1001A3E18, v21, v20);
}

uint64_t sub_1000C9534()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_1000C96B8, 0, 0);
}

uint64_t sub_1000C96B8()
{
  uint64_t v1 = sub_1000C813C(*(void *)(v0 + 56));
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void *))(v0 + 8);
  return v2(v1);
}

char *sub_1000C9788(uint64_t a1)
{
  uint64_t v22 = a1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v5 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = (char *)swift_bridgeObjectRetain();
  int64_t v7 = 0;
  uint64_t v8 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    if (v4)
    {
      unint64_t v9 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v10 = v9 | (v7 << 6);
    }
    else
    {
      int64_t v11 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        goto LABEL_42;
      }
      if (v11 >= v5)
      {
LABEL_37:
        swift_release();
        return v8;
      }
      unint64_t v12 = *(void *)(v22 + 8 * v11);
      ++v7;
      if (!v12)
      {
        int64_t v7 = v11 + 1;
        if (v11 + 1 >= v5) {
          goto LABEL_37;
        }
        unint64_t v12 = *(void *)(v22 + 8 * v7);
        if (!v12)
        {
          int64_t v7 = v11 + 2;
          if (v11 + 2 >= v5) {
            goto LABEL_37;
          }
          unint64_t v12 = *(void *)(v22 + 8 * v7);
          if (!v12)
          {
            int64_t v7 = v11 + 3;
            if (v11 + 3 >= v5) {
              goto LABEL_37;
            }
            unint64_t v12 = *(void *)(v22 + 8 * v7);
            if (!v12)
            {
              int64_t v13 = v11 + 4;
              if (v13 >= v5) {
                goto LABEL_37;
              }
              unint64_t v12 = *(void *)(v22 + 8 * v13);
              if (!v12)
              {
                while (1)
                {
                  int64_t v7 = v13 + 1;
                  if (__OFADD__(v13, 1)) {
                    goto LABEL_43;
                  }
                  if (v7 >= v5) {
                    goto LABEL_37;
                  }
                  unint64_t v12 = *(void *)(v22 + 8 * v7);
                  ++v13;
                  if (v12) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v7 = v13;
            }
          }
        }
      }
LABEL_23:
      unint64_t v4 = (v12 - 1) & v12;
      unint64_t v10 = __clz(__rbit64(v12)) + (v7 << 6);
    }
    uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8 * v10);
    uint64_t v15 = *(void *)(v14 + 16);
    int64_t v16 = *((void *)v8 + 2);
    int64_t v17 = v16 + v15;
    if (__OFADD__(v16, v15)) {
      break;
    }
    swift_bridgeObjectRetain();
    uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
    if (result && v17 <= *((void *)v8 + 3) >> 1)
    {
      if (!*(void *)(v14 + 16)) {
        goto LABEL_4;
      }
    }
    else
    {
      if (v16 <= v17) {
        int64_t v18 = v16 + v15;
      }
      else {
        int64_t v18 = v16;
      }
      uint64_t result = sub_100076438(result, v18, 1, v8);
      uint64_t v8 = result;
      if (!*(void *)(v14 + 16))
      {
LABEL_4:
        if (v15) {
          goto LABEL_39;
        }
        goto LABEL_5;
      }
    }
    if ((*((void *)v8 + 3) >> 1) - *((void *)v8 + 2) < v15) {
      goto LABEL_40;
    }
    uint64_t result = (char *)swift_arrayInitWithCopy();
    if (v15)
    {
      uint64_t v19 = *((void *)v8 + 2);
      BOOL v20 = __OFADD__(v19, v15);
      uint64_t v21 = v19 + v15;
      if (v20) {
        goto LABEL_41;
      }
      *((void *)v8 + 2) = v21;
    }
LABEL_5:
    uint64_t result = (char *)swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_1000C99CC(uint64_t *a1, void *a2)
{
  unint64_t v36 = a2;
  uint64_t v3 = type metadata accessor for LogMessage.StringInterpolation();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = type metadata accessor for OSLogger();
  uint64_t v39 = *(void *)(v4 - 8);
  uint64_t v40 = v4;
  __chkstk_darwin(v4);
  dispatch_group_t v38 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for State();
  uint64_t v33 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v34 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for App.Kind();
  uint64_t v32 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AdamID();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = type metadata accessor for App();
  uint64_t v31 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  int64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *a1;
  uint64_t v15 = a1[1];
  id v16 = objc_allocWithZone((Class)ASCAdamID);
  swift_bridgeObjectRetain();
  uint64_t v37 = v14;
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v18 = [v16 initWithStringValue:v17];

  [v18 int64value];
  uint64_t v19 = v41[5];
  AdamID.init(value:)();
  if (v19)
  {

    if (qword_1001A0E08 != -1) {
      swift_once();
    }
    uint64_t v20 = v40;
    uint64_t v21 = sub_10002F6AC(v40, (uint64_t)qword_1001A3DD8);
    uint64_t v23 = v38;
    uint64_t v22 = v39;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v38, v21, v20);
    sub_10002EB60((uint64_t *)&unk_1001A19E0);
    type metadata accessor for LogMessage();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v24._object = (void *)0x800000010015E1A0;
    v24._uint64_t countAndFlagsBits = 0xD000000000000021;
    LogMessage.StringInterpolation.appendLiteral(_:)(v24);
    void v41[3] = &type metadata for String;
    v41[0] = v37;
    v41[1] = v15;
    swift_bridgeObjectRetain();
    LogMessage.StringInterpolation.appendInterpolation(safe:)();
    sub_100034B8C((uint64_t)v41, &qword_1001A1C50);
    v25._uint64_t countAndFlagsBits = 0;
    v25._object = (void *)0xE000000000000000;
    LogMessage.StringInterpolation.appendLiteral(_:)(v25);
    LogMessage.init(stringInterpolation:)();
    Logger.error(_:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v23, v20);
    return 0;
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v32 + 104))(v9, enum case for App.Kind.store(_:), v7);
    App.init(id:kind:)();

    sub_10002EC6C(v36, v36[3]);
    uint64_t v27 = v34;
    AppStateController.state(forApp:)();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v11);
    uint64_t v28 = v33;
    uint64_t v29 = v35;
    if ((*(unsigned int (**)(char *, uint64_t))(v33 + 88))(v27, v35) == enum case for State.openable(_:))
    {
      (*(void (**)(char *, uint64_t))(v28 + 96))(v27, v29);
      uint64_t v30 = type metadata accessor for AppOpenableDestination();
      (*(void (**)(char *, uint64_t))(*(void *)(v30 - 8) + 8))(v27, v30);
      return 1;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v28 + 8))(v27, v29);
      return 0;
    }
  }
}

uint64_t sub_1000C9FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return _swift_task_switch(sub_1000CA014, 0, 0);
}

uint64_t sub_1000CA014()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  *(void *)(swift_task_alloc() + 16) = v2;
  uint64_t v3 = v1 + 64;
  uint64_t v4 = -1;
  uint64_t v5 = -1 << *(unsigned char *)(v1 + 32);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1 << -(char)v5);
  }
  unint64_t v6 = v4 & *(void *)(v1 + 64);
  int64_t v7 = (unint64_t)(63 - v5) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return result;
    }
    if (v17 >= v7) {
      goto LABEL_23;
    }
    unint64_t v18 = *(void *)(v3 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v18 = *(void *)(v3 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v18 = *(void *)(v3 + 8 * v9);
        if (!v18)
        {
          int64_t v9 = v17 + 3;
          if (v17 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v18 = *(void *)(v3 + 8 * v9);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v18 - 1) & v18;
    unint64_t v11 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_5:
    uint64_t v12 = v0[3];
    int64_t v13 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v11);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    uint64_t v16 = *(void *)(*(void *)(v1 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000CA384(v14, v15, v16, v12);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v19 = v17 + 4;
  if (v19 < v7)
  {
    unint64_t v18 = *(void *)(v3 + 8 * v19);
    if (!v18)
    {
      while (1)
      {
        int64_t v9 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          goto LABEL_27;
        }
        if (v9 >= v7) {
          goto LABEL_23;
        }
        unint64_t v18 = *(void *)(v3 + 8 * v9);
        ++v19;
        if (v18) {
          goto LABEL_22;
        }
      }
    }
    int64_t v9 = v19;
    goto LABEL_22;
  }
LABEL_23:
  uint64_t v20 = (uint64_t *)v0[3];
  swift_release();
  swift_task_dealloc();
  uint64_t v21 = *v20;
  Swift::String v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1001A3E28 + dword_1001A3E28);
  swift_bridgeObjectRetain();
  uint64_t v22 = (void *)swift_task_alloc();
  v0[6] = v22;
  *uint64_t v22 = v0;
  v22[1] = sub_1000CA274;
  uint64_t v23 = v0[5];
  return v24((uint64_t)_swiftEmptyDictionarySingleton, v21, v23);
}

uint64_t sub_1000CA274(uint64_t a1)
{
  uint64_t v3 = *(void **)(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc();
  *uint64_t v3 = a1;
  uint64_t v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

uint64_t sub_1000CA384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v48 = a1;
  uint64_t v7 = sub_10002EB60(&qword_1001A2450);
  __chkstk_darwin(v7 - 8);
  int64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a3 + 16);
  if (!v10)
  {
    int64_t v13 = (char *)_swiftEmptyArrayStorage;
LABEL_69:
    uint64_t v41 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v9, 1, 1, v41);
    int64_t v42 = (void *)swift_allocObject();
    v42[2] = 0;
    void v42[3] = 0;
    v42[4] = v48;
    v42[5] = a2;
    void v42[6] = v13;
    swift_bridgeObjectRetain();
    sub_1000CAA54((uint64_t)v9, (uint64_t)&unk_1001A3E50, (uint64_t)v42);
    return sub_100034B8C((uint64_t)v9, &qword_1001A2450);
  }
  uint64_t v46 = a2;
  uint64_t v47 = a4;
  long long v44 = (char *)v49 + 2;
  unint64_t v45 = (char *)v49 + 3;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v12 = 0;
  int64_t v13 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    uint64_t v14 = (uint64_t *)(a3 + 32 + 16 * v12);
    uint64_t v15 = *v14;
    unint64_t v16 = v14[1];
    uint64_t v17 = HIBYTE(v16) & 0xF;
    uint64_t v18 = v15 & 0xFFFFFFFFFFFFLL;
    if ((v16 & 0x2000000000000000) != 0) {
      uint64_t v19 = HIBYTE(v16) & 0xF;
    }
    else {
      uint64_t v19 = v15 & 0xFFFFFFFFFFFFLL;
    }
    if (!v19) {
      goto LABEL_4;
    }
    if ((v16 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      unint64_t v22 = sub_100075720(v15, v16, 10);
      char v40 = v39;
      uint64_t result = swift_bridgeObjectRelease();
      if ((v40 & 1) == 0) {
        goto LABEL_40;
      }
      goto LABEL_4;
    }
    if ((v16 & 0x2000000000000000) == 0)
    {
      if ((v15 & 0x1000000000000000) != 0) {
        uint64_t v20 = (unsigned __int8 *)((v16 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v20 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t result = (uint64_t)sub_1000756F0(v20, v18, 10);
      if ((v21 & 1) == 0)
      {
        unint64_t v22 = result;
LABEL_40:
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_100076BB0(0, *((void *)v13 + 2) + 1, 1, v13);
          int64_t v13 = (char *)result;
        }
        unint64_t v30 = *((void *)v13 + 2);
        unint64_t v29 = *((void *)v13 + 3);
        if (v30 >= v29 >> 1)
        {
          uint64_t result = (uint64_t)sub_100076BB0((char *)(v29 > 1), v30 + 1, 1, v13);
          int64_t v13 = (char *)result;
        }
        *((void *)v13 + 2) = v30 + 1;
        *(void *)&v13[8 * v30 + 32] = v22;
        goto LABEL_4;
      }
      goto LABEL_4;
    }
    v49[0] = v15;
    v49[1] = v16 & 0xFFFFFFFFFFFFFFLL;
    if (v15 == 43)
    {
      if (!v17) {
        goto LABEL_71;
      }
      if (v17 != 1 && (BYTE1(v15) - 48) <= 9u)
      {
        unint64_t v22 = (BYTE1(v15) - 48);
        if (v17 == 2) {
          goto LABEL_40;
        }
        if ((BYTE2(v15) - 48) <= 9u)
        {
          unint64_t v22 = 10 * (BYTE1(v15) - 48) + (BYTE2(v15) - 48);
          uint64_t v26 = v17 - 3;
          if (v17 != 3)
          {
            uint64_t v27 = (unsigned __int8 *)v45;
            while (1)
            {
              unsigned int v28 = *v27 - 48;
              if (v28 > 9) {
                goto LABEL_4;
              }
              if (!is_mul_ok(v22, 0xAuLL)) {
                goto LABEL_4;
              }
              BOOL v24 = __CFADD__(10 * v22, v28);
              unint64_t v22 = 10 * v22 + v28;
              if (v24) {
                goto LABEL_4;
              }
              ++v27;
              if (!--v26) {
                goto LABEL_40;
              }
            }
          }
          goto LABEL_40;
        }
      }
      goto LABEL_4;
    }
    if (v15 != 45)
    {
      if (v17 && (v15 - 48) <= 9u)
      {
        unint64_t v22 = (v15 - 48);
        if (v17 == 1) {
          goto LABEL_40;
        }
        if ((BYTE1(v15) - 48) <= 9u)
        {
          unint64_t v22 = 10 * (v15 - 48) + (BYTE1(v15) - 48);
          uint64_t v31 = v17 - 2;
          if (v17 != 2)
          {
            uint64_t v32 = (unsigned __int8 *)v44;
            while (1)
            {
              unsigned int v33 = *v32 - 48;
              if (v33 > 9) {
                goto LABEL_4;
              }
              if (!is_mul_ok(v22, 0xAuLL)) {
                goto LABEL_4;
              }
              BOOL v24 = __CFADD__(10 * v22, v33);
              unint64_t v22 = 10 * v22 + v33;
              if (v24) {
                goto LABEL_4;
              }
              ++v32;
              if (!--v31) {
                goto LABEL_40;
              }
            }
          }
          goto LABEL_40;
        }
      }
      goto LABEL_4;
    }
    if (!v17) {
      break;
    }
    if (v17 != 1)
    {
      unsigned __int8 v23 = BYTE1(v15) - 48;
      if ((BYTE1(v15) - 48) <= 9u)
      {
        BOOL v24 = v23 == 0;
        unint64_t v25 = -(uint64_t)v23;
        if (v24)
        {
          if (v17 == 2)
          {
            unint64_t v22 = v25;
            goto LABEL_40;
          }
          unsigned __int8 v34 = BYTE2(v15) - 48;
          if ((BYTE2(v15) - 48) <= 9u && is_mul_ok(v25, 0xAuLL))
          {
            unint64_t v35 = 10 * v25;
            unint64_t v22 = v35 - v34;
            if (v35 >= v34)
            {
              uint64_t v36 = v17 - 3;
              if (v17 != 3)
              {
                uint64_t v37 = (unsigned __int8 *)v45;
                while (1)
                {
                  unsigned int v38 = *v37 - 48;
                  if (v38 > 9) {
                    goto LABEL_4;
                  }
                  if (!is_mul_ok(v22, 0xAuLL)) {
                    goto LABEL_4;
                  }
                  BOOL v24 = 10 * v22 >= v38;
                  unint64_t v22 = 10 * v22 - v38;
                  if (!v24) {
                    goto LABEL_4;
                  }
                  ++v37;
                  if (!--v36) {
                    goto LABEL_40;
                  }
                }
              }
              goto LABEL_40;
            }
          }
        }
      }
    }
LABEL_4:
    if (++v12 == v10)
    {
      swift_bridgeObjectRelease();
      a2 = v46;
      goto LABEL_69;
    }
  }
  __break(1u);
LABEL_71:
  __break(1u);
  return result;
}

uint64_t sub_1000CA860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[4] = a5;
  v6[5] = a6;
  v6[2] = a1;
  v6[3] = a4;
  return _swift_task_switch(sub_1000CA884, 0, 0);
}

uint64_t sub_1000CA884()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = (void *)v0[2];
  *uint64_t v2 = v0[3];
  v2[1] = v1;
  swift_bridgeObjectRetain();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[6] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000CA934;
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[3];
  return static AppDistributor.availableApps(for:distributor:)(v5, v6, v4);
}

uint64_t sub_1000CA934(uint64_t a1)
{
  *(void *)(*(void *)v1 + 56) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000CAA34, 0, 0);
}

uint64_t sub_1000CAA34()
{
  *(void *)(*(void *)(v0 + 16) + 16) = *(void *)(v0 + 56);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CAA54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_10002EB60(&qword_1001A2450);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BCC80(a1, (uint64_t)v10);
  uint64_t v11 = type metadata accessor for TaskPriority();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_100034B8C((uint64_t)v10, &qword_1001A2450);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v15 = v14;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v13 = 0;
  uint64_t v15 = 0;
LABEL_6:
  uint64_t v16 = *v4;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a2;
  *(void *)(v17 + 24) = a3;
  sub_10002EB60(&qword_1001A3E08);
  uint64_t v18 = (void *)(v15 | v13);
  if (v15 | v13)
  {
    v21[0] = 0;
    v21[1] = 0;
    uint64_t v18 = v21;
    void v21[2] = v13;
    void v21[3] = v15;
  }
  v20[1] = 1;
  void v20[2] = v18;
  uint64_t v20[3] = v16;
  swift_task_create();
  return swift_release();
}

uint64_t sub_1000CAC5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 32) = a1;
  *(void *)(v3 + 40) = a3;
  uint64_t v5 = type metadata accessor for AppVersion();
  *(void *)(v3 + 48) = v5;
  *(void *)(v3 + 56) = *(void *)(v5 - 8);
  *(void *)(v3 + 64) = swift_task_alloc();
  *(_OWORD *)(v3 + 72) = *(_OWORD *)a2;
  *(void *)(v3 + 88) = *(void *)(a2 + 16);
  return _swift_task_switch(sub_1000CAD30, 0, 0);
}

uint64_t sub_1000CAD30()
{
  uint64_t v1 = v0[11];
  if (!v1 || (uint64_t v2 = *(void *)(v1 + 16)) == 0)
  {
LABEL_28:
    swift_task_dealloc();
    uint64_t v47 = (uint64_t (*)(void))v0[1];
    return v47();
  }
  uint64_t v3 = v0[7];
  uint64_t v51 = v0[5];
  uint64_t v4 = *(void (**)(void, uint64_t, void))(v3 + 16);
  v3 += 16;
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 64));
  uint64_t v49 = (void (**)(uint64_t, uint64_t))(v3 - 8);
  uint64_t v50 = v4;
  uint64_t v48 = *(void *)(v3 + 56);
  swift_bridgeObjectRetain();
  uint64_t v6 = 0;
  uint64_t v7 = &type metadata for UInt64;
  while (1)
  {
    v50(v0[8], v5, v0[6]);
    v0[2] = AppVersion.appleItemID.getter();
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v55 = v9;
    uint64_t v10 = *(void *)(v51 + 16);
    swift_bridgeObjectRetain();
    uint64_t v54 = v2;
    if (v10)
    {
      uint64_t v11 = v0[9];
      uint64_t v12 = v0[10];
      swift_bridgeObjectRetain();
      unint64_t v13 = sub_10003A860(v11, v12);
      if (v14)
      {
        uint64_t v15 = (uint64_t *)(*(void *)(v51 + 56) + 16 * v13);
        uint64_t v52 = v15[1];
        uint64_t v53 = *v15;
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v52 = 0;
        uint64_t v53 = 0;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v52 = 0;
      uint64_t v53 = 0;
    }
    uint64_t v16 = (uint64_t *)v0[4];
    v0[3] = AppVersion.appleVersionID.getter();
    uint64_t v17 = v7;
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v20 = v19;
    sub_100034BE8((uint64_t)v6);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v22 = *v16;
    uint64_t v56 = *v16;
    *uint64_t v16 = 0x8000000000000000;
    unint64_t v24 = sub_10003A860(v8, v55);
    uint64_t v25 = *(void *)(v22 + 16);
    BOOL v26 = (v23 & 1) == 0;
    uint64_t result = v25 + v26;
    if (__OFADD__(v25, v26))
    {
      __break(1u);
LABEL_35:
      __break(1u);
      return result;
    }
    char v28 = v23;
    if (*(void *)(v22 + 24) < result) {
      break;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1000407E0();
      uint64_t v22 = v56;
    }
LABEL_16:
    uint64_t v31 = (void *)v0[4];
    *uint64_t v31 = v22;
    swift_bridgeObjectRelease();
    uint64_t v32 = (void *)*v31;
    if ((v28 & 1) == 0)
    {
      v32[(v24 >> 6) + 8] |= 1 << v24;
      unsigned int v33 = (uint64_t *)(v32[6] + 16 * v24);
      *unsigned int v33 = v8;
      v33[1] = v55;
      *(void *)(v32[7] + 8 * v24) = _swiftEmptyArrayStorage;
      uint64_t v34 = v32[2];
      uint64_t v35 = v34 + 1;
      BOOL v36 = __OFADD__(v34, 1);
      uint64_t result = swift_bridgeObjectRetain();
      if (v36) {
        goto LABEL_35;
      }
      _OWORD v32[2] = v35;
    }
    uint64_t v37 = v32[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    unsigned int v38 = *(char **)(v37 + 8 * v24);
    char v39 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v37 + 8 * v24) = v38;
    if ((v39 & 1) == 0)
    {
      unsigned int v38 = sub_100076CAC(0, *((void *)v38 + 2) + 1, 1, v38);
      *(void *)(v37 + 8 * v24) = v38;
    }
    unint64_t v41 = *((void *)v38 + 2);
    unint64_t v40 = *((void *)v38 + 3);
    if (v41 >= v40 >> 1)
    {
      unsigned int v38 = sub_100076CAC((char *)(v40 > 1), v41 + 1, 1, v38);
      *(void *)(v37 + 8 * v24) = v38;
    }
    uint64_t v43 = v0[9];
    uint64_t v42 = v0[10];
    uint64_t v44 = v0[8];
    uint64_t v45 = v0[6];
    *((void *)v38 + 2) = v41 + 1;
    uint64_t v46 = &v38[48 * v41];
    *((void *)v46 + 4) = v43;
    *((void *)v46 + 5) = v42;
    *((void *)v46 + 6) = v53;
    *((void *)v46 + 7) = v52;
    *((void *)v46 + 8) = v18;
    *((void *)v46 + 9) = v20;
    swift_bridgeObjectRelease();
    (*v49)(v44, v45);
    v5 += v48;
    uint64_t v6 = sub_1000CB158;
    uint64_t v2 = v54 - 1;
    uint64_t v7 = v17;
    if (v54 == 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_28;
    }
  }
  sub_10003D368(result, isUniquelyReferenced_nonNull_native);
  uint64_t v22 = v56;
  unint64_t v29 = sub_10003A860(v8, v55);
  if ((v28 & 1) == (v30 & 1))
  {
    unint64_t v24 = v29;
    goto LABEL_16;
  }
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

void sub_1000CB158(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
}

uint64_t sub_1000CB168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[9] = a2;
  v3[10] = a3;
  uint64_t v5 = sub_10002EB60(&qword_1001A3E30);
  v3[11] = v5;
  v3[12] = *(void *)(v5 - 8);
  v3[13] = swift_task_alloc();
  v3[8] = a1;
  return _swift_task_switch(sub_1000CB234, 0, 0);
}

uint64_t sub_1000CB234()
{
  sub_10002EB60(&qword_1001A3E08);
  TaskGroup.makeAsyncIterator()();
  unint64_t v1 = sub_1000CD1D4();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000CB310;
  uint64_t v3 = *(void *)(v0 + 88);
  return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 40, v3, v1);
}

uint64_t sub_1000CB310()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = v2[12];
    uint64_t v3 = v2[13];
    uint64_t v5 = v2[11];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    uint64_t v6 = sub_1000CB580;
  }
  else
  {
    uint64_t v6 = sub_1000CB454;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000CB454()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  v0[16] = v1;
  v0[17] = v2;
  if (v1)
  {
    v0[2] = v0[5];
    v0[3] = v1;
    v0[4] = v2;
    uint64_t v3 = (void *)swift_task_alloc();
    v0[18] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1000CB5EC;
    uint64_t v4 = v0[10];
    return sub_1000CAC5C((uint64_t)(v0 + 8), (uint64_t)(v0 + 2), v4);
  }
  else
  {
    (*(void (**)(void, void))(v0[12] + 8))(v0[13], v0[11]);
    sub_1000CD230(v0[5], v0[6]);
    swift_bridgeObjectRelease();
    uint64_t v6 = v0[8];
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(uint64_t))v0[1];
    return v7(v6);
  }
}

uint64_t sub_1000CB580()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000CB5EC()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = v2[12];
    uint64_t v3 = v2[13];
    uint64_t v5 = v2[11];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    uint64_t v6 = sub_1000CB814;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = sub_1000CB75C;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000CB75C()
{
  unint64_t v1 = sub_1000CD1D4();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000CB310;
  uint64_t v3 = *(void *)(v0 + 88);
  return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 40, v3, v1);
}

uint64_t sub_1000CB814()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000CB880(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_10002EB60(&qword_1001A2450);
  uint64_t result = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v43[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = HIBYTE(a2) & 0xF;
  uint64_t v17 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v18 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v18 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v18) {
    return result;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    unint64_t v21 = sub_100075720(a1, a2, 10);
    char v41 = v40;
    uint64_t result = swift_bridgeObjectRelease();
    if (v41) {
      return result;
    }
    goto LABEL_39;
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    v43[0] = a1;
    v43[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (a1 == 43)
    {
      if (!v16) {
        goto LABEL_66;
      }
      if (v16 == 1) {
        goto LABEL_64;
      }
      if ((BYTE1(a1) - 48) > 9u) {
        goto LABEL_34;
      }
      unint64_t v21 = (BYTE1(a1) - 48);
      if (v16 != 2)
      {
        if ((BYTE2(a1) - 48) > 9u) {
          goto LABEL_34;
        }
        unint64_t v21 = 10 * (BYTE1(a1) - 48) + (BYTE2(a1) - 48);
        uint64_t v25 = v16 - 3;
        if (v16 != 3)
        {
          BOOL v26 = (unsigned __int8 *)v43 + 3;
          while (1)
          {
            unsigned int v27 = *v26 - 48;
            if (v27 > 9) {
              goto LABEL_34;
            }
            if (!is_mul_ok(v21, 0xAuLL)) {
              goto LABEL_34;
            }
            BOOL v23 = __CFADD__(10 * v21, v27);
            unint64_t v21 = 10 * v21 + v27;
            if (v23) {
              goto LABEL_34;
            }
            LOBYTE(v16) = 0;
            ++v26;
            if (!--v25) {
              goto LABEL_38;
            }
          }
        }
      }
    }
    else
    {
      if (a1 == 45)
      {
        if (v16)
        {
          if (v16 != 1)
          {
            unsigned __int8 v22 = BYTE1(a1) - 48;
            if ((BYTE1(a1) - 48) <= 9u)
            {
              unint64_t v21 = 0;
              BOOL v23 = v22 == 0;
              unint64_t v24 = -(uint64_t)v22;
              if (!v23) {
                goto LABEL_35;
              }
              if (v16 == 2)
              {
                LOBYTE(v16) = 0;
                unint64_t v21 = v24;
                goto LABEL_38;
              }
              unsigned __int8 v35 = BYTE2(a1) - 48;
              if ((BYTE2(a1) - 48) <= 9u && is_mul_ok(v24, 0xAuLL))
              {
                unint64_t v36 = 10 * v24;
                unint64_t v21 = v36 - v35;
                if (v36 >= v35)
                {
                  uint64_t v37 = v16 - 3;
                  if (v16 != 3)
                  {
                    unsigned int v38 = (unsigned __int8 *)v43 + 3;
                    while (1)
                    {
                      unsigned int v39 = *v38 - 48;
                      if (v39 > 9) {
                        goto LABEL_34;
                      }
                      if (!is_mul_ok(v21, 0xAuLL)) {
                        goto LABEL_34;
                      }
                      BOOL v23 = 10 * v21 >= v39;
                      unint64_t v21 = 10 * v21 - v39;
                      if (!v23) {
                        goto LABEL_34;
                      }
                      LOBYTE(v16) = 0;
                      ++v38;
                      if (!--v37) {
                        goto LABEL_38;
                      }
                    }
                  }
                  goto LABEL_37;
                }
              }
            }
LABEL_34:
            unint64_t v21 = 0;
LABEL_35:
            LOBYTE(v16) = 1;
            goto LABEL_38;
          }
LABEL_64:
          unint64_t v21 = 0;
LABEL_38:
          if (v16) {
            return result;
          }
          goto LABEL_39;
        }
        __break(1u);
LABEL_66:
        __break(1u);
        return result;
      }
      if (!v16 || (a1 - 48) > 9u) {
        goto LABEL_34;
      }
      unint64_t v21 = (a1 - 48);
      if (v16 != 1)
      {
        if ((BYTE1(a1) - 48) > 9u) {
          goto LABEL_34;
        }
        unint64_t v21 = 10 * (a1 - 48) + (BYTE1(a1) - 48);
        uint64_t v32 = v16 - 2;
        if (v16 != 2)
        {
          unsigned int v33 = (unsigned __int8 *)v43 + 2;
          while (1)
          {
            unsigned int v34 = *v33 - 48;
            if (v34 > 9) {
              goto LABEL_34;
            }
            if (!is_mul_ok(v21, 0xAuLL)) {
              goto LABEL_34;
            }
            BOOL v23 = __CFADD__(10 * v21, v34);
            unint64_t v21 = 10 * v21 + v34;
            if (v23) {
              goto LABEL_34;
            }
            LOBYTE(v16) = 0;
            ++v33;
            if (!--v32) {
              goto LABEL_38;
            }
          }
        }
      }
    }
LABEL_37:
    LOBYTE(v16) = 0;
    goto LABEL_38;
  }
  if ((a1 & 0x1000000000000000) != 0) {
    uint64_t v19 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else {
    uint64_t v19 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
  uint64_t result = (uint64_t)sub_1000756F0(v19, v17, 10);
  if ((v20 & 1) == 0)
  {
    unint64_t v21 = result;
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t result = sub_1000DAAF8(a3, a4);
    if ((v28 & 1) == 0)
    {
      uint64_t v29 = result;
      uint64_t v30 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v15, 1, 1, v30);
      uint64_t v31 = (void *)swift_allocObject();
      v31[2] = 0;
      v31[3] = 0;
      void v31[4] = a5;
      void v31[5] = a6;
      v31[6] = v21;
      v31[7] = v29;
      swift_bridgeObjectRetain();
      sub_1000AA270((uint64_t)v15, (uint64_t)&unk_1001A3E78, (uint64_t)v31);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1000CBC88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[24] = a6;
  v7[25] = a7;
  v7[22] = a4;
  v7[23] = a5;
  type metadata accessor for LogMessage.StringInterpolation();
  v7[26] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for OSLogger();
  v7[27] = v12;
  v7[28] = *(void *)(v12 - 8);
  v7[29] = swift_task_alloc();
  unint64_t v13 = (void *)swift_task_alloc();
  v7[30] = v13;
  void *v13 = v7;
  v13[1] = sub_1000CBDD4;
  return static AppDistributor.requestProductPage(_:itemID:versionID:)(a4, a5, a6, a7, 0);
}

uint64_t sub_1000CBDD4()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 248) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1000CBF1C, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1000CBF1C()
{
  unint64_t v1 = v0;
  if (qword_1001A0E68 != -1) {
    swift_once();
  }
  uint64_t v3 = v0[28];
  uint64_t v2 = v0[29];
  uint64_t v20 = v1[29];
  uint64_t v4 = v1[27];
  uint64_t v5 = v1[24];
  uint64_t v6 = v1[23];
  uint64_t v18 = v1[25];
  uint64_t v19 = v1[22];
  uint64_t v7 = sub_10002F6AC(v4, (uint64_t)qword_1001AE380);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v7, v4);
  sub_10002EB60((uint64_t *)&unk_1001A19E0);
  type metadata accessor for LogMessage();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_10014CED0;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v8._object = (void *)0x800000010015ADC0;
  v8._uint64_t countAndFlagsBits = 0xD000000000000023;
  LogMessage.StringInterpolation.appendLiteral(_:)(v8);
  v1[5] = &type metadata for UInt64;
  v1[2] = v5;
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)(v1 + 2), &qword_1001A1C50);
  v9._uint64_t countAndFlagsBits = 0x6576206874697720;
  v9._object = (void *)0xEE00206E6F697372;
  LogMessage.StringInterpolation.appendLiteral(_:)(v9);
  v1[9] = &type metadata for UInt64;
  v1[6] = v18;
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)(v1 + 6), &qword_1001A1C50);
  v10._uint64_t countAndFlagsBits = 544106784;
  v10._object = (void *)0xE400000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v10);
  v1[13] = &type metadata for String;
  v1[10] = v19;
  v1[11] = v6;
  swift_bridgeObjectRetain();
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)(v1 + 10), &qword_1001A1C50);
  v11._uint64_t countAndFlagsBits = 8238;
  v11._object = (void *)0xE200000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v11);
  swift_getErrorValue();
  uint64_t v12 = v1[18];
  uint64_t v13 = v1[19];
  v1[17] = v13;
  uint64_t v14 = sub_100031A88(v1 + 14);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v14, v12, v13);
  LogMessage.StringInterpolation.appendInterpolation(safe:)();
  sub_100034B8C((uint64_t)(v1 + 14), &qword_1001A1C50);
  v15._uint64_t countAndFlagsBits = 46;
  v15._object = (void *)0xE100000000000000;
  LogMessage.StringInterpolation.appendLiteral(_:)(v15);
  LogMessage.init(stringInterpolation:)();
  Logger.error(_:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v20, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v1[1];
  return v16();
}

void *sub_1000CC280(void *a1)
{
  return sub_100076318(0, a1[2], 0, a1);
}

char *sub_1000CC294(uint64_t a1)
{
  return sub_100076438(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_1000CC2A8(uint64_t a1)
{
  return sub_100076988(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000CC2BC(void *a1, char a2, void *a3)
{
  uint64_t v3 = a1[2];
  if (!v3) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v7 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v8 = a1[7];
  uint64_t v46 = a1[6];
  swift_bridgeObjectRetain();
  Swift::String v9 = (void *)*a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v11 = sub_10003A860(v7, v6);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13)) {
    goto LABEL_23;
  }
  char v15 = v10;
  if (v9[3] >= v14)
  {
    if (a2)
    {
      if (v10) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_10003FB48();
      if (v15) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v19 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    uint64_t v20 = (uint64_t *)(v19[6] + 16 * v11);
    uint64_t *v20 = v7;
    v20[1] = v6;
    uint64_t v21 = (void *)(v19[7] + 16 * v11);
    *uint64_t v21 = v46;
    v21[1] = v8;
    uint64_t v22 = v19[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    void v19[2] = v24;
    uint64_t v25 = v3 - 1;
    if (v3 == 1) {
      return swift_bridgeObjectRelease_n();
    }
    for (unint64_t i = a1 + 11; ; i += 4)
    {
      uint64_t v28 = *(i - 3);
      uint64_t v27 = *(i - 2);
      uint64_t v29 = *(i - 1);
      uint64_t v30 = *i;
      uint64_t v31 = (void *)*a3;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v32 = sub_10003A860(v28, v27);
      uint64_t v34 = v31[2];
      BOOL v35 = (v33 & 1) == 0;
      BOOL v23 = __OFADD__(v34, v35);
      uint64_t v36 = v34 + v35;
      if (v23) {
        break;
      }
      char v37 = v33;
      if (v31[3] < v36)
      {
        sub_10003BBB4(v36, 1);
        unint64_t v32 = sub_10003A860(v28, v27);
        if ((v37 & 1) != (v38 & 1)) {
          goto LABEL_25;
        }
      }
      if (v37) {
        goto LABEL_10;
      }
      unsigned int v39 = (void *)*a3;
      *(void *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
      char v40 = (uint64_t *)(v39[6] + 16 * v32);
      *char v40 = v28;
      v40[1] = v27;
      char v41 = (void *)(v39[7] + 16 * v32);
      *char v41 = v29;
      v41[1] = v30;
      uint64_t v42 = v39[2];
      BOOL v23 = __OFADD__(v42, 1);
      uint64_t v43 = v42 + 1;
      if (v23) {
        goto LABEL_24;
      }
      void v39[2] = v43;
      if (!--v25) {
        return swift_bridgeObjectRelease_n();
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_10003BBB4(v14, a2 & 1);
  unint64_t v16 = sub_10003A860(v7, v6);
  if ((v15 & 1) == (v17 & 1))
  {
    unint64_t v11 = v16;
    if ((v15 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    swift_allocError();
    swift_willThrow();
    swift_errorRetain();
    sub_10002EB60((uint64_t *)&unk_1001A3FC0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      return swift_errorRelease();
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v44._object = (void *)0x800000010015E140;
  v44._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v44);
  _print_unlocked<A, B>(_:_:)();
  v45._uint64_t countAndFlagsBits = 39;
  v45._object = (void *)0xE100000000000000;
  String.append(_:)(v45);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000CC65C(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t (*)(void *))isStackAllocationSafe;
  char v6 = *(unsigned char *)(a3 + 32);
  unint64_t v7 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    uint64_t v9 = sub_1000CC7E0((uint64_t)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, a3, v5);
    swift_release();
    if (v3) {
      swift_willThrow();
    }
  }
  else
  {
    char v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    uint64_t v9 = sub_1000CC7E0((uint64_t)v10, v7, a3, v5);
    swift_release();
    swift_slowDealloc();
  }
  return v9;
}

uint64_t sub_1000CC7E0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *))
{
  uint64_t v20 = (unint64_t *)result;
  int64_t v7 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = a3 + 56;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 56);
  int64_t v24 = (unint64_t)(v8 + 63) >> 6;
  while (v10)
  {
    unint64_t v11 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v12 = v11 | (v7 << 6);
LABEL_17:
    unint64_t v16 = (void *)(*(void *)(a3 + 48) + 16 * v12);
    uint64_t v17 = v16[1];
    v23[0] = *v16;
    v23[1] = v17;
    swift_bridgeObjectRetain();
    char v18 = a4(v23);
    uint64_t result = swift_bridgeObjectRelease();
    if (v4) {
      return result;
    }
    if (v18)
    {
      *(unint64_t *)((char *)v20 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      BOOL v13 = __OFADD__(v21++, 1);
      if (v13) {
        goto LABEL_30;
      }
    }
  }
  BOOL v13 = __OFADD__(v7++, 1);
  if (v13)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v7 >= v24) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(v22 + 8 * v7);
  if (v14)
  {
LABEL_16:
    unint64_t v10 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v7 << 6);
    goto LABEL_17;
  }
  int64_t v15 = v7 + 1;
  if (v7 + 1 >= v24) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(v22 + 8 * v15);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v7 + 2;
  if (v7 + 2 >= v24) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(v22 + 8 * v15);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v7 + 3;
  if (v7 + 3 >= v24)
  {
LABEL_26:
    swift_retain();
    return sub_1000423CC(v20, a2, v21, a3);
  }
  unint64_t v14 = *(void *)(v22 + 8 * v15);
  if (v14)
  {
LABEL_15:
    int64_t v7 = v15;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v7 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v7 >= v24) {
      goto LABEL_26;
    }
    unint64_t v14 = *(void *)(v22 + 8 * v7);
    ++v15;
    if (v14) {
      goto LABEL_16;
    }
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1000CC9EC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_1000CCA74(uint64_t a1, int *a2)
{
  *(void *)(v2 + 40) = a1;
  char v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 48) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1000CCB54;
  return v5(v2 + 16);
}

uint64_t sub_1000CCB54()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 40);
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v4 = *(void *)(v1 + 32);
  *(_OWORD *)uint64_t v2 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v4;
  char v5 = *(uint64_t (**)(void))(v3 + 8);
  return v5();
}

uint64_t sub_1000CCC88(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    unint64_t v4 = 0;
    uint64_t v25 = result + 32;
    uint64_t v5 = a2 + 56;
    uint64_t v6 = _swiftEmptyArrayStorage;
    unint64_t v26 = *(void *)(result + 16);
    while (1)
    {
      int64_t v24 = v6;
      if (v4 <= v2) {
        unint64_t v7 = v2;
      }
      else {
        unint64_t v7 = v4;
      }
      unint64_t v8 = v4;
      while (1)
      {
        if (v8 == v7)
        {
          __break(1u);
          return result;
        }
        unint64_t v4 = v8 + 1;
        if (*(void *)(a2 + 16)) {
          break;
        }
LABEL_8:
        unint64_t v8 = v4;
        if (v4 == v2) {
          return (uint64_t)v24;
        }
      }
      uint64_t v9 = (uint64_t *)(v25 + 16 * v8);
      uint64_t v11 = *v9;
      uint64_t v10 = v9[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v12 = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(a2 + 32);
      unint64_t v14 = v12 & ~v13;
      if (((*(void *)(v5 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
        goto LABEL_7;
      }
      uint64_t v15 = *(void *)(a2 + 48);
      unint64_t v16 = (void *)(v15 + 16 * v14);
      BOOL v17 = *v16 == v11 && v16[1] == v10;
      if (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
LABEL_24:
      uint64_t v6 = v24;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1000C4FFC(0, v24[2] + 1, 1);
        uint64_t v6 = v24;
      }
      unint64_t v22 = v6[2];
      unint64_t v21 = v6[3];
      if (v22 >= v21 >> 1)
      {
        uint64_t result = (uint64_t)sub_1000C4FFC((char *)(v21 > 1), v22 + 1, 1);
        uint64_t v6 = v24;
      }
      v6[2] = v22 + 1;
      BOOL v23 = &v6[2 * v22];
      void v23[4] = v11;
      void v23[5] = v10;
      unint64_t v2 = v26;
      if (v4 == v26) {
        return (uint64_t)v6;
      }
    }
    uint64_t v18 = ~v13;
    while (1)
    {
      unint64_t v14 = (v14 + 1) & v18;
      if (((*(void *)(v5 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
        break;
      }
      uint64_t v19 = (void *)(v15 + 16 * v14);
      BOOL v20 = *v19 == v11 && v19[1] == v10;
      if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_24;
      }
    }
LABEL_7:
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v2 = v26;
    goto LABEL_8;
  }
  return (uint64_t)_swiftEmptyArrayStorage;
}

uint64_t sub_1000CCEA0(uint64_t *a1)
{
  return sub_1000C99CC(a1, *(void **)(v1 + 16)) & 1;
}

uint64_t sub_1000CCEC0(uint64_t a1, uint64_t a2)
{
  sub_10002EB60(&qword_1001A3E68);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  int64_t v4 = 0;
  uint64_t v27 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v6 = a1 + 64;
  uint64_t v5 = v7;
  uint64_t v8 = 1 << *(unsigned char *)(v6 - 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v5;
  uint64_t v24 = v6;
  int64_t v25 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v26 = result + 64;
  uint64_t v29 = (void *)result;
  if (!v10) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v30 = (v10 - 1) & v10;
  int64_t v31 = v4;
  for (unint64_t i = __clz(__rbit64(v10)) | (v4 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v13 << 6))
  {
    unint64_t v16 = (uint64_t *)(*(void *)(v27 + 48) + 16 * i);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = *(void *)(*(void *)(v27 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v20 = sub_1000CCC88(v19, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v26 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t result = (uint64_t)v29;
    unint64_t v21 = (void *)(v29[6] + 16 * i);
    *unint64_t v21 = v17;
    v21[1] = v18;
    *(void *)(v29[7] + 8 * i) = v20;
    uint64_t v22 = v29[2];
    BOOL v12 = __OFADD__(v22, 1);
    uint64_t v23 = v22 + 1;
    if (v12)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    _OWORD v29[2] = v23;
    int64_t v4 = v31;
    unint64_t v10 = v30;
    if (v30) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v12 = __OFADD__(v4, 1);
    int64_t v13 = v4 + 1;
    if (v12) {
      goto LABEL_25;
    }
    if (v13 >= v25) {
      return result;
    }
    unint64_t v14 = *(void *)(v24 + 8 * v13);
    if (!v14) {
      break;
    }
LABEL_15:
    uint64_t v30 = (v14 - 1) & v14;
    int64_t v31 = v13;
  }
  int64_t v15 = v13 + 1;
  if (v13 + 1 >= v25) {
    return result;
  }
  unint64_t v14 = *(void *)(v24 + 8 * v15);
  if (v14) {
    goto LABEL_14;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v25) {
    return result;
  }
  unint64_t v14 = *(void *)(v24 + 8 * v15);
  if (v14) {
    goto LABEL_14;
  }
  int64_t v15 = v13 + 3;
  if (v13 + 3 >= v25) {
    return result;
  }
  unint64_t v14 = *(void *)(v24 + 8 * v15);
  if (v14)
  {
LABEL_14:
    int64_t v13 = v15;
    goto LABEL_15;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v25) {
      return result;
    }
    unint64_t v14 = *(void *)(v24 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_15;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1000CD114(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v2 + 16);
  *(void *)(v3 + 16) = v6;
  *(void *)uint64_t v6 = v3;
  *(void *)(v6 + 8) = sub_100053090;
  *(_OWORD *)(v6 + 32) = v7;
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  return _swift_task_switch(sub_1000CA014, 0, 0);
}